; ModuleID = 'tree-ssa-loop-ivopts.c'
source_filename = "tree-ssa-loop-ivopts.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.VEC_sbitmap_heap = type { %struct.VEC_sbitmap_base }
%struct.VEC_sbitmap_base = type { i32, i32, [1 x %struct.simple_bitmap_def*] }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.iv = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8, i8, i32 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.ivopts_data = type { %struct.loop*, %struct.pointer_map_t*, i32, i32, %struct.version_info*, %struct.bitmap_head_def*, %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_cand_p_heap*, %struct.bitmap_head_def*, i32, i8, i8 }
%struct.version_info = type { %union.tree_node*, %struct.iv*, i8, i32, i8 }
%struct.VEC_iv_use_p_heap = type { %struct.VEC_iv_use_p_base }
%struct.VEC_iv_use_p_base = type { i32, i32, [1 x %struct.iv_use*] }
%struct.iv_use = type { i32, i32, %struct.iv*, %union.gimple_statement_d*, %union.tree_node**, %struct.bitmap_head_def*, i32, %struct.cost_pair*, %struct.iv_cand* }
%struct.cost_pair = type { %struct.iv_cand*, %struct.comp_cost, %struct.bitmap_head_def*, %union.tree_node* }
%struct.comp_cost = type { i32, i32 }
%struct.iv_cand = type { i32, i8, i32, %union.gimple_statement_d*, %union.tree_node*, %union.tree_node*, %struct.iv*, i32, i32, %struct.iv_use*, %struct.bitmap_head_def* }
%struct.VEC_iv_cand_p_heap = type { %struct.VEC_iv_cand_p_base }
%struct.VEC_iv_cand_p_base = type { i32, i32, [1 x %struct.iv_cand*] }
%struct.VEC_address_cost_data_heap = type { %struct.VEC_address_cost_data_base }
%struct.VEC_address_cost_data_base = type { i32, i32, [1 x %struct.anon*] }
%struct.anon = type { i64, i64, [2 x [2 x [2 x [2 x i32]]]] }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.mbc_entry = type { i64, i32, i32 }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.iv_ca = type { i32, i32, %struct.cost_pair**, i32*, %struct.bitmap_head_def*, i32, i32, %struct.comp_cost, i32, i32*, %struct.comp_cost }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.ifs_ivopts_data = type { %struct.ivopts_data*, %union.gimple_statement_d*, %union.tree_node* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.affine_tree_combination = type { %union.tree_node*, %struct.double_int, i32, [8 x %struct.aff_comb_elt], %union.tree_node* }
%struct.aff_comb_elt = type { %union.tree_node*, %struct.double_int }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.iv_ca_delta = type { %struct.iv_use*, %struct.cost_pair*, %struct.cost_pair*, %struct.iv_ca_delta* }

@.str = private unnamed_addr constant [10 x i8] c"ssa name \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"  type \00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"  base \00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"  step \00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"  invariant \00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"  base object \00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"  is a biv\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"use %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"  generic\0A\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"  address\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"  compare\0A\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"tree-ssa-loop-ivopts.c\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.14 = private unnamed_addr constant [16 x i8] c"  in statement \00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"  at position \00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"  related candidates \00", align 1
@.str.17 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"candidate %d%s\0A\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c" (important)\00", align 1
@.str.20 = private unnamed_addr constant [14 x i8] c"  depends on \00", align 1
@.str.21 = private unnamed_addr constant [27 x i8] c"  final value replacement\0A\00", align 1
@.str.22 = private unnamed_addr constant [32 x i8] c"  incremented before exit test\0A\00", align 1
@.str.23 = private unnamed_addr constant [29 x i8] c"  incremented before use %d\0A\00", align 1
@.str.24 = private unnamed_addr constant [28 x i8] c"  incremented after use %d\0A\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"  incremented at end\0A\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"  original biv\0A\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@multiply_by_cost.costs = internal global %struct.htab* null, align 8, !dbg !0
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.27 = private unnamed_addr constant [37 x i8] c"Multiplication by %d in %s costs %d\0A\00", align 1
@mode_name = external dso_local constant [87 x i8*], align 16
@multiplier_allowed_in_address_p.valid_mult_list = internal global %struct.VEC_sbitmap_heap* null, align 8, !dbg !2600
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.28 = private unnamed_addr constant [23 x i8] c"  allowed multipliers:\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@tree_code_length = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.30 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@cfun = external dso_local global %struct.function*, align 8
@decl_rtl_to_reset = internal global %struct.VEC_tree_heap* null, align 8, !dbg !2607
@.str.31 = private unnamed_addr constant [20 x i8] c"Processing loop %d\0A\00", align 1
@.str.32 = private unnamed_addr constant [40 x i8] c"  single exit %d -> %d, exit condition \00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.33 = private unnamed_addr constant [24 x i8] c"  number of iterations \00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.35 = private unnamed_addr constant [23 x i8] c"Induction variables:\0A\0A\00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.36 = private unnamed_addr constant [8 x i8] c"Uses:\0A\0A\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.38 = private unnamed_addr constant [22 x i8] c" is invariant (%d)%s\0A\00", align 1
@.str.39 = private unnamed_addr constant [13 x i8] c", eliminable\00", align 1
@.str.40 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@extract_cond_operands.const_iv = internal global %struct.iv zeroinitializer, align 8, !dbg !2609
@extract_cond_operands.zero = internal global %union.tree_node* null, align 8, !dbg !2616
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.41 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.42 = private unnamed_addr constant [6 x i8] c"ivtmp\00", align 1
@fd_ivopts_data = internal global %struct.ivopts_data* null, align 8, !dbg !2618
@.str.43 = private unnamed_addr constant [27 x i8] c"Candidate %d is important\0A\00", align 1
@.str.44 = private unnamed_addr constant [35 x i8] c"Candidate %d is related to use %d\0A\00", align 1
@infinite_cost = internal constant %struct.comp_cost { i32 10000000, i32 10000000 }, align 4, !dbg !2620
@zero_cost = internal constant %struct.comp_cost zeroinitializer, align 4, !dbg !2623
@target_spill_cost = external dso_local global [2 x i32], align 4
@force_expr_to_var_cost.costs_initialized = internal global i8 0, align 1, !dbg !2625
@force_expr_to_var_cost.integer_cost = internal global [2 x i32] zeroinitializer, align 4, !dbg !2630
@force_expr_to_var_cost.symbol_cost = internal global [2 x i32] zeroinitializer, align 4, !dbg !2632
@force_expr_to_var_cost.address_cost = internal global [2 x i32] zeroinitializer, align 4, !dbg !2634
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.45 = private unnamed_addr constant [9 x i8] c"test_var\00", align 1
@.str.46 = private unnamed_addr constant [34 x i8] c"force_expr_to_var_cost %s costs:\0A\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"speed\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.49 = private unnamed_addr constant [14 x i8] c"  integer %d\0A\00", align 1
@.str.50 = private unnamed_addr constant [13 x i8] c"  symbol %d\0A\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"  address %d\0A\00", align 1
@.str.52 = private unnamed_addr constant [12 x i8] c"  other %d\0A\00", align 1
@add_cost.costs = internal global [87 x i32] zeroinitializer, align 16, !dbg !2636
@.str.53 = private unnamed_addr constant [25 x i8] c"Addition in %s costs %d\0A\00", align 1
@get_address_cost.address_cost_data_list = internal global %struct.VEC_address_cost_data_heap* null, align 8, !dbg !2644
@get_address_cost.has_preinc = internal global [87 x i8] zeroinitializer, align 16, !dbg !2649
@get_address_cost.has_postinc = internal global [87 x i8] zeroinitializer, align 16, !dbg !2652
@get_address_cost.has_predec = internal global [87 x i8] zeroinitializer, align 16, !dbg !2654
@get_address_cost.has_postdec = internal global [87 x i8] zeroinitializer, align 16, !dbg !2656
@ix86_isa_flags = external dso_local global i32, align 4
@.str.54 = private unnamed_addr constant [19 x i8] c"get_address_cost:\0A\00", align 1
@.str.55 = private unnamed_addr constant [20 x i8] c"  min offset %s %d\0A\00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c"  max offset %s %d\0A\00", align 1
@cse_not_expected = external dso_local global i32, align 4
@.str.57 = private unnamed_addr constant [16 x i8] c"Address costs:\0A\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"sym + \00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"var + \00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"cst + \00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"rat * \00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c"index costs %d\0A\00", align 1
@.str.63 = private unnamed_addr constant [27 x i8] c"  May include autoinc/dec\0A\00", align 1
@mode_size = external dso_local global [87 x i8], align 16
@x_rtl = external dso_local global %struct.rtl_data, align 8
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.64 = private unnamed_addr constant [18 x i8] c"Candidate costs:\0A\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"  cand\09cost\0A\00", align 1
@.str.66 = private unnamed_addr constant [9 x i8] c"  %d\09%d\0A\00", align 1
@.str.67 = private unnamed_addr constant [22 x i8] c"Use-candidate costs:\0A\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c"Use %d:\0A\00", align 1
@.str.69 = private unnamed_addr constant [31 x i8] c"  cand\09cost\09compl.\09depends on\0A\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"  %d\09%d\09%d\09\00", align 1
@.str.71 = private unnamed_addr constant [15 x i8] c"Global costs:\0A\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"  target_avail_regs %d\0A\00", align 1
@target_avail_regs = external dso_local global i32, align 4
@.str.73 = private unnamed_addr constant [22 x i8] c"  target_reg_cost %d\0A\00", align 1
@target_reg_cost = external dso_local global [2 x i32], align 4
@.str.74 = private unnamed_addr constant [24 x i8] c"  target_spill_cost %d\0A\00", align 1
@.str.75 = private unnamed_addr constant [16 x i8] c"  regs_used %d\0A\00", align 1
@.str.76 = private unnamed_addr constant [18 x i8] c"  cost for size:\0A\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"  ivs\09cost\0A\00", align 1
@.str.78 = private unnamed_addr constant [39 x i8] c"Unable to substitute for ivs, failed.\0A\00", align 1
@.str.79 = private unnamed_addr constant [28 x i8] c"Initial set of candidates:\0A\00", align 1
@.str.80 = private unnamed_addr constant [14 x i8] c"Improved to:\0A\00", align 1
@.str.81 = private unnamed_addr constant [32 x i8] c"Final cost %d (complexity %d)\0A\0A\00", align 1
@.str.82 = private unnamed_addr constant [14 x i8] c"  invariants \00", align 1
@.str.83 = private unnamed_addr constant [27 x i8] c"  cost %d (complexity %d)\0A\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"  candidates \00", align 1
@.str.85 = private unnamed_addr constant [5 x i8] c"%s%d\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c", \00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @single_dom_exit(%struct.loop* %loop) #0 !dbg !2662 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %exit = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2665, metadata !DIExpression()), !dbg !2666
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !2667, metadata !DIExpression()), !dbg !2668
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2669
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !2670
  store %struct.edge_def* %call, %struct.edge_def** %exit, align 8, !dbg !2668
  %1 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2671
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !2671
  br i1 %tobool, label %if.end, label %if.then, !dbg !2673

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !2674
  br label %return, !dbg !2674

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2675
  %3 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2677
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !2678
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2678
  %call1 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %2, %struct.basic_block_def* %4), !dbg !2679
  %tobool2 = icmp ne i8 %call1, 0, !dbg !2679
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !2680

if.then3:                                         ; preds = %if.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !2681
  br label %return, !dbg !2681

if.end4:                                          ; preds = %if.end
  %5 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2682
  store %struct.edge_def* %5, %struct.edge_def** %retval, align 8, !dbg !2683
  br label %return, !dbg !2683

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %6 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !2684
  ret %struct.edge_def* %6, !dbg !2684
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

declare dso_local zeroext i8 @just_once_each_iteration_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_iv(%struct._IO_FILE* %file, %struct.iv* %iv) #0 !dbg !2685 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %iv.addr = alloca %struct.iv*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2738, metadata !DIExpression()), !dbg !2739
  store %struct.iv* %iv, %struct.iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv** %iv.addr, metadata !2740, metadata !DIExpression()), !dbg !2741
  %0 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2742
  %ssa_name = getelementptr inbounds %struct.iv, %struct.iv* %0, i32 0, i32 3, !dbg !2744
  %1 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !2744
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !2742
  br i1 %tobool, label %if.then, label %if.end, !dbg !2745

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2746
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)), !dbg !2748
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2749
  %4 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2750
  %ssa_name1 = getelementptr inbounds %struct.iv, %struct.iv* %4, i32 0, i32 3, !dbg !2751
  %5 = load %union.tree_node*, %union.tree_node** %ssa_name1, align 8, !dbg !2751
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %5, i32 2), !dbg !2752
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2753
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2754
  br label %if.end, !dbg !2755

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2756
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)), !dbg !2757
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2758
  %9 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2759
  %base = getelementptr inbounds %struct.iv, %struct.iv* %9, i32 0, i32 0, !dbg !2759
  %10 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !2759
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !2759
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2759
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2759
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %11, i32 2), !dbg !2760
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2761
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2762
  %13 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2763
  %step = getelementptr inbounds %struct.iv, %struct.iv* %13, i32 0, i32 2, !dbg !2765
  %14 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !2765
  %tobool5 = icmp ne %union.tree_node* %14, null, !dbg !2763
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2766

if.then6:                                         ; preds = %if.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2767
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)), !dbg !2769
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2770
  %17 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2771
  %base8 = getelementptr inbounds %struct.iv, %struct.iv* %17, i32 0, i32 0, !dbg !2772
  %18 = load %union.tree_node*, %union.tree_node** %base8, align 8, !dbg !2772
  call void @print_generic_expr(%struct._IO_FILE* %16, %union.tree_node* %18, i32 2), !dbg !2773
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2774
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2775
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2776
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)), !dbg !2777
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2778
  %22 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2779
  %step11 = getelementptr inbounds %struct.iv, %struct.iv* %22, i32 0, i32 2, !dbg !2780
  %23 = load %union.tree_node*, %union.tree_node** %step11, align 8, !dbg !2780
  call void @print_generic_expr(%struct._IO_FILE* %21, %union.tree_node* %23, i32 2), !dbg !2781
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2782
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2783
  br label %if.end16, !dbg !2784

if.else:                                          ; preds = %if.end
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2785
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)), !dbg !2787
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2788
  %27 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2789
  %base14 = getelementptr inbounds %struct.iv, %struct.iv* %27, i32 0, i32 0, !dbg !2790
  %28 = load %union.tree_node*, %union.tree_node** %base14, align 8, !dbg !2790
  call void @print_generic_expr(%struct._IO_FILE* %26, %union.tree_node* %28, i32 2), !dbg !2791
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2792
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2793
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then6
  %30 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2794
  %base_object = getelementptr inbounds %struct.iv, %struct.iv* %30, i32 0, i32 1, !dbg !2796
  %31 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !2796
  %tobool17 = icmp ne %union.tree_node* %31, null, !dbg !2794
  br i1 %tobool17, label %if.then18, label %if.end22, !dbg !2797

if.then18:                                        ; preds = %if.end16
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2798
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0)), !dbg !2800
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2801
  %34 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2802
  %base_object20 = getelementptr inbounds %struct.iv, %struct.iv* %34, i32 0, i32 1, !dbg !2803
  %35 = load %union.tree_node*, %union.tree_node** %base_object20, align 8, !dbg !2803
  call void @print_generic_expr(%struct._IO_FILE* %33, %union.tree_node* %35, i32 2), !dbg !2804
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2805
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2806
  br label %if.end22, !dbg !2807

if.end22:                                         ; preds = %if.then18, %if.end16
  %37 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !2808
  %biv_p = getelementptr inbounds %struct.iv, %struct.iv* %37, i32 0, i32 4, !dbg !2810
  %38 = load i8, i8* %biv_p, align 8, !dbg !2810
  %tobool23 = icmp ne i8 %38, 0, !dbg !2808
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !2811

if.then24:                                        ; preds = %if.end22
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2812
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0)), !dbg !2813
  br label %if.end26, !dbg !2813

if.end26:                                         ; preds = %if.then24, %if.end22
  ret void, !dbg !2814
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_use(%struct._IO_FILE* %file, %struct.iv_use* %use) #0 !dbg !2815 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2818, metadata !DIExpression()), !dbg !2819
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !2820, metadata !DIExpression()), !dbg !2821
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2822
  %1 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2823
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %1, i32 0, i32 0, !dbg !2824
  %2 = load i32, i32* %id, align 8, !dbg !2824
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i32 %2), !dbg !2825
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2826
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %3, i32 0, i32 1, !dbg !2827
  %4 = load i32, i32* %type, align 4, !dbg !2827
  switch i32 %4, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
  ], !dbg !2828

sw.bb:                                            ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2829
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0)), !dbg !2831
  br label %sw.epilog, !dbg !2832

sw.bb2:                                           ; preds = %entry
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2833
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0)), !dbg !2834
  br label %sw.epilog, !dbg !2835

sw.bb4:                                           ; preds = %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2836
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0)), !dbg !2837
  br label %sw.epilog, !dbg !2838

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 455, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !2839
  br label %sw.epilog, !dbg !2840

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb2, %sw.bb
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2841
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i64 0, i64 0)), !dbg !2842
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2843
  %10 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2844
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %10, i32 0, i32 3, !dbg !2845
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2845
  call void @print_gimple_stmt(%struct._IO_FILE* %9, %union.gimple_statement_d* %11, i32 0, i32 0), !dbg !2846
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2847
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2848
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2849
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !2850
  %14 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2851
  %op_p = getelementptr inbounds %struct.iv_use, %struct.iv_use* %14, i32 0, i32 4, !dbg !2853
  %15 = load %union.tree_node**, %union.tree_node*** %op_p, align 8, !dbg !2853
  %tobool = icmp ne %union.tree_node** %15, null, !dbg !2851
  br i1 %tobool, label %if.then, label %if.end, !dbg !2854

if.then:                                          ; preds = %sw.epilog
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2855
  %17 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2856
  %op_p9 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %17, i32 0, i32 4, !dbg !2857
  %18 = load %union.tree_node**, %union.tree_node*** %op_p9, align 8, !dbg !2857
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !2858
  call void @print_generic_expr(%struct._IO_FILE* %16, %union.tree_node* %19, i32 2), !dbg !2859
  br label %if.end, !dbg !2859

if.end:                                           ; preds = %if.then, %sw.epilog
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2860
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2861
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2862
  %22 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2863
  %iv = getelementptr inbounds %struct.iv_use, %struct.iv_use* %22, i32 0, i32 2, !dbg !2864
  %23 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !2864
  call void @dump_iv(%struct._IO_FILE* %21, %struct.iv* %23), !dbg !2865
  %24 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2866
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %24, i32 0, i32 5, !dbg !2868
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !2868
  %tobool11 = icmp ne %struct.bitmap_head_def* %25, null, !dbg !2866
  br i1 %tobool11, label %if.then12, label %if.end15, !dbg !2869

if.then12:                                        ; preds = %if.end
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2870
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0)), !dbg !2872
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2873
  %28 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !2873
  %related_cands14 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %28, i32 0, i32 5, !dbg !2873
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands14, align 8, !dbg !2873
  call void @bitmap_print(%struct._IO_FILE* %27, %struct.bitmap_head_def* %29, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2873
  br label %if.end15, !dbg !2874

if.end15:                                         ; preds = %if.then12, %if.end
  ret void, !dbg !2875
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @bitmap_print(%struct._IO_FILE*, %struct.bitmap_head_def*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_uses(%struct._IO_FILE* %file, %struct.ivopts_data* %data) #0 !dbg !2876 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2879, metadata !DIExpression()), !dbg !2880
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !2881, metadata !DIExpression()), !dbg !2882
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2883, metadata !DIExpression()), !dbg !2884
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !2885, metadata !DIExpression()), !dbg !2886
  store i32 0, i32* %i, align 4, !dbg !2887
  br label %for.cond, !dbg !2889

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2890
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !2892
  %call = call i32 @n_iv_uses(%struct.ivopts_data* %1), !dbg !2893
  %cmp = icmp ult i32 %0, %call, !dbg !2894
  br i1 %cmp, label %for.body, label %for.end, !dbg !2895

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !2896
  %3 = load i32, i32* %i, align 4, !dbg !2898
  %call1 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %2, i32 %3), !dbg !2899
  store %struct.iv_use* %call1, %struct.iv_use** %use, align 8, !dbg !2900
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2901
  %5 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !2902
  call void @dump_use(%struct._IO_FILE* %4, %struct.iv_use* %5), !dbg !2903
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2904
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2905
  br label %for.inc, !dbg !2906

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !2907
  %inc = add i32 %7, 1, !dbg !2907
  store i32 %inc, i32* %i, align 4, !dbg !2907
  br label %for.cond, !dbg !2908, !llvm.loop !2909

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2911
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @n_iv_uses(%struct.ivopts_data* %data) #0 !dbg !2912 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !2915, metadata !DIExpression()), !dbg !2916
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !2917
  %iv_uses = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 6, !dbg !2917
  %1 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %iv_uses, align 8, !dbg !2917
  %tobool = icmp ne %struct.VEC_iv_use_p_heap* %1, null, !dbg !2917
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2917

cond.true:                                        ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !2917
  %iv_uses1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 6, !dbg !2917
  %3 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %iv_uses1, align 8, !dbg !2917
  %base = getelementptr inbounds %struct.VEC_iv_use_p_heap, %struct.VEC_iv_use_p_heap* %3, i32 0, i32 0, !dbg !2917
  br label %cond.end, !dbg !2917

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2917

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_use_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2917
  %call = call i32 @VEC_iv_use_p_base_length(%struct.VEC_iv_use_p_base* %cond), !dbg !2917
  ret i32 %call, !dbg !2918
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_use* @iv_use(%struct.ivopts_data* %data, i32 %i) #0 !dbg !2919 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i.addr = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !2922, metadata !DIExpression()), !dbg !2923
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !2924, metadata !DIExpression()), !dbg !2925
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !2926
  %iv_uses = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 6, !dbg !2926
  %1 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %iv_uses, align 8, !dbg !2926
  %tobool = icmp ne %struct.VEC_iv_use_p_heap* %1, null, !dbg !2926
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2926

cond.true:                                        ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !2926
  %iv_uses1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 6, !dbg !2926
  %3 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %iv_uses1, align 8, !dbg !2926
  %base = getelementptr inbounds %struct.VEC_iv_use_p_heap, %struct.VEC_iv_use_p_heap* %3, i32 0, i32 0, !dbg !2926
  br label %cond.end, !dbg !2926

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2926

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_use_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2926
  %4 = load i32, i32* %i.addr, align 4, !dbg !2926
  %call = call %struct.iv_use* @VEC_iv_use_p_base_index(%struct.VEC_iv_use_p_base* %cond, i32 %4), !dbg !2926
  ret %struct.iv_use* %call, !dbg !2927
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_cand(%struct._IO_FILE* %file, %struct.iv_cand* %cand) #0 !dbg !2928 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %iv = alloca %struct.iv*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2931, metadata !DIExpression()), !dbg !2932
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !2933, metadata !DIExpression()), !dbg !2934
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !2935, metadata !DIExpression()), !dbg !2936
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2937
  %iv1 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 6, !dbg !2938
  %1 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !2938
  store %struct.iv* %1, %struct.iv** %iv, align 8, !dbg !2936
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2939
  %3 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2940
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %3, i32 0, i32 0, !dbg !2941
  %4 = load i32, i32* %id, align 8, !dbg !2941
  %5 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2942
  %important = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %5, i32 0, i32 1, !dbg !2943
  %6 = load i8, i8* %important, align 4, !dbg !2943
  %conv = zext i8 %6 to i32, !dbg !2942
  %tobool = icmp ne i32 %conv, 0, !dbg !2942
  %7 = zext i1 %tobool to i64, !dbg !2942
  %cond = select i1 %tobool, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), !dbg !2942
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0), i32 %4, i8* %cond), !dbg !2944
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2945
  %depends_on = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %8, i32 0, i32 10, !dbg !2947
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !2947
  %tobool2 = icmp ne %struct.bitmap_head_def* %9, null, !dbg !2945
  br i1 %tobool2, label %if.then, label %if.end, !dbg !2948

if.then:                                          ; preds = %entry
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2949
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i64 0, i64 0)), !dbg !2951
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2952
  %12 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2952
  %depends_on4 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %12, i32 0, i32 10, !dbg !2952
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on4, align 8, !dbg !2952
  call void @bitmap_print(%struct._IO_FILE* %11, %struct.bitmap_head_def* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2952
  br label %if.end, !dbg !2953

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !2954
  %tobool5 = icmp ne %struct.iv* %14, null, !dbg !2954
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !2956

if.then6:                                         ; preds = %if.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2957
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0)), !dbg !2959
  br label %return, !dbg !2960

if.end8:                                          ; preds = %if.end
  %16 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2961
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %16, i32 0, i32 2, !dbg !2962
  %17 = load i32, i32* %pos, align 8, !dbg !2962
  switch i32 %17, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb10
    i32 3, label %sw.bb13
    i32 1, label %sw.bb17
    i32 4, label %sw.bb19
  ], !dbg !2963

sw.bb:                                            ; preds = %if.end8
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2964
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22, i64 0, i64 0)), !dbg !2966
  br label %sw.epilog, !dbg !2967

sw.bb10:                                          ; preds = %if.end8
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2968
  %20 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2969
  %ainc_use = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %20, i32 0, i32 9, !dbg !2970
  %21 = load %struct.iv_use*, %struct.iv_use** %ainc_use, align 8, !dbg !2970
  %id11 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %21, i32 0, i32 0, !dbg !2971
  %22 = load i32, i32* %id11, align 8, !dbg !2971
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.23, i64 0, i64 0), i32 %22), !dbg !2972
  br label %sw.epilog, !dbg !2973

sw.bb13:                                          ; preds = %if.end8
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2974
  %24 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !2975
  %ainc_use14 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %24, i32 0, i32 9, !dbg !2976
  %25 = load %struct.iv_use*, %struct.iv_use** %ainc_use14, align 8, !dbg !2976
  %id15 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %25, i32 0, i32 0, !dbg !2977
  %26 = load i32, i32* %id15, align 8, !dbg !2977
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.24, i64 0, i64 0), i32 %26), !dbg !2978
  br label %sw.epilog, !dbg !2979

sw.bb17:                                          ; preds = %if.end8
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2980
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0)), !dbg !2981
  br label %sw.epilog, !dbg !2982

sw.bb19:                                          ; preds = %if.end8
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2983
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i64 0, i64 0)), !dbg !2984
  br label %sw.epilog, !dbg !2985

sw.epilog:                                        ; preds = %if.end8, %sw.bb19, %sw.bb17, %sw.bb13, %sw.bb10, %sw.bb
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2986
  %30 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !2987
  call void @dump_iv(%struct._IO_FILE* %29, %struct.iv* %30), !dbg !2988
  br label %return, !dbg !2989

return:                                           ; preds = %sw.epilog, %if.then6
  ret void, !dbg !2989
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %expr) #0 !dbg !2990 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %codeclass = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2993, metadata !DIExpression()), !dbg !2994
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2995, metadata !DIExpression()), !dbg !2996
  call void @llvm.dbg.declare(metadata i32* %codeclass, metadata !2997, metadata !DIExpression()), !dbg !2998
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2999
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !2999
  br i1 %tobool, label %if.end, label %if.then, !dbg !3001

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3002
  br label %return, !dbg !3002

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3003
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3003
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3003
  %bf.load = load i64, i64* %2, align 8, !dbg !3003
  %bf.clear = and i64 %bf.load, 65535, !dbg !3003
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3003
  store i32 %bf.cast, i32* %code, align 4, !dbg !3004
  %3 = load i32, i32* %code, align 4, !dbg !3005
  %idxprom = sext i32 %3 to i64, !dbg !3005
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3005
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3005
  store i32 %4, i32* %codeclass, align 4, !dbg !3006
  %5 = load i32, i32* %code, align 4, !dbg !3007
  %cmp = icmp eq i32 %5, 141, !dbg !3009
  br i1 %cmp, label %if.then1, label %if.end8, !dbg !3010

if.then1:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3011
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3011
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3011
  %bf.load3 = load i64, i64* %7, align 8, !dbg !3011
  %bf.lshr = lshr i64 %bf.load3, 22, !dbg !3011
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !3011
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3011
  %cmp6 = icmp ne i32 %bf.cast5, 0, !dbg !3012
  %conv = zext i1 %cmp6 to i32, !dbg !3012
  %conv7 = trunc i32 %conv to i8, !dbg !3011
  store i8 %conv7, i8* %retval, align 1, !dbg !3013
  br label %return, !dbg !3013

if.end8:                                          ; preds = %if.end
  %8 = load i32, i32* %code, align 4, !dbg !3014
  %cmp9 = icmp eq i32 %8, 23, !dbg !3016
  br i1 %cmp9, label %if.then13, label %lor.lhs.false, !dbg !3017

lor.lhs.false:                                    ; preds = %if.end8
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3018
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %9), !dbg !3019
  %conv11 = zext i8 %call to i32, !dbg !3019
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !3019
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !3020

if.then13:                                        ; preds = %lor.lhs.false, %if.end8
  store i8 0, i8* %retval, align 1, !dbg !3021
  br label %return, !dbg !3021

if.end14:                                         ; preds = %lor.lhs.false
  %10 = load i32, i32* %code, align 4, !dbg !3022
  %cmp15 = icmp eq i32 %10, 121, !dbg !3024
  br i1 %cmp15, label %if.then17, label %if.end22, !dbg !3025

if.then17:                                        ; preds = %if.end14
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3026
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !3026
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3026
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3026
  %call19 = call zeroext i8 @for_each_index(%union.tree_node** %arrayidx18, i8 (%union.tree_node*, %union.tree_node**, i8*)* @idx_contains_abnormal_ssa_name_p, i8* null), !dbg !3027
  %tobool20 = icmp ne i8 %call19, 0, !dbg !3028
  %lnot = xor i1 %tobool20, true, !dbg !3028
  %lnot.ext = zext i1 %lnot to i32, !dbg !3028
  %conv21 = trunc i32 %lnot.ext to i8, !dbg !3028
  store i8 %conv21, i8* %retval, align 1, !dbg !3029
  br label %return, !dbg !3029

if.end22:                                         ; preds = %if.end14
  %12 = load i32, i32* %codeclass, align 4, !dbg !3030
  switch i32 %12, label %sw.default [
    i32 7, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb30
  ], !dbg !3031

sw.bb:                                            ; preds = %if.end22, %if.end22
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3032
  %exp23 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !3032
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !3032
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 1, !dbg !3032
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !3032
  %call26 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %14), !dbg !3035
  %tobool27 = icmp ne i8 %call26, 0, !dbg !3035
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !3036

if.then28:                                        ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !3037
  br label %return, !dbg !3037

if.end29:                                         ; preds = %sw.bb
  br label %sw.bb30, !dbg !3038

sw.bb30:                                          ; preds = %if.end22, %if.end29
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3039
  %exp31 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !3039
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !3039
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 0, !dbg !3039
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !3039
  %call34 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %16), !dbg !3041
  %tobool35 = icmp ne i8 %call34, 0, !dbg !3041
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !3042

if.then36:                                        ; preds = %sw.bb30
  store i8 1, i8* %retval, align 1, !dbg !3043
  br label %return, !dbg !3043

if.end37:                                         ; preds = %sw.bb30
  br label %sw.epilog, !dbg !3044

sw.default:                                       ; preds = %if.end22
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 703, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3045
  br label %sw.epilog, !dbg !3046

sw.epilog:                                        ; preds = %sw.default, %if.end37
  store i8 0, i8* %retval, align 1, !dbg !3047
  br label %return, !dbg !3047

return:                                           ; preds = %sw.epilog, %if.then36, %if.then28, %if.then17, %if.then13, %if.then1, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !3048
  ret i8 %17, !dbg !3048
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local zeroext i8 @for_each_index(%union.tree_node**, i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @idx_contains_abnormal_ssa_name_p(%union.tree_node* %base, %union.tree_node** %index, i8* %data) #0 !dbg !3049 {
entry:
  %retval = alloca i8, align 1
  %base.addr = alloca %union.tree_node*, align 8
  %index.addr = alloca %union.tree_node**, align 8
  %data.addr = alloca i8*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !3052, metadata !DIExpression()), !dbg !3053
  store %union.tree_node** %index, %union.tree_node*** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %index.addr, metadata !3054, metadata !DIExpression()), !dbg !3055
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3056, metadata !DIExpression()), !dbg !3057
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3058
  %base1 = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3058
  %1 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3058
  %bf.load = load i64, i64* %1, align 8, !dbg !3058
  %bf.clear = and i64 %bf.load, 65535, !dbg !3058
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3058
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !3060
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3061

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3062
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3062
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3062
  %bf.load3 = load i64, i64* %3, align 8, !dbg !3062
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3062
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3062
  %cmp6 = icmp eq i32 %bf.cast5, 46, !dbg !3063
  br i1 %cmp6, label %if.then, label %if.end15, !dbg !3064

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3065
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !3065
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3065
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !3065
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3065
  %call = call zeroext i8 @abnormal_ssa_name_p(%union.tree_node* %5), !dbg !3068
  %tobool = icmp ne i8 %call, 0, !dbg !3068
  br i1 %tobool, label %if.then7, label %if.end, !dbg !3069

if.then7:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !3070
  br label %return, !dbg !3070

if.end:                                           ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !3071
  %exp8 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !3071
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !3071
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 3, !dbg !3071
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !3071
  %call11 = call zeroext i8 @abnormal_ssa_name_p(%union.tree_node* %7), !dbg !3073
  %tobool12 = icmp ne i8 %call11, 0, !dbg !3073
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !3074

if.then13:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3075
  br label %return, !dbg !3075

if.end14:                                         ; preds = %if.end
  br label %if.end15, !dbg !3076

if.end15:                                         ; preds = %if.end14, %lor.lhs.false
  %8 = load %union.tree_node**, %union.tree_node*** %index.addr, align 8, !dbg !3077
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !3078
  %call16 = call zeroext i8 @abnormal_ssa_name_p(%union.tree_node* %9), !dbg !3079
  %tobool17 = icmp ne i8 %call16, 0, !dbg !3080
  %lnot = xor i1 %tobool17, true, !dbg !3080
  %lnot.ext = zext i1 %lnot to i32, !dbg !3080
  %conv = trunc i32 %lnot.ext to i8, !dbg !3080
  store i8 %conv, i8* %retval, align 1, !dbg !3081
  br label %return, !dbg !3081

return:                                           ; preds = %if.end15, %if.then13, %if.then7
  %10 = load i8, i8* %retval, align 1, !dbg !3082
  ret i8 %10, !dbg !3082
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %loop, %union.tree_node* %expr) #0 !dbg !3083 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3086, metadata !DIExpression()), !dbg !3087
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3088, metadata !DIExpression()), !dbg !3089
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !3090, metadata !DIExpression()), !dbg !3091
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3092, metadata !DIExpression()), !dbg !3093
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3094, metadata !DIExpression()), !dbg !3095
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3096
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !3096
  %cmp = icmp ugt i32 %call, 0, !dbg !3096
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3096

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 1290, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3096
  br label %cond.end, !dbg !3096

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3096

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3096
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3097
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %1), !dbg !3099
  %tobool = icmp ne i8 %call1, 0, !dbg !3099
  br i1 %tobool, label %if.then, label %if.end, !dbg !3100

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !3101
  br label %return, !dbg !3101

if.end:                                           ; preds = %cond.end
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3102
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3102
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3102
  %bf.load = load i64, i64* %3, align 8, !dbg !3102
  %bf.clear = and i64 %bf.load, 65535, !dbg !3102
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3102
  %cmp2 = icmp eq i32 %bf.cast, 141, !dbg !3104
  br i1 %cmp2, label %if.then3, label %if.end10, !dbg !3105

if.then3:                                         ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3106
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !3106
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3106
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3106
  %call4 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %5), !dbg !3108
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %def_bb, align 8, !dbg !3109
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !3110
  %tobool5 = icmp ne %struct.basic_block_def* %6, null, !dbg !3110
  br i1 %tobool5, label %land.lhs.true, label %if.end9, !dbg !3112

land.lhs.true:                                    ; preds = %if.then3
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3113
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !3114
  %call6 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %7, %struct.basic_block_def* %8), !dbg !3115
  %conv = zext i8 %call6 to i32, !dbg !3115
  %tobool7 = icmp ne i32 %conv, 0, !dbg !3115
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !3116

if.then8:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !3117
  br label %return, !dbg !3117

if.end9:                                          ; preds = %land.lhs.true, %if.then3
  store i8 1, i8* %retval, align 1, !dbg !3118
  br label %return, !dbg !3118

if.end10:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3119
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3119
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !3119
  %bf.load12 = load i64, i64* %10, align 8, !dbg !3119
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !3119
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !3119
  %idxprom = sext i32 %bf.cast14 to i64, !dbg !3119
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3119
  %11 = load i32, i32* %arrayidx, align 4, !dbg !3119
  %cmp15 = icmp uge i32 %11, 4, !dbg !3119
  br i1 %cmp15, label %land.lhs.true17, label %if.then26, !dbg !3119

land.lhs.true17:                                  ; preds = %if.end10
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3119
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3119
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3119
  %bf.load19 = load i64, i64* %13, align 8, !dbg !3119
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !3119
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3119
  %idxprom22 = sext i32 %bf.cast21 to i64, !dbg !3119
  %arrayidx23 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom22, !dbg !3119
  %14 = load i32, i32* %arrayidx23, align 4, !dbg !3119
  %cmp24 = icmp ule i32 %14, 10, !dbg !3119
  br i1 %cmp24, label %if.end27, label %if.then26, !dbg !3121

if.then26:                                        ; preds = %land.lhs.true17, %if.end10
  store i8 0, i8* %retval, align 1, !dbg !3122
  br label %return, !dbg !3122

if.end27:                                         ; preds = %land.lhs.true17
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3123
  %call28 = call i32 @tree_operand_length(%union.tree_node* %15), !dbg !3123
  store i32 %call28, i32* %len, align 4, !dbg !3124
  store i32 0, i32* %i, align 4, !dbg !3125
  br label %for.cond, !dbg !3127

for.cond:                                         ; preds = %for.inc, %if.end27
  %16 = load i32, i32* %i, align 4, !dbg !3128
  %17 = load i32, i32* %len, align 4, !dbg !3130
  %cmp29 = icmp ult i32 %16, %17, !dbg !3131
  br i1 %cmp29, label %for.body, label %for.end, !dbg !3132

for.body:                                         ; preds = %for.cond
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3133
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3135
  %exp = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !3135
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3135
  %20 = load i32, i32* %i, align 4, !dbg !3135
  %idxprom31 = zext i32 %20 to i64, !dbg !3135
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom31, !dbg !3135
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !3135
  %call33 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %18, %union.tree_node* %21), !dbg !3136
  %tobool34 = icmp ne i8 %call33, 0, !dbg !3136
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !3137

if.then35:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !3138
  br label %return, !dbg !3138

if.end36:                                         ; preds = %for.body
  br label %for.inc, !dbg !3139

for.inc:                                          ; preds = %if.end36
  %22 = load i32, i32* %i, align 4, !dbg !3140
  %inc = add i32 %22, 1, !dbg !3140
  store i32 %inc, i32* %i, align 4, !dbg !3140
  br label %for.cond, !dbg !3141, !llvm.loop !3142

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !3144
  br label %return, !dbg !3144

return:                                           ; preds = %for.end, %if.then35, %if.then26, %if.end9, %if.then8, %if.then
  %23 = load i8, i8* %retval, align 1, !dbg !3145
  ret i8 %23, !dbg !3145
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !3146 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3151, metadata !DIExpression()), !dbg !3152
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3153
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3153
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3153
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3153
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3153

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3153
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3153
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3153
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3153
  br label %cond.end, !dbg !3153

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3153

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3153
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3153
  ret i32 %call, !dbg !3154
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3155 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3159, metadata !DIExpression()), !dbg !3160
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3161
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3162
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3163
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3163
  ret %struct.basic_block_def* %1, !dbg !3164
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !3165 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !3169, metadata !DIExpression()), !dbg !3170
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3171
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3171
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3171
  %bf.load = load i64, i64* %1, align 8, !dbg !3171
  %bf.clear = and i64 %bf.load, 65535, !dbg !3171
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3171
  %idxprom = sext i32 %bf.cast to i64, !dbg !3171
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3171
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3171
  %cmp = icmp eq i32 %2, 9, !dbg !3171
  br i1 %cmp, label %if.then, label %if.else, !dbg !3173

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3174
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3174
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3174
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3174
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !3174
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !3174
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3174
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !3174
  %5 = load i64, i64* %low, align 8, !dbg !3174
  %conv = trunc i64 %5 to i32, !dbg !3174
  store i32 %conv, i32* %retval, align 4, !dbg !3175
  br label %return, !dbg !3175

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3176
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3176
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3176
  %bf.load4 = load i64, i64* %7, align 8, !dbg !3176
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3176
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3176
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !3176
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !3176
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !3176
  %conv9 = zext i8 %8 to i32, !dbg !3176
  store i32 %conv9, i32* %retval, align 4, !dbg !3177
  br label %return, !dbg !3177

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3178
  ret i32 %9, !dbg !3178
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_invariant_in_loop_p(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !3179 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3182, metadata !DIExpression()), !dbg !3183
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3184, metadata !DIExpression()), !dbg !3185
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3186, metadata !DIExpression()), !dbg !3187
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3188, metadata !DIExpression()), !dbg !3189
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3190
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !3190
  %cmp = icmp ugt i32 %call, 0, !dbg !3190
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3190

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 1326, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3190
  br label %cond.end, !dbg !3190

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3190

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3190
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3191
  %call1 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %1), !dbg !3192
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !3193
  store i32 0, i32* %i, align 4, !dbg !3194
  br label %for.cond, !dbg !3196

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !3197
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3199
  %call2 = call i32 @gimple_num_ops(%union.gimple_statement_d* %3), !dbg !3200
  %cmp3 = icmp ult i32 %2, %call2, !dbg !3201
  br i1 %cmp3, label %for.body, label %for.end, !dbg !3202

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !3203, metadata !DIExpression()), !dbg !3205
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3206
  %5 = load i32, i32* %i, align 4, !dbg !3207
  %call4 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %4, i32 %5), !dbg !3208
  store %union.tree_node* %call4, %union.tree_node** %op, align 8, !dbg !3205
  %6 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3209
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3211
  %cmp5 = icmp ne %union.tree_node* %6, %7, !dbg !3212
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !3213

land.lhs.true:                                    ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3214
  %9 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3215
  %call6 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %8, %union.tree_node* %9), !dbg !3216
  %tobool = icmp ne i8 %call6, 0, !dbg !3216
  br i1 %tobool, label %if.end, label %if.then, !dbg !3217

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !3218
  br label %return, !dbg !3218

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !3219

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3220
  %inc = add i32 %10, 1, !dbg !3220
  store i32 %inc, i32* %i, align 4, !dbg !3220
  br label %for.cond, !dbg !3221, !llvm.loop !3222

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !3224
  br label %return, !dbg !3224

return:                                           ; preds = %for.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !3225
  ret i8 %11, !dbg !3225
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !3226 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3229, metadata !DIExpression()), !dbg !3230
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3231
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3232
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !3233
  %1 = load i32, i32* %num_ops, align 4, !dbg !3233
  ret i32 %1, !dbg !3234
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3235 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3238, metadata !DIExpression()), !dbg !3239
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3240, metadata !DIExpression()), !dbg !3241
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3242
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3244
  %tobool = icmp ne i8 %call, 0, !dbg !3244
  br i1 %tobool, label %if.then, label %if.else, !dbg !3245

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3246
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !3248
  %2 = load i32, i32* %i.addr, align 4, !dbg !3249
  %idxprom = zext i32 %2 to i64, !dbg !3248
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !3248
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3248
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3250
  br label %return, !dbg !3250

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3251
  br label %return, !dbg !3251

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3252
  ret %union.tree_node* %4, !dbg !3252
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @tree_int_cst_sign_bit(%union.tree_node* %t) #0 !dbg !3253 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %bitno = alloca i32, align 4
  %w = alloca i64, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3254, metadata !DIExpression()), !dbg !3255
  call void @llvm.dbg.declare(metadata i32* %bitno, metadata !3256, metadata !DIExpression()), !dbg !3257
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3258
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !3258
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3258
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3258
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !3258
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !3258
  %bf.load = load i32, i32* %precision, align 4, !dbg !3258
  %bf.clear = and i32 %bf.load, 1023, !dbg !3258
  %sub = sub nsw i32 %bf.clear, 1, !dbg !3259
  store i32 %sub, i32* %bitno, align 4, !dbg !3257
  call void @llvm.dbg.declare(metadata i64* %w, metadata !3260, metadata !DIExpression()), !dbg !3261
  %2 = load i32, i32* %bitno, align 4, !dbg !3262
  %cmp = icmp ult i32 %2, 64, !dbg !3264
  br i1 %cmp, label %if.then, label %if.else, !dbg !3265

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3266
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !3266
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3266
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !3266
  %4 = load i64, i64* %low, align 8, !dbg !3266
  store i64 %4, i64* %w, align 8, !dbg !3267
  br label %if.end, !dbg !3268

if.else:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3269
  %int_cst3 = bitcast %union.tree_node* %5 to %struct.tree_int_cst*, !dbg !3269
  %int_cst4 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst3, i32 0, i32 1, !dbg !3269
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst4, i32 0, i32 1, !dbg !3269
  %6 = load i64, i64* %high, align 8, !dbg !3269
  store i64 %6, i64* %w, align 8, !dbg !3271
  %7 = load i32, i32* %bitno, align 4, !dbg !3272
  %sub5 = sub i32 %7, 64, !dbg !3272
  store i32 %sub5, i32* %bitno, align 4, !dbg !3272
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load i64, i64* %w, align 8, !dbg !3273
  %9 = load i32, i32* %bitno, align 4, !dbg !3274
  %sh_prom = zext i32 %9 to i64, !dbg !3275
  %shr = lshr i64 %8, %sh_prom, !dbg !3275
  %and = and i64 %shr, 1, !dbg !3276
  %conv = trunc i64 %and to i32, !dbg !3277
  ret i32 %conv, !dbg !3278
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @multiply_by_cost(i64 %cst, i32 %mode, i8 zeroext %speed) #0 !dbg !2 {
entry:
  %retval = alloca i32, align 4
  %cst.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %speed.addr = alloca i8, align 1
  %cached = alloca %struct.mbc_entry**, align 8
  %act = alloca %struct.mbc_entry, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  store i64 %cst, i64* %cst.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cst.addr, metadata !3279, metadata !DIExpression()), !dbg !3280
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3281, metadata !DIExpression()), !dbg !3282
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !3283, metadata !DIExpression()), !dbg !3284
  call void @llvm.dbg.declare(metadata %struct.mbc_entry*** %cached, metadata !3285, metadata !DIExpression()), !dbg !3286
  call void @llvm.dbg.declare(metadata %struct.mbc_entry* %act, metadata !3287, metadata !DIExpression()), !dbg !3288
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !3289, metadata !DIExpression()), !dbg !3290
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !3291, metadata !DIExpression()), !dbg !3292
  %0 = load %struct.htab*, %struct.htab** @multiply_by_cost.costs, align 8, !dbg !3293
  %tobool = icmp ne %struct.htab* %0, null, !dbg !3293
  br i1 %tobool, label %if.end, label %if.then, !dbg !3295

if.then:                                          ; preds = %entry
  %call = call %struct.htab* @htab_create(i64 100, i32 (i8*)* @mbc_entry_hash, i32 (i8*, i8*)* @mbc_entry_eq, void (i8*)* @free), !dbg !3296
  store %struct.htab* %call, %struct.htab** @multiply_by_cost.costs, align 8, !dbg !3297
  br label %if.end, !dbg !3298

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !3299
  %mode1 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %act, i32 0, i32 1, !dbg !3300
  store i32 %1, i32* %mode1, align 8, !dbg !3301
  %2 = load i64, i64* %cst.addr, align 8, !dbg !3302
  %cst2 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %act, i32 0, i32 0, !dbg !3303
  store i64 %2, i64* %cst2, align 8, !dbg !3304
  %3 = load %struct.htab*, %struct.htab** @multiply_by_cost.costs, align 8, !dbg !3305
  %4 = bitcast %struct.mbc_entry* %act to i8*, !dbg !3306
  %call3 = call i8** @htab_find_slot(%struct.htab* %3, i8* %4, i32 1), !dbg !3307
  %5 = bitcast i8** %call3 to %struct.mbc_entry**, !dbg !3308
  store %struct.mbc_entry** %5, %struct.mbc_entry*** %cached, align 8, !dbg !3309
  %6 = load %struct.mbc_entry**, %struct.mbc_entry*** %cached, align 8, !dbg !3310
  %7 = load %struct.mbc_entry*, %struct.mbc_entry** %6, align 8, !dbg !3312
  %tobool4 = icmp ne %struct.mbc_entry* %7, null, !dbg !3312
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !3313

if.then5:                                         ; preds = %if.end
  %8 = load %struct.mbc_entry**, %struct.mbc_entry*** %cached, align 8, !dbg !3314
  %9 = load %struct.mbc_entry*, %struct.mbc_entry** %8, align 8, !dbg !3315
  %cost6 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %9, i32 0, i32 2, !dbg !3316
  %10 = load i32, i32* %cost6, align 4, !dbg !3316
  store i32 %10, i32* %retval, align 4, !dbg !3317
  br label %return, !dbg !3317

if.end7:                                          ; preds = %if.end
  %call8 = call i8* @xmalloc(i64 16), !dbg !3318
  %11 = bitcast i8* %call8 to %struct.mbc_entry*, !dbg !3318
  %12 = load %struct.mbc_entry**, %struct.mbc_entry*** %cached, align 8, !dbg !3319
  store %struct.mbc_entry* %11, %struct.mbc_entry** %12, align 8, !dbg !3320
  %13 = load i32, i32* %mode.addr, align 4, !dbg !3321
  %14 = load %struct.mbc_entry**, %struct.mbc_entry*** %cached, align 8, !dbg !3322
  %15 = load %struct.mbc_entry*, %struct.mbc_entry** %14, align 8, !dbg !3323
  %mode9 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %15, i32 0, i32 1, !dbg !3324
  store i32 %13, i32* %mode9, align 8, !dbg !3325
  %16 = load i64, i64* %cst.addr, align 8, !dbg !3326
  %17 = load %struct.mbc_entry**, %struct.mbc_entry*** %cached, align 8, !dbg !3327
  %18 = load %struct.mbc_entry*, %struct.mbc_entry** %17, align 8, !dbg !3328
  %cst10 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %18, i32 0, i32 0, !dbg !3329
  store i64 %16, i64* %cst10, align 8, !dbg !3330
  call void @start_sequence(), !dbg !3331
  %19 = load i32, i32* %mode.addr, align 4, !dbg !3332
  %20 = load i32, i32* %mode.addr, align 4, !dbg !3333
  %call11 = call %struct.rtx_def* @gen_raw_REG(i32 %20, i32 58), !dbg !3334
  %21 = load i64, i64* %cst.addr, align 8, !dbg !3335
  %22 = load i32, i32* %mode.addr, align 4, !dbg !3336
  %call12 = call %struct.rtx_def* @gen_int_mode(i64 %21, i32 %22), !dbg !3337
  %call13 = call %struct.rtx_def* @expand_mult(i32 %19, %struct.rtx_def* %call11, %struct.rtx_def* %call12, %struct.rtx_def* null, i32 0), !dbg !3338
  %call14 = call %struct.rtx_def* @get_insns(), !dbg !3339
  store %struct.rtx_def* %call14, %struct.rtx_def** %seq, align 8, !dbg !3340
  call void @end_sequence(), !dbg !3341
  %23 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !3342
  %24 = load i8, i8* %speed.addr, align 1, !dbg !3343
  %call15 = call i32 @seq_cost(%struct.rtx_def* %23, i8 zeroext %24), !dbg !3344
  store i32 %call15, i32* %cost, align 4, !dbg !3345
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3346
  %tobool16 = icmp ne %struct._IO_FILE* %25, null, !dbg !3346
  br i1 %tobool16, label %land.lhs.true, label %if.end20, !dbg !3348

land.lhs.true:                                    ; preds = %if.end7
  %26 = load i32, i32* @dump_flags, align 4, !dbg !3349
  %and = and i32 %26, 8, !dbg !3350
  %tobool17 = icmp ne i32 %and, 0, !dbg !3350
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !3351

if.then18:                                        ; preds = %land.lhs.true
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3352
  %28 = load i64, i64* %cst.addr, align 8, !dbg !3353
  %conv = trunc i64 %28 to i32, !dbg !3354
  %29 = load i32, i32* %mode.addr, align 4, !dbg !3355
  %idxprom = zext i32 %29 to i64, !dbg !3355
  %arrayidx = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom, !dbg !3355
  %30 = load i8*, i8** %arrayidx, align 8, !dbg !3355
  %31 = load i32, i32* %cost, align 4, !dbg !3356
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.27, i64 0, i64 0), i32 %conv, i8* %30, i32 %31), !dbg !3357
  br label %if.end20, !dbg !3357

if.end20:                                         ; preds = %if.then18, %land.lhs.true, %if.end7
  %32 = load i32, i32* %cost, align 4, !dbg !3358
  %33 = load %struct.mbc_entry**, %struct.mbc_entry*** %cached, align 8, !dbg !3359
  %34 = load %struct.mbc_entry*, %struct.mbc_entry** %33, align 8, !dbg !3360
  %cost21 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %34, i32 0, i32 2, !dbg !3361
  store i32 %32, i32* %cost21, align 4, !dbg !3362
  %35 = load i32, i32* %cost, align 4, !dbg !3363
  store i32 %35, i32* %retval, align 4, !dbg !3364
  br label %return, !dbg !3364

return:                                           ; preds = %if.end20, %if.then5
  %36 = load i32, i32* %retval, align 4, !dbg !3365
  ret i32 %36, !dbg !3365
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @mbc_entry_hash(i8* %entry1) #0 !dbg !3366 {
entry:
  %entry.addr = alloca i8*, align 8
  %e = alloca %struct.mbc_entry*, align 8
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !3367, metadata !DIExpression()), !dbg !3368
  call void @llvm.dbg.declare(metadata %struct.mbc_entry** %e, metadata !3369, metadata !DIExpression()), !dbg !3370
  %0 = load i8*, i8** %entry.addr, align 8, !dbg !3371
  %1 = bitcast i8* %0 to %struct.mbc_entry*, !dbg !3372
  store %struct.mbc_entry* %1, %struct.mbc_entry** %e, align 8, !dbg !3370
  %2 = load %struct.mbc_entry*, %struct.mbc_entry** %e, align 8, !dbg !3373
  %mode = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %2, i32 0, i32 1, !dbg !3374
  %3 = load i32, i32* %mode, align 8, !dbg !3374
  %mul = mul i32 57, %3, !dbg !3375
  %4 = load %struct.mbc_entry*, %struct.mbc_entry** %e, align 8, !dbg !3376
  %cst = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %4, i32 0, i32 0, !dbg !3377
  %5 = load i64, i64* %cst, align 8, !dbg !3377
  %rem = srem i64 %5, 877, !dbg !3378
  %conv = trunc i64 %rem to i32, !dbg !3379
  %add = add i32 %mul, %conv, !dbg !3380
  ret i32 %add, !dbg !3381
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mbc_entry_eq(i8* %entry1, i8* %entry2) #0 !dbg !3382 {
entry:
  %entry1.addr = alloca i8*, align 8
  %entry2.addr = alloca i8*, align 8
  %e1 = alloca %struct.mbc_entry*, align 8
  %e2 = alloca %struct.mbc_entry*, align 8
  store i8* %entry1, i8** %entry1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry1.addr, metadata !3383, metadata !DIExpression()), !dbg !3384
  store i8* %entry2, i8** %entry2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry2.addr, metadata !3385, metadata !DIExpression()), !dbg !3386
  call void @llvm.dbg.declare(metadata %struct.mbc_entry** %e1, metadata !3387, metadata !DIExpression()), !dbg !3388
  %0 = load i8*, i8** %entry1.addr, align 8, !dbg !3389
  %1 = bitcast i8* %0 to %struct.mbc_entry*, !dbg !3390
  store %struct.mbc_entry* %1, %struct.mbc_entry** %e1, align 8, !dbg !3388
  call void @llvm.dbg.declare(metadata %struct.mbc_entry** %e2, metadata !3391, metadata !DIExpression()), !dbg !3392
  %2 = load i8*, i8** %entry2.addr, align 8, !dbg !3393
  %3 = bitcast i8* %2 to %struct.mbc_entry*, !dbg !3394
  store %struct.mbc_entry* %3, %struct.mbc_entry** %e2, align 8, !dbg !3392
  %4 = load %struct.mbc_entry*, %struct.mbc_entry** %e1, align 8, !dbg !3395
  %mode = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %4, i32 0, i32 1, !dbg !3396
  %5 = load i32, i32* %mode, align 8, !dbg !3396
  %6 = load %struct.mbc_entry*, %struct.mbc_entry** %e2, align 8, !dbg !3397
  %mode1 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %6, i32 0, i32 1, !dbg !3398
  %7 = load i32, i32* %mode1, align 8, !dbg !3398
  %cmp = icmp eq i32 %5, %7, !dbg !3399
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3400

land.rhs:                                         ; preds = %entry
  %8 = load %struct.mbc_entry*, %struct.mbc_entry** %e1, align 8, !dbg !3401
  %cst = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %8, i32 0, i32 0, !dbg !3402
  %9 = load i64, i64* %cst, align 8, !dbg !3402
  %10 = load %struct.mbc_entry*, %struct.mbc_entry** %e2, align 8, !dbg !3403
  %cst2 = getelementptr inbounds %struct.mbc_entry, %struct.mbc_entry* %10, i32 0, i32 0, !dbg !3404
  %11 = load i64, i64* %cst2, align 8, !dbg !3404
  %cmp3 = icmp eq i64 %9, %11, !dbg !3405
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !3406
  %land.ext = zext i1 %12 to i32, !dbg !3400
  ret i32 %land.ext, !dbg !3407
}

declare dso_local void @free(i8*) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @expand_mult(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @gen_raw_REG(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @seq_cost(%struct.rtx_def* %seq, i8 zeroext %speed) #0 !dbg !3408 {
entry:
  %seq.addr = alloca %struct.rtx_def*, align 8
  %speed.addr = alloca i8, align 1
  %cost = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %seq, %struct.rtx_def** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !3413, metadata !DIExpression()), !dbg !3414
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !3415, metadata !DIExpression()), !dbg !3416
  store i32 0, i32* %cost, align 4, !dbg !3416
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !3417, metadata !DIExpression()), !dbg !3418
  br label %for.cond, !dbg !3419

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3420
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !3423
  br i1 %tobool, label %for.body, label %for.end, !dbg !3423

for.body:                                         ; preds = %for.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3424
  %bf.load = load i32, i32* %2, align 8, !dbg !3424
  %bf.clear = and i32 %bf.load, 65535, !dbg !3424
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !3424
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !3424

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3424
  %bf.load1 = load i32, i32* %4, align 8, !dbg !3424
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3424
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !3424
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !3424

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3424
  %bf.load5 = load i32, i32* %6, align 8, !dbg !3424
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !3424
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !3424
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !3424

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3424
  %bf.load9 = load i32, i32* %8, align 8, !dbg !3424
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !3424
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !3424
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !3424

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !3424
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3424
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !3424
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3424
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3424
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3424
  %bf.load12 = load i32, i32* %11, align 8, !dbg !3424
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !3424
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !3424
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !3424

cond.true15:                                      ; preds = %cond.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3424
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !3424
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !3424
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !3424
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !3424
  br label %cond.end, !dbg !3424

cond.false:                                       ; preds = %cond.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %15 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3424
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !3424
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !3424
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !3424
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !3424
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !3424
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %14, %struct.rtx_def* %16), !dbg !3424
  br label %cond.end, !dbg !3424

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %13, %cond.true15 ], [ %call, %cond.false ], !dbg !3424
  br label %cond.end25, !dbg !3424

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !3424

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !3424
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !3426
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !3427
  %tobool27 = icmp ne %struct.rtx_def* %17, null, !dbg !3427
  br i1 %tobool27, label %if.then, label %if.else, !dbg !3429

if.then:                                          ; preds = %cond.end25
  %18 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !3430
  %19 = load i8, i8* %speed.addr, align 1, !dbg !3431
  %call28 = call i32 @rtx_cost(%struct.rtx_def* %18, i32 23, i8 zeroext %19), !dbg !3432
  %20 = load i32, i32* %cost, align 4, !dbg !3433
  %add = add i32 %20, %call28, !dbg !3433
  store i32 %add, i32* %cost, align 4, !dbg !3433
  br label %if.end, !dbg !3434

if.else:                                          ; preds = %cond.end25
  %21 = load i32, i32* %cost, align 4, !dbg !3435
  %inc = add i32 %21, 1, !dbg !3435
  store i32 %inc, i32* %cost, align 4, !dbg !3435
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !3436

for.inc:                                          ; preds = %if.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !3437
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !3437
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !3437
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 2, !dbg !3437
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !3437
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !3437
  store %struct.rtx_def* %23, %struct.rtx_def** %seq.addr, align 8, !dbg !3438
  br label %for.cond, !dbg !3439, !llvm.loop !3440

for.end:                                          ; preds = %for.cond
  %24 = load i32, i32* %cost, align 4, !dbg !3442
  ret i32 %24, !dbg !3443
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @multiplier_allowed_in_address_p(i64 %ratio, i32 %mode, i8 zeroext %as) #0 !dbg !2602 {
entry:
  %retval = alloca i8, align 1
  %ratio.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %as.addr = alloca i8, align 1
  %data_index = alloca i32, align 4
  %valid_mult = alloca %struct.simple_bitmap_def*, align 8
  %address_mode = alloca i32, align 4
  %reg1 = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %i = alloca i64, align 8
  store i64 %ratio, i64* %ratio.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ratio.addr, metadata !3444, metadata !DIExpression()), !dbg !3445
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3446, metadata !DIExpression()), !dbg !3447
  store i8 %as, i8* %as.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %as.addr, metadata !3448, metadata !DIExpression()), !dbg !3449
  call void @llvm.dbg.declare(metadata i32* %data_index, metadata !3450, metadata !DIExpression()), !dbg !3451
  %0 = load i8, i8* %as.addr, align 1, !dbg !3452
  %conv = zext i8 %0 to i32, !dbg !3453
  %mul = mul nsw i32 %conv, 87, !dbg !3454
  %1 = load i32, i32* %mode.addr, align 4, !dbg !3455
  %add = add nsw i32 %mul, %1, !dbg !3456
  store i32 %add, i32* %data_index, align 4, !dbg !3451
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %valid_mult, metadata !3457, metadata !DIExpression()), !dbg !3458
  %2 = load i32, i32* %data_index, align 4, !dbg !3459
  %3 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, align 8, !dbg !3461
  %tobool = icmp ne %struct.VEC_sbitmap_heap* %3, null, !dbg !3461
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3461

cond.true:                                        ; preds = %entry
  %4 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, align 8, !dbg !3461
  %base = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %4, i32 0, i32 0, !dbg !3461
  br label %cond.end, !dbg !3461

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3461

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sbitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3461
  %call = call i32 @VEC_sbitmap_base_length(%struct.VEC_sbitmap_base* %cond), !dbg !3461
  %cmp = icmp uge i32 %2, %call, !dbg !3462
  br i1 %cmp, label %if.then, label %if.end, !dbg !3463

if.then:                                          ; preds = %cond.end
  %5 = load i32, i32* %data_index, align 4, !dbg !3464
  %add2 = add i32 %5, 1, !dbg !3464
  call void @VEC_sbitmap_heap_safe_grow_cleared(%struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, i32 %add2), !dbg !3464
  br label %if.end, !dbg !3464

if.end:                                           ; preds = %if.then, %cond.end
  %6 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, align 8, !dbg !3465
  %tobool3 = icmp ne %struct.VEC_sbitmap_heap* %6, null, !dbg !3465
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !3465

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, align 8, !dbg !3465
  %base5 = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %7, i32 0, i32 0, !dbg !3465
  br label %cond.end7, !dbg !3465

cond.false6:                                      ; preds = %if.end
  br label %cond.end7, !dbg !3465

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_sbitmap_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !3465
  %8 = load i32, i32* %data_index, align 4, !dbg !3465
  %call9 = call %struct.simple_bitmap_def* @VEC_sbitmap_base_index(%struct.VEC_sbitmap_base* %cond8, i32 %8), !dbg !3465
  store %struct.simple_bitmap_def* %call9, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3466
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3467
  %tobool10 = icmp ne %struct.simple_bitmap_def* %9, null, !dbg !3467
  br i1 %tobool10, label %if.end55, label %if.then11, !dbg !3469

if.then11:                                        ; preds = %cond.end7
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !3470, metadata !DIExpression()), !dbg !3472
  %10 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !3473
  %11 = load i8, i8* %as.addr, align 1, !dbg !3474
  %call12 = call i32 %10(i8 zeroext %11), !dbg !3475
  store i32 %call12, i32* %address_mode, align 4, !dbg !3472
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg1, metadata !3476, metadata !DIExpression()), !dbg !3477
  %12 = load i32, i32* %address_mode, align 4, !dbg !3478
  %call13 = call %struct.rtx_def* @gen_raw_REG(i32 %12, i32 58), !dbg !3479
  store %struct.rtx_def* %call13, %struct.rtx_def** %reg1, align 8, !dbg !3477
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !3480, metadata !DIExpression()), !dbg !3481
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3482, metadata !DIExpression()), !dbg !3483
  %call14 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 257), !dbg !3484
  store %struct.simple_bitmap_def* %call14, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3485
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3486
  call void @sbitmap_zero(%struct.simple_bitmap_def* %13), !dbg !3487
  %14 = load i32, i32* %address_mode, align 4, !dbg !3488
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg1, align 8, !dbg !3488
  %call15 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %14, %struct.rtx_def* %15, %struct.rtx_def* null), !dbg !3488
  store %struct.rtx_def* %call15, %struct.rtx_def** %addr, align 8, !dbg !3489
  store i64 -128, i64* %i, align 8, !dbg !3490
  br label %for.cond, !dbg !3492

for.cond:                                         ; preds = %for.inc, %if.then11
  %16 = load i64, i64* %i, align 8, !dbg !3493
  %cmp16 = icmp sle i64 %16, 128, !dbg !3495
  br i1 %cmp16, label %for.body, label %for.end, !dbg !3496

for.body:                                         ; preds = %for.cond
  %17 = load i64, i64* %i, align 8, !dbg !3497
  %18 = load i32, i32* %address_mode, align 4, !dbg !3499
  %call18 = call %struct.rtx_def* @gen_int_mode(i64 %17, i32 %18), !dbg !3500
  %19 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !3501
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3501
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3501
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !3501
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3501
  store %struct.rtx_def* %call18, %struct.rtx_def** %rt_rtx, align 8, !dbg !3502
  %20 = load i32, i32* %mode.addr, align 4, !dbg !3503
  %21 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !3505
  %22 = load i8, i8* %as.addr, align 1, !dbg !3506
  %call19 = call i32 @memory_address_addr_space_p(i32 %20, %struct.rtx_def* %21, i8 zeroext %22), !dbg !3507
  %tobool20 = icmp ne i32 %call19, 0, !dbg !3507
  br i1 %tobool20, label %if.then21, label %if.end24, !dbg !3508

if.then21:                                        ; preds = %for.body
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3509
  %24 = load i64, i64* %i, align 8, !dbg !3510
  %add22 = add nsw i64 %24, 128, !dbg !3511
  %conv23 = trunc i64 %add22 to i32, !dbg !3510
  call void @SET_BIT(%struct.simple_bitmap_def* %23, i32 %conv23), !dbg !3512
  br label %if.end24, !dbg !3512

if.end24:                                         ; preds = %if.then21, %for.body
  br label %for.inc, !dbg !3513

for.inc:                                          ; preds = %if.end24
  %25 = load i64, i64* %i, align 8, !dbg !3514
  %inc = add nsw i64 %25, 1, !dbg !3514
  store i64 %inc, i64* %i, align 8, !dbg !3514
  br label %for.cond, !dbg !3515, !llvm.loop !3516

for.end:                                          ; preds = %for.cond
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3518
  %tobool25 = icmp ne %struct._IO_FILE* %26, null, !dbg !3518
  br i1 %tobool25, label %land.lhs.true, label %if.end47, !dbg !3520

land.lhs.true:                                    ; preds = %for.end
  %27 = load i32, i32* @dump_flags, align 4, !dbg !3521
  %and = and i32 %27, 8, !dbg !3522
  %tobool26 = icmp ne i32 %and, 0, !dbg !3522
  br i1 %tobool26, label %if.then27, label %if.end47, !dbg !3523

if.then27:                                        ; preds = %land.lhs.true
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3524
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.28, i64 0, i64 0)), !dbg !3526
  store i64 -128, i64* %i, align 8, !dbg !3527
  br label %for.cond29, !dbg !3529

for.cond29:                                       ; preds = %for.inc42, %if.then27
  %29 = load i64, i64* %i, align 8, !dbg !3530
  %cmp30 = icmp sle i64 %29, 128, !dbg !3532
  br i1 %cmp30, label %for.body32, label %for.end44, !dbg !3533

for.body32:                                       ; preds = %for.cond29
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3534
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %30, i32 0, i32 3, !dbg !3534
  %31 = load i64, i64* %i, align 8, !dbg !3534
  %add33 = add nsw i64 %31, 128, !dbg !3534
  %div = sdiv i64 %add33, 64, !dbg !3534
  %arrayidx34 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %div, !dbg !3534
  %32 = load i64, i64* %arrayidx34, align 8, !dbg !3534
  %33 = load i64, i64* %i, align 8, !dbg !3534
  %add35 = add nsw i64 %33, 128, !dbg !3534
  %rem = srem i64 %add35, 64, !dbg !3534
  %shr = lshr i64 %32, %rem, !dbg !3534
  %and36 = and i64 %shr, 1, !dbg !3534
  %tobool37 = icmp ne i64 %and36, 0, !dbg !3534
  br i1 %tobool37, label %if.then38, label %if.end41, !dbg !3536

if.then38:                                        ; preds = %for.body32
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3537
  %35 = load i64, i64* %i, align 8, !dbg !3538
  %conv39 = trunc i64 %35 to i32, !dbg !3539
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i32 %conv39), !dbg !3540
  br label %if.end41, !dbg !3540

if.end41:                                         ; preds = %if.then38, %for.body32
  br label %for.inc42, !dbg !3534

for.inc42:                                        ; preds = %if.end41
  %36 = load i64, i64* %i, align 8, !dbg !3541
  %inc43 = add nsw i64 %36, 1, !dbg !3541
  store i64 %inc43, i64* %i, align 8, !dbg !3541
  br label %for.cond29, !dbg !3542, !llvm.loop !3543

for.end44:                                        ; preds = %for.cond29
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3545
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3546
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3547
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3548
  br label %if.end47, !dbg !3549

if.end47:                                         ; preds = %for.end44, %land.lhs.true, %for.end
  %39 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, align 8, !dbg !3550
  %tobool48 = icmp ne %struct.VEC_sbitmap_heap* %39, null, !dbg !3550
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !3550

cond.true49:                                      ; preds = %if.end47
  %40 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** @multiplier_allowed_in_address_p.valid_mult_list, align 8, !dbg !3550
  %base50 = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %40, i32 0, i32 0, !dbg !3550
  br label %cond.end52, !dbg !3550

cond.false51:                                     ; preds = %if.end47
  br label %cond.end52, !dbg !3550

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_sbitmap_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !3550
  %41 = load i32, i32* %data_index, align 4, !dbg !3550
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3550
  %call54 = call %struct.simple_bitmap_def* @VEC_sbitmap_base_replace(%struct.VEC_sbitmap_base* %cond53, i32 %41, %struct.simple_bitmap_def* %42), !dbg !3550
  br label %if.end55, !dbg !3551

if.end55:                                         ; preds = %cond.end52, %cond.end7
  %43 = load i64, i64* %ratio.addr, align 8, !dbg !3552
  %cmp56 = icmp sgt i64 %43, 128, !dbg !3554
  br i1 %cmp56, label %if.then60, label %lor.lhs.false, !dbg !3555

lor.lhs.false:                                    ; preds = %if.end55
  %44 = load i64, i64* %ratio.addr, align 8, !dbg !3556
  %cmp58 = icmp slt i64 %44, -128, !dbg !3557
  br i1 %cmp58, label %if.then60, label %if.end61, !dbg !3558

if.then60:                                        ; preds = %lor.lhs.false, %if.end55
  store i8 0, i8* %retval, align 1, !dbg !3559
  br label %return, !dbg !3559

if.end61:                                         ; preds = %lor.lhs.false
  %45 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %valid_mult, align 8, !dbg !3560
  %elms62 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %45, i32 0, i32 3, !dbg !3560
  %46 = load i64, i64* %ratio.addr, align 8, !dbg !3560
  %add63 = add nsw i64 %46, 128, !dbg !3560
  %div64 = sdiv i64 %add63, 64, !dbg !3560
  %arrayidx65 = getelementptr inbounds [1 x i64], [1 x i64]* %elms62, i64 0, i64 %div64, !dbg !3560
  %47 = load i64, i64* %arrayidx65, align 8, !dbg !3560
  %48 = load i64, i64* %ratio.addr, align 8, !dbg !3560
  %add66 = add nsw i64 %48, 128, !dbg !3560
  %rem67 = srem i64 %add66, 64, !dbg !3560
  %shr68 = lshr i64 %47, %rem67, !dbg !3560
  %and69 = and i64 %shr68, 1, !dbg !3560
  %conv70 = trunc i64 %and69 to i8, !dbg !3560
  store i8 %conv70, i8* %retval, align 1, !dbg !3561
  br label %return, !dbg !3561

return:                                           ; preds = %if.end61, %if.then60
  %49 = load i8, i8* %retval, align 1, !dbg !3562
  ret i8 %49, !dbg !3562
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sbitmap_base_length(%struct.VEC_sbitmap_base* %vec_) #0 !dbg !3563 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_base*, align 8
  store %struct.VEC_sbitmap_base* %vec_, %struct.VEC_sbitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_base** %vec_.addr, metadata !3568, metadata !DIExpression()), !dbg !3569
  %0 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3569
  %tobool = icmp ne %struct.VEC_sbitmap_base* %0, null, !dbg !3569
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3569

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3569
  %num = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %1, i32 0, i32 0, !dbg !3569
  %2 = load i32, i32* %num, align 8, !dbg !3569
  br label %cond.end, !dbg !3569

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3569
  ret i32 %cond, !dbg !3569
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sbitmap_heap_safe_grow_cleared(%struct.VEC_sbitmap_heap** %vec_, i32 %size_) #0 !dbg !3570 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_sbitmap_heap** %vec_, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_heap*** %vec_.addr, metadata !3574, metadata !DIExpression()), !dbg !3575
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3576, metadata !DIExpression()), !dbg !3575
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !3577, metadata !DIExpression()), !dbg !3575
  %0 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !3575
  %1 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %0, align 8, !dbg !3575
  %tobool = icmp ne %struct.VEC_sbitmap_heap* %1, null, !dbg !3575
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3575

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !3575
  %3 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %2, align 8, !dbg !3575
  %base = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %3, i32 0, i32 0, !dbg !3575
  br label %cond.end, !dbg !3575

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3575

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sbitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3575
  %call = call i32 @VEC_sbitmap_base_length(%struct.VEC_sbitmap_base* %cond), !dbg !3575
  store i32 %call, i32* %oldsize, align 4, !dbg !3575
  %4 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !3575
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3575
  call void @VEC_sbitmap_heap_safe_grow(%struct.VEC_sbitmap_heap** %4, i32 %5), !dbg !3575
  %6 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !3575
  %7 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %6, align 8, !dbg !3575
  %tobool1 = icmp ne %struct.VEC_sbitmap_heap* %7, null, !dbg !3575
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3575

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !3575
  %9 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %8, align 8, !dbg !3575
  %base3 = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %9, i32 0, i32 0, !dbg !3575
  br label %cond.end5, !dbg !3575

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3575

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sbitmap_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3575
  %call7 = call %struct.simple_bitmap_def** @VEC_sbitmap_base_address(%struct.VEC_sbitmap_base* %cond6), !dbg !3575
  %10 = load i32, i32* %oldsize, align 4, !dbg !3575
  %idxprom = sext i32 %10 to i64, !dbg !3575
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %call7, i64 %idxprom, !dbg !3575
  %11 = bitcast %struct.simple_bitmap_def** %arrayidx to i8*, !dbg !3575
  %12 = load i32, i32* %size_.addr, align 4, !dbg !3575
  %13 = load i32, i32* %oldsize, align 4, !dbg !3575
  %sub = sub nsw i32 %12, %13, !dbg !3575
  %conv = sext i32 %sub to i64, !dbg !3575
  %mul = mul i64 8, %conv, !dbg !3575
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !3575
  ret void, !dbg !3575
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.simple_bitmap_def* @VEC_sbitmap_base_index(%struct.VEC_sbitmap_base* %vec_, i32 %ix_) #0 !dbg !3578 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_sbitmap_base* %vec_, %struct.VEC_sbitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_base** %vec_.addr, metadata !3581, metadata !DIExpression()), !dbg !3582
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3583, metadata !DIExpression()), !dbg !3582
  %0 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3582
  %tobool = icmp ne %struct.VEC_sbitmap_base* %0, null, !dbg !3582
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3582

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3582
  %2 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3582
  %num = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %2, i32 0, i32 0, !dbg !3582
  %3 = load i32, i32* %num, align 8, !dbg !3582
  %cmp = icmp ult i32 %1, %3, !dbg !3582
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3584
  %land.ext = zext i1 %4 to i32, !dbg !3582
  %5 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3582
  %vec = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %5, i32 0, i32 2, !dbg !3582
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3582
  %idxprom = zext i32 %6 to i64, !dbg !3582
  %arrayidx = getelementptr inbounds [1 x %struct.simple_bitmap_def*], [1 x %struct.simple_bitmap_def*]* %vec, i64 0, i64 %idxprom, !dbg !3582
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !3582
  ret %struct.simple_bitmap_def* %7, !dbg !3582
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @memory_address_addr_space_p(i32, %struct.rtx_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !3585 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !3588, metadata !DIExpression()), !dbg !3589
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !3590, metadata !DIExpression()), !dbg !3591
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3592
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3594
  %1 = load i8*, i8** %popcount, align 8, !dbg !3594
  %tobool = icmp ne i8* %1, null, !dbg !3592
  br i1 %tobool, label %if.then, label %if.end7, !dbg !3595

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !3596, metadata !DIExpression()), !dbg !3598
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3599
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !3599
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !3599
  %div = udiv i32 %3, 64, !dbg !3599
  %idxprom = zext i32 %div to i64, !dbg !3599
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !3599
  %4 = load i64, i64* %arrayidx, align 8, !dbg !3599
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !3599
  %rem = urem i32 %5, 64, !dbg !3599
  %sh_prom = zext i32 %rem to i64, !dbg !3599
  %shr = lshr i64 %4, %sh_prom, !dbg !3599
  %and = and i64 %shr, 1, !dbg !3599
  %conv = trunc i64 %and to i8, !dbg !3599
  store i8 %conv, i8* %oldbit, align 1, !dbg !3600
  %6 = load i8, i8* %oldbit, align 1, !dbg !3601
  %tobool1 = icmp ne i8 %6, 0, !dbg !3601
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3603

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3604
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !3605
  %8 = load i8*, i8** %popcount3, align 8, !dbg !3605
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !3606
  %div4 = udiv i32 %9, 64, !dbg !3607
  %idxprom5 = zext i32 %div4 to i64, !dbg !3604
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !3604
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !3608
  %inc = add i8 %10, 1, !dbg !3608
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !3608
  br label %if.end, !dbg !3604

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !3609

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !3610
  %rem8 = urem i32 %11, 64, !dbg !3611
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !3612
  %shl = shl i64 1, %sh_prom9, !dbg !3612
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !3613
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !3614
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !3615
  %div11 = udiv i32 %13, 64, !dbg !3616
  %idxprom12 = zext i32 %div11 to i64, !dbg !3613
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !3613
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !3617
  %or = or i64 %14, %shl, !dbg !3617
  store i64 %or, i64* %arrayidx13, align 8, !dbg !3617
  ret void, !dbg !3618
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.simple_bitmap_def* @VEC_sbitmap_base_replace(%struct.VEC_sbitmap_base* %vec_, i32 %ix_, %struct.simple_bitmap_def* %obj_) #0 !dbg !3619 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.simple_bitmap_def*, align 8
  %old_obj_ = alloca %struct.simple_bitmap_def*, align 8
  store %struct.VEC_sbitmap_base* %vec_, %struct.VEC_sbitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_base** %vec_.addr, metadata !3623, metadata !DIExpression()), !dbg !3624
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3625, metadata !DIExpression()), !dbg !3624
  store %struct.simple_bitmap_def* %obj_, %struct.simple_bitmap_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %obj_.addr, metadata !3626, metadata !DIExpression()), !dbg !3624
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %old_obj_, metadata !3627, metadata !DIExpression()), !dbg !3624
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3624
  %1 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3624
  %num = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %1, i32 0, i32 0, !dbg !3624
  %2 = load i32, i32* %num, align 8, !dbg !3624
  %cmp = icmp ult i32 %0, %2, !dbg !3624
  %conv = zext i1 %cmp to i32, !dbg !3624
  %3 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3624
  %vec = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %3, i32 0, i32 2, !dbg !3624
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3624
  %idxprom = zext i32 %4 to i64, !dbg !3624
  %arrayidx = getelementptr inbounds [1 x %struct.simple_bitmap_def*], [1 x %struct.simple_bitmap_def*]* %vec, i64 0, i64 %idxprom, !dbg !3624
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !3624
  store %struct.simple_bitmap_def* %5, %struct.simple_bitmap_def** %old_obj_, align 8, !dbg !3624
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %obj_.addr, align 8, !dbg !3624
  %7 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !3624
  %vec1 = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %7, i32 0, i32 2, !dbg !3624
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3624
  %idxprom2 = zext i32 %8 to i64, !dbg !3624
  %arrayidx3 = getelementptr inbounds [1 x %struct.simple_bitmap_def*], [1 x %struct.simple_bitmap_def*]* %vec1, i64 0, i64 %idxprom2, !dbg !3624
  store %struct.simple_bitmap_def* %6, %struct.simple_bitmap_def** %arrayidx3, align 8, !dbg !3624
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %old_obj_, align 8, !dbg !3624
  ret %struct.simple_bitmap_def* %9, !dbg !3624
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree_ssa_iv_optimize() #0 !dbg !3628 {
entry:
  %loop = alloca %struct.loop*, align 8
  %data = alloca %struct.ivopts_data, align 8
  %li = alloca %struct.loop_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3631, metadata !DIExpression()), !dbg !3632
  call void @llvm.dbg.declare(metadata %struct.ivopts_data* %data, metadata !3633, metadata !DIExpression()), !dbg !3634
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !3635, metadata !DIExpression()), !dbg !3641
  call void @tree_ssa_iv_optimize_init(%struct.ivopts_data* %data), !dbg !3642
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !3643
  br label %for.cond, !dbg !3643

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3645
  %tobool = icmp ne %struct.loop* %0, null, !dbg !3643
  br i1 %tobool, label %for.body, label %for.end, !dbg !3643

for.body:                                         ; preds = %for.cond
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3647
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !3647
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !3650

land.lhs.true:                                    ; preds = %for.body
  %2 = load i32, i32* @dump_flags, align 4, !dbg !3651
  %and = and i32 %2, 8, !dbg !3652
  %tobool2 = icmp ne i32 %and, 0, !dbg !3652
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3653

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3654
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3655
  call void @flow_loop_dump(%struct.loop* %3, %struct._IO_FILE* %4, void (%struct.loop*, %struct._IO_FILE*, i32)* null, i32 1), !dbg !3656
  br label %if.end, !dbg !3656

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3657
  %call = call zeroext i8 @tree_ssa_iv_optimize_loop(%struct.ivopts_data* %data, %struct.loop* %5), !dbg !3658
  br label %for.inc, !dbg !3659

for.inc:                                          ; preds = %if.end
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !3645
  br label %for.cond, !dbg !3645, !llvm.loop !3660

for.end:                                          ; preds = %for.cond
  call void @tree_ssa_iv_optimize_finalize(%struct.ivopts_data* %data), !dbg !3662
  ret void, !dbg !3663
}

; Function Attrs: noinline nounwind uwtable
define internal void @tree_ssa_iv_optimize_init(%struct.ivopts_data* %data) #0 !dbg !3664 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !3667, metadata !DIExpression()), !dbg !3668
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3669
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3669
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3669
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3669
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !3669
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3669
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !3669
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3669

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3669
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3669
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !3669
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3669
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !3669
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !3669
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !3669
  br label %cond.end, !dbg !3669

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3669
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3669
  %mul = mul i32 2, %call, !dbg !3670
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3671
  %version_info_size = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %6, i32 0, i32 3, !dbg !3672
  store i32 %mul, i32* %version_info_size, align 4, !dbg !3673
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3674
  %version_info_size4 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %7, i32 0, i32 3, !dbg !3674
  %8 = load i32, i32* %version_info_size4, align 4, !dbg !3674
  %conv = zext i32 %8 to i64, !dbg !3674
  %call5 = call i8* @xcalloc(i64 %conv, i64 32), !dbg !3674
  %9 = bitcast i8* %call5 to %struct.version_info*, !dbg !3674
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3675
  %version_info = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %10, i32 0, i32 4, !dbg !3676
  store %struct.version_info* %9, %struct.version_info** %version_info, align 8, !dbg !3677
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3678
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3679
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %11, i32 0, i32 5, !dbg !3680
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %relevant, align 8, !dbg !3681
  %call7 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3682
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3683
  %important_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %12, i32 0, i32 8, !dbg !3684
  store %struct.bitmap_head_def* %call7, %struct.bitmap_head_def** %important_candidates, align 8, !dbg !3685
  %13 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3686
  %max_inv_id = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %13, i32 0, i32 9, !dbg !3687
  store i32 0, i32* %max_inv_id, align 8, !dbg !3688
  %14 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3689
  %niters = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %14, i32 0, i32 1, !dbg !3690
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %niters, align 8, !dbg !3691
  %call8 = call %struct.VEC_iv_use_p_heap* @VEC_iv_use_p_heap_alloc(i32 20), !dbg !3692
  %15 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3693
  %iv_uses = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %15, i32 0, i32 6, !dbg !3694
  store %struct.VEC_iv_use_p_heap* %call8, %struct.VEC_iv_use_p_heap** %iv_uses, align 8, !dbg !3695
  %call9 = call %struct.VEC_iv_cand_p_heap* @VEC_iv_cand_p_heap_alloc(i32 20), !dbg !3696
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3697
  %iv_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %16, i32 0, i32 7, !dbg !3698
  store %struct.VEC_iv_cand_p_heap* %call9, %struct.VEC_iv_cand_p_heap** %iv_candidates, align 8, !dbg !3699
  %call10 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 20), !dbg !3700
  store %struct.VEC_tree_heap* %call10, %struct.VEC_tree_heap** @decl_rtl_to_reset, align 8, !dbg !3701
  ret void, !dbg !3702
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !3703 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3710, metadata !DIExpression()), !dbg !3711
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3712, metadata !DIExpression()), !dbg !3713
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3714, metadata !DIExpression()), !dbg !3715
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3716, metadata !DIExpression()), !dbg !3717
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !3718, metadata !DIExpression()), !dbg !3719
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3720
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !3721
  store i32 0, i32* %idx, align 8, !dbg !3722
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3723
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3723
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3723
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3723
  %tobool = icmp ne %struct.loops* %2, null, !dbg !3723
  br i1 %tobool, label %if.end, label %if.then, !dbg !3725

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3726
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !3728
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3729
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3730
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !3731
  br label %return, !dbg !3732

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !3733
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !3733
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3734
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !3735
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !3736
  %6 = load i32, i32* %flags.addr, align 4, !dbg !3737
  %and = and i32 %6, 1, !dbg !3738
  %tobool3 = icmp ne i32 %and, 0, !dbg !3739
  %7 = zext i1 %tobool3 to i64, !dbg !3739
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !3739
  store i32 %cond, i32* %mn, align 4, !dbg !3740
  %8 = load i32, i32* %flags.addr, align 4, !dbg !3741
  %and4 = and i32 %8, 4, !dbg !3743
  %tobool5 = icmp ne i32 %and4, 0, !dbg !3743
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3744

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !3745
  br label %for.cond, !dbg !3748

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3749
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3749
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !3749
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !3749
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !3749
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3749
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !3749
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !3749

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3749
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3749
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !3749
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !3749
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !3749
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !3749
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !3749
  br label %cond.end, !dbg !3749

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3749

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3749
  %15 = load i32, i32* %i, align 4, !dbg !3749
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !3749
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3751
  br i1 %tobool15, label %for.body, label %for.end, !dbg !3751

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3752
  %cmp = icmp ne %struct.loop* %16, null, !dbg !3754
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !3755

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3756
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !3757
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3757
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !3758
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !3759

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3760
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !3761
  %20 = load i32, i32* %num, align 8, !dbg !3761
  %21 = load i32, i32* %mn, align 4, !dbg !3762
  %cmp18 = icmp sge i32 %20, %21, !dbg !3763
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !3764

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3765
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !3765
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !3765
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !3765
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !3765

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3765
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !3765
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !3765
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !3765
  br label %cond.end26, !dbg !3765

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !3765

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !3765
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3765
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !3765
  %27 = load i32, i32* %num28, align 8, !dbg !3765
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !3765
  br label %if.end30, !dbg !3765

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3762

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !3766
  %inc = add i32 %28, 1, !dbg !3766
  store i32 %inc, i32* %i, align 4, !dbg !3766
  br label %for.cond, !dbg !3767, !llvm.loop !3768

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !3770

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !3771
  %and31 = and i32 %29, 2, !dbg !3773
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3773
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !3774

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3775
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !3775
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !3775
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !3775
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !3778
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3778
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !3779
  br label %for.cond36, !dbg !3780

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3781
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !3783
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !3783
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !3784
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !3785

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !3786

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3787
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !3788
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !3788
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !3789
  br label %for.cond36, !dbg !3790, !llvm.loop !3791

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !3793

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3794
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !3797
  %38 = load i32, i32* %num43, align 8, !dbg !3797
  %39 = load i32, i32* %mn, align 4, !dbg !3798
  %cmp44 = icmp sge i32 %38, %39, !dbg !3799
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !3800

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3801
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !3801
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !3801
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !3801
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !3801

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3801
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !3801
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !3801
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !3801
  br label %cond.end52, !dbg !3801

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !3801

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !3801
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3801
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !3801
  %45 = load i32, i32* %num54, align 8, !dbg !3801
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !3801
  br label %if.end56, !dbg !3801

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3802
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !3804
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3804
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !3802
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !3805

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3806
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !3809
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !3809
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !3810
  br label %for.cond60, !dbg !3811

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3812
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !3814
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !3814
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !3815
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !3816

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !3817

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3818
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !3819
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !3819
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !3820
  br label %for.cond60, !dbg !3821, !llvm.loop !3822

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !3824

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3825
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !3827
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !3827
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !3828

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !3829

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3830
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !3831
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !3832
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !3793, !llvm.loop !3833

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !3835

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3836
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !3836
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !3836
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !3836
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !3838
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !3838
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !3839
  br label %while.body79, !dbg !3840

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3841
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !3844
  %60 = load i32, i32* %num80, align 8, !dbg !3844
  %61 = load i32, i32* %mn, align 4, !dbg !3845
  %cmp81 = icmp sge i32 %60, %61, !dbg !3846
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !3847

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3848
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !3848
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !3848
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !3848
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !3848

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3848
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !3848
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !3848
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !3848
  br label %cond.end89, !dbg !3848

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !3848

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !3848
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3848
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !3848
  %67 = load i32, i32* %num91, align 8, !dbg !3848
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !3848
  br label %if.end93, !dbg !3848

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3849
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !3851
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !3851
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !3852
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !3853

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3854
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !3855
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !3855
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !3856
  br label %if.end110, !dbg !3857

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !3858

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3860
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !3861
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !3862

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3863
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !3864
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !3864
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !3865
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !3866
  br i1 %75, label %while.body103, label %while.end105, !dbg !3858

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3867
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !3868
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !3869
  br label %while.cond99, !dbg !3858, !llvm.loop !3870

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3872
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !3874
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !3875

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !3876

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3877
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !3878
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !3878
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !3879
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !3840, !llvm.loop !3880

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3882
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3883
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !3884
  br label %return, !dbg !3885

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !3885
}

declare dso_local void @flow_loop_dump(%struct.loop*, %struct._IO_FILE*, void (%struct.loop*, %struct._IO_FILE*, i32)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_ssa_iv_optimize_loop(%struct.ivopts_data* %data, %struct.loop* %loop) #0 !dbg !3886 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %changed = alloca i8, align 1
  %iv_ca = alloca %struct.iv_ca*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !3889, metadata !DIExpression()), !dbg !3890
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3891, metadata !DIExpression()), !dbg !3892
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !3893, metadata !DIExpression()), !dbg !3894
  store i8 0, i8* %changed, align 1, !dbg !3894
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %iv_ca, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !3897, metadata !DIExpression()), !dbg !3898
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !3899, metadata !DIExpression()), !dbg !3901
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3902
  %niters = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 1, !dbg !3902
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %niters, align 8, !dbg !3902
  %tobool = icmp ne %struct.pointer_map_t* %1, null, !dbg !3902
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3902

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5787, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3902
  br label %cond.end, !dbg !3902

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3902

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3902
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3903
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3904
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %3, i32 0, i32 0, !dbg !3905
  store %struct.loop* %2, %struct.loop** %current_loop, align 8, !dbg !3906
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3907
  %call = call zeroext i8 @optimize_loop_for_speed_p(%struct.loop* %4), !dbg !3908
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3909
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %5, i32 0, i32 11, !dbg !3910
  store i8 %call, i8* %speed, align 1, !dbg !3911
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3912
  %tobool1 = icmp ne %struct._IO_FILE* %6, null, !dbg !3912
  br i1 %tobool1, label %land.lhs.true, label %if.end13, !dbg !3914

land.lhs.true:                                    ; preds = %cond.end
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3915
  %and = and i32 %7, 8, !dbg !3916
  %tobool2 = icmp ne i32 %and, 0, !dbg !3916
  br i1 %tobool2, label %if.then, label %if.end13, !dbg !3917

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3918
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3920
  %num = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !3921
  %10 = load i32, i32* %num, align 8, !dbg !3921
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0), i32 %10), !dbg !3922
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3923
  %call4 = call %struct.edge_def* @single_dom_exit(%struct.loop* %11), !dbg !3924
  store %struct.edge_def* %call4, %struct.edge_def** %exit, align 8, !dbg !3925
  %12 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3926
  %tobool5 = icmp ne %struct.edge_def* %12, null, !dbg !3926
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !3928

if.then6:                                         ; preds = %if.then
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3929
  %14 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3931
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !3932
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3932
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !3933
  %16 = load i32, i32* %index, align 8, !dbg !3933
  %17 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3934
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 1, !dbg !3935
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3935
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !3936
  %19 = load i32, i32* %index7, align 8, !dbg !3936
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.32, i64 0, i64 0), i32 %16, i32 %19), !dbg !3937
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3938
  %21 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3939
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 0, !dbg !3940
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !3940
  %call10 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %22), !dbg !3941
  call void @print_gimple_stmt(%struct._IO_FILE* %20, %union.gimple_statement_d* %call10, i32 0, i32 2), !dbg !3942
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3943
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3944
  br label %if.end, !dbg !3945

if.end:                                           ; preds = %if.then6, %if.then
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3946
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3947
  br label %if.end13, !dbg !3948

if.end13:                                         ; preds = %if.end, %land.lhs.true, %cond.end
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3949
  %call14 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %25), !dbg !3950
  store %struct.basic_block_def** %call14, %struct.basic_block_def*** %body, align 8, !dbg !3951
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3952
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3953
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 6, !dbg !3954
  %28 = load i32, i32* %num_nodes, align 4, !dbg !3954
  call void @renumber_gimple_stmt_uids_in_blocks(%struct.basic_block_def** %26, i32 %28), !dbg !3955
  %29 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3956
  %30 = bitcast %struct.basic_block_def** %29 to i8*, !dbg !3956
  call void @free(i8* %30), !dbg !3957
  %31 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3958
  %call15 = call zeroext i8 @find_induction_variables(%struct.ivopts_data* %31), !dbg !3960
  %tobool16 = icmp ne i8 %call15, 0, !dbg !3960
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !3961

if.then17:                                        ; preds = %if.end13
  br label %finish, !dbg !3962

if.end18:                                         ; preds = %if.end13
  %32 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3963
  call void @find_interesting_uses(%struct.ivopts_data* %32), !dbg !3964
  %33 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3965
  %call19 = call i32 @n_iv_uses(%struct.ivopts_data* %33), !dbg !3967
  %34 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3968
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %34, i64 61, !dbg !3968
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3968
  %35 = load i32, i32* %value, align 8, !dbg !3968
  %cmp = icmp ugt i32 %call19, %35, !dbg !3969
  br i1 %cmp, label %if.then20, label %if.end21, !dbg !3970

if.then20:                                        ; preds = %if.end18
  br label %finish, !dbg !3971

if.end21:                                         ; preds = %if.end18
  %36 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3972
  call void @find_iv_candidates(%struct.ivopts_data* %36), !dbg !3973
  %37 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3974
  call void @determine_iv_costs(%struct.ivopts_data* %37), !dbg !3975
  %38 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3976
  call void @determine_use_iv_costs(%struct.ivopts_data* %38), !dbg !3977
  %39 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3978
  call void @determine_set_costs(%struct.ivopts_data* %39), !dbg !3979
  %40 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3980
  %call22 = call %struct.iv_ca* @find_optimal_iv_set(%struct.ivopts_data* %40), !dbg !3981
  store %struct.iv_ca* %call22, %struct.iv_ca** %iv_ca, align 8, !dbg !3982
  %41 = load %struct.iv_ca*, %struct.iv_ca** %iv_ca, align 8, !dbg !3983
  %tobool23 = icmp ne %struct.iv_ca* %41, null, !dbg !3983
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !3985

if.then24:                                        ; preds = %if.end21
  br label %finish, !dbg !3986

if.end25:                                         ; preds = %if.end21
  store i8 1, i8* %changed, align 1, !dbg !3987
  %42 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3988
  %43 = load %struct.iv_ca*, %struct.iv_ca** %iv_ca, align 8, !dbg !3989
  call void @create_new_ivs(%struct.ivopts_data* %42, %struct.iv_ca* %43), !dbg !3990
  call void @iv_ca_free(%struct.iv_ca** %iv_ca), !dbg !3991
  %44 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3992
  call void @rewrite_uses(%struct.ivopts_data* %44), !dbg !3993
  %45 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3994
  call void @remove_unused_ivs(%struct.ivopts_data* %45), !dbg !3995
  call void @scev_reset(), !dbg !3996
  br label %finish, !dbg !3996

finish:                                           ; preds = %if.end25, %if.then24, %if.then20, %if.then17
  call void @llvm.dbg.label(metadata !3997), !dbg !3998
  %46 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !3999
  call void @free_loop_data(%struct.ivopts_data* %46), !dbg !4000
  %47 = load i8, i8* %changed, align 1, !dbg !4001
  ret i8 %47, !dbg !4002
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !4003 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !4006, metadata !DIExpression()), !dbg !4007
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !4010, metadata !DIExpression()), !dbg !4011
  br label %while.cond, !dbg !4012

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4013
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !4013
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !4013
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !4013
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4013

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4013
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !4013
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !4013
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !4013
  br label %cond.end, !dbg !4013

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !4013

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4013
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4013
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !4013
  %5 = load i32, i32* %idx, align 8, !dbg !4013
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !4013
  %tobool2 = icmp ne i32 %call, 0, !dbg !4012
  br i1 %tobool2, label %while.body, label %while.end, !dbg !4012

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4014
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !4016
  %7 = load i32, i32* %idx3, align 8, !dbg !4017
  %inc = add i32 %7, 1, !dbg !4017
  store i32 %inc, i32* %idx3, align 8, !dbg !4017
  %8 = load i32, i32* %anum, align 4, !dbg !4018
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !4019
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4020
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !4021
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4022
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !4024
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !4024
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4025

if.then:                                          ; preds = %while.body
  br label %return, !dbg !4026

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !4012, !llvm.loop !4027

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !4029
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !4029
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !4029
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !4030
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !4031
  br label %return, !dbg !4032

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !4032
}

; Function Attrs: noinline nounwind uwtable
define internal void @tree_ssa_iv_optimize_finalize(%struct.ivopts_data* %data) #0 !dbg !4033 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4034, metadata !DIExpression()), !dbg !4035
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4036
  call void @free_loop_data(%struct.ivopts_data* %0), !dbg !4037
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4038
  %version_info = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %1, i32 0, i32 4, !dbg !4039
  %2 = load %struct.version_info*, %struct.version_info** %version_info, align 8, !dbg !4039
  %3 = bitcast %struct.version_info* %2 to i8*, !dbg !4038
  call void @free(i8* %3), !dbg !4040
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4041
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 5, !dbg !4041
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !4041
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %5), !dbg !4041
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4041
  %relevant1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %6, i32 0, i32 5, !dbg !4041
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %relevant1, align 8, !dbg !4041
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4042
  %important_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %7, i32 0, i32 8, !dbg !4042
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %important_candidates, align 8, !dbg !4042
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %8), !dbg !4042
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4042
  %important_candidates2 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %9, i32 0, i32 8, !dbg !4042
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %important_candidates2, align 8, !dbg !4042
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @decl_rtl_to_reset), !dbg !4043
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4044
  %iv_uses = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %10, i32 0, i32 6, !dbg !4044
  call void @VEC_iv_use_p_heap_free(%struct.VEC_iv_use_p_heap** %iv_uses), !dbg !4044
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4045
  %iv_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %11, i32 0, i32 7, !dbg !4045
  call void @VEC_iv_cand_p_heap_free(%struct.VEC_iv_cand_p_heap** %iv_candidates), !dbg !4045
  ret void, !dbg !4046
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_iv_use_p_base_length(%struct.VEC_iv_use_p_base* %vec_) #0 !dbg !4047 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_base*, align 8
  store %struct.VEC_iv_use_p_base* %vec_, %struct.VEC_iv_use_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_base** %vec_.addr, metadata !4052, metadata !DIExpression()), !dbg !4053
  %0 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !4053
  %tobool = icmp ne %struct.VEC_iv_use_p_base* %0, null, !dbg !4053
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4053

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !4053
  %num = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %1, i32 0, i32 0, !dbg !4053
  %2 = load i32, i32* %num, align 8, !dbg !4053
  br label %cond.end, !dbg !4053

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4053

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4053
  ret i32 %cond, !dbg !4053
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_use* @VEC_iv_use_p_base_index(%struct.VEC_iv_use_p_base* %vec_, i32 %ix_) #0 !dbg !4054 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_iv_use_p_base* %vec_, %struct.VEC_iv_use_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_base** %vec_.addr, metadata !4057, metadata !DIExpression()), !dbg !4058
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4059, metadata !DIExpression()), !dbg !4058
  %0 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !4058
  %tobool = icmp ne %struct.VEC_iv_use_p_base* %0, null, !dbg !4058
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4058

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4058
  %2 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !4058
  %num = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %2, i32 0, i32 0, !dbg !4058
  %3 = load i32, i32* %num, align 8, !dbg !4058
  %cmp = icmp ult i32 %1, %3, !dbg !4058
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4060
  %land.ext = zext i1 %4 to i32, !dbg !4058
  %5 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !4058
  %vec = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %5, i32 0, i32 2, !dbg !4058
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4058
  %idxprom = zext i32 %6 to i64, !dbg !4058
  %arrayidx = getelementptr inbounds [1 x %struct.iv_use*], [1 x %struct.iv_use*]* %vec, i64 0, i64 %idxprom, !dbg !4058
  %7 = load %struct.iv_use*, %struct.iv_use** %arrayidx, align 8, !dbg !4058
  ret %struct.iv_use* %7, !dbg !4058
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @abnormal_ssa_name_p(%union.tree_node* %exp) #0 !dbg !4061 {
entry:
  %retval = alloca i8, align 1
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4062, metadata !DIExpression()), !dbg !4063
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4064
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4064
  br i1 %tobool, label %if.end, label %if.then, !dbg !4066

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4067
  br label %return, !dbg !4067

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4068
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4068
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4068
  %bf.load = load i64, i64* %2, align 8, !dbg !4068
  %bf.clear = and i64 %bf.load, 65535, !dbg !4068
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4068
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !4070
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !4071

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4072
  br label %return, !dbg !4072

if.end2:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4073
  %base3 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4073
  %4 = bitcast %struct.tree_base* %base3 to i64*, !dbg !4073
  %bf.load4 = load i64, i64* %4, align 8, !dbg !4073
  %bf.lshr = lshr i64 %bf.load4, 22, !dbg !4073
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !4073
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4073
  %cmp7 = icmp ne i32 %bf.cast6, 0, !dbg !4074
  %conv = zext i1 %cmp7 to i32, !dbg !4074
  %conv8 = trunc i32 %conv to i8, !dbg !4073
  store i8 %conv8, i8* %retval, align 1, !dbg !4075
  br label %return, !dbg !4075

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !4076
  ret i8 %5, !dbg !4076
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !4077 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4082, metadata !DIExpression()), !dbg !4083
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4083
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !4083
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4083

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4083
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !4083
  %2 = load i32, i32* %num, align 8, !dbg !4083
  br label %cond.end, !dbg !4083

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4083
  ret i32 %cond, !dbg !4083
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !4084 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4087, metadata !DIExpression()), !dbg !4088
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4089
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4090
  %cmp = icmp uge i32 %call, 1, !dbg !4091
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4092

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4093
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4094
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4095
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4096
  %land.ext = zext i1 %2 to i32, !dbg !4092
  %conv = trunc i32 %land.ext to i8, !dbg !4090
  ret i8 %conv, !dbg !4097
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !4098 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4101, metadata !DIExpression()), !dbg !4102
  call void @llvm.dbg.declare(metadata i64* %off, metadata !4103, metadata !DIExpression()), !dbg !4104
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4105
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !4106
  %idxprom = zext i32 %call to i64, !dbg !4107
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !4107
  %1 = load i64, i64* %arrayidx, align 8, !dbg !4107
  store i64 %1, i64* %off, align 8, !dbg !4108
  %2 = load i64, i64* %off, align 8, !dbg !4109
  %cmp = icmp ne i64 %2, 0, !dbg !4109
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4109

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !4109
  br label %cond.end, !dbg !4109

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4109
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4110
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4111
  %5 = load i64, i64* %off, align 8, !dbg !4112
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4113
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !4114
  ret %union.tree_node** %6, !dbg !4115
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4116 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4119, metadata !DIExpression()), !dbg !4120
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4121
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4122
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4123
  %bf.load = load i32, i32* %1, align 8, !dbg !4123
  %bf.clear = and i32 %bf.load, 255, !dbg !4123
  ret i32 %bf.clear, !dbg !4124
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !4125 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4128, metadata !DIExpression()), !dbg !4129
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4130
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4131
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !4132
  ret i32 %call1, !dbg !4133
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !4134 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4137, metadata !DIExpression()), !dbg !4138
  %0 = load i32, i32* %code.addr, align 4, !dbg !4139
  %idxprom = zext i32 %0 to i64, !dbg !4140
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !4140
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4140
  ret i32 %1, !dbg !4141
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @rtx_cost(%struct.rtx_def*, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sbitmap_heap_safe_grow(%struct.VEC_sbitmap_heap** %vec_, i32 %size_) #0 !dbg !4142 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_sbitmap_heap** %vec_, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_heap*** %vec_.addr, metadata !4143, metadata !DIExpression()), !dbg !4144
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4145, metadata !DIExpression()), !dbg !4144
  %0 = load i32, i32* %size_.addr, align 4, !dbg !4144
  %cmp = icmp sge i32 %0, 0, !dbg !4144
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4144

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %2 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %1, align 8, !dbg !4144
  %tobool = icmp ne %struct.VEC_sbitmap_heap* %2, null, !dbg !4144
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4144

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %4 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %3, align 8, !dbg !4144
  %base = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %4, i32 0, i32 0, !dbg !4144
  br label %cond.end, !dbg !4144

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !4144

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sbitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4144
  %call = call i32 @VEC_sbitmap_base_length(%struct.VEC_sbitmap_base* %cond), !dbg !4144
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4144
  %cmp1 = icmp ule i32 %call, %5, !dbg !4144
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !4146
  %land.ext = zext i1 %6 to i32, !dbg !4144
  %7 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %8 = load i32, i32* %size_.addr, align 4, !dbg !4144
  %9 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %10 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %9, align 8, !dbg !4144
  %tobool2 = icmp ne %struct.VEC_sbitmap_heap* %10, null, !dbg !4144
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !4144

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %12 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %11, align 8, !dbg !4144
  %tobool4 = icmp ne %struct.VEC_sbitmap_heap* %12, null, !dbg !4144
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !4144

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %14 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %13, align 8, !dbg !4144
  %base6 = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %14, i32 0, i32 0, !dbg !4144
  br label %cond.end8, !dbg !4144

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !4144

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_sbitmap_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !4144
  %num = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %cond9, i32 0, i32 0, !dbg !4144
  %15 = load i32, i32* %num, align 8, !dbg !4144
  br label %cond.end11, !dbg !4144

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !4144

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !4144
  %sub = sub nsw i32 %8, %cond12, !dbg !4144
  %call13 = call i32 @VEC_sbitmap_heap_reserve_exact(%struct.VEC_sbitmap_heap** %7, i32 %sub), !dbg !4144
  %16 = load i32, i32* %size_.addr, align 4, !dbg !4144
  %17 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %18 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %17, align 8, !dbg !4144
  %tobool14 = icmp ne %struct.VEC_sbitmap_heap* %18, null, !dbg !4144
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !4144

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4144
  %20 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %19, align 8, !dbg !4144
  %base16 = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %20, i32 0, i32 0, !dbg !4144
  br label %cond.end18, !dbg !4144

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !4144

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sbitmap_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !4144
  %num20 = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %cond19, i32 0, i32 0, !dbg !4144
  store i32 %16, i32* %num20, align 8, !dbg !4144
  ret void, !dbg !4144
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.simple_bitmap_def** @VEC_sbitmap_base_address(%struct.VEC_sbitmap_base* %vec_) #0 !dbg !4147 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_base*, align 8
  store %struct.VEC_sbitmap_base* %vec_, %struct.VEC_sbitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_base** %vec_.addr, metadata !4151, metadata !DIExpression()), !dbg !4152
  %0 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !4152
  %tobool = icmp ne %struct.VEC_sbitmap_base* %0, null, !dbg !4152
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4152

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !4152
  %vec = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %1, i32 0, i32 2, !dbg !4152
  %arraydecay = getelementptr inbounds [1 x %struct.simple_bitmap_def*], [1 x %struct.simple_bitmap_def*]* %vec, i64 0, i64 0, !dbg !4152
  br label %cond.end, !dbg !4152

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4152

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.simple_bitmap_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4152
  ret %struct.simple_bitmap_def** %cond, !dbg !4152
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sbitmap_heap_reserve_exact(%struct.VEC_sbitmap_heap** %vec_, i32 %alloc_) #0 !dbg !4153 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_sbitmap_heap** %vec_, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_heap*** %vec_.addr, metadata !4156, metadata !DIExpression()), !dbg !4157
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4158, metadata !DIExpression()), !dbg !4157
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4159, metadata !DIExpression()), !dbg !4157
  %0 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4157
  %1 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %0, align 8, !dbg !4157
  %tobool = icmp ne %struct.VEC_sbitmap_heap* %1, null, !dbg !4157
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4157

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4157
  %3 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %2, align 8, !dbg !4157
  %base = getelementptr inbounds %struct.VEC_sbitmap_heap, %struct.VEC_sbitmap_heap* %3, i32 0, i32 0, !dbg !4157
  br label %cond.end, !dbg !4157

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4157

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sbitmap_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4157
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4157
  %call = call i32 @VEC_sbitmap_base_space(%struct.VEC_sbitmap_base* %cond, i32 %4), !dbg !4157
  %tobool1 = icmp ne i32 %call, 0, !dbg !4157
  %lnot = xor i1 %tobool1, true, !dbg !4157
  %lnot.ext = zext i1 %lnot to i32, !dbg !4157
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4157
  %5 = load i32, i32* %extend, align 4, !dbg !4160
  %tobool2 = icmp ne i32 %5, 0, !dbg !4160
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4157

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4160
  %7 = load %struct.VEC_sbitmap_heap*, %struct.VEC_sbitmap_heap** %6, align 8, !dbg !4160
  %8 = bitcast %struct.VEC_sbitmap_heap* %7 to i8*, !dbg !4160
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4160
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !4160
  %10 = bitcast i8* %call3 to %struct.VEC_sbitmap_heap*, !dbg !4160
  %11 = load %struct.VEC_sbitmap_heap**, %struct.VEC_sbitmap_heap*** %vec_.addr, align 8, !dbg !4160
  store %struct.VEC_sbitmap_heap* %10, %struct.VEC_sbitmap_heap** %11, align 8, !dbg !4160
  br label %if.end, !dbg !4160

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4157
  ret i32 %12, !dbg !4157
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sbitmap_base_space(%struct.VEC_sbitmap_base* %vec_, i32 %alloc_) #0 !dbg !4162 {
entry:
  %vec_.addr = alloca %struct.VEC_sbitmap_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_sbitmap_base* %vec_, %struct.VEC_sbitmap_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sbitmap_base** %vec_.addr, metadata !4165, metadata !DIExpression()), !dbg !4166
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4167, metadata !DIExpression()), !dbg !4166
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4166
  %cmp = icmp sge i32 %0, 0, !dbg !4166
  %conv = zext i1 %cmp to i32, !dbg !4166
  %1 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !4166
  %tobool = icmp ne %struct.VEC_sbitmap_base* %1, null, !dbg !4166
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4166

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !4166
  %alloc = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %2, i32 0, i32 1, !dbg !4166
  %3 = load i32, i32* %alloc, align 4, !dbg !4166
  %4 = load %struct.VEC_sbitmap_base*, %struct.VEC_sbitmap_base** %vec_.addr, align 8, !dbg !4166
  %num = getelementptr inbounds %struct.VEC_sbitmap_base, %struct.VEC_sbitmap_base* %4, i32 0, i32 0, !dbg !4166
  %5 = load i32, i32* %num, align 8, !dbg !4166
  %sub = sub i32 %3, %5, !dbg !4166
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4166
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4166
  %conv2 = zext i1 %cmp1 to i32, !dbg !4166
  br label %cond.end, !dbg !4166

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4166
  %tobool3 = icmp ne i32 %7, 0, !dbg !4166
  %lnot = xor i1 %tobool3, true, !dbg !4166
  %lnot.ext = zext i1 %lnot to i32, !dbg !4166
  br label %cond.end, !dbg !4166

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4166
  ret i32 %cond, !dbg !4166
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !4168 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !4173, metadata !DIExpression()), !dbg !4174
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4174
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !4174
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4174

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !4174
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !4174
  %2 = load i32, i32* %num, align 8, !dbg !4174
  br label %cond.end, !dbg !4174

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4174

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4174
  ret i32 %cond, !dbg !4174
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_iv_use_p_heap* @VEC_iv_use_p_heap_alloc(i32 %alloc_) #0 !dbg !4175 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4178, metadata !DIExpression()), !dbg !4179
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4179
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4179
  %1 = bitcast i8* %call to %struct.VEC_iv_use_p_heap*, !dbg !4179
  ret %struct.VEC_iv_use_p_heap* %1, !dbg !4179
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_iv_cand_p_heap* @VEC_iv_cand_p_heap_alloc(i32 %alloc_) #0 !dbg !4180 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4183, metadata !DIExpression()), !dbg !4184
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4184
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4184
  %1 = bitcast i8* %call to %struct.VEC_iv_cand_p_heap*, !dbg !4184
  ret %struct.VEC_iv_cand_p_heap* %1, !dbg !4184
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !4185 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4188, metadata !DIExpression()), !dbg !4189
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4189
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4189
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !4189
  ret %struct.VEC_tree_heap* %1, !dbg !4189
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !4190 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4193, metadata !DIExpression()), !dbg !4194
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4194
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !4194
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !4194
  ret %struct.VEC_int_heap* %1, !dbg !4194
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !4195 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4198
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4198
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !4198
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4198
  %tobool = icmp ne %struct.loops* %1, null, !dbg !4198
  br i1 %tobool, label %if.end, label %if.then, !dbg !4200

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4201
  br label %return, !dbg !4201

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4202
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4202
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !4202
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !4202
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !4202
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !4202
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !4202
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4202

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4202
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4202
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !4202
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !4202
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !4202
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !4202
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !4202
  br label %cond.end, !dbg !4202

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4202

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4202
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4202
  store i32 %call, i32* %retval, align 4, !dbg !4203
  br label %return, !dbg !4203

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !4204
  ret i32 %8, !dbg !4204
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !4205 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4208, metadata !DIExpression()), !dbg !4209
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4210, metadata !DIExpression()), !dbg !4209
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !4211, metadata !DIExpression()), !dbg !4209
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4212
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !4212
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4212

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4212
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4212
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !4212
  %3 = load i32, i32* %num, align 8, !dbg !4212
  %cmp = icmp ult i32 %1, %3, !dbg !4212
  br i1 %cmp, label %if.then, label %if.else, !dbg !4209

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4214
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !4214
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4214
  %idxprom = zext i32 %5 to i64, !dbg !4214
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !4214
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !4214
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !4214
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !4214
  store i32 1, i32* %retval, align 4, !dbg !4214
  br label %return, !dbg !4214

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !4216
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !4216
  store i32 0, i32* %retval, align 4, !dbg !4216
  br label %return, !dbg !4216

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4209
  ret i32 %9, !dbg !4209
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !4218 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !4222, metadata !DIExpression()), !dbg !4223
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !4224, metadata !DIExpression()), !dbg !4223
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !4225, metadata !DIExpression()), !dbg !4223
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4223
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !4223
  %1 = load i32, i32* %num, align 4, !dbg !4223
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4223
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !4223
  %3 = load i32, i32* %alloc, align 4, !dbg !4223
  %cmp = icmp ult i32 %1, %3, !dbg !4223
  %conv = zext i1 %cmp to i32, !dbg !4223
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4223
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !4223
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4223
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !4223
  %6 = load i32, i32* %num1, align 4, !dbg !4223
  %inc = add i32 %6, 1, !dbg !4223
  store i32 %inc, i32* %num1, align 4, !dbg !4223
  %idxprom = zext i32 %6 to i64, !dbg !4223
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !4223
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !4223
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !4223
  %8 = load i32*, i32** %slot_, align 8, !dbg !4223
  store i32 %7, i32* %8, align 4, !dbg !4223
  %9 = load i32*, i32** %slot_, align 8, !dbg !4223
  ret i32* %9, !dbg !4223
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !4226 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4229, metadata !DIExpression()), !dbg !4230
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4231, metadata !DIExpression()), !dbg !4232
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4233
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !4233
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4233
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !4233
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4233

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4233
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !4233
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !4233
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !4233
  br label %cond.end, !dbg !4233

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4233
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4233
  store i32 %call, i32* %n, align 4, !dbg !4232
  %4 = load i32, i32* %n, align 4, !dbg !4234
  %cmp = icmp eq i32 %4, 0, !dbg !4236
  br i1 %cmp, label %if.then, label %if.end, !dbg !4237

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !4238
  br label %return, !dbg !4238

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4239
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !4239
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !4239
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !4239
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !4239

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4239
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !4239
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !4239
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !4239
  br label %cond.end8, !dbg !4239

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !4239

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !4239
  %9 = load i32, i32* %n, align 4, !dbg !4239
  %sub = sub i32 %9, 1, !dbg !4239
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !4239
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !4240
  br label %return, !dbg !4240

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !4241
  ret %struct.loop* %10, !dbg !4241
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !4242 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !4245, metadata !DIExpression()), !dbg !4246
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4247, metadata !DIExpression()), !dbg !4246
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4246
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !4246
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4246

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4246
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4246
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !4246
  %3 = load i32, i32* %num, align 8, !dbg !4246
  %cmp = icmp ult i32 %1, %3, !dbg !4246
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4248
  %land.ext = zext i1 %4 to i32, !dbg !4246
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !4246
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !4246
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4246
  %idxprom = zext i32 %6 to i64, !dbg !4246
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !4246
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !4246
  ret %struct.loop* %7, !dbg !4246
}

declare dso_local zeroext i8 @optimize_loop_for_speed_p(%struct.loop*) #2

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

declare dso_local void @renumber_gimple_stmt_uids_in_blocks(%struct.basic_block_def**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_induction_variables(%struct.ivopts_data* %data) #0 !dbg !4249 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %niter = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4252, metadata !DIExpression()), !dbg !4253
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4254, metadata !DIExpression()), !dbg !4255
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4256, metadata !DIExpression()), !dbg !4264
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4265
  %call = call zeroext i8 @find_bivs(%struct.ivopts_data* %0), !dbg !4267
  %tobool = icmp ne i8 %call, 0, !dbg !4267
  br i1 %tobool, label %if.end, label %if.then, !dbg !4268

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4269
  br label %return, !dbg !4269

if.end:                                           ; preds = %entry
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4270
  call void @find_givs(%struct.ivopts_data* %1), !dbg !4271
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4272
  call void @mark_bivs(%struct.ivopts_data* %2), !dbg !4273
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4274
  %tobool1 = icmp ne %struct._IO_FILE* %3, null, !dbg !4274
  br i1 %tobool1, label %land.lhs.true, label %if.end19, !dbg !4276

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* @dump_flags, align 4, !dbg !4277
  %and = and i32 %4, 8, !dbg !4278
  %tobool2 = icmp ne i32 %and, 0, !dbg !4278
  br i1 %tobool2, label %if.then3, label %if.end19, !dbg !4279

if.then3:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !4280, metadata !DIExpression()), !dbg !4282
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4283
  %call4 = call %union.tree_node* @niter_for_single_dom_exit(%struct.ivopts_data* %5), !dbg !4284
  store %union.tree_node* %call4, %union.tree_node** %niter, align 8, !dbg !4282
  %6 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4285
  %tobool5 = icmp ne %union.tree_node* %6, null, !dbg !4285
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !4287

if.then6:                                         ; preds = %if.then3
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4288
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.33, i64 0, i64 0)), !dbg !4290
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4291
  %9 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4292
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %9, i32 2), !dbg !4293
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4294
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)), !dbg !4295
  br label %if.end9, !dbg !4296

if.end9:                                          ; preds = %if.then6, %if.then3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4297
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)), !dbg !4298
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4299
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %12, i32 0, i32 5, !dbg !4299
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !4299
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %13, i32 0, i32* %i), !dbg !4299
  br label %for.cond, !dbg !4299

for.cond:                                         ; preds = %for.inc, %if.end9
  %call11 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4301
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4299
  br i1 %tobool12, label %for.body, label %for.end, !dbg !4299

for.body:                                         ; preds = %for.cond
  %14 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4303
  %15 = load i32, i32* %i, align 4, !dbg !4306
  %call13 = call %struct.version_info* @ver_info(%struct.ivopts_data* %14, i32 %15), !dbg !4307
  %iv = getelementptr inbounds %struct.version_info, %struct.version_info* %call13, i32 0, i32 1, !dbg !4308
  %16 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !4308
  %tobool14 = icmp ne %struct.iv* %16, null, !dbg !4307
  br i1 %tobool14, label %if.then15, label %if.end18, !dbg !4309

if.then15:                                        ; preds = %for.body
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4310
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4311
  %19 = load i32, i32* %i, align 4, !dbg !4312
  %call16 = call %struct.version_info* @ver_info(%struct.ivopts_data* %18, i32 %19), !dbg !4313
  %iv17 = getelementptr inbounds %struct.version_info, %struct.version_info* %call16, i32 0, i32 1, !dbg !4314
  %20 = load %struct.iv*, %struct.iv** %iv17, align 8, !dbg !4314
  call void @dump_iv(%struct._IO_FILE* %17, %struct.iv* %20), !dbg !4315
  br label %if.end18, !dbg !4315

if.end18:                                         ; preds = %if.then15, %for.body
  br label %for.inc, !dbg !4316

for.inc:                                          ; preds = %if.end18
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4301
  br label %for.cond, !dbg !4301, !llvm.loop !4317

for.end:                                          ; preds = %for.cond
  br label %if.end19, !dbg !4319

if.end19:                                         ; preds = %for.end, %land.lhs.true, %if.end
  store i8 1, i8* %retval, align 1, !dbg !4320
  br label %return, !dbg !4320

return:                                           ; preds = %if.end19, %if.then
  %21 = load i8, i8* %retval, align 1, !dbg !4321
  ret i8 %21, !dbg !4321
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_interesting_uses(%struct.ivopts_data* %data) #0 !dbg !4322 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %info = alloca %struct.version_info*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp17 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp25 = alloca %struct.gimple_stmt_iterator, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4323, metadata !DIExpression()), !dbg !4324
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4325, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4327, metadata !DIExpression()), !dbg !4334
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !4335, metadata !DIExpression()), !dbg !4336
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4337
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !4338
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !4338
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %1), !dbg !4339
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %body, align 8, !dbg !4336
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4340, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !4342, metadata !DIExpression()), !dbg !4343
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4344, metadata !DIExpression()), !dbg !4345
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4346
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !4346
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4348

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !4349
  %and = and i32 %3, 8, !dbg !4350
  %tobool1 = icmp ne i32 %and, 0, !dbg !4350
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4351

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4352
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)), !dbg !4353
  br label %if.end, !dbg !4353

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i32 0, i32* %i, align 4, !dbg !4354
  br label %for.cond, !dbg !4356

for.cond:                                         ; preds = %for.inc39, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !4357
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4359
  %current_loop3 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %6, i32 0, i32 0, !dbg !4360
  %7 = load %struct.loop*, %struct.loop** %current_loop3, align 8, !dbg !4360
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !4361
  %8 = load i32, i32* %num_nodes, align 4, !dbg !4361
  %cmp = icmp ult i32 %5, %8, !dbg !4362
  br i1 %cmp, label %for.body, label %for.end40, !dbg !4363

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4364, metadata !DIExpression()), !dbg !4372
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4373
  %10 = load i32, i32* %i, align 4, !dbg !4374
  %idxprom = zext i32 %10 to i64, !dbg !4373
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom, !dbg !4373
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4373
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !4375
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4376
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !4376
  %call4 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4376
  %13 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4376
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !4376
  %15 = extractvalue { i32, %struct.VEC_edge_gc** } %call4, 0, !dbg !4376
  store i32 %15, i32* %14, align 8, !dbg !4376
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !4376
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call4, 1, !dbg !4376
  store %struct.VEC_edge_gc** %17, %struct.VEC_edge_gc*** %16, align 8, !dbg !4376
  %18 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4376
  %19 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4376
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !4376
  br label %for.cond5, !dbg !4376

for.cond5:                                        ; preds = %for.inc, %for.body
  %20 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4378
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 0, !dbg !4378
  %22 = load i32, i32* %21, align 8, !dbg !4378
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 1, !dbg !4378
  %24 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %23, align 8, !dbg !4378
  %call6 = call zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %24, %struct.edge_def** %e), !dbg !4378
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4376
  br i1 %tobool7, label %for.body8, label %for.end, !dbg !4376

for.body8:                                        ; preds = %for.cond5
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4380
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 1, !dbg !4382
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4382
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4383
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !4383
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4383
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4383
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 1, !dbg !4383
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4383
  %cmp9 = icmp ne %struct.basic_block_def* %26, %29, !dbg !4384
  br i1 %cmp9, label %land.lhs.true10, label %if.end16, !dbg !4385

land.lhs.true10:                                  ; preds = %for.body8
  %30 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4386
  %current_loop11 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %30, i32 0, i32 0, !dbg !4387
  %31 = load %struct.loop*, %struct.loop** %current_loop11, align 8, !dbg !4387
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4388
  %dest12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 1, !dbg !4389
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dest12, align 8, !dbg !4389
  %call13 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %31, %struct.basic_block_def* %33), !dbg !4390
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4390
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !4391

if.then15:                                        ; preds = %land.lhs.true10
  %34 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4392
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4393
  call void @find_interesting_uses_outside(%struct.ivopts_data* %34, %struct.edge_def* %35), !dbg !4394
  br label %if.end16, !dbg !4394

if.end16:                                         ; preds = %if.then15, %land.lhs.true10, %for.body8
  br label %for.inc, !dbg !4395

for.inc:                                          ; preds = %if.end16
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4378
  br label %for.cond5, !dbg !4378, !llvm.loop !4396

for.end:                                          ; preds = %for.cond5
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4398
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp17, %struct.basic_block_def* %36), !dbg !4400
  %37 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4400
  %38 = bitcast %struct.gimple_stmt_iterator* %tmp17 to i8*, !dbg !4400
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false), !dbg !4400
  br label %for.cond18, !dbg !4401

for.cond18:                                       ; preds = %for.inc23, %for.end
  %call19 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4402
  %tobool20 = icmp ne i8 %call19, 0, !dbg !4404
  %lnot = xor i1 %tobool20, true, !dbg !4404
  br i1 %lnot, label %for.body21, label %for.end24, !dbg !4405

for.body21:                                       ; preds = %for.cond18
  %39 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4406
  %call22 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4407
  call void @find_interesting_uses_stmt(%struct.ivopts_data* %39, %union.gimple_statement_d* %call22), !dbg !4408
  br label %for.inc23, !dbg !4408

for.inc23:                                        ; preds = %for.body21
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4409
  br label %for.cond18, !dbg !4410, !llvm.loop !4411

for.end24:                                        ; preds = %for.cond18
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4413
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp25, %struct.basic_block_def* %40), !dbg !4415
  %41 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4415
  %42 = bitcast %struct.gimple_stmt_iterator* %tmp25 to i8*, !dbg !4415
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false), !dbg !4415
  br label %for.cond26, !dbg !4416

for.cond26:                                       ; preds = %for.inc37, %for.end24
  %call27 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4417
  %tobool28 = icmp ne i8 %call27, 0, !dbg !4419
  %lnot29 = xor i1 %tobool28, true, !dbg !4419
  br i1 %lnot29, label %for.body30, label %for.end38, !dbg !4420

for.body30:                                       ; preds = %for.cond26
  %call31 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4421
  %call32 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call31), !dbg !4423
  %tobool33 = icmp ne i8 %call32, 0, !dbg !4423
  br i1 %tobool33, label %if.end36, label %if.then34, !dbg !4424

if.then34:                                        ; preds = %for.body30
  %43 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4425
  %call35 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !4426
  call void @find_interesting_uses_stmt(%struct.ivopts_data* %43, %union.gimple_statement_d* %call35), !dbg !4427
  br label %if.end36, !dbg !4427

if.end36:                                         ; preds = %if.then34, %for.body30
  br label %for.inc37, !dbg !4428

for.inc37:                                        ; preds = %if.end36
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !4429
  br label %for.cond26, !dbg !4430, !llvm.loop !4431

for.end38:                                        ; preds = %for.cond26
  br label %for.inc39, !dbg !4433

for.inc39:                                        ; preds = %for.end38
  %44 = load i32, i32* %i, align 4, !dbg !4434
  %inc = add i32 %44, 1, !dbg !4434
  store i32 %inc, i32* %i, align 4, !dbg !4434
  br label %for.cond, !dbg !4435, !llvm.loop !4436

for.end40:                                        ; preds = %for.cond
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4438
  %tobool41 = icmp ne %struct._IO_FILE* %45, null, !dbg !4438
  br i1 %tobool41, label %land.lhs.true42, label %if.end62, !dbg !4440

land.lhs.true42:                                  ; preds = %for.end40
  %46 = load i32, i32* @dump_flags, align 4, !dbg !4441
  %and43 = and i32 %46, 8, !dbg !4442
  %tobool44 = icmp ne i32 %and43, 0, !dbg !4442
  br i1 %tobool44, label %if.then45, label %if.end62, !dbg !4443

if.then45:                                        ; preds = %land.lhs.true42
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4444, metadata !DIExpression()), !dbg !4446
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4447
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4448
  %48 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4449
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %48, i32 0, i32 5, !dbg !4449
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !4449
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %49, i32 0, i32* %i), !dbg !4449
  br label %for.cond47, !dbg !4449

for.cond47:                                       ; preds = %for.inc59, %if.then45
  %call48 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4451
  %tobool49 = icmp ne i8 %call48, 0, !dbg !4449
  br i1 %tobool49, label %for.body50, label %for.end60, !dbg !4449

for.body50:                                       ; preds = %for.cond47
  %50 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4453
  %51 = load i32, i32* %i, align 4, !dbg !4455
  %call51 = call %struct.version_info* @ver_info(%struct.ivopts_data* %50, i32 %51), !dbg !4456
  store %struct.version_info* %call51, %struct.version_info** %info, align 8, !dbg !4457
  %52 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !4458
  %inv_id = getelementptr inbounds %struct.version_info, %struct.version_info* %52, i32 0, i32 3, !dbg !4460
  %53 = load i32, i32* %inv_id, align 4, !dbg !4460
  %tobool52 = icmp ne i32 %53, 0, !dbg !4458
  br i1 %tobool52, label %if.then53, label %if.end58, !dbg !4461

if.then53:                                        ; preds = %for.body50
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4462
  %call54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)), !dbg !4464
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4465
  %56 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !4466
  %name = getelementptr inbounds %struct.version_info, %struct.version_info* %56, i32 0, i32 0, !dbg !4467
  %57 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4467
  call void @print_generic_expr(%struct._IO_FILE* %55, %union.tree_node* %57, i32 2), !dbg !4468
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4469
  %59 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !4470
  %inv_id55 = getelementptr inbounds %struct.version_info, %struct.version_info* %59, i32 0, i32 3, !dbg !4471
  %60 = load i32, i32* %inv_id55, align 4, !dbg !4471
  %61 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !4472
  %has_nonlin_use = getelementptr inbounds %struct.version_info, %struct.version_info* %61, i32 0, i32 2, !dbg !4473
  %62 = load i8, i8* %has_nonlin_use, align 8, !dbg !4473
  %conv = zext i8 %62 to i32, !dbg !4472
  %tobool56 = icmp ne i32 %conv, 0, !dbg !4472
  %63 = zext i1 %tobool56 to i64, !dbg !4472
  %cond = select i1 %tobool56, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.39, i64 0, i64 0), !dbg !4472
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38, i64 0, i64 0), i32 %60, i8* %cond), !dbg !4474
  br label %if.end58, !dbg !4475

if.end58:                                         ; preds = %if.then53, %for.body50
  br label %for.inc59, !dbg !4476

for.inc59:                                        ; preds = %if.end58
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4451
  br label %for.cond47, !dbg !4451, !llvm.loop !4477

for.end60:                                        ; preds = %for.cond47
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4479
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4480
  br label %if.end62, !dbg !4481

if.end62:                                         ; preds = %for.end60, %land.lhs.true42, %for.end40
  %65 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !4482
  %66 = bitcast %struct.basic_block_def** %65 to i8*, !dbg !4482
  call void @free(i8* %66), !dbg !4483
  ret void, !dbg !4484
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_iv_candidates(%struct.ivopts_data* %data) #0 !dbg !4485 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4486, metadata !DIExpression()), !dbg !4487
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4488
  call void @add_standard_iv_candidates(%struct.ivopts_data* %0), !dbg !4489
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4490
  call void @add_old_ivs_candidates(%struct.ivopts_data* %1), !dbg !4491
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4492
  call void @add_derived_ivs_candidates(%struct.ivopts_data* %2), !dbg !4493
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4494
  call void @set_autoinc_for_original_candidates(%struct.ivopts_data* %3), !dbg !4495
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4496
  call void @record_important_candidates(%struct.ivopts_data* %4), !dbg !4497
  ret void, !dbg !4498
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_iv_costs(%struct.ivopts_data* %data) #0 !dbg !4499 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %cand = alloca %struct.iv_cand*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4500, metadata !DIExpression()), !dbg !4501
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4502, metadata !DIExpression()), !dbg !4503
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4504
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4504
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4506

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !4507
  %and = and i32 %1, 8, !dbg !4508
  %tobool1 = icmp ne i32 %and, 0, !dbg !4508
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4509

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4510
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64, i64 0, i64 0)), !dbg !4512
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4513
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i64 0, i64 0)), !dbg !4514
  br label %if.end, !dbg !4515

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i32 0, i32* %i, align 4, !dbg !4516
  br label %for.cond, !dbg !4518

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !4519
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4521
  %call3 = call i32 @n_iv_cands(%struct.ivopts_data* %5), !dbg !4522
  %cmp = icmp ult i32 %4, %call3, !dbg !4523
  br i1 %cmp, label %for.body, label %for.end, !dbg !4524

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !4525, metadata !DIExpression()), !dbg !4527
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4528
  %7 = load i32, i32* %i, align 4, !dbg !4529
  %call4 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %6, i32 %7), !dbg !4530
  store %struct.iv_cand* %call4, %struct.iv_cand** %cand, align 8, !dbg !4527
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4531
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !4532
  call void @determine_iv_cost(%struct.ivopts_data* %8, %struct.iv_cand* %9), !dbg !4533
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4534
  %tobool5 = icmp ne %struct._IO_FILE* %10, null, !dbg !4534
  br i1 %tobool5, label %land.lhs.true6, label %if.end11, !dbg !4536

land.lhs.true6:                                   ; preds = %for.body
  %11 = load i32, i32* @dump_flags, align 4, !dbg !4537
  %and7 = and i32 %11, 8, !dbg !4538
  %tobool8 = icmp ne i32 %and7, 0, !dbg !4538
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !4539

if.then9:                                         ; preds = %land.lhs.true6
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4540
  %13 = load i32, i32* %i, align 4, !dbg !4541
  %14 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !4542
  %cost = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %14, i32 0, i32 7, !dbg !4543
  %15 = load i32, i32* %cost, align 8, !dbg !4543
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i64 0, i64 0), i32 %13, i32 %15), !dbg !4544
  br label %if.end11, !dbg !4544

if.end11:                                         ; preds = %if.then9, %land.lhs.true6, %for.body
  br label %for.inc, !dbg !4545

for.inc:                                          ; preds = %if.end11
  %16 = load i32, i32* %i, align 4, !dbg !4546
  %inc = add i32 %16, 1, !dbg !4546
  store i32 %inc, i32* %i, align 4, !dbg !4546
  br label %for.cond, !dbg !4547, !llvm.loop !4548

for.end:                                          ; preds = %for.cond
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4550
  %tobool12 = icmp ne %struct._IO_FILE* %17, null, !dbg !4550
  br i1 %tobool12, label %land.lhs.true13, label %if.end18, !dbg !4552

land.lhs.true13:                                  ; preds = %for.end
  %18 = load i32, i32* @dump_flags, align 4, !dbg !4553
  %and14 = and i32 %18, 8, !dbg !4554
  %tobool15 = icmp ne i32 %and14, 0, !dbg !4554
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !4555

if.then16:                                        ; preds = %land.lhs.true13
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4556
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4557
  br label %if.end18, !dbg !4557

if.end18:                                         ; preds = %if.then16, %land.lhs.true13, %for.end
  ret void, !dbg !4558
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_use_iv_costs(%struct.ivopts_data* %data) #0 !dbg !4559 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  %cand = alloca %struct.iv_cand*, align 8
  %to_clear = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4560, metadata !DIExpression()), !dbg !4561
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4562, metadata !DIExpression()), !dbg !4563
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4564, metadata !DIExpression()), !dbg !4565
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !4566, metadata !DIExpression()), !dbg !4567
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !4568, metadata !DIExpression()), !dbg !4569
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %to_clear, metadata !4570, metadata !DIExpression()), !dbg !4571
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4572
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %to_clear, align 8, !dbg !4571
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4573
  call void @alloc_use_cost_map(%struct.ivopts_data* %0), !dbg !4574
  store i32 0, i32* %i, align 4, !dbg !4575
  br label %for.cond, !dbg !4577

for.cond:                                         ; preds = %for.inc23, %entry
  %1 = load i32, i32* %i, align 4, !dbg !4578
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4580
  %call1 = call i32 @n_iv_uses(%struct.ivopts_data* %2), !dbg !4581
  %cmp = icmp ult i32 %1, %call1, !dbg !4582
  br i1 %cmp, label %for.body, label %for.end25, !dbg !4583

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4584
  %4 = load i32, i32* %i, align 4, !dbg !4586
  %call2 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %3, i32 %4), !dbg !4587
  store %struct.iv_use* %call2, %struct.iv_use** %use, align 8, !dbg !4588
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4589
  %consider_all_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %5, i32 0, i32 10, !dbg !4591
  %6 = load i8, i8* %consider_all_candidates, align 4, !dbg !4591
  %tobool = icmp ne i8 %6, 0, !dbg !4589
  br i1 %tobool, label %if.then, label %if.else, !dbg !4592

if.then:                                          ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !4593
  br label %for.cond3, !dbg !4596

for.cond3:                                        ; preds = %for.inc, %if.then
  %7 = load i32, i32* %j, align 4, !dbg !4597
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4599
  %call4 = call i32 @n_iv_cands(%struct.ivopts_data* %8), !dbg !4600
  %cmp5 = icmp ult i32 %7, %call4, !dbg !4601
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !4602

for.body6:                                        ; preds = %for.cond3
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4603
  %10 = load i32, i32* %j, align 4, !dbg !4605
  %call7 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %9, i32 %10), !dbg !4606
  store %struct.iv_cand* %call7, %struct.iv_cand** %cand, align 8, !dbg !4607
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4608
  %12 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4609
  %13 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !4610
  %call8 = call zeroext i8 @determine_use_iv_cost(%struct.ivopts_data* %11, %struct.iv_use* %12, %struct.iv_cand* %13), !dbg !4611
  br label %for.inc, !dbg !4612

for.inc:                                          ; preds = %for.body6
  %14 = load i32, i32* %j, align 4, !dbg !4613
  %inc = add i32 %14, 1, !dbg !4613
  store i32 %inc, i32* %j, align 4, !dbg !4613
  br label %for.cond3, !dbg !4614, !llvm.loop !4615

for.end:                                          ; preds = %for.cond3
  br label %if.end22, !dbg !4617

if.else:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4618, metadata !DIExpression()), !dbg !4620
  %15 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4621
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %15, i32 0, i32 5, !dbg !4621
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !4621
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, i32 0, i32* %j), !dbg !4621
  br label %for.cond9, !dbg !4621

for.cond9:                                        ; preds = %for.inc18, %if.else
  %call10 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !4623
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4621
  br i1 %tobool11, label %for.body12, label %for.end19, !dbg !4621

for.body12:                                       ; preds = %for.cond9
  %17 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4625
  %18 = load i32, i32* %j, align 4, !dbg !4627
  %call13 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %17, i32 %18), !dbg !4628
  store %struct.iv_cand* %call13, %struct.iv_cand** %cand, align 8, !dbg !4629
  %19 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4630
  %20 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4632
  %21 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !4633
  %call14 = call zeroext i8 @determine_use_iv_cost(%struct.ivopts_data* %19, %struct.iv_use* %20, %struct.iv_cand* %21), !dbg !4634
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4634
  br i1 %tobool15, label %if.end, label %if.then16, !dbg !4635

if.then16:                                        ; preds = %for.body12
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_clear, align 8, !dbg !4636
  %23 = load i32, i32* %j, align 4, !dbg !4637
  %call17 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %22, i32 %23), !dbg !4638
  br label %if.end, !dbg !4638

if.end:                                           ; preds = %if.then16, %for.body12
  br label %for.inc18, !dbg !4639

for.inc18:                                        ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !4623
  br label %for.cond9, !dbg !4623, !llvm.loop !4640

for.end19:                                        ; preds = %for.cond9
  %24 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4642
  %related_cands20 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %24, i32 0, i32 5, !dbg !4643
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands20, align 8, !dbg !4643
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_clear, align 8, !dbg !4644
  %call21 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %25, %struct.bitmap_head_def* %26), !dbg !4645
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_clear, align 8, !dbg !4646
  call void @bitmap_clear(%struct.bitmap_head_def* %27), !dbg !4647
  br label %if.end22

if.end22:                                         ; preds = %for.end19, %for.end
  br label %for.inc23, !dbg !4648

for.inc23:                                        ; preds = %if.end22
  %28 = load i32, i32* %i, align 4, !dbg !4649
  %inc24 = add i32 %28, 1, !dbg !4649
  store i32 %inc24, i32* %i, align 4, !dbg !4649
  br label %for.cond, !dbg !4650, !llvm.loop !4651

for.end25:                                        ; preds = %for.cond
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_clear, align 8, !dbg !4653
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %29), !dbg !4653
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %to_clear, align 8, !dbg !4653
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4654
  %tobool26 = icmp ne %struct._IO_FILE* %30, null, !dbg !4654
  br i1 %tobool26, label %land.lhs.true, label %if.end82, !dbg !4656

land.lhs.true:                                    ; preds = %for.end25
  %31 = load i32, i32* @dump_flags, align 4, !dbg !4657
  %and = and i32 %31, 8, !dbg !4658
  %tobool27 = icmp ne i32 %and, 0, !dbg !4658
  br i1 %tobool27, label %if.then28, label %if.end82, !dbg !4659

if.then28:                                        ; preds = %land.lhs.true
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4660
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.67, i64 0, i64 0)), !dbg !4662
  store i32 0, i32* %i, align 4, !dbg !4663
  br label %for.cond30, !dbg !4665

for.cond30:                                       ; preds = %for.inc78, %if.then28
  %33 = load i32, i32* %i, align 4, !dbg !4666
  %34 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4668
  %call31 = call i32 @n_iv_uses(%struct.ivopts_data* %34), !dbg !4669
  %cmp32 = icmp ult i32 %33, %call31, !dbg !4670
  br i1 %cmp32, label %for.body33, label %for.end80, !dbg !4671

for.body33:                                       ; preds = %for.cond30
  %35 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4672
  %36 = load i32, i32* %i, align 4, !dbg !4674
  %call34 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %35, i32 %36), !dbg !4675
  store %struct.iv_use* %call34, %struct.iv_use** %use, align 8, !dbg !4676
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4677
  %38 = load i32, i32* %i, align 4, !dbg !4678
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i64 0, i64 0), i32 %38), !dbg !4679
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4680
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.69, i64 0, i64 0)), !dbg !4681
  store i32 0, i32* %j, align 4, !dbg !4682
  br label %for.cond37, !dbg !4684

for.cond37:                                       ; preds = %for.inc74, %for.body33
  %40 = load i32, i32* %j, align 4, !dbg !4685
  %41 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4687
  %n_map_members = getelementptr inbounds %struct.iv_use, %struct.iv_use* %41, i32 0, i32 6, !dbg !4688
  %42 = load i32, i32* %n_map_members, align 8, !dbg !4688
  %cmp38 = icmp ult i32 %40, %42, !dbg !4689
  br i1 %cmp38, label %for.body39, label %for.end76, !dbg !4690

for.body39:                                       ; preds = %for.cond37
  %43 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4691
  %cost_map = getelementptr inbounds %struct.iv_use, %struct.iv_use* %43, i32 0, i32 7, !dbg !4694
  %44 = load %struct.cost_pair*, %struct.cost_pair** %cost_map, align 8, !dbg !4694
  %45 = load i32, i32* %j, align 4, !dbg !4695
  %idxprom = zext i32 %45 to i64, !dbg !4691
  %arrayidx = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %44, i64 %idxprom, !dbg !4691
  %cand40 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx, i32 0, i32 0, !dbg !4696
  %46 = load %struct.iv_cand*, %struct.iv_cand** %cand40, align 8, !dbg !4696
  %tobool41 = icmp ne %struct.iv_cand* %46, null, !dbg !4691
  br i1 %tobool41, label %lor.lhs.false, label %if.then47, !dbg !4697

lor.lhs.false:                                    ; preds = %for.body39
  %47 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4698
  %cost_map42 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %47, i32 0, i32 7, !dbg !4699
  %48 = load %struct.cost_pair*, %struct.cost_pair** %cost_map42, align 8, !dbg !4699
  %49 = load i32, i32* %j, align 4, !dbg !4700
  %idxprom43 = zext i32 %49 to i64, !dbg !4698
  %arrayidx44 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %48, i64 %idxprom43, !dbg !4698
  %cost = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx44, i32 0, i32 1, !dbg !4701
  %50 = bitcast %struct.comp_cost* %cost to i64*, !dbg !4702
  %51 = load i64, i64* %50, align 8, !dbg !4702
  %call45 = call zeroext i8 @infinite_cost_p(i64 %51), !dbg !4702
  %conv = zext i8 %call45 to i32, !dbg !4702
  %tobool46 = icmp ne i32 %conv, 0, !dbg !4702
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !4703

if.then47:                                        ; preds = %lor.lhs.false, %for.body39
  br label %for.inc74, !dbg !4704

if.end48:                                         ; preds = %lor.lhs.false
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4705
  %53 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4706
  %cost_map49 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %53, i32 0, i32 7, !dbg !4707
  %54 = load %struct.cost_pair*, %struct.cost_pair** %cost_map49, align 8, !dbg !4707
  %55 = load i32, i32* %j, align 4, !dbg !4708
  %idxprom50 = zext i32 %55 to i64, !dbg !4706
  %arrayidx51 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %54, i64 %idxprom50, !dbg !4706
  %cand52 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx51, i32 0, i32 0, !dbg !4709
  %56 = load %struct.iv_cand*, %struct.iv_cand** %cand52, align 8, !dbg !4709
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %56, i32 0, i32 0, !dbg !4710
  %57 = load i32, i32* %id, align 8, !dbg !4710
  %58 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4711
  %cost_map53 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %58, i32 0, i32 7, !dbg !4712
  %59 = load %struct.cost_pair*, %struct.cost_pair** %cost_map53, align 8, !dbg !4712
  %60 = load i32, i32* %j, align 4, !dbg !4713
  %idxprom54 = zext i32 %60 to i64, !dbg !4711
  %arrayidx55 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %59, i64 %idxprom54, !dbg !4711
  %cost56 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx55, i32 0, i32 1, !dbg !4714
  %cost57 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost56, i32 0, i32 0, !dbg !4715
  %61 = load i32, i32* %cost57, align 8, !dbg !4715
  %62 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4716
  %cost_map58 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %62, i32 0, i32 7, !dbg !4717
  %63 = load %struct.cost_pair*, %struct.cost_pair** %cost_map58, align 8, !dbg !4717
  %64 = load i32, i32* %j, align 4, !dbg !4718
  %idxprom59 = zext i32 %64 to i64, !dbg !4716
  %arrayidx60 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %63, i64 %idxprom59, !dbg !4716
  %cost61 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx60, i32 0, i32 1, !dbg !4719
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost61, i32 0, i32 1, !dbg !4720
  %65 = load i32, i32* %complexity, align 4, !dbg !4720
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i64 0, i64 0), i32 %57, i32 %61, i32 %65), !dbg !4721
  %66 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4722
  %cost_map63 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %66, i32 0, i32 7, !dbg !4724
  %67 = load %struct.cost_pair*, %struct.cost_pair** %cost_map63, align 8, !dbg !4724
  %68 = load i32, i32* %j, align 4, !dbg !4725
  %idxprom64 = zext i32 %68 to i64, !dbg !4722
  %arrayidx65 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %67, i64 %idxprom64, !dbg !4722
  %depends_on = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx65, i32 0, i32 2, !dbg !4726
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4726
  %tobool66 = icmp ne %struct.bitmap_head_def* %69, null, !dbg !4722
  br i1 %tobool66, label %if.then67, label %if.end72, !dbg !4727

if.then67:                                        ; preds = %if.end48
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4728
  %71 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4729
  %cost_map68 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %71, i32 0, i32 7, !dbg !4730
  %72 = load %struct.cost_pair*, %struct.cost_pair** %cost_map68, align 8, !dbg !4730
  %73 = load i32, i32* %j, align 4, !dbg !4731
  %idxprom69 = zext i32 %73 to i64, !dbg !4729
  %arrayidx70 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %72, i64 %idxprom69, !dbg !4729
  %depends_on71 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx70, i32 0, i32 2, !dbg !4732
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on71, align 8, !dbg !4732
  call void @bitmap_print(%struct._IO_FILE* %70, %struct.bitmap_head_def* %74, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0)), !dbg !4733
  br label %if.end72, !dbg !4733

if.end72:                                         ; preds = %if.then67, %if.end48
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4734
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4735
  br label %for.inc74, !dbg !4736

for.inc74:                                        ; preds = %if.end72, %if.then47
  %76 = load i32, i32* %j, align 4, !dbg !4737
  %inc75 = add i32 %76, 1, !dbg !4737
  store i32 %inc75, i32* %j, align 4, !dbg !4737
  br label %for.cond37, !dbg !4738, !llvm.loop !4739

for.end76:                                        ; preds = %for.cond37
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4741
  %call77 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4742
  br label %for.inc78, !dbg !4743

for.inc78:                                        ; preds = %for.end76
  %78 = load i32, i32* %i, align 4, !dbg !4744
  %inc79 = add i32 %78, 1, !dbg !4744
  store i32 %inc79, i32* %i, align 4, !dbg !4744
  br label %for.cond30, !dbg !4745, !llvm.loop !4746

for.end80:                                        ; preds = %for.cond30
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4748
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4749
  br label %if.end82, !dbg !4750

if.end82:                                         ; preds = %for.end80, %land.lhs.true, %for.end25
  ret void, !dbg !4751
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_set_costs(%struct.ivopts_data* %data) #0 !dbg !4752 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %phi = alloca %union.gimple_statement_d*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %op = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %info = alloca %struct.version_info*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4753, metadata !DIExpression()), !dbg !4754
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4755, metadata !DIExpression()), !dbg !4756
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4757, metadata !DIExpression()), !dbg !4758
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4759, metadata !DIExpression()), !dbg !4760
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !4761, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4763, metadata !DIExpression()), !dbg !4764
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4765, metadata !DIExpression()), !dbg !4766
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4767
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !4768
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !4768
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4766
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4769, metadata !DIExpression()), !dbg !4770
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4771
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !4771
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4773

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !4774
  %and = and i32 %3, 8, !dbg !4775
  %tobool1 = icmp ne i32 %and, 0, !dbg !4775
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4776

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4777
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.71, i64 0, i64 0)), !dbg !4779
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4780
  %6 = load i32, i32* @target_avail_regs, align 4, !dbg !4781
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.72, i64 0, i64 0), i32 %6), !dbg !4782
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4783
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4784
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %8, i32 0, i32 11, !dbg !4785
  %9 = load i8, i8* %speed, align 1, !dbg !4785
  %idxprom = zext i8 %9 to i64, !dbg !4786
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* @target_reg_cost, i64 0, i64 %idxprom, !dbg !4786
  %10 = load i32, i32* %arrayidx, align 4, !dbg !4786
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.73, i64 0, i64 0), i32 %10), !dbg !4787
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4788
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4789
  %speed4 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %12, i32 0, i32 11, !dbg !4790
  %13 = load i8, i8* %speed4, align 1, !dbg !4790
  %idxprom5 = zext i8 %13 to i64, !dbg !4791
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom5, !dbg !4791
  %14 = load i32, i32* %arrayidx6, align 4, !dbg !4791
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.74, i64 0, i64 0), i32 %14), !dbg !4792
  br label %if.end, !dbg !4793

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  store i32 0, i32* %n, align 4, !dbg !4794
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4795
  %header = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 2, !dbg !4797
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4797
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %16), !dbg !4798
  %17 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !4798
  %18 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4798
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false), !dbg !4798
  br label %for.cond, !dbg !4799

for.cond:                                         ; preds = %for.inc, %if.end
  %call8 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4800
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4802
  %lnot = xor i1 %tobool9, true, !dbg !4802
  br i1 %lnot, label %for.body, label %for.end, !dbg !4803

for.body:                                         ; preds = %for.cond
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4804
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %phi, align 8, !dbg !4806
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4807
  %call11 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %19), !dbg !4807
  %call12 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call11), !dbg !4807
  store %union.tree_node* %call12, %union.tree_node** %op, align 8, !dbg !4808
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4809
  %call13 = call zeroext i8 @is_gimple_reg(%union.tree_node* %20), !dbg !4811
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4811
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !4812

if.then15:                                        ; preds = %for.body
  br label %for.inc, !dbg !4813

if.end16:                                         ; preds = %for.body
  %21 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4814
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4816
  %call17 = call %struct.iv* @get_iv(%struct.ivopts_data* %21, %union.tree_node* %22), !dbg !4817
  %tobool18 = icmp ne %struct.iv* %call17, null, !dbg !4817
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !4818

if.then19:                                        ; preds = %if.end16
  br label %for.inc, !dbg !4819

if.end20:                                         ; preds = %if.end16
  %23 = load i32, i32* %n, align 4, !dbg !4820
  %inc = add i32 %23, 1, !dbg !4820
  store i32 %inc, i32* %n, align 4, !dbg !4820
  br label %for.inc, !dbg !4821

for.inc:                                          ; preds = %if.end20, %if.then19, %if.then15
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4822
  br label %for.cond, !dbg !4823, !llvm.loop !4824

for.end:                                          ; preds = %for.cond
  %24 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4826
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %24, i32 0, i32 5, !dbg !4826
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !4826
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %25, i32 0, i32* %j), !dbg !4826
  br label %for.cond21, !dbg !4826

for.cond21:                                       ; preds = %for.inc32, %for.end
  %call22 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !4828
  %tobool23 = icmp ne i8 %call22, 0, !dbg !4826
  br i1 %tobool23, label %for.body24, label %for.end33, !dbg !4826

for.body24:                                       ; preds = %for.cond21
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !4830, metadata !DIExpression()), !dbg !4832
  %26 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4833
  %27 = load i32, i32* %j, align 4, !dbg !4834
  %call25 = call %struct.version_info* @ver_info(%struct.ivopts_data* %26, i32 %27), !dbg !4835
  store %struct.version_info* %call25, %struct.version_info** %info, align 8, !dbg !4832
  %28 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !4836
  %inv_id = getelementptr inbounds %struct.version_info, %struct.version_info* %28, i32 0, i32 3, !dbg !4838
  %29 = load i32, i32* %inv_id, align 4, !dbg !4838
  %tobool26 = icmp ne i32 %29, 0, !dbg !4836
  br i1 %tobool26, label %land.lhs.true27, label %if.end31, !dbg !4839

land.lhs.true27:                                  ; preds = %for.body24
  %30 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !4840
  %has_nonlin_use = getelementptr inbounds %struct.version_info, %struct.version_info* %30, i32 0, i32 2, !dbg !4841
  %31 = load i8, i8* %has_nonlin_use, align 8, !dbg !4841
  %conv = zext i8 %31 to i32, !dbg !4840
  %tobool28 = icmp ne i32 %conv, 0, !dbg !4840
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !4842

if.then29:                                        ; preds = %land.lhs.true27
  %32 = load i32, i32* %n, align 4, !dbg !4843
  %inc30 = add i32 %32, 1, !dbg !4843
  store i32 %inc30, i32* %n, align 4, !dbg !4843
  br label %if.end31, !dbg !4844

if.end31:                                         ; preds = %if.then29, %land.lhs.true27, %for.body24
  br label %for.inc32, !dbg !4845

for.inc32:                                        ; preds = %if.end31
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !4828
  br label %for.cond21, !dbg !4828, !llvm.loop !4846

for.end33:                                        ; preds = %for.cond21
  %33 = load i32, i32* %n, align 4, !dbg !4848
  %34 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4849
  %regs_used = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %34, i32 0, i32 2, !dbg !4850
  store i32 %33, i32* %regs_used, align 8, !dbg !4851
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4852
  %tobool34 = icmp ne %struct._IO_FILE* %35, null, !dbg !4852
  br i1 %tobool34, label %land.lhs.true35, label %if.end40, !dbg !4854

land.lhs.true35:                                  ; preds = %for.end33
  %36 = load i32, i32* @dump_flags, align 4, !dbg !4855
  %and36 = and i32 %36, 8, !dbg !4856
  %tobool37 = icmp ne i32 %and36, 0, !dbg !4856
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !4857

if.then38:                                        ; preds = %land.lhs.true35
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4858
  %38 = load i32, i32* %n, align 4, !dbg !4859
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.75, i64 0, i64 0), i32 %38), !dbg !4860
  br label %if.end40, !dbg !4860

if.end40:                                         ; preds = %if.then38, %land.lhs.true35, %for.end33
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4861
  %tobool41 = icmp ne %struct._IO_FILE* %39, null, !dbg !4861
  br i1 %tobool41, label %land.lhs.true42, label %if.end57, !dbg !4863

land.lhs.true42:                                  ; preds = %if.end40
  %40 = load i32, i32* @dump_flags, align 4, !dbg !4864
  %and43 = and i32 %40, 8, !dbg !4865
  %tobool44 = icmp ne i32 %and43, 0, !dbg !4865
  br i1 %tobool44, label %if.then45, label %if.end57, !dbg !4866

if.then45:                                        ; preds = %land.lhs.true42
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4867
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.76, i64 0, i64 0)), !dbg !4869
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4870
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i64 0, i64 0)), !dbg !4871
  store i32 0, i32* %j, align 4, !dbg !4872
  br label %for.cond48, !dbg !4874

for.cond48:                                       ; preds = %for.inc53, %if.then45
  %43 = load i32, i32* %j, align 4, !dbg !4875
  %44 = load i32, i32* @target_avail_regs, align 4, !dbg !4877
  %mul = mul i32 2, %44, !dbg !4878
  %cmp = icmp ule i32 %43, %mul, !dbg !4879
  br i1 %cmp, label %for.body50, label %for.end55, !dbg !4880

for.body50:                                       ; preds = %for.cond48
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4881
  %46 = load i32, i32* %j, align 4, !dbg !4882
  %47 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4883
  %48 = load i32, i32* %j, align 4, !dbg !4884
  %call51 = call i32 @ivopts_global_cost_for_size(%struct.ivopts_data* %47, i32 %48), !dbg !4885
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i64 0, i64 0), i32 %46, i32 %call51), !dbg !4886
  br label %for.inc53, !dbg !4886

for.inc53:                                        ; preds = %for.body50
  %49 = load i32, i32* %j, align 4, !dbg !4887
  %inc54 = add i32 %49, 1, !dbg !4887
  store i32 %inc54, i32* %j, align 4, !dbg !4887
  br label %for.cond48, !dbg !4888, !llvm.loop !4889

for.end55:                                        ; preds = %for.cond48
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4891
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4892
  br label %if.end57, !dbg !4893

if.end57:                                         ; preds = %for.end55, %land.lhs.true42, %if.end40
  ret void, !dbg !4894
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_ca* @find_optimal_iv_set(%struct.ivopts_data* %data) #0 !dbg !4895 {
entry:
  %retval = alloca %struct.iv_ca*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %set = alloca %struct.iv_ca*, align 8
  %use = alloca %struct.iv_use*, align 8
  %cost = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !4898, metadata !DIExpression()), !dbg !4899
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4900, metadata !DIExpression()), !dbg !4901
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %set, metadata !4902, metadata !DIExpression()), !dbg !4903
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !4904, metadata !DIExpression()), !dbg !4905
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4906
  %call = call %struct.iv_ca* @get_initial_solution(%struct.ivopts_data* %0), !dbg !4907
  store %struct.iv_ca* %call, %struct.iv_ca** %set, align 8, !dbg !4908
  %1 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4909
  %tobool = icmp ne %struct.iv_ca* %1, null, !dbg !4909
  br i1 %tobool, label %if.end5, label %if.then, !dbg !4911

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4912
  %tobool1 = icmp ne %struct._IO_FILE* %2, null, !dbg !4912
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !4915

land.lhs.true:                                    ; preds = %if.then
  %3 = load i32, i32* @dump_flags, align 4, !dbg !4916
  %and = and i32 %3, 8, !dbg !4917
  %tobool2 = icmp ne i32 %and, 0, !dbg !4917
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4918

if.then3:                                         ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4919
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.78, i64 0, i64 0)), !dbg !4920
  br label %if.end, !dbg !4920

if.end:                                           ; preds = %if.then3, %land.lhs.true, %if.then
  store %struct.iv_ca* null, %struct.iv_ca** %retval, align 8, !dbg !4921
  br label %return, !dbg !4921

if.end5:                                          ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4922
  %tobool6 = icmp ne %struct._IO_FILE* %5, null, !dbg !4922
  br i1 %tobool6, label %land.lhs.true7, label %if.end12, !dbg !4924

land.lhs.true7:                                   ; preds = %if.end5
  %6 = load i32, i32* @dump_flags, align 4, !dbg !4925
  %and8 = and i32 %6, 8, !dbg !4926
  %tobool9 = icmp ne i32 %and8, 0, !dbg !4926
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !4927

if.then10:                                        ; preds = %land.lhs.true7
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4928
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.79, i64 0, i64 0)), !dbg !4930
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4931
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4932
  %10 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4933
  call void @iv_ca_dump(%struct.ivopts_data* %8, %struct._IO_FILE* %9, %struct.iv_ca* %10), !dbg !4934
  br label %if.end12, !dbg !4935

if.end12:                                         ; preds = %if.then10, %land.lhs.true7, %if.end5
  br label %while.cond, !dbg !4936

while.cond:                                       ; preds = %if.end21, %if.end12
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4937
  %12 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4938
  %call13 = call zeroext i8 @try_improve_iv_set(%struct.ivopts_data* %11, %struct.iv_ca* %12), !dbg !4939
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4936
  br i1 %tobool14, label %while.body, label %while.end, !dbg !4936

while.body:                                       ; preds = %while.cond
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4940
  %tobool15 = icmp ne %struct._IO_FILE* %13, null, !dbg !4940
  br i1 %tobool15, label %land.lhs.true16, label %if.end21, !dbg !4943

land.lhs.true16:                                  ; preds = %while.body
  %14 = load i32, i32* @dump_flags, align 4, !dbg !4944
  %and17 = and i32 %14, 8, !dbg !4945
  %tobool18 = icmp ne i32 %and17, 0, !dbg !4945
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !4946

if.then19:                                        ; preds = %land.lhs.true16
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4947
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.80, i64 0, i64 0)), !dbg !4949
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4950
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4951
  %18 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4952
  call void @iv_ca_dump(%struct.ivopts_data* %16, %struct._IO_FILE* %17, %struct.iv_ca* %18), !dbg !4953
  br label %if.end21, !dbg !4954

if.end21:                                         ; preds = %if.then19, %land.lhs.true16, %while.body
  br label %while.cond, !dbg !4936, !llvm.loop !4955

while.end:                                        ; preds = %while.cond
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4957
  %tobool22 = icmp ne %struct._IO_FILE* %19, null, !dbg !4957
  br i1 %tobool22, label %land.lhs.true23, label %if.end30, !dbg !4959

land.lhs.true23:                                  ; preds = %while.end
  %20 = load i32, i32* @dump_flags, align 4, !dbg !4960
  %and24 = and i32 %20, 8, !dbg !4961
  %tobool25 = icmp ne i32 %and24, 0, !dbg !4961
  br i1 %tobool25, label %if.then26, label %if.end30, !dbg !4962

if.then26:                                        ; preds = %land.lhs.true23
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !4963, metadata !DIExpression()), !dbg !4965
  %21 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4966
  %call27 = call i64 @iv_ca_cost(%struct.iv_ca* %21), !dbg !4967
  %22 = bitcast %struct.comp_cost* %cost to i64*, !dbg !4967
  store i64 %call27, i64* %22, align 4, !dbg !4967
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4968
  %cost28 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !4969
  %24 = load i32, i32* %cost28, align 4, !dbg !4969
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 1, !dbg !4970
  %25 = load i32, i32* %complexity, align 4, !dbg !4970
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.81, i64 0, i64 0), i32 %24, i32 %25), !dbg !4971
  br label %if.end30, !dbg !4972

if.end30:                                         ; preds = %if.then26, %land.lhs.true23, %while.end
  store i32 0, i32* %i, align 4, !dbg !4973
  br label %for.cond, !dbg !4975

for.cond:                                         ; preds = %for.inc, %if.end30
  %26 = load i32, i32* %i, align 4, !dbg !4976
  %27 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4978
  %call31 = call i32 @n_iv_uses(%struct.ivopts_data* %27), !dbg !4979
  %cmp = icmp ult i32 %26, %call31, !dbg !4980
  br i1 %cmp, label %for.body, label %for.end, !dbg !4981

for.body:                                         ; preds = %for.cond
  %28 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !4982
  %29 = load i32, i32* %i, align 4, !dbg !4984
  %call32 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %28, i32 %29), !dbg !4985
  store %struct.iv_use* %call32, %struct.iv_use** %use, align 8, !dbg !4986
  %30 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4987
  %31 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4988
  %call33 = call %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %30, %struct.iv_use* %31), !dbg !4989
  %cand = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %call33, i32 0, i32 0, !dbg !4990
  %32 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !4990
  %33 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !4991
  %selected = getelementptr inbounds %struct.iv_use, %struct.iv_use* %33, i32 0, i32 8, !dbg !4992
  store %struct.iv_cand* %32, %struct.iv_cand** %selected, align 8, !dbg !4993
  br label %for.inc, !dbg !4994

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %i, align 4, !dbg !4995
  %inc = add i32 %34, 1, !dbg !4995
  store i32 %inc, i32* %i, align 4, !dbg !4995
  br label %for.cond, !dbg !4996, !llvm.loop !4997

for.end:                                          ; preds = %for.cond
  %35 = load %struct.iv_ca*, %struct.iv_ca** %set, align 8, !dbg !4999
  store %struct.iv_ca* %35, %struct.iv_ca** %retval, align 8, !dbg !5000
  br label %return, !dbg !5000

return:                                           ; preds = %for.end, %if.end
  %36 = load %struct.iv_ca*, %struct.iv_ca** %retval, align 8, !dbg !5001
  ret %struct.iv_ca* %36, !dbg !5001
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_ivs(%struct.ivopts_data* %data, %struct.iv_ca* %set) #0 !dbg !5002 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %set.addr = alloca %struct.iv_ca*, align 8
  %i = alloca i32, align 4
  %cand = alloca %struct.iv_cand*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5005, metadata !DIExpression()), !dbg !5006
  store %struct.iv_ca* %set, %struct.iv_ca** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %set.addr, metadata !5007, metadata !DIExpression()), !dbg !5008
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5009, metadata !DIExpression()), !dbg !5010
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !5011, metadata !DIExpression()), !dbg !5012
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5013, metadata !DIExpression()), !dbg !5014
  %0 = load %struct.iv_ca*, %struct.iv_ca** %set.addr, align 8, !dbg !5015
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 4, !dbg !5015
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !5015
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %i), !dbg !5015
  br label %for.cond, !dbg !5015

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5017
  %tobool = icmp ne i8 %call, 0, !dbg !5015
  br i1 %tobool, label %for.body, label %for.end, !dbg !5015

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5019
  %3 = load i32, i32* %i, align 4, !dbg !5021
  %call1 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %2, i32 %3), !dbg !5022
  store %struct.iv_cand* %call1, %struct.iv_cand** %cand, align 8, !dbg !5023
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5024
  %5 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5025
  call void @create_new_iv(%struct.ivopts_data* %4, %struct.iv_cand* %5), !dbg !5026
  br label %for.inc, !dbg !5027

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5017
  br label %for.cond, !dbg !5017, !llvm.loop !5028

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5030
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_free(%struct.iv_ca** %ivs) #0 !dbg !5031 {
entry:
  %ivs.addr = alloca %struct.iv_ca**, align 8
  store %struct.iv_ca** %ivs, %struct.iv_ca*** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca*** %ivs.addr, metadata !5035, metadata !DIExpression()), !dbg !5036
  %0 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5037
  %1 = load %struct.iv_ca*, %struct.iv_ca** %0, align 8, !dbg !5038
  %cand_for_use = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %1, i32 0, i32 2, !dbg !5039
  %2 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use, align 8, !dbg !5039
  %3 = bitcast %struct.cost_pair** %2 to i8*, !dbg !5040
  call void @free(i8* %3), !dbg !5041
  %4 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5042
  %5 = load %struct.iv_ca*, %struct.iv_ca** %4, align 8, !dbg !5043
  %n_cand_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %5, i32 0, i32 3, !dbg !5044
  %6 = load i32*, i32** %n_cand_uses, align 8, !dbg !5044
  %7 = bitcast i32* %6 to i8*, !dbg !5045
  call void @free(i8* %7), !dbg !5046
  %8 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5047
  %9 = load %struct.iv_ca*, %struct.iv_ca** %8, align 8, !dbg !5047
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %9, i32 0, i32 4, !dbg !5047
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !5047
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %10), !dbg !5047
  %11 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5047
  %12 = load %struct.iv_ca*, %struct.iv_ca** %11, align 8, !dbg !5047
  %cands1 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %12, i32 0, i32 4, !dbg !5047
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %cands1, align 8, !dbg !5047
  %13 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5048
  %14 = load %struct.iv_ca*, %struct.iv_ca** %13, align 8, !dbg !5049
  %n_invariant_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %14, i32 0, i32 9, !dbg !5050
  %15 = load i32*, i32** %n_invariant_uses, align 8, !dbg !5050
  %16 = bitcast i32* %15 to i8*, !dbg !5051
  call void @free(i8* %16), !dbg !5052
  %17 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5053
  %18 = load %struct.iv_ca*, %struct.iv_ca** %17, align 8, !dbg !5054
  %19 = bitcast %struct.iv_ca* %18 to i8*, !dbg !5054
  call void @free(i8* %19), !dbg !5055
  %20 = load %struct.iv_ca**, %struct.iv_ca*** %ivs.addr, align 8, !dbg !5056
  store %struct.iv_ca* null, %struct.iv_ca** %20, align 8, !dbg !5057
  ret void, !dbg !5058
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_uses(%struct.ivopts_data* %data) #0 !dbg !5059 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %cand = alloca %struct.iv_cand*, align 8
  %use = alloca %struct.iv_use*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5060, metadata !DIExpression()), !dbg !5061
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5062, metadata !DIExpression()), !dbg !5063
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !5064, metadata !DIExpression()), !dbg !5065
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !5066, metadata !DIExpression()), !dbg !5067
  store i32 0, i32* %i, align 4, !dbg !5068
  br label %for.cond, !dbg !5070

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5071
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5073
  %call = call i32 @n_iv_uses(%struct.ivopts_data* %1), !dbg !5074
  %cmp = icmp ult i32 %0, %call, !dbg !5075
  br i1 %cmp, label %for.body, label %for.end, !dbg !5076

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5077
  %3 = load i32, i32* %i, align 4, !dbg !5079
  %call1 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %2, i32 %3), !dbg !5080
  store %struct.iv_use* %call1, %struct.iv_use** %use, align 8, !dbg !5081
  %4 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5082
  %selected = getelementptr inbounds %struct.iv_use, %struct.iv_use* %4, i32 0, i32 8, !dbg !5083
  %5 = load %struct.iv_cand*, %struct.iv_cand** %selected, align 8, !dbg !5083
  store %struct.iv_cand* %5, %struct.iv_cand** %cand, align 8, !dbg !5084
  %6 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5085
  %tobool = icmp ne %struct.iv_cand* %6, null, !dbg !5085
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5085

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5085
  br label %cond.end, !dbg !5085

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5085
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5086
  %8 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5087
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5088
  call void @rewrite_use(%struct.ivopts_data* %7, %struct.iv_use* %8, %struct.iv_cand* %9), !dbg !5089
  br label %for.inc, !dbg !5090

for.inc:                                          ; preds = %cond.end
  %10 = load i32, i32* %i, align 4, !dbg !5091
  %inc = add i32 %10, 1, !dbg !5091
  store i32 %inc, i32* %i, align 4, !dbg !5091
  br label %for.cond, !dbg !5092, !llvm.loop !5093

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5095
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unused_ivs(%struct.ivopts_data* %data) #0 !dbg !5096 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %toremove = alloca %struct.bitmap_head_def*, align 8
  %info = alloca %struct.version_info*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5097, metadata !DIExpression()), !dbg !5098
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5099, metadata !DIExpression()), !dbg !5100
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5101, metadata !DIExpression()), !dbg !5102
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %toremove, metadata !5103, metadata !DIExpression()), !dbg !5104
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5105
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %toremove, align 8, !dbg !5104
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5106
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 5, !dbg !5106
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !5106
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %j), !dbg !5106
  br label %for.cond, !dbg !5106

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !5108
  %tobool = icmp ne i8 %call1, 0, !dbg !5106
  br i1 %tobool, label %for.body, label %for.end, !dbg !5106

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !5110, metadata !DIExpression()), !dbg !5112
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5113
  %3 = load i32, i32* %j, align 4, !dbg !5114
  %call2 = call %struct.version_info* @ver_info(%struct.ivopts_data* %2, i32 %3), !dbg !5115
  store %struct.version_info* %call2, %struct.version_info** %info, align 8, !dbg !5116
  %4 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5117
  %iv = getelementptr inbounds %struct.version_info, %struct.version_info* %4, i32 0, i32 1, !dbg !5119
  %5 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5119
  %tobool3 = icmp ne %struct.iv* %5, null, !dbg !5117
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !5120

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5121
  %iv4 = getelementptr inbounds %struct.version_info, %struct.version_info* %6, i32 0, i32 1, !dbg !5122
  %7 = load %struct.iv*, %struct.iv** %iv4, align 8, !dbg !5122
  %step = getelementptr inbounds %struct.iv, %struct.iv* %7, i32 0, i32 2, !dbg !5123
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5123
  %call5 = call i32 @integer_zerop(%union.tree_node* %8), !dbg !5124
  %tobool6 = icmp ne i32 %call5, 0, !dbg !5124
  br i1 %tobool6, label %if.end, label %land.lhs.true7, !dbg !5125

land.lhs.true7:                                   ; preds = %land.lhs.true
  %9 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5126
  %inv_id = getelementptr inbounds %struct.version_info, %struct.version_info* %9, i32 0, i32 3, !dbg !5127
  %10 = load i32, i32* %inv_id, align 4, !dbg !5127
  %tobool8 = icmp ne i32 %10, 0, !dbg !5126
  br i1 %tobool8, label %if.end, label %land.lhs.true9, !dbg !5128

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %11 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5129
  %iv10 = getelementptr inbounds %struct.version_info, %struct.version_info* %11, i32 0, i32 1, !dbg !5130
  %12 = load %struct.iv*, %struct.iv** %iv10, align 8, !dbg !5130
  %have_use_for = getelementptr inbounds %struct.iv, %struct.iv* %12, i32 0, i32 5, !dbg !5131
  %13 = load i8, i8* %have_use_for, align 1, !dbg !5131
  %tobool11 = icmp ne i8 %13, 0, !dbg !5129
  br i1 %tobool11, label %if.end, label %land.lhs.true12, !dbg !5132

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %14 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5133
  %preserve_biv = getelementptr inbounds %struct.version_info, %struct.version_info* %14, i32 0, i32 4, !dbg !5134
  %15 = load i8, i8* %preserve_biv, align 8, !dbg !5134
  %tobool13 = icmp ne i8 %15, 0, !dbg !5133
  br i1 %tobool13, label %if.end, label %if.then, !dbg !5135

if.then:                                          ; preds = %land.lhs.true12
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove, align 8, !dbg !5136
  %17 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5137
  %iv14 = getelementptr inbounds %struct.version_info, %struct.version_info* %17, i32 0, i32 1, !dbg !5137
  %18 = load %struct.iv*, %struct.iv** %iv14, align 8, !dbg !5137
  %ssa_name = getelementptr inbounds %struct.iv, %struct.iv* %18, i32 0, i32 3, !dbg !5137
  %19 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !5137
  %ssa_name15 = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !5137
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name15, i32 0, i32 3, !dbg !5137
  %20 = load i32, i32* %version, align 8, !dbg !5137
  %call16 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %16, i32 %20), !dbg !5138
  br label %if.end, !dbg !5138

if.end:                                           ; preds = %if.then, %land.lhs.true12, %land.lhs.true9, %land.lhs.true7, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5139

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !5108
  br label %for.cond, !dbg !5108, !llvm.loop !5140

for.end:                                          ; preds = %for.cond
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove, align 8, !dbg !5142
  call void @release_defs_bitset(%struct.bitmap_head_def* %21), !dbg !5143
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %toremove, align 8, !dbg !5144
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %22), !dbg !5144
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %toremove, align 8, !dbg !5144
  ret void, !dbg !5145
}

declare dso_local void @scev_reset() #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @free_loop_data(%struct.ivopts_data* %data) #0 !dbg !5146 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %obj = alloca %union.tree_node*, align 8
  %info = alloca %struct.version_info*, align 8
  %use = alloca %struct.iv_use*, align 8
  %cand = alloca %struct.iv_cand*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5147, metadata !DIExpression()), !dbg !5148
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5149, metadata !DIExpression()), !dbg !5150
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5151, metadata !DIExpression()), !dbg !5152
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5153, metadata !DIExpression()), !dbg !5154
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj, metadata !5155, metadata !DIExpression()), !dbg !5156
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5157
  %niters = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 1, !dbg !5159
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %niters, align 8, !dbg !5159
  %tobool = icmp ne %struct.pointer_map_t* %1, null, !dbg !5157
  br i1 %tobool, label %if.then, label %if.end, !dbg !5160

if.then:                                          ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5161
  %niters1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 1, !dbg !5163
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %niters1, align 8, !dbg !5163
  call void @pointer_map_destroy(%struct.pointer_map_t* %3), !dbg !5164
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5165
  %niters2 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 1, !dbg !5166
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %niters2, align 8, !dbg !5167
  br label %if.end, !dbg !5168

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5169
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %5, i32 0, i32 5, !dbg !5169
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !5169
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %6, i32 0, i32* %i), !dbg !5169
  br label %for.cond, !dbg !5169

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5171
  %tobool3 = icmp ne i8 %call, 0, !dbg !5169
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5169

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !5173, metadata !DIExpression()), !dbg !5175
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5176
  %8 = load i32, i32* %i, align 4, !dbg !5177
  %call4 = call %struct.version_info* @ver_info(%struct.ivopts_data* %7, i32 %8), !dbg !5178
  store %struct.version_info* %call4, %struct.version_info** %info, align 8, !dbg !5179
  %9 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5180
  %iv = getelementptr inbounds %struct.version_info, %struct.version_info* %9, i32 0, i32 1, !dbg !5182
  %10 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5182
  %tobool5 = icmp ne %struct.iv* %10, null, !dbg !5180
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !5183

if.then6:                                         ; preds = %for.body
  %11 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5184
  %iv7 = getelementptr inbounds %struct.version_info, %struct.version_info* %11, i32 0, i32 1, !dbg !5185
  %12 = load %struct.iv*, %struct.iv** %iv7, align 8, !dbg !5185
  %13 = bitcast %struct.iv* %12 to i8*, !dbg !5184
  call void @free(i8* %13), !dbg !5186
  br label %if.end8, !dbg !5186

if.end8:                                          ; preds = %if.then6, %for.body
  %14 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5187
  %iv9 = getelementptr inbounds %struct.version_info, %struct.version_info* %14, i32 0, i32 1, !dbg !5188
  store %struct.iv* null, %struct.iv** %iv9, align 8, !dbg !5189
  %15 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5190
  %has_nonlin_use = getelementptr inbounds %struct.version_info, %struct.version_info* %15, i32 0, i32 2, !dbg !5191
  store i8 0, i8* %has_nonlin_use, align 8, !dbg !5192
  %16 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5193
  %preserve_biv = getelementptr inbounds %struct.version_info, %struct.version_info* %16, i32 0, i32 4, !dbg !5194
  store i8 0, i8* %preserve_biv, align 8, !dbg !5195
  %17 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5196
  %inv_id = getelementptr inbounds %struct.version_info, %struct.version_info* %17, i32 0, i32 3, !dbg !5197
  store i32 0, i32* %inv_id, align 4, !dbg !5198
  br label %for.inc, !dbg !5199

for.inc:                                          ; preds = %if.end8
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5171
  br label %for.cond, !dbg !5171, !llvm.loop !5200

for.end:                                          ; preds = %for.cond
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5202
  %relevant10 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %18, i32 0, i32 5, !dbg !5203
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant10, align 8, !dbg !5203
  call void @bitmap_clear(%struct.bitmap_head_def* %19), !dbg !5204
  %20 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5205
  %important_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %20, i32 0, i32 8, !dbg !5206
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %important_candidates, align 8, !dbg !5206
  call void @bitmap_clear(%struct.bitmap_head_def* %21), !dbg !5207
  store i32 0, i32* %i, align 4, !dbg !5208
  br label %for.cond11, !dbg !5210

for.cond11:                                       ; preds = %for.inc34, %for.end
  %22 = load i32, i32* %i, align 4, !dbg !5211
  %23 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5213
  %call12 = call i32 @n_iv_uses(%struct.ivopts_data* %23), !dbg !5214
  %cmp = icmp ult i32 %22, %call12, !dbg !5215
  br i1 %cmp, label %for.body13, label %for.end36, !dbg !5216

for.body13:                                       ; preds = %for.cond11
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !5217, metadata !DIExpression()), !dbg !5219
  %24 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5220
  %25 = load i32, i32* %i, align 4, !dbg !5221
  %call14 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %24, i32 %25), !dbg !5222
  store %struct.iv_use* %call14, %struct.iv_use** %use, align 8, !dbg !5219
  %26 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5223
  %iv15 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %26, i32 0, i32 2, !dbg !5224
  %27 = load %struct.iv*, %struct.iv** %iv15, align 8, !dbg !5224
  %28 = bitcast %struct.iv* %27 to i8*, !dbg !5223
  call void @free(i8* %28), !dbg !5225
  %29 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5226
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %29, i32 0, i32 5, !dbg !5226
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !5226
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %30), !dbg !5226
  %31 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5226
  %related_cands16 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %31, i32 0, i32 5, !dbg !5226
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %related_cands16, align 8, !dbg !5226
  store i32 0, i32* %j, align 4, !dbg !5227
  br label %for.cond17, !dbg !5229

for.cond17:                                       ; preds = %for.inc31, %for.body13
  %32 = load i32, i32* %j, align 4, !dbg !5230
  %33 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5232
  %n_map_members = getelementptr inbounds %struct.iv_use, %struct.iv_use* %33, i32 0, i32 6, !dbg !5233
  %34 = load i32, i32* %n_map_members, align 8, !dbg !5233
  %cmp18 = icmp ult i32 %32, %34, !dbg !5234
  br i1 %cmp18, label %for.body19, label %for.end32, !dbg !5235

for.body19:                                       ; preds = %for.cond17
  %35 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5236
  %cost_map = getelementptr inbounds %struct.iv_use, %struct.iv_use* %35, i32 0, i32 7, !dbg !5238
  %36 = load %struct.cost_pair*, %struct.cost_pair** %cost_map, align 8, !dbg !5238
  %37 = load i32, i32* %j, align 4, !dbg !5239
  %idxprom = zext i32 %37 to i64, !dbg !5236
  %arrayidx = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %36, i64 %idxprom, !dbg !5236
  %depends_on = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx, i32 0, i32 2, !dbg !5240
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !5240
  %tobool20 = icmp ne %struct.bitmap_head_def* %38, null, !dbg !5236
  br i1 %tobool20, label %if.then21, label %if.end30, !dbg !5241

if.then21:                                        ; preds = %for.body19
  %39 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5242
  %cost_map22 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %39, i32 0, i32 7, !dbg !5242
  %40 = load %struct.cost_pair*, %struct.cost_pair** %cost_map22, align 8, !dbg !5242
  %41 = load i32, i32* %j, align 4, !dbg !5242
  %idxprom23 = zext i32 %41 to i64, !dbg !5242
  %arrayidx24 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %40, i64 %idxprom23, !dbg !5242
  %depends_on25 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx24, i32 0, i32 2, !dbg !5242
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on25, align 8, !dbg !5242
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %42), !dbg !5242
  %43 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5242
  %cost_map26 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %43, i32 0, i32 7, !dbg !5242
  %44 = load %struct.cost_pair*, %struct.cost_pair** %cost_map26, align 8, !dbg !5242
  %45 = load i32, i32* %j, align 4, !dbg !5242
  %idxprom27 = zext i32 %45 to i64, !dbg !5242
  %arrayidx28 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %44, i64 %idxprom27, !dbg !5242
  %depends_on29 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx28, i32 0, i32 2, !dbg !5242
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on29, align 8, !dbg !5242
  br label %if.end30, !dbg !5242

if.end30:                                         ; preds = %if.then21, %for.body19
  br label %for.inc31, !dbg !5240

for.inc31:                                        ; preds = %if.end30
  %46 = load i32, i32* %j, align 4, !dbg !5243
  %inc = add i32 %46, 1, !dbg !5243
  store i32 %inc, i32* %j, align 4, !dbg !5243
  br label %for.cond17, !dbg !5244, !llvm.loop !5245

for.end32:                                        ; preds = %for.cond17
  %47 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5247
  %cost_map33 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %47, i32 0, i32 7, !dbg !5248
  %48 = load %struct.cost_pair*, %struct.cost_pair** %cost_map33, align 8, !dbg !5248
  %49 = bitcast %struct.cost_pair* %48 to i8*, !dbg !5247
  call void @free(i8* %49), !dbg !5249
  %50 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !5250
  %51 = bitcast %struct.iv_use* %50 to i8*, !dbg !5250
  call void @free(i8* %51), !dbg !5251
  br label %for.inc34, !dbg !5252

for.inc34:                                        ; preds = %for.end32
  %52 = load i32, i32* %i, align 4, !dbg !5253
  %inc35 = add i32 %52, 1, !dbg !5253
  store i32 %inc35, i32* %i, align 4, !dbg !5253
  br label %for.cond11, !dbg !5254, !llvm.loop !5255

for.end36:                                        ; preds = %for.cond11
  %53 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5257
  %iv_uses = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %53, i32 0, i32 6, !dbg !5257
  %54 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %iv_uses, align 8, !dbg !5257
  %tobool37 = icmp ne %struct.VEC_iv_use_p_heap* %54, null, !dbg !5257
  br i1 %tobool37, label %cond.true, label %cond.false, !dbg !5257

cond.true:                                        ; preds = %for.end36
  %55 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5257
  %iv_uses38 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %55, i32 0, i32 6, !dbg !5257
  %56 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %iv_uses38, align 8, !dbg !5257
  %base = getelementptr inbounds %struct.VEC_iv_use_p_heap, %struct.VEC_iv_use_p_heap* %56, i32 0, i32 0, !dbg !5257
  br label %cond.end, !dbg !5257

cond.false:                                       ; preds = %for.end36
  br label %cond.end, !dbg !5257

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_use_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5257
  call void @VEC_iv_use_p_base_truncate(%struct.VEC_iv_use_p_base* %cond, i32 0), !dbg !5257
  store i32 0, i32* %i, align 4, !dbg !5258
  br label %for.cond39, !dbg !5260

for.cond39:                                       ; preds = %for.inc55, %cond.end
  %57 = load i32, i32* %i, align 4, !dbg !5261
  %58 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5263
  %call40 = call i32 @n_iv_cands(%struct.ivopts_data* %58), !dbg !5264
  %cmp41 = icmp ult i32 %57, %call40, !dbg !5265
  br i1 %cmp41, label %for.body42, label %for.end57, !dbg !5266

for.body42:                                       ; preds = %for.cond39
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !5267, metadata !DIExpression()), !dbg !5269
  %59 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5270
  %60 = load i32, i32* %i, align 4, !dbg !5271
  %call43 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %59, i32 %60), !dbg !5272
  store %struct.iv_cand* %call43, %struct.iv_cand** %cand, align 8, !dbg !5269
  %61 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5273
  %iv44 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %61, i32 0, i32 6, !dbg !5275
  %62 = load %struct.iv*, %struct.iv** %iv44, align 8, !dbg !5275
  %tobool45 = icmp ne %struct.iv* %62, null, !dbg !5273
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !5276

if.then46:                                        ; preds = %for.body42
  %63 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5277
  %iv47 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %63, i32 0, i32 6, !dbg !5278
  %64 = load %struct.iv*, %struct.iv** %iv47, align 8, !dbg !5278
  %65 = bitcast %struct.iv* %64 to i8*, !dbg !5277
  call void @free(i8* %65), !dbg !5279
  br label %if.end48, !dbg !5279

if.end48:                                         ; preds = %if.then46, %for.body42
  %66 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5280
  %depends_on49 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %66, i32 0, i32 10, !dbg !5282
  %67 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on49, align 8, !dbg !5282
  %tobool50 = icmp ne %struct.bitmap_head_def* %67, null, !dbg !5280
  br i1 %tobool50, label %if.then51, label %if.end54, !dbg !5283

if.then51:                                        ; preds = %if.end48
  %68 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5284
  %depends_on52 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %68, i32 0, i32 10, !dbg !5284
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on52, align 8, !dbg !5284
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %69), !dbg !5284
  %70 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5284
  %depends_on53 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %70, i32 0, i32 10, !dbg !5284
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on53, align 8, !dbg !5284
  br label %if.end54, !dbg !5284

if.end54:                                         ; preds = %if.then51, %if.end48
  %71 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !5285
  %72 = bitcast %struct.iv_cand* %71 to i8*, !dbg !5285
  call void @free(i8* %72), !dbg !5286
  br label %for.inc55, !dbg !5287

for.inc55:                                        ; preds = %if.end54
  %73 = load i32, i32* %i, align 4, !dbg !5288
  %inc56 = add i32 %73, 1, !dbg !5288
  store i32 %inc56, i32* %i, align 4, !dbg !5288
  br label %for.cond39, !dbg !5289, !llvm.loop !5290

for.end57:                                        ; preds = %for.cond39
  %74 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5292
  %iv_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %74, i32 0, i32 7, !dbg !5292
  %75 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %iv_candidates, align 8, !dbg !5292
  %tobool58 = icmp ne %struct.VEC_iv_cand_p_heap* %75, null, !dbg !5292
  br i1 %tobool58, label %cond.true59, label %cond.false62, !dbg !5292

cond.true59:                                      ; preds = %for.end57
  %76 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5292
  %iv_candidates60 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %76, i32 0, i32 7, !dbg !5292
  %77 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %iv_candidates60, align 8, !dbg !5292
  %base61 = getelementptr inbounds %struct.VEC_iv_cand_p_heap, %struct.VEC_iv_cand_p_heap* %77, i32 0, i32 0, !dbg !5292
  br label %cond.end63, !dbg !5292

cond.false62:                                     ; preds = %for.end57
  br label %cond.end63, !dbg !5292

cond.end63:                                       ; preds = %cond.false62, %cond.true59
  %cond64 = phi %struct.VEC_iv_cand_p_base* [ %base61, %cond.true59 ], [ null, %cond.false62 ], !dbg !5292
  call void @VEC_iv_cand_p_base_truncate(%struct.VEC_iv_cand_p_base* %cond64, i32 0), !dbg !5292
  %78 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5293
  %version_info_size = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %78, i32 0, i32 3, !dbg !5295
  %79 = load i32, i32* %version_info_size, align 4, !dbg !5295
  %80 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5296
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %80, i64 0, !dbg !5296
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5296
  %81 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5296
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %81, i32 0, i32 2, !dbg !5296
  %82 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5296
  %tobool65 = icmp ne %struct.VEC_tree_gc* %82, null, !dbg !5296
  br i1 %tobool65, label %cond.true66, label %cond.false71, !dbg !5296

cond.true66:                                      ; preds = %cond.end63
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5296
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !5296
  %gimple_df68 = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 3, !dbg !5296
  %84 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df68, align 8, !dbg !5296
  %ssa_names69 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %84, i32 0, i32 2, !dbg !5296
  %85 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names69, align 8, !dbg !5296
  %base70 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %85, i32 0, i32 0, !dbg !5296
  br label %cond.end72, !dbg !5296

cond.false71:                                     ; preds = %cond.end63
  br label %cond.end72, !dbg !5296

cond.end72:                                       ; preds = %cond.false71, %cond.true66
  %cond73 = phi %struct.VEC_tree_base* [ %base70, %cond.true66 ], [ null, %cond.false71 ], !dbg !5296
  %call74 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond73), !dbg !5296
  %cmp75 = icmp ult i32 %79, %call74, !dbg !5297
  br i1 %cmp75, label %if.then76, label %if.end94, !dbg !5298

if.then76:                                        ; preds = %cond.end72
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5299
  %add.ptr77 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !5299
  %gimple_df78 = getelementptr inbounds %struct.function, %struct.function* %add.ptr77, i32 0, i32 3, !dbg !5299
  %87 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df78, align 8, !dbg !5299
  %ssa_names79 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %87, i32 0, i32 2, !dbg !5299
  %88 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names79, align 8, !dbg !5299
  %tobool80 = icmp ne %struct.VEC_tree_gc* %88, null, !dbg !5299
  br i1 %tobool80, label %cond.true81, label %cond.false86, !dbg !5299

cond.true81:                                      ; preds = %if.then76
  %89 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5299
  %add.ptr82 = getelementptr inbounds %struct.function, %struct.function* %89, i64 0, !dbg !5299
  %gimple_df83 = getelementptr inbounds %struct.function, %struct.function* %add.ptr82, i32 0, i32 3, !dbg !5299
  %90 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df83, align 8, !dbg !5299
  %ssa_names84 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %90, i32 0, i32 2, !dbg !5299
  %91 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names84, align 8, !dbg !5299
  %base85 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %91, i32 0, i32 0, !dbg !5299
  br label %cond.end87, !dbg !5299

cond.false86:                                     ; preds = %if.then76
  br label %cond.end87, !dbg !5299

cond.end87:                                       ; preds = %cond.false86, %cond.true81
  %cond88 = phi %struct.VEC_tree_base* [ %base85, %cond.true81 ], [ null, %cond.false86 ], !dbg !5299
  %call89 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond88), !dbg !5299
  %mul = mul i32 2, %call89, !dbg !5301
  %92 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5302
  %version_info_size90 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %92, i32 0, i32 3, !dbg !5303
  store i32 %mul, i32* %version_info_size90, align 4, !dbg !5304
  %93 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5305
  %version_info = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %93, i32 0, i32 4, !dbg !5306
  %94 = load %struct.version_info*, %struct.version_info** %version_info, align 8, !dbg !5306
  %95 = bitcast %struct.version_info* %94 to i8*, !dbg !5305
  call void @free(i8* %95), !dbg !5307
  %96 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5308
  %version_info_size91 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %96, i32 0, i32 3, !dbg !5308
  %97 = load i32, i32* %version_info_size91, align 4, !dbg !5308
  %conv = zext i32 %97 to i64, !dbg !5308
  %call92 = call i8* @xcalloc(i64 %conv, i64 32), !dbg !5308
  %98 = bitcast i8* %call92 to %struct.version_info*, !dbg !5308
  %99 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5309
  %version_info93 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %99, i32 0, i32 4, !dbg !5310
  store %struct.version_info* %98, %struct.version_info** %version_info93, align 8, !dbg !5311
  br label %if.end94, !dbg !5312

if.end94:                                         ; preds = %cond.end87, %cond.end72
  %100 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5313
  %max_inv_id = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %100, i32 0, i32 9, !dbg !5314
  store i32 0, i32* %max_inv_id, align 8, !dbg !5315
  store i32 0, i32* %i, align 4, !dbg !5316
  br label %for.cond95, !dbg !5318

for.cond95:                                       ; preds = %for.inc105, %if.end94
  %101 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @decl_rtl_to_reset, align 8, !dbg !5319
  %tobool96 = icmp ne %struct.VEC_tree_heap* %101, null, !dbg !5319
  br i1 %tobool96, label %cond.true97, label %cond.false99, !dbg !5319

cond.true97:                                      ; preds = %for.cond95
  %102 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @decl_rtl_to_reset, align 8, !dbg !5319
  %base98 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %102, i32 0, i32 0, !dbg !5319
  br label %cond.end100, !dbg !5319

cond.false99:                                     ; preds = %for.cond95
  br label %cond.end100, !dbg !5319

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi %struct.VEC_tree_base* [ %base98, %cond.true97 ], [ null, %cond.false99 ], !dbg !5319
  %103 = load i32, i32* %i, align 4, !dbg !5319
  %call102 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond101, i32 %103, %union.tree_node** %obj), !dbg !5319
  %tobool103 = icmp ne i32 %call102, 0, !dbg !5321
  br i1 %tobool103, label %for.body104, label %for.end107, !dbg !5321

for.body104:                                      ; preds = %cond.end100
  %104 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !5322
  call void @set_decl_rtl(%union.tree_node* %104, %struct.rtx_def* null), !dbg !5322
  br label %for.inc105, !dbg !5322

for.inc105:                                       ; preds = %for.body104
  %105 = load i32, i32* %i, align 4, !dbg !5323
  %inc106 = add i32 %105, 1, !dbg !5323
  store i32 %inc106, i32* %i, align 4, !dbg !5323
  br label %for.cond95, !dbg !5324, !llvm.loop !5325

for.end107:                                       ; preds = %cond.end100
  %106 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @decl_rtl_to_reset, align 8, !dbg !5327
  %tobool108 = icmp ne %struct.VEC_tree_heap* %106, null, !dbg !5327
  br i1 %tobool108, label %cond.true109, label %cond.false111, !dbg !5327

cond.true109:                                     ; preds = %for.end107
  %107 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @decl_rtl_to_reset, align 8, !dbg !5327
  %base110 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %107, i32 0, i32 0, !dbg !5327
  br label %cond.end112, !dbg !5327

cond.false111:                                    ; preds = %for.end107
  br label %cond.end112, !dbg !5327

cond.end112:                                      ; preds = %cond.false111, %cond.true109
  %cond113 = phi %struct.VEC_tree_base* [ %base110, %cond.true109 ], [ null, %cond.false111 ], !dbg !5327
  call void @VEC_tree_base_truncate(%struct.VEC_tree_base* %cond113, i32 0), !dbg !5327
  ret void, !dbg !5328
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_bivs(%struct.ivopts_data* %data) #0 !dbg !5329 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %step = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %found = alloca i8, align 1
  %loop = alloca %struct.loop*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5332, metadata !DIExpression()), !dbg !5333
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !5334, metadata !DIExpression()), !dbg !5335
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5336, metadata !DIExpression()), !dbg !5337
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !5338, metadata !DIExpression()), !dbg !5339
  call void @llvm.dbg.declare(metadata i8* %found, metadata !5340, metadata !DIExpression()), !dbg !5341
  store i8 0, i8* %found, align 1, !dbg !5341
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5342, metadata !DIExpression()), !dbg !5343
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5344
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !5345
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !5345
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !5343
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !5346, metadata !DIExpression()), !dbg !5347
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5348
  %header = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 2, !dbg !5350
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5350
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !5351
  %4 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !5351
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5351
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !5351
  br label %for.cond, !dbg !5352

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5353
  %tobool = icmp ne i8 %call, 0, !dbg !5355
  %lnot = xor i1 %tobool, true, !dbg !5355
  br i1 %lnot, label %for.body, label %for.end, !dbg !5356

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5357
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !5359
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5360
  %call2 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %6), !dbg !5360
  %call3 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call2), !dbg !5360
  %base4 = bitcast %union.tree_node* %call3 to %struct.tree_base*, !dbg !5360
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5360
  %bf.load = load i64, i64* %7, align 8, !dbg !5360
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !5360
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5360
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5360
  %tobool5 = icmp ne i32 %bf.cast, 0, !dbg !5360
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5362

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5363

if.end:                                           ; preds = %for.body
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5364
  %call6 = call %union.tree_node* @determine_biv_step(%union.gimple_statement_d* %8), !dbg !5365
  store %union.tree_node* %call6, %union.tree_node** %step, align 8, !dbg !5366
  %9 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5367
  %tobool7 = icmp ne %union.tree_node* %9, null, !dbg !5367
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !5369

if.then8:                                         ; preds = %if.end
  br label %for.inc, !dbg !5370

if.end9:                                          ; preds = %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5371
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5371
  %call10 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %11), !dbg !5371
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call10, i32 0, i32 6, !dbg !5371
  %12 = load i32, i32* %dest_idx, align 4, !dbg !5371
  %call11 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %10, i32 %12), !dbg !5371
  %call12 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call11), !dbg !5371
  store %union.tree_node* %call12, %union.tree_node** %base, align 8, !dbg !5372
  %13 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5373
  %call13 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %13), !dbg !5374
  store %union.tree_node* %call13, %union.tree_node** %base, align 8, !dbg !5375
  %14 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5376
  %call14 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %14), !dbg !5378
  %conv = zext i8 %call14 to i32, !dbg !5378
  %tobool15 = icmp ne i32 %conv, 0, !dbg !5378
  br i1 %tobool15, label %if.then19, label %lor.lhs.false, !dbg !5379

lor.lhs.false:                                    ; preds = %if.end9
  %15 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5380
  %call16 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %15), !dbg !5381
  %conv17 = zext i8 %call16 to i32, !dbg !5381
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !5381
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !5382

if.then19:                                        ; preds = %lor.lhs.false, %if.end9
  br label %for.inc, !dbg !5383

if.end20:                                         ; preds = %lor.lhs.false
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5384
  %call21 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %16), !dbg !5384
  %call22 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call21), !dbg !5384
  %common = bitcast %union.tree_node* %call22 to %struct.tree_common*, !dbg !5384
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5384
  %17 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !5384
  store %union.tree_node* %17, %union.tree_node** %type, align 8, !dbg !5385
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5386
  %19 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5386
  %call24 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %18, %union.tree_node* %19), !dbg !5386
  store %union.tree_node* %call24, %union.tree_node** %base, align 8, !dbg !5387
  %20 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5388
  %tobool25 = icmp ne %union.tree_node* %20, null, !dbg !5388
  br i1 %tobool25, label %if.then26, label %if.end43, !dbg !5390

if.then26:                                        ; preds = %if.end20
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5391
  %base27 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5391
  %22 = bitcast %struct.tree_base* %base27 to i64*, !dbg !5391
  %bf.load28 = load i64, i64* %22, align 8, !dbg !5391
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !5391
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !5391
  %cmp = icmp eq i32 %bf.cast30, 10, !dbg !5391
  br i1 %cmp, label %if.then39, label %lor.lhs.false32, !dbg !5391

lor.lhs.false32:                                  ; preds = %if.then26
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5391
  %base33 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5391
  %24 = bitcast %struct.tree_base* %base33 to i64*, !dbg !5391
  %bf.load34 = load i64, i64* %24, align 8, !dbg !5391
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !5391
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !5391
  %cmp37 = icmp eq i32 %bf.cast36, 12, !dbg !5391
  br i1 %cmp37, label %if.then39, label %if.else, !dbg !5394

if.then39:                                        ; preds = %lor.lhs.false32, %if.then26
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5395
  %26 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5395
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %25, %union.tree_node* %26), !dbg !5395
  store %union.tree_node* %call40, %union.tree_node** %step, align 8, !dbg !5396
  br label %if.end42, !dbg !5397

if.else:                                          ; preds = %lor.lhs.false32
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5398
  %28 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5398
  %call41 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %27, %union.tree_node* %28), !dbg !5398
  store %union.tree_node* %call41, %union.tree_node** %step, align 8, !dbg !5399
  br label %if.end42

if.end42:                                         ; preds = %if.else, %if.then39
  br label %if.end43, !dbg !5400

if.end43:                                         ; preds = %if.end42, %if.end20
  %29 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5401
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5402
  %call44 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %30), !dbg !5402
  %call45 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call44), !dbg !5402
  %31 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5403
  %32 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5404
  call void @set_iv(%struct.ivopts_data* %29, %union.tree_node* %call45, %union.tree_node* %31, %union.tree_node* %32), !dbg !5405
  store i8 1, i8* %found, align 1, !dbg !5406
  br label %for.inc, !dbg !5407

for.inc:                                          ; preds = %if.end43, %if.then19, %if.then8, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !5408
  br label %for.cond, !dbg !5409, !llvm.loop !5410

for.end:                                          ; preds = %for.cond
  %33 = load i8, i8* %found, align 1, !dbg !5412
  ret i8 %33, !dbg !5413
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_givs(%struct.ivopts_data* %data) #0 !dbg !5414 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %loop = alloca %struct.loop*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5415, metadata !DIExpression()), !dbg !5416
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5417, metadata !DIExpression()), !dbg !5418
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5419
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !5420
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !5420
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !5418
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !5421, metadata !DIExpression()), !dbg !5422
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5423
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %2), !dbg !5424
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %body, align 8, !dbg !5422
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5425, metadata !DIExpression()), !dbg !5426
  store i32 0, i32* %i, align 4, !dbg !5427
  br label %for.cond, !dbg !5429

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !5430
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5432
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 6, !dbg !5433
  %5 = load i32, i32* %num_nodes, align 4, !dbg !5433
  %cmp = icmp ult i32 %3, %5, !dbg !5434
  br i1 %cmp, label %for.body, label %for.end, !dbg !5435

for.body:                                         ; preds = %for.cond
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5436
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !5437
  %8 = load i32, i32* %i, align 4, !dbg !5438
  %idxprom = zext i32 %8 to i64, !dbg !5437
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %7, i64 %idxprom, !dbg !5437
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5437
  call void @find_givs_in_bb(%struct.ivopts_data* %6, %struct.basic_block_def* %9), !dbg !5439
  br label %for.inc, !dbg !5439

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !5440
  %inc = add i32 %10, 1, !dbg !5440
  store i32 %inc, i32* %i, align 4, !dbg !5440
  br label %for.cond, !dbg !5441, !llvm.loop !5442

for.end:                                          ; preds = %for.cond
  %11 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !5444
  %12 = bitcast %struct.basic_block_def** %11 to i8*, !dbg !5444
  call void @free(i8* %12), !dbg !5445
  ret void, !dbg !5446
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_bivs(%struct.ivopts_data* %data) #0 !dbg !5447 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %iv = alloca %struct.iv*, align 8
  %incr_iv = alloca %struct.iv*, align 8
  %loop = alloca %struct.loop*, align 8
  %incr_bb = alloca %struct.basic_block_def*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5448, metadata !DIExpression()), !dbg !5449
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5450, metadata !DIExpression()), !dbg !5451
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5452, metadata !DIExpression()), !dbg !5453
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !5454, metadata !DIExpression()), !dbg !5455
  call void @llvm.dbg.declare(metadata %struct.iv** %incr_iv, metadata !5456, metadata !DIExpression()), !dbg !5457
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5458, metadata !DIExpression()), !dbg !5459
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5460
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !5461
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !5461
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !5459
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %incr_bb, metadata !5462, metadata !DIExpression()), !dbg !5463
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !5464, metadata !DIExpression()), !dbg !5465
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5466
  %header = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 2, !dbg !5468
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5468
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !5469
  %4 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !5469
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5469
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !5469
  br label %for.cond, !dbg !5470

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5471
  %tobool = icmp ne i8 %call, 0, !dbg !5473
  %lnot = xor i1 %tobool, true, !dbg !5473
  br i1 %lnot, label %for.body, label %for.end, !dbg !5474

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5475
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !5477
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5478
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5479
  %call2 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %7), !dbg !5479
  %call3 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call2), !dbg !5479
  %call4 = call %struct.iv* @get_iv(%struct.ivopts_data* %6, %union.tree_node* %call3), !dbg !5480
  store %struct.iv* %call4, %struct.iv** %iv, align 8, !dbg !5481
  %8 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5482
  %tobool5 = icmp ne %struct.iv* %8, null, !dbg !5482
  br i1 %tobool5, label %if.end, label %if.then, !dbg !5484

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5485

if.end:                                           ; preds = %for.body
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5486
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5486
  %call6 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %10), !dbg !5486
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call6, i32 0, i32 6, !dbg !5486
  %11 = load i32, i32* %dest_idx, align 4, !dbg !5486
  %call7 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %9, i32 %11), !dbg !5486
  %call8 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call7), !dbg !5486
  store %union.tree_node* %call8, %union.tree_node** %var, align 8, !dbg !5487
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5488
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5489
  %call9 = call %struct.iv* @get_iv(%struct.ivopts_data* %12, %union.tree_node* %13), !dbg !5490
  store %struct.iv* %call9, %struct.iv** %incr_iv, align 8, !dbg !5491
  %14 = load %struct.iv*, %struct.iv** %incr_iv, align 8, !dbg !5492
  %tobool10 = icmp ne %struct.iv* %14, null, !dbg !5492
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !5494

if.then11:                                        ; preds = %if.end
  br label %for.inc, !dbg !5495

if.end12:                                         ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5496
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !5496
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5496
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5496
  %call13 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %16), !dbg !5497
  store %struct.basic_block_def* %call13, %struct.basic_block_def** %incr_bb, align 8, !dbg !5498
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %incr_bb, align 8, !dbg !5499
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 3, !dbg !5501
  %18 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5501
  %19 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5502
  %current_loop14 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %19, i32 0, i32 0, !dbg !5503
  %20 = load %struct.loop*, %struct.loop** %current_loop14, align 8, !dbg !5503
  %cmp = icmp ne %struct.loop* %18, %20, !dbg !5504
  br i1 %cmp, label %if.then16, label %lor.lhs.false, !dbg !5505

lor.lhs.false:                                    ; preds = %if.end12
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %incr_bb, align 8, !dbg !5506
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 13, !dbg !5507
  %22 = load i32, i32* %flags, align 8, !dbg !5507
  %and = and i32 %22, 4, !dbg !5508
  %tobool15 = icmp ne i32 %and, 0, !dbg !5508
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5509

if.then16:                                        ; preds = %lor.lhs.false, %if.end12
  br label %for.inc, !dbg !5510

if.end17:                                         ; preds = %lor.lhs.false
  %23 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5511
  %biv_p = getelementptr inbounds %struct.iv, %struct.iv* %23, i32 0, i32 4, !dbg !5512
  store i8 1, i8* %biv_p, align 8, !dbg !5513
  %24 = load %struct.iv*, %struct.iv** %incr_iv, align 8, !dbg !5514
  %biv_p18 = getelementptr inbounds %struct.iv, %struct.iv* %24, i32 0, i32 4, !dbg !5515
  store i8 1, i8* %biv_p18, align 8, !dbg !5516
  br label %for.inc, !dbg !5517

for.inc:                                          ; preds = %if.end17, %if.then16, %if.then11, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !5518
  br label %for.cond, !dbg !5519, !llvm.loop !5520

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5522
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @niter_for_single_dom_exit(%struct.ivopts_data* %data) #0 !dbg !5523 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %exit = alloca %struct.edge_def*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5526, metadata !DIExpression()), !dbg !5527
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !5528, metadata !DIExpression()), !dbg !5529
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5530
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !5531
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !5531
  %call = call %struct.edge_def* @single_dom_exit(%struct.loop* %1), !dbg !5532
  store %struct.edge_def* %call, %struct.edge_def** %exit, align 8, !dbg !5529
  %2 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !5533
  %tobool = icmp ne %struct.edge_def* %2, null, !dbg !5533
  br i1 %tobool, label %if.end, label %if.then, !dbg !5535

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5536
  br label %return, !dbg !5536

if.end:                                           ; preds = %entry
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5537
  %4 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !5538
  %call1 = call %union.tree_node* @niter_for_exit(%struct.ivopts_data* %3, %struct.edge_def* %4), !dbg !5539
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !5540
  br label %return, !dbg !5540

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5541
  ret %union.tree_node* %5, !dbg !5541
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5542 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5549, metadata !DIExpression()), !dbg !5550
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5551, metadata !DIExpression()), !dbg !5552
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5553, metadata !DIExpression()), !dbg !5554
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5555, metadata !DIExpression()), !dbg !5556
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5557
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5558
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5558
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5559
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5560
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5561
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5562
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5563
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5564
  br label %while.body, !dbg !5565

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5566
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5569
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5569
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5566
  br i1 %tobool, label %if.end, label %if.then, !dbg !5570

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5571
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5573
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5574
  br label %while.end, !dbg !5575

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5576
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5578
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5578
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5579
  %9 = load i32, i32* %indx, align 8, !dbg !5579
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5580
  %div = udiv i32 %10, 128, !dbg !5581
  %cmp = icmp uge i32 %9, %div, !dbg !5582
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5583

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5584

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5585
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5586
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5586
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5587
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5587
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5588
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5589
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5590
  br label %while.body, !dbg !5565, !llvm.loop !5591

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5593
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5595
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5595
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5596
  %17 = load i32, i32* %indx9, align 8, !dbg !5596
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5597
  %div10 = udiv i32 %18, 128, !dbg !5598
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5599
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5600

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5601
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5602
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5602
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5603
  %21 = load i32, i32* %indx14, align 8, !dbg !5603
  %mul = mul i32 %21, 128, !dbg !5604
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5605
  br label %if.end15, !dbg !5606

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5607
  %div16 = udiv i32 %22, 64, !dbg !5608
  %rem = urem i32 %div16, 2, !dbg !5609
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5610
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5611
  store i32 %rem, i32* %word_no, align 8, !dbg !5612
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5613
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5614
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5614
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5615
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5616
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5617
  %27 = load i32, i32* %word_no18, align 8, !dbg !5617
  %idxprom = zext i32 %27 to i64, !dbg !5613
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5613
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5613
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5618
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5619
  store i64 %28, i64* %bits19, align 8, !dbg !5620
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5621
  %rem20 = urem i32 %30, 64, !dbg !5622
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5623
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5624
  %32 = load i64, i64* %bits21, align 8, !dbg !5625
  %sh_prom = zext i32 %rem20 to i64, !dbg !5625
  %shr = lshr i64 %32, %sh_prom, !dbg !5625
  store i64 %shr, i64* %bits21, align 8, !dbg !5625
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5626
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5627
  %34 = load i64, i64* %bits22, align 8, !dbg !5627
  %tobool23 = icmp ne i64 %34, 0, !dbg !5628
  %lnot = xor i1 %tobool23, true, !dbg !5628
  %lnot.ext = zext i1 %lnot to i32, !dbg !5628
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5629
  %add = add i32 %35, %lnot.ext, !dbg !5629
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5629
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5630
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5631
  store i32 %36, i32* %37, align 4, !dbg !5632
  ret void, !dbg !5633
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5634 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5637, metadata !DIExpression()), !dbg !5638
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5639, metadata !DIExpression()), !dbg !5640
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5641
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5643
  %1 = load i64, i64* %bits, align 8, !dbg !5643
  %tobool = icmp ne i64 %1, 0, !dbg !5641
  br i1 %tobool, label %if.then, label %if.end, !dbg !5644

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5645

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5646), !dbg !5648
  br label %while.cond, !dbg !5649

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5650
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5651
  %3 = load i64, i64* %bits1, align 8, !dbg !5651
  %and = and i64 %3, 1, !dbg !5652
  %tobool2 = icmp ne i64 %and, 0, !dbg !5653
  %lnot = xor i1 %tobool2, true, !dbg !5653
  br i1 %lnot, label %while.body, label %while.end, !dbg !5649

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5654
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5656
  %5 = load i64, i64* %bits3, align 8, !dbg !5657
  %shr = lshr i64 %5, 1, !dbg !5657
  store i64 %shr, i64* %bits3, align 8, !dbg !5657
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5658
  %7 = load i32, i32* %6, align 4, !dbg !5659
  %add = add i32 %7, 1, !dbg !5659
  store i32 %add, i32* %6, align 4, !dbg !5659
  br label %while.cond, !dbg !5649, !llvm.loop !5660

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5662
  br label %return, !dbg !5662

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5663
  %9 = load i32, i32* %8, align 4, !dbg !5664
  %add4 = add i32 %9, 64, !dbg !5665
  %sub = sub i32 %add4, 1, !dbg !5666
  %div = udiv i32 %sub, 64, !dbg !5667
  %mul = mul i32 %div, 64, !dbg !5668
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5669
  store i32 %mul, i32* %10, align 4, !dbg !5670
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5671
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5672
  %12 = load i32, i32* %word_no, align 8, !dbg !5673
  %inc = add i32 %12, 1, !dbg !5673
  store i32 %inc, i32* %word_no, align 8, !dbg !5673
  br label %while.body6, !dbg !5674

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5675

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5677
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5678
  %14 = load i32, i32* %word_no8, align 8, !dbg !5678
  %cmp = icmp ne i32 %14, 2, !dbg !5679
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5675

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5680
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5682
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5682
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5683
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5684
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5685
  %18 = load i32, i32* %word_no11, align 8, !dbg !5685
  %idxprom = zext i32 %18 to i64, !dbg !5680
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5680
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5680
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5686
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5687
  store i64 %19, i64* %bits12, align 8, !dbg !5688
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5689
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5691
  %22 = load i64, i64* %bits13, align 8, !dbg !5691
  %tobool14 = icmp ne i64 %22, 0, !dbg !5689
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5692

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5693

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5694
  %24 = load i32, i32* %23, align 4, !dbg !5695
  %add17 = add i32 %24, 64, !dbg !5695
  store i32 %add17, i32* %23, align 4, !dbg !5695
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5696
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5697
  %26 = load i32, i32* %word_no18, align 8, !dbg !5698
  %inc19 = add i32 %26, 1, !dbg !5698
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5698
  br label %while.cond7, !dbg !5675, !llvm.loop !5699

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5701
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5702
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5702
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5703
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5703
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5704
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5705
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5706
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5707
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5709
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5709
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5707
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5710

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5711
  br label %return, !dbg !5711

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5712
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5713
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5713
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5714
  %35 = load i32, i32* %indx, align 8, !dbg !5714
  %mul28 = mul i32 %35, 128, !dbg !5715
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5716
  store i32 %mul28, i32* %36, align 4, !dbg !5717
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5718
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5719
  store i32 0, i32* %word_no29, align 8, !dbg !5720
  br label %while.body6, !dbg !5674, !llvm.loop !5721

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5723
  ret i8 %38, !dbg !5723
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.version_info* @ver_info(%struct.ivopts_data* %data, i32 %ver) #0 !dbg !5724 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ver.addr = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5727, metadata !DIExpression()), !dbg !5728
  store i32 %ver, i32* %ver.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ver.addr, metadata !5729, metadata !DIExpression()), !dbg !5730
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5731
  %version_info = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 4, !dbg !5732
  %1 = load %struct.version_info*, %struct.version_info** %version_info, align 8, !dbg !5732
  %2 = load i32, i32* %ver.addr, align 4, !dbg !5733
  %idx.ext = zext i32 %2 to i64, !dbg !5734
  %add.ptr = getelementptr inbounds %struct.version_info, %struct.version_info* %1, i64 %idx.ext, !dbg !5734
  ret %struct.version_info* %add.ptr, !dbg !5735
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5736 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5739, metadata !DIExpression()), !dbg !5740
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5741, metadata !DIExpression()), !dbg !5742
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5743
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5744
  %1 = load i64, i64* %bits, align 8, !dbg !5745
  %shr = lshr i64 %1, 1, !dbg !5745
  store i64 %shr, i64* %bits, align 8, !dbg !5745
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !5746
  %3 = load i32, i32* %2, align 4, !dbg !5747
  %add = add i32 %3, 1, !dbg !5747
  store i32 %add, i32* %2, align 4, !dbg !5747
  ret void, !dbg !5748
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5749 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5752, metadata !DIExpression()), !dbg !5753
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5754
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5754
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5755
  %conv = zext i1 %cmp to i32, !dbg !5755
  %conv1 = trunc i32 %conv to i8, !dbg !5756
  ret i8 %conv1, !dbg !5757
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5758 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5761, metadata !DIExpression()), !dbg !5762
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5763
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5763
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5764
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5764
  ret %union.gimple_statement_d* %1, !dbg !5765
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !5766 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !5771, metadata !DIExpression()), !dbg !5772
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !5773
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5774
  ret %union.tree_node* %1, !dbg !5775
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5776 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5777, metadata !DIExpression()), !dbg !5778
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5779
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5780
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !5781
  ret %union.tree_node** %result, !dbg !5782
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @determine_biv_step(%union.gimple_statement_d* %phi) #0 !dbg !5783 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %loop = alloca %struct.loop*, align 8
  %name = alloca %union.tree_node*, align 8
  %iv = alloca %struct.affine_iv, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !5786, metadata !DIExpression()), !dbg !5787
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5788, metadata !DIExpression()), !dbg !5789
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5790
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !5791
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 3, !dbg !5792
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5792
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !5789
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5793, metadata !DIExpression()), !dbg !5794
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5795
  %call1 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %2), !dbg !5795
  %call2 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call1), !dbg !5795
  store %union.tree_node* %call2, %union.tree_node** %name, align 8, !dbg !5794
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !5796, metadata !DIExpression()), !dbg !5803
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5804
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %3), !dbg !5806
  %tobool = icmp ne i8 %call3, 0, !dbg !5806
  br i1 %tobool, label %if.end, label %if.then, !dbg !5807

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5808
  br label %return, !dbg !5808

if.end:                                           ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5809
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5811
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5812
  %call4 = call zeroext i8 @simple_iv(%struct.loop* %4, %struct.loop* %5, %union.tree_node* %6, %struct.affine_iv* %iv, i8 zeroext 1), !dbg !5813
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5813
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !5814

if.then6:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5815
  br label %return, !dbg !5815

if.end7:                                          ; preds = %if.end
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !5816
  %7 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5816
  %call8 = call i32 @integer_zerop(%union.tree_node* %7), !dbg !5817
  %tobool9 = icmp ne i32 %call8, 0, !dbg !5817
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5817

cond.true:                                        ; preds = %if.end7
  br label %cond.end, !dbg !5817

cond.false:                                       ; preds = %if.end7
  %step10 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !5818
  %8 = load %union.tree_node*, %union.tree_node** %step10, align 8, !dbg !5818
  br label %cond.end, !dbg !5817

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %8, %cond.false ], !dbg !5817
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !5819
  br label %return, !dbg !5819

return:                                           ; preds = %cond.end, %if.then6, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5820
  ret %union.tree_node* %9, !dbg !5820
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5821 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5824, metadata !DIExpression()), !dbg !5825
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5826
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5827
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5827
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5828
  ret %union.tree_node* %2, !dbg !5829
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5830 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5833, metadata !DIExpression()), !dbg !5834
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5835, metadata !DIExpression()), !dbg !5836
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5837
  %1 = load i32, i32* %i.addr, align 4, !dbg !5838
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !5839
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !5840
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !5841
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

declare dso_local %union.tree_node* @expand_simple_operations(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_iv(%struct.ivopts_data* %data, %union.tree_node* %iv, %union.tree_node* %base, %union.tree_node* %step) #0 !dbg !5842 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %iv.addr = alloca %union.tree_node*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %info = alloca %struct.version_info*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5845, metadata !DIExpression()), !dbg !5846
  store %union.tree_node* %iv, %union.tree_node** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv.addr, metadata !5847, metadata !DIExpression()), !dbg !5848
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !5849, metadata !DIExpression()), !dbg !5850
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !5851, metadata !DIExpression()), !dbg !5852
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !5853, metadata !DIExpression()), !dbg !5854
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5855
  %1 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !5856
  %call = call %struct.version_info* @name_info(%struct.ivopts_data* %0, %union.tree_node* %1), !dbg !5857
  store %struct.version_info* %call, %struct.version_info** %info, align 8, !dbg !5854
  %2 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5858
  %iv1 = getelementptr inbounds %struct.version_info, %struct.version_info* %2, i32 0, i32 1, !dbg !5858
  %3 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !5858
  %tobool = icmp ne %struct.iv* %3, null, !dbg !5858
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5858

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 858, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5858
  br label %cond.end, !dbg !5858

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5858

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5858
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5859
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 5, !dbg !5860
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !5860
  %6 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !5861
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !5861
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5861
  %7 = load i32, i32* %version, align 8, !dbg !5861
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %5, i32 %7), !dbg !5862
  %8 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5863
  %9 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5864
  %call3 = call %struct.iv* @alloc_iv(%union.tree_node* %8, %union.tree_node* %9), !dbg !5865
  %10 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5866
  %iv4 = getelementptr inbounds %struct.version_info, %struct.version_info* %10, i32 0, i32 1, !dbg !5867
  store %struct.iv* %call3, %struct.iv** %iv4, align 8, !dbg !5868
  %11 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !5869
  %12 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !5870
  %iv5 = getelementptr inbounds %struct.version_info, %struct.version_info* %12, i32 0, i32 1, !dbg !5871
  %13 = load %struct.iv*, %struct.iv** %iv5, align 8, !dbg !5871
  %ssa_name6 = getelementptr inbounds %struct.iv, %struct.iv* %13, i32 0, i32 3, !dbg !5872
  store %union.tree_node* %11, %union.tree_node** %ssa_name6, align 8, !dbg !5873
  ret void, !dbg !5874
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5875 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5879, metadata !DIExpression()), !dbg !5880
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5881
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5882
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5882
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5883
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5883
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5884
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5885
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5886
  ret void, !dbg !5887
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5888 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5892, metadata !DIExpression()), !dbg !5893
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5894, metadata !DIExpression()), !dbg !5895
  %0 = load i32, i32* %index.addr, align 4, !dbg !5896
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5896
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !5896
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !5896
  %2 = load i32, i32* %capacity, align 8, !dbg !5896
  %cmp = icmp ule i32 %0, %2, !dbg !5896
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5896

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5896
  br label %cond.end, !dbg !5896

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5896

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5896
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5897
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !5898
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !5899
  %4 = load i32, i32* %index.addr, align 4, !dbg !5900
  %idxprom = zext i32 %4 to i64, !dbg !5897
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !5897
  ret %struct.phi_arg_d* %arrayidx, !dbg !5901
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.version_info* @name_info(%struct.ivopts_data* %data, %union.tree_node* %name) #0 !dbg !5902 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !5905, metadata !DIExpression()), !dbg !5906
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5907, metadata !DIExpression()), !dbg !5908
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !5909
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5910
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !5910
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5910
  %2 = load i32, i32* %version, align 8, !dbg !5910
  %call = call %struct.version_info* @ver_info(%struct.ivopts_data* %0, i32 %2), !dbg !5911
  ret %struct.version_info* %call, !dbg !5912
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv* @alloc_iv(%union.tree_node* %base, %union.tree_node* %step) #0 !dbg !5913 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %iv = alloca %struct.iv*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !5916, metadata !DIExpression()), !dbg !5917
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !5918, metadata !DIExpression()), !dbg !5919
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !5920, metadata !DIExpression()), !dbg !5921
  %call = call i8* @xcalloc(i64 1, i64 40), !dbg !5922
  %0 = bitcast i8* %call to %struct.iv*, !dbg !5922
  store %struct.iv* %0, %struct.iv** %iv, align 8, !dbg !5921
  %1 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5923
  %cmp = icmp ne %union.tree_node* %1, null, !dbg !5923
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5923

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 838, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5923
  br label %cond.end, !dbg !5923

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5923

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5923
  %2 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5924
  %3 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5925
  %base1 = getelementptr inbounds %struct.iv, %struct.iv* %3, i32 0, i32 0, !dbg !5926
  store %union.tree_node* %2, %union.tree_node** %base1, align 8, !dbg !5927
  %4 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5928
  %call2 = call %union.tree_node* @determine_base_object(%union.tree_node* %4), !dbg !5929
  %5 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5930
  %base_object = getelementptr inbounds %struct.iv, %struct.iv* %5, i32 0, i32 1, !dbg !5931
  store %union.tree_node* %call2, %union.tree_node** %base_object, align 8, !dbg !5932
  %6 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5933
  %7 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5934
  %step3 = getelementptr inbounds %struct.iv, %struct.iv* %7, i32 0, i32 2, !dbg !5935
  store %union.tree_node* %6, %union.tree_node** %step3, align 8, !dbg !5936
  %8 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5937
  %biv_p = getelementptr inbounds %struct.iv, %struct.iv* %8, i32 0, i32 4, !dbg !5938
  store i8 0, i8* %biv_p, align 8, !dbg !5939
  %9 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5940
  %have_use_for = getelementptr inbounds %struct.iv, %struct.iv* %9, i32 0, i32 5, !dbg !5941
  store i8 0, i8* %have_use_for, align 1, !dbg !5942
  %10 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5943
  %use_id = getelementptr inbounds %struct.iv, %struct.iv* %10, i32 0, i32 6, !dbg !5944
  store i32 0, i32* %use_id, align 4, !dbg !5945
  %11 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5946
  %ssa_name = getelementptr inbounds %struct.iv, %struct.iv* %11, i32 0, i32 3, !dbg !5947
  store %union.tree_node* null, %union.tree_node** %ssa_name, align 8, !dbg !5948
  %12 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !5949
  ret %struct.iv* %12, !dbg !5950
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @determine_base_object(%union.tree_node* %expr) #0 !dbg !5951 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %base1 = alloca %union.tree_node*, align 8
  %obj = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !5954, metadata !DIExpression()), !dbg !5955
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5956, metadata !DIExpression()), !dbg !5957
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5958
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5958
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5958
  %bf.load = load i64, i64* %1, align 8, !dbg !5958
  %bf.clear = and i64 %bf.load, 65535, !dbg !5958
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5958
  store i32 %bf.cast, i32* %code, align 4, !dbg !5957
  call void @llvm.dbg.declare(metadata %union.tree_node** %base1, metadata !5959, metadata !DIExpression()), !dbg !5960
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj, metadata !5961, metadata !DIExpression()), !dbg !5962
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5963
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5963
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5963
  %bf.load3 = load i64, i64* %3, align 8, !dbg !5963
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5963
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5963
  %cmp = icmp eq i32 %bf.cast5, 116, !dbg !5963
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5963

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5963
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5963
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5963
  %bf.load7 = load i64, i64* %5, align 8, !dbg !5963
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5963
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5963
  %cmp10 = icmp eq i32 %bf.cast9, 113, !dbg !5963
  br i1 %cmp10, label %if.then, label %if.end, !dbg !5965

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5966
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !5966
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5966
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5966
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5966
  %call = call %union.tree_node* @determine_base_object(%union.tree_node* %7), !dbg !5967
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !5968
  br label %return, !dbg !5968

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5969
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !5969
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5969
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5969
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5969
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5969
  %bf.load12 = load i64, i64* %10, align 8, !dbg !5969
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5969
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5969
  %cmp15 = icmp eq i32 %bf.cast14, 10, !dbg !5969
  br i1 %cmp15, label %if.end25, label %lor.lhs.false16, !dbg !5969

lor.lhs.false16:                                  ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5969
  %common17 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !5969
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !5969
  %12 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !5969
  %base19 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5969
  %13 = bitcast %struct.tree_base* %base19 to i64*, !dbg !5969
  %bf.load20 = load i64, i64* %13, align 8, !dbg !5969
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !5969
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !5969
  %cmp23 = icmp eq i32 %bf.cast22, 12, !dbg !5969
  br i1 %cmp23, label %if.end25, label %if.then24, !dbg !5971

if.then24:                                        ; preds = %lor.lhs.false16
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5972
  br label %return, !dbg !5972

if.end25:                                         ; preds = %lor.lhs.false16, %if.end
  %14 = load i32, i32* %code, align 4, !dbg !5973
  switch i32 %14, label %sw.default [
    i32 23, label %sw.bb
    i32 121, label %sw.bb26
    i32 66, label %sw.bb46
    i32 63, label %sw.bb51
    i32 64, label %sw.bb51
  ], !dbg !5974

sw.bb:                                            ; preds = %if.end25
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5975
  br label %return, !dbg !5975

sw.bb26:                                          ; preds = %if.end25
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5977
  %exp27 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !5977
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !5977
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 0, !dbg !5977
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !5977
  store %union.tree_node* %16, %union.tree_node** %obj, align 8, !dbg !5978
  %17 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !5979
  %call30 = call %union.tree_node* @get_base_address(%union.tree_node* %17), !dbg !5980
  store %union.tree_node* %call30, %union.tree_node** %base1, align 8, !dbg !5981
  %18 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !5982
  %tobool = icmp ne %union.tree_node* %18, null, !dbg !5982
  br i1 %tobool, label %if.end32, label %if.then31, !dbg !5984

if.then31:                                        ; preds = %sw.bb26
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5985
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !5986
  br label %return, !dbg !5986

if.end32:                                         ; preds = %sw.bb26
  %20 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !5987
  %base33 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5987
  %21 = bitcast %struct.tree_base* %base33 to i64*, !dbg !5987
  %bf.load34 = load i64, i64* %21, align 8, !dbg !5987
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !5987
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !5987
  %cmp37 = icmp eq i32 %bf.cast36, 47, !dbg !5989
  br i1 %cmp37, label %if.then38, label %if.end43, !dbg !5990

if.then38:                                        ; preds = %if.end32
  %22 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !5991
  %exp39 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !5991
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !5991
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 0, !dbg !5991
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !5991
  %call42 = call %union.tree_node* @determine_base_object(%union.tree_node* %23), !dbg !5992
  store %union.tree_node* %call42, %union.tree_node** %retval, align 8, !dbg !5993
  br label %return, !dbg !5993

if.end43:                                         ; preds = %if.end32
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !5994
  %25 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !5994
  %call44 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %25), !dbg !5994
  %call45 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %24, %union.tree_node* %call44), !dbg !5994
  store %union.tree_node* %call45, %union.tree_node** %retval, align 8, !dbg !5995
  br label %return, !dbg !5995

sw.bb46:                                          ; preds = %if.end25
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5996
  %exp47 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !5996
  %operands48 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp47, i32 0, i32 3, !dbg !5996
  %arrayidx49 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands48, i64 0, i64 0, !dbg !5996
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx49, align 8, !dbg !5996
  %call50 = call %union.tree_node* @determine_base_object(%union.tree_node* %27), !dbg !5997
  store %union.tree_node* %call50, %union.tree_node** %retval, align 8, !dbg !5998
  br label %return, !dbg !5998

sw.bb51:                                          ; preds = %if.end25, %if.end25
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 824, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !5999
  br label %sw.default, !dbg !5999

sw.default:                                       ; preds = %if.end25, %sw.bb51
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !6000
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6000
  %call52 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %28, %union.tree_node* %29), !dbg !6000
  store %union.tree_node* %call52, %union.tree_node** %retval, align 8, !dbg !6001
  br label %return, !dbg !6001

return:                                           ; preds = %sw.default, %sw.bb46, %if.end43, %if.then38, %if.then31, %sw.bb, %if.then24, %if.then
  %30 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6002
  ret %union.tree_node* %30, !dbg !6002
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_givs_in_bb(%struct.ivopts_data* %data, %struct.basic_block_def* %bb) #0 !dbg !6003 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6006, metadata !DIExpression()), !dbg !6007
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6008, metadata !DIExpression()), !dbg !6009
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6010, metadata !DIExpression()), !dbg !6011
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6012
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !6014
  %1 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6014
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6014
  br label %for.cond, !dbg !6015

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6016
  %tobool = icmp ne i8 %call, 0, !dbg !6018
  %lnot = xor i1 %tobool, true, !dbg !6018
  br i1 %lnot, label %for.body, label %for.end, !dbg !6019

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6020
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6021
  call void @find_givs_in_stmt(%struct.ivopts_data* %3, %union.gimple_statement_d* %call1), !dbg !6022
  br label %for.inc, !dbg !6022

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6023
  br label %for.cond, !dbg !6024, !llvm.loop !6025

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6027
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6028 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6031, metadata !DIExpression()), !dbg !6032
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6033, metadata !DIExpression()), !dbg !6034
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6035, metadata !DIExpression()), !dbg !6036
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6037
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6038
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6039
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6040
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6041
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6042
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6043
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6044
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6045
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6046
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6047
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6048
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6049
  ret void, !dbg !6050
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_givs_in_stmt(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt) #0 !dbg !6051 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %iv = alloca %struct.affine_iv, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6054, metadata !DIExpression()), !dbg !6055
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6056, metadata !DIExpression()), !dbg !6057
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !6058, metadata !DIExpression()), !dbg !6059
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6060
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6062
  %call = call zeroext i8 @find_givs_in_stmt_scev(%struct.ivopts_data* %0, %union.gimple_statement_d* %1, %struct.affine_iv* %iv), !dbg !6063
  %tobool = icmp ne i8 %call, 0, !dbg !6063
  br i1 %tobool, label %if.end, label %if.then, !dbg !6064

if.then:                                          ; preds = %entry
  br label %return, !dbg !6065

if.end:                                           ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6066
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6067
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !6068
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !6069
  %4 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6069
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !6070
  %5 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6070
  call void @set_iv(%struct.ivopts_data* %2, %union.tree_node* %call1, %union.tree_node* %4, %union.tree_node* %5), !dbg !6071
  br label %return, !dbg !6072

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6072
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6073 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6079, metadata !DIExpression()), !dbg !6080
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6081
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6082
  %1 = load i32, i32* %flags, align 8, !dbg !6082
  %and = and i32 %1, 512, !dbg !6083
  %tobool = icmp ne i32 %and, 0, !dbg !6083
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6084

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6085
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6086
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6087
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6087
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6085
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6088

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6089
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6090
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6091
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6091
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6092
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6092
  br label %cond.end, !dbg !6088

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6088

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6088
  ret %struct.gimple_seq_d* %cond, !dbg !6093
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6094 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6100, metadata !DIExpression()), !dbg !6101
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6102
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6102
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6102

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6103
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6104
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6104
  br label %cond.end, !dbg !6102

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6102

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6102
  ret %struct.gimple_seq_node_d* %cond, !dbg !6105
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_givs_in_stmt_scev(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt, %struct.affine_iv* %iv) #0 !dbg !6106 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %iv.addr = alloca %struct.affine_iv*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6110, metadata !DIExpression()), !dbg !6111
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6112, metadata !DIExpression()), !dbg !6113
  store %struct.affine_iv* %iv, %struct.affine_iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv.addr, metadata !6114, metadata !DIExpression()), !dbg !6115
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6116, metadata !DIExpression()), !dbg !6117
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6118, metadata !DIExpression()), !dbg !6119
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6120
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !6121
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !6121
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !6119
  %2 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6122
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %2, i32 0, i32 0, !dbg !6123
  store %union.tree_node* null, %union.tree_node** %base, align 8, !dbg !6124
  %3 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6125
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %3, i32 0, i32 1, !dbg !6126
  store %union.tree_node* null, %union.tree_node** %step, align 8, !dbg !6127
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6128
  %call = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !6130
  %cmp = icmp ne i32 %call, 6, !dbg !6131
  br i1 %cmp, label %if.then, label %if.end, !dbg !6132

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6133
  br label %return, !dbg !6133

if.end:                                           ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6134
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %5), !dbg !6135
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !6136
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6137
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6137
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6137
  %bf.load = load i64, i64* %7, align 8, !dbg !6137
  %bf.clear = and i64 %bf.load, 65535, !dbg !6137
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6137
  %cmp3 = icmp ne i32 %bf.cast, 141, !dbg !6139
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6140

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6141
  br label %return, !dbg !6141

if.end5:                                          ; preds = %if.end
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6142
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6144
  %call6 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %9), !dbg !6145
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6146
  %11 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6147
  %call7 = call zeroext i8 @simple_iv(%struct.loop* %8, %struct.loop* %call6, %union.tree_node* %10, %struct.affine_iv* %11, i8 zeroext 1), !dbg !6148
  %tobool = icmp ne i8 %call7, 0, !dbg !6148
  br i1 %tobool, label %if.end9, label %if.then8, !dbg !6149

if.then8:                                         ; preds = %if.end5
  store i8 0, i8* %retval, align 1, !dbg !6150
  br label %return, !dbg !6150

if.end9:                                          ; preds = %if.end5
  %12 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6151
  %base10 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %12, i32 0, i32 0, !dbg !6152
  %13 = load %union.tree_node*, %union.tree_node** %base10, align 8, !dbg !6152
  %call11 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %13), !dbg !6153
  %14 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6154
  %base12 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %14, i32 0, i32 0, !dbg !6155
  store %union.tree_node* %call11, %union.tree_node** %base12, align 8, !dbg !6156
  %15 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6157
  %base13 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %15, i32 0, i32 0, !dbg !6159
  %16 = load %union.tree_node*, %union.tree_node** %base13, align 8, !dbg !6159
  %call14 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %16), !dbg !6160
  %conv = zext i8 %call14 to i32, !dbg !6160
  %tobool15 = icmp ne i32 %conv, 0, !dbg !6160
  br i1 %tobool15, label %if.then20, label %lor.lhs.false, !dbg !6161

lor.lhs.false:                                    ; preds = %if.end9
  %17 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6162
  %step16 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %17, i32 0, i32 1, !dbg !6163
  %18 = load %union.tree_node*, %union.tree_node** %step16, align 8, !dbg !6163
  %call17 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %18), !dbg !6164
  %conv18 = zext i8 %call17 to i32, !dbg !6164
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !6164
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !6165

if.then20:                                        ; preds = %lor.lhs.false, %if.end9
  store i8 0, i8* %retval, align 1, !dbg !6166
  br label %return, !dbg !6166

if.end21:                                         ; preds = %lor.lhs.false
  store i8 1, i8* %retval, align 1, !dbg !6167
  br label %return, !dbg !6167

return:                                           ; preds = %if.end21, %if.then20, %if.then8, %if.then4, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !6168
  ret i8 %19, !dbg !6168
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6169 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6172, metadata !DIExpression()), !dbg !6173
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6174
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6175
  ret %union.tree_node* %call, !dbg !6176
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !6177 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6180, metadata !DIExpression()), !dbg !6181
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6182, metadata !DIExpression()), !dbg !6183
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6184
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6185
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !6183
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6186
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !6186
  br i1 %tobool, label %if.end, label %if.then, !dbg !6188

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !6189
  br label %return, !dbg !6189

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6190
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !6191
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !6191
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !6192
  br label %return, !dbg !6192

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !6193
  ret %struct.loop* %4, !dbg !6193
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv* @get_iv(%struct.ivopts_data* %data, %union.tree_node* %var) #0 !dbg !6194 {
entry:
  %retval = alloca %struct.iv*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6197, metadata !DIExpression()), !dbg !6198
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6199, metadata !DIExpression()), !dbg !6200
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6201, metadata !DIExpression()), !dbg !6202
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6203, metadata !DIExpression()), !dbg !6204
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6205
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6205
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6205
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6205
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !6204
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6206
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6206
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6206
  %bf.load = load i64, i64* %3, align 8, !dbg !6206
  %bf.clear = and i64 %bf.load, 65535, !dbg !6206
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6206
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !6206
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !6206

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6206
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6206
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6206
  %bf.load3 = load i64, i64* %5, align 8, !dbg !6206
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6206
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6206
  %cmp6 = icmp eq i32 %bf.cast5, 12, !dbg !6206
  br i1 %cmp6, label %if.end, label %land.lhs.true, !dbg !6208

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6209
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6209
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6209
  %bf.load8 = load i64, i64* %7, align 8, !dbg !6209
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6209
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6209
  %cmp11 = icmp eq i32 %bf.cast10, 6, !dbg !6209
  br i1 %cmp11, label %if.end, label %lor.lhs.false12, !dbg !6209

lor.lhs.false12:                                  ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6209
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6209
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6209
  %bf.load14 = load i64, i64* %9, align 8, !dbg !6209
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6209
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6209
  %cmp17 = icmp eq i32 %bf.cast16, 7, !dbg !6209
  br i1 %cmp17, label %if.end, label %lor.lhs.false18, !dbg !6209

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6209
  %base19 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6209
  %11 = bitcast %struct.tree_base* %base19 to i64*, !dbg !6209
  %bf.load20 = load i64, i64* %11, align 8, !dbg !6209
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !6209
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !6209
  %cmp23 = icmp eq i32 %bf.cast22, 8, !dbg !6209
  br i1 %cmp23, label %if.end, label %if.then, !dbg !6210

if.then:                                          ; preds = %lor.lhs.false18
  store %struct.iv* null, %struct.iv** %retval, align 8, !dbg !6211
  br label %return, !dbg !6211

if.end:                                           ; preds = %lor.lhs.false18, %lor.lhs.false12, %land.lhs.true, %lor.lhs.false, %entry
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6212
  %13 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6214
  %call = call %struct.version_info* @name_info(%struct.ivopts_data* %12, %union.tree_node* %13), !dbg !6215
  %iv = getelementptr inbounds %struct.version_info, %struct.version_info* %call, i32 0, i32 1, !dbg !6216
  %14 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6216
  %tobool = icmp ne %struct.iv* %14, null, !dbg !6215
  br i1 %tobool, label %if.end33, label %if.then24, !dbg !6217

if.then24:                                        ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6218
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !6218
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6218
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6218
  %call25 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %16), !dbg !6220
  store %struct.basic_block_def* %call25, %struct.basic_block_def** %bb, align 8, !dbg !6221
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6222
  %tobool26 = icmp ne %struct.basic_block_def* %17, null, !dbg !6222
  br i1 %tobool26, label %lor.lhs.false27, label %if.then30, !dbg !6224

lor.lhs.false27:                                  ; preds = %if.then24
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6225
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %18, i32 0, i32 0, !dbg !6226
  %19 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !6226
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6227
  %call28 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %19, %struct.basic_block_def* %20), !dbg !6228
  %tobool29 = icmp ne i8 %call28, 0, !dbg !6228
  br i1 %tobool29, label %if.end32, label %if.then30, !dbg !6229

if.then30:                                        ; preds = %lor.lhs.false27, %if.then24
  %21 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6230
  %22 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6231
  %23 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6232
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6233
  %call31 = call %union.tree_node* @build_int_cst(%union.tree_node* %24, i64 0), !dbg !6234
  call void @set_iv(%struct.ivopts_data* %21, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %call31), !dbg !6235
  br label %if.end32, !dbg !6235

if.end32:                                         ; preds = %if.then30, %lor.lhs.false27
  br label %if.end33, !dbg !6236

if.end33:                                         ; preds = %if.end32, %if.end
  %25 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6237
  %26 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6238
  %call34 = call %struct.version_info* @name_info(%struct.ivopts_data* %25, %union.tree_node* %26), !dbg !6239
  %iv35 = getelementptr inbounds %struct.version_info, %struct.version_info* %call34, i32 0, i32 1, !dbg !6240
  %27 = load %struct.iv*, %struct.iv** %iv35, align 8, !dbg !6240
  store %struct.iv* %27, %struct.iv** %retval, align 8, !dbg !6241
  br label %return, !dbg !6241

return:                                           ; preds = %if.end33, %if.then
  %28 = load %struct.iv*, %struct.iv** %retval, align 8, !dbg !6242
  ret %struct.iv* %28, !dbg !6242
}

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @niter_for_exit(%struct.ivopts_data* %data, %struct.edge_def* %exit) #0 !dbg !6243 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %desc = alloca %struct.tree_niter_desc, align 8
  %niter = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6246, metadata !DIExpression()), !dbg !6247
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !6248, metadata !DIExpression()), !dbg !6249
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %desc, metadata !6250, metadata !DIExpression()), !dbg !6260
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !6261, metadata !DIExpression()), !dbg !6262
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6263, metadata !DIExpression()), !dbg !6264
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6265
  %niters = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 1, !dbg !6267
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %niters, align 8, !dbg !6267
  %tobool = icmp ne %struct.pointer_map_t* %1, null, !dbg !6265
  br i1 %tobool, label %if.else, label %if.then, !dbg !6268

if.then:                                          ; preds = %entry
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !6269
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6271
  %niters1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 1, !dbg !6272
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %niters1, align 8, !dbg !6273
  store i8** null, i8*** %slot, align 8, !dbg !6274
  br label %if.end, !dbg !6275

if.else:                                          ; preds = %entry
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6276
  %niters2 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %3, i32 0, i32 1, !dbg !6277
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %niters2, align 8, !dbg !6277
  %5 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !6278
  %6 = bitcast %struct.edge_def* %5 to i8*, !dbg !6278
  %call3 = call i8** @pointer_map_contains(%struct.pointer_map_t* %4, i8* %6), !dbg !6279
  store i8** %call3, i8*** %slot, align 8, !dbg !6280
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load i8**, i8*** %slot, align 8, !dbg !6281
  %tobool4 = icmp ne i8** %7, null, !dbg !6281
  br i1 %tobool4, label %if.else20, label %if.then5, !dbg !6283

if.then5:                                         ; preds = %if.end
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6284
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %8, i32 0, i32 0, !dbg !6287
  %9 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !6287
  %10 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !6288
  %call6 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %9, %struct.edge_def* %10, %struct.tree_niter_desc* %desc, i8 zeroext 1), !dbg !6289
  %conv = zext i8 %call6 to i32, !dbg !6289
  %tobool7 = icmp ne i32 %conv, 0, !dbg !6289
  br i1 %tobool7, label %land.lhs.true, label %if.else16, !dbg !6290

land.lhs.true:                                    ; preds = %if.then5
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 1, !dbg !6291
  %11 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !6291
  %call8 = call i32 @integer_zerop(%union.tree_node* %11), !dbg !6292
  %tobool9 = icmp ne i32 %call8, 0, !dbg !6292
  br i1 %tobool9, label %land.lhs.true10, label %if.else16, !dbg !6293

land.lhs.true10:                                  ; preds = %land.lhs.true
  %niter11 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 2, !dbg !6294
  %12 = load %union.tree_node*, %union.tree_node** %niter11, align 8, !dbg !6294
  %call12 = call zeroext i8 @contains_abnormal_ssa_name_p(%union.tree_node* %12), !dbg !6295
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6295
  br i1 %tobool13, label %if.else16, label %if.then14, !dbg !6296

if.then14:                                        ; preds = %land.lhs.true10
  %niter15 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 2, !dbg !6297
  %13 = load %union.tree_node*, %union.tree_node** %niter15, align 8, !dbg !6297
  store %union.tree_node* %13, %union.tree_node** %niter, align 8, !dbg !6298
  br label %if.end17, !dbg !6299

if.else16:                                        ; preds = %land.lhs.true10, %land.lhs.true, %if.then5
  store %union.tree_node* null, %union.tree_node** %niter, align 8, !dbg !6300
  br label %if.end17

if.end17:                                         ; preds = %if.else16, %if.then14
  %14 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !6301
  %15 = bitcast %union.tree_node* %14 to i8*, !dbg !6301
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6302
  %niters18 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %16, i32 0, i32 1, !dbg !6303
  %17 = load %struct.pointer_map_t*, %struct.pointer_map_t** %niters18, align 8, !dbg !6303
  %18 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !6304
  %19 = bitcast %struct.edge_def* %18 to i8*, !dbg !6304
  %call19 = call i8** @pointer_map_insert(%struct.pointer_map_t* %17, i8* %19), !dbg !6305
  store i8* %15, i8** %call19, align 8, !dbg !6306
  br label %if.end21, !dbg !6307

if.else20:                                        ; preds = %if.end
  %20 = load i8**, i8*** %slot, align 8, !dbg !6308
  %21 = load i8*, i8** %20, align 8, !dbg !6309
  %22 = bitcast i8* %21 to %union.tree_node*, !dbg !6310
  store %union.tree_node* %22, %union.tree_node** %niter, align 8, !dbg !6311
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.end17
  %23 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !6312
  ret %union.tree_node* %23, !dbg !6313
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

declare dso_local zeroext i8 @number_of_iterations_exit(%struct.loop*, %struct.edge_def*, %struct.tree_niter_desc*, i8 zeroext) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6314 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6317, metadata !DIExpression()), !dbg !6318
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6319, metadata !DIExpression()), !dbg !6320
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6321
  store i32 0, i32* %index, align 8, !dbg !6322
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6323
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6324
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6325
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6326
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6326
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6326
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6327 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6331, metadata !DIExpression()), !dbg !6332
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6333, metadata !DIExpression()), !dbg !6334
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6335
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6335
  %5 = load i32, i32* %4, align 8, !dbg !6335
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6335
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6335
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6335
  %tobool = icmp ne i8 %call, 0, !dbg !6335
  br i1 %tobool, label %if.else, label %if.then, !dbg !6337

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6338
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6338
  %10 = load i32, i32* %9, align 8, !dbg !6338
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6338
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6338
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6338
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6340
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6341
  store i8 1, i8* %retval, align 1, !dbg !6342
  br label %return, !dbg !6342

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6343
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6345
  store i8 0, i8* %retval, align 1, !dbg !6346
  br label %return, !dbg !6346

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6347
  ret i8 %15, !dbg !6347
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_interesting_uses_outside(%struct.ivopts_data* %data, %struct.edge_def* %exit) #0 !dbg !6348 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %def = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6351, metadata !DIExpression()), !dbg !6352
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !6353, metadata !DIExpression()), !dbg !6354
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6355, metadata !DIExpression()), !dbg !6356
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !6357, metadata !DIExpression()), !dbg !6358
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6359, metadata !DIExpression()), !dbg !6360
  %0 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !6361
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !6363
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6363
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !6364
  %2 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !6364
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6364
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !6364
  br label %for.cond, !dbg !6365

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !6366
  %tobool = icmp ne i8 %call, 0, !dbg !6368
  %lnot = xor i1 %tobool, true, !dbg !6368
  br i1 %lnot, label %for.body, label %for.end, !dbg !6369

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !6370
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !6372
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6373
  %5 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !6373
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 6, !dbg !6373
  %6 = load i32, i32* %dest_idx, align 4, !dbg !6373
  %call2 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %4, i32 %6), !dbg !6373
  %call3 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call2), !dbg !6373
  store %union.tree_node* %call3, %union.tree_node** %def, align 8, !dbg !6374
  %7 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6375
  %call4 = call zeroext i8 @is_gimple_reg(%union.tree_node* %7), !dbg !6377
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6377
  br i1 %tobool5, label %if.then, label %if.end, !dbg !6378

if.then:                                          ; preds = %for.body
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6379
  %9 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6380
  %call6 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %8, %union.tree_node* %9), !dbg !6381
  br label %if.end, !dbg !6381

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6382

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !6383
  br label %for.cond, !dbg !6384, !llvm.loop !6385

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6387
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6388 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6392, metadata !DIExpression()), !dbg !6393
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6394
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6394
  %1 = load i32, i32* %index, align 8, !dbg !6394
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6394
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6394
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6394
  %5 = load i32, i32* %4, align 8, !dbg !6394
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6394
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6394
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6394
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6394
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6394

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6394
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6394
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6394
  %11 = load i32, i32* %10, align 8, !dbg !6394
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6394
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6394
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6394
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6394
  br label %cond.end, !dbg !6394

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6394
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6394
  %cmp = icmp ult i32 %1, %call2, !dbg !6394
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6394

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6394
  br label %cond.end5, !dbg !6394

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6394

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6394
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6395
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6396
  %15 = load i32, i32* %index7, align 8, !dbg !6397
  %inc = add i32 %15, 1, !dbg !6397
  store i32 %inc, i32* %index7, align 8, !dbg !6397
  ret void, !dbg !6398
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_interesting_uses_stmt(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt) #0 !dbg !6399 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %iv = alloca %struct.iv*, align 8
  %op = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node**, align 8
  %rhs = alloca %union.tree_node**, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %code = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6400, metadata !DIExpression()), !dbg !6401
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6402, metadata !DIExpression()), !dbg !6403
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !6404, metadata !DIExpression()), !dbg !6405
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6406, metadata !DIExpression()), !dbg !6407
  call void @llvm.dbg.declare(metadata %union.tree_node*** %lhs, metadata !6408, metadata !DIExpression()), !dbg !6409
  call void @llvm.dbg.declare(metadata %union.tree_node*** %rhs, metadata !6410, metadata !DIExpression()), !dbg !6411
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6412, metadata !DIExpression()), !dbg !6425
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6426, metadata !DIExpression()), !dbg !6427
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6428, metadata !DIExpression()), !dbg !6429
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6430
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6431
  call void @find_invariants_stmt(%struct.ivopts_data* %0, %union.gimple_statement_d* %1), !dbg !6432
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6433
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !6435
  %cmp = icmp eq i32 %call, 1, !dbg !6436
  br i1 %cmp, label %if.then, label %if.end, !dbg !6437

if.then:                                          ; preds = %entry
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6438
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6440
  call void @find_interesting_uses_cond(%struct.ivopts_data* %3, %union.gimple_statement_d* %4), !dbg !6441
  br label %for.end, !dbg !6442

if.end:                                           ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6443
  %call1 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %5), !dbg !6445
  %tobool = icmp ne i8 %call1, 0, !dbg !6445
  br i1 %tobool, label %if.then2, label %if.end55, !dbg !6446

if.then2:                                         ; preds = %if.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6447
  %call3 = call %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %6), !dbg !6449
  store %union.tree_node** %call3, %union.tree_node*** %lhs, align 8, !dbg !6450
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6451
  %call4 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %7), !dbg !6452
  store %union.tree_node** %call4, %union.tree_node*** %rhs, align 8, !dbg !6453
  %8 = load %union.tree_node**, %union.tree_node*** %lhs, align 8, !dbg !6454
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !6454
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6454
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !6454
  %bf.load = load i64, i64* %10, align 8, !dbg !6454
  %bf.clear = and i64 %bf.load, 65535, !dbg !6454
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6454
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !6456
  br i1 %cmp5, label %if.then6, label %if.end13, !dbg !6457

if.then6:                                         ; preds = %if.then2
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6458
  %12 = load %union.tree_node**, %union.tree_node*** %lhs, align 8, !dbg !6460
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !6461
  %call7 = call %struct.iv* @get_iv(%struct.ivopts_data* %11, %union.tree_node* %13), !dbg !6462
  store %struct.iv* %call7, %struct.iv** %iv, align 8, !dbg !6463
  %14 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6464
  %tobool8 = icmp ne %struct.iv* %14, null, !dbg !6464
  br i1 %tobool8, label %land.lhs.true, label %if.end12, !dbg !6466

land.lhs.true:                                    ; preds = %if.then6
  %15 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6467
  %step = getelementptr inbounds %struct.iv, %struct.iv* %15, i32 0, i32 2, !dbg !6468
  %16 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6468
  %call9 = call i32 @integer_zerop(%union.tree_node* %16), !dbg !6469
  %tobool10 = icmp ne i32 %call9, 0, !dbg !6469
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !6470

if.then11:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !6471

if.end12:                                         ; preds = %land.lhs.true, %if.then6
  br label %if.end13, !dbg !6472

if.end13:                                         ; preds = %if.end12, %if.then2
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6473
  %call14 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %17), !dbg !6474
  store i32 %call14, i32* %code, align 4, !dbg !6475
  %18 = load i32, i32* %code, align 4, !dbg !6476
  %call15 = call i32 @get_gimple_rhs_class(i32 %18), !dbg !6478
  %cmp16 = icmp eq i32 %call15, 3, !dbg !6479
  br i1 %cmp16, label %land.lhs.true17, label %if.else47, !dbg !6480

land.lhs.true17:                                  ; preds = %if.end13
  %19 = load %union.tree_node**, %union.tree_node*** %rhs, align 8, !dbg !6481
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !6481
  %base18 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6481
  %21 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6481
  %bf.load19 = load i64, i64* %21, align 8, !dbg !6481
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !6481
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6481
  %idxprom = sext i32 %bf.cast21 to i64, !dbg !6481
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6481
  %22 = load i32, i32* %arrayidx, align 4, !dbg !6481
  %cmp22 = icmp eq i32 %22, 4, !dbg !6481
  br i1 %cmp22, label %if.then25, label %lor.lhs.false, !dbg !6482

lor.lhs.false:                                    ; preds = %land.lhs.true17
  %23 = load %union.tree_node**, %union.tree_node*** %rhs, align 8, !dbg !6483
  %24 = load %union.tree_node*, %union.tree_node** %23, align 8, !dbg !6484
  %call23 = call zeroext i8 @is_gimple_val(%union.tree_node* %24), !dbg !6485
  %conv = zext i8 %call23 to i32, !dbg !6485
  %tobool24 = icmp ne i32 %conv, 0, !dbg !6485
  br i1 %tobool24, label %if.then25, label %if.else47, !dbg !6486

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true17
  %25 = load %union.tree_node**, %union.tree_node*** %rhs, align 8, !dbg !6487
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !6487
  %base26 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6487
  %27 = bitcast %struct.tree_base* %base26 to i64*, !dbg !6487
  %bf.load27 = load i64, i64* %27, align 8, !dbg !6487
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !6487
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6487
  %idxprom30 = sext i32 %bf.cast29 to i64, !dbg !6487
  %arrayidx31 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom30, !dbg !6487
  %28 = load i32, i32* %arrayidx31, align 4, !dbg !6487
  %cmp32 = icmp eq i32 %28, 4, !dbg !6487
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !6490

if.then34:                                        ; preds = %if.then25
  %29 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6491
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6492
  %31 = load %union.tree_node**, %union.tree_node*** %rhs, align 8, !dbg !6493
  call void @find_interesting_uses_address(%struct.ivopts_data* %29, %union.gimple_statement_d* %30, %union.tree_node** %31), !dbg !6494
  br label %if.end36, !dbg !6494

if.else:                                          ; preds = %if.then25
  %32 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6495
  %33 = load %union.tree_node**, %union.tree_node*** %rhs, align 8, !dbg !6496
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !6497
  %call35 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %32, %union.tree_node* %34), !dbg !6498
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then34
  %35 = load %union.tree_node**, %union.tree_node*** %lhs, align 8, !dbg !6499
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !6499
  %base37 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !6499
  %37 = bitcast %struct.tree_base* %base37 to i64*, !dbg !6499
  %bf.load38 = load i64, i64* %37, align 8, !dbg !6499
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !6499
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !6499
  %idxprom41 = sext i32 %bf.cast40 to i64, !dbg !6499
  %arrayidx42 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom41, !dbg !6499
  %38 = load i32, i32* %arrayidx42, align 4, !dbg !6499
  %cmp43 = icmp eq i32 %38, 4, !dbg !6499
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !6501

if.then45:                                        ; preds = %if.end36
  %39 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6502
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6503
  %41 = load %union.tree_node**, %union.tree_node*** %lhs, align 8, !dbg !6504
  call void @find_interesting_uses_address(%struct.ivopts_data* %39, %union.gimple_statement_d* %40, %union.tree_node** %41), !dbg !6505
  br label %if.end46, !dbg !6505

if.end46:                                         ; preds = %if.then45, %if.end36
  br label %for.end, !dbg !6506

if.else47:                                        ; preds = %lor.lhs.false, %if.end13
  %42 = load i32, i32* %code, align 4, !dbg !6507
  %idxprom48 = sext i32 %42 to i64, !dbg !6507
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom48, !dbg !6507
  %43 = load i32, i32* %arrayidx49, align 4, !dbg !6507
  %cmp50 = icmp eq i32 %43, 5, !dbg !6509
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !6510

if.then52:                                        ; preds = %if.else47
  %44 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6511
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6513
  call void @find_interesting_uses_cond(%struct.ivopts_data* %44, %union.gimple_statement_d* %45), !dbg !6514
  br label %for.end, !dbg !6515

if.end53:                                         ; preds = %if.else47
  br label %if.end54

if.end54:                                         ; preds = %if.end53
  br label %if.end55, !dbg !6516

if.end55:                                         ; preds = %if.end54, %if.end
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6517
  %call56 = call i32 @gimple_code(%union.gimple_statement_d* %46), !dbg !6519
  %cmp57 = icmp eq i32 %call56, 16, !dbg !6520
  br i1 %cmp57, label %land.lhs.true59, label %if.end74, !dbg !6521

land.lhs.true59:                                  ; preds = %if.end55
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6522
  %call60 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %47), !dbg !6523
  %48 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6524
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %48, i32 0, i32 0, !dbg !6525
  %49 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !6525
  %header = getelementptr inbounds %struct.loop, %struct.loop* %49, i32 0, i32 2, !dbg !6526
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !6526
  %cmp61 = icmp eq %struct.basic_block_def* %call60, %50, !dbg !6527
  br i1 %cmp61, label %if.then63, label %if.end74, !dbg !6528

if.then63:                                        ; preds = %land.lhs.true59
  %51 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6529
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6531
  %call64 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %52), !dbg !6531
  %call65 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call64), !dbg !6531
  %call66 = call %struct.iv* @get_iv(%struct.ivopts_data* %51, %union.tree_node* %call65), !dbg !6532
  store %struct.iv* %call66, %struct.iv** %iv, align 8, !dbg !6533
  %53 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6534
  %tobool67 = icmp ne %struct.iv* %53, null, !dbg !6534
  br i1 %tobool67, label %land.lhs.true68, label %if.end73, !dbg !6536

land.lhs.true68:                                  ; preds = %if.then63
  %54 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6537
  %step69 = getelementptr inbounds %struct.iv, %struct.iv* %54, i32 0, i32 2, !dbg !6538
  %55 = load %union.tree_node*, %union.tree_node** %step69, align 8, !dbg !6538
  %call70 = call i32 @integer_zerop(%union.tree_node* %55), !dbg !6539
  %tobool71 = icmp ne i32 %call70, 0, !dbg !6539
  br i1 %tobool71, label %if.end73, label %if.then72, !dbg !6540

if.then72:                                        ; preds = %land.lhs.true68
  br label %for.end, !dbg !6541

if.end73:                                         ; preds = %land.lhs.true68, %if.then63
  br label %if.end74, !dbg !6542

if.end74:                                         ; preds = %if.end73, %land.lhs.true59, %if.end55
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6543
  %call75 = call i32 @gimple_code(%union.gimple_statement_d* %56), !dbg !6543
  %cmp76 = icmp eq i32 %call75, 16, !dbg !6543
  br i1 %cmp76, label %cond.true, label %cond.false, !dbg !6543

cond.true:                                        ; preds = %if.end74
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6543
  %call78 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %57, i32 1), !dbg !6543
  br label %cond.end, !dbg !6543

cond.false:                                       ; preds = %if.end74
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6543
  %call79 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %58, i32 1), !dbg !6543
  br label %cond.end, !dbg !6543

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ssa_use_operand_d* [ %call78, %cond.true ], [ %call79, %cond.false ], !dbg !6543
  store %struct.ssa_use_operand_d* %cond, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6543
  br label %for.cond, !dbg !6543

for.cond:                                         ; preds = %for.inc, %cond.end
  %call80 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6545
  %tobool81 = icmp ne i8 %call80, 0, !dbg !6545
  %lnot = xor i1 %tobool81, true, !dbg !6545
  br i1 %lnot, label %for.body, label %for.end, !dbg !6543

for.body:                                         ; preds = %for.cond
  %59 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6547
  %call82 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %59), !dbg !6547
  store %union.tree_node* %call82, %union.tree_node** %op, align 8, !dbg !6549
  %60 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6550
  %base83 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !6550
  %61 = bitcast %struct.tree_base* %base83 to i64*, !dbg !6550
  %bf.load84 = load i64, i64* %61, align 8, !dbg !6550
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !6550
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !6550
  %cmp87 = icmp ne i32 %bf.cast86, 141, !dbg !6552
  br i1 %cmp87, label %if.then89, label %if.end90, !dbg !6553

if.then89:                                        ; preds = %for.body
  br label %for.inc, !dbg !6554

if.end90:                                         ; preds = %for.body
  %62 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6555
  %63 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6556
  %call91 = call %struct.iv* @get_iv(%struct.ivopts_data* %62, %union.tree_node* %63), !dbg !6557
  store %struct.iv* %call91, %struct.iv** %iv, align 8, !dbg !6558
  %64 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6559
  %tobool92 = icmp ne %struct.iv* %64, null, !dbg !6559
  br i1 %tobool92, label %if.end94, label %if.then93, !dbg !6561

if.then93:                                        ; preds = %if.end90
  br label %for.inc, !dbg !6562

if.end94:                                         ; preds = %if.end90
  %65 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6563
  %66 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6564
  %call95 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %65, %union.tree_node* %66), !dbg !6565
  br label %for.inc, !dbg !6566

for.inc:                                          ; preds = %if.end94, %if.then93, %if.then89
  %call96 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !6545
  store %struct.ssa_use_operand_d* %call96, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6545
  br label %for.cond, !dbg !6545, !llvm.loop !6567

for.end:                                          ; preds = %if.then, %if.then11, %if.end46, %if.then52, %if.then72, %for.cond
  ret void, !dbg !6569
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !6570 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6571, metadata !DIExpression()), !dbg !6572
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6573
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6574
  %cmp = icmp eq i32 %call, 2, !dbg !6575
  %conv = zext i1 %cmp to i32, !dbg !6575
  %conv1 = trunc i32 %conv to i8, !dbg !6574
  ret i8 %conv1, !dbg !6576
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6577 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6580, metadata !DIExpression()), !dbg !6581
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6582
  %3 = load i32, i32* %index, align 8, !dbg !6582
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6583
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6583
  %6 = load i32, i32* %5, align 8, !dbg !6583
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6583
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !6583
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !6583
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6583
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6583

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6583
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6583
  %11 = load i32, i32* %10, align 8, !dbg !6583
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6583
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6583
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6583
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6583
  br label %cond.end, !dbg !6583

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6583

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6583
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6583
  %cmp = icmp eq i32 %3, %call2, !dbg !6584
  %conv = zext i1 %cmp to i32, !dbg !6584
  %conv3 = trunc i32 %conv to i8, !dbg !6585
  ret i8 %conv3, !dbg !6586
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6587 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6590, metadata !DIExpression()), !dbg !6591
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6592
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6592
  %5 = load i32, i32* %4, align 8, !dbg !6592
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6592
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6592
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6592
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6592
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6592

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6592
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6592
  %10 = load i32, i32* %9, align 8, !dbg !6592
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6592
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6592
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6592
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6592
  br label %cond.end, !dbg !6592

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6592

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6592
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6592
  %13 = load i32, i32* %index, align 8, !dbg !6592
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !6592
  ret %struct.edge_def* %call2, !dbg !6593
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6594 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6599, metadata !DIExpression()), !dbg !6600
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6600
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6600
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6600

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6600
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6600
  %2 = load i32, i32* %num, align 8, !dbg !6600
  br label %cond.end, !dbg !6600

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6600

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6600
  ret i32 %cond, !dbg !6600
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6601 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6604, metadata !DIExpression()), !dbg !6605
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6606
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !6606
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !6606
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6606

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6606
  br label %cond.end, !dbg !6606

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6606

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6606
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6607
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !6607
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !6608
  ret %struct.VEC_edge_gc* %5, !dbg !6609
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6610 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6613, metadata !DIExpression()), !dbg !6614
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6615, metadata !DIExpression()), !dbg !6614
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6614
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6614
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6614

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6614
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6614
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6614
  %3 = load i32, i32* %num, align 8, !dbg !6614
  %cmp = icmp ult i32 %1, %3, !dbg !6614
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6616
  %land.ext = zext i1 %4 to i32, !dbg !6614
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6614
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6614
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6614
  %idxprom = zext i32 %6 to i64, !dbg !6614
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6614
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6614
  ret %struct.edge_def* %7, !dbg !6614
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %data, %union.tree_node* %op) #0 !dbg !6617 {
entry:
  %retval = alloca %struct.iv_use*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %iv = alloca %struct.iv*, align 8
  %civ = alloca %struct.iv*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %struct.iv_use*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6620, metadata !DIExpression()), !dbg !6621
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6622, metadata !DIExpression()), !dbg !6623
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !6624, metadata !DIExpression()), !dbg !6625
  call void @llvm.dbg.declare(metadata %struct.iv** %civ, metadata !6626, metadata !DIExpression()), !dbg !6627
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6628, metadata !DIExpression()), !dbg !6629
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !6630, metadata !DIExpression()), !dbg !6631
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6632
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6632
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6632
  %bf.load = load i64, i64* %1, align 8, !dbg !6632
  %bf.clear = and i64 %bf.load, 65535, !dbg !6632
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6632
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6634
  br i1 %cmp, label %if.then, label %if.end, !dbg !6635

if.then:                                          ; preds = %entry
  store %struct.iv_use* null, %struct.iv_use** %retval, align 8, !dbg !6636
  br label %return, !dbg !6636

if.end:                                           ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6637
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6638
  %call = call %struct.iv* @get_iv(%struct.ivopts_data* %2, %union.tree_node* %3), !dbg !6639
  store %struct.iv* %call, %struct.iv** %iv, align 8, !dbg !6640
  %4 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6641
  %tobool = icmp ne %struct.iv* %4, null, !dbg !6641
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !6643

if.then1:                                         ; preds = %if.end
  store %struct.iv_use* null, %struct.iv_use** %retval, align 8, !dbg !6644
  br label %return, !dbg !6644

if.end2:                                          ; preds = %if.end
  %5 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6645
  %have_use_for = getelementptr inbounds %struct.iv, %struct.iv* %5, i32 0, i32 5, !dbg !6647
  %6 = load i8, i8* %have_use_for, align 1, !dbg !6647
  %tobool3 = icmp ne i8 %6, 0, !dbg !6645
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !6648

if.then4:                                         ; preds = %if.end2
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6649
  %8 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6651
  %use_id = getelementptr inbounds %struct.iv, %struct.iv* %8, i32 0, i32 6, !dbg !6652
  %9 = load i32, i32* %use_id, align 4, !dbg !6652
  %call5 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %7, i32 %9), !dbg !6653
  store %struct.iv_use* %call5, %struct.iv_use** %use, align 8, !dbg !6654
  %10 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6655
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %10, i32 0, i32 1, !dbg !6655
  %11 = load i32, i32* %type, align 4, !dbg !6655
  %cmp6 = icmp eq i32 %11, 0, !dbg !6655
  br i1 %cmp6, label %cond.false, label %cond.true, !dbg !6655

cond.true:                                        ; preds = %if.then4
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 1170, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6655
  br label %cond.end, !dbg !6655

cond.false:                                       ; preds = %if.then4
  br label %cond.end, !dbg !6655

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6655
  %12 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6656
  store %struct.iv_use* %12, %struct.iv_use** %retval, align 8, !dbg !6657
  br label %return, !dbg !6657

if.end7:                                          ; preds = %if.end2
  %13 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6658
  %step = getelementptr inbounds %struct.iv, %struct.iv* %13, i32 0, i32 2, !dbg !6660
  %14 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6660
  %call8 = call i32 @integer_zerop(%union.tree_node* %14), !dbg !6661
  %tobool9 = icmp ne i32 %call8, 0, !dbg !6661
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !6662

if.then10:                                        ; preds = %if.end7
  %15 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6663
  %16 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6665
  call void @record_invariant(%struct.ivopts_data* %15, %union.tree_node* %16, i8 zeroext 1), !dbg !6666
  store %struct.iv_use* null, %struct.iv_use** %retval, align 8, !dbg !6667
  br label %return, !dbg !6667

if.end11:                                         ; preds = %if.end7
  %17 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6668
  %have_use_for12 = getelementptr inbounds %struct.iv, %struct.iv* %17, i32 0, i32 5, !dbg !6669
  store i8 1, i8* %have_use_for12, align 1, !dbg !6670
  %call13 = call i8* @xmalloc(i64 40), !dbg !6671
  %18 = bitcast i8* %call13 to %struct.iv*, !dbg !6671
  store %struct.iv* %18, %struct.iv** %civ, align 8, !dbg !6672
  %19 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !6673
  %20 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6674
  %21 = bitcast %struct.iv* %19 to i8*, !dbg !6675
  %22 = bitcast %struct.iv* %20 to i8*, !dbg !6675
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 40, i1 false), !dbg !6675
  %23 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6676
  %ssa_name = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !6676
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6676
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6676
  store %union.gimple_statement_d* %24, %union.gimple_statement_d** %stmt, align 8, !dbg !6677
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6678
  %call14 = call i32 @gimple_code(%union.gimple_statement_d* %25), !dbg !6678
  %cmp15 = icmp eq i32 %call14, 16, !dbg !6678
  br i1 %cmp15, label %cond.false19, label %lor.lhs.false, !dbg !6678

lor.lhs.false:                                    ; preds = %if.end11
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6678
  %call16 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %26), !dbg !6678
  %conv = zext i8 %call16 to i32, !dbg !6678
  %tobool17 = icmp ne i32 %conv, 0, !dbg !6678
  br i1 %tobool17, label %cond.false19, label %cond.true18, !dbg !6678

cond.true18:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 1186, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !6678
  br label %cond.end20, !dbg !6678

cond.false19:                                     ; preds = %lor.lhs.false, %if.end11
  br label %cond.end20, !dbg !6678

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !6678
  %27 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6679
  %28 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !6680
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6681
  %call22 = call %struct.iv_use* @record_use(%struct.ivopts_data* %27, %union.tree_node** null, %struct.iv* %28, %union.gimple_statement_d* %29, i32 0), !dbg !6682
  store %struct.iv_use* %call22, %struct.iv_use** %use, align 8, !dbg !6683
  %30 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6684
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %30, i32 0, i32 0, !dbg !6685
  %31 = load i32, i32* %id, align 8, !dbg !6685
  %32 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !6686
  %use_id23 = getelementptr inbounds %struct.iv, %struct.iv* %32, i32 0, i32 6, !dbg !6687
  store i32 %31, i32* %use_id23, align 4, !dbg !6688
  %33 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6689
  store %struct.iv_use* %33, %struct.iv_use** %retval, align 8, !dbg !6690
  br label %return, !dbg !6690

return:                                           ; preds = %cond.end20, %if.then10, %cond.end, %if.then1, %if.then
  %34 = load %struct.iv_use*, %struct.iv_use** %retval, align 8, !dbg !6691
  ret %struct.iv_use* %34, !dbg !6691
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_invariant(%struct.ivopts_data* %data, %union.tree_node* %op, i8 zeroext %nonlinear_use) #0 !dbg !6692 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %nonlinear_use.addr = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %info = alloca %struct.version_info*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6695, metadata !DIExpression()), !dbg !6696
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6697, metadata !DIExpression()), !dbg !6698
  store i8 %nonlinear_use, i8* %nonlinear_use.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nonlinear_use.addr, metadata !6699, metadata !DIExpression()), !dbg !6700
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6701, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !6703, metadata !DIExpression()), !dbg !6704
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6705
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6705
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6705
  %bf.load = load i64, i64* %1, align 8, !dbg !6705
  %bf.clear = and i64 %bf.load, 65535, !dbg !6705
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6705
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6707
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6708

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6709
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %2), !dbg !6710
  %tobool = icmp ne i8 %call, 0, !dbg !6710
  br i1 %tobool, label %if.end, label %if.then, !dbg !6711

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !6712

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6713
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6713
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6713
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6713
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4), !dbg !6714
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %bb, align 8, !dbg !6715
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6716
  %tobool2 = icmp ne %struct.basic_block_def* %5, null, !dbg !6716
  br i1 %tobool2, label %land.lhs.true, label %if.end6, !dbg !6718

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6719
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %6, i32 0, i32 0, !dbg !6720
  %7 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !6720
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6721
  %call3 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %7, %struct.basic_block_def* %8), !dbg !6722
  %conv = zext i8 %call3 to i32, !dbg !6722
  %tobool4 = icmp ne i32 %conv, 0, !dbg !6722
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !6723

if.then5:                                         ; preds = %land.lhs.true
  br label %return, !dbg !6724

if.end6:                                          ; preds = %land.lhs.true, %if.end
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6725
  %10 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6726
  %call7 = call %struct.version_info* @name_info(%struct.ivopts_data* %9, %union.tree_node* %10), !dbg !6727
  store %struct.version_info* %call7, %struct.version_info** %info, align 8, !dbg !6728
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6729
  %12 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !6730
  %name = getelementptr inbounds %struct.version_info, %struct.version_info* %12, i32 0, i32 0, !dbg !6731
  store %union.tree_node* %11, %union.tree_node** %name, align 8, !dbg !6732
  %13 = load i8, i8* %nonlinear_use.addr, align 1, !dbg !6733
  %conv8 = zext i8 %13 to i32, !dbg !6733
  %14 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !6734
  %has_nonlin_use = getelementptr inbounds %struct.version_info, %struct.version_info* %14, i32 0, i32 2, !dbg !6735
  %15 = load i8, i8* %has_nonlin_use, align 8, !dbg !6736
  %conv9 = zext i8 %15 to i32, !dbg !6736
  %or = or i32 %conv9, %conv8, !dbg !6736
  %conv10 = trunc i32 %or to i8, !dbg !6736
  store i8 %conv10, i8* %has_nonlin_use, align 8, !dbg !6736
  %16 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !6737
  %inv_id = getelementptr inbounds %struct.version_info, %struct.version_info* %16, i32 0, i32 3, !dbg !6739
  %17 = load i32, i32* %inv_id, align 4, !dbg !6739
  %tobool11 = icmp ne i32 %17, 0, !dbg !6737
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !6740

if.then12:                                        ; preds = %if.end6
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6741
  %max_inv_id = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %18, i32 0, i32 9, !dbg !6742
  %19 = load i32, i32* %max_inv_id, align 8, !dbg !6743
  %inc = add i32 %19, 1, !dbg !6743
  store i32 %inc, i32* %max_inv_id, align 8, !dbg !6743
  %20 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !6744
  %inv_id13 = getelementptr inbounds %struct.version_info, %struct.version_info* %20, i32 0, i32 3, !dbg !6745
  store i32 %inc, i32* %inv_id13, align 4, !dbg !6746
  br label %if.end14, !dbg !6744

if.end14:                                         ; preds = %if.then12, %if.end6
  %21 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6747
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %21, i32 0, i32 5, !dbg !6748
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !6748
  %23 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6749
  %ssa_name15 = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !6749
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name15, i32 0, i32 3, !dbg !6749
  %24 = load i32, i32* %version, align 8, !dbg !6749
  %call16 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %22, i32 %24), !dbg !6750
  br label %return, !dbg !6751

return:                                           ; preds = %if.end14, %if.then5, %if.then
  ret void, !dbg !6751
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6752 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6753, metadata !DIExpression()), !dbg !6754
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6755
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6756
  %cmp = icmp eq i32 %call, 6, !dbg !6757
  %conv = zext i1 %cmp to i32, !dbg !6757
  %conv1 = trunc i32 %conv to i8, !dbg !6756
  ret i8 %conv1, !dbg !6758
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_use* @record_use(%struct.ivopts_data* %data, %union.tree_node** %use_p, %struct.iv* %iv, %union.gimple_statement_d* %stmt, i32 %use_type) #0 !dbg !6759 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use_p.addr = alloca %union.tree_node**, align 8
  %iv.addr = alloca %struct.iv*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %use_type.addr = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6762, metadata !DIExpression()), !dbg !6763
  store %union.tree_node** %use_p, %union.tree_node*** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %use_p.addr, metadata !6764, metadata !DIExpression()), !dbg !6765
  store %struct.iv* %iv, %struct.iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv** %iv.addr, metadata !6766, metadata !DIExpression()), !dbg !6767
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6768, metadata !DIExpression()), !dbg !6769
  store i32 %use_type, i32* %use_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %use_type.addr, metadata !6770, metadata !DIExpression()), !dbg !6771
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !6772, metadata !DIExpression()), !dbg !6773
  %call = call i8* @xcalloc(i64 1, i64 64), !dbg !6774
  %0 = bitcast i8* %call to %struct.iv_use*, !dbg !6774
  store %struct.iv_use* %0, %struct.iv_use** %use, align 8, !dbg !6773
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6775
  %call1 = call i32 @n_iv_uses(%struct.ivopts_data* %1), !dbg !6776
  %2 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6777
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %2, i32 0, i32 0, !dbg !6778
  store i32 %call1, i32* %id, align 8, !dbg !6779
  %3 = load i32, i32* %use_type.addr, align 4, !dbg !6780
  %4 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6781
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %4, i32 0, i32 1, !dbg !6782
  store i32 %3, i32* %type, align 4, !dbg !6783
  %5 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !6784
  %6 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6785
  %iv2 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %6, i32 0, i32 2, !dbg !6786
  store %struct.iv* %5, %struct.iv** %iv2, align 8, !dbg !6787
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6788
  %8 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6789
  %stmt3 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %8, i32 0, i32 3, !dbg !6790
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %stmt3, align 8, !dbg !6791
  %9 = load %union.tree_node**, %union.tree_node*** %use_p.addr, align 8, !dbg !6792
  %10 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6793
  %op_p = getelementptr inbounds %struct.iv_use, %struct.iv_use* %10, i32 0, i32 4, !dbg !6794
  store %union.tree_node** %9, %union.tree_node*** %op_p, align 8, !dbg !6795
  %call4 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6796
  %11 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6797
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %11, i32 0, i32 5, !dbg !6798
  store %struct.bitmap_head_def* %call4, %struct.bitmap_head_def** %related_cands, align 8, !dbg !6799
  %12 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !6800
  %ssa_name = getelementptr inbounds %struct.iv, %struct.iv* %12, i32 0, i32 3, !dbg !6801
  store %union.tree_node* null, %union.tree_node** %ssa_name, align 8, !dbg !6802
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6803
  %tobool = icmp ne %struct._IO_FILE* %13, null, !dbg !6803
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6805

land.lhs.true:                                    ; preds = %entry
  %14 = load i32, i32* @dump_flags, align 4, !dbg !6806
  %and = and i32 %14, 8, !dbg !6807
  %tobool5 = icmp ne i32 %and, 0, !dbg !6807
  br i1 %tobool5, label %if.then, label %if.end, !dbg !6808

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6809
  %16 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6810
  call void @dump_use(%struct._IO_FILE* %15, %struct.iv_use* %16), !dbg !6811
  br label %if.end, !dbg !6811

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %17 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6812
  %iv_uses = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %17, i32 0, i32 6, !dbg !6812
  %18 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6812
  %call6 = call %struct.iv_use** @VEC_iv_use_p_heap_safe_push(%struct.VEC_iv_use_p_heap** %iv_uses, %struct.iv_use* %18), !dbg !6812
  %19 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !6813
  ret %struct.iv_use* %19, !dbg !6814
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_use** @VEC_iv_use_p_heap_safe_push(%struct.VEC_iv_use_p_heap** %vec_, %struct.iv_use* %obj_) #0 !dbg !6815 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_heap**, align 8
  %obj_.addr = alloca %struct.iv_use*, align 8
  store %struct.VEC_iv_use_p_heap** %vec_, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_heap*** %vec_.addr, metadata !6820, metadata !DIExpression()), !dbg !6821
  store %struct.iv_use* %obj_, %struct.iv_use** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %obj_.addr, metadata !6822, metadata !DIExpression()), !dbg !6821
  %0 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6821
  %call = call i32 @VEC_iv_use_p_heap_reserve(%struct.VEC_iv_use_p_heap** %0, i32 1), !dbg !6821
  %1 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6821
  %2 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %1, align 8, !dbg !6821
  %tobool = icmp ne %struct.VEC_iv_use_p_heap* %2, null, !dbg !6821
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6821

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6821
  %4 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %3, align 8, !dbg !6821
  %base = getelementptr inbounds %struct.VEC_iv_use_p_heap, %struct.VEC_iv_use_p_heap* %4, i32 0, i32 0, !dbg !6821
  br label %cond.end, !dbg !6821

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6821

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_use_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6821
  %5 = load %struct.iv_use*, %struct.iv_use** %obj_.addr, align 8, !dbg !6821
  %call1 = call %struct.iv_use** @VEC_iv_use_p_base_quick_push(%struct.VEC_iv_use_p_base* %cond, %struct.iv_use* %5), !dbg !6821
  ret %struct.iv_use** %call1, !dbg !6821
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_iv_use_p_heap_reserve(%struct.VEC_iv_use_p_heap** %vec_, i32 %alloc_) #0 !dbg !6823 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_iv_use_p_heap** %vec_, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_heap*** %vec_.addr, metadata !6826, metadata !DIExpression()), !dbg !6827
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6828, metadata !DIExpression()), !dbg !6827
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6829, metadata !DIExpression()), !dbg !6827
  %0 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6827
  %1 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %0, align 8, !dbg !6827
  %tobool = icmp ne %struct.VEC_iv_use_p_heap* %1, null, !dbg !6827
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6827

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6827
  %3 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %2, align 8, !dbg !6827
  %base = getelementptr inbounds %struct.VEC_iv_use_p_heap, %struct.VEC_iv_use_p_heap* %3, i32 0, i32 0, !dbg !6827
  br label %cond.end, !dbg !6827

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6827

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_use_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6827
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6827
  %call = call i32 @VEC_iv_use_p_base_space(%struct.VEC_iv_use_p_base* %cond, i32 %4), !dbg !6827
  %tobool1 = icmp ne i32 %call, 0, !dbg !6827
  %lnot = xor i1 %tobool1, true, !dbg !6827
  %lnot.ext = zext i1 %lnot to i32, !dbg !6827
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6827
  %5 = load i32, i32* %extend, align 4, !dbg !6830
  %tobool2 = icmp ne i32 %5, 0, !dbg !6830
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6827

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6830
  %7 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %6, align 8, !dbg !6830
  %8 = bitcast %struct.VEC_iv_use_p_heap* %7 to i8*, !dbg !6830
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6830
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6830
  %10 = bitcast i8* %call3 to %struct.VEC_iv_use_p_heap*, !dbg !6830
  %11 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !6830
  store %struct.VEC_iv_use_p_heap* %10, %struct.VEC_iv_use_p_heap** %11, align 8, !dbg !6830
  br label %if.end, !dbg !6830

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6827
  ret i32 %12, !dbg !6827
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_use** @VEC_iv_use_p_base_quick_push(%struct.VEC_iv_use_p_base* %vec_, %struct.iv_use* %obj_) #0 !dbg !6832 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_base*, align 8
  %obj_.addr = alloca %struct.iv_use*, align 8
  %slot_ = alloca %struct.iv_use**, align 8
  store %struct.VEC_iv_use_p_base* %vec_, %struct.VEC_iv_use_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_base** %vec_.addr, metadata !6836, metadata !DIExpression()), !dbg !6837
  store %struct.iv_use* %obj_, %struct.iv_use** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %obj_.addr, metadata !6838, metadata !DIExpression()), !dbg !6837
  call void @llvm.dbg.declare(metadata %struct.iv_use*** %slot_, metadata !6839, metadata !DIExpression()), !dbg !6837
  %0 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6837
  %num = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %0, i32 0, i32 0, !dbg !6837
  %1 = load i32, i32* %num, align 8, !dbg !6837
  %2 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6837
  %alloc = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %2, i32 0, i32 1, !dbg !6837
  %3 = load i32, i32* %alloc, align 4, !dbg !6837
  %cmp = icmp ult i32 %1, %3, !dbg !6837
  %conv = zext i1 %cmp to i32, !dbg !6837
  %4 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6837
  %vec = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %4, i32 0, i32 2, !dbg !6837
  %5 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6837
  %num1 = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %5, i32 0, i32 0, !dbg !6837
  %6 = load i32, i32* %num1, align 8, !dbg !6837
  %inc = add i32 %6, 1, !dbg !6837
  store i32 %inc, i32* %num1, align 8, !dbg !6837
  %idxprom = zext i32 %6 to i64, !dbg !6837
  %arrayidx = getelementptr inbounds [1 x %struct.iv_use*], [1 x %struct.iv_use*]* %vec, i64 0, i64 %idxprom, !dbg !6837
  store %struct.iv_use** %arrayidx, %struct.iv_use*** %slot_, align 8, !dbg !6837
  %7 = load %struct.iv_use*, %struct.iv_use** %obj_.addr, align 8, !dbg !6837
  %8 = load %struct.iv_use**, %struct.iv_use*** %slot_, align 8, !dbg !6837
  store %struct.iv_use* %7, %struct.iv_use** %8, align 8, !dbg !6837
  %9 = load %struct.iv_use**, %struct.iv_use*** %slot_, align 8, !dbg !6837
  ret %struct.iv_use** %9, !dbg !6837
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_iv_use_p_base_space(%struct.VEC_iv_use_p_base* %vec_, i32 %alloc_) #0 !dbg !6840 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_iv_use_p_base* %vec_, %struct.VEC_iv_use_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_base** %vec_.addr, metadata !6843, metadata !DIExpression()), !dbg !6844
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6845, metadata !DIExpression()), !dbg !6844
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6844
  %cmp = icmp sge i32 %0, 0, !dbg !6844
  %conv = zext i1 %cmp to i32, !dbg !6844
  %1 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6844
  %tobool = icmp ne %struct.VEC_iv_use_p_base* %1, null, !dbg !6844
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6844

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6844
  %alloc = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %2, i32 0, i32 1, !dbg !6844
  %3 = load i32, i32* %alloc, align 4, !dbg !6844
  %4 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !6844
  %num = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %4, i32 0, i32 0, !dbg !6844
  %5 = load i32, i32* %num, align 8, !dbg !6844
  %sub = sub i32 %3, %5, !dbg !6844
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6844
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6844
  %conv2 = zext i1 %cmp1 to i32, !dbg !6844
  br label %cond.end, !dbg !6844

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6844
  %tobool3 = icmp ne i32 %7, 0, !dbg !6844
  %lnot = xor i1 %tobool3, true, !dbg !6844
  %lnot.ext = zext i1 %lnot to i32, !dbg !6844
  br label %cond.end, !dbg !6844

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6844
  ret i32 %cond, !dbg !6844
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariants_stmt(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt) #0 !dbg !6846 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %op = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6847, metadata !DIExpression()), !dbg !6848
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6849, metadata !DIExpression()), !dbg !6850
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6851, metadata !DIExpression()), !dbg !6852
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6853, metadata !DIExpression()), !dbg !6854
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6855, metadata !DIExpression()), !dbg !6856
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6857
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6857
  %cmp = icmp eq i32 %call, 16, !dbg !6857
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6857

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6857
  %call1 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %1, i32 1), !dbg !6857
  br label %cond.end, !dbg !6857

cond.false:                                       ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6857
  %call2 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %2, i32 1), !dbg !6857
  br label %cond.end, !dbg !6857

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.ssa_use_operand_d* [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !6857
  store %struct.ssa_use_operand_d* %cond, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6857
  br label %for.cond, !dbg !6857

for.cond:                                         ; preds = %for.inc, %cond.end
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6859
  %tobool = icmp ne i8 %call3, 0, !dbg !6859
  %lnot = xor i1 %tobool, true, !dbg !6859
  br i1 %lnot, label %for.body, label %for.end, !dbg !6857

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6861
  %call4 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !6861
  store %union.tree_node* %call4, %union.tree_node** %op, align 8, !dbg !6863
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6864
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6865
  call void @record_invariant(%struct.ivopts_data* %4, %union.tree_node* %5, i8 zeroext 0), !dbg !6866
  br label %for.inc, !dbg !6867

for.inc:                                          ; preds = %for.body
  %call5 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !6859
  store %struct.ssa_use_operand_d* %call5, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6859
  br label %for.cond, !dbg !6859, !llvm.loop !6868

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6870
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_interesting_uses_cond(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt) #0 !dbg !6871 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %var_p = alloca %union.tree_node**, align 8
  %bound_p = alloca %union.tree_node**, align 8
  %var_iv = alloca %struct.iv*, align 8
  %civ = alloca %struct.iv*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6872, metadata !DIExpression()), !dbg !6873
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6874, metadata !DIExpression()), !dbg !6875
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var_p, metadata !6876, metadata !DIExpression()), !dbg !6877
  call void @llvm.dbg.declare(metadata %union.tree_node*** %bound_p, metadata !6878, metadata !DIExpression()), !dbg !6879
  call void @llvm.dbg.declare(metadata %struct.iv** %var_iv, metadata !6880, metadata !DIExpression()), !dbg !6881
  call void @llvm.dbg.declare(metadata %struct.iv** %civ, metadata !6882, metadata !DIExpression()), !dbg !6883
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6884
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6886
  %call = call zeroext i8 @extract_cond_operands(%struct.ivopts_data* %0, %union.gimple_statement_d* %1, %union.tree_node*** %var_p, %union.tree_node*** %bound_p, %struct.iv** %var_iv, %struct.iv** null), !dbg !6887
  %tobool = icmp ne i8 %call, 0, !dbg !6887
  br i1 %tobool, label %if.end, label %if.then, !dbg !6888

if.then:                                          ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6889
  %3 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !6891
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !6892
  %call1 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %2, %union.tree_node* %4), !dbg !6893
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6894
  %6 = load %union.tree_node**, %union.tree_node*** %bound_p, align 8, !dbg !6895
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6896
  %call2 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %5, %union.tree_node* %7), !dbg !6897
  br label %return, !dbg !6898

if.end:                                           ; preds = %entry
  %call3 = call i8* @xmalloc(i64 40), !dbg !6899
  %8 = bitcast i8* %call3 to %struct.iv*, !dbg !6899
  store %struct.iv* %8, %struct.iv** %civ, align 8, !dbg !6900
  %9 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !6901
  %10 = load %struct.iv*, %struct.iv** %var_iv, align 8, !dbg !6902
  %11 = bitcast %struct.iv* %9 to i8*, !dbg !6903
  %12 = bitcast %struct.iv* %10 to i8*, !dbg !6903
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 40, i1 false), !dbg !6903
  %13 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !6904
  %14 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !6905
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6906
  %call4 = call %struct.iv_use* @record_use(%struct.ivopts_data* %13, %union.tree_node** null, %struct.iv* %14, %union.gimple_statement_d* %15, i32 2), !dbg !6907
  br label %return, !dbg !6908

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6908
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6909 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6912, metadata !DIExpression()), !dbg !6913
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6914
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !6915
  ret %union.tree_node** %call, !dbg !6916
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6917 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6918, metadata !DIExpression()), !dbg !6919
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6920
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !6921
  ret %union.tree_node** %call, !dbg !6922
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6923 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6926, metadata !DIExpression()), !dbg !6927
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6928, metadata !DIExpression()), !dbg !6929
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6930
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6931
  store i32 %call, i32* %code, align 4, !dbg !6932
  %1 = load i32, i32* %code, align 4, !dbg !6933
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6935
  %cmp = icmp eq i32 %call1, 3, !dbg !6936
  br i1 %cmp, label %if.then, label %if.end, !dbg !6937

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6938
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6938
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6938
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6938
  %bf.load = load i64, i64* %3, align 8, !dbg !6938
  %bf.clear = and i64 %bf.load, 65535, !dbg !6938
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6938
  store i32 %bf.cast, i32* %code, align 4, !dbg !6939
  br label %if.end, !dbg !6940

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6941
  ret i32 %4, !dbg !6942
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6943 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6946, metadata !DIExpression()), !dbg !6947
  %0 = load i32, i32* %code.addr, align 4, !dbg !6948
  %idxprom = sext i32 %0 to i64, !dbg !6949
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6949
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6949
  %conv = zext i8 %1 to i32, !dbg !6950
  ret i32 %conv, !dbg !6951
}

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_interesting_uses_address(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt, %union.tree_node** %op_p) #0 !dbg !6952 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op_p.addr = alloca %union.tree_node**, align 8
  %base = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %civ = alloca %struct.iv*, align 8
  %ifs_ivopts_data = alloca %struct.ifs_ivopts_data, align 8
  %type = alloca %union.tree_node*, align 8
  %astep = alloca %union.tree_node*, align 8
  %ref = alloca %union.tree_node**, align 8
  %tem = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !6955, metadata !DIExpression()), !dbg !6956
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6957, metadata !DIExpression()), !dbg !6958
  store %union.tree_node** %op_p, %union.tree_node*** %op_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op_p.addr, metadata !6959, metadata !DIExpression()), !dbg !6960
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !6961, metadata !DIExpression()), !dbg !6962
  %0 = load %union.tree_node**, %union.tree_node*** %op_p.addr, align 8, !dbg !6963
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6964
  store %union.tree_node* %1, %union.tree_node** %base, align 8, !dbg !6962
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !6965, metadata !DIExpression()), !dbg !6966
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6967
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %2, i64 0), !dbg !6968
  store %union.tree_node* %call, %union.tree_node** %step, align 8, !dbg !6966
  call void @llvm.dbg.declare(metadata %struct.iv** %civ, metadata !6969, metadata !DIExpression()), !dbg !6970
  call void @llvm.dbg.declare(metadata %struct.ifs_ivopts_data* %ifs_ivopts_data, metadata !6971, metadata !DIExpression()), !dbg !6972
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6973
  %call1 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %3), !dbg !6975
  %tobool = icmp ne i8 %call1, 0, !dbg !6975
  br i1 %tobool, label %if.then, label %if.end, !dbg !6976

if.then:                                          ; preds = %entry
  br label %fail, !dbg !6977

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6978
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6978
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6978
  %bf.load = load i64, i64* %5, align 8, !dbg !6978
  %bf.clear = and i64 %bf.load, 65535, !dbg !6978
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6978
  %cmp = icmp eq i32 %bf.cast, 42, !dbg !6980
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6981

if.then3:                                         ; preds = %if.end
  br label %fail, !dbg !6982

if.end4:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6983
  %call5 = call %union.tree_node* @unshare_expr(%union.tree_node* %6), !dbg !6984
  store %union.tree_node* %call5, %union.tree_node** %base, align 8, !dbg !6985
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6986
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6986
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !6986
  %bf.load7 = load i64, i64* %8, align 8, !dbg !6986
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !6986
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !6986
  %cmp10 = icmp eq i32 %bf.cast9, 152, !dbg !6988
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !6989

if.then11:                                        ; preds = %if.end4
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6990, metadata !DIExpression()), !dbg !6992
  %9 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6993
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6993
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6993
  %10 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !6993
  %call13 = call %union.tree_node* @build_pointer_type(%union.tree_node* %10), !dbg !6994
  store %union.tree_node* %call13, %union.tree_node** %type, align 8, !dbg !6992
  call void @llvm.dbg.declare(metadata %union.tree_node** %astep, metadata !6995, metadata !DIExpression()), !dbg !6996
  %11 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6997
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !6997
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6997
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !6997
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6997
  %tobool14 = icmp ne %union.tree_node* %12, null, !dbg !6997
  br i1 %tobool14, label %land.lhs.true, label %if.end36, !dbg !6999

land.lhs.true:                                    ; preds = %if.then11
  %13 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7000
  %exp15 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !7000
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !7000
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 1, !dbg !7000
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !7000
  %base18 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7000
  %15 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7000
  %bf.load19 = load i64, i64* %15, align 8, !dbg !7000
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !7000
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !7000
  %cmp22 = icmp eq i32 %bf.cast21, 141, !dbg !7001
  br i1 %cmp22, label %if.then23, label %if.end36, !dbg !7002

if.then23:                                        ; preds = %land.lhs.true
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7003
  %17 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7005
  %exp24 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !7005
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !7005
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 1, !dbg !7005
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !7005
  %call27 = call %struct.iv* @get_iv(%struct.ivopts_data* %16, %union.tree_node* %18), !dbg !7006
  store %struct.iv* %call27, %struct.iv** %civ, align 8, !dbg !7007
  %19 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7008
  %tobool28 = icmp ne %struct.iv* %19, null, !dbg !7008
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !7010

if.then29:                                        ; preds = %if.then23
  br label %fail, !dbg !7011

if.end30:                                         ; preds = %if.then23
  %20 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7012
  %base31 = getelementptr inbounds %struct.iv, %struct.iv* %20, i32 0, i32 0, !dbg !7013
  %21 = load %union.tree_node*, %union.tree_node** %base31, align 8, !dbg !7013
  %22 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7014
  %exp32 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !7014
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !7014
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 1, !dbg !7014
  store %union.tree_node* %21, %union.tree_node** %arrayidx34, align 8, !dbg !7015
  %23 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7016
  %step35 = getelementptr inbounds %struct.iv, %struct.iv* %23, i32 0, i32 2, !dbg !7017
  %24 = load %union.tree_node*, %union.tree_node** %step35, align 8, !dbg !7017
  store %union.tree_node* %24, %union.tree_node** %step, align 8, !dbg !7018
  br label %if.end36, !dbg !7019

if.end36:                                         ; preds = %if.end30, %land.lhs.true, %if.then11
  %25 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7020
  %exp37 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !7020
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 3, !dbg !7020
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i64 0, i64 2, !dbg !7020
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !7020
  %tobool40 = icmp ne %union.tree_node* %26, null, !dbg !7020
  br i1 %tobool40, label %land.lhs.true41, label %if.end77, !dbg !7022

land.lhs.true41:                                  ; preds = %if.end36
  %27 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7023
  %exp42 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !7023
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 3, !dbg !7023
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i64 0, i64 2, !dbg !7023
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !7023
  %base45 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7023
  %29 = bitcast %struct.tree_base* %base45 to i64*, !dbg !7023
  %bf.load46 = load i64, i64* %29, align 8, !dbg !7023
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !7023
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !7023
  %cmp49 = icmp eq i32 %bf.cast48, 141, !dbg !7024
  br i1 %cmp49, label %if.then50, label %if.end77, !dbg !7025

if.then50:                                        ; preds = %land.lhs.true41
  %30 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7026
  %31 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7028
  %exp51 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !7028
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !7028
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 2, !dbg !7028
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !7028
  %call54 = call %struct.iv* @get_iv(%struct.ivopts_data* %30, %union.tree_node* %32), !dbg !7029
  store %struct.iv* %call54, %struct.iv** %civ, align 8, !dbg !7030
  %33 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7031
  %tobool55 = icmp ne %struct.iv* %33, null, !dbg !7031
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !7033

if.then56:                                        ; preds = %if.then50
  br label %fail, !dbg !7034

if.end57:                                         ; preds = %if.then50
  %34 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7035
  %base58 = getelementptr inbounds %struct.iv, %struct.iv* %34, i32 0, i32 0, !dbg !7036
  %35 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !7036
  %36 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7037
  %exp59 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !7037
  %operands60 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp59, i32 0, i32 3, !dbg !7037
  %arrayidx61 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands60, i64 0, i64 2, !dbg !7037
  store %union.tree_node* %35, %union.tree_node** %arrayidx61, align 8, !dbg !7038
  %37 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7039
  %step62 = getelementptr inbounds %struct.iv, %struct.iv* %37, i32 0, i32 2, !dbg !7040
  %38 = load %union.tree_node*, %union.tree_node** %step62, align 8, !dbg !7040
  store %union.tree_node* %38, %union.tree_node** %astep, align 8, !dbg !7041
  %39 = load %union.tree_node*, %union.tree_node** %astep, align 8, !dbg !7042
  %tobool63 = icmp ne %union.tree_node* %39, null, !dbg !7042
  br i1 %tobool63, label %if.then64, label %if.end76, !dbg !7044

if.then64:                                        ; preds = %if.end57
  %40 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7045
  %exp65 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !7045
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !7045
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 3, !dbg !7045
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !7045
  %tobool68 = icmp ne %union.tree_node* %41, null, !dbg !7045
  br i1 %tobool68, label %if.then69, label %if.end74, !dbg !7048

if.then69:                                        ; preds = %if.then64
  %42 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7049
  %43 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7049
  %exp70 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !7049
  %operands71 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp70, i32 0, i32 3, !dbg !7049
  %arrayidx72 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands71, i64 0, i64 3, !dbg !7049
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx72, align 8, !dbg !7049
  %45 = load %union.tree_node*, %union.tree_node** %astep, align 8, !dbg !7049
  %call73 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %42, %union.tree_node* %44, %union.tree_node* %45), !dbg !7049
  store %union.tree_node* %call73, %union.tree_node** %astep, align 8, !dbg !7050
  br label %if.end74, !dbg !7051

if.end74:                                         ; preds = %if.then69, %if.then64
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7052
  %47 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7052
  %48 = load %union.tree_node*, %union.tree_node** %astep, align 8, !dbg !7052
  %call75 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %48), !dbg !7052
  store %union.tree_node* %call75, %union.tree_node** %step, align 8, !dbg !7053
  br label %if.end76, !dbg !7054

if.end76:                                         ; preds = %if.end74, %if.end57
  br label %if.end77, !dbg !7055

if.end77:                                         ; preds = %if.end76, %land.lhs.true41, %if.end36
  %49 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7056
  %call78 = call i32 @integer_zerop(%union.tree_node* %49), !dbg !7058
  %tobool79 = icmp ne i32 %call78, 0, !dbg !7058
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !7059

if.then80:                                        ; preds = %if.end77
  br label %fail, !dbg !7060

if.end81:                                         ; preds = %if.end77
  %50 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7061
  %51 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7062
  %call82 = call %union.tree_node* @tree_mem_ref_addr(%union.tree_node* %50, %union.tree_node* %51), !dbg !7063
  store %union.tree_node* %call82, %union.tree_node** %base, align 8, !dbg !7064
  br label %if.end142, !dbg !7065

if.else:                                          ; preds = %if.end4
  %52 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7066
  %ivopts_data = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %ifs_ivopts_data, i32 0, i32 0, !dbg !7068
  store %struct.ivopts_data* %52, %struct.ivopts_data** %ivopts_data, align 8, !dbg !7069
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7070
  %stmt83 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %ifs_ivopts_data, i32 0, i32 1, !dbg !7071
  store %union.gimple_statement_d* %53, %union.gimple_statement_d** %stmt83, align 8, !dbg !7072
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7073
  %call84 = call %union.tree_node* @build_int_cst(%union.tree_node* %54, i64 0), !dbg !7074
  %step85 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %ifs_ivopts_data, i32 0, i32 2, !dbg !7075
  store %union.tree_node* %call84, %union.tree_node** %step85, align 8, !dbg !7076
  %55 = bitcast %struct.ifs_ivopts_data* %ifs_ivopts_data to i8*, !dbg !7077
  %call86 = call zeroext i8 @for_each_index(%union.tree_node** %base, i8 (%union.tree_node*, %union.tree_node**, i8*)* @idx_find_step, i8* %55), !dbg !7079
  %tobool87 = icmp ne i8 %call86, 0, !dbg !7079
  br i1 %tobool87, label %lor.lhs.false, label %if.then91, !dbg !7080

lor.lhs.false:                                    ; preds = %if.else
  %step88 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %ifs_ivopts_data, i32 0, i32 2, !dbg !7081
  %56 = load %union.tree_node*, %union.tree_node** %step88, align 8, !dbg !7081
  %call89 = call i32 @integer_zerop(%union.tree_node* %56), !dbg !7082
  %tobool90 = icmp ne i32 %call89, 0, !dbg !7082
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !7083

if.then91:                                        ; preds = %lor.lhs.false, %if.else
  br label %fail, !dbg !7084

if.end92:                                         ; preds = %lor.lhs.false
  %step93 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %ifs_ivopts_data, i32 0, i32 2, !dbg !7085
  %57 = load %union.tree_node*, %union.tree_node** %step93, align 8, !dbg !7085
  store %union.tree_node* %57, %union.tree_node** %step, align 8, !dbg !7086
  %58 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7087
  %base94 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !7087
  %59 = bitcast %struct.tree_base* %base94 to i64*, !dbg !7087
  %bf.load95 = load i64, i64* %59, align 8, !dbg !7087
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !7087
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !7087
  %cmp98 = icmp ne i32 %bf.cast97, 48, !dbg !7087
  br i1 %cmp98, label %cond.false, label %cond.true, !dbg !7087

cond.true:                                        ; preds = %if.end92
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 1669, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7087
  br label %cond.end, !dbg !7087

cond.false:                                       ; preds = %if.end92
  br label %cond.end, !dbg !7087

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7087
  %60 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7088
  %base99 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !7088
  %61 = bitcast %struct.tree_base* %base99 to i64*, !dbg !7088
  %bf.load100 = load i64, i64* %61, align 8, !dbg !7088
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !7088
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !7088
  %cmp103 = icmp ne i32 %bf.cast102, 49, !dbg !7088
  br i1 %cmp103, label %cond.false105, label %cond.true104, !dbg !7088

cond.true104:                                     ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 1670, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7088
  br label %cond.end106, !dbg !7088

cond.false105:                                    ; preds = %cond.end
  br label %cond.end106, !dbg !7088

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond107 = phi i32 [ 0, %cond.true104 ], [ 0, %cond.false105 ], !dbg !7088
  %62 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7089
  %call108 = call zeroext i8 @may_be_nonaddressable_p(%union.tree_node* %62), !dbg !7091
  %tobool109 = icmp ne i8 %call108, 0, !dbg !7091
  br i1 %tobool109, label %if.then110, label %if.end111, !dbg !7092

if.then110:                                       ; preds = %cond.end106
  br label %fail, !dbg !7093

if.end111:                                        ; preds = %cond.end106
  %63 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7094
  %call112 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %63), !dbg !7094
  store %union.tree_node* %call112, %union.tree_node** %base, align 8, !dbg !7095
  %64 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7096
  %base113 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !7096
  %65 = bitcast %struct.tree_base* %base113 to i64*, !dbg !7096
  %bf.load114 = load i64, i64* %65, align 8, !dbg !7096
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !7096
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !7096
  %cmp117 = icmp eq i32 %bf.cast116, 121, !dbg !7098
  br i1 %cmp117, label %if.then118, label %if.end141, !dbg !7099

if.then118:                                       ; preds = %if.end111
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ref, metadata !7100, metadata !DIExpression()), !dbg !7102
  %66 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7103
  %exp119 = bitcast %union.tree_node* %66 to %struct.tree_exp*, !dbg !7103
  %operands120 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp119, i32 0, i32 3, !dbg !7103
  %arrayidx121 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands120, i64 0, i64 0, !dbg !7103
  store %union.tree_node** %arrayidx121, %union.tree_node*** %ref, align 8, !dbg !7102
  br label %while.cond, !dbg !7104

while.cond:                                       ; preds = %while.body, %if.then118
  %67 = load %union.tree_node**, %union.tree_node*** %ref, align 8, !dbg !7105
  %68 = load %union.tree_node*, %union.tree_node** %67, align 8, !dbg !7106
  %call122 = call zeroext i8 @handled_component_p(%union.tree_node* %68), !dbg !7107
  %tobool123 = icmp ne i8 %call122, 0, !dbg !7104
  br i1 %tobool123, label %while.body, label %while.end, !dbg !7104

while.body:                                       ; preds = %while.cond
  %69 = load %union.tree_node**, %union.tree_node*** %ref, align 8, !dbg !7108
  %70 = load %union.tree_node*, %union.tree_node** %69, align 8, !dbg !7108
  %exp124 = bitcast %union.tree_node* %70 to %struct.tree_exp*, !dbg !7108
  %operands125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 3, !dbg !7108
  %arrayidx126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands125, i64 0, i64 0, !dbg !7108
  store %union.tree_node** %arrayidx126, %union.tree_node*** %ref, align 8, !dbg !7109
  br label %while.cond, !dbg !7104, !llvm.loop !7110

while.end:                                        ; preds = %while.cond
  %71 = load %union.tree_node**, %union.tree_node*** %ref, align 8, !dbg !7111
  %72 = load %union.tree_node*, %union.tree_node** %71, align 8, !dbg !7111
  %base127 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !7111
  %73 = bitcast %struct.tree_base* %base127 to i64*, !dbg !7111
  %bf.load128 = load i64, i64* %73, align 8, !dbg !7111
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !7111
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !7111
  %cmp131 = icmp eq i32 %bf.cast130, 47, !dbg !7113
  br i1 %cmp131, label %if.then132, label %if.end140, !dbg !7114

if.then132:                                       ; preds = %while.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !7115, metadata !DIExpression()), !dbg !7117
  %74 = load %union.tree_node**, %union.tree_node*** %ref, align 8, !dbg !7118
  %75 = load %union.tree_node*, %union.tree_node** %74, align 8, !dbg !7118
  %exp133 = bitcast %union.tree_node* %75 to %struct.tree_exp*, !dbg !7118
  %operands134 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp133, i32 0, i32 3, !dbg !7118
  %arrayidx135 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands134, i64 0, i64 0, !dbg !7118
  %76 = load %union.tree_node*, %union.tree_node** %arrayidx135, align 8, !dbg !7118
  %call136 = call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %76), !dbg !7119
  store %union.tree_node* %call136, %union.tree_node** %tem, align 8, !dbg !7117
  %77 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7120
  %tobool137 = icmp ne %union.tree_node* %77, null, !dbg !7120
  br i1 %tobool137, label %if.then138, label %if.end139, !dbg !7122

if.then138:                                       ; preds = %if.then132
  %78 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !7123
  %79 = load %union.tree_node**, %union.tree_node*** %ref, align 8, !dbg !7124
  store %union.tree_node* %78, %union.tree_node** %79, align 8, !dbg !7125
  br label %if.end139, !dbg !7126

if.end139:                                        ; preds = %if.then138, %if.then132
  br label %if.end140, !dbg !7127

if.end140:                                        ; preds = %if.end139, %while.end
  br label %if.end141, !dbg !7128

if.end141:                                        ; preds = %if.end140, %if.end111
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.end81
  %80 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7129
  %81 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7130
  %call143 = call %struct.iv* @alloc_iv(%union.tree_node* %80, %union.tree_node* %81), !dbg !7131
  store %struct.iv* %call143, %struct.iv** %civ, align 8, !dbg !7132
  %82 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7133
  %83 = load %union.tree_node**, %union.tree_node*** %op_p.addr, align 8, !dbg !7134
  %84 = load %struct.iv*, %struct.iv** %civ, align 8, !dbg !7135
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7136
  %call144 = call %struct.iv_use* @record_use(%struct.ivopts_data* %82, %union.tree_node** %83, %struct.iv* %84, %union.gimple_statement_d* %85, i32 1), !dbg !7137
  br label %return, !dbg !7138

fail:                                             ; preds = %if.then110, %if.then91, %if.then80, %if.then56, %if.then29, %if.then3, %if.then
  call void @llvm.dbg.label(metadata !7139), !dbg !7140
  %86 = load %union.tree_node**, %union.tree_node*** %op_p.addr, align 8, !dbg !7141
  %87 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7142
  %88 = bitcast %struct.ivopts_data* %87 to i8*, !dbg !7142
  %call145 = call zeroext i8 @for_each_index(%union.tree_node** %86, i8 (%union.tree_node*, %union.tree_node**, i8*)* @idx_record_use, i8* %88), !dbg !7143
  br label %return, !dbg !7144

return:                                           ; preds = %fail, %if.end142
  ret void, !dbg !7144
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !7145 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7149, metadata !DIExpression()), !dbg !7150
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !7151, metadata !DIExpression()), !dbg !7152
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7153, metadata !DIExpression()), !dbg !7154
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !7155, metadata !DIExpression()), !dbg !7156
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7157
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !7158
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !7156
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !7159, metadata !DIExpression()), !dbg !7160
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7161
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !7162
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7163
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !7164
  store i8 0, i8* %done, align 8, !dbg !7165
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7166
  %and = and i32 %3, 5, !dbg !7166
  %cmp = icmp ne i32 %and, 0, !dbg !7166
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7166

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7166
  br label %cond.end, !dbg !7166

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7166

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7166
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !7167
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7168
  %conv = zext i8 %call1 to i32, !dbg !7168
  %tobool = icmp ne i32 %conv, 0, !dbg !7168
  %5 = zext i1 %tobool to i64, !dbg !7168
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !7168
  store i32 %cond2, i32* %comp, align 4, !dbg !7169
  %6 = load i32, i32* %flags.addr, align 4, !dbg !7170
  %7 = load i32, i32* %comp, align 4, !dbg !7172
  %and3 = and i32 %6, %7, !dbg !7173
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7174
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7175

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7176
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !7178
  store i8 1, i8* %done6, align 8, !dbg !7179
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7180
  br label %return, !dbg !7180

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7181
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7182
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !7183
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7184
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7185
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !7186
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7187
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !7188
  store i32 %call7, i32* %num_phi, align 4, !dbg !7189
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7190
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !7191
  store i32 2, i32* %iter_type, align 4, !dbg !7192
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7193
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !7194
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7195
  br label %return, !dbg !7195

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7196
  ret %struct.ssa_use_operand_d* %15, !dbg !7196
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7197 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7198, metadata !DIExpression()), !dbg !7199
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7200, metadata !DIExpression()), !dbg !7201
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7202, metadata !DIExpression()), !dbg !7203
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7204
  %and = and i32 %0, 10, !dbg !7204
  %cmp = icmp eq i32 %and, 0, !dbg !7204
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !7204

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7204
  %and1 = and i32 %1, 1, !dbg !7204
  %tobool = icmp ne i32 %and1, 0, !dbg !7204
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7204

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7204
  br label %cond.end, !dbg !7204

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7204

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7204
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7205
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7206
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7207
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !7208
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7209
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !7210
  store i32 2, i32* %iter_type, align 4, !dbg !7211
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7212
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !7213
  ret %struct.ssa_use_operand_d* %call, !dbg !7214
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7215 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7220, metadata !DIExpression()), !dbg !7221
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7222
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !7223
  %1 = load i8, i8* %done, align 8, !dbg !7223
  ret i8 %1, !dbg !7224
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7225 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7228, metadata !DIExpression()), !dbg !7229
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7230, metadata !DIExpression()), !dbg !7231
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7232
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !7234
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7234
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !7232
  br i1 %tobool, label %if.then, label %if.end, !dbg !7235

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7236
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !7236
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !7236
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !7236
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7238
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7239
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !7240
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !7240
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !7241
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !7241
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7242
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !7243
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !7244
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7245
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7246
  br label %return, !dbg !7246

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7247
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !7249
  %10 = load i32, i32* %phi_i, align 8, !dbg !7249
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7250
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !7251
  %12 = load i32, i32* %num_phi, align 4, !dbg !7251
  %cmp = icmp slt i32 %10, %12, !dbg !7252
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7253

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7254
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !7254
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7254
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7254
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !7254
  %16 = load i32, i32* %phi_i5, align 8, !dbg !7254
  %inc = add nsw i32 %16, 1, !dbg !7254
  store i32 %inc, i32* %phi_i5, align 8, !dbg !7254
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !7254
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7256
  br label %return, !dbg !7256

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7257
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !7258
  store i8 1, i8* %done, align 8, !dbg !7259
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7260
  br label %return, !dbg !7260

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7261
  ret %struct.ssa_use_operand_d* %18, !dbg !7261
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @extract_cond_operands(%struct.ivopts_data* %data, %union.gimple_statement_d* %stmt, %union.tree_node*** %control_var, %union.tree_node*** %bound, %struct.iv** %iv_var, %struct.iv** %iv_bound) #0 !dbg !2611 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %control_var.addr = alloca %union.tree_node***, align 8
  %bound.addr = alloca %union.tree_node***, align 8
  %iv_var.addr = alloca %struct.iv**, align 8
  %iv_bound.addr = alloca %struct.iv**, align 8
  %op0 = alloca %union.tree_node**, align 8
  %op1 = alloca %union.tree_node**, align 8
  %tmp_op = alloca %union.tree_node**, align 8
  %iv0 = alloca %struct.iv*, align 8
  %iv1 = alloca %struct.iv*, align 8
  %tmp_iv = alloca %struct.iv*, align 8
  %ret = alloca i8, align 1
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !7262, metadata !DIExpression()), !dbg !7263
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7264, metadata !DIExpression()), !dbg !7265
  store %union.tree_node*** %control_var, %union.tree_node**** %control_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node**** %control_var.addr, metadata !7266, metadata !DIExpression()), !dbg !7267
  store %union.tree_node*** %bound, %union.tree_node**** %bound.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node**** %bound.addr, metadata !7268, metadata !DIExpression()), !dbg !7269
  store %struct.iv** %iv_var, %struct.iv*** %iv_var.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv*** %iv_var.addr, metadata !7270, metadata !DIExpression()), !dbg !7271
  store %struct.iv** %iv_bound, %struct.iv*** %iv_bound.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv*** %iv_bound.addr, metadata !7272, metadata !DIExpression()), !dbg !7273
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op0, metadata !7274, metadata !DIExpression()), !dbg !7275
  store %union.tree_node** @extract_cond_operands.zero, %union.tree_node*** %op0, align 8, !dbg !7275
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op1, metadata !7276, metadata !DIExpression()), !dbg !7277
  store %union.tree_node** @extract_cond_operands.zero, %union.tree_node*** %op1, align 8, !dbg !7277
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tmp_op, metadata !7278, metadata !DIExpression()), !dbg !7279
  call void @llvm.dbg.declare(metadata %struct.iv** %iv0, metadata !7280, metadata !DIExpression()), !dbg !7281
  store %struct.iv* @extract_cond_operands.const_iv, %struct.iv** %iv0, align 8, !dbg !7281
  call void @llvm.dbg.declare(metadata %struct.iv** %iv1, metadata !7282, metadata !DIExpression()), !dbg !7283
  store %struct.iv* @extract_cond_operands.const_iv, %struct.iv** %iv1, align 8, !dbg !7283
  call void @llvm.dbg.declare(metadata %struct.iv** %tmp_iv, metadata !7284, metadata !DIExpression()), !dbg !7285
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !7286, metadata !DIExpression()), !dbg !7287
  store i8 0, i8* %ret, align 1, !dbg !7287
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7288
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7290
  %cmp = icmp eq i32 %call, 1, !dbg !7291
  br i1 %cmp, label %if.then, label %if.else, !dbg !7292

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7293
  %call1 = call %union.tree_node** @gimple_cond_lhs_ptr(%union.gimple_statement_d* %1), !dbg !7295
  store %union.tree_node** %call1, %union.tree_node*** %op0, align 8, !dbg !7296
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7297
  %call2 = call %union.tree_node** @gimple_cond_rhs_ptr(%union.gimple_statement_d* %2), !dbg !7298
  store %union.tree_node** %call2, %union.tree_node*** %op1, align 8, !dbg !7299
  br label %if.end, !dbg !7300

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7301
  %call3 = call %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %3), !dbg !7303
  store %union.tree_node** %call3, %union.tree_node*** %op0, align 8, !dbg !7304
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7305
  %call4 = call %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %4), !dbg !7306
  store %union.tree_node** %call4, %union.tree_node*** %op1, align 8, !dbg !7307
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7308
  store %union.tree_node* %5, %union.tree_node** @extract_cond_operands.zero, align 8, !dbg !7309
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !7310
  store %union.tree_node* %6, %union.tree_node** getelementptr inbounds (%struct.iv, %struct.iv* @extract_cond_operands.const_iv, i32 0, i32 2), align 8, !dbg !7311
  %7 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !7312
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !7312
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7312
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7312
  %bf.load = load i64, i64* %9, align 8, !dbg !7312
  %bf.clear = and i64 %bf.load, 65535, !dbg !7312
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7312
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !7314
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !7315

if.then6:                                         ; preds = %if.end
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7316
  %11 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !7317
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !7318
  %call7 = call %struct.iv* @get_iv(%struct.ivopts_data* %10, %union.tree_node* %12), !dbg !7319
  store %struct.iv* %call7, %struct.iv** %iv0, align 8, !dbg !7320
  br label %if.end8, !dbg !7321

if.end8:                                          ; preds = %if.then6, %if.end
  %13 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !7322
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !7322
  %base9 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7322
  %15 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7322
  %bf.load10 = load i64, i64* %15, align 8, !dbg !7322
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !7322
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7322
  %cmp13 = icmp eq i32 %bf.cast12, 141, !dbg !7324
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !7325

if.then14:                                        ; preds = %if.end8
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7326
  %17 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !7327
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !7328
  %call15 = call %struct.iv* @get_iv(%struct.ivopts_data* %16, %union.tree_node* %18), !dbg !7329
  store %struct.iv* %call15, %struct.iv** %iv1, align 8, !dbg !7330
  br label %if.end16, !dbg !7331

if.end16:                                         ; preds = %if.then14, %if.end8
  %19 = load %struct.iv*, %struct.iv** %iv0, align 8, !dbg !7332
  %tobool = icmp ne %struct.iv* %19, null, !dbg !7332
  br i1 %tobool, label %lor.lhs.false, label %if.then18, !dbg !7334

lor.lhs.false:                                    ; preds = %if.end16
  %20 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !7335
  %tobool17 = icmp ne %struct.iv* %20, null, !dbg !7335
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !7336

if.then18:                                        ; preds = %lor.lhs.false, %if.end16
  br label %end, !dbg !7337

if.end19:                                         ; preds = %lor.lhs.false
  %21 = load %struct.iv*, %struct.iv** %iv0, align 8, !dbg !7338
  %step = getelementptr inbounds %struct.iv, %struct.iv* %21, i32 0, i32 2, !dbg !7340
  %22 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7340
  %call20 = call i32 @integer_zerop(%union.tree_node* %22), !dbg !7341
  %tobool21 = icmp ne i32 %call20, 0, !dbg !7341
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !7342

if.then22:                                        ; preds = %if.end19
  %23 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !7343
  store %union.tree_node** %23, %union.tree_node*** %tmp_op, align 8, !dbg !7345
  %24 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !7346
  store %union.tree_node** %24, %union.tree_node*** %op0, align 8, !dbg !7347
  %25 = load %union.tree_node**, %union.tree_node*** %tmp_op, align 8, !dbg !7348
  store %union.tree_node** %25, %union.tree_node*** %op1, align 8, !dbg !7349
  %26 = load %struct.iv*, %struct.iv** %iv0, align 8, !dbg !7350
  store %struct.iv* %26, %struct.iv** %tmp_iv, align 8, !dbg !7351
  %27 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !7352
  store %struct.iv* %27, %struct.iv** %iv0, align 8, !dbg !7353
  %28 = load %struct.iv*, %struct.iv** %tmp_iv, align 8, !dbg !7354
  store %struct.iv* %28, %struct.iv** %iv1, align 8, !dbg !7355
  br label %if.end23, !dbg !7356

if.end23:                                         ; preds = %if.then22, %if.end19
  %29 = load %struct.iv*, %struct.iv** %iv0, align 8, !dbg !7357
  %step24 = getelementptr inbounds %struct.iv, %struct.iv* %29, i32 0, i32 2, !dbg !7358
  %30 = load %union.tree_node*, %union.tree_node** %step24, align 8, !dbg !7358
  %call25 = call i32 @integer_zerop(%union.tree_node* %30), !dbg !7359
  %tobool26 = icmp ne i32 %call25, 0, !dbg !7359
  br i1 %tobool26, label %land.end, label %land.rhs, !dbg !7360

land.rhs:                                         ; preds = %if.end23
  %31 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !7361
  %step27 = getelementptr inbounds %struct.iv, %struct.iv* %31, i32 0, i32 2, !dbg !7362
  %32 = load %union.tree_node*, %union.tree_node** %step27, align 8, !dbg !7362
  %call28 = call i32 @integer_zerop(%union.tree_node* %32), !dbg !7363
  %tobool29 = icmp ne i32 %call28, 0, !dbg !7360
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end23
  %33 = phi i1 [ false, %if.end23 ], [ %tobool29, %land.rhs ], !dbg !7364
  %land.ext = zext i1 %33 to i32, !dbg !7360
  %conv = trunc i32 %land.ext to i8, !dbg !7365
  store i8 %conv, i8* %ret, align 1, !dbg !7366
  br label %end, !dbg !7367

end:                                              ; preds = %land.end, %if.then18
  call void @llvm.dbg.label(metadata !7368), !dbg !7369
  %34 = load %union.tree_node***, %union.tree_node**** %control_var.addr, align 8, !dbg !7370
  %tobool30 = icmp ne %union.tree_node*** %34, null, !dbg !7370
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !7372

if.then31:                                        ; preds = %end
  %35 = load %union.tree_node**, %union.tree_node*** %op0, align 8, !dbg !7373
  %36 = load %union.tree_node***, %union.tree_node**** %control_var.addr, align 8, !dbg !7374
  store %union.tree_node** %35, %union.tree_node*** %36, align 8, !dbg !7375
  br label %if.end32, !dbg !7376

if.end32:                                         ; preds = %if.then31, %end
  %37 = load %struct.iv**, %struct.iv*** %iv_var.addr, align 8, !dbg !7377
  %tobool33 = icmp ne %struct.iv** %37, null, !dbg !7377
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !7379

if.then34:                                        ; preds = %if.end32
  %38 = load %struct.iv*, %struct.iv** %iv0, align 8, !dbg !7380
  %39 = load %struct.iv**, %struct.iv*** %iv_var.addr, align 8, !dbg !7381
  store %struct.iv* %38, %struct.iv** %39, align 8, !dbg !7382
  br label %if.end35, !dbg !7383

if.end35:                                         ; preds = %if.then34, %if.end32
  %40 = load %union.tree_node***, %union.tree_node**** %bound.addr, align 8, !dbg !7384
  %tobool36 = icmp ne %union.tree_node*** %40, null, !dbg !7384
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !7386

if.then37:                                        ; preds = %if.end35
  %41 = load %union.tree_node**, %union.tree_node*** %op1, align 8, !dbg !7387
  %42 = load %union.tree_node***, %union.tree_node**** %bound.addr, align 8, !dbg !7388
  store %union.tree_node** %41, %union.tree_node*** %42, align 8, !dbg !7389
  br label %if.end38, !dbg !7390

if.end38:                                         ; preds = %if.then37, %if.end35
  %43 = load %struct.iv**, %struct.iv*** %iv_bound.addr, align 8, !dbg !7391
  %tobool39 = icmp ne %struct.iv** %43, null, !dbg !7391
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !7393

if.then40:                                        ; preds = %if.end38
  %44 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !7394
  %45 = load %struct.iv**, %struct.iv*** %iv_bound.addr, align 8, !dbg !7395
  store %struct.iv* %44, %struct.iv** %45, align 8, !dbg !7396
  br label %if.end41, !dbg !7397

if.end41:                                         ; preds = %if.then40, %if.end38
  %46 = load i8, i8* %ret, align 1, !dbg !7398
  ret i8 %46, !dbg !7399
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_cond_lhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !7400 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7401, metadata !DIExpression()), !dbg !7402
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7403
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 0), !dbg !7404
  ret %union.tree_node** %call, !dbg !7405
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_cond_rhs_ptr(%union.gimple_statement_d* %gs) #0 !dbg !7406 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7407, metadata !DIExpression()), !dbg !7408
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7409
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !7410
  ret %union.tree_node** %call, !dbg !7411
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %gs) #0 !dbg !7412 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7413, metadata !DIExpression()), !dbg !7414
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7415
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 2), !dbg !7416
  ret %union.tree_node** %call, !dbg !7417
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7418 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7421, metadata !DIExpression()), !dbg !7422
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7423, metadata !DIExpression()), !dbg !7424
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7425
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7427
  %tobool = icmp ne i8 %call, 0, !dbg !7427
  br i1 %tobool, label %if.then, label %if.else, !dbg !7428

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7429
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7431
  %2 = load i32, i32* %i.addr, align 4, !dbg !7432
  %idx.ext = zext i32 %2 to i64, !dbg !7433
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !7433
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !7434
  br label %return, !dbg !7434

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !7435
  br label %return, !dbg !7435

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !7436
  ret %union.tree_node** %3, !dbg !7436
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !7437 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7438, metadata !DIExpression()), !dbg !7439
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7440, metadata !DIExpression()), !dbg !7441
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7442
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7443
  store i32 %call, i32* %code, align 4, !dbg !7441
  %1 = load i32, i32* %code, align 4, !dbg !7444
  %cmp = icmp eq i32 %1, 6, !dbg !7446
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7447

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7448
  %cmp1 = icmp eq i32 %2, 1, !dbg !7449
  br i1 %cmp1, label %if.then, label %if.else, !dbg !7450

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7451
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7452
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7453
  %bf.load = load i32, i32* %4, align 8, !dbg !7453
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7453
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !7454
  br label %return, !dbg !7454

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !7455
  %cmp2 = icmp eq i32 %5, 8, !dbg !7457
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !7458

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !7459
  br label %return, !dbg !7459

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7460
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7461
  br label %return, !dbg !7461

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7462
  ret i32 %6, !dbg !7462
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !7463 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7466
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7467
  ret %union.tree_node* %call, !dbg !7468
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !7469 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7470, metadata !DIExpression()), !dbg !7471
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7472
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7474
  %tobool = icmp ne i8 %call, 0, !dbg !7474
  br i1 %tobool, label %if.then, label %if.else, !dbg !7475

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7476
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !7477
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7478
  %bf.load = load i32, i32* %2, align 8, !dbg !7478
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !7478
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7478
  %conv = trunc i32 %bf.clear to i8, !dbg !7476
  store i8 %conv, i8* %retval, align 1, !dbg !7479
  br label %return, !dbg !7479

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7480
  br label %return, !dbg !7480

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !7481
  ret i8 %3, !dbg !7481
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_mem_ref_addr(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @idx_find_step(%union.tree_node* %base, %union.tree_node** %idx, i8* %data) #0 !dbg !7482 {
entry:
  %retval = alloca i8, align 1
  %base.addr = alloca %union.tree_node*, align 8
  %idx.addr = alloca %union.tree_node**, align 8
  %data.addr = alloca i8*, align 8
  %dta = alloca %struct.ifs_ivopts_data*, align 8
  %iv = alloca %struct.iv*, align 8
  %step = alloca %union.tree_node*, align 8
  %iv_base = alloca %union.tree_node*, align 8
  %iv_step = alloca %union.tree_node*, align 8
  %lbound = alloca %union.tree_node*, align 8
  %off = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !7483, metadata !DIExpression()), !dbg !7484
  store %union.tree_node** %idx, %union.tree_node*** %idx.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %idx.addr, metadata !7485, metadata !DIExpression()), !dbg !7486
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7487, metadata !DIExpression()), !dbg !7488
  call void @llvm.dbg.declare(metadata %struct.ifs_ivopts_data** %dta, metadata !7489, metadata !DIExpression()), !dbg !7490
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7491
  %1 = bitcast i8* %0 to %struct.ifs_ivopts_data*, !dbg !7492
  store %struct.ifs_ivopts_data* %1, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7490
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !7493, metadata !DIExpression()), !dbg !7494
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !7495, metadata !DIExpression()), !dbg !7496
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv_base, metadata !7497, metadata !DIExpression()), !dbg !7498
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv_step, metadata !7499, metadata !DIExpression()), !dbg !7500
  call void @llvm.dbg.declare(metadata %union.tree_node** %lbound, metadata !7501, metadata !DIExpression()), !dbg !7502
  call void @llvm.dbg.declare(metadata %union.tree_node** %off, metadata !7503, metadata !DIExpression()), !dbg !7504
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !7505, metadata !DIExpression()), !dbg !7506
  %2 = load %struct.ifs_ivopts_data*, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7507
  %ivopts_data = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %2, i32 0, i32 0, !dbg !7508
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %ivopts_data, align 8, !dbg !7508
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %3, i32 0, i32 0, !dbg !7509
  %4 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !7509
  store %struct.loop* %4, %struct.loop** %loop, align 8, !dbg !7506
  %5 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7510
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7510
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7510
  %bf.load = load i64, i64* %6, align 8, !dbg !7510
  %bf.clear = and i64 %bf.load, 65535, !dbg !7510
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7510
  %cmp = icmp eq i32 %bf.cast, 49, !dbg !7512
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7513

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7514
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7514
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7514
  %bf.load3 = load i64, i64* %8, align 8, !dbg !7514
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7514
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7514
  %cmp6 = icmp eq i32 %bf.cast5, 48, !dbg !7515
  br i1 %cmp6, label %if.then, label %if.end, !dbg !7516

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7517
  br label %return, !dbg !7517

if.end:                                           ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7518
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7518
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !7518
  %bf.load8 = load i64, i64* %10, align 8, !dbg !7518
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7518
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7518
  %cmp11 = icmp eq i32 %bf.cast10, 41, !dbg !7520
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !7521

if.then12:                                        ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7522
  %call = call %union.tree_node* @component_ref_field_offset(%union.tree_node* %11), !dbg !7524
  store %union.tree_node* %call, %union.tree_node** %off, align 8, !dbg !7525
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7526
  %13 = load %union.tree_node*, %union.tree_node** %off, align 8, !dbg !7527
  %call13 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %12, %union.tree_node* %13), !dbg !7528
  store i8 %call13, i8* %retval, align 1, !dbg !7529
  br label %return, !dbg !7529

if.end14:                                         ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7530
  %base15 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7530
  %15 = bitcast %struct.tree_base* %base15 to i64*, !dbg !7530
  %bf.load16 = load i64, i64* %15, align 8, !dbg !7530
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !7530
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !7530
  %cmp19 = icmp eq i32 %bf.cast18, 45, !dbg !7532
  br i1 %cmp19, label %if.then26, label %lor.lhs.false20, !dbg !7533

lor.lhs.false20:                                  ; preds = %if.end14
  %16 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7534
  %base21 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7534
  %17 = bitcast %struct.tree_base* %base21 to i64*, !dbg !7534
  %bf.load22 = load i64, i64* %17, align 8, !dbg !7534
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !7534
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !7534
  %cmp25 = icmp eq i32 %bf.cast24, 46, !dbg !7535
  br i1 %cmp25, label %if.then26, label %if.end45, !dbg !7536

if.then26:                                        ; preds = %lor.lhs.false20, %if.end14
  %18 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7537
  %base27 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !7537
  %19 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7537
  %bf.load28 = load i64, i64* %19, align 8, !dbg !7537
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7537
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7537
  %cmp31 = icmp eq i32 %bf.cast30, 46, !dbg !7540
  br i1 %cmp31, label %land.lhs.true, label %if.end35, !dbg !7541

land.lhs.true:                                    ; preds = %if.then26
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7542
  %21 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7543
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7543
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7543
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7543
  %type32 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !7543
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 2, !dbg !7543
  %23 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7543
  %call33 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %20, %union.tree_node* %23), !dbg !7544
  %tobool = icmp ne i8 %call33, 0, !dbg !7544
  br i1 %tobool, label %if.end35, label %if.then34, !dbg !7545

if.then34:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7546
  br label %return, !dbg !7546

if.end35:                                         ; preds = %land.lhs.true, %if.then26
  %24 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7547
  %call36 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %24), !dbg !7548
  store %union.tree_node* %call36, %union.tree_node** %step, align 8, !dbg !7549
  %25 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7550
  %call37 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %25), !dbg !7551
  store %union.tree_node* %call37, %union.tree_node** %lbound, align 8, !dbg !7552
  %26 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7553
  %27 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7555
  %call38 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %26, %union.tree_node* %27), !dbg !7556
  %tobool39 = icmp ne i8 %call38, 0, !dbg !7556
  br i1 %tobool39, label %lor.lhs.false40, label %if.then43, !dbg !7557

lor.lhs.false40:                                  ; preds = %if.end35
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7558
  %29 = load %union.tree_node*, %union.tree_node** %lbound, align 8, !dbg !7559
  %call41 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %28, %union.tree_node* %29), !dbg !7560
  %tobool42 = icmp ne i8 %call41, 0, !dbg !7560
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !7561

if.then43:                                        ; preds = %lor.lhs.false40, %if.end35
  store i8 0, i8* %retval, align 1, !dbg !7562
  br label %return, !dbg !7562

if.end44:                                         ; preds = %lor.lhs.false40
  br label %if.end45, !dbg !7563

if.end45:                                         ; preds = %if.end44, %lor.lhs.false20
  %30 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !7564
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !7564
  %base46 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !7564
  %32 = bitcast %struct.tree_base* %base46 to i64*, !dbg !7564
  %bf.load47 = load i64, i64* %32, align 8, !dbg !7564
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !7564
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !7564
  %cmp50 = icmp ne i32 %bf.cast49, 141, !dbg !7566
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !7567

if.then51:                                        ; preds = %if.end45
  store i8 1, i8* %retval, align 1, !dbg !7568
  br label %return, !dbg !7568

if.end52:                                         ; preds = %if.end45
  %33 = load %struct.ifs_ivopts_data*, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7569
  %ivopts_data53 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %33, i32 0, i32 0, !dbg !7570
  %34 = load %struct.ivopts_data*, %struct.ivopts_data** %ivopts_data53, align 8, !dbg !7570
  %35 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !7571
  %36 = load %union.tree_node*, %union.tree_node** %35, align 8, !dbg !7572
  %call54 = call %struct.iv* @get_iv(%struct.ivopts_data* %34, %union.tree_node* %36), !dbg !7573
  store %struct.iv* %call54, %struct.iv** %iv, align 8, !dbg !7574
  %37 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7575
  %tobool55 = icmp ne %struct.iv* %37, null, !dbg !7575
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !7577

if.then56:                                        ; preds = %if.end52
  store i8 0, i8* %retval, align 1, !dbg !7578
  br label %return, !dbg !7578

if.end57:                                         ; preds = %if.end52
  %38 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7579
  %base58 = getelementptr inbounds %struct.iv, %struct.iv* %38, i32 0, i32 0, !dbg !7580
  %39 = load %union.tree_node*, %union.tree_node** %base58, align 8, !dbg !7580
  %40 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !7581
  store %union.tree_node* %39, %union.tree_node** %40, align 8, !dbg !7582
  %41 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7583
  %step59 = getelementptr inbounds %struct.iv, %struct.iv* %41, i32 0, i32 2, !dbg !7585
  %42 = load %union.tree_node*, %union.tree_node** %step59, align 8, !dbg !7585
  %call60 = call i32 @integer_zerop(%union.tree_node* %42), !dbg !7586
  %tobool61 = icmp ne i32 %call60, 0, !dbg !7586
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !7587

if.then62:                                        ; preds = %if.end57
  store i8 1, i8* %retval, align 1, !dbg !7588
  br label %return, !dbg !7588

if.end63:                                         ; preds = %if.end57
  %43 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7589
  %base64 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !7589
  %44 = bitcast %struct.tree_base* %base64 to i64*, !dbg !7589
  %bf.load65 = load i64, i64* %44, align 8, !dbg !7589
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !7589
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !7589
  %cmp68 = icmp eq i32 %bf.cast67, 45, !dbg !7591
  br i1 %cmp68, label %if.then75, label %lor.lhs.false69, !dbg !7592

lor.lhs.false69:                                  ; preds = %if.end63
  %45 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7593
  %base70 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !7593
  %46 = bitcast %struct.tree_base* %base70 to i64*, !dbg !7593
  %bf.load71 = load i64, i64* %46, align 8, !dbg !7593
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !7593
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !7593
  %cmp74 = icmp eq i32 %bf.cast73, 46, !dbg !7594
  br i1 %cmp74, label %if.then75, label %if.else, !dbg !7595

if.then75:                                        ; preds = %lor.lhs.false69, %if.end63
  %47 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7596
  %call76 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %47), !dbg !7598
  store %union.tree_node* %call76, %union.tree_node** %step, align 8, !dbg !7599
  %48 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7600
  %base77 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !7600
  %49 = bitcast %struct.tree_base* %base77 to i64*, !dbg !7600
  %bf.load78 = load i64, i64* %49, align 8, !dbg !7600
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !7600
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !7600
  %cmp81 = icmp ne i32 %bf.cast80, 23, !dbg !7602
  br i1 %cmp81, label %if.then82, label %if.end83, !dbg !7603

if.then82:                                        ; preds = %if.then75
  store i8 0, i8* %retval, align 1, !dbg !7604
  br label %return, !dbg !7604

if.end83:                                         ; preds = %if.then75
  br label %if.end85, !dbg !7605

if.else:                                          ; preds = %lor.lhs.false69
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7606
  %call84 = call %union.tree_node* @build_int_cst(%union.tree_node* %50, i64 1), !dbg !7607
  store %union.tree_node* %call84, %union.tree_node** %step, align 8, !dbg !7608
  br label %if.end85

if.end85:                                         ; preds = %if.else, %if.end83
  %51 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7609
  %base86 = getelementptr inbounds %struct.iv, %struct.iv* %51, i32 0, i32 0, !dbg !7610
  %52 = load %union.tree_node*, %union.tree_node** %base86, align 8, !dbg !7610
  store %union.tree_node* %52, %union.tree_node** %iv_base, align 8, !dbg !7611
  %53 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7612
  %step87 = getelementptr inbounds %struct.iv, %struct.iv* %53, i32 0, i32 2, !dbg !7613
  %54 = load %union.tree_node*, %union.tree_node** %step87, align 8, !dbg !7613
  store %union.tree_node* %54, %union.tree_node** %iv_step, align 8, !dbg !7614
  %55 = load %struct.ifs_ivopts_data*, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7615
  %ivopts_data88 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %55, i32 0, i32 0, !dbg !7617
  %56 = load %struct.ivopts_data*, %struct.ivopts_data** %ivopts_data88, align 8, !dbg !7617
  %current_loop89 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %56, i32 0, i32 0, !dbg !7618
  %57 = load %struct.loop*, %struct.loop** %current_loop89, align 8, !dbg !7618
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7619
  %59 = load %struct.ifs_ivopts_data*, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7620
  %stmt = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %59, i32 0, i32 1, !dbg !7621
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7621
  %call90 = call zeroext i8 @convert_affine_scev(%struct.loop* %57, %union.tree_node* %58, %union.tree_node** %iv_base, %union.tree_node** %iv_step, %union.gimple_statement_d* %60, i8 zeroext 0), !dbg !7622
  %tobool91 = icmp ne i8 %call90, 0, !dbg !7622
  br i1 %tobool91, label %if.end93, label %if.then92, !dbg !7623

if.then92:                                        ; preds = %if.end85
  store i8 0, i8* %retval, align 1, !dbg !7624
  br label %return, !dbg !7624

if.end93:                                         ; preds = %if.end85
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7626
  %62 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7626
  %63 = load %union.tree_node*, %union.tree_node** %iv_step, align 8, !dbg !7626
  %call94 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63), !dbg !7626
  store %union.tree_node* %call94, %union.tree_node** %step, align 8, !dbg !7627
  %64 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7628
  %65 = load %struct.ifs_ivopts_data*, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7628
  %step95 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %65, i32 0, i32 2, !dbg !7628
  %66 = load %union.tree_node*, %union.tree_node** %step95, align 8, !dbg !7628
  %67 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7628
  %call96 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %64, %union.tree_node* %66, %union.tree_node* %67), !dbg !7628
  %68 = load %struct.ifs_ivopts_data*, %struct.ifs_ivopts_data** %dta, align 8, !dbg !7629
  %step97 = getelementptr inbounds %struct.ifs_ivopts_data, %struct.ifs_ivopts_data* %68, i32 0, i32 2, !dbg !7630
  store %union.tree_node* %call96, %union.tree_node** %step97, align 8, !dbg !7631
  store i8 1, i8* %retval, align 1, !dbg !7632
  br label %return, !dbg !7632

return:                                           ; preds = %if.end93, %if.then92, %if.then82, %if.then62, %if.then56, %if.then51, %if.then43, %if.then34, %if.then12, %if.then
  %69 = load i8, i8* %retval, align 1, !dbg !7633
  ret i8 %69, !dbg !7633
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_be_nonaddressable_p(%union.tree_node* %expr) #0 !dbg !7634 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7635, metadata !DIExpression()), !dbg !7636
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7637
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7637
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7637
  %bf.load = load i64, i64* %1, align 8, !dbg !7637
  %bf.clear = and i64 %bf.load, 65535, !dbg !7637
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7637
  switch i32 %bf.cast, label %sw.default [
    i32 152, label %sw.bb
    i32 41, label %sw.bb1
    i32 118, label %sw.bb10
    i32 45, label %sw.bb22
    i32 46, label %sw.bb22
    i32 116, label %sw.bb27
    i32 113, label %sw.bb27
  ], !dbg !7638

sw.bb:                                            ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7639
  br label %return, !dbg !7639

sw.bb1:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7641
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !7641
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7641
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7641
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7641
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !7641
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7641
  %4 = bitcast i40* %decl_flag_2 to i64*, !dbg !7641
  %bf.load2 = load i64, i64* %4, align 8, !dbg !7641
  %bf.lshr = lshr i64 %bf.load2, 26, !dbg !7641
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !7641
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7641
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !7641
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !7642

lor.rhs:                                          ; preds = %sw.bb1
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7643
  %exp5 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !7643
  %operands6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp5, i32 0, i32 3, !dbg !7643
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands6, i64 0, i64 0, !dbg !7643
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !7643
  %call = call zeroext i8 @may_be_nonaddressable_p(%union.tree_node* %6), !dbg !7644
  %conv = zext i8 %call to i32, !dbg !7644
  %tobool8 = icmp ne i32 %conv, 0, !dbg !7642
  br label %lor.end, !dbg !7642

lor.end:                                          ; preds = %lor.rhs, %sw.bb1
  %7 = phi i1 [ true, %sw.bb1 ], [ %tobool8, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !7642
  %conv9 = trunc i32 %lor.ext to i8, !dbg !7641
  store i8 %conv9, i8* %retval, align 1, !dbg !7645
  br label %return, !dbg !7645

sw.bb10:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7646
  %exp11 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !7646
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !7646
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !7646
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !7646
  %call14 = call zeroext i8 @is_gimple_reg(%union.tree_node* %9), !dbg !7648
  %conv15 = zext i8 %call14 to i32, !dbg !7648
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !7648
  br i1 %tobool16, label %if.then, label %lor.lhs.false, !dbg !7649

lor.lhs.false:                                    ; preds = %sw.bb10
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7650
  %exp17 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !7650
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !7650
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !7650
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !7650
  %call20 = call zeroext i8 @is_gimple_addressable(%union.tree_node* %11), !dbg !7651
  %tobool21 = icmp ne i8 %call20, 0, !dbg !7651
  br i1 %tobool21, label %if.end, label %if.then, !dbg !7652

if.then:                                          ; preds = %lor.lhs.false, %sw.bb10
  store i8 1, i8* %retval, align 1, !dbg !7653
  br label %return, !dbg !7653

if.end:                                           ; preds = %lor.lhs.false
  br label %sw.bb22, !dbg !7654

sw.bb22:                                          ; preds = %entry, %entry, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7655
  %exp23 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !7655
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !7655
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !7655
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !7655
  %call26 = call zeroext i8 @may_be_nonaddressable_p(%union.tree_node* %13), !dbg !7656
  store i8 %call26, i8* %retval, align 1, !dbg !7657
  br label %return, !dbg !7657

sw.bb27:                                          ; preds = %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7658
  br label %return, !dbg !7658

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7659

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !7660
  br label %return, !dbg !7660

return:                                           ; preds = %sw.epilog, %sw.bb27, %sw.bb22, %if.then, %lor.end, %sw.bb
  %14 = load i8, i8* %retval, align 1, !dbg !7661
  ret i8 %14, !dbg !7661
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !7662 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7665, metadata !DIExpression()), !dbg !7666
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7667
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7667
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7667
  %bf.load = load i64, i64* %1, align 8, !dbg !7667
  %bf.clear = and i64 %bf.load, 65535, !dbg !7667
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7667
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !7668

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7669
  br label %return, !dbg !7669

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7671
  br label %return, !dbg !7671

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !7672
  ret i8 %2, !dbg !7672
}

declare dso_local %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @idx_record_use(%union.tree_node* %base, %union.tree_node** %idx, i8* %vdata) #0 !dbg !7673 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %idx.addr = alloca %union.tree_node**, align 8
  %vdata.addr = alloca i8*, align 8
  %data = alloca %struct.ivopts_data*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !7674, metadata !DIExpression()), !dbg !7675
  store %union.tree_node** %idx, %union.tree_node*** %idx.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %idx.addr, metadata !7676, metadata !DIExpression()), !dbg !7677
  store i8* %vdata, i8** %vdata.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdata.addr, metadata !7678, metadata !DIExpression()), !dbg !7679
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data, metadata !7680, metadata !DIExpression()), !dbg !7681
  %0 = load i8*, i8** %vdata.addr, align 8, !dbg !7682
  %1 = bitcast i8* %0 to %struct.ivopts_data*, !dbg !7683
  store %struct.ivopts_data* %1, %struct.ivopts_data** %data, align 8, !dbg !7681
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data, align 8, !dbg !7684
  %3 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !7685
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !7686
  %call = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %2, %union.tree_node* %4), !dbg !7687
  %5 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7688
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7688
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7688
  %bf.load = load i64, i64* %6, align 8, !dbg !7688
  %bf.clear = and i64 %bf.load, 65535, !dbg !7688
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7688
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !7690
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7691

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7692
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7692
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7692
  %bf.load3 = load i64, i64* %8, align 8, !dbg !7692
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7692
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7692
  %cmp6 = icmp eq i32 %bf.cast5, 46, !dbg !7693
  br i1 %cmp6, label %if.then, label %if.end, !dbg !7694

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data, align 8, !dbg !7695
  %10 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7697
  %call7 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %10), !dbg !7698
  %call8 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %9, %union.tree_node* %call7), !dbg !7699
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data, align 8, !dbg !7700
  %12 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !7701
  %call9 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %12), !dbg !7702
  %call10 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %11, %union.tree_node* %call9), !dbg !7703
  br label %if.end, !dbg !7704

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret i8 1, !dbg !7705
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !7706 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7707, metadata !DIExpression()), !dbg !7708
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7709
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7710
  %cmp = icmp uge i32 %call, 6, !dbg !7711
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7712

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7713
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7714
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7715
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7716
  %land.ext = zext i1 %2 to i32, !dbg !7712
  %conv = trunc i32 %land.ext to i8, !dbg !7710
  ret i8 %conv, !dbg !7717
}

declare dso_local %union.tree_node* @component_ref_field_offset(%union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_element_size(%union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

declare dso_local zeroext i8 @convert_affine_scev(%struct.loop*, %union.tree_node*, %union.tree_node**, %union.tree_node**, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local zeroext i8 @is_gimple_addressable(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !7718 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7719, metadata !DIExpression()), !dbg !7720
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7721
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7722
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7723
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7723
  ret %union.tree_node* %1, !dbg !7724
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7725 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7728, metadata !DIExpression()), !dbg !7729
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7730
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7731
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7732
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7733
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !7734
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7735
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7736
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !7737
  store i32 0, i32* %iter_type, align 4, !dbg !7738
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7739
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !7740
  store i32 0, i32* %phi_i, align 8, !dbg !7741
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7742
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !7743
  store i32 0, i32* %num_phi, align 4, !dbg !7744
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7745
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !7746
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7747
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7748
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !7749
  store i8 1, i8* %done, align 8, !dbg !7750
  ret void, !dbg !7751
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7752 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7755
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7756
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7757
  %1 = load i32, i32* %nargs, align 4, !dbg !7757
  ret i32 %1, !dbg !7758
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7759 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7762, metadata !DIExpression()), !dbg !7763
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7764, metadata !DIExpression()), !dbg !7765
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7766, metadata !DIExpression()), !dbg !7767
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7768
  %and = and i32 %0, 8, !dbg !7768
  %tobool = icmp ne i32 %and, 0, !dbg !7768
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7768

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7768
  %and1 = and i32 %1, 2, !dbg !7768
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7768
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7768

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7768
  %and3 = and i32 %2, 4, !dbg !7768
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7768
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7768

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7768
  %and6 = and i32 %3, 1, !dbg !7768
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7768
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7768

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7768
  br label %cond.end, !dbg !7768

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7768

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7768
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7769
  %and8 = and i32 %4, 10, !dbg !7770
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7770
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7771

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7772
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7773
  br label %cond.end12, !dbg !7771

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7771

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7771
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7774
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7775
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7776
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7777
  %and14 = and i32 %7, 8, !dbg !7779
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7779
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7780

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7781
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7782
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7782
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7781
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7783

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7784
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7785
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7786
  br i1 %cmp, label %if.then, label %if.end, !dbg !7787

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7788
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7789
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7789
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7790
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7790
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7791
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7792
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7793
  br label %if.end, !dbg !7791

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7794
  %and23 = and i32 %15, 5, !dbg !7795
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7795
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7796

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7797
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7798
  br label %cond.end28, !dbg !7796

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7796

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7796
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7799
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7800
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7801
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7802
  %and30 = and i32 %18, 4, !dbg !7804
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7804
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7805

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7806
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7807
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7807
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7806
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7808

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7809
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7810
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7811
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7812

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7813
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7814
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7814
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7815
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7815
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7816
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7817
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7818
  br label %if.end42, !dbg !7816

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7819
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7820
  store i8 0, i8* %done, align 8, !dbg !7821
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7822
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7823
  store i32 0, i32* %phi_i, align 8, !dbg !7824
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7825
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7826
  store i32 0, i32* %num_phi, align 4, !dbg !7827
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7828
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7829
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7830
  ret void, !dbg !7831
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7832 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7835, metadata !DIExpression()), !dbg !7836
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7837
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7839
  %tobool = icmp ne i8 %call, 0, !dbg !7839
  br i1 %tobool, label %if.end, label %if.then, !dbg !7840

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7841
  br label %return, !dbg !7841

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7842
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7843
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7844
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7845
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7845
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7846
  br label %return, !dbg !7846

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7847
  ret %struct.def_optype_d* %3, !dbg !7847
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !7848 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7849, metadata !DIExpression()), !dbg !7850
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7851
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7853
  %tobool = icmp ne i8 %call, 0, !dbg !7853
  br i1 %tobool, label %if.end, label %if.then, !dbg !7854

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7855
  br label %return, !dbg !7855

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7856
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7857
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !7858
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !7858
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7859
  br label %return, !dbg !7859

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7860
  ret %union.tree_node* %3, !dbg !7860
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7861 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7864, metadata !DIExpression()), !dbg !7865
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7866
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7868
  %tobool = icmp ne i8 %call, 0, !dbg !7868
  br i1 %tobool, label %if.end, label %if.then, !dbg !7869

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7870
  br label %return, !dbg !7870

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7871
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7872
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7873
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7874
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7874
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7875
  br label %return, !dbg !7875

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7876
  ret %struct.use_optype_d* %3, !dbg !7876
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !7877 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7880
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7882
  %tobool = icmp ne i8 %call, 0, !dbg !7882
  br i1 %tobool, label %if.end, label %if.then, !dbg !7883

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7884
  br label %return, !dbg !7884

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7885
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7886
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !7887
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !7887
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7888
  br label %return, !dbg !7888

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7889
  ret %union.tree_node* %3, !dbg !7889
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_standard_iv_candidates(%struct.ivopts_data* %data) #0 !dbg !7890 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !7891, metadata !DIExpression()), !dbg !7892
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7893
  call void @add_standard_iv_candidates_for_size(%struct.ivopts_data* %0, i32 32), !dbg !7894
  ret void, !dbg !7895
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_old_ivs_candidates(%struct.ivopts_data* %data) #0 !dbg !7896 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %iv = alloca %struct.iv*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !7897, metadata !DIExpression()), !dbg !7898
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7899, metadata !DIExpression()), !dbg !7900
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !7901, metadata !DIExpression()), !dbg !7902
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7903, metadata !DIExpression()), !dbg !7904
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7905
  %relevant = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 5, !dbg !7905
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %relevant, align 8, !dbg !7905
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %i), !dbg !7905
  br label %for.cond, !dbg !7905

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7907
  %tobool = icmp ne i8 %call, 0, !dbg !7905
  br i1 %tobool, label %for.body, label %for.end, !dbg !7905

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7909
  %3 = load i32, i32* %i, align 4, !dbg !7911
  %call1 = call %struct.version_info* @ver_info(%struct.ivopts_data* %2, i32 %3), !dbg !7912
  %iv2 = getelementptr inbounds %struct.version_info, %struct.version_info* %call1, i32 0, i32 1, !dbg !7913
  %4 = load %struct.iv*, %struct.iv** %iv2, align 8, !dbg !7913
  store %struct.iv* %4, %struct.iv** %iv, align 8, !dbg !7914
  %5 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7915
  %tobool3 = icmp ne %struct.iv* %5, null, !dbg !7915
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !7917

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7918
  %biv_p = getelementptr inbounds %struct.iv, %struct.iv* %6, i32 0, i32 4, !dbg !7919
  %7 = load i8, i8* %biv_p, align 8, !dbg !7919
  %conv = zext i8 %7 to i32, !dbg !7918
  %tobool4 = icmp ne i32 %conv, 0, !dbg !7918
  br i1 %tobool4, label %land.lhs.true5, label %if.end, !dbg !7920

land.lhs.true5:                                   ; preds = %land.lhs.true
  %8 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7921
  %step = getelementptr inbounds %struct.iv, %struct.iv* %8, i32 0, i32 2, !dbg !7922
  %9 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7922
  %call6 = call i32 @integer_zerop(%union.tree_node* %9), !dbg !7923
  %tobool7 = icmp ne i32 %call6, 0, !dbg !7923
  br i1 %tobool7, label %if.end, label %if.then, !dbg !7924

if.then:                                          ; preds = %land.lhs.true5
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7925
  %11 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7926
  call void @add_old_iv_candidates(%struct.ivopts_data* %10, %struct.iv* %11), !dbg !7927
  br label %if.end, !dbg !7927

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7928

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7907
  br label %for.cond, !dbg !7907, !llvm.loop !7929

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7931
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_derived_ivs_candidates(%struct.ivopts_data* %data) #0 !dbg !7932 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !7933, metadata !DIExpression()), !dbg !7934
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7935, metadata !DIExpression()), !dbg !7936
  store i32 0, i32* %i, align 4, !dbg !7937
  br label %for.cond, !dbg !7939

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7940
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7942
  %call = call i32 @n_iv_uses(%struct.ivopts_data* %1), !dbg !7943
  %cmp = icmp ult i32 %0, %call, !dbg !7944
  br i1 %cmp, label %for.body, label %for.end, !dbg !7945

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !7946, metadata !DIExpression()), !dbg !7948
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7949
  %3 = load i32, i32* %i, align 4, !dbg !7950
  %call1 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %2, i32 %3), !dbg !7951
  store %struct.iv_use* %call1, %struct.iv_use** %use, align 8, !dbg !7948
  %4 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !7952
  %tobool = icmp ne %struct.iv_use* %4, null, !dbg !7952
  br i1 %tobool, label %if.end, label %if.then, !dbg !7954

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !7955

if.end:                                           ; preds = %for.body
  %5 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !7956
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %5, i32 0, i32 1, !dbg !7957
  %6 = load i32, i32* %type, align 4, !dbg !7957
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb
  ], !dbg !7958

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7959
  %8 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !7961
  %iv = getelementptr inbounds %struct.iv_use, %struct.iv_use* %8, i32 0, i32 2, !dbg !7962
  %9 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !7962
  %10 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !7963
  call void @add_iv_value_candidates(%struct.ivopts_data* %7, %struct.iv* %9, %struct.iv_use* %10), !dbg !7964
  br label %sw.epilog, !dbg !7965

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 2417, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !7966
  br label %sw.epilog, !dbg !7967

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %for.inc, !dbg !7968

for.inc:                                          ; preds = %sw.epilog, %if.then
  %11 = load i32, i32* %i, align 4, !dbg !7969
  %inc = add i32 %11, 1, !dbg !7969
  store i32 %inc, i32* %i, align 4, !dbg !7969
  br label %for.cond, !dbg !7970, !llvm.loop !7971

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7973
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_autoinc_for_original_candidates(%struct.ivopts_data* %data) #0 !dbg !7974 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %cand = alloca %struct.iv_cand*, align 8
  %closest = alloca %struct.iv_use*, align 8
  %use = alloca %struct.iv_use*, align 8
  %uid = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !7975, metadata !DIExpression()), !dbg !7976
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7977, metadata !DIExpression()), !dbg !7978
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7979, metadata !DIExpression()), !dbg !7980
  store i32 0, i32* %i, align 4, !dbg !7981
  br label %for.cond, !dbg !7983

for.cond:                                         ; preds = %for.inc30, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7984
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7986
  %call = call i32 @n_iv_cands(%struct.ivopts_data* %1), !dbg !7987
  %cmp = icmp ult i32 %0, %call, !dbg !7988
  br i1 %cmp, label %for.body, label %for.end32, !dbg !7989

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !7990, metadata !DIExpression()), !dbg !7992
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !7993
  %3 = load i32, i32* %i, align 4, !dbg !7994
  %call1 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %2, i32 %3), !dbg !7995
  store %struct.iv_cand* %call1, %struct.iv_cand** %cand, align 8, !dbg !7992
  call void @llvm.dbg.declare(metadata %struct.iv_use** %closest, metadata !7996, metadata !DIExpression()), !dbg !7997
  store %struct.iv_use* null, %struct.iv_use** %closest, align 8, !dbg !7997
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !7998
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %4, i32 0, i32 2, !dbg !8000
  %5 = load i32, i32* %pos, align 8, !dbg !8000
  %cmp2 = icmp ne i32 %5, 4, !dbg !8001
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8002

if.then:                                          ; preds = %for.body
  br label %for.inc30, !dbg !8003

if.end:                                           ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !8004
  br label %for.cond3, !dbg !8006

for.cond3:                                        ; preds = %for.inc, %if.end
  %6 = load i32, i32* %j, align 4, !dbg !8007
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8009
  %call4 = call i32 @n_iv_uses(%struct.ivopts_data* %7), !dbg !8010
  %cmp5 = icmp ult i32 %6, %call4, !dbg !8011
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !8012

for.body6:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !8013, metadata !DIExpression()), !dbg !8015
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8016
  %9 = load i32, i32* %j, align 4, !dbg !8017
  %call7 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %8, i32 %9), !dbg !8018
  store %struct.iv_use* %call7, %struct.iv_use** %use, align 8, !dbg !8015
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !8019, metadata !DIExpression()), !dbg !8020
  %10 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !8021
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %10, i32 0, i32 3, !dbg !8022
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8022
  %call8 = call i32 @gimple_uid(%union.gimple_statement_d* %11), !dbg !8023
  store i32 %call8, i32* %uid, align 4, !dbg !8020
  %12 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !8024
  %stmt9 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %12, i32 0, i32 3, !dbg !8026
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !8026
  %call10 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %13), !dbg !8027
  %14 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8028
  %incremented_at = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %14, i32 0, i32 3, !dbg !8029
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at, align 8, !dbg !8029
  %call11 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %15), !dbg !8030
  %cmp12 = icmp ne %struct.basic_block_def* %call10, %call11, !dbg !8031
  br i1 %cmp12, label %if.then16, label %lor.lhs.false, !dbg !8032

lor.lhs.false:                                    ; preds = %for.body6
  %16 = load i32, i32* %uid, align 4, !dbg !8033
  %17 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8034
  %incremented_at13 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %17, i32 0, i32 3, !dbg !8035
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at13, align 8, !dbg !8035
  %call14 = call i32 @gimple_uid(%union.gimple_statement_d* %18), !dbg !8036
  %cmp15 = icmp ugt i32 %16, %call14, !dbg !8037
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !8038

if.then16:                                        ; preds = %lor.lhs.false, %for.body6
  br label %for.inc, !dbg !8039

if.end17:                                         ; preds = %lor.lhs.false
  %19 = load %struct.iv_use*, %struct.iv_use** %closest, align 8, !dbg !8040
  %cmp18 = icmp eq %struct.iv_use* %19, null, !dbg !8042
  br i1 %cmp18, label %if.then23, label %lor.lhs.false19, !dbg !8043

lor.lhs.false19:                                  ; preds = %if.end17
  %20 = load i32, i32* %uid, align 4, !dbg !8044
  %21 = load %struct.iv_use*, %struct.iv_use** %closest, align 8, !dbg !8045
  %stmt20 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %21, i32 0, i32 3, !dbg !8046
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt20, align 8, !dbg !8046
  %call21 = call i32 @gimple_uid(%union.gimple_statement_d* %22), !dbg !8047
  %cmp22 = icmp ugt i32 %20, %call21, !dbg !8048
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !8049

if.then23:                                        ; preds = %lor.lhs.false19, %if.end17
  %23 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !8050
  store %struct.iv_use* %23, %struct.iv_use** %closest, align 8, !dbg !8051
  br label %if.end24, !dbg !8052

if.end24:                                         ; preds = %if.then23, %lor.lhs.false19
  br label %for.inc, !dbg !8053

for.inc:                                          ; preds = %if.end24, %if.then16
  %24 = load i32, i32* %j, align 4, !dbg !8054
  %inc = add i32 %24, 1, !dbg !8054
  store i32 %inc, i32* %j, align 4, !dbg !8054
  br label %for.cond3, !dbg !8055, !llvm.loop !8056

for.end:                                          ; preds = %for.cond3
  %25 = load %struct.iv_use*, %struct.iv_use** %closest, align 8, !dbg !8058
  %cmp25 = icmp eq %struct.iv_use* %25, null, !dbg !8060
  br i1 %cmp25, label %if.then28, label %lor.lhs.false26, !dbg !8061

lor.lhs.false26:                                  ; preds = %for.end
  %26 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8062
  %27 = load %struct.iv_use*, %struct.iv_use** %closest, align 8, !dbg !8063
  %28 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8064
  %call27 = call zeroext i8 @autoinc_possible_for_pair(%struct.ivopts_data* %26, %struct.iv_use* %27, %struct.iv_cand* %28), !dbg !8065
  %tobool = icmp ne i8 %call27, 0, !dbg !8065
  br i1 %tobool, label %if.end29, label %if.then28, !dbg !8066

if.then28:                                        ; preds = %lor.lhs.false26, %for.end
  br label %for.inc30, !dbg !8067

if.end29:                                         ; preds = %lor.lhs.false26
  %29 = load %struct.iv_use*, %struct.iv_use** %closest, align 8, !dbg !8068
  %30 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8069
  %ainc_use = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %30, i32 0, i32 9, !dbg !8070
  store %struct.iv_use* %29, %struct.iv_use** %ainc_use, align 8, !dbg !8071
  br label %for.inc30, !dbg !8072

for.inc30:                                        ; preds = %if.end29, %if.then28, %if.then
  %31 = load i32, i32* %i, align 4, !dbg !8073
  %inc31 = add i32 %31, 1, !dbg !8073
  store i32 %inc31, i32* %i, align 4, !dbg !8073
  br label %for.cond, !dbg !8074, !llvm.loop !8075

for.end32:                                        ; preds = %for.cond
  ret void, !dbg !8077
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_important_candidates(%struct.ivopts_data* %data) #0 !dbg !8078 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  %cand = alloca %struct.iv_cand*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8079, metadata !DIExpression()), !dbg !8080
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8081, metadata !DIExpression()), !dbg !8082
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !8083, metadata !DIExpression()), !dbg !8084
  store i32 0, i32* %i, align 4, !dbg !8085
  br label %for.cond, !dbg !8087

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8088
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8090
  %call = call i32 @n_iv_cands(%struct.ivopts_data* %1), !dbg !8091
  %cmp = icmp ult i32 %0, %call, !dbg !8092
  br i1 %cmp, label %for.body, label %for.end, !dbg !8093

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !8094, metadata !DIExpression()), !dbg !8096
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8097
  %3 = load i32, i32* %i, align 4, !dbg !8098
  %call1 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %2, i32 %3), !dbg !8099
  store %struct.iv_cand* %call1, %struct.iv_cand** %cand, align 8, !dbg !8096
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8100
  %important = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %4, i32 0, i32 1, !dbg !8102
  %5 = load i8, i8* %important, align 4, !dbg !8102
  %tobool = icmp ne i8 %5, 0, !dbg !8100
  br i1 %tobool, label %if.then, label %if.end, !dbg !8103

if.then:                                          ; preds = %for.body
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8104
  %important_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %6, i32 0, i32 8, !dbg !8105
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %important_candidates, align 8, !dbg !8105
  %8 = load i32, i32* %i, align 4, !dbg !8106
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %7, i32 %8), !dbg !8107
  br label %if.end, !dbg !8107

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8108

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !8109
  %inc = add i32 %9, 1, !dbg !8109
  store i32 %inc, i32* %i, align 4, !dbg !8109
  br label %for.cond, !dbg !8110, !llvm.loop !8111

for.end:                                          ; preds = %for.cond
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8113
  %call3 = call i32 @n_iv_cands(%struct.ivopts_data* %10), !dbg !8114
  %11 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !8115
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %11, i64 60, !dbg !8115
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !8115
  %12 = load i32, i32* %value, align 8, !dbg !8115
  %cmp4 = icmp ule i32 %call3, %12, !dbg !8116
  %conv = zext i1 %cmp4 to i32, !dbg !8116
  %conv5 = trunc i32 %conv to i8, !dbg !8117
  %13 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8118
  %consider_all_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %13, i32 0, i32 10, !dbg !8119
  store i8 %conv5, i8* %consider_all_candidates, align 4, !dbg !8120
  %14 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8121
  %consider_all_candidates6 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %14, i32 0, i32 10, !dbg !8123
  %15 = load i8, i8* %consider_all_candidates6, align 4, !dbg !8123
  %tobool7 = icmp ne i8 %15, 0, !dbg !8121
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !8124

if.then8:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4, !dbg !8125
  br label %for.cond9, !dbg !8128

for.cond9:                                        ; preds = %for.inc16, %if.then8
  %16 = load i32, i32* %i, align 4, !dbg !8129
  %17 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8131
  %call10 = call i32 @n_iv_uses(%struct.ivopts_data* %17), !dbg !8132
  %cmp11 = icmp ult i32 %16, %call10, !dbg !8133
  br i1 %cmp11, label %for.body13, label %for.end18, !dbg !8134

for.body13:                                       ; preds = %for.cond9
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8135
  %19 = load i32, i32* %i, align 4, !dbg !8137
  %call14 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %18, i32 %19), !dbg !8138
  store %struct.iv_use* %call14, %struct.iv_use** %use, align 8, !dbg !8139
  %20 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !8140
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %20, i32 0, i32 5, !dbg !8140
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !8140
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %21), !dbg !8140
  %22 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !8140
  %related_cands15 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %22, i32 0, i32 5, !dbg !8140
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %related_cands15, align 8, !dbg !8140
  br label %for.inc16, !dbg !8141

for.inc16:                                        ; preds = %for.body13
  %23 = load i32, i32* %i, align 4, !dbg !8142
  %inc17 = add i32 %23, 1, !dbg !8142
  store i32 %inc17, i32* %i, align 4, !dbg !8142
  br label %for.cond9, !dbg !8143, !llvm.loop !8144

for.end18:                                        ; preds = %for.cond9
  br label %if.end31, !dbg !8146

if.else:                                          ; preds = %for.end
  store i32 0, i32* %i, align 4, !dbg !8147
  br label %for.cond19, !dbg !8150

for.cond19:                                       ; preds = %for.inc28, %if.else
  %24 = load i32, i32* %i, align 4, !dbg !8151
  %25 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8153
  %call20 = call i32 @n_iv_uses(%struct.ivopts_data* %25), !dbg !8154
  %cmp21 = icmp ult i32 %24, %call20, !dbg !8155
  br i1 %cmp21, label %for.body23, label %for.end30, !dbg !8156

for.body23:                                       ; preds = %for.cond19
  %26 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8157
  %27 = load i32, i32* %i, align 4, !dbg !8158
  %call24 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %26, i32 %27), !dbg !8159
  %related_cands25 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %call24, i32 0, i32 5, !dbg !8160
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands25, align 8, !dbg !8160
  %29 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8161
  %important_candidates26 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %29, i32 0, i32 8, !dbg !8162
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %important_candidates26, align 8, !dbg !8162
  %call27 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %28, %struct.bitmap_head_def* %30), !dbg !8163
  br label %for.inc28, !dbg !8163

for.inc28:                                        ; preds = %for.body23
  %31 = load i32, i32* %i, align 4, !dbg !8164
  %inc29 = add i32 %31, 1, !dbg !8164
  store i32 %inc29, i32* %i, align 4, !dbg !8164
  br label %for.cond19, !dbg !8165, !llvm.loop !8166

for.end30:                                        ; preds = %for.cond19
  br label %if.end31

if.end31:                                         ; preds = %for.end30, %for.end18
  ret void, !dbg !8168
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_standard_iv_candidates_for_size(%struct.ivopts_data* %data, i32 %size) #0 !dbg !8169 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %size.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8172, metadata !DIExpression()), !dbg !8173
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !8174, metadata !DIExpression()), !dbg !8175
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8176, metadata !DIExpression()), !dbg !8177
  %0 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 3), align 8, !dbg !8178
  %1 = load i32, i32* %size.addr, align 4, !dbg !8179
  %call = call %union.tree_node* %0(i32 %1, i32 1), !dbg !8180
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !8177
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8181
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8182
  %call1 = call %union.tree_node* @build_int_cst(%union.tree_node* %3, i64 0), !dbg !8183
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8184
  %call2 = call %union.tree_node* @build_int_cst(%union.tree_node* %4, i64 1), !dbg !8185
  call void @add_candidate(%struct.ivopts_data* %2, %union.tree_node* %call1, %union.tree_node* %call2, i8 zeroext 1, %struct.iv_use* null), !dbg !8186
  ret void, !dbg !8187
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_candidate(%struct.ivopts_data* %data, %union.tree_node* %base, %union.tree_node* %step, i8 zeroext %important, %struct.iv_use* %use) #0 !dbg !8188 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %important.addr = alloca i8, align 1
  %use.addr = alloca %struct.iv_use*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8191, metadata !DIExpression()), !dbg !8192
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !8193, metadata !DIExpression()), !dbg !8194
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !8195, metadata !DIExpression()), !dbg !8196
  store i8 %important, i8* %important.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %important.addr, metadata !8197, metadata !DIExpression()), !dbg !8198
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !8199, metadata !DIExpression()), !dbg !8200
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8201
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !8203
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !8203
  %call = call %struct.basic_block_def* @ip_normal_pos(%struct.loop* %1), !dbg !8204
  %tobool = icmp ne %struct.basic_block_def* %call, null, !dbg !8204
  br i1 %tobool, label %if.then, label %if.end, !dbg !8205

if.then:                                          ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8206
  %3 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8207
  %4 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8208
  %5 = load i8, i8* %important.addr, align 1, !dbg !8209
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8210
  %call1 = call %struct.iv_cand* @add_candidate_1(%struct.ivopts_data* %2, %union.tree_node* %3, %union.tree_node* %4, i8 zeroext %5, i32 0, %struct.iv_use* %6, %union.gimple_statement_d* null), !dbg !8211
  br label %if.end, !dbg !8211

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8212
  %current_loop2 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %7, i32 0, i32 0, !dbg !8214
  %8 = load %struct.loop*, %struct.loop** %current_loop2, align 8, !dbg !8214
  %call3 = call %struct.basic_block_def* @ip_end_pos(%struct.loop* %8), !dbg !8215
  %tobool4 = icmp ne %struct.basic_block_def* %call3, null, !dbg !8215
  br i1 %tobool4, label %land.lhs.true, label %if.end10, !dbg !8216

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8217
  %current_loop5 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %9, i32 0, i32 0, !dbg !8218
  %10 = load %struct.loop*, %struct.loop** %current_loop5, align 8, !dbg !8218
  %call6 = call zeroext i8 @allow_ip_end_pos_p(%struct.loop* %10), !dbg !8219
  %conv = zext i8 %call6 to i32, !dbg !8219
  %tobool7 = icmp ne i32 %conv, 0, !dbg !8219
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !8220

if.then8:                                         ; preds = %land.lhs.true
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8221
  %12 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8222
  %13 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8223
  %14 = load i8, i8* %important.addr, align 1, !dbg !8224
  %15 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8225
  %call9 = call %struct.iv_cand* @add_candidate_1(%struct.ivopts_data* %11, %union.tree_node* %12, %union.tree_node* %13, i8 zeroext %14, i32 1, %struct.iv_use* %15, %union.gimple_statement_d* null), !dbg !8226
  br label %if.end10, !dbg !8226

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %if.end
  %16 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8227
  %cmp = icmp ne %struct.iv_use* %16, null, !dbg !8229
  br i1 %cmp, label %land.lhs.true12, label %if.end16, !dbg !8230

land.lhs.true12:                                  ; preds = %if.end10
  %17 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8231
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %17, i32 0, i32 1, !dbg !8232
  %18 = load i32, i32* %type, align 4, !dbg !8232
  %cmp13 = icmp eq i32 %18, 1, !dbg !8233
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !8234

if.then15:                                        ; preds = %land.lhs.true12
  %19 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8235
  %20 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8236
  %21 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8237
  %22 = load i8, i8* %important.addr, align 1, !dbg !8238
  %23 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8239
  call void @add_autoinc_candidates(%struct.ivopts_data* %19, %union.tree_node* %20, %union.tree_node* %21, i8 zeroext %22, %struct.iv_use* %23), !dbg !8240
  br label %if.end16, !dbg !8240

if.end16:                                         ; preds = %if.then15, %land.lhs.true12, %if.end10
  ret void, !dbg !8241
}

declare dso_local %struct.basic_block_def* @ip_normal_pos(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_cand* @add_candidate_1(%struct.ivopts_data* %data, %union.tree_node* %base, %union.tree_node* %step, i8 zeroext %important, i32 %pos, %struct.iv_use* %use, %union.gimple_statement_d* %incremented_at) #0 !dbg !8242 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %important.addr = alloca i8, align 1
  %pos.addr = alloca i32, align 4
  %use.addr = alloca %struct.iv_use*, align 8
  %incremented_at.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %cand = alloca %struct.iv_cand*, align 8
  %type = alloca %union.tree_node*, align 8
  %orig_type = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8245, metadata !DIExpression()), !dbg !8246
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !8247, metadata !DIExpression()), !dbg !8248
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !8249, metadata !DIExpression()), !dbg !8250
  store i8 %important, i8* %important.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %important.addr, metadata !8251, metadata !DIExpression()), !dbg !8252
  store i32 %pos, i32* %pos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pos.addr, metadata !8253, metadata !DIExpression()), !dbg !8254
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !8255, metadata !DIExpression()), !dbg !8256
  store %union.gimple_statement_d* %incremented_at, %union.gimple_statement_d** %incremented_at.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %incremented_at.addr, metadata !8257, metadata !DIExpression()), !dbg !8258
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8259, metadata !DIExpression()), !dbg !8260
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !8261, metadata !DIExpression()), !dbg !8262
  store %struct.iv_cand* null, %struct.iv_cand** %cand, align 8, !dbg !8262
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8263, metadata !DIExpression()), !dbg !8264
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type, metadata !8265, metadata !DIExpression()), !dbg !8266
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8267
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !8267
  br i1 %tobool, label %if.then, label %if.end5, !dbg !8269

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8270
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !8270
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8270
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8270
  store %union.tree_node* %2, %union.tree_node** %orig_type, align 8, !dbg !8272
  %3 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !8273
  %call = call %union.tree_node* @generic_type_for(%union.tree_node* %3), !dbg !8274
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !8275
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8276
  %5 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !8278
  %cmp = icmp ne %union.tree_node* %4, %5, !dbg !8279
  br i1 %cmp, label %if.then2, label %if.end, !dbg !8280

if.then2:                                         ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8281
  %7 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8281
  %call3 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %6, %union.tree_node* %7), !dbg !8281
  store %union.tree_node* %call3, %union.tree_node** %base.addr, align 8, !dbg !8283
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8284
  %9 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8284
  %call4 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %8, %union.tree_node* %9), !dbg !8284
  store %union.tree_node* %call4, %union.tree_node** %step.addr, align 8, !dbg !8285
  br label %if.end, !dbg !8286

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end5, !dbg !8287

if.end5:                                          ; preds = %if.end, %entry
  store i32 0, i32* %i, align 4, !dbg !8288
  br label %for.cond, !dbg !8290

for.cond:                                         ; preds = %for.inc, %if.end5
  %10 = load i32, i32* %i, align 4, !dbg !8291
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8293
  %call6 = call i32 @n_iv_cands(%struct.ivopts_data* %11), !dbg !8294
  %cmp7 = icmp ult i32 %10, %call6, !dbg !8295
  br i1 %cmp7, label %for.body, label %for.end, !dbg !8296

for.body:                                         ; preds = %for.cond
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8297
  %13 = load i32, i32* %i, align 4, !dbg !8299
  %call8 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %12, i32 %13), !dbg !8300
  store %struct.iv_cand* %call8, %struct.iv_cand** %cand, align 8, !dbg !8301
  %14 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8302
  %pos9 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %14, i32 0, i32 2, !dbg !8304
  %15 = load i32, i32* %pos9, align 8, !dbg !8304
  %16 = load i32, i32* %pos.addr, align 4, !dbg !8305
  %cmp10 = icmp ne i32 %15, %16, !dbg !8306
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !8307

if.then11:                                        ; preds = %for.body
  br label %for.inc, !dbg !8308

if.end12:                                         ; preds = %for.body
  %17 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8309
  %incremented_at13 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %17, i32 0, i32 3, !dbg !8311
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at13, align 8, !dbg !8311
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at.addr, align 8, !dbg !8312
  %cmp14 = icmp ne %union.gimple_statement_d* %18, %19, !dbg !8313
  br i1 %cmp14, label %if.then19, label %lor.lhs.false, !dbg !8314

lor.lhs.false:                                    ; preds = %if.end12
  %20 = load i32, i32* %pos.addr, align 4, !dbg !8315
  %cmp15 = icmp eq i32 %20, 3, !dbg !8316
  br i1 %cmp15, label %land.lhs.true, label %lor.lhs.false16, !dbg !8317

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %21 = load i32, i32* %pos.addr, align 4, !dbg !8318
  %cmp17 = icmp eq i32 %21, 2, !dbg !8319
  br i1 %cmp17, label %land.lhs.true, label %if.end20, !dbg !8320

land.lhs.true:                                    ; preds = %lor.lhs.false16, %lor.lhs.false
  %22 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8321
  %ainc_use = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %22, i32 0, i32 9, !dbg !8322
  %23 = load %struct.iv_use*, %struct.iv_use** %ainc_use, align 8, !dbg !8322
  %24 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8323
  %cmp18 = icmp ne %struct.iv_use* %23, %24, !dbg !8324
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !8325

if.then19:                                        ; preds = %land.lhs.true, %if.end12
  br label %for.inc, !dbg !8326

if.end20:                                         ; preds = %land.lhs.true, %lor.lhs.false16
  %25 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8327
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %25, i32 0, i32 6, !dbg !8329
  %26 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !8329
  %tobool21 = icmp ne %struct.iv* %26, null, !dbg !8327
  br i1 %tobool21, label %if.end28, label %if.then22, !dbg !8330

if.then22:                                        ; preds = %if.end20
  %27 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8331
  %tobool23 = icmp ne %union.tree_node* %27, null, !dbg !8331
  br i1 %tobool23, label %if.end27, label %land.lhs.true24, !dbg !8334

land.lhs.true24:                                  ; preds = %if.then22
  %28 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8335
  %tobool25 = icmp ne %union.tree_node* %28, null, !dbg !8335
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !8336

if.then26:                                        ; preds = %land.lhs.true24
  br label %for.end, !dbg !8337

if.end27:                                         ; preds = %land.lhs.true24, %if.then22
  br label %for.inc, !dbg !8338

if.end28:                                         ; preds = %if.end20
  %29 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8339
  %tobool29 = icmp ne %union.tree_node* %29, null, !dbg !8339
  br i1 %tobool29, label %if.end33, label %land.lhs.true30, !dbg !8341

land.lhs.true30:                                  ; preds = %if.end28
  %30 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8342
  %tobool31 = icmp ne %union.tree_node* %30, null, !dbg !8342
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !8343

if.then32:                                        ; preds = %land.lhs.true30
  br label %for.inc, !dbg !8344

if.end33:                                         ; preds = %land.lhs.true30, %if.end28
  %31 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8345
  %32 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8347
  %iv34 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %32, i32 0, i32 6, !dbg !8348
  %33 = load %struct.iv*, %struct.iv** %iv34, align 8, !dbg !8348
  %base35 = getelementptr inbounds %struct.iv, %struct.iv* %33, i32 0, i32 0, !dbg !8349
  %34 = load %union.tree_node*, %union.tree_node** %base35, align 8, !dbg !8349
  %call36 = call i32 @operand_equal_p(%union.tree_node* %31, %union.tree_node* %34, i32 0), !dbg !8350
  %tobool37 = icmp ne i32 %call36, 0, !dbg !8350
  br i1 %tobool37, label %land.lhs.true38, label %if.end44, !dbg !8351

land.lhs.true38:                                  ; preds = %if.end33
  %35 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8352
  %36 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8353
  %iv39 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %36, i32 0, i32 6, !dbg !8354
  %37 = load %struct.iv*, %struct.iv** %iv39, align 8, !dbg !8354
  %step40 = getelementptr inbounds %struct.iv, %struct.iv* %37, i32 0, i32 2, !dbg !8355
  %38 = load %union.tree_node*, %union.tree_node** %step40, align 8, !dbg !8355
  %call41 = call i32 @operand_equal_p(%union.tree_node* %35, %union.tree_node* %38, i32 0), !dbg !8356
  %tobool42 = icmp ne i32 %call41, 0, !dbg !8356
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !8357

if.then43:                                        ; preds = %land.lhs.true38
  br label %for.end, !dbg !8358

if.end44:                                         ; preds = %land.lhs.true38, %if.end33
  br label %for.inc, !dbg !8359

for.inc:                                          ; preds = %if.end44, %if.then32, %if.end27, %if.then19, %if.then11
  %39 = load i32, i32* %i, align 4, !dbg !8360
  %inc = add i32 %39, 1, !dbg !8360
  store i32 %inc, i32* %i, align 4, !dbg !8360
  br label %for.cond, !dbg !8361, !llvm.loop !8362

for.end:                                          ; preds = %if.then43, %if.then26, %for.cond
  %40 = load i32, i32* %i, align 4, !dbg !8364
  %41 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8366
  %call45 = call i32 @n_iv_cands(%struct.ivopts_data* %41), !dbg !8367
  %cmp46 = icmp eq i32 %40, %call45, !dbg !8368
  br i1 %cmp46, label %if.then47, label %if.end91, !dbg !8369

if.then47:                                        ; preds = %for.end
  %call48 = call i8* @xcalloc(i64 1, i64 72), !dbg !8370
  %42 = bitcast i8* %call48 to %struct.iv_cand*, !dbg !8370
  store %struct.iv_cand* %42, %struct.iv_cand** %cand, align 8, !dbg !8372
  %43 = load i32, i32* %i, align 4, !dbg !8373
  %44 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8374
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %44, i32 0, i32 0, !dbg !8375
  store i32 %43, i32* %id, align 8, !dbg !8376
  %45 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8377
  %tobool49 = icmp ne %union.tree_node* %45, null, !dbg !8377
  br i1 %tobool49, label %if.else, label %land.lhs.true50, !dbg !8379

land.lhs.true50:                                  ; preds = %if.then47
  %46 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8380
  %tobool51 = icmp ne %union.tree_node* %46, null, !dbg !8380
  br i1 %tobool51, label %if.else, label %if.then52, !dbg !8381

if.then52:                                        ; preds = %land.lhs.true50
  %47 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8382
  %iv53 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %47, i32 0, i32 6, !dbg !8383
  store %struct.iv* null, %struct.iv** %iv53, align 8, !dbg !8384
  br label %if.end56, !dbg !8382

if.else:                                          ; preds = %land.lhs.true50, %if.then47
  %48 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8385
  %49 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8386
  %call54 = call %struct.iv* @alloc_iv(%union.tree_node* %48, %union.tree_node* %49), !dbg !8387
  %50 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8388
  %iv55 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %50, i32 0, i32 6, !dbg !8389
  store %struct.iv* %call54, %struct.iv** %iv55, align 8, !dbg !8390
  br label %if.end56

if.end56:                                         ; preds = %if.else, %if.then52
  %51 = load i32, i32* %pos.addr, align 4, !dbg !8391
  %52 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8392
  %pos57 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %52, i32 0, i32 2, !dbg !8393
  store i32 %51, i32* %pos57, align 8, !dbg !8394
  %53 = load i32, i32* %pos.addr, align 4, !dbg !8395
  %cmp58 = icmp ne i32 %53, 4, !dbg !8397
  br i1 %cmp58, label %land.lhs.true59, label %if.end67, !dbg !8398

land.lhs.true59:                                  ; preds = %if.end56
  %54 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8399
  %iv60 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %54, i32 0, i32 6, !dbg !8400
  %55 = load %struct.iv*, %struct.iv** %iv60, align 8, !dbg !8400
  %tobool61 = icmp ne %struct.iv* %55, null, !dbg !8399
  br i1 %tobool61, label %if.then62, label %if.end67, !dbg !8401

if.then62:                                        ; preds = %land.lhs.true59
  %56 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !8402
  %common63 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !8402
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !8402
  %57 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !8402
  %call65 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0)), !dbg !8404
  %58 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8405
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %58, i32 0, i32 4, !dbg !8406
  store %union.tree_node* %call65, %union.tree_node** %var_before, align 8, !dbg !8407
  %59 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8408
  %var_before66 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %59, i32 0, i32 4, !dbg !8409
  %60 = load %union.tree_node*, %union.tree_node** %var_before66, align 8, !dbg !8409
  %61 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8410
  %var_after = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %61, i32 0, i32 5, !dbg !8411
  store %union.tree_node* %60, %union.tree_node** %var_after, align 8, !dbg !8412
  br label %if.end67, !dbg !8413

if.end67:                                         ; preds = %if.then62, %land.lhs.true59, %if.end56
  %62 = load i8, i8* %important.addr, align 1, !dbg !8414
  %63 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8415
  %important68 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %63, i32 0, i32 1, !dbg !8416
  store i8 %62, i8* %important68, align 4, !dbg !8417
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at.addr, align 8, !dbg !8418
  %65 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8419
  %incremented_at69 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %65, i32 0, i32 3, !dbg !8420
  store %union.gimple_statement_d* %64, %union.gimple_statement_d** %incremented_at69, align 8, !dbg !8421
  %66 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8422
  %iv_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %66, i32 0, i32 7, !dbg !8422
  %67 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8422
  %call70 = call %struct.iv_cand** @VEC_iv_cand_p_heap_safe_push(%struct.VEC_iv_cand_p_heap** %iv_candidates, %struct.iv_cand* %67), !dbg !8422
  %68 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8423
  %tobool71 = icmp ne %union.tree_node* %68, null, !dbg !8423
  br i1 %tobool71, label %land.lhs.true72, label %if.end77, !dbg !8425

land.lhs.true72:                                  ; preds = %if.end67
  %69 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8426
  %base73 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !8426
  %70 = bitcast %struct.tree_base* %base73 to i64*, !dbg !8426
  %bf.load = load i64, i64* %70, align 8, !dbg !8426
  %bf.clear = and i64 %bf.load, 65535, !dbg !8426
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8426
  %cmp74 = icmp ne i32 %bf.cast, 23, !dbg !8427
  br i1 %cmp74, label %if.then75, label %if.end77, !dbg !8428

if.then75:                                        ; preds = %land.lhs.true72
  %71 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8429
  store %struct.ivopts_data* %71, %struct.ivopts_data** @fd_ivopts_data, align 8, !dbg !8431
  %72 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8432
  %depends_on = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %72, i32 0, i32 10, !dbg !8432
  %73 = bitcast %struct.bitmap_head_def** %depends_on to i8*, !dbg !8432
  %call76 = call %union.tree_node* @walk_tree_1(%union.tree_node** %step.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_depends, i8* %73, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !8432
  br label %if.end77, !dbg !8433

if.end77:                                         ; preds = %if.then75, %land.lhs.true72, %if.end67
  %74 = load i32, i32* %pos.addr, align 4, !dbg !8434
  %cmp78 = icmp eq i32 %74, 3, !dbg !8436
  br i1 %cmp78, label %if.then81, label %lor.lhs.false79, !dbg !8437

lor.lhs.false79:                                  ; preds = %if.end77
  %75 = load i32, i32* %pos.addr, align 4, !dbg !8438
  %cmp80 = icmp eq i32 %75, 2, !dbg !8439
  br i1 %cmp80, label %if.then81, label %if.else83, !dbg !8440

if.then81:                                        ; preds = %lor.lhs.false79, %if.end77
  %76 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8441
  %77 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8442
  %ainc_use82 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %77, i32 0, i32 9, !dbg !8443
  store %struct.iv_use* %76, %struct.iv_use** %ainc_use82, align 8, !dbg !8444
  br label %if.end85, !dbg !8442

if.else83:                                        ; preds = %lor.lhs.false79
  %78 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8445
  %ainc_use84 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %78, i32 0, i32 9, !dbg !8446
  store %struct.iv_use* null, %struct.iv_use** %ainc_use84, align 8, !dbg !8447
  br label %if.end85

if.end85:                                         ; preds = %if.else83, %if.then81
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8448
  %tobool86 = icmp ne %struct._IO_FILE* %79, null, !dbg !8448
  br i1 %tobool86, label %land.lhs.true87, label %if.end90, !dbg !8450

land.lhs.true87:                                  ; preds = %if.end85
  %80 = load i32, i32* @dump_flags, align 4, !dbg !8451
  %and = and i32 %80, 8, !dbg !8452
  %tobool88 = icmp ne i32 %and, 0, !dbg !8452
  br i1 %tobool88, label %if.then89, label %if.end90, !dbg !8453

if.then89:                                        ; preds = %land.lhs.true87
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8454
  %82 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8455
  call void @dump_cand(%struct._IO_FILE* %81, %struct.iv_cand* %82), !dbg !8456
  br label %if.end90, !dbg !8456

if.end90:                                         ; preds = %if.then89, %land.lhs.true87, %if.end85
  br label %if.end91, !dbg !8457

if.end91:                                         ; preds = %if.end90, %for.end
  %83 = load i8, i8* %important.addr, align 1, !dbg !8458
  %conv = zext i8 %83 to i32, !dbg !8458
  %tobool92 = icmp ne i32 %conv, 0, !dbg !8458
  br i1 %tobool92, label %land.lhs.true93, label %if.end106, !dbg !8460

land.lhs.true93:                                  ; preds = %if.end91
  %84 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8461
  %important94 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %84, i32 0, i32 1, !dbg !8462
  %85 = load i8, i8* %important94, align 4, !dbg !8462
  %tobool95 = icmp ne i8 %85, 0, !dbg !8461
  br i1 %tobool95, label %if.end106, label %if.then96, !dbg !8463

if.then96:                                        ; preds = %land.lhs.true93
  %86 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8464
  %important97 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %86, i32 0, i32 1, !dbg !8466
  store i8 1, i8* %important97, align 4, !dbg !8467
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8468
  %tobool98 = icmp ne %struct._IO_FILE* %87, null, !dbg !8468
  br i1 %tobool98, label %land.lhs.true99, label %if.end105, !dbg !8470

land.lhs.true99:                                  ; preds = %if.then96
  %88 = load i32, i32* @dump_flags, align 4, !dbg !8471
  %and100 = and i32 %88, 8, !dbg !8472
  %tobool101 = icmp ne i32 %and100, 0, !dbg !8472
  br i1 %tobool101, label %if.then102, label %if.end105, !dbg !8473

if.then102:                                       ; preds = %land.lhs.true99
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8474
  %90 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8475
  %id103 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %90, i32 0, i32 0, !dbg !8476
  %91 = load i32, i32* %id103, align 8, !dbg !8476
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %89, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.43, i64 0, i64 0), i32 %91), !dbg !8477
  br label %if.end105, !dbg !8477

if.end105:                                        ; preds = %if.then102, %land.lhs.true99, %if.then96
  br label %if.end106, !dbg !8478

if.end106:                                        ; preds = %if.end105, %land.lhs.true93, %if.end91
  %92 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8479
  %tobool107 = icmp ne %struct.iv_use* %92, null, !dbg !8479
  br i1 %tobool107, label %if.then108, label %if.end119, !dbg !8481

if.then108:                                       ; preds = %if.end106
  %93 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8482
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %93, i32 0, i32 5, !dbg !8484
  %94 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !8484
  %95 = load i32, i32* %i, align 4, !dbg !8485
  %call109 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %94, i32 %95), !dbg !8486
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8487
  %tobool110 = icmp ne %struct._IO_FILE* %96, null, !dbg !8487
  br i1 %tobool110, label %land.lhs.true111, label %if.end118, !dbg !8489

land.lhs.true111:                                 ; preds = %if.then108
  %97 = load i32, i32* @dump_flags, align 4, !dbg !8490
  %and112 = and i32 %97, 8, !dbg !8491
  %tobool113 = icmp ne i32 %and112, 0, !dbg !8491
  br i1 %tobool113, label %if.then114, label %if.end118, !dbg !8492

if.then114:                                       ; preds = %land.lhs.true111
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8493
  %99 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8494
  %id115 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %99, i32 0, i32 0, !dbg !8495
  %100 = load i32, i32* %id115, align 8, !dbg !8495
  %101 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8496
  %id116 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %101, i32 0, i32 0, !dbg !8497
  %102 = load i32, i32* %id116, align 8, !dbg !8497
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %98, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.44, i64 0, i64 0), i32 %100, i32 %102), !dbg !8498
  br label %if.end118, !dbg !8498

if.end118:                                        ; preds = %if.then114, %land.lhs.true111, %if.then108
  br label %if.end119, !dbg !8499

if.end119:                                        ; preds = %if.end118, %if.end106
  %103 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8500
  ret %struct.iv_cand* %103, !dbg !8501
}

declare dso_local %struct.basic_block_def* @ip_end_pos(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @allow_ip_end_pos_p(%struct.loop* %loop) #0 !dbg !8502 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8505, metadata !DIExpression()), !dbg !8506
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8507
  %call = call %struct.basic_block_def* @ip_normal_pos(%struct.loop* %0), !dbg !8509
  %tobool = icmp ne %struct.basic_block_def* %call, null, !dbg !8509
  br i1 %tobool, label %if.end, label %if.then, !dbg !8510

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !8511
  br label %return, !dbg !8511

if.end:                                           ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8512
  %call1 = call %struct.basic_block_def* @ip_end_pos(%struct.loop* %1), !dbg !8514
  %call2 = call zeroext i8 @empty_block_p(%struct.basic_block_def* %call1), !dbg !8515
  %tobool3 = icmp ne i8 %call2, 0, !dbg !8515
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !8516

if.then4:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !8517
  br label %return, !dbg !8517

if.end5:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !8518
  br label %return, !dbg !8518

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !8519
  ret i8 %2, !dbg !8519
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_autoinc_candidates(%struct.ivopts_data* %data, %union.tree_node* %base, %union.tree_node* %step, i8 zeroext %important, %struct.iv_use* %use) #0 !dbg !8520 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %important.addr = alloca i8, align 1
  %use.addr = alloca %struct.iv_use*, align 8
  %use_bb = alloca %struct.basic_block_def*, align 8
  %mem_mode = alloca i32, align 4
  %cstepi = alloca i64, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8521, metadata !DIExpression()), !dbg !8522
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !8523, metadata !DIExpression()), !dbg !8524
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !8525, metadata !DIExpression()), !dbg !8526
  store i8 %important, i8* %important.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %important.addr, metadata !8527, metadata !DIExpression()), !dbg !8528
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !8529, metadata !DIExpression()), !dbg !8530
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %use_bb, metadata !8531, metadata !DIExpression()), !dbg !8532
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8533
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 3, !dbg !8534
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8534
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !8535
  store %struct.basic_block_def* %call, %struct.basic_block_def** %use_bb, align 8, !dbg !8532
  call void @llvm.dbg.declare(metadata i32* %mem_mode, metadata !8536, metadata !DIExpression()), !dbg !8537
  call void @llvm.dbg.declare(metadata i64* %cstepi, metadata !8538, metadata !DIExpression()), !dbg !8539
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !8540
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !8542
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !8542
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8543
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 0, !dbg !8544
  %5 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !8544
  %cmp = icmp ne %struct.loop* %3, %5, !dbg !8545
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8546

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8547
  %current_loop1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %6, i32 0, i32 0, !dbg !8548
  %7 = load %struct.loop*, %struct.loop** %current_loop1, align 8, !dbg !8548
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 3, !dbg !8549
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !8549
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !8550
  %call2 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %8, %struct.basic_block_def* %9), !dbg !8551
  %tobool = icmp ne i8 %call2, 0, !dbg !8551
  br i1 %tobool, label %lor.lhs.false3, label %if.then, !dbg !8552

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %10 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8553
  %stmt4 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %10, i32 0, i32 3, !dbg !8554
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !8554
  %call5 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %11), !dbg !8555
  %conv = zext i8 %call5 to i32, !dbg !8555
  %tobool6 = icmp ne i32 %conv, 0, !dbg !8555
  br i1 %tobool6, label %if.then, label %lor.lhs.false7, !dbg !8556

lor.lhs.false7:                                   ; preds = %lor.lhs.false3
  %12 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8557
  %call8 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %12), !dbg !8558
  %tobool9 = icmp ne i8 %call8, 0, !dbg !8558
  br i1 %tobool9, label %if.end, label %if.then, !dbg !8559

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false3, %lor.lhs.false, %entry
  br label %return, !dbg !8560

if.end:                                           ; preds = %lor.lhs.false7
  %13 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !8561
  %call10 = call i64 @int_cst_value(%union.tree_node* %13), !dbg !8562
  store i64 %call10, i64* %cstepi, align 8, !dbg !8563
  %14 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8564
  %op_p = getelementptr inbounds %struct.iv_use, %struct.iv_use* %14, i32 0, i32 4, !dbg !8564
  %15 = load %union.tree_node**, %union.tree_node*** %op_p, align 8, !dbg !8564
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !8564
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !8564
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8564
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8564
  %base11 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8564
  %18 = bitcast %struct.tree_base* %base11 to i64*, !dbg !8564
  %bf.load = load i64, i64* %18, align 8, !dbg !8564
  %bf.clear = and i64 %bf.load, 65535, !dbg !8564
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8564
  %cmp12 = icmp eq i32 %bf.cast, 14, !dbg !8564
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !8564

cond.true:                                        ; preds = %if.end
  %19 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8564
  %op_p14 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %19, i32 0, i32 4, !dbg !8564
  %20 = load %union.tree_node**, %union.tree_node*** %op_p14, align 8, !dbg !8564
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !8564
  %common15 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !8564
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !8564
  %22 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !8564
  %call17 = call i32 @vector_type_mode(%union.tree_node* %22), !dbg !8564
  br label %cond.end, !dbg !8564

cond.false:                                       ; preds = %if.end
  %23 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8564
  %op_p18 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %23, i32 0, i32 4, !dbg !8564
  %24 = load %union.tree_node**, %union.tree_node*** %op_p18, align 8, !dbg !8564
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !8564
  %common19 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !8564
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !8564
  %26 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !8564
  %type21 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !8564
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 6, !dbg !8564
  %bf.load22 = load i32, i32* %mode, align 4, !dbg !8564
  %bf.lshr = lshr i32 %bf.load22, 16, !dbg !8564
  %bf.clear23 = and i32 %bf.lshr, 255, !dbg !8564
  br label %cond.end, !dbg !8564

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call17, %cond.true ], [ %bf.clear23, %cond.false ], !dbg !8564
  store i32 %cond, i32* %mem_mode, align 4, !dbg !8565
  br label %return, !dbg !8566

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !8566
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @generic_type_for(%union.tree_node* %type) #0 !dbg !8567 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8568, metadata !DIExpression()), !dbg !8569
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8570
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8570
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8570
  %bf.load = load i64, i64* %1, align 8, !dbg !8570
  %bf.clear = and i64 %bf.load, 65535, !dbg !8570
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8570
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !8570
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8570

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8570
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8570
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8570
  %bf.load2 = load i64, i64* %3, align 8, !dbg !8570
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8570
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8570
  %cmp5 = icmp eq i32 %bf.cast4, 12, !dbg !8570
  br i1 %cmp5, label %if.then, label %if.end, !dbg !8572

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8573
  %call = call %union.tree_node* @unsigned_type_for(%union.tree_node* %4), !dbg !8574
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !8575
  br label %return, !dbg !8575

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8576
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8576
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !8576
  %bf.load7 = load i64, i64* %6, align 8, !dbg !8576
  %bf.lshr = lshr i64 %bf.load7, 21, !dbg !8576
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !8576
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !8576
  %tobool = icmp ne i32 %bf.cast9, 0, !dbg !8576
  br i1 %tobool, label %if.then10, label %if.end11, !dbg !8578

if.then10:                                        ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8579
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !8580
  br label %return, !dbg !8580

if.end11:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8581
  %call12 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %8), !dbg !8582
  store %union.tree_node* %call12, %union.tree_node** %retval, align 8, !dbg !8583
  br label %return, !dbg !8583

return:                                           ; preds = %if.end11, %if.then10, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8584
  ret %union.tree_node* %9, !dbg !8584
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @n_iv_cands(%struct.ivopts_data* %data) #0 !dbg !8585 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8586, metadata !DIExpression()), !dbg !8587
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8588
  %iv_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 7, !dbg !8588
  %1 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %iv_candidates, align 8, !dbg !8588
  %tobool = icmp ne %struct.VEC_iv_cand_p_heap* %1, null, !dbg !8588
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8588

cond.true:                                        ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8588
  %iv_candidates1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 7, !dbg !8588
  %3 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %iv_candidates1, align 8, !dbg !8588
  %base = getelementptr inbounds %struct.VEC_iv_cand_p_heap, %struct.VEC_iv_cand_p_heap* %3, i32 0, i32 0, !dbg !8588
  br label %cond.end, !dbg !8588

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8588

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_cand_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8588
  %call = call i32 @VEC_iv_cand_p_base_length(%struct.VEC_iv_cand_p_base* %cond), !dbg !8588
  ret i32 %call, !dbg !8589
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_cand* @iv_cand(%struct.ivopts_data* %data, i32 %i) #0 !dbg !8590 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i.addr = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8593, metadata !DIExpression()), !dbg !8594
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8595, metadata !DIExpression()), !dbg !8596
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8597
  %iv_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 7, !dbg !8597
  %1 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %iv_candidates, align 8, !dbg !8597
  %tobool = icmp ne %struct.VEC_iv_cand_p_heap* %1, null, !dbg !8597
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8597

cond.true:                                        ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8597
  %iv_candidates1 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 7, !dbg !8597
  %3 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %iv_candidates1, align 8, !dbg !8597
  %base = getelementptr inbounds %struct.VEC_iv_cand_p_heap, %struct.VEC_iv_cand_p_heap* %3, i32 0, i32 0, !dbg !8597
  br label %cond.end, !dbg !8597

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8597

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_cand_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8597
  %4 = load i32, i32* %i.addr, align 4, !dbg !8597
  %call = call %struct.iv_cand* @VEC_iv_cand_p_base_index(%struct.VEC_iv_cand_p_base* %cond, i32 %4), !dbg !8597
  ret %struct.iv_cand* %call, !dbg !8598
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @create_tmp_var_raw(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_cand** @VEC_iv_cand_p_heap_safe_push(%struct.VEC_iv_cand_p_heap** %vec_, %struct.iv_cand* %obj_) #0 !dbg !8599 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_heap**, align 8
  %obj_.addr = alloca %struct.iv_cand*, align 8
  store %struct.VEC_iv_cand_p_heap** %vec_, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_heap*** %vec_.addr, metadata !8604, metadata !DIExpression()), !dbg !8605
  store %struct.iv_cand* %obj_, %struct.iv_cand** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %obj_.addr, metadata !8606, metadata !DIExpression()), !dbg !8605
  %0 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8605
  %call = call i32 @VEC_iv_cand_p_heap_reserve(%struct.VEC_iv_cand_p_heap** %0, i32 1), !dbg !8605
  %1 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8605
  %2 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %1, align 8, !dbg !8605
  %tobool = icmp ne %struct.VEC_iv_cand_p_heap* %2, null, !dbg !8605
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8605

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8605
  %4 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %3, align 8, !dbg !8605
  %base = getelementptr inbounds %struct.VEC_iv_cand_p_heap, %struct.VEC_iv_cand_p_heap* %4, i32 0, i32 0, !dbg !8605
  br label %cond.end, !dbg !8605

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8605

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_cand_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8605
  %5 = load %struct.iv_cand*, %struct.iv_cand** %obj_.addr, align 8, !dbg !8605
  %call1 = call %struct.iv_cand** @VEC_iv_cand_p_base_quick_push(%struct.VEC_iv_cand_p_base* %cond, %struct.iv_cand* %5), !dbg !8605
  ret %struct.iv_cand** %call1, !dbg !8605
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_depends(%union.tree_node** %expr_p, i32* %ws, i8* %data) #0 !dbg !8607 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr_p.addr = alloca %union.tree_node**, align 8
  %ws.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %depends_on = alloca %struct.bitmap_head_def**, align 8
  %info = alloca %struct.version_info*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !8610, metadata !DIExpression()), !dbg !8611
  store i32* %ws, i32** %ws.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ws.addr, metadata !8612, metadata !DIExpression()), !dbg !8613
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8614, metadata !DIExpression()), !dbg !8615
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on, metadata !8616, metadata !DIExpression()), !dbg !8617
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8618
  %1 = bitcast i8* %0 to %struct.bitmap_head_def**, !dbg !8619
  store %struct.bitmap_head_def** %1, %struct.bitmap_head_def*** %depends_on, align 8, !dbg !8617
  call void @llvm.dbg.declare(metadata %struct.version_info** %info, metadata !8620, metadata !DIExpression()), !dbg !8621
  %2 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8622
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !8622
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8622
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8622
  %bf.load = load i64, i64* %4, align 8, !dbg !8622
  %bf.clear = and i64 %bf.load, 65535, !dbg !8622
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8622
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !8624
  br i1 %cmp, label %if.then, label %if.end, !dbg !8625

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8626
  br label %return, !dbg !8626

if.end:                                           ; preds = %entry
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** @fd_ivopts_data, align 8, !dbg !8627
  %6 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !8628
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !8629
  %call = call %struct.version_info* @name_info(%struct.ivopts_data* %5, %union.tree_node* %7), !dbg !8630
  store %struct.version_info* %call, %struct.version_info** %info, align 8, !dbg !8631
  %8 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !8632
  %inv_id = getelementptr inbounds %struct.version_info, %struct.version_info* %8, i32 0, i32 3, !dbg !8634
  %9 = load i32, i32* %inv_id, align 4, !dbg !8634
  %tobool = icmp ne i32 %9, 0, !dbg !8632
  br i1 %tobool, label %lor.lhs.false, label %if.then2, !dbg !8635

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !8636
  %has_nonlin_use = getelementptr inbounds %struct.version_info, %struct.version_info* %10, i32 0, i32 2, !dbg !8637
  %11 = load i8, i8* %has_nonlin_use, align 8, !dbg !8637
  %conv = zext i8 %11 to i32, !dbg !8636
  %tobool1 = icmp ne i32 %conv, 0, !dbg !8636
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !8638

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8639
  br label %return, !dbg !8639

if.end3:                                          ; preds = %lor.lhs.false
  %12 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on, align 8, !dbg !8640
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %12, align 8, !dbg !8642
  %tobool4 = icmp ne %struct.bitmap_head_def* %13, null, !dbg !8642
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !8643

if.then5:                                         ; preds = %if.end3
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !8644
  %14 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on, align 8, !dbg !8645
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %14, align 8, !dbg !8646
  br label %if.end7, !dbg !8647

if.end7:                                          ; preds = %if.then5, %if.end3
  %15 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on, align 8, !dbg !8648
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %15, align 8, !dbg !8649
  %17 = load %struct.version_info*, %struct.version_info** %info, align 8, !dbg !8650
  %inv_id8 = getelementptr inbounds %struct.version_info, %struct.version_info* %17, i32 0, i32 3, !dbg !8651
  %18 = load i32, i32* %inv_id8, align 4, !dbg !8651
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %16, i32 %18), !dbg !8652
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8653
  br label %return, !dbg !8653

return:                                           ; preds = %if.end7, %if.then2, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8654
  ret %union.tree_node* %19, !dbg !8654
}

declare dso_local %union.tree_node* @unsigned_type_for(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_iv_cand_p_base_length(%struct.VEC_iv_cand_p_base* %vec_) #0 !dbg !8655 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_base*, align 8
  store %struct.VEC_iv_cand_p_base* %vec_, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_base** %vec_.addr, metadata !8660, metadata !DIExpression()), !dbg !8661
  %0 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8661
  %tobool = icmp ne %struct.VEC_iv_cand_p_base* %0, null, !dbg !8661
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8661

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8661
  %num = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %1, i32 0, i32 0, !dbg !8661
  %2 = load i32, i32* %num, align 8, !dbg !8661
  br label %cond.end, !dbg !8661

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8661
  ret i32 %cond, !dbg !8661
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_cand* @VEC_iv_cand_p_base_index(%struct.VEC_iv_cand_p_base* %vec_, i32 %ix_) #0 !dbg !8662 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_iv_cand_p_base* %vec_, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_base** %vec_.addr, metadata !8665, metadata !DIExpression()), !dbg !8666
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8667, metadata !DIExpression()), !dbg !8666
  %0 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8666
  %tobool = icmp ne %struct.VEC_iv_cand_p_base* %0, null, !dbg !8666
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8666

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8666
  %2 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8666
  %num = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %2, i32 0, i32 0, !dbg !8666
  %3 = load i32, i32* %num, align 8, !dbg !8666
  %cmp = icmp ult i32 %1, %3, !dbg !8666
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8668
  %land.ext = zext i1 %4 to i32, !dbg !8666
  %5 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8666
  %vec = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %5, i32 0, i32 2, !dbg !8666
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8666
  %idxprom = zext i32 %6 to i64, !dbg !8666
  %arrayidx = getelementptr inbounds [1 x %struct.iv_cand*], [1 x %struct.iv_cand*]* %vec, i64 0, i64 %idxprom, !dbg !8666
  %7 = load %struct.iv_cand*, %struct.iv_cand** %arrayidx, align 8, !dbg !8666
  ret %struct.iv_cand* %7, !dbg !8666
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_iv_cand_p_heap_reserve(%struct.VEC_iv_cand_p_heap** %vec_, i32 %alloc_) #0 !dbg !8669 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_iv_cand_p_heap** %vec_, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_heap*** %vec_.addr, metadata !8672, metadata !DIExpression()), !dbg !8673
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8674, metadata !DIExpression()), !dbg !8673
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !8675, metadata !DIExpression()), !dbg !8673
  %0 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8673
  %1 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %0, align 8, !dbg !8673
  %tobool = icmp ne %struct.VEC_iv_cand_p_heap* %1, null, !dbg !8673
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8673

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8673
  %3 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %2, align 8, !dbg !8673
  %base = getelementptr inbounds %struct.VEC_iv_cand_p_heap, %struct.VEC_iv_cand_p_heap* %3, i32 0, i32 0, !dbg !8673
  br label %cond.end, !dbg !8673

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8673

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_iv_cand_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8673
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !8673
  %call = call i32 @VEC_iv_cand_p_base_space(%struct.VEC_iv_cand_p_base* %cond, i32 %4), !dbg !8673
  %tobool1 = icmp ne i32 %call, 0, !dbg !8673
  %lnot = xor i1 %tobool1, true, !dbg !8673
  %lnot.ext = zext i1 %lnot to i32, !dbg !8673
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !8673
  %5 = load i32, i32* %extend, align 4, !dbg !8676
  %tobool2 = icmp ne i32 %5, 0, !dbg !8676
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8673

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8676
  %7 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %6, align 8, !dbg !8676
  %8 = bitcast %struct.VEC_iv_cand_p_heap* %7 to i8*, !dbg !8676
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !8676
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !8676
  %10 = bitcast i8* %call3 to %struct.VEC_iv_cand_p_heap*, !dbg !8676
  %11 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !8676
  store %struct.VEC_iv_cand_p_heap* %10, %struct.VEC_iv_cand_p_heap** %11, align 8, !dbg !8676
  br label %if.end, !dbg !8676

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !8673
  ret i32 %12, !dbg !8673
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_cand** @VEC_iv_cand_p_base_quick_push(%struct.VEC_iv_cand_p_base* %vec_, %struct.iv_cand* %obj_) #0 !dbg !8678 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_base*, align 8
  %obj_.addr = alloca %struct.iv_cand*, align 8
  %slot_ = alloca %struct.iv_cand**, align 8
  store %struct.VEC_iv_cand_p_base* %vec_, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_base** %vec_.addr, metadata !8682, metadata !DIExpression()), !dbg !8683
  store %struct.iv_cand* %obj_, %struct.iv_cand** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %obj_.addr, metadata !8684, metadata !DIExpression()), !dbg !8683
  call void @llvm.dbg.declare(metadata %struct.iv_cand*** %slot_, metadata !8685, metadata !DIExpression()), !dbg !8683
  %0 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8683
  %num = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %0, i32 0, i32 0, !dbg !8683
  %1 = load i32, i32* %num, align 8, !dbg !8683
  %2 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8683
  %alloc = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %2, i32 0, i32 1, !dbg !8683
  %3 = load i32, i32* %alloc, align 4, !dbg !8683
  %cmp = icmp ult i32 %1, %3, !dbg !8683
  %conv = zext i1 %cmp to i32, !dbg !8683
  %4 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8683
  %vec = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %4, i32 0, i32 2, !dbg !8683
  %5 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8683
  %num1 = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %5, i32 0, i32 0, !dbg !8683
  %6 = load i32, i32* %num1, align 8, !dbg !8683
  %inc = add i32 %6, 1, !dbg !8683
  store i32 %inc, i32* %num1, align 8, !dbg !8683
  %idxprom = zext i32 %6 to i64, !dbg !8683
  %arrayidx = getelementptr inbounds [1 x %struct.iv_cand*], [1 x %struct.iv_cand*]* %vec, i64 0, i64 %idxprom, !dbg !8683
  store %struct.iv_cand** %arrayidx, %struct.iv_cand*** %slot_, align 8, !dbg !8683
  %7 = load %struct.iv_cand*, %struct.iv_cand** %obj_.addr, align 8, !dbg !8683
  %8 = load %struct.iv_cand**, %struct.iv_cand*** %slot_, align 8, !dbg !8683
  store %struct.iv_cand* %7, %struct.iv_cand** %8, align 8, !dbg !8683
  %9 = load %struct.iv_cand**, %struct.iv_cand*** %slot_, align 8, !dbg !8683
  ret %struct.iv_cand** %9, !dbg !8683
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_iv_cand_p_base_space(%struct.VEC_iv_cand_p_base* %vec_, i32 %alloc_) #0 !dbg !8686 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_iv_cand_p_base* %vec_, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_base** %vec_.addr, metadata !8689, metadata !DIExpression()), !dbg !8690
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8691, metadata !DIExpression()), !dbg !8690
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8690
  %cmp = icmp sge i32 %0, 0, !dbg !8690
  %conv = zext i1 %cmp to i32, !dbg !8690
  %1 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8690
  %tobool = icmp ne %struct.VEC_iv_cand_p_base* %1, null, !dbg !8690
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8690

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8690
  %alloc = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %2, i32 0, i32 1, !dbg !8690
  %3 = load i32, i32* %alloc, align 4, !dbg !8690
  %4 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !8690
  %num = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %4, i32 0, i32 0, !dbg !8690
  %5 = load i32, i32* %num, align 8, !dbg !8690
  %sub = sub i32 %3, %5, !dbg !8690
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !8690
  %cmp1 = icmp uge i32 %sub, %6, !dbg !8690
  %conv2 = zext i1 %cmp1 to i32, !dbg !8690
  br label %cond.end, !dbg !8690

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !8690
  %tobool3 = icmp ne i32 %7, 0, !dbg !8690
  %lnot = xor i1 %tobool3, true, !dbg !8690
  %lnot.ext = zext i1 %lnot to i32, !dbg !8690
  br label %cond.end, !dbg !8690

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8690
  ret i32 %cond, !dbg !8690
}

declare dso_local zeroext i8 @empty_block_p(%struct.basic_block_def*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @cst_and_fits_in_hwi(%union.tree_node*) #2

declare dso_local i64 @int_cst_value(%union.tree_node*) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_old_iv_candidates(%struct.ivopts_data* %data, %struct.iv* %iv) #0 !dbg !8692 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %iv.addr = alloca %struct.iv*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %cand = alloca %struct.iv_cand*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8695, metadata !DIExpression()), !dbg !8696
  store %struct.iv* %iv, %struct.iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv** %iv.addr, metadata !8697, metadata !DIExpression()), !dbg !8698
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8699, metadata !DIExpression()), !dbg !8700
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8701, metadata !DIExpression()), !dbg !8702
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !8703, metadata !DIExpression()), !dbg !8704
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8705
  %1 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8706
  %base = getelementptr inbounds %struct.iv, %struct.iv* %1, i32 0, i32 0, !dbg !8707
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8707
  %3 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8708
  %step = getelementptr inbounds %struct.iv, %struct.iv* %3, i32 0, i32 2, !dbg !8709
  %4 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8709
  call void @add_candidate(%struct.ivopts_data* %0, %union.tree_node* %2, %union.tree_node* %4, i8 zeroext 1, %struct.iv_use* null), !dbg !8710
  %5 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8711
  %base1 = getelementptr inbounds %struct.iv, %struct.iv* %5, i32 0, i32 0, !dbg !8711
  %6 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !8711
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !8711
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8711
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8711
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !8711
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8711
  %bf.load = load i64, i64* %8, align 8, !dbg !8711
  %bf.clear = and i64 %bf.load, 65535, !dbg !8711
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8711
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !8711
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8711

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8711
  %base3 = getelementptr inbounds %struct.iv, %struct.iv* %9, i32 0, i32 0, !dbg !8711
  %10 = load %union.tree_node*, %union.tree_node** %base3, align 8, !dbg !8711
  %common4 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !8711
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !8711
  %11 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !8711
  %base6 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8711
  %12 = bitcast %struct.tree_base* %base6 to i64*, !dbg !8711
  %bf.load7 = load i64, i64* %12, align 8, !dbg !8711
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !8711
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !8711
  %cmp10 = icmp eq i32 %bf.cast9, 12, !dbg !8711
  br i1 %cmp10, label %if.then, label %if.else, !dbg !8713

if.then:                                          ; preds = %lor.lhs.false, %entry
  %13 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8714
  %call = call %union.tree_node* @size_int_kind(i64 0, i32 0), !dbg !8715
  %14 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8716
  %step11 = getelementptr inbounds %struct.iv, %struct.iv* %14, i32 0, i32 2, !dbg !8717
  %15 = load %union.tree_node*, %union.tree_node** %step11, align 8, !dbg !8717
  call void @add_candidate(%struct.ivopts_data* %13, %union.tree_node* %call, %union.tree_node* %15, i8 zeroext 1, %struct.iv_use* null), !dbg !8718
  br label %if.end, !dbg !8718

if.else:                                          ; preds = %lor.lhs.false
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8719
  %17 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8720
  %base12 = getelementptr inbounds %struct.iv, %struct.iv* %17, i32 0, i32 0, !dbg !8720
  %18 = load %union.tree_node*, %union.tree_node** %base12, align 8, !dbg !8720
  %common13 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !8720
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !8720
  %19 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !8720
  %call15 = call %union.tree_node* @build_int_cst(%union.tree_node* %19, i64 0), !dbg !8721
  %20 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8722
  %step16 = getelementptr inbounds %struct.iv, %struct.iv* %20, i32 0, i32 2, !dbg !8723
  %21 = load %union.tree_node*, %union.tree_node** %step16, align 8, !dbg !8723
  call void @add_candidate(%struct.ivopts_data* %16, %union.tree_node* %call15, %union.tree_node* %21, i8 zeroext 1, %struct.iv_use* null), !dbg !8724
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8725
  %ssa_name = getelementptr inbounds %struct.iv, %struct.iv* %22, i32 0, i32 3, !dbg !8725
  %23 = load %union.tree_node*, %union.tree_node** %ssa_name, align 8, !dbg !8725
  %ssa_name17 = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !8725
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name17, i32 0, i32 2, !dbg !8725
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8725
  store %union.gimple_statement_d* %24, %union.gimple_statement_d** %phi, align 8, !dbg !8726
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8727
  %call18 = call i32 @gimple_code(%union.gimple_statement_d* %25), !dbg !8729
  %cmp19 = icmp eq i32 %call18, 16, !dbg !8730
  br i1 %cmp19, label %if.then20, label %if.end30, !dbg !8731

if.then20:                                        ; preds = %if.end
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8732
  %27 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8732
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %27, i32 0, i32 0, !dbg !8732
  %28 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !8732
  %call21 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %28), !dbg !8732
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call21, i32 0, i32 6, !dbg !8732
  %29 = load i32, i32* %dest_idx, align 4, !dbg !8732
  %call22 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %26, i32 %29), !dbg !8732
  %call23 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call22), !dbg !8732
  store %union.tree_node* %call23, %union.tree_node** %def, align 8, !dbg !8734
  %30 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8735
  %31 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8736
  %base24 = getelementptr inbounds %struct.iv, %struct.iv* %31, i32 0, i32 0, !dbg !8737
  %32 = load %union.tree_node*, %union.tree_node** %base24, align 8, !dbg !8737
  %33 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8738
  %step25 = getelementptr inbounds %struct.iv, %struct.iv* %33, i32 0, i32 2, !dbg !8739
  %34 = load %union.tree_node*, %union.tree_node** %step25, align 8, !dbg !8739
  %35 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8740
  %ssa_name26 = bitcast %union.tree_node* %35 to %struct.tree_ssa_name*, !dbg !8740
  %def_stmt27 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name26, i32 0, i32 2, !dbg !8740
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt27, align 8, !dbg !8740
  %call28 = call %struct.iv_cand* @add_candidate_1(%struct.ivopts_data* %30, %union.tree_node* %32, %union.tree_node* %34, i8 zeroext 1, i32 4, %struct.iv_use* null, %union.gimple_statement_d* %36), !dbg !8741
  store %struct.iv_cand* %call28, %struct.iv_cand** %cand, align 8, !dbg !8742
  %37 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8743
  %ssa_name29 = getelementptr inbounds %struct.iv, %struct.iv* %37, i32 0, i32 3, !dbg !8744
  %38 = load %union.tree_node*, %union.tree_node** %ssa_name29, align 8, !dbg !8744
  %39 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8745
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %39, i32 0, i32 4, !dbg !8746
  store %union.tree_node* %38, %union.tree_node** %var_before, align 8, !dbg !8747
  %40 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8748
  %41 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !8749
  %var_after = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %41, i32 0, i32 5, !dbg !8750
  store %union.tree_node* %40, %union.tree_node** %var_after, align 8, !dbg !8751
  br label %if.end30, !dbg !8752

if.end30:                                         ; preds = %if.then20, %if.end
  ret void, !dbg !8753
}

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_iv_value_candidates(%struct.ivopts_data* %data, %struct.iv* %iv, %struct.iv_use* %use) #0 !dbg !8754 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %iv.addr = alloca %struct.iv*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %offset = alloca i64, align 8
  %base = alloca %union.tree_node*, align 8
  %basetype = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !8757, metadata !DIExpression()), !dbg !8758
  store %struct.iv* %iv, %struct.iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv** %iv.addr, metadata !8759, metadata !DIExpression()), !dbg !8760
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !8761, metadata !DIExpression()), !dbg !8762
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !8763, metadata !DIExpression()), !dbg !8764
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !8765, metadata !DIExpression()), !dbg !8766
  call void @llvm.dbg.declare(metadata %union.tree_node** %basetype, metadata !8767, metadata !DIExpression()), !dbg !8768
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8769
  %1 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8770
  %base1 = getelementptr inbounds %struct.iv, %struct.iv* %1, i32 0, i32 0, !dbg !8771
  %2 = load %union.tree_node*, %union.tree_node** %base1, align 8, !dbg !8771
  %3 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8772
  %step = getelementptr inbounds %struct.iv, %struct.iv* %3, i32 0, i32 2, !dbg !8773
  %4 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8773
  %5 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8774
  call void @add_candidate(%struct.ivopts_data* %0, %union.tree_node* %2, %union.tree_node* %4, i8 zeroext 0, %struct.iv_use* %5), !dbg !8775
  %6 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8776
  %base2 = getelementptr inbounds %struct.iv, %struct.iv* %6, i32 0, i32 0, !dbg !8776
  %7 = load %union.tree_node*, %union.tree_node** %base2, align 8, !dbg !8776
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !8776
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8776
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8776
  store %union.tree_node* %8, %union.tree_node** %basetype, align 8, !dbg !8777
  %9 = load %union.tree_node*, %union.tree_node** %basetype, align 8, !dbg !8778
  %base3 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !8778
  %10 = bitcast %struct.tree_base* %base3 to i64*, !dbg !8778
  %bf.load = load i64, i64* %10, align 8, !dbg !8778
  %bf.clear = and i64 %bf.load, 65535, !dbg !8778
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8778
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !8778
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8778

lor.lhs.false:                                    ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %basetype, align 8, !dbg !8778
  %base4 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8778
  %12 = bitcast %struct.tree_base* %base4 to i64*, !dbg !8778
  %bf.load5 = load i64, i64* %12, align 8, !dbg !8778
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !8778
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !8778
  %cmp8 = icmp eq i32 %bf.cast7, 12, !dbg !8778
  br i1 %cmp8, label %if.then, label %if.end, !dbg !8780

if.then:                                          ; preds = %lor.lhs.false, %entry
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !8781
  store %union.tree_node* %13, %union.tree_node** %basetype, align 8, !dbg !8782
  br label %if.end, !dbg !8783

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %14 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8784
  %15 = load %union.tree_node*, %union.tree_node** %basetype, align 8, !dbg !8785
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %15, i64 0), !dbg !8786
  %16 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8787
  %step9 = getelementptr inbounds %struct.iv, %struct.iv* %16, i32 0, i32 2, !dbg !8788
  %17 = load %union.tree_node*, %union.tree_node** %step9, align 8, !dbg !8788
  %18 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8789
  call void @add_candidate(%struct.ivopts_data* %14, %union.tree_node* %call, %union.tree_node* %17, i8 zeroext 1, %struct.iv_use* %18), !dbg !8790
  %19 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8791
  %base10 = getelementptr inbounds %struct.iv, %struct.iv* %19, i32 0, i32 0, !dbg !8792
  %20 = load %union.tree_node*, %union.tree_node** %base10, align 8, !dbg !8792
  %call11 = call %union.tree_node* @strip_offset(%union.tree_node* %20, i64* %offset), !dbg !8793
  store %union.tree_node* %call11, %union.tree_node** %base, align 8, !dbg !8794
  %21 = load i64, i64* %offset, align 8, !dbg !8795
  %tobool = icmp ne i64 %21, 0, !dbg !8795
  br i1 %tobool, label %if.then15, label %lor.lhs.false12, !dbg !8797

lor.lhs.false12:                                  ; preds = %if.end
  %22 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8798
  %23 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8799
  %base13 = getelementptr inbounds %struct.iv, %struct.iv* %23, i32 0, i32 0, !dbg !8800
  %24 = load %union.tree_node*, %union.tree_node** %base13, align 8, !dbg !8800
  %cmp14 = icmp ne %union.tree_node* %22, %24, !dbg !8801
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !8802

if.then15:                                        ; preds = %lor.lhs.false12, %if.end
  %25 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !8803
  %26 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !8804
  %27 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !8805
  %step16 = getelementptr inbounds %struct.iv, %struct.iv* %27, i32 0, i32 2, !dbg !8806
  %28 = load %union.tree_node*, %union.tree_node** %step16, align 8, !dbg !8806
  %29 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !8807
  call void @add_candidate(%struct.ivopts_data* %25, %union.tree_node* %26, %union.tree_node* %28, i8 zeroext 0, %struct.iv_use* %29), !dbg !8808
  br label %if.end17, !dbg !8808

if.end17:                                         ; preds = %if.then15, %lor.lhs.false12
  ret void, !dbg !8809
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @strip_offset(%union.tree_node* %expr, i64* %offset) #0 !dbg !8810 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8814, metadata !DIExpression()), !dbg !8815
  store i64* %offset, i64** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %offset.addr, metadata !8816, metadata !DIExpression()), !dbg !8817
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8818
  %1 = load i64*, i64** %offset.addr, align 8, !dbg !8819
  %call = call %union.tree_node* @strip_offset_1(%union.tree_node* %0, i8 zeroext 0, i8 zeroext 0, i64* %1), !dbg !8820
  ret %union.tree_node* %call, !dbg !8821
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @strip_offset_1(%union.tree_node* %expr, i8 zeroext %inside_addr, i8 zeroext %top_compref, i64* %offset) #0 !dbg !8822 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %inside_addr.addr = alloca i8, align 1
  %top_compref.addr = alloca i8, align 1
  %offset.addr = alloca i64*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %orig_type = alloca %union.tree_node*, align 8
  %off0 = alloca i64, align 8
  %off1 = alloca i64, align 8
  %st = alloca i64, align 8
  %orig_expr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8825, metadata !DIExpression()), !dbg !8826
  store i8 %inside_addr, i8* %inside_addr.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %inside_addr.addr, metadata !8827, metadata !DIExpression()), !dbg !8828
  store i8 %top_compref, i8* %top_compref.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %top_compref.addr, metadata !8829, metadata !DIExpression()), !dbg !8830
  store i64* %offset, i64** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %offset.addr, metadata !8831, metadata !DIExpression()), !dbg !8832
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8833, metadata !DIExpression()), !dbg !8834
  store %union.tree_node* null, %union.tree_node** %op0, align 8, !dbg !8834
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !8835, metadata !DIExpression()), !dbg !8836
  store %union.tree_node* null, %union.tree_node** %op1, align 8, !dbg !8836
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !8837, metadata !DIExpression()), !dbg !8838
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !8839, metadata !DIExpression()), !dbg !8840
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8841, metadata !DIExpression()), !dbg !8842
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8843, metadata !DIExpression()), !dbg !8844
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_type, metadata !8845, metadata !DIExpression()), !dbg !8846
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8847
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !8847
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8847
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8847
  store %union.tree_node* %1, %union.tree_node** %orig_type, align 8, !dbg !8846
  call void @llvm.dbg.declare(metadata i64* %off0, metadata !8848, metadata !DIExpression()), !dbg !8849
  call void @llvm.dbg.declare(metadata i64* %off1, metadata !8850, metadata !DIExpression()), !dbg !8851
  call void @llvm.dbg.declare(metadata i64* %st, metadata !8852, metadata !DIExpression()), !dbg !8853
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_expr, metadata !8854, metadata !DIExpression()), !dbg !8855
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8856
  store %union.tree_node* %2, %union.tree_node** %orig_expr, align 8, !dbg !8855
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8857
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %3), !dbg !8857
  store %union.tree_node* %call, %union.tree_node** %expr.addr, align 8, !dbg !8857
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8858
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !8858
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !8858
  %5 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !8858
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !8859
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8860
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8860
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !8860
  %bf.load = load i64, i64* %7, align 8, !dbg !8860
  %bf.clear = and i64 %bf.load, 65535, !dbg !8860
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8860
  store i32 %bf.cast, i32* %code, align 4, !dbg !8861
  %8 = load i64*, i64** %offset.addr, align 8, !dbg !8862
  store i64 0, i64* %8, align 8, !dbg !8863
  %9 = load i32, i32* %code, align 4, !dbg !8864
  switch i32 %9, label %sw.default [
    i32 23, label %sw.bb
    i32 66, label %sw.bb9
    i32 63, label %sw.bb9
    i32 64, label %sw.bb9
    i32 65, label %sw.bb41
    i32 45, label %sw.bb67
    i32 46, label %sw.bb67
    i32 41, label %sw.bb93
    i32 121, label %sw.bb112
    i32 47, label %sw.bb127
  ], !dbg !8865

sw.bb:                                            ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8866
  %call4 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %10), !dbg !8869
  %tobool = icmp ne i8 %call4, 0, !dbg !8869
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8870

lor.lhs.false:                                    ; preds = %sw.bb
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8871
  %call5 = call i32 @integer_zerop(%union.tree_node* %11), !dbg !8872
  %tobool6 = icmp ne i32 %call5, 0, !dbg !8872
  br i1 %tobool6, label %if.then, label %if.end, !dbg !8873

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  %12 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !8874
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !8875
  br label %return, !dbg !8875

if.end:                                           ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8876
  %call7 = call i64 @int_cst_value(%union.tree_node* %13), !dbg !8877
  %14 = load i64*, i64** %offset.addr, align 8, !dbg !8878
  store i64 %call7, i64* %14, align 8, !dbg !8879
  %15 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !8880
  %call8 = call %union.tree_node* @build_int_cst(%union.tree_node* %15, i64 0), !dbg !8881
  store %union.tree_node* %call8, %union.tree_node** %retval, align 8, !dbg !8882
  br label %return, !dbg !8882

sw.bb9:                                           ; preds = %entry, %entry, %entry
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8883
  %exp = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !8883
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8883
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8883
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8883
  store %union.tree_node* %17, %union.tree_node** %op0, align 8, !dbg !8884
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8885
  %exp10 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !8885
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !8885
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !8885
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !8885
  store %union.tree_node* %19, %union.tree_node** %op1, align 8, !dbg !8886
  %20 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8887
  %call13 = call %union.tree_node* @strip_offset_1(%union.tree_node* %20, i8 zeroext 0, i8 zeroext 0, i64* %off0), !dbg !8888
  store %union.tree_node* %call13, %union.tree_node** %op0, align 8, !dbg !8889
  %21 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8890
  %call14 = call %union.tree_node* @strip_offset_1(%union.tree_node* %21, i8 zeroext 0, i8 zeroext 0, i64* %off1), !dbg !8891
  store %union.tree_node* %call14, %union.tree_node** %op1, align 8, !dbg !8892
  %22 = load i32, i32* %code, align 4, !dbg !8893
  %cmp = icmp eq i32 %22, 64, !dbg !8894
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8893

cond.true:                                        ; preds = %sw.bb9
  %23 = load i64, i64* %off0, align 8, !dbg !8895
  %24 = load i64, i64* %off1, align 8, !dbg !8896
  %sub = sub i64 %23, %24, !dbg !8897
  br label %cond.end, !dbg !8893

cond.false:                                       ; preds = %sw.bb9
  %25 = load i64, i64* %off0, align 8, !dbg !8898
  %26 = load i64, i64* %off1, align 8, !dbg !8899
  %add = add i64 %25, %26, !dbg !8900
  br label %cond.end, !dbg !8893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ %add, %cond.false ], !dbg !8893
  %27 = load i64*, i64** %offset.addr, align 8, !dbg !8901
  store i64 %cond, i64* %27, align 8, !dbg !8902
  %28 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8903
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8905
  %exp15 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !8905
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !8905
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 0, !dbg !8905
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !8905
  %cmp18 = icmp eq %union.tree_node* %28, %30, !dbg !8906
  br i1 %cmp18, label %land.lhs.true, label %if.end24, !dbg !8907

land.lhs.true:                                    ; preds = %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8908
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8909
  %exp19 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !8909
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !8909
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 1, !dbg !8909
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !8909
  %cmp22 = icmp eq %union.tree_node* %31, %33, !dbg !8910
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !8911

if.then23:                                        ; preds = %land.lhs.true
  %34 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !8912
  store %union.tree_node* %34, %union.tree_node** %retval, align 8, !dbg !8913
  br label %return, !dbg !8913

if.end24:                                         ; preds = %land.lhs.true, %cond.end
  %35 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8914
  %call25 = call i32 @integer_zerop(%union.tree_node* %35), !dbg !8916
  %tobool26 = icmp ne i32 %call25, 0, !dbg !8916
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !8917

if.then27:                                        ; preds = %if.end24
  %36 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8918
  store %union.tree_node* %36, %union.tree_node** %expr.addr, align 8, !dbg !8919
  br label %if.end39, !dbg !8920

if.else:                                          ; preds = %if.end24
  %37 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8921
  %call28 = call i32 @integer_zerop(%union.tree_node* %37), !dbg !8923
  %tobool29 = icmp ne i32 %call28, 0, !dbg !8923
  br i1 %tobool29, label %if.then30, label %if.else36, !dbg !8924

if.then30:                                        ; preds = %if.else
  %38 = load i32, i32* %code, align 4, !dbg !8925
  %cmp31 = icmp eq i32 %38, 64, !dbg !8928
  br i1 %cmp31, label %if.then32, label %if.else34, !dbg !8929

if.then32:                                        ; preds = %if.then30
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8930
  %40 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8930
  %call33 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %39, %union.tree_node* %40), !dbg !8930
  store %union.tree_node* %call33, %union.tree_node** %expr.addr, align 8, !dbg !8931
  br label %if.end35, !dbg !8932

if.else34:                                        ; preds = %if.then30
  %41 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8933
  store %union.tree_node* %41, %union.tree_node** %expr.addr, align 8, !dbg !8934
  br label %if.end35

if.end35:                                         ; preds = %if.else34, %if.then32
  br label %if.end38, !dbg !8935

if.else36:                                        ; preds = %if.else
  %42 = load i32, i32* %code, align 4, !dbg !8936
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8936
  %44 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8936
  %45 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8936
  %call37 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %42, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !8936
  store %union.tree_node* %call37, %union.tree_node** %expr.addr, align 8, !dbg !8937
  br label %if.end38

if.end38:                                         ; preds = %if.else36, %if.end35
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then27
  %46 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !8938
  %47 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8938
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %46, %union.tree_node* %47), !dbg !8938
  store %union.tree_node* %call40, %union.tree_node** %retval, align 8, !dbg !8939
  br label %return, !dbg !8939

sw.bb41:                                          ; preds = %entry
  %48 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8940
  %exp42 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !8940
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 3, !dbg !8940
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i64 0, i64 1, !dbg !8940
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !8940
  store %union.tree_node* %49, %union.tree_node** %op1, align 8, !dbg !8941
  %50 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8942
  %call45 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %50), !dbg !8944
  %tobool46 = icmp ne i8 %call45, 0, !dbg !8944
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !8945

if.then47:                                        ; preds = %sw.bb41
  %51 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !8946
  store %union.tree_node* %51, %union.tree_node** %retval, align 8, !dbg !8947
  br label %return, !dbg !8947

if.end48:                                         ; preds = %sw.bb41
  %52 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8948
  %exp49 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !8948
  %operands50 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp49, i32 0, i32 3, !dbg !8948
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands50, i64 0, i64 0, !dbg !8948
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx51, align 8, !dbg !8948
  store %union.tree_node* %53, %union.tree_node** %op0, align 8, !dbg !8949
  %54 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8950
  %call52 = call %union.tree_node* @strip_offset_1(%union.tree_node* %54, i8 zeroext 0, i8 zeroext 0, i64* %off0), !dbg !8951
  store %union.tree_node* %call52, %union.tree_node** %op0, align 8, !dbg !8952
  %55 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8953
  %56 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8955
  %exp53 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !8955
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !8955
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 0, !dbg !8955
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !8955
  %cmp56 = icmp eq %union.tree_node* %55, %57, !dbg !8956
  br i1 %cmp56, label %if.then57, label %if.end58, !dbg !8957

if.then57:                                        ; preds = %if.end48
  %58 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !8958
  store %union.tree_node* %58, %union.tree_node** %retval, align 8, !dbg !8959
  br label %return, !dbg !8959

if.end58:                                         ; preds = %if.end48
  %59 = load i64, i64* %off0, align 8, !dbg !8960
  %60 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8961
  %call59 = call i64 @int_cst_value(%union.tree_node* %60), !dbg !8962
  %mul = mul i64 %59, %call59, !dbg !8963
  %61 = load i64*, i64** %offset.addr, align 8, !dbg !8964
  store i64 %mul, i64* %61, align 8, !dbg !8965
  %62 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8966
  %call60 = call i32 @integer_zerop(%union.tree_node* %62), !dbg !8968
  %tobool61 = icmp ne i32 %call60, 0, !dbg !8968
  br i1 %tobool61, label %if.then62, label %if.else63, !dbg !8969

if.then62:                                        ; preds = %if.end58
  %63 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8970
  store %union.tree_node* %63, %union.tree_node** %expr.addr, align 8, !dbg !8971
  br label %if.end65, !dbg !8972

if.else63:                                        ; preds = %if.end58
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8973
  %65 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8973
  %66 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8973
  %call64 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !8973
  store %union.tree_node* %call64, %union.tree_node** %expr.addr, align 8, !dbg !8974
  br label %if.end65

if.end65:                                         ; preds = %if.else63, %if.then62
  %67 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !8975
  %68 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8975
  %call66 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %67, %union.tree_node* %68), !dbg !8975
  store %union.tree_node* %call66, %union.tree_node** %retval, align 8, !dbg !8976
  br label %return, !dbg !8976

sw.bb67:                                          ; preds = %entry, %entry
  %69 = load i8, i8* %inside_addr.addr, align 1, !dbg !8977
  %tobool68 = icmp ne i8 %69, 0, !dbg !8977
  br i1 %tobool68, label %if.end70, label %if.then69, !dbg !8979

if.then69:                                        ; preds = %sw.bb67
  %70 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !8980
  store %union.tree_node* %70, %union.tree_node** %retval, align 8, !dbg !8981
  br label %return, !dbg !8981

if.end70:                                         ; preds = %sw.bb67
  %71 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8982
  %call71 = call %union.tree_node* @array_ref_element_size(%union.tree_node* %71), !dbg !8983
  store %union.tree_node* %call71, %union.tree_node** %step, align 8, !dbg !8984
  %72 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8985
  %call72 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %72), !dbg !8987
  %tobool73 = icmp ne i8 %call72, 0, !dbg !8987
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !8988

if.then74:                                        ; preds = %if.end70
  br label %sw.epilog, !dbg !8989

if.end75:                                         ; preds = %if.end70
  %73 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8990
  %call76 = call i64 @int_cst_value(%union.tree_node* %73), !dbg !8991
  store i64 %call76, i64* %st, align 8, !dbg !8992
  %74 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8993
  %exp77 = bitcast %union.tree_node* %74 to %struct.tree_exp*, !dbg !8993
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !8993
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 1, !dbg !8993
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !8993
  store %union.tree_node* %75, %union.tree_node** %op1, align 8, !dbg !8994
  %76 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8995
  %call80 = call %union.tree_node* @strip_offset_1(%union.tree_node* %76, i8 zeroext 0, i8 zeroext 0, i64* %off1), !dbg !8996
  store %union.tree_node* %call80, %union.tree_node** %op1, align 8, !dbg !8997
  %77 = load i64, i64* %off1, align 8, !dbg !8998
  %78 = load i64, i64* %st, align 8, !dbg !8999
  %mul81 = mul i64 %77, %78, !dbg !9000
  %79 = load i64*, i64** %offset.addr, align 8, !dbg !9001
  store i64 %mul81, i64* %79, align 8, !dbg !9002
  %80 = load i8, i8* %top_compref.addr, align 1, !dbg !9003
  %conv = zext i8 %80 to i32, !dbg !9003
  %tobool82 = icmp ne i32 %conv, 0, !dbg !9003
  br i1 %tobool82, label %land.lhs.true83, label %if.end92, !dbg !9005

land.lhs.true83:                                  ; preds = %if.end75
  %81 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9006
  %call84 = call i32 @integer_zerop(%union.tree_node* %81), !dbg !9007
  %tobool85 = icmp ne i32 %call84, 0, !dbg !9007
  br i1 %tobool85, label %if.then86, label %if.end92, !dbg !9008

if.then86:                                        ; preds = %land.lhs.true83
  %82 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9009
  %exp87 = bitcast %union.tree_node* %82 to %struct.tree_exp*, !dbg !9009
  %operands88 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp87, i32 0, i32 3, !dbg !9009
  %arrayidx89 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands88, i64 0, i64 0, !dbg !9009
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8, !dbg !9009
  store %union.tree_node* %83, %union.tree_node** %op0, align 8, !dbg !9011
  %84 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9012
  %85 = load i8, i8* %inside_addr.addr, align 1, !dbg !9013
  %86 = load i8, i8* %top_compref.addr, align 1, !dbg !9014
  %call90 = call %union.tree_node* @strip_offset_1(%union.tree_node* %84, i8 zeroext %85, i8 zeroext %86, i64* %off0), !dbg !9015
  store %union.tree_node* %call90, %union.tree_node** %op0, align 8, !dbg !9016
  %87 = load i64, i64* %off0, align 8, !dbg !9017
  %88 = load i64*, i64** %offset.addr, align 8, !dbg !9018
  %89 = load i64, i64* %88, align 8, !dbg !9019
  %add91 = add i64 %89, %87, !dbg !9019
  store i64 %add91, i64* %88, align 8, !dbg !9019
  %90 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9020
  store %union.tree_node* %90, %union.tree_node** %retval, align 8, !dbg !9021
  br label %return, !dbg !9021

if.end92:                                         ; preds = %land.lhs.true83, %if.end75
  br label %sw.epilog, !dbg !9022

sw.bb93:                                          ; preds = %entry
  %91 = load i8, i8* %inside_addr.addr, align 1, !dbg !9023
  %tobool94 = icmp ne i8 %91, 0, !dbg !9023
  br i1 %tobool94, label %if.end96, label %if.then95, !dbg !9025

if.then95:                                        ; preds = %sw.bb93
  %92 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !9026
  store %union.tree_node* %92, %union.tree_node** %retval, align 8, !dbg !9027
  br label %return, !dbg !9027

if.end96:                                         ; preds = %sw.bb93
  %93 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9028
  %call97 = call %union.tree_node* @component_ref_field_offset(%union.tree_node* %93), !dbg !9029
  store %union.tree_node* %call97, %union.tree_node** %tmp, align 8, !dbg !9030
  %94 = load i8, i8* %top_compref.addr, align 1, !dbg !9031
  %conv98 = zext i8 %94 to i32, !dbg !9031
  %tobool99 = icmp ne i32 %conv98, 0, !dbg !9031
  br i1 %tobool99, label %land.lhs.true100, label %if.end111, !dbg !9033

land.lhs.true100:                                 ; preds = %if.end96
  %95 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !9034
  %call101 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %95), !dbg !9035
  %conv102 = zext i8 %call101 to i32, !dbg !9035
  %tobool103 = icmp ne i32 %conv102, 0, !dbg !9035
  br i1 %tobool103, label %if.then104, label %if.end111, !dbg !9036

if.then104:                                       ; preds = %land.lhs.true100
  %96 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9037
  %exp105 = bitcast %union.tree_node* %96 to %struct.tree_exp*, !dbg !9037
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !9037
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 0, !dbg !9037
  %97 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !9037
  store %union.tree_node* %97, %union.tree_node** %op0, align 8, !dbg !9039
  %98 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9040
  %99 = load i8, i8* %inside_addr.addr, align 1, !dbg !9041
  %100 = load i8, i8* %top_compref.addr, align 1, !dbg !9042
  %call108 = call %union.tree_node* @strip_offset_1(%union.tree_node* %98, i8 zeroext %99, i8 zeroext %100, i64* %off0), !dbg !9043
  store %union.tree_node* %call108, %union.tree_node** %op0, align 8, !dbg !9044
  %101 = load i64, i64* %off0, align 8, !dbg !9045
  %102 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !9046
  %call109 = call i64 @int_cst_value(%union.tree_node* %102), !dbg !9047
  %add110 = add i64 %101, %call109, !dbg !9048
  %103 = load i64*, i64** %offset.addr, align 8, !dbg !9049
  store i64 %add110, i64* %103, align 8, !dbg !9050
  %104 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9051
  store %union.tree_node* %104, %union.tree_node** %retval, align 8, !dbg !9052
  br label %return, !dbg !9052

if.end111:                                        ; preds = %land.lhs.true100, %if.end96
  br label %sw.epilog, !dbg !9053

sw.bb112:                                         ; preds = %entry
  %105 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9054
  %exp113 = bitcast %union.tree_node* %105 to %struct.tree_exp*, !dbg !9054
  %operands114 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp113, i32 0, i32 3, !dbg !9054
  %arrayidx115 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands114, i64 0, i64 0, !dbg !9054
  %106 = load %union.tree_node*, %union.tree_node** %arrayidx115, align 8, !dbg !9054
  store %union.tree_node* %106, %union.tree_node** %op0, align 8, !dbg !9055
  %107 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9056
  %call116 = call %union.tree_node* @strip_offset_1(%union.tree_node* %107, i8 zeroext 1, i8 zeroext 1, i64* %off0), !dbg !9057
  store %union.tree_node* %call116, %union.tree_node** %op0, align 8, !dbg !9058
  %108 = load i64, i64* %off0, align 8, !dbg !9059
  %109 = load i64*, i64** %offset.addr, align 8, !dbg !9060
  %110 = load i64, i64* %109, align 8, !dbg !9061
  %add117 = add i64 %110, %108, !dbg !9061
  store i64 %add117, i64* %109, align 8, !dbg !9061
  %111 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9062
  %112 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9064
  %exp118 = bitcast %union.tree_node* %112 to %struct.tree_exp*, !dbg !9064
  %operands119 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp118, i32 0, i32 3, !dbg !9064
  %arrayidx120 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands119, i64 0, i64 0, !dbg !9064
  %113 = load %union.tree_node*, %union.tree_node** %arrayidx120, align 8, !dbg !9064
  %cmp121 = icmp eq %union.tree_node* %111, %113, !dbg !9065
  br i1 %cmp121, label %if.then123, label %if.end124, !dbg !9066

if.then123:                                       ; preds = %sw.bb112
  %114 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !9067
  store %union.tree_node* %114, %union.tree_node** %retval, align 8, !dbg !9068
  br label %return, !dbg !9068

if.end124:                                        ; preds = %sw.bb112
  %115 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9069
  %call125 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %115), !dbg !9069
  store %union.tree_node* %call125, %union.tree_node** %expr.addr, align 8, !dbg !9070
  %116 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !9071
  %117 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9071
  %call126 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %116, %union.tree_node* %117), !dbg !9071
  store %union.tree_node* %call126, %union.tree_node** %retval, align 8, !dbg !9072
  br label %return, !dbg !9072

sw.bb127:                                         ; preds = %entry
  store i8 0, i8* %inside_addr.addr, align 1, !dbg !9073
  br label %sw.epilog, !dbg !9074

sw.default:                                       ; preds = %entry
  %118 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !9075
  store %union.tree_node* %118, %union.tree_node** %retval, align 8, !dbg !9076
  br label %return, !dbg !9076

sw.epilog:                                        ; preds = %sw.bb127, %if.end111, %if.end92, %if.then74
  %119 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9077
  %exp128 = bitcast %union.tree_node* %119 to %struct.tree_exp*, !dbg !9077
  %operands129 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp128, i32 0, i32 3, !dbg !9077
  %arrayidx130 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands129, i64 0, i64 0, !dbg !9077
  %120 = load %union.tree_node*, %union.tree_node** %arrayidx130, align 8, !dbg !9077
  store %union.tree_node* %120, %union.tree_node** %op0, align 8, !dbg !9078
  %121 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9079
  %122 = load i8, i8* %inside_addr.addr, align 1, !dbg !9080
  %call131 = call %union.tree_node* @strip_offset_1(%union.tree_node* %121, i8 zeroext %122, i8 zeroext 0, i64* %off0), !dbg !9081
  store %union.tree_node* %call131, %union.tree_node** %op0, align 8, !dbg !9082
  %123 = load i64, i64* %off0, align 8, !dbg !9083
  %124 = load i64*, i64** %offset.addr, align 8, !dbg !9084
  %125 = load i64, i64* %124, align 8, !dbg !9085
  %add132 = add i64 %125, %123, !dbg !9085
  store i64 %add132, i64* %124, align 8, !dbg !9085
  %126 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9086
  %127 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9088
  %exp133 = bitcast %union.tree_node* %127 to %struct.tree_exp*, !dbg !9088
  %operands134 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp133, i32 0, i32 3, !dbg !9088
  %arrayidx135 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands134, i64 0, i64 0, !dbg !9088
  %128 = load %union.tree_node*, %union.tree_node** %arrayidx135, align 8, !dbg !9088
  %cmp136 = icmp eq %union.tree_node* %126, %128, !dbg !9089
  br i1 %cmp136, label %land.lhs.true138, label %if.end147, !dbg !9090

land.lhs.true138:                                 ; preds = %sw.epilog
  %129 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9091
  %tobool139 = icmp ne %union.tree_node* %129, null, !dbg !9091
  br i1 %tobool139, label %lor.lhs.false140, label %if.then146, !dbg !9092

lor.lhs.false140:                                 ; preds = %land.lhs.true138
  %130 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9093
  %131 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9094
  %exp141 = bitcast %union.tree_node* %131 to %struct.tree_exp*, !dbg !9094
  %operands142 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp141, i32 0, i32 3, !dbg !9094
  %arrayidx143 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands142, i64 0, i64 1, !dbg !9094
  %132 = load %union.tree_node*, %union.tree_node** %arrayidx143, align 8, !dbg !9094
  %cmp144 = icmp eq %union.tree_node* %130, %132, !dbg !9095
  br i1 %cmp144, label %if.then146, label %if.end147, !dbg !9096

if.then146:                                       ; preds = %lor.lhs.false140, %land.lhs.true138
  %133 = load %union.tree_node*, %union.tree_node** %orig_expr, align 8, !dbg !9097
  store %union.tree_node* %133, %union.tree_node** %retval, align 8, !dbg !9098
  br label %return, !dbg !9098

if.end147:                                        ; preds = %lor.lhs.false140, %sw.epilog
  %134 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9099
  %call148 = call %union.tree_node* @copy_node_stat(%union.tree_node* %134), !dbg !9099
  store %union.tree_node* %call148, %union.tree_node** %expr.addr, align 8, !dbg !9100
  %135 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9101
  %136 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9102
  %exp149 = bitcast %union.tree_node* %136 to %struct.tree_exp*, !dbg !9102
  %operands150 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp149, i32 0, i32 3, !dbg !9102
  %arrayidx151 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands150, i64 0, i64 0, !dbg !9102
  store %union.tree_node* %135, %union.tree_node** %arrayidx151, align 8, !dbg !9103
  %137 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9104
  %tobool152 = icmp ne %union.tree_node* %137, null, !dbg !9104
  br i1 %tobool152, label %if.then153, label %if.end157, !dbg !9106

if.then153:                                       ; preds = %if.end147
  %138 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9107
  %139 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9108
  %exp154 = bitcast %union.tree_node* %139 to %struct.tree_exp*, !dbg !9108
  %operands155 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp154, i32 0, i32 3, !dbg !9108
  %arrayidx156 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands155, i64 0, i64 1, !dbg !9108
  store %union.tree_node* %138, %union.tree_node** %arrayidx156, align 8, !dbg !9109
  br label %if.end157, !dbg !9108

if.end157:                                        ; preds = %if.then153, %if.end147
  %140 = load %union.tree_node*, %union.tree_node** %orig_type, align 8, !dbg !9110
  %141 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9110
  %call158 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %140, %union.tree_node* %141), !dbg !9110
  store %union.tree_node* %call158, %union.tree_node** %expr.addr, align 8, !dbg !9111
  %142 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9112
  store %union.tree_node* %142, %union.tree_node** %retval, align 8, !dbg !9113
  br label %return, !dbg !9113

return:                                           ; preds = %if.end157, %if.then146, %sw.default, %if.end124, %if.then123, %if.then104, %if.then95, %if.then86, %if.then69, %if.end65, %if.then57, %if.then47, %if.end39, %if.then23, %if.end, %if.then
  %143 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9114
  ret %union.tree_node* %143, !dbg !9114
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !9115 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9116, metadata !DIExpression()), !dbg !9117
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9118
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9119
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !9120
  %1 = load i32, i32* %uid, align 4, !dbg !9120
  ret i32 %1, !dbg !9121
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @autoinc_possible_for_pair(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !9122 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %depends_on = alloca %struct.bitmap_head_def*, align 8
  %can_autoinc = alloca i8, align 1
  %cost = alloca %struct.comp_cost, align 4
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !9125, metadata !DIExpression()), !dbg !9126
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !9127, metadata !DIExpression()), !dbg !9128
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !9129, metadata !DIExpression()), !dbg !9130
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on, metadata !9131, metadata !DIExpression()), !dbg !9132
  call void @llvm.dbg.declare(metadata i8* %can_autoinc, metadata !9133, metadata !DIExpression()), !dbg !9134
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !9135, metadata !DIExpression()), !dbg !9136
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9137
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 1, !dbg !9139
  %1 = load i32, i32* %type, align 4, !dbg !9139
  %cmp = icmp ne i32 %1, 1, !dbg !9140
  br i1 %cmp, label %if.then, label %if.end, !dbg !9141

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9142
  br label %return, !dbg !9142

if.end:                                           ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9143
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9144
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9145
  %call = call i64 @get_computation_cost(%struct.ivopts_data* %2, %struct.iv_use* %3, %struct.iv_cand* %4, i8 zeroext 1, %struct.bitmap_head_def** %depends_on, i8* %can_autoinc), !dbg !9146
  %5 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !9146
  store i64 %call, i64* %5, align 4, !dbg !9146
  %6 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9146
  %7 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !9146
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 8, i1 false), !dbg !9146
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !9147
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %8), !dbg !9147
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on, align 8, !dbg !9147
  %9 = bitcast %struct.comp_cost* %cost to i64*, !dbg !9148
  %10 = load i64, i64* %9, align 4, !dbg !9148
  %call1 = call zeroext i8 @infinite_cost_p(i64 %10), !dbg !9148
  %tobool = icmp ne i8 %call1, 0, !dbg !9148
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !9149

land.rhs:                                         ; preds = %if.end
  %11 = load i8, i8* %can_autoinc, align 1, !dbg !9150
  %conv = zext i8 %11 to i32, !dbg !9150
  %tobool2 = icmp ne i32 %conv, 0, !dbg !9149
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %12 = phi i1 [ false, %if.end ], [ %tobool2, %land.rhs ], !dbg !9151
  %land.ext = zext i1 %12 to i32, !dbg !9149
  %conv3 = trunc i32 %land.ext to i8, !dbg !9152
  store i8 %conv3, i8* %retval, align 1, !dbg !9153
  br label %return, !dbg !9153

return:                                           ; preds = %land.end, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !9154
  ret i8 %13, !dbg !9154
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @get_computation_cost(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand, i8 zeroext %address_p, %struct.bitmap_head_def** %depends_on, i8* %can_autoinc) #0 !dbg !9155 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %address_p.addr = alloca i8, align 1
  %depends_on.addr = alloca %struct.bitmap_head_def**, align 8
  %can_autoinc.addr = alloca i8*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !9158, metadata !DIExpression()), !dbg !9159
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !9160, metadata !DIExpression()), !dbg !9161
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !9162, metadata !DIExpression()), !dbg !9163
  store i8 %address_p, i8* %address_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %address_p.addr, metadata !9164, metadata !DIExpression()), !dbg !9165
  store %struct.bitmap_head_def** %depends_on, %struct.bitmap_head_def*** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on.addr, metadata !9166, metadata !DIExpression()), !dbg !9167
  store i8* %can_autoinc, i8** %can_autoinc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %can_autoinc.addr, metadata !9168, metadata !DIExpression()), !dbg !9169
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9170
  %1 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9171
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9172
  %3 = load i8, i8* %address_p.addr, align 1, !dbg !9173
  %4 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9174
  %5 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9175
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %5, i32 0, i32 3, !dbg !9176
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9176
  %7 = load i8*, i8** %can_autoinc.addr, align 8, !dbg !9177
  %call = call i64 @get_computation_cost_at(%struct.ivopts_data* %0, %struct.iv_use* %1, %struct.iv_cand* %2, i8 zeroext %3, %struct.bitmap_head_def** %4, %union.gimple_statement_d* %6, i8* %7), !dbg !9178
  %8 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9178
  store i64 %call, i64* %8, align 4, !dbg !9178
  %9 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9179
  %10 = load i64, i64* %9, align 4, !dbg !9179
  ret i64 %10, !dbg !9179
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @infinite_cost_p(i64 %cost.coerce) #0 !dbg !9180 {
entry:
  %cost = alloca %struct.comp_cost, align 4
  %0 = bitcast %struct.comp_cost* %cost to i64*
  store i64 %cost.coerce, i64* %0, align 4
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !9183, metadata !DIExpression()), !dbg !9184
  %cost1 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !9185
  %1 = load i32, i32* %cost1, align 4, !dbg !9185
  %cmp = icmp eq i32 %1, 10000000, !dbg !9186
  %conv = zext i1 %cmp to i32, !dbg !9186
  %conv2 = trunc i32 %conv to i8, !dbg !9187
  ret i8 %conv2, !dbg !9188
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @get_computation_cost_at(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand, i8 zeroext %address_p, %struct.bitmap_head_def** %depends_on, %union.gimple_statement_d* %at, i8* %can_autoinc) #0 !dbg !9189 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %address_p.addr = alloca i8, align 1
  %depends_on.addr = alloca %struct.bitmap_head_def**, align 8
  %at.addr = alloca %union.gimple_statement_d*, align 8
  %can_autoinc.addr = alloca i8*, align 8
  %ubase = alloca %union.tree_node*, align 8
  %ustep = alloca %union.tree_node*, align 8
  %cbase = alloca %union.tree_node*, align 8
  %cstep = alloca %union.tree_node*, align 8
  %utype = alloca %union.tree_node*, align 8
  %ctype = alloca %union.tree_node*, align 8
  %cstepi = alloca i64, align 8
  %offset = alloca i64, align 8
  %ratio = alloca i64, align 8
  %aratio = alloca i64, align 8
  %var_present = alloca i8, align 1
  %symbol_present = alloca i8, align 1
  %stmt_is_after_inc = alloca i8, align 1
  %cost = alloca %struct.comp_cost, align 4
  %rat = alloca %struct.double_int, align 8
  %speed = alloca i8, align 1
  %tmp = alloca %struct.comp_cost, align 4
  %tmp72 = alloca %struct.comp_cost, align 4
  %tmp118 = alloca %struct.comp_cost, align 4
  %tmp121 = alloca %struct.comp_cost, align 4
  %tmp142 = alloca %struct.comp_cost, align 4
  %agg.tmp = alloca %struct.comp_cost, align 4
  %agg.tmp157 = alloca %struct.comp_cost, align 4
  %comp = alloca %union.tree_node*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !9192, metadata !DIExpression()), !dbg !9193
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !9194, metadata !DIExpression()), !dbg !9195
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !9196, metadata !DIExpression()), !dbg !9197
  store i8 %address_p, i8* %address_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %address_p.addr, metadata !9198, metadata !DIExpression()), !dbg !9199
  store %struct.bitmap_head_def** %depends_on, %struct.bitmap_head_def*** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on.addr, metadata !9200, metadata !DIExpression()), !dbg !9201
  store %union.gimple_statement_d* %at, %union.gimple_statement_d** %at.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at.addr, metadata !9202, metadata !DIExpression()), !dbg !9203
  store i8* %can_autoinc, i8** %can_autoinc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %can_autoinc.addr, metadata !9204, metadata !DIExpression()), !dbg !9205
  call void @llvm.dbg.declare(metadata %union.tree_node** %ubase, metadata !9206, metadata !DIExpression()), !dbg !9207
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9208
  %iv = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 2, !dbg !9209
  %1 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !9209
  %base = getelementptr inbounds %struct.iv, %struct.iv* %1, i32 0, i32 0, !dbg !9210
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9210
  store %union.tree_node* %2, %union.tree_node** %ubase, align 8, !dbg !9207
  call void @llvm.dbg.declare(metadata %union.tree_node** %ustep, metadata !9211, metadata !DIExpression()), !dbg !9212
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9213
  %iv1 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %3, i32 0, i32 2, !dbg !9214
  %4 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !9214
  %step = getelementptr inbounds %struct.iv, %struct.iv* %4, i32 0, i32 2, !dbg !9215
  %5 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9215
  store %union.tree_node* %5, %union.tree_node** %ustep, align 8, !dbg !9212
  call void @llvm.dbg.declare(metadata %union.tree_node** %cbase, metadata !9216, metadata !DIExpression()), !dbg !9217
  call void @llvm.dbg.declare(metadata %union.tree_node** %cstep, metadata !9218, metadata !DIExpression()), !dbg !9219
  call void @llvm.dbg.declare(metadata %union.tree_node** %utype, metadata !9220, metadata !DIExpression()), !dbg !9221
  %6 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !9222
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !9222
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9222
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9222
  store %union.tree_node* %7, %union.tree_node** %utype, align 8, !dbg !9221
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctype, metadata !9223, metadata !DIExpression()), !dbg !9224
  call void @llvm.dbg.declare(metadata i64* %cstepi, metadata !9225, metadata !DIExpression()), !dbg !9226
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !9227, metadata !DIExpression()), !dbg !9228
  store i64 0, i64* %offset, align 8, !dbg !9228
  call void @llvm.dbg.declare(metadata i64* %ratio, metadata !9229, metadata !DIExpression()), !dbg !9230
  call void @llvm.dbg.declare(metadata i64* %aratio, metadata !9231, metadata !DIExpression()), !dbg !9232
  call void @llvm.dbg.declare(metadata i8* %var_present, metadata !9233, metadata !DIExpression()), !dbg !9234
  call void @llvm.dbg.declare(metadata i8* %symbol_present, metadata !9235, metadata !DIExpression()), !dbg !9236
  call void @llvm.dbg.declare(metadata i8* %stmt_is_after_inc, metadata !9237, metadata !DIExpression()), !dbg !9238
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !9239, metadata !DIExpression()), !dbg !9240
  call void @llvm.dbg.declare(metadata %struct.double_int* %rat, metadata !9241, metadata !DIExpression()), !dbg !9242
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !9243, metadata !DIExpression()), !dbg !9244
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !9245
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %8), !dbg !9246
  %call2 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %call), !dbg !9247
  store i8 %call2, i8* %speed, align 1, !dbg !9244
  %9 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9248
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %9, align 8, !dbg !9249
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9250
  %iv3 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %10, i32 0, i32 6, !dbg !9252
  %11 = load %struct.iv*, %struct.iv** %iv3, align 8, !dbg !9252
  %tobool = icmp ne %struct.iv* %11, null, !dbg !9250
  br i1 %tobool, label %if.end, label %if.then, !dbg !9253

if.then:                                          ; preds = %entry
  %12 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9254
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !9254
  br label %return, !dbg !9255

if.end:                                           ; preds = %entry
  %13 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9256
  %iv4 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %13, i32 0, i32 6, !dbg !9257
  %14 = load %struct.iv*, %struct.iv** %iv4, align 8, !dbg !9257
  %base5 = getelementptr inbounds %struct.iv, %struct.iv* %14, i32 0, i32 0, !dbg !9258
  %15 = load %union.tree_node*, %union.tree_node** %base5, align 8, !dbg !9258
  store %union.tree_node* %15, %union.tree_node** %cbase, align 8, !dbg !9259
  %16 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9260
  %iv6 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %16, i32 0, i32 6, !dbg !9261
  %17 = load %struct.iv*, %struct.iv** %iv6, align 8, !dbg !9261
  %step7 = getelementptr inbounds %struct.iv, %struct.iv* %17, i32 0, i32 2, !dbg !9262
  %18 = load %union.tree_node*, %union.tree_node** %step7, align 8, !dbg !9262
  store %union.tree_node* %18, %union.tree_node** %cstep, align 8, !dbg !9263
  %19 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9264
  %common8 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !9264
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !9264
  %20 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !9264
  store %union.tree_node* %20, %union.tree_node** %ctype, align 8, !dbg !9265
  %21 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9266
  %type10 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !9266
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6, !dbg !9266
  %bf.load = load i32, i32* %precision, align 4, !dbg !9266
  %bf.clear = and i32 %bf.load, 1023, !dbg !9266
  %22 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9268
  %type11 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !9268
  %precision12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !9268
  %bf.load13 = load i32, i32* %precision12, align 4, !dbg !9268
  %bf.clear14 = and i32 %bf.load13, 1023, !dbg !9268
  %cmp = icmp sgt i32 %bf.clear, %bf.clear14, !dbg !9269
  br i1 %cmp, label %if.then15, label %if.end16, !dbg !9270

if.then15:                                        ; preds = %if.end
  %23 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !9271
  br label %return, !dbg !9273

if.end16:                                         ; preds = %if.end
  %24 = load i8, i8* %address_p.addr, align 1, !dbg !9274
  %tobool17 = icmp ne i8 %24, 0, !dbg !9274
  br i1 %tobool17, label %if.then18, label %if.end33, !dbg !9276

if.then18:                                        ; preds = %if.end16
  %25 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9277
  %iv19 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %25, i32 0, i32 2, !dbg !9280
  %26 = load %struct.iv*, %struct.iv** %iv19, align 8, !dbg !9280
  %base_object = getelementptr inbounds %struct.iv, %struct.iv* %26, i32 0, i32 1, !dbg !9281
  %27 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !9281
  %tobool20 = icmp ne %union.tree_node* %27, null, !dbg !9277
  br i1 %tobool20, label %land.lhs.true, label %if.end32, !dbg !9282

land.lhs.true:                                    ; preds = %if.then18
  %28 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9283
  %iv21 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %28, i32 0, i32 6, !dbg !9284
  %29 = load %struct.iv*, %struct.iv** %iv21, align 8, !dbg !9284
  %base_object22 = getelementptr inbounds %struct.iv, %struct.iv* %29, i32 0, i32 1, !dbg !9285
  %30 = load %union.tree_node*, %union.tree_node** %base_object22, align 8, !dbg !9285
  %tobool23 = icmp ne %union.tree_node* %30, null, !dbg !9283
  br i1 %tobool23, label %land.lhs.true24, label %if.end32, !dbg !9286

land.lhs.true24:                                  ; preds = %land.lhs.true
  %31 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9287
  %iv25 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %31, i32 0, i32 2, !dbg !9288
  %32 = load %struct.iv*, %struct.iv** %iv25, align 8, !dbg !9288
  %base_object26 = getelementptr inbounds %struct.iv, %struct.iv* %32, i32 0, i32 1, !dbg !9289
  %33 = load %union.tree_node*, %union.tree_node** %base_object26, align 8, !dbg !9289
  %34 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9290
  %iv27 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %34, i32 0, i32 6, !dbg !9291
  %35 = load %struct.iv*, %struct.iv** %iv27, align 8, !dbg !9291
  %base_object28 = getelementptr inbounds %struct.iv, %struct.iv* %35, i32 0, i32 1, !dbg !9292
  %36 = load %union.tree_node*, %union.tree_node** %base_object28, align 8, !dbg !9292
  %call29 = call i32 @operand_equal_p(%union.tree_node* %33, %union.tree_node* %36, i32 0), !dbg !9293
  %tobool30 = icmp ne i32 %call29, 0, !dbg !9293
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !9294

if.then31:                                        ; preds = %land.lhs.true24
  %37 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !9295
  br label %return, !dbg !9296

if.end32:                                         ; preds = %land.lhs.true24, %land.lhs.true, %if.then18
  br label %if.end33, !dbg !9297

if.end33:                                         ; preds = %if.end32, %if.end16
  %38 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9298
  %type34 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !9298
  %precision35 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type34, i32 0, i32 6, !dbg !9298
  %bf.load36 = load i32, i32* %precision35, align 4, !dbg !9298
  %bf.clear37 = and i32 %bf.load36, 1023, !dbg !9298
  %39 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9300
  %type38 = bitcast %union.tree_node* %39 to %struct.tree_type*, !dbg !9300
  %precision39 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type38, i32 0, i32 6, !dbg !9300
  %bf.load40 = load i32, i32* %precision39, align 4, !dbg !9300
  %bf.clear41 = and i32 %bf.load40, 1023, !dbg !9300
  %cmp42 = icmp slt i32 %bf.clear37, %bf.clear41, !dbg !9301
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !9302

if.then43:                                        ; preds = %if.end33
  br label %fallback, !dbg !9303

if.end44:                                         ; preds = %if.end33
  %40 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !9305
  %call45 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %40), !dbg !9307
  %tobool46 = icmp ne i8 %call45, 0, !dbg !9307
  br i1 %tobool46, label %if.then47, label %if.else, !dbg !9308

if.then47:                                        ; preds = %if.end44
  %41 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !9309
  %call48 = call i64 @int_cst_value(%union.tree_node* %41), !dbg !9310
  store i64 %call48, i64* %cstepi, align 8, !dbg !9311
  br label %if.end49, !dbg !9312

if.else:                                          ; preds = %if.end44
  store i64 0, i64* %cstepi, align 8, !dbg !9313
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then47
  %42 = load %union.tree_node*, %union.tree_node** %ustep, align 8, !dbg !9314
  %43 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !9316
  %call50 = call zeroext i8 @constant_multiple_of(%union.tree_node* %42, %union.tree_node* %43, %struct.double_int* %rat), !dbg !9317
  %tobool51 = icmp ne i8 %call50, 0, !dbg !9317
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !9318

if.then52:                                        ; preds = %if.end49
  %44 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9319
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !9319
  br label %return, !dbg !9320

if.end53:                                         ; preds = %if.end49
  %45 = bitcast %struct.double_int* %rat to { i64, i64 }*, !dbg !9321
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 0, !dbg !9321
  %47 = load i64, i64* %46, align 8, !dbg !9321
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %45, i32 0, i32 1, !dbg !9321
  %49 = load i64, i64* %48, align 8, !dbg !9321
  %call54 = call zeroext i8 @double_int_fits_in_shwi_p(i64 %47, i64 %49), !dbg !9321
  %tobool55 = icmp ne i8 %call54, 0, !dbg !9321
  br i1 %tobool55, label %if.then56, label %if.else58, !dbg !9323

if.then56:                                        ; preds = %if.end53
  %50 = bitcast %struct.double_int* %rat to { i64, i64 }*, !dbg !9324
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 0, !dbg !9324
  %52 = load i64, i64* %51, align 8, !dbg !9324
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 1, !dbg !9324
  %54 = load i64, i64* %53, align 8, !dbg !9324
  %call57 = call i64 @double_int_to_shwi(i64 %52, i64 %54), !dbg !9324
  store i64 %call57, i64* %ratio, align 8, !dbg !9325
  br label %if.end59, !dbg !9326

if.else58:                                        ; preds = %if.end53
  %55 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9327
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !9327
  br label %return, !dbg !9328

if.end59:                                         ; preds = %if.then56
  %56 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9329
  %call60 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %56), !dbg !9329
  store %union.tree_node* %call60, %union.tree_node** %cbase, align 8, !dbg !9329
  %57 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9330
  %common61 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !9330
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !9330
  %58 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !9330
  store %union.tree_node* %58, %union.tree_node** %ctype, align 8, !dbg !9331
  %59 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9332
  %call63 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %59), !dbg !9334
  %tobool64 = icmp ne i8 %call63, 0, !dbg !9334
  br i1 %tobool64, label %if.then65, label %if.else69, !dbg !9335

if.then65:                                        ; preds = %if.end59
  %60 = load i64, i64* %ratio, align 8, !dbg !9336
  %sub = sub nsw i64 0, %60, !dbg !9338
  %61 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9339
  %call66 = call i64 @int_cst_value(%union.tree_node* %61), !dbg !9340
  %mul = mul nsw i64 %sub, %call66, !dbg !9341
  store i64 %mul, i64* %offset, align 8, !dbg !9342
  %62 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9343
  %63 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !9344
  %64 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9345
  %call67 = call %union.tree_node* @build_int_cst(%union.tree_node* %64, i64 0), !dbg !9346
  %65 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9347
  %call68 = call i64 @difference_cost(%struct.ivopts_data* %62, %union.tree_node* %63, %union.tree_node* %call67, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %65), !dbg !9348
  %66 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !9348
  store i64 %call68, i64* %66, align 4, !dbg !9348
  %67 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9348
  %68 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !9348
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 4 %68, i64 8, i1 false), !dbg !9348
  br label %if.end148, !dbg !9349

if.else69:                                        ; preds = %if.end59
  %69 = load i64, i64* %ratio, align 8, !dbg !9350
  %cmp70 = icmp eq i64 %69, 1, !dbg !9352
  br i1 %cmp70, label %if.then71, label %if.else74, !dbg !9353

if.then71:                                        ; preds = %if.else69
  %70 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9354
  %71 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !9356
  %72 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9357
  %73 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9358
  %call73 = call i64 @difference_cost(%struct.ivopts_data* %70, %union.tree_node* %71, %union.tree_node* %72, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %73), !dbg !9359
  %74 = bitcast %struct.comp_cost* %tmp72 to i64*, !dbg !9359
  store i64 %call73, i64* %74, align 4, !dbg !9359
  %75 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9359
  %76 = bitcast %struct.comp_cost* %tmp72 to i8*, !dbg !9359
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %76, i64 8, i1 false), !dbg !9359
  br label %if.end147, !dbg !9360

if.else74:                                        ; preds = %if.else69
  %77 = load i8, i8* %address_p.addr, align 1, !dbg !9361
  %conv = zext i8 %77 to i32, !dbg !9361
  %tobool75 = icmp ne i32 %conv, 0, !dbg !9361
  br i1 %tobool75, label %land.lhs.true76, label %if.else120, !dbg !9363

land.lhs.true76:                                  ; preds = %if.else74
  %78 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9364
  %base77 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !9364
  %79 = bitcast %struct.tree_base* %base77 to i64*, !dbg !9364
  %bf.load78 = load i64, i64* %79, align 8, !dbg !9364
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !9364
  %bf.cast = trunc i64 %bf.clear79 to i32, !dbg !9364
  %cmp80 = icmp eq i32 %bf.cast, 10, !dbg !9364
  br i1 %cmp80, label %if.else120, label %lor.lhs.false, !dbg !9364

lor.lhs.false:                                    ; preds = %land.lhs.true76
  %80 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9364
  %base82 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !9364
  %81 = bitcast %struct.tree_base* %base82 to i64*, !dbg !9364
  %bf.load83 = load i64, i64* %81, align 8, !dbg !9364
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !9364
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !9364
  %cmp86 = icmp eq i32 %bf.cast85, 12, !dbg !9364
  br i1 %cmp86, label %if.else120, label %land.lhs.true88, !dbg !9365

land.lhs.true88:                                  ; preds = %lor.lhs.false
  %82 = load i64, i64* %ratio, align 8, !dbg !9366
  %83 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9367
  %common89 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !9367
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !9367
  %84 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !9367
  %base91 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !9367
  %85 = bitcast %struct.tree_base* %base91 to i64*, !dbg !9367
  %bf.load92 = load i64, i64* %85, align 8, !dbg !9367
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !9367
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !9367
  %cmp95 = icmp eq i32 %bf.cast94, 14, !dbg !9367
  br i1 %cmp95, label %cond.true, label %cond.false, !dbg !9367

cond.true:                                        ; preds = %land.lhs.true88
  %86 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9367
  %common97 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !9367
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !9367
  %87 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !9367
  %call99 = call i32 @vector_type_mode(%union.tree_node* %87), !dbg !9367
  br label %cond.end, !dbg !9367

cond.false:                                       ; preds = %land.lhs.true88
  %88 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9367
  %common100 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !9367
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !9367
  %89 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !9367
  %type102 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !9367
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type102, i32 0, i32 6, !dbg !9367
  %bf.load103 = load i32, i32* %mode, align 4, !dbg !9367
  %bf.lshr = lshr i32 %bf.load103, 16, !dbg !9367
  %bf.clear104 = and i32 %bf.lshr, 255, !dbg !9367
  br label %cond.end, !dbg !9367

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call99, %cond.true ], [ %bf.clear104, %cond.false ], !dbg !9367
  %90 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9368
  %common105 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !9368
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !9368
  %91 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !9368
  %base107 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !9368
  %92 = bitcast %struct.tree_base* %base107 to i64*, !dbg !9368
  %bf.load108 = load i64, i64* %92, align 8, !dbg !9368
  %bf.lshr109 = lshr i64 %bf.load108, 56, !dbg !9368
  %bf.cast110 = trunc i64 %bf.lshr109 to i32, !dbg !9368
  %conv111 = trunc i32 %bf.cast110 to i8, !dbg !9368
  %call112 = call zeroext i8 @multiplier_allowed_in_address_p(i64 %82, i32 %cond, i8 zeroext %conv111), !dbg !9369
  %conv113 = zext i8 %call112 to i32, !dbg !9369
  %tobool114 = icmp ne i32 %conv113, 0, !dbg !9369
  br i1 %tobool114, label %if.then115, label %if.else120, !dbg !9370

if.then115:                                       ; preds = %cond.end
  %93 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9371
  %94 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9371
  %95 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9371
  %96 = load i64, i64* %ratio, align 8, !dbg !9371
  %call116 = call %union.tree_node* @build_int_cst(%union.tree_node* %95, i64 %96), !dbg !9371
  %call117 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %93, %union.tree_node* %94, %union.tree_node* %call116), !dbg !9371
  store %union.tree_node* %call117, %union.tree_node** %cbase, align 8, !dbg !9373
  %97 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9374
  %98 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !9375
  %99 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9376
  %100 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9377
  %call119 = call i64 @difference_cost(%struct.ivopts_data* %97, %union.tree_node* %98, %union.tree_node* %99, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %100), !dbg !9378
  %101 = bitcast %struct.comp_cost* %tmp118 to i64*, !dbg !9378
  store i64 %call119, i64* %101, align 4, !dbg !9378
  %102 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9378
  %103 = bitcast %struct.comp_cost* %tmp118 to i8*, !dbg !9378
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %103, i64 8, i1 false), !dbg !9378
  br label %if.end146, !dbg !9379

if.else120:                                       ; preds = %cond.end, %lor.lhs.false, %land.lhs.true76, %if.else74
  %104 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9380
  %105 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !9382
  %106 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9383
  %call122 = call i64 @force_var_cost(%struct.ivopts_data* %104, %union.tree_node* %105, %struct.bitmap_head_def** %106), !dbg !9384
  %107 = bitcast %struct.comp_cost* %tmp121 to i64*, !dbg !9384
  store i64 %call122, i64* %107, align 4, !dbg !9384
  %108 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9384
  %109 = bitcast %struct.comp_cost* %tmp121 to i8*, !dbg !9384
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 8, i1 false), !dbg !9384
  %110 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9385
  %base123 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !9385
  %111 = bitcast %struct.tree_base* %base123 to i64*, !dbg !9385
  %bf.load124 = load i64, i64* %111, align 8, !dbg !9385
  %bf.clear125 = and i64 %bf.load124, 65535, !dbg !9385
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !9385
  %cmp127 = icmp eq i32 %bf.cast126, 14, !dbg !9385
  br i1 %cmp127, label %cond.true129, label %cond.false131, !dbg !9385

cond.true129:                                     ; preds = %if.else120
  %112 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9385
  %call130 = call i32 @vector_type_mode(%union.tree_node* %112), !dbg !9385
  br label %cond.end137, !dbg !9385

cond.false131:                                    ; preds = %if.else120
  %113 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9385
  %type132 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !9385
  %mode133 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type132, i32 0, i32 6, !dbg !9385
  %bf.load134 = load i32, i32* %mode133, align 4, !dbg !9385
  %bf.lshr135 = lshr i32 %bf.load134, 16, !dbg !9385
  %bf.clear136 = and i32 %bf.lshr135, 255, !dbg !9385
  br label %cond.end137, !dbg !9385

cond.end137:                                      ; preds = %cond.false131, %cond.true129
  %cond138 = phi i32 [ %call130, %cond.true129 ], [ %bf.clear136, %cond.false131 ], !dbg !9385
  %114 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9386
  %speed139 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %114, i32 0, i32 11, !dbg !9387
  %115 = load i8, i8* %speed139, align 1, !dbg !9387
  %call140 = call i32 @add_cost(i32 %cond138, i8 zeroext %115), !dbg !9388
  %cost141 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !9389
  %116 = load i32, i32* %cost141, align 4, !dbg !9390
  %add = add i32 %116, %call140, !dbg !9390
  store i32 %add, i32* %cost141, align 4, !dbg !9390
  %117 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9391
  %118 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !9392
  %119 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9393
  %call143 = call %union.tree_node* @build_int_cst(%union.tree_node* %119, i64 0), !dbg !9394
  %120 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9395
  %call144 = call i64 @difference_cost(%struct.ivopts_data* %117, %union.tree_node* %118, %union.tree_node* %call143, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %120), !dbg !9396
  %121 = bitcast %struct.comp_cost* %agg.tmp to i64*, !dbg !9396
  store i64 %call144, i64* %121, align 4, !dbg !9396
  %122 = bitcast %struct.comp_cost* %cost to i64*, !dbg !9397
  %123 = load i64, i64* %122, align 4, !dbg !9397
  %124 = bitcast %struct.comp_cost* %agg.tmp to i64*, !dbg !9397
  %125 = load i64, i64* %124, align 4, !dbg !9397
  %call145 = call i64 @add_costs(i64 %123, i64 %125), !dbg !9397
  %126 = bitcast %struct.comp_cost* %tmp142 to i64*, !dbg !9397
  store i64 %call145, i64* %126, align 4, !dbg !9397
  %127 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9397
  %128 = bitcast %struct.comp_cost* %tmp142 to i8*, !dbg !9397
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %128, i64 8, i1 false), !dbg !9397
  br label %if.end146

if.end146:                                        ; preds = %cond.end137, %if.then115
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.then71
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.then65
  %129 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9398
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %129, i32 0, i32 0, !dbg !9399
  %130 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !9399
  %131 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9400
  %132 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !9401
  %call149 = call zeroext i8 @stmt_after_increment(%struct.loop* %130, %struct.iv_cand* %131, %union.gimple_statement_d* %132), !dbg !9402
  store i8 %call149, i8* %stmt_is_after_inc, align 1, !dbg !9403
  %133 = load i8, i8* %stmt_is_after_inc, align 1, !dbg !9404
  %tobool150 = icmp ne i8 %133, 0, !dbg !9404
  br i1 %tobool150, label %if.then151, label %if.end154, !dbg !9406

if.then151:                                       ; preds = %if.end148
  %134 = load i64, i64* %ratio, align 8, !dbg !9407
  %135 = load i64, i64* %cstepi, align 8, !dbg !9408
  %mul152 = mul i64 %134, %135, !dbg !9409
  %136 = load i64, i64* %offset, align 8, !dbg !9410
  %sub153 = sub i64 %136, %mul152, !dbg !9410
  store i64 %sub153, i64* %offset, align 8, !dbg !9410
  br label %if.end154, !dbg !9411

if.end154:                                        ; preds = %if.then151, %if.end148
  %137 = load i8, i8* %address_p.addr, align 1, !dbg !9412
  %tobool155 = icmp ne i8 %137, 0, !dbg !9412
  br i1 %tobool155, label %if.then156, label %if.end189, !dbg !9414

if.then156:                                       ; preds = %if.end154
  %138 = load i8, i8* %symbol_present, align 1, !dbg !9415
  %139 = load i8, i8* %var_present, align 1, !dbg !9416
  %140 = load i64, i64* %offset, align 8, !dbg !9417
  %141 = load i64, i64* %ratio, align 8, !dbg !9418
  %142 = load i64, i64* %cstepi, align 8, !dbg !9419
  %143 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9420
  %common158 = bitcast %union.tree_node* %143 to %struct.tree_common*, !dbg !9420
  %type159 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common158, i32 0, i32 2, !dbg !9420
  %144 = load %union.tree_node*, %union.tree_node** %type159, align 8, !dbg !9420
  %base160 = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !9420
  %145 = bitcast %struct.tree_base* %base160 to i64*, !dbg !9420
  %bf.load161 = load i64, i64* %145, align 8, !dbg !9420
  %bf.clear162 = and i64 %bf.load161, 65535, !dbg !9420
  %bf.cast163 = trunc i64 %bf.clear162 to i32, !dbg !9420
  %cmp164 = icmp eq i32 %bf.cast163, 14, !dbg !9420
  br i1 %cmp164, label %cond.true166, label %cond.false170, !dbg !9420

cond.true166:                                     ; preds = %if.then156
  %146 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9420
  %common167 = bitcast %union.tree_node* %146 to %struct.tree_common*, !dbg !9420
  %type168 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common167, i32 0, i32 2, !dbg !9420
  %147 = load %union.tree_node*, %union.tree_node** %type168, align 8, !dbg !9420
  %call169 = call i32 @vector_type_mode(%union.tree_node* %147), !dbg !9420
  br label %cond.end178, !dbg !9420

cond.false170:                                    ; preds = %if.then156
  %148 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9420
  %common171 = bitcast %union.tree_node* %148 to %struct.tree_common*, !dbg !9420
  %type172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 2, !dbg !9420
  %149 = load %union.tree_node*, %union.tree_node** %type172, align 8, !dbg !9420
  %type173 = bitcast %union.tree_node* %149 to %struct.tree_type*, !dbg !9420
  %mode174 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type173, i32 0, i32 6, !dbg !9420
  %bf.load175 = load i32, i32* %mode174, align 4, !dbg !9420
  %bf.lshr176 = lshr i32 %bf.load175, 16, !dbg !9420
  %bf.clear177 = and i32 %bf.lshr176, 255, !dbg !9420
  br label %cond.end178, !dbg !9420

cond.end178:                                      ; preds = %cond.false170, %cond.true166
  %cond179 = phi i32 [ %call169, %cond.true166 ], [ %bf.clear177, %cond.false170 ], !dbg !9420
  %150 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !9421
  %common180 = bitcast %union.tree_node* %150 to %struct.tree_common*, !dbg !9421
  %type181 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common180, i32 0, i32 2, !dbg !9421
  %151 = load %union.tree_node*, %union.tree_node** %type181, align 8, !dbg !9421
  %base182 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !9421
  %152 = bitcast %struct.tree_base* %base182 to i64*, !dbg !9421
  %bf.load183 = load i64, i64* %152, align 8, !dbg !9421
  %bf.lshr184 = lshr i64 %bf.load183, 56, !dbg !9421
  %bf.cast185 = trunc i64 %bf.lshr184 to i32, !dbg !9421
  %conv186 = trunc i32 %bf.cast185 to i8, !dbg !9421
  %153 = load i8, i8* %speed, align 1, !dbg !9422
  %154 = load i8, i8* %stmt_is_after_inc, align 1, !dbg !9423
  %155 = load i8*, i8** %can_autoinc.addr, align 8, !dbg !9424
  %call187 = call i64 @get_address_cost(i8 zeroext %138, i8 zeroext %139, i64 %140, i64 %141, i64 %142, i32 %cond179, i8 zeroext %conv186, i8 zeroext %153, i8 zeroext %154, i8* %155), !dbg !9425
  %156 = bitcast %struct.comp_cost* %agg.tmp157 to i64*, !dbg !9425
  store i64 %call187, i64* %156, align 4, !dbg !9425
  %157 = bitcast %struct.comp_cost* %cost to i64*, !dbg !9426
  %158 = load i64, i64* %157, align 4, !dbg !9426
  %159 = bitcast %struct.comp_cost* %agg.tmp157 to i64*, !dbg !9426
  %160 = load i64, i64* %159, align 4, !dbg !9426
  %call188 = call i64 @add_costs(i64 %158, i64 %160), !dbg !9426
  %161 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9426
  store i64 %call188, i64* %161, align 4, !dbg !9426
  br label %return, !dbg !9427

if.end189:                                        ; preds = %if.end154
  %162 = load i8, i8* %symbol_present, align 1, !dbg !9428
  %tobool190 = icmp ne i8 %162, 0, !dbg !9428
  br i1 %tobool190, label %if.end219, label %land.lhs.true191, !dbg !9430

land.lhs.true191:                                 ; preds = %if.end189
  %163 = load i8, i8* %var_present, align 1, !dbg !9431
  %tobool192 = icmp ne i8 %163, 0, !dbg !9431
  br i1 %tobool192, label %if.end219, label %land.lhs.true193, !dbg !9432

land.lhs.true193:                                 ; preds = %land.lhs.true191
  %164 = load i64, i64* %offset, align 8, !dbg !9433
  %tobool194 = icmp ne i64 %164, 0, !dbg !9433
  br i1 %tobool194, label %if.end219, label %if.then195, !dbg !9434

if.then195:                                       ; preds = %land.lhs.true193
  %165 = load i64, i64* %ratio, align 8, !dbg !9435
  %cmp196 = icmp ne i64 %165, 1, !dbg !9438
  br i1 %cmp196, label %if.then198, label %if.end218, !dbg !9439

if.then198:                                       ; preds = %if.then195
  %166 = load i64, i64* %ratio, align 8, !dbg !9440
  %167 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9441
  %base199 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !9441
  %168 = bitcast %struct.tree_base* %base199 to i64*, !dbg !9441
  %bf.load200 = load i64, i64* %168, align 8, !dbg !9441
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !9441
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !9441
  %cmp203 = icmp eq i32 %bf.cast202, 14, !dbg !9441
  br i1 %cmp203, label %cond.true205, label %cond.false207, !dbg !9441

cond.true205:                                     ; preds = %if.then198
  %169 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9441
  %call206 = call i32 @vector_type_mode(%union.tree_node* %169), !dbg !9441
  br label %cond.end213, !dbg !9441

cond.false207:                                    ; preds = %if.then198
  %170 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9441
  %type208 = bitcast %union.tree_node* %170 to %struct.tree_type*, !dbg !9441
  %mode209 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type208, i32 0, i32 6, !dbg !9441
  %bf.load210 = load i32, i32* %mode209, align 4, !dbg !9441
  %bf.lshr211 = lshr i32 %bf.load210, 16, !dbg !9441
  %bf.clear212 = and i32 %bf.lshr211, 255, !dbg !9441
  br label %cond.end213, !dbg !9441

cond.end213:                                      ; preds = %cond.false207, %cond.true205
  %cond214 = phi i32 [ %call206, %cond.true205 ], [ %bf.clear212, %cond.false207 ], !dbg !9441
  %171 = load i8, i8* %speed, align 1, !dbg !9442
  %call215 = call i32 @multiply_by_cost(i64 %166, i32 %cond214, i8 zeroext %171), !dbg !9443
  %cost216 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !9444
  %172 = load i32, i32* %cost216, align 4, !dbg !9445
  %add217 = add i32 %172, %call215, !dbg !9445
  store i32 %add217, i32* %cost216, align 4, !dbg !9445
  br label %if.end218, !dbg !9446

if.end218:                                        ; preds = %cond.end213, %if.then195
  %173 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9447
  %174 = bitcast %struct.comp_cost* %cost to i8*, !dbg !9447
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %173, i8* align 4 %174, i64 8, i1 false), !dbg !9447
  br label %return, !dbg !9448

if.end219:                                        ; preds = %land.lhs.true193, %land.lhs.true191, %if.end189
  %175 = load i8, i8* %var_present, align 1, !dbg !9449
  %conv220 = zext i8 %175 to i32, !dbg !9449
  %tobool221 = icmp ne i32 %conv220, 0, !dbg !9449
  br i1 %tobool221, label %land.lhs.true222, label %if.end247, !dbg !9451

land.lhs.true222:                                 ; preds = %if.end219
  %176 = load i8, i8* %symbol_present, align 1, !dbg !9452
  %conv223 = zext i8 %176 to i32, !dbg !9452
  %tobool224 = icmp ne i32 %conv223, 0, !dbg !9452
  br i1 %tobool224, label %if.then227, label %lor.lhs.false225, !dbg !9453

lor.lhs.false225:                                 ; preds = %land.lhs.true222
  %177 = load i64, i64* %offset, align 8, !dbg !9454
  %tobool226 = icmp ne i64 %177, 0, !dbg !9454
  br i1 %tobool226, label %if.then227, label %if.end247, !dbg !9455

if.then227:                                       ; preds = %lor.lhs.false225, %land.lhs.true222
  %178 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9456
  %base228 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !9456
  %179 = bitcast %struct.tree_base* %base228 to i64*, !dbg !9456
  %bf.load229 = load i64, i64* %179, align 8, !dbg !9456
  %bf.clear230 = and i64 %bf.load229, 65535, !dbg !9456
  %bf.cast231 = trunc i64 %bf.clear230 to i32, !dbg !9456
  %cmp232 = icmp eq i32 %bf.cast231, 14, !dbg !9456
  br i1 %cmp232, label %cond.true234, label %cond.false236, !dbg !9456

cond.true234:                                     ; preds = %if.then227
  %180 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9456
  %call235 = call i32 @vector_type_mode(%union.tree_node* %180), !dbg !9456
  br label %cond.end242, !dbg !9456

cond.false236:                                    ; preds = %if.then227
  %181 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9456
  %type237 = bitcast %union.tree_node* %181 to %struct.tree_type*, !dbg !9456
  %mode238 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type237, i32 0, i32 6, !dbg !9456
  %bf.load239 = load i32, i32* %mode238, align 4, !dbg !9456
  %bf.lshr240 = lshr i32 %bf.load239, 16, !dbg !9456
  %bf.clear241 = and i32 %bf.lshr240, 255, !dbg !9456
  br label %cond.end242, !dbg !9456

cond.end242:                                      ; preds = %cond.false236, %cond.true234
  %cond243 = phi i32 [ %call235, %cond.true234 ], [ %bf.clear241, %cond.false236 ], !dbg !9456
  %182 = load i8, i8* %speed, align 1, !dbg !9457
  %call244 = call i32 @add_cost(i32 %cond243, i8 zeroext %182), !dbg !9458
  %div = udiv i32 %call244, 5, !dbg !9459
  %cost245 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !9460
  %183 = load i32, i32* %cost245, align 4, !dbg !9461
  %add246 = add i32 %183, %div, !dbg !9461
  store i32 %add246, i32* %cost245, align 4, !dbg !9461
  br label %if.end247, !dbg !9462

if.end247:                                        ; preds = %cond.end242, %lor.lhs.false225, %if.end219
  %184 = load i64, i64* %offset, align 8, !dbg !9463
  %tobool248 = icmp ne i64 %184, 0, !dbg !9463
  br i1 %tobool248, label %if.then249, label %if.end250, !dbg !9465

if.then249:                                       ; preds = %if.end247
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 1, !dbg !9466
  %185 = load i32, i32* %complexity, align 4, !dbg !9467
  %inc = add i32 %185, 1, !dbg !9467
  store i32 %inc, i32* %complexity, align 4, !dbg !9467
  br label %if.end250, !dbg !9468

if.end250:                                        ; preds = %if.then249, %if.end247
  %186 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9469
  %base251 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !9469
  %187 = bitcast %struct.tree_base* %base251 to i64*, !dbg !9469
  %bf.load252 = load i64, i64* %187, align 8, !dbg !9469
  %bf.clear253 = and i64 %bf.load252, 65535, !dbg !9469
  %bf.cast254 = trunc i64 %bf.clear253 to i32, !dbg !9469
  %cmp255 = icmp eq i32 %bf.cast254, 14, !dbg !9469
  br i1 %cmp255, label %cond.true257, label %cond.false259, !dbg !9469

cond.true257:                                     ; preds = %if.end250
  %188 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9469
  %call258 = call i32 @vector_type_mode(%union.tree_node* %188), !dbg !9469
  br label %cond.end265, !dbg !9469

cond.false259:                                    ; preds = %if.end250
  %189 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9469
  %type260 = bitcast %union.tree_node* %189 to %struct.tree_type*, !dbg !9469
  %mode261 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type260, i32 0, i32 6, !dbg !9469
  %bf.load262 = load i32, i32* %mode261, align 4, !dbg !9469
  %bf.lshr263 = lshr i32 %bf.load262, 16, !dbg !9469
  %bf.clear264 = and i32 %bf.lshr263, 255, !dbg !9469
  br label %cond.end265, !dbg !9469

cond.end265:                                      ; preds = %cond.false259, %cond.true257
  %cond266 = phi i32 [ %call258, %cond.true257 ], [ %bf.clear264, %cond.false259 ], !dbg !9469
  %190 = load i8, i8* %speed, align 1, !dbg !9470
  %call267 = call i32 @add_cost(i32 %cond266, i8 zeroext %190), !dbg !9471
  %cost268 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !9472
  %191 = load i32, i32* %cost268, align 4, !dbg !9473
  %add269 = add i32 %191, %call267, !dbg !9473
  store i32 %add269, i32* %cost268, align 4, !dbg !9473
  %192 = load i64, i64* %ratio, align 8, !dbg !9474
  %cmp270 = icmp sgt i64 %192, 0, !dbg !9475
  br i1 %cmp270, label %cond.true272, label %cond.false273, !dbg !9474

cond.true272:                                     ; preds = %cond.end265
  %193 = load i64, i64* %ratio, align 8, !dbg !9476
  br label %cond.end275, !dbg !9474

cond.false273:                                    ; preds = %cond.end265
  %194 = load i64, i64* %ratio, align 8, !dbg !9477
  %sub274 = sub nsw i64 0, %194, !dbg !9478
  br label %cond.end275, !dbg !9474

cond.end275:                                      ; preds = %cond.false273, %cond.true272
  %cond276 = phi i64 [ %193, %cond.true272 ], [ %sub274, %cond.false273 ], !dbg !9474
  store i64 %cond276, i64* %aratio, align 8, !dbg !9479
  %195 = load i64, i64* %aratio, align 8, !dbg !9480
  %cmp277 = icmp ne i64 %195, 1, !dbg !9482
  br i1 %cmp277, label %if.then279, label %if.end299, !dbg !9483

if.then279:                                       ; preds = %cond.end275
  %196 = load i64, i64* %aratio, align 8, !dbg !9484
  %197 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9485
  %base280 = bitcast %union.tree_node* %197 to %struct.tree_base*, !dbg !9485
  %198 = bitcast %struct.tree_base* %base280 to i64*, !dbg !9485
  %bf.load281 = load i64, i64* %198, align 8, !dbg !9485
  %bf.clear282 = and i64 %bf.load281, 65535, !dbg !9485
  %bf.cast283 = trunc i64 %bf.clear282 to i32, !dbg !9485
  %cmp284 = icmp eq i32 %bf.cast283, 14, !dbg !9485
  br i1 %cmp284, label %cond.true286, label %cond.false288, !dbg !9485

cond.true286:                                     ; preds = %if.then279
  %199 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9485
  %call287 = call i32 @vector_type_mode(%union.tree_node* %199), !dbg !9485
  br label %cond.end294, !dbg !9485

cond.false288:                                    ; preds = %if.then279
  %200 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !9485
  %type289 = bitcast %union.tree_node* %200 to %struct.tree_type*, !dbg !9485
  %mode290 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type289, i32 0, i32 6, !dbg !9485
  %bf.load291 = load i32, i32* %mode290, align 4, !dbg !9485
  %bf.lshr292 = lshr i32 %bf.load291, 16, !dbg !9485
  %bf.clear293 = and i32 %bf.lshr292, 255, !dbg !9485
  br label %cond.end294, !dbg !9485

cond.end294:                                      ; preds = %cond.false288, %cond.true286
  %cond295 = phi i32 [ %call287, %cond.true286 ], [ %bf.clear293, %cond.false288 ], !dbg !9485
  %201 = load i8, i8* %speed, align 1, !dbg !9486
  %call296 = call i32 @multiply_by_cost(i64 %196, i32 %cond295, i8 zeroext %201), !dbg !9487
  %cost297 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !9488
  %202 = load i32, i32* %cost297, align 4, !dbg !9489
  %add298 = add i32 %202, %call296, !dbg !9489
  store i32 %add298, i32* %cost297, align 4, !dbg !9489
  br label %if.end299, !dbg !9490

if.end299:                                        ; preds = %cond.end294, %cond.end275
  br label %fallback, !dbg !9491

fallback:                                         ; preds = %if.end299, %if.then43
  call void @llvm.dbg.label(metadata !9492), !dbg !9493
  %203 = load i8*, i8** %can_autoinc.addr, align 8, !dbg !9494
  %tobool300 = icmp ne i8* %203, null, !dbg !9494
  br i1 %tobool300, label %if.then301, label %if.end302, !dbg !9496

if.then301:                                       ; preds = %fallback
  %204 = load i8*, i8** %can_autoinc.addr, align 8, !dbg !9497
  store i8 0, i8* %204, align 1, !dbg !9498
  br label %if.end302, !dbg !9499

if.end302:                                        ; preds = %if.then301, %fallback
  call void @llvm.dbg.declare(metadata %union.tree_node** %comp, metadata !9500, metadata !DIExpression()), !dbg !9502
  %205 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9503
  %current_loop303 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %205, i32 0, i32 0, !dbg !9504
  %206 = load %struct.loop*, %struct.loop** %current_loop303, align 8, !dbg !9504
  %207 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !9505
  %208 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9506
  %209 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !9507
  %call304 = call %union.tree_node* @get_computation_at(%struct.loop* %206, %struct.iv_use* %207, %struct.iv_cand* %208, %union.gimple_statement_d* %209), !dbg !9508
  store %union.tree_node* %call304, %union.tree_node** %comp, align 8, !dbg !9502
  %210 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !9509
  %tobool305 = icmp ne %union.tree_node* %210, null, !dbg !9509
  br i1 %tobool305, label %if.end307, label %if.then306, !dbg !9511

if.then306:                                       ; preds = %if.end302
  %211 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9512
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %211, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !9512
  br label %return, !dbg !9513

if.end307:                                        ; preds = %if.end302
  %212 = load i8, i8* %address_p.addr, align 1, !dbg !9514
  %tobool308 = icmp ne i8 %212, 0, !dbg !9514
  br i1 %tobool308, label %if.then309, label %if.end315, !dbg !9516

if.then309:                                       ; preds = %if.end307
  %213 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !9517
  %common310 = bitcast %union.tree_node* %213 to %struct.tree_common*, !dbg !9517
  %type311 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common310, i32 0, i32 2, !dbg !9517
  %214 = load %union.tree_node*, %union.tree_node** %type311, align 8, !dbg !9517
  %common312 = bitcast %union.tree_node* %214 to %struct.tree_common*, !dbg !9517
  %type313 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common312, i32 0, i32 2, !dbg !9517
  %215 = load %union.tree_node*, %union.tree_node** %type313, align 8, !dbg !9517
  %216 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !9517
  %call314 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %215, %union.tree_node* %216), !dbg !9517
  store %union.tree_node* %call314, %union.tree_node** %comp, align 8, !dbg !9518
  br label %if.end315, !dbg !9519

if.end315:                                        ; preds = %if.then309, %if.end307
  %217 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !9520
  %218 = load i8, i8* %speed, align 1, !dbg !9521
  %call316 = call i32 @computation_cost(%union.tree_node* %217, i8 zeroext %218), !dbg !9522
  %call317 = call i64 @new_cost(i32 %call316, i32 0), !dbg !9523
  %219 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9523
  store i64 %call317, i64* %219, align 4, !dbg !9523
  br label %return, !dbg !9524

return:                                           ; preds = %if.end315, %if.then306, %if.end218, %cond.end178, %if.else58, %if.then52, %if.then31, %if.then15, %if.then
  %220 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9525
  %221 = load i64, i64* %220, align 4, !dbg !9525
  ret i64 %221, !dbg !9525
}

declare dso_local zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @constant_multiple_of(%union.tree_node* %top, %union.tree_node* %bot, %struct.double_int* %mul) #0 !dbg !9526 {
entry:
  %retval = alloca i8, align 1
  %top.addr = alloca %union.tree_node*, align 8
  %bot.addr = alloca %union.tree_node*, align 8
  %mul.addr = alloca %struct.double_int*, align 8
  %mby = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %res = alloca %struct.double_int, align 8
  %p0 = alloca %struct.double_int, align 8
  %p1 = alloca %struct.double_int, align 8
  %precision = alloca i32, align 4
  %tmp = alloca %struct.double_int, align 8
  %tmp21 = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp22 = alloca %struct.double_int, align 8
  %tmp41 = alloca %struct.double_int, align 8
  %tmp44 = alloca %struct.double_int, align 8
  %agg.tmp45 = alloca %struct.double_int, align 8
  %tmp56 = alloca %struct.double_int, align 8
  %agg.tmp57 = alloca %struct.double_int, align 8
  %tmp60 = alloca %struct.double_int, align 8
  %agg.tmp61 = alloca %struct.double_int, align 8
  %tmp68 = alloca %struct.double_int, align 8
  %agg.tmp69 = alloca %struct.double_int, align 8
  store %union.tree_node* %top, %union.tree_node** %top.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %top.addr, metadata !9530, metadata !DIExpression()), !dbg !9531
  store %union.tree_node* %bot, %union.tree_node** %bot.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bot.addr, metadata !9532, metadata !DIExpression()), !dbg !9533
  store %struct.double_int* %mul, %struct.double_int** %mul.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.double_int** %mul.addr, metadata !9534, metadata !DIExpression()), !dbg !9535
  call void @llvm.dbg.declare(metadata %union.tree_node** %mby, metadata !9536, metadata !DIExpression()), !dbg !9537
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9538, metadata !DIExpression()), !dbg !9539
  call void @llvm.dbg.declare(metadata %struct.double_int* %res, metadata !9540, metadata !DIExpression()), !dbg !9541
  call void @llvm.dbg.declare(metadata %struct.double_int* %p0, metadata !9542, metadata !DIExpression()), !dbg !9543
  call void @llvm.dbg.declare(metadata %struct.double_int* %p1, metadata !9544, metadata !DIExpression()), !dbg !9545
  call void @llvm.dbg.declare(metadata i32* %precision, metadata !9546, metadata !DIExpression()), !dbg !9547
  %0 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9548
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9548
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9548
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9548
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !9548
  %precision2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 6, !dbg !9548
  %bf.load = load i32, i32* %precision2, align 4, !dbg !9548
  %bf.clear = and i32 %bf.load, 1023, !dbg !9548
  store i32 %bf.clear, i32* %precision, align 4, !dbg !9547
  %2 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9549
  %call = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %2), !dbg !9549
  store %union.tree_node* %call, %union.tree_node** %top.addr, align 8, !dbg !9549
  %3 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9550
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %3), !dbg !9550
  store %union.tree_node* %call3, %union.tree_node** %bot.addr, align 8, !dbg !9550
  %4 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9551
  %5 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9553
  %call4 = call i32 @operand_equal_p(%union.tree_node* %4, %union.tree_node* %5, i32 0), !dbg !9554
  %tobool = icmp ne i32 %call4, 0, !dbg !9554
  br i1 %tobool, label %if.then, label %if.end, !dbg !9555

if.then:                                          ; preds = %entry
  %6 = load %struct.double_int*, %struct.double_int** %mul.addr, align 8, !dbg !9556
  %call5 = call { i64, i64 } @shwi_to_double_int(i64 1), !dbg !9558
  %7 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !9558
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !9558
  %9 = extractvalue { i64, i64 } %call5, 0, !dbg !9558
  store i64 %9, i64* %8, align 8, !dbg !9558
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !9558
  %11 = extractvalue { i64, i64 } %call5, 1, !dbg !9558
  store i64 %11, i64* %10, align 8, !dbg !9558
  %12 = bitcast %struct.double_int* %6 to i8*, !dbg !9558
  %13 = bitcast %struct.double_int* %tmp to i8*, !dbg !9558
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !9558
  store i8 1, i8* %retval, align 1, !dbg !9559
  br label %return, !dbg !9559

if.end:                                           ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9560
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9560
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !9560
  %bf.load6 = load i64, i64* %15, align 8, !dbg !9560
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !9560
  %bf.cast = trunc i64 %bf.clear7 to i32, !dbg !9560
  store i32 %bf.cast, i32* %code, align 4, !dbg !9561
  %16 = load i32, i32* %code, align 4, !dbg !9562
  switch i32 %16, label %sw.default [
    i32 65, label %sw.bb
    i32 63, label %sw.bb26
    i32 64, label %sw.bb26
    i32 23, label %sw.bb48
  ], !dbg !9563

sw.bb:                                            ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9564
  %exp = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !9564
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9564
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9564
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9564
  store %union.tree_node* %18, %union.tree_node** %mby, align 8, !dbg !9566
  %19 = load %union.tree_node*, %union.tree_node** %mby, align 8, !dbg !9567
  %base8 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !9567
  %20 = bitcast %struct.tree_base* %base8 to i64*, !dbg !9567
  %bf.load9 = load i64, i64* %20, align 8, !dbg !9567
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !9567
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !9567
  %cmp = icmp ne i32 %bf.cast11, 23, !dbg !9569
  br i1 %cmp, label %if.then12, label %if.end13, !dbg !9570

if.then12:                                        ; preds = %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !9571
  br label %return, !dbg !9571

if.end13:                                         ; preds = %sw.bb
  %21 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9572
  %exp14 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !9572
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !9572
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 0, !dbg !9572
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !9572
  %23 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9574
  %call17 = call zeroext i8 @constant_multiple_of(%union.tree_node* %22, %union.tree_node* %23, %struct.double_int* %res), !dbg !9575
  %tobool18 = icmp ne i8 %call17, 0, !dbg !9575
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !9576

if.then19:                                        ; preds = %if.end13
  store i8 0, i8* %retval, align 1, !dbg !9577
  br label %return, !dbg !9577

if.end20:                                         ; preds = %if.end13
  %24 = load %struct.double_int*, %struct.double_int** %mul.addr, align 8, !dbg !9578
  %25 = load %union.tree_node*, %union.tree_node** %mby, align 8, !dbg !9579
  %call23 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %25), !dbg !9580
  %26 = bitcast %struct.double_int* %agg.tmp22 to { i64, i64 }*, !dbg !9580
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !9580
  %28 = extractvalue { i64, i64 } %call23, 0, !dbg !9580
  store i64 %28, i64* %27, align 8, !dbg !9580
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !9580
  %30 = extractvalue { i64, i64 } %call23, 1, !dbg !9580
  store i64 %30, i64* %29, align 8, !dbg !9580
  %31 = bitcast %struct.double_int* %res to { i64, i64 }*, !dbg !9581
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0, !dbg !9581
  %33 = load i64, i64* %32, align 8, !dbg !9581
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1, !dbg !9581
  %35 = load i64, i64* %34, align 8, !dbg !9581
  %36 = bitcast %struct.double_int* %agg.tmp22 to { i64, i64 }*, !dbg !9581
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !9581
  %38 = load i64, i64* %37, align 8, !dbg !9581
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !9581
  %40 = load i64, i64* %39, align 8, !dbg !9581
  %call24 = call { i64, i64 } @double_int_mul(i64 %33, i64 %35, i64 %38, i64 %40), !dbg !9581
  %41 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !9581
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !9581
  %43 = extractvalue { i64, i64 } %call24, 0, !dbg !9581
  store i64 %43, i64* %42, align 8, !dbg !9581
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !9581
  %45 = extractvalue { i64, i64 } %call24, 1, !dbg !9581
  store i64 %45, i64* %44, align 8, !dbg !9581
  %46 = load i32, i32* %precision, align 4, !dbg !9582
  %47 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !9583
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 0, !dbg !9583
  %49 = load i64, i64* %48, align 8, !dbg !9583
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 1, !dbg !9583
  %51 = load i64, i64* %50, align 8, !dbg !9583
  %call25 = call { i64, i64 } @double_int_sext(i64 %49, i64 %51, i32 %46), !dbg !9583
  %52 = bitcast %struct.double_int* %tmp21 to { i64, i64 }*, !dbg !9583
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 0, !dbg !9583
  %54 = extractvalue { i64, i64 } %call25, 0, !dbg !9583
  store i64 %54, i64* %53, align 8, !dbg !9583
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %52, i32 0, i32 1, !dbg !9583
  %56 = extractvalue { i64, i64 } %call25, 1, !dbg !9583
  store i64 %56, i64* %55, align 8, !dbg !9583
  %57 = bitcast %struct.double_int* %24 to i8*, !dbg !9583
  %58 = bitcast %struct.double_int* %tmp21 to i8*, !dbg !9583
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 16, i1 false), !dbg !9583
  store i8 1, i8* %retval, align 1, !dbg !9584
  br label %return, !dbg !9584

sw.bb26:                                          ; preds = %if.end, %if.end
  %59 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9585
  %exp27 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !9585
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !9585
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 0, !dbg !9585
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !9585
  %61 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9587
  %call30 = call zeroext i8 @constant_multiple_of(%union.tree_node* %60, %union.tree_node* %61, %struct.double_int* %p0), !dbg !9588
  %tobool31 = icmp ne i8 %call30, 0, !dbg !9588
  br i1 %tobool31, label %lor.lhs.false, label %if.then37, !dbg !9589

lor.lhs.false:                                    ; preds = %sw.bb26
  %62 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9590
  %exp32 = bitcast %union.tree_node* %62 to %struct.tree_exp*, !dbg !9590
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !9590
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 1, !dbg !9590
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !9590
  %64 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9591
  %call35 = call zeroext i8 @constant_multiple_of(%union.tree_node* %63, %union.tree_node* %64, %struct.double_int* %p1), !dbg !9592
  %tobool36 = icmp ne i8 %call35, 0, !dbg !9592
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !9593

if.then37:                                        ; preds = %lor.lhs.false, %sw.bb26
  store i8 0, i8* %retval, align 1, !dbg !9594
  br label %return, !dbg !9594

if.end38:                                         ; preds = %lor.lhs.false
  %65 = load i32, i32* %code, align 4, !dbg !9595
  %cmp39 = icmp eq i32 %65, 64, !dbg !9597
  br i1 %cmp39, label %if.then40, label %if.end43, !dbg !9598

if.then40:                                        ; preds = %if.end38
  %66 = bitcast %struct.double_int* %p1 to { i64, i64 }*, !dbg !9599
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %66, i32 0, i32 0, !dbg !9599
  %68 = load i64, i64* %67, align 8, !dbg !9599
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %66, i32 0, i32 1, !dbg !9599
  %70 = load i64, i64* %69, align 8, !dbg !9599
  %call42 = call { i64, i64 } @double_int_neg(i64 %68, i64 %70), !dbg !9599
  %71 = bitcast %struct.double_int* %tmp41 to { i64, i64 }*, !dbg !9599
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %71, i32 0, i32 0, !dbg !9599
  %73 = extractvalue { i64, i64 } %call42, 0, !dbg !9599
  store i64 %73, i64* %72, align 8, !dbg !9599
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %71, i32 0, i32 1, !dbg !9599
  %75 = extractvalue { i64, i64 } %call42, 1, !dbg !9599
  store i64 %75, i64* %74, align 8, !dbg !9599
  %76 = bitcast %struct.double_int* %p1 to i8*, !dbg !9599
  %77 = bitcast %struct.double_int* %tmp41 to i8*, !dbg !9599
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 16, i1 false), !dbg !9599
  br label %if.end43, !dbg !9600

if.end43:                                         ; preds = %if.then40, %if.end38
  %78 = load %struct.double_int*, %struct.double_int** %mul.addr, align 8, !dbg !9601
  %79 = bitcast %struct.double_int* %p0 to { i64, i64 }*, !dbg !9602
  %80 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %79, i32 0, i32 0, !dbg !9602
  %81 = load i64, i64* %80, align 8, !dbg !9602
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %79, i32 0, i32 1, !dbg !9602
  %83 = load i64, i64* %82, align 8, !dbg !9602
  %84 = bitcast %struct.double_int* %p1 to { i64, i64 }*, !dbg !9602
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %84, i32 0, i32 0, !dbg !9602
  %86 = load i64, i64* %85, align 8, !dbg !9602
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %84, i32 0, i32 1, !dbg !9602
  %88 = load i64, i64* %87, align 8, !dbg !9602
  %call46 = call { i64, i64 } @double_int_add(i64 %81, i64 %83, i64 %86, i64 %88), !dbg !9602
  %89 = bitcast %struct.double_int* %agg.tmp45 to { i64, i64 }*, !dbg !9602
  %90 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %89, i32 0, i32 0, !dbg !9602
  %91 = extractvalue { i64, i64 } %call46, 0, !dbg !9602
  store i64 %91, i64* %90, align 8, !dbg !9602
  %92 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %89, i32 0, i32 1, !dbg !9602
  %93 = extractvalue { i64, i64 } %call46, 1, !dbg !9602
  store i64 %93, i64* %92, align 8, !dbg !9602
  %94 = load i32, i32* %precision, align 4, !dbg !9603
  %95 = bitcast %struct.double_int* %agg.tmp45 to { i64, i64 }*, !dbg !9604
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %95, i32 0, i32 0, !dbg !9604
  %97 = load i64, i64* %96, align 8, !dbg !9604
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %95, i32 0, i32 1, !dbg !9604
  %99 = load i64, i64* %98, align 8, !dbg !9604
  %call47 = call { i64, i64 } @double_int_sext(i64 %97, i64 %99, i32 %94), !dbg !9604
  %100 = bitcast %struct.double_int* %tmp44 to { i64, i64 }*, !dbg !9604
  %101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %100, i32 0, i32 0, !dbg !9604
  %102 = extractvalue { i64, i64 } %call47, 0, !dbg !9604
  store i64 %102, i64* %101, align 8, !dbg !9604
  %103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %100, i32 0, i32 1, !dbg !9604
  %104 = extractvalue { i64, i64 } %call47, 1, !dbg !9604
  store i64 %104, i64* %103, align 8, !dbg !9604
  %105 = bitcast %struct.double_int* %78 to i8*, !dbg !9604
  %106 = bitcast %struct.double_int* %tmp44 to i8*, !dbg !9604
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false), !dbg !9604
  store i8 1, i8* %retval, align 1, !dbg !9605
  br label %return, !dbg !9605

sw.bb48:                                          ; preds = %if.end
  %107 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9606
  %base49 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !9606
  %108 = bitcast %struct.tree_base* %base49 to i64*, !dbg !9606
  %bf.load50 = load i64, i64* %108, align 8, !dbg !9606
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !9606
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !9606
  %cmp53 = icmp ne i32 %bf.cast52, 23, !dbg !9608
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !9609

if.then54:                                        ; preds = %sw.bb48
  store i8 0, i8* %retval, align 1, !dbg !9610
  br label %return, !dbg !9610

if.end55:                                         ; preds = %sw.bb48
  %109 = load %union.tree_node*, %union.tree_node** %top.addr, align 8, !dbg !9611
  %call58 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %109), !dbg !9612
  %110 = bitcast %struct.double_int* %agg.tmp57 to { i64, i64 }*, !dbg !9612
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %110, i32 0, i32 0, !dbg !9612
  %112 = extractvalue { i64, i64 } %call58, 0, !dbg !9612
  store i64 %112, i64* %111, align 8, !dbg !9612
  %113 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %110, i32 0, i32 1, !dbg !9612
  %114 = extractvalue { i64, i64 } %call58, 1, !dbg !9612
  store i64 %114, i64* %113, align 8, !dbg !9612
  %115 = load i32, i32* %precision, align 4, !dbg !9613
  %116 = bitcast %struct.double_int* %agg.tmp57 to { i64, i64 }*, !dbg !9614
  %117 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %116, i32 0, i32 0, !dbg !9614
  %118 = load i64, i64* %117, align 8, !dbg !9614
  %119 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %116, i32 0, i32 1, !dbg !9614
  %120 = load i64, i64* %119, align 8, !dbg !9614
  %call59 = call { i64, i64 } @double_int_sext(i64 %118, i64 %120, i32 %115), !dbg !9614
  %121 = bitcast %struct.double_int* %tmp56 to { i64, i64 }*, !dbg !9614
  %122 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %121, i32 0, i32 0, !dbg !9614
  %123 = extractvalue { i64, i64 } %call59, 0, !dbg !9614
  store i64 %123, i64* %122, align 8, !dbg !9614
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %121, i32 0, i32 1, !dbg !9614
  %125 = extractvalue { i64, i64 } %call59, 1, !dbg !9614
  store i64 %125, i64* %124, align 8, !dbg !9614
  %126 = bitcast %struct.double_int* %p0 to i8*, !dbg !9614
  %127 = bitcast %struct.double_int* %tmp56 to i8*, !dbg !9614
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %127, i64 16, i1 false), !dbg !9614
  %128 = load %union.tree_node*, %union.tree_node** %bot.addr, align 8, !dbg !9615
  %call62 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %128), !dbg !9616
  %129 = bitcast %struct.double_int* %agg.tmp61 to { i64, i64 }*, !dbg !9616
  %130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %129, i32 0, i32 0, !dbg !9616
  %131 = extractvalue { i64, i64 } %call62, 0, !dbg !9616
  store i64 %131, i64* %130, align 8, !dbg !9616
  %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %129, i32 0, i32 1, !dbg !9616
  %133 = extractvalue { i64, i64 } %call62, 1, !dbg !9616
  store i64 %133, i64* %132, align 8, !dbg !9616
  %134 = load i32, i32* %precision, align 4, !dbg !9617
  %135 = bitcast %struct.double_int* %agg.tmp61 to { i64, i64 }*, !dbg !9618
  %136 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %135, i32 0, i32 0, !dbg !9618
  %137 = load i64, i64* %136, align 8, !dbg !9618
  %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %135, i32 0, i32 1, !dbg !9618
  %139 = load i64, i64* %138, align 8, !dbg !9618
  %call63 = call { i64, i64 } @double_int_sext(i64 %137, i64 %139, i32 %134), !dbg !9618
  %140 = bitcast %struct.double_int* %tmp60 to { i64, i64 }*, !dbg !9618
  %141 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %140, i32 0, i32 0, !dbg !9618
  %142 = extractvalue { i64, i64 } %call63, 0, !dbg !9618
  store i64 %142, i64* %141, align 8, !dbg !9618
  %143 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %140, i32 0, i32 1, !dbg !9618
  %144 = extractvalue { i64, i64 } %call63, 1, !dbg !9618
  store i64 %144, i64* %143, align 8, !dbg !9618
  %145 = bitcast %struct.double_int* %p1 to i8*, !dbg !9618
  %146 = bitcast %struct.double_int* %tmp60 to i8*, !dbg !9618
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* align 8 %146, i64 16, i1 false), !dbg !9618
  %147 = bitcast %struct.double_int* %p1 to { i64, i64 }*, !dbg !9619
  %148 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %147, i32 0, i32 0, !dbg !9619
  %149 = load i64, i64* %148, align 8, !dbg !9619
  %150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %147, i32 0, i32 1, !dbg !9619
  %151 = load i64, i64* %150, align 8, !dbg !9619
  %call64 = call zeroext i8 @double_int_zero_p(i64 %149, i64 %151), !dbg !9619
  %tobool65 = icmp ne i8 %call64, 0, !dbg !9619
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !9621

if.then66:                                        ; preds = %if.end55
  store i8 0, i8* %retval, align 1, !dbg !9622
  br label %return, !dbg !9622

if.end67:                                         ; preds = %if.end55
  %152 = load %struct.double_int*, %struct.double_int** %mul.addr, align 8, !dbg !9623
  %153 = bitcast %struct.double_int* %p0 to { i64, i64 }*, !dbg !9624
  %154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %153, i32 0, i32 0, !dbg !9624
  %155 = load i64, i64* %154, align 8, !dbg !9624
  %156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %153, i32 0, i32 1, !dbg !9624
  %157 = load i64, i64* %156, align 8, !dbg !9624
  %158 = bitcast %struct.double_int* %p1 to { i64, i64 }*, !dbg !9624
  %159 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %158, i32 0, i32 0, !dbg !9624
  %160 = load i64, i64* %159, align 8, !dbg !9624
  %161 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %158, i32 0, i32 1, !dbg !9624
  %162 = load i64, i64* %161, align 8, !dbg !9624
  %call70 = call { i64, i64 } @double_int_sdivmod(i64 %155, i64 %157, i64 %160, i64 %162, i32 69, %struct.double_int* %res), !dbg !9624
  %163 = bitcast %struct.double_int* %agg.tmp69 to { i64, i64 }*, !dbg !9624
  %164 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %163, i32 0, i32 0, !dbg !9624
  %165 = extractvalue { i64, i64 } %call70, 0, !dbg !9624
  store i64 %165, i64* %164, align 8, !dbg !9624
  %166 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %163, i32 0, i32 1, !dbg !9624
  %167 = extractvalue { i64, i64 } %call70, 1, !dbg !9624
  store i64 %167, i64* %166, align 8, !dbg !9624
  %168 = load i32, i32* %precision, align 4, !dbg !9625
  %169 = bitcast %struct.double_int* %agg.tmp69 to { i64, i64 }*, !dbg !9626
  %170 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %169, i32 0, i32 0, !dbg !9626
  %171 = load i64, i64* %170, align 8, !dbg !9626
  %172 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %169, i32 0, i32 1, !dbg !9626
  %173 = load i64, i64* %172, align 8, !dbg !9626
  %call71 = call { i64, i64 } @double_int_sext(i64 %171, i64 %173, i32 %168), !dbg !9626
  %174 = bitcast %struct.double_int* %tmp68 to { i64, i64 }*, !dbg !9626
  %175 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %174, i32 0, i32 0, !dbg !9626
  %176 = extractvalue { i64, i64 } %call71, 0, !dbg !9626
  store i64 %176, i64* %175, align 8, !dbg !9626
  %177 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %174, i32 0, i32 1, !dbg !9626
  %178 = extractvalue { i64, i64 } %call71, 1, !dbg !9626
  store i64 %178, i64* %177, align 8, !dbg !9626
  %179 = bitcast %struct.double_int* %152 to i8*, !dbg !9626
  %180 = bitcast %struct.double_int* %tmp68 to i8*, !dbg !9626
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %179, i8* align 8 %180, i64 16, i1 false), !dbg !9626
  %181 = bitcast %struct.double_int* %res to { i64, i64 }*, !dbg !9627
  %182 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %181, i32 0, i32 0, !dbg !9627
  %183 = load i64, i64* %182, align 8, !dbg !9627
  %184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %181, i32 0, i32 1, !dbg !9627
  %185 = load i64, i64* %184, align 8, !dbg !9627
  %call72 = call zeroext i8 @double_int_zero_p(i64 %183, i64 %185), !dbg !9627
  store i8 %call72, i8* %retval, align 1, !dbg !9628
  br label %return, !dbg !9628

sw.default:                                       ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !9629
  br label %return, !dbg !9629

return:                                           ; preds = %sw.default, %if.end67, %if.then66, %if.then54, %if.end43, %if.then37, %if.end20, %if.then19, %if.then12, %if.then
  %186 = load i8, i8* %retval, align 1, !dbg !9630
  ret i8 %186, !dbg !9630
}

declare dso_local zeroext i8 @double_int_fits_in_shwi_p(i64, i64) #2

declare dso_local i64 @double_int_to_shwi(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @difference_cost(%struct.ivopts_data* %data, %union.tree_node* %e1, %union.tree_node* %e2, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %depends_on) #0 !dbg !9631 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %e1.addr = alloca %union.tree_node*, align 8
  %e2.addr = alloca %union.tree_node*, align 8
  %symbol_present.addr = alloca i8*, align 8
  %var_present.addr = alloca i8*, align 8
  %offset.addr = alloca i64*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def**, align 8
  %mode = alloca i32, align 4
  %off1 = alloca i64, align 8
  %off2 = alloca i64, align 8
  %aff_e1 = alloca %struct.affine_tree_combination, align 8
  %aff_e2 = alloca %struct.affine_tree_combination, align 8
  %type9 = alloca %union.tree_node*, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !9634, metadata !DIExpression()), !dbg !9635
  store %union.tree_node* %e1, %union.tree_node** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1.addr, metadata !9636, metadata !DIExpression()), !dbg !9637
  store %union.tree_node* %e2, %union.tree_node** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2.addr, metadata !9638, metadata !DIExpression()), !dbg !9639
  store i8* %symbol_present, i8** %symbol_present.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %symbol_present.addr, metadata !9640, metadata !DIExpression()), !dbg !9641
  store i8* %var_present, i8** %var_present.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %var_present.addr, metadata !9642, metadata !DIExpression()), !dbg !9643
  store i64* %offset, i64** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %offset.addr, metadata !9644, metadata !DIExpression()), !dbg !9645
  store %struct.bitmap_head_def** %depends_on, %struct.bitmap_head_def*** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on.addr, metadata !9646, metadata !DIExpression()), !dbg !9647
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !9648, metadata !DIExpression()), !dbg !9649
  %0 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9650
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9650
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9650
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9650
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9650
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9650
  %bf.load = load i64, i64* %2, align 8, !dbg !9650
  %bf.clear = and i64 %bf.load, 65535, !dbg !9650
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9650
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !9650
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9650

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9650
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !9650
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !9650
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !9650
  %call = call i32 @vector_type_mode(%union.tree_node* %4), !dbg !9650
  br label %cond.end, !dbg !9650

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9650
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !9650
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !9650
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !9650
  %type5 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !9650
  %mode6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 6, !dbg !9650
  %bf.load7 = load i32, i32* %mode6, align 4, !dbg !9650
  %bf.lshr = lshr i32 %bf.load7, 16, !dbg !9650
  %bf.clear8 = and i32 %bf.lshr, 255, !dbg !9650
  br label %cond.end, !dbg !9650

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear8, %cond.false ], !dbg !9650
  store i32 %cond, i32* %mode, align 4, !dbg !9649
  call void @llvm.dbg.declare(metadata i64* %off1, metadata !9651, metadata !DIExpression()), !dbg !9652
  call void @llvm.dbg.declare(metadata i64* %off2, metadata !9653, metadata !DIExpression()), !dbg !9654
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %aff_e1, metadata !9655, metadata !DIExpression()), !dbg !9672
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %aff_e2, metadata !9673, metadata !DIExpression()), !dbg !9674
  call void @llvm.dbg.declare(metadata %union.tree_node** %type9, metadata !9675, metadata !DIExpression()), !dbg !9676
  %7 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9677
  %call10 = call %union.tree_node* @strip_offset(%union.tree_node* %7, i64* %off1), !dbg !9678
  store %union.tree_node* %call10, %union.tree_node** %e1.addr, align 8, !dbg !9679
  %8 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9680
  %call11 = call %union.tree_node* @strip_offset(%union.tree_node* %8, i64* %off2), !dbg !9681
  store %union.tree_node* %call11, %union.tree_node** %e2.addr, align 8, !dbg !9682
  %9 = load i64, i64* %off1, align 8, !dbg !9683
  %10 = load i64, i64* %off2, align 8, !dbg !9684
  %sub = sub i64 %9, %10, !dbg !9685
  %11 = load i64*, i64** %offset.addr, align 8, !dbg !9686
  %12 = load i64, i64* %11, align 8, !dbg !9687
  %add = add i64 %12, %sub, !dbg !9687
  store i64 %add, i64* %11, align 8, !dbg !9687
  %13 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9688
  %call12 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %13), !dbg !9688
  store %union.tree_node* %call12, %union.tree_node** %e1.addr, align 8, !dbg !9688
  %14 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9689
  %call13 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %14), !dbg !9689
  store %union.tree_node* %call13, %union.tree_node** %e2.addr, align 8, !dbg !9689
  %15 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9690
  %base14 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9690
  %16 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9690
  %bf.load15 = load i64, i64* %16, align 8, !dbg !9690
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9690
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9690
  %cmp18 = icmp eq i32 %bf.cast17, 121, !dbg !9692
  br i1 %cmp18, label %if.then, label %if.end, !dbg !9693

if.then:                                          ; preds = %cond.end
  %17 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9694
  %18 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9695
  %19 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9696
  %20 = load i8*, i8** %symbol_present.addr, align 8, !dbg !9697
  %21 = load i8*, i8** %var_present.addr, align 8, !dbg !9698
  %22 = load i64*, i64** %offset.addr, align 8, !dbg !9699
  %23 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9700
  %call19 = call i64 @ptr_difference_cost(%struct.ivopts_data* %17, %union.tree_node* %18, %union.tree_node* %19, i8* %20, i8* %21, i64* %22, %struct.bitmap_head_def** %23), !dbg !9701
  %24 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9701
  store i64 %call19, i64* %24, align 4, !dbg !9701
  br label %return, !dbg !9702

if.end:                                           ; preds = %cond.end
  %25 = load i8*, i8** %symbol_present.addr, align 8, !dbg !9703
  store i8 0, i8* %25, align 1, !dbg !9704
  %26 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9705
  %27 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9707
  %call20 = call i32 @operand_equal_p(%union.tree_node* %26, %union.tree_node* %27, i32 0), !dbg !9708
  %tobool = icmp ne i32 %call20, 0, !dbg !9708
  br i1 %tobool, label %if.then21, label %if.end22, !dbg !9709

if.then21:                                        ; preds = %if.end
  %28 = load i8*, i8** %var_present.addr, align 8, !dbg !9710
  store i8 0, i8* %28, align 1, !dbg !9712
  %29 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !9713
  br label %return, !dbg !9714

if.end22:                                         ; preds = %if.end
  %30 = load i8*, i8** %var_present.addr, align 8, !dbg !9715
  store i8 1, i8* %30, align 1, !dbg !9716
  %31 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9717
  %call23 = call i32 @integer_zerop(%union.tree_node* %31), !dbg !9719
  %tobool24 = icmp ne i32 %call23, 0, !dbg !9719
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !9720

if.then25:                                        ; preds = %if.end22
  %32 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9721
  %33 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9722
  %34 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9723
  %call26 = call i64 @force_var_cost(%struct.ivopts_data* %32, %union.tree_node* %33, %struct.bitmap_head_def** %34), !dbg !9724
  %35 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9724
  store i64 %call26, i64* %35, align 4, !dbg !9724
  br label %return, !dbg !9725

if.end27:                                         ; preds = %if.end22
  %36 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9726
  %call28 = call i32 @integer_zerop(%union.tree_node* %36), !dbg !9728
  %tobool29 = icmp ne i32 %call28, 0, !dbg !9728
  br i1 %tobool29, label %if.then30, label %if.end34, !dbg !9729

if.then30:                                        ; preds = %if.end27
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %retval, metadata !9730, metadata !DIExpression()), !dbg !9732
  %37 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9733
  %38 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9734
  %39 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9735
  %call31 = call i64 @force_var_cost(%struct.ivopts_data* %37, %union.tree_node* %38, %struct.bitmap_head_def** %39), !dbg !9736
  %40 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9736
  store i64 %call31, i64* %40, align 4, !dbg !9736
  %41 = load i32, i32* %mode, align 4, !dbg !9737
  %42 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9738
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %42, i32 0, i32 11, !dbg !9739
  %43 = load i8, i8* %speed, align 1, !dbg !9739
  %call32 = call i32 @multiply_by_cost(i64 -1, i32 %41, i8 zeroext %43), !dbg !9740
  %cost = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %retval, i32 0, i32 0, !dbg !9741
  %44 = load i32, i32* %cost, align 4, !dbg !9742
  %add33 = add i32 %44, %call32, !dbg !9742
  store i32 %add33, i32* %cost, align 4, !dbg !9742
  br label %return, !dbg !9743

if.end34:                                         ; preds = %if.end27
  %45 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9744
  %common35 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !9744
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !9744
  %46 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !9744
  %call37 = call %union.tree_node* @signed_type_for(%union.tree_node* %46), !dbg !9745
  store %union.tree_node* %call37, %union.tree_node** %type9, align 8, !dbg !9746
  %47 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !9747
  %48 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !9748
  call void @tree_to_aff_combination(%union.tree_node* %47, %union.tree_node* %48, %struct.affine_tree_combination* %aff_e1), !dbg !9749
  %49 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !9750
  %50 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !9751
  call void @tree_to_aff_combination(%union.tree_node* %49, %union.tree_node* %50, %struct.affine_tree_combination* %aff_e2), !dbg !9752
  %call38 = call { i64, i64 } @shwi_to_double_int(i64 -1), !dbg !9753
  %51 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !9753
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !9753
  %53 = extractvalue { i64, i64 } %call38, 0, !dbg !9753
  store i64 %53, i64* %52, align 8, !dbg !9753
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !9753
  %55 = extractvalue { i64, i64 } %call38, 1, !dbg !9753
  store i64 %55, i64* %54, align 8, !dbg !9753
  %56 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !9754
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 0, !dbg !9754
  %58 = load i64, i64* %57, align 8, !dbg !9754
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 1, !dbg !9754
  %60 = load i64, i64* %59, align 8, !dbg !9754
  call void @aff_combination_scale(%struct.affine_tree_combination* %aff_e2, i64 %58, i64 %60), !dbg !9754
  call void @aff_combination_add(%struct.affine_tree_combination* %aff_e1, %struct.affine_tree_combination* %aff_e2), !dbg !9755
  %61 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9756
  %call39 = call %union.tree_node* @aff_combination_to_tree(%struct.affine_tree_combination* %aff_e1), !dbg !9757
  %62 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9758
  %call40 = call i64 @force_var_cost(%struct.ivopts_data* %61, %union.tree_node* %call39, %struct.bitmap_head_def** %62), !dbg !9759
  %63 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9759
  store i64 %call40, i64* %63, align 4, !dbg !9759
  br label %return, !dbg !9760

return:                                           ; preds = %if.end34, %if.then30, %if.then25, %if.then21, %if.then
  %64 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9761
  %65 = load i64, i64* %64, align 4, !dbg !9761
  ret i64 %65, !dbg !9761
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @force_var_cost(%struct.ivopts_data* %data, %union.tree_node* %expr, %struct.bitmap_head_def** %depends_on) #0 !dbg !9762 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def**, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !9765, metadata !DIExpression()), !dbg !9766
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !9767, metadata !DIExpression()), !dbg !9768
  store %struct.bitmap_head_def** %depends_on, %struct.bitmap_head_def*** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on.addr, metadata !9769, metadata !DIExpression()), !dbg !9770
  %0 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9771
  %tobool = icmp ne %struct.bitmap_head_def** %0, null, !dbg !9771
  br i1 %tobool, label %if.then, label %if.end, !dbg !9773

if.then:                                          ; preds = %entry
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9774
  store %struct.ivopts_data* %1, %struct.ivopts_data** @fd_ivopts_data, align 8, !dbg !9776
  %2 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !9777
  %3 = bitcast %struct.bitmap_head_def** %2 to i8*, !dbg !9777
  %call = call %union.tree_node* @walk_tree_1(%union.tree_node** %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_depends, i8* %3, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !9777
  br label %if.end, !dbg !9778

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !9779
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !9780
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %5, i32 0, i32 11, !dbg !9781
  %6 = load i8, i8* %speed, align 1, !dbg !9781
  %call1 = call i64 @force_expr_to_var_cost(%union.tree_node* %4, i8 zeroext %6), !dbg !9782
  %7 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9782
  store i64 %call1, i64* %7, align 4, !dbg !9782
  %8 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9783
  %9 = load i64, i64* %8, align 4, !dbg !9783
  ret i64 %9, !dbg !9783
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_cost(i32 %mode, i8 zeroext %speed) #0 !dbg !2638 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %speed.addr = alloca i8, align 1
  %seq = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9784, metadata !DIExpression()), !dbg !9785
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !9786, metadata !DIExpression()), !dbg !9787
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !9788, metadata !DIExpression()), !dbg !9789
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !9790, metadata !DIExpression()), !dbg !9791
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9792
  %idxprom = zext i32 %0 to i64, !dbg !9794
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @add_cost.costs, i64 0, i64 %idxprom, !dbg !9794
  %1 = load i32, i32* %arrayidx, align 4, !dbg !9794
  %tobool = icmp ne i32 %1, 0, !dbg !9794
  br i1 %tobool, label %if.then, label %if.end, !dbg !9795

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9796
  %idxprom1 = zext i32 %2 to i64, !dbg !9797
  %arrayidx2 = getelementptr inbounds [87 x i32], [87 x i32]* @add_cost.costs, i64 0, i64 %idxprom1, !dbg !9797
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !9797
  store i32 %3, i32* %retval, align 4, !dbg !9798
  br label %return, !dbg !9798

if.end:                                           ; preds = %entry
  call void @start_sequence(), !dbg !9799
  %4 = load i32, i32* %mode.addr, align 4, !dbg !9800
  %5 = load i32, i32* %mode.addr, align 4, !dbg !9800
  %call = call %struct.rtx_def* @gen_raw_REG(i32 %5, i32 58), !dbg !9800
  %6 = load i32, i32* %mode.addr, align 4, !dbg !9800
  %call3 = call %struct.rtx_def* @gen_raw_REG(i32 %6, i32 59), !dbg !9800
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %4, %struct.rtx_def* %call, %struct.rtx_def* %call3), !dbg !9800
  %call5 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %call4, %struct.rtx_def* null), !dbg !9801
  %call6 = call %struct.rtx_def* @get_insns(), !dbg !9802
  store %struct.rtx_def* %call6, %struct.rtx_def** %seq, align 8, !dbg !9803
  call void @end_sequence(), !dbg !9804
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9805
  %8 = load i8, i8* %speed.addr, align 1, !dbg !9806
  %call7 = call i32 @seq_cost(%struct.rtx_def* %7, i8 zeroext %8), !dbg !9807
  store i32 %call7, i32* %cost, align 4, !dbg !9808
  %9 = load i32, i32* %cost, align 4, !dbg !9809
  %tobool8 = icmp ne i32 %9, 0, !dbg !9809
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !9811

if.then9:                                         ; preds = %if.end
  store i32 1, i32* %cost, align 4, !dbg !9812
  br label %if.end10, !dbg !9813

if.end10:                                         ; preds = %if.then9, %if.end
  %10 = load i32, i32* %cost, align 4, !dbg !9814
  %11 = load i32, i32* %mode.addr, align 4, !dbg !9815
  %idxprom11 = zext i32 %11 to i64, !dbg !9816
  %arrayidx12 = getelementptr inbounds [87 x i32], [87 x i32]* @add_cost.costs, i64 0, i64 %idxprom11, !dbg !9816
  store i32 %10, i32* %arrayidx12, align 4, !dbg !9817
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9818
  %tobool13 = icmp ne %struct._IO_FILE* %12, null, !dbg !9818
  br i1 %tobool13, label %land.lhs.true, label %if.end19, !dbg !9820

land.lhs.true:                                    ; preds = %if.end10
  %13 = load i32, i32* @dump_flags, align 4, !dbg !9821
  %and = and i32 %13, 8, !dbg !9822
  %tobool14 = icmp ne i32 %and, 0, !dbg !9822
  br i1 %tobool14, label %if.then15, label %if.end19, !dbg !9823

if.then15:                                        ; preds = %land.lhs.true
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9824
  %15 = load i32, i32* %mode.addr, align 4, !dbg !9825
  %idxprom16 = zext i32 %15 to i64, !dbg !9825
  %arrayidx17 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom16, !dbg !9825
  %16 = load i8*, i8** %arrayidx17, align 8, !dbg !9825
  %17 = load i32, i32* %cost, align 4, !dbg !9826
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.53, i64 0, i64 0), i8* %16, i32 %17), !dbg !9827
  br label %if.end19, !dbg !9827

if.end19:                                         ; preds = %if.then15, %land.lhs.true, %if.end10
  %18 = load i32, i32* %cost, align 4, !dbg !9828
  store i32 %18, i32* %retval, align 4, !dbg !9829
  br label %return, !dbg !9829

return:                                           ; preds = %if.end19, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !9830
  ret i32 %19, !dbg !9830
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @add_costs(i64 %cost1.coerce, i64 %cost2.coerce) #0 !dbg !9831 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %cost1 = alloca %struct.comp_cost, align 4
  %cost2 = alloca %struct.comp_cost, align 4
  %0 = bitcast %struct.comp_cost* %cost1 to i64*
  store i64 %cost1.coerce, i64* %0, align 4
  %1 = bitcast %struct.comp_cost* %cost2 to i64*
  store i64 %cost2.coerce, i64* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost1, metadata !9834, metadata !DIExpression()), !dbg !9835
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost2, metadata !9836, metadata !DIExpression()), !dbg !9837
  %cost = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 0, !dbg !9838
  %2 = load i32, i32* %cost, align 4, !dbg !9838
  %cost3 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 0, !dbg !9839
  %3 = load i32, i32* %cost3, align 4, !dbg !9840
  %add = add nsw i32 %3, %2, !dbg !9840
  store i32 %add, i32* %cost3, align 4, !dbg !9840
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 1, !dbg !9841
  %4 = load i32, i32* %complexity, align 4, !dbg !9841
  %complexity4 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 1, !dbg !9842
  %5 = load i32, i32* %complexity4, align 4, !dbg !9843
  %add5 = add i32 %5, %4, !dbg !9843
  store i32 %add5, i32* %complexity4, align 4, !dbg !9843
  %6 = bitcast %struct.comp_cost* %retval to i8*, !dbg !9844
  %7 = bitcast %struct.comp_cost* %cost1 to i8*, !dbg !9844
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 8, i1 false), !dbg !9844
  %8 = bitcast %struct.comp_cost* %retval to i64*, !dbg !9845
  %9 = load i64, i64* %8, align 4, !dbg !9845
  ret i64 %9, !dbg !9845
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_after_increment(%struct.loop* %loop, %struct.iv_cand* %cand, %union.gimple_statement_d* %stmt) #0 !dbg !9846 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9849, metadata !DIExpression()), !dbg !9850
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !9851, metadata !DIExpression()), !dbg !9852
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9853, metadata !DIExpression()), !dbg !9854
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9855
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 2, !dbg !9856
  %1 = load i32, i32* %pos, align 8, !dbg !9856
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 0, label %sw.bb1
    i32 4, label %sw.bb2
    i32 3, label %sw.bb2
    i32 2, label %sw.bb4
  ], !dbg !9857

sw.bb:                                            ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9858
  br label %return, !dbg !9858

sw.bb1:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9860
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9861
  %call = call zeroext i8 @stmt_after_ip_normal_pos(%struct.loop* %2, %union.gimple_statement_d* %3), !dbg !9862
  store i8 %call, i8* %retval, align 1, !dbg !9863
  br label %return, !dbg !9863

sw.bb2:                                           ; preds = %entry, %entry
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9864
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9865
  %call3 = call zeroext i8 @stmt_after_inc_pos(%struct.iv_cand* %4, %union.gimple_statement_d* %5, i8 zeroext 0), !dbg !9866
  store i8 %call3, i8* %retval, align 1, !dbg !9867
  br label %return, !dbg !9867

sw.bb4:                                           ; preds = %entry
  %6 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !9868
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9869
  %call5 = call zeroext i8 @stmt_after_inc_pos(%struct.iv_cand* %6, %union.gimple_statement_d* %7, i8 zeroext 1), !dbg !9870
  store i8 %call5, i8* %retval, align 1, !dbg !9871
  br label %return, !dbg !9871

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !9872
  br label %sw.epilog, !dbg !9873

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !9874
  br label %return, !dbg !9874

return:                                           ; preds = %sw.epilog, %sw.bb4, %sw.bb2, %sw.bb1, %sw.bb
  %8 = load i8, i8* %retval, align 1, !dbg !9875
  ret i8 %8, !dbg !9875
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @get_address_cost(i8 zeroext %symbol_present, i8 zeroext %var_present, i64 %offset, i64 %ratio, i64 %cstep, i32 %mem_mode, i8 zeroext %as, i8 zeroext %speed, i8 zeroext %stmt_after_inc, i8* %may_autoinc) #0 !dbg !2646 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %symbol_present.addr = alloca i8, align 1
  %var_present.addr = alloca i8, align 1
  %offset.addr = alloca i64, align 8
  %ratio.addr = alloca i64, align 8
  %cstep.addr = alloca i64, align 8
  %mem_mode.addr = alloca i32, align 4
  %as.addr = alloca i8, align 1
  %speed.addr = alloca i8, align 1
  %stmt_after_inc.addr = alloca i8, align 1
  %may_autoinc.addr = alloca i8*, align 8
  %address_mode = alloca i32, align 4
  %data_index = alloca i32, align 4
  %data = alloca %struct.anon*, align 8
  %cost = alloca i32, align 4
  %acost = alloca i32, align 4
  %complexity = alloca i32, align 4
  %offset_p = alloca i8, align 1
  %ratio_p = alloca i8, align 1
  %autoinc = alloca i8, align 1
  %s_offset = alloca i64, align 8
  %autoinc_offset = alloca i64, align 8
  %msize = alloca i64, align 8
  %mask = alloca i64, align 8
  %bits = alloca i32, align 4
  %i = alloca i64, align 8
  %start = alloca i64, align 8
  %rat = alloca i64, align 8
  %off = alloca i64, align 8
  %old_cse_not_expected = alloca i32, align 4
  %sym_p = alloca i32, align 4
  %var_p = alloca i32, align 4
  %off_p = alloca i32, align 4
  %rat_p = alloca i32, align 4
  %add_c = alloca i32, align 4
  %seq = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %base17 = alloca %struct.rtx_def*, align 8
  %reg0 = alloca %struct.rtx_def*, align 8
  %reg1 = alloca %struct.rtx_def*, align 8
  store i8 %symbol_present, i8* %symbol_present.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %symbol_present.addr, metadata !9876, metadata !DIExpression()), !dbg !9877
  store i8 %var_present, i8* %var_present.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %var_present.addr, metadata !9878, metadata !DIExpression()), !dbg !9879
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !9880, metadata !DIExpression()), !dbg !9881
  store i64 %ratio, i64* %ratio.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ratio.addr, metadata !9882, metadata !DIExpression()), !dbg !9883
  store i64 %cstep, i64* %cstep.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cstep.addr, metadata !9884, metadata !DIExpression()), !dbg !9885
  store i32 %mem_mode, i32* %mem_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mem_mode.addr, metadata !9886, metadata !DIExpression()), !dbg !9887
  store i8 %as, i8* %as.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %as.addr, metadata !9888, metadata !DIExpression()), !dbg !9889
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !9890, metadata !DIExpression()), !dbg !9891
  store i8 %stmt_after_inc, i8* %stmt_after_inc.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %stmt_after_inc.addr, metadata !9892, metadata !DIExpression()), !dbg !9893
  store i8* %may_autoinc, i8** %may_autoinc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %may_autoinc.addr, metadata !9894, metadata !DIExpression()), !dbg !9895
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !9896, metadata !DIExpression()), !dbg !9897
  %0 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !9898
  %1 = load i8, i8* %as.addr, align 1, !dbg !9899
  %call = call i32 %0(i8 zeroext %1), !dbg !9900
  store i32 %call, i32* %address_mode, align 4, !dbg !9897
  call void @llvm.dbg.declare(metadata i32* %data_index, metadata !9901, metadata !DIExpression()), !dbg !9902
  %2 = load i8, i8* %as.addr, align 1, !dbg !9903
  %conv = zext i8 %2 to i32, !dbg !9904
  %mul = mul nsw i32 %conv, 87, !dbg !9905
  %3 = load i32, i32* %mem_mode.addr, align 4, !dbg !9906
  %add = add nsw i32 %mul, %3, !dbg !9907
  store i32 %add, i32* %data_index, align 4, !dbg !9902
  call void @llvm.dbg.declare(metadata %struct.anon** %data, metadata !9908, metadata !DIExpression()), !dbg !9909
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !9910, metadata !DIExpression()), !dbg !9911
  call void @llvm.dbg.declare(metadata i32* %acost, metadata !9912, metadata !DIExpression()), !dbg !9913
  call void @llvm.dbg.declare(metadata i32* %complexity, metadata !9914, metadata !DIExpression()), !dbg !9915
  call void @llvm.dbg.declare(metadata i8* %offset_p, metadata !9916, metadata !DIExpression()), !dbg !9917
  call void @llvm.dbg.declare(metadata i8* %ratio_p, metadata !9918, metadata !DIExpression()), !dbg !9919
  call void @llvm.dbg.declare(metadata i8* %autoinc, metadata !9920, metadata !DIExpression()), !dbg !9921
  call void @llvm.dbg.declare(metadata i64* %s_offset, metadata !9922, metadata !DIExpression()), !dbg !9923
  call void @llvm.dbg.declare(metadata i64* %autoinc_offset, metadata !9924, metadata !DIExpression()), !dbg !9925
  call void @llvm.dbg.declare(metadata i64* %msize, metadata !9926, metadata !DIExpression()), !dbg !9927
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !9928, metadata !DIExpression()), !dbg !9929
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !9930, metadata !DIExpression()), !dbg !9931
  %4 = load i32, i32* %data_index, align 4, !dbg !9932
  %5 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, align 8, !dbg !9934
  %tobool = icmp ne %struct.VEC_address_cost_data_heap* %5, null, !dbg !9934
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9934

cond.true:                                        ; preds = %entry
  %6 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, align 8, !dbg !9934
  %base = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %6, i32 0, i32 0, !dbg !9934
  br label %cond.end, !dbg !9934

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9934

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_address_cost_data_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9934
  %call1 = call i32 @VEC_address_cost_data_base_length(%struct.VEC_address_cost_data_base* %cond), !dbg !9934
  %cmp = icmp uge i32 %4, %call1, !dbg !9935
  br i1 %cmp, label %if.then, label %if.end, !dbg !9936

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %data_index, align 4, !dbg !9937
  %add3 = add i32 %7, 1, !dbg !9937
  call void @VEC_address_cost_data_heap_safe_grow_cleared(%struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, i32 %add3), !dbg !9937
  br label %if.end, !dbg !9937

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, align 8, !dbg !9938
  %tobool4 = icmp ne %struct.VEC_address_cost_data_heap* %8, null, !dbg !9938
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !9938

cond.true5:                                       ; preds = %if.end
  %9 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, align 8, !dbg !9938
  %base6 = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %9, i32 0, i32 0, !dbg !9938
  br label %cond.end8, !dbg !9938

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !9938

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_address_cost_data_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !9938
  %10 = load i32, i32* %data_index, align 4, !dbg !9938
  %call10 = call %struct.anon* @VEC_address_cost_data_base_index(%struct.VEC_address_cost_data_base* %cond9, i32 %10), !dbg !9938
  store %struct.anon* %call10, %struct.anon** %data, align 8, !dbg !9939
  %11 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !9940
  %tobool11 = icmp ne %struct.anon* %11, null, !dbg !9940
  br i1 %tobool11, label %if.end281, label %if.then12, !dbg !9942

if.then12:                                        ; preds = %cond.end8
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9943, metadata !DIExpression()), !dbg !9945
  call void @llvm.dbg.declare(metadata i64* %start, metadata !9946, metadata !DIExpression()), !dbg !9947
  %12 = load i32, i32* @ix86_isa_flags, align 4, !dbg !9948
  %and = and i32 %12, 32, !dbg !9948
  %cmp13 = icmp ne i32 %and, 0, !dbg !9948
  %13 = zext i1 %cmp13 to i64, !dbg !9948
  %cond15 = select i1 %cmp13, i32 256, i32 128, !dbg !9948
  %div = sdiv i32 %cond15, 8, !dbg !9949
  %conv16 = sext i32 %div to i64, !dbg !9948
  store i64 %conv16, i64* %start, align 8, !dbg !9947
  call void @llvm.dbg.declare(metadata i64* %rat, metadata !9950, metadata !DIExpression()), !dbg !9951
  call void @llvm.dbg.declare(metadata i64* %off, metadata !9952, metadata !DIExpression()), !dbg !9953
  call void @llvm.dbg.declare(metadata i32* %old_cse_not_expected, metadata !9954, metadata !DIExpression()), !dbg !9955
  call void @llvm.dbg.declare(metadata i32* %sym_p, metadata !9956, metadata !DIExpression()), !dbg !9957
  call void @llvm.dbg.declare(metadata i32* %var_p, metadata !9958, metadata !DIExpression()), !dbg !9959
  call void @llvm.dbg.declare(metadata i32* %off_p, metadata !9960, metadata !DIExpression()), !dbg !9961
  call void @llvm.dbg.declare(metadata i32* %rat_p, metadata !9962, metadata !DIExpression()), !dbg !9963
  call void @llvm.dbg.declare(metadata i32* %add_c, metadata !9964, metadata !DIExpression()), !dbg !9965
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !9966, metadata !DIExpression()), !dbg !9967
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !9968, metadata !DIExpression()), !dbg !9969
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %base17, metadata !9970, metadata !DIExpression()), !dbg !9971
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg0, metadata !9972, metadata !DIExpression()), !dbg !9973
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg1, metadata !9974, metadata !DIExpression()), !dbg !9975
  %call18 = call i8* @xcalloc(i64 1, i64 80), !dbg !9976
  %14 = bitcast i8* %call18 to %struct.anon*, !dbg !9977
  store %struct.anon* %14, %struct.anon** %data, align 8, !dbg !9978
  %15 = load i32, i32* %address_mode, align 4, !dbg !9979
  %call19 = call %struct.rtx_def* @gen_raw_REG(i32 %15, i32 58), !dbg !9980
  store %struct.rtx_def* %call19, %struct.rtx_def** %reg1, align 8, !dbg !9981
  %16 = load i32, i32* %address_mode, align 4, !dbg !9982
  %17 = load %struct.rtx_def*, %struct.rtx_def** %reg1, align 8, !dbg !9982
  %call20 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %16, %struct.rtx_def* %17, %struct.rtx_def* null), !dbg !9982
  store %struct.rtx_def* %call20, %struct.rtx_def** %addr, align 8, !dbg !9983
  %18 = load i64, i64* %start, align 8, !dbg !9984
  store i64 %18, i64* %i, align 8, !dbg !9986
  br label %for.cond, !dbg !9987

for.cond:                                         ; preds = %for.inc, %if.then12
  %19 = load i64, i64* %i, align 8, !dbg !9988
  %cmp21 = icmp sle i64 %19, 1048576, !dbg !9990
  br i1 %cmp21, label %for.body, label %for.end, !dbg !9991

for.body:                                         ; preds = %for.cond
  %20 = load i64, i64* %i, align 8, !dbg !9992
  %21 = load i32, i32* %address_mode, align 4, !dbg !9994
  %call23 = call %struct.rtx_def* @gen_int_mode(i64 %20, i32 %21), !dbg !9995
  %22 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !9996
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !9996
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9996
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !9996
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9996
  store %struct.rtx_def* %call23, %struct.rtx_def** %rt_rtx, align 8, !dbg !9997
  %23 = load i32, i32* %mem_mode.addr, align 4, !dbg !9998
  %24 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10000
  %25 = load i8, i8* %as.addr, align 1, !dbg !10001
  %call24 = call i32 @memory_address_addr_space_p(i32 %23, %struct.rtx_def* %24, i8 zeroext %25), !dbg !10002
  %tobool25 = icmp ne i32 %call24, 0, !dbg !10002
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !10003

if.then26:                                        ; preds = %for.body
  br label %for.end, !dbg !10004

if.end27:                                         ; preds = %for.body
  br label %for.inc, !dbg !10005

for.inc:                                          ; preds = %if.end27
  %26 = load i64, i64* %i, align 8, !dbg !10006
  %shl = shl i64 %26, 1, !dbg !10006
  store i64 %shl, i64* %i, align 8, !dbg !10006
  br label %for.cond, !dbg !10007, !llvm.loop !10008

for.end:                                          ; preds = %if.then26, %for.cond
  %27 = load i64, i64* %i, align 8, !dbg !10010
  %28 = load i64, i64* %start, align 8, !dbg !10011
  %cmp28 = icmp eq i64 %27, %28, !dbg !10012
  br i1 %cmp28, label %cond.true30, label %cond.false31, !dbg !10010

cond.true30:                                      ; preds = %for.end
  br label %cond.end32, !dbg !10010

cond.false31:                                     ; preds = %for.end
  %29 = load i64, i64* %i, align 8, !dbg !10013
  %shr = ashr i64 %29, 1, !dbg !10014
  br label %cond.end32, !dbg !10010

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i64 [ 0, %cond.true30 ], [ %shr, %cond.false31 ], !dbg !10010
  %30 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10015
  %max_offset = getelementptr inbounds %struct.anon, %struct.anon* %30, i32 0, i32 1, !dbg !10016
  store i64 %cond33, i64* %max_offset, align 8, !dbg !10017
  %31 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10018
  %max_offset34 = getelementptr inbounds %struct.anon, %struct.anon* %31, i32 0, i32 1, !dbg !10019
  %32 = load i64, i64* %max_offset34, align 8, !dbg !10019
  store i64 %32, i64* %off, align 8, !dbg !10020
  %33 = load i64, i64* %start, align 8, !dbg !10021
  store i64 %33, i64* %i, align 8, !dbg !10023
  br label %for.cond35, !dbg !10024

for.cond35:                                       ; preds = %for.inc48, %cond.end32
  %34 = load i64, i64* %i, align 8, !dbg !10025
  %cmp36 = icmp sle i64 %34, 1048576, !dbg !10027
  br i1 %cmp36, label %for.body38, label %for.end50, !dbg !10028

for.body38:                                       ; preds = %for.cond35
  %35 = load i64, i64* %i, align 8, !dbg !10029
  %sub = sub nsw i64 0, %35, !dbg !10031
  %36 = load i32, i32* %address_mode, align 4, !dbg !10032
  %call39 = call %struct.rtx_def* @gen_int_mode(i64 %sub, i32 %36), !dbg !10033
  %37 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10034
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !10034
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !10034
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !10034
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !10034
  store %struct.rtx_def* %call39, %struct.rtx_def** %rt_rtx43, align 8, !dbg !10035
  %38 = load i32, i32* %mem_mode.addr, align 4, !dbg !10036
  %39 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10038
  %40 = load i8, i8* %as.addr, align 1, !dbg !10039
  %call44 = call i32 @memory_address_addr_space_p(i32 %38, %struct.rtx_def* %39, i8 zeroext %40), !dbg !10040
  %tobool45 = icmp ne i32 %call44, 0, !dbg !10040
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !10041

if.then46:                                        ; preds = %for.body38
  br label %for.end50, !dbg !10042

if.end47:                                         ; preds = %for.body38
  br label %for.inc48, !dbg !10043

for.inc48:                                        ; preds = %if.end47
  %41 = load i64, i64* %i, align 8, !dbg !10044
  %shl49 = shl i64 %41, 1, !dbg !10044
  store i64 %shl49, i64* %i, align 8, !dbg !10044
  br label %for.cond35, !dbg !10045, !llvm.loop !10046

for.end50:                                        ; preds = %if.then46, %for.cond35
  %42 = load i64, i64* %i, align 8, !dbg !10048
  %43 = load i64, i64* %start, align 8, !dbg !10049
  %cmp51 = icmp eq i64 %42, %43, !dbg !10050
  br i1 %cmp51, label %cond.true53, label %cond.false54, !dbg !10048

cond.true53:                                      ; preds = %for.end50
  br label %cond.end57, !dbg !10048

cond.false54:                                     ; preds = %for.end50
  %44 = load i64, i64* %i, align 8, !dbg !10051
  %shr55 = ashr i64 %44, 1, !dbg !10052
  %sub56 = sub nsw i64 0, %shr55, !dbg !10053
  br label %cond.end57, !dbg !10048

cond.end57:                                       ; preds = %cond.false54, %cond.true53
  %cond58 = phi i64 [ 0, %cond.true53 ], [ %sub56, %cond.false54 ], !dbg !10048
  %45 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10054
  %min_offset = getelementptr inbounds %struct.anon, %struct.anon* %45, i32 0, i32 0, !dbg !10055
  store i64 %cond58, i64* %min_offset, align 8, !dbg !10056
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10057
  %tobool59 = icmp ne %struct._IO_FILE* %46, null, !dbg !10057
  br i1 %tobool59, label %land.lhs.true, label %if.end73, !dbg !10059

land.lhs.true:                                    ; preds = %cond.end57
  %47 = load i32, i32* @dump_flags, align 4, !dbg !10060
  %and60 = and i32 %47, 8, !dbg !10061
  %tobool61 = icmp ne i32 %and60, 0, !dbg !10061
  br i1 %tobool61, label %if.then62, label %if.end73, !dbg !10062

if.then62:                                        ; preds = %land.lhs.true
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10063
  %call63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.54, i64 0, i64 0)), !dbg !10065
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10066
  %50 = load i32, i32* %mem_mode.addr, align 4, !dbg !10067
  %idxprom = zext i32 %50 to i64, !dbg !10067
  %arrayidx64 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom, !dbg !10067
  %51 = load i8*, i8** %arrayidx64, align 8, !dbg !10067
  %52 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10068
  %min_offset65 = getelementptr inbounds %struct.anon, %struct.anon* %52, i32 0, i32 0, !dbg !10069
  %53 = load i64, i64* %min_offset65, align 8, !dbg !10069
  %conv66 = trunc i64 %53 to i32, !dbg !10070
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.55, i64 0, i64 0), i8* %51, i32 %conv66), !dbg !10071
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10072
  %55 = load i32, i32* %mem_mode.addr, align 4, !dbg !10073
  %idxprom68 = zext i32 %55 to i64, !dbg !10073
  %arrayidx69 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom68, !dbg !10073
  %56 = load i8*, i8** %arrayidx69, align 8, !dbg !10073
  %57 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10074
  %max_offset70 = getelementptr inbounds %struct.anon, %struct.anon* %57, i32 0, i32 1, !dbg !10075
  %58 = load i64, i64* %max_offset70, align 8, !dbg !10075
  %conv71 = trunc i64 %58 to i32, !dbg !10076
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i64 0, i64 0), i8* %56, i32 %conv71), !dbg !10077
  br label %if.end73, !dbg !10078

if.end73:                                         ; preds = %if.then62, %land.lhs.true, %cond.end57
  store i64 1, i64* %rat, align 8, !dbg !10079
  store i64 2, i64* %i, align 8, !dbg !10080
  br label %for.cond74, !dbg !10082

for.cond74:                                       ; preds = %for.inc82, %if.end73
  %59 = load i64, i64* %i, align 8, !dbg !10083
  %cmp75 = icmp sle i64 %59, 128, !dbg !10085
  br i1 %cmp75, label %for.body77, label %for.end83, !dbg !10086

for.body77:                                       ; preds = %for.cond74
  %60 = load i64, i64* %i, align 8, !dbg !10087
  %61 = load i32, i32* %mem_mode.addr, align 4, !dbg !10089
  %62 = load i8, i8* %as.addr, align 1, !dbg !10090
  %call78 = call zeroext i8 @multiplier_allowed_in_address_p(i64 %60, i32 %61, i8 zeroext %62), !dbg !10091
  %tobool79 = icmp ne i8 %call78, 0, !dbg !10091
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !10092

if.then80:                                        ; preds = %for.body77
  %63 = load i64, i64* %i, align 8, !dbg !10093
  store i64 %63, i64* %rat, align 8, !dbg !10095
  br label %for.end83, !dbg !10096

if.end81:                                         ; preds = %for.body77
  br label %for.inc82, !dbg !10097

for.inc82:                                        ; preds = %if.end81
  %64 = load i64, i64* %i, align 8, !dbg !10098
  %inc = add nsw i64 %64, 1, !dbg !10098
  store i64 %inc, i64* %i, align 8, !dbg !10098
  br label %for.cond74, !dbg !10099, !llvm.loop !10100

for.end83:                                        ; preds = %if.then80, %for.cond74
  store i32 0, i32* %acost, align 4, !dbg !10102
  %65 = load i32, i32* %address_mode, align 4, !dbg !10103
  %call84 = call %struct.rtx_def* @gen_raw_REG(i32 %65, i32 58), !dbg !10104
  store %struct.rtx_def* %call84, %struct.rtx_def** %reg0, align 8, !dbg !10105
  %66 = load i32, i32* %address_mode, align 4, !dbg !10106
  %call85 = call %struct.rtx_def* @gen_raw_REG(i32 %66, i32 59), !dbg !10107
  store %struct.rtx_def* %call85, %struct.rtx_def** %reg1, align 8, !dbg !10108
  store i64 0, i64* %i, align 8, !dbg !10109
  br label %for.cond86, !dbg !10111

for.cond86:                                       ; preds = %for.inc149, %for.end83
  %67 = load i64, i64* %i, align 8, !dbg !10112
  %cmp87 = icmp slt i64 %67, 16, !dbg !10114
  br i1 %cmp87, label %for.body89, label %for.end151, !dbg !10115

for.body89:                                       ; preds = %for.cond86
  %68 = load i64, i64* %i, align 8, !dbg !10116
  %and90 = and i64 %68, 1, !dbg !10118
  %conv91 = trunc i64 %and90 to i32, !dbg !10116
  store i32 %conv91, i32* %sym_p, align 4, !dbg !10119
  %69 = load i64, i64* %i, align 8, !dbg !10120
  %shr92 = ashr i64 %69, 1, !dbg !10121
  %and93 = and i64 %shr92, 1, !dbg !10122
  %conv94 = trunc i64 %and93 to i32, !dbg !10123
  store i32 %conv94, i32* %var_p, align 4, !dbg !10124
  %70 = load i64, i64* %i, align 8, !dbg !10125
  %shr95 = ashr i64 %70, 2, !dbg !10126
  %and96 = and i64 %shr95, 1, !dbg !10127
  %conv97 = trunc i64 %and96 to i32, !dbg !10128
  store i32 %conv97, i32* %off_p, align 4, !dbg !10129
  %71 = load i64, i64* %i, align 8, !dbg !10130
  %shr98 = ashr i64 %71, 3, !dbg !10131
  %and99 = and i64 %shr98, 1, !dbg !10132
  %conv100 = trunc i64 %and99 to i32, !dbg !10133
  store i32 %conv100, i32* %rat_p, align 4, !dbg !10134
  %72 = load %struct.rtx_def*, %struct.rtx_def** %reg0, align 8, !dbg !10135
  store %struct.rtx_def* %72, %struct.rtx_def** %addr, align 8, !dbg !10136
  %73 = load i32, i32* %rat_p, align 4, !dbg !10137
  %tobool101 = icmp ne i32 %73, 0, !dbg !10137
  br i1 %tobool101, label %if.then102, label %if.end105, !dbg !10139

if.then102:                                       ; preds = %for.body89
  %74 = load i32, i32* %address_mode, align 4, !dbg !10140
  %75 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10140
  %76 = load i64, i64* %rat, align 8, !dbg !10140
  %77 = load i32, i32* %address_mode, align 4, !dbg !10140
  %call103 = call %struct.rtx_def* @gen_int_mode(i64 %76, i32 %77), !dbg !10140
  %call104 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %74, %struct.rtx_def* %75, %struct.rtx_def* %call103), !dbg !10140
  store %struct.rtx_def* %call104, %struct.rtx_def** %addr, align 8, !dbg !10141
  br label %if.end105, !dbg !10142

if.end105:                                        ; preds = %if.then102, %for.body89
  %78 = load i32, i32* %var_p, align 4, !dbg !10143
  %tobool106 = icmp ne i32 %78, 0, !dbg !10143
  br i1 %tobool106, label %if.then107, label %if.end109, !dbg !10145

if.then107:                                       ; preds = %if.end105
  %79 = load i32, i32* %address_mode, align 4, !dbg !10146
  %80 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10146
  %81 = load %struct.rtx_def*, %struct.rtx_def** %reg1, align 8, !dbg !10146
  %call108 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %79, %struct.rtx_def* %80, %struct.rtx_def* %81), !dbg !10146
  store %struct.rtx_def* %call108, %struct.rtx_def** %addr, align 8, !dbg !10147
  br label %if.end109, !dbg !10148

if.end109:                                        ; preds = %if.then107, %if.end105
  %82 = load i32, i32* %sym_p, align 4, !dbg !10149
  %tobool110 = icmp ne i32 %82, 0, !dbg !10149
  br i1 %tobool110, label %if.then111, label %if.else, !dbg !10151

if.then111:                                       ; preds = %if.end109
  %83 = load i32, i32* %address_mode, align 4, !dbg !10152
  %call112 = call i8* @ggc_alloc_string(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.17, i64 0, i64 0), i32 -1), !dbg !10152
  %call113 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 %83, i8* %call112), !dbg !10152
  store %struct.rtx_def* %call113, %struct.rtx_def** %base17, align 8, !dbg !10154
  %84 = load %struct.rtx_def*, %struct.rtx_def** %base17, align 8, !dbg !10155
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !10155
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !10155
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 1, !dbg !10155
  %rt_int = bitcast %union.rtunion_def* %arrayidx116 to i32*, !dbg !10155
  store i32 2, i32* %rt_int, align 8, !dbg !10156
  %85 = load i32, i32* %off_p, align 4, !dbg !10157
  %tobool117 = icmp ne i32 %85, 0, !dbg !10157
  br i1 %tobool117, label %if.then118, label %if.end122, !dbg !10159

if.then118:                                       ; preds = %if.then111
  %86 = load i32, i32* %address_mode, align 4, !dbg !10160
  %87 = load i32, i32* %address_mode, align 4, !dbg !10160
  %88 = load %struct.rtx_def*, %struct.rtx_def** %base17, align 8, !dbg !10160
  %89 = load i64, i64* %off, align 8, !dbg !10160
  %90 = load i32, i32* %address_mode, align 4, !dbg !10160
  %call119 = call %struct.rtx_def* @gen_int_mode(i64 %89, i32 %90), !dbg !10160
  %call120 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %87, %struct.rtx_def* %88, %struct.rtx_def* %call119), !dbg !10160
  %call121 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 35, i32 %86, %struct.rtx_def* %call120), !dbg !10160
  store %struct.rtx_def* %call121, %struct.rtx_def** %base17, align 8, !dbg !10161
  br label %if.end122, !dbg !10162

if.end122:                                        ; preds = %if.then118, %if.then111
  br label %if.end128, !dbg !10163

if.else:                                          ; preds = %if.end109
  %91 = load i32, i32* %off_p, align 4, !dbg !10164
  %tobool123 = icmp ne i32 %91, 0, !dbg !10164
  br i1 %tobool123, label %if.then124, label %if.else126, !dbg !10166

if.then124:                                       ; preds = %if.else
  %92 = load i64, i64* %off, align 8, !dbg !10167
  %93 = load i32, i32* %address_mode, align 4, !dbg !10168
  %call125 = call %struct.rtx_def* @gen_int_mode(i64 %92, i32 %93), !dbg !10169
  store %struct.rtx_def* %call125, %struct.rtx_def** %base17, align 8, !dbg !10170
  br label %if.end127, !dbg !10171

if.else126:                                       ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %base17, align 8, !dbg !10172
  br label %if.end127

if.end127:                                        ; preds = %if.else126, %if.then124
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.end122
  %94 = load %struct.rtx_def*, %struct.rtx_def** %base17, align 8, !dbg !10173
  %tobool129 = icmp ne %struct.rtx_def* %94, null, !dbg !10173
  br i1 %tobool129, label %if.then130, label %if.end132, !dbg !10175

if.then130:                                       ; preds = %if.end128
  %95 = load i32, i32* %address_mode, align 4, !dbg !10176
  %96 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10176
  %97 = load %struct.rtx_def*, %struct.rtx_def** %base17, align 8, !dbg !10176
  %call131 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %95, %struct.rtx_def* %96, %struct.rtx_def* %97), !dbg !10176
  store %struct.rtx_def* %call131, %struct.rtx_def** %addr, align 8, !dbg !10177
  br label %if.end132, !dbg !10178

if.end132:                                        ; preds = %if.then130, %if.end128
  call void @start_sequence(), !dbg !10179
  %98 = load i32, i32* @cse_not_expected, align 4, !dbg !10180
  store i32 %98, i32* %old_cse_not_expected, align 4, !dbg !10181
  store i32 1, i32* @cse_not_expected, align 4, !dbg !10182
  %99 = load i32, i32* %mem_mode.addr, align 4, !dbg !10183
  %100 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10184
  %101 = load i8, i8* %as.addr, align 1, !dbg !10185
  %call133 = call %struct.rtx_def* @memory_address_addr_space(i32 %99, %struct.rtx_def* %100, i8 zeroext %101), !dbg !10186
  store %struct.rtx_def* %call133, %struct.rtx_def** %addr, align 8, !dbg !10187
  %102 = load i32, i32* %old_cse_not_expected, align 4, !dbg !10188
  store i32 %102, i32* @cse_not_expected, align 4, !dbg !10189
  %call134 = call %struct.rtx_def* @get_insns(), !dbg !10190
  store %struct.rtx_def* %call134, %struct.rtx_def** %seq, align 8, !dbg !10191
  call void @end_sequence(), !dbg !10192
  %103 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10193
  %104 = load i8, i8* %speed.addr, align 1, !dbg !10194
  %call135 = call i32 @seq_cost(%struct.rtx_def* %103, i8 zeroext %104), !dbg !10195
  store i32 %call135, i32* %acost, align 4, !dbg !10196
  %105 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10197
  %106 = load i32, i32* %mem_mode.addr, align 4, !dbg !10198
  %107 = load i8, i8* %as.addr, align 1, !dbg !10199
  %108 = load i8, i8* %speed.addr, align 1, !dbg !10200
  %call136 = call i32 @address_cost(%struct.rtx_def* %105, i32 %106, i8 zeroext %107, i8 zeroext %108), !dbg !10201
  %109 = load i32, i32* %acost, align 4, !dbg !10202
  %add137 = add i32 %109, %call136, !dbg !10202
  store i32 %add137, i32* %acost, align 4, !dbg !10202
  %110 = load i32, i32* %acost, align 4, !dbg !10203
  %tobool138 = icmp ne i32 %110, 0, !dbg !10203
  br i1 %tobool138, label %if.end140, label %if.then139, !dbg !10205

if.then139:                                       ; preds = %if.end132
  store i32 1, i32* %acost, align 4, !dbg !10206
  br label %if.end140, !dbg !10207

if.end140:                                        ; preds = %if.then139, %if.end132
  %111 = load i32, i32* %acost, align 4, !dbg !10208
  %112 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10209
  %costs = getelementptr inbounds %struct.anon, %struct.anon* %112, i32 0, i32 2, !dbg !10210
  %113 = load i32, i32* %sym_p, align 4, !dbg !10211
  %idxprom141 = zext i32 %113 to i64, !dbg !10209
  %arrayidx142 = getelementptr inbounds [2 x [2 x [2 x [2 x i32]]]], [2 x [2 x [2 x [2 x i32]]]]* %costs, i64 0, i64 %idxprom141, !dbg !10209
  %114 = load i32, i32* %var_p, align 4, !dbg !10212
  %idxprom143 = zext i32 %114 to i64, !dbg !10209
  %arrayidx144 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %arrayidx142, i64 0, i64 %idxprom143, !dbg !10209
  %115 = load i32, i32* %off_p, align 4, !dbg !10213
  %idxprom145 = zext i32 %115 to i64, !dbg !10209
  %arrayidx146 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx144, i64 0, i64 %idxprom145, !dbg !10209
  %116 = load i32, i32* %rat_p, align 4, !dbg !10214
  %idxprom147 = zext i32 %116 to i64, !dbg !10209
  %arrayidx148 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx146, i64 0, i64 %idxprom147, !dbg !10209
  store i32 %111, i32* %arrayidx148, align 4, !dbg !10215
  br label %for.inc149, !dbg !10216

for.inc149:                                       ; preds = %if.end140
  %117 = load i64, i64* %i, align 8, !dbg !10217
  %inc150 = add nsw i64 %117, 1, !dbg !10217
  store i64 %inc150, i64* %i, align 8, !dbg !10217
  br label %for.cond86, !dbg !10218, !llvm.loop !10219

for.end151:                                       ; preds = %for.cond86
  %118 = load i32, i32* %address_mode, align 4, !dbg !10221
  %119 = load i8, i8* %speed.addr, align 1, !dbg !10222
  %call152 = call i32 @add_cost(i32 %118, i8 zeroext %119), !dbg !10223
  store i32 %call152, i32* %add_c, align 4, !dbg !10224
  store i64 0, i64* %i, align 8, !dbg !10225
  br label %for.cond153, !dbg !10227

for.cond153:                                      ; preds = %for.inc197, %for.end151
  %120 = load i64, i64* %i, align 8, !dbg !10228
  %cmp154 = icmp slt i64 %120, 8, !dbg !10230
  br i1 %cmp154, label %for.body156, label %for.end199, !dbg !10231

for.body156:                                      ; preds = %for.cond153
  %121 = load i64, i64* %i, align 8, !dbg !10232
  %and157 = and i64 %121, 1, !dbg !10234
  %conv158 = trunc i64 %and157 to i32, !dbg !10232
  store i32 %conv158, i32* %var_p, align 4, !dbg !10235
  %122 = load i64, i64* %i, align 8, !dbg !10236
  %shr159 = ashr i64 %122, 1, !dbg !10237
  %and160 = and i64 %shr159, 1, !dbg !10238
  %conv161 = trunc i64 %and160 to i32, !dbg !10239
  store i32 %conv161, i32* %off_p, align 4, !dbg !10240
  %123 = load i64, i64* %i, align 8, !dbg !10241
  %shr162 = ashr i64 %123, 2, !dbg !10242
  %and163 = and i64 %shr162, 1, !dbg !10243
  %conv164 = trunc i64 %and163 to i32, !dbg !10244
  store i32 %conv164, i32* %rat_p, align 4, !dbg !10245
  %124 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10246
  %costs165 = getelementptr inbounds %struct.anon, %struct.anon* %124, i32 0, i32 2, !dbg !10247
  %arrayidx166 = getelementptr inbounds [2 x [2 x [2 x [2 x i32]]]], [2 x [2 x [2 x [2 x i32]]]]* %costs165, i64 0, i64 0, !dbg !10246
  %arrayidx167 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %arrayidx166, i64 0, i64 1, !dbg !10246
  %125 = load i32, i32* %off_p, align 4, !dbg !10248
  %idxprom168 = zext i32 %125 to i64, !dbg !10246
  %arrayidx169 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx167, i64 0, i64 %idxprom168, !dbg !10246
  %126 = load i32, i32* %rat_p, align 4, !dbg !10249
  %idxprom170 = zext i32 %126 to i64, !dbg !10246
  %arrayidx171 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx169, i64 0, i64 %idxprom170, !dbg !10246
  %127 = load i32, i32* %arrayidx171, align 4, !dbg !10246
  %add172 = add i32 %127, 1, !dbg !10250
  store i32 %add172, i32* %acost, align 4, !dbg !10251
  %128 = load i32, i32* %var_p, align 4, !dbg !10252
  %tobool173 = icmp ne i32 %128, 0, !dbg !10252
  br i1 %tobool173, label %if.then174, label %if.end176, !dbg !10254

if.then174:                                       ; preds = %for.body156
  %129 = load i32, i32* %add_c, align 4, !dbg !10255
  %130 = load i32, i32* %acost, align 4, !dbg !10256
  %add175 = add i32 %130, %129, !dbg !10256
  store i32 %add175, i32* %acost, align 4, !dbg !10256
  br label %if.end176, !dbg !10257

if.end176:                                        ; preds = %if.then174, %for.body156
  %131 = load i32, i32* %acost, align 4, !dbg !10258
  %132 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10260
  %costs177 = getelementptr inbounds %struct.anon, %struct.anon* %132, i32 0, i32 2, !dbg !10261
  %arrayidx178 = getelementptr inbounds [2 x [2 x [2 x [2 x i32]]]], [2 x [2 x [2 x [2 x i32]]]]* %costs177, i64 0, i64 1, !dbg !10260
  %133 = load i32, i32* %var_p, align 4, !dbg !10262
  %idxprom179 = zext i32 %133 to i64, !dbg !10260
  %arrayidx180 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %arrayidx178, i64 0, i64 %idxprom179, !dbg !10260
  %134 = load i32, i32* %off_p, align 4, !dbg !10263
  %idxprom181 = zext i32 %134 to i64, !dbg !10260
  %arrayidx182 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx180, i64 0, i64 %idxprom181, !dbg !10260
  %135 = load i32, i32* %rat_p, align 4, !dbg !10264
  %idxprom183 = zext i32 %135 to i64, !dbg !10260
  %arrayidx184 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx182, i64 0, i64 %idxprom183, !dbg !10260
  %136 = load i32, i32* %arrayidx184, align 4, !dbg !10260
  %cmp185 = icmp ult i32 %131, %136, !dbg !10265
  br i1 %cmp185, label %if.then187, label %if.end196, !dbg !10266

if.then187:                                       ; preds = %if.end176
  %137 = load i32, i32* %acost, align 4, !dbg !10267
  %138 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10268
  %costs188 = getelementptr inbounds %struct.anon, %struct.anon* %138, i32 0, i32 2, !dbg !10269
  %arrayidx189 = getelementptr inbounds [2 x [2 x [2 x [2 x i32]]]], [2 x [2 x [2 x [2 x i32]]]]* %costs188, i64 0, i64 1, !dbg !10268
  %139 = load i32, i32* %var_p, align 4, !dbg !10270
  %idxprom190 = zext i32 %139 to i64, !dbg !10268
  %arrayidx191 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %arrayidx189, i64 0, i64 %idxprom190, !dbg !10268
  %140 = load i32, i32* %off_p, align 4, !dbg !10271
  %idxprom192 = zext i32 %140 to i64, !dbg !10268
  %arrayidx193 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx191, i64 0, i64 %idxprom192, !dbg !10268
  %141 = load i32, i32* %rat_p, align 4, !dbg !10272
  %idxprom194 = zext i32 %141 to i64, !dbg !10268
  %arrayidx195 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx193, i64 0, i64 %idxprom194, !dbg !10268
  store i32 %137, i32* %arrayidx195, align 4, !dbg !10273
  br label %if.end196, !dbg !10268

if.end196:                                        ; preds = %if.then187, %if.end176
  br label %for.inc197, !dbg !10274

for.inc197:                                       ; preds = %if.end196
  %142 = load i64, i64* %i, align 8, !dbg !10275
  %inc198 = add nsw i64 %142, 1, !dbg !10275
  store i64 %inc198, i64* %i, align 8, !dbg !10275
  br label %for.cond153, !dbg !10276, !llvm.loop !10277

for.end199:                                       ; preds = %for.cond153
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10279
  %tobool200 = icmp ne %struct._IO_FILE* %143, null, !dbg !10279
  br i1 %tobool200, label %land.lhs.true201, label %if.end273, !dbg !10281

land.lhs.true201:                                 ; preds = %for.end199
  %144 = load i32, i32* @dump_flags, align 4, !dbg !10282
  %and202 = and i32 %144, 8, !dbg !10283
  %tobool203 = icmp ne i32 %and202, 0, !dbg !10283
  br i1 %tobool203, label %if.then204, label %if.end273, !dbg !10284

if.then204:                                       ; preds = %land.lhs.true201
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10285
  %call205 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.57, i64 0, i64 0)), !dbg !10287
  store i64 0, i64* %i, align 8, !dbg !10288
  br label %for.cond206, !dbg !10290

for.cond206:                                      ; preds = %for.inc248, %if.then204
  %146 = load i64, i64* %i, align 8, !dbg !10291
  %cmp207 = icmp slt i64 %146, 16, !dbg !10293
  br i1 %cmp207, label %for.body209, label %for.end250, !dbg !10294

for.body209:                                      ; preds = %for.cond206
  %147 = load i64, i64* %i, align 8, !dbg !10295
  %and210 = and i64 %147, 1, !dbg !10297
  %conv211 = trunc i64 %and210 to i32, !dbg !10295
  store i32 %conv211, i32* %sym_p, align 4, !dbg !10298
  %148 = load i64, i64* %i, align 8, !dbg !10299
  %shr212 = ashr i64 %148, 1, !dbg !10300
  %and213 = and i64 %shr212, 1, !dbg !10301
  %conv214 = trunc i64 %and213 to i32, !dbg !10302
  store i32 %conv214, i32* %var_p, align 4, !dbg !10303
  %149 = load i64, i64* %i, align 8, !dbg !10304
  %shr215 = ashr i64 %149, 2, !dbg !10305
  %and216 = and i64 %shr215, 1, !dbg !10306
  %conv217 = trunc i64 %and216 to i32, !dbg !10307
  store i32 %conv217, i32* %off_p, align 4, !dbg !10308
  %150 = load i64, i64* %i, align 8, !dbg !10309
  %shr218 = ashr i64 %150, 3, !dbg !10310
  %and219 = and i64 %shr218, 1, !dbg !10311
  %conv220 = trunc i64 %and219 to i32, !dbg !10312
  store i32 %conv220, i32* %rat_p, align 4, !dbg !10313
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10314
  %call221 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)), !dbg !10315
  %152 = load i32, i32* %sym_p, align 4, !dbg !10316
  %tobool222 = icmp ne i32 %152, 0, !dbg !10316
  br i1 %tobool222, label %if.then223, label %if.end225, !dbg !10318

if.then223:                                       ; preds = %for.body209
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10319
  %call224 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %153, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i64 0, i64 0)), !dbg !10320
  br label %if.end225, !dbg !10320

if.end225:                                        ; preds = %if.then223, %for.body209
  %154 = load i32, i32* %var_p, align 4, !dbg !10321
  %tobool226 = icmp ne i32 %154, 0, !dbg !10321
  br i1 %tobool226, label %if.then227, label %if.end229, !dbg !10323

if.then227:                                       ; preds = %if.end225
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10324
  %call228 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %155, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i64 0, i64 0)), !dbg !10325
  br label %if.end229, !dbg !10325

if.end229:                                        ; preds = %if.then227, %if.end225
  %156 = load i32, i32* %off_p, align 4, !dbg !10326
  %tobool230 = icmp ne i32 %156, 0, !dbg !10326
  br i1 %tobool230, label %if.then231, label %if.end233, !dbg !10328

if.then231:                                       ; preds = %if.end229
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10329
  %call232 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %157, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i64 0, i64 0)), !dbg !10330
  br label %if.end233, !dbg !10330

if.end233:                                        ; preds = %if.then231, %if.end229
  %158 = load i32, i32* %rat_p, align 4, !dbg !10331
  %tobool234 = icmp ne i32 %158, 0, !dbg !10331
  br i1 %tobool234, label %if.then235, label %if.end237, !dbg !10333

if.then235:                                       ; preds = %if.end233
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10334
  %call236 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %159, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i64 0, i64 0)), !dbg !10335
  br label %if.end237, !dbg !10335

if.end237:                                        ; preds = %if.then235, %if.end233
  %160 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10336
  %costs238 = getelementptr inbounds %struct.anon, %struct.anon* %160, i32 0, i32 2, !dbg !10337
  %161 = load i32, i32* %sym_p, align 4, !dbg !10338
  %idxprom239 = zext i32 %161 to i64, !dbg !10336
  %arrayidx240 = getelementptr inbounds [2 x [2 x [2 x [2 x i32]]]], [2 x [2 x [2 x [2 x i32]]]]* %costs238, i64 0, i64 %idxprom239, !dbg !10336
  %162 = load i32, i32* %var_p, align 4, !dbg !10339
  %idxprom241 = zext i32 %162 to i64, !dbg !10336
  %arrayidx242 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %arrayidx240, i64 0, i64 %idxprom241, !dbg !10336
  %163 = load i32, i32* %off_p, align 4, !dbg !10340
  %idxprom243 = zext i32 %163 to i64, !dbg !10336
  %arrayidx244 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx242, i64 0, i64 %idxprom243, !dbg !10336
  %164 = load i32, i32* %rat_p, align 4, !dbg !10341
  %idxprom245 = zext i32 %164 to i64, !dbg !10336
  %arrayidx246 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx244, i64 0, i64 %idxprom245, !dbg !10336
  %165 = load i32, i32* %arrayidx246, align 4, !dbg !10336
  store i32 %165, i32* %acost, align 4, !dbg !10342
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10343
  %167 = load i32, i32* %acost, align 4, !dbg !10344
  %call247 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0), i32 %167), !dbg !10345
  br label %for.inc248, !dbg !10346

for.inc248:                                       ; preds = %if.end237
  %168 = load i64, i64* %i, align 8, !dbg !10347
  %inc249 = add nsw i64 %168, 1, !dbg !10347
  store i64 %inc249, i64* %i, align 8, !dbg !10347
  br label %for.cond206, !dbg !10348, !llvm.loop !10349

for.end250:                                       ; preds = %for.cond206
  %169 = load i32, i32* %mem_mode.addr, align 4, !dbg !10351
  %idxprom251 = zext i32 %169 to i64, !dbg !10353
  %arrayidx252 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_predec, i64 0, i64 %idxprom251, !dbg !10353
  %170 = load i8, i8* %arrayidx252, align 1, !dbg !10353
  %conv253 = zext i8 %170 to i32, !dbg !10353
  %tobool254 = icmp ne i32 %conv253, 0, !dbg !10353
  br i1 %tobool254, label %if.then269, label %lor.lhs.false, !dbg !10354

lor.lhs.false:                                    ; preds = %for.end250
  %171 = load i32, i32* %mem_mode.addr, align 4, !dbg !10355
  %idxprom255 = zext i32 %171 to i64, !dbg !10356
  %arrayidx256 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_postdec, i64 0, i64 %idxprom255, !dbg !10356
  %172 = load i8, i8* %arrayidx256, align 1, !dbg !10356
  %conv257 = zext i8 %172 to i32, !dbg !10356
  %tobool258 = icmp ne i32 %conv257, 0, !dbg !10356
  br i1 %tobool258, label %if.then269, label %lor.lhs.false259, !dbg !10357

lor.lhs.false259:                                 ; preds = %lor.lhs.false
  %173 = load i32, i32* %mem_mode.addr, align 4, !dbg !10358
  %idxprom260 = zext i32 %173 to i64, !dbg !10359
  %arrayidx261 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_preinc, i64 0, i64 %idxprom260, !dbg !10359
  %174 = load i8, i8* %arrayidx261, align 1, !dbg !10359
  %conv262 = zext i8 %174 to i32, !dbg !10359
  %tobool263 = icmp ne i32 %conv262, 0, !dbg !10359
  br i1 %tobool263, label %if.then269, label %lor.lhs.false264, !dbg !10360

lor.lhs.false264:                                 ; preds = %lor.lhs.false259
  %175 = load i32, i32* %mem_mode.addr, align 4, !dbg !10361
  %idxprom265 = zext i32 %175 to i64, !dbg !10362
  %arrayidx266 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_postinc, i64 0, i64 %idxprom265, !dbg !10362
  %176 = load i8, i8* %arrayidx266, align 1, !dbg !10362
  %conv267 = zext i8 %176 to i32, !dbg !10362
  %tobool268 = icmp ne i32 %conv267, 0, !dbg !10362
  br i1 %tobool268, label %if.then269, label %if.end271, !dbg !10363

if.then269:                                       ; preds = %lor.lhs.false264, %lor.lhs.false259, %lor.lhs.false, %for.end250
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10364
  %call270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.63, i64 0, i64 0)), !dbg !10365
  br label %if.end271, !dbg !10365

if.end271:                                        ; preds = %if.then269, %lor.lhs.false264
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10366
  %call272 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10367
  br label %if.end273, !dbg !10368

if.end273:                                        ; preds = %if.end271, %land.lhs.true201, %for.end199
  %179 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, align 8, !dbg !10369
  %tobool274 = icmp ne %struct.VEC_address_cost_data_heap* %179, null, !dbg !10369
  br i1 %tobool274, label %cond.true275, label %cond.false277, !dbg !10369

cond.true275:                                     ; preds = %if.end273
  %180 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** @get_address_cost.address_cost_data_list, align 8, !dbg !10369
  %base276 = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %180, i32 0, i32 0, !dbg !10369
  br label %cond.end278, !dbg !10369

cond.false277:                                    ; preds = %if.end273
  br label %cond.end278, !dbg !10369

cond.end278:                                      ; preds = %cond.false277, %cond.true275
  %cond279 = phi %struct.VEC_address_cost_data_base* [ %base276, %cond.true275 ], [ null, %cond.false277 ], !dbg !10369
  %181 = load i32, i32* %data_index, align 4, !dbg !10369
  %182 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10369
  %call280 = call %struct.anon* @VEC_address_cost_data_base_replace(%struct.VEC_address_cost_data_base* %cond279, i32 %181, %struct.anon* %182), !dbg !10369
  br label %if.end281, !dbg !10370

if.end281:                                        ; preds = %cond.end278, %cond.end8
  %183 = load i32, i32* %address_mode, align 4, !dbg !10371
  %idxprom282 = zext i32 %183 to i64, !dbg !10371
  %arrayidx283 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom282, !dbg !10371
  %184 = load i8, i8* %arrayidx283, align 1, !dbg !10371
  %conv284 = zext i8 %184 to i16, !dbg !10371
  %conv285 = zext i16 %conv284 to i32, !dbg !10371
  %mul286 = mul nsw i32 %conv285, 8, !dbg !10371
  %conv287 = trunc i32 %mul286 to i16, !dbg !10371
  %conv288 = zext i16 %conv287 to i32, !dbg !10371
  store i32 %conv288, i32* %bits, align 4, !dbg !10372
  %185 = load i32, i32* %bits, align 4, !dbg !10373
  %sub289 = sub i32 %185, 1, !dbg !10374
  %sh_prom = zext i32 %sub289 to i64, !dbg !10375
  %shl290 = shl i64 -1, %sh_prom, !dbg !10375
  %shl291 = shl i64 %shl290, 1, !dbg !10376
  %neg = xor i64 %shl291, -1, !dbg !10377
  store i64 %neg, i64* %mask, align 8, !dbg !10378
  %186 = load i64, i64* %mask, align 8, !dbg !10379
  %187 = load i64, i64* %offset.addr, align 8, !dbg !10380
  %and292 = and i64 %187, %186, !dbg !10380
  store i64 %and292, i64* %offset.addr, align 8, !dbg !10380
  %188 = load i64, i64* %offset.addr, align 8, !dbg !10381
  %189 = load i32, i32* %bits, align 4, !dbg !10383
  %sub293 = sub i32 %189, 1, !dbg !10384
  %sh_prom294 = zext i32 %sub293 to i64, !dbg !10385
  %shr295 = lshr i64 %188, %sh_prom294, !dbg !10385
  %and296 = and i64 %shr295, 1, !dbg !10386
  %tobool297 = icmp ne i64 %and296, 0, !dbg !10386
  br i1 %tobool297, label %if.then298, label %if.end300, !dbg !10387

if.then298:                                       ; preds = %if.end281
  %190 = load i64, i64* %mask, align 8, !dbg !10388
  %neg299 = xor i64 %190, -1, !dbg !10389
  %191 = load i64, i64* %offset.addr, align 8, !dbg !10390
  %or = or i64 %191, %neg299, !dbg !10390
  store i64 %or, i64* %offset.addr, align 8, !dbg !10390
  br label %if.end300, !dbg !10391

if.end300:                                        ; preds = %if.then298, %if.end281
  %192 = load i64, i64* %offset.addr, align 8, !dbg !10392
  store i64 %192, i64* %s_offset, align 8, !dbg !10393
  store i8 0, i8* %autoinc, align 1, !dbg !10394
  %193 = load i32, i32* %mem_mode.addr, align 4, !dbg !10395
  %idxprom301 = zext i32 %193 to i64, !dbg !10395
  %arrayidx302 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom301, !dbg !10395
  %194 = load i8, i8* %arrayidx302, align 1, !dbg !10395
  %conv303 = zext i8 %194 to i16, !dbg !10395
  %conv304 = zext i16 %conv303 to i64, !dbg !10395
  store i64 %conv304, i64* %msize, align 8, !dbg !10396
  %195 = load i64, i64* %offset.addr, align 8, !dbg !10397
  store i64 %195, i64* %autoinc_offset, align 8, !dbg !10398
  %196 = load i8, i8* %stmt_after_inc.addr, align 1, !dbg !10399
  %tobool305 = icmp ne i8 %196, 0, !dbg !10399
  br i1 %tobool305, label %if.then306, label %if.end309, !dbg !10401

if.then306:                                       ; preds = %if.end300
  %197 = load i64, i64* %ratio.addr, align 8, !dbg !10402
  %198 = load i64, i64* %cstep.addr, align 8, !dbg !10403
  %mul307 = mul nsw i64 %197, %198, !dbg !10404
  %199 = load i64, i64* %autoinc_offset, align 8, !dbg !10405
  %add308 = add nsw i64 %199, %mul307, !dbg !10405
  store i64 %add308, i64* %autoinc_offset, align 8, !dbg !10405
  br label %if.end309, !dbg !10406

if.end309:                                        ; preds = %if.then306, %if.end300
  %200 = load i8, i8* %symbol_present.addr, align 1, !dbg !10407
  %conv310 = zext i8 %200 to i32, !dbg !10407
  %tobool311 = icmp ne i32 %conv310, 0, !dbg !10407
  br i1 %tobool311, label %if.then318, label %lor.lhs.false312, !dbg !10409

lor.lhs.false312:                                 ; preds = %if.end309
  %201 = load i8, i8* %var_present.addr, align 1, !dbg !10410
  %conv313 = zext i8 %201 to i32, !dbg !10410
  %tobool314 = icmp ne i32 %conv313, 0, !dbg !10410
  br i1 %tobool314, label %if.then318, label %lor.lhs.false315, !dbg !10411

lor.lhs.false315:                                 ; preds = %lor.lhs.false312
  %202 = load i64, i64* %ratio.addr, align 8, !dbg !10412
  %cmp316 = icmp ne i64 %202, 1, !dbg !10413
  br i1 %cmp316, label %if.then318, label %if.else319, !dbg !10414

if.then318:                                       ; preds = %lor.lhs.false315, %lor.lhs.false312, %if.end309
  store i8 0, i8* %autoinc, align 1, !dbg !10415
  br label %if.end368, !dbg !10416

if.else319:                                       ; preds = %lor.lhs.false315
  %203 = load i32, i32* %mem_mode.addr, align 4, !dbg !10417
  %idxprom320 = zext i32 %203 to i64, !dbg !10419
  %arrayidx321 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_postinc, i64 0, i64 %idxprom320, !dbg !10419
  %204 = load i8, i8* %arrayidx321, align 1, !dbg !10419
  %conv322 = zext i8 %204 to i32, !dbg !10419
  %tobool323 = icmp ne i32 %conv322, 0, !dbg !10419
  br i1 %tobool323, label %land.lhs.true324, label %lor.lhs.false330, !dbg !10420

land.lhs.true324:                                 ; preds = %if.else319
  %205 = load i64, i64* %autoinc_offset, align 8, !dbg !10421
  %cmp325 = icmp eq i64 %205, 0, !dbg !10422
  br i1 %cmp325, label %land.lhs.true327, label %lor.lhs.false330, !dbg !10423

land.lhs.true327:                                 ; preds = %land.lhs.true324
  %206 = load i64, i64* %msize, align 8, !dbg !10424
  %207 = load i64, i64* %cstep.addr, align 8, !dbg !10425
  %cmp328 = icmp eq i64 %206, %207, !dbg !10426
  br i1 %cmp328, label %if.then366, label %lor.lhs.false330, !dbg !10427

lor.lhs.false330:                                 ; preds = %land.lhs.true327, %land.lhs.true324, %if.else319
  %208 = load i32, i32* %mem_mode.addr, align 4, !dbg !10428
  %idxprom331 = zext i32 %208 to i64, !dbg !10429
  %arrayidx332 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_postdec, i64 0, i64 %idxprom331, !dbg !10429
  %209 = load i8, i8* %arrayidx332, align 1, !dbg !10429
  %conv333 = zext i8 %209 to i32, !dbg !10429
  %tobool334 = icmp ne i32 %conv333, 0, !dbg !10429
  br i1 %tobool334, label %land.lhs.true335, label %lor.lhs.false342, !dbg !10430

land.lhs.true335:                                 ; preds = %lor.lhs.false330
  %210 = load i64, i64* %autoinc_offset, align 8, !dbg !10431
  %cmp336 = icmp eq i64 %210, 0, !dbg !10432
  br i1 %cmp336, label %land.lhs.true338, label %lor.lhs.false342, !dbg !10433

land.lhs.true338:                                 ; preds = %land.lhs.true335
  %211 = load i64, i64* %msize, align 8, !dbg !10434
  %212 = load i64, i64* %cstep.addr, align 8, !dbg !10435
  %sub339 = sub nsw i64 0, %212, !dbg !10436
  %cmp340 = icmp eq i64 %211, %sub339, !dbg !10437
  br i1 %cmp340, label %if.then366, label %lor.lhs.false342, !dbg !10438

lor.lhs.false342:                                 ; preds = %land.lhs.true338, %land.lhs.true335, %lor.lhs.false330
  %213 = load i32, i32* %mem_mode.addr, align 4, !dbg !10439
  %idxprom343 = zext i32 %213 to i64, !dbg !10440
  %arrayidx344 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_preinc, i64 0, i64 %idxprom343, !dbg !10440
  %214 = load i8, i8* %arrayidx344, align 1, !dbg !10440
  %conv345 = zext i8 %214 to i32, !dbg !10440
  %tobool346 = icmp ne i32 %conv345, 0, !dbg !10440
  br i1 %tobool346, label %land.lhs.true347, label %lor.lhs.false353, !dbg !10441

land.lhs.true347:                                 ; preds = %lor.lhs.false342
  %215 = load i64, i64* %autoinc_offset, align 8, !dbg !10442
  %216 = load i64, i64* %msize, align 8, !dbg !10443
  %cmp348 = icmp eq i64 %215, %216, !dbg !10444
  br i1 %cmp348, label %land.lhs.true350, label %lor.lhs.false353, !dbg !10445

land.lhs.true350:                                 ; preds = %land.lhs.true347
  %217 = load i64, i64* %msize, align 8, !dbg !10446
  %218 = load i64, i64* %cstep.addr, align 8, !dbg !10447
  %cmp351 = icmp eq i64 %217, %218, !dbg !10448
  br i1 %cmp351, label %if.then366, label %lor.lhs.false353, !dbg !10449

lor.lhs.false353:                                 ; preds = %land.lhs.true350, %land.lhs.true347, %lor.lhs.false342
  %219 = load i32, i32* %mem_mode.addr, align 4, !dbg !10450
  %idxprom354 = zext i32 %219 to i64, !dbg !10451
  %arrayidx355 = getelementptr inbounds [87 x i8], [87 x i8]* @get_address_cost.has_predec, i64 0, i64 %idxprom354, !dbg !10451
  %220 = load i8, i8* %arrayidx355, align 1, !dbg !10451
  %conv356 = zext i8 %220 to i32, !dbg !10451
  %tobool357 = icmp ne i32 %conv356, 0, !dbg !10451
  br i1 %tobool357, label %land.lhs.true358, label %if.end367, !dbg !10452

land.lhs.true358:                                 ; preds = %lor.lhs.false353
  %221 = load i64, i64* %autoinc_offset, align 8, !dbg !10453
  %222 = load i64, i64* %msize, align 8, !dbg !10454
  %sub359 = sub nsw i64 0, %222, !dbg !10455
  %cmp360 = icmp eq i64 %221, %sub359, !dbg !10456
  br i1 %cmp360, label %land.lhs.true362, label %if.end367, !dbg !10457

land.lhs.true362:                                 ; preds = %land.lhs.true358
  %223 = load i64, i64* %msize, align 8, !dbg !10458
  %224 = load i64, i64* %cstep.addr, align 8, !dbg !10459
  %sub363 = sub nsw i64 0, %224, !dbg !10460
  %cmp364 = icmp eq i64 %223, %sub363, !dbg !10461
  br i1 %cmp364, label %if.then366, label %if.end367, !dbg !10462

if.then366:                                       ; preds = %land.lhs.true362, %land.lhs.true350, %land.lhs.true338, %land.lhs.true327
  store i8 1, i8* %autoinc, align 1, !dbg !10463
  br label %if.end367, !dbg !10464

if.end367:                                        ; preds = %if.then366, %land.lhs.true362, %land.lhs.true358, %lor.lhs.false353
  br label %if.end368

if.end368:                                        ; preds = %if.end367, %if.then318
  store i32 0, i32* %cost, align 4, !dbg !10465
  %225 = load i64, i64* %s_offset, align 8, !dbg !10466
  %cmp369 = icmp ne i64 %225, 0, !dbg !10467
  br i1 %cmp369, label %land.lhs.true371, label %land.end, !dbg !10468

land.lhs.true371:                                 ; preds = %if.end368
  %226 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10469
  %min_offset372 = getelementptr inbounds %struct.anon, %struct.anon* %226, i32 0, i32 0, !dbg !10470
  %227 = load i64, i64* %min_offset372, align 8, !dbg !10470
  %228 = load i64, i64* %s_offset, align 8, !dbg !10471
  %cmp373 = icmp sle i64 %227, %228, !dbg !10472
  br i1 %cmp373, label %land.rhs, label %land.end, !dbg !10473

land.rhs:                                         ; preds = %land.lhs.true371
  %229 = load i64, i64* %s_offset, align 8, !dbg !10474
  %230 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10475
  %max_offset375 = getelementptr inbounds %struct.anon, %struct.anon* %230, i32 0, i32 1, !dbg !10476
  %231 = load i64, i64* %max_offset375, align 8, !dbg !10476
  %cmp376 = icmp sle i64 %229, %231, !dbg !10477
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true371, %if.end368
  %232 = phi i1 [ false, %land.lhs.true371 ], [ false, %if.end368 ], [ %cmp376, %land.rhs ], !dbg !10478
  %land.ext = zext i1 %232 to i32, !dbg !10473
  %conv378 = trunc i32 %land.ext to i8, !dbg !10479
  store i8 %conv378, i8* %offset_p, align 1, !dbg !10480
  %233 = load i64, i64* %ratio.addr, align 8, !dbg !10481
  %cmp379 = icmp ne i64 %233, 1, !dbg !10482
  br i1 %cmp379, label %land.rhs381, label %land.end385, !dbg !10483

land.rhs381:                                      ; preds = %land.end
  %234 = load i64, i64* %ratio.addr, align 8, !dbg !10484
  %235 = load i32, i32* %mem_mode.addr, align 4, !dbg !10485
  %236 = load i8, i8* %as.addr, align 1, !dbg !10486
  %call382 = call zeroext i8 @multiplier_allowed_in_address_p(i64 %234, i32 %235, i8 zeroext %236), !dbg !10487
  %conv383 = zext i8 %call382 to i32, !dbg !10487
  %tobool384 = icmp ne i32 %conv383, 0, !dbg !10483
  br label %land.end385

land.end385:                                      ; preds = %land.rhs381, %land.end
  %237 = phi i1 [ false, %land.end ], [ %tobool384, %land.rhs381 ], !dbg !10478
  %land.ext386 = zext i1 %237 to i32, !dbg !10483
  %conv387 = trunc i32 %land.ext386 to i8, !dbg !10488
  store i8 %conv387, i8* %ratio_p, align 1, !dbg !10489
  %238 = load i64, i64* %ratio.addr, align 8, !dbg !10490
  %cmp388 = icmp ne i64 %238, 1, !dbg !10492
  br i1 %cmp388, label %land.lhs.true390, label %if.end395, !dbg !10493

land.lhs.true390:                                 ; preds = %land.end385
  %239 = load i8, i8* %ratio_p, align 1, !dbg !10494
  %tobool391 = icmp ne i8 %239, 0, !dbg !10494
  br i1 %tobool391, label %if.end395, label %if.then392, !dbg !10495

if.then392:                                       ; preds = %land.lhs.true390
  %240 = load i64, i64* %ratio.addr, align 8, !dbg !10496
  %241 = load i32, i32* %address_mode, align 4, !dbg !10497
  %242 = load i8, i8* %speed.addr, align 1, !dbg !10498
  %call393 = call i32 @multiply_by_cost(i64 %240, i32 %241, i8 zeroext %242), !dbg !10499
  %243 = load i32, i32* %cost, align 4, !dbg !10500
  %add394 = add i32 %243, %call393, !dbg !10500
  store i32 %add394, i32* %cost, align 4, !dbg !10500
  br label %if.end395, !dbg !10501

if.end395:                                        ; preds = %if.then392, %land.lhs.true390, %land.end385
  %244 = load i64, i64* %s_offset, align 8, !dbg !10502
  %tobool396 = icmp ne i64 %244, 0, !dbg !10502
  br i1 %tobool396, label %land.lhs.true397, label %if.end404, !dbg !10504

land.lhs.true397:                                 ; preds = %if.end395
  %245 = load i8, i8* %offset_p, align 1, !dbg !10505
  %tobool398 = icmp ne i8 %245, 0, !dbg !10505
  br i1 %tobool398, label %if.end404, label %land.lhs.true399, !dbg !10506

land.lhs.true399:                                 ; preds = %land.lhs.true397
  %246 = load i8, i8* %symbol_present.addr, align 1, !dbg !10507
  %tobool400 = icmp ne i8 %246, 0, !dbg !10507
  br i1 %tobool400, label %if.end404, label %if.then401, !dbg !10508

if.then401:                                       ; preds = %land.lhs.true399
  %247 = load i32, i32* %address_mode, align 4, !dbg !10509
  %248 = load i8, i8* %speed.addr, align 1, !dbg !10510
  %call402 = call i32 @add_cost(i32 %247, i8 zeroext %248), !dbg !10511
  %249 = load i32, i32* %cost, align 4, !dbg !10512
  %add403 = add i32 %249, %call402, !dbg !10512
  store i32 %add403, i32* %cost, align 4, !dbg !10512
  br label %if.end404, !dbg !10513

if.end404:                                        ; preds = %if.then401, %land.lhs.true399, %land.lhs.true397, %if.end395
  %250 = load i8*, i8** %may_autoinc.addr, align 8, !dbg !10514
  %tobool405 = icmp ne i8* %250, null, !dbg !10514
  br i1 %tobool405, label %if.then406, label %if.end407, !dbg !10516

if.then406:                                       ; preds = %if.end404
  %251 = load i8, i8* %autoinc, align 1, !dbg !10517
  %252 = load i8*, i8** %may_autoinc.addr, align 8, !dbg !10518
  store i8 %251, i8* %252, align 1, !dbg !10519
  br label %if.end407, !dbg !10520

if.end407:                                        ; preds = %if.then406, %if.end404
  %253 = load %struct.anon*, %struct.anon** %data, align 8, !dbg !10521
  %costs408 = getelementptr inbounds %struct.anon, %struct.anon* %253, i32 0, i32 2, !dbg !10522
  %254 = load i8, i8* %symbol_present.addr, align 1, !dbg !10523
  %idxprom409 = zext i8 %254 to i64, !dbg !10521
  %arrayidx410 = getelementptr inbounds [2 x [2 x [2 x [2 x i32]]]], [2 x [2 x [2 x [2 x i32]]]]* %costs408, i64 0, i64 %idxprom409, !dbg !10521
  %255 = load i8, i8* %var_present.addr, align 1, !dbg !10524
  %idxprom411 = zext i8 %255 to i64, !dbg !10521
  %arrayidx412 = getelementptr inbounds [2 x [2 x [2 x i32]]], [2 x [2 x [2 x i32]]]* %arrayidx410, i64 0, i64 %idxprom411, !dbg !10521
  %256 = load i8, i8* %offset_p, align 1, !dbg !10525
  %idxprom413 = zext i8 %256 to i64, !dbg !10521
  %arrayidx414 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %arrayidx412, i64 0, i64 %idxprom413, !dbg !10521
  %257 = load i8, i8* %ratio_p, align 1, !dbg !10526
  %idxprom415 = zext i8 %257 to i64, !dbg !10521
  %arrayidx416 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx414, i64 0, i64 %idxprom415, !dbg !10521
  %258 = load i32, i32* %arrayidx416, align 4, !dbg !10521
  store i32 %258, i32* %acost, align 4, !dbg !10527
  %259 = load i8, i8* %symbol_present.addr, align 1, !dbg !10528
  %conv417 = zext i8 %259 to i32, !dbg !10528
  %cmp418 = icmp ne i32 %conv417, 0, !dbg !10529
  %conv419 = zext i1 %cmp418 to i32, !dbg !10529
  %260 = load i8, i8* %var_present.addr, align 1, !dbg !10530
  %conv420 = zext i8 %260 to i32, !dbg !10530
  %cmp421 = icmp ne i32 %conv420, 0, !dbg !10531
  %conv422 = zext i1 %cmp421 to i32, !dbg !10531
  %add423 = add nsw i32 %conv419, %conv422, !dbg !10532
  %261 = load i8, i8* %offset_p, align 1, !dbg !10533
  %conv424 = zext i8 %261 to i32, !dbg !10533
  %add425 = add nsw i32 %add423, %conv424, !dbg !10534
  %262 = load i8, i8* %ratio_p, align 1, !dbg !10535
  %conv426 = zext i8 %262 to i32, !dbg !10535
  %add427 = add nsw i32 %add425, %conv426, !dbg !10536
  store i32 %add427, i32* %complexity, align 4, !dbg !10537
  %263 = load i32, i32* %cost, align 4, !dbg !10538
  %264 = load i32, i32* %acost, align 4, !dbg !10539
  %add428 = add i32 %263, %264, !dbg !10540
  %265 = load i32, i32* %complexity, align 4, !dbg !10541
  %call429 = call i64 @new_cost(i32 %add428, i32 %265), !dbg !10542
  %266 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10542
  store i64 %call429, i64* %266, align 4, !dbg !10542
  %267 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10543
  %268 = load i64, i64* %267, align 4, !dbg !10543
  ret i64 %268, !dbg !10543
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_computation_at(%struct.loop* %loop, %struct.iv_use* %use, %struct.iv_cand* %cand, %union.gimple_statement_d* %at) #0 !dbg !10544 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %at.addr = alloca %union.gimple_statement_d*, align 8
  %aff = alloca %struct.affine_tree_combination, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10547, metadata !DIExpression()), !dbg !10548
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !10549, metadata !DIExpression()), !dbg !10550
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !10551, metadata !DIExpression()), !dbg !10552
  store %union.gimple_statement_d* %at, %union.gimple_statement_d** %at.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at.addr, metadata !10553, metadata !DIExpression()), !dbg !10554
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %aff, metadata !10555, metadata !DIExpression()), !dbg !10556
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10557, metadata !DIExpression()), !dbg !10558
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !10559
  %iv = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 2, !dbg !10559
  %1 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !10559
  %base = getelementptr inbounds %struct.iv, %struct.iv* %1, i32 0, i32 0, !dbg !10559
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !10559
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !10559
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10559
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !10559
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !10558
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10560
  %5 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !10562
  %6 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !10563
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !10564
  %call = call zeroext i8 @get_computation_aff(%struct.loop* %4, %struct.iv_use* %5, %struct.iv_cand* %6, %union.gimple_statement_d* %7, %struct.affine_tree_combination* %aff), !dbg !10565
  %tobool = icmp ne i8 %call, 0, !dbg !10565
  br i1 %tobool, label %if.end, label %if.then, !dbg !10566

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10567
  br label %return, !dbg !10567

if.end:                                           ; preds = %entry
  call void @unshare_aff_combination(%struct.affine_tree_combination* %aff), !dbg !10568
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10569
  %call2 = call %union.tree_node* @aff_combination_to_tree(%struct.affine_tree_combination* %aff), !dbg !10569
  %call3 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %8, %union.tree_node* %call2), !dbg !10569
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !10570
  br label %return, !dbg !10570

return:                                           ; preds = %if.end, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10571
  ret %union.tree_node* %9, !dbg !10571
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @new_cost(i32 %runtime, i32 %complexity) #0 !dbg !10572 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %runtime.addr = alloca i32, align 4
  %complexity.addr = alloca i32, align 4
  store i32 %runtime, i32* %runtime.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %runtime.addr, metadata !10575, metadata !DIExpression()), !dbg !10576
  store i32 %complexity, i32* %complexity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %complexity.addr, metadata !10577, metadata !DIExpression()), !dbg !10578
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %retval, metadata !10579, metadata !DIExpression()), !dbg !10580
  %0 = load i32, i32* %runtime.addr, align 4, !dbg !10581
  %cost = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %retval, i32 0, i32 0, !dbg !10582
  store i32 %0, i32* %cost, align 4, !dbg !10583
  %1 = load i32, i32* %complexity.addr, align 4, !dbg !10584
  %complexity1 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %retval, i32 0, i32 1, !dbg !10585
  store i32 %1, i32* %complexity1, align 4, !dbg !10586
  %2 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10587
  %3 = load i64, i64* %2, align 4, !dbg !10587
  ret i64 %3, !dbg !10587
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @computation_cost(%union.tree_node* %expr, i8 zeroext %speed) #0 !dbg !10588 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %speed.addr = alloca i8, align 1
  %seq = alloca %struct.rtx_def*, align 8
  %rslt = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %cost = alloca i32, align 4
  %regno = alloca i32, align 4
  %real_frequency = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !10591, metadata !DIExpression()), !dbg !10592
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !10593, metadata !DIExpression()), !dbg !10594
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !10595, metadata !DIExpression()), !dbg !10596
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rslt, metadata !10597, metadata !DIExpression()), !dbg !10598
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10599, metadata !DIExpression()), !dbg !10600
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10601
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !10601
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10601
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !10601
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !10600
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !10602, metadata !DIExpression()), !dbg !10603
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !10604, metadata !DIExpression()), !dbg !10605
  store i32 58, i32* %regno, align 4, !dbg !10605
  call void @llvm.dbg.declare(metadata i32* %real_frequency, metadata !10606, metadata !DIExpression()), !dbg !10607
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10608
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !10608
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !10609
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !10609
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10609
  %bf.clear = and i32 %bf.lshr, 3, !dbg !10609
  store i32 %bf.clear, i32* %real_frequency, align 4, !dbg !10607
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10610
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !10610
  %function_frequency3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 20, !dbg !10611
  %bf.load4 = load i32, i32* %function_frequency3, align 8, !dbg !10612
  %bf.clear5 = and i32 %bf.load4, -196609, !dbg !10612
  %bf.set = or i32 %bf.clear5, 65536, !dbg !10612
  store i32 %bf.set, i32* %function_frequency3, align 8, !dbg !10612
  %4 = load i8, i8* %speed.addr, align 1, !dbg !10613
  store i8 %4, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 42), align 2, !dbg !10614
  %5 = bitcast i32* %regno to i8*, !dbg !10615
  %call = call %union.tree_node* @walk_tree_1(%union.tree_node** %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @prepare_decl_rtl, i8* %5, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !10615
  call void @start_sequence(), !dbg !10616
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10617
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10618
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10618
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !10618
  %bf.load6 = load i64, i64* %8, align 8, !dbg !10618
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !10618
  %bf.cast = trunc i64 %bf.clear7 to i32, !dbg !10618
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !10618
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10618

cond.true:                                        ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10618
  %call8 = call i32 @vector_type_mode(%union.tree_node* %9), !dbg !10618
  br label %cond.end, !dbg !10618

cond.false:                                       ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10618
  %type9 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !10618
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 6, !dbg !10618
  %bf.load10 = load i32, i32* %mode, align 4, !dbg !10618
  %bf.lshr11 = lshr i32 %bf.load10, 16, !dbg !10618
  %bf.clear12 = and i32 %bf.lshr11, 255, !dbg !10618
  br label %cond.end, !dbg !10618

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call8, %cond.true ], [ %bf.clear12, %cond.false ], !dbg !10618
  %call13 = call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 %cond, i32 0), !dbg !10619
  store %struct.rtx_def* %call13, %struct.rtx_def** %rslt, align 8, !dbg !10620
  %call14 = call %struct.rtx_def* @get_insns(), !dbg !10621
  store %struct.rtx_def* %call14, %struct.rtx_def** %seq, align 8, !dbg !10622
  call void @end_sequence(), !dbg !10623
  call void @default_rtl_profile(), !dbg !10624
  %11 = load i32, i32* %real_frequency, align 4, !dbg !10625
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10626
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !10626
  %function_frequency16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 20, !dbg !10627
  %bf.load17 = load i32, i32* %function_frequency16, align 8, !dbg !10628
  %bf.value = and i32 %11, 3, !dbg !10628
  %bf.shl = shl i32 %bf.value, 16, !dbg !10628
  %bf.clear18 = and i32 %bf.load17, -196609, !dbg !10628
  %bf.set19 = or i32 %bf.clear18, %bf.shl, !dbg !10628
  store i32 %bf.set19, i32* %function_frequency16, align 8, !dbg !10628
  %13 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10629
  %14 = load i8, i8* %speed.addr, align 1, !dbg !10630
  %call20 = call i32 @seq_cost(%struct.rtx_def* %13, i8 zeroext %14), !dbg !10631
  store i32 %call20, i32* %cost, align 4, !dbg !10632
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rslt, align 8, !dbg !10633
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !10633
  %bf.load21 = load i32, i32* %16, align 8, !dbg !10633
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !10633
  %cmp23 = icmp eq i32 %bf.clear22, 43, !dbg !10633
  br i1 %cmp23, label %if.then, label %if.end, !dbg !10635

if.then:                                          ; preds = %cond.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rslt, align 8, !dbg !10636
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !10636
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10636
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10636
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10636
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10636
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10637
  %base24 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !10637
  %20 = bitcast %struct.tree_base* %base24 to i64*, !dbg !10637
  %bf.load25 = load i64, i64* %20, align 8, !dbg !10637
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !10637
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !10637
  %cmp28 = icmp eq i32 %bf.cast27, 14, !dbg !10637
  br i1 %cmp28, label %cond.true29, label %cond.false31, !dbg !10637

cond.true29:                                      ; preds = %if.then
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10637
  %call30 = call i32 @vector_type_mode(%union.tree_node* %21), !dbg !10637
  br label %cond.end37, !dbg !10637

cond.false31:                                     ; preds = %if.then
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10637
  %type32 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !10637
  %mode33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6, !dbg !10637
  %bf.load34 = load i32, i32* %mode33, align 4, !dbg !10637
  %bf.lshr35 = lshr i32 %bf.load34, 16, !dbg !10637
  %bf.clear36 = and i32 %bf.lshr35, 255, !dbg !10637
  br label %cond.end37, !dbg !10637

cond.end37:                                       ; preds = %cond.false31, %cond.true29
  %cond38 = phi i32 [ %call30, %cond.true29 ], [ %bf.clear36, %cond.false31 ], !dbg !10637
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10638
  %base39 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !10638
  %24 = bitcast %struct.tree_base* %base39 to i64*, !dbg !10638
  %bf.load40 = load i64, i64* %24, align 8, !dbg !10638
  %bf.lshr41 = lshr i64 %bf.load40, 56, !dbg !10638
  %bf.cast42 = trunc i64 %bf.lshr41 to i32, !dbg !10638
  %conv = trunc i32 %bf.cast42 to i8, !dbg !10638
  %25 = load i8, i8* %speed.addr, align 1, !dbg !10639
  %call43 = call i32 @address_cost(%struct.rtx_def* %18, i32 %cond38, i8 zeroext %conv, i8 zeroext %25), !dbg !10640
  %26 = load i32, i32* %cost, align 4, !dbg !10641
  %add = add i32 %26, %call43, !dbg !10641
  store i32 %add, i32* %cost, align 4, !dbg !10641
  br label %if.end, !dbg !10642

if.end:                                           ; preds = %cond.end37, %cond.end
  %27 = load i32, i32* %cost, align 4, !dbg !10643
  ret i32 %27, !dbg !10644
}

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @shwi_to_double_int(i64 %cst) #0 !dbg !10645 {
entry:
  %retval = alloca %struct.double_int, align 8
  %cst.addr = alloca i64, align 8
  store i64 %cst, i64* %cst.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cst.addr, metadata !10648, metadata !DIExpression()), !dbg !10649
  call void @llvm.dbg.declare(metadata %struct.double_int* %retval, metadata !10650, metadata !DIExpression()), !dbg !10651
  %0 = load i64, i64* %cst.addr, align 8, !dbg !10652
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 0, !dbg !10653
  store i64 %0, i64* %low, align 8, !dbg !10654
  %1 = load i64, i64* %cst.addr, align 8, !dbg !10655
  %cmp = icmp slt i64 %1, 0, !dbg !10656
  %2 = zext i1 %cmp to i64, !dbg !10655
  %cond = select i1 %cmp, i32 -1, i32 0, !dbg !10655
  %conv = sext i32 %cond to i64, !dbg !10655
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 1, !dbg !10657
  store i64 %conv, i64* %high, align 8, !dbg !10658
  %3 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !10659
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !10659
  ret { i64, i64 } %4, !dbg !10659
}

declare dso_local { i64, i64 } @double_int_sext(i64, i64, i32) #2

declare dso_local { i64, i64 } @double_int_mul(i64, i64, i64, i64) #2

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) #2

declare dso_local { i64, i64 } @double_int_neg(i64, i64) #2

declare dso_local { i64, i64 } @double_int_add(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @double_int_zero_p(i64 %cst.coerce0, i64 %cst.coerce1) #0 !dbg !10660 {
entry:
  %cst = alloca %struct.double_int, align 8
  %0 = bitcast %struct.double_int* %cst to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %cst.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %cst.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.double_int* %cst, metadata !10663, metadata !DIExpression()), !dbg !10664
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %cst, i32 0, i32 0, !dbg !10665
  %3 = load i64, i64* %low, align 8, !dbg !10665
  %cmp = icmp eq i64 %3, 0, !dbg !10666
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10667

land.rhs:                                         ; preds = %entry
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %cst, i32 0, i32 1, !dbg !10668
  %4 = load i64, i64* %high, align 8, !dbg !10668
  %cmp1 = icmp eq i64 %4, 0, !dbg !10669
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ], !dbg !10670
  %land.ext = zext i1 %5 to i32, !dbg !10667
  %conv = trunc i32 %land.ext to i8, !dbg !10671
  ret i8 %conv, !dbg !10672
}

declare dso_local { i64, i64 } @double_int_sdivmod(i64, i64, i64, i64, i32, %struct.double_int*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @ptr_difference_cost(%struct.ivopts_data* %data, %union.tree_node* %e1, %union.tree_node* %e2, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %depends_on) #0 !dbg !10673 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %e1.addr = alloca %union.tree_node*, align 8
  %e2.addr = alloca %union.tree_node*, align 8
  %symbol_present.addr = alloca i8*, align 8
  %var_present.addr = alloca i8*, align 8
  %offset.addr = alloca i64*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def**, align 8
  %diff = alloca i64, align 8
  %aff_e1 = alloca %struct.affine_tree_combination, align 8
  %aff_e2 = alloca %struct.affine_tree_combination, align 8
  %type = alloca %union.tree_node*, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !10674, metadata !DIExpression()), !dbg !10675
  store %union.tree_node* %e1, %union.tree_node** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1.addr, metadata !10676, metadata !DIExpression()), !dbg !10677
  store %union.tree_node* %e2, %union.tree_node** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2.addr, metadata !10678, metadata !DIExpression()), !dbg !10679
  store i8* %symbol_present, i8** %symbol_present.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %symbol_present.addr, metadata !10680, metadata !DIExpression()), !dbg !10681
  store i8* %var_present, i8** %var_present.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %var_present.addr, metadata !10682, metadata !DIExpression()), !dbg !10683
  store i64* %offset, i64** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %offset.addr, metadata !10684, metadata !DIExpression()), !dbg !10685
  store %struct.bitmap_head_def** %depends_on, %struct.bitmap_head_def*** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on.addr, metadata !10686, metadata !DIExpression()), !dbg !10687
  call void @llvm.dbg.declare(metadata i64* %diff, metadata !10688, metadata !DIExpression()), !dbg !10689
  store i64 0, i64* %diff, align 8, !dbg !10689
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %aff_e1, metadata !10690, metadata !DIExpression()), !dbg !10691
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %aff_e2, metadata !10692, metadata !DIExpression()), !dbg !10693
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10694, metadata !DIExpression()), !dbg !10695
  %0 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !10696
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10696
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10696
  %bf.load = load i64, i64* %1, align 8, !dbg !10696
  %bf.clear = and i64 %bf.load, 65535, !dbg !10696
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10696
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !10696
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10696

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 3607, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !10696
  br label %cond.end, !dbg !10696

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10696

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10696
  %2 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !10697
  %3 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !10699
  %call = call zeroext i8 @ptr_difference_const(%union.tree_node* %2, %union.tree_node* %3, i64* %diff), !dbg !10700
  %tobool = icmp ne i8 %call, 0, !dbg !10700
  br i1 %tobool, label %if.then, label %if.end, !dbg !10701

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %diff, align 8, !dbg !10702
  %5 = load i64*, i64** %offset.addr, align 8, !dbg !10704
  %6 = load i64, i64* %5, align 8, !dbg !10705
  %add = add i64 %6, %4, !dbg !10705
  store i64 %add, i64* %5, align 8, !dbg !10705
  %7 = load i8*, i8** %symbol_present.addr, align 8, !dbg !10706
  store i8 0, i8* %7, align 1, !dbg !10707
  %8 = load i8*, i8** %var_present.addr, align 8, !dbg !10708
  store i8 0, i8* %8, align 1, !dbg !10709
  %9 = bitcast %struct.comp_cost* %retval to i8*, !dbg !10710
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !10710
  br label %return, !dbg !10711

if.end:                                           ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !10712
  %call1 = call i32 @integer_zerop(%union.tree_node* %10), !dbg !10714
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10714
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !10715

if.then3:                                         ; preds = %if.end
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !10716
  %12 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !10717
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !10717
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10717
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10717
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10717
  %14 = load i8*, i8** %symbol_present.addr, align 8, !dbg !10718
  %15 = load i8*, i8** %var_present.addr, align 8, !dbg !10719
  %16 = load i64*, i64** %offset.addr, align 8, !dbg !10720
  %17 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !10721
  %call4 = call i64 @split_address_cost(%struct.ivopts_data* %11, %union.tree_node* %13, i8* %14, i8* %15, i64* %16, %struct.bitmap_head_def** %17), !dbg !10722
  %18 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10722
  store i64 %call4, i64* %18, align 4, !dbg !10722
  br label %return, !dbg !10723

if.end5:                                          ; preds = %if.end
  %19 = load i8*, i8** %symbol_present.addr, align 8, !dbg !10724
  store i8 0, i8* %19, align 1, !dbg !10725
  %20 = load i8*, i8** %var_present.addr, align 8, !dbg !10726
  store i8 1, i8* %20, align 1, !dbg !10727
  %21 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !10728
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !10728
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10728
  %22 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !10728
  %call7 = call %union.tree_node* @signed_type_for(%union.tree_node* %22), !dbg !10729
  store %union.tree_node* %call7, %union.tree_node** %type, align 8, !dbg !10730
  %23 = load %union.tree_node*, %union.tree_node** %e1.addr, align 8, !dbg !10731
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10732
  call void @tree_to_aff_combination(%union.tree_node* %23, %union.tree_node* %24, %struct.affine_tree_combination* %aff_e1), !dbg !10733
  %25 = load %union.tree_node*, %union.tree_node** %e2.addr, align 8, !dbg !10734
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10735
  call void @tree_to_aff_combination(%union.tree_node* %25, %union.tree_node* %26, %struct.affine_tree_combination* %aff_e2), !dbg !10736
  %call8 = call { i64, i64 } @shwi_to_double_int(i64 -1), !dbg !10737
  %27 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !10737
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 0, !dbg !10737
  %29 = extractvalue { i64, i64 } %call8, 0, !dbg !10737
  store i64 %29, i64* %28, align 8, !dbg !10737
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 1, !dbg !10737
  %31 = extractvalue { i64, i64 } %call8, 1, !dbg !10737
  store i64 %31, i64* %30, align 8, !dbg !10737
  %32 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !10738
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0, !dbg !10738
  %34 = load i64, i64* %33, align 8, !dbg !10738
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1, !dbg !10738
  %36 = load i64, i64* %35, align 8, !dbg !10738
  call void @aff_combination_scale(%struct.affine_tree_combination* %aff_e2, i64 %34, i64 %36), !dbg !10738
  call void @aff_combination_add(%struct.affine_tree_combination* %aff_e1, %struct.affine_tree_combination* %aff_e2), !dbg !10739
  %37 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !10740
  %call9 = call %union.tree_node* @aff_combination_to_tree(%struct.affine_tree_combination* %aff_e1), !dbg !10741
  %38 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !10742
  %call10 = call i64 @force_var_cost(%struct.ivopts_data* %37, %union.tree_node* %call9, %struct.bitmap_head_def** %38), !dbg !10743
  %39 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10743
  store i64 %call10, i64* %39, align 4, !dbg !10743
  br label %return, !dbg !10744

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %40 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10745
  %41 = load i64, i64* %40, align 4, !dbg !10745
  ret i64 %41, !dbg !10745
}

declare dso_local %union.tree_node* @signed_type_for(%union.tree_node*) #2

declare dso_local void @tree_to_aff_combination(%union.tree_node*, %union.tree_node*, %struct.affine_tree_combination*) #2

declare dso_local void @aff_combination_scale(%struct.affine_tree_combination*, i64, i64) #2

declare dso_local void @aff_combination_add(%struct.affine_tree_combination*, %struct.affine_tree_combination*) #2

declare dso_local %union.tree_node* @aff_combination_to_tree(%struct.affine_tree_combination*) #2

declare dso_local zeroext i8 @ptr_difference_const(%union.tree_node*, %union.tree_node*, i64*) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @split_address_cost(%struct.ivopts_data* %data, %union.tree_node* %addr, i8* %symbol_present, i8* %var_present, i64* %offset, %struct.bitmap_head_def** %depends_on) #0 !dbg !10746 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %addr.addr = alloca %union.tree_node*, align 8
  %symbol_present.addr = alloca i8*, align 8
  %var_present.addr = alloca i8*, align 8
  %offset.addr = alloca i64*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def**, align 8
  %core = alloca %union.tree_node*, align 8
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %toffset = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %volatilep = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !10749, metadata !DIExpression()), !dbg !10750
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !10751, metadata !DIExpression()), !dbg !10752
  store i8* %symbol_present, i8** %symbol_present.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %symbol_present.addr, metadata !10753, metadata !DIExpression()), !dbg !10754
  store i8* %var_present, i8** %var_present.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %var_present.addr, metadata !10755, metadata !DIExpression()), !dbg !10756
  store i64* %offset, i64** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %offset.addr, metadata !10757, metadata !DIExpression()), !dbg !10758
  store %struct.bitmap_head_def** %depends_on, %struct.bitmap_head_def*** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %depends_on.addr, metadata !10759, metadata !DIExpression()), !dbg !10760
  call void @llvm.dbg.declare(metadata %union.tree_node** %core, metadata !10761, metadata !DIExpression()), !dbg !10762
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !10763, metadata !DIExpression()), !dbg !10764
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !10765, metadata !DIExpression()), !dbg !10766
  call void @llvm.dbg.declare(metadata %union.tree_node** %toffset, metadata !10767, metadata !DIExpression()), !dbg !10768
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !10769, metadata !DIExpression()), !dbg !10770
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !10771, metadata !DIExpression()), !dbg !10772
  call void @llvm.dbg.declare(metadata i32* %volatilep, metadata !10773, metadata !DIExpression()), !dbg !10774
  %0 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !10775
  %call = call %union.tree_node* @get_inner_reference(%union.tree_node* %0, i64* %bitsize, i64* %bitpos, %union.tree_node** %toffset, i32* %mode, i32* %unsignedp, i32* %volatilep, i8 zeroext 0), !dbg !10776
  store %union.tree_node* %call, %union.tree_node** %core, align 8, !dbg !10777
  %1 = load %union.tree_node*, %union.tree_node** %toffset, align 8, !dbg !10778
  %cmp = icmp ne %union.tree_node* %1, null, !dbg !10780
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10781

lor.lhs.false:                                    ; preds = %entry
  %2 = load i64, i64* %bitpos, align 8, !dbg !10782
  %rem = srem i64 %2, 8, !dbg !10783
  %cmp1 = icmp ne i64 %rem, 0, !dbg !10784
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !10785

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %core, align 8, !dbg !10786
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10786
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !10786
  %bf.load = load i64, i64* %4, align 8, !dbg !10786
  %bf.clear = and i64 %bf.load, 65535, !dbg !10786
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10786
  %cmp3 = icmp ne i32 %bf.cast, 32, !dbg !10787
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10788

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %5 = load i8*, i8** %symbol_present.addr, align 8, !dbg !10789
  store i8 0, i8* %5, align 1, !dbg !10791
  %6 = load i8*, i8** %var_present.addr, align 8, !dbg !10792
  store i8 1, i8* %6, align 1, !dbg !10793
  %7 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !10794
  store %struct.ivopts_data* %7, %struct.ivopts_data** @fd_ivopts_data, align 8, !dbg !10795
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %depends_on.addr, align 8, !dbg !10796
  %9 = bitcast %struct.bitmap_head_def** %8 to i8*, !dbg !10796
  %call4 = call %union.tree_node* @walk_tree_1(%union.tree_node** %addr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_depends, i8* %9, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !10796
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !10797
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %10, i32 0, i32 11, !dbg !10798
  %11 = load i8, i8* %speed, align 1, !dbg !10798
  %idxprom = zext i8 %11 to i64, !dbg !10799
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom, !dbg !10799
  %12 = load i32, i32* %arrayidx, align 4, !dbg !10799
  %call5 = call i64 @new_cost(i32 %12, i32 0), !dbg !10800
  %13 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10800
  store i64 %call5, i64* %13, align 4, !dbg !10800
  br label %return, !dbg !10801

if.end:                                           ; preds = %lor.lhs.false2
  %14 = load i64, i64* %bitpos, align 8, !dbg !10802
  %div = sdiv i64 %14, 8, !dbg !10803
  %15 = load i64*, i64** %offset.addr, align 8, !dbg !10804
  %16 = load i64, i64* %15, align 8, !dbg !10805
  %add = add i64 %16, %div, !dbg !10805
  store i64 %add, i64* %15, align 8, !dbg !10805
  %17 = load %union.tree_node*, %union.tree_node** %core, align 8, !dbg !10806
  %base6 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !10806
  %18 = bitcast %struct.tree_base* %base6 to i64*, !dbg !10806
  %bf.load7 = load i64, i64* %18, align 8, !dbg !10806
  %bf.lshr = lshr i64 %bf.load7, 26, !dbg !10806
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !10806
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !10806
  %tobool = icmp ne i32 %bf.cast9, 0, !dbg !10806
  br i1 %tobool, label %if.then16, label %lor.lhs.false10, !dbg !10808

lor.lhs.false10:                                  ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %core, align 8, !dbg !10809
  %decl_common = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !10809
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10809
  %20 = bitcast i40* %decl_flag_1 to i64*, !dbg !10809
  %bf.load11 = load i64, i64* %20, align 8, !dbg !10809
  %bf.lshr12 = lshr i64 %bf.load11, 25, !dbg !10809
  %bf.clear13 = and i64 %bf.lshr12, 1, !dbg !10809
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !10809
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !10809
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !10810

if.then16:                                        ; preds = %lor.lhs.false10, %if.end
  %21 = load i8*, i8** %symbol_present.addr, align 8, !dbg !10811
  store i8 1, i8* %21, align 1, !dbg !10813
  %22 = load i8*, i8** %var_present.addr, align 8, !dbg !10814
  store i8 0, i8* %22, align 1, !dbg !10815
  %23 = bitcast %struct.comp_cost* %retval to i8*, !dbg !10816
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !10816
  br label %return, !dbg !10817

if.end17:                                         ; preds = %lor.lhs.false10
  %24 = load i8*, i8** %symbol_present.addr, align 8, !dbg !10818
  store i8 0, i8* %24, align 1, !dbg !10819
  %25 = load i8*, i8** %var_present.addr, align 8, !dbg !10820
  store i8 1, i8* %25, align 1, !dbg !10821
  %26 = bitcast %struct.comp_cost* %retval to i8*, !dbg !10822
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %26, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !10822
  br label %return, !dbg !10823

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %27 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10824
  %28 = load i64, i64* %27, align 4, !dbg !10824
  ret i64 %28, !dbg !10824
}

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @force_expr_to_var_cost(%union.tree_node* %expr, i8 zeroext %speed) #0 !dbg !2627 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %expr.addr = alloca %union.tree_node*, align 8
  %speed.addr = alloca i8, align 1
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %cost0 = alloca %struct.comp_cost, align 4
  %cost1 = alloca %struct.comp_cost, align 4
  %cost = alloca %struct.comp_cost, align 4
  %mode = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %obj = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  %tmp163 = alloca %struct.comp_cost, align 4
  %tmp175 = alloca %struct.comp_cost, align 4
  %tmp203 = alloca %struct.comp_cost, align 4
  %tmp210 = alloca %struct.comp_cost, align 4
  %tmp218 = alloca %struct.comp_cost, align 4
  %tmp230 = alloca %struct.comp_cost, align 4
  %tmp232 = alloca %struct.comp_cost, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !10825, metadata !DIExpression()), !dbg !10826
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !10827, metadata !DIExpression()), !dbg !10828
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !10829, metadata !DIExpression()), !dbg !10830
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !10831, metadata !DIExpression()), !dbg !10832
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost0, metadata !10833, metadata !DIExpression()), !dbg !10834
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost1, metadata !10835, metadata !DIExpression()), !dbg !10836
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !10837, metadata !DIExpression()), !dbg !10838
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !10839, metadata !DIExpression()), !dbg !10840
  %0 = load i8, i8* @force_expr_to_var_cost.costs_initialized, align 1, !dbg !10841
  %tobool = icmp ne i8 %0, 0, !dbg !10841
  br i1 %tobool, label %if.end35, label %if.then, !dbg !10843

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10844, metadata !DIExpression()), !dbg !10846
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10847
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %1), !dbg !10848
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !10846
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !10849, metadata !DIExpression()), !dbg !10850
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !10851, metadata !DIExpression()), !dbg !10852
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !10853, metadata !DIExpression()), !dbg !10854
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10855, metadata !DIExpression()), !dbg !10856
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10857
  %call1 = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.45, i64 0, i64 0)), !dbg !10858
  store %union.tree_node* %call1, %union.tree_node** %var, align 8, !dbg !10859
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10860
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10860
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !10860
  %bf.load = load i64, i64* %4, align 8, !dbg !10861
  %bf.clear = and i64 %bf.load, -67108865, !dbg !10861
  %bf.set = or i64 %bf.clear, 67108864, !dbg !10861
  store i64 %bf.set, i64* %4, align 8, !dbg !10861
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10862
  %call2 = call %struct.rtx_def* @produce_memory_decl_rtl(%union.tree_node* %5, i32* null), !dbg !10863
  store %struct.rtx_def* %call2, %struct.rtx_def** %x, align 8, !dbg !10864
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10865
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10865
  call void @set_decl_rtl(%union.tree_node* %6, %struct.rtx_def* %7), !dbg !10865
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10866
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !10866
  %call3 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %8, %union.tree_node* %9), !dbg !10866
  store %union.tree_node* %call3, %union.tree_node** %addr, align 8, !dbg !10867
  store i32 0, i32* %i, align 4, !dbg !10868
  br label %for.cond, !dbg !10870

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32, i32* %i, align 4, !dbg !10871
  %cmp = icmp slt i32 %10, 2, !dbg !10873
  br i1 %cmp, label %for.body, label %for.end, !dbg !10874

for.body:                                         ; preds = %for.cond
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !10875
  %call4 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 2000), !dbg !10877
  %12 = load i32, i32* %i, align 4, !dbg !10878
  %conv = trunc i32 %12 to i8, !dbg !10878
  %call5 = call i32 @computation_cost(%union.tree_node* %call4, i8 zeroext %conv), !dbg !10879
  %13 = load i32, i32* %i, align 4, !dbg !10880
  %idxprom = sext i32 %13 to i64, !dbg !10881
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.integer_cost, i64 0, i64 %idxprom, !dbg !10881
  store i32 %call5, i32* %arrayidx, align 4, !dbg !10882
  %14 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !10883
  %15 = load i32, i32* %i, align 4, !dbg !10884
  %conv6 = trunc i32 %15 to i8, !dbg !10884
  %call7 = call i32 @computation_cost(%union.tree_node* %14, i8 zeroext %conv6), !dbg !10885
  %add = add i32 %call7, 1, !dbg !10886
  %16 = load i32, i32* %i, align 4, !dbg !10887
  %idxprom8 = sext i32 %16 to i64, !dbg !10888
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.symbol_cost, i64 0, i64 %idxprom8, !dbg !10888
  store i32 %add, i32* %arrayidx9, align 4, !dbg !10889
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10890
  %18 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !10890
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !10890
  %call10 = call %union.tree_node* @build_int_cst(%union.tree_node* %19, i64 2000), !dbg !10890
  %call11 = call %union.tree_node* @build2_stat(i32 66, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %call10), !dbg !10890
  %20 = load i32, i32* %i, align 4, !dbg !10891
  %conv12 = trunc i32 %20 to i8, !dbg !10891
  %call13 = call i32 @computation_cost(%union.tree_node* %call11, i8 zeroext %conv12), !dbg !10892
  %add14 = add i32 %call13, 1, !dbg !10893
  %21 = load i32, i32* %i, align 4, !dbg !10894
  %idxprom15 = sext i32 %21 to i64, !dbg !10895
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.address_cost, i64 0, i64 %idxprom15, !dbg !10895
  store i32 %add14, i32* %arrayidx16, align 4, !dbg !10896
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10897
  %tobool17 = icmp ne %struct._IO_FILE* %22, null, !dbg !10897
  br i1 %tobool17, label %land.lhs.true, label %if.end, !dbg !10899

land.lhs.true:                                    ; preds = %for.body
  %23 = load i32, i32* @dump_flags, align 4, !dbg !10900
  %and = and i32 %23, 8, !dbg !10901
  %tobool18 = icmp ne i32 %and, 0, !dbg !10901
  br i1 %tobool18, label %if.then19, label %if.end, !dbg !10902

if.then19:                                        ; preds = %land.lhs.true
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10903
  %25 = load i32, i32* %i, align 4, !dbg !10905
  %tobool20 = icmp ne i32 %25, 0, !dbg !10905
  %26 = zext i1 %tobool20 to i64, !dbg !10905
  %cond = select i1 %tobool20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i64 0, i64 0), !dbg !10905
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.46, i64 0, i64 0), i8* %cond), !dbg !10906
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10907
  %28 = load i32, i32* %i, align 4, !dbg !10908
  %idxprom22 = sext i32 %28 to i64, !dbg !10909
  %arrayidx23 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.integer_cost, i64 0, i64 %idxprom22, !dbg !10909
  %29 = load i32, i32* %arrayidx23, align 4, !dbg !10909
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.49, i64 0, i64 0), i32 %29), !dbg !10910
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10911
  %31 = load i32, i32* %i, align 4, !dbg !10912
  %idxprom25 = sext i32 %31 to i64, !dbg !10913
  %arrayidx26 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.symbol_cost, i64 0, i64 %idxprom25, !dbg !10913
  %32 = load i32, i32* %arrayidx26, align 4, !dbg !10913
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.50, i64 0, i64 0), i32 %32), !dbg !10914
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10915
  %34 = load i32, i32* %i, align 4, !dbg !10916
  %idxprom28 = sext i32 %34 to i64, !dbg !10917
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.address_cost, i64 0, i64 %idxprom28, !dbg !10917
  %35 = load i32, i32* %arrayidx29, align 4, !dbg !10917
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.51, i64 0, i64 0), i32 %35), !dbg !10918
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10919
  %37 = load i32, i32* %i, align 4, !dbg !10920
  %idxprom31 = sext i32 %37 to i64, !dbg !10921
  %arrayidx32 = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom31, !dbg !10921
  %38 = load i32, i32* %arrayidx32, align 4, !dbg !10921
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.52, i64 0, i64 0), i32 %38), !dbg !10922
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10923
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10924
  br label %if.end, !dbg !10925

if.end:                                           ; preds = %if.then19, %land.lhs.true, %for.body
  br label %for.inc, !dbg !10926

for.inc:                                          ; preds = %if.end
  %40 = load i32, i32* %i, align 4, !dbg !10927
  %inc = add nsw i32 %40, 1, !dbg !10927
  store i32 %inc, i32* %i, align 4, !dbg !10927
  br label %for.cond, !dbg !10928, !llvm.loop !10929

for.end:                                          ; preds = %for.cond
  store i8 1, i8* @force_expr_to_var_cost.costs_initialized, align 1, !dbg !10931
  br label %if.end35, !dbg !10932

if.end35:                                         ; preds = %for.end, %entry
  %41 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10933
  %call36 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %41), !dbg !10933
  store %union.tree_node* %call36, %union.tree_node** %expr.addr, align 8, !dbg !10933
  %42 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %base37 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !10934
  %43 = bitcast %struct.tree_base* %base37 to i64*, !dbg !10934
  %bf.load38 = load i64, i64* %43, align 8, !dbg !10934
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !10934
  %bf.cast = trunc i64 %bf.clear39 to i32, !dbg !10934
  %cmp40 = icmp eq i32 %bf.cast, 32, !dbg !10934
  br i1 %cmp40, label %if.then88, label %lor.lhs.false, !dbg !10934

lor.lhs.false:                                    ; preds = %if.end35
  %44 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %base42 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !10934
  %45 = bitcast %struct.tree_base* %base42 to i64*, !dbg !10934
  %bf.load43 = load i64, i64* %45, align 8, !dbg !10934
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !10934
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !10934
  %cmp46 = icmp eq i32 %bf.cast45, 34, !dbg !10934
  br i1 %cmp46, label %if.then88, label %lor.lhs.false48, !dbg !10934

lor.lhs.false48:                                  ; preds = %lor.lhs.false
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %base49 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !10934
  %47 = bitcast %struct.tree_base* %base49 to i64*, !dbg !10934
  %bf.load50 = load i64, i64* %47, align 8, !dbg !10934
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !10934
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !10934
  %cmp53 = icmp eq i32 %bf.cast52, 36, !dbg !10934
  br i1 %cmp53, label %if.then88, label %lor.lhs.false55, !dbg !10934

lor.lhs.false55:                                  ; preds = %lor.lhs.false48
  %48 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %base56 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !10934
  %49 = bitcast %struct.tree_base* %base56 to i64*, !dbg !10934
  %bf.load57 = load i64, i64* %49, align 8, !dbg !10934
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !10934
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !10934
  %cmp60 = icmp eq i32 %bf.cast59, 141, !dbg !10934
  br i1 %cmp60, label %land.lhs.true62, label %if.end89, !dbg !10934

land.lhs.true62:                                  ; preds = %lor.lhs.false55
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %ssa_name = bitcast %union.tree_node* %50 to %struct.tree_ssa_name*, !dbg !10934
  %var63 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !10934
  %51 = load %union.tree_node*, %union.tree_node** %var63, align 8, !dbg !10934
  %base64 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !10934
  %52 = bitcast %struct.tree_base* %base64 to i64*, !dbg !10934
  %bf.load65 = load i64, i64* %52, align 8, !dbg !10934
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !10934
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !10934
  %cmp68 = icmp eq i32 %bf.cast67, 32, !dbg !10934
  br i1 %cmp68, label %if.then88, label %lor.lhs.false70, !dbg !10934

lor.lhs.false70:                                  ; preds = %land.lhs.true62
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %ssa_name71 = bitcast %union.tree_node* %53 to %struct.tree_ssa_name*, !dbg !10934
  %var72 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name71, i32 0, i32 1, !dbg !10934
  %54 = load %union.tree_node*, %union.tree_node** %var72, align 8, !dbg !10934
  %base73 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !10934
  %55 = bitcast %struct.tree_base* %base73 to i64*, !dbg !10934
  %bf.load74 = load i64, i64* %55, align 8, !dbg !10934
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !10934
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !10934
  %cmp77 = icmp eq i32 %bf.cast76, 34, !dbg !10934
  br i1 %cmp77, label %if.then88, label %lor.lhs.false79, !dbg !10934

lor.lhs.false79:                                  ; preds = %lor.lhs.false70
  %56 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10934
  %ssa_name80 = bitcast %union.tree_node* %56 to %struct.tree_ssa_name*, !dbg !10934
  %var81 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name80, i32 0, i32 1, !dbg !10934
  %57 = load %union.tree_node*, %union.tree_node** %var81, align 8, !dbg !10934
  %base82 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !10934
  %58 = bitcast %struct.tree_base* %base82 to i64*, !dbg !10934
  %bf.load83 = load i64, i64* %58, align 8, !dbg !10934
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !10934
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !10934
  %cmp86 = icmp eq i32 %bf.cast85, 36, !dbg !10934
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !10936

if.then88:                                        ; preds = %lor.lhs.false79, %lor.lhs.false70, %land.lhs.true62, %lor.lhs.false48, %lor.lhs.false, %if.end35
  %59 = bitcast %struct.comp_cost* %retval to i8*, !dbg !10937
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !10937
  br label %return, !dbg !10938

if.end89:                                         ; preds = %lor.lhs.false79, %lor.lhs.false55
  %60 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10939
  %call90 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %60), !dbg !10941
  %tobool91 = icmp ne i8 %call90, 0, !dbg !10941
  br i1 %tobool91, label %if.then92, label %if.end141, !dbg !10942

if.then92:                                        ; preds = %if.end89
  %61 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10943
  %base93 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !10943
  %62 = bitcast %struct.tree_base* %base93 to i64*, !dbg !10943
  %bf.load94 = load i64, i64* %62, align 8, !dbg !10943
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !10943
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !10943
  %cmp97 = icmp eq i32 %bf.cast96, 23, !dbg !10946
  br i1 %cmp97, label %if.then99, label %if.end103, !dbg !10947

if.then99:                                        ; preds = %if.then92
  %63 = load i8, i8* %speed.addr, align 1, !dbg !10948
  %idxprom100 = zext i8 %63 to i64, !dbg !10949
  %arrayidx101 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.integer_cost, i64 0, i64 %idxprom100, !dbg !10949
  %64 = load i32, i32* %arrayidx101, align 4, !dbg !10949
  %call102 = call i64 @new_cost(i32 %64, i32 0), !dbg !10950
  %65 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10950
  store i64 %call102, i64* %65, align 4, !dbg !10950
  br label %return, !dbg !10951

if.end103:                                        ; preds = %if.then92
  %66 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10952
  %base104 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !10952
  %67 = bitcast %struct.tree_base* %base104 to i64*, !dbg !10952
  %bf.load105 = load i64, i64* %67, align 8, !dbg !10952
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !10952
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !10952
  %cmp108 = icmp eq i32 %bf.cast107, 121, !dbg !10954
  br i1 %cmp108, label %if.then110, label %if.end137, !dbg !10955

if.then110:                                       ; preds = %if.end103
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj, metadata !10956, metadata !DIExpression()), !dbg !10958
  %68 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10959
  %exp = bitcast %union.tree_node* %68 to %struct.tree_exp*, !dbg !10959
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10959
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !10959
  %69 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8, !dbg !10959
  store %union.tree_node* %69, %union.tree_node** %obj, align 8, !dbg !10958
  %70 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !10960
  %base112 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !10960
  %71 = bitcast %struct.tree_base* %base112 to i64*, !dbg !10960
  %bf.load113 = load i64, i64* %71, align 8, !dbg !10960
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !10960
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !10960
  %cmp116 = icmp eq i32 %bf.cast115, 32, !dbg !10962
  br i1 %cmp116, label %if.then132, label %lor.lhs.false118, !dbg !10963

lor.lhs.false118:                                 ; preds = %if.then110
  %72 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !10964
  %base119 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !10964
  %73 = bitcast %struct.tree_base* %base119 to i64*, !dbg !10964
  %bf.load120 = load i64, i64* %73, align 8, !dbg !10964
  %bf.clear121 = and i64 %bf.load120, 65535, !dbg !10964
  %bf.cast122 = trunc i64 %bf.clear121 to i32, !dbg !10964
  %cmp123 = icmp eq i32 %bf.cast122, 34, !dbg !10965
  br i1 %cmp123, label %if.then132, label %lor.lhs.false125, !dbg !10966

lor.lhs.false125:                                 ; preds = %lor.lhs.false118
  %74 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !10967
  %base126 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !10967
  %75 = bitcast %struct.tree_base* %base126 to i64*, !dbg !10967
  %bf.load127 = load i64, i64* %75, align 8, !dbg !10967
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !10967
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !10967
  %cmp130 = icmp eq i32 %bf.cast129, 36, !dbg !10968
  br i1 %cmp130, label %if.then132, label %if.end136, !dbg !10969

if.then132:                                       ; preds = %lor.lhs.false125, %lor.lhs.false118, %if.then110
  %76 = load i8, i8* %speed.addr, align 1, !dbg !10970
  %idxprom133 = zext i8 %76 to i64, !dbg !10971
  %arrayidx134 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.symbol_cost, i64 0, i64 %idxprom133, !dbg !10971
  %77 = load i32, i32* %arrayidx134, align 4, !dbg !10971
  %call135 = call i64 @new_cost(i32 %77, i32 0), !dbg !10972
  %78 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10972
  store i64 %call135, i64* %78, align 4, !dbg !10972
  br label %return, !dbg !10973

if.end136:                                        ; preds = %lor.lhs.false125
  br label %if.end137, !dbg !10974

if.end137:                                        ; preds = %if.end136, %if.end103
  %79 = load i8, i8* %speed.addr, align 1, !dbg !10975
  %idxprom138 = zext i8 %79 to i64, !dbg !10976
  %arrayidx139 = getelementptr inbounds [2 x i32], [2 x i32]* @force_expr_to_var_cost.address_cost, i64 0, i64 %idxprom138, !dbg !10976
  %80 = load i32, i32* %arrayidx139, align 4, !dbg !10976
  %call140 = call i64 @new_cost(i32 %80, i32 0), !dbg !10977
  %81 = bitcast %struct.comp_cost* %retval to i64*, !dbg !10977
  store i64 %call140, i64* %81, align 4, !dbg !10977
  br label %return, !dbg !10978

if.end141:                                        ; preds = %if.end89
  %82 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10979
  %base142 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !10979
  %83 = bitcast %struct.tree_base* %base142 to i64*, !dbg !10979
  %bf.load143 = load i64, i64* %83, align 8, !dbg !10979
  %bf.clear144 = and i64 %bf.load143, 65535, !dbg !10979
  %bf.cast145 = trunc i64 %bf.clear144 to i32, !dbg !10979
  switch i32 %bf.cast145, label %sw.default [
    i32 66, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 65, label %sw.bb
    i32 79, label %sw.bb166
  ], !dbg !10980

sw.bb:                                            ; preds = %if.end141, %if.end141, %if.end141, %if.end141
  %84 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10981
  %exp146 = bitcast %union.tree_node* %84 to %struct.tree_exp*, !dbg !10981
  %operands147 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp146, i32 0, i32 3, !dbg !10981
  %arrayidx148 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands147, i64 0, i64 0, !dbg !10981
  %85 = load %union.tree_node*, %union.tree_node** %arrayidx148, align 8, !dbg !10981
  store %union.tree_node* %85, %union.tree_node** %op0, align 8, !dbg !10983
  %86 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !10984
  %exp149 = bitcast %union.tree_node* %86 to %struct.tree_exp*, !dbg !10984
  %operands150 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp149, i32 0, i32 3, !dbg !10984
  %arrayidx151 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands150, i64 0, i64 1, !dbg !10984
  %87 = load %union.tree_node*, %union.tree_node** %arrayidx151, align 8, !dbg !10984
  store %union.tree_node* %87, %union.tree_node** %op1, align 8, !dbg !10985
  %88 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10986
  %call152 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %88), !dbg !10986
  store %union.tree_node* %call152, %union.tree_node** %op0, align 8, !dbg !10986
  %89 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10987
  %call153 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %89), !dbg !10987
  store %union.tree_node* %call153, %union.tree_node** %op1, align 8, !dbg !10987
  %90 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10988
  %call154 = call zeroext i8 @is_gimple_val(%union.tree_node* %90), !dbg !10990
  %tobool155 = icmp ne i8 %call154, 0, !dbg !10990
  br i1 %tobool155, label %if.then156, label %if.else, !dbg !10991

if.then156:                                       ; preds = %sw.bb
  %91 = bitcast %struct.comp_cost* %cost0 to i8*, !dbg !10992
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !10992
  br label %if.end158, !dbg !10993

if.else:                                          ; preds = %sw.bb
  %92 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10994
  %93 = load i8, i8* %speed.addr, align 1, !dbg !10995
  %call157 = call i64 @force_expr_to_var_cost(%union.tree_node* %92, i8 zeroext %93), !dbg !10996
  %94 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !10996
  store i64 %call157, i64* %94, align 4, !dbg !10996
  %95 = bitcast %struct.comp_cost* %cost0 to i8*, !dbg !10996
  %96 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !10996
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %96, i64 8, i1 false), !dbg !10996
  br label %if.end158

if.end158:                                        ; preds = %if.else, %if.then156
  %97 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10997
  %call159 = call zeroext i8 @is_gimple_val(%union.tree_node* %97), !dbg !10999
  %tobool160 = icmp ne i8 %call159, 0, !dbg !10999
  br i1 %tobool160, label %if.then161, label %if.else162, !dbg !11000

if.then161:                                       ; preds = %if.end158
  %98 = bitcast %struct.comp_cost* %cost1 to i8*, !dbg !11001
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %98, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !11001
  br label %if.end165, !dbg !11002

if.else162:                                       ; preds = %if.end158
  %99 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11003
  %100 = load i8, i8* %speed.addr, align 1, !dbg !11004
  %call164 = call i64 @force_expr_to_var_cost(%union.tree_node* %99, i8 zeroext %100), !dbg !11005
  %101 = bitcast %struct.comp_cost* %tmp163 to i64*, !dbg !11005
  store i64 %call164, i64* %101, align 4, !dbg !11005
  %102 = bitcast %struct.comp_cost* %cost1 to i8*, !dbg !11005
  %103 = bitcast %struct.comp_cost* %tmp163 to i8*, !dbg !11005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %103, i64 8, i1 false), !dbg !11005
  br label %if.end165

if.end165:                                        ; preds = %if.else162, %if.then161
  br label %sw.epilog, !dbg !11006

sw.bb166:                                         ; preds = %if.end141
  %104 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11007
  %exp167 = bitcast %union.tree_node* %104 to %struct.tree_exp*, !dbg !11007
  %operands168 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp167, i32 0, i32 3, !dbg !11007
  %arrayidx169 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands168, i64 0, i64 0, !dbg !11007
  %105 = load %union.tree_node*, %union.tree_node** %arrayidx169, align 8, !dbg !11007
  store %union.tree_node* %105, %union.tree_node** %op0, align 8, !dbg !11008
  %106 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11009
  %call170 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %106), !dbg !11009
  store %union.tree_node* %call170, %union.tree_node** %op0, align 8, !dbg !11009
  store %union.tree_node* null, %union.tree_node** %op1, align 8, !dbg !11010
  %107 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11011
  %call171 = call zeroext i8 @is_gimple_val(%union.tree_node* %107), !dbg !11013
  %tobool172 = icmp ne i8 %call171, 0, !dbg !11013
  br i1 %tobool172, label %if.then173, label %if.else174, !dbg !11014

if.then173:                                       ; preds = %sw.bb166
  %108 = bitcast %struct.comp_cost* %cost0 to i8*, !dbg !11015
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !11015
  br label %if.end177, !dbg !11016

if.else174:                                       ; preds = %sw.bb166
  %109 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11017
  %110 = load i8, i8* %speed.addr, align 1, !dbg !11018
  %call176 = call i64 @force_expr_to_var_cost(%union.tree_node* %109, i8 zeroext %110), !dbg !11019
  %111 = bitcast %struct.comp_cost* %tmp175 to i64*, !dbg !11019
  store i64 %call176, i64* %111, align 4, !dbg !11019
  %112 = bitcast %struct.comp_cost* %cost0 to i8*, !dbg !11019
  %113 = bitcast %struct.comp_cost* %tmp175 to i8*, !dbg !11019
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %112, i8* align 4 %113, i64 8, i1 false), !dbg !11019
  br label %if.end177

if.end177:                                        ; preds = %if.else174, %if.then173
  %114 = bitcast %struct.comp_cost* %cost1 to i8*, !dbg !11020
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !11020
  br label %sw.epilog, !dbg !11021

sw.default:                                       ; preds = %if.end141
  %115 = load i8, i8* %speed.addr, align 1, !dbg !11022
  %idxprom178 = zext i8 %115 to i64, !dbg !11023
  %arrayidx179 = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom178, !dbg !11023
  %116 = load i32, i32* %arrayidx179, align 4, !dbg !11023
  %call180 = call i64 @new_cost(i32 %116, i32 0), !dbg !11024
  %117 = bitcast %struct.comp_cost* %retval to i64*, !dbg !11024
  store i64 %call180, i64* %117, align 4, !dbg !11024
  br label %return, !dbg !11025

sw.epilog:                                        ; preds = %if.end177, %if.end165
  %118 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11026
  %common = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !11026
  %type181 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11026
  %119 = load %union.tree_node*, %union.tree_node** %type181, align 8, !dbg !11026
  %base182 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !11026
  %120 = bitcast %struct.tree_base* %base182 to i64*, !dbg !11026
  %bf.load183 = load i64, i64* %120, align 8, !dbg !11026
  %bf.clear184 = and i64 %bf.load183, 65535, !dbg !11026
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !11026
  %cmp186 = icmp eq i32 %bf.cast185, 14, !dbg !11026
  br i1 %cmp186, label %cond.true, label %cond.false, !dbg !11026

cond.true:                                        ; preds = %sw.epilog
  %121 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11026
  %common188 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !11026
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !11026
  %122 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !11026
  %call190 = call i32 @vector_type_mode(%union.tree_node* %122), !dbg !11026
  br label %cond.end, !dbg !11026

cond.false:                                       ; preds = %sw.epilog
  %123 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11026
  %common191 = bitcast %union.tree_node* %123 to %struct.tree_common*, !dbg !11026
  %type192 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common191, i32 0, i32 2, !dbg !11026
  %124 = load %union.tree_node*, %union.tree_node** %type192, align 8, !dbg !11026
  %type193 = bitcast %union.tree_node* %124 to %struct.tree_type*, !dbg !11026
  %mode194 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type193, i32 0, i32 6, !dbg !11026
  %bf.load195 = load i32, i32* %mode194, align 4, !dbg !11026
  %bf.lshr = lshr i32 %bf.load195, 16, !dbg !11026
  %bf.clear196 = and i32 %bf.lshr, 255, !dbg !11026
  br label %cond.end, !dbg !11026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond197 = phi i32 [ %call190, %cond.true ], [ %bf.clear196, %cond.false ], !dbg !11026
  store i32 %cond197, i32* %mode, align 4, !dbg !11027
  %125 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !11028
  %base198 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !11028
  %126 = bitcast %struct.tree_base* %base198 to i64*, !dbg !11028
  %bf.load199 = load i64, i64* %126, align 8, !dbg !11028
  %bf.clear200 = and i64 %bf.load199, 65535, !dbg !11028
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !11028
  switch i32 %bf.cast201, label %sw.default228 [
    i32 66, label %sw.bb202
    i32 63, label %sw.bb202
    i32 64, label %sw.bb202
    i32 79, label %sw.bb202
    i32 65, label %sw.bb206
  ], !dbg !11029

sw.bb202:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  %127 = load i32, i32* %mode, align 4, !dbg !11030
  %128 = load i8, i8* %speed.addr, align 1, !dbg !11032
  %call204 = call i32 @add_cost(i32 %127, i8 zeroext %128), !dbg !11033
  %call205 = call i64 @new_cost(i32 %call204, i32 0), !dbg !11034
  %129 = bitcast %struct.comp_cost* %tmp203 to i64*, !dbg !11034
  store i64 %call205, i64* %129, align 4, !dbg !11034
  %130 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11034
  %131 = bitcast %struct.comp_cost* %tmp203 to i8*, !dbg !11034
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %130, i8* align 4 %131, i64 8, i1 false), !dbg !11034
  br label %sw.epilog229, !dbg !11035

sw.bb206:                                         ; preds = %cond.end
  %132 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11036
  %call207 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %132), !dbg !11038
  %tobool208 = icmp ne i8 %call207, 0, !dbg !11038
  br i1 %tobool208, label %if.then209, label %if.else214, !dbg !11039

if.then209:                                       ; preds = %sw.bb206
  %133 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11040
  %call211 = call i64 @int_cst_value(%union.tree_node* %133), !dbg !11041
  %134 = load i32, i32* %mode, align 4, !dbg !11042
  %135 = load i8, i8* %speed.addr, align 1, !dbg !11043
  %call212 = call i32 @multiply_by_cost(i64 %call211, i32 %134, i8 zeroext %135), !dbg !11044
  %call213 = call i64 @new_cost(i32 %call212, i32 0), !dbg !11045
  %136 = bitcast %struct.comp_cost* %tmp210 to i64*, !dbg !11045
  store i64 %call213, i64* %136, align 4, !dbg !11045
  %137 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11045
  %138 = bitcast %struct.comp_cost* %tmp210 to i8*, !dbg !11045
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %137, i8* align 4 %138, i64 8, i1 false), !dbg !11045
  br label %if.end227, !dbg !11046

if.else214:                                       ; preds = %sw.bb206
  %139 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11047
  %call215 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %139), !dbg !11049
  %tobool216 = icmp ne i8 %call215, 0, !dbg !11049
  br i1 %tobool216, label %if.then217, label %if.else222, !dbg !11050

if.then217:                                       ; preds = %if.else214
  %140 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !11051
  %call219 = call i64 @int_cst_value(%union.tree_node* %140), !dbg !11052
  %141 = load i32, i32* %mode, align 4, !dbg !11053
  %142 = load i8, i8* %speed.addr, align 1, !dbg !11054
  %call220 = call i32 @multiply_by_cost(i64 %call219, i32 %141, i8 zeroext %142), !dbg !11055
  %call221 = call i64 @new_cost(i32 %call220, i32 0), !dbg !11056
  %143 = bitcast %struct.comp_cost* %tmp218 to i64*, !dbg !11056
  store i64 %call221, i64* %143, align 4, !dbg !11056
  %144 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11056
  %145 = bitcast %struct.comp_cost* %tmp218 to i8*, !dbg !11056
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %144, i8* align 4 %145, i64 8, i1 false), !dbg !11056
  br label %if.end226, !dbg !11057

if.else222:                                       ; preds = %if.else214
  %146 = load i8, i8* %speed.addr, align 1, !dbg !11058
  %idxprom223 = zext i8 %146 to i64, !dbg !11059
  %arrayidx224 = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom223, !dbg !11059
  %147 = load i32, i32* %arrayidx224, align 4, !dbg !11059
  %call225 = call i64 @new_cost(i32 %147, i32 0), !dbg !11060
  %148 = bitcast %struct.comp_cost* %retval to i64*, !dbg !11060
  store i64 %call225, i64* %148, align 4, !dbg !11060
  br label %return, !dbg !11061

if.end226:                                        ; preds = %if.then217
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %if.then209
  br label %sw.epilog229, !dbg !11062

sw.default228:                                    ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 3515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !11063
  br label %sw.epilog229, !dbg !11064

sw.epilog229:                                     ; preds = %sw.default228, %if.end227, %sw.bb202
  %149 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11065
  %150 = load i64, i64* %149, align 4, !dbg !11065
  %151 = bitcast %struct.comp_cost* %cost0 to i64*, !dbg !11065
  %152 = load i64, i64* %151, align 4, !dbg !11065
  %call231 = call i64 @add_costs(i64 %150, i64 %152), !dbg !11065
  %153 = bitcast %struct.comp_cost* %tmp230 to i64*, !dbg !11065
  store i64 %call231, i64* %153, align 4, !dbg !11065
  %154 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11065
  %155 = bitcast %struct.comp_cost* %tmp230 to i8*, !dbg !11065
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %154, i8* align 4 %155, i64 8, i1 false), !dbg !11065
  %156 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11066
  %157 = load i64, i64* %156, align 4, !dbg !11066
  %158 = bitcast %struct.comp_cost* %cost1 to i64*, !dbg !11066
  %159 = load i64, i64* %158, align 4, !dbg !11066
  %call233 = call i64 @add_costs(i64 %157, i64 %159), !dbg !11066
  %160 = bitcast %struct.comp_cost* %tmp232 to i64*, !dbg !11066
  store i64 %call233, i64* %160, align 4, !dbg !11066
  %161 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11066
  %162 = bitcast %struct.comp_cost* %tmp232 to i8*, !dbg !11066
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %161, i8* align 4 %162, i64 8, i1 false), !dbg !11066
  %cost234 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !11067
  %163 = load i32, i32* %cost234, align 4, !dbg !11067
  %164 = load i8, i8* %speed.addr, align 1, !dbg !11069
  %idxprom235 = zext i8 %164 to i64, !dbg !11070
  %arrayidx236 = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom235, !dbg !11070
  %165 = load i32, i32* %arrayidx236, align 4, !dbg !11070
  %cmp237 = icmp sgt i32 %163, %165, !dbg !11071
  br i1 %cmp237, label %if.then239, label %if.end243, !dbg !11072

if.then239:                                       ; preds = %sw.epilog229
  %166 = load i8, i8* %speed.addr, align 1, !dbg !11073
  %idxprom240 = zext i8 %166 to i64, !dbg !11074
  %arrayidx241 = getelementptr inbounds [2 x i32], [2 x i32]* @target_spill_cost, i64 0, i64 %idxprom240, !dbg !11074
  %167 = load i32, i32* %arrayidx241, align 4, !dbg !11074
  %cost242 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !11075
  store i32 %167, i32* %cost242, align 4, !dbg !11076
  br label %if.end243, !dbg !11077

if.end243:                                        ; preds = %if.then239, %sw.epilog229
  %168 = bitcast %struct.comp_cost* %retval to i8*, !dbg !11078
  %169 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11078
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %168, i8* align 4 %169, i64 8, i1 false), !dbg !11078
  br label %return, !dbg !11079

return:                                           ; preds = %if.end243, %if.else222, %sw.default, %if.end137, %if.then132, %if.then99, %if.then88
  %170 = bitcast %struct.comp_cost* %retval to i64*, !dbg !11080
  %171 = load i64, i64* %170, align 4, !dbg !11080
  ret i64 %171, !dbg !11080
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @produce_memory_decl_rtl(%union.tree_node* %obj, i32* %regno) #0 !dbg !11081 {
entry:
  %obj.addr = alloca %union.tree_node*, align 8
  %regno.addr = alloca i32*, align 8
  %as = alloca i8, align 1
  %address_mode = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %name = alloca i8*, align 8
  store %union.tree_node* %obj, %union.tree_node** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj.addr, metadata !11084, metadata !DIExpression()), !dbg !11085
  store i32* %regno, i32** %regno.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %regno.addr, metadata !11086, metadata !DIExpression()), !dbg !11087
  call void @llvm.dbg.declare(metadata i8* %as, metadata !11088, metadata !DIExpression()), !dbg !11089
  %0 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11090
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !11090
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11090
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11090
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !11090
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !11090
  %bf.load = load i64, i64* %2, align 8, !dbg !11090
  %bf.lshr = lshr i64 %bf.load, 56, !dbg !11090
  %bf.cast = trunc i64 %bf.lshr to i32, !dbg !11090
  %conv = trunc i32 %bf.cast to i8, !dbg !11090
  store i8 %conv, i8* %as, align 1, !dbg !11089
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !11091, metadata !DIExpression()), !dbg !11092
  %3 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !11093
  %4 = load i8, i8* %as, align 1, !dbg !11094
  %call = call i32 %3(i8 zeroext %4), !dbg !11095
  store i32 %call, i32* %address_mode, align 4, !dbg !11092
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !11096, metadata !DIExpression()), !dbg !11097
  %5 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11098
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !11098
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11098

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 2656, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !11098
  br label %cond.end, !dbg !11098

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11098
  %6 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11099
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !11099
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !11099
  %bf.load2 = load i64, i64* %7, align 8, !dbg !11099
  %bf.lshr3 = lshr i64 %bf.load2, 26, !dbg !11099
  %bf.clear = and i64 %bf.lshr3, 1, !dbg !11099
  %bf.cast4 = trunc i64 %bf.clear to i32, !dbg !11099
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !11099
  br i1 %tobool5, label %if.then, label %lor.lhs.false, !dbg !11101

lor.lhs.false:                                    ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11102
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !11102
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11102
  %9 = bitcast i40* %decl_flag_1 to i64*, !dbg !11102
  %bf.load6 = load i64, i64* %9, align 8, !dbg !11102
  %bf.lshr7 = lshr i64 %bf.load6, 25, !dbg !11102
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !11102
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !11102
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !11102
  br i1 %tobool10, label %if.then, label %if.else, !dbg !11103

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  call void @llvm.dbg.declare(metadata i8** %name, metadata !11104, metadata !DIExpression()), !dbg !11106
  %10 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11107
  %call11 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %10), !dbg !11107
  %identifier = bitcast %union.tree_node* %call11 to %struct.tree_identifier*, !dbg !11107
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !11107
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !11107
  %11 = load i8*, i8** %str, align 8, !dbg !11107
  store i8* %11, i8** %name, align 8, !dbg !11106
  %12 = load i32, i32* %address_mode, align 4, !dbg !11108
  %13 = load i8*, i8** %name, align 8, !dbg !11108
  %call12 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 %12, i8* %13), !dbg !11108
  store %struct.rtx_def* %call12, %struct.rtx_def** %x, align 8, !dbg !11109
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11110
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !11110
  %bf.load13 = load i32, i32* %15, align 8, !dbg !11110
  %bf.lshr14 = lshr i32 %bf.load13, 26, !dbg !11110
  %bf.clear15 = and i32 %bf.lshr14, 1, !dbg !11110
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !11110
  br i1 %tobool16, label %cond.true17, label %cond.false18, !dbg !11110

cond.true17:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 2661, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !11110
  br label %cond.end19, !dbg !11110

cond.false18:                                     ; preds = %if.then
  br label %cond.end19, !dbg !11110

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !11110
  %16 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11110
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11110
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !11110
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11110
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !11110
  %rt_tree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**, !dbg !11110
  store %union.tree_node* %16, %union.tree_node** %rt_tree, align 8, !dbg !11110
  %18 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11111
  %decl_common21 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !11111
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 2, !dbg !11111
  %19 = bitcast i40* %mode to i64*, !dbg !11111
  %bf.load22 = load i64, i64* %19, align 8, !dbg !11111
  %bf.clear23 = and i64 %bf.load22, 255, !dbg !11111
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !11111
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11112
  %call25 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast24, %struct.rtx_def* %20), !dbg !11113
  store %struct.rtx_def* %call25, %struct.rtx_def** %x, align 8, !dbg !11114
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11115
  %22 = load i8, i8* %as, align 1, !dbg !11116
  call void @set_mem_addr_space(%struct.rtx_def* %21, i8 zeroext %22), !dbg !11117
  %23 = load void (%union.tree_node*, %struct.rtx_def*, i32)*, void (%union.tree_node*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 51), align 8, !dbg !11118
  %24 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11119
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11120
  call void %23(%union.tree_node* %24, %struct.rtx_def* %25, i32 1), !dbg !11121
  br label %if.end, !dbg !11122

if.else:                                          ; preds = %lor.lhs.false
  %26 = load i32, i32* %address_mode, align 4, !dbg !11123
  %27 = load i32*, i32** %regno.addr, align 8, !dbg !11125
  %28 = load i32, i32* %27, align 4, !dbg !11126
  %inc = add nsw i32 %28, 1, !dbg !11126
  store i32 %inc, i32* %27, align 4, !dbg !11126
  %call26 = call %struct.rtx_def* @gen_raw_REG(i32 %26, i32 %28), !dbg !11127
  store %struct.rtx_def* %call26, %struct.rtx_def** %x, align 8, !dbg !11128
  %29 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !11129
  %decl_common27 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !11129
  %mode28 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common27, i32 0, i32 2, !dbg !11129
  %30 = bitcast i40* %mode28 to i64*, !dbg !11129
  %bf.load29 = load i64, i64* %30, align 8, !dbg !11129
  %bf.clear30 = and i64 %bf.load29, 255, !dbg !11129
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !11129
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11130
  %call32 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast31, %struct.rtx_def* %31), !dbg !11131
  store %struct.rtx_def* %call32, %struct.rtx_def** %x, align 8, !dbg !11132
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11133
  %33 = load i8, i8* %as, align 1, !dbg !11134
  call void @set_mem_addr_space(%struct.rtx_def* %32, i8 zeroext %33), !dbg !11135
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end19
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11136
  ret %struct.rtx_def* %34, !dbg !11137
}

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32, i32, i8*) #2

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare dso_local void @set_mem_addr_space(%struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_after_ip_normal_pos(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !11138 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %sbb = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !11139, metadata !DIExpression()), !dbg !11140
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11141, metadata !DIExpression()), !dbg !11142
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !11143, metadata !DIExpression()), !dbg !11144
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !11145
  %call = call %struct.basic_block_def* @ip_normal_pos(%struct.loop* %0), !dbg !11146
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !11144
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %sbb, metadata !11147, metadata !DIExpression()), !dbg !11148
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11149
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !11150
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %sbb, align 8, !dbg !11148
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11151
  %tobool = icmp ne %struct.basic_block_def* %2, null, !dbg !11151
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11151

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 567, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !11151
  br label %cond.end, !dbg !11151

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11151
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %sbb, align 8, !dbg !11152
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !11154
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 3, !dbg !11155
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !11155
  %cmp = icmp eq %struct.basic_block_def* %3, %5, !dbg !11156
  br i1 %cmp, label %if.then, label %if.end, !dbg !11157

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !11158
  br label %return, !dbg !11158

if.end:                                           ; preds = %cond.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %sbb, align 8, !dbg !11159
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11161
  %cmp2 = icmp ne %struct.basic_block_def* %6, %7, !dbg !11162
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !11163

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !11164
  br label %return, !dbg !11164

if.end4:                                          ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11165
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11166
  %call5 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %9), !dbg !11167
  %cmp6 = icmp eq %union.gimple_statement_d* %8, %call5, !dbg !11168
  %conv = zext i1 %cmp6 to i32, !dbg !11168
  %conv7 = trunc i32 %conv to i8, !dbg !11165
  store i8 %conv7, i8* %retval, align 1, !dbg !11169
  br label %return, !dbg !11169

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !11170
  ret i8 %10, !dbg !11170
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_after_inc_pos(%struct.iv_cand* %cand, %union.gimple_statement_d* %stmt, i8 zeroext %true_if_equal) #0 !dbg !11171 {
entry:
  %retval = alloca i8, align 1
  %cand.addr = alloca %struct.iv_cand*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %true_if_equal.addr = alloca i8, align 1
  %cand_bb = alloca %struct.basic_block_def*, align 8
  %stmt_bb = alloca %struct.basic_block_def*, align 8
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11174, metadata !DIExpression()), !dbg !11175
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11176, metadata !DIExpression()), !dbg !11177
  store i8 %true_if_equal, i8* %true_if_equal.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %true_if_equal.addr, metadata !11178, metadata !DIExpression()), !dbg !11179
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cand_bb, metadata !11180, metadata !DIExpression()), !dbg !11181
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11182
  %incremented_at = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 3, !dbg !11183
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at, align 8, !dbg !11183
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !11184
  store %struct.basic_block_def* %call, %struct.basic_block_def** %cand_bb, align 8, !dbg !11181
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %stmt_bb, metadata !11185, metadata !DIExpression()), !dbg !11186
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11187
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !11188
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %stmt_bb, align 8, !dbg !11186
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %stmt_bb, align 8, !dbg !11189
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %cand_bb, align 8, !dbg !11191
  %call2 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %3, %struct.basic_block_def* %4), !dbg !11192
  %tobool = icmp ne i8 %call2, 0, !dbg !11192
  br i1 %tobool, label %if.end, label %if.then, !dbg !11193

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11194
  br label %return, !dbg !11194

if.end:                                           ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %stmt_bb, align 8, !dbg !11195
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %cand_bb, align 8, !dbg !11197
  %cmp = icmp ne %struct.basic_block_def* %5, %6, !dbg !11198
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !11199

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !11200
  br label %return, !dbg !11200

if.end4:                                          ; preds = %if.end
  %7 = load i8, i8* %true_if_equal.addr, align 1, !dbg !11201
  %conv = zext i8 %7 to i32, !dbg !11201
  %tobool5 = icmp ne i32 %conv, 0, !dbg !11201
  br i1 %tobool5, label %land.lhs.true, label %if.end12, !dbg !11203

land.lhs.true:                                    ; preds = %if.end4
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11204
  %call6 = call i32 @gimple_uid(%union.gimple_statement_d* %8), !dbg !11205
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11206
  %incremented_at7 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %9, i32 0, i32 3, !dbg !11207
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at7, align 8, !dbg !11207
  %call8 = call i32 @gimple_uid(%union.gimple_statement_d* %10), !dbg !11208
  %cmp9 = icmp eq i32 %call6, %call8, !dbg !11209
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !11210

if.then11:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !11211
  br label %return, !dbg !11211

if.end12:                                         ; preds = %land.lhs.true, %if.end4
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11212
  %call13 = call i32 @gimple_uid(%union.gimple_statement_d* %11), !dbg !11213
  %12 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11214
  %incremented_at14 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %12, i32 0, i32 3, !dbg !11215
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at14, align 8, !dbg !11215
  %call15 = call i32 @gimple_uid(%union.gimple_statement_d* %13), !dbg !11216
  %cmp16 = icmp ugt i32 %call13, %call15, !dbg !11217
  %conv17 = zext i1 %cmp16 to i32, !dbg !11217
  %conv18 = trunc i32 %conv17 to i8, !dbg !11213
  store i8 %conv18, i8* %retval, align 1, !dbg !11218
  br label %return, !dbg !11218

return:                                           ; preds = %if.end12, %if.then11, %if.then3, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !11219
  ret i8 %14, !dbg !11219
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_address_cost_data_base_length(%struct.VEC_address_cost_data_base* %vec_) #0 !dbg !11220 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_base*, align 8
  store %struct.VEC_address_cost_data_base* %vec_, %struct.VEC_address_cost_data_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_base** %vec_.addr, metadata !11225, metadata !DIExpression()), !dbg !11226
  %0 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11226
  %tobool = icmp ne %struct.VEC_address_cost_data_base* %0, null, !dbg !11226
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11226

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11226
  %num = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %1, i32 0, i32 0, !dbg !11226
  %2 = load i32, i32* %num, align 8, !dbg !11226
  br label %cond.end, !dbg !11226

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11226
  ret i32 %cond, !dbg !11226
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_address_cost_data_heap_safe_grow_cleared(%struct.VEC_address_cost_data_heap** %vec_, i32 %size_) #0 !dbg !11227 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_address_cost_data_heap** %vec_, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_heap*** %vec_.addr, metadata !11231, metadata !DIExpression()), !dbg !11232
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11233, metadata !DIExpression()), !dbg !11232
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !11234, metadata !DIExpression()), !dbg !11232
  %0 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11232
  %1 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %0, align 8, !dbg !11232
  %tobool = icmp ne %struct.VEC_address_cost_data_heap* %1, null, !dbg !11232
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11232

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11232
  %3 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %2, align 8, !dbg !11232
  %base = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %3, i32 0, i32 0, !dbg !11232
  br label %cond.end, !dbg !11232

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11232

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_address_cost_data_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11232
  %call = call i32 @VEC_address_cost_data_base_length(%struct.VEC_address_cost_data_base* %cond), !dbg !11232
  store i32 %call, i32* %oldsize, align 4, !dbg !11232
  %4 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11232
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11232
  call void @VEC_address_cost_data_heap_safe_grow(%struct.VEC_address_cost_data_heap** %4, i32 %5), !dbg !11232
  %6 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11232
  %7 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %6, align 8, !dbg !11232
  %tobool1 = icmp ne %struct.VEC_address_cost_data_heap* %7, null, !dbg !11232
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11232

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11232
  %9 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %8, align 8, !dbg !11232
  %base3 = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %9, i32 0, i32 0, !dbg !11232
  br label %cond.end5, !dbg !11232

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11232

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_address_cost_data_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11232
  %call7 = call %struct.anon** @VEC_address_cost_data_base_address(%struct.VEC_address_cost_data_base* %cond6), !dbg !11232
  %10 = load i32, i32* %oldsize, align 4, !dbg !11232
  %idxprom = sext i32 %10 to i64, !dbg !11232
  %arrayidx = getelementptr inbounds %struct.anon*, %struct.anon** %call7, i64 %idxprom, !dbg !11232
  %11 = bitcast %struct.anon** %arrayidx to i8*, !dbg !11232
  %12 = load i32, i32* %size_.addr, align 4, !dbg !11232
  %13 = load i32, i32* %oldsize, align 4, !dbg !11232
  %sub = sub nsw i32 %12, %13, !dbg !11232
  %conv = sext i32 %sub to i64, !dbg !11232
  %mul = mul i64 8, %conv, !dbg !11232
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !11232
  ret void, !dbg !11232
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.anon* @VEC_address_cost_data_base_index(%struct.VEC_address_cost_data_base* %vec_, i32 %ix_) #0 !dbg !11235 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_address_cost_data_base* %vec_, %struct.VEC_address_cost_data_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_base** %vec_.addr, metadata !11238, metadata !DIExpression()), !dbg !11239
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11240, metadata !DIExpression()), !dbg !11239
  %0 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11239
  %tobool = icmp ne %struct.VEC_address_cost_data_base* %0, null, !dbg !11239
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11239

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !11239
  %2 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11239
  %num = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %2, i32 0, i32 0, !dbg !11239
  %3 = load i32, i32* %num, align 8, !dbg !11239
  %cmp = icmp ult i32 %1, %3, !dbg !11239
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !11241
  %land.ext = zext i1 %4 to i32, !dbg !11239
  %5 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11239
  %vec = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %5, i32 0, i32 2, !dbg !11239
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !11239
  %idxprom = zext i32 %6 to i64, !dbg !11239
  %arrayidx = getelementptr inbounds [1 x %struct.anon*], [1 x %struct.anon*]* %vec, i64 0, i64 %idxprom, !dbg !11239
  %7 = load %struct.anon*, %struct.anon** %arrayidx, align 8, !dbg !11239
  ret %struct.anon* %7, !dbg !11239
}

declare dso_local i8* @ggc_alloc_string(i8*, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local i32 @address_cost(%struct.rtx_def*, i32, i8 zeroext, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.anon* @VEC_address_cost_data_base_replace(%struct.VEC_address_cost_data_base* %vec_, i32 %ix_, %struct.anon* %obj_) #0 !dbg !11242 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.anon*, align 8
  %old_obj_ = alloca %struct.anon*, align 8
  store %struct.VEC_address_cost_data_base* %vec_, %struct.VEC_address_cost_data_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_base** %vec_.addr, metadata !11246, metadata !DIExpression()), !dbg !11247
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11248, metadata !DIExpression()), !dbg !11247
  store %struct.anon* %obj_, %struct.anon** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.anon** %obj_.addr, metadata !11249, metadata !DIExpression()), !dbg !11247
  call void @llvm.dbg.declare(metadata %struct.anon** %old_obj_, metadata !11250, metadata !DIExpression()), !dbg !11247
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !11247
  %1 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11247
  %num = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %1, i32 0, i32 0, !dbg !11247
  %2 = load i32, i32* %num, align 8, !dbg !11247
  %cmp = icmp ult i32 %0, %2, !dbg !11247
  %conv = zext i1 %cmp to i32, !dbg !11247
  %3 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11247
  %vec = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %3, i32 0, i32 2, !dbg !11247
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !11247
  %idxprom = zext i32 %4 to i64, !dbg !11247
  %arrayidx = getelementptr inbounds [1 x %struct.anon*], [1 x %struct.anon*]* %vec, i64 0, i64 %idxprom, !dbg !11247
  %5 = load %struct.anon*, %struct.anon** %arrayidx, align 8, !dbg !11247
  store %struct.anon* %5, %struct.anon** %old_obj_, align 8, !dbg !11247
  %6 = load %struct.anon*, %struct.anon** %obj_.addr, align 8, !dbg !11247
  %7 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11247
  %vec1 = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %7, i32 0, i32 2, !dbg !11247
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !11247
  %idxprom2 = zext i32 %8 to i64, !dbg !11247
  %arrayidx3 = getelementptr inbounds [1 x %struct.anon*], [1 x %struct.anon*]* %vec1, i64 0, i64 %idxprom2, !dbg !11247
  store %struct.anon* %6, %struct.anon** %arrayidx3, align 8, !dbg !11247
  %9 = load %struct.anon*, %struct.anon** %old_obj_, align 8, !dbg !11247
  ret %struct.anon* %9, !dbg !11247
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_address_cost_data_heap_safe_grow(%struct.VEC_address_cost_data_heap** %vec_, i32 %size_) #0 !dbg !11251 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_address_cost_data_heap** %vec_, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_heap*** %vec_.addr, metadata !11252, metadata !DIExpression()), !dbg !11253
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11254, metadata !DIExpression()), !dbg !11253
  %0 = load i32, i32* %size_.addr, align 4, !dbg !11253
  %cmp = icmp sge i32 %0, 0, !dbg !11253
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11253

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %2 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %1, align 8, !dbg !11253
  %tobool = icmp ne %struct.VEC_address_cost_data_heap* %2, null, !dbg !11253
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11253

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %4 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %3, align 8, !dbg !11253
  %base = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %4, i32 0, i32 0, !dbg !11253
  br label %cond.end, !dbg !11253

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !11253

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_address_cost_data_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11253
  %call = call i32 @VEC_address_cost_data_base_length(%struct.VEC_address_cost_data_base* %cond), !dbg !11253
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11253
  %cmp1 = icmp ule i32 %call, %5, !dbg !11253
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !11255
  %land.ext = zext i1 %6 to i32, !dbg !11253
  %7 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %8 = load i32, i32* %size_.addr, align 4, !dbg !11253
  %9 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %10 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %9, align 8, !dbg !11253
  %tobool2 = icmp ne %struct.VEC_address_cost_data_heap* %10, null, !dbg !11253
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !11253

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %12 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %11, align 8, !dbg !11253
  %tobool4 = icmp ne %struct.VEC_address_cost_data_heap* %12, null, !dbg !11253
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !11253

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %14 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %13, align 8, !dbg !11253
  %base6 = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %14, i32 0, i32 0, !dbg !11253
  br label %cond.end8, !dbg !11253

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !11253

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_address_cost_data_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !11253
  %num = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %cond9, i32 0, i32 0, !dbg !11253
  %15 = load i32, i32* %num, align 8, !dbg !11253
  br label %cond.end11, !dbg !11253

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !11253

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !11253
  %sub = sub nsw i32 %8, %cond12, !dbg !11253
  %call13 = call i32 @VEC_address_cost_data_heap_reserve_exact(%struct.VEC_address_cost_data_heap** %7, i32 %sub), !dbg !11253
  %16 = load i32, i32* %size_.addr, align 4, !dbg !11253
  %17 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %18 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %17, align 8, !dbg !11253
  %tobool14 = icmp ne %struct.VEC_address_cost_data_heap* %18, null, !dbg !11253
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11253

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11253
  %20 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %19, align 8, !dbg !11253
  %base16 = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %20, i32 0, i32 0, !dbg !11253
  br label %cond.end18, !dbg !11253

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !11253

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_address_cost_data_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11253
  %num20 = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %cond19, i32 0, i32 0, !dbg !11253
  store i32 %16, i32* %num20, align 8, !dbg !11253
  ret void, !dbg !11253
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.anon** @VEC_address_cost_data_base_address(%struct.VEC_address_cost_data_base* %vec_) #0 !dbg !11256 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_base*, align 8
  store %struct.VEC_address_cost_data_base* %vec_, %struct.VEC_address_cost_data_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_base** %vec_.addr, metadata !11260, metadata !DIExpression()), !dbg !11261
  %0 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11261
  %tobool = icmp ne %struct.VEC_address_cost_data_base* %0, null, !dbg !11261
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11261

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11261
  %vec = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %1, i32 0, i32 2, !dbg !11261
  %arraydecay = getelementptr inbounds [1 x %struct.anon*], [1 x %struct.anon*]* %vec, i64 0, i64 0, !dbg !11261
  br label %cond.end, !dbg !11261

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11261

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.anon** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11261
  ret %struct.anon** %cond, !dbg !11261
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_address_cost_data_heap_reserve_exact(%struct.VEC_address_cost_data_heap** %vec_, i32 %alloc_) #0 !dbg !11262 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_address_cost_data_heap** %vec_, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_heap*** %vec_.addr, metadata !11265, metadata !DIExpression()), !dbg !11266
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11267, metadata !DIExpression()), !dbg !11266
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11268, metadata !DIExpression()), !dbg !11266
  %0 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11266
  %1 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %0, align 8, !dbg !11266
  %tobool = icmp ne %struct.VEC_address_cost_data_heap* %1, null, !dbg !11266
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11266

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11266
  %3 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %2, align 8, !dbg !11266
  %base = getelementptr inbounds %struct.VEC_address_cost_data_heap, %struct.VEC_address_cost_data_heap* %3, i32 0, i32 0, !dbg !11266
  br label %cond.end, !dbg !11266

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_address_cost_data_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11266
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11266
  %call = call i32 @VEC_address_cost_data_base_space(%struct.VEC_address_cost_data_base* %cond, i32 %4), !dbg !11266
  %tobool1 = icmp ne i32 %call, 0, !dbg !11266
  %lnot = xor i1 %tobool1, true, !dbg !11266
  %lnot.ext = zext i1 %lnot to i32, !dbg !11266
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11266
  %5 = load i32, i32* %extend, align 4, !dbg !11269
  %tobool2 = icmp ne i32 %5, 0, !dbg !11269
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11266

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11269
  %7 = load %struct.VEC_address_cost_data_heap*, %struct.VEC_address_cost_data_heap** %6, align 8, !dbg !11269
  %8 = bitcast %struct.VEC_address_cost_data_heap* %7 to i8*, !dbg !11269
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11269
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !11269
  %10 = bitcast i8* %call3 to %struct.VEC_address_cost_data_heap*, !dbg !11269
  %11 = load %struct.VEC_address_cost_data_heap**, %struct.VEC_address_cost_data_heap*** %vec_.addr, align 8, !dbg !11269
  store %struct.VEC_address_cost_data_heap* %10, %struct.VEC_address_cost_data_heap** %11, align 8, !dbg !11269
  br label %if.end, !dbg !11269

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11266
  ret i32 %12, !dbg !11266
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_address_cost_data_base_space(%struct.VEC_address_cost_data_base* %vec_, i32 %alloc_) #0 !dbg !11271 {
entry:
  %vec_.addr = alloca %struct.VEC_address_cost_data_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_address_cost_data_base* %vec_, %struct.VEC_address_cost_data_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_address_cost_data_base** %vec_.addr, metadata !11274, metadata !DIExpression()), !dbg !11275
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11276, metadata !DIExpression()), !dbg !11275
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11275
  %cmp = icmp sge i32 %0, 0, !dbg !11275
  %conv = zext i1 %cmp to i32, !dbg !11275
  %1 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11275
  %tobool = icmp ne %struct.VEC_address_cost_data_base* %1, null, !dbg !11275
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11275

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11275
  %alloc = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %2, i32 0, i32 1, !dbg !11275
  %3 = load i32, i32* %alloc, align 4, !dbg !11275
  %4 = load %struct.VEC_address_cost_data_base*, %struct.VEC_address_cost_data_base** %vec_.addr, align 8, !dbg !11275
  %num = getelementptr inbounds %struct.VEC_address_cost_data_base, %struct.VEC_address_cost_data_base* %4, i32 0, i32 0, !dbg !11275
  %5 = load i32, i32* %num, align 8, !dbg !11275
  %sub = sub i32 %3, %5, !dbg !11275
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11275
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11275
  %conv2 = zext i1 %cmp1 to i32, !dbg !11275
  br label %cond.end, !dbg !11275

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11275
  %tobool3 = icmp ne i32 %7, 0, !dbg !11275
  %lnot = xor i1 %tobool3, true, !dbg !11275
  %lnot.ext = zext i1 %lnot to i32, !dbg !11275
  br label %cond.end, !dbg !11275

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11275
  ret i32 %cond, !dbg !11275
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @get_computation_aff(%struct.loop* %loop, %struct.iv_use* %use, %struct.iv_cand* %cand, %union.gimple_statement_d* %at, %struct.affine_tree_combination* %aff) #0 !dbg !11277 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %at.addr = alloca %union.gimple_statement_d*, align 8
  %aff.addr = alloca %struct.affine_tree_combination*, align 8
  %ubase = alloca %union.tree_node*, align 8
  %ustep = alloca %union.tree_node*, align 8
  %cbase = alloca %union.tree_node*, align 8
  %cstep = alloca %union.tree_node*, align 8
  %cstep_common = alloca %union.tree_node*, align 8
  %utype = alloca %union.tree_node*, align 8
  %ctype = alloca %union.tree_node*, align 8
  %common_type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %uutype = alloca %union.tree_node*, align 8
  %cbase_aff = alloca %struct.affine_tree_combination, align 8
  %var_aff = alloca %struct.affine_tree_combination, align 8
  %rat = alloca %struct.double_int, align 8
  %cstep_aff = alloca %struct.affine_tree_combination, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !11281, metadata !DIExpression()), !dbg !11282
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !11283, metadata !DIExpression()), !dbg !11284
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11285, metadata !DIExpression()), !dbg !11286
  store %union.gimple_statement_d* %at, %union.gimple_statement_d** %at.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at.addr, metadata !11287, metadata !DIExpression()), !dbg !11288
  store %struct.affine_tree_combination* %aff, %struct.affine_tree_combination** %aff.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination** %aff.addr, metadata !11289, metadata !DIExpression()), !dbg !11290
  call void @llvm.dbg.declare(metadata %union.tree_node** %ubase, metadata !11291, metadata !DIExpression()), !dbg !11292
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11293
  %iv = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 2, !dbg !11294
  %1 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !11294
  %base = getelementptr inbounds %struct.iv, %struct.iv* %1, i32 0, i32 0, !dbg !11295
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11295
  store %union.tree_node* %2, %union.tree_node** %ubase, align 8, !dbg !11292
  call void @llvm.dbg.declare(metadata %union.tree_node** %ustep, metadata !11296, metadata !DIExpression()), !dbg !11297
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11298
  %iv1 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %3, i32 0, i32 2, !dbg !11299
  %4 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !11299
  %step = getelementptr inbounds %struct.iv, %struct.iv* %4, i32 0, i32 2, !dbg !11300
  %5 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !11300
  store %union.tree_node* %5, %union.tree_node** %ustep, align 8, !dbg !11297
  call void @llvm.dbg.declare(metadata %union.tree_node** %cbase, metadata !11301, metadata !DIExpression()), !dbg !11302
  %6 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11303
  %iv2 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %6, i32 0, i32 6, !dbg !11304
  %7 = load %struct.iv*, %struct.iv** %iv2, align 8, !dbg !11304
  %base3 = getelementptr inbounds %struct.iv, %struct.iv* %7, i32 0, i32 0, !dbg !11305
  %8 = load %union.tree_node*, %union.tree_node** %base3, align 8, !dbg !11305
  store %union.tree_node* %8, %union.tree_node** %cbase, align 8, !dbg !11302
  call void @llvm.dbg.declare(metadata %union.tree_node** %cstep, metadata !11306, metadata !DIExpression()), !dbg !11307
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11308
  %iv4 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %9, i32 0, i32 6, !dbg !11309
  %10 = load %struct.iv*, %struct.iv** %iv4, align 8, !dbg !11309
  %step5 = getelementptr inbounds %struct.iv, %struct.iv* %10, i32 0, i32 2, !dbg !11310
  %11 = load %union.tree_node*, %union.tree_node** %step5, align 8, !dbg !11310
  store %union.tree_node* %11, %union.tree_node** %cstep, align 8, !dbg !11307
  call void @llvm.dbg.declare(metadata %union.tree_node** %cstep_common, metadata !11311, metadata !DIExpression()), !dbg !11312
  call void @llvm.dbg.declare(metadata %union.tree_node** %utype, metadata !11313, metadata !DIExpression()), !dbg !11314
  %12 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !11315
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !11315
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11315
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11315
  store %union.tree_node* %13, %union.tree_node** %utype, align 8, !dbg !11314
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctype, metadata !11316, metadata !DIExpression()), !dbg !11317
  %14 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !11318
  %common6 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !11318
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !11318
  %15 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !11318
  store %union.tree_node* %15, %union.tree_node** %ctype, align 8, !dbg !11317
  call void @llvm.dbg.declare(metadata %union.tree_node** %common_type, metadata !11319, metadata !DIExpression()), !dbg !11320
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !11321, metadata !DIExpression()), !dbg !11322
  call void @llvm.dbg.declare(metadata %union.tree_node** %uutype, metadata !11323, metadata !DIExpression()), !dbg !11324
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %cbase_aff, metadata !11325, metadata !DIExpression()), !dbg !11326
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %var_aff, metadata !11327, metadata !DIExpression()), !dbg !11328
  call void @llvm.dbg.declare(metadata %struct.double_int* %rat, metadata !11329, metadata !DIExpression()), !dbg !11330
  %16 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !11331
  %type8 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !11331
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !11331
  %bf.load = load i32, i32* %precision, align 4, !dbg !11331
  %bf.clear = and i32 %bf.load, 1023, !dbg !11331
  %17 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !11333
  %type9 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !11333
  %precision10 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i32 0, i32 6, !dbg !11333
  %bf.load11 = load i32, i32* %precision10, align 4, !dbg !11333
  %bf.clear12 = and i32 %bf.load11, 1023, !dbg !11333
  %cmp = icmp sgt i32 %bf.clear, %bf.clear12, !dbg !11334
  br i1 %cmp, label %if.then, label %if.end, !dbg !11335

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11336
  br label %return, !dbg !11336

if.end:                                           ; preds = %entry
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !11338
  %19 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11339
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !11340
  %call = call %union.tree_node* @var_at_stmt(%struct.loop* %18, %struct.iv_cand* %19, %union.gimple_statement_d* %20), !dbg !11341
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !11342
  %21 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !11343
  %call13 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %21), !dbg !11344
  store %union.tree_node* %call13, %union.tree_node** %uutype, align 8, !dbg !11345
  %22 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !11346
  %type14 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !11346
  %precision15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 6, !dbg !11346
  %bf.load16 = load i32, i32* %precision15, align 4, !dbg !11346
  %bf.clear17 = and i32 %bf.load16, 1023, !dbg !11346
  %23 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !11348
  %type18 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !11348
  %precision19 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 6, !dbg !11348
  %bf.load20 = load i32, i32* %precision19, align 4, !dbg !11348
  %bf.clear21 = and i32 %bf.load20, 1023, !dbg !11348
  %cmp22 = icmp slt i32 %bf.clear17, %bf.clear21, !dbg !11349
  br i1 %cmp22, label %if.then23, label %if.end27, !dbg !11350

if.then23:                                        ; preds = %if.end
  %24 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11351
  %25 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !11351
  %call24 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %24, %union.tree_node* %25), !dbg !11351
  store %union.tree_node* %call24, %union.tree_node** %cstep, align 8, !dbg !11353
  %26 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11354
  %27 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !11354
  %call25 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %26, %union.tree_node* %27), !dbg !11354
  store %union.tree_node* %call25, %union.tree_node** %cbase, align 8, !dbg !11355
  %28 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11356
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11356
  %call26 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %28, %union.tree_node* %29), !dbg !11356
  store %union.tree_node* %call26, %union.tree_node** %var, align 8, !dbg !11357
  br label %if.end27, !dbg !11358

if.end27:                                         ; preds = %if.then23, %if.end
  %30 = load %union.tree_node*, %union.tree_node** %ustep, align 8, !dbg !11359
  %31 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !11361
  %call28 = call zeroext i8 @constant_multiple_of(%union.tree_node* %30, %union.tree_node* %31, %struct.double_int* %rat), !dbg !11362
  %tobool = icmp ne i8 %call28, 0, !dbg !11362
  br i1 %tobool, label %if.end30, label %if.then29, !dbg !11363

if.then29:                                        ; preds = %if.end27
  store i8 0, i8* %retval, align 1, !dbg !11364
  br label %return, !dbg !11364

if.end30:                                         ; preds = %if.end27
  %call31 = call %union.tree_node* @determine_common_wider_type(%union.tree_node** %ubase, %union.tree_node** %cbase), !dbg !11365
  store %union.tree_node* %call31, %union.tree_node** %common_type, align 8, !dbg !11366
  %32 = load %union.tree_node*, %union.tree_node** %ubase, align 8, !dbg !11367
  %33 = load %union.tree_node*, %union.tree_node** %common_type, align 8, !dbg !11368
  %34 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %aff.addr, align 8, !dbg !11369
  call void @tree_to_aff_combination(%union.tree_node* %32, %union.tree_node* %33, %struct.affine_tree_combination* %34), !dbg !11370
  %35 = load %union.tree_node*, %union.tree_node** %cbase, align 8, !dbg !11371
  %36 = load %union.tree_node*, %union.tree_node** %common_type, align 8, !dbg !11372
  call void @tree_to_aff_combination(%union.tree_node* %35, %union.tree_node* %36, %struct.affine_tree_combination* %cbase_aff), !dbg !11373
  %37 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11374
  %38 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11375
  call void @tree_to_aff_combination(%union.tree_node* %37, %union.tree_node* %38, %struct.affine_tree_combination* %var_aff), !dbg !11376
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !11377
  %40 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11379
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !11380
  %call32 = call zeroext i8 @stmt_after_increment(%struct.loop* %39, %struct.iv_cand* %40, %union.gimple_statement_d* %41), !dbg !11381
  %tobool33 = icmp ne i8 %call32, 0, !dbg !11381
  br i1 %tobool33, label %if.then34, label %if.end39, !dbg !11382

if.then34:                                        ; preds = %if.end30
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %cstep_aff, metadata !11383, metadata !DIExpression()), !dbg !11385
  %42 = load %union.tree_node*, %union.tree_node** %common_type, align 8, !dbg !11386
  %43 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11388
  %cmp35 = icmp ne %union.tree_node* %42, %43, !dbg !11389
  br i1 %cmp35, label %if.then36, label %if.else, !dbg !11390

if.then36:                                        ; preds = %if.then34
  %44 = load %union.tree_node*, %union.tree_node** %common_type, align 8, !dbg !11391
  %45 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !11391
  %call37 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %44, %union.tree_node* %45), !dbg !11391
  store %union.tree_node* %call37, %union.tree_node** %cstep_common, align 8, !dbg !11392
  br label %if.end38, !dbg !11393

if.else:                                          ; preds = %if.then34
  %46 = load %union.tree_node*, %union.tree_node** %cstep, align 8, !dbg !11394
  store %union.tree_node* %46, %union.tree_node** %cstep_common, align 8, !dbg !11395
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then36
  %47 = load %union.tree_node*, %union.tree_node** %cstep_common, align 8, !dbg !11396
  %48 = load %union.tree_node*, %union.tree_node** %common_type, align 8, !dbg !11397
  call void @tree_to_aff_combination(%union.tree_node* %47, %union.tree_node* %48, %struct.affine_tree_combination* %cstep_aff), !dbg !11398
  call void @aff_combination_add(%struct.affine_tree_combination* %cbase_aff, %struct.affine_tree_combination* %cstep_aff), !dbg !11399
  br label %if.end39, !dbg !11400

if.end39:                                         ; preds = %if.end38, %if.end30
  %49 = bitcast %struct.double_int* %rat to { i64, i64 }*, !dbg !11401
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 0, !dbg !11401
  %51 = load i64, i64* %50, align 8, !dbg !11401
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 1, !dbg !11401
  %53 = load i64, i64* %52, align 8, !dbg !11401
  %call40 = call { i64, i64 } @double_int_neg(i64 %51, i64 %53), !dbg !11401
  %54 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !11401
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 0, !dbg !11401
  %56 = extractvalue { i64, i64 } %call40, 0, !dbg !11401
  store i64 %56, i64* %55, align 8, !dbg !11401
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 1, !dbg !11401
  %58 = extractvalue { i64, i64 } %call40, 1, !dbg !11401
  store i64 %58, i64* %57, align 8, !dbg !11401
  %59 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !11402
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 0, !dbg !11402
  %61 = load i64, i64* %60, align 8, !dbg !11402
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %59, i32 0, i32 1, !dbg !11402
  %63 = load i64, i64* %62, align 8, !dbg !11402
  call void @aff_combination_scale(%struct.affine_tree_combination* %cbase_aff, i64 %61, i64 %63), !dbg !11402
  %64 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %aff.addr, align 8, !dbg !11403
  call void @aff_combination_add(%struct.affine_tree_combination* %64, %struct.affine_tree_combination* %cbase_aff), !dbg !11404
  %65 = load %union.tree_node*, %union.tree_node** %common_type, align 8, !dbg !11405
  %66 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11407
  %cmp41 = icmp ne %union.tree_node* %65, %66, !dbg !11408
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !11409

if.then42:                                        ; preds = %if.end39
  %67 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %aff.addr, align 8, !dbg !11410
  %68 = load %union.tree_node*, %union.tree_node** %uutype, align 8, !dbg !11411
  call void @aff_combination_convert(%struct.affine_tree_combination* %67, %union.tree_node* %68), !dbg !11412
  br label %if.end43, !dbg !11412

if.end43:                                         ; preds = %if.then42, %if.end39
  %69 = bitcast %struct.double_int* %rat to { i64, i64 }*, !dbg !11413
  %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %69, i32 0, i32 0, !dbg !11413
  %71 = load i64, i64* %70, align 8, !dbg !11413
  %72 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %69, i32 0, i32 1, !dbg !11413
  %73 = load i64, i64* %72, align 8, !dbg !11413
  call void @aff_combination_scale(%struct.affine_tree_combination* %var_aff, i64 %71, i64 %73), !dbg !11413
  %74 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %aff.addr, align 8, !dbg !11414
  call void @aff_combination_add(%struct.affine_tree_combination* %74, %struct.affine_tree_combination* %var_aff), !dbg !11415
  store i8 1, i8* %retval, align 1, !dbg !11416
  br label %return, !dbg !11416

return:                                           ; preds = %if.end43, %if.then29, %if.then
  %75 = load i8, i8* %retval, align 1, !dbg !11417
  ret i8 %75, !dbg !11417
}

declare dso_local void @unshare_aff_combination(%struct.affine_tree_combination*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @var_at_stmt(%struct.loop* %loop, %struct.iv_cand* %cand, %union.gimple_statement_d* %stmt) #0 !dbg !11418 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !11421, metadata !DIExpression()), !dbg !11422
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11423, metadata !DIExpression()), !dbg !11424
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11425, metadata !DIExpression()), !dbg !11426
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !11427
  %1 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11429
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11430
  %call = call zeroext i8 @stmt_after_increment(%struct.loop* %0, %struct.iv_cand* %1, %union.gimple_statement_d* %2), !dbg !11431
  %tobool = icmp ne i8 %call, 0, !dbg !11431
  br i1 %tobool, label %if.then, label %if.else, !dbg !11432

if.then:                                          ; preds = %entry
  %3 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11433
  %var_after = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %3, i32 0, i32 5, !dbg !11434
  %4 = load %union.tree_node*, %union.tree_node** %var_after, align 8, !dbg !11434
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !11435
  br label %return, !dbg !11435

if.else:                                          ; preds = %entry
  %5 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11436
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %5, i32 0, i32 4, !dbg !11437
  %6 = load %union.tree_node*, %union.tree_node** %var_before, align 8, !dbg !11437
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !11438
  br label %return, !dbg !11438

return:                                           ; preds = %if.else, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11439
  ret %union.tree_node* %7, !dbg !11439
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @determine_common_wider_type(%union.tree_node** %a, %union.tree_node** %b) #0 !dbg !11440 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %a.addr = alloca %union.tree_node**, align 8
  %b.addr = alloca %union.tree_node**, align 8
  %wider_type = alloca %union.tree_node*, align 8
  %suba = alloca %union.tree_node*, align 8
  %subb = alloca %union.tree_node*, align 8
  %atype = alloca %union.tree_node*, align 8
  store %union.tree_node** %a, %union.tree_node*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %a.addr, metadata !11443, metadata !DIExpression()), !dbg !11444
  store %union.tree_node** %b, %union.tree_node*** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %b.addr, metadata !11445, metadata !DIExpression()), !dbg !11446
  call void @llvm.dbg.declare(metadata %union.tree_node** %wider_type, metadata !11447, metadata !DIExpression()), !dbg !11448
  store %union.tree_node* null, %union.tree_node** %wider_type, align 8, !dbg !11448
  call void @llvm.dbg.declare(metadata %union.tree_node** %suba, metadata !11449, metadata !DIExpression()), !dbg !11450
  call void @llvm.dbg.declare(metadata %union.tree_node** %subb, metadata !11451, metadata !DIExpression()), !dbg !11452
  call void @llvm.dbg.declare(metadata %union.tree_node** %atype, metadata !11453, metadata !DIExpression()), !dbg !11454
  %0 = load %union.tree_node**, %union.tree_node*** %a.addr, align 8, !dbg !11455
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !11455
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !11455
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11455
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11455
  store %union.tree_node* %2, %union.tree_node** %atype, align 8, !dbg !11454
  %3 = load %union.tree_node**, %union.tree_node*** %a.addr, align 8, !dbg !11456
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !11456
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11456
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !11456
  %bf.load = load i64, i64* %5, align 8, !dbg !11456
  %bf.clear = and i64 %bf.load, 65535, !dbg !11456
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11456
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !11456
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11456

lor.lhs.false:                                    ; preds = %entry
  %6 = load %union.tree_node**, %union.tree_node*** %a.addr, align 8, !dbg !11456
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !11456
  %base1 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !11456
  %8 = bitcast %struct.tree_base* %base1 to i64*, !dbg !11456
  %bf.load2 = load i64, i64* %8, align 8, !dbg !11456
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !11456
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !11456
  %cmp5 = icmp eq i32 %bf.cast4, 113, !dbg !11456
  br i1 %cmp5, label %if.then, label %if.else, !dbg !11458

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load %union.tree_node**, %union.tree_node*** %a.addr, align 8, !dbg !11459
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !11459
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !11459
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11459
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11459
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11459
  store %union.tree_node* %11, %union.tree_node** %suba, align 8, !dbg !11461
  %12 = load %union.tree_node*, %union.tree_node** %suba, align 8, !dbg !11462
  %common6 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !11462
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !11462
  %13 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !11462
  store %union.tree_node* %13, %union.tree_node** %wider_type, align 8, !dbg !11463
  %14 = load %union.tree_node*, %union.tree_node** %wider_type, align 8, !dbg !11464
  %type8 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !11464
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !11464
  %bf.load9 = load i32, i32* %precision, align 4, !dbg !11464
  %bf.clear10 = and i32 %bf.load9, 1023, !dbg !11464
  %15 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !11466
  %type11 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !11466
  %precision12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 6, !dbg !11466
  %bf.load13 = load i32, i32* %precision12, align 4, !dbg !11466
  %bf.clear14 = and i32 %bf.load13, 1023, !dbg !11466
  %cmp15 = icmp slt i32 %bf.clear10, %bf.clear14, !dbg !11467
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !11468

if.then16:                                        ; preds = %if.then
  %16 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !11469
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !11470
  br label %return, !dbg !11470

if.end:                                           ; preds = %if.then
  br label %if.end17, !dbg !11471

if.else:                                          ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !11472
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !11473
  br label %return, !dbg !11473

if.end17:                                         ; preds = %if.end
  %18 = load %union.tree_node**, %union.tree_node*** %b.addr, align 8, !dbg !11474
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !11474
  %base18 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !11474
  %20 = bitcast %struct.tree_base* %base18 to i64*, !dbg !11474
  %bf.load19 = load i64, i64* %20, align 8, !dbg !11474
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !11474
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !11474
  %cmp22 = icmp eq i32 %bf.cast21, 116, !dbg !11474
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23, !dbg !11474

lor.lhs.false23:                                  ; preds = %if.end17
  %21 = load %union.tree_node**, %union.tree_node*** %b.addr, align 8, !dbg !11474
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !11474
  %base24 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !11474
  %23 = bitcast %struct.tree_base* %base24 to i64*, !dbg !11474
  %bf.load25 = load i64, i64* %23, align 8, !dbg !11474
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !11474
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !11474
  %cmp28 = icmp eq i32 %bf.cast27, 113, !dbg !11474
  br i1 %cmp28, label %if.then29, label %if.else46, !dbg !11476

if.then29:                                        ; preds = %lor.lhs.false23, %if.end17
  %24 = load %union.tree_node**, %union.tree_node*** %b.addr, align 8, !dbg !11477
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !11477
  %exp30 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !11477
  %operands31 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp30, i32 0, i32 3, !dbg !11477
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands31, i64 0, i64 0, !dbg !11477
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !11477
  store %union.tree_node* %26, %union.tree_node** %subb, align 8, !dbg !11479
  %27 = load %union.tree_node*, %union.tree_node** %wider_type, align 8, !dbg !11480
  %type33 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !11480
  %precision34 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 6, !dbg !11480
  %bf.load35 = load i32, i32* %precision34, align 4, !dbg !11480
  %bf.clear36 = and i32 %bf.load35, 1023, !dbg !11480
  %28 = load %union.tree_node*, %union.tree_node** %subb, align 8, !dbg !11482
  %common37 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !11482
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !11482
  %29 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !11482
  %type39 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !11482
  %precision40 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type39, i32 0, i32 6, !dbg !11482
  %bf.load41 = load i32, i32* %precision40, align 4, !dbg !11482
  %bf.clear42 = and i32 %bf.load41, 1023, !dbg !11482
  %cmp43 = icmp ne i32 %bf.clear36, %bf.clear42, !dbg !11483
  br i1 %cmp43, label %if.then44, label %if.end45, !dbg !11484

if.then44:                                        ; preds = %if.then29
  %30 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !11485
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !11486
  br label %return, !dbg !11486

if.end45:                                         ; preds = %if.then29
  br label %if.end47, !dbg !11487

if.else46:                                        ; preds = %lor.lhs.false23
  %31 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !11488
  store %union.tree_node* %31, %union.tree_node** %retval, align 8, !dbg !11489
  br label %return, !dbg !11489

if.end47:                                         ; preds = %if.end45
  %32 = load %union.tree_node*, %union.tree_node** %suba, align 8, !dbg !11490
  %33 = load %union.tree_node**, %union.tree_node*** %a.addr, align 8, !dbg !11491
  store %union.tree_node* %32, %union.tree_node** %33, align 8, !dbg !11492
  %34 = load %union.tree_node*, %union.tree_node** %subb, align 8, !dbg !11493
  %35 = load %union.tree_node**, %union.tree_node*** %b.addr, align 8, !dbg !11494
  store %union.tree_node* %34, %union.tree_node** %35, align 8, !dbg !11495
  %36 = load %union.tree_node*, %union.tree_node** %wider_type, align 8, !dbg !11496
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !11497
  br label %return, !dbg !11497

return:                                           ; preds = %if.end47, %if.else46, %if.then44, %if.else, %if.then16
  %37 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11498
  ret %union.tree_node* %37, !dbg !11498
}

declare dso_local void @aff_combination_convert(%struct.affine_tree_combination*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @prepare_decl_rtl(%union.tree_node** %expr_p, i32* %ws, i8* %data) #0 !dbg !11499 {
entry:
  %expr_p.addr = alloca %union.tree_node**, align 8
  %ws.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %obj = alloca %union.tree_node*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %regno = alloca i32*, align 8
  store %union.tree_node** %expr_p, %union.tree_node*** %expr_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %expr_p.addr, metadata !11500, metadata !DIExpression()), !dbg !11501
  store i32* %ws, i32** %ws.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ws.addr, metadata !11502, metadata !DIExpression()), !dbg !11503
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !11504, metadata !DIExpression()), !dbg !11505
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj, metadata !11506, metadata !DIExpression()), !dbg !11507
  store %union.tree_node* null, %union.tree_node** %obj, align 8, !dbg !11507
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !11508, metadata !DIExpression()), !dbg !11509
  store %struct.rtx_def* null, %struct.rtx_def** %x, align 8, !dbg !11509
  call void @llvm.dbg.declare(metadata i32** %regno, metadata !11510, metadata !DIExpression()), !dbg !11511
  %0 = load i8*, i8** %data.addr, align 8, !dbg !11512
  %1 = bitcast i8* %0 to i32*, !dbg !11513
  store i32* %1, i32** %regno, align 8, !dbg !11511
  %2 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11514
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !11514
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !11514
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !11514
  %bf.load = load i64, i64* %4, align 8, !dbg !11514
  %bf.clear = and i64 %bf.load, 65535, !dbg !11514
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11514
  switch i32 %bf.cast, label %sw.default [
    i32 121, label %sw.bb
    i32 141, label %sw.bb21
    i32 32, label %sw.bb42
    i32 34, label %sw.bb42
    i32 36, label %sw.bb42
  ], !dbg !11515

sw.bb:                                            ; preds = %entry
  %5 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11516
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !11516
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !11516
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11516
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11516
  store %union.tree_node** %arrayidx, %union.tree_node*** %expr_p.addr, align 8, !dbg !11519
  br label %for.cond, !dbg !11520

for.cond:                                         ; preds = %for.inc, %sw.bb
  %7 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11521
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !11523
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %8), !dbg !11524
  %tobool = icmp ne i8 %call, 0, !dbg !11525
  br i1 %tobool, label %for.body, label %for.end, !dbg !11525

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !11526

for.inc:                                          ; preds = %for.body
  %9 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11527
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !11527
  %exp1 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !11527
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !11527
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 0, !dbg !11527
  store %union.tree_node** %arrayidx3, %union.tree_node*** %expr_p.addr, align 8, !dbg !11528
  br label %for.cond, !dbg !11529, !llvm.loop !11530

for.end:                                          ; preds = %for.cond
  %11 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11532
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !11533
  store %union.tree_node* %12, %union.tree_node** %obj, align 8, !dbg !11534
  %13 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11535
  %base4 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !11535
  %14 = bitcast %struct.tree_base* %base4 to i64*, !dbg !11535
  %bf.load5 = load i64, i64* %14, align 8, !dbg !11535
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !11535
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !11535
  %idxprom = sext i32 %bf.cast7 to i64, !dbg !11535
  %arrayidx8 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11535
  %15 = load i32, i32* %arrayidx8, align 4, !dbg !11535
  %cmp = icmp eq i32 %15, 3, !dbg !11535
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11537

land.lhs.true:                                    ; preds = %for.end
  %16 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11538
  %base9 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !11538
  %17 = bitcast %struct.tree_base* %base9 to i64*, !dbg !11538
  %bf.load10 = load i64, i64* %17, align 8, !dbg !11538
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !11538
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !11538
  %idxprom13 = zext i32 %bf.cast12 to i64, !dbg !11538
  %arrayidx14 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom13, !dbg !11538
  %arrayidx15 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx14, i64 0, i64 11, !dbg !11538
  %18 = load i8, i8* %arrayidx15, align 1, !dbg !11538
  %conv = zext i8 %18 to i32, !dbg !11538
  %tobool16 = icmp ne i32 %conv, 0, !dbg !11538
  br i1 %tobool16, label %land.lhs.true17, label %if.then, !dbg !11538

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11538
  %decl_with_rtl = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !11538
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !11538
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !11538
  %cmp18 = icmp ne %struct.rtx_def* %20, null, !dbg !11538
  br i1 %cmp18, label %if.end, label %if.then, !dbg !11539

if.then:                                          ; preds = %land.lhs.true17, %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11540
  %22 = load i32*, i32** %regno, align 8, !dbg !11541
  %call20 = call %struct.rtx_def* @produce_memory_decl_rtl(%union.tree_node* %21, i32* %22), !dbg !11542
  store %struct.rtx_def* %call20, %struct.rtx_def** %x, align 8, !dbg !11543
  br label %if.end, !dbg !11544

if.end:                                           ; preds = %if.then, %land.lhs.true17, %for.end
  br label %sw.epilog, !dbg !11545

sw.bb21:                                          ; preds = %entry
  %23 = load i32*, i32** %ws.addr, align 8, !dbg !11546
  store i32 0, i32* %23, align 4, !dbg !11547
  %24 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11548
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !11548
  %ssa_name = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !11548
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !11548
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11548
  store %union.tree_node* %26, %union.tree_node** %obj, align 8, !dbg !11549
  %27 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11550
  %base22 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !11550
  %28 = bitcast %struct.tree_base* %base22 to i64*, !dbg !11550
  %bf.load23 = load i64, i64* %28, align 8, !dbg !11550
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !11550
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !11550
  %idxprom26 = zext i32 %bf.cast25 to i64, !dbg !11550
  %arrayidx27 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom26, !dbg !11550
  %arrayidx28 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx27, i64 0, i64 11, !dbg !11550
  %29 = load i8, i8* %arrayidx28, align 1, !dbg !11550
  %conv29 = zext i8 %29 to i32, !dbg !11550
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !11550
  br i1 %tobool30, label %land.lhs.true31, label %if.then36, !dbg !11550

land.lhs.true31:                                  ; preds = %sw.bb21
  %30 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11550
  %decl_with_rtl32 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_rtl*, !dbg !11550
  %rtl33 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl32, i32 0, i32 1, !dbg !11550
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl33, align 8, !dbg !11550
  %cmp34 = icmp ne %struct.rtx_def* %31, null, !dbg !11550
  br i1 %cmp34, label %if.end41, label %if.then36, !dbg !11552

if.then36:                                        ; preds = %land.lhs.true31, %sw.bb21
  %32 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11553
  %decl_common = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !11553
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11553
  %33 = bitcast i40* %mode to i64*, !dbg !11553
  %bf.load37 = load i64, i64* %33, align 8, !dbg !11553
  %bf.clear38 = and i64 %bf.load37, 255, !dbg !11553
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !11553
  %34 = load i32*, i32** %regno, align 8, !dbg !11554
  %35 = load i32, i32* %34, align 4, !dbg !11555
  %inc = add nsw i32 %35, 1, !dbg !11555
  store i32 %inc, i32* %34, align 4, !dbg !11555
  %call40 = call %struct.rtx_def* @gen_raw_REG(i32 %bf.cast39, i32 %35), !dbg !11556
  store %struct.rtx_def* %call40, %struct.rtx_def** %x, align 8, !dbg !11557
  br label %if.end41, !dbg !11558

if.end41:                                         ; preds = %if.then36, %land.lhs.true31
  br label %sw.epilog, !dbg !11559

sw.bb42:                                          ; preds = %entry, %entry, %entry
  %36 = load i32*, i32** %ws.addr, align 8, !dbg !11560
  store i32 0, i32* %36, align 4, !dbg !11561
  %37 = load %union.tree_node**, %union.tree_node*** %expr_p.addr, align 8, !dbg !11562
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !11563
  store %union.tree_node* %38, %union.tree_node** %obj, align 8, !dbg !11564
  %39 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11565
  %base43 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !11565
  %40 = bitcast %struct.tree_base* %base43 to i64*, !dbg !11565
  %bf.load44 = load i64, i64* %40, align 8, !dbg !11565
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !11565
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !11565
  %idxprom47 = zext i32 %bf.cast46 to i64, !dbg !11565
  %arrayidx48 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom47, !dbg !11565
  %arrayidx49 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx48, i64 0, i64 11, !dbg !11565
  %41 = load i8, i8* %arrayidx49, align 1, !dbg !11565
  %conv50 = zext i8 %41 to i32, !dbg !11565
  %tobool51 = icmp ne i32 %conv50, 0, !dbg !11565
  br i1 %tobool51, label %land.lhs.true52, label %if.end58, !dbg !11565

land.lhs.true52:                                  ; preds = %sw.bb42
  %42 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11565
  %decl_with_rtl53 = bitcast %union.tree_node* %42 to %struct.tree_decl_with_rtl*, !dbg !11565
  %rtl54 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl53, i32 0, i32 1, !dbg !11565
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtl54, align 8, !dbg !11565
  %cmp55 = icmp ne %struct.rtx_def* %43, null, !dbg !11565
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !11567

if.then57:                                        ; preds = %land.lhs.true52
  br label %sw.epilog, !dbg !11568

if.end58:                                         ; preds = %land.lhs.true52, %sw.bb42
  %44 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11569
  %decl_common59 = bitcast %union.tree_node* %44 to %struct.tree_decl_common*, !dbg !11569
  %mode60 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common59, i32 0, i32 2, !dbg !11569
  %45 = bitcast i40* %mode60 to i64*, !dbg !11569
  %bf.load61 = load i64, i64* %45, align 8, !dbg !11569
  %bf.clear62 = and i64 %bf.load61, 255, !dbg !11569
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !11569
  %cmp64 = icmp eq i32 %bf.cast63, 1, !dbg !11571
  br i1 %cmp64, label %if.then66, label %if.else, !dbg !11572

if.then66:                                        ; preds = %if.end58
  %46 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11573
  %47 = load i32*, i32** %regno, align 8, !dbg !11574
  %call67 = call %struct.rtx_def* @produce_memory_decl_rtl(%union.tree_node* %46, i32* %47), !dbg !11575
  store %struct.rtx_def* %call67, %struct.rtx_def** %x, align 8, !dbg !11576
  br label %if.end75, !dbg !11577

if.else:                                          ; preds = %if.end58
  %48 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11578
  %decl_common68 = bitcast %union.tree_node* %48 to %struct.tree_decl_common*, !dbg !11578
  %mode69 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common68, i32 0, i32 2, !dbg !11578
  %49 = bitcast i40* %mode69 to i64*, !dbg !11578
  %bf.load70 = load i64, i64* %49, align 8, !dbg !11578
  %bf.clear71 = and i64 %bf.load70, 255, !dbg !11578
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !11578
  %50 = load i32*, i32** %regno, align 8, !dbg !11579
  %51 = load i32, i32* %50, align 4, !dbg !11580
  %inc73 = add nsw i32 %51, 1, !dbg !11580
  store i32 %inc73, i32* %50, align 4, !dbg !11580
  %call74 = call %struct.rtx_def* @gen_raw_REG(i32 %bf.cast72, i32 %51), !dbg !11581
  store %struct.rtx_def* %call74, %struct.rtx_def** %x, align 8, !dbg !11582
  br label %if.end75

if.end75:                                         ; preds = %if.else, %if.then66
  br label %sw.epilog, !dbg !11583

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !11584

sw.epilog:                                        ; preds = %sw.default, %if.end75, %if.then57, %if.end41, %if.end
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11585
  %tobool76 = icmp ne %struct.rtx_def* %52, null, !dbg !11585
  br i1 %tobool76, label %if.then77, label %if.end79, !dbg !11587

if.then77:                                        ; preds = %sw.epilog
  %53 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11588
  %call78 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @decl_rtl_to_reset, %union.tree_node* %53), !dbg !11588
  %54 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !11590
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11590
  call void @set_decl_rtl(%union.tree_node* %54, %struct.rtx_def* %55), !dbg !11590
  br label %if.end79, !dbg !11591

if.end79:                                         ; preds = %if.then77, %sw.epilog
  ret %union.tree_node* null, !dbg !11592
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !11593 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !11596, metadata !DIExpression()), !dbg !11597
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !11598, metadata !DIExpression()), !dbg !11599
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11600, metadata !DIExpression()), !dbg !11601
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !11602, metadata !DIExpression()), !dbg !11603
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11604
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11605
  %2 = load i32, i32* %mode.addr, align 4, !dbg !11606
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !11607
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !11608
  ret %struct.rtx_def* %call, !dbg !11609
}

declare dso_local void @default_rtl_profile() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !11610 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !11614, metadata !DIExpression()), !dbg !11615
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !11616, metadata !DIExpression()), !dbg !11615
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11615
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !11615
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11615
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !11615
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !11615
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11615

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11615
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !11615
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !11615
  br label %cond.end, !dbg !11615

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11615

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11615
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !11615
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !11615
  ret %union.tree_node** %call1, !dbg !11615
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !11617 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !11620, metadata !DIExpression()), !dbg !11621
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11622, metadata !DIExpression()), !dbg !11621
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11623, metadata !DIExpression()), !dbg !11621
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11621
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !11621
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !11621
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11621

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11621
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !11621
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !11621
  br label %cond.end, !dbg !11621

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11621

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11621
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11621
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !11621
  %tobool1 = icmp ne i32 %call, 0, !dbg !11621
  %lnot = xor i1 %tobool1, true, !dbg !11621
  %lnot.ext = zext i1 %lnot to i32, !dbg !11621
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11621
  %5 = load i32, i32* %extend, align 4, !dbg !11624
  %tobool2 = icmp ne i32 %5, 0, !dbg !11624
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11621

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11624
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !11624
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !11624
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11624
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !11624
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !11624
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !11624
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !11624
  br label %if.end, !dbg !11624

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11621
  ret i32 %12, !dbg !11621
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !11626 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !11630, metadata !DIExpression()), !dbg !11631
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !11632, metadata !DIExpression()), !dbg !11631
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !11633, metadata !DIExpression()), !dbg !11631
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11631
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !11631
  %1 = load i32, i32* %num, align 8, !dbg !11631
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11631
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !11631
  %3 = load i32, i32* %alloc, align 4, !dbg !11631
  %cmp = icmp ult i32 %1, %3, !dbg !11631
  %conv = zext i1 %cmp to i32, !dbg !11631
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11631
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !11631
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11631
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !11631
  %6 = load i32, i32* %num1, align 8, !dbg !11631
  %inc = add i32 %6, 1, !dbg !11631
  store i32 %inc, i32* %num1, align 8, !dbg !11631
  %idxprom = zext i32 %6 to i64, !dbg !11631
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !11631
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !11631
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !11631
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !11631
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !11631
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !11631
  ret %union.tree_node** %9, !dbg !11631
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !11634 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !11637, metadata !DIExpression()), !dbg !11638
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11639, metadata !DIExpression()), !dbg !11638
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11638
  %cmp = icmp sge i32 %0, 0, !dbg !11638
  %conv = zext i1 %cmp to i32, !dbg !11638
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11638
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !11638
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11638

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11638
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !11638
  %3 = load i32, i32* %alloc, align 4, !dbg !11638
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !11638
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !11638
  %5 = load i32, i32* %num, align 8, !dbg !11638
  %sub = sub i32 %3, %5, !dbg !11638
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11638
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11638
  %conv2 = zext i1 %cmp1 to i32, !dbg !11638
  br label %cond.end, !dbg !11638

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11638
  %tobool3 = icmp ne i32 %7, 0, !dbg !11638
  %lnot = xor i1 %tobool3, true, !dbg !11638
  %lnot.ext = zext i1 %lnot to i32, !dbg !11638
  br label %cond.end, !dbg !11638

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11638
  ret i32 %cond, !dbg !11638
}

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @determine_iv_cost(%struct.ivopts_data* %data, %struct.iv_cand* %cand) #0 !dbg !11640 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %cost_base = alloca %struct.comp_cost, align 4
  %cost = alloca i32, align 4
  %cost_step = alloca i32, align 4
  %base = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !11643, metadata !DIExpression()), !dbg !11644
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11645, metadata !DIExpression()), !dbg !11646
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost_base, metadata !11647, metadata !DIExpression()), !dbg !11648
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !11649, metadata !DIExpression()), !dbg !11650
  call void @llvm.dbg.declare(metadata i32* %cost_step, metadata !11651, metadata !DIExpression()), !dbg !11652
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !11653, metadata !DIExpression()), !dbg !11654
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11655
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 6, !dbg !11657
  %1 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !11657
  %tobool = icmp ne %struct.iv* %1, null, !dbg !11655
  br i1 %tobool, label %if.end, label %if.then, !dbg !11658

if.then:                                          ; preds = %entry
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11659
  %cost1 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %2, i32 0, i32 7, !dbg !11661
  store i32 0, i32* %cost1, align 8, !dbg !11662
  br label %return, !dbg !11663

if.end:                                           ; preds = %entry
  %3 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11664
  %iv2 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %3, i32 0, i32 6, !dbg !11665
  %4 = load %struct.iv*, %struct.iv** %iv2, align 8, !dbg !11665
  %base3 = getelementptr inbounds %struct.iv, %struct.iv* %4, i32 0, i32 0, !dbg !11666
  %5 = load %union.tree_node*, %union.tree_node** %base3, align 8, !dbg !11666
  store %union.tree_node* %5, %union.tree_node** %base, align 8, !dbg !11667
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11668
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11669
  %call = call i64 @force_var_cost(%struct.ivopts_data* %6, %union.tree_node* %7, %struct.bitmap_head_def** null), !dbg !11670
  %8 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !11670
  store i64 %call, i64* %8, align 4, !dbg !11670
  %9 = bitcast %struct.comp_cost* %cost_base to i8*, !dbg !11670
  %10 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !11670
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 8, i1 false), !dbg !11670
  %11 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11671
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !11671
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11671
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11671
  %base4 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !11671
  %13 = bitcast %struct.tree_base* %base4 to i64*, !dbg !11671
  %bf.load = load i64, i64* %13, align 8, !dbg !11671
  %bf.clear = and i64 %bf.load, 65535, !dbg !11671
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11671
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !11671
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11671

cond.true:                                        ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11671
  %common5 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !11671
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !11671
  %15 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !11671
  %call7 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !11671
  br label %cond.end, !dbg !11671

cond.false:                                       ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !11671
  %common8 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !11671
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !11671
  %17 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !11671
  %type10 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !11671
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type10, i32 0, i32 6, !dbg !11671
  %bf.load11 = load i32, i32* %mode, align 4, !dbg !11671
  %bf.lshr = lshr i32 %bf.load11, 16, !dbg !11671
  %bf.clear12 = and i32 %bf.lshr, 255, !dbg !11671
  br label %cond.end, !dbg !11671

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call7, %cond.true ], [ %bf.clear12, %cond.false ], !dbg !11671
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11672
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %18, i32 0, i32 11, !dbg !11673
  %19 = load i8, i8* %speed, align 1, !dbg !11673
  %call13 = call i32 @add_cost(i32 %cond, i8 zeroext %19), !dbg !11674
  store i32 %call13, i32* %cost_step, align 4, !dbg !11675
  %20 = load i32, i32* %cost_step, align 4, !dbg !11676
  %cost14 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost_base, i32 0, i32 0, !dbg !11677
  %21 = load i32, i32* %cost14, align 4, !dbg !11677
  %div = sdiv i32 %21, 5, !dbg !11678
  %add = add i32 %20, %div, !dbg !11679
  store i32 %add, i32* %cost, align 4, !dbg !11680
  %22 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11681
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %22, i32 0, i32 2, !dbg !11683
  %23 = load i32, i32* %pos, align 8, !dbg !11683
  %cmp15 = icmp ne i32 %23, 4, !dbg !11684
  br i1 %cmp15, label %if.then21, label %lor.lhs.false, !dbg !11685

lor.lhs.false:                                    ; preds = %cond.end
  %24 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11686
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %24, i32 0, i32 4, !dbg !11686
  %25 = load %union.tree_node*, %union.tree_node** %var_before, align 8, !dbg !11686
  %ssa_name = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !11686
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !11686
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11686
  %decl_common = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !11686
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11686
  %27 = bitcast i40* %artificial_flag to i64*, !dbg !11686
  %bf.load16 = load i64, i64* %27, align 8, !dbg !11686
  %bf.lshr17 = lshr i64 %bf.load16, 12, !dbg !11686
  %bf.clear18 = and i64 %bf.lshr17, 1, !dbg !11686
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !11686
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !11686
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !11687

if.then21:                                        ; preds = %lor.lhs.false, %cond.end
  %28 = load i32, i32* %cost, align 4, !dbg !11688
  %inc = add i32 %28, 1, !dbg !11688
  store i32 %inc, i32* %cost, align 4, !dbg !11688
  br label %if.end22, !dbg !11689

if.end22:                                         ; preds = %if.then21, %lor.lhs.false
  %29 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11690
  %pos23 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %29, i32 0, i32 2, !dbg !11692
  %30 = load i32, i32* %pos23, align 8, !dbg !11692
  %cmp24 = icmp eq i32 %30, 1, !dbg !11693
  br i1 %cmp24, label %land.lhs.true, label %if.end30, !dbg !11694

land.lhs.true:                                    ; preds = %if.end22
  %31 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11695
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %31, i32 0, i32 0, !dbg !11696
  %32 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !11696
  %call25 = call %struct.basic_block_def* @ip_end_pos(%struct.loop* %32), !dbg !11697
  %call26 = call zeroext i8 @empty_block_p(%struct.basic_block_def* %call25), !dbg !11698
  %conv = zext i8 %call26 to i32, !dbg !11698
  %tobool27 = icmp ne i32 %conv, 0, !dbg !11698
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !11699

if.then28:                                        ; preds = %land.lhs.true
  %33 = load i32, i32* %cost, align 4, !dbg !11700
  %inc29 = add i32 %33, 1, !dbg !11700
  store i32 %inc29, i32* %cost, align 4, !dbg !11700
  br label %if.end30, !dbg !11701

if.end30:                                         ; preds = %if.then28, %land.lhs.true, %if.end22
  %34 = load i32, i32* %cost, align 4, !dbg !11702
  %35 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11703
  %cost31 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %35, i32 0, i32 7, !dbg !11704
  store i32 %34, i32* %cost31, align 8, !dbg !11705
  %36 = load i32, i32* %cost_step, align 4, !dbg !11706
  %37 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11707
  %cost_step32 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %37, i32 0, i32 8, !dbg !11708
  store i32 %36, i32* %cost_step32, align 4, !dbg !11709
  br label %return, !dbg !11710

return:                                           ; preds = %if.end30, %if.then
  ret void, !dbg !11710
}

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_use_cost_map(%struct.ivopts_data* %data) #0 !dbg !11711 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %s = alloca i32, align 4
  %j = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !11712, metadata !DIExpression()), !dbg !11713
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11714, metadata !DIExpression()), !dbg !11715
  call void @llvm.dbg.declare(metadata i32* %size, metadata !11716, metadata !DIExpression()), !dbg !11717
  call void @llvm.dbg.declare(metadata i32* %s, metadata !11718, metadata !DIExpression()), !dbg !11719
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11720, metadata !DIExpression()), !dbg !11721
  store i32 0, i32* %i, align 4, !dbg !11722
  br label %for.cond, !dbg !11724

for.cond:                                         ; preds = %for.inc13, %entry
  %0 = load i32, i32* %i, align 4, !dbg !11725
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11727
  %call = call i32 @n_iv_uses(%struct.ivopts_data* %1), !dbg !11728
  %cmp = icmp ult i32 %0, %call, !dbg !11729
  br i1 %cmp, label %for.body, label %for.end15, !dbg !11730

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !11731, metadata !DIExpression()), !dbg !11733
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11734
  %3 = load i32, i32* %i, align 4, !dbg !11735
  %call1 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %2, i32 %3), !dbg !11736
  store %struct.iv_use* %call1, %struct.iv_use** %use, align 8, !dbg !11733
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !11737, metadata !DIExpression()), !dbg !11738
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11739
  %consider_all_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 10, !dbg !11741
  %5 = load i8, i8* %consider_all_candidates, align 4, !dbg !11741
  %tobool = icmp ne i8 %5, 0, !dbg !11739
  br i1 %tobool, label %if.then, label %if.else, !dbg !11742

if.then:                                          ; preds = %for.body
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11743
  %call2 = call i32 @n_iv_cands(%struct.ivopts_data* %6), !dbg !11744
  store i32 %call2, i32* %size, align 4, !dbg !11745
  br label %if.end, !dbg !11746

if.else:                                          ; preds = %for.body
  store i32 0, i32* %s, align 4, !dbg !11747
  %7 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !11749
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %7, i32 0, i32 5, !dbg !11749
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !11749
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %8, i32 0, i32* %j), !dbg !11749
  br label %for.cond3, !dbg !11749

for.cond3:                                        ; preds = %for.inc, %if.else
  %call4 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !11751
  %tobool5 = icmp ne i8 %call4, 0, !dbg !11749
  br i1 %tobool5, label %for.body6, label %for.end, !dbg !11749

for.body6:                                        ; preds = %for.cond3
  %9 = load i32, i32* %s, align 4, !dbg !11753
  %inc = add i32 %9, 1, !dbg !11753
  store i32 %inc, i32* %s, align 4, !dbg !11753
  br label %for.inc, !dbg !11755

for.inc:                                          ; preds = %for.body6
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !11751
  br label %for.cond3, !dbg !11751, !llvm.loop !11756

for.end:                                          ; preds = %for.cond3
  store i32 1, i32* %size, align 4, !dbg !11758
  br label %for.cond7, !dbg !11760

for.cond7:                                        ; preds = %for.inc10, %for.end
  %10 = load i32, i32* %size, align 4, !dbg !11761
  %11 = load i32, i32* %s, align 4, !dbg !11763
  %cmp8 = icmp ult i32 %10, %11, !dbg !11764
  br i1 %cmp8, label %for.body9, label %for.end11, !dbg !11765

for.body9:                                        ; preds = %for.cond7
  br label %for.inc10, !dbg !11766

for.inc10:                                        ; preds = %for.body9
  %12 = load i32, i32* %size, align 4, !dbg !11767
  %shl = shl i32 %12, 1, !dbg !11767
  store i32 %shl, i32* %size, align 4, !dbg !11767
  br label %for.cond7, !dbg !11768, !llvm.loop !11769

for.end11:                                        ; preds = %for.cond7
  br label %if.end

if.end:                                           ; preds = %for.end11, %if.then
  %13 = load i32, i32* %size, align 4, !dbg !11771
  %14 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !11772
  %n_map_members = getelementptr inbounds %struct.iv_use, %struct.iv_use* %14, i32 0, i32 6, !dbg !11773
  store i32 %13, i32* %n_map_members, align 8, !dbg !11774
  %15 = load i32, i32* %size, align 4, !dbg !11775
  %conv = zext i32 %15 to i64, !dbg !11775
  %call12 = call i8* @xcalloc(i64 %conv, i64 32), !dbg !11775
  %16 = bitcast i8* %call12 to %struct.cost_pair*, !dbg !11775
  %17 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !11776
  %cost_map = getelementptr inbounds %struct.iv_use, %struct.iv_use* %17, i32 0, i32 7, !dbg !11777
  store %struct.cost_pair* %16, %struct.cost_pair** %cost_map, align 8, !dbg !11778
  br label %for.inc13, !dbg !11779

for.inc13:                                        ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !11780
  %inc14 = add i32 %18, 1, !dbg !11780
  store i32 %inc14, i32* %i, align 4, !dbg !11780
  br label %for.cond, !dbg !11781, !llvm.loop !11782

for.end15:                                        ; preds = %for.cond
  ret void, !dbg !11784
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @determine_use_iv_cost(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !11785 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !11786, metadata !DIExpression()), !dbg !11787
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !11788, metadata !DIExpression()), !dbg !11789
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11790, metadata !DIExpression()), !dbg !11791
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11792
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 1, !dbg !11793
  %1 = load i32, i32* %type, align 4, !dbg !11793
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
  ], !dbg !11794

sw.bb:                                            ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11795
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11797
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11798
  %call = call zeroext i8 @determine_use_iv_cost_generic(%struct.ivopts_data* %2, %struct.iv_use* %3, %struct.iv_cand* %4), !dbg !11799
  store i8 %call, i8* %retval, align 1, !dbg !11800
  br label %return, !dbg !11800

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11801
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11802
  %7 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11803
  %call2 = call zeroext i8 @determine_use_iv_cost_address(%struct.ivopts_data* %5, %struct.iv_use* %6, %struct.iv_cand* %7), !dbg !11804
  store i8 %call2, i8* %retval, align 1, !dbg !11805
  br label %return, !dbg !11805

sw.bb3:                                           ; preds = %entry
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11806
  %9 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11807
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11808
  %call4 = call zeroext i8 @determine_use_iv_cost_condition(%struct.ivopts_data* %8, %struct.iv_use* %9, %struct.iv_cand* %10), !dbg !11809
  store i8 %call4, i8* %retval, align 1, !dbg !11810
  br label %return, !dbg !11810

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 4182, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !11811
  br label %sw.epilog, !dbg !11812

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !11813
  br label %return, !dbg !11813

return:                                           ; preds = %sw.epilog, %sw.bb3, %sw.bb1, %sw.bb
  %11 = load i8, i8* %retval, align 1, !dbg !11814
  ret i8 %11, !dbg !11814
}

declare dso_local zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @determine_use_iv_cost_generic(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !11815 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %depends_on = alloca %struct.bitmap_head_def*, align 8
  %cost = alloca %struct.comp_cost, align 4
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !11816, metadata !DIExpression()), !dbg !11817
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !11818, metadata !DIExpression()), !dbg !11819
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11820, metadata !DIExpression()), !dbg !11821
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on, metadata !11822, metadata !DIExpression()), !dbg !11823
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !11824, metadata !DIExpression()), !dbg !11825
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11826
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 2, !dbg !11828
  %1 = load i32, i32* %pos, align 8, !dbg !11828
  %cmp = icmp eq i32 %1, 4, !dbg !11829
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11830

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11831
  %incremented_at = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %2, i32 0, i32 3, !dbg !11832
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at, align 8, !dbg !11832
  %4 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11833
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %4, i32 0, i32 3, !dbg !11834
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11834
  %cmp1 = icmp eq %union.gimple_statement_d* %3, %5, !dbg !11835
  br i1 %cmp1, label %if.then, label %if.end, !dbg !11836

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11837
  %7 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11839
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11840
  %9 = load i64, i64* bitcast (%struct.comp_cost* @zero_cost to i64*), align 4, !dbg !11841
  call void @set_use_iv_cost(%struct.ivopts_data* %6, %struct.iv_use* %7, %struct.iv_cand* %8, i64 %9, %struct.bitmap_head_def* null, %union.tree_node* null), !dbg !11841
  store i8 1, i8* %retval, align 1, !dbg !11842
  br label %return, !dbg !11842

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11843
  %11 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11844
  %12 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11845
  %call = call i64 @get_computation_cost(%struct.ivopts_data* %10, %struct.iv_use* %11, %struct.iv_cand* %12, i8 zeroext 0, %struct.bitmap_head_def** %depends_on, i8* null), !dbg !11846
  %13 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !11846
  store i64 %call, i64* %13, align 4, !dbg !11846
  %14 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11846
  %15 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !11846
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 8, i1 false), !dbg !11846
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11847
  %17 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11848
  %18 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11849
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !11850
  %20 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11851
  %21 = load i64, i64* %20, align 4, !dbg !11851
  call void @set_use_iv_cost(%struct.ivopts_data* %16, %struct.iv_use* %17, %struct.iv_cand* %18, i64 %21, %struct.bitmap_head_def* %19, %union.tree_node* null), !dbg !11851
  %22 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11852
  %23 = load i64, i64* %22, align 4, !dbg !11852
  %call2 = call zeroext i8 @infinite_cost_p(i64 %23), !dbg !11852
  %tobool = icmp ne i8 %call2, 0, !dbg !11853
  %lnot = xor i1 %tobool, true, !dbg !11853
  %lnot.ext = zext i1 %lnot to i32, !dbg !11853
  %conv = trunc i32 %lnot.ext to i8, !dbg !11853
  store i8 %conv, i8* %retval, align 1, !dbg !11854
  br label %return, !dbg !11854

return:                                           ; preds = %if.end, %if.then
  %24 = load i8, i8* %retval, align 1, !dbg !11855
  ret i8 %24, !dbg !11855
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @determine_use_iv_cost_address(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !11856 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %depends_on = alloca %struct.bitmap_head_def*, align 8
  %can_autoinc = alloca i8, align 1
  %cost = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !11857, metadata !DIExpression()), !dbg !11858
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !11859, metadata !DIExpression()), !dbg !11860
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11861, metadata !DIExpression()), !dbg !11862
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on, metadata !11863, metadata !DIExpression()), !dbg !11864
  call void @llvm.dbg.declare(metadata i8* %can_autoinc, metadata !11865, metadata !DIExpression()), !dbg !11866
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !11867, metadata !DIExpression()), !dbg !11868
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11869
  %1 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11870
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11871
  %call = call i64 @get_computation_cost(%struct.ivopts_data* %0, %struct.iv_use* %1, %struct.iv_cand* %2, i8 zeroext 1, %struct.bitmap_head_def** %depends_on, i8* %can_autoinc), !dbg !11872
  %3 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11872
  store i64 %call, i64* %3, align 4, !dbg !11872
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11873
  %ainc_use = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %4, i32 0, i32 9, !dbg !11875
  %5 = load %struct.iv_use*, %struct.iv_use** %ainc_use, align 8, !dbg !11875
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11876
  %cmp = icmp eq %struct.iv_use* %5, %6, !dbg !11877
  br i1 %cmp, label %if.then, label %if.end8, !dbg !11878

if.then:                                          ; preds = %entry
  %7 = load i8, i8* %can_autoinc, align 1, !dbg !11879
  %tobool = icmp ne i8 %7, 0, !dbg !11879
  br i1 %tobool, label %if.then1, label %if.else, !dbg !11882

if.then1:                                         ; preds = %if.then
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11883
  %cost_step = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %8, i32 0, i32 8, !dbg !11884
  %9 = load i32, i32* %cost_step, align 4, !dbg !11884
  %cost2 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !11885
  %10 = load i32, i32* %cost2, align 4, !dbg !11886
  %sub = sub i32 %10, %9, !dbg !11886
  store i32 %sub, i32* %cost2, align 4, !dbg !11886
  br label %if.end7, !dbg !11887

if.else:                                          ; preds = %if.then
  %11 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11888
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %11, i32 0, i32 2, !dbg !11890
  %12 = load i32, i32* %pos, align 8, !dbg !11890
  %cmp3 = icmp eq i32 %12, 3, !dbg !11891
  br i1 %cmp3, label %if.then6, label %lor.lhs.false, !dbg !11892

lor.lhs.false:                                    ; preds = %if.else
  %13 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11893
  %pos4 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %13, i32 0, i32 2, !dbg !11894
  %14 = load i32, i32* %pos4, align 8, !dbg !11894
  %cmp5 = icmp eq i32 %14, 2, !dbg !11895
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !11896

if.then6:                                         ; preds = %lor.lhs.false, %if.else
  %15 = bitcast %struct.comp_cost* %cost to i8*, !dbg !11897
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !11897
  br label %if.end, !dbg !11898

if.end:                                           ; preds = %if.then6, %lor.lhs.false
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then1
  br label %if.end8, !dbg !11899

if.end8:                                          ; preds = %if.end7, %entry
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11900
  %17 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11901
  %18 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11902
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !11903
  %20 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11904
  %21 = load i64, i64* %20, align 4, !dbg !11904
  call void @set_use_iv_cost(%struct.ivopts_data* %16, %struct.iv_use* %17, %struct.iv_cand* %18, i64 %21, %struct.bitmap_head_def* %19, %union.tree_node* null), !dbg !11904
  %22 = bitcast %struct.comp_cost* %cost to i64*, !dbg !11905
  %23 = load i64, i64* %22, align 4, !dbg !11905
  %call9 = call zeroext i8 @infinite_cost_p(i64 %23), !dbg !11905
  %tobool10 = icmp ne i8 %call9, 0, !dbg !11906
  %lnot = xor i1 %tobool10, true, !dbg !11906
  %lnot.ext = zext i1 %lnot to i32, !dbg !11906
  %conv = trunc i32 %lnot.ext to i8, !dbg !11906
  ret i8 %conv, !dbg !11907
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @determine_use_iv_cost_condition(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !11908 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %bound = alloca %union.tree_node*, align 8
  %cmp_iv = alloca %struct.iv*, align 8
  %depends_on_elim = alloca %struct.bitmap_head_def*, align 8
  %depends_on_express = alloca %struct.bitmap_head_def*, align 8
  %depends_on = alloca %struct.bitmap_head_def*, align 8
  %elim_cost = alloca %struct.comp_cost, align 4
  %express_cost = alloca %struct.comp_cost, align 4
  %cost = alloca %struct.comp_cost, align 4
  %ok = alloca i8, align 1
  %control_var = alloca %union.tree_node**, align 8
  %bound_cst = alloca %union.tree_node**, align 8
  %tmp = alloca %struct.comp_cost, align 4
  %tmp20 = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !11909, metadata !DIExpression()), !dbg !11910
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !11911, metadata !DIExpression()), !dbg !11912
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !11913, metadata !DIExpression()), !dbg !11914
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound, metadata !11915, metadata !DIExpression()), !dbg !11916
  store %union.tree_node* null, %union.tree_node** %bound, align 8, !dbg !11916
  call void @llvm.dbg.declare(metadata %struct.iv** %cmp_iv, metadata !11917, metadata !DIExpression()), !dbg !11918
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on_elim, metadata !11919, metadata !DIExpression()), !dbg !11920
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on_elim, align 8, !dbg !11920
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on_express, metadata !11921, metadata !DIExpression()), !dbg !11922
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on_express, align 8, !dbg !11922
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on, metadata !11923, metadata !DIExpression()), !dbg !11924
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %elim_cost, metadata !11925, metadata !DIExpression()), !dbg !11926
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %express_cost, metadata !11927, metadata !DIExpression()), !dbg !11928
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !11929, metadata !DIExpression()), !dbg !11930
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !11931, metadata !DIExpression()), !dbg !11932
  call void @llvm.dbg.declare(metadata %union.tree_node*** %control_var, metadata !11933, metadata !DIExpression()), !dbg !11934
  call void @llvm.dbg.declare(metadata %union.tree_node*** %bound_cst, metadata !11935, metadata !DIExpression()), !dbg !11936
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11937
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 6, !dbg !11939
  %1 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !11939
  %tobool = icmp ne %struct.iv* %1, null, !dbg !11937
  br i1 %tobool, label %if.end, label %if.then, !dbg !11940

if.then:                                          ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11941
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11943
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11944
  %5 = load i64, i64* bitcast (%struct.comp_cost* @infinite_cost to i64*), align 4, !dbg !11945
  call void @set_use_iv_cost(%struct.ivopts_data* %2, %struct.iv_use* %3, %struct.iv_cand* %4, i64 %5, %struct.bitmap_head_def* null, %union.tree_node* null), !dbg !11945
  store i8 0, i8* %retval, align 1, !dbg !11946
  br label %return, !dbg !11946

if.end:                                           ; preds = %entry
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11947
  %7 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11949
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11950
  %call = call zeroext i8 @may_eliminate_iv(%struct.ivopts_data* %6, %struct.iv_use* %7, %struct.iv_cand* %8, %union.tree_node** %bound), !dbg !11951
  %tobool1 = icmp ne i8 %call, 0, !dbg !11951
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !11952

if.then2:                                         ; preds = %if.end
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11953
  %10 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !11955
  %call3 = call i64 @force_var_cost(%struct.ivopts_data* %9, %union.tree_node* %10, %struct.bitmap_head_def** %depends_on_elim), !dbg !11956
  %11 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !11956
  store i64 %call3, i64* %11, align 4, !dbg !11956
  %12 = bitcast %struct.comp_cost* %elim_cost to i8*, !dbg !11956
  %13 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !11956
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 8, i1 false), !dbg !11956
  %cost4 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %elim_cost, i32 0, i32 0, !dbg !11957
  %14 = load i32, i32* %cost4, align 4, !dbg !11958
  %div = sdiv i32 %14, 5, !dbg !11958
  store i32 %div, i32* %cost4, align 4, !dbg !11958
  br label %if.end5, !dbg !11959

if.else:                                          ; preds = %if.end
  %15 = bitcast %struct.comp_cost* %elim_cost to i8*, !dbg !11960
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !11960
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then2
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11961
  %17 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11962
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %17, i32 0, i32 3, !dbg !11963
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11963
  %call6 = call zeroext i8 @extract_cond_operands(%struct.ivopts_data* %16, %union.gimple_statement_d* %18, %union.tree_node*** %control_var, %union.tree_node*** %bound_cst, %struct.iv** null, %struct.iv** %cmp_iv), !dbg !11964
  store i8 %call6, i8* %ok, align 1, !dbg !11965
  %19 = load i8, i8* %ok, align 1, !dbg !11966
  %tobool7 = icmp ne i8 %19, 0, !dbg !11966
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !11966

cond.true:                                        ; preds = %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 4119, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !11966
  br label %cond.end, !dbg !11966

cond.false:                                       ; preds = %if.end5
  br label %cond.end, !dbg !11966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11966
  %20 = bitcast %struct.comp_cost* %elim_cost to i64*, !dbg !11967
  %21 = load i64, i64* %20, align 4, !dbg !11967
  %call8 = call zeroext i8 @infinite_cost_p(i64 %21), !dbg !11967
  %tobool9 = icmp ne i8 %call8, 0, !dbg !11967
  br i1 %tobool9, label %if.end19, label %land.lhs.true, !dbg !11969

land.lhs.true:                                    ; preds = %cond.end
  %22 = load %union.tree_node**, %union.tree_node*** %bound_cst, align 8, !dbg !11970
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !11971
  %call10 = call i32 @integer_zerop(%union.tree_node* %23), !dbg !11972
  %tobool11 = icmp ne i32 %call10, 0, !dbg !11972
  br i1 %tobool11, label %land.lhs.true12, label %if.end19, !dbg !11973

land.lhs.true12:                                  ; preds = %land.lhs.true
  %24 = load %union.tree_node**, %union.tree_node*** %control_var, align 8, !dbg !11974
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !11975
  %26 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11976
  %var_after = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %26, i32 0, i32 5, !dbg !11977
  %27 = load %union.tree_node*, %union.tree_node** %var_after, align 8, !dbg !11977
  %call13 = call i32 @operand_equal_p(%union.tree_node* %25, %union.tree_node* %27, i32 0), !dbg !11978
  %tobool14 = icmp ne i32 %call13, 0, !dbg !11978
  br i1 %tobool14, label %if.then17, label %lor.lhs.false, !dbg !11979

lor.lhs.false:                                    ; preds = %land.lhs.true12
  %28 = load %union.tree_node**, %union.tree_node*** %control_var, align 8, !dbg !11980
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !11981
  %30 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11982
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %30, i32 0, i32 4, !dbg !11983
  %31 = load %union.tree_node*, %union.tree_node** %var_before, align 8, !dbg !11983
  %call15 = call i32 @operand_equal_p(%union.tree_node* %29, %union.tree_node* %31, i32 0), !dbg !11984
  %tobool16 = icmp ne i32 %call15, 0, !dbg !11984
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !11985

if.then17:                                        ; preds = %lor.lhs.false, %land.lhs.true12
  %cost18 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %elim_cost, i32 0, i32 0, !dbg !11986
  %32 = load i32, i32* %cost18, align 4, !dbg !11987
  %sub = sub nsw i32 %32, 1, !dbg !11987
  store i32 %sub, i32* %cost18, align 4, !dbg !11987
  br label %if.end19, !dbg !11988

if.end19:                                         ; preds = %if.then17, %lor.lhs.false, %land.lhs.true, %cond.end
  %33 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11989
  %34 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !11990
  %35 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !11991
  %call21 = call i64 @get_computation_cost(%struct.ivopts_data* %33, %struct.iv_use* %34, %struct.iv_cand* %35, i8 zeroext 0, %struct.bitmap_head_def** %depends_on_express, i8* null), !dbg !11992
  %36 = bitcast %struct.comp_cost* %tmp20 to i64*, !dbg !11992
  store i64 %call21, i64* %36, align 4, !dbg !11992
  %37 = bitcast %struct.comp_cost* %express_cost to i8*, !dbg !11992
  %38 = bitcast %struct.comp_cost* %tmp20 to i8*, !dbg !11992
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 8, i1 false), !dbg !11992
  %39 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !11993
  store %struct.ivopts_data* %39, %struct.ivopts_data** @fd_ivopts_data, align 8, !dbg !11994
  %40 = load %struct.iv*, %struct.iv** %cmp_iv, align 8, !dbg !11995
  %base = getelementptr inbounds %struct.iv, %struct.iv* %40, i32 0, i32 0, !dbg !11995
  %41 = bitcast %struct.bitmap_head_def** %depends_on_express to i8*, !dbg !11995
  %call22 = call %union.tree_node* @walk_tree_1(%union.tree_node** %base, %union.tree_node* (%union.tree_node**, i32*, i8*)* @find_depends, i8* %41, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !11995
  %42 = bitcast %struct.comp_cost* %elim_cost to i64*, !dbg !11996
  %43 = load i64, i64* %42, align 4, !dbg !11996
  %44 = bitcast %struct.comp_cost* %express_cost to i64*, !dbg !11996
  %45 = load i64, i64* %44, align 4, !dbg !11996
  %call23 = call i32 @compare_costs(i64 %43, i64 %45), !dbg !11996
  %cmp = icmp sle i32 %call23, 0, !dbg !11998
  br i1 %cmp, label %if.then24, label %if.else25, !dbg !11999

if.then24:                                        ; preds = %if.end19
  %46 = bitcast %struct.comp_cost* %cost to i8*, !dbg !12000
  %47 = bitcast %struct.comp_cost* %elim_cost to i8*, !dbg !12000
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %47, i64 8, i1 false), !dbg !12000
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on_elim, align 8, !dbg !12002
  store %struct.bitmap_head_def* %48, %struct.bitmap_head_def** %depends_on, align 8, !dbg !12003
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on_elim, align 8, !dbg !12004
  br label %if.end26, !dbg !12005

if.else25:                                        ; preds = %if.end19
  %49 = bitcast %struct.comp_cost* %cost to i8*, !dbg !12006
  %50 = bitcast %struct.comp_cost* %express_cost to i8*, !dbg !12006
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %50, i64 8, i1 false), !dbg !12006
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on_express, align 8, !dbg !12008
  store %struct.bitmap_head_def* %51, %struct.bitmap_head_def** %depends_on, align 8, !dbg !12009
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on_express, align 8, !dbg !12010
  store %union.tree_node* null, %union.tree_node** %bound, align 8, !dbg !12011
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.then24
  %52 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12012
  %53 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12013
  %54 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12014
  %55 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !12015
  %56 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !12016
  %57 = bitcast %struct.comp_cost* %cost to i64*, !dbg !12017
  %58 = load i64, i64* %57, align 4, !dbg !12017
  call void @set_use_iv_cost(%struct.ivopts_data* %52, %struct.iv_use* %53, %struct.iv_cand* %54, i64 %58, %struct.bitmap_head_def* %55, %union.tree_node* %56), !dbg !12017
  %59 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on_elim, align 8, !dbg !12018
  %tobool27 = icmp ne %struct.bitmap_head_def* %59, null, !dbg !12018
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !12020

if.then28:                                        ; preds = %if.end26
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on_elim, align 8, !dbg !12021
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %60), !dbg !12021
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on_elim, align 8, !dbg !12021
  br label %if.end29, !dbg !12021

if.end29:                                         ; preds = %if.then28, %if.end26
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on_express, align 8, !dbg !12022
  %tobool30 = icmp ne %struct.bitmap_head_def* %61, null, !dbg !12022
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !12024

if.then31:                                        ; preds = %if.end29
  %62 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on_express, align 8, !dbg !12025
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %62), !dbg !12025
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on_express, align 8, !dbg !12025
  br label %if.end32, !dbg !12025

if.end32:                                         ; preds = %if.then31, %if.end29
  %63 = bitcast %struct.comp_cost* %cost to i64*, !dbg !12026
  %64 = load i64, i64* %63, align 4, !dbg !12026
  %call33 = call zeroext i8 @infinite_cost_p(i64 %64), !dbg !12026
  %tobool34 = icmp ne i8 %call33, 0, !dbg !12027
  %lnot = xor i1 %tobool34, true, !dbg !12027
  %lnot.ext = zext i1 %lnot to i32, !dbg !12027
  %conv = trunc i32 %lnot.ext to i8, !dbg !12027
  store i8 %conv, i8* %retval, align 1, !dbg !12028
  br label %return, !dbg !12028

return:                                           ; preds = %if.end32, %if.then
  %65 = load i8, i8* %retval, align 1, !dbg !12029
  ret i8 %65, !dbg !12029
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_use_iv_cost(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand, i64 %cost.coerce, %struct.bitmap_head_def* %depends_on, %union.tree_node* %value) #0 !dbg !12030 {
entry:
  %cost = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %s = alloca i32, align 4
  %0 = bitcast %struct.comp_cost* %cost to i64*
  store i64 %cost.coerce, i64* %0, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12033, metadata !DIExpression()), !dbg !12034
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !12035, metadata !DIExpression()), !dbg !12036
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !12037, metadata !DIExpression()), !dbg !12038
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !12039, metadata !DIExpression()), !dbg !12040
  store %struct.bitmap_head_def* %depends_on, %struct.bitmap_head_def** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on.addr, metadata !12041, metadata !DIExpression()), !dbg !12042
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !12043, metadata !DIExpression()), !dbg !12044
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12045, metadata !DIExpression()), !dbg !12046
  call void @llvm.dbg.declare(metadata i32* %s, metadata !12047, metadata !DIExpression()), !dbg !12048
  %1 = bitcast %struct.comp_cost* %cost to i64*, !dbg !12049
  %2 = load i64, i64* %1, align 4, !dbg !12049
  %call = call zeroext i8 @infinite_cost_p(i64 %2), !dbg !12049
  %tobool = icmp ne i8 %call, 0, !dbg !12049
  br i1 %tobool, label %if.then, label %if.end, !dbg !12051

if.then:                                          ; preds = %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !12052
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %3), !dbg !12052
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !12052
  br label %return, !dbg !12054

if.end:                                           ; preds = %entry
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12055
  %consider_all_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 10, !dbg !12057
  %5 = load i8, i8* %consider_all_candidates, align 4, !dbg !12057
  %tobool1 = icmp ne i8 %5, 0, !dbg !12055
  br i1 %tobool1, label %if.then2, label %if.end19, !dbg !12058

if.then2:                                         ; preds = %if.end
  %6 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12059
  %7 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12061
  %cost_map = getelementptr inbounds %struct.iv_use, %struct.iv_use* %7, i32 0, i32 7, !dbg !12062
  %8 = load %struct.cost_pair*, %struct.cost_pair** %cost_map, align 8, !dbg !12062
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12063
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %9, i32 0, i32 0, !dbg !12064
  %10 = load i32, i32* %id, align 8, !dbg !12064
  %idxprom = zext i32 %10 to i64, !dbg !12061
  %arrayidx = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %8, i64 %idxprom, !dbg !12061
  %cand3 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx, i32 0, i32 0, !dbg !12065
  store %struct.iv_cand* %6, %struct.iv_cand** %cand3, align 8, !dbg !12066
  %11 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12067
  %cost_map4 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %11, i32 0, i32 7, !dbg !12068
  %12 = load %struct.cost_pair*, %struct.cost_pair** %cost_map4, align 8, !dbg !12068
  %13 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12069
  %id5 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %13, i32 0, i32 0, !dbg !12070
  %14 = load i32, i32* %id5, align 8, !dbg !12070
  %idxprom6 = zext i32 %14 to i64, !dbg !12067
  %arrayidx7 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %12, i64 %idxprom6, !dbg !12067
  %cost8 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx7, i32 0, i32 1, !dbg !12071
  %15 = bitcast %struct.comp_cost* %cost8 to i8*, !dbg !12072
  %16 = bitcast %struct.comp_cost* %cost to i8*, !dbg !12072
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 4 %16, i64 8, i1 false), !dbg !12072
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !12073
  %18 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12074
  %cost_map9 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %18, i32 0, i32 7, !dbg !12075
  %19 = load %struct.cost_pair*, %struct.cost_pair** %cost_map9, align 8, !dbg !12075
  %20 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12076
  %id10 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %20, i32 0, i32 0, !dbg !12077
  %21 = load i32, i32* %id10, align 8, !dbg !12077
  %idxprom11 = zext i32 %21 to i64, !dbg !12074
  %arrayidx12 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %19, i64 %idxprom11, !dbg !12074
  %depends_on13 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx12, i32 0, i32 2, !dbg !12078
  store %struct.bitmap_head_def* %17, %struct.bitmap_head_def** %depends_on13, align 8, !dbg !12079
  %22 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12080
  %23 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12081
  %cost_map14 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %23, i32 0, i32 7, !dbg !12082
  %24 = load %struct.cost_pair*, %struct.cost_pair** %cost_map14, align 8, !dbg !12082
  %25 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12083
  %id15 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %25, i32 0, i32 0, !dbg !12084
  %26 = load i32, i32* %id15, align 8, !dbg !12084
  %idxprom16 = zext i32 %26 to i64, !dbg !12081
  %arrayidx17 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %24, i64 %idxprom16, !dbg !12081
  %value18 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx17, i32 0, i32 3, !dbg !12085
  store %union.tree_node* %22, %union.tree_node** %value18, align 8, !dbg !12086
  br label %return, !dbg !12087

if.end19:                                         ; preds = %if.end
  %27 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12088
  %id20 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %27, i32 0, i32 0, !dbg !12089
  %28 = load i32, i32* %id20, align 8, !dbg !12089
  %29 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12090
  %n_map_members = getelementptr inbounds %struct.iv_use, %struct.iv_use* %29, i32 0, i32 6, !dbg !12091
  %30 = load i32, i32* %n_map_members, align 8, !dbg !12091
  %sub = sub i32 %30, 1, !dbg !12092
  %and = and i32 %28, %sub, !dbg !12093
  store i32 %and, i32* %s, align 4, !dbg !12094
  %31 = load i32, i32* %s, align 4, !dbg !12095
  store i32 %31, i32* %i, align 4, !dbg !12097
  br label %for.cond, !dbg !12098

for.cond:                                         ; preds = %for.inc, %if.end19
  %32 = load i32, i32* %i, align 4, !dbg !12099
  %33 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12101
  %n_map_members21 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %33, i32 0, i32 6, !dbg !12102
  %34 = load i32, i32* %n_map_members21, align 8, !dbg !12102
  %cmp = icmp ult i32 %32, %34, !dbg !12103
  br i1 %cmp, label %for.body, label %for.end, !dbg !12104

for.body:                                         ; preds = %for.cond
  %35 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12105
  %cost_map22 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %35, i32 0, i32 7, !dbg !12107
  %36 = load %struct.cost_pair*, %struct.cost_pair** %cost_map22, align 8, !dbg !12107
  %37 = load i32, i32* %i, align 4, !dbg !12108
  %idxprom23 = zext i32 %37 to i64, !dbg !12105
  %arrayidx24 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %36, i64 %idxprom23, !dbg !12105
  %cand25 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx24, i32 0, i32 0, !dbg !12109
  %38 = load %struct.iv_cand*, %struct.iv_cand** %cand25, align 8, !dbg !12109
  %tobool26 = icmp ne %struct.iv_cand* %38, null, !dbg !12105
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !12110

if.then27:                                        ; preds = %for.body
  br label %found, !dbg !12111

if.end28:                                         ; preds = %for.body
  br label %for.inc, !dbg !12109

for.inc:                                          ; preds = %if.end28
  %39 = load i32, i32* %i, align 4, !dbg !12112
  %inc = add i32 %39, 1, !dbg !12112
  store i32 %inc, i32* %i, align 4, !dbg !12112
  br label %for.cond, !dbg !12113, !llvm.loop !12114

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !12116
  br label %for.cond29, !dbg !12118

for.cond29:                                       ; preds = %for.inc39, %for.end
  %40 = load i32, i32* %i, align 4, !dbg !12119
  %41 = load i32, i32* %s, align 4, !dbg !12121
  %cmp30 = icmp ult i32 %40, %41, !dbg !12122
  br i1 %cmp30, label %for.body31, label %for.end41, !dbg !12123

for.body31:                                       ; preds = %for.cond29
  %42 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12124
  %cost_map32 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %42, i32 0, i32 7, !dbg !12126
  %43 = load %struct.cost_pair*, %struct.cost_pair** %cost_map32, align 8, !dbg !12126
  %44 = load i32, i32* %i, align 4, !dbg !12127
  %idxprom33 = zext i32 %44 to i64, !dbg !12124
  %arrayidx34 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %43, i64 %idxprom33, !dbg !12124
  %cand35 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx34, i32 0, i32 0, !dbg !12128
  %45 = load %struct.iv_cand*, %struct.iv_cand** %cand35, align 8, !dbg !12128
  %tobool36 = icmp ne %struct.iv_cand* %45, null, !dbg !12124
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !12129

if.then37:                                        ; preds = %for.body31
  br label %found, !dbg !12130

if.end38:                                         ; preds = %for.body31
  br label %for.inc39, !dbg !12128

for.inc39:                                        ; preds = %if.end38
  %46 = load i32, i32* %i, align 4, !dbg !12131
  %inc40 = add i32 %46, 1, !dbg !12131
  store i32 %inc40, i32* %i, align 4, !dbg !12131
  br label %for.cond29, !dbg !12132, !llvm.loop !12133

for.end41:                                        ; preds = %for.cond29
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 2585, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !12135
  br label %found, !dbg !12135

found:                                            ; preds = %for.end41, %if.then37, %if.then27
  call void @llvm.dbg.label(metadata !12136), !dbg !12137
  %47 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12138
  %48 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12139
  %cost_map42 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %48, i32 0, i32 7, !dbg !12140
  %49 = load %struct.cost_pair*, %struct.cost_pair** %cost_map42, align 8, !dbg !12140
  %50 = load i32, i32* %i, align 4, !dbg !12141
  %idxprom43 = zext i32 %50 to i64, !dbg !12139
  %arrayidx44 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %49, i64 %idxprom43, !dbg !12139
  %cand45 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx44, i32 0, i32 0, !dbg !12142
  store %struct.iv_cand* %47, %struct.iv_cand** %cand45, align 8, !dbg !12143
  %51 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12144
  %cost_map46 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %51, i32 0, i32 7, !dbg !12145
  %52 = load %struct.cost_pair*, %struct.cost_pair** %cost_map46, align 8, !dbg !12145
  %53 = load i32, i32* %i, align 4, !dbg !12146
  %idxprom47 = zext i32 %53 to i64, !dbg !12144
  %arrayidx48 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %52, i64 %idxprom47, !dbg !12144
  %cost49 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx48, i32 0, i32 1, !dbg !12147
  %54 = bitcast %struct.comp_cost* %cost49 to i8*, !dbg !12148
  %55 = bitcast %struct.comp_cost* %cost to i8*, !dbg !12148
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 4 %55, i64 8, i1 false), !dbg !12148
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !12149
  %57 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12150
  %cost_map50 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %57, i32 0, i32 7, !dbg !12151
  %58 = load %struct.cost_pair*, %struct.cost_pair** %cost_map50, align 8, !dbg !12151
  %59 = load i32, i32* %i, align 4, !dbg !12152
  %idxprom51 = zext i32 %59 to i64, !dbg !12150
  %arrayidx52 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %58, i64 %idxprom51, !dbg !12150
  %depends_on53 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx52, i32 0, i32 2, !dbg !12153
  store %struct.bitmap_head_def* %56, %struct.bitmap_head_def** %depends_on53, align 8, !dbg !12154
  %60 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12155
  %61 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12156
  %cost_map54 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %61, i32 0, i32 7, !dbg !12157
  %62 = load %struct.cost_pair*, %struct.cost_pair** %cost_map54, align 8, !dbg !12157
  %63 = load i32, i32* %i, align 4, !dbg !12158
  %idxprom55 = zext i32 %63 to i64, !dbg !12156
  %arrayidx56 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %62, i64 %idxprom55, !dbg !12156
  %value57 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx56, i32 0, i32 3, !dbg !12159
  store %union.tree_node* %60, %union.tree_node** %value57, align 8, !dbg !12160
  br label %return, !dbg !12161

return:                                           ; preds = %found, %if.then2, %if.then
  ret void, !dbg !12161
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_eliminate_iv(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand, %union.tree_node** %bound) #0 !dbg !12162 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %bound.addr = alloca %union.tree_node**, align 8
  %ex_bb = alloca %struct.basic_block_def*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %nit = alloca %union.tree_node*, align 8
  %period = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %bnd = alloca %struct.affine_tree_combination, align 8
  %period_value = alloca %struct.double_int, align 8
  %max_niter = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12165, metadata !DIExpression()), !dbg !12166
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !12167, metadata !DIExpression()), !dbg !12168
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !12169, metadata !DIExpression()), !dbg !12170
  store %union.tree_node** %bound, %union.tree_node*** %bound.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %bound.addr, metadata !12171, metadata !DIExpression()), !dbg !12172
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ex_bb, metadata !12173, metadata !DIExpression()), !dbg !12174
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !12175, metadata !DIExpression()), !dbg !12176
  call void @llvm.dbg.declare(metadata %union.tree_node** %nit, metadata !12177, metadata !DIExpression()), !dbg !12178
  call void @llvm.dbg.declare(metadata %union.tree_node** %period, metadata !12179, metadata !DIExpression()), !dbg !12180
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !12181, metadata !DIExpression()), !dbg !12182
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12183
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !12184
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !12184
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !12182
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %bnd, metadata !12185, metadata !DIExpression()), !dbg !12186
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12187
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %2, i32 0, i32 6, !dbg !12187
  %3 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !12187
  %step = getelementptr inbounds %struct.iv, %struct.iv* %3, i32 0, i32 2, !dbg !12187
  %4 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !12187
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !12187
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !12187
  %bf.load = load i64, i64* %5, align 8, !dbg !12187
  %bf.clear = and i64 %bf.load, 65535, !dbg !12187
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12187
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !12189
  br i1 %cmp, label %if.then, label %if.end, !dbg !12190

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12191
  br label %return, !dbg !12191

if.end:                                           ; preds = %entry
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12192
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %6, i32 0, i32 3, !dbg !12193
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12193
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !12194
  store %struct.basic_block_def* %call, %struct.basic_block_def** %ex_bb, align 8, !dbg !12195
  %8 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12196
  %stmt1 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %8, i32 0, i32 3, !dbg !12198
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !12198
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !12199
  %call2 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %10), !dbg !12200
  %cmp3 = icmp ne %union.gimple_statement_d* %9, %call2, !dbg !12201
  br i1 %cmp3, label %if.then9, label %lor.lhs.false, !dbg !12202

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12203
  %stmt4 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %11, i32 0, i32 3, !dbg !12204
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !12204
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !12205
  %cmp6 = icmp ne i32 %call5, 1, !dbg !12206
  br i1 %cmp6, label %if.then9, label %lor.lhs.false7, !dbg !12207

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !12208
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 3, !dbg !12209
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !12209
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !12210
  %call8 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !12211
  %tobool = icmp ne i8 %call8, 0, !dbg !12211
  br i1 %tobool, label %if.end10, label %if.then9, !dbg !12212

if.then9:                                         ; preds = %lor.lhs.false7, %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !12213
  br label %return, !dbg !12213

if.end10:                                         ; preds = %lor.lhs.false7
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !12214
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !12214
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !12214
  %tobool11 = icmp ne %struct.VEC_edge_gc* %17, null, !dbg !12214
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !12214

cond.true:                                        ; preds = %if.end10
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !12214
  %succs12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !12214
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs12, align 8, !dbg !12214
  %base13 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %19, i32 0, i32 0, !dbg !12214
  br label %cond.end, !dbg !12214

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !12214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base13, %cond.true ], [ null, %cond.false ], !dbg !12214
  %call14 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !12214
  store %struct.edge_def* %call14, %struct.edge_def** %exit, align 8, !dbg !12215
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !12216
  %21 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !12218
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 1, !dbg !12219
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12219
  %call15 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %20, %struct.basic_block_def* %22), !dbg !12220
  %tobool16 = icmp ne i8 %call15, 0, !dbg !12220
  br i1 %tobool16, label %if.then17, label %if.end27, !dbg !12221

if.then17:                                        ; preds = %cond.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !12222
  %succs18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1, !dbg !12222
  %24 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs18, align 8, !dbg !12222
  %tobool19 = icmp ne %struct.VEC_edge_gc* %24, null, !dbg !12222
  br i1 %tobool19, label %cond.true20, label %cond.false23, !dbg !12222

cond.true20:                                      ; preds = %if.then17
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !12222
  %succs21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !12222
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs21, align 8, !dbg !12222
  %base22 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %26, i32 0, i32 0, !dbg !12222
  br label %cond.end24, !dbg !12222

cond.false23:                                     ; preds = %if.then17
  br label %cond.end24, !dbg !12222

cond.end24:                                       ; preds = %cond.false23, %cond.true20
  %cond25 = phi %struct.VEC_edge_base* [ %base22, %cond.true20 ], [ null, %cond.false23 ], !dbg !12222
  %call26 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond25, i32 1), !dbg !12222
  store %struct.edge_def* %call26, %struct.edge_def** %exit, align 8, !dbg !12223
  br label %if.end27, !dbg !12224

if.end27:                                         ; preds = %cond.end24, %cond.end
  %27 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !12225
  %28 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !12227
  %dest28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 1, !dbg !12228
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %dest28, align 8, !dbg !12228
  %call29 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %27, %struct.basic_block_def* %29), !dbg !12229
  %tobool30 = icmp ne i8 %call29, 0, !dbg !12229
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !12230

if.then31:                                        ; preds = %if.end27
  store i8 0, i8* %retval, align 1, !dbg !12231
  br label %return, !dbg !12231

if.end32:                                         ; preds = %if.end27
  %30 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12232
  %31 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !12233
  %call33 = call %union.tree_node* @niter_for_exit(%struct.ivopts_data* %30, %struct.edge_def* %31), !dbg !12234
  store %union.tree_node* %call33, %union.tree_node** %nit, align 8, !dbg !12235
  %32 = load %union.tree_node*, %union.tree_node** %nit, align 8, !dbg !12236
  %tobool34 = icmp ne %union.tree_node* %32, null, !dbg !12236
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !12238

if.then35:                                        ; preds = %if.end32
  store i8 0, i8* %retval, align 1, !dbg !12239
  br label %return, !dbg !12239

if.end36:                                         ; preds = %if.end32
  %33 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12240
  %iv37 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %33, i32 0, i32 6, !dbg !12241
  %34 = load %struct.iv*, %struct.iv** %iv37, align 8, !dbg !12241
  %call38 = call %union.tree_node* @iv_period(%struct.iv* %34), !dbg !12242
  store %union.tree_node* %call38, %union.tree_node** %period, align 8, !dbg !12243
  %35 = load %union.tree_node*, %union.tree_node** %nit, align 8, !dbg !12244
  %base39 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !12244
  %36 = bitcast %struct.tree_base* %base39 to i64*, !dbg !12244
  %bf.load40 = load i64, i64* %36, align 8, !dbg !12244
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !12244
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !12244
  %cmp43 = icmp eq i32 %bf.cast42, 23, !dbg !12246
  br i1 %cmp43, label %if.then44, label %if.else, !dbg !12247

if.then44:                                        ; preds = %if.end36
  %37 = load %union.tree_node*, %union.tree_node** %nit, align 8, !dbg !12248
  %38 = load %union.tree_node*, %union.tree_node** %period, align 8, !dbg !12251
  %call45 = call i32 @tree_int_cst_lt(%union.tree_node* %37, %union.tree_node* %38), !dbg !12252
  %tobool46 = icmp ne i32 %call45, 0, !dbg !12252
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !12253

if.then47:                                        ; preds = %if.then44
  store i8 0, i8* %retval, align 1, !dbg !12254
  br label %return, !dbg !12254

if.end48:                                         ; preds = %if.then44
  br label %if.end63, !dbg !12255

if.else:                                          ; preds = %if.end36
  %39 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !12256
  %40 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !12258
  %call49 = call zeroext i8 @loop_only_exit_p(%struct.loop* %39, %struct.edge_def* %40), !dbg !12259
  %tobool50 = icmp ne i8 %call49, 0, !dbg !12259
  br i1 %tobool50, label %if.then51, label %if.else61, !dbg !12260

if.then51:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.double_int* %period_value, metadata !12261, metadata !DIExpression()), !dbg !12263
  call void @llvm.dbg.declare(metadata %struct.double_int* %max_niter, metadata !12264, metadata !DIExpression()), !dbg !12265
  %41 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !12266
  %call52 = call zeroext i8 @estimated_loop_iterations(%struct.loop* %41, i8 zeroext 1, %struct.double_int* %max_niter), !dbg !12268
  %tobool53 = icmp ne i8 %call52, 0, !dbg !12268
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !12269

if.then54:                                        ; preds = %if.then51
  store i8 0, i8* %retval, align 1, !dbg !12270
  br label %return, !dbg !12270

if.end55:                                         ; preds = %if.then51
  %42 = load %union.tree_node*, %union.tree_node** %period, align 8, !dbg !12271
  %call56 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %42), !dbg !12272
  %43 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !12272
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %43, i32 0, i32 0, !dbg !12272
  %45 = extractvalue { i64, i64 } %call56, 0, !dbg !12272
  store i64 %45, i64* %44, align 8, !dbg !12272
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %43, i32 0, i32 1, !dbg !12272
  %47 = extractvalue { i64, i64 } %call56, 1, !dbg !12272
  store i64 %47, i64* %46, align 8, !dbg !12272
  %48 = bitcast %struct.double_int* %period_value to i8*, !dbg !12272
  %49 = bitcast %struct.double_int* %tmp to i8*, !dbg !12272
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false), !dbg !12272
  %50 = bitcast %struct.double_int* %max_niter to { i64, i64 }*, !dbg !12273
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 0, !dbg !12273
  %52 = load i64, i64* %51, align 8, !dbg !12273
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 1, !dbg !12273
  %54 = load i64, i64* %53, align 8, !dbg !12273
  %55 = bitcast %struct.double_int* %period_value to { i64, i64 }*, !dbg !12273
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 0, !dbg !12273
  %57 = load i64, i64* %56, align 8, !dbg !12273
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 1, !dbg !12273
  %59 = load i64, i64* %58, align 8, !dbg !12273
  %call57 = call i32 @double_int_ucmp(i64 %52, i64 %54, i64 %57, i64 %59), !dbg !12273
  %cmp58 = icmp sge i32 %call57, 0, !dbg !12275
  br i1 %cmp58, label %if.then59, label %if.end60, !dbg !12276

if.then59:                                        ; preds = %if.end55
  store i8 0, i8* %retval, align 1, !dbg !12277
  br label %return, !dbg !12277

if.end60:                                         ; preds = %if.end55
  br label %if.end62, !dbg !12278

if.else61:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !12279
  br label %return, !dbg !12279

if.end62:                                         ; preds = %if.end60
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end48
  %60 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !12280
  %61 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12281
  %62 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12282
  %stmt64 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %62, i32 0, i32 3, !dbg !12283
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt64, align 8, !dbg !12283
  %64 = load %union.tree_node*, %union.tree_node** %nit, align 8, !dbg !12284
  call void @cand_value_at(%struct.loop* %60, %struct.iv_cand* %61, %union.gimple_statement_d* %63, %union.tree_node* %64, %struct.affine_tree_combination* %bnd), !dbg !12285
  %call65 = call %union.tree_node* @aff_combination_to_tree(%struct.affine_tree_combination* %bnd), !dbg !12286
  %65 = load %union.tree_node**, %union.tree_node*** %bound.addr, align 8, !dbg !12287
  store %union.tree_node* %call65, %union.tree_node** %65, align 8, !dbg !12288
  %66 = load %union.tree_node**, %union.tree_node*** %bound.addr, align 8, !dbg !12289
  %67 = load %union.tree_node*, %union.tree_node** %66, align 8, !dbg !12291
  %call66 = call zeroext i8 @expression_expensive_p(%union.tree_node* %67), !dbg !12292
  %tobool67 = icmp ne i8 %call66, 0, !dbg !12292
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !12293

if.then68:                                        ; preds = %if.end63
  store i8 0, i8* %retval, align 1, !dbg !12294
  br label %return, !dbg !12294

if.end69:                                         ; preds = %if.end63
  store i8 1, i8* %retval, align 1, !dbg !12295
  br label %return, !dbg !12295

return:                                           ; preds = %if.end69, %if.then68, %if.else61, %if.then59, %if.then54, %if.then47, %if.then35, %if.then31, %if.then9, %if.then
  %68 = load i8, i8* %retval, align 1, !dbg !12296
  ret i8 %68, !dbg !12296
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_costs(i64 %cost1.coerce, i64 %cost2.coerce) #0 !dbg !12297 {
entry:
  %retval = alloca i32, align 4
  %cost1 = alloca %struct.comp_cost, align 4
  %cost2 = alloca %struct.comp_cost, align 4
  %0 = bitcast %struct.comp_cost* %cost1 to i64*
  store i64 %cost1.coerce, i64* %0, align 4
  %1 = bitcast %struct.comp_cost* %cost2 to i64*
  store i64 %cost2.coerce, i64* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost1, metadata !12300, metadata !DIExpression()), !dbg !12301
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost2, metadata !12302, metadata !DIExpression()), !dbg !12303
  %cost = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 0, !dbg !12304
  %2 = load i32, i32* %cost, align 4, !dbg !12304
  %cost3 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 0, !dbg !12306
  %3 = load i32, i32* %cost3, align 4, !dbg !12306
  %cmp = icmp eq i32 %2, %3, !dbg !12307
  br i1 %cmp, label %if.then, label %if.end, !dbg !12308

if.then:                                          ; preds = %entry
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 1, !dbg !12309
  %4 = load i32, i32* %complexity, align 4, !dbg !12309
  %complexity4 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 1, !dbg !12310
  %5 = load i32, i32* %complexity4, align 4, !dbg !12310
  %sub = sub i32 %4, %5, !dbg !12311
  store i32 %sub, i32* %retval, align 4, !dbg !12312
  br label %return, !dbg !12312

if.end:                                           ; preds = %entry
  %cost5 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 0, !dbg !12313
  %6 = load i32, i32* %cost5, align 4, !dbg !12313
  %cost6 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 0, !dbg !12314
  %7 = load i32, i32* %cost6, align 4, !dbg !12314
  %sub7 = sub nsw i32 %6, %7, !dbg !12315
  store i32 %sub7, i32* %retval, align 4, !dbg !12316
  br label %return, !dbg !12316

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !12317
  ret i32 %8, !dbg !12317
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @iv_period(%struct.iv* %iv) #0 !dbg !12318 {
entry:
  %iv.addr = alloca %struct.iv*, align 8
  %step = alloca %union.tree_node*, align 8
  %period = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %pow2div = alloca %union.tree_node*, align 8
  store %struct.iv* %iv, %struct.iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv** %iv.addr, metadata !12321, metadata !DIExpression()), !dbg !12322
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !12323, metadata !DIExpression()), !dbg !12324
  %0 = load %struct.iv*, %struct.iv** %iv.addr, align 8, !dbg !12325
  %step1 = getelementptr inbounds %struct.iv, %struct.iv* %0, i32 0, i32 2, !dbg !12326
  %1 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !12326
  store %union.tree_node* %1, %union.tree_node** %step, align 8, !dbg !12324
  call void @llvm.dbg.declare(metadata %union.tree_node** %period, metadata !12327, metadata !DIExpression()), !dbg !12328
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12329, metadata !DIExpression()), !dbg !12330
  call void @llvm.dbg.declare(metadata %union.tree_node** %pow2div, metadata !12331, metadata !DIExpression()), !dbg !12332
  %2 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !12333
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !12333
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !12333

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !12333
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !12333
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !12333
  %bf.load = load i64, i64* %4, align 8, !dbg !12333
  %bf.clear = and i64 %bf.load, 65535, !dbg !12333
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12333
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !12333
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12333

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 3979, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !12333
  br label %cond.end, !dbg !12333

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12333

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12333
  %5 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !12334
  %call = call %union.tree_node* @num_ending_zeros(%union.tree_node* %5), !dbg !12335
  store %union.tree_node* %call, %union.tree_node** %pow2div, align 8, !dbg !12336
  %6 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !12337
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !12337
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12337
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !12337
  %call3 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %7), !dbg !12338
  store %union.tree_node* %call3, %union.tree_node** %type, align 8, !dbg !12339
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12340
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12341
  %type4 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !12341
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 6, !dbg !12341
  %bf.load5 = load i32, i32* %precision, align 4, !dbg !12341
  %bf.clear6 = and i32 %bf.load5, 1023, !dbg !12341
  %conv = zext i32 %bf.clear6 to i64, !dbg !12341
  %10 = load %union.tree_node*, %union.tree_node** %pow2div, align 8, !dbg !12342
  %call7 = call i64 @tree_low_cst(%union.tree_node* %10, i32 1), !dbg !12343
  %sub = sub nsw i64 %conv, %call7, !dbg !12344
  %conv8 = trunc i64 %sub to i32, !dbg !12345
  %call9 = call %union.tree_node* @build_low_bits_mask(%union.tree_node* %8, i32 %conv8), !dbg !12346
  store %union.tree_node* %call9, %union.tree_node** %period, align 8, !dbg !12347
  %11 = load %union.tree_node*, %union.tree_node** %period, align 8, !dbg !12348
  ret %union.tree_node* %11, !dbg !12349
}

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @loop_only_exit_p(%struct.loop*, %struct.edge_def*) #2

declare dso_local zeroext i8 @estimated_loop_iterations(%struct.loop*, i8 zeroext, %struct.double_int*) #2

declare dso_local i32 @double_int_ucmp(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @cand_value_at(%struct.loop* %loop, %struct.iv_cand* %cand, %union.gimple_statement_d* %at, %union.tree_node* %niter, %struct.affine_tree_combination* %val) #0 !dbg !12350 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %at.addr = alloca %union.gimple_statement_d*, align 8
  %niter.addr = alloca %union.tree_node*, align 8
  %val.addr = alloca %struct.affine_tree_combination*, align 8
  %step = alloca %struct.affine_tree_combination, align 8
  %delta = alloca %struct.affine_tree_combination, align 8
  %nit = alloca %struct.affine_tree_combination, align 8
  %iv = alloca %struct.iv*, align 8
  %type = alloca %union.tree_node*, align 8
  %steptype = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !12354, metadata !DIExpression()), !dbg !12355
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !12356, metadata !DIExpression()), !dbg !12357
  store %union.gimple_statement_d* %at, %union.gimple_statement_d** %at.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at.addr, metadata !12358, metadata !DIExpression()), !dbg !12359
  store %union.tree_node* %niter, %union.tree_node** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter.addr, metadata !12360, metadata !DIExpression()), !dbg !12361
  store %struct.affine_tree_combination* %val, %struct.affine_tree_combination** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination** %val.addr, metadata !12362, metadata !DIExpression()), !dbg !12363
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %step, metadata !12364, metadata !DIExpression()), !dbg !12365
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %delta, metadata !12366, metadata !DIExpression()), !dbg !12367
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %nit, metadata !12368, metadata !DIExpression()), !dbg !12369
  call void @llvm.dbg.declare(metadata %struct.iv** %iv, metadata !12370, metadata !DIExpression()), !dbg !12371
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12372
  %iv1 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 6, !dbg !12373
  %1 = load %struct.iv*, %struct.iv** %iv1, align 8, !dbg !12373
  store %struct.iv* %1, %struct.iv** %iv, align 8, !dbg !12371
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12374, metadata !DIExpression()), !dbg !12375
  %2 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !12376
  %base = getelementptr inbounds %struct.iv, %struct.iv* %2, i32 0, i32 0, !dbg !12376
  %3 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !12376
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !12376
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12376
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !12376
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !12375
  call void @llvm.dbg.declare(metadata %union.tree_node** %steptype, metadata !12377, metadata !DIExpression()), !dbg !12378
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12379
  store %union.tree_node* %5, %union.tree_node** %steptype, align 8, !dbg !12378
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12380
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !12380
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !12380
  %bf.load = load i64, i64* %7, align 8, !dbg !12380
  %bf.clear = and i64 %bf.load, 65535, !dbg !12380
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12380
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !12380
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12380

lor.lhs.false:                                    ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12380
  %base4 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12380
  %9 = bitcast %struct.tree_base* %base4 to i64*, !dbg !12380
  %bf.load5 = load i64, i64* %9, align 8, !dbg !12380
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !12380
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !12380
  %cmp8 = icmp eq i32 %bf.cast7, 12, !dbg !12380
  br i1 %cmp8, label %if.then, label %if.end, !dbg !12382

if.then:                                          ; preds = %lor.lhs.false, %entry
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !12383
  store %union.tree_node* %10, %union.tree_node** %steptype, align 8, !dbg !12384
  br label %if.end, !dbg !12385

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %11 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !12386
  %step9 = getelementptr inbounds %struct.iv, %struct.iv* %11, i32 0, i32 2, !dbg !12387
  %12 = load %union.tree_node*, %union.tree_node** %step9, align 8, !dbg !12387
  %13 = load %union.tree_node*, %union.tree_node** %steptype, align 8, !dbg !12388
  call void @tree_to_aff_combination(%union.tree_node* %12, %union.tree_node* %13, %struct.affine_tree_combination* %step), !dbg !12389
  %14 = load %union.tree_node*, %union.tree_node** %niter.addr, align 8, !dbg !12390
  %15 = load %union.tree_node*, %union.tree_node** %niter.addr, align 8, !dbg !12391
  %common10 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !12391
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !12391
  %16 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !12391
  call void @tree_to_aff_combination(%union.tree_node* %14, %union.tree_node* %16, %struct.affine_tree_combination* %nit), !dbg !12392
  %17 = load %union.tree_node*, %union.tree_node** %steptype, align 8, !dbg !12393
  call void @aff_combination_convert(%struct.affine_tree_combination* %nit, %union.tree_node* %17), !dbg !12394
  call void @aff_combination_mult(%struct.affine_tree_combination* %nit, %struct.affine_tree_combination* %step, %struct.affine_tree_combination* %delta), !dbg !12395
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !12396
  %19 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !12398
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at.addr, align 8, !dbg !12399
  %call = call zeroext i8 @stmt_after_increment(%struct.loop* %18, %struct.iv_cand* %19, %union.gimple_statement_d* %20), !dbg !12400
  %tobool = icmp ne i8 %call, 0, !dbg !12400
  br i1 %tobool, label %if.then12, label %if.end13, !dbg !12401

if.then12:                                        ; preds = %if.end
  call void @aff_combination_add(%struct.affine_tree_combination* %delta, %struct.affine_tree_combination* %step), !dbg !12402
  br label %if.end13, !dbg !12402

if.end13:                                         ; preds = %if.then12, %if.end
  %21 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !12403
  %base14 = getelementptr inbounds %struct.iv, %struct.iv* %21, i32 0, i32 0, !dbg !12404
  %22 = load %union.tree_node*, %union.tree_node** %base14, align 8, !dbg !12404
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12405
  %24 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %val.addr, align 8, !dbg !12406
  call void @tree_to_aff_combination(%union.tree_node* %22, %union.tree_node* %23, %struct.affine_tree_combination* %24), !dbg !12407
  %25 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %val.addr, align 8, !dbg !12408
  call void @aff_combination_add(%struct.affine_tree_combination* %25, %struct.affine_tree_combination* %delta), !dbg !12409
  ret void, !dbg !12410
}

declare dso_local zeroext i8 @expression_expensive_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @num_ending_zeros(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_low_bits_mask(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local void @aff_combination_mult(%struct.affine_tree_combination*, %struct.affine_tree_combination*, %struct.affine_tree_combination*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @ivopts_global_cost_for_size(%struct.ivopts_data* %data, i32 %size) #0 !dbg !12411 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %size.addr = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12414, metadata !DIExpression()), !dbg !12415
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !12416, metadata !DIExpression()), !dbg !12417
  %0 = load i32, i32* %size.addr, align 4, !dbg !12418
  %1 = load i32, i32* %size.addr, align 4, !dbg !12419
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12420
  %regs_used = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 2, !dbg !12421
  %3 = load i32, i32* %regs_used, align 8, !dbg !12421
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12422
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 11, !dbg !12423
  %5 = load i8, i8* %speed, align 1, !dbg !12423
  %call = call i32 @estimate_reg_pressure_cost(i32 %1, i32 %3, i8 zeroext %5), !dbg !12424
  %add = add i32 %0, %call, !dbg !12425
  ret i32 %add, !dbg !12426
}

declare dso_local i32 @estimate_reg_pressure_cost(i32, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_ca* @get_initial_solution(%struct.ivopts_data* %data) #0 !dbg !12427 {
entry:
  %retval = alloca %struct.iv_ca*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs = alloca %struct.iv_ca*, align 8
  %i = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12428, metadata !DIExpression()), !dbg !12429
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs, metadata !12430, metadata !DIExpression()), !dbg !12431
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12432
  %call = call %struct.iv_ca* @iv_ca_new(%struct.ivopts_data* %0), !dbg !12433
  store %struct.iv_ca* %call, %struct.iv_ca** %ivs, align 8, !dbg !12431
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12434, metadata !DIExpression()), !dbg !12435
  store i32 0, i32* %i, align 4, !dbg !12436
  br label %for.cond, !dbg !12438

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !12439
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12441
  %call1 = call i32 @n_iv_uses(%struct.ivopts_data* %2), !dbg !12442
  %cmp = icmp ult i32 %1, %call1, !dbg !12443
  br i1 %cmp, label %for.body, label %for.end, !dbg !12444

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12445
  %4 = load %struct.iv_ca*, %struct.iv_ca** %ivs, align 8, !dbg !12447
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12448
  %6 = load i32, i32* %i, align 4, !dbg !12449
  %call2 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %5, i32 %6), !dbg !12450
  %call3 = call zeroext i8 @try_add_cand_for(%struct.ivopts_data* %3, %struct.iv_ca* %4, %struct.iv_use* %call2), !dbg !12451
  %tobool = icmp ne i8 %call3, 0, !dbg !12451
  br i1 %tobool, label %if.end, label %if.then, !dbg !12452

if.then:                                          ; preds = %for.body
  call void @iv_ca_free(%struct.iv_ca** %ivs), !dbg !12453
  store %struct.iv_ca* null, %struct.iv_ca** %retval, align 8, !dbg !12455
  br label %return, !dbg !12455

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !12456

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !12457
  %inc = add i32 %7, 1, !dbg !12457
  store i32 %inc, i32* %i, align 4, !dbg !12457
  br label %for.cond, !dbg !12458, !llvm.loop !12459

for.end:                                          ; preds = %for.cond
  %8 = load %struct.iv_ca*, %struct.iv_ca** %ivs, align 8, !dbg !12461
  store %struct.iv_ca* %8, %struct.iv_ca** %retval, align 8, !dbg !12462
  br label %return, !dbg !12462

return:                                           ; preds = %for.end, %if.then
  %9 = load %struct.iv_ca*, %struct.iv_ca** %retval, align 8, !dbg !12463
  ret %struct.iv_ca* %9, !dbg !12463
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_dump(%struct.ivopts_data* %data, %struct._IO_FILE* %file, %struct.iv_ca* %ivs) #0 !dbg !12464 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %pref = alloca i8*, align 8
  %i = alloca i32, align 4
  %cost = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12467, metadata !DIExpression()), !dbg !12468
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !12469, metadata !DIExpression()), !dbg !12470
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !12471, metadata !DIExpression()), !dbg !12472
  call void @llvm.dbg.declare(metadata i8** %pref, metadata !12473, metadata !DIExpression()), !dbg !12474
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i64 0, i64 0), i8** %pref, align 8, !dbg !12474
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12475, metadata !DIExpression()), !dbg !12476
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !12477, metadata !DIExpression()), !dbg !12478
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12479
  %call = call i64 @iv_ca_cost(%struct.iv_ca* %0), !dbg !12480
  %1 = bitcast %struct.comp_cost* %cost to i64*, !dbg !12480
  store i64 %call, i64* %1, align 4, !dbg !12480
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !12481
  %cost1 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !12482
  %3 = load i32, i32* %cost1, align 4, !dbg !12482
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 1, !dbg !12483
  %4 = load i32, i32* %complexity, align 4, !dbg !12483
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.83, i64 0, i64 0), i32 %3, i32 %4), !dbg !12484
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !12485
  %6 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12486
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %6, i32 0, i32 4, !dbg !12487
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !12487
  call void @bitmap_print(%struct._IO_FILE* %5, %struct.bitmap_head_def* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12488
  store i32 1, i32* %i, align 4, !dbg !12489
  br label %for.cond, !dbg !12491

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4, !dbg !12492
  %9 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12494
  %max_inv_id = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %9, i32 0, i32 9, !dbg !12495
  %10 = load i32, i32* %max_inv_id, align 8, !dbg !12495
  %cmp = icmp ule i32 %8, %10, !dbg !12496
  br i1 %cmp, label %for.body, label %for.end, !dbg !12497

for.body:                                         ; preds = %for.cond
  %11 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12498
  %n_invariant_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %11, i32 0, i32 9, !dbg !12500
  %12 = load i32*, i32** %n_invariant_uses, align 8, !dbg !12500
  %13 = load i32, i32* %i, align 4, !dbg !12501
  %idxprom = zext i32 %13 to i64, !dbg !12498
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 %idxprom, !dbg !12498
  %14 = load i32, i32* %arrayidx, align 4, !dbg !12498
  %tobool = icmp ne i32 %14, 0, !dbg !12498
  br i1 %tobool, label %if.then, label %if.end, !dbg !12502

if.then:                                          ; preds = %for.body
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !12503
  %16 = load i8*, i8** %pref, align 8, !dbg !12505
  %17 = load i32, i32* %i, align 4, !dbg !12506
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.85, i64 0, i64 0), i8* %16, i32 %17), !dbg !12507
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0), i8** %pref, align 8, !dbg !12508
  br label %if.end, !dbg !12509

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !12510

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !12511
  %inc = add i32 %18, 1, !dbg !12511
  store i32 %inc, i32* %i, align 4, !dbg !12511
  br label %for.cond, !dbg !12512, !llvm.loop !12513

for.end:                                          ; preds = %for.cond
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !12515
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12516
  ret void, !dbg !12517
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_improve_iv_set(%struct.ivopts_data* %data, %struct.iv_ca* %ivs) #0 !dbg !12518 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %i = alloca i32, align 4
  %n_ivs = alloca i32, align 4
  %acost = alloca %struct.comp_cost, align 4
  %best_cost = alloca %struct.comp_cost, align 4
  %best_delta = alloca %struct.iv_ca_delta*, align 8
  %act_delta = alloca %struct.iv_ca_delta*, align 8
  %tmp_delta = alloca %struct.iv_ca_delta*, align 8
  %cand = alloca %struct.iv_cand*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  %tmp10 = alloca %struct.comp_cost, align 4
  %tmp20 = alloca %struct.comp_cost, align 4
  %agg.tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12521, metadata !DIExpression()), !dbg !12522
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !12523, metadata !DIExpression()), !dbg !12524
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12525, metadata !DIExpression()), !dbg !12526
  call void @llvm.dbg.declare(metadata i32* %n_ivs, metadata !12527, metadata !DIExpression()), !dbg !12528
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %acost, metadata !12529, metadata !DIExpression()), !dbg !12530
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %best_cost, metadata !12531, metadata !DIExpression()), !dbg !12532
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12533
  %call = call i64 @iv_ca_cost(%struct.iv_ca* %0), !dbg !12534
  %1 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12534
  store i64 %call, i64* %1, align 4, !dbg !12534
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %best_delta, metadata !12535, metadata !DIExpression()), !dbg !12536
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12536
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %act_delta, metadata !12537, metadata !DIExpression()), !dbg !12538
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %tmp_delta, metadata !12539, metadata !DIExpression()), !dbg !12540
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !12541, metadata !DIExpression()), !dbg !12542
  store i32 0, i32* %i, align 4, !dbg !12543
  br label %for.cond, !dbg !12545

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !12546
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12548
  %call1 = call i32 @n_iv_cands(%struct.ivopts_data* %3), !dbg !12549
  %cmp = icmp ult i32 %2, %call1, !dbg !12550
  br i1 %cmp, label %for.body, label %for.end, !dbg !12551

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12552
  %5 = load i32, i32* %i, align 4, !dbg !12554
  %call2 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %4, i32 %5), !dbg !12555
  store %struct.iv_cand* %call2, %struct.iv_cand** %cand, align 8, !dbg !12556
  %6 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12557
  %7 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12559
  %call3 = call zeroext i8 @iv_ca_cand_used_p(%struct.iv_ca* %6, %struct.iv_cand* %7), !dbg !12560
  %tobool = icmp ne i8 %call3, 0, !dbg !12560
  br i1 %tobool, label %if.then, label %if.end, !dbg !12561

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !12562

if.end:                                           ; preds = %for.body
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12563
  %9 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12564
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12565
  %call4 = call i64 @iv_ca_extend(%struct.ivopts_data* %8, %struct.iv_ca* %9, %struct.iv_cand* %10, %struct.iv_ca_delta** %act_delta, i32* %n_ivs), !dbg !12566
  %11 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !12566
  store i64 %call4, i64* %11, align 4, !dbg !12566
  %12 = bitcast %struct.comp_cost* %acost to i8*, !dbg !12566
  %13 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !12566
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %13, i64 8, i1 false), !dbg !12566
  %14 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12567
  %tobool5 = icmp ne %struct.iv_ca_delta* %14, null, !dbg !12567
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !12569

if.then6:                                         ; preds = %if.end
  br label %for.inc, !dbg !12570

if.end7:                                          ; preds = %if.end
  %15 = load i32, i32* %n_ivs, align 4, !dbg !12571
  %16 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !12573
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %16, i64 62, !dbg !12573
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !12573
  %17 = load i32, i32* %value, align 8, !dbg !12573
  %cmp8 = icmp ule i32 %15, %17, !dbg !12574
  br i1 %cmp8, label %if.then9, label %if.end13, !dbg !12575

if.then9:                                         ; preds = %if.end7
  %18 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12576
  %19 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12578
  %20 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12579
  call void @iv_ca_delta_commit(%struct.ivopts_data* %18, %struct.iv_ca* %19, %struct.iv_ca_delta* %20, i8 zeroext 1), !dbg !12580
  %21 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12581
  %22 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12582
  %23 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12583
  %call11 = call i64 @iv_ca_prune(%struct.ivopts_data* %21, %struct.iv_ca* %22, %struct.iv_cand* %23, %struct.iv_ca_delta** %tmp_delta), !dbg !12584
  %24 = bitcast %struct.comp_cost* %tmp10 to i64*, !dbg !12584
  store i64 %call11, i64* %24, align 4, !dbg !12584
  %25 = bitcast %struct.comp_cost* %acost to i8*, !dbg !12584
  %26 = bitcast %struct.comp_cost* %tmp10 to i8*, !dbg !12584
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %26, i64 8, i1 false), !dbg !12584
  %27 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12585
  %28 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12586
  %29 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12587
  call void @iv_ca_delta_commit(%struct.ivopts_data* %27, %struct.iv_ca* %28, %struct.iv_ca_delta* %29, i8 zeroext 0), !dbg !12588
  %30 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12589
  %31 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %tmp_delta, align 8, !dbg !12590
  %call12 = call %struct.iv_ca_delta* @iv_ca_delta_join(%struct.iv_ca_delta* %30, %struct.iv_ca_delta* %31), !dbg !12591
  store %struct.iv_ca_delta* %call12, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12592
  br label %if.end13, !dbg !12593

if.end13:                                         ; preds = %if.then9, %if.end7
  %32 = bitcast %struct.comp_cost* %acost to i64*, !dbg !12594
  %33 = load i64, i64* %32, align 4, !dbg !12594
  %34 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12594
  %35 = load i64, i64* %34, align 4, !dbg !12594
  %call14 = call i32 @compare_costs(i64 %33, i64 %35), !dbg !12594
  %cmp15 = icmp slt i32 %call14, 0, !dbg !12596
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !12597

if.then16:                                        ; preds = %if.end13
  %36 = bitcast %struct.comp_cost* %best_cost to i8*, !dbg !12598
  %37 = bitcast %struct.comp_cost* %acost to i8*, !dbg !12598
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 8, i1 false), !dbg !12598
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %best_delta), !dbg !12600
  %38 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12601
  store %struct.iv_ca_delta* %38, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12602
  br label %if.end17, !dbg !12603

if.else:                                          ; preds = %if.end13
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %act_delta), !dbg !12604
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then16
  br label %for.inc, !dbg !12605

for.inc:                                          ; preds = %if.end17, %if.then6, %if.then
  %39 = load i32, i32* %i, align 4, !dbg !12606
  %inc = add i32 %39, 1, !dbg !12606
  store i32 %inc, i32* %i, align 4, !dbg !12606
  br label %for.cond, !dbg !12607, !llvm.loop !12608

for.end:                                          ; preds = %for.cond
  %40 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12610
  %tobool18 = icmp ne %struct.iv_ca_delta* %40, null, !dbg !12610
  br i1 %tobool18, label %if.end25, label %if.then19, !dbg !12612

if.then19:                                        ; preds = %for.end
  %41 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12613
  %42 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12615
  %call21 = call i64 @iv_ca_prune(%struct.ivopts_data* %41, %struct.iv_ca* %42, %struct.iv_cand* null, %struct.iv_ca_delta** %best_delta), !dbg !12616
  %43 = bitcast %struct.comp_cost* %tmp20 to i64*, !dbg !12616
  store i64 %call21, i64* %43, align 4, !dbg !12616
  %44 = bitcast %struct.comp_cost* %best_cost to i8*, !dbg !12616
  %45 = bitcast %struct.comp_cost* %tmp20 to i8*, !dbg !12616
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %45, i64 8, i1 false), !dbg !12616
  %46 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12617
  %tobool22 = icmp ne %struct.iv_ca_delta* %46, null, !dbg !12617
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !12619

if.then23:                                        ; preds = %if.then19
  store i8 0, i8* %retval, align 1, !dbg !12620
  br label %return, !dbg !12620

if.end24:                                         ; preds = %if.then19
  br label %if.end25, !dbg !12621

if.end25:                                         ; preds = %if.end24, %for.end
  %47 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12622
  %48 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12623
  %49 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12624
  call void @iv_ca_delta_commit(%struct.ivopts_data* %47, %struct.iv_ca* %48, %struct.iv_ca_delta* %49, i8 zeroext 1), !dbg !12625
  %50 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12626
  %call26 = call i64 @iv_ca_cost(%struct.iv_ca* %50), !dbg !12626
  %51 = bitcast %struct.comp_cost* %agg.tmp to i64*, !dbg !12626
  store i64 %call26, i64* %51, align 4, !dbg !12626
  %52 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12626
  %53 = load i64, i64* %52, align 4, !dbg !12626
  %54 = bitcast %struct.comp_cost* %agg.tmp to i64*, !dbg !12626
  %55 = load i64, i64* %54, align 4, !dbg !12626
  %call27 = call i32 @compare_costs(i64 %53, i64 %55), !dbg !12626
  %cmp28 = icmp eq i32 %call27, 0, !dbg !12626
  br i1 %cmp28, label %cond.false, label %cond.true, !dbg !12626

cond.true:                                        ; preds = %if.end25
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !12626
  br label %cond.end, !dbg !12626

cond.false:                                       ; preds = %if.end25
  br label %cond.end, !dbg !12626

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12626
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %best_delta), !dbg !12627
  store i8 1, i8* %retval, align 1, !dbg !12628
  br label %return, !dbg !12628

return:                                           ; preds = %cond.end, %if.then23
  %56 = load i8, i8* %retval, align 1, !dbg !12629
  ret i8 %56, !dbg !12629
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @iv_ca_cost(%struct.iv_ca* %ivs) #0 !dbg !12630 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %ivs.addr = alloca %struct.iv_ca*, align 8
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !12633, metadata !DIExpression()), !dbg !12634
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12635
  %bad_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 1, !dbg !12637
  %1 = load i32, i32* %bad_uses, align 4, !dbg !12637
  %tobool = icmp ne i32 %1, 0, !dbg !12635
  br i1 %tobool, label %if.then, label %if.else, !dbg !12638

if.then:                                          ; preds = %entry
  %2 = bitcast %struct.comp_cost* %retval to i8*, !dbg !12639
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !12639
  br label %return, !dbg !12640

if.else:                                          ; preds = %entry
  %3 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12641
  %cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %3, i32 0, i32 10, !dbg !12642
  %4 = bitcast %struct.comp_cost* %retval to i8*, !dbg !12642
  %5 = bitcast %struct.comp_cost* %cost to i8*, !dbg !12642
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 8 %5, i64 8, i1 false), !dbg !12642
  br label %return, !dbg !12643

return:                                           ; preds = %if.else, %if.then
  %6 = bitcast %struct.comp_cost* %retval to i64*, !dbg !12644
  %7 = load i64, i64* %6, align 4, !dbg !12644
  ret i64 %7, !dbg !12644
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %ivs, %struct.iv_use* %use) #0 !dbg !12645 {
entry:
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !12648, metadata !DIExpression()), !dbg !12649
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !12650, metadata !DIExpression()), !dbg !12651
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12652
  %cand_for_use = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 2, !dbg !12653
  %1 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use, align 8, !dbg !12653
  %2 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12654
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %2, i32 0, i32 0, !dbg !12655
  %3 = load i32, i32* %id, align 8, !dbg !12655
  %idxprom = zext i32 %3 to i64, !dbg !12652
  %arrayidx = getelementptr inbounds %struct.cost_pair*, %struct.cost_pair** %1, i64 %idxprom, !dbg !12652
  %4 = load %struct.cost_pair*, %struct.cost_pair** %arrayidx, align 8, !dbg !12652
  ret %struct.cost_pair* %4, !dbg !12656
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_ca* @iv_ca_new(%struct.ivopts_data* %data) #0 !dbg !12657 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %nw = alloca %struct.iv_ca*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12658, metadata !DIExpression()), !dbg !12659
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %nw, metadata !12660, metadata !DIExpression()), !dbg !12661
  %call = call i8* @xmalloc(i64 72), !dbg !12662
  %0 = bitcast i8* %call to %struct.iv_ca*, !dbg !12662
  store %struct.iv_ca* %0, %struct.iv_ca** %nw, align 8, !dbg !12661
  %1 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12663
  %upto = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %1, i32 0, i32 0, !dbg !12664
  store i32 0, i32* %upto, align 8, !dbg !12665
  %2 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12666
  %bad_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %2, i32 0, i32 1, !dbg !12667
  store i32 0, i32* %bad_uses, align 4, !dbg !12668
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12669
  %call1 = call i32 @n_iv_uses(%struct.ivopts_data* %3), !dbg !12669
  %conv = zext i32 %call1 to i64, !dbg !12669
  %call2 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !12669
  %4 = bitcast i8* %call2 to %struct.cost_pair**, !dbg !12669
  %5 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12670
  %cand_for_use = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %5, i32 0, i32 2, !dbg !12671
  store %struct.cost_pair** %4, %struct.cost_pair*** %cand_for_use, align 8, !dbg !12672
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12673
  %call3 = call i32 @n_iv_cands(%struct.ivopts_data* %6), !dbg !12673
  %conv4 = zext i32 %call3 to i64, !dbg !12673
  %call5 = call i8* @xcalloc(i64 %conv4, i64 4), !dbg !12673
  %7 = bitcast i8* %call5 to i32*, !dbg !12673
  %8 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12674
  %n_cand_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %8, i32 0, i32 3, !dbg !12675
  store i32* %7, i32** %n_cand_uses, align 8, !dbg !12676
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !12677
  %9 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12678
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %9, i32 0, i32 4, !dbg !12679
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %cands, align 8, !dbg !12680
  %10 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12681
  %n_cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %10, i32 0, i32 5, !dbg !12682
  store i32 0, i32* %n_cands, align 8, !dbg !12683
  %11 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12684
  %n_regs = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %11, i32 0, i32 6, !dbg !12685
  store i32 0, i32* %n_regs, align 4, !dbg !12686
  %12 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12687
  %cand_use_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %12, i32 0, i32 7, !dbg !12688
  %13 = bitcast %struct.comp_cost* %cand_use_cost to i8*, !dbg !12689
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !12689
  %14 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12690
  %cand_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %14, i32 0, i32 8, !dbg !12691
  store i32 0, i32* %cand_cost, align 8, !dbg !12692
  %15 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12693
  %max_inv_id = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %15, i32 0, i32 9, !dbg !12693
  %16 = load i32, i32* %max_inv_id, align 8, !dbg !12693
  %add = add i32 %16, 1, !dbg !12693
  %conv7 = zext i32 %add to i64, !dbg !12693
  %call8 = call i8* @xcalloc(i64 %conv7, i64 4), !dbg !12693
  %17 = bitcast i8* %call8 to i32*, !dbg !12693
  %18 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12694
  %n_invariant_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %18, i32 0, i32 9, !dbg !12695
  store i32* %17, i32** %n_invariant_uses, align 8, !dbg !12696
  %19 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12697
  %cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %19, i32 0, i32 10, !dbg !12698
  %20 = bitcast %struct.comp_cost* %cost to i8*, !dbg !12699
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 4 bitcast (%struct.comp_cost* @zero_cost to i8*), i64 8, i1 false), !dbg !12699
  %21 = load %struct.iv_ca*, %struct.iv_ca** %nw, align 8, !dbg !12700
  ret %struct.iv_ca* %21, !dbg !12701
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_add_cand_for(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_use* %use) #0 !dbg !12702 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %best_cost = alloca %struct.comp_cost, align 4
  %act_cost = alloca %struct.comp_cost, align 4
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %cand = alloca %struct.iv_cand*, align 8
  %best_delta = alloca %struct.iv_ca_delta*, align 8
  %act_delta = alloca %struct.iv_ca_delta*, align 8
  %cp = alloca %struct.cost_pair*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  %tmp16 = alloca %struct.comp_cost, align 4
  %tmp44 = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12705, metadata !DIExpression()), !dbg !12706
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !12707, metadata !DIExpression()), !dbg !12708
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !12709, metadata !DIExpression()), !dbg !12710
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %best_cost, metadata !12711, metadata !DIExpression()), !dbg !12712
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %act_cost, metadata !12713, metadata !DIExpression()), !dbg !12714
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12715, metadata !DIExpression()), !dbg !12716
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !12717, metadata !DIExpression()), !dbg !12718
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !12719, metadata !DIExpression()), !dbg !12720
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %best_delta, metadata !12721, metadata !DIExpression()), !dbg !12722
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12722
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %act_delta, metadata !12723, metadata !DIExpression()), !dbg !12724
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp, metadata !12725, metadata !DIExpression()), !dbg !12726
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12727
  %1 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12728
  %2 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12729
  call void @iv_ca_add_use(%struct.ivopts_data* %0, %struct.iv_ca* %1, %struct.iv_use* %2), !dbg !12730
  %3 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12731
  %call = call i64 @iv_ca_cost(%struct.iv_ca* %3), !dbg !12732
  %4 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !12732
  store i64 %call, i64* %4, align 4, !dbg !12732
  %5 = bitcast %struct.comp_cost* %best_cost to i8*, !dbg !12732
  %6 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !12732
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 8, i1 false), !dbg !12732
  %7 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12733
  %8 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12734
  %call1 = call %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %7, %struct.iv_use* %8), !dbg !12735
  store %struct.cost_pair* %call1, %struct.cost_pair** %cp, align 8, !dbg !12736
  %9 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12737
  %tobool = icmp ne %struct.cost_pair* %9, null, !dbg !12737
  br i1 %tobool, label %if.then, label %if.end, !dbg !12739

if.then:                                          ; preds = %entry
  %10 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12740
  %11 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12742
  %call2 = call %struct.iv_ca_delta* @iv_ca_delta_add(%struct.iv_use* %10, %struct.cost_pair* null, %struct.cost_pair* %11, %struct.iv_ca_delta* null), !dbg !12743
  store %struct.iv_ca_delta* %call2, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12744
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12745
  %13 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12746
  %14 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12747
  call void @iv_ca_set_no_cp(%struct.ivopts_data* %12, %struct.iv_ca* %13, %struct.iv_use* %14), !dbg !12748
  br label %if.end, !dbg !12749

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12750
  %important_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %15, i32 0, i32 8, !dbg !12750
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %important_candidates, align 8, !dbg !12750
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %16, i32 0, i32* %i), !dbg !12750
  br label %for.cond, !dbg !12750

for.cond:                                         ; preds = %for.inc, %if.end
  %call3 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !12752
  %tobool4 = icmp ne i8 %call3, 0, !dbg !12750
  br i1 %tobool4, label %for.body, label %for.end, !dbg !12750

for.body:                                         ; preds = %for.cond
  %17 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12754
  %18 = load i32, i32* %i, align 4, !dbg !12756
  %call5 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %17, i32 %18), !dbg !12757
  store %struct.iv_cand* %call5, %struct.iv_cand** %cand, align 8, !dbg !12758
  %19 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12759
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %19, i32 0, i32 6, !dbg !12761
  %20 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !12761
  %base_object = getelementptr inbounds %struct.iv, %struct.iv* %20, i32 0, i32 1, !dbg !12762
  %21 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !12762
  %cmp = icmp ne %union.tree_node* %21, null, !dbg !12763
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !12764

if.then6:                                         ; preds = %for.body
  br label %for.inc, !dbg !12765

if.end7:                                          ; preds = %for.body
  %22 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12766
  %23 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12768
  %call8 = call zeroext i8 @iv_ca_cand_used_p(%struct.iv_ca* %22, %struct.iv_cand* %23), !dbg !12769
  %tobool9 = icmp ne i8 %call8, 0, !dbg !12769
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !12770

if.then10:                                        ; preds = %if.end7
  br label %for.inc, !dbg !12771

if.end11:                                         ; preds = %if.end7
  %24 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12772
  %25 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12773
  %26 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12774
  %call12 = call %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %24, %struct.iv_use* %25, %struct.iv_cand* %26), !dbg !12775
  store %struct.cost_pair* %call12, %struct.cost_pair** %cp, align 8, !dbg !12776
  %27 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12777
  %tobool13 = icmp ne %struct.cost_pair* %27, null, !dbg !12777
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !12779

if.then14:                                        ; preds = %if.end11
  br label %for.inc, !dbg !12780

if.end15:                                         ; preds = %if.end11
  %28 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12781
  %29 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12782
  %30 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12783
  %31 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12784
  call void @iv_ca_set_cp(%struct.ivopts_data* %28, %struct.iv_ca* %29, %struct.iv_use* %30, %struct.cost_pair* %31), !dbg !12785
  %32 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12786
  %33 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12787
  %34 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12788
  %call17 = call i64 @iv_ca_extend(%struct.ivopts_data* %32, %struct.iv_ca* %33, %struct.iv_cand* %34, %struct.iv_ca_delta** %act_delta, i32* null), !dbg !12789
  %35 = bitcast %struct.comp_cost* %tmp16 to i64*, !dbg !12789
  store i64 %call17, i64* %35, align 4, !dbg !12789
  %36 = bitcast %struct.comp_cost* %act_cost to i8*, !dbg !12789
  %37 = bitcast %struct.comp_cost* %tmp16 to i8*, !dbg !12789
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 8, i1 false), !dbg !12789
  %38 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12790
  %39 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12791
  %40 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12792
  call void @iv_ca_set_no_cp(%struct.ivopts_data* %38, %struct.iv_ca* %39, %struct.iv_use* %40), !dbg !12793
  %41 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12794
  %42 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12795
  %43 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12796
  %call18 = call %struct.iv_ca_delta* @iv_ca_delta_add(%struct.iv_use* %41, %struct.cost_pair* null, %struct.cost_pair* %42, %struct.iv_ca_delta* %43), !dbg !12797
  store %struct.iv_ca_delta* %call18, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12798
  %44 = bitcast %struct.comp_cost* %act_cost to i64*, !dbg !12799
  %45 = load i64, i64* %44, align 4, !dbg !12799
  %46 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12799
  %47 = load i64, i64* %46, align 4, !dbg !12799
  %call19 = call i32 @compare_costs(i64 %45, i64 %47), !dbg !12799
  %cmp20 = icmp slt i32 %call19, 0, !dbg !12801
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !12802

if.then21:                                        ; preds = %if.end15
  %48 = bitcast %struct.comp_cost* %best_cost to i8*, !dbg !12803
  %49 = bitcast %struct.comp_cost* %act_cost to i8*, !dbg !12803
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 8, i1 false), !dbg !12803
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %best_delta), !dbg !12805
  %50 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12806
  store %struct.iv_ca_delta* %50, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12807
  br label %if.end22, !dbg !12808

if.else:                                          ; preds = %if.end15
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %act_delta), !dbg !12809
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then21
  br label %for.inc, !dbg !12810

for.inc:                                          ; preds = %if.end22, %if.then14, %if.then10, %if.then6
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !12752
  br label %for.cond, !dbg !12752, !llvm.loop !12811

for.end:                                          ; preds = %for.cond
  %51 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12813
  %52 = load i64, i64* %51, align 4, !dbg !12813
  %call23 = call zeroext i8 @infinite_cost_p(i64 %52), !dbg !12813
  %tobool24 = icmp ne i8 %call23, 0, !dbg !12813
  br i1 %tobool24, label %if.then25, label %if.end59, !dbg !12815

if.then25:                                        ; preds = %for.end
  store i32 0, i32* %i, align 4, !dbg !12816
  br label %for.cond26, !dbg !12819

for.cond26:                                       ; preds = %for.inc57, %if.then25
  %53 = load i32, i32* %i, align 4, !dbg !12820
  %54 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12822
  %n_map_members = getelementptr inbounds %struct.iv_use, %struct.iv_use* %54, i32 0, i32 6, !dbg !12823
  %55 = load i32, i32* %n_map_members, align 8, !dbg !12823
  %cmp27 = icmp ult i32 %53, %55, !dbg !12824
  br i1 %cmp27, label %for.body28, label %for.end58, !dbg !12825

for.body28:                                       ; preds = %for.cond26
  %56 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12826
  %cost_map = getelementptr inbounds %struct.iv_use, %struct.iv_use* %56, i32 0, i32 7, !dbg !12828
  %57 = load %struct.cost_pair*, %struct.cost_pair** %cost_map, align 8, !dbg !12828
  %58 = load i32, i32* %i, align 4, !dbg !12829
  %idx.ext = zext i32 %58 to i64, !dbg !12830
  %add.ptr = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %57, i64 %idx.ext, !dbg !12830
  store %struct.cost_pair* %add.ptr, %struct.cost_pair** %cp, align 8, !dbg !12831
  %59 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12832
  %cand29 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %59, i32 0, i32 0, !dbg !12833
  %60 = load %struct.iv_cand*, %struct.iv_cand** %cand29, align 8, !dbg !12833
  store %struct.iv_cand* %60, %struct.iv_cand** %cand, align 8, !dbg !12834
  %61 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12835
  %tobool30 = icmp ne %struct.iv_cand* %61, null, !dbg !12835
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !12837

if.then31:                                        ; preds = %for.body28
  br label %for.inc57, !dbg !12838

if.end32:                                         ; preds = %for.body28
  %62 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12839
  %important = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %62, i32 0, i32 1, !dbg !12841
  %63 = load i8, i8* %important, align 4, !dbg !12841
  %conv = zext i8 %63 to i32, !dbg !12839
  %tobool33 = icmp ne i32 %conv, 0, !dbg !12839
  br i1 %tobool33, label %land.lhs.true, label %if.end39, !dbg !12842

land.lhs.true:                                    ; preds = %if.end32
  %64 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12843
  %iv34 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %64, i32 0, i32 6, !dbg !12844
  %65 = load %struct.iv*, %struct.iv** %iv34, align 8, !dbg !12844
  %base_object35 = getelementptr inbounds %struct.iv, %struct.iv* %65, i32 0, i32 1, !dbg !12845
  %66 = load %union.tree_node*, %union.tree_node** %base_object35, align 8, !dbg !12845
  %cmp36 = icmp eq %union.tree_node* %66, null, !dbg !12846
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !12847

if.then38:                                        ; preds = %land.lhs.true
  br label %for.inc57, !dbg !12848

if.end39:                                         ; preds = %land.lhs.true, %if.end32
  %67 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12849
  %68 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12851
  %call40 = call zeroext i8 @iv_ca_cand_used_p(%struct.iv_ca* %67, %struct.iv_cand* %68), !dbg !12852
  %tobool41 = icmp ne i8 %call40, 0, !dbg !12852
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !12853

if.then42:                                        ; preds = %if.end39
  br label %for.inc57, !dbg !12854

if.end43:                                         ; preds = %if.end39
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12855
  %69 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12856
  %70 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12857
  %71 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12858
  %72 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12859
  call void @iv_ca_set_cp(%struct.ivopts_data* %69, %struct.iv_ca* %70, %struct.iv_use* %71, %struct.cost_pair* %72), !dbg !12860
  %73 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12861
  %74 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12862
  %75 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !12863
  %call45 = call i64 @iv_ca_extend(%struct.ivopts_data* %73, %struct.iv_ca* %74, %struct.iv_cand* %75, %struct.iv_ca_delta** %act_delta, i32* null), !dbg !12864
  %76 = bitcast %struct.comp_cost* %tmp44 to i64*, !dbg !12864
  store i64 %call45, i64* %76, align 4, !dbg !12864
  %77 = bitcast %struct.comp_cost* %act_cost to i8*, !dbg !12864
  %78 = bitcast %struct.comp_cost* %tmp44 to i8*, !dbg !12864
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 8, i1 false), !dbg !12864
  %79 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12865
  %80 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12866
  %81 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12867
  call void @iv_ca_set_no_cp(%struct.ivopts_data* %79, %struct.iv_ca* %80, %struct.iv_use* %81), !dbg !12868
  %82 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12869
  %83 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12870
  %84 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12871
  %call46 = call %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %83, %struct.iv_use* %84), !dbg !12872
  %85 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12873
  %86 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12874
  %call47 = call %struct.iv_ca_delta* @iv_ca_delta_add(%struct.iv_use* %82, %struct.cost_pair* %call46, %struct.cost_pair* %85, %struct.iv_ca_delta* %86), !dbg !12875
  store %struct.iv_ca_delta* %call47, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12876
  %87 = bitcast %struct.comp_cost* %act_cost to i64*, !dbg !12877
  %88 = load i64, i64* %87, align 4, !dbg !12877
  %89 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12877
  %90 = load i64, i64* %89, align 4, !dbg !12877
  %call48 = call i32 @compare_costs(i64 %88, i64 %90), !dbg !12877
  %cmp49 = icmp slt i32 %call48, 0, !dbg !12879
  br i1 %cmp49, label %if.then51, label %if.else55, !dbg !12880

if.then51:                                        ; preds = %if.end43
  %91 = bitcast %struct.comp_cost* %best_cost to i8*, !dbg !12881
  %92 = bitcast %struct.comp_cost* %act_cost to i8*, !dbg !12881
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %92, i64 8, i1 false), !dbg !12881
  %93 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12883
  %tobool52 = icmp ne %struct.iv_ca_delta* %93, null, !dbg !12883
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !12885

if.then53:                                        ; preds = %if.then51
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %best_delta), !dbg !12886
  br label %if.end54, !dbg !12886

if.end54:                                         ; preds = %if.then53, %if.then51
  %94 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !12887
  store %struct.iv_ca_delta* %94, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12888
  br label %if.end56, !dbg !12889

if.else55:                                        ; preds = %if.end43
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %act_delta), !dbg !12890
  br label %if.end56

if.end56:                                         ; preds = %if.else55, %if.end54
  br label %for.inc57, !dbg !12891

for.inc57:                                        ; preds = %if.end56, %if.then42, %if.then38, %if.then31
  %95 = load i32, i32* %i, align 4, !dbg !12892
  %inc = add i32 %95, 1, !dbg !12892
  store i32 %inc, i32* %i, align 4, !dbg !12892
  br label %for.cond26, !dbg !12893, !llvm.loop !12894

for.end58:                                        ; preds = %for.cond26
  br label %if.end59, !dbg !12896

if.end59:                                         ; preds = %for.end58, %for.end
  %96 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12897
  %97 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12898
  %98 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !12899
  call void @iv_ca_delta_commit(%struct.ivopts_data* %96, %struct.iv_ca* %97, %struct.iv_ca_delta* %98, i8 zeroext 1), !dbg !12900
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %best_delta), !dbg !12901
  %99 = bitcast %struct.comp_cost* %best_cost to i64*, !dbg !12902
  %100 = load i64, i64* %99, align 4, !dbg !12902
  %call60 = call zeroext i8 @infinite_cost_p(i64 %100), !dbg !12902
  %tobool61 = icmp ne i8 %call60, 0, !dbg !12903
  %lnot = xor i1 %tobool61, true, !dbg !12903
  %lnot.ext = zext i1 %lnot to i32, !dbg !12903
  %conv62 = trunc i32 %lnot.ext to i8, !dbg !12903
  ret i8 %conv62, !dbg !12904
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_add_use(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_use* %use) #0 !dbg !12905 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %best_cp = alloca %struct.cost_pair*, align 8
  %cp = alloca %struct.cost_pair*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !12908, metadata !DIExpression()), !dbg !12909
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !12910, metadata !DIExpression()), !dbg !12911
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !12912, metadata !DIExpression()), !dbg !12913
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %best_cp, metadata !12914, metadata !DIExpression()), !dbg !12915
  store %struct.cost_pair* null, %struct.cost_pair** %best_cp, align 8, !dbg !12915
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp, metadata !12916, metadata !DIExpression()), !dbg !12917
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !12918, metadata !DIExpression()), !dbg !12919
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12920, metadata !DIExpression()), !dbg !12921
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12922
  %upto = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 0, !dbg !12922
  %1 = load i32, i32* %upto, align 8, !dbg !12922
  %2 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12922
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %2, i32 0, i32 0, !dbg !12922
  %3 = load i32, i32* %id, align 8, !dbg !12922
  %cmp = icmp uge i32 %1, %3, !dbg !12922
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12922

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 4657, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !12922
  br label %cond.end, !dbg !12922

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12922
  %4 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12923
  %upto1 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %4, i32 0, i32 0, !dbg !12925
  %5 = load i32, i32* %upto1, align 8, !dbg !12925
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12926
  %id2 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %6, i32 0, i32 0, !dbg !12927
  %7 = load i32, i32* %id2, align 8, !dbg !12927
  %cmp3 = icmp eq i32 %5, %7, !dbg !12928
  br i1 %cmp3, label %if.then, label %if.end, !dbg !12929

if.then:                                          ; preds = %cond.end
  %8 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12930
  %upto4 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %8, i32 0, i32 0, !dbg !12932
  %9 = load i32, i32* %upto4, align 8, !dbg !12933
  %inc = add i32 %9, 1, !dbg !12933
  store i32 %inc, i32* %upto4, align 8, !dbg !12933
  %10 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12934
  %bad_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %10, i32 0, i32 1, !dbg !12935
  %11 = load i32, i32* %bad_uses, align 4, !dbg !12936
  %inc5 = add i32 %11, 1, !dbg !12936
  store i32 %inc5, i32* %bad_uses, align 4, !dbg !12936
  br label %if.end, !dbg !12937

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12938
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %12, i32 0, i32 4, !dbg !12938
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !12938
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %13, i32 0, i32* %i), !dbg !12938
  br label %for.cond, !dbg !12938

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !12940
  %tobool = icmp ne i8 %call, 0, !dbg !12938
  br i1 %tobool, label %for.body, label %for.end, !dbg !12938

for.body:                                         ; preds = %for.cond
  %14 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12942
  %15 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12944
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12945
  %17 = load i32, i32* %i, align 4, !dbg !12946
  %call6 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %16, i32 %17), !dbg !12947
  %call7 = call %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %14, %struct.iv_use* %15, %struct.iv_cand* %call6), !dbg !12948
  store %struct.cost_pair* %call7, %struct.cost_pair** %cp, align 8, !dbg !12949
  %18 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12950
  %19 = load %struct.cost_pair*, %struct.cost_pair** %best_cp, align 8, !dbg !12952
  %call8 = call zeroext i8 @cheaper_cost_pair(%struct.cost_pair* %18, %struct.cost_pair* %19), !dbg !12953
  %tobool9 = icmp ne i8 %call8, 0, !dbg !12953
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !12954

if.then10:                                        ; preds = %for.body
  %20 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !12955
  store %struct.cost_pair* %20, %struct.cost_pair** %best_cp, align 8, !dbg !12956
  br label %if.end11, !dbg !12957

if.end11:                                         ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !12958

for.inc:                                          ; preds = %if.end11
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !12940
  br label %for.cond, !dbg !12940, !llvm.loop !12959

for.end:                                          ; preds = %for.cond
  %21 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !12961
  %22 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !12962
  %23 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12963
  %24 = load %struct.cost_pair*, %struct.cost_pair** %best_cp, align 8, !dbg !12964
  call void @iv_ca_set_cp(%struct.ivopts_data* %21, %struct.iv_ca* %22, %struct.iv_use* %23, %struct.cost_pair* %24), !dbg !12965
  ret void, !dbg !12966
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_ca_delta* @iv_ca_delta_add(%struct.iv_use* %use, %struct.cost_pair* %old_cp, %struct.cost_pair* %new_cp, %struct.iv_ca_delta* %next_change) #0 !dbg !12967 {
entry:
  %use.addr = alloca %struct.iv_use*, align 8
  %old_cp.addr = alloca %struct.cost_pair*, align 8
  %new_cp.addr = alloca %struct.cost_pair*, align 8
  %next_change.addr = alloca %struct.iv_ca_delta*, align 8
  %change = alloca %struct.iv_ca_delta*, align 8
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !12970, metadata !DIExpression()), !dbg !12971
  store %struct.cost_pair* %old_cp, %struct.cost_pair** %old_cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %old_cp.addr, metadata !12972, metadata !DIExpression()), !dbg !12973
  store %struct.cost_pair* %new_cp, %struct.cost_pair** %new_cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %new_cp.addr, metadata !12974, metadata !DIExpression()), !dbg !12975
  store %struct.iv_ca_delta* %next_change, %struct.iv_ca_delta** %next_change.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %next_change.addr, metadata !12976, metadata !DIExpression()), !dbg !12977
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %change, metadata !12978, metadata !DIExpression()), !dbg !12979
  %call = call i8* @xmalloc(i64 32), !dbg !12980
  %0 = bitcast i8* %call to %struct.iv_ca_delta*, !dbg !12980
  store %struct.iv_ca_delta* %0, %struct.iv_ca_delta** %change, align 8, !dbg !12979
  %1 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !12981
  %2 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %change, align 8, !dbg !12982
  %use1 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %2, i32 0, i32 0, !dbg !12983
  store %struct.iv_use* %1, %struct.iv_use** %use1, align 8, !dbg !12984
  %3 = load %struct.cost_pair*, %struct.cost_pair** %old_cp.addr, align 8, !dbg !12985
  %4 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %change, align 8, !dbg !12986
  %old_cp2 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %4, i32 0, i32 1, !dbg !12987
  store %struct.cost_pair* %3, %struct.cost_pair** %old_cp2, align 8, !dbg !12988
  %5 = load %struct.cost_pair*, %struct.cost_pair** %new_cp.addr, align 8, !dbg !12989
  %6 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %change, align 8, !dbg !12990
  %new_cp3 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %6, i32 0, i32 2, !dbg !12991
  store %struct.cost_pair* %5, %struct.cost_pair** %new_cp3, align 8, !dbg !12992
  %7 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next_change.addr, align 8, !dbg !12993
  %8 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %change, align 8, !dbg !12994
  %next_change4 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %8, i32 0, i32 3, !dbg !12995
  store %struct.iv_ca_delta* %7, %struct.iv_ca_delta** %next_change4, align 8, !dbg !12996
  %9 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %change, align 8, !dbg !12997
  ret %struct.iv_ca_delta* %9, !dbg !12998
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_set_no_cp(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_use* %use) #0 !dbg !12999 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %uid = alloca i32, align 4
  %cid = alloca i32, align 4
  %cp = alloca %struct.cost_pair*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13000, metadata !DIExpression()), !dbg !13001
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13002, metadata !DIExpression()), !dbg !13003
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !13004, metadata !DIExpression()), !dbg !13005
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !13006, metadata !DIExpression()), !dbg !13007
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13008
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 0, !dbg !13009
  %1 = load i32, i32* %id, align 8, !dbg !13009
  store i32 %1, i32* %uid, align 4, !dbg !13007
  call void @llvm.dbg.declare(metadata i32* %cid, metadata !13010, metadata !DIExpression()), !dbg !13011
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp, metadata !13012, metadata !DIExpression()), !dbg !13013
  %2 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13014
  %cand_for_use = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %2, i32 0, i32 2, !dbg !13015
  %3 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use, align 8, !dbg !13015
  %4 = load i32, i32* %uid, align 4, !dbg !13016
  %idxprom = zext i32 %4 to i64, !dbg !13014
  %arrayidx = getelementptr inbounds %struct.cost_pair*, %struct.cost_pair** %3, i64 %idxprom, !dbg !13014
  %5 = load %struct.cost_pair*, %struct.cost_pair** %arrayidx, align 8, !dbg !13014
  store %struct.cost_pair* %5, %struct.cost_pair** %cp, align 8, !dbg !13017
  %6 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13018
  %tobool = icmp ne %struct.cost_pair* %6, null, !dbg !13018
  br i1 %tobool, label %if.end, label %if.then, !dbg !13020

if.then:                                          ; preds = %entry
  br label %return, !dbg !13021

if.end:                                           ; preds = %entry
  %7 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13022
  %cand = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %7, i32 0, i32 0, !dbg !13023
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !13023
  %id1 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %8, i32 0, i32 0, !dbg !13024
  %9 = load i32, i32* %id1, align 8, !dbg !13024
  store i32 %9, i32* %cid, align 4, !dbg !13025
  %10 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13026
  %bad_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %10, i32 0, i32 1, !dbg !13027
  %11 = load i32, i32* %bad_uses, align 4, !dbg !13028
  %inc = add i32 %11, 1, !dbg !13028
  store i32 %inc, i32* %bad_uses, align 4, !dbg !13028
  %12 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13029
  %cand_for_use2 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %12, i32 0, i32 2, !dbg !13030
  %13 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use2, align 8, !dbg !13030
  %14 = load i32, i32* %uid, align 4, !dbg !13031
  %idxprom3 = zext i32 %14 to i64, !dbg !13029
  %arrayidx4 = getelementptr inbounds %struct.cost_pair*, %struct.cost_pair** %13, i64 %idxprom3, !dbg !13029
  store %struct.cost_pair* null, %struct.cost_pair** %arrayidx4, align 8, !dbg !13032
  %15 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13033
  %n_cand_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %15, i32 0, i32 3, !dbg !13034
  %16 = load i32*, i32** %n_cand_uses, align 8, !dbg !13034
  %17 = load i32, i32* %cid, align 4, !dbg !13035
  %idxprom5 = zext i32 %17 to i64, !dbg !13033
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i64 %idxprom5, !dbg !13033
  %18 = load i32, i32* %arrayidx6, align 4, !dbg !13036
  %dec = add i32 %18, -1, !dbg !13036
  store i32 %dec, i32* %arrayidx6, align 4, !dbg !13036
  %19 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13037
  %n_cand_uses7 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %19, i32 0, i32 3, !dbg !13039
  %20 = load i32*, i32** %n_cand_uses7, align 8, !dbg !13039
  %21 = load i32, i32* %cid, align 4, !dbg !13040
  %idxprom8 = zext i32 %21 to i64, !dbg !13037
  %arrayidx9 = getelementptr inbounds i32, i32* %20, i64 %idxprom8, !dbg !13037
  %22 = load i32, i32* %arrayidx9, align 4, !dbg !13037
  %cmp = icmp eq i32 %22, 0, !dbg !13041
  br i1 %cmp, label %if.then10, label %if.end19, !dbg !13042

if.then10:                                        ; preds = %if.end
  %23 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13043
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %23, i32 0, i32 4, !dbg !13045
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !13045
  %25 = load i32, i32* %cid, align 4, !dbg !13046
  %call = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %24, i32 %25), !dbg !13047
  %26 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13048
  %cand11 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %26, i32 0, i32 0, !dbg !13050
  %27 = load %struct.iv_cand*, %struct.iv_cand** %cand11, align 8, !dbg !13050
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %27, i32 0, i32 6, !dbg !13051
  %28 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !13051
  %tobool12 = icmp ne %struct.iv* %28, null, !dbg !13048
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !13052

if.then13:                                        ; preds = %if.then10
  %29 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13053
  %n_regs = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %29, i32 0, i32 6, !dbg !13054
  %30 = load i32, i32* %n_regs, align 4, !dbg !13055
  %dec14 = add i32 %30, -1, !dbg !13055
  store i32 %dec14, i32* %n_regs, align 4, !dbg !13055
  br label %if.end15, !dbg !13053

if.end15:                                         ; preds = %if.then13, %if.then10
  %31 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13056
  %n_cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %31, i32 0, i32 5, !dbg !13057
  %32 = load i32, i32* %n_cands, align 8, !dbg !13058
  %dec16 = add i32 %32, -1, !dbg !13058
  store i32 %dec16, i32* %n_cands, align 8, !dbg !13058
  %33 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13059
  %cand17 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %33, i32 0, i32 0, !dbg !13060
  %34 = load %struct.iv_cand*, %struct.iv_cand** %cand17, align 8, !dbg !13060
  %cost = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %34, i32 0, i32 7, !dbg !13061
  %35 = load i32, i32* %cost, align 8, !dbg !13061
  %36 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13062
  %cand_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %36, i32 0, i32 8, !dbg !13063
  %37 = load i32, i32* %cand_cost, align 8, !dbg !13064
  %sub = sub i32 %37, %35, !dbg !13064
  store i32 %sub, i32* %cand_cost, align 8, !dbg !13064
  %38 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13065
  %39 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13066
  %cand18 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %39, i32 0, i32 0, !dbg !13067
  %40 = load %struct.iv_cand*, %struct.iv_cand** %cand18, align 8, !dbg !13067
  %depends_on = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %40, i32 0, i32 10, !dbg !13068
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !13068
  call void @iv_ca_set_remove_invariants(%struct.iv_ca* %38, %struct.bitmap_head_def* %41), !dbg !13069
  br label %if.end19, !dbg !13070

if.end19:                                         ; preds = %if.end15, %if.end
  %42 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13071
  %cand_use_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %42, i32 0, i32 7, !dbg !13072
  %43 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13073
  %cand_use_cost20 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %43, i32 0, i32 7, !dbg !13074
  %44 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13075
  %cost21 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %44, i32 0, i32 1, !dbg !13076
  %45 = bitcast %struct.comp_cost* %cand_use_cost20 to i64*, !dbg !13077
  %46 = load i64, i64* %45, align 8, !dbg !13077
  %47 = bitcast %struct.comp_cost* %cost21 to i64*, !dbg !13077
  %48 = load i64, i64* %47, align 8, !dbg !13077
  %call22 = call i64 @sub_costs(i64 %46, i64 %48), !dbg !13077
  %49 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !13077
  store i64 %call22, i64* %49, align 4, !dbg !13077
  %50 = bitcast %struct.comp_cost* %cand_use_cost to i8*, !dbg !13077
  %51 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !13077
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 4 %51, i64 8, i1 false), !dbg !13077
  %52 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13078
  %53 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13079
  %depends_on23 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %53, i32 0, i32 2, !dbg !13080
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on23, align 8, !dbg !13080
  call void @iv_ca_set_remove_invariants(%struct.iv_ca* %52, %struct.bitmap_head_def* %54), !dbg !13081
  %55 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13082
  %56 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13083
  call void @iv_ca_recount_cost(%struct.ivopts_data* %55, %struct.iv_ca* %56), !dbg !13084
  br label %return, !dbg !13085

return:                                           ; preds = %if.end19, %if.then
  ret void, !dbg !13085
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @iv_ca_cand_used_p(%struct.iv_ca* %ivs, %struct.iv_cand* %cand) #0 !dbg !13086 {
entry:
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13089, metadata !DIExpression()), !dbg !13090
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !13091, metadata !DIExpression()), !dbg !13092
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13093
  %n_cand_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 3, !dbg !13094
  %1 = load i32*, i32** %n_cand_uses, align 8, !dbg !13094
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13095
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %2, i32 0, i32 0, !dbg !13096
  %3 = load i32, i32* %id, align 8, !dbg !13096
  %idxprom = zext i32 %3 to i64, !dbg !13093
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !13093
  %4 = load i32, i32* %arrayidx, align 4, !dbg !13093
  %cmp = icmp ugt i32 %4, 0, !dbg !13097
  %conv = zext i1 %cmp to i32, !dbg !13097
  %conv1 = trunc i32 %conv to i8, !dbg !13093
  ret i8 %conv1, !dbg !13098
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !13099 {
entry:
  %retval = alloca %struct.cost_pair*, align 8
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %i = alloca i32, align 4
  %s = alloca i32, align 4
  %ret = alloca %struct.cost_pair*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13102, metadata !DIExpression()), !dbg !13103
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !13104, metadata !DIExpression()), !dbg !13105
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !13106, metadata !DIExpression()), !dbg !13107
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13108, metadata !DIExpression()), !dbg !13109
  call void @llvm.dbg.declare(metadata i32* %s, metadata !13110, metadata !DIExpression()), !dbg !13111
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %ret, metadata !13112, metadata !DIExpression()), !dbg !13113
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13114
  %tobool = icmp ne %struct.iv_cand* %0, null, !dbg !13114
  br i1 %tobool, label %if.end, label %if.then, !dbg !13116

if.then:                                          ; preds = %entry
  store %struct.cost_pair* null, %struct.cost_pair** %retval, align 8, !dbg !13117
  br label %return, !dbg !13117

if.end:                                           ; preds = %entry
  %1 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13118
  %consider_all_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %1, i32 0, i32 10, !dbg !13120
  %2 = load i8, i8* %consider_all_candidates, align 4, !dbg !13120
  %tobool1 = icmp ne i8 %2, 0, !dbg !13118
  br i1 %tobool1, label %if.then2, label %if.end7, !dbg !13121

if.then2:                                         ; preds = %if.end
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13122
  %cost_map = getelementptr inbounds %struct.iv_use, %struct.iv_use* %3, i32 0, i32 7, !dbg !13124
  %4 = load %struct.cost_pair*, %struct.cost_pair** %cost_map, align 8, !dbg !13124
  %5 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13125
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %5, i32 0, i32 0, !dbg !13126
  %6 = load i32, i32* %id, align 8, !dbg !13126
  %idx.ext = zext i32 %6 to i64, !dbg !13127
  %add.ptr = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %4, i64 %idx.ext, !dbg !13127
  store %struct.cost_pair* %add.ptr, %struct.cost_pair** %ret, align 8, !dbg !13128
  %7 = load %struct.cost_pair*, %struct.cost_pair** %ret, align 8, !dbg !13129
  %cand3 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %7, i32 0, i32 0, !dbg !13131
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand3, align 8, !dbg !13131
  %tobool4 = icmp ne %struct.iv_cand* %8, null, !dbg !13129
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !13132

if.then5:                                         ; preds = %if.then2
  store %struct.cost_pair* null, %struct.cost_pair** %retval, align 8, !dbg !13133
  br label %return, !dbg !13133

if.end6:                                          ; preds = %if.then2
  %9 = load %struct.cost_pair*, %struct.cost_pair** %ret, align 8, !dbg !13134
  store %struct.cost_pair* %9, %struct.cost_pair** %retval, align 8, !dbg !13135
  br label %return, !dbg !13135

if.end7:                                          ; preds = %if.end
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13136
  %id8 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %10, i32 0, i32 0, !dbg !13137
  %11 = load i32, i32* %id8, align 8, !dbg !13137
  %12 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13138
  %n_map_members = getelementptr inbounds %struct.iv_use, %struct.iv_use* %12, i32 0, i32 6, !dbg !13139
  %13 = load i32, i32* %n_map_members, align 8, !dbg !13139
  %sub = sub i32 %13, 1, !dbg !13140
  %and = and i32 %11, %sub, !dbg !13141
  store i32 %and, i32* %s, align 4, !dbg !13142
  %14 = load i32, i32* %s, align 4, !dbg !13143
  store i32 %14, i32* %i, align 4, !dbg !13145
  br label %for.cond, !dbg !13146

for.cond:                                         ; preds = %for.inc, %if.end7
  %15 = load i32, i32* %i, align 4, !dbg !13147
  %16 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13149
  %n_map_members9 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %16, i32 0, i32 6, !dbg !13150
  %17 = load i32, i32* %n_map_members9, align 8, !dbg !13150
  %cmp = icmp ult i32 %15, %17, !dbg !13151
  br i1 %cmp, label %for.body, label %for.end, !dbg !13152

for.body:                                         ; preds = %for.cond
  %18 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13153
  %cost_map10 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %18, i32 0, i32 7, !dbg !13155
  %19 = load %struct.cost_pair*, %struct.cost_pair** %cost_map10, align 8, !dbg !13155
  %20 = load i32, i32* %i, align 4, !dbg !13156
  %idxprom = zext i32 %20 to i64, !dbg !13153
  %arrayidx = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %19, i64 %idxprom, !dbg !13153
  %cand11 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx, i32 0, i32 0, !dbg !13157
  %21 = load %struct.iv_cand*, %struct.iv_cand** %cand11, align 8, !dbg !13157
  %22 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13158
  %cmp12 = icmp eq %struct.iv_cand* %21, %22, !dbg !13159
  br i1 %cmp12, label %if.then13, label %if.end17, !dbg !13160

if.then13:                                        ; preds = %for.body
  %23 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13161
  %cost_map14 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %23, i32 0, i32 7, !dbg !13162
  %24 = load %struct.cost_pair*, %struct.cost_pair** %cost_map14, align 8, !dbg !13162
  %25 = load i32, i32* %i, align 4, !dbg !13163
  %idx.ext15 = zext i32 %25 to i64, !dbg !13164
  %add.ptr16 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %24, i64 %idx.ext15, !dbg !13164
  store %struct.cost_pair* %add.ptr16, %struct.cost_pair** %retval, align 8, !dbg !13165
  br label %return, !dbg !13165

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !13158

for.inc:                                          ; preds = %if.end17
  %26 = load i32, i32* %i, align 4, !dbg !13166
  %inc = add i32 %26, 1, !dbg !13166
  store i32 %inc, i32* %i, align 4, !dbg !13166
  br label %for.cond, !dbg !13167, !llvm.loop !13168

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !13170
  br label %for.cond18, !dbg !13172

for.cond18:                                       ; preds = %for.inc31, %for.end
  %27 = load i32, i32* %i, align 4, !dbg !13173
  %28 = load i32, i32* %s, align 4, !dbg !13175
  %cmp19 = icmp ult i32 %27, %28, !dbg !13176
  br i1 %cmp19, label %for.body20, label %for.end33, !dbg !13177

for.body20:                                       ; preds = %for.cond18
  %29 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13178
  %cost_map21 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %29, i32 0, i32 7, !dbg !13180
  %30 = load %struct.cost_pair*, %struct.cost_pair** %cost_map21, align 8, !dbg !13180
  %31 = load i32, i32* %i, align 4, !dbg !13181
  %idxprom22 = zext i32 %31 to i64, !dbg !13178
  %arrayidx23 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %30, i64 %idxprom22, !dbg !13178
  %cand24 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %arrayidx23, i32 0, i32 0, !dbg !13182
  %32 = load %struct.iv_cand*, %struct.iv_cand** %cand24, align 8, !dbg !13182
  %33 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13183
  %cmp25 = icmp eq %struct.iv_cand* %32, %33, !dbg !13184
  br i1 %cmp25, label %if.then26, label %if.end30, !dbg !13185

if.then26:                                        ; preds = %for.body20
  %34 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13186
  %cost_map27 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %34, i32 0, i32 7, !dbg !13187
  %35 = load %struct.cost_pair*, %struct.cost_pair** %cost_map27, align 8, !dbg !13187
  %36 = load i32, i32* %i, align 4, !dbg !13188
  %idx.ext28 = zext i32 %36 to i64, !dbg !13189
  %add.ptr29 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %35, i64 %idx.ext28, !dbg !13189
  store %struct.cost_pair* %add.ptr29, %struct.cost_pair** %retval, align 8, !dbg !13190
  br label %return, !dbg !13190

if.end30:                                         ; preds = %for.body20
  br label %for.inc31, !dbg !13183

for.inc31:                                        ; preds = %if.end30
  %37 = load i32, i32* %i, align 4, !dbg !13191
  %inc32 = add i32 %37, 1, !dbg !13191
  store i32 %inc32, i32* %i, align 4, !dbg !13191
  br label %for.cond18, !dbg !13192, !llvm.loop !13193

for.end33:                                        ; preds = %for.cond18
  store %struct.cost_pair* null, %struct.cost_pair** %retval, align 8, !dbg !13195
  br label %return, !dbg !13195

return:                                           ; preds = %for.end33, %if.then26, %if.then13, %if.end6, %if.then5, %if.then
  %38 = load %struct.cost_pair*, %struct.cost_pair** %retval, align 8, !dbg !13196
  ret %struct.cost_pair* %38, !dbg !13196
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_set_cp(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_use* %use, %struct.cost_pair* %cp) #0 !dbg !13197 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cp.addr = alloca %struct.cost_pair*, align 8
  %uid = alloca i32, align 4
  %cid = alloca i32, align 4
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13200, metadata !DIExpression()), !dbg !13201
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13202, metadata !DIExpression()), !dbg !13203
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !13204, metadata !DIExpression()), !dbg !13205
  store %struct.cost_pair* %cp, %struct.cost_pair** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp.addr, metadata !13206, metadata !DIExpression()), !dbg !13207
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !13208, metadata !DIExpression()), !dbg !13209
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13210
  %id = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 0, !dbg !13211
  %1 = load i32, i32* %id, align 8, !dbg !13211
  store i32 %1, i32* %uid, align 4, !dbg !13209
  call void @llvm.dbg.declare(metadata i32* %cid, metadata !13212, metadata !DIExpression()), !dbg !13213
  %2 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13214
  %cand_for_use = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %2, i32 0, i32 2, !dbg !13216
  %3 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use, align 8, !dbg !13216
  %4 = load i32, i32* %uid, align 4, !dbg !13217
  %idxprom = zext i32 %4 to i64, !dbg !13214
  %arrayidx = getelementptr inbounds %struct.cost_pair*, %struct.cost_pair** %3, i64 %idxprom, !dbg !13214
  %5 = load %struct.cost_pair*, %struct.cost_pair** %arrayidx, align 8, !dbg !13214
  %6 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13218
  %cmp = icmp eq %struct.cost_pair* %5, %6, !dbg !13219
  br i1 %cmp, label %if.then, label %if.end, !dbg !13220

if.then:                                          ; preds = %entry
  br label %if.end32, !dbg !13221

if.end:                                           ; preds = %entry
  %7 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13222
  %cand_for_use1 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %7, i32 0, i32 2, !dbg !13224
  %8 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use1, align 8, !dbg !13224
  %9 = load i32, i32* %uid, align 4, !dbg !13225
  %idxprom2 = zext i32 %9 to i64, !dbg !13222
  %arrayidx3 = getelementptr inbounds %struct.cost_pair*, %struct.cost_pair** %8, i64 %idxprom2, !dbg !13222
  %10 = load %struct.cost_pair*, %struct.cost_pair** %arrayidx3, align 8, !dbg !13222
  %tobool = icmp ne %struct.cost_pair* %10, null, !dbg !13222
  br i1 %tobool, label %if.then4, label %if.end5, !dbg !13226

if.then4:                                         ; preds = %if.end
  %11 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13227
  %12 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13228
  %13 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !13229
  call void @iv_ca_set_no_cp(%struct.ivopts_data* %11, %struct.iv_ca* %12, %struct.iv_use* %13), !dbg !13230
  br label %if.end5, !dbg !13230

if.end5:                                          ; preds = %if.then4, %if.end
  %14 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13231
  %tobool6 = icmp ne %struct.cost_pair* %14, null, !dbg !13231
  br i1 %tobool6, label %if.then7, label %if.end32, !dbg !13233

if.then7:                                         ; preds = %if.end5
  %15 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13234
  %cand = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %15, i32 0, i32 0, !dbg !13236
  %16 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !13236
  %id8 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %16, i32 0, i32 0, !dbg !13237
  %17 = load i32, i32* %id8, align 8, !dbg !13237
  store i32 %17, i32* %cid, align 4, !dbg !13238
  %18 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13239
  %bad_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %18, i32 0, i32 1, !dbg !13240
  %19 = load i32, i32* %bad_uses, align 4, !dbg !13241
  %dec = add i32 %19, -1, !dbg !13241
  store i32 %dec, i32* %bad_uses, align 4, !dbg !13241
  %20 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13242
  %21 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13243
  %cand_for_use9 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %21, i32 0, i32 2, !dbg !13244
  %22 = load %struct.cost_pair**, %struct.cost_pair*** %cand_for_use9, align 8, !dbg !13244
  %23 = load i32, i32* %uid, align 4, !dbg !13245
  %idxprom10 = zext i32 %23 to i64, !dbg !13243
  %arrayidx11 = getelementptr inbounds %struct.cost_pair*, %struct.cost_pair** %22, i64 %idxprom10, !dbg !13243
  store %struct.cost_pair* %20, %struct.cost_pair** %arrayidx11, align 8, !dbg !13246
  %24 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13247
  %n_cand_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %24, i32 0, i32 3, !dbg !13248
  %25 = load i32*, i32** %n_cand_uses, align 8, !dbg !13248
  %26 = load i32, i32* %cid, align 4, !dbg !13249
  %idxprom12 = zext i32 %26 to i64, !dbg !13247
  %arrayidx13 = getelementptr inbounds i32, i32* %25, i64 %idxprom12, !dbg !13247
  %27 = load i32, i32* %arrayidx13, align 4, !dbg !13250
  %inc = add i32 %27, 1, !dbg !13250
  store i32 %inc, i32* %arrayidx13, align 4, !dbg !13250
  %28 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13251
  %n_cand_uses14 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %28, i32 0, i32 3, !dbg !13253
  %29 = load i32*, i32** %n_cand_uses14, align 8, !dbg !13253
  %30 = load i32, i32* %cid, align 4, !dbg !13254
  %idxprom15 = zext i32 %30 to i64, !dbg !13251
  %arrayidx16 = getelementptr inbounds i32, i32* %29, i64 %idxprom15, !dbg !13251
  %31 = load i32, i32* %arrayidx16, align 4, !dbg !13251
  %cmp17 = icmp eq i32 %31, 1, !dbg !13255
  br i1 %cmp17, label %if.then18, label %if.end27, !dbg !13256

if.then18:                                        ; preds = %if.then7
  %32 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13257
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %32, i32 0, i32 4, !dbg !13259
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !13259
  %34 = load i32, i32* %cid, align 4, !dbg !13260
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %33, i32 %34), !dbg !13261
  %35 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13262
  %cand19 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %35, i32 0, i32 0, !dbg !13264
  %36 = load %struct.iv_cand*, %struct.iv_cand** %cand19, align 8, !dbg !13264
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %36, i32 0, i32 6, !dbg !13265
  %37 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !13265
  %tobool20 = icmp ne %struct.iv* %37, null, !dbg !13262
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !13266

if.then21:                                        ; preds = %if.then18
  %38 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13267
  %n_regs = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %38, i32 0, i32 6, !dbg !13268
  %39 = load i32, i32* %n_regs, align 4, !dbg !13269
  %inc22 = add i32 %39, 1, !dbg !13269
  store i32 %inc22, i32* %n_regs, align 4, !dbg !13269
  br label %if.end23, !dbg !13267

if.end23:                                         ; preds = %if.then21, %if.then18
  %40 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13270
  %n_cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %40, i32 0, i32 5, !dbg !13271
  %41 = load i32, i32* %n_cands, align 8, !dbg !13272
  %inc24 = add i32 %41, 1, !dbg !13272
  store i32 %inc24, i32* %n_cands, align 8, !dbg !13272
  %42 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13273
  %cand25 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %42, i32 0, i32 0, !dbg !13274
  %43 = load %struct.iv_cand*, %struct.iv_cand** %cand25, align 8, !dbg !13274
  %cost = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %43, i32 0, i32 7, !dbg !13275
  %44 = load i32, i32* %cost, align 8, !dbg !13275
  %45 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13276
  %cand_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %45, i32 0, i32 8, !dbg !13277
  %46 = load i32, i32* %cand_cost, align 8, !dbg !13278
  %add = add i32 %46, %44, !dbg !13278
  store i32 %add, i32* %cand_cost, align 8, !dbg !13278
  %47 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13279
  %48 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13280
  %cand26 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %48, i32 0, i32 0, !dbg !13281
  %49 = load %struct.iv_cand*, %struct.iv_cand** %cand26, align 8, !dbg !13281
  %depends_on = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %49, i32 0, i32 10, !dbg !13282
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !13282
  call void @iv_ca_set_add_invariants(%struct.iv_ca* %47, %struct.bitmap_head_def* %50), !dbg !13283
  br label %if.end27, !dbg !13284

if.end27:                                         ; preds = %if.end23, %if.then7
  %51 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13285
  %cand_use_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %51, i32 0, i32 7, !dbg !13286
  %52 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13287
  %cand_use_cost28 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %52, i32 0, i32 7, !dbg !13288
  %53 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13289
  %cost29 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %53, i32 0, i32 1, !dbg !13290
  %54 = bitcast %struct.comp_cost* %cand_use_cost28 to i64*, !dbg !13291
  %55 = load i64, i64* %54, align 8, !dbg !13291
  %56 = bitcast %struct.comp_cost* %cost29 to i64*, !dbg !13291
  %57 = load i64, i64* %56, align 8, !dbg !13291
  %call30 = call i64 @add_costs(i64 %55, i64 %57), !dbg !13291
  %58 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !13291
  store i64 %call30, i64* %58, align 4, !dbg !13291
  %59 = bitcast %struct.comp_cost* %cand_use_cost to i8*, !dbg !13291
  %60 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !13291
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 4 %60, i64 8, i1 false), !dbg !13291
  %61 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13292
  %62 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13293
  %depends_on31 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %62, i32 0, i32 2, !dbg !13294
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on31, align 8, !dbg !13294
  call void @iv_ca_set_add_invariants(%struct.iv_ca* %61, %struct.bitmap_head_def* %63), !dbg !13295
  %64 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13296
  %65 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13297
  call void @iv_ca_recount_cost(%struct.ivopts_data* %64, %struct.iv_ca* %65), !dbg !13298
  br label %if.end32, !dbg !13299

if.end32:                                         ; preds = %if.then, %if.end27, %if.end5
  ret void, !dbg !13300
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @iv_ca_extend(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_cand* %cand, %struct.iv_ca_delta** %delta, i32* %n_ivs) #0 !dbg !13301 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %delta.addr = alloca %struct.iv_ca_delta**, align 8
  %n_ivs.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  %old_cp = alloca %struct.cost_pair*, align 8
  %new_cp = alloca %struct.cost_pair*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13305, metadata !DIExpression()), !dbg !13306
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13307, metadata !DIExpression()), !dbg !13308
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !13309, metadata !DIExpression()), !dbg !13310
  store %struct.iv_ca_delta** %delta, %struct.iv_ca_delta*** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta*** %delta.addr, metadata !13311, metadata !DIExpression()), !dbg !13312
  store i32* %n_ivs, i32** %n_ivs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n_ivs.addr, metadata !13313, metadata !DIExpression()), !dbg !13314
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13315, metadata !DIExpression()), !dbg !13316
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %retval, metadata !13317, metadata !DIExpression()), !dbg !13318
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !13319, metadata !DIExpression()), !dbg !13320
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %old_cp, metadata !13321, metadata !DIExpression()), !dbg !13322
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %new_cp, metadata !13323, metadata !DIExpression()), !dbg !13324
  %0 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13325
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %0, align 8, !dbg !13326
  store i32 0, i32* %i, align 4, !dbg !13327
  br label %for.cond, !dbg !13329

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !13330
  %2 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13332
  %upto = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %2, i32 0, i32 0, !dbg !13333
  %3 = load i32, i32* %upto, align 8, !dbg !13333
  %cmp = icmp ult i32 %1, %3, !dbg !13334
  br i1 %cmp, label %for.body, label %for.end, !dbg !13335

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13336
  %5 = load i32, i32* %i, align 4, !dbg !13338
  %call = call %struct.iv_use* @iv_use(%struct.ivopts_data* %4, i32 %5), !dbg !13339
  store %struct.iv_use* %call, %struct.iv_use** %use, align 8, !dbg !13340
  %6 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13341
  %7 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13342
  %call1 = call %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %6, %struct.iv_use* %7), !dbg !13343
  store %struct.cost_pair* %call1, %struct.cost_pair** %old_cp, align 8, !dbg !13344
  %8 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13345
  %tobool = icmp ne %struct.cost_pair* %8, null, !dbg !13345
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !13347

land.lhs.true:                                    ; preds = %for.body
  %9 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13348
  %cand2 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %9, i32 0, i32 0, !dbg !13349
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand2, align 8, !dbg !13349
  %11 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13350
  %cmp3 = icmp eq %struct.iv_cand* %10, %11, !dbg !13351
  br i1 %cmp3, label %if.then, label %if.end, !dbg !13352

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc, !dbg !13353

if.end:                                           ; preds = %land.lhs.true, %for.body
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13354
  %13 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13355
  %14 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13356
  %call4 = call %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %12, %struct.iv_use* %13, %struct.iv_cand* %14), !dbg !13357
  store %struct.cost_pair* %call4, %struct.cost_pair** %new_cp, align 8, !dbg !13358
  %15 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13359
  %tobool5 = icmp ne %struct.cost_pair* %15, null, !dbg !13359
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !13361

if.then6:                                         ; preds = %if.end
  br label %for.inc, !dbg !13362

if.end7:                                          ; preds = %if.end
  %16 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13363
  %17 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13365
  %call8 = call zeroext i8 @iv_ca_has_deps(%struct.iv_ca* %16, %struct.cost_pair* %17), !dbg !13366
  %tobool9 = icmp ne i8 %call8, 0, !dbg !13366
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !13367

if.then10:                                        ; preds = %if.end7
  br label %for.inc, !dbg !13368

if.end11:                                         ; preds = %if.end7
  %18 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13369
  %19 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13371
  %call12 = call zeroext i8 @cheaper_cost_pair(%struct.cost_pair* %18, %struct.cost_pair* %19), !dbg !13372
  %tobool13 = icmp ne i8 %call12, 0, !dbg !13372
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !13373

if.then14:                                        ; preds = %if.end11
  br label %for.inc, !dbg !13374

if.end15:                                         ; preds = %if.end11
  %20 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13375
  %21 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13376
  %22 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13377
  %23 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13378
  %24 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %23, align 8, !dbg !13379
  %call16 = call %struct.iv_ca_delta* @iv_ca_delta_add(%struct.iv_use* %20, %struct.cost_pair* %21, %struct.cost_pair* %22, %struct.iv_ca_delta* %24), !dbg !13380
  %25 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13381
  store %struct.iv_ca_delta* %call16, %struct.iv_ca_delta** %25, align 8, !dbg !13382
  br label %for.inc, !dbg !13383

for.inc:                                          ; preds = %if.end15, %if.then14, %if.then10, %if.then6, %if.then
  %26 = load i32, i32* %i, align 4, !dbg !13384
  %inc = add i32 %26, 1, !dbg !13384
  store i32 %inc, i32* %i, align 4, !dbg !13384
  br label %for.cond, !dbg !13385, !llvm.loop !13386

for.end:                                          ; preds = %for.cond
  %27 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13388
  %28 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13389
  %29 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13390
  %30 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %29, align 8, !dbg !13391
  call void @iv_ca_delta_commit(%struct.ivopts_data* %27, %struct.iv_ca* %28, %struct.iv_ca_delta* %30, i8 zeroext 1), !dbg !13392
  %31 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13393
  %call17 = call i64 @iv_ca_cost(%struct.iv_ca* %31), !dbg !13394
  %32 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !13394
  store i64 %call17, i64* %32, align 4, !dbg !13394
  %33 = bitcast %struct.comp_cost* %retval to i8*, !dbg !13394
  %34 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !13394
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 8, i1 false), !dbg !13394
  %35 = load i32*, i32** %n_ivs.addr, align 8, !dbg !13395
  %tobool18 = icmp ne i32* %35, null, !dbg !13395
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !13397

if.then19:                                        ; preds = %for.end
  %36 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13398
  %call20 = call i32 @iv_ca_n_cands(%struct.iv_ca* %36), !dbg !13399
  %37 = load i32*, i32** %n_ivs.addr, align 8, !dbg !13400
  store i32 %call20, i32* %37, align 4, !dbg !13401
  br label %if.end21, !dbg !13402

if.end21:                                         ; preds = %if.then19, %for.end
  %38 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13403
  %39 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13404
  %40 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13405
  %41 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %40, align 8, !dbg !13406
  call void @iv_ca_delta_commit(%struct.ivopts_data* %38, %struct.iv_ca* %39, %struct.iv_ca_delta* %41, i8 zeroext 0), !dbg !13407
  %42 = bitcast %struct.comp_cost* %retval to i64*, !dbg !13408
  %43 = load i64, i64* %42, align 4, !dbg !13408
  ret i64 %43, !dbg !13408
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_delta_free(%struct.iv_ca_delta** %delta) #0 !dbg !13409 {
entry:
  %delta.addr = alloca %struct.iv_ca_delta**, align 8
  %act = alloca %struct.iv_ca_delta*, align 8
  %next = alloca %struct.iv_ca_delta*, align 8
  store %struct.iv_ca_delta** %delta, %struct.iv_ca_delta*** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta*** %delta.addr, metadata !13412, metadata !DIExpression()), !dbg !13413
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %act, metadata !13414, metadata !DIExpression()), !dbg !13415
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %next, metadata !13416, metadata !DIExpression()), !dbg !13417
  %0 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13418
  %1 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %0, align 8, !dbg !13420
  store %struct.iv_ca_delta* %1, %struct.iv_ca_delta** %act, align 8, !dbg !13421
  br label %for.cond, !dbg !13422

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13423
  %tobool = icmp ne %struct.iv_ca_delta* %2, null, !dbg !13425
  br i1 %tobool, label %for.body, label %for.end, !dbg !13425

for.body:                                         ; preds = %for.cond
  %3 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13426
  %next_change = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %3, i32 0, i32 3, !dbg !13428
  %4 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next_change, align 8, !dbg !13428
  store %struct.iv_ca_delta* %4, %struct.iv_ca_delta** %next, align 8, !dbg !13429
  %5 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13430
  %6 = bitcast %struct.iv_ca_delta* %5 to i8*, !dbg !13430
  call void @free(i8* %6), !dbg !13431
  br label %for.inc, !dbg !13432

for.inc:                                          ; preds = %for.body
  %7 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next, align 8, !dbg !13433
  store %struct.iv_ca_delta* %7, %struct.iv_ca_delta** %act, align 8, !dbg !13434
  br label %for.cond, !dbg !13435, !llvm.loop !13436

for.end:                                          ; preds = %for.cond
  %8 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13438
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %8, align 8, !dbg !13439
  ret void, !dbg !13440
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_delta_commit(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_ca_delta* %delta, i8 zeroext %forward) #0 !dbg !13441 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %delta.addr = alloca %struct.iv_ca_delta*, align 8
  %forward.addr = alloca i8, align 1
  %from = alloca %struct.cost_pair*, align 8
  %to = alloca %struct.cost_pair*, align 8
  %act = alloca %struct.iv_ca_delta*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13444, metadata !DIExpression()), !dbg !13445
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13446, metadata !DIExpression()), !dbg !13447
  store %struct.iv_ca_delta* %delta, %struct.iv_ca_delta** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %delta.addr, metadata !13448, metadata !DIExpression()), !dbg !13449
  store i8 %forward, i8* %forward.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %forward.addr, metadata !13450, metadata !DIExpression()), !dbg !13451
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %from, metadata !13452, metadata !DIExpression()), !dbg !13453
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %to, metadata !13454, metadata !DIExpression()), !dbg !13455
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %act, metadata !13456, metadata !DIExpression()), !dbg !13457
  %0 = load i8, i8* %forward.addr, align 1, !dbg !13458
  %tobool = icmp ne i8 %0, 0, !dbg !13458
  br i1 %tobool, label %if.end, label %if.then, !dbg !13460

if.then:                                          ; preds = %entry
  %1 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %delta.addr, align 8, !dbg !13461
  %call = call %struct.iv_ca_delta* @iv_ca_delta_reverse(%struct.iv_ca_delta* %1), !dbg !13462
  store %struct.iv_ca_delta* %call, %struct.iv_ca_delta** %delta.addr, align 8, !dbg !13463
  br label %if.end, !dbg !13464

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %delta.addr, align 8, !dbg !13465
  store %struct.iv_ca_delta* %2, %struct.iv_ca_delta** %act, align 8, !dbg !13467
  br label %for.cond, !dbg !13468

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13469
  %tobool1 = icmp ne %struct.iv_ca_delta* %3, null, !dbg !13471
  br i1 %tobool1, label %for.body, label %for.end, !dbg !13471

for.body:                                         ; preds = %for.cond
  %4 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13472
  %old_cp = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %4, i32 0, i32 1, !dbg !13474
  %5 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13474
  store %struct.cost_pair* %5, %struct.cost_pair** %from, align 8, !dbg !13475
  %6 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13476
  %new_cp = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %6, i32 0, i32 2, !dbg !13477
  %7 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13477
  store %struct.cost_pair* %7, %struct.cost_pair** %to, align 8, !dbg !13478
  %8 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13479
  %9 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13479
  %use = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %9, i32 0, i32 0, !dbg !13479
  %10 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13479
  %call2 = call %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %8, %struct.iv_use* %10), !dbg !13479
  %11 = load %struct.cost_pair*, %struct.cost_pair** %from, align 8, !dbg !13479
  %cmp = icmp eq %struct.cost_pair* %call2, %11, !dbg !13479
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13479

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 4794, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !13479
  br label %cond.end, !dbg !13479

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !13479

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13479
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13480
  %13 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13481
  %14 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13482
  %use3 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %14, i32 0, i32 0, !dbg !13483
  %15 = load %struct.iv_use*, %struct.iv_use** %use3, align 8, !dbg !13483
  %16 = load %struct.cost_pair*, %struct.cost_pair** %to, align 8, !dbg !13484
  call void @iv_ca_set_cp(%struct.ivopts_data* %12, %struct.iv_ca* %13, %struct.iv_use* %15, %struct.cost_pair* %16), !dbg !13485
  br label %for.inc, !dbg !13486

for.inc:                                          ; preds = %cond.end
  %17 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13487
  %next_change = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %17, i32 0, i32 3, !dbg !13488
  %18 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next_change, align 8, !dbg !13488
  store %struct.iv_ca_delta* %18, %struct.iv_ca_delta** %act, align 8, !dbg !13489
  br label %for.cond, !dbg !13490, !llvm.loop !13491

for.end:                                          ; preds = %for.cond
  %19 = load i8, i8* %forward.addr, align 1, !dbg !13493
  %tobool4 = icmp ne i8 %19, 0, !dbg !13493
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !13495

if.then5:                                         ; preds = %for.end
  %20 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %delta.addr, align 8, !dbg !13496
  %call6 = call %struct.iv_ca_delta* @iv_ca_delta_reverse(%struct.iv_ca_delta* %20), !dbg !13497
  br label %if.end7, !dbg !13497

if.end7:                                          ; preds = %if.then5, %for.end
  ret void, !dbg !13498
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cheaper_cost_pair(%struct.cost_pair* %a, %struct.cost_pair* %b) #0 !dbg !13499 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.cost_pair*, align 8
  %b.addr = alloca %struct.cost_pair*, align 8
  %cmp = alloca i32, align 4
  store %struct.cost_pair* %a, %struct.cost_pair** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %a.addr, metadata !13502, metadata !DIExpression()), !dbg !13503
  store %struct.cost_pair* %b, %struct.cost_pair** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %b.addr, metadata !13504, metadata !DIExpression()), !dbg !13505
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !13506, metadata !DIExpression()), !dbg !13507
  %0 = load %struct.cost_pair*, %struct.cost_pair** %a.addr, align 8, !dbg !13508
  %tobool = icmp ne %struct.cost_pair* %0, null, !dbg !13508
  br i1 %tobool, label %if.end, label %if.then, !dbg !13510

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !13511
  br label %return, !dbg !13511

if.end:                                           ; preds = %entry
  %1 = load %struct.cost_pair*, %struct.cost_pair** %b.addr, align 8, !dbg !13512
  %tobool1 = icmp ne %struct.cost_pair* %1, null, !dbg !13512
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !13514

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !13515
  br label %return, !dbg !13515

if.end3:                                          ; preds = %if.end
  %2 = load %struct.cost_pair*, %struct.cost_pair** %a.addr, align 8, !dbg !13516
  %cost = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %2, i32 0, i32 1, !dbg !13517
  %3 = load %struct.cost_pair*, %struct.cost_pair** %b.addr, align 8, !dbg !13518
  %cost4 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %3, i32 0, i32 1, !dbg !13519
  %4 = bitcast %struct.comp_cost* %cost to i64*, !dbg !13520
  %5 = load i64, i64* %4, align 8, !dbg !13520
  %6 = bitcast %struct.comp_cost* %cost4 to i64*, !dbg !13520
  %7 = load i64, i64* %6, align 8, !dbg !13520
  %call = call i32 @compare_costs(i64 %5, i64 %7), !dbg !13520
  store i32 %call, i32* %cmp, align 4, !dbg !13521
  %8 = load i32, i32* %cmp, align 4, !dbg !13522
  %cmp5 = icmp slt i32 %8, 0, !dbg !13524
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !13525

if.then6:                                         ; preds = %if.end3
  store i8 1, i8* %retval, align 1, !dbg !13526
  br label %return, !dbg !13526

if.end7:                                          ; preds = %if.end3
  %9 = load i32, i32* %cmp, align 4, !dbg !13527
  %cmp8 = icmp sgt i32 %9, 0, !dbg !13529
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !13530

if.then9:                                         ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !13531
  br label %return, !dbg !13531

if.end10:                                         ; preds = %if.end7
  %10 = load %struct.cost_pair*, %struct.cost_pair** %a.addr, align 8, !dbg !13532
  %cand = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %10, i32 0, i32 0, !dbg !13534
  %11 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !13534
  %cost11 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %11, i32 0, i32 7, !dbg !13535
  %12 = load i32, i32* %cost11, align 8, !dbg !13535
  %13 = load %struct.cost_pair*, %struct.cost_pair** %b.addr, align 8, !dbg !13536
  %cand12 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %13, i32 0, i32 0, !dbg !13537
  %14 = load %struct.iv_cand*, %struct.iv_cand** %cand12, align 8, !dbg !13537
  %cost13 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %14, i32 0, i32 7, !dbg !13538
  %15 = load i32, i32* %cost13, align 8, !dbg !13538
  %cmp14 = icmp ult i32 %12, %15, !dbg !13539
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !13540

if.then15:                                        ; preds = %if.end10
  store i8 1, i8* %retval, align 1, !dbg !13541
  br label %return, !dbg !13541

if.end16:                                         ; preds = %if.end10
  store i8 0, i8* %retval, align 1, !dbg !13542
  br label %return, !dbg !13542

return:                                           ; preds = %if.end16, %if.then15, %if.then9, %if.then6, %if.then2, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !13543
  ret i8 %16, !dbg !13543
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_set_remove_invariants(%struct.iv_ca* %ivs, %struct.bitmap_head_def* %invs) #0 !dbg !13544 {
entry:
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %invs.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %iid = alloca i32, align 4
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13547, metadata !DIExpression()), !dbg !13548
  store %struct.bitmap_head_def* %invs, %struct.bitmap_head_def** %invs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %invs.addr, metadata !13549, metadata !DIExpression()), !dbg !13550
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13551, metadata !DIExpression()), !dbg !13552
  call void @llvm.dbg.declare(metadata i32* %iid, metadata !13553, metadata !DIExpression()), !dbg !13554
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %invs.addr, align 8, !dbg !13555
  %tobool = icmp ne %struct.bitmap_head_def* %0, null, !dbg !13555
  br i1 %tobool, label %if.end, label %if.then, !dbg !13557

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !13558

if.end:                                           ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %invs.addr, align 8, !dbg !13559
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %iid), !dbg !13559
  br label %for.cond, !dbg !13559

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %iid), !dbg !13561
  %tobool1 = icmp ne i8 %call, 0, !dbg !13559
  br i1 %tobool1, label %for.body, label %for.end, !dbg !13559

for.body:                                         ; preds = %for.cond
  %2 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13563
  %n_invariant_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %2, i32 0, i32 9, !dbg !13565
  %3 = load i32*, i32** %n_invariant_uses, align 8, !dbg !13565
  %4 = load i32, i32* %iid, align 4, !dbg !13566
  %idxprom = zext i32 %4 to i64, !dbg !13563
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !13563
  %5 = load i32, i32* %arrayidx, align 4, !dbg !13567
  %dec = add i32 %5, -1, !dbg !13567
  store i32 %dec, i32* %arrayidx, align 4, !dbg !13567
  %6 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13568
  %n_invariant_uses2 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %6, i32 0, i32 9, !dbg !13570
  %7 = load i32*, i32** %n_invariant_uses2, align 8, !dbg !13570
  %8 = load i32, i32* %iid, align 4, !dbg !13571
  %idxprom3 = zext i32 %8 to i64, !dbg !13568
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i64 %idxprom3, !dbg !13568
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !13568
  %cmp = icmp eq i32 %9, 0, !dbg !13572
  br i1 %cmp, label %if.then5, label %if.end7, !dbg !13573

if.then5:                                         ; preds = %for.body
  %10 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13574
  %n_regs = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %10, i32 0, i32 6, !dbg !13575
  %11 = load i32, i32* %n_regs, align 4, !dbg !13576
  %dec6 = add i32 %11, -1, !dbg !13576
  store i32 %dec6, i32* %n_regs, align 4, !dbg !13576
  br label %if.end7, !dbg !13574

if.end7:                                          ; preds = %if.then5, %for.body
  br label %for.inc, !dbg !13577

for.inc:                                          ; preds = %if.end7
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %iid), !dbg !13561
  br label %for.cond, !dbg !13561, !llvm.loop !13578

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !13580
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @sub_costs(i64 %cost1.coerce, i64 %cost2.coerce) #0 !dbg !13581 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %cost1 = alloca %struct.comp_cost, align 4
  %cost2 = alloca %struct.comp_cost, align 4
  %0 = bitcast %struct.comp_cost* %cost1 to i64*
  store i64 %cost1.coerce, i64* %0, align 4
  %1 = bitcast %struct.comp_cost* %cost2 to i64*
  store i64 %cost2.coerce, i64* %1, align 4
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost1, metadata !13582, metadata !DIExpression()), !dbg !13583
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost2, metadata !13584, metadata !DIExpression()), !dbg !13585
  %cost = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 0, !dbg !13586
  %2 = load i32, i32* %cost, align 4, !dbg !13586
  %cost3 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 0, !dbg !13587
  %3 = load i32, i32* %cost3, align 4, !dbg !13588
  %sub = sub nsw i32 %3, %2, !dbg !13588
  store i32 %sub, i32* %cost3, align 4, !dbg !13588
  %complexity = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost2, i32 0, i32 1, !dbg !13589
  %4 = load i32, i32* %complexity, align 4, !dbg !13589
  %complexity4 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost1, i32 0, i32 1, !dbg !13590
  %5 = load i32, i32* %complexity4, align 4, !dbg !13591
  %sub5 = sub i32 %5, %4, !dbg !13591
  store i32 %sub5, i32* %complexity4, align 4, !dbg !13591
  %6 = bitcast %struct.comp_cost* %retval to i8*, !dbg !13592
  %7 = bitcast %struct.comp_cost* %cost1 to i8*, !dbg !13592
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 8, i1 false), !dbg !13592
  %8 = bitcast %struct.comp_cost* %retval to i64*, !dbg !13593
  %9 = load i64, i64* %8, align 4, !dbg !13593
  ret i64 %9, !dbg !13593
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_recount_cost(%struct.ivopts_data* %data, %struct.iv_ca* %ivs) #0 !dbg !13594 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %cost = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13595, metadata !DIExpression()), !dbg !13596
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13597, metadata !DIExpression()), !dbg !13598
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !13599, metadata !DIExpression()), !dbg !13600
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13601
  %cand_use_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 7, !dbg !13602
  %1 = bitcast %struct.comp_cost* %cost to i8*, !dbg !13602
  %2 = bitcast %struct.comp_cost* %cand_use_cost to i8*, !dbg !13602
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 8 %2, i64 8, i1 false), !dbg !13602
  %3 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13603
  %cand_cost = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %3, i32 0, i32 8, !dbg !13604
  %4 = load i32, i32* %cand_cost, align 8, !dbg !13604
  %cost1 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !13605
  %5 = load i32, i32* %cost1, align 4, !dbg !13606
  %add = add i32 %5, %4, !dbg !13606
  store i32 %add, i32* %cost1, align 4, !dbg !13606
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13607
  %7 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13608
  %n_regs = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %7, i32 0, i32 6, !dbg !13609
  %8 = load i32, i32* %n_regs, align 4, !dbg !13609
  %call = call i32 @ivopts_global_cost_for_size(%struct.ivopts_data* %6, i32 %8), !dbg !13610
  %cost2 = getelementptr inbounds %struct.comp_cost, %struct.comp_cost* %cost, i32 0, i32 0, !dbg !13611
  %9 = load i32, i32* %cost2, align 4, !dbg !13612
  %add3 = add i32 %9, %call, !dbg !13612
  store i32 %add3, i32* %cost2, align 4, !dbg !13612
  %10 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13613
  %cost4 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %10, i32 0, i32 10, !dbg !13614
  %11 = bitcast %struct.comp_cost* %cost4 to i8*, !dbg !13615
  %12 = bitcast %struct.comp_cost* %cost to i8*, !dbg !13615
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 4 %12, i64 8, i1 false), !dbg !13615
  ret void, !dbg !13616
}

; Function Attrs: noinline nounwind uwtable
define internal void @iv_ca_set_add_invariants(%struct.iv_ca* %ivs, %struct.bitmap_head_def* %invs) #0 !dbg !13617 {
entry:
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %invs.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %iid = alloca i32, align 4
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13618, metadata !DIExpression()), !dbg !13619
  store %struct.bitmap_head_def* %invs, %struct.bitmap_head_def** %invs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %invs.addr, metadata !13620, metadata !DIExpression()), !dbg !13621
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13622, metadata !DIExpression()), !dbg !13623
  call void @llvm.dbg.declare(metadata i32* %iid, metadata !13624, metadata !DIExpression()), !dbg !13625
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %invs.addr, align 8, !dbg !13626
  %tobool = icmp ne %struct.bitmap_head_def* %0, null, !dbg !13626
  br i1 %tobool, label %if.end, label %if.then, !dbg !13628

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !13629

if.end:                                           ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %invs.addr, align 8, !dbg !13630
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %iid), !dbg !13630
  br label %for.cond, !dbg !13630

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %iid), !dbg !13632
  %tobool1 = icmp ne i8 %call, 0, !dbg !13630
  br i1 %tobool1, label %for.body, label %for.end, !dbg !13630

for.body:                                         ; preds = %for.cond
  %2 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13634
  %n_invariant_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %2, i32 0, i32 9, !dbg !13636
  %3 = load i32*, i32** %n_invariant_uses, align 8, !dbg !13636
  %4 = load i32, i32* %iid, align 4, !dbg !13637
  %idxprom = zext i32 %4 to i64, !dbg !13634
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !13634
  %5 = load i32, i32* %arrayidx, align 4, !dbg !13638
  %inc = add i32 %5, 1, !dbg !13638
  store i32 %inc, i32* %arrayidx, align 4, !dbg !13638
  %6 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13639
  %n_invariant_uses2 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %6, i32 0, i32 9, !dbg !13641
  %7 = load i32*, i32** %n_invariant_uses2, align 8, !dbg !13641
  %8 = load i32, i32* %iid, align 4, !dbg !13642
  %idxprom3 = zext i32 %8 to i64, !dbg !13639
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i64 %idxprom3, !dbg !13639
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !13639
  %cmp = icmp eq i32 %9, 1, !dbg !13643
  br i1 %cmp, label %if.then5, label %if.end7, !dbg !13644

if.then5:                                         ; preds = %for.body
  %10 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13645
  %n_regs = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %10, i32 0, i32 6, !dbg !13646
  %11 = load i32, i32* %n_regs, align 4, !dbg !13647
  %inc6 = add i32 %11, 1, !dbg !13647
  store i32 %inc6, i32* %n_regs, align 4, !dbg !13647
  br label %if.end7, !dbg !13645

if.end7:                                          ; preds = %if.then5, %for.body
  br label %for.inc, !dbg !13648

for.inc:                                          ; preds = %if.end7
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %iid), !dbg !13632
  br label %for.cond, !dbg !13632, !llvm.loop !13649

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !13651
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @iv_ca_has_deps(%struct.iv_ca* %ivs, %struct.cost_pair* %cp) #0 !dbg !13652 {
entry:
  %retval = alloca i8, align 1
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %cp.addr = alloca %struct.cost_pair*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13655, metadata !DIExpression()), !dbg !13656
  store %struct.cost_pair* %cp, %struct.cost_pair** %cp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp.addr, metadata !13657, metadata !DIExpression()), !dbg !13658
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13659, metadata !DIExpression()), !dbg !13660
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13661, metadata !DIExpression()), !dbg !13662
  %0 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13663
  %depends_on = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %0, i32 0, i32 2, !dbg !13665
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !13665
  %tobool = icmp ne %struct.bitmap_head_def* %1, null, !dbg !13663
  br i1 %tobool, label %if.end, label %if.then, !dbg !13666

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !13667
  br label %return, !dbg !13667

if.end:                                           ; preds = %entry
  %2 = load %struct.cost_pair*, %struct.cost_pair** %cp.addr, align 8, !dbg !13668
  %depends_on1 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %2, i32 0, i32 2, !dbg !13668
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on1, align 8, !dbg !13668
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !13668
  br label %for.cond, !dbg !13668

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13670
  %tobool2 = icmp ne i8 %call, 0, !dbg !13668
  br i1 %tobool2, label %for.body, label %for.end, !dbg !13668

for.body:                                         ; preds = %for.cond
  %4 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13672
  %n_invariant_uses = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %4, i32 0, i32 9, !dbg !13675
  %5 = load i32*, i32** %n_invariant_uses, align 8, !dbg !13675
  %6 = load i32, i32* %i, align 4, !dbg !13676
  %idxprom = zext i32 %6 to i64, !dbg !13672
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !13672
  %7 = load i32, i32* %arrayidx, align 4, !dbg !13672
  %cmp = icmp eq i32 %7, 0, !dbg !13677
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !13678

if.then3:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !13679
  br label %return, !dbg !13679

if.end4:                                          ; preds = %for.body
  br label %for.inc, !dbg !13680

for.inc:                                          ; preds = %if.end4
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13670
  br label %for.cond, !dbg !13670, !llvm.loop !13681

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !13683
  br label %return, !dbg !13683

return:                                           ; preds = %for.end, %if.then3, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !13684
  ret i8 %8, !dbg !13684
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @iv_ca_n_cands(%struct.iv_ca* %ivs) #0 !dbg !13685 {
entry:
  %ivs.addr = alloca %struct.iv_ca*, align 8
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13688, metadata !DIExpression()), !dbg !13689
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13690
  %n_cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %0, i32 0, i32 5, !dbg !13691
  %1 = load i32, i32* %n_cands, align 8, !dbg !13691
  ret i32 %1, !dbg !13692
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_ca_delta* @iv_ca_delta_reverse(%struct.iv_ca_delta* %delta) #0 !dbg !13693 {
entry:
  %delta.addr = alloca %struct.iv_ca_delta*, align 8
  %act = alloca %struct.iv_ca_delta*, align 8
  %next = alloca %struct.iv_ca_delta*, align 8
  %prev = alloca %struct.iv_ca_delta*, align 8
  %tmp = alloca %struct.cost_pair*, align 8
  store %struct.iv_ca_delta* %delta, %struct.iv_ca_delta** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %delta.addr, metadata !13696, metadata !DIExpression()), !dbg !13697
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %act, metadata !13698, metadata !DIExpression()), !dbg !13699
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %next, metadata !13700, metadata !DIExpression()), !dbg !13701
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %prev, metadata !13702, metadata !DIExpression()), !dbg !13703
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %prev, align 8, !dbg !13703
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %tmp, metadata !13704, metadata !DIExpression()), !dbg !13705
  %0 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %delta.addr, align 8, !dbg !13706
  store %struct.iv_ca_delta* %0, %struct.iv_ca_delta** %act, align 8, !dbg !13708
  br label %for.cond, !dbg !13709

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13710
  %tobool = icmp ne %struct.iv_ca_delta* %1, null, !dbg !13712
  br i1 %tobool, label %for.body, label %for.end, !dbg !13712

for.body:                                         ; preds = %for.cond
  %2 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13713
  %next_change = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %2, i32 0, i32 3, !dbg !13715
  %3 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next_change, align 8, !dbg !13715
  store %struct.iv_ca_delta* %3, %struct.iv_ca_delta** %next, align 8, !dbg !13716
  %4 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %prev, align 8, !dbg !13717
  %5 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13718
  %next_change1 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %5, i32 0, i32 3, !dbg !13719
  store %struct.iv_ca_delta* %4, %struct.iv_ca_delta** %next_change1, align 8, !dbg !13720
  %6 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13721
  store %struct.iv_ca_delta* %6, %struct.iv_ca_delta** %prev, align 8, !dbg !13722
  %7 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13723
  %old_cp = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %7, i32 0, i32 1, !dbg !13724
  %8 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13724
  store %struct.cost_pair* %8, %struct.cost_pair** %tmp, align 8, !dbg !13725
  %9 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13726
  %new_cp = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %9, i32 0, i32 2, !dbg !13727
  %10 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13727
  %11 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13728
  %old_cp2 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %11, i32 0, i32 1, !dbg !13729
  store %struct.cost_pair* %10, %struct.cost_pair** %old_cp2, align 8, !dbg !13730
  %12 = load %struct.cost_pair*, %struct.cost_pair** %tmp, align 8, !dbg !13731
  %13 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act, align 8, !dbg !13732
  %new_cp3 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %13, i32 0, i32 2, !dbg !13733
  store %struct.cost_pair* %12, %struct.cost_pair** %new_cp3, align 8, !dbg !13734
  br label %for.inc, !dbg !13735

for.inc:                                          ; preds = %for.body
  %14 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next, align 8, !dbg !13736
  store %struct.iv_ca_delta* %14, %struct.iv_ca_delta** %act, align 8, !dbg !13737
  br label %for.cond, !dbg !13738, !llvm.loop !13739

for.end:                                          ; preds = %for.cond
  %15 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %prev, align 8, !dbg !13741
  ret %struct.iv_ca_delta* %15, !dbg !13742
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @iv_ca_prune(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_cand* %except_cand, %struct.iv_ca_delta** %delta) #0 !dbg !13743 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %except_cand.addr = alloca %struct.iv_cand*, align 8
  %delta.addr = alloca %struct.iv_ca_delta**, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %act_delta = alloca %struct.iv_ca_delta*, align 8
  %best_delta = alloca %struct.iv_ca_delta*, align 8
  %i = alloca i32, align 4
  %acost = alloca %struct.comp_cost, align 4
  %cand = alloca %struct.iv_cand*, align 8
  %tmp = alloca %struct.comp_cost, align 4
  %tmp3 = alloca %struct.comp_cost, align 4
  %tmp12 = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13746, metadata !DIExpression()), !dbg !13747
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13748, metadata !DIExpression()), !dbg !13749
  store %struct.iv_cand* %except_cand, %struct.iv_cand** %except_cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %except_cand.addr, metadata !13750, metadata !DIExpression()), !dbg !13751
  store %struct.iv_ca_delta** %delta, %struct.iv_ca_delta*** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta*** %delta.addr, metadata !13752, metadata !DIExpression()), !dbg !13753
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13754, metadata !DIExpression()), !dbg !13755
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %act_delta, metadata !13756, metadata !DIExpression()), !dbg !13757
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %best_delta, metadata !13758, metadata !DIExpression()), !dbg !13759
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13760, metadata !DIExpression()), !dbg !13761
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %retval, metadata !13762, metadata !DIExpression()), !dbg !13763
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %acost, metadata !13764, metadata !DIExpression()), !dbg !13765
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand, metadata !13766, metadata !DIExpression()), !dbg !13767
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %best_delta, align 8, !dbg !13768
  %0 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13769
  %call = call i64 @iv_ca_cost(%struct.iv_ca* %0), !dbg !13770
  %1 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !13770
  store i64 %call, i64* %1, align 4, !dbg !13770
  %2 = bitcast %struct.comp_cost* %retval to i8*, !dbg !13770
  %3 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !13770
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 8, i1 false), !dbg !13770
  %4 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13771
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %4, i32 0, i32 4, !dbg !13771
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !13771
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %5, i32 0, i32* %i), !dbg !13771
  br label %for.cond, !dbg !13771

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13773
  %tobool = icmp ne i8 %call1, 0, !dbg !13771
  br i1 %tobool, label %for.body, label %for.end, !dbg !13771

for.body:                                         ; preds = %for.cond
  %6 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13775
  %7 = load i32, i32* %i, align 4, !dbg !13777
  %call2 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %6, i32 %7), !dbg !13778
  store %struct.iv_cand* %call2, %struct.iv_cand** %cand, align 8, !dbg !13779
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !13780
  %9 = load %struct.iv_cand*, %struct.iv_cand** %except_cand.addr, align 8, !dbg !13782
  %cmp = icmp eq %struct.iv_cand* %8, %9, !dbg !13783
  br i1 %cmp, label %if.then, label %if.end, !dbg !13784

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !13785

if.end:                                           ; preds = %for.body
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13786
  %11 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13787
  %12 = load %struct.iv_cand*, %struct.iv_cand** %cand, align 8, !dbg !13788
  %call4 = call i64 @iv_ca_narrow(%struct.ivopts_data* %10, %struct.iv_ca* %11, %struct.iv_cand* %12, %struct.iv_ca_delta** %act_delta), !dbg !13789
  %13 = bitcast %struct.comp_cost* %tmp3 to i64*, !dbg !13789
  store i64 %call4, i64* %13, align 4, !dbg !13789
  %14 = bitcast %struct.comp_cost* %acost to i8*, !dbg !13789
  %15 = bitcast %struct.comp_cost* %tmp3 to i8*, !dbg !13789
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 8, i1 false), !dbg !13789
  %16 = bitcast %struct.comp_cost* %acost to i64*, !dbg !13790
  %17 = load i64, i64* %16, align 4, !dbg !13790
  %18 = bitcast %struct.comp_cost* %retval to i64*, !dbg !13790
  %19 = load i64, i64* %18, align 4, !dbg !13790
  %call5 = call i32 @compare_costs(i64 %17, i64 %19), !dbg !13790
  %cmp6 = icmp slt i32 %call5, 0, !dbg !13792
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !13793

if.then7:                                         ; preds = %if.end
  %20 = bitcast %struct.comp_cost* %retval to i8*, !dbg !13794
  %21 = bitcast %struct.comp_cost* %acost to i8*, !dbg !13794
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* align 4 %21, i64 8, i1 false), !dbg !13794
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %best_delta), !dbg !13796
  %22 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %act_delta, align 8, !dbg !13797
  store %struct.iv_ca_delta* %22, %struct.iv_ca_delta** %best_delta, align 8, !dbg !13798
  br label %if.end8, !dbg !13799

if.else:                                          ; preds = %if.end
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %act_delta), !dbg !13800
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  br label %for.inc, !dbg !13801

for.inc:                                          ; preds = %if.end8, %if.then
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !13773
  br label %for.cond, !dbg !13773, !llvm.loop !13802

for.end:                                          ; preds = %for.cond
  %23 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !13804
  %tobool9 = icmp ne %struct.iv_ca_delta* %23, null, !dbg !13804
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !13806

if.then10:                                        ; preds = %for.end
  %24 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13807
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %24, align 8, !dbg !13809
  br label %return, !dbg !13810

if.end11:                                         ; preds = %for.end
  %25 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13811
  %26 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13812
  %27 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !13813
  call void @iv_ca_delta_commit(%struct.ivopts_data* %25, %struct.iv_ca* %26, %struct.iv_ca_delta* %27, i8 zeroext 1), !dbg !13814
  %28 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13815
  %29 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13816
  %30 = load %struct.iv_cand*, %struct.iv_cand** %except_cand.addr, align 8, !dbg !13817
  %31 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13818
  %call13 = call i64 @iv_ca_prune(%struct.ivopts_data* %28, %struct.iv_ca* %29, %struct.iv_cand* %30, %struct.iv_ca_delta** %31), !dbg !13819
  %32 = bitcast %struct.comp_cost* %tmp12 to i64*, !dbg !13819
  store i64 %call13, i64* %32, align 4, !dbg !13819
  %33 = bitcast %struct.comp_cost* %retval to i8*, !dbg !13819
  %34 = bitcast %struct.comp_cost* %tmp12 to i8*, !dbg !13819
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 8, i1 false), !dbg !13819
  %35 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13820
  %36 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13821
  %37 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !13822
  call void @iv_ca_delta_commit(%struct.ivopts_data* %35, %struct.iv_ca* %36, %struct.iv_ca_delta* %37, i8 zeroext 0), !dbg !13823
  %38 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %best_delta, align 8, !dbg !13824
  %39 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13825
  %40 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %39, align 8, !dbg !13826
  %call14 = call %struct.iv_ca_delta* @iv_ca_delta_join(%struct.iv_ca_delta* %38, %struct.iv_ca_delta* %40), !dbg !13827
  %41 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13828
  store %struct.iv_ca_delta* %call14, %struct.iv_ca_delta** %41, align 8, !dbg !13829
  br label %return, !dbg !13830

return:                                           ; preds = %if.end11, %if.then10
  %42 = bitcast %struct.comp_cost* %retval to i64*, !dbg !13831
  %43 = load i64, i64* %42, align 4, !dbg !13831
  ret i64 %43, !dbg !13831
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.iv_ca_delta* @iv_ca_delta_join(%struct.iv_ca_delta* %l1, %struct.iv_ca_delta* %l2) #0 !dbg !13832 {
entry:
  %retval = alloca %struct.iv_ca_delta*, align 8
  %l1.addr = alloca %struct.iv_ca_delta*, align 8
  %l2.addr = alloca %struct.iv_ca_delta*, align 8
  %last = alloca %struct.iv_ca_delta*, align 8
  store %struct.iv_ca_delta* %l1, %struct.iv_ca_delta** %l1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %l1.addr, metadata !13835, metadata !DIExpression()), !dbg !13836
  store %struct.iv_ca_delta* %l2, %struct.iv_ca_delta** %l2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %l2.addr, metadata !13837, metadata !DIExpression()), !dbg !13838
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta** %last, metadata !13839, metadata !DIExpression()), !dbg !13840
  %0 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l2.addr, align 8, !dbg !13841
  %tobool = icmp ne %struct.iv_ca_delta* %0, null, !dbg !13841
  br i1 %tobool, label %if.end, label %if.then, !dbg !13843

if.then:                                          ; preds = %entry
  %1 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l1.addr, align 8, !dbg !13844
  store %struct.iv_ca_delta* %1, %struct.iv_ca_delta** %retval, align 8, !dbg !13845
  br label %return, !dbg !13845

if.end:                                           ; preds = %entry
  %2 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l1.addr, align 8, !dbg !13846
  %tobool1 = icmp ne %struct.iv_ca_delta* %2, null, !dbg !13846
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !13848

if.then2:                                         ; preds = %if.end
  %3 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l2.addr, align 8, !dbg !13849
  store %struct.iv_ca_delta* %3, %struct.iv_ca_delta** %retval, align 8, !dbg !13850
  br label %return, !dbg !13850

if.end3:                                          ; preds = %if.end
  %4 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l1.addr, align 8, !dbg !13851
  store %struct.iv_ca_delta* %4, %struct.iv_ca_delta** %last, align 8, !dbg !13853
  br label %for.cond, !dbg !13854

for.cond:                                         ; preds = %for.inc, %if.end3
  %5 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %last, align 8, !dbg !13855
  %next_change = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %5, i32 0, i32 3, !dbg !13857
  %6 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next_change, align 8, !dbg !13857
  %tobool4 = icmp ne %struct.iv_ca_delta* %6, null, !dbg !13858
  br i1 %tobool4, label %for.body, label %for.end, !dbg !13858

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !13859

for.inc:                                          ; preds = %for.body
  %7 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %last, align 8, !dbg !13860
  %next_change5 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %7, i32 0, i32 3, !dbg !13861
  %8 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %next_change5, align 8, !dbg !13861
  store %struct.iv_ca_delta* %8, %struct.iv_ca_delta** %last, align 8, !dbg !13862
  br label %for.cond, !dbg !13863, !llvm.loop !13864

for.end:                                          ; preds = %for.cond
  %9 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l2.addr, align 8, !dbg !13866
  %10 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %last, align 8, !dbg !13867
  %next_change6 = getelementptr inbounds %struct.iv_ca_delta, %struct.iv_ca_delta* %10, i32 0, i32 3, !dbg !13868
  store %struct.iv_ca_delta* %9, %struct.iv_ca_delta** %next_change6, align 8, !dbg !13869
  %11 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %l1.addr, align 8, !dbg !13870
  store %struct.iv_ca_delta* %11, %struct.iv_ca_delta** %retval, align 8, !dbg !13871
  br label %return, !dbg !13871

return:                                           ; preds = %for.end, %if.then2, %if.then
  %12 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %retval, align 8, !dbg !13872
  ret %struct.iv_ca_delta* %12, !dbg !13872
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @iv_ca_narrow(%struct.ivopts_data* %data, %struct.iv_ca* %ivs, %struct.iv_cand* %cand, %struct.iv_ca_delta** %delta) #0 !dbg !13873 {
entry:
  %retval = alloca %struct.comp_cost, align 4
  %data.addr = alloca %struct.ivopts_data*, align 8
  %ivs.addr = alloca %struct.iv_ca*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %delta.addr = alloca %struct.iv_ca_delta**, align 8
  %i = alloca i32, align 4
  %ci = alloca i32, align 4
  %use = alloca %struct.iv_use*, align 8
  %old_cp = alloca %struct.cost_pair*, align 8
  %new_cp = alloca %struct.cost_pair*, align 8
  %cp = alloca %struct.cost_pair*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %cnd = alloca %struct.iv_cand*, align 8
  %cost = alloca %struct.comp_cost, align 4
  %tmp = alloca %struct.comp_cost, align 4
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !13874, metadata !DIExpression()), !dbg !13875
  store %struct.iv_ca* %ivs, %struct.iv_ca** %ivs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca** %ivs.addr, metadata !13876, metadata !DIExpression()), !dbg !13877
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !13878, metadata !DIExpression()), !dbg !13879
  store %struct.iv_ca_delta** %delta, %struct.iv_ca_delta*** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_ca_delta*** %delta.addr, metadata !13880, metadata !DIExpression()), !dbg !13881
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13882, metadata !DIExpression()), !dbg !13883
  call void @llvm.dbg.declare(metadata i32* %ci, metadata !13884, metadata !DIExpression()), !dbg !13885
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use, metadata !13886, metadata !DIExpression()), !dbg !13887
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %old_cp, metadata !13888, metadata !DIExpression()), !dbg !13889
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %new_cp, metadata !13890, metadata !DIExpression()), !dbg !13891
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp, metadata !13892, metadata !DIExpression()), !dbg !13893
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !13894, metadata !DIExpression()), !dbg !13895
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cnd, metadata !13896, metadata !DIExpression()), !dbg !13897
  call void @llvm.dbg.declare(metadata %struct.comp_cost* %cost, metadata !13898, metadata !DIExpression()), !dbg !13899
  %0 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !13900
  store %struct.iv_ca_delta* null, %struct.iv_ca_delta** %0, align 8, !dbg !13901
  store i32 0, i32* %i, align 4, !dbg !13902
  br label %for.cond, !dbg !13904

for.cond:                                         ; preds = %for.inc55, %entry
  %1 = load i32, i32* %i, align 4, !dbg !13905
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13907
  %call = call i32 @n_iv_uses(%struct.ivopts_data* %2), !dbg !13908
  %cmp = icmp ult i32 %1, %call, !dbg !13909
  br i1 %cmp, label %for.body, label %for.end56, !dbg !13910

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13911
  %4 = load i32, i32* %i, align 4, !dbg !13913
  %call1 = call %struct.iv_use* @iv_use(%struct.ivopts_data* %3, i32 %4), !dbg !13914
  store %struct.iv_use* %call1, %struct.iv_use** %use, align 8, !dbg !13915
  %5 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13916
  %6 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13917
  %call2 = call %struct.cost_pair* @iv_ca_cand_for_use(%struct.iv_ca* %5, %struct.iv_use* %6), !dbg !13918
  store %struct.cost_pair* %call2, %struct.cost_pair** %old_cp, align 8, !dbg !13919
  %7 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !13920
  %cand3 = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %7, i32 0, i32 0, !dbg !13922
  %8 = load %struct.iv_cand*, %struct.iv_cand** %cand3, align 8, !dbg !13922
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13923
  %cmp4 = icmp ne %struct.iv_cand* %8, %9, !dbg !13924
  br i1 %cmp4, label %if.then, label %if.end, !dbg !13925

if.then:                                          ; preds = %for.body
  br label %for.inc55, !dbg !13926

if.end:                                           ; preds = %for.body
  store %struct.cost_pair* null, %struct.cost_pair** %new_cp, align 8, !dbg !13927
  %10 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13928
  %consider_all_candidates = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %10, i32 0, i32 10, !dbg !13930
  %11 = load i8, i8* %consider_all_candidates, align 4, !dbg !13930
  %tobool = icmp ne i8 %11, 0, !dbg !13928
  br i1 %tobool, label %if.then5, label %if.else, !dbg !13931

if.then5:                                         ; preds = %if.end
  %12 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13932
  %cands = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %12, i32 0, i32 4, !dbg !13932
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands, align 8, !dbg !13932
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %13, i32 0, i32* %ci), !dbg !13932
  br label %for.cond6, !dbg !13932

for.cond6:                                        ; preds = %for.inc, %if.then5
  %call7 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %ci), !dbg !13935
  %tobool8 = icmp ne i8 %call7, 0, !dbg !13932
  br i1 %tobool8, label %for.body9, label %for.end, !dbg !13932

for.body9:                                        ; preds = %for.cond6
  %14 = load i32, i32* %ci, align 4, !dbg !13937
  %15 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13940
  %id = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %15, i32 0, i32 0, !dbg !13941
  %16 = load i32, i32* %id, align 8, !dbg !13941
  %cmp10 = icmp eq i32 %14, %16, !dbg !13942
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !13943

if.then11:                                        ; preds = %for.body9
  br label %for.inc, !dbg !13944

if.end12:                                         ; preds = %for.body9
  %17 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13945
  %18 = load i32, i32* %ci, align 4, !dbg !13946
  %call13 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %17, i32 %18), !dbg !13947
  store %struct.iv_cand* %call13, %struct.iv_cand** %cnd, align 8, !dbg !13948
  %19 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13949
  %20 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13950
  %21 = load %struct.iv_cand*, %struct.iv_cand** %cnd, align 8, !dbg !13951
  %call14 = call %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %19, %struct.iv_use* %20, %struct.iv_cand* %21), !dbg !13952
  store %struct.cost_pair* %call14, %struct.cost_pair** %cp, align 8, !dbg !13953
  %22 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13954
  %tobool15 = icmp ne %struct.cost_pair* %22, null, !dbg !13954
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !13956

if.then16:                                        ; preds = %if.end12
  br label %for.inc, !dbg !13957

if.end17:                                         ; preds = %if.end12
  %23 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13958
  %24 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13960
  %call18 = call zeroext i8 @iv_ca_has_deps(%struct.iv_ca* %23, %struct.cost_pair* %24), !dbg !13961
  %tobool19 = icmp ne i8 %call18, 0, !dbg !13961
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !13962

if.then20:                                        ; preds = %if.end17
  br label %for.inc, !dbg !13963

if.end21:                                         ; preds = %if.end17
  %25 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13964
  %26 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !13966
  %call22 = call zeroext i8 @cheaper_cost_pair(%struct.cost_pair* %25, %struct.cost_pair* %26), !dbg !13967
  %tobool23 = icmp ne i8 %call22, 0, !dbg !13967
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !13968

if.then24:                                        ; preds = %if.end21
  br label %for.inc, !dbg !13969

if.end25:                                         ; preds = %if.end21
  %27 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13970
  store %struct.cost_pair* %27, %struct.cost_pair** %new_cp, align 8, !dbg !13971
  br label %for.inc, !dbg !13972

for.inc:                                          ; preds = %if.end25, %if.then24, %if.then20, %if.then16, %if.then11
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %ci), !dbg !13935
  br label %for.cond6, !dbg !13935, !llvm.loop !13973

for.end:                                          ; preds = %for.cond6
  br label %if.end50, !dbg !13975

if.else:                                          ; preds = %if.end
  %28 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13976
  %related_cands = getelementptr inbounds %struct.iv_use, %struct.iv_use* %28, i32 0, i32 5, !dbg !13976
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %related_cands, align 8, !dbg !13976
  %30 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !13976
  %cands26 = getelementptr inbounds %struct.iv_ca, %struct.iv_ca* %30, i32 0, i32 4, !dbg !13976
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %cands26, align 8, !dbg !13976
  call void @bmp_iter_and_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %29, %struct.bitmap_head_def* %31, i32 0, i32* %ci), !dbg !13976
  br label %for.cond27, !dbg !13976

for.cond27:                                       ; preds = %for.inc48, %if.else
  %call28 = call zeroext i8 @bmp_iter_and(%struct.bitmap_iterator* %bi, i32* %ci), !dbg !13979
  %tobool29 = icmp ne i8 %call28, 0, !dbg !13976
  br i1 %tobool29, label %for.body30, label %for.end49, !dbg !13976

for.body30:                                       ; preds = %for.cond27
  %32 = load i32, i32* %ci, align 4, !dbg !13981
  %33 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !13984
  %id31 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %33, i32 0, i32 0, !dbg !13985
  %34 = load i32, i32* %id31, align 8, !dbg !13985
  %cmp32 = icmp eq i32 %32, %34, !dbg !13986
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !13987

if.then33:                                        ; preds = %for.body30
  br label %for.inc48, !dbg !13988

if.end34:                                         ; preds = %for.body30
  %35 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13989
  %36 = load i32, i32* %ci, align 4, !dbg !13990
  %call35 = call %struct.iv_cand* @iv_cand(%struct.ivopts_data* %35, i32 %36), !dbg !13991
  store %struct.iv_cand* %call35, %struct.iv_cand** %cnd, align 8, !dbg !13992
  %37 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !13993
  %38 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !13994
  %39 = load %struct.iv_cand*, %struct.iv_cand** %cnd, align 8, !dbg !13995
  %call36 = call %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %37, %struct.iv_use* %38, %struct.iv_cand* %39), !dbg !13996
  store %struct.cost_pair* %call36, %struct.cost_pair** %cp, align 8, !dbg !13997
  %40 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !13998
  %tobool37 = icmp ne %struct.cost_pair* %40, null, !dbg !13998
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !14000

if.then38:                                        ; preds = %if.end34
  br label %for.inc48, !dbg !14001

if.end39:                                         ; preds = %if.end34
  %41 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !14002
  %42 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !14004
  %call40 = call zeroext i8 @iv_ca_has_deps(%struct.iv_ca* %41, %struct.cost_pair* %42), !dbg !14005
  %tobool41 = icmp ne i8 %call40, 0, !dbg !14005
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !14006

if.then42:                                        ; preds = %if.end39
  br label %for.inc48, !dbg !14007

if.end43:                                         ; preds = %if.end39
  %43 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !14008
  %44 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !14010
  %call44 = call zeroext i8 @cheaper_cost_pair(%struct.cost_pair* %43, %struct.cost_pair* %44), !dbg !14011
  %tobool45 = icmp ne i8 %call44, 0, !dbg !14011
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !14012

if.then46:                                        ; preds = %if.end43
  br label %for.inc48, !dbg !14013

if.end47:                                         ; preds = %if.end43
  %45 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !14014
  store %struct.cost_pair* %45, %struct.cost_pair** %new_cp, align 8, !dbg !14015
  br label %for.inc48, !dbg !14016

for.inc48:                                        ; preds = %if.end47, %if.then46, %if.then42, %if.then38, %if.then33
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %ci), !dbg !13979
  br label %for.cond27, !dbg !13979, !llvm.loop !14017

for.end49:                                        ; preds = %for.cond27
  br label %if.end50

if.end50:                                         ; preds = %for.end49, %for.end
  %46 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !14019
  %tobool51 = icmp ne %struct.cost_pair* %46, null, !dbg !14019
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !14021

if.then52:                                        ; preds = %if.end50
  %47 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !14022
  call void @iv_ca_delta_free(%struct.iv_ca_delta** %47), !dbg !14024
  %48 = bitcast %struct.comp_cost* %retval to i8*, !dbg !14025
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 bitcast (%struct.comp_cost* @infinite_cost to i8*), i64 8, i1 false), !dbg !14025
  br label %return, !dbg !14026

if.end53:                                         ; preds = %if.end50
  %49 = load %struct.iv_use*, %struct.iv_use** %use, align 8, !dbg !14027
  %50 = load %struct.cost_pair*, %struct.cost_pair** %old_cp, align 8, !dbg !14028
  %51 = load %struct.cost_pair*, %struct.cost_pair** %new_cp, align 8, !dbg !14029
  %52 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !14030
  %53 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %52, align 8, !dbg !14031
  %call54 = call %struct.iv_ca_delta* @iv_ca_delta_add(%struct.iv_use* %49, %struct.cost_pair* %50, %struct.cost_pair* %51, %struct.iv_ca_delta* %53), !dbg !14032
  %54 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !14033
  store %struct.iv_ca_delta* %call54, %struct.iv_ca_delta** %54, align 8, !dbg !14034
  br label %for.inc55, !dbg !14035

for.inc55:                                        ; preds = %if.end53, %if.then
  %55 = load i32, i32* %i, align 4, !dbg !14036
  %inc = add i32 %55, 1, !dbg !14036
  store i32 %inc, i32* %i, align 4, !dbg !14036
  br label %for.cond, !dbg !14037, !llvm.loop !14038

for.end56:                                        ; preds = %for.cond
  %56 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14040
  %57 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !14041
  %58 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !14042
  %59 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %58, align 8, !dbg !14043
  call void @iv_ca_delta_commit(%struct.ivopts_data* %56, %struct.iv_ca* %57, %struct.iv_ca_delta* %59, i8 zeroext 1), !dbg !14044
  %60 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !14045
  %call57 = call i64 @iv_ca_cost(%struct.iv_ca* %60), !dbg !14046
  %61 = bitcast %struct.comp_cost* %tmp to i64*, !dbg !14046
  store i64 %call57, i64* %61, align 4, !dbg !14046
  %62 = bitcast %struct.comp_cost* %cost to i8*, !dbg !14046
  %63 = bitcast %struct.comp_cost* %tmp to i8*, !dbg !14046
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 %63, i64 8, i1 false), !dbg !14046
  %64 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14047
  %65 = load %struct.iv_ca*, %struct.iv_ca** %ivs.addr, align 8, !dbg !14048
  %66 = load %struct.iv_ca_delta**, %struct.iv_ca_delta*** %delta.addr, align 8, !dbg !14049
  %67 = load %struct.iv_ca_delta*, %struct.iv_ca_delta** %66, align 8, !dbg !14050
  call void @iv_ca_delta_commit(%struct.ivopts_data* %64, %struct.iv_ca* %65, %struct.iv_ca_delta* %67, i8 zeroext 0), !dbg !14051
  %68 = bitcast %struct.comp_cost* %retval to i8*, !dbg !14052
  %69 = bitcast %struct.comp_cost* %cost to i8*, !dbg !14052
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %69, i64 8, i1 false), !dbg !14052
  br label %return, !dbg !14053

return:                                           ; preds = %for.end56, %if.then52
  %70 = bitcast %struct.comp_cost* %retval to i64*, !dbg !14054
  %71 = load i64, i64* %70, align 4, !dbg !14054
  ret i64 %71, !dbg !14054
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_and_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map1, %struct.bitmap_head_def* %map2, i32 %start_bit, i32* %bit_no) #0 !dbg !14055 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map1.addr = alloca %struct.bitmap_head_def*, align 8
  %map2.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !14058, metadata !DIExpression()), !dbg !14059
  store %struct.bitmap_head_def* %map1, %struct.bitmap_head_def** %map1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map1.addr, metadata !14060, metadata !DIExpression()), !dbg !14061
  store %struct.bitmap_head_def* %map2, %struct.bitmap_head_def** %map2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map2.addr, metadata !14062, metadata !DIExpression()), !dbg !14063
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !14064, metadata !DIExpression()), !dbg !14065
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !14066, metadata !DIExpression()), !dbg !14067
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map1.addr, align 8, !dbg !14068
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !14069
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !14069
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14070
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !14071
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !14072
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map2.addr, align 8, !dbg !14073
  %first1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !14074
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first1, align 8, !dbg !14074
  %5 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14075
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %5, i32 0, i32 1, !dbg !14076
  store %struct.bitmap_element_def* %4, %struct.bitmap_element_def** %elt2, align 8, !dbg !14077
  br label %while.body, !dbg !14078

while.body:                                       ; preds = %entry, %if.end6
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14079
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !14082
  %7 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt12, align 8, !dbg !14082
  %tobool = icmp ne %struct.bitmap_element_def* %7, null, !dbg !14079
  br i1 %tobool, label %if.end, label %if.then, !dbg !14083

if.then:                                          ; preds = %while.body
  %8 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14084
  %elt23 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %8, i32 0, i32 1, !dbg !14086
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt23, align 8, !dbg !14087
  br label %while.end, !dbg !14088

if.end:                                           ; preds = %while.body
  %9 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14089
  %elt14 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %9, i32 0, i32 0, !dbg !14091
  %10 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt14, align 8, !dbg !14091
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %10, i32 0, i32 2, !dbg !14092
  %11 = load i32, i32* %indx, align 8, !dbg !14092
  %12 = load i32, i32* %start_bit.addr, align 4, !dbg !14093
  %div = udiv i32 %12, 128, !dbg !14094
  %cmp = icmp uge i32 %11, %div, !dbg !14095
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !14096

if.then5:                                         ; preds = %if.end
  br label %while.end, !dbg !14097

if.end6:                                          ; preds = %if.end
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14098
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 0, !dbg !14099
  %14 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt17, align 8, !dbg !14099
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %14, i32 0, i32 0, !dbg !14100
  %15 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !14100
  %16 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14101
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %16, i32 0, i32 0, !dbg !14102
  store %struct.bitmap_element_def* %15, %struct.bitmap_element_def** %elt18, align 8, !dbg !14103
  br label %while.body, !dbg !14078, !llvm.loop !14104

while.end:                                        ; preds = %if.then5, %if.then
  br label %while.body9, !dbg !14106

while.body9:                                      ; preds = %while.end, %if.end22
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14107
  %elt210 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 1, !dbg !14110
  %18 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt210, align 8, !dbg !14110
  %tobool11 = icmp ne %struct.bitmap_element_def* %18, null, !dbg !14107
  br i1 %tobool11, label %if.end15, label %if.then12, !dbg !14111

if.then12:                                        ; preds = %while.body9
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14112
  %elt213 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 1, !dbg !14114
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt213, align 8, !dbg !14115
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14116
  %elt114 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 0, !dbg !14117
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt114, align 8, !dbg !14118
  br label %while.end26, !dbg !14119

if.end15:                                         ; preds = %while.body9
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14120
  %elt216 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 1, !dbg !14122
  %22 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt216, align 8, !dbg !14122
  %indx17 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %22, i32 0, i32 2, !dbg !14123
  %23 = load i32, i32* %indx17, align 8, !dbg !14123
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14124
  %elt118 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !14125
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt118, align 8, !dbg !14125
  %indx19 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 2, !dbg !14126
  %26 = load i32, i32* %indx19, align 8, !dbg !14126
  %cmp20 = icmp uge i32 %23, %26, !dbg !14127
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !14128

if.then21:                                        ; preds = %if.end15
  br label %while.end26, !dbg !14129

if.end22:                                         ; preds = %if.end15
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14130
  %elt223 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 1, !dbg !14131
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt223, align 8, !dbg !14131
  %next24 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !14132
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next24, align 8, !dbg !14132
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14133
  %elt225 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 1, !dbg !14134
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt225, align 8, !dbg !14135
  br label %while.body9, !dbg !14106, !llvm.loop !14136

while.end26:                                      ; preds = %if.then21, %if.then12
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14138
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !14140
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !14140
  %indx28 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %32, i32 0, i32 2, !dbg !14141
  %33 = load i32, i32* %indx28, align 8, !dbg !14141
  %34 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14142
  %elt229 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %34, i32 0, i32 1, !dbg !14143
  %35 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt229, align 8, !dbg !14143
  %indx30 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %35, i32 0, i32 2, !dbg !14144
  %36 = load i32, i32* %indx30, align 8, !dbg !14144
  %cmp31 = icmp eq i32 %33, %36, !dbg !14145
  br i1 %cmp31, label %if.then32, label %if.else, !dbg !14146

if.then32:                                        ; preds = %while.end26
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14147
  %elt133 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 0, !dbg !14150
  %38 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt133, align 8, !dbg !14150
  %indx34 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %38, i32 0, i32 2, !dbg !14151
  %39 = load i32, i32* %indx34, align 8, !dbg !14151
  %40 = load i32, i32* %start_bit.addr, align 4, !dbg !14152
  %div35 = udiv i32 %40, 128, !dbg !14153
  %cmp36 = icmp ne i32 %39, %div35, !dbg !14154
  br i1 %cmp36, label %if.then37, label %if.end40, !dbg !14155

if.then37:                                        ; preds = %if.then32
  %41 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14156
  %elt138 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %41, i32 0, i32 0, !dbg !14157
  %42 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt138, align 8, !dbg !14157
  %indx39 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %42, i32 0, i32 2, !dbg !14158
  %43 = load i32, i32* %indx39, align 8, !dbg !14158
  %mul = mul i32 %43, 128, !dbg !14159
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !14160
  br label %if.end40, !dbg !14161

if.end40:                                         ; preds = %if.then37, %if.then32
  %44 = load i32, i32* %start_bit.addr, align 4, !dbg !14162
  %div41 = udiv i32 %44, 64, !dbg !14163
  %rem = urem i32 %div41, 2, !dbg !14164
  %45 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14165
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %45, i32 0, i32 2, !dbg !14166
  store i32 %rem, i32* %word_no, align 8, !dbg !14167
  %46 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14168
  %elt142 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %46, i32 0, i32 0, !dbg !14169
  %47 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt142, align 8, !dbg !14169
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %47, i32 0, i32 3, !dbg !14170
  %48 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14171
  %word_no43 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %48, i32 0, i32 2, !dbg !14172
  %49 = load i32, i32* %word_no43, align 8, !dbg !14172
  %idxprom = zext i32 %49 to i64, !dbg !14168
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !14168
  %50 = load i64, i64* %arrayidx, align 8, !dbg !14168
  %51 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14173
  %elt244 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %51, i32 0, i32 1, !dbg !14174
  %52 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt244, align 8, !dbg !14174
  %bits45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %52, i32 0, i32 3, !dbg !14175
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14176
  %word_no46 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 2, !dbg !14177
  %54 = load i32, i32* %word_no46, align 8, !dbg !14177
  %idxprom47 = zext i32 %54 to i64, !dbg !14173
  %arrayidx48 = getelementptr inbounds [2 x i64], [2 x i64]* %bits45, i64 0, i64 %idxprom47, !dbg !14173
  %55 = load i64, i64* %arrayidx48, align 8, !dbg !14173
  %and = and i64 %50, %55, !dbg !14178
  %56 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14179
  %bits49 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %56, i32 0, i32 3, !dbg !14180
  store i64 %and, i64* %bits49, align 8, !dbg !14181
  %57 = load i32, i32* %start_bit.addr, align 4, !dbg !14182
  %rem50 = urem i32 %57, 64, !dbg !14183
  %58 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14184
  %bits51 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %58, i32 0, i32 3, !dbg !14185
  %59 = load i64, i64* %bits51, align 8, !dbg !14186
  %sh_prom = zext i32 %rem50 to i64, !dbg !14186
  %shr = lshr i64 %59, %sh_prom, !dbg !14186
  store i64 %shr, i64* %bits51, align 8, !dbg !14186
  br label %if.end54, !dbg !14187

if.else:                                          ; preds = %while.end26
  %60 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14188
  %word_no52 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %60, i32 0, i32 2, !dbg !14190
  store i32 1, i32* %word_no52, align 8, !dbg !14191
  %61 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14192
  %bits53 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %61, i32 0, i32 3, !dbg !14193
  store i64 0, i64* %bits53, align 8, !dbg !14194
  br label %if.end54

if.end54:                                         ; preds = %if.else, %if.end40
  %62 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14195
  %bits55 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %62, i32 0, i32 3, !dbg !14196
  %63 = load i64, i64* %bits55, align 8, !dbg !14196
  %tobool56 = icmp ne i64 %63, 0, !dbg !14197
  %lnot = xor i1 %tobool56, true, !dbg !14197
  %lnot.ext = zext i1 %lnot to i32, !dbg !14197
  %64 = load i32, i32* %start_bit.addr, align 4, !dbg !14198
  %add = add i32 %64, %lnot.ext, !dbg !14198
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !14198
  %65 = load i32, i32* %start_bit.addr, align 4, !dbg !14199
  %66 = load i32*, i32** %bit_no.addr, align 8, !dbg !14200
  store i32 %65, i32* %66, align 4, !dbg !14201
  ret void, !dbg !14202
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_and(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !14203 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !14204, metadata !DIExpression()), !dbg !14205
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !14206, metadata !DIExpression()), !dbg !14207
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14208
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !14210
  %1 = load i64, i64* %bits, align 8, !dbg !14210
  %tobool = icmp ne i64 %1, 0, !dbg !14208
  br i1 %tobool, label %if.then, label %if.end, !dbg !14211

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !14212

next_bit:                                         ; preds = %if.then20, %if.then
  call void @llvm.dbg.label(metadata !14213), !dbg !14215
  br label %while.cond, !dbg !14216

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14217
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !14218
  %3 = load i64, i64* %bits1, align 8, !dbg !14218
  %and = and i64 %3, 1, !dbg !14219
  %tobool2 = icmp ne i64 %and, 0, !dbg !14220
  %lnot = xor i1 %tobool2, true, !dbg !14220
  br i1 %lnot, label %while.body, label %while.end, !dbg !14216

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14221
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !14223
  %5 = load i64, i64* %bits3, align 8, !dbg !14224
  %shr = lshr i64 %5, 1, !dbg !14224
  store i64 %shr, i64* %bits3, align 8, !dbg !14224
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !14225
  %7 = load i32, i32* %6, align 4, !dbg !14226
  %add = add i32 %7, 1, !dbg !14226
  store i32 %add, i32* %6, align 4, !dbg !14226
  br label %while.cond, !dbg !14216, !llvm.loop !14227

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !14229
  br label %return, !dbg !14229

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !14230
  %9 = load i32, i32* %8, align 4, !dbg !14231
  %add4 = add i32 %9, 64, !dbg !14232
  %sub = sub i32 %add4, 1, !dbg !14233
  %div = udiv i32 %sub, 64, !dbg !14234
  %mul = mul i32 %div, 64, !dbg !14235
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !14236
  store i32 %mul, i32* %10, align 4, !dbg !14237
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14238
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !14239
  %12 = load i32, i32* %word_no, align 8, !dbg !14240
  %inc = add i32 %12, 1, !dbg !14240
  store i32 %inc, i32* %word_no, align 8, !dbg !14240
  br label %while.body6, !dbg !14241

while.body6:                                      ; preds = %if.end, %do.end58
  br label %while.cond7, !dbg !14242

while.cond7:                                      ; preds = %if.end21, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14244
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !14245
  %14 = load i32, i32* %word_no8, align 8, !dbg !14245
  %cmp = icmp ne i32 %14, 2, !dbg !14246
  br i1 %cmp, label %while.body9, label %while.end25, !dbg !14242

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14247
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !14249
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !14249
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !14250
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14251
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !14252
  %18 = load i32, i32* %word_no11, align 8, !dbg !14252
  %idxprom = zext i32 %18 to i64, !dbg !14247
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !14247
  %19 = load i64, i64* %arrayidx, align 8, !dbg !14247
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14253
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 1, !dbg !14254
  %21 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt2, align 8, !dbg !14254
  %bits12 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %21, i32 0, i32 3, !dbg !14255
  %22 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14256
  %word_no13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %22, i32 0, i32 2, !dbg !14257
  %23 = load i32, i32* %word_no13, align 8, !dbg !14257
  %idxprom14 = zext i32 %23 to i64, !dbg !14253
  %arrayidx15 = getelementptr inbounds [2 x i64], [2 x i64]* %bits12, i64 0, i64 %idxprom14, !dbg !14253
  %24 = load i64, i64* %arrayidx15, align 8, !dbg !14253
  %and16 = and i64 %19, %24, !dbg !14258
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14259
  %bits17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 3, !dbg !14260
  store i64 %and16, i64* %bits17, align 8, !dbg !14261
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14262
  %bits18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 3, !dbg !14264
  %27 = load i64, i64* %bits18, align 8, !dbg !14264
  %tobool19 = icmp ne i64 %27, 0, !dbg !14262
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !14265

if.then20:                                        ; preds = %while.body9
  br label %next_bit, !dbg !14266

if.end21:                                         ; preds = %while.body9
  %28 = load i32*, i32** %bit_no.addr, align 8, !dbg !14267
  %29 = load i32, i32* %28, align 4, !dbg !14268
  %add22 = add i32 %29, 64, !dbg !14268
  store i32 %add22, i32* %28, align 4, !dbg !14268
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14269
  %word_no23 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 2, !dbg !14270
  %31 = load i32, i32* %word_no23, align 8, !dbg !14271
  %inc24 = add i32 %31, 1, !dbg !14271
  store i32 %inc24, i32* %word_no23, align 8, !dbg !14271
  br label %while.cond7, !dbg !14242, !llvm.loop !14272

while.end25:                                      ; preds = %while.cond7
  br label %do.body, !dbg !14274

do.body:                                          ; preds = %do.cond52, %while.end25
  br label %do.body26, !dbg !14275

do.body26:                                        ; preds = %do.cond, %do.body
  %32 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14277
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %32, i32 0, i32 0, !dbg !14279
  %33 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !14279
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %33, i32 0, i32 0, !dbg !14280
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !14280
  %35 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14281
  %elt128 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %35, i32 0, i32 0, !dbg !14282
  store %struct.bitmap_element_def* %34, %struct.bitmap_element_def** %elt128, align 8, !dbg !14283
  %36 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14284
  %elt129 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %36, i32 0, i32 0, !dbg !14286
  %37 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt129, align 8, !dbg !14286
  %tobool30 = icmp ne %struct.bitmap_element_def* %37, null, !dbg !14284
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !14287

if.then31:                                        ; preds = %do.body26
  store i8 0, i8* %retval, align 1, !dbg !14288
  br label %return, !dbg !14288

if.end32:                                         ; preds = %do.body26
  br label %do.cond, !dbg !14289

do.cond:                                          ; preds = %if.end32
  %38 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14290
  %elt133 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %38, i32 0, i32 0, !dbg !14291
  %39 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt133, align 8, !dbg !14291
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %39, i32 0, i32 2, !dbg !14292
  %40 = load i32, i32* %indx, align 8, !dbg !14292
  %41 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14293
  %elt234 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %41, i32 0, i32 1, !dbg !14294
  %42 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt234, align 8, !dbg !14294
  %indx35 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %42, i32 0, i32 2, !dbg !14295
  %43 = load i32, i32* %indx35, align 8, !dbg !14295
  %cmp36 = icmp ult i32 %40, %43, !dbg !14296
  br i1 %cmp36, label %do.body26, label %do.end, !dbg !14289, !llvm.loop !14297

do.end:                                           ; preds = %do.cond
  br label %while.cond37, !dbg !14299

while.cond37:                                     ; preds = %if.end50, %do.end
  %44 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14300
  %elt238 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %44, i32 0, i32 1, !dbg !14301
  %45 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt238, align 8, !dbg !14301
  %indx39 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %45, i32 0, i32 2, !dbg !14302
  %46 = load i32, i32* %indx39, align 8, !dbg !14302
  %47 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14303
  %elt140 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %47, i32 0, i32 0, !dbg !14304
  %48 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt140, align 8, !dbg !14304
  %indx41 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %48, i32 0, i32 2, !dbg !14305
  %49 = load i32, i32* %indx41, align 8, !dbg !14305
  %cmp42 = icmp ult i32 %46, %49, !dbg !14306
  br i1 %cmp42, label %while.body43, label %while.end51, !dbg !14299

while.body43:                                     ; preds = %while.cond37
  %50 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14307
  %elt244 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %50, i32 0, i32 1, !dbg !14309
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt244, align 8, !dbg !14309
  %next45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 0, !dbg !14310
  %52 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next45, align 8, !dbg !14310
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14311
  %elt246 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 1, !dbg !14312
  store %struct.bitmap_element_def* %52, %struct.bitmap_element_def** %elt246, align 8, !dbg !14313
  %54 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14314
  %elt247 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %54, i32 0, i32 1, !dbg !14316
  %55 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt247, align 8, !dbg !14316
  %tobool48 = icmp ne %struct.bitmap_element_def* %55, null, !dbg !14314
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !14317

if.then49:                                        ; preds = %while.body43
  store i8 0, i8* %retval, align 1, !dbg !14318
  br label %return, !dbg !14318

if.end50:                                         ; preds = %while.body43
  br label %while.cond37, !dbg !14299, !llvm.loop !14319

while.end51:                                      ; preds = %while.cond37
  br label %do.cond52, !dbg !14321

do.cond52:                                        ; preds = %while.end51
  %56 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14322
  %elt153 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %56, i32 0, i32 0, !dbg !14323
  %57 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt153, align 8, !dbg !14323
  %indx54 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %57, i32 0, i32 2, !dbg !14324
  %58 = load i32, i32* %indx54, align 8, !dbg !14324
  %59 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14325
  %elt255 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %59, i32 0, i32 1, !dbg !14326
  %60 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt255, align 8, !dbg !14326
  %indx56 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %60, i32 0, i32 2, !dbg !14327
  %61 = load i32, i32* %indx56, align 8, !dbg !14327
  %cmp57 = icmp ne i32 %58, %61, !dbg !14328
  br i1 %cmp57, label %do.body, label %do.end58, !dbg !14321, !llvm.loop !14329

do.end58:                                         ; preds = %do.cond52
  %62 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14331
  %elt159 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %62, i32 0, i32 0, !dbg !14332
  %63 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt159, align 8, !dbg !14332
  %indx60 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %63, i32 0, i32 2, !dbg !14333
  %64 = load i32, i32* %indx60, align 8, !dbg !14333
  %mul61 = mul i32 %64, 128, !dbg !14334
  %65 = load i32*, i32** %bit_no.addr, align 8, !dbg !14335
  store i32 %mul61, i32* %65, align 4, !dbg !14336
  %66 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !14337
  %word_no62 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %66, i32 0, i32 2, !dbg !14338
  store i32 0, i32* %word_no62, align 8, !dbg !14339
  br label %while.body6, !dbg !14241, !llvm.loop !14340

return:                                           ; preds = %if.then49, %if.then31, %while.end
  %67 = load i8, i8* %retval, align 1, !dbg !14342
  ret i8 %67, !dbg !14342
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_new_iv(%struct.ivopts_data* %data, %struct.iv_cand* %cand) #0 !dbg !14343 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %incr_pos = alloca %struct.gimple_stmt_iterator, align 8
  %base = alloca %union.tree_node*, align 8
  %after = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp7 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !14344, metadata !DIExpression()), !dbg !14345
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !14346, metadata !DIExpression()), !dbg !14347
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %incr_pos, metadata !14348, metadata !DIExpression()), !dbg !14349
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !14350, metadata !DIExpression()), !dbg !14351
  call void @llvm.dbg.declare(metadata i8* %after, metadata !14352, metadata !DIExpression()), !dbg !14353
  store i8 0, i8* %after, align 1, !dbg !14353
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14354
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 6, !dbg !14356
  %1 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !14356
  %tobool = icmp ne %struct.iv* %1, null, !dbg !14354
  br i1 %tobool, label %if.end, label %if.then, !dbg !14357

if.then:                                          ; preds = %entry
  br label %return, !dbg !14358

if.end:                                           ; preds = %entry
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14359
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %2, i32 0, i32 2, !dbg !14360
  %3 = load i32, i32* %pos, align 8, !dbg !14360
  switch i32 %3, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 3, label %sw.bb5
    i32 2, label %sw.bb6
    i32 4, label %sw.bb8
  ], !dbg !14361

sw.bb:                                            ; preds = %if.end
  %4 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14362
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %4, i32 0, i32 0, !dbg !14364
  %5 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !14364
  %call = call %struct.basic_block_def* @ip_normal_pos(%struct.loop* %5), !dbg !14365
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %call), !dbg !14366
  %6 = bitcast %struct.gimple_stmt_iterator* %incr_pos to i8*, !dbg !14366
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !14366
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !14366
  br label %sw.epilog, !dbg !14367

sw.bb1:                                           ; preds = %if.end
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14368
  %current_loop3 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %8, i32 0, i32 0, !dbg !14369
  %9 = load %struct.loop*, %struct.loop** %current_loop3, align 8, !dbg !14369
  %call4 = call %struct.basic_block_def* @ip_end_pos(%struct.loop* %9), !dbg !14370
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp2, %struct.basic_block_def* %call4), !dbg !14371
  %10 = bitcast %struct.gimple_stmt_iterator* %incr_pos to i8*, !dbg !14371
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !14371
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !14371
  store i8 1, i8* %after, align 1, !dbg !14372
  br label %sw.epilog, !dbg !14373

sw.bb5:                                           ; preds = %if.end
  store i8 1, i8* %after, align 1, !dbg !14374
  br label %sw.bb6, !dbg !14375

sw.bb6:                                           ; preds = %if.end, %sw.bb5
  %12 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14376
  %incremented_at = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %12, i32 0, i32 3, !dbg !14377
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at, align 8, !dbg !14377
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp7, %union.gimple_statement_d* %13), !dbg !14378
  %14 = bitcast %struct.gimple_stmt_iterator* %incr_pos to i8*, !dbg !14378
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp7 to i8*, !dbg !14378
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !14378
  br label %sw.epilog, !dbg !14379

sw.bb8:                                           ; preds = %if.end
  %16 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14380
  %17 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14381
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %17, i32 0, i32 4, !dbg !14382
  %18 = load %union.tree_node*, %union.tree_node** %var_before, align 8, !dbg !14382
  %call9 = call %struct.version_info* @name_info(%struct.ivopts_data* %16, %union.tree_node* %18), !dbg !14383
  %preserve_biv = getelementptr inbounds %struct.version_info, %struct.version_info* %call9, i32 0, i32 4, !dbg !14384
  store i8 1, i8* %preserve_biv, align 8, !dbg !14385
  %19 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14386
  %20 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14387
  %var_after = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %20, i32 0, i32 5, !dbg !14388
  %21 = load %union.tree_node*, %union.tree_node** %var_after, align 8, !dbg !14388
  %call10 = call %struct.version_info* @name_info(%struct.ivopts_data* %19, %union.tree_node* %21), !dbg !14389
  %preserve_biv11 = getelementptr inbounds %struct.version_info, %struct.version_info* %call10, i32 0, i32 4, !dbg !14390
  store i8 1, i8* %preserve_biv11, align 8, !dbg !14391
  %22 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14392
  %23 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14393
  %24 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14394
  %var_after12 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %24, i32 0, i32 5, !dbg !14395
  %25 = load %union.tree_node*, %union.tree_node** %var_after12, align 8, !dbg !14395
  %call13 = call %struct.iv_use* @find_interesting_uses_op(%struct.ivopts_data* %23, %union.tree_node* %25), !dbg !14396
  %selected = getelementptr inbounds %struct.iv_use, %struct.iv_use* %call13, i32 0, i32 8, !dbg !14397
  store %struct.iv_cand* %22, %struct.iv_cand** %selected, align 8, !dbg !14398
  br label %return, !dbg !14399

sw.epilog:                                        ; preds = %if.end, %sw.bb6, %sw.bb1, %sw.bb
  %26 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14400
  %var_before14 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %26, i32 0, i32 4, !dbg !14401
  %27 = load %union.tree_node*, %union.tree_node** %var_before14, align 8, !dbg !14401
  call void @gimple_add_tmp_var(%union.tree_node* %27), !dbg !14402
  %28 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14403
  %var_before15 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %28, i32 0, i32 4, !dbg !14404
  %29 = load %union.tree_node*, %union.tree_node** %var_before15, align 8, !dbg !14404
  %call16 = call zeroext i8 @add_referenced_var(%union.tree_node* %29), !dbg !14405
  %30 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14406
  %iv17 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %30, i32 0, i32 6, !dbg !14407
  %31 = load %struct.iv*, %struct.iv** %iv17, align 8, !dbg !14407
  %base18 = getelementptr inbounds %struct.iv, %struct.iv* %31, i32 0, i32 0, !dbg !14408
  %32 = load %union.tree_node*, %union.tree_node** %base18, align 8, !dbg !14408
  %call19 = call %union.tree_node* @unshare_expr(%union.tree_node* %32), !dbg !14409
  store %union.tree_node* %call19, %union.tree_node** %base, align 8, !dbg !14410
  %33 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !14411
  %34 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14412
  %iv20 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %34, i32 0, i32 6, !dbg !14413
  %35 = load %struct.iv*, %struct.iv** %iv20, align 8, !dbg !14413
  %step = getelementptr inbounds %struct.iv, %struct.iv* %35, i32 0, i32 2, !dbg !14414
  %36 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14414
  %call21 = call %union.tree_node* @unshare_expr(%union.tree_node* %36), !dbg !14415
  %37 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14416
  %var_before22 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %37, i32 0, i32 4, !dbg !14417
  %38 = load %union.tree_node*, %union.tree_node** %var_before22, align 8, !dbg !14417
  %39 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14418
  %current_loop23 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %39, i32 0, i32 0, !dbg !14419
  %40 = load %struct.loop*, %struct.loop** %current_loop23, align 8, !dbg !14419
  %41 = load i8, i8* %after, align 1, !dbg !14420
  %42 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14421
  %var_before24 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %42, i32 0, i32 4, !dbg !14422
  %43 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14423
  %var_after25 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %43, i32 0, i32 5, !dbg !14424
  call void @create_iv(%union.tree_node* %33, %union.tree_node* %call21, %union.tree_node* %38, %struct.loop* %40, %struct.gimple_stmt_iterator* %incr_pos, i8 zeroext %41, %union.tree_node** %var_before24, %union.tree_node** %var_after25), !dbg !14425
  br label %return, !dbg !14426

return:                                           ; preds = %sw.epilog, %sw.bb8, %if.then
  ret void, !dbg !14426
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !14427 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14428, metadata !DIExpression()), !dbg !14429
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !14430, metadata !DIExpression()), !dbg !14431
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !14432, metadata !DIExpression()), !dbg !14433
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14434
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !14435
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !14436
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !14437
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !14438
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !14439
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !14440
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !14441
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !14442
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !14443
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14444
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !14445
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !14446
  ret void, !dbg !14447
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local void @gimple_add_tmp_var(%union.tree_node*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local void @create_iv(%union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.loop*, %struct.gimple_stmt_iterator*, i8 zeroext, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !14448 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !14449, metadata !DIExpression()), !dbg !14450
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !14451
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !14451
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14451

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !14452
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !14453
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !14453
  br label %cond.end, !dbg !14451

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !14451
  ret %struct.gimple_seq_node_d* %cond, !dbg !14454
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_use(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !14455 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !14458, metadata !DIExpression()), !dbg !14459
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !14460, metadata !DIExpression()), !dbg !14461
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !14462, metadata !DIExpression()), !dbg !14463
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14464
  %type = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 1, !dbg !14465
  %1 = load i32, i32* %type, align 4, !dbg !14465
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
  ], !dbg !14466

sw.bb:                                            ; preds = %entry
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14467
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14469
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14470
  call void @rewrite_use_nonlinear_expr(%struct.ivopts_data* %2, %struct.iv_use* %3, %struct.iv_cand* %4), !dbg !14471
  br label %sw.epilog, !dbg !14472

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14473
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14474
  %7 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14475
  call void @rewrite_use_address(%struct.ivopts_data* %5, %struct.iv_use* %6, %struct.iv_cand* %7), !dbg !14476
  br label %sw.epilog, !dbg !14477

sw.bb2:                                           ; preds = %entry
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14478
  %9 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14479
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14480
  call void @rewrite_use_compare(%struct.ivopts_data* %8, %struct.iv_use* %9, %struct.iv_cand* %10), !dbg !14481
  br label %sw.epilog, !dbg !14482

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5635, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14483
  br label %sw.epilog, !dbg !14484

sw.epilog:                                        ; preds = %sw.default, %sw.bb2, %sw.bb1, %sw.bb
  %11 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14485
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %11, i32 0, i32 3, !dbg !14486
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14486
  call void @update_stmt(%union.gimple_statement_d* %12), !dbg !14487
  ret void, !dbg !14488
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_use_nonlinear_expr(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !14489 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %comp = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  %tgt = alloca %union.tree_node*, align 8
  %ass = alloca %union.gimple_statement_d*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %step = alloca %union.tree_node*, align 8
  %ctype = alloca %union.tree_node*, align 8
  %utype = alloca %union.tree_node*, align 8
  %incr_code = alloca i32, align 4
  %old_code = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp82 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp90 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !14490, metadata !DIExpression()), !dbg !14491
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !14492, metadata !DIExpression()), !dbg !14493
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !14494, metadata !DIExpression()), !dbg !14495
  call void @llvm.dbg.declare(metadata %union.tree_node** %comp, metadata !14496, metadata !DIExpression()), !dbg !14497
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !14498, metadata !DIExpression()), !dbg !14499
  call void @llvm.dbg.declare(metadata %union.tree_node** %tgt, metadata !14500, metadata !DIExpression()), !dbg !14501
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ass, metadata !14502, metadata !DIExpression()), !dbg !14503
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !14504, metadata !DIExpression()), !dbg !14505
  %0 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14506
  %pos = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %0, i32 0, i32 2, !dbg !14508
  %1 = load i32, i32* %pos, align 8, !dbg !14508
  %cmp = icmp eq i32 %1, 4, !dbg !14509
  br i1 %cmp, label %land.lhs.true, label %if.else60, !dbg !14510

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14511
  %incremented_at = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %2, i32 0, i32 3, !dbg !14512
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %incremented_at, align 8, !dbg !14512
  %4 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14513
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %4, i32 0, i32 3, !dbg !14514
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14514
  %cmp1 = icmp eq %union.gimple_statement_d* %3, %5, !dbg !14515
  br i1 %cmp1, label %if.then, label %if.else60, !dbg !14516

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !14517, metadata !DIExpression()), !dbg !14519
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctype, metadata !14520, metadata !DIExpression()), !dbg !14521
  call void @llvm.dbg.declare(metadata %union.tree_node** %utype, metadata !14522, metadata !DIExpression()), !dbg !14523
  call void @llvm.dbg.declare(metadata i32* %incr_code, metadata !14524, metadata !DIExpression()), !dbg !14525
  store i32 63, i32* %incr_code, align 4, !dbg !14525
  call void @llvm.dbg.declare(metadata i32* %old_code, metadata !14526, metadata !DIExpression()), !dbg !14527
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14528
  %stmt2 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %6, i32 0, i32 3, !dbg !14528
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !14528
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %7), !dbg !14528
  %tobool = icmp ne i8 %call, 0, !dbg !14528
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !14528

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5390, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14528
  br label %cond.end, !dbg !14528

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !14528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14528
  %8 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14529
  %stmt3 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %8, i32 0, i32 3, !dbg !14529
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !14529
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %9), !dbg !14529
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14529
  %var_after = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %10, i32 0, i32 5, !dbg !14529
  %11 = load %union.tree_node*, %union.tree_node** %var_after, align 8, !dbg !14529
  %cmp5 = icmp eq %union.tree_node* %call4, %11, !dbg !14529
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !14529

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5391, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14529
  br label %cond.end8, !dbg !14529

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !14529

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !14529
  %12 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14530
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %12, i32 0, i32 6, !dbg !14531
  %13 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !14531
  %step10 = getelementptr inbounds %struct.iv, %struct.iv* %13, i32 0, i32 2, !dbg !14532
  %14 = load %union.tree_node*, %union.tree_node** %step10, align 8, !dbg !14532
  store %union.tree_node* %14, %union.tree_node** %step, align 8, !dbg !14533
  %15 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14534
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !14534
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14534
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14534
  store %union.tree_node* %16, %union.tree_node** %ctype, align 8, !dbg !14535
  %17 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14536
  %var_after11 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %17, i32 0, i32 5, !dbg !14536
  %18 = load %union.tree_node*, %union.tree_node** %var_after11, align 8, !dbg !14536
  %common12 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !14536
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !14536
  %19 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !14536
  store %union.tree_node* %19, %union.tree_node** %utype, align 8, !dbg !14537
  %20 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14538
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !14538
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !14538
  %bf.load = load i64, i64* %21, align 8, !dbg !14538
  %bf.clear = and i64 %bf.load, 65535, !dbg !14538
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14538
  %cmp14 = icmp eq i32 %bf.cast, 79, !dbg !14540
  br i1 %cmp14, label %if.then15, label %if.end, !dbg !14541

if.then15:                                        ; preds = %cond.end8
  store i32 64, i32* %incr_code, align 4, !dbg !14542
  %22 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14544
  %exp = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !14544
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14544
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14544
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14544
  store %union.tree_node* %23, %union.tree_node** %step, align 8, !dbg !14545
  br label %if.end, !dbg !14546

if.end:                                           ; preds = %if.then15, %cond.end8
  %24 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14547
  %stmt16 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %24, i32 0, i32 3, !dbg !14548
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt16, align 8, !dbg !14548
  %call17 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %25), !dbg !14549
  store i32 %call17, i32* %old_code, align 4, !dbg !14550
  %26 = load i32, i32* %old_code, align 4, !dbg !14551
  %cmp18 = icmp eq i32 %26, 63, !dbg !14553
  br i1 %cmp18, label %if.then22, label %lor.lhs.false, !dbg !14554

lor.lhs.false:                                    ; preds = %if.end
  %27 = load i32, i32* %old_code, align 4, !dbg !14555
  %cmp19 = icmp eq i32 %27, 64, !dbg !14556
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20, !dbg !14557

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %28 = load i32, i32* %old_code, align 4, !dbg !14558
  %cmp21 = icmp eq i32 %28, 66, !dbg !14559
  br i1 %cmp21, label %if.then22, label %if.else41, !dbg !14560

if.then22:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %if.end
  %29 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14561
  %stmt23 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %29, i32 0, i32 3, !dbg !14564
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt23, align 8, !dbg !14564
  %call24 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %30), !dbg !14565
  %31 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14566
  %var_before = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %31, i32 0, i32 4, !dbg !14567
  %32 = load %union.tree_node*, %union.tree_node** %var_before, align 8, !dbg !14567
  %cmp25 = icmp eq %union.tree_node* %call24, %32, !dbg !14568
  br i1 %cmp25, label %if.then26, label %if.else, !dbg !14569

if.then26:                                        ; preds = %if.then22
  %33 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14570
  %stmt27 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %33, i32 0, i32 3, !dbg !14571
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt27, align 8, !dbg !14571
  %call28 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %34), !dbg !14572
  store %union.tree_node* %call28, %union.tree_node** %op, align 8, !dbg !14573
  br label %if.end40, !dbg !14574

if.else:                                          ; preds = %if.then22
  %35 = load i32, i32* %old_code, align 4, !dbg !14575
  %cmp29 = icmp ne i32 %35, 64, !dbg !14577
  br i1 %cmp29, label %land.lhs.true30, label %if.else38, !dbg !14578

land.lhs.true30:                                  ; preds = %if.else
  %36 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14579
  %stmt31 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %36, i32 0, i32 3, !dbg !14580
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt31, align 8, !dbg !14580
  %call32 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %37), !dbg !14581
  %38 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14582
  %var_before33 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %38, i32 0, i32 4, !dbg !14583
  %39 = load %union.tree_node*, %union.tree_node** %var_before33, align 8, !dbg !14583
  %cmp34 = icmp eq %union.tree_node* %call32, %39, !dbg !14584
  br i1 %cmp34, label %if.then35, label %if.else38, !dbg !14585

if.then35:                                        ; preds = %land.lhs.true30
  %40 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14586
  %stmt36 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %40, i32 0, i32 3, !dbg !14587
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt36, align 8, !dbg !14587
  %call37 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %41), !dbg !14588
  store %union.tree_node* %call37, %union.tree_node** %op, align 8, !dbg !14589
  br label %if.end39, !dbg !14590

if.else38:                                        ; preds = %land.lhs.true30, %if.else
  store %union.tree_node* null, %union.tree_node** %op, align 8, !dbg !14591
  br label %if.end39

if.end39:                                         ; preds = %if.else38, %if.then35
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then26
  br label %if.end42, !dbg !14592

if.else41:                                        ; preds = %lor.lhs.false20
  store %union.tree_node* null, %union.tree_node** %op, align 8, !dbg !14593
  br label %if.end42

if.end42:                                         ; preds = %if.else41, %if.end40
  %42 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14594
  %tobool43 = icmp ne %union.tree_node* %42, null, !dbg !14594
  br i1 %tobool43, label %land.lhs.true44, label %if.end54, !dbg !14596

land.lhs.true44:                                  ; preds = %if.end42
  %43 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14597
  %base45 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !14597
  %44 = bitcast %struct.tree_base* %base45 to i64*, !dbg !14597
  %bf.load46 = load i64, i64* %44, align 8, !dbg !14597
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !14597
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !14597
  %cmp49 = icmp eq i32 %bf.cast48, 23, !dbg !14598
  br i1 %cmp49, label %if.then53, label %lor.lhs.false50, !dbg !14599

lor.lhs.false50:                                  ; preds = %land.lhs.true44
  %45 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14600
  %46 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14601
  %call51 = call i32 @operand_equal_p(%union.tree_node* %45, %union.tree_node* %46, i32 0), !dbg !14602
  %tobool52 = icmp ne i32 %call51, 0, !dbg !14602
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !14603

if.then53:                                        ; preds = %lor.lhs.false50, %land.lhs.true44
  br label %if.end95, !dbg !14604

if.end54:                                         ; preds = %lor.lhs.false50, %if.end42
  %47 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !14605
  %48 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14605
  %var_before55 = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %48, i32 0, i32 4, !dbg !14605
  %49 = load %union.tree_node*, %union.tree_node** %var_before55, align 8, !dbg !14605
  %call56 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %47, %union.tree_node* %49), !dbg !14605
  store %union.tree_node* %call56, %union.tree_node** %op, align 8, !dbg !14606
  %50 = load %union.tree_node*, %union.tree_node** %utype, align 8, !dbg !14607
  %51 = load i32, i32* %incr_code, align 4, !dbg !14607
  %52 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !14607
  %53 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14607
  %54 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !14607
  %call57 = call %union.tree_node* @unshare_expr(%union.tree_node* %54), !dbg !14607
  %call58 = call %union.tree_node* @build2_stat(i32 %51, %union.tree_node* %52, %union.tree_node* %53, %union.tree_node* %call57), !dbg !14607
  %call59 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %50, %union.tree_node* %call58), !dbg !14607
  store %union.tree_node* %call59, %union.tree_node** %comp, align 8, !dbg !14608
  br label %if.end67, !dbg !14609

if.else60:                                        ; preds = %land.lhs.true, %entry
  %55 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14610
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %55, i32 0, i32 0, !dbg !14612
  %56 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !14612
  %57 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14613
  %58 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14614
  %call61 = call %union.tree_node* @get_computation(%struct.loop* %56, %struct.iv_use* %57, %struct.iv_cand* %58), !dbg !14615
  store %union.tree_node* %call61, %union.tree_node** %comp, align 8, !dbg !14616
  %59 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !14617
  %cmp62 = icmp ne %union.tree_node* %59, null, !dbg !14617
  br i1 %cmp62, label %cond.false64, label %cond.true63, !dbg !14617

cond.true63:                                      ; preds = %if.else60
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5438, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14617
  br label %cond.end65, !dbg !14617

cond.false64:                                     ; preds = %if.else60
  br label %cond.end65, !dbg !14617

cond.end65:                                       ; preds = %cond.false64, %cond.true63
  %cond66 = phi i32 [ 0, %cond.true63 ], [ 0, %cond.false64 ], !dbg !14617
  br label %if.end67

if.end67:                                         ; preds = %cond.end65, %if.end54
  %60 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14618
  %stmt68 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %60, i32 0, i32 3, !dbg !14619
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt68, align 8, !dbg !14619
  %call69 = call i32 @gimple_code(%union.gimple_statement_d* %61), !dbg !14620
  switch i32 %call69, label %sw.default [
    i32 16, label %sw.bb
    i32 6, label %sw.bb79
  ], !dbg !14621

sw.bb:                                            ; preds = %if.end67
  %62 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14622
  %stmt70 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %62, i32 0, i32 3, !dbg !14622
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt70, align 8, !dbg !14622
  %call71 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %63), !dbg !14622
  %call72 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call71), !dbg !14622
  store %union.tree_node* %call72, %union.tree_node** %tgt, align 8, !dbg !14624
  %64 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14625
  %65 = load %union.tree_node*, %union.tree_node** %tgt, align 8, !dbg !14627
  %call73 = call %struct.version_info* @name_info(%struct.ivopts_data* %64, %union.tree_node* %65), !dbg !14628
  %preserve_biv = getelementptr inbounds %struct.version_info, %struct.version_info* %call73, i32 0, i32 4, !dbg !14629
  %66 = load i8, i8* %preserve_biv, align 8, !dbg !14629
  %tobool74 = icmp ne i8 %66, 0, !dbg !14628
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !14630

if.then75:                                        ; preds = %sw.bb
  br label %if.end95, !dbg !14631

if.end76:                                         ; preds = %sw.bb
  %67 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14632
  %stmt77 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %67, i32 0, i32 3, !dbg !14633
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt77, align 8, !dbg !14633
  %call78 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %68), !dbg !14634
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %call78), !dbg !14635
  %69 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !14635
  %70 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !14635
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false), !dbg !14635
  br label %sw.epilog, !dbg !14636

sw.bb79:                                          ; preds = %if.end67
  %71 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14637
  %stmt80 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %71, i32 0, i32 3, !dbg !14638
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt80, align 8, !dbg !14638
  %call81 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %72), !dbg !14639
  store %union.tree_node* %call81, %union.tree_node** %tgt, align 8, !dbg !14640
  %73 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14641
  %stmt83 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %73, i32 0, i32 3, !dbg !14642
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt83, align 8, !dbg !14642
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp82, %union.gimple_statement_d* %74), !dbg !14643
  %75 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !14643
  %76 = bitcast %struct.gimple_stmt_iterator* %tmp82 to i8*, !dbg !14643
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 24, i1 false), !dbg !14643
  br label %sw.epilog, !dbg !14644

sw.default:                                       ; preds = %if.end67
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5459, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14645
  br label %sw.epilog, !dbg !14646

sw.epilog:                                        ; preds = %sw.default, %sw.bb79, %if.end76
  %77 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !14647
  %78 = load %union.tree_node*, %union.tree_node** %tgt, align 8, !dbg !14648
  %ssa_name = bitcast %union.tree_node* %78 to %struct.tree_ssa_name*, !dbg !14648
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !14648
  %79 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14648
  %call84 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %77, i8 zeroext 0, %union.tree_node* %79, i8 zeroext 1, i32 1), !dbg !14649
  store %union.tree_node* %call84, %union.tree_node** %op, align 8, !dbg !14650
  %80 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14651
  %stmt85 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %80, i32 0, i32 3, !dbg !14653
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt85, align 8, !dbg !14653
  %call86 = call i32 @gimple_code(%union.gimple_statement_d* %81), !dbg !14654
  %cmp87 = icmp eq i32 %call86, 16, !dbg !14655
  br i1 %cmp87, label %if.then88, label %if.else92, !dbg !14656

if.then88:                                        ; preds = %sw.epilog
  %82 = load %union.tree_node*, %union.tree_node** %tgt, align 8, !dbg !14657
  %83 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14657
  %call89 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %82, %union.tree_node* %83), !dbg !14657
  store %union.gimple_statement_d* %call89, %union.gimple_statement_d** %ass, align 8, !dbg !14659
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ass, align 8, !dbg !14660
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %84, i32 1), !dbg !14661
  %85 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14662
  %stmt91 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %85, i32 0, i32 3, !dbg !14663
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt91, align 8, !dbg !14663
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp90, %union.gimple_statement_d* %86), !dbg !14664
  %87 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !14664
  %88 = bitcast %struct.gimple_stmt_iterator* %tmp90 to i8*, !dbg !14664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 24, i1 false), !dbg !14664
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %bsi, i8 zeroext 0), !dbg !14665
  br label %if.end95, !dbg !14666

if.else92:                                        ; preds = %sw.epilog
  %89 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14667
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %89), !dbg !14669
  %call93 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !14670
  %90 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14671
  %stmt94 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %90, i32 0, i32 3, !dbg !14672
  store %union.gimple_statement_d* %call93, %union.gimple_statement_d** %stmt94, align 8, !dbg !14673
  br label %if.end95

if.end95:                                         ; preds = %if.then53, %if.then75, %if.else92, %if.then88
  ret void, !dbg !14674
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_use_address(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !14675 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %aff = alloca %struct.affine_tree_combination, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %base_hint = alloca %union.tree_node*, align 8
  %ref = alloca %union.tree_node*, align 8
  %ok = alloca i8, align 1
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !14676, metadata !DIExpression()), !dbg !14677
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !14678, metadata !DIExpression()), !dbg !14679
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !14680, metadata !DIExpression()), !dbg !14681
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %aff, metadata !14682, metadata !DIExpression()), !dbg !14683
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !14684, metadata !DIExpression()), !dbg !14685
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14686
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 3, !dbg !14687
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14687
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %bsi, %union.gimple_statement_d* %1), !dbg !14688
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_hint, metadata !14689, metadata !DIExpression()), !dbg !14690
  store %union.tree_node* null, %union.tree_node** %base_hint, align 8, !dbg !14690
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !14691, metadata !DIExpression()), !dbg !14692
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !14693, metadata !DIExpression()), !dbg !14694
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14695
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %2, i32 0, i32 0, !dbg !14696
  %3 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !14696
  %4 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14697
  %5 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14698
  %6 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14699
  %stmt1 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %6, i32 0, i32 3, !dbg !14700
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !14700
  %call = call zeroext i8 @get_computation_aff(%struct.loop* %3, %struct.iv_use* %4, %struct.iv_cand* %5, %union.gimple_statement_d* %7, %struct.affine_tree_combination* %aff), !dbg !14701
  store i8 %call, i8* %ok, align 1, !dbg !14702
  %8 = load i8, i8* %ok, align 1, !dbg !14703
  %tobool = icmp ne i8 %8, 0, !dbg !14703
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !14703

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5546, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14703
  br label %cond.end, !dbg !14703

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14703

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14703
  call void @unshare_aff_combination(%struct.affine_tree_combination* %aff), !dbg !14704
  %9 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14705
  %iv = getelementptr inbounds %struct.iv_cand, %struct.iv_cand* %9, i32 0, i32 6, !dbg !14707
  %10 = load %struct.iv*, %struct.iv** %iv, align 8, !dbg !14707
  %base_object = getelementptr inbounds %struct.iv, %struct.iv* %10, i32 0, i32 1, !dbg !14708
  %11 = load %union.tree_node*, %union.tree_node** %base_object, align 8, !dbg !14708
  %tobool2 = icmp ne %union.tree_node* %11, null, !dbg !14705
  br i1 %tobool2, label %if.then, label %if.end, !dbg !14709

if.then:                                          ; preds = %cond.end
  %12 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14710
  %current_loop3 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %12, i32 0, i32 0, !dbg !14711
  %13 = load %struct.loop*, %struct.loop** %current_loop3, align 8, !dbg !14711
  %14 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14712
  %15 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14713
  %stmt4 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %15, i32 0, i32 3, !dbg !14714
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt4, align 8, !dbg !14714
  %call5 = call %union.tree_node* @var_at_stmt(%struct.loop* %13, %struct.iv_cand* %14, %union.gimple_statement_d* %16), !dbg !14715
  store %union.tree_node* %call5, %union.tree_node** %base_hint, align 8, !dbg !14716
  br label %if.end, !dbg !14717

if.end:                                           ; preds = %if.then, %cond.end
  %17 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14718
  %op_p = getelementptr inbounds %struct.iv_use, %struct.iv_use* %17, i32 0, i32 4, !dbg !14718
  %18 = load %union.tree_node**, %union.tree_node*** %op_p, align 8, !dbg !14718
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !14718
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !14718
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14718
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14718
  %21 = load %union.tree_node*, %union.tree_node** %base_hint, align 8, !dbg !14719
  %22 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14720
  %speed = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %22, i32 0, i32 11, !dbg !14721
  %23 = load i8, i8* %speed, align 1, !dbg !14721
  %call6 = call %union.tree_node* @create_mem_ref(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %20, %struct.affine_tree_combination* %aff, %union.tree_node* %21, i8 zeroext %23), !dbg !14722
  store %union.tree_node* %call6, %union.tree_node** %ref, align 8, !dbg !14723
  %24 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !14724
  %25 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14725
  %op_p7 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %25, i32 0, i32 4, !dbg !14726
  %26 = load %union.tree_node**, %union.tree_node*** %op_p7, align 8, !dbg !14726
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !14727
  call void @copy_ref_info(%union.tree_node* %24, %union.tree_node* %27), !dbg !14728
  %28 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !14729
  %29 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14730
  %op_p8 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %29, i32 0, i32 4, !dbg !14731
  %30 = load %union.tree_node**, %union.tree_node*** %op_p8, align 8, !dbg !14731
  store %union.tree_node* %28, %union.tree_node** %30, align 8, !dbg !14732
  ret void, !dbg !14733
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_use_compare(%struct.ivopts_data* %data, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !14734 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  %comp = alloca %union.tree_node*, align 8
  %var_p = alloca %union.tree_node**, align 8
  %op = alloca %union.tree_node*, align 8
  %bound = alloca %union.tree_node*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %compare = alloca i32, align 4
  %cp = alloca %struct.cost_pair*, align 8
  %ok = alloca i8, align 1
  %var = alloca %union.tree_node*, align 8
  %var_type = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !14735, metadata !DIExpression()), !dbg !14736
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !14737, metadata !DIExpression()), !dbg !14738
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !14739, metadata !DIExpression()), !dbg !14740
  call void @llvm.dbg.declare(metadata %union.tree_node** %comp, metadata !14741, metadata !DIExpression()), !dbg !14742
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var_p, metadata !14743, metadata !DIExpression()), !dbg !14744
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !14745, metadata !DIExpression()), !dbg !14746
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound, metadata !14747, metadata !DIExpression()), !dbg !14748
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !14749, metadata !DIExpression()), !dbg !14750
  %0 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14751
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %0, i32 0, i32 3, !dbg !14752
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14752
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %bsi, %union.gimple_statement_d* %1), !dbg !14753
  call void @llvm.dbg.declare(metadata i32* %compare, metadata !14754, metadata !DIExpression()), !dbg !14755
  call void @llvm.dbg.declare(metadata %struct.cost_pair** %cp, metadata !14756, metadata !DIExpression()), !dbg !14757
  %2 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14758
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14759
  %4 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14760
  %call = call %struct.cost_pair* @get_use_iv_cost(%struct.ivopts_data* %2, %struct.iv_use* %3, %struct.iv_cand* %4), !dbg !14761
  store %struct.cost_pair* %call, %struct.cost_pair** %cp, align 8, !dbg !14757
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !14762, metadata !DIExpression()), !dbg !14763
  %5 = load %struct.cost_pair*, %struct.cost_pair** %cp, align 8, !dbg !14764
  %value = getelementptr inbounds %struct.cost_pair, %struct.cost_pair* %5, i32 0, i32 3, !dbg !14765
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14765
  store %union.tree_node* %6, %union.tree_node** %bound, align 8, !dbg !14766
  %7 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !14767
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !14767
  br i1 %tobool, label %if.then, label %if.end15, !dbg !14769

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !14770, metadata !DIExpression()), !dbg !14772
  %8 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14773
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %8, i32 0, i32 0, !dbg !14774
  %9 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !14774
  %10 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14775
  %11 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14776
  %stmt1 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %11, i32 0, i32 3, !dbg !14777
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !14777
  %call2 = call %union.tree_node* @var_at_stmt(%struct.loop* %9, %struct.iv_cand* %10, %union.gimple_statement_d* %12), !dbg !14778
  store %union.tree_node* %call2, %union.tree_node** %var, align 8, !dbg !14772
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_type, metadata !14779, metadata !DIExpression()), !dbg !14780
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14781
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !14781
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14781
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14781
  store %union.tree_node* %14, %union.tree_node** %var_type, align 8, !dbg !14780
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !14782, metadata !DIExpression()), !dbg !14783
  %15 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14784
  %16 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14785
  %call3 = call i32 @iv_elimination_compare(%struct.ivopts_data* %15, %struct.iv_use* %16), !dbg !14786
  store i32 %call3, i32* %compare, align 4, !dbg !14787
  %17 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !14788
  %18 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !14788
  %call4 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %17, %union.tree_node* %18), !dbg !14788
  %call5 = call %union.tree_node* @unshare_expr(%union.tree_node* %call4), !dbg !14789
  store %union.tree_node* %call5, %union.tree_node** %bound, align 8, !dbg !14790
  %19 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !14791
  %call6 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %19, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !14792
  store %union.tree_node* %call6, %union.tree_node** %op, align 8, !dbg !14793
  %20 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !14794
  %tobool7 = icmp ne %struct.gimple_seq_d* %20, null, !dbg !14794
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !14796

if.then8:                                         ; preds = %if.then
  %21 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14797
  %current_loop9 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %21, i32 0, i32 0, !dbg !14798
  %22 = load %struct.loop*, %struct.loop** %current_loop9, align 8, !dbg !14798
  %call10 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %22), !dbg !14799
  %23 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !14800
  %call11 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %call10, %struct.gimple_seq_d* %23), !dbg !14801
  br label %if.end, !dbg !14801

if.end:                                           ; preds = %if.then8, %if.then
  %24 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14802
  %stmt12 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %24, i32 0, i32 3, !dbg !14803
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt12, align 8, !dbg !14803
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14804
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %25, %union.tree_node* %26), !dbg !14805
  %27 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14806
  %stmt13 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %27, i32 0, i32 3, !dbg !14807
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt13, align 8, !dbg !14807
  %29 = load i32, i32* %compare, align 4, !dbg !14808
  call void @gimple_cond_set_code(%union.gimple_statement_d* %28, i32 %29), !dbg !14809
  %30 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14810
  %stmt14 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %30, i32 0, i32 3, !dbg !14811
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt14, align 8, !dbg !14811
  %32 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !14812
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %31, %union.tree_node* %32), !dbg !14813
  br label %return, !dbg !14814

if.end15:                                         ; preds = %entry
  %33 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14815
  %current_loop16 = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %33, i32 0, i32 0, !dbg !14816
  %34 = load %struct.loop*, %struct.loop** %current_loop16, align 8, !dbg !14816
  %35 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14817
  %36 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14818
  %call17 = call %union.tree_node* @get_computation(%struct.loop* %34, %struct.iv_use* %35, %struct.iv_cand* %36), !dbg !14819
  store %union.tree_node* %call17, %union.tree_node** %comp, align 8, !dbg !14820
  %37 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !14821
  %cmp = icmp ne %union.tree_node* %37, null, !dbg !14821
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !14821

cond.true:                                        ; preds = %if.end15
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5606, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14821
  br label %cond.end, !dbg !14821

cond.false:                                       ; preds = %if.end15
  br label %cond.end, !dbg !14821

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14821
  %38 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14822
  %39 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14823
  %stmt18 = getelementptr inbounds %struct.iv_use, %struct.iv_use* %39, i32 0, i32 3, !dbg !14824
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt18, align 8, !dbg !14824
  %call19 = call zeroext i8 @extract_cond_operands(%struct.ivopts_data* %38, %union.gimple_statement_d* %40, %union.tree_node*** %var_p, %union.tree_node*** null, %struct.iv** null, %struct.iv** null), !dbg !14825
  store i8 %call19, i8* %ok, align 1, !dbg !14826
  %41 = load i8, i8* %ok, align 1, !dbg !14827
  %tobool20 = icmp ne i8 %41, 0, !dbg !14827
  br i1 %tobool20, label %cond.false22, label %cond.true21, !dbg !14827

cond.true21:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i32 5609, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !14827
  br label %cond.end23, !dbg !14827

cond.false22:                                     ; preds = %cond.end
  br label %cond.end23, !dbg !14827

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !14827
  %42 = load %union.tree_node*, %union.tree_node** %comp, align 8, !dbg !14828
  %43 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !14829
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !14829
  %ssa_name = bitcast %union.tree_node* %44 to %struct.tree_ssa_name*, !dbg !14829
  %var25 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !14829
  %45 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !14829
  %call26 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %42, i8 zeroext 1, %union.tree_node* %45, i8 zeroext 1, i32 1), !dbg !14830
  %46 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !14831
  store %union.tree_node* %call26, %union.tree_node** %46, align 8, !dbg !14832
  br label %return, !dbg !14833

return:                                           ; preds = %cond.end23, %if.end
  ret void, !dbg !14833
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !14834 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !14837, metadata !DIExpression()), !dbg !14838
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !14839
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !14841
  %tobool = icmp ne i8 %call, 0, !dbg !14841
  br i1 %tobool, label %if.then, label %if.end, !dbg !14842

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !14843
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !14845
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !14846
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !14847
  br label %if.end, !dbg !14848

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !14849
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !14850 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14851, metadata !DIExpression()), !dbg !14852
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14853
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !14855
  %cmp = icmp uge i32 %call, 3, !dbg !14856
  br i1 %cmp, label %if.then, label %if.else, !dbg !14857

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14858
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !14859
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !14860
  br label %return, !dbg !14860

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14861
  br label %return, !dbg !14861

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14862
  ret %union.tree_node* %2, !dbg !14862
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_computation(%struct.loop* %loop, %struct.iv_use* %use, %struct.iv_cand* %cand) #0 !dbg !14863 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %cand.addr = alloca %struct.iv_cand*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !14866, metadata !DIExpression()), !dbg !14867
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !14868, metadata !DIExpression()), !dbg !14869
  store %struct.iv_cand* %cand, %struct.iv_cand** %cand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_cand** %cand.addr, metadata !14870, metadata !DIExpression()), !dbg !14871
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !14872
  %1 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14873
  %2 = load %struct.iv_cand*, %struct.iv_cand** %cand.addr, align 8, !dbg !14874
  %3 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !14875
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %3, i32 0, i32 3, !dbg !14876
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14876
  %call = call %union.tree_node* @get_computation_at(%struct.loop* %0, %struct.iv_use* %1, %struct.iv_cand* %2, %union.gimple_statement_d* %4), !dbg !14877
  ret %union.tree_node* %call, !dbg !14878
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !14879 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14880, metadata !DIExpression()), !dbg !14881
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !14882, metadata !DIExpression()), !dbg !14883
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14884
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !14885
  br label %while.cond, !dbg !14886

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !14887
  %tobool = icmp ne i8 %call, 0, !dbg !14887
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !14888

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !14889
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !14890
  %cmp = icmp eq i32 %call2, 4, !dbg !14891
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !14892
  br i1 %1, label %while.body, label %while.end, !dbg !14886

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !14893
  br label %while.cond, !dbg !14886, !llvm.loop !14894

while.end:                                        ; preds = %land.end
  ret void, !dbg !14896
}

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

declare dso_local %union.tree_node* @create_mem_ref(%struct.gimple_stmt_iterator*, %union.tree_node*, %struct.affine_tree_combination*, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_ref_info(%union.tree_node* %new_ref, %union.tree_node* %old_ref) #0 !dbg !14897 {
entry:
  %new_ref.addr = alloca %union.tree_node*, align 8
  %old_ref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %new_ref, %union.tree_node** %new_ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_ref.addr, metadata !14900, metadata !DIExpression()), !dbg !14901
  store %union.tree_node* %old_ref, %union.tree_node** %old_ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_ref.addr, metadata !14902, metadata !DIExpression()), !dbg !14903
  %0 = load %union.tree_node*, %union.tree_node** %old_ref.addr, align 8, !dbg !14904
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !14904
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !14904
  %bf.load = load i64, i64* %1, align 8, !dbg !14904
  %bf.clear = and i64 %bf.load, 65535, !dbg !14904
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14904
  %cmp = icmp eq i32 %bf.cast, 152, !dbg !14906
  br i1 %cmp, label %if.then, label %if.else, !dbg !14907

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %new_ref.addr, align 8, !dbg !14908
  %3 = load %union.tree_node*, %union.tree_node** %old_ref.addr, align 8, !dbg !14909
  call void @copy_mem_ref_info(%union.tree_node* %2, %union.tree_node* %3), !dbg !14910
  br label %if.end, !dbg !14910

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %old_ref.addr, align 8, !dbg !14911
  %call = call %union.tree_node* @unshare_and_remove_ssa_names(%union.tree_node* %4), !dbg !14913
  %5 = load %union.tree_node*, %union.tree_node** %new_ref.addr, align 8, !dbg !14914
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !14914
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14914
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 5, !dbg !14914
  store %union.tree_node* %call, %union.tree_node** %arrayidx, align 8, !dbg !14915
  %6 = load %union.tree_node*, %union.tree_node** %old_ref.addr, align 8, !dbg !14916
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !14916
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !14916
  %bf.load2 = load i64, i64* %7, align 8, !dbg !14916
  %bf.lshr = lshr i64 %bf.load2, 16, !dbg !14916
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !14916
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !14916
  %8 = load %union.tree_node*, %union.tree_node** %new_ref.addr, align 8, !dbg !14917
  %base5 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14917
  %9 = bitcast %struct.tree_base* %base5 to i64*, !dbg !14917
  %10 = zext i32 %bf.cast4 to i64, !dbg !14918
  %bf.load6 = load i64, i64* %9, align 8, !dbg !14918
  %bf.value = and i64 %10, 1, !dbg !14918
  %bf.shl = shl i64 %bf.value, 16, !dbg !14918
  %bf.clear7 = and i64 %bf.load6, -65537, !dbg !14918
  %bf.set = or i64 %bf.clear7, %bf.shl, !dbg !14918
  store i64 %bf.set, i64* %9, align 8, !dbg !14918
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !14918
  %11 = load %union.tree_node*, %union.tree_node** %old_ref.addr, align 8, !dbg !14919
  %base8 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !14919
  %12 = bitcast %struct.tree_base* %base8 to i64*, !dbg !14919
  %bf.load9 = load i64, i64* %12, align 8, !dbg !14919
  %bf.lshr10 = lshr i64 %bf.load9, 19, !dbg !14919
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !14919
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !14919
  %13 = load %union.tree_node*, %union.tree_node** %new_ref.addr, align 8, !dbg !14920
  %base13 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !14920
  %14 = bitcast %struct.tree_base* %base13 to i64*, !dbg !14920
  %15 = zext i32 %bf.cast12 to i64, !dbg !14921
  %bf.load14 = load i64, i64* %14, align 8, !dbg !14921
  %bf.value15 = and i64 %15, 1, !dbg !14921
  %bf.shl16 = shl i64 %bf.value15, 19, !dbg !14921
  %bf.clear17 = and i64 %bf.load14, -524289, !dbg !14921
  %bf.set18 = or i64 %bf.clear17, %bf.shl16, !dbg !14921
  store i64 %bf.set18, i64* %14, align 8, !dbg !14921
  %bf.result.cast19 = trunc i64 %bf.value15 to i32, !dbg !14921
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !14922
}

declare dso_local void @copy_mem_ref_info(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @unshare_and_remove_ssa_names(%union.tree_node* %ref) #0 !dbg !14923 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !14924, metadata !DIExpression()), !dbg !14925
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !14926
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %0), !dbg !14927
  store %union.tree_node* %call, %union.tree_node** %ref.addr, align 8, !dbg !14928
  %call1 = call zeroext i8 @for_each_index(%union.tree_node** %ref.addr, i8 (%union.tree_node*, %union.tree_node**, i8*)* @idx_remove_ssa_names, i8* null), !dbg !14929
  %1 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !14930
  ret %union.tree_node* %1, !dbg !14931
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @idx_remove_ssa_names(%union.tree_node* %base, %union.tree_node** %idx, i8* %data) #0 !dbg !14932 {
entry:
  %base.addr = alloca %union.tree_node*, align 8
  %idx.addr = alloca %union.tree_node**, align 8
  %data.addr = alloca i8*, align 8
  %op = alloca %union.tree_node**, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !14933, metadata !DIExpression()), !dbg !14934
  store %union.tree_node** %idx, %union.tree_node*** %idx.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %idx.addr, metadata !14935, metadata !DIExpression()), !dbg !14936
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !14937, metadata !DIExpression()), !dbg !14938
  call void @llvm.dbg.declare(metadata %union.tree_node*** %op, metadata !14939, metadata !DIExpression()), !dbg !14940
  %0 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !14941
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !14941
  %base1 = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !14941
  %2 = bitcast %struct.tree_base* %base1 to i64*, !dbg !14941
  %bf.load = load i64, i64* %2, align 8, !dbg !14941
  %bf.clear = and i64 %bf.load, 65535, !dbg !14941
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14941
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !14943
  br i1 %cmp, label %if.then, label %if.end, !dbg !14944

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !14945
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !14945
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !14945
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !14945
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !14945
  %6 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !14946
  store %union.tree_node* %5, %union.tree_node** %6, align 8, !dbg !14947
  br label %if.end, !dbg !14948

if.end:                                           ; preds = %if.then, %entry
  %7 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !14949
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !14949
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !14949
  %bf.load3 = load i64, i64* %8, align 8, !dbg !14949
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !14949
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !14949
  %cmp6 = icmp eq i32 %bf.cast5, 45, !dbg !14951
  br i1 %cmp6, label %if.then12, label %lor.lhs.false, !dbg !14952

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !14953
  %base7 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !14953
  %10 = bitcast %struct.tree_base* %base7 to i64*, !dbg !14953
  %bf.load8 = load i64, i64* %10, align 8, !dbg !14953
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !14953
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !14953
  %cmp11 = icmp eq i32 %bf.cast10, 46, !dbg !14954
  br i1 %cmp11, label %if.then12, label %if.end36, !dbg !14955

if.then12:                                        ; preds = %lor.lhs.false, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !14956
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !14956
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14956
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !14956
  store %union.tree_node** %arrayidx, %union.tree_node*** %op, align 8, !dbg !14958
  %12 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14959
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !14961
  %tobool = icmp ne %union.tree_node* %13, null, !dbg !14961
  br i1 %tobool, label %land.lhs.true, label %if.end21, !dbg !14962

land.lhs.true:                                    ; preds = %if.then12
  %14 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14963
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !14963
  %base13 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !14963
  %16 = bitcast %struct.tree_base* %base13 to i64*, !dbg !14963
  %bf.load14 = load i64, i64* %16, align 8, !dbg !14963
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !14963
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !14963
  %cmp17 = icmp eq i32 %bf.cast16, 141, !dbg !14964
  br i1 %cmp17, label %if.then18, label %if.end21, !dbg !14965

if.then18:                                        ; preds = %land.lhs.true
  %17 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14966
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !14966
  %ssa_name19 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !14966
  %var20 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name19, i32 0, i32 1, !dbg !14966
  %19 = load %union.tree_node*, %union.tree_node** %var20, align 8, !dbg !14966
  %20 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14967
  store %union.tree_node* %19, %union.tree_node** %20, align 8, !dbg !14968
  br label %if.end21, !dbg !14969

if.end21:                                         ; preds = %if.then18, %land.lhs.true, %if.then12
  %21 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !14970
  %exp22 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !14970
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !14970
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 3, !dbg !14970
  store %union.tree_node** %arrayidx24, %union.tree_node*** %op, align 8, !dbg !14971
  %22 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14972
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !14974
  %tobool25 = icmp ne %union.tree_node* %23, null, !dbg !14974
  br i1 %tobool25, label %land.lhs.true26, label %if.end35, !dbg !14975

land.lhs.true26:                                  ; preds = %if.end21
  %24 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14976
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !14976
  %base27 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !14976
  %26 = bitcast %struct.tree_base* %base27 to i64*, !dbg !14976
  %bf.load28 = load i64, i64* %26, align 8, !dbg !14976
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !14976
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !14976
  %cmp31 = icmp eq i32 %bf.cast30, 141, !dbg !14977
  br i1 %cmp31, label %if.then32, label %if.end35, !dbg !14978

if.then32:                                        ; preds = %land.lhs.true26
  %27 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14979
  %28 = load %union.tree_node*, %union.tree_node** %27, align 8, !dbg !14979
  %ssa_name33 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !14979
  %var34 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name33, i32 0, i32 1, !dbg !14979
  %29 = load %union.tree_node*, %union.tree_node** %var34, align 8, !dbg !14979
  %30 = load %union.tree_node**, %union.tree_node*** %op, align 8, !dbg !14980
  store %union.tree_node* %29, %union.tree_node** %30, align 8, !dbg !14981
  br label %if.end35, !dbg !14982

if.end35:                                         ; preds = %if.then32, %land.lhs.true26, %if.end21
  br label %if.end36, !dbg !14983

if.end36:                                         ; preds = %if.end35, %lor.lhs.false
  ret i8 1, !dbg !14984
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @iv_elimination_compare(%struct.ivopts_data* %data, %struct.iv_use* %use) #0 !dbg !14985 {
entry:
  %data.addr = alloca %struct.ivopts_data*, align 8
  %use.addr = alloca %struct.iv_use*, align 8
  %loop = alloca %struct.loop*, align 8
  %ex_bb = alloca %struct.basic_block_def*, align 8
  %exit = alloca %struct.edge_def*, align 8
  store %struct.ivopts_data* %data, %struct.ivopts_data** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ivopts_data** %data.addr, metadata !14988, metadata !DIExpression()), !dbg !14989
  store %struct.iv_use* %use, %struct.iv_use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.iv_use** %use.addr, metadata !14990, metadata !DIExpression()), !dbg !14991
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !14992, metadata !DIExpression()), !dbg !14993
  %0 = load %struct.ivopts_data*, %struct.ivopts_data** %data.addr, align 8, !dbg !14994
  %current_loop = getelementptr inbounds %struct.ivopts_data, %struct.ivopts_data* %0, i32 0, i32 0, !dbg !14995
  %1 = load %struct.loop*, %struct.loop** %current_loop, align 8, !dbg !14995
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !14993
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ex_bb, metadata !14996, metadata !DIExpression()), !dbg !14997
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !14998, metadata !DIExpression()), !dbg !14999
  %2 = load %struct.iv_use*, %struct.iv_use** %use.addr, align 8, !dbg !15000
  %stmt = getelementptr inbounds %struct.iv_use, %struct.iv_use* %2, i32 0, i32 3, !dbg !15001
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !15001
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %3), !dbg !15002
  store %struct.basic_block_def* %call, %struct.basic_block_def** %ex_bb, align 8, !dbg !15003
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !15004
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !15004
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !15004
  %tobool = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !15004
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15004

cond.true:                                        ; preds = %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !15004
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !15004
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !15004
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !15004
  br label %cond.end, !dbg !15004

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !15004
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !15004
  store %struct.edge_def* %call2, %struct.edge_def** %exit, align 8, !dbg !15005
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !15006
  %9 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !15008
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 1, !dbg !15009
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !15009
  %call3 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %8, %struct.basic_block_def* %10), !dbg !15010
  %tobool4 = icmp ne i8 %call3, 0, !dbg !15010
  br i1 %tobool4, label %if.then, label %if.end, !dbg !15011

if.then:                                          ; preds = %cond.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !15012
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !15012
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !15012
  %tobool6 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !15012
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !15012

cond.true7:                                       ; preds = %if.then
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !15012
  %succs8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !15012
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs8, align 8, !dbg !15012
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %14, i32 0, i32 0, !dbg !15012
  br label %cond.end11, !dbg !15012

cond.false10:                                     ; preds = %if.then
  br label %cond.end11, !dbg !15012

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_edge_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !15012
  %call13 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond12, i32 1), !dbg !15012
  store %struct.edge_def* %call13, %struct.edge_def** %exit, align 8, !dbg !15013
  br label %if.end, !dbg !15014

if.end:                                           ; preds = %cond.end11, %cond.end
  %15 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !15015
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 7, !dbg !15016
  %16 = load i32, i32* %flags, align 8, !dbg !15016
  %and = and i32 %16, 1024, !dbg !15017
  %tobool14 = icmp ne i32 %and, 0, !dbg !15015
  %17 = zext i1 %tobool14 to i64, !dbg !15015
  %cond15 = select i1 %tobool14, i32 101, i32 102, !dbg !15015
  ret i32 %cond15, !dbg !15018
}

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !15019 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15022, metadata !DIExpression()), !dbg !15023
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !15024, metadata !DIExpression()), !dbg !15025
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15026
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !15027
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !15028
  ret void, !dbg !15029
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) #0 !dbg !15030 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15033, metadata !DIExpression()), !dbg !15034
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !15035, metadata !DIExpression()), !dbg !15036
  %0 = load i32, i32* %code.addr, align 4, !dbg !15037
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15038
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !15039
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !15040
  %bf.load = load i32, i32* %2, align 8, !dbg !15041
  %bf.value = and i32 %0, 65535, !dbg !15041
  %bf.shl = shl i32 %bf.value, 16, !dbg !15041
  %bf.clear = and i32 %bf.load, 65535, !dbg !15041
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !15041
  store i32 %bf.set, i32* %2, align 8, !dbg !15041
  ret void, !dbg !15042
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !15043 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15044, metadata !DIExpression()), !dbg !15045
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !15046, metadata !DIExpression()), !dbg !15047
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15048
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !15049
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !15050
  ret void, !dbg !15051
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !15052 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15055, metadata !DIExpression()), !dbg !15056
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !15057, metadata !DIExpression()), !dbg !15058
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !15059, metadata !DIExpression()), !dbg !15060
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15061
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !15061
  %conv = zext i8 %call to i32, !dbg !15061
  %tobool = icmp ne i32 %conv, 0, !dbg !15061
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !15061

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !15061
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15061
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !15061
  %cmp = icmp ult i32 %1, %call1, !dbg !15061
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15061

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.30, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !15061
  br label %cond.end, !dbg !15061

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !15061

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15061
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !15062
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15063
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !15064
  %5 = load i32, i32* %i.addr, align 4, !dbg !15065
  %idxprom = zext i32 %5 to i64, !dbg !15064
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !15064
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !15066
  ret void, !dbg !15067
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

declare dso_local void @release_defs_bitset(%struct.bitmap_head_def*) #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_iv_use_p_base_truncate(%struct.VEC_iv_use_p_base* %vec_, i32 %size_) #0 !dbg !15068 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_iv_use_p_base* %vec_, %struct.VEC_iv_use_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_base** %vec_.addr, metadata !15071, metadata !DIExpression()), !dbg !15072
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !15073, metadata !DIExpression()), !dbg !15072
  %0 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !15072
  %tobool = icmp ne %struct.VEC_iv_use_p_base* %0, null, !dbg !15072
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15072

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !15072
  %num = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %1, i32 0, i32 0, !dbg !15072
  %2 = load i32, i32* %num, align 8, !dbg !15072
  %3 = load i32, i32* %size_.addr, align 4, !dbg !15072
  %cmp = icmp uge i32 %2, %3, !dbg !15072
  %conv = zext i1 %cmp to i32, !dbg !15072
  br label %cond.end, !dbg !15072

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !15072
  %tobool1 = icmp ne i32 %4, 0, !dbg !15072
  %lnot = xor i1 %tobool1, true, !dbg !15072
  %lnot.ext = zext i1 %lnot to i32, !dbg !15072
  br label %cond.end, !dbg !15072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !15072
  %5 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !15074
  %tobool2 = icmp ne %struct.VEC_iv_use_p_base* %5, null, !dbg !15074
  br i1 %tobool2, label %if.then, label %if.end, !dbg !15072

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !15074
  %7 = load %struct.VEC_iv_use_p_base*, %struct.VEC_iv_use_p_base** %vec_.addr, align 8, !dbg !15074
  %num3 = getelementptr inbounds %struct.VEC_iv_use_p_base, %struct.VEC_iv_use_p_base* %7, i32 0, i32 0, !dbg !15074
  store i32 %6, i32* %num3, align 8, !dbg !15074
  br label %if.end, !dbg !15074

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !15072
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_iv_cand_p_base_truncate(%struct.VEC_iv_cand_p_base* %vec_, i32 %size_) #0 !dbg !15076 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_iv_cand_p_base* %vec_, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_base** %vec_.addr, metadata !15079, metadata !DIExpression()), !dbg !15080
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !15081, metadata !DIExpression()), !dbg !15080
  %0 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !15080
  %tobool = icmp ne %struct.VEC_iv_cand_p_base* %0, null, !dbg !15080
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15080

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !15080
  %num = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %1, i32 0, i32 0, !dbg !15080
  %2 = load i32, i32* %num, align 8, !dbg !15080
  %3 = load i32, i32* %size_.addr, align 4, !dbg !15080
  %cmp = icmp uge i32 %2, %3, !dbg !15080
  %conv = zext i1 %cmp to i32, !dbg !15080
  br label %cond.end, !dbg !15080

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !15080
  %tobool1 = icmp ne i32 %4, 0, !dbg !15080
  %lnot = xor i1 %tobool1, true, !dbg !15080
  %lnot.ext = zext i1 %lnot to i32, !dbg !15080
  br label %cond.end, !dbg !15080

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !15080
  %5 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !15082
  %tobool2 = icmp ne %struct.VEC_iv_cand_p_base* %5, null, !dbg !15082
  br i1 %tobool2, label %if.then, label %if.end, !dbg !15080

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !15082
  %7 = load %struct.VEC_iv_cand_p_base*, %struct.VEC_iv_cand_p_base** %vec_.addr, align 8, !dbg !15082
  %num3 = getelementptr inbounds %struct.VEC_iv_cand_p_base, %struct.VEC_iv_cand_p_base* %7, i32 0, i32 0, !dbg !15082
  store i32 %6, i32* %num3, align 8, !dbg !15082
  br label %if.end, !dbg !15082

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !15080
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !15084 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !15087, metadata !DIExpression()), !dbg !15088
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !15089, metadata !DIExpression()), !dbg !15088
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !15090, metadata !DIExpression()), !dbg !15088
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15091
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !15091
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !15091

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !15091
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15091
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !15091
  %3 = load i32, i32* %num, align 8, !dbg !15091
  %cmp = icmp ult i32 %1, %3, !dbg !15091
  br i1 %cmp, label %if.then, label %if.else, !dbg !15088

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15093
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !15093
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !15093
  %idxprom = zext i32 %5 to i64, !dbg !15093
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !15093
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15093
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !15093
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !15093
  store i32 1, i32* %retval, align 4, !dbg !15093
  br label %return, !dbg !15093

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !15095
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !15095
  store i32 0, i32* %retval, align 4, !dbg !15095
  br label %return, !dbg !15095

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !15088
  ret i32 %9, !dbg !15088
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_base_truncate(%struct.VEC_tree_base* %vec_, i32 %size_) #0 !dbg !15097 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !15100, metadata !DIExpression()), !dbg !15101
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !15102, metadata !DIExpression()), !dbg !15101
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15101
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !15101
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15101

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15101
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !15101
  %2 = load i32, i32* %num, align 8, !dbg !15101
  %3 = load i32, i32* %size_.addr, align 4, !dbg !15101
  %cmp = icmp uge i32 %2, %3, !dbg !15101
  %conv = zext i1 %cmp to i32, !dbg !15101
  br label %cond.end, !dbg !15101

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !15101
  %tobool1 = icmp ne i32 %4, 0, !dbg !15101
  %lnot = xor i1 %tobool1, true, !dbg !15101
  %lnot.ext = zext i1 %lnot to i32, !dbg !15101
  br label %cond.end, !dbg !15101

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !15101
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15103
  %tobool2 = icmp ne %struct.VEC_tree_base* %5, null, !dbg !15103
  br i1 %tobool2, label %if.then, label %if.end, !dbg !15101

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !15103
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !15103
  %num3 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 0, !dbg !15103
  store i32 %6, i32* %num3, align 8, !dbg !15103
  br label %if.end, !dbg !15103

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !15101
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !15105 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !15110, metadata !DIExpression()), !dbg !15111
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !15112, metadata !DIExpression()), !dbg !15111
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !15113, metadata !DIExpression()), !dbg !15111
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15114
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !15114
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !15114

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !15114
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15114
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !15114
  %3 = load i32, i32* %num, align 4, !dbg !15114
  %cmp = icmp ult i32 %1, %3, !dbg !15114
  br i1 %cmp, label %if.then, label %if.else, !dbg !15111

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15116
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !15116
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !15116
  %idxprom = zext i32 %5 to i64, !dbg !15116
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !15116
  %6 = load i32, i32* %arrayidx, align 4, !dbg !15116
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !15116
  store i32 %6, i32* %7, align 4, !dbg !15116
  store i32 1, i32* %retval, align 4, !dbg !15116
  br label %return, !dbg !15116

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !15118
  store i32 0, i32* %8, align 4, !dbg !15118
  store i32 0, i32* %retval, align 4, !dbg !15118
  br label %return, !dbg !15118

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !15111
  ret i32 %9, !dbg !15111
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !15120 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !15123, metadata !DIExpression()), !dbg !15124
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15125
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !15125
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !15125
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !15125
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !15125
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !15125
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !15125
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15125

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15125
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !15125
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !15125
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !15125
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !15125
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !15125
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !15125
  br label %cond.end, !dbg !15125

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15125

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !15125
  %6 = load i32, i32* %num.addr, align 4, !dbg !15125
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !15125
  ret %struct.loop* %call, !dbg !15126
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !15127 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !15131, metadata !DIExpression()), !dbg !15132
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !15133
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !15133
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !15133
  br i1 %tobool, label %if.then, label %if.end, !dbg !15132

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !15133
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !15133
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !15133
  call void @free(i8* %4), !dbg !15133
  br label %if.end, !dbg !15133

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !15132
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !15132
  ret void, !dbg !15132
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !15135 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !15138, metadata !DIExpression()), !dbg !15139
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !15140
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !15140
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !15140
  br i1 %tobool, label %if.then, label %if.end, !dbg !15139

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !15140
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !15140
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !15140
  call void @free(i8* %4), !dbg !15140
  br label %if.end, !dbg !15140

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !15139
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !15139
  ret void, !dbg !15139
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_iv_use_p_heap_free(%struct.VEC_iv_use_p_heap** %vec_) #0 !dbg !15142 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_use_p_heap**, align 8
  store %struct.VEC_iv_use_p_heap** %vec_, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_use_p_heap*** %vec_.addr, metadata !15145, metadata !DIExpression()), !dbg !15146
  %0 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !15147
  %1 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %0, align 8, !dbg !15147
  %tobool = icmp ne %struct.VEC_iv_use_p_heap* %1, null, !dbg !15147
  br i1 %tobool, label %if.then, label %if.end, !dbg !15146

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !15147
  %3 = load %struct.VEC_iv_use_p_heap*, %struct.VEC_iv_use_p_heap** %2, align 8, !dbg !15147
  %4 = bitcast %struct.VEC_iv_use_p_heap* %3 to i8*, !dbg !15147
  call void @free(i8* %4), !dbg !15147
  br label %if.end, !dbg !15147

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_iv_use_p_heap**, %struct.VEC_iv_use_p_heap*** %vec_.addr, align 8, !dbg !15146
  store %struct.VEC_iv_use_p_heap* null, %struct.VEC_iv_use_p_heap** %5, align 8, !dbg !15146
  ret void, !dbg !15146
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_iv_cand_p_heap_free(%struct.VEC_iv_cand_p_heap** %vec_) #0 !dbg !15149 {
entry:
  %vec_.addr = alloca %struct.VEC_iv_cand_p_heap**, align 8
  store %struct.VEC_iv_cand_p_heap** %vec_, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_iv_cand_p_heap*** %vec_.addr, metadata !15152, metadata !DIExpression()), !dbg !15153
  %0 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !15154
  %1 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %0, align 8, !dbg !15154
  %tobool = icmp ne %struct.VEC_iv_cand_p_heap* %1, null, !dbg !15154
  br i1 %tobool, label %if.then, label %if.end, !dbg !15153

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !15154
  %3 = load %struct.VEC_iv_cand_p_heap*, %struct.VEC_iv_cand_p_heap** %2, align 8, !dbg !15154
  %4 = bitcast %struct.VEC_iv_cand_p_heap* %3 to i8*, !dbg !15154
  call void @free(i8* %4), !dbg !15154
  br label %if.end, !dbg !15154

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_iv_cand_p_heap**, %struct.VEC_iv_cand_p_heap*** %vec_.addr, align 8, !dbg !15153
  store %struct.VEC_iv_cand_p_heap* null, %struct.VEC_iv_cand_p_heap** %5, align 8, !dbg !15153
  ret void, !dbg !15153
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!137}
!llvm.module.flags = !{!2658, !2659, !2660}
!llvm.ident = !{!2661}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "costs", scope: !2, file: !3, line: 2999, type: !1767, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "multiply_by_cost", scope: !3, file: !3, line: 2997, type: !4, scopeLine: 2998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3 = !DIFile(filename: "tree-ssa-loop-ivopts.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !7, !8, !136}
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!8 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !9, line: 7, baseType: !6, size: 32, elements: !10)
!9 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!10 = !{!11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135}
!11 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!12 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!13 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!14 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!15 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!16 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!17 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!18 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!19 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!20 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!21 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!22 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!23 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!24 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!25 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!26 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!27 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!28 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!29 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!30 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!31 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!32 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!33 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!34 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!35 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!36 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!37 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!38 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!39 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!40 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!41 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!42 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!43 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!44 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!45 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!46 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!47 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!48 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!49 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!50 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!51 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!52 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!53 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!54 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!55 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!56 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!57 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!58 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!59 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!60 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!61 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!62 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!63 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!64 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!65 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!66 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!67 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!68 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!69 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!70 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!71 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!72 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!73 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!74 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!75 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!76 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!77 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!78 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!79 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!80 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!81 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!82 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!83 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!84 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!85 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!86 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!87 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!88 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!89 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!90 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!91 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!92 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!93 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!94 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!95 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!96 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!97 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!134 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!135 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!136 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!137 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !138, retainedTypes: !1005, globals: !2599, splitDebugInlining: false, nameTableKind: None)
!138 = !{!139, !8, !148, !154, !159, !354, !359, !377, !384, !391, !395, !400, !407, !420, !425, !568, !573, !612, !638, !761, !768, !902, !916, !923, !929, !933, !947, !953, !963, !1000}
!139 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !140, line: 31, baseType: !6, size: 32, elements: !141)
!140 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!141 = !{!142, !143, !144, !145, !146, !147}
!142 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!145 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!146 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!147 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!148 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !149, line: 363, baseType: !6, size: 32, elements: !150)
!149 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!150 = !{!151, !152, !153}
!151 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!152 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!153 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !149, line: 355, baseType: !6, size: 32, elements: !155)
!155 = !{!156, !157, !158}
!156 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!158 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!159 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !160, line: 39, baseType: !6, size: 32, elements: !161)
!160 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!161 = !{!162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353}
!162 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!163 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!164 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!165 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!166 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!167 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!168 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!169 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!170 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!171 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!172 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!173 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!174 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!175 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!176 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!177 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!178 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!179 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!180 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!181 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!182 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!183 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!184 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!185 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!186 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!187 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!188 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!189 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!190 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!191 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!192 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!193 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!194 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!195 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!196 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!197 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!198 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!199 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!200 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!201 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!202 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!203 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!204 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!205 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!206 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!207 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!208 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!209 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!210 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!211 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!212 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!213 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!214 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!215 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!216 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!217 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!218 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!219 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!220 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!221 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!222 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!223 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!224 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!225 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!226 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!227 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!228 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!230 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!231 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!232 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!234 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!235 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!236 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!237 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!238 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!239 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!240 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!241 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!242 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!243 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!244 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!245 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!246 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!247 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!248 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!249 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!250 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!251 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!252 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!253 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!254 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!255 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!257 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!258 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!259 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!260 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!261 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!262 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!263 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!264 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!265 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!266 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!267 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!268 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!269 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!270 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!271 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!272 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!273 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!274 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!275 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!276 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!277 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!278 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!279 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!280 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!281 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!282 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!283 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!284 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!285 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!286 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!287 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!288 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!289 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!290 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!291 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!292 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!293 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!294 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!295 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!296 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!297 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!298 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!299 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!300 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!301 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!302 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!303 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!304 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!305 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!306 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!307 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!308 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!309 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!310 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!311 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!312 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!313 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!314 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!315 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!316 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!317 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!318 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!319 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!320 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!321 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!322 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!323 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!324 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!325 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!326 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!327 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!328 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!329 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!330 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!331 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!332 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!333 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!334 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!335 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!336 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!337 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!338 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!339 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!340 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!341 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!342 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!343 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!344 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!345 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!346 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!347 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!348 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!349 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!350 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!351 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!352 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!353 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !355, line: 474, baseType: !6, size: 32, elements: !356)
!355 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!356 = !{!357, !358}
!357 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!358 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!359 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !160, line: 280, baseType: !6, size: 32, elements: !360)
!360 = !{!361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!361 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !160, line: 1817, baseType: !6, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !160, line: 1805, baseType: !6, size: 32, elements: !385)
!385 = !{!386, !387, !388, !389, !390}
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!390 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!391 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !140, line: 91, baseType: !6, size: 32, elements: !392)
!392 = !{!393, !394}
!393 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!395 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "use_type", file: !3, line: 128, baseType: !6, size: 32, elements: !396)
!396 = !{!397, !398, !399}
!397 = !DIEnumerator(name: "USE_NONLINEAR_EXPR", value: 0, isUnsigned: true)
!398 = !DIEnumerator(name: "USE_ADDRESS", value: 1, isUnsigned: true)
!399 = !DIEnumerator(name: "USE_COMPARE", value: 2, isUnsigned: true)
!400 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "iv_position", file: !3, line: 180, baseType: !6, size: 32, elements: !401)
!401 = !{!402, !403, !404, !405, !406}
!402 = !DIEnumerator(name: "IP_NORMAL", value: 0, isUnsigned: true)
!403 = !DIEnumerator(name: "IP_END", value: 1, isUnsigned: true)
!404 = !DIEnumerator(name: "IP_BEFORE_USE", value: 2, isUnsigned: true)
!405 = !DIEnumerator(name: "IP_AFTER_USE", value: 3, isUnsigned: true)
!406 = !DIEnumerator(name: "IP_ORIGINAL", value: 4, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !160, line: 58, baseType: !6, size: 32, elements: !408)
!408 = !{!409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419}
!409 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!410 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!411 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!412 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!413 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!414 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!415 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!416 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!417 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!418 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!419 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!420 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !421, line: 147, baseType: !6, size: 32, elements: !422)
!421 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!422 = !{!423, !424}
!423 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!424 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!425 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !426, line: 45, baseType: !6, size: 32, elements: !427)
!426 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!427 = !{!428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567}
!428 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!429 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!430 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!431 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!432 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!433 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!434 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!435 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!436 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!437 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!438 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!439 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!440 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!441 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!442 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!443 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!444 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!445 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!446 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!447 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!448 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!449 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!450 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!451 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!452 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!453 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!454 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!455 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!456 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!457 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!458 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!459 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!460 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!461 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!462 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!463 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!464 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!465 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!466 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!467 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!468 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!469 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!470 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!471 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!472 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!473 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!474 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!475 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!476 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!477 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!478 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!479 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!480 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!481 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!482 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!483 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!484 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!485 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!486 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!487 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!488 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!489 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!490 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!491 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!492 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!493 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!494 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!495 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!496 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!497 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!498 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!499 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!500 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!501 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!502 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!503 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!504 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!505 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!506 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!507 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!508 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!509 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!510 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!511 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!512 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!513 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!514 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!515 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!516 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!517 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!518 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!519 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!520 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!521 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!522 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!523 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!524 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!525 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!526 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!527 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!528 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!529 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!530 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!531 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!532 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!533 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!534 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!535 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!536 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!537 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!538 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!539 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!540 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!541 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!542 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!543 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!544 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!545 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!546 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!547 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!548 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!549 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!550 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!551 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!552 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!553 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!554 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!555 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!556 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!557 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!558 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!559 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!560 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!561 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!562 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!563 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!564 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!565 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!566 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!567 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!568 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !140, line: 498, baseType: !6, size: 32, elements: !569)
!569 = !{!570, !571, !572}
!570 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!571 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!572 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !574, line: 51, baseType: !6, size: 32, elements: !575)
!574 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!575 = !{!576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611}
!576 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!577 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!578 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!579 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!580 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!581 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!582 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!583 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!611 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!612 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !574, line: 727, baseType: !6, size: 32, elements: !613)
!613 = !{!614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637}
!614 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!615 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!616 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!617 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!618 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!619 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!620 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!621 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!622 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!623 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!624 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!625 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!626 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!627 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!628 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!629 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!630 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!631 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!632 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!633 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!637 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!638 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !639, line: 82, baseType: !6, size: 32, elements: !640)
!639 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!640 = !{!641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760}
!641 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!643 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!644 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!645 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!646 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!648 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!683 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!684 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!688 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!689 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!690 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!691 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!692 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!693 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!697 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!698 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!699 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!700 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!715 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!716 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!720 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!721 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!722 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!723 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!724 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!725 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!726 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!727 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!728 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!729 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!730 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!731 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!732 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!733 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!734 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!735 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!736 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!737 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!738 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!739 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!740 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!741 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!742 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!743 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!744 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!745 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!746 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!747 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!748 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!749 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!750 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!751 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!752 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!753 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!754 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!755 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!756 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!757 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!758 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!759 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!760 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!761 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !160, line: 4288, baseType: !6, size: 32, elements: !762)
!762 = !{!763, !764, !765, !766, !767}
!763 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!764 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!765 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!766 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!767 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!768 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !160, line: 3410, baseType: !6, size: 32, elements: !769)
!769 = !{!770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901}
!770 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!785 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!801 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!802 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!803 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!804 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!805 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!806 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!807 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!808 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!809 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!810 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!811 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!812 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!813 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!814 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!815 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!816 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!817 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!818 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!819 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!820 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!821 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!822 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!823 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!824 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!825 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!826 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!827 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!828 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!829 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!830 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!831 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!832 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!833 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!834 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!835 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!836 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!837 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!838 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!839 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!840 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!841 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!842 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!843 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!844 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!845 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!846 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!847 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!848 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!849 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!850 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!851 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!852 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!853 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!854 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!855 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!856 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!857 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!858 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!859 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!860 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!861 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!862 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!863 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!864 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!865 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!866 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!867 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!868 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!869 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!870 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!871 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!872 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!873 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!874 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!875 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!876 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!877 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!878 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!879 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!880 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!881 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!882 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!883 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!884 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!885 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!886 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!887 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!888 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!889 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!890 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!891 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!892 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!893 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!894 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!895 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!896 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!897 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!898 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!899 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!900 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!901 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!902 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !149, line: 295, baseType: !6, size: 32, elements: !903)
!903 = !{!904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915}
!904 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!905 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!906 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!907 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!908 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!909 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!910 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!911 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!912 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!913 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!914 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!915 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!916 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !917, line: 119, baseType: !6, size: 32, elements: !918)
!917 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!918 = !{!919, !920, !921, !922}
!919 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!920 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!921 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!922 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!923 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !574, line: 80, baseType: !6, size: 32, elements: !924)
!924 = !{!925, !926, !927, !928}
!925 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!926 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!927 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!928 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!929 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !149, line: 912, baseType: !6, size: 32, elements: !930)
!930 = !{!931, !932}
!931 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!932 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!933 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !160, line: 3745, baseType: !6, size: 32, elements: !934)
!934 = !{!935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946}
!935 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!936 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!937 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!938 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!939 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!940 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!941 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!942 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!943 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!944 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!945 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!946 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!947 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "function_frequency", file: !948, line: 179, baseType: !6, size: 32, elements: !949)
!948 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!949 = !{!950, !951, !952}
!950 = !DIEnumerator(name: "FUNCTION_FREQUENCY_UNLIKELY_EXECUTED", value: 0, isUnsigned: true)
!951 = !DIEnumerator(name: "FUNCTION_FREQUENCY_NORMAL", value: 1, isUnsigned: true)
!952 = !DIEnumerator(name: "FUNCTION_FREQUENCY_HOT", value: 2, isUnsigned: true)
!953 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !954, line: 52, baseType: !6, size: 32, elements: !955)
!954 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!955 = !{!956, !957, !958, !959, !960, !961, !962}
!956 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!957 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!958 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!959 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!960 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!961 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!962 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!963 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !160, line: 630, baseType: !6, size: 32, elements: !964)
!964 = !{!965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999}
!965 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!966 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!967 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!968 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!969 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!970 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!971 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!972 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!973 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!974 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!975 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!976 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!977 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!978 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!979 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!980 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!981 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!982 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!983 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!984 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!985 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!986 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!987 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!988 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!989 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!990 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!991 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!992 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!993 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!994 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!995 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!996 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!997 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!998 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!999 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!1000 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !574, line: 4603, baseType: !6, size: 32, elements: !1001)
!1001 = !{!1002, !1003, !1004}
!1002 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1003 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1004 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1005 = !{!159, !1006, !1007, !1008, !1009, !1015, !6, !1437, !2399, !1134, !1470, !1110, !2401, !1776, !425, !2403, !1088, !2426, !2444, !2495, !2508, !2513, !1678, !1256, !2431, !2457, !923, !2526, !2530, !2547, !2472, !2550, !1135, !2551, !1852, !1041, !2553, !2562, !2563, !2575, !2468, !2576, !2582, !2584, !2592}
!1006 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1009, size: 64)
!1009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1010, size: 64)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mbc_entry", file: !3, line: 2965, size: 128, elements: !1011)
!1011 = !{!1012, !1013, !1014}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "cst", scope: !1010, file: !3, line: 2967, baseType: !7, size: 64)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1010, file: !3, line: 2968, baseType: !8, size: 32, offset: 64)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !1010, file: !3, line: 2969, baseType: !6, size: 32, offset: 96)
!1015 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1016, line: 50, baseType: !1017)
!1016 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1018, size: 64)
!1018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !426, line: 240, size: 384, elements: !1019)
!1019 = !{!1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030}
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1018, file: !426, line: 242, baseType: !6, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1018, file: !426, line: 245, baseType: !6, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1018, file: !426, line: 252, baseType: !6, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1018, file: !426, line: 257, baseType: !6, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1018, file: !426, line: 265, baseType: !6, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1018, file: !426, line: 277, baseType: !6, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1018, file: !426, line: 291, baseType: !6, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1018, file: !426, line: 298, baseType: !6, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1018, file: !426, line: 305, baseType: !6, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1018, file: !426, line: 310, baseType: !6, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1018, file: !426, line: 321, baseType: !1031, size: 320, offset: 64)
!1031 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !426, line: 315, size: 320, elements: !1032)
!1032 = !{!1033, !2334, !2336, !2397, !2398}
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1031, file: !426, line: 316, baseType: !1034, size: 64)
!1034 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1035, size: 64, elements: !1053)
!1035 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !426, line: 183, baseType: !1036)
!1036 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !426, line: 166, size: 64, elements: !1037)
!1037 = !{!1038, !1039, !1040, !1044, !1045, !1055, !1056, !1068, !1071, !1133, !2312, !2313, !2324, !2331}
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1036, file: !426, line: 168, baseType: !1006, size: 32)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1036, file: !426, line: 169, baseType: !6, size: 32)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1036, file: !426, line: 170, baseType: !1041, size: 64)
!1041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1042, size: 64)
!1042 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1043)
!1043 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1036, file: !426, line: 171, baseType: !1015, size: 64)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1036, file: !426, line: 172, baseType: !1046, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1016, line: 53, baseType: !1047)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !426, line: 359, size: 128, elements: !1049)
!1049 = !{!1050, !1051}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1048, file: !426, line: 360, baseType: !1006, size: 32)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1048, file: !426, line: 361, baseType: !1052, size: 64, offset: 64)
!1052 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1015, size: 64, elements: !1053)
!1053 = !{!1054}
!1054 = !DISubrange(count: 1)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1036, file: !426, line: 173, baseType: !8, size: 32)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1036, file: !426, line: 174, baseType: !1057, size: 32)
!1057 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !426, line: 133, baseType: !1058)
!1058 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !426, line: 115, size: 32, elements: !1059)
!1059 = !{!1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067}
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1058, file: !426, line: 118, baseType: !6, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1058, file: !426, line: 120, baseType: !6, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1058, file: !426, line: 121, baseType: !6, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1058, file: !426, line: 123, baseType: !6, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1058, file: !426, line: 125, baseType: !6, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1058, file: !426, line: 127, baseType: !6, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1058, file: !426, line: 130, baseType: !6, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1058, file: !426, line: 132, baseType: !6, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1036, file: !426, line: 175, baseType: !1069, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1070, size: 64)
!1070 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !426, line: 175, flags: DIFlagFwdDecl)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1036, file: !426, line: 176, baseType: !1072, size: 64)
!1072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1073, size: 64)
!1073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1074, line: 75, size: 256, elements: !1075)
!1074 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1075 = !{!1076, !1091, !1092, !1093}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1073, file: !1074, line: 76, baseType: !1077, size: 64)
!1077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1078, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1074, line: 68, baseType: !1079)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1074, line: 63, size: 320, elements: !1080)
!1080 = !{!1081, !1083, !1084, !1085}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1079, file: !1074, line: 64, baseType: !1082, size: 64)
!1082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1079, size: 64)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1079, file: !1074, line: 65, baseType: !1082, size: 64, offset: 64)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1079, file: !1074, line: 66, baseType: !6, size: 32, offset: 128)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1079, file: !1074, line: 67, baseType: !1086, size: 128, offset: 192)
!1086 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1087, size: 128, elements: !1089)
!1087 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1074, line: 29, baseType: !1088)
!1088 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1089 = !{!1090}
!1090 = !DISubrange(count: 2)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1073, file: !1074, line: 77, baseType: !1077, size: 64, offset: 64)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1073, file: !1074, line: 78, baseType: !6, size: 32, offset: 128)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1073, file: !1074, line: 79, baseType: !1094, size: 64, offset: 192)
!1094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1095, size: 64)
!1095 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1074, line: 49, baseType: !1096)
!1096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1074, line: 45, size: 832, elements: !1097)
!1097 = !{!1098, !1099, !1100}
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1096, file: !1074, line: 46, baseType: !1082, size: 64)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1096, file: !1074, line: 47, baseType: !1072, size: 64, offset: 64)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1096, file: !1074, line: 48, baseType: !1101, size: 704, offset: 128)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1102, line: 164, size: 704, elements: !1103)
!1102 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1103 = !{!1104, !1105, !1116, !1117, !1118, !1119, !1120, !1121, !1125, !1129, !1130, !1131, !1132}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1101, file: !1102, line: 166, baseType: !7, size: 64)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1101, file: !1102, line: 167, baseType: !1106, size: 64, offset: 64)
!1106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1107, size: 64)
!1107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1102, line: 157, size: 192, elements: !1108)
!1108 = !{!1109, !1111, !1112}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1107, file: !1102, line: 159, baseType: !1110, size: 64)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1107, file: !1102, line: 160, baseType: !1106, size: 64, offset: 64)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1107, file: !1102, line: 161, baseType: !1113, size: 32, offset: 128)
!1113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1043, size: 32, elements: !1114)
!1114 = !{!1115}
!1115 = !DISubrange(count: 4)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1101, file: !1102, line: 168, baseType: !1110, size: 64, offset: 128)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1101, file: !1102, line: 169, baseType: !1110, size: 64, offset: 192)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1101, file: !1102, line: 170, baseType: !1110, size: 64, offset: 256)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1101, file: !1102, line: 171, baseType: !7, size: 64, offset: 320)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1101, file: !1102, line: 172, baseType: !1006, size: 32, offset: 384)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1101, file: !1102, line: 176, baseType: !1122, size: 64, offset: 448)
!1122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1123, size: 64)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!1106, !1007, !7}
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1101, file: !1102, line: 177, baseType: !1126, size: 64, offset: 512)
!1126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1127, size: 64)
!1127 = !DISubroutineType(types: !1128)
!1128 = !{null, !1007, !1106}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1101, file: !1102, line: 178, baseType: !1007, size: 64, offset: 576)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1101, file: !1102, line: 179, baseType: !6, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1101, file: !1102, line: 180, baseType: !6, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1101, file: !1102, line: 184, baseType: !6, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1036, file: !426, line: 177, baseType: !1134, size: 64)
!1134 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1016, line: 56, baseType: !1135)
!1135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1136, size: 64)
!1136 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !160, line: 3371, size: 1792, elements: !1137)
!1137 = !{!1138, !1171, !1177, !1188, !1207, !1218, !1223, !1230, !1236, !1249, !1261, !1299, !1304, !1332, !1349, !1350, !1355, !1364, !1370, !1375, !1379, !1383, !1961, !2010, !2016, !2022, !2029, !2042, !2056, !2073, !2085, !2107, !2122, !2294}
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1136, file: !160, line: 3372, baseType: !1139, size: 64)
!1139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !160, line: 360, size: 64, elements: !1140)
!1140 = !{!1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170}
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1139, file: !160, line: 361, baseType: !6, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1139, file: !160, line: 363, baseType: !6, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1139, file: !160, line: 364, baseType: !6, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1139, file: !160, line: 365, baseType: !6, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1139, file: !160, line: 366, baseType: !6, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1139, file: !160, line: 367, baseType: !6, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1139, file: !160, line: 368, baseType: !6, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1139, file: !160, line: 369, baseType: !6, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1139, file: !160, line: 370, baseType: !6, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1139, file: !160, line: 372, baseType: !6, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1139, file: !160, line: 373, baseType: !6, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1139, file: !160, line: 374, baseType: !6, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1139, file: !160, line: 375, baseType: !6, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1139, file: !160, line: 376, baseType: !6, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1139, file: !160, line: 377, baseType: !6, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1139, file: !160, line: 378, baseType: !6, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1139, file: !160, line: 379, baseType: !6, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1139, file: !160, line: 381, baseType: !6, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1139, file: !160, line: 382, baseType: !6, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1139, file: !160, line: 383, baseType: !6, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1139, file: !160, line: 384, baseType: !6, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1139, file: !160, line: 385, baseType: !6, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1139, file: !160, line: 386, baseType: !6, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1139, file: !160, line: 387, baseType: !6, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1139, file: !160, line: 388, baseType: !6, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1139, file: !160, line: 390, baseType: !6, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1139, file: !160, line: 391, baseType: !6, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1139, file: !160, line: 392, baseType: !6, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1139, file: !160, line: 394, baseType: !6, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1139, file: !160, line: 399, baseType: !6, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1136, file: !160, line: 3373, baseType: !1172, size: 192)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !160, line: 402, size: 192, elements: !1173)
!1173 = !{!1174, !1175, !1176}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1172, file: !160, line: 403, baseType: !1139, size: 64)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1172, file: !160, line: 404, baseType: !1134, size: 64, offset: 64)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1172, file: !160, line: 405, baseType: !1134, size: 64, offset: 128)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1136, file: !160, line: 3374, baseType: !1178, size: 320)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !160, line: 1384, size: 320, elements: !1179)
!1179 = !{!1180, !1181}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1178, file: !160, line: 1385, baseType: !1172, size: 192)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1178, file: !160, line: 1386, baseType: !1182, size: 128, offset: 192)
!1182 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1183, line: 58, baseType: !1184)
!1183 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1183, line: 54, size: 128, elements: !1185)
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1184, file: !1183, line: 56, baseType: !1088, size: 64)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1184, file: !1183, line: 57, baseType: !7, size: 64, offset: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1136, file: !160, line: 3375, baseType: !1189, size: 256)
!1189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !160, line: 1397, size: 256, elements: !1190)
!1190 = !{!1191, !1192}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1189, file: !160, line: 1398, baseType: !1172, size: 192)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1189, file: !160, line: 1399, baseType: !1193, size: 64, offset: 192)
!1193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1194, size: 64)
!1194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1195, line: 52, size: 256, elements: !1196)
!1195 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1196 = !{!1197, !1198, !1199, !1200, !1201, !1202, !1203}
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1194, file: !1195, line: 56, baseType: !6, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1194, file: !1195, line: 57, baseType: !6, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1194, file: !1195, line: 58, baseType: !6, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1194, file: !1195, line: 59, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1194, file: !1195, line: 60, baseType: !6, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1194, file: !1195, line: 61, baseType: !6, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1194, file: !1195, line: 62, baseType: !1204, size: 192, offset: 64)
!1204 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1088, size: 192, elements: !1205)
!1205 = !{!1206}
!1206 = !DISubrange(count: 3)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1136, file: !160, line: 3376, baseType: !1208, size: 256)
!1208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !160, line: 1408, size: 256, elements: !1209)
!1209 = !{!1210, !1211}
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1208, file: !160, line: 1409, baseType: !1172, size: 192)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1208, file: !160, line: 1410, baseType: !1212, size: 64, offset: 192)
!1212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1213, size: 64)
!1213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1214, line: 27, size: 192, elements: !1215)
!1214 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1215 = !{!1216, !1217}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1213, file: !1214, line: 29, baseType: !1182, size: 128)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1213, file: !1214, line: 30, baseType: !8, size: 32, offset: 128)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1136, file: !160, line: 3377, baseType: !1219, size: 256)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !160, line: 1437, size: 256, elements: !1220)
!1220 = !{!1221, !1222}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1219, file: !160, line: 1438, baseType: !1172, size: 192)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1219, file: !160, line: 1439, baseType: !1134, size: 64, offset: 192)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1136, file: !160, line: 3378, baseType: !1224, size: 256)
!1224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !160, line: 1418, size: 256, elements: !1225)
!1225 = !{!1226, !1227, !1228}
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1224, file: !160, line: 1419, baseType: !1172, size: 192)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1224, file: !160, line: 1420, baseType: !1006, size: 32, offset: 192)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1224, file: !160, line: 1421, baseType: !1229, size: 8, offset: 224)
!1229 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1043, size: 8, elements: !1053)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1136, file: !160, line: 3379, baseType: !1231, size: 320)
!1231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !160, line: 1428, size: 320, elements: !1232)
!1232 = !{!1233, !1234, !1235}
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1231, file: !160, line: 1429, baseType: !1172, size: 192)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1231, file: !160, line: 1430, baseType: !1134, size: 64, offset: 192)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1231, file: !160, line: 1431, baseType: !1134, size: 64, offset: 256)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1136, file: !160, line: 3380, baseType: !1237, size: 320)
!1237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !160, line: 1460, size: 320, elements: !1238)
!1238 = !{!1239, !1240}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1237, file: !160, line: 1461, baseType: !1172, size: 192)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1237, file: !160, line: 1462, baseType: !1241, size: 128, offset: 192)
!1241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1242, line: 31, size: 128, elements: !1243)
!1242 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1243 = !{!1244, !1247, !1248}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1241, file: !1242, line: 32, baseType: !1245, size: 64)
!1245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1246, size: 64)
!1246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !136)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1241, file: !1242, line: 33, baseType: !6, size: 32, offset: 64)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1241, file: !1242, line: 34, baseType: !6, size: 32, offset: 96)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1136, file: !160, line: 3381, baseType: !1250, size: 384)
!1250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !160, line: 2507, size: 384, elements: !1251)
!1251 = !{!1252, !1253, !1258, !1259, !1260}
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1250, file: !160, line: 2508, baseType: !1172, size: 192)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1250, file: !160, line: 2509, baseType: !1254, size: 32, offset: 192)
!1254 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1255, line: 58, baseType: !1256)
!1255 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1256 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1257, line: 44, baseType: !6)
!1257 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1250, file: !160, line: 2510, baseType: !6, size: 32, offset: 224)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1250, file: !160, line: 2511, baseType: !1134, size: 64, offset: 256)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1250, file: !160, line: 2512, baseType: !1134, size: 64, offset: 320)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1136, file: !160, line: 3382, baseType: !1262, size: 896)
!1262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !160, line: 2652, size: 896, elements: !1263)
!1263 = !{!1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1262, file: !160, line: 2653, baseType: !1250, size: 384)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1262, file: !160, line: 2654, baseType: !1134, size: 64, offset: 384)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1262, file: !160, line: 2656, baseType: !6, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1262, file: !160, line: 2658, baseType: !6, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1262, file: !160, line: 2659, baseType: !6, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1262, file: !160, line: 2660, baseType: !6, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1262, file: !160, line: 2661, baseType: !6, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1262, file: !160, line: 2662, baseType: !6, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1262, file: !160, line: 2663, baseType: !6, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1262, file: !160, line: 2664, baseType: !6, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1262, file: !160, line: 2666, baseType: !6, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1262, file: !160, line: 2667, baseType: !6, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1262, file: !160, line: 2668, baseType: !6, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1262, file: !160, line: 2669, baseType: !6, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1262, file: !160, line: 2670, baseType: !6, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1262, file: !160, line: 2671, baseType: !6, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1262, file: !160, line: 2672, baseType: !6, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1262, file: !160, line: 2673, baseType: !6, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1262, file: !160, line: 2674, baseType: !6, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1262, file: !160, line: 2678, baseType: !6, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1262, file: !160, line: 2682, baseType: !6, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1262, file: !160, line: 2685, baseType: !6, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1262, file: !160, line: 2688, baseType: !6, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1262, file: !160, line: 2690, baseType: !6, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1262, file: !160, line: 2692, baseType: !6, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1262, file: !160, line: 2695, baseType: !6, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1262, file: !160, line: 2698, baseType: !6, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1262, file: !160, line: 2703, baseType: !6, size: 32, offset: 512)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1262, file: !160, line: 2705, baseType: !1134, size: 64, offset: 576)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1262, file: !160, line: 2706, baseType: !1134, size: 64, offset: 640)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1262, file: !160, line: 2707, baseType: !1134, size: 64, offset: 704)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1262, file: !160, line: 2708, baseType: !1134, size: 64, offset: 768)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1262, file: !160, line: 2711, baseType: !1297, size: 64, offset: 832)
!1297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1298, size: 64)
!1298 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !160, line: 2711, flags: DIFlagFwdDecl)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1136, file: !160, line: 3383, baseType: !1300, size: 960)
!1300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !160, line: 2756, size: 960, elements: !1301)
!1301 = !{!1302, !1303}
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1300, file: !160, line: 2757, baseType: !1262, size: 896)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1300, file: !160, line: 2758, baseType: !1015, size: 64, offset: 896)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1136, file: !160, line: 3384, baseType: !1305, size: 1472)
!1305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !160, line: 3114, size: 1472, elements: !1306)
!1306 = !{!1307, !1328, !1329, !1330, !1331}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1305, file: !160, line: 3115, baseType: !1308, size: 1216)
!1308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !160, line: 2984, size: 1216, elements: !1309)
!1309 = !{!1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327}
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1308, file: !160, line: 2985, baseType: !1300, size: 960)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1308, file: !160, line: 2986, baseType: !1134, size: 64, offset: 960)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1308, file: !160, line: 2987, baseType: !1134, size: 64, offset: 1024)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1308, file: !160, line: 2988, baseType: !1134, size: 64, offset: 1088)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1308, file: !160, line: 2991, baseType: !6, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1308, file: !160, line: 2992, baseType: !6, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1308, file: !160, line: 2993, baseType: !6, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1308, file: !160, line: 2994, baseType: !6, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1308, file: !160, line: 2995, baseType: !6, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1308, file: !160, line: 2996, baseType: !6, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1308, file: !160, line: 2998, baseType: !6, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1308, file: !160, line: 3000, baseType: !6, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1308, file: !160, line: 3002, baseType: !6, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1308, file: !160, line: 3003, baseType: !6, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1308, file: !160, line: 3004, baseType: !6, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1308, file: !160, line: 3005, baseType: !6, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1308, file: !160, line: 3007, baseType: !6, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1308, file: !160, line: 3010, baseType: !6, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1305, file: !160, line: 3117, baseType: !1134, size: 64, offset: 1216)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1305, file: !160, line: 3119, baseType: !1134, size: 64, offset: 1280)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1305, file: !160, line: 3121, baseType: !1134, size: 64, offset: 1344)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1305, file: !160, line: 3123, baseType: !1134, size: 64, offset: 1408)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1136, file: !160, line: 3385, baseType: !1333, size: 1088)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !160, line: 2874, size: 1088, elements: !1334)
!1334 = !{!1335, !1336, !1337}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1333, file: !160, line: 2875, baseType: !1300, size: 960)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1333, file: !160, line: 2876, baseType: !1015, size: 64, offset: 960)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1333, file: !160, line: 2877, baseType: !1338, size: 64, offset: 1024)
!1338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1340, line: 172, size: 128, elements: !1341)
!1340 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1341 = !{!1342, !1343, !1344, !1345, !1346, !1347, !1348}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1339, file: !1340, line: 174, baseType: !6, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1339, file: !1340, line: 178, baseType: !6, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1339, file: !1340, line: 183, baseType: !6, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1339, file: !1340, line: 187, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1339, file: !1340, line: 192, baseType: !6, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1339, file: !1340, line: 195, baseType: !6, size: 32, offset: 32)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1339, file: !1340, line: 199, baseType: !1134, size: 64, offset: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1136, file: !160, line: 3386, baseType: !1308, size: 1216)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1136, file: !160, line: 3387, baseType: !1351, size: 1280)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !160, line: 3093, size: 1280, elements: !1352)
!1352 = !{!1353, !1354}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1351, file: !160, line: 3094, baseType: !1308, size: 1216)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1351, file: !160, line: 3095, baseType: !1338, size: 64, offset: 1216)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1136, file: !160, line: 3388, baseType: !1356, size: 1216)
!1356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !160, line: 2824, size: 1216, elements: !1357)
!1357 = !{!1358, !1359, !1360, !1361, !1362, !1363}
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1356, file: !160, line: 2825, baseType: !1262, size: 896)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1356, file: !160, line: 2827, baseType: !1134, size: 64, offset: 896)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1356, file: !160, line: 2828, baseType: !1134, size: 64, offset: 960)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1356, file: !160, line: 2829, baseType: !1134, size: 64, offset: 1024)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1356, file: !160, line: 2830, baseType: !1134, size: 64, offset: 1088)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1356, file: !160, line: 2831, baseType: !1134, size: 64, offset: 1152)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1136, file: !160, line: 3389, baseType: !1365, size: 1024)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !160, line: 2850, size: 1024, elements: !1366)
!1366 = !{!1367, !1368, !1369}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1365, file: !160, line: 2851, baseType: !1300, size: 960)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1365, file: !160, line: 2852, baseType: !1006, size: 32, offset: 960)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1365, file: !160, line: 2853, baseType: !1006, size: 32, offset: 992)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1136, file: !160, line: 3390, baseType: !1371, size: 1024)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !160, line: 2857, size: 1024, elements: !1372)
!1372 = !{!1373, !1374}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1371, file: !160, line: 2858, baseType: !1300, size: 960)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1371, file: !160, line: 2859, baseType: !1338, size: 64, offset: 960)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1136, file: !160, line: 3391, baseType: !1376, size: 960)
!1376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !160, line: 2862, size: 960, elements: !1377)
!1377 = !{!1378}
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1376, file: !160, line: 2863, baseType: !1300, size: 960)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1136, file: !160, line: 3392, baseType: !1380, size: 1472)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !160, line: 3304, size: 1472, elements: !1381)
!1381 = !{!1382}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1380, file: !160, line: 3305, baseType: !1305, size: 1472)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1136, file: !160, line: 3393, baseType: !1384, size: 1792)
!1384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !160, line: 3248, size: 1792, elements: !1385)
!1385 = !{!1386, !1387, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960}
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1384, file: !160, line: 3249, baseType: !1305, size: 1472)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1384, file: !160, line: 3251, baseType: !1388, size: 64, offset: 1472)
!1388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1389, size: 64)
!1389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !948, line: 463, size: 1152, elements: !1390)
!1390 = !{!1391, !1394, !1761, !1762, !1876, !1884, !1885, !1886, !1887, !1888, !1889, !1913, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939}
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1389, file: !948, line: 464, baseType: !1392, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !948, line: 464, flags: DIFlagFwdDecl)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1389, file: !948, line: 467, baseType: !1395, size: 64, offset: 64)
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1396, size: 64)
!1396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !149, line: 374, size: 640, elements: !1397)
!1397 = !{!1398, !1736, !1737, !1750, !1751, !1752, !1753, !1754, !1755, !1757, !1759, !1760}
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1396, file: !149, line: 377, baseType: !1399, size: 64)
!1399 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1016, line: 111, baseType: !1400)
!1400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1401, size: 64)
!1401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !149, line: 217, size: 832, elements: !1402)
!1402 = !{!1403, !1648, !1649, !1650, !1706, !1710, !1711, !1712, !1730, !1731, !1732, !1733, !1734, !1735}
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1401, file: !149, line: 219, baseType: !1404, size: 64)
!1404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1405, size: 64)
!1405 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !149, line: 151, baseType: !1406)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !149, line: 151, size: 128, elements: !1407)
!1407 = !{!1408}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1406, file: !149, line: 151, baseType: !1409, size: 128)
!1409 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !149, line: 150, baseType: !1410)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !149, line: 150, size: 128, elements: !1411)
!1411 = !{!1412, !1413, !1414}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1410, file: !149, line: 150, baseType: !6, size: 32)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1410, file: !149, line: 150, baseType: !6, size: 32, offset: 32)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1410, file: !149, line: 150, baseType: !1415, size: 64, offset: 64)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1416, size: 64, elements: !1053)
!1416 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1016, line: 108, baseType: !1417)
!1417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1418, size: 64)
!1418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !149, line: 122, size: 512, elements: !1419)
!1419 = !{!1420, !1421, !1422, !1640, !1641, !1642, !1643, !1644, !1645, !1646}
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1418, file: !149, line: 124, baseType: !1400, size: 64)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1418, file: !149, line: 125, baseType: !1400, size: 64, offset: 64)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1418, file: !149, line: 131, baseType: !1423, size: 64, offset: 128)
!1423 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !149, line: 128, size: 64, elements: !1424)
!1424 = !{!1425, !1639}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1423, file: !149, line: 129, baseType: !1426, size: 64)
!1426 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1016, line: 66, baseType: !1427)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !574, line: 143, size: 192, elements: !1429)
!1429 = !{!1430, !1637, !1638}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1428, file: !574, line: 145, baseType: !1431, size: 64)
!1431 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1016, line: 69, baseType: !1432)
!1432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !574, line: 136, size: 192, elements: !1434)
!1434 = !{!1435, !1635, !1636}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1433, file: !574, line: 137, baseType: !1436, size: 64)
!1436 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1016, line: 58, baseType: !1437)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64)
!1438 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !574, line: 737, size: 768, elements: !1439)
!1439 = !{!1440, !1457, !1490, !1496, !1501, !1506, !1513, !1519, !1525, !1530, !1544, !1549, !1555, !1560, !1570, !1575, !1593, !1600, !1607, !1613, !1618, !1624, !1630}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1438, file: !574, line: 738, baseType: !1441, size: 256)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !574, line: 271, size: 256, elements: !1442)
!1442 = !{!1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1441, file: !574, line: 274, baseType: !6, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1441, file: !574, line: 277, baseType: !6, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1441, file: !574, line: 281, baseType: !6, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1441, file: !574, line: 284, baseType: !6, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1441, file: !574, line: 291, baseType: !6, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1441, file: !574, line: 295, baseType: !6, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1441, file: !574, line: 298, baseType: !6, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1441, file: !574, line: 301, baseType: !6, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1441, file: !574, line: 307, baseType: !6, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1441, file: !574, line: 312, baseType: !6, size: 32, offset: 32)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1441, file: !574, line: 316, baseType: !1254, size: 32, offset: 64)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1441, file: !574, line: 319, baseType: !6, size: 32, offset: 96)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1441, file: !574, line: 323, baseType: !1400, size: 64, offset: 128)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1441, file: !574, line: 327, baseType: !1134, size: 64, offset: 192)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1438, file: !574, line: 739, baseType: !1458, size: 448)
!1458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !574, line: 350, size: 448, elements: !1459)
!1459 = !{!1460, !1488}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1458, file: !574, line: 353, baseType: !1461, size: 384)
!1461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !574, line: 333, size: 384, elements: !1462)
!1462 = !{!1463, !1464, !1471}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1461, file: !574, line: 336, baseType: !1441, size: 256)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1461, file: !574, line: 343, baseType: !1465, size: 64, offset: 256)
!1465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1466, size: 64)
!1466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !917, line: 37, size: 128, elements: !1467)
!1467 = !{!1468, !1469}
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1466, file: !917, line: 39, baseType: !1465, size: 64)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1466, file: !917, line: 40, baseType: !1470, size: 64, offset: 64)
!1470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1134, size: 64)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1461, file: !574, line: 344, baseType: !1472, size: 64, offset: 320)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !917, line: 45, size: 320, elements: !1474)
!1474 = !{!1475, !1476}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1473, file: !917, line: 47, baseType: !1472, size: 64)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1473, file: !917, line: 48, baseType: !1477, size: 256, offset: 64)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !160, line: 1883, size: 256, elements: !1478)
!1478 = !{!1479, !1481, !1482, !1487}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1477, file: !160, line: 1884, baseType: !1480, size: 64)
!1480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1477, file: !160, line: 1885, baseType: !1480, size: 64, offset: 64)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1477, file: !160, line: 1891, baseType: !1483, size: 64, offset: 128)
!1483 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1477, file: !160, line: 1891, size: 64, elements: !1484)
!1484 = !{!1485, !1486}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1483, file: !160, line: 1891, baseType: !1436, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1483, file: !160, line: 1891, baseType: !1134, size: 64)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1477, file: !160, line: 1892, baseType: !1470, size: 64, offset: 192)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1458, file: !574, line: 359, baseType: !1489, size: 64, offset: 384)
!1489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1134, size: 64, elements: !1053)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1438, file: !574, line: 740, baseType: !1491, size: 512)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !574, line: 365, size: 512, elements: !1492)
!1492 = !{!1493, !1494, !1495}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1491, file: !574, line: 368, baseType: !1461, size: 384)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1491, file: !574, line: 373, baseType: !1134, size: 64, offset: 384)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1491, file: !574, line: 374, baseType: !1134, size: 64, offset: 448)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1438, file: !574, line: 741, baseType: !1497, size: 576)
!1497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !574, line: 380, size: 576, elements: !1498)
!1498 = !{!1499, !1500}
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1497, file: !574, line: 383, baseType: !1491, size: 512)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1497, file: !574, line: 389, baseType: !1489, size: 64, offset: 512)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1438, file: !574, line: 742, baseType: !1502, size: 320)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !574, line: 395, size: 320, elements: !1503)
!1503 = !{!1504, !1505}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1502, file: !574, line: 397, baseType: !1441, size: 256)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1502, file: !574, line: 400, baseType: !1426, size: 64, offset: 256)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1438, file: !574, line: 743, baseType: !1507, size: 448)
!1507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !574, line: 406, size: 448, elements: !1508)
!1508 = !{!1509, !1510, !1511, !1512}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1507, file: !574, line: 408, baseType: !1441, size: 256)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1507, file: !574, line: 412, baseType: !1134, size: 64, offset: 256)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1507, file: !574, line: 420, baseType: !1134, size: 64, offset: 320)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1507, file: !574, line: 423, baseType: !1426, size: 64, offset: 384)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1438, file: !574, line: 744, baseType: !1514, size: 384)
!1514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !574, line: 429, size: 384, elements: !1515)
!1515 = !{!1516, !1517, !1518}
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1514, file: !574, line: 431, baseType: !1441, size: 256)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1514, file: !574, line: 434, baseType: !1134, size: 64, offset: 256)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1514, file: !574, line: 437, baseType: !1426, size: 64, offset: 320)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1438, file: !574, line: 745, baseType: !1520, size: 384)
!1520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !574, line: 443, size: 384, elements: !1521)
!1521 = !{!1522, !1523, !1524}
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1520, file: !574, line: 445, baseType: !1441, size: 256)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1520, file: !574, line: 449, baseType: !1134, size: 64, offset: 256)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1520, file: !574, line: 453, baseType: !1426, size: 64, offset: 320)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1438, file: !574, line: 746, baseType: !1526, size: 320)
!1526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !574, line: 459, size: 320, elements: !1527)
!1527 = !{!1528, !1529}
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1526, file: !574, line: 461, baseType: !1441, size: 256)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1526, file: !574, line: 464, baseType: !1134, size: 64, offset: 256)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1438, file: !574, line: 747, baseType: !1531, size: 768)
!1531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !574, line: 469, size: 768, elements: !1532)
!1532 = !{!1533, !1534, !1535, !1536, !1537}
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1531, file: !574, line: 471, baseType: !1441, size: 256)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1531, file: !574, line: 474, baseType: !6, size: 32, offset: 256)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1531, file: !574, line: 475, baseType: !6, size: 32, offset: 288)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1531, file: !574, line: 478, baseType: !1134, size: 64, offset: 320)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1531, file: !574, line: 481, baseType: !1538, size: 384, offset: 384)
!1538 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1539, size: 384, elements: !1053)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !160, line: 1917, size: 384, elements: !1540)
!1540 = !{!1541, !1542, !1543}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1539, file: !160, line: 1920, baseType: !1477, size: 256)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1539, file: !160, line: 1921, baseType: !1134, size: 64, offset: 256)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1539, file: !160, line: 1922, baseType: !1254, size: 32, offset: 320)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1438, file: !574, line: 748, baseType: !1545, size: 320)
!1545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !574, line: 487, size: 320, elements: !1546)
!1546 = !{!1547, !1548}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1545, file: !574, line: 490, baseType: !1441, size: 256)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1545, file: !574, line: 494, baseType: !1006, size: 32, offset: 256)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1438, file: !574, line: 749, baseType: !1550, size: 384)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !574, line: 500, size: 384, elements: !1551)
!1551 = !{!1552, !1553, !1554}
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1550, file: !574, line: 502, baseType: !1441, size: 256)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1550, file: !574, line: 506, baseType: !1426, size: 64, offset: 256)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1550, file: !574, line: 510, baseType: !1426, size: 64, offset: 320)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1438, file: !574, line: 750, baseType: !1556, size: 320)
!1556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !574, line: 529, size: 320, elements: !1557)
!1557 = !{!1558, !1559}
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1556, file: !574, line: 531, baseType: !1441, size: 256)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1556, file: !574, line: 540, baseType: !1426, size: 64, offset: 256)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1438, file: !574, line: 751, baseType: !1561, size: 704)
!1561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !574, line: 546, size: 704, elements: !1562)
!1562 = !{!1563, !1564, !1565, !1566, !1567, !1568, !1569}
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1561, file: !574, line: 549, baseType: !1491, size: 512)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1561, file: !574, line: 553, baseType: !1041, size: 64, offset: 512)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1561, file: !574, line: 557, baseType: !136, size: 8, offset: 576)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1561, file: !574, line: 558, baseType: !136, size: 8, offset: 584)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1561, file: !574, line: 559, baseType: !136, size: 8, offset: 592)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1561, file: !574, line: 560, baseType: !136, size: 8, offset: 600)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1561, file: !574, line: 566, baseType: !1489, size: 64, offset: 640)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1438, file: !574, line: 752, baseType: !1571, size: 384)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !574, line: 571, size: 384, elements: !1572)
!1572 = !{!1573, !1574}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1571, file: !574, line: 573, baseType: !1502, size: 320)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1571, file: !574, line: 577, baseType: !1134, size: 64, offset: 320)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1438, file: !574, line: 753, baseType: !1576, size: 576)
!1576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !574, line: 600, size: 576, elements: !1577)
!1577 = !{!1578, !1579, !1580, !1583, !1592}
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1576, file: !574, line: 602, baseType: !1502, size: 320)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1576, file: !574, line: 605, baseType: !1134, size: 64, offset: 320)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1576, file: !574, line: 609, baseType: !1581, size: 64, offset: 384)
!1581 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1582, line: 46, baseType: !1088)
!1582 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1576, file: !574, line: 612, baseType: !1584, size: 64, offset: 448)
!1584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1585, size: 64)
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !574, line: 581, size: 320, elements: !1586)
!1586 = !{!1587, !1588, !1589, !1590, !1591}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1585, file: !574, line: 583, baseType: !159, size: 32)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1585, file: !574, line: 586, baseType: !1134, size: 64, offset: 64)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1585, file: !574, line: 589, baseType: !1134, size: 64, offset: 128)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1585, file: !574, line: 592, baseType: !1134, size: 64, offset: 192)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1585, file: !574, line: 595, baseType: !1134, size: 64, offset: 256)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1576, file: !574, line: 616, baseType: !1426, size: 64, offset: 512)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1438, file: !574, line: 754, baseType: !1594, size: 512)
!1594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !574, line: 622, size: 512, elements: !1595)
!1595 = !{!1596, !1597, !1598, !1599}
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1594, file: !574, line: 624, baseType: !1502, size: 320)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1594, file: !574, line: 628, baseType: !1134, size: 64, offset: 320)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1594, file: !574, line: 632, baseType: !1134, size: 64, offset: 384)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1594, file: !574, line: 636, baseType: !1134, size: 64, offset: 448)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1438, file: !574, line: 755, baseType: !1601, size: 704)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !574, line: 642, size: 704, elements: !1602)
!1602 = !{!1603, !1604, !1605, !1606}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1601, file: !574, line: 644, baseType: !1594, size: 512)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1601, file: !574, line: 648, baseType: !1134, size: 64, offset: 512)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1601, file: !574, line: 652, baseType: !1134, size: 64, offset: 576)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1601, file: !574, line: 653, baseType: !1134, size: 64, offset: 640)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1438, file: !574, line: 756, baseType: !1608, size: 448)
!1608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !574, line: 663, size: 448, elements: !1609)
!1609 = !{!1610, !1611, !1612}
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1608, file: !574, line: 665, baseType: !1502, size: 320)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1608, file: !574, line: 668, baseType: !1134, size: 64, offset: 320)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1608, file: !574, line: 673, baseType: !1134, size: 64, offset: 384)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1438, file: !574, line: 757, baseType: !1614, size: 384)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !574, line: 694, size: 384, elements: !1615)
!1615 = !{!1616, !1617}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1614, file: !574, line: 696, baseType: !1502, size: 320)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1614, file: !574, line: 699, baseType: !1134, size: 64, offset: 320)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1438, file: !574, line: 758, baseType: !1619, size: 384)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !574, line: 681, size: 384, elements: !1620)
!1620 = !{!1621, !1622, !1623}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1619, file: !574, line: 683, baseType: !1441, size: 256)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1619, file: !574, line: 686, baseType: !1134, size: 64, offset: 256)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1619, file: !574, line: 689, baseType: !1134, size: 64, offset: 320)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1438, file: !574, line: 759, baseType: !1625, size: 384)
!1625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !574, line: 707, size: 384, elements: !1626)
!1626 = !{!1627, !1628, !1629}
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1625, file: !574, line: 709, baseType: !1441, size: 256)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1625, file: !574, line: 712, baseType: !1134, size: 64, offset: 256)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1625, file: !574, line: 712, baseType: !1134, size: 64, offset: 320)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1438, file: !574, line: 760, baseType: !1631, size: 320)
!1631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !574, line: 718, size: 320, elements: !1632)
!1632 = !{!1633, !1634}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1631, file: !574, line: 720, baseType: !1441, size: 256)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1631, file: !574, line: 723, baseType: !1134, size: 64, offset: 256)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1433, file: !574, line: 138, baseType: !1432, size: 64, offset: 64)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1433, file: !574, line: 139, baseType: !1432, size: 64, offset: 128)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1428, file: !574, line: 146, baseType: !1431, size: 64, offset: 64)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1428, file: !574, line: 152, baseType: !1426, size: 64, offset: 128)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1423, file: !149, line: 130, baseType: !1015, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1418, file: !149, line: 134, baseType: !1007, size: 64, offset: 192)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1418, file: !149, line: 137, baseType: !1134, size: 64, offset: 256)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1418, file: !149, line: 138, baseType: !1254, size: 32, offset: 320)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1418, file: !149, line: 142, baseType: !6, size: 32, offset: 352)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1418, file: !149, line: 144, baseType: !1006, size: 32, offset: 384)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1418, file: !149, line: 145, baseType: !1006, size: 32, offset: 416)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1418, file: !149, line: 146, baseType: !1647, size: 64, offset: 448)
!1647 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !149, line: 119, baseType: !7)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1401, file: !149, line: 220, baseType: !1404, size: 64, offset: 64)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1401, file: !149, line: 223, baseType: !1007, size: 64, offset: 128)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1401, file: !149, line: 226, baseType: !1651, size: 64, offset: 192)
!1651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1652, size: 64)
!1652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !140, line: 100, size: 1216, elements: !1653)
!1653 = !{!1654, !1655, !1656, !1657, !1658, !1663, !1664, !1665, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1696, !1704, !1705}
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1652, file: !140, line: 102, baseType: !1006, size: 32)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1652, file: !140, line: 105, baseType: !6, size: 32, offset: 32)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1652, file: !140, line: 108, baseType: !1400, size: 64, offset: 64)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1652, file: !140, line: 111, baseType: !1400, size: 64, offset: 128)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1652, file: !140, line: 114, baseType: !1659, size: 64, offset: 192)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !140, line: 41, size: 64, elements: !1660)
!1660 = !{!1661, !1662}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1659, file: !140, line: 42, baseType: !139, size: 32)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1659, file: !140, line: 43, baseType: !6, size: 32, offset: 32)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1652, file: !140, line: 117, baseType: !6, size: 32, offset: 256)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1652, file: !140, line: 120, baseType: !6, size: 32, offset: 288)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1652, file: !140, line: 123, baseType: !1666, size: 64, offset: 320)
!1666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!1667 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !140, line: 87, baseType: !1668)
!1668 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !140, line: 87, size: 128, elements: !1669)
!1669 = !{!1670}
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1668, file: !140, line: 87, baseType: !1671, size: 128)
!1671 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !140, line: 85, baseType: !1672)
!1672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !140, line: 85, size: 128, elements: !1673)
!1673 = !{!1674, !1675, !1676}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1672, file: !140, line: 85, baseType: !6, size: 32)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1672, file: !140, line: 85, baseType: !6, size: 32, offset: 32)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1672, file: !140, line: 85, baseType: !1677, size: 64, offset: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1678, size: 64, elements: !1053)
!1678 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !140, line: 84, baseType: !1651)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1652, file: !140, line: 126, baseType: !1651, size: 64, offset: 384)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1652, file: !140, line: 129, baseType: !1651, size: 64, offset: 448)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1652, file: !140, line: 132, baseType: !1007, size: 64, offset: 512)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1652, file: !140, line: 139, baseType: !1134, size: 64, offset: 576)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1652, file: !140, line: 143, baseType: !1182, size: 128, offset: 640)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1652, file: !140, line: 146, baseType: !1182, size: 128, offset: 768)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1652, file: !140, line: 148, baseType: !136, size: 8, offset: 896)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1652, file: !140, line: 149, baseType: !136, size: 8, offset: 904)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1652, file: !140, line: 153, baseType: !391, size: 32, offset: 928)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1652, file: !140, line: 156, baseType: !1689, size: 64, offset: 960)
!1689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1690, size: 64)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !140, line: 48, size: 320, elements: !1691)
!1691 = !{!1692, !1693, !1694, !1695}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1690, file: !140, line: 50, baseType: !1436, size: 64)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1690, file: !140, line: 59, baseType: !1182, size: 128, offset: 64)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1690, file: !140, line: 64, baseType: !136, size: 8, offset: 192)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1690, file: !140, line: 67, baseType: !1689, size: 64, offset: 256)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1652, file: !140, line: 159, baseType: !1697, size: 64, offset: 1024)
!1697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1698, size: 64)
!1698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !140, line: 72, size: 256, elements: !1699)
!1699 = !{!1700, !1701, !1702, !1703}
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1698, file: !140, line: 74, baseType: !1417, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1698, file: !140, line: 77, baseType: !1697, size: 64, offset: 64)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1698, file: !140, line: 78, baseType: !1697, size: 64, offset: 128)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1698, file: !140, line: 81, baseType: !1697, size: 64, offset: 192)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1652, file: !140, line: 162, baseType: !136, size: 8, offset: 1088)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1652, file: !140, line: 166, baseType: !1134, size: 64, offset: 1152)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1401, file: !149, line: 229, baseType: !1707, size: 128, offset: 256)
!1707 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1708, size: 128, elements: !1089)
!1708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1709, size: 64)
!1709 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !149, line: 229, flags: DIFlagFwdDecl)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1401, file: !149, line: 232, baseType: !1400, size: 64, offset: 384)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1401, file: !149, line: 233, baseType: !1400, size: 64, offset: 448)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1401, file: !149, line: 238, baseType: !1713, size: 64, offset: 512)
!1713 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !149, line: 235, size: 64, elements: !1714)
!1714 = !{!1715, !1721}
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1713, file: !149, line: 236, baseType: !1716, size: 64)
!1716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1717, size: 64)
!1717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !149, line: 273, size: 128, elements: !1718)
!1718 = !{!1719, !1720}
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1717, file: !149, line: 275, baseType: !1426, size: 64)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1717, file: !149, line: 278, baseType: !1426, size: 64, offset: 64)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1713, file: !149, line: 237, baseType: !1722, size: 64)
!1722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1723, size: 64)
!1723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !149, line: 259, size: 320, elements: !1724)
!1724 = !{!1725, !1726, !1727, !1728, !1729}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1723, file: !149, line: 261, baseType: !1015, size: 64)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1723, file: !149, line: 262, baseType: !1015, size: 64, offset: 64)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1723, file: !149, line: 266, baseType: !1015, size: 64, offset: 128)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1723, file: !149, line: 267, baseType: !1015, size: 64, offset: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1723, file: !149, line: 270, baseType: !1006, size: 32, offset: 256)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1401, file: !149, line: 241, baseType: !1647, size: 64, offset: 576)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1401, file: !149, line: 244, baseType: !1006, size: 32, offset: 640)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1401, file: !149, line: 247, baseType: !1006, size: 32, offset: 672)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1401, file: !149, line: 250, baseType: !1006, size: 32, offset: 704)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1401, file: !149, line: 253, baseType: !1006, size: 32, offset: 736)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1401, file: !149, line: 256, baseType: !1006, size: 32, offset: 768)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1396, file: !149, line: 378, baseType: !1399, size: 64, offset: 64)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1396, file: !149, line: 381, baseType: !1738, size: 64, offset: 128)
!1738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1739, size: 64)
!1739 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !149, line: 282, baseType: !1740)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !149, line: 282, size: 128, elements: !1741)
!1741 = !{!1742}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1740, file: !149, line: 282, baseType: !1743, size: 128)
!1743 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !149, line: 281, baseType: !1744)
!1744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !149, line: 281, size: 128, elements: !1745)
!1745 = !{!1746, !1747, !1748}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1744, file: !149, line: 281, baseType: !6, size: 32)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1744, file: !149, line: 281, baseType: !6, size: 32, offset: 32)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1744, file: !149, line: 281, baseType: !1749, size: 64, offset: 64)
!1749 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1399, size: 64, elements: !1053)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1396, file: !149, line: 384, baseType: !1006, size: 32, offset: 192)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1396, file: !149, line: 387, baseType: !1006, size: 32, offset: 224)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1396, file: !149, line: 390, baseType: !1006, size: 32, offset: 256)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1396, file: !149, line: 394, baseType: !1738, size: 64, offset: 320)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1396, file: !149, line: 396, baseType: !148, size: 32, offset: 384)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1396, file: !149, line: 399, baseType: !1756, size: 64, offset: 416)
!1756 = !DICompositeType(tag: DW_TAG_array_type, baseType: !154, size: 64, elements: !1089)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1396, file: !149, line: 402, baseType: !1758, size: 64, offset: 480)
!1758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64, elements: !1089)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1396, file: !149, line: 406, baseType: !1006, size: 32, offset: 544)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1396, file: !149, line: 409, baseType: !1006, size: 32, offset: 576)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1389, file: !948, line: 470, baseType: !1427, size: 64, offset: 128)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1389, file: !948, line: 473, baseType: !1763, size: 64, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1764, size: 64)
!1764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1340, line: 39, size: 1152, elements: !1765)
!1765 = !{!1766, !1815, !1828, !1840, !1841, !1853, !1854, !1858, !1859, !1860, !1861, !1862}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1764, file: !1340, line: 41, baseType: !1767, size: 64)
!1767 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !421, line: 144, baseType: !1768)
!1768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1769, size: 64)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !421, line: 100, size: 896, elements: !1770)
!1770 = !{!1771, !1779, !1784, !1789, !1791, !1792, !1793, !1794, !1795, !1796, !1801, !1803, !1804, !1809, !1814}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1769, file: !421, line: 102, baseType: !1772, size: 64)
!1772 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !421, line: 52, baseType: !1773)
!1773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1774, size: 64)
!1774 = !DISubroutineType(types: !1775)
!1775 = !{!1776, !1777}
!1776 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !421, line: 47, baseType: !6)
!1777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!1778 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1769, file: !421, line: 105, baseType: !1780, size: 64, offset: 64)
!1780 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !421, line: 59, baseType: !1781)
!1781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1782, size: 64)
!1782 = !DISubroutineType(types: !1783)
!1783 = !{!1006, !1777, !1777}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1769, file: !421, line: 108, baseType: !1785, size: 64, offset: 128)
!1785 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !421, line: 63, baseType: !1786)
!1786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1787, size: 64)
!1787 = !DISubroutineType(types: !1788)
!1788 = !{null, !1007}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1769, file: !421, line: 111, baseType: !1790, size: 64, offset: 192)
!1790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1007, size: 64)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1769, file: !421, line: 114, baseType: !1581, size: 64, offset: 256)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1769, file: !421, line: 117, baseType: !1581, size: 64, offset: 320)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1769, file: !421, line: 120, baseType: !1581, size: 64, offset: 384)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1769, file: !421, line: 124, baseType: !6, size: 32, offset: 448)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1769, file: !421, line: 128, baseType: !6, size: 32, offset: 480)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1769, file: !421, line: 131, baseType: !1797, size: 64, offset: 512)
!1797 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !421, line: 75, baseType: !1798)
!1798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1799, size: 64)
!1799 = !DISubroutineType(types: !1800)
!1800 = !{!1007, !1581, !1581}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1769, file: !421, line: 132, baseType: !1802, size: 64, offset: 576)
!1802 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !421, line: 78, baseType: !1786)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1769, file: !421, line: 135, baseType: !1007, size: 64, offset: 640)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1769, file: !421, line: 136, baseType: !1805, size: 64, offset: 704)
!1805 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !421, line: 82, baseType: !1806)
!1806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1807, size: 64)
!1807 = !DISubroutineType(types: !1808)
!1808 = !{!1007, !1007, !1581, !1581}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1769, file: !421, line: 137, baseType: !1810, size: 64, offset: 768)
!1810 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !421, line: 83, baseType: !1811)
!1811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1812, size: 64)
!1812 = !DISubroutineType(types: !1813)
!1813 = !{null, !1007, !1007}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1769, file: !421, line: 141, baseType: !6, size: 32, offset: 832)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1764, file: !1340, line: 48, baseType: !1816, size: 64, offset: 64)
!1816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1817, size: 64)
!1817 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !574, line: 35, baseType: !1818)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !574, line: 35, size: 128, elements: !1819)
!1819 = !{!1820}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1818, file: !574, line: 35, baseType: !1821, size: 128)
!1821 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !574, line: 33, baseType: !1822)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !574, line: 33, size: 128, elements: !1823)
!1823 = !{!1824, !1825, !1826}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1822, file: !574, line: 33, baseType: !6, size: 32)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1822, file: !574, line: 33, baseType: !6, size: 32, offset: 32)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1822, file: !574, line: 33, baseType: !1827, size: 64, offset: 64)
!1827 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1436, size: 64, elements: !1053)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1764, file: !1340, line: 51, baseType: !1829, size: 64, offset: 128)
!1829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1830, size: 64)
!1830 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !160, line: 183, baseType: !1831)
!1831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !160, line: 183, size: 128, elements: !1832)
!1832 = !{!1833}
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1831, file: !160, line: 183, baseType: !1834, size: 128)
!1834 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !160, line: 182, baseType: !1835)
!1835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !160, line: 182, size: 128, elements: !1836)
!1836 = !{!1837, !1838, !1839}
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1835, file: !160, line: 182, baseType: !6, size: 32)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1835, file: !160, line: 182, baseType: !6, size: 32, offset: 32)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1835, file: !160, line: 182, baseType: !1489, size: 64, offset: 64)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1764, file: !1340, line: 54, baseType: !1134, size: 64, offset: 192)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1764, file: !1340, line: 57, baseType: !1842, size: 128, offset: 256)
!1842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1843, line: 31, size: 128, elements: !1844)
!1843 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1844 = !{!1845, !1846, !1847, !1848, !1849, !1850, !1851}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1842, file: !1843, line: 35, baseType: !6, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1842, file: !1843, line: 39, baseType: !6, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1842, file: !1843, line: 42, baseType: !6, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1842, file: !1843, line: 46, baseType: !6, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1842, file: !1843, line: 50, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1842, file: !1843, line: 53, baseType: !6, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1842, file: !1843, line: 56, baseType: !1852, size: 64, offset: 64)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1016, line: 47, baseType: !1072)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1764, file: !1340, line: 60, baseType: !1842, size: 128, offset: 384)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1764, file: !1340, line: 64, baseType: !1855, size: 64, offset: 512)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64)
!1856 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1857, line: 33, flags: DIFlagFwdDecl)
!1857 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1764, file: !1340, line: 67, baseType: !1134, size: 64, offset: 576)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1764, file: !1340, line: 73, baseType: !1767, size: 64, offset: 640)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1764, file: !1340, line: 77, baseType: !1852, size: 64, offset: 704)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1764, file: !1340, line: 80, baseType: !6, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1764, file: !1340, line: 82, baseType: !1863, size: 320, offset: 832)
!1863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !917, line: 62, size: 320, elements: !1864)
!1864 = !{!1865, !1871, !1872, !1873, !1874, !1875}
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1863, file: !917, line: 63, baseType: !1866, size: 64)
!1866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1867, size: 64)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !917, line: 56, size: 128, elements: !1868)
!1868 = !{!1869, !1870}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1867, file: !917, line: 57, baseType: !1866, size: 64)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1867, file: !917, line: 58, baseType: !1229, size: 8, offset: 64)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1863, file: !917, line: 64, baseType: !6, size: 32, offset: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1863, file: !917, line: 66, baseType: !6, size: 32, offset: 96)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1863, file: !917, line: 68, baseType: !136, size: 8, offset: 128)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1863, file: !917, line: 70, baseType: !1465, size: 64, offset: 192)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1863, file: !917, line: 71, baseType: !1472, size: 64, offset: 256)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1389, file: !948, line: 476, baseType: !1877, size: 64, offset: 256)
!1877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1878, size: 64)
!1878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !140, line: 187, size: 256, elements: !1879)
!1879 = !{!1880, !1881, !1882, !1883}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1878, file: !140, line: 189, baseType: !1006, size: 32)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1878, file: !140, line: 192, baseType: !1666, size: 64, offset: 64)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1878, file: !140, line: 197, baseType: !1767, size: 64, offset: 128)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1878, file: !140, line: 200, baseType: !1651, size: 64, offset: 192)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1389, file: !948, line: 479, baseType: !1767, size: 64, offset: 320)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1389, file: !948, line: 484, baseType: !1134, size: 64, offset: 384)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1389, file: !948, line: 488, baseType: !1134, size: 64, offset: 448)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1389, file: !948, line: 493, baseType: !1134, size: 64, offset: 512)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1389, file: !948, line: 496, baseType: !1134, size: 64, offset: 576)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1389, file: !948, line: 501, baseType: !1890, size: 64, offset: 640)
!1890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1891, size: 64)
!1891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !355, line: 2355, size: 576, elements: !1892)
!1892 = !{!1893, !1896, !1897, !1898, !1899, !1901, !1902, !1907, !1908, !1909, !1910, !1911, !1912}
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1891, file: !355, line: 2356, baseType: !1894, size: 64)
!1894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1895, size: 64)
!1895 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !355, line: 2356, flags: DIFlagFwdDecl)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1891, file: !355, line: 2357, baseType: !1041, size: 64, offset: 64)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1891, file: !355, line: 2358, baseType: !1006, size: 32, offset: 128)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1891, file: !355, line: 2359, baseType: !1006, size: 32, offset: 160)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1891, file: !355, line: 2360, baseType: !1900, size: 128, offset: 192)
!1900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1006, size: 128, elements: !1114)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1891, file: !355, line: 2364, baseType: !1006, size: 32, offset: 320)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1891, file: !355, line: 2367, baseType: !1903, size: 128, offset: 384)
!1903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !355, line: 2349, size: 128, elements: !1904)
!1904 = !{!1905, !1906}
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1903, file: !355, line: 2351, baseType: !1015, size: 64)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1903, file: !355, line: 2352, baseType: !7, size: 64, offset: 64)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1891, file: !355, line: 2371, baseType: !354, size: 32, offset: 512)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1891, file: !355, line: 2374, baseType: !6, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1891, file: !355, line: 2377, baseType: !6, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1891, file: !355, line: 2381, baseType: !6, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1891, file: !355, line: 2392, baseType: !6, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1891, file: !355, line: 2396, baseType: !6, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1389, file: !948, line: 504, baseType: !1914, size: 64, offset: 704)
!1914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1915, size: 64)
!1915 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !948, line: 504, flags: DIFlagFwdDecl)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1389, file: !948, line: 507, baseType: !1767, size: 64, offset: 768)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1389, file: !948, line: 510, baseType: !1006, size: 32, offset: 832)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1389, file: !948, line: 513, baseType: !1006, size: 32, offset: 864)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1389, file: !948, line: 516, baseType: !1254, size: 32, offset: 896)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1389, file: !948, line: 519, baseType: !1254, size: 32, offset: 928)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1389, file: !948, line: 522, baseType: !6, size: 32, offset: 960)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1389, file: !948, line: 523, baseType: !6, size: 32, offset: 992)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1389, file: !948, line: 528, baseType: !1041, size: 64, offset: 1024)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1389, file: !948, line: 535, baseType: !6, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1389, file: !948, line: 539, baseType: !6, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1389, file: !948, line: 543, baseType: !6, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1389, file: !948, line: 546, baseType: !6, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1389, file: !948, line: 550, baseType: !6, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1389, file: !948, line: 554, baseType: !6, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1389, file: !948, line: 559, baseType: !6, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1389, file: !948, line: 562, baseType: !6, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1389, file: !948, line: 571, baseType: !6, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1389, file: !948, line: 573, baseType: !6, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1389, file: !948, line: 574, baseType: !6, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1389, file: !948, line: 581, baseType: !6, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1389, file: !948, line: 585, baseType: !6, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1389, file: !948, line: 588, baseType: !6, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1389, file: !948, line: 592, baseType: !6, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1389, file: !948, line: 598, baseType: !6, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1384, file: !160, line: 3254, baseType: !1134, size: 64, offset: 1536)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1384, file: !160, line: 3257, baseType: !1134, size: 64, offset: 1600)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1384, file: !160, line: 3258, baseType: !1134, size: 64, offset: 1664)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1384, file: !160, line: 3264, baseType: !6, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1384, file: !160, line: 3265, baseType: !6, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1384, file: !160, line: 3267, baseType: !6, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1384, file: !160, line: 3268, baseType: !6, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1384, file: !160, line: 3269, baseType: !6, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1384, file: !160, line: 3271, baseType: !6, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1384, file: !160, line: 3272, baseType: !6, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1384, file: !160, line: 3273, baseType: !6, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1384, file: !160, line: 3274, baseType: !6, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1384, file: !160, line: 3275, baseType: !6, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1384, file: !160, line: 3276, baseType: !6, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1384, file: !160, line: 3277, baseType: !6, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1384, file: !160, line: 3279, baseType: !6, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1384, file: !160, line: 3280, baseType: !6, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1384, file: !160, line: 3281, baseType: !6, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1384, file: !160, line: 3282, baseType: !6, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1384, file: !160, line: 3283, baseType: !6, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1384, file: !160, line: 3284, baseType: !6, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1136, file: !160, line: 3394, baseType: !1962, size: 1344)
!1962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !160, line: 2279, size: 1344, elements: !1963)
!1963 = !{!1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1989, !1990, !1991, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007}
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1962, file: !160, line: 2280, baseType: !1172, size: 192)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1962, file: !160, line: 2281, baseType: !1134, size: 64, offset: 192)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1962, file: !160, line: 2282, baseType: !1134, size: 64, offset: 256)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1962, file: !160, line: 2283, baseType: !1134, size: 64, offset: 320)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1962, file: !160, line: 2284, baseType: !1134, size: 64, offset: 384)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1962, file: !160, line: 2285, baseType: !6, size: 32, offset: 448)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1962, file: !160, line: 2287, baseType: !6, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1962, file: !160, line: 2288, baseType: !6, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1962, file: !160, line: 2289, baseType: !6, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1962, file: !160, line: 2290, baseType: !6, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1962, file: !160, line: 2291, baseType: !6, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1962, file: !160, line: 2292, baseType: !6, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1962, file: !160, line: 2294, baseType: !6, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1962, file: !160, line: 2296, baseType: !6, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1962, file: !160, line: 2297, baseType: !6, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1962, file: !160, line: 2298, baseType: !6, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1962, file: !160, line: 2299, baseType: !6, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1962, file: !160, line: 2300, baseType: !6, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1962, file: !160, line: 2301, baseType: !6, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1962, file: !160, line: 2302, baseType: !6, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1962, file: !160, line: 2303, baseType: !6, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1962, file: !160, line: 2305, baseType: !6, size: 32, offset: 512)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1962, file: !160, line: 2306, baseType: !1987, size: 32, offset: 544)
!1987 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1988, line: 31, baseType: !1006)
!1988 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1962, file: !160, line: 2307, baseType: !1134, size: 64, offset: 576)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1962, file: !160, line: 2308, baseType: !1134, size: 64, offset: 640)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1962, file: !160, line: 2314, baseType: !1992, size: 64, offset: 704)
!1992 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !160, line: 2309, size: 64, elements: !1993)
!1993 = !{!1994, !1995, !1996}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1992, file: !160, line: 2310, baseType: !1006, size: 32)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1992, file: !160, line: 2311, baseType: !1041, size: 64)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1992, file: !160, line: 2312, baseType: !1997, size: 64)
!1997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1998, size: 64)
!1998 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !160, line: 2277, flags: DIFlagFwdDecl)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1962, file: !160, line: 2315, baseType: !1134, size: 64, offset: 768)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1962, file: !160, line: 2316, baseType: !1134, size: 64, offset: 832)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1962, file: !160, line: 2317, baseType: !1134, size: 64, offset: 896)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1962, file: !160, line: 2318, baseType: !1134, size: 64, offset: 960)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1962, file: !160, line: 2319, baseType: !1134, size: 64, offset: 1024)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1962, file: !160, line: 2320, baseType: !1134, size: 64, offset: 1088)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1962, file: !160, line: 2321, baseType: !1134, size: 64, offset: 1152)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1962, file: !160, line: 2322, baseType: !1134, size: 64, offset: 1216)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1962, file: !160, line: 2324, baseType: !2008, size: 64, offset: 1280)
!2008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2009, size: 64)
!2009 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !160, line: 2324, flags: DIFlagFwdDecl)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1136, file: !160, line: 3395, baseType: !2011, size: 320)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !160, line: 1469, size: 320, elements: !2012)
!2012 = !{!2013, !2014, !2015}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2011, file: !160, line: 1470, baseType: !1172, size: 192)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2011, file: !160, line: 1471, baseType: !1134, size: 64, offset: 192)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2011, file: !160, line: 1472, baseType: !1134, size: 64, offset: 256)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1136, file: !160, line: 3396, baseType: !2017, size: 320)
!2017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !160, line: 1482, size: 320, elements: !2018)
!2018 = !{!2019, !2020, !2021}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2017, file: !160, line: 1483, baseType: !1172, size: 192)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2017, file: !160, line: 1484, baseType: !1006, size: 32, offset: 192)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2017, file: !160, line: 1485, baseType: !1489, size: 64, offset: 256)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1136, file: !160, line: 3397, baseType: !2023, size: 384)
!2023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !160, line: 1829, size: 384, elements: !2024)
!2024 = !{!2025, !2026, !2027, !2028}
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2023, file: !160, line: 1830, baseType: !1172, size: 192)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2023, file: !160, line: 1831, baseType: !1254, size: 32, offset: 192)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2023, file: !160, line: 1832, baseType: !1134, size: 64, offset: 256)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2023, file: !160, line: 1835, baseType: !1489, size: 64, offset: 320)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1136, file: !160, line: 3398, baseType: !2030, size: 704)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !160, line: 1898, size: 704, elements: !2031)
!2031 = !{!2032, !2033, !2034, !2035, !2036, !2041}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2030, file: !160, line: 1899, baseType: !1172, size: 192)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2030, file: !160, line: 1902, baseType: !1134, size: 64, offset: 192)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2030, file: !160, line: 1905, baseType: !1436, size: 64, offset: 256)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2030, file: !160, line: 1908, baseType: !6, size: 32, offset: 320)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2030, file: !160, line: 1911, baseType: !2037, size: 64, offset: 384)
!2037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2038, size: 64)
!2038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1340, line: 117, size: 128, elements: !2039)
!2039 = !{!2040}
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2038, file: !1340, line: 120, baseType: !1842, size: 128)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2030, file: !160, line: 1914, baseType: !1477, size: 256, offset: 448)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1136, file: !160, line: 3399, baseType: !2043, size: 704)
!2043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !160, line: 2008, size: 704, elements: !2044)
!2044 = !{!2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2043, file: !160, line: 2009, baseType: !1172, size: 192)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2043, file: !160, line: 2011, baseType: !6, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2043, file: !160, line: 2012, baseType: !6, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2043, file: !160, line: 2014, baseType: !1254, size: 32, offset: 224)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2043, file: !160, line: 2016, baseType: !1134, size: 64, offset: 256)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2043, file: !160, line: 2017, baseType: !1829, size: 64, offset: 320)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2043, file: !160, line: 2019, baseType: !1134, size: 64, offset: 384)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2043, file: !160, line: 2020, baseType: !1134, size: 64, offset: 448)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2043, file: !160, line: 2021, baseType: !1134, size: 64, offset: 512)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2043, file: !160, line: 2022, baseType: !1134, size: 64, offset: 576)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2043, file: !160, line: 2023, baseType: !1134, size: 64, offset: 640)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1136, file: !160, line: 3400, baseType: !2057, size: 832)
!2057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !160, line: 2430, size: 832, elements: !2058)
!2058 = !{!2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068}
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2057, file: !160, line: 2431, baseType: !1172, size: 192)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2057, file: !160, line: 2433, baseType: !1134, size: 64, offset: 192)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2057, file: !160, line: 2434, baseType: !1134, size: 64, offset: 256)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2057, file: !160, line: 2435, baseType: !1134, size: 64, offset: 320)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2057, file: !160, line: 2436, baseType: !1134, size: 64, offset: 384)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2057, file: !160, line: 2437, baseType: !1829, size: 64, offset: 448)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2057, file: !160, line: 2438, baseType: !1134, size: 64, offset: 512)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2057, file: !160, line: 2440, baseType: !1134, size: 64, offset: 576)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2057, file: !160, line: 2441, baseType: !1134, size: 64, offset: 640)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2057, file: !160, line: 2443, baseType: !2069, size: 128, offset: 704)
!2069 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !160, line: 182, baseType: !2070)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !160, line: 182, size: 128, elements: !2071)
!2071 = !{!2072}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2070, file: !160, line: 182, baseType: !1834, size: 128)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1136, file: !160, line: 3401, baseType: !2074, size: 320)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !160, line: 3327, size: 320, elements: !2075)
!2075 = !{!2076, !2077, !2084}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2074, file: !160, line: 3329, baseType: !1172, size: 192)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2074, file: !160, line: 3330, baseType: !2078, size: 64, offset: 192)
!2078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2079, size: 64)
!2079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !160, line: 3320, size: 192, elements: !2080)
!2080 = !{!2081, !2082, !2083}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2079, file: !160, line: 3322, baseType: !2078, size: 64)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2079, file: !160, line: 3323, baseType: !2078, size: 64, offset: 64)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2079, file: !160, line: 3324, baseType: !1134, size: 64, offset: 128)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2074, file: !160, line: 3331, baseType: !2078, size: 64, offset: 256)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1136, file: !160, line: 3402, baseType: !2086, size: 256)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !160, line: 1540, size: 256, elements: !2087)
!2087 = !{!2088, !2089}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2086, file: !160, line: 1541, baseType: !1172, size: 192)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2086, file: !160, line: 1542, baseType: !2090, size: 64, offset: 192)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2091 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !160, line: 1538, baseType: !2092)
!2092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !160, line: 1538, size: 192, elements: !2093)
!2093 = !{!2094}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2092, file: !160, line: 1538, baseType: !2095, size: 192)
!2095 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !160, line: 1537, baseType: !2096)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !160, line: 1537, size: 192, elements: !2097)
!2097 = !{!2098, !2099, !2100}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2096, file: !160, line: 1537, baseType: !6, size: 32)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2096, file: !160, line: 1537, baseType: !6, size: 32, offset: 32)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2096, file: !160, line: 1537, baseType: !2101, size: 128, offset: 64)
!2101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2102, size: 128, elements: !1053)
!2102 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !160, line: 1535, baseType: !2103)
!2103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !160, line: 1532, size: 128, elements: !2104)
!2104 = !{!2105, !2106}
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2103, file: !160, line: 1533, baseType: !1134, size: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2103, file: !160, line: 1534, baseType: !1134, size: 64, offset: 64)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1136, file: !160, line: 3403, baseType: !2108, size: 512)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !160, line: 1938, size: 512, elements: !2109)
!2109 = !{!2110, !2111, !2112, !2113, !2119, !2120, !2121}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2108, file: !160, line: 1939, baseType: !1172, size: 192)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2108, file: !160, line: 1940, baseType: !1254, size: 32, offset: 192)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2108, file: !160, line: 1941, baseType: !359, size: 32, offset: 224)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2108, file: !160, line: 1946, baseType: !2114, size: 32, offset: 256)
!2114 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !160, line: 1942, size: 32, elements: !2115)
!2115 = !{!2116, !2117, !2118}
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2114, file: !160, line: 1943, baseType: !377, size: 32)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2114, file: !160, line: 1944, baseType: !384, size: 32)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2114, file: !160, line: 1945, baseType: !159, size: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2108, file: !160, line: 1950, baseType: !1426, size: 64, offset: 320)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2108, file: !160, line: 1951, baseType: !1426, size: 64, offset: 384)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2108, file: !160, line: 1953, baseType: !1489, size: 64, offset: 448)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1136, file: !160, line: 3404, baseType: !2123, size: 1664)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !160, line: 3337, size: 1664, elements: !2124)
!2124 = !{!2125, !2126}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2123, file: !160, line: 3338, baseType: !1172, size: 192)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2123, file: !160, line: 3341, baseType: !2127, size: 1472, offset: 192)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2128, line: 410, size: 1472, elements: !2129)
!2128 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2129 = !{!2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293}
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2127, file: !2128, line: 412, baseType: !1006, size: 32)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2127, file: !2128, line: 413, baseType: !1006, size: 32, offset: 32)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2127, file: !2128, line: 414, baseType: !1006, size: 32, offset: 64)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2127, file: !2128, line: 415, baseType: !1006, size: 32, offset: 96)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2127, file: !2128, line: 416, baseType: !1006, size: 32, offset: 128)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2127, file: !2128, line: 417, baseType: !1006, size: 32, offset: 160)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2127, file: !2128, line: 418, baseType: !136, size: 8, offset: 192)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2127, file: !2128, line: 419, baseType: !136, size: 8, offset: 200)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2127, file: !2128, line: 420, baseType: !2139, size: 8, offset: 208)
!2139 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2127, file: !2128, line: 421, baseType: !2139, size: 8, offset: 216)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2127, file: !2128, line: 422, baseType: !2139, size: 8, offset: 224)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2127, file: !2128, line: 423, baseType: !2139, size: 8, offset: 232)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2127, file: !2128, line: 424, baseType: !2139, size: 8, offset: 240)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2127, file: !2128, line: 425, baseType: !2139, size: 8, offset: 248)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2127, file: !2128, line: 426, baseType: !2139, size: 8, offset: 256)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2127, file: !2128, line: 427, baseType: !2139, size: 8, offset: 264)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2127, file: !2128, line: 428, baseType: !2139, size: 8, offset: 272)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2127, file: !2128, line: 429, baseType: !2139, size: 8, offset: 280)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2127, file: !2128, line: 430, baseType: !2139, size: 8, offset: 288)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2127, file: !2128, line: 431, baseType: !2139, size: 8, offset: 296)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2127, file: !2128, line: 432, baseType: !2139, size: 8, offset: 304)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2127, file: !2128, line: 433, baseType: !2139, size: 8, offset: 312)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2127, file: !2128, line: 434, baseType: !2139, size: 8, offset: 320)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2127, file: !2128, line: 435, baseType: !2139, size: 8, offset: 328)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2127, file: !2128, line: 436, baseType: !2139, size: 8, offset: 336)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2127, file: !2128, line: 437, baseType: !2139, size: 8, offset: 344)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2127, file: !2128, line: 438, baseType: !2139, size: 8, offset: 352)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2127, file: !2128, line: 439, baseType: !2139, size: 8, offset: 360)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2127, file: !2128, line: 440, baseType: !2139, size: 8, offset: 368)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2127, file: !2128, line: 441, baseType: !2139, size: 8, offset: 376)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2127, file: !2128, line: 442, baseType: !2139, size: 8, offset: 384)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2127, file: !2128, line: 443, baseType: !2139, size: 8, offset: 392)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2127, file: !2128, line: 444, baseType: !2139, size: 8, offset: 400)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2127, file: !2128, line: 445, baseType: !2139, size: 8, offset: 408)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2127, file: !2128, line: 446, baseType: !2139, size: 8, offset: 416)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2127, file: !2128, line: 447, baseType: !2139, size: 8, offset: 424)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2127, file: !2128, line: 448, baseType: !2139, size: 8, offset: 432)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2127, file: !2128, line: 449, baseType: !2139, size: 8, offset: 440)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2127, file: !2128, line: 450, baseType: !2139, size: 8, offset: 448)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2127, file: !2128, line: 451, baseType: !2139, size: 8, offset: 456)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2127, file: !2128, line: 452, baseType: !2139, size: 8, offset: 464)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2127, file: !2128, line: 453, baseType: !2139, size: 8, offset: 472)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2127, file: !2128, line: 454, baseType: !2139, size: 8, offset: 480)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2127, file: !2128, line: 455, baseType: !2139, size: 8, offset: 488)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2127, file: !2128, line: 456, baseType: !2139, size: 8, offset: 496)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2127, file: !2128, line: 457, baseType: !2139, size: 8, offset: 504)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2127, file: !2128, line: 458, baseType: !2139, size: 8, offset: 512)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2127, file: !2128, line: 459, baseType: !2139, size: 8, offset: 520)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2127, file: !2128, line: 460, baseType: !2139, size: 8, offset: 528)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2127, file: !2128, line: 461, baseType: !2139, size: 8, offset: 536)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2127, file: !2128, line: 462, baseType: !2139, size: 8, offset: 544)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2127, file: !2128, line: 463, baseType: !2139, size: 8, offset: 552)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2127, file: !2128, line: 464, baseType: !2139, size: 8, offset: 560)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2127, file: !2128, line: 465, baseType: !2139, size: 8, offset: 568)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2127, file: !2128, line: 466, baseType: !2139, size: 8, offset: 576)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2127, file: !2128, line: 467, baseType: !2139, size: 8, offset: 584)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2127, file: !2128, line: 468, baseType: !2139, size: 8, offset: 592)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2127, file: !2128, line: 469, baseType: !2139, size: 8, offset: 600)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2127, file: !2128, line: 470, baseType: !2139, size: 8, offset: 608)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2127, file: !2128, line: 471, baseType: !2139, size: 8, offset: 616)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2127, file: !2128, line: 472, baseType: !2139, size: 8, offset: 624)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2127, file: !2128, line: 473, baseType: !2139, size: 8, offset: 632)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2127, file: !2128, line: 474, baseType: !2139, size: 8, offset: 640)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2127, file: !2128, line: 475, baseType: !2139, size: 8, offset: 648)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2127, file: !2128, line: 476, baseType: !2139, size: 8, offset: 656)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2127, file: !2128, line: 477, baseType: !2139, size: 8, offset: 664)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2127, file: !2128, line: 478, baseType: !2139, size: 8, offset: 672)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2127, file: !2128, line: 479, baseType: !2139, size: 8, offset: 680)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2127, file: !2128, line: 480, baseType: !2139, size: 8, offset: 688)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2127, file: !2128, line: 481, baseType: !2139, size: 8, offset: 696)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2127, file: !2128, line: 482, baseType: !2139, size: 8, offset: 704)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2127, file: !2128, line: 483, baseType: !2139, size: 8, offset: 712)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2127, file: !2128, line: 484, baseType: !2139, size: 8, offset: 720)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2127, file: !2128, line: 485, baseType: !2139, size: 8, offset: 728)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2127, file: !2128, line: 486, baseType: !2139, size: 8, offset: 736)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2127, file: !2128, line: 487, baseType: !2139, size: 8, offset: 744)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2127, file: !2128, line: 488, baseType: !2139, size: 8, offset: 752)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2127, file: !2128, line: 489, baseType: !2139, size: 8, offset: 760)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2127, file: !2128, line: 490, baseType: !2139, size: 8, offset: 768)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2127, file: !2128, line: 491, baseType: !2139, size: 8, offset: 776)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2127, file: !2128, line: 492, baseType: !2139, size: 8, offset: 784)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2127, file: !2128, line: 493, baseType: !2139, size: 8, offset: 792)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2127, file: !2128, line: 494, baseType: !2139, size: 8, offset: 800)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2127, file: !2128, line: 495, baseType: !2139, size: 8, offset: 808)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2127, file: !2128, line: 496, baseType: !2139, size: 8, offset: 816)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2127, file: !2128, line: 497, baseType: !2139, size: 8, offset: 824)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2127, file: !2128, line: 498, baseType: !2139, size: 8, offset: 832)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2127, file: !2128, line: 499, baseType: !2139, size: 8, offset: 840)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2127, file: !2128, line: 500, baseType: !2139, size: 8, offset: 848)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2127, file: !2128, line: 501, baseType: !2139, size: 8, offset: 856)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2127, file: !2128, line: 502, baseType: !2139, size: 8, offset: 864)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2127, file: !2128, line: 503, baseType: !2139, size: 8, offset: 872)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2127, file: !2128, line: 504, baseType: !2139, size: 8, offset: 880)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2127, file: !2128, line: 505, baseType: !2139, size: 8, offset: 888)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2127, file: !2128, line: 506, baseType: !2139, size: 8, offset: 896)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2127, file: !2128, line: 507, baseType: !2139, size: 8, offset: 904)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2127, file: !2128, line: 508, baseType: !2139, size: 8, offset: 912)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2127, file: !2128, line: 509, baseType: !2139, size: 8, offset: 920)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2127, file: !2128, line: 510, baseType: !2139, size: 8, offset: 928)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2127, file: !2128, line: 511, baseType: !2139, size: 8, offset: 936)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2127, file: !2128, line: 512, baseType: !2139, size: 8, offset: 944)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2127, file: !2128, line: 513, baseType: !2139, size: 8, offset: 952)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2127, file: !2128, line: 514, baseType: !2139, size: 8, offset: 960)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2127, file: !2128, line: 515, baseType: !2139, size: 8, offset: 968)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2127, file: !2128, line: 516, baseType: !2139, size: 8, offset: 976)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2127, file: !2128, line: 517, baseType: !2139, size: 8, offset: 984)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2127, file: !2128, line: 518, baseType: !2139, size: 8, offset: 992)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2127, file: !2128, line: 519, baseType: !2139, size: 8, offset: 1000)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2127, file: !2128, line: 520, baseType: !2139, size: 8, offset: 1008)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2127, file: !2128, line: 521, baseType: !2139, size: 8, offset: 1016)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2127, file: !2128, line: 522, baseType: !2139, size: 8, offset: 1024)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2127, file: !2128, line: 523, baseType: !2139, size: 8, offset: 1032)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2127, file: !2128, line: 524, baseType: !2139, size: 8, offset: 1040)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2127, file: !2128, line: 525, baseType: !2139, size: 8, offset: 1048)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2127, file: !2128, line: 526, baseType: !2139, size: 8, offset: 1056)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2127, file: !2128, line: 527, baseType: !2139, size: 8, offset: 1064)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2127, file: !2128, line: 528, baseType: !2139, size: 8, offset: 1072)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2127, file: !2128, line: 529, baseType: !2139, size: 8, offset: 1080)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2127, file: !2128, line: 530, baseType: !2139, size: 8, offset: 1088)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2127, file: !2128, line: 531, baseType: !2139, size: 8, offset: 1096)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2127, file: !2128, line: 532, baseType: !2139, size: 8, offset: 1104)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2127, file: !2128, line: 533, baseType: !2139, size: 8, offset: 1112)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2127, file: !2128, line: 534, baseType: !2139, size: 8, offset: 1120)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2127, file: !2128, line: 535, baseType: !2139, size: 8, offset: 1128)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2127, file: !2128, line: 536, baseType: !2139, size: 8, offset: 1136)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2127, file: !2128, line: 537, baseType: !2139, size: 8, offset: 1144)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2127, file: !2128, line: 538, baseType: !2139, size: 8, offset: 1152)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2127, file: !2128, line: 539, baseType: !2139, size: 8, offset: 1160)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2127, file: !2128, line: 540, baseType: !2139, size: 8, offset: 1168)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2127, file: !2128, line: 541, baseType: !2139, size: 8, offset: 1176)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2127, file: !2128, line: 542, baseType: !2139, size: 8, offset: 1184)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2127, file: !2128, line: 543, baseType: !2139, size: 8, offset: 1192)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2127, file: !2128, line: 544, baseType: !2139, size: 8, offset: 1200)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2127, file: !2128, line: 545, baseType: !2139, size: 8, offset: 1208)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2127, file: !2128, line: 546, baseType: !2139, size: 8, offset: 1216)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2127, file: !2128, line: 547, baseType: !2139, size: 8, offset: 1224)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2127, file: !2128, line: 548, baseType: !2139, size: 8, offset: 1232)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2127, file: !2128, line: 549, baseType: !2139, size: 8, offset: 1240)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2127, file: !2128, line: 550, baseType: !2139, size: 8, offset: 1248)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2127, file: !2128, line: 551, baseType: !2139, size: 8, offset: 1256)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2127, file: !2128, line: 552, baseType: !2139, size: 8, offset: 1264)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2127, file: !2128, line: 553, baseType: !2139, size: 8, offset: 1272)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2127, file: !2128, line: 554, baseType: !2139, size: 8, offset: 1280)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2127, file: !2128, line: 555, baseType: !2139, size: 8, offset: 1288)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2127, file: !2128, line: 556, baseType: !2139, size: 8, offset: 1296)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2127, file: !2128, line: 557, baseType: !2139, size: 8, offset: 1304)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2127, file: !2128, line: 558, baseType: !2139, size: 8, offset: 1312)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2127, file: !2128, line: 559, baseType: !2139, size: 8, offset: 1320)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2127, file: !2128, line: 560, baseType: !2139, size: 8, offset: 1328)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2127, file: !2128, line: 561, baseType: !2139, size: 8, offset: 1336)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2127, file: !2128, line: 562, baseType: !2139, size: 8, offset: 1344)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2127, file: !2128, line: 563, baseType: !2139, size: 8, offset: 1352)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2127, file: !2128, line: 564, baseType: !2139, size: 8, offset: 1360)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2127, file: !2128, line: 565, baseType: !2139, size: 8, offset: 1368)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2127, file: !2128, line: 566, baseType: !2139, size: 8, offset: 1376)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2127, file: !2128, line: 567, baseType: !2139, size: 8, offset: 1384)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2127, file: !2128, line: 568, baseType: !2139, size: 8, offset: 1392)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2127, file: !2128, line: 569, baseType: !2139, size: 8, offset: 1400)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2127, file: !2128, line: 570, baseType: !2139, size: 8, offset: 1408)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2127, file: !2128, line: 571, baseType: !2139, size: 8, offset: 1416)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2127, file: !2128, line: 572, baseType: !2139, size: 8, offset: 1424)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2127, file: !2128, line: 573, baseType: !2139, size: 8, offset: 1432)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2127, file: !2128, line: 574, baseType: !2139, size: 8, offset: 1440)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1136, file: !160, line: 3405, baseType: !2295, size: 384)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !160, line: 3352, size: 384, elements: !2296)
!2296 = !{!2297, !2298}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2295, file: !160, line: 3353, baseType: !1172, size: 192)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2295, file: !160, line: 3356, baseType: !2299, size: 192, offset: 192)
!2299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2128, line: 578, size: 192, elements: !2300)
!2300 = !{!2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311}
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2299, file: !2128, line: 580, baseType: !1006, size: 32)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2299, file: !2128, line: 581, baseType: !1006, size: 32, offset: 32)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2299, file: !2128, line: 582, baseType: !1006, size: 32, offset: 64)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2299, file: !2128, line: 583, baseType: !1006, size: 32, offset: 96)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2299, file: !2128, line: 584, baseType: !136, size: 8, offset: 128)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2299, file: !2128, line: 585, baseType: !136, size: 8, offset: 136)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2299, file: !2128, line: 586, baseType: !136, size: 8, offset: 144)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2299, file: !2128, line: 587, baseType: !136, size: 8, offset: 152)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2299, file: !2128, line: 588, baseType: !136, size: 8, offset: 160)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2299, file: !2128, line: 589, baseType: !136, size: 8, offset: 168)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2299, file: !2128, line: 590, baseType: !136, size: 8, offset: 176)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1036, file: !426, line: 178, baseType: !1400, size: 64)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1036, file: !426, line: 179, baseType: !2314, size: 64)
!2314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2315, size: 64)
!2315 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !426, line: 150, baseType: !2316)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !426, line: 142, size: 320, elements: !2317)
!2317 = !{!2318, !2319, !2320, !2321, !2322, !2323}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2316, file: !426, line: 144, baseType: !1134, size: 64)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2316, file: !426, line: 145, baseType: !1015, size: 64, offset: 64)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2316, file: !426, line: 146, baseType: !1015, size: 64, offset: 128)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2316, file: !426, line: 147, baseType: !1987, size: 32, offset: 192)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2316, file: !426, line: 148, baseType: !6, size: 32, offset: 224)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2316, file: !426, line: 149, baseType: !136, size: 8, offset: 256)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1036, file: !426, line: 180, baseType: !2325, size: 64)
!2325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2326, size: 64)
!2326 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !426, line: 162, baseType: !2327)
!2327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !426, line: 159, size: 128, elements: !2328)
!2328 = !{!2329, !2330}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2327, file: !426, line: 160, baseType: !1134, size: 64)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2327, file: !426, line: 161, baseType: !7, size: 64, offset: 64)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1036, file: !426, line: 181, baseType: !2332, size: 64)
!2332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2333, size: 64)
!2333 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !426, line: 181, flags: DIFlagFwdDecl)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1031, file: !426, line: 317, baseType: !2335, size: 64)
!2335 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1053)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1031, file: !426, line: 318, baseType: !2337, size: 320)
!2337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !426, line: 188, size: 320, elements: !2338)
!2338 = !{!2339, !2341, !2396}
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2337, file: !426, line: 190, baseType: !2340, size: 192)
!2340 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1035, size: 192, elements: !1205)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2337, file: !426, line: 193, baseType: !2342, size: 64, offset: 192)
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2343, size: 64)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !426, line: 206, size: 320, elements: !2344)
!2344 = !{!2345, !2381, !2382, !2383, !2395}
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2343, file: !426, line: 208, baseType: !2346, size: 64)
!2346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2347, size: 64)
!2347 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1016, line: 62, baseType: !2348)
!2348 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2349, line: 538, size: 256, elements: !2350)
!2349 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2350 = !{!2351, !2355, !2361, !2372}
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2348, file: !2349, line: 539, baseType: !2352, size: 32)
!2352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2349, line: 482, size: 32, elements: !2353)
!2353 = !{!2354}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2352, file: !2349, line: 484, baseType: !6, size: 32)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2348, file: !2349, line: 540, baseType: !2356, size: 192)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2349, line: 488, size: 192, elements: !2357)
!2357 = !{!2358, !2359, !2360}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2356, file: !2349, line: 489, baseType: !2352, size: 32)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2356, file: !2349, line: 492, baseType: !1041, size: 64, offset: 64)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2356, file: !2349, line: 496, baseType: !1134, size: 64, offset: 128)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2348, file: !2349, line: 541, baseType: !2362, size: 256)
!2362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2349, line: 504, size: 256, elements: !2363)
!2363 = !{!2364, !2365, !2370, !2371}
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2362, file: !2349, line: 505, baseType: !2352, size: 32)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2362, file: !2349, line: 509, baseType: !2366, size: 64, offset: 64)
!2366 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2349, line: 501, baseType: !2367)
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2368, size: 64)
!2368 = !DISubroutineType(types: !2369)
!2369 = !{null, !1777}
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2362, file: !2349, line: 510, baseType: !1777, size: 64, offset: 128)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2362, file: !2349, line: 513, baseType: !2346, size: 64, offset: 192)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2348, file: !2349, line: 542, baseType: !2373, size: 128)
!2373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2349, line: 530, size: 128, elements: !2374)
!2374 = !{!2375, !2376}
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2373, file: !2349, line: 531, baseType: !2352, size: 32)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2373, file: !2349, line: 534, baseType: !2377, size: 64, offset: 64)
!2377 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2349, line: 525, baseType: !2378)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{!136, !1134, !1041, !1088, !1088}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2343, file: !426, line: 211, baseType: !6, size: 32, offset: 64)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2343, file: !426, line: 214, baseType: !7, size: 64, offset: 128)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2343, file: !426, line: 224, baseType: !2384, size: 64, offset: 192)
!2384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2385, size: 64)
!2385 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !426, line: 202, baseType: !2386)
!2386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !426, line: 202, size: 128, elements: !2387)
!2387 = !{!2388}
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2386, file: !426, line: 202, baseType: !2389, size: 128)
!2389 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !426, line: 200, baseType: !2390)
!2390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !426, line: 200, size: 128, elements: !2391)
!2391 = !{!2392, !2393, !2394}
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2390, file: !426, line: 200, baseType: !6, size: 32)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2390, file: !426, line: 200, baseType: !6, size: 32, offset: 32)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2390, file: !426, line: 200, baseType: !1052, size: 64, offset: 64)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2343, file: !426, line: 234, baseType: !2384, size: 64, offset: 256)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2337, file: !426, line: 197, baseType: !7, size: 64, offset: 256)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1031, file: !426, line: 319, baseType: !1194, size: 256)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1031, file: !426, line: 320, baseType: !1213, size: 192)
!2399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2400, size: 64)
!2400 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1438)
!2401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2402, size: 64)
!2402 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1010)
!2403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2404, size: 64)
!2404 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sbitmap_heap", file: !3, line: 3039, baseType: !2405)
!2405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sbitmap_heap", file: !3, line: 3039, size: 128, elements: !2406)
!2406 = !{!2407}
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2405, file: !3, line: 3039, baseType: !2408, size: 128)
!2408 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sbitmap_base", file: !3, line: 3038, baseType: !2409)
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sbitmap_base", file: !3, line: 3038, size: 128, elements: !2410)
!2410 = !{!2411, !2412, !2413}
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2409, file: !3, line: 3038, baseType: !6, size: 32)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2409, file: !3, line: 3038, baseType: !6, size: 32, offset: 32)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2409, file: !3, line: 3038, baseType: !2414, size: 64, offset: 64)
!2414 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2415, size: 64, elements: !1053)
!2415 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2416, line: 45, baseType: !2417)
!2416 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2418, size: 64)
!2418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2416, line: 39, size: 192, elements: !2419)
!2419 = !{!2420, !2422, !2423, !2424}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2418, file: !2416, line: 41, baseType: !2421, size: 64)
!2421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !136, size: 64)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2418, file: !2416, line: 42, baseType: !6, size: 32, offset: 64)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2418, file: !2416, line: 43, baseType: !6, size: 32, offset: 96)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2418, file: !2416, line: 44, baseType: !2425, size: 64, offset: 128)
!2425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1088, size: 64, elements: !1053)
!2426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2427, size: 64)
!2427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "version_info", file: !3, line: 117, size: 256, elements: !2428)
!2428 = !{!2429, !2430, !2441, !2442, !2443}
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2427, file: !3, line: 119, baseType: !1134, size: 64)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "iv", scope: !2427, file: !3, line: 120, baseType: !2431, size: 64, offset: 64)
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iv", file: !3, line: 105, size: 320, elements: !2433)
!2433 = !{!2434, !2435, !2436, !2437, !2438, !2439, !2440}
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2432, file: !3, line: 107, baseType: !1134, size: 64)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2432, file: !3, line: 108, baseType: !1134, size: 64, offset: 64)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2432, file: !3, line: 109, baseType: !1134, size: 64, offset: 128)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2432, file: !3, line: 110, baseType: !1134, size: 64, offset: 192)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "biv_p", scope: !2432, file: !3, line: 111, baseType: !136, size: 8, offset: 256)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "have_use_for", scope: !2432, file: !3, line: 112, baseType: !136, size: 8, offset: 264)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "use_id", scope: !2432, file: !3, line: 113, baseType: !6, size: 32, offset: 288)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlin_use", scope: !2427, file: !3, line: 121, baseType: !136, size: 8, offset: 128)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "inv_id", scope: !2427, file: !3, line: 123, baseType: !6, size: 32, offset: 160)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_biv", scope: !2427, file: !3, line: 124, baseType: !136, size: 8, offset: 192)
!2444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2445, size: 64)
!2445 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_iv_use_p_heap", file: !3, line: 216, baseType: !2446)
!2446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_iv_use_p_heap", file: !3, line: 216, size: 128, elements: !2447)
!2447 = !{!2448}
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2446, file: !3, line: 216, baseType: !2449, size: 128)
!2449 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_iv_use_p_base", file: !3, line: 215, baseType: !2450)
!2450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_iv_use_p_base", file: !3, line: 215, size: 128, elements: !2451)
!2451 = !{!2452, !2453, !2454}
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2450, file: !3, line: 215, baseType: !6, size: 32)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2450, file: !3, line: 215, baseType: !6, size: 32, offset: 32)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2450, file: !3, line: 215, baseType: !2455, size: 64, offset: 64)
!2455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2456, size: 64, elements: !1053)
!2456 = !DIDerivedType(tag: DW_TAG_typedef, name: "iv_use_p", file: !3, line: 214, baseType: !2457)
!2457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2458, size: 64)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iv_use", file: !3, line: 161, size: 512, elements: !2459)
!2459 = !{!2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2494}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2458, file: !3, line: 163, baseType: !6, size: 32)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2458, file: !3, line: 164, baseType: !395, size: 32, offset: 32)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "iv", scope: !2458, file: !3, line: 165, baseType: !2431, size: 64, offset: 64)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2458, file: !3, line: 166, baseType: !1436, size: 64, offset: 128)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "op_p", scope: !2458, file: !3, line: 167, baseType: !1470, size: 64, offset: 192)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "related_cands", scope: !2458, file: !3, line: 168, baseType: !1852, size: 64, offset: 256)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "n_map_members", scope: !2458, file: !3, line: 171, baseType: !6, size: 32, offset: 320)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "cost_map", scope: !2458, file: !3, line: 172, baseType: !2468, size: 64, offset: 384)
!2468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2469, size: 64)
!2469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cost_pair", file: !3, line: 149, size: 256, elements: !2470)
!2470 = !{!2471, !2486, !2492, !2493}
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "cand", scope: !2469, file: !3, line: 151, baseType: !2472, size: 64)
!2472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2473, size: 64)
!2473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iv_cand", file: !3, line: 190, size: 576, elements: !2474)
!2474 = !{!2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485}
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2473, file: !3, line: 192, baseType: !6, size: 32)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "important", scope: !2473, file: !3, line: 193, baseType: !136, size: 8, offset: 32)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !2473, file: !3, line: 195, baseType: !400, size: 32, offset: 64)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "incremented_at", scope: !2473, file: !3, line: 196, baseType: !1436, size: 64, offset: 128)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "var_before", scope: !2473, file: !3, line: 198, baseType: !1134, size: 64, offset: 192)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "var_after", scope: !2473, file: !3, line: 199, baseType: !1134, size: 64, offset: 256)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "iv", scope: !2473, file: !3, line: 200, baseType: !2431, size: 64, offset: 320)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2473, file: !3, line: 204, baseType: !6, size: 32, offset: 384)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "cost_step", scope: !2473, file: !3, line: 205, baseType: !6, size: 32, offset: 416)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "ainc_use", scope: !2473, file: !3, line: 206, baseType: !2457, size: 64, offset: 448)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "depends_on", scope: !2473, file: !3, line: 208, baseType: !1852, size: 64, offset: 512)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2469, file: !3, line: 152, baseType: !2487, size: 64, offset: 64)
!2487 = !DIDerivedType(tag: DW_TAG_typedef, name: "comp_cost", file: !3, line: 143, baseType: !2488)
!2488 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 136, size: 64, elements: !2489)
!2489 = !{!2490, !2491}
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2488, file: !3, line: 138, baseType: !1006, size: 32)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "complexity", scope: !2488, file: !3, line: 139, baseType: !6, size: 32, offset: 32)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "depends_on", scope: !2469, file: !3, line: 153, baseType: !1852, size: 64, offset: 128)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2469, file: !3, line: 155, baseType: !1134, size: 64, offset: 192)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "selected", scope: !2458, file: !3, line: 175, baseType: !2472, size: 64, offset: 448)
!2495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2496, size: 64)
!2496 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_iv_cand_p_heap", file: !3, line: 220, baseType: !2497)
!2497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_iv_cand_p_heap", file: !3, line: 220, size: 128, elements: !2498)
!2498 = !{!2499}
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2497, file: !3, line: 220, baseType: !2500, size: 128)
!2500 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_iv_cand_p_base", file: !3, line: 219, baseType: !2501)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_iv_cand_p_base", file: !3, line: 219, size: 128, elements: !2502)
!2502 = !{!2503, !2504, !2505}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2501, file: !3, line: 219, baseType: !6, size: 32)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2501, file: !3, line: 219, baseType: !6, size: 32, offset: 32)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2501, file: !3, line: 219, baseType: !2506, size: 64, offset: 64)
!2506 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2507, size: 64, elements: !1053)
!2507 = !DIDerivedType(tag: DW_TAG_typedef, name: "iv_cand_p", file: !3, line: 218, baseType: !2472)
!2508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2509, size: 64)
!2509 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !160, line: 184, baseType: !2510)
!2510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !160, line: 184, size: 128, elements: !2511)
!2511 = !{!2512}
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2510, file: !160, line: 184, baseType: !1834, size: 128)
!2513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2514, size: 64)
!2514 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2515, line: 32, baseType: !2516)
!2515 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2515, line: 32, size: 96, elements: !2517)
!2517 = !{!2518}
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2516, file: !2515, line: 32, baseType: !2519, size: 96)
!2519 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2515, line: 31, baseType: !2520)
!2520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2515, line: 31, size: 96, elements: !2521)
!2521 = !{!2522, !2523, !2524}
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2520, file: !2515, line: 31, baseType: !6, size: 32)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2520, file: !2515, line: 31, baseType: !6, size: 32, offset: 32)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2520, file: !2515, line: 31, baseType: !2525, size: 32, offset: 64)
!2525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1006, size: 32, elements: !1053)
!2526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2527, size: 64)
!2527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ifs_ivopts_data", file: !3, line: 1343, size: 192, elements: !2528)
!2528 = !{!2529, !2545, !2546}
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "ivopts_data", scope: !2527, file: !3, line: 1345, baseType: !2530, size: 64)
!2530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2531, size: 64)
!2531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ivopts_data", file: !3, line: 222, size: 576, elements: !2532)
!2532 = !{!2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544}
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "current_loop", scope: !2531, file: !3, line: 225, baseType: !1651, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "niters", scope: !2531, file: !3, line: 228, baseType: !1855, size: 64, offset: 64)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "regs_used", scope: !2531, file: !3, line: 231, baseType: !6, size: 32, offset: 128)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "version_info_size", scope: !2531, file: !3, line: 234, baseType: !6, size: 32, offset: 160)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "version_info", scope: !2531, file: !3, line: 237, baseType: !2426, size: 64, offset: 192)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "relevant", scope: !2531, file: !3, line: 240, baseType: !1852, size: 64, offset: 256)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "iv_uses", scope: !2531, file: !3, line: 243, baseType: !2444, size: 64, offset: 320)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "iv_candidates", scope: !2531, file: !3, line: 246, baseType: !2495, size: 64, offset: 384)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "important_candidates", scope: !2531, file: !3, line: 249, baseType: !1852, size: 64, offset: 448)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "max_inv_id", scope: !2531, file: !3, line: 252, baseType: !6, size: 32, offset: 512)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "consider_all_candidates", scope: !2531, file: !3, line: 256, baseType: !136, size: 8, offset: 544)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "speed", scope: !2531, file: !3, line: 259, baseType: !136, size: 8, offset: 552)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2527, file: !3, line: 1346, baseType: !1436, size: 64, offset: 64)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2527, file: !3, line: 1347, baseType: !1134, size: 64, offset: 128)
!2547 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !917, line: 30, baseType: !2548)
!2548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2549, size: 64)
!2549 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !160, line: 1893, baseType: !1477)
!2550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1852, size: 64)
!2551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2552, size: 64)
!2552 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1136)
!2553 = !DIDerivedType(tag: DW_TAG_typedef, name: "address_cost_data", file: !3, line: 3108, baseType: !2554)
!2554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2555, size: 64)
!2555 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 3104, size: 640, elements: !2556)
!2556 = !{!2557, !2558, !2559}
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "min_offset", scope: !2555, file: !3, line: 3106, baseType: !7, size: 64)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "max_offset", scope: !2555, file: !3, line: 3106, baseType: !7, size: 64, offset: 64)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "costs", scope: !2555, file: !3, line: 3107, baseType: !2560, size: 512, offset: 128)
!2560 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 512, elements: !2561)
!2561 = !{!1090, !1090, !1090, !1090}
!2562 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2564, size: 64)
!2564 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_address_cost_data_heap", file: !3, line: 3111, baseType: !2565)
!2565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_address_cost_data_heap", file: !3, line: 3111, size: 128, elements: !2566)
!2566 = !{!2567}
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2565, file: !3, line: 3111, baseType: !2568, size: 128)
!2568 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_address_cost_data_base", file: !3, line: 3110, baseType: !2569)
!2569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_address_cost_data_base", file: !3, line: 3110, size: 128, elements: !2570)
!2570 = !{!2571, !2572, !2573}
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2569, file: !3, line: 3110, baseType: !6, size: 32)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2569, file: !3, line: 3110, baseType: !6, size: 32, offset: 32)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2569, file: !3, line: 3110, baseType: !2574, size: 64, offset: 64)
!2574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2553, size: 64, elements: !1053)
!2575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1006, size: 64)
!2576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2577, size: 64)
!2577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iv_ca", file: !3, line: 264, size: 576, elements: !2578)
!2578 = !{!2579, !2580, !2581, !2583, !2585, !2586, !2587, !2588, !2589, !2590, !2591}
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "upto", scope: !2577, file: !3, line: 267, baseType: !6, size: 32)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "bad_uses", scope: !2577, file: !3, line: 270, baseType: !6, size: 32, offset: 32)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "cand_for_use", scope: !2577, file: !3, line: 273, baseType: !2582, size: 64, offset: 64)
!2582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2468, size: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "n_cand_uses", scope: !2577, file: !3, line: 276, baseType: !2584, size: 64, offset: 128)
!2584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "cands", scope: !2577, file: !3, line: 279, baseType: !1852, size: 64, offset: 192)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "n_cands", scope: !2577, file: !3, line: 282, baseType: !6, size: 32, offset: 256)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "n_regs", scope: !2577, file: !3, line: 285, baseType: !6, size: 32, offset: 288)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "cand_use_cost", scope: !2577, file: !3, line: 288, baseType: !2487, size: 64, offset: 320)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "cand_cost", scope: !2577, file: !3, line: 291, baseType: !6, size: 32, offset: 384)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "n_invariant_uses", scope: !2577, file: !3, line: 294, baseType: !2584, size: 64, offset: 448)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2577, file: !3, line: 297, baseType: !2487, size: 64, offset: 512)
!2592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2593, size: 64)
!2593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iv_ca_delta", file: !3, line: 302, size: 256, elements: !2594)
!2594 = !{!2595, !2596, !2597, !2598}
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2593, file: !3, line: 305, baseType: !2457, size: 64)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "old_cp", scope: !2593, file: !3, line: 308, baseType: !2468, size: 64, offset: 64)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "new_cp", scope: !2593, file: !3, line: 311, baseType: !2468, size: 64, offset: 128)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "next_change", scope: !2593, file: !3, line: 314, baseType: !2592, size: 64, offset: 192)
!2599 = !{!0, !2600, !2607, !2609, !2616, !2618, !2620, !2623, !2625, !2630, !2632, !2634, !2636, !2644, !2649, !2652, !2654, !2656}
!2600 = !DIGlobalVariableExpression(var: !2601, expr: !DIExpression())
!2601 = distinct !DIGlobalVariable(name: "valid_mult_list", scope: !2602, file: !3, line: 3047, type: !2403, isLocal: true, isDefinition: true)
!2602 = distinct !DISubprogram(name: "multiplier_allowed_in_address_p", scope: !3, file: !3, line: 3042, type: !2603, scopeLine: 3044, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2603 = !DISubroutineType(types: !2604)
!2604 = !{!136, !7, !8, !2605}
!2605 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_space_t", file: !1016, line: 73, baseType: !136)
!2606 = !{}
!2607 = !DIGlobalVariableExpression(var: !2608, expr: !DIExpression())
!2608 = distinct !DIGlobalVariable(name: "decl_rtl_to_reset", scope: !137, file: !3, line: 337, type: !2508, isLocal: true, isDefinition: true)
!2609 = !DIGlobalVariableExpression(var: !2610, expr: !DIExpression())
!2610 = distinct !DIGlobalVariable(name: "const_iv", scope: !2611, file: !3, line: 1208, type: !2432, isLocal: true, isDefinition: true)
!2611 = distinct !DISubprogram(name: "extract_cond_operands", scope: !3, file: !3, line: 1203, type: !2612, scopeLine: 1206, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2612 = !DISubroutineType(types: !2613)
!2613 = !{!136, !2530, !1436, !2614, !2614, !2615, !2615}
!2614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1470, size: 64)
!2615 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2431, size: 64)
!2616 = !DIGlobalVariableExpression(var: !2617, expr: !DIExpression())
!2617 = distinct !DIGlobalVariable(name: "zero", scope: !2611, file: !3, line: 1209, type: !1134, isLocal: true, isDefinition: true)
!2618 = !DIGlobalVariableExpression(var: !2619, expr: !DIExpression())
!2619 = distinct !DIGlobalVariable(name: "fd_ivopts_data", scope: !137, file: !3, line: 2073, type: !2530, isLocal: true, isDefinition: true)
!2620 = !DIGlobalVariableExpression(var: !2621, expr: !DIExpression())
!2621 = distinct !DIGlobalVariable(name: "infinite_cost", scope: !137, file: !3, line: 146, type: !2622, isLocal: true, isDefinition: true)
!2622 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2487)
!2623 = !DIGlobalVariableExpression(var: !2624, expr: !DIExpression())
!2624 = distinct !DIGlobalVariable(name: "zero_cost", scope: !137, file: !3, line: 145, type: !2622, isLocal: true, isDefinition: true)
!2625 = !DIGlobalVariableExpression(var: !2626, expr: !DIExpression())
!2626 = distinct !DIGlobalVariable(name: "costs_initialized", scope: !2627, file: !3, line: 3383, type: !136, isLocal: true, isDefinition: true)
!2627 = distinct !DISubprogram(name: "force_expr_to_var_cost", scope: !3, file: !3, line: 3381, type: !2628, scopeLine: 3382, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2628 = !DISubroutineType(types: !2629)
!2629 = !{!2487, !1134, !136}
!2630 = !DIGlobalVariableExpression(var: !2631, expr: !DIExpression())
!2631 = distinct !DIGlobalVariable(name: "integer_cost", scope: !2627, file: !3, line: 3384, type: !1758, isLocal: true, isDefinition: true)
!2632 = !DIGlobalVariableExpression(var: !2633, expr: !DIExpression())
!2633 = distinct !DIGlobalVariable(name: "symbol_cost", scope: !2627, file: !3, line: 3385, type: !1758, isLocal: true, isDefinition: true)
!2634 = !DIGlobalVariableExpression(var: !2635, expr: !DIExpression())
!2635 = distinct !DIGlobalVariable(name: "address_cost", scope: !2627, file: !3, line: 3386, type: !1758, isLocal: true, isDefinition: true)
!2636 = !DIGlobalVariableExpression(var: !2637, expr: !DIExpression())
!2637 = distinct !DIGlobalVariable(name: "costs", scope: !2638, file: !3, line: 2937, type: !2641, isLocal: true, isDefinition: true)
!2638 = distinct !DISubprogram(name: "add_cost", scope: !3, file: !3, line: 2935, type: !2639, scopeLine: 2936, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2639 = !DISubroutineType(types: !2640)
!2640 = !{!6, !8, !136}
!2641 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 2784, elements: !2642)
!2642 = !{!2643}
!2643 = !DISubrange(count: 87)
!2644 = !DIGlobalVariableExpression(var: !2645, expr: !DIExpression())
!2645 = distinct !DIGlobalVariable(name: "address_cost_data_list", scope: !2646, file: !3, line: 3121, type: !2563, isLocal: true, isDefinition: true)
!2646 = distinct !DISubprogram(name: "get_address_cost", scope: !3, file: !3, line: 3114, type: !2647, scopeLine: 3119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2647 = !DISubroutineType(types: !2648)
!2648 = !{!2487, !136, !136, !1088, !7, !7, !8, !2605, !136, !136, !2421}
!2649 = !DIGlobalVariableExpression(var: !2650, expr: !DIExpression())
!2650 = distinct !DIGlobalVariable(name: "has_preinc", scope: !2646, file: !3, line: 3124, type: !2651, isLocal: true, isDefinition: true)
!2651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !136, size: 696, elements: !2642)
!2652 = !DIGlobalVariableExpression(var: !2653, expr: !DIExpression())
!2653 = distinct !DIGlobalVariable(name: "has_postinc", scope: !2646, file: !3, line: 3124, type: !2651, isLocal: true, isDefinition: true)
!2654 = !DIGlobalVariableExpression(var: !2655, expr: !DIExpression())
!2655 = distinct !DIGlobalVariable(name: "has_predec", scope: !2646, file: !3, line: 3125, type: !2651, isLocal: true, isDefinition: true)
!2656 = !DIGlobalVariableExpression(var: !2657, expr: !DIExpression())
!2657 = distinct !DIGlobalVariable(name: "has_postdec", scope: !2646, file: !3, line: 3125, type: !2651, isLocal: true, isDefinition: true)
!2658 = !{i32 7, !"Dwarf Version", i32 4}
!2659 = !{i32 2, !"Debug Info Version", i32 3}
!2660 = !{i32 1, !"wchar_size", i32 4}
!2661 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2662 = distinct !DISubprogram(name: "single_dom_exit", scope: !3, file: !3, line: 374, type: !2663, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2663 = !DISubroutineType(types: !2664)
!2664 = !{!1416, !1651}
!2665 = !DILocalVariable(name: "loop", arg: 1, scope: !2662, file: !3, line: 374, type: !1651)
!2666 = !DILocation(line: 374, column: 31, scope: !2662)
!2667 = !DILocalVariable(name: "exit", scope: !2662, file: !3, line: 376, type: !1416)
!2668 = !DILocation(line: 376, column: 8, scope: !2662)
!2669 = !DILocation(line: 376, column: 28, scope: !2662)
!2670 = !DILocation(line: 376, column: 15, scope: !2662)
!2671 = !DILocation(line: 378, column: 8, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2662, file: !3, line: 378, column: 7)
!2673 = !DILocation(line: 378, column: 7, scope: !2662)
!2674 = !DILocation(line: 379, column: 5, scope: !2672)
!2675 = !DILocation(line: 381, column: 36, scope: !2676)
!2676 = distinct !DILexicalBlock(scope: !2662, file: !3, line: 381, column: 7)
!2677 = !DILocation(line: 381, column: 42, scope: !2676)
!2678 = !DILocation(line: 381, column: 48, scope: !2676)
!2679 = !DILocation(line: 381, column: 8, scope: !2676)
!2680 = !DILocation(line: 381, column: 7, scope: !2662)
!2681 = !DILocation(line: 382, column: 5, scope: !2676)
!2682 = !DILocation(line: 384, column: 10, scope: !2662)
!2683 = !DILocation(line: 384, column: 3, scope: !2662)
!2684 = !DILocation(line: 385, column: 1, scope: !2662)
!2685 = distinct !DISubprogram(name: "dump_iv", scope: !3, file: !3, line: 391, type: !2686, scopeLine: 392, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2686 = !DISubroutineType(types: !2687)
!2687 = !{null, !2688, !2431}
!2688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2689, size: 64)
!2689 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2690, line: 7, baseType: !2691)
!2690 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2692, line: 49, size: 1728, elements: !2693)
!2692 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2693 = !{!2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2709, !2711, !2712, !2713, !2716, !2717, !2718, !2719, !2722, !2724, !2727, !2730, !2731, !2732, !2733, !2734}
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2691, file: !2692, line: 51, baseType: !1006, size: 32)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2691, file: !2692, line: 54, baseType: !1110, size: 64, offset: 64)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2691, file: !2692, line: 55, baseType: !1110, size: 64, offset: 128)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2691, file: !2692, line: 56, baseType: !1110, size: 64, offset: 192)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2691, file: !2692, line: 57, baseType: !1110, size: 64, offset: 256)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2691, file: !2692, line: 58, baseType: !1110, size: 64, offset: 320)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2691, file: !2692, line: 59, baseType: !1110, size: 64, offset: 384)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2691, file: !2692, line: 60, baseType: !1110, size: 64, offset: 448)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2691, file: !2692, line: 61, baseType: !1110, size: 64, offset: 512)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2691, file: !2692, line: 64, baseType: !1110, size: 64, offset: 576)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2691, file: !2692, line: 65, baseType: !1110, size: 64, offset: 640)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2691, file: !2692, line: 66, baseType: !1110, size: 64, offset: 704)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2691, file: !2692, line: 68, baseType: !2707, size: 64, offset: 768)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2692, line: 36, flags: DIFlagFwdDecl)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2691, file: !2692, line: 70, baseType: !2710, size: 64, offset: 832)
!2710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2691, size: 64)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2691, file: !2692, line: 72, baseType: !1006, size: 32, offset: 896)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2691, file: !2692, line: 73, baseType: !1006, size: 32, offset: 928)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2691, file: !2692, line: 74, baseType: !2714, size: 64, offset: 960)
!2714 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2715, line: 152, baseType: !7)
!2715 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2691, file: !2692, line: 77, baseType: !2562, size: 16, offset: 1024)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2691, file: !2692, line: 78, baseType: !2139, size: 8, offset: 1040)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2691, file: !2692, line: 79, baseType: !1229, size: 8, offset: 1048)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2691, file: !2692, line: 81, baseType: !2720, size: 64, offset: 1088)
!2720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2721, size: 64)
!2721 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2692, line: 43, baseType: null)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2691, file: !2692, line: 89, baseType: !2723, size: 64, offset: 1152)
!2723 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2715, line: 153, baseType: !7)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2691, file: !2692, line: 91, baseType: !2725, size: 64, offset: 1216)
!2725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2726, size: 64)
!2726 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2692, line: 37, flags: DIFlagFwdDecl)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2691, file: !2692, line: 92, baseType: !2728, size: 64, offset: 1280)
!2728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2729, size: 64)
!2729 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2692, line: 38, flags: DIFlagFwdDecl)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2691, file: !2692, line: 93, baseType: !2710, size: 64, offset: 1344)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2691, file: !2692, line: 94, baseType: !1007, size: 64, offset: 1408)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2691, file: !2692, line: 95, baseType: !1581, size: 64, offset: 1472)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2691, file: !2692, line: 96, baseType: !1006, size: 32, offset: 1536)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2691, file: !2692, line: 98, baseType: !2735, size: 160, offset: 1568)
!2735 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1043, size: 160, elements: !2736)
!2736 = !{!2737}
!2737 = !DISubrange(count: 20)
!2738 = !DILocalVariable(name: "file", arg: 1, scope: !2685, file: !3, line: 391, type: !2688)
!2739 = !DILocation(line: 391, column: 16, scope: !2685)
!2740 = !DILocalVariable(name: "iv", arg: 2, scope: !2685, file: !3, line: 391, type: !2431)
!2741 = !DILocation(line: 391, column: 33, scope: !2685)
!2742 = !DILocation(line: 393, column: 7, scope: !2743)
!2743 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 393, column: 7)
!2744 = !DILocation(line: 393, column: 11, scope: !2743)
!2745 = !DILocation(line: 393, column: 7, scope: !2685)
!2746 = !DILocation(line: 395, column: 16, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2743, file: !3, line: 394, column: 5)
!2748 = !DILocation(line: 395, column: 7, scope: !2747)
!2749 = !DILocation(line: 396, column: 27, scope: !2747)
!2750 = !DILocation(line: 396, column: 33, scope: !2747)
!2751 = !DILocation(line: 396, column: 37, scope: !2747)
!2752 = !DILocation(line: 396, column: 7, scope: !2747)
!2753 = !DILocation(line: 397, column: 16, scope: !2747)
!2754 = !DILocation(line: 397, column: 7, scope: !2747)
!2755 = !DILocation(line: 398, column: 5, scope: !2747)
!2756 = !DILocation(line: 400, column: 12, scope: !2685)
!2757 = !DILocation(line: 400, column: 3, scope: !2685)
!2758 = !DILocation(line: 401, column: 23, scope: !2685)
!2759 = !DILocation(line: 401, column: 29, scope: !2685)
!2760 = !DILocation(line: 401, column: 3, scope: !2685)
!2761 = !DILocation(line: 402, column: 12, scope: !2685)
!2762 = !DILocation(line: 402, column: 3, scope: !2685)
!2763 = !DILocation(line: 404, column: 7, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 404, column: 7)
!2765 = !DILocation(line: 404, column: 11, scope: !2764)
!2766 = !DILocation(line: 404, column: 7, scope: !2685)
!2767 = !DILocation(line: 406, column: 16, scope: !2768)
!2768 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 405, column: 5)
!2769 = !DILocation(line: 406, column: 7, scope: !2768)
!2770 = !DILocation(line: 407, column: 27, scope: !2768)
!2771 = !DILocation(line: 407, column: 33, scope: !2768)
!2772 = !DILocation(line: 407, column: 37, scope: !2768)
!2773 = !DILocation(line: 407, column: 7, scope: !2768)
!2774 = !DILocation(line: 408, column: 16, scope: !2768)
!2775 = !DILocation(line: 408, column: 7, scope: !2768)
!2776 = !DILocation(line: 410, column: 16, scope: !2768)
!2777 = !DILocation(line: 410, column: 7, scope: !2768)
!2778 = !DILocation(line: 411, column: 27, scope: !2768)
!2779 = !DILocation(line: 411, column: 33, scope: !2768)
!2780 = !DILocation(line: 411, column: 37, scope: !2768)
!2781 = !DILocation(line: 411, column: 7, scope: !2768)
!2782 = !DILocation(line: 412, column: 16, scope: !2768)
!2783 = !DILocation(line: 412, column: 7, scope: !2768)
!2784 = !DILocation(line: 413, column: 5, scope: !2768)
!2785 = !DILocation(line: 416, column: 16, scope: !2786)
!2786 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 415, column: 5)
!2787 = !DILocation(line: 416, column: 7, scope: !2786)
!2788 = !DILocation(line: 417, column: 27, scope: !2786)
!2789 = !DILocation(line: 417, column: 33, scope: !2786)
!2790 = !DILocation(line: 417, column: 37, scope: !2786)
!2791 = !DILocation(line: 417, column: 7, scope: !2786)
!2792 = !DILocation(line: 418, column: 16, scope: !2786)
!2793 = !DILocation(line: 418, column: 7, scope: !2786)
!2794 = !DILocation(line: 421, column: 7, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 421, column: 7)
!2796 = !DILocation(line: 421, column: 11, scope: !2795)
!2797 = !DILocation(line: 421, column: 7, scope: !2685)
!2798 = !DILocation(line: 423, column: 16, scope: !2799)
!2799 = distinct !DILexicalBlock(scope: !2795, file: !3, line: 422, column: 5)
!2800 = !DILocation(line: 423, column: 7, scope: !2799)
!2801 = !DILocation(line: 424, column: 27, scope: !2799)
!2802 = !DILocation(line: 424, column: 33, scope: !2799)
!2803 = !DILocation(line: 424, column: 37, scope: !2799)
!2804 = !DILocation(line: 424, column: 7, scope: !2799)
!2805 = !DILocation(line: 425, column: 16, scope: !2799)
!2806 = !DILocation(line: 425, column: 7, scope: !2799)
!2807 = !DILocation(line: 426, column: 5, scope: !2799)
!2808 = !DILocation(line: 428, column: 7, scope: !2809)
!2809 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 428, column: 7)
!2810 = !DILocation(line: 428, column: 11, scope: !2809)
!2811 = !DILocation(line: 428, column: 7, scope: !2685)
!2812 = !DILocation(line: 429, column: 14, scope: !2809)
!2813 = !DILocation(line: 429, column: 5, scope: !2809)
!2814 = !DILocation(line: 430, column: 1, scope: !2685)
!2815 = distinct !DISubprogram(name: "dump_use", scope: !3, file: !3, line: 436, type: !2816, scopeLine: 437, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{null, !2688, !2457}
!2818 = !DILocalVariable(name: "file", arg: 1, scope: !2815, file: !3, line: 436, type: !2688)
!2819 = !DILocation(line: 436, column: 17, scope: !2815)
!2820 = !DILocalVariable(name: "use", arg: 2, scope: !2815, file: !3, line: 436, type: !2457)
!2821 = !DILocation(line: 436, column: 38, scope: !2815)
!2822 = !DILocation(line: 438, column: 12, scope: !2815)
!2823 = !DILocation(line: 438, column: 30, scope: !2815)
!2824 = !DILocation(line: 438, column: 35, scope: !2815)
!2825 = !DILocation(line: 438, column: 3, scope: !2815)
!2826 = !DILocation(line: 440, column: 11, scope: !2815)
!2827 = !DILocation(line: 440, column: 16, scope: !2815)
!2828 = !DILocation(line: 440, column: 3, scope: !2815)
!2829 = !DILocation(line: 443, column: 16, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2815, file: !3, line: 441, column: 5)
!2831 = !DILocation(line: 443, column: 7, scope: !2830)
!2832 = !DILocation(line: 444, column: 7, scope: !2830)
!2833 = !DILocation(line: 447, column: 16, scope: !2830)
!2834 = !DILocation(line: 447, column: 7, scope: !2830)
!2835 = !DILocation(line: 448, column: 7, scope: !2830)
!2836 = !DILocation(line: 451, column: 16, scope: !2830)
!2837 = !DILocation(line: 451, column: 7, scope: !2830)
!2838 = !DILocation(line: 452, column: 7, scope: !2830)
!2839 = !DILocation(line: 455, column: 7, scope: !2830)
!2840 = !DILocation(line: 456, column: 5, scope: !2830)
!2841 = !DILocation(line: 458, column: 12, scope: !2815)
!2842 = !DILocation(line: 458, column: 3, scope: !2815)
!2843 = !DILocation(line: 459, column: 22, scope: !2815)
!2844 = !DILocation(line: 459, column: 28, scope: !2815)
!2845 = !DILocation(line: 459, column: 33, scope: !2815)
!2846 = !DILocation(line: 459, column: 3, scope: !2815)
!2847 = !DILocation(line: 460, column: 12, scope: !2815)
!2848 = !DILocation(line: 460, column: 3, scope: !2815)
!2849 = !DILocation(line: 462, column: 12, scope: !2815)
!2850 = !DILocation(line: 462, column: 3, scope: !2815)
!2851 = !DILocation(line: 463, column: 7, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2815, file: !3, line: 463, column: 7)
!2853 = !DILocation(line: 463, column: 12, scope: !2852)
!2854 = !DILocation(line: 463, column: 7, scope: !2815)
!2855 = !DILocation(line: 464, column: 25, scope: !2852)
!2856 = !DILocation(line: 464, column: 32, scope: !2852)
!2857 = !DILocation(line: 464, column: 37, scope: !2852)
!2858 = !DILocation(line: 464, column: 31, scope: !2852)
!2859 = !DILocation(line: 464, column: 5, scope: !2852)
!2860 = !DILocation(line: 465, column: 12, scope: !2815)
!2861 = !DILocation(line: 465, column: 3, scope: !2815)
!2862 = !DILocation(line: 467, column: 12, scope: !2815)
!2863 = !DILocation(line: 467, column: 18, scope: !2815)
!2864 = !DILocation(line: 467, column: 23, scope: !2815)
!2865 = !DILocation(line: 467, column: 3, scope: !2815)
!2866 = !DILocation(line: 469, column: 7, scope: !2867)
!2867 = distinct !DILexicalBlock(scope: !2815, file: !3, line: 469, column: 7)
!2868 = !DILocation(line: 469, column: 12, scope: !2867)
!2869 = !DILocation(line: 469, column: 7, scope: !2815)
!2870 = !DILocation(line: 471, column: 16, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2867, file: !3, line: 470, column: 5)
!2872 = !DILocation(line: 471, column: 7, scope: !2871)
!2873 = !DILocation(line: 472, column: 7, scope: !2871)
!2874 = !DILocation(line: 473, column: 5, scope: !2871)
!2875 = !DILocation(line: 474, column: 1, scope: !2815)
!2876 = distinct !DISubprogram(name: "dump_uses", scope: !3, file: !3, line: 480, type: !2877, scopeLine: 481, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2877 = !DISubroutineType(types: !2878)
!2878 = !{null, !2688, !2530}
!2879 = !DILocalVariable(name: "file", arg: 1, scope: !2876, file: !3, line: 480, type: !2688)
!2880 = !DILocation(line: 480, column: 18, scope: !2876)
!2881 = !DILocalVariable(name: "data", arg: 2, scope: !2876, file: !3, line: 480, type: !2530)
!2882 = !DILocation(line: 480, column: 44, scope: !2876)
!2883 = !DILocalVariable(name: "i", scope: !2876, file: !3, line: 482, type: !6)
!2884 = !DILocation(line: 482, column: 12, scope: !2876)
!2885 = !DILocalVariable(name: "use", scope: !2876, file: !3, line: 483, type: !2457)
!2886 = !DILocation(line: 483, column: 18, scope: !2876)
!2887 = !DILocation(line: 485, column: 10, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2876, file: !3, line: 485, column: 3)
!2889 = !DILocation(line: 485, column: 8, scope: !2888)
!2890 = !DILocation(line: 485, column: 15, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2888, file: !3, line: 485, column: 3)
!2892 = !DILocation(line: 485, column: 30, scope: !2891)
!2893 = !DILocation(line: 485, column: 19, scope: !2891)
!2894 = !DILocation(line: 485, column: 17, scope: !2891)
!2895 = !DILocation(line: 485, column: 3, scope: !2888)
!2896 = !DILocation(line: 487, column: 21, scope: !2897)
!2897 = distinct !DILexicalBlock(scope: !2891, file: !3, line: 486, column: 5)
!2898 = !DILocation(line: 487, column: 27, scope: !2897)
!2899 = !DILocation(line: 487, column: 13, scope: !2897)
!2900 = !DILocation(line: 487, column: 11, scope: !2897)
!2901 = !DILocation(line: 489, column: 17, scope: !2897)
!2902 = !DILocation(line: 489, column: 23, scope: !2897)
!2903 = !DILocation(line: 489, column: 7, scope: !2897)
!2904 = !DILocation(line: 490, column: 16, scope: !2897)
!2905 = !DILocation(line: 490, column: 7, scope: !2897)
!2906 = !DILocation(line: 491, column: 5, scope: !2897)
!2907 = !DILocation(line: 485, column: 38, scope: !2891)
!2908 = !DILocation(line: 485, column: 3, scope: !2891)
!2909 = distinct !{!2909, !2895, !2910}
!2910 = !DILocation(line: 491, column: 5, scope: !2888)
!2911 = !DILocation(line: 492, column: 1, scope: !2876)
!2912 = distinct !DISubprogram(name: "n_iv_uses", scope: !3, file: !3, line: 342, type: !2913, scopeLine: 343, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2913 = !DISubroutineType(types: !2914)
!2914 = !{!6, !2530}
!2915 = !DILocalVariable(name: "data", arg: 1, scope: !2912, file: !3, line: 342, type: !2530)
!2916 = !DILocation(line: 342, column: 32, scope: !2912)
!2917 = !DILocation(line: 344, column: 10, scope: !2912)
!2918 = !DILocation(line: 344, column: 3, scope: !2912)
!2919 = distinct !DISubprogram(name: "iv_use", scope: !3, file: !3, line: 350, type: !2920, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2920 = !DISubroutineType(types: !2921)
!2921 = !{!2457, !2530, !6}
!2922 = !DILocalVariable(name: "data", arg: 1, scope: !2919, file: !3, line: 350, type: !2530)
!2923 = !DILocation(line: 350, column: 29, scope: !2919)
!2924 = !DILocalVariable(name: "i", arg: 2, scope: !2919, file: !3, line: 350, type: !6)
!2925 = !DILocation(line: 350, column: 44, scope: !2919)
!2926 = !DILocation(line: 352, column: 10, scope: !2919)
!2927 = !DILocation(line: 352, column: 3, scope: !2919)
!2928 = distinct !DISubprogram(name: "dump_cand", scope: !3, file: !3, line: 498, type: !2929, scopeLine: 499, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2929 = !DISubroutineType(types: !2930)
!2930 = !{null, !2688, !2472}
!2931 = !DILocalVariable(name: "file", arg: 1, scope: !2928, file: !3, line: 498, type: !2688)
!2932 = !DILocation(line: 498, column: 18, scope: !2928)
!2933 = !DILocalVariable(name: "cand", arg: 2, scope: !2928, file: !3, line: 498, type: !2472)
!2934 = !DILocation(line: 498, column: 40, scope: !2928)
!2935 = !DILocalVariable(name: "iv", scope: !2928, file: !3, line: 500, type: !2431)
!2936 = !DILocation(line: 500, column: 14, scope: !2928)
!2937 = !DILocation(line: 500, column: 19, scope: !2928)
!2938 = !DILocation(line: 500, column: 25, scope: !2928)
!2939 = !DILocation(line: 502, column: 12, scope: !2928)
!2940 = !DILocation(line: 503, column: 5, scope: !2928)
!2941 = !DILocation(line: 503, column: 11, scope: !2928)
!2942 = !DILocation(line: 503, column: 15, scope: !2928)
!2943 = !DILocation(line: 503, column: 21, scope: !2928)
!2944 = !DILocation(line: 502, column: 3, scope: !2928)
!2945 = !DILocation(line: 505, column: 7, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2928, file: !3, line: 505, column: 7)
!2947 = !DILocation(line: 505, column: 13, scope: !2946)
!2948 = !DILocation(line: 505, column: 7, scope: !2928)
!2949 = !DILocation(line: 507, column: 16, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 506, column: 5)
!2951 = !DILocation(line: 507, column: 7, scope: !2950)
!2952 = !DILocation(line: 508, column: 7, scope: !2950)
!2953 = !DILocation(line: 509, column: 5, scope: !2950)
!2954 = !DILocation(line: 511, column: 8, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2928, file: !3, line: 511, column: 7)
!2956 = !DILocation(line: 511, column: 7, scope: !2928)
!2957 = !DILocation(line: 513, column: 16, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2955, file: !3, line: 512, column: 5)
!2959 = !DILocation(line: 513, column: 7, scope: !2958)
!2960 = !DILocation(line: 514, column: 7, scope: !2958)
!2961 = !DILocation(line: 517, column: 11, scope: !2928)
!2962 = !DILocation(line: 517, column: 17, scope: !2928)
!2963 = !DILocation(line: 517, column: 3, scope: !2928)
!2964 = !DILocation(line: 520, column: 16, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !2928, file: !3, line: 518, column: 5)
!2966 = !DILocation(line: 520, column: 7, scope: !2965)
!2967 = !DILocation(line: 521, column: 7, scope: !2965)
!2968 = !DILocation(line: 524, column: 16, scope: !2965)
!2969 = !DILocation(line: 524, column: 55, scope: !2965)
!2970 = !DILocation(line: 524, column: 61, scope: !2965)
!2971 = !DILocation(line: 524, column: 71, scope: !2965)
!2972 = !DILocation(line: 524, column: 7, scope: !2965)
!2973 = !DILocation(line: 525, column: 7, scope: !2965)
!2974 = !DILocation(line: 528, column: 16, scope: !2965)
!2975 = !DILocation(line: 528, column: 54, scope: !2965)
!2976 = !DILocation(line: 528, column: 60, scope: !2965)
!2977 = !DILocation(line: 528, column: 70, scope: !2965)
!2978 = !DILocation(line: 528, column: 7, scope: !2965)
!2979 = !DILocation(line: 529, column: 7, scope: !2965)
!2980 = !DILocation(line: 532, column: 16, scope: !2965)
!2981 = !DILocation(line: 532, column: 7, scope: !2965)
!2982 = !DILocation(line: 533, column: 7, scope: !2965)
!2983 = !DILocation(line: 536, column: 16, scope: !2965)
!2984 = !DILocation(line: 536, column: 7, scope: !2965)
!2985 = !DILocation(line: 537, column: 7, scope: !2965)
!2986 = !DILocation(line: 540, column: 12, scope: !2928)
!2987 = !DILocation(line: 540, column: 18, scope: !2928)
!2988 = !DILocation(line: 540, column: 3, scope: !2928)
!2989 = !DILocation(line: 541, column: 1, scope: !2928)
!2990 = distinct !DISubprogram(name: "contains_abnormal_ssa_name_p", scope: !3, file: !3, line: 665, type: !2991, scopeLine: 666, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!2991 = !DISubroutineType(types: !2992)
!2992 = !{!136, !1134}
!2993 = !DILocalVariable(name: "expr", arg: 1, scope: !2990, file: !3, line: 665, type: !1134)
!2994 = !DILocation(line: 665, column: 36, scope: !2990)
!2995 = !DILocalVariable(name: "code", scope: !2990, file: !3, line: 667, type: !159)
!2996 = !DILocation(line: 667, column: 18, scope: !2990)
!2997 = !DILocalVariable(name: "codeclass", scope: !2990, file: !3, line: 668, type: !407)
!2998 = !DILocation(line: 668, column: 24, scope: !2990)
!2999 = !DILocation(line: 670, column: 8, scope: !3000)
!3000 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 670, column: 7)
!3001 = !DILocation(line: 670, column: 7, scope: !2990)
!3002 = !DILocation(line: 671, column: 5, scope: !3000)
!3003 = !DILocation(line: 673, column: 10, scope: !2990)
!3004 = !DILocation(line: 673, column: 8, scope: !2990)
!3005 = !DILocation(line: 674, column: 15, scope: !2990)
!3006 = !DILocation(line: 674, column: 13, scope: !2990)
!3007 = !DILocation(line: 676, column: 7, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 676, column: 7)
!3009 = !DILocation(line: 676, column: 12, scope: !3008)
!3010 = !DILocation(line: 676, column: 7, scope: !2990)
!3011 = !DILocation(line: 677, column: 12, scope: !3008)
!3012 = !DILocation(line: 677, column: 51, scope: !3008)
!3013 = !DILocation(line: 677, column: 5, scope: !3008)
!3014 = !DILocation(line: 679, column: 7, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 679, column: 7)
!3016 = !DILocation(line: 679, column: 12, scope: !3015)
!3017 = !DILocation(line: 680, column: 7, scope: !3015)
!3018 = !DILocation(line: 680, column: 35, scope: !3015)
!3019 = !DILocation(line: 680, column: 10, scope: !3015)
!3020 = !DILocation(line: 679, column: 7, scope: !2990)
!3021 = !DILocation(line: 681, column: 5, scope: !3015)
!3022 = !DILocation(line: 683, column: 7, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 683, column: 7)
!3024 = !DILocation(line: 683, column: 12, scope: !3023)
!3025 = !DILocation(line: 683, column: 7, scope: !2990)
!3026 = !DILocation(line: 684, column: 30, scope: !3023)
!3027 = !DILocation(line: 684, column: 13, scope: !3023)
!3028 = !DILocation(line: 684, column: 12, scope: !3023)
!3029 = !DILocation(line: 684, column: 5, scope: !3023)
!3030 = !DILocation(line: 688, column: 11, scope: !2990)
!3031 = !DILocation(line: 688, column: 3, scope: !2990)
!3032 = !DILocation(line: 692, column: 41, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3034, file: !3, line: 692, column: 11)
!3034 = distinct !DILexicalBlock(scope: !2990, file: !3, line: 689, column: 5)
!3035 = !DILocation(line: 692, column: 11, scope: !3033)
!3036 = !DILocation(line: 692, column: 11, scope: !3034)
!3037 = !DILocation(line: 693, column: 2, scope: !3033)
!3038 = !DILocation(line: 692, column: 63, scope: !3033)
!3039 = !DILocation(line: 697, column: 41, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3034, file: !3, line: 697, column: 11)
!3041 = !DILocation(line: 697, column: 11, scope: !3040)
!3042 = !DILocation(line: 697, column: 11, scope: !3034)
!3043 = !DILocation(line: 698, column: 2, scope: !3040)
!3044 = !DILocation(line: 700, column: 7, scope: !3034)
!3045 = !DILocation(line: 703, column: 7, scope: !3034)
!3046 = !DILocation(line: 704, column: 5, scope: !3034)
!3047 = !DILocation(line: 706, column: 3, scope: !2990)
!3048 = !DILocation(line: 707, column: 1, scope: !2990)
!3049 = distinct !DISubprogram(name: "idx_contains_abnormal_ssa_name_p", scope: !3, file: !3, line: 647, type: !3050, scopeLine: 649, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3050 = !DISubroutineType(types: !3051)
!3051 = !{!136, !1134, !1470, !1007}
!3052 = !DILocalVariable(name: "base", arg: 1, scope: !3049, file: !3, line: 647, type: !1134)
!3053 = !DILocation(line: 647, column: 40, scope: !3049)
!3054 = !DILocalVariable(name: "index", arg: 2, scope: !3049, file: !3, line: 647, type: !1470)
!3055 = !DILocation(line: 647, column: 52, scope: !3049)
!3056 = !DILocalVariable(name: "data", arg: 3, scope: !3049, file: !3, line: 648, type: !1007)
!3057 = !DILocation(line: 648, column: 13, scope: !3049)
!3058 = !DILocation(line: 650, column: 7, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3049, file: !3, line: 650, column: 7)
!3060 = !DILocation(line: 650, column: 24, scope: !3059)
!3061 = !DILocation(line: 650, column: 37, scope: !3059)
!3062 = !DILocation(line: 650, column: 40, scope: !3059)
!3063 = !DILocation(line: 650, column: 57, scope: !3059)
!3064 = !DILocation(line: 650, column: 7, scope: !3049)
!3065 = !DILocation(line: 652, column: 32, scope: !3066)
!3066 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 652, column: 11)
!3067 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 651, column: 5)
!3068 = !DILocation(line: 652, column: 11, scope: !3066)
!3069 = !DILocation(line: 652, column: 11, scope: !3067)
!3070 = !DILocation(line: 653, column: 2, scope: !3066)
!3071 = !DILocation(line: 654, column: 32, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 654, column: 11)
!3073 = !DILocation(line: 654, column: 11, scope: !3072)
!3074 = !DILocation(line: 654, column: 11, scope: !3067)
!3075 = !DILocation(line: 655, column: 2, scope: !3072)
!3076 = !DILocation(line: 656, column: 5, scope: !3067)
!3077 = !DILocation(line: 658, column: 33, scope: !3049)
!3078 = !DILocation(line: 658, column: 32, scope: !3049)
!3079 = !DILocation(line: 658, column: 11, scope: !3049)
!3080 = !DILocation(line: 658, column: 10, scope: !3049)
!3081 = !DILocation(line: 658, column: 3, scope: !3049)
!3082 = !DILocation(line: 659, column: 1, scope: !3049)
!3083 = distinct !DISubprogram(name: "expr_invariant_in_loop_p", scope: !3, file: !3, line: 1285, type: !3084, scopeLine: 1286, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3084 = !DISubroutineType(types: !3085)
!3085 = !{!136, !1651, !1134}
!3086 = !DILocalVariable(name: "loop", arg: 1, scope: !3083, file: !3, line: 1285, type: !1651)
!3087 = !DILocation(line: 1285, column: 40, scope: !3083)
!3088 = !DILocalVariable(name: "expr", arg: 2, scope: !3083, file: !3, line: 1285, type: !1134)
!3089 = !DILocation(line: 1285, column: 51, scope: !3083)
!3090 = !DILocalVariable(name: "def_bb", scope: !3083, file: !3, line: 1287, type: !1399)
!3091 = !DILocation(line: 1287, column: 15, scope: !3083)
!3092 = !DILocalVariable(name: "i", scope: !3083, file: !3, line: 1288, type: !6)
!3093 = !DILocation(line: 1288, column: 12, scope: !3083)
!3094 = !DILocalVariable(name: "len", scope: !3083, file: !3, line: 1288, type: !6)
!3095 = !DILocation(line: 1288, column: 15, scope: !3083)
!3096 = !DILocation(line: 1290, column: 3, scope: !3083)
!3097 = !DILocation(line: 1292, column: 32, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3083, file: !3, line: 1292, column: 7)
!3099 = !DILocation(line: 1292, column: 7, scope: !3098)
!3100 = !DILocation(line: 1292, column: 7, scope: !3083)
!3101 = !DILocation(line: 1293, column: 5, scope: !3098)
!3102 = !DILocation(line: 1295, column: 7, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3083, file: !3, line: 1295, column: 7)
!3104 = !DILocation(line: 1295, column: 24, scope: !3103)
!3105 = !DILocation(line: 1295, column: 7, scope: !3083)
!3106 = !DILocation(line: 1297, column: 27, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !3103, file: !3, line: 1296, column: 5)
!3108 = !DILocation(line: 1297, column: 16, scope: !3107)
!3109 = !DILocation(line: 1297, column: 14, scope: !3107)
!3110 = !DILocation(line: 1298, column: 11, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3107, file: !3, line: 1298, column: 11)
!3112 = !DILocation(line: 1299, column: 4, scope: !3111)
!3113 = !DILocation(line: 1299, column: 30, scope: !3111)
!3114 = !DILocation(line: 1299, column: 36, scope: !3111)
!3115 = !DILocation(line: 1299, column: 7, scope: !3111)
!3116 = !DILocation(line: 1298, column: 11, scope: !3107)
!3117 = !DILocation(line: 1300, column: 2, scope: !3111)
!3118 = !DILocation(line: 1302, column: 7, scope: !3107)
!3119 = !DILocation(line: 1305, column: 8, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3083, file: !3, line: 1305, column: 7)
!3121 = !DILocation(line: 1305, column: 7, scope: !3083)
!3122 = !DILocation(line: 1306, column: 5, scope: !3120)
!3123 = !DILocation(line: 1308, column: 9, scope: !3083)
!3124 = !DILocation(line: 1308, column: 7, scope: !3083)
!3125 = !DILocation(line: 1309, column: 10, scope: !3126)
!3126 = distinct !DILexicalBlock(scope: !3083, file: !3, line: 1309, column: 3)
!3127 = !DILocation(line: 1309, column: 8, scope: !3126)
!3128 = !DILocation(line: 1309, column: 15, scope: !3129)
!3129 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 1309, column: 3)
!3130 = !DILocation(line: 1309, column: 19, scope: !3129)
!3131 = !DILocation(line: 1309, column: 17, scope: !3129)
!3132 = !DILocation(line: 1309, column: 3, scope: !3126)
!3133 = !DILocation(line: 1310, column: 36, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3129, file: !3, line: 1310, column: 9)
!3135 = !DILocation(line: 1310, column: 42, scope: !3134)
!3136 = !DILocation(line: 1310, column: 10, scope: !3134)
!3137 = !DILocation(line: 1310, column: 9, scope: !3129)
!3138 = !DILocation(line: 1311, column: 7, scope: !3134)
!3139 = !DILocation(line: 1310, column: 64, scope: !3134)
!3140 = !DILocation(line: 1309, column: 25, scope: !3129)
!3141 = !DILocation(line: 1309, column: 3, scope: !3129)
!3142 = distinct !{!3142, !3132, !3143}
!3143 = !DILocation(line: 1311, column: 14, scope: !3126)
!3144 = !DILocation(line: 1313, column: 3, scope: !3083)
!3145 = !DILocation(line: 1314, column: 1, scope: !3083)
!3146 = distinct !DISubprogram(name: "loop_depth", scope: !140, file: !140, line: 425, type: !3147, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3147 = !DISubroutineType(types: !3148)
!3148 = !{!6, !3149}
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!3150 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1652)
!3151 = !DILocalVariable(name: "loop", arg: 1, scope: !3146, file: !140, line: 425, type: !3149)
!3152 = !DILocation(line: 425, column: 32, scope: !3146)
!3153 = !DILocation(line: 427, column: 10, scope: !3146)
!3154 = !DILocation(line: 427, column: 3, scope: !3146)
!3155 = distinct !DISubprogram(name: "gimple_bb", scope: !574, file: !574, line: 1112, type: !3156, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3156 = !DISubroutineType(types: !3157)
!3157 = !{!1400, !3158}
!3158 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1016, line: 60, baseType: !2399)
!3159 = !DILocalVariable(name: "g", arg: 1, scope: !3155, file: !574, line: 1112, type: !3158)
!3160 = !DILocation(line: 1112, column: 25, scope: !3155)
!3161 = !DILocation(line: 1114, column: 10, scope: !3155)
!3162 = !DILocation(line: 1114, column: 13, scope: !3155)
!3163 = !DILocation(line: 1114, column: 20, scope: !3155)
!3164 = !DILocation(line: 1114, column: 3, scope: !3155)
!3165 = distinct !DISubprogram(name: "tree_operand_length", scope: !160, file: !160, line: 5347, type: !3166, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3166 = !DISubroutineType(types: !3167)
!3167 = !{!1006, !3168}
!3168 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1016, line: 59, baseType: !2551)
!3169 = !DILocalVariable(name: "node", arg: 1, scope: !3165, file: !160, line: 5347, type: !3168)
!3170 = !DILocation(line: 5347, column: 33, scope: !3165)
!3171 = !DILocation(line: 5349, column: 7, scope: !3172)
!3172 = distinct !DILexicalBlock(scope: !3165, file: !160, line: 5349, column: 7)
!3173 = !DILocation(line: 5349, column: 7, scope: !3165)
!3174 = !DILocation(line: 5350, column: 12, scope: !3172)
!3175 = !DILocation(line: 5350, column: 5, scope: !3172)
!3176 = !DILocation(line: 5352, column: 12, scope: !3172)
!3177 = !DILocation(line: 5352, column: 5, scope: !3172)
!3178 = !DILocation(line: 5353, column: 1, scope: !3165)
!3179 = distinct !DISubprogram(name: "stmt_invariant_in_loop_p", scope: !3, file: !3, line: 1321, type: !3180, scopeLine: 1322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3180 = !DISubroutineType(types: !3181)
!3181 = !{!136, !1651, !1436}
!3182 = !DILocalVariable(name: "loop", arg: 1, scope: !3179, file: !3, line: 1321, type: !1651)
!3183 = !DILocation(line: 1321, column: 40, scope: !3179)
!3184 = !DILocalVariable(name: "stmt", arg: 2, scope: !3179, file: !3, line: 1321, type: !1436)
!3185 = !DILocation(line: 1321, column: 53, scope: !3179)
!3186 = !DILocalVariable(name: "i", scope: !3179, file: !3, line: 1323, type: !6)
!3187 = !DILocation(line: 1323, column: 12, scope: !3179)
!3188 = !DILocalVariable(name: "lhs", scope: !3179, file: !3, line: 1324, type: !1134)
!3189 = !DILocation(line: 1324, column: 8, scope: !3179)
!3190 = !DILocation(line: 1326, column: 3, scope: !3179)
!3191 = !DILocation(line: 1328, column: 25, scope: !3179)
!3192 = !DILocation(line: 1328, column: 9, scope: !3179)
!3193 = !DILocation(line: 1328, column: 7, scope: !3179)
!3194 = !DILocation(line: 1329, column: 10, scope: !3195)
!3195 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 1329, column: 3)
!3196 = !DILocation(line: 1329, column: 8, scope: !3195)
!3197 = !DILocation(line: 1329, column: 15, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 1329, column: 3)
!3199 = !DILocation(line: 1329, column: 35, scope: !3198)
!3200 = !DILocation(line: 1329, column: 19, scope: !3198)
!3201 = !DILocation(line: 1329, column: 17, scope: !3198)
!3202 = !DILocation(line: 1329, column: 3, scope: !3195)
!3203 = !DILocalVariable(name: "op", scope: !3204, file: !3, line: 1331, type: !1134)
!3204 = distinct !DILexicalBlock(scope: !3198, file: !3, line: 1330, column: 5)
!3205 = !DILocation(line: 1331, column: 12, scope: !3204)
!3206 = !DILocation(line: 1331, column: 28, scope: !3204)
!3207 = !DILocation(line: 1331, column: 34, scope: !3204)
!3208 = !DILocation(line: 1331, column: 17, scope: !3204)
!3209 = !DILocation(line: 1332, column: 11, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3204, file: !3, line: 1332, column: 11)
!3211 = !DILocation(line: 1332, column: 17, scope: !3210)
!3212 = !DILocation(line: 1332, column: 14, scope: !3210)
!3213 = !DILocation(line: 1332, column: 21, scope: !3210)
!3214 = !DILocation(line: 1332, column: 51, scope: !3210)
!3215 = !DILocation(line: 1332, column: 57, scope: !3210)
!3216 = !DILocation(line: 1332, column: 25, scope: !3210)
!3217 = !DILocation(line: 1332, column: 11, scope: !3204)
!3218 = !DILocation(line: 1333, column: 2, scope: !3210)
!3219 = !DILocation(line: 1334, column: 5, scope: !3204)
!3220 = !DILocation(line: 1329, column: 43, scope: !3198)
!3221 = !DILocation(line: 1329, column: 3, scope: !3198)
!3222 = distinct !{!3222, !3202, !3223}
!3223 = !DILocation(line: 1334, column: 5, scope: !3195)
!3224 = !DILocation(line: 1336, column: 3, scope: !3179)
!3225 = !DILocation(line: 1337, column: 1, scope: !3179)
!3226 = distinct !DISubprogram(name: "gimple_num_ops", scope: !574, file: !574, line: 1596, type: !3227, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3227 = !DISubroutineType(types: !3228)
!3228 = !{!6, !3158}
!3229 = !DILocalVariable(name: "gs", arg: 1, scope: !3226, file: !574, line: 1596, type: !3158)
!3230 = !DILocation(line: 1596, column: 30, scope: !3226)
!3231 = !DILocation(line: 1598, column: 10, scope: !3226)
!3232 = !DILocation(line: 1598, column: 14, scope: !3226)
!3233 = !DILocation(line: 1598, column: 21, scope: !3226)
!3234 = !DILocation(line: 1598, column: 3, scope: !3226)
!3235 = distinct !DISubprogram(name: "gimple_op", scope: !574, file: !574, line: 1631, type: !3236, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3236 = !DISubroutineType(types: !3237)
!3237 = !{!1134, !3158, !6}
!3238 = !DILocalVariable(name: "gs", arg: 1, scope: !3235, file: !574, line: 1631, type: !3158)
!3239 = !DILocation(line: 1631, column: 25, scope: !3235)
!3240 = !DILocalVariable(name: "i", arg: 2, scope: !3235, file: !574, line: 1631, type: !6)
!3241 = !DILocation(line: 1631, column: 38, scope: !3235)
!3242 = !DILocation(line: 1633, column: 23, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3235, file: !574, line: 1633, column: 7)
!3244 = !DILocation(line: 1633, column: 7, scope: !3243)
!3245 = !DILocation(line: 1633, column: 7, scope: !3235)
!3246 = !DILocation(line: 1638, column: 26, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3243, file: !574, line: 1634, column: 5)
!3248 = !DILocation(line: 1638, column: 14, scope: !3247)
!3249 = !DILocation(line: 1638, column: 50, scope: !3247)
!3250 = !DILocation(line: 1638, column: 7, scope: !3247)
!3251 = !DILocation(line: 1641, column: 5, scope: !3243)
!3252 = !DILocation(line: 1642, column: 1, scope: !3235)
!3253 = distinct !DISubprogram(name: "tree_int_cst_sign_bit", scope: !3, file: !3, line: 2779, type: !3166, scopeLine: 2780, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3254 = !DILocalVariable(name: "t", arg: 1, scope: !3253, file: !3, line: 2779, type: !3168)
!3255 = !DILocation(line: 2779, column: 35, scope: !3253)
!3256 = !DILocalVariable(name: "bitno", scope: !3253, file: !3, line: 2781, type: !6)
!3257 = !DILocation(line: 2781, column: 12, scope: !3253)
!3258 = !DILocation(line: 2781, column: 20, scope: !3253)
!3259 = !DILocation(line: 2781, column: 51, scope: !3253)
!3260 = !DILocalVariable(name: "w", scope: !3253, file: !3, line: 2782, type: !1088)
!3261 = !DILocation(line: 2782, column: 26, scope: !3253)
!3262 = !DILocation(line: 2784, column: 7, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3253, file: !3, line: 2784, column: 7)
!3264 = !DILocation(line: 2784, column: 13, scope: !3263)
!3265 = !DILocation(line: 2784, column: 7, scope: !3253)
!3266 = !DILocation(line: 2785, column: 9, scope: !3263)
!3267 = !DILocation(line: 2785, column: 7, scope: !3263)
!3268 = !DILocation(line: 2785, column: 5, scope: !3263)
!3269 = !DILocation(line: 2788, column: 11, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3263, file: !3, line: 2787, column: 5)
!3271 = !DILocation(line: 2788, column: 9, scope: !3270)
!3272 = !DILocation(line: 2789, column: 13, scope: !3270)
!3273 = !DILocation(line: 2792, column: 11, scope: !3253)
!3274 = !DILocation(line: 2792, column: 16, scope: !3253)
!3275 = !DILocation(line: 2792, column: 13, scope: !3253)
!3276 = !DILocation(line: 2792, column: 23, scope: !3253)
!3277 = !DILocation(line: 2792, column: 10, scope: !3253)
!3278 = !DILocation(line: 2792, column: 3, scope: !3253)
!3279 = !DILocalVariable(name: "cst", arg: 1, scope: !2, file: !3, line: 2997, type: !7)
!3280 = !DILocation(line: 2997, column: 33, scope: !2)
!3281 = !DILocalVariable(name: "mode", arg: 2, scope: !2, file: !3, line: 2997, type: !8)
!3282 = !DILocation(line: 2997, column: 56, scope: !2)
!3283 = !DILocalVariable(name: "speed", arg: 3, scope: !2, file: !3, line: 2997, type: !136)
!3284 = !DILocation(line: 2997, column: 67, scope: !2)
!3285 = !DILocalVariable(name: "cached", scope: !2, file: !3, line: 3000, type: !1008)
!3286 = !DILocation(line: 3000, column: 22, scope: !2)
!3287 = !DILocalVariable(name: "act", scope: !2, file: !3, line: 3000, type: !1010)
!3288 = !DILocation(line: 3000, column: 30, scope: !2)
!3289 = !DILocalVariable(name: "seq", scope: !2, file: !3, line: 3001, type: !1015)
!3290 = !DILocation(line: 3001, column: 7, scope: !2)
!3291 = !DILocalVariable(name: "cost", scope: !2, file: !3, line: 3002, type: !6)
!3292 = !DILocation(line: 3002, column: 12, scope: !2)
!3293 = !DILocation(line: 3004, column: 8, scope: !3294)
!3294 = distinct !DILexicalBlock(scope: !2, file: !3, line: 3004, column: 7)
!3295 = !DILocation(line: 3004, column: 7, scope: !2)
!3296 = !DILocation(line: 3005, column: 13, scope: !3294)
!3297 = !DILocation(line: 3005, column: 11, scope: !3294)
!3298 = !DILocation(line: 3005, column: 5, scope: !3294)
!3299 = !DILocation(line: 3007, column: 14, scope: !2)
!3300 = !DILocation(line: 3007, column: 7, scope: !2)
!3301 = !DILocation(line: 3007, column: 12, scope: !2)
!3302 = !DILocation(line: 3008, column: 13, scope: !2)
!3303 = !DILocation(line: 3008, column: 7, scope: !2)
!3304 = !DILocation(line: 3008, column: 11, scope: !2)
!3305 = !DILocation(line: 3009, column: 50, scope: !2)
!3306 = !DILocation(line: 3009, column: 57, scope: !2)
!3307 = !DILocation(line: 3009, column: 34, scope: !2)
!3308 = !DILocation(line: 3009, column: 12, scope: !2)
!3309 = !DILocation(line: 3009, column: 10, scope: !2)
!3310 = !DILocation(line: 3010, column: 8, scope: !3311)
!3311 = distinct !DILexicalBlock(scope: !2, file: !3, line: 3010, column: 7)
!3312 = !DILocation(line: 3010, column: 7, scope: !3311)
!3313 = !DILocation(line: 3010, column: 7, scope: !2)
!3314 = !DILocation(line: 3011, column: 14, scope: !3311)
!3315 = !DILocation(line: 3011, column: 13, scope: !3311)
!3316 = !DILocation(line: 3011, column: 23, scope: !3311)
!3317 = !DILocation(line: 3011, column: 5, scope: !3311)
!3318 = !DILocation(line: 3013, column: 13, scope: !2)
!3319 = !DILocation(line: 3013, column: 4, scope: !2)
!3320 = !DILocation(line: 3013, column: 11, scope: !2)
!3321 = !DILocation(line: 3014, column: 21, scope: !2)
!3322 = !DILocation(line: 3014, column: 5, scope: !2)
!3323 = !DILocation(line: 3014, column: 4, scope: !2)
!3324 = !DILocation(line: 3014, column: 14, scope: !2)
!3325 = !DILocation(line: 3014, column: 19, scope: !2)
!3326 = !DILocation(line: 3015, column: 20, scope: !2)
!3327 = !DILocation(line: 3015, column: 5, scope: !2)
!3328 = !DILocation(line: 3015, column: 4, scope: !2)
!3329 = !DILocation(line: 3015, column: 14, scope: !2)
!3330 = !DILocation(line: 3015, column: 18, scope: !2)
!3331 = !DILocation(line: 3017, column: 3, scope: !2)
!3332 = !DILocation(line: 3018, column: 16, scope: !2)
!3333 = !DILocation(line: 3018, column: 35, scope: !2)
!3334 = !DILocation(line: 3018, column: 22, scope: !2)
!3335 = !DILocation(line: 3019, column: 23, scope: !2)
!3336 = !DILocation(line: 3019, column: 28, scope: !2)
!3337 = !DILocation(line: 3019, column: 9, scope: !2)
!3338 = !DILocation(line: 3018, column: 3, scope: !2)
!3339 = !DILocation(line: 3020, column: 9, scope: !2)
!3340 = !DILocation(line: 3020, column: 7, scope: !2)
!3341 = !DILocation(line: 3021, column: 3, scope: !2)
!3342 = !DILocation(line: 3023, column: 20, scope: !2)
!3343 = !DILocation(line: 3023, column: 25, scope: !2)
!3344 = !DILocation(line: 3023, column: 10, scope: !2)
!3345 = !DILocation(line: 3023, column: 8, scope: !2)
!3346 = !DILocation(line: 3025, column: 7, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !2, file: !3, line: 3025, column: 7)
!3348 = !DILocation(line: 3025, column: 17, scope: !3347)
!3349 = !DILocation(line: 3025, column: 21, scope: !3347)
!3350 = !DILocation(line: 3025, column: 32, scope: !3347)
!3351 = !DILocation(line: 3025, column: 7, scope: !2)
!3352 = !DILocation(line: 3026, column: 14, scope: !3347)
!3353 = !DILocation(line: 3027, column: 13, scope: !3347)
!3354 = !DILocation(line: 3027, column: 7, scope: !3347)
!3355 = !DILocation(line: 3027, column: 18, scope: !3347)
!3356 = !DILocation(line: 3027, column: 40, scope: !3347)
!3357 = !DILocation(line: 3026, column: 5, scope: !3347)
!3358 = !DILocation(line: 3029, column: 21, scope: !2)
!3359 = !DILocation(line: 3029, column: 5, scope: !2)
!3360 = !DILocation(line: 3029, column: 4, scope: !2)
!3361 = !DILocation(line: 3029, column: 14, scope: !2)
!3362 = !DILocation(line: 3029, column: 19, scope: !2)
!3363 = !DILocation(line: 3031, column: 10, scope: !2)
!3364 = !DILocation(line: 3031, column: 3, scope: !2)
!3365 = !DILocation(line: 3032, column: 1, scope: !2)
!3366 = distinct !DISubprogram(name: "mbc_entry_hash", scope: !3, file: !3, line: 2975, type: !1774, scopeLine: 2976, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3367 = !DILocalVariable(name: "entry", arg: 1, scope: !3366, file: !3, line: 2975, type: !1777)
!3368 = !DILocation(line: 2975, column: 29, scope: !3366)
!3369 = !DILocalVariable(name: "e", scope: !3366, file: !3, line: 2977, type: !2401)
!3370 = !DILocation(line: 2977, column: 27, scope: !3366)
!3371 = !DILocation(line: 2977, column: 58, scope: !3366)
!3372 = !DILocation(line: 2977, column: 31, scope: !3366)
!3373 = !DILocation(line: 2979, column: 27, scope: !3366)
!3374 = !DILocation(line: 2979, column: 30, scope: !3366)
!3375 = !DILocation(line: 2979, column: 13, scope: !3366)
!3376 = !DILocation(line: 2979, column: 50, scope: !3366)
!3377 = !DILocation(line: 2979, column: 53, scope: !3366)
!3378 = !DILocation(line: 2979, column: 57, scope: !3366)
!3379 = !DILocation(line: 2979, column: 37, scope: !3366)
!3380 = !DILocation(line: 2979, column: 35, scope: !3366)
!3381 = !DILocation(line: 2979, column: 3, scope: !3366)
!3382 = distinct !DISubprogram(name: "mbc_entry_eq", scope: !3, file: !3, line: 2985, type: !1782, scopeLine: 2986, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3383 = !DILocalVariable(name: "entry1", arg: 1, scope: !3382, file: !3, line: 2985, type: !1777)
!3384 = !DILocation(line: 2985, column: 27, scope: !3382)
!3385 = !DILocalVariable(name: "entry2", arg: 2, scope: !3382, file: !3, line: 2985, type: !1777)
!3386 = !DILocation(line: 2985, column: 47, scope: !3382)
!3387 = !DILocalVariable(name: "e1", scope: !3382, file: !3, line: 2987, type: !2401)
!3388 = !DILocation(line: 2987, column: 27, scope: !3382)
!3389 = !DILocation(line: 2987, column: 59, scope: !3382)
!3390 = !DILocation(line: 2987, column: 32, scope: !3382)
!3391 = !DILocalVariable(name: "e2", scope: !3382, file: !3, line: 2988, type: !2401)
!3392 = !DILocation(line: 2988, column: 27, scope: !3382)
!3393 = !DILocation(line: 2988, column: 59, scope: !3382)
!3394 = !DILocation(line: 2988, column: 32, scope: !3382)
!3395 = !DILocation(line: 2990, column: 11, scope: !3382)
!3396 = !DILocation(line: 2990, column: 15, scope: !3382)
!3397 = !DILocation(line: 2990, column: 23, scope: !3382)
!3398 = !DILocation(line: 2990, column: 27, scope: !3382)
!3399 = !DILocation(line: 2990, column: 20, scope: !3382)
!3400 = !DILocation(line: 2991, column: 4, scope: !3382)
!3401 = !DILocation(line: 2991, column: 7, scope: !3382)
!3402 = !DILocation(line: 2991, column: 11, scope: !3382)
!3403 = !DILocation(line: 2991, column: 18, scope: !3382)
!3404 = !DILocation(line: 2991, column: 22, scope: !3382)
!3405 = !DILocation(line: 2991, column: 15, scope: !3382)
!3406 = !DILocation(line: 0, scope: !3382)
!3407 = !DILocation(line: 2990, column: 3, scope: !3382)
!3408 = distinct !DISubprogram(name: "seq_cost", scope: !3, file: !3, line: 2631, type: !3409, scopeLine: 2632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3409 = !DISubroutineType(types: !3410)
!3410 = !{!6, !1015, !136}
!3411 = !DILocalVariable(name: "seq", arg: 1, scope: !3408, file: !3, line: 2631, type: !1015)
!3412 = !DILocation(line: 2631, column: 15, scope: !3408)
!3413 = !DILocalVariable(name: "speed", arg: 2, scope: !3408, file: !3, line: 2631, type: !136)
!3414 = !DILocation(line: 2631, column: 25, scope: !3408)
!3415 = !DILocalVariable(name: "cost", scope: !3408, file: !3, line: 2633, type: !6)
!3416 = !DILocation(line: 2633, column: 12, scope: !3408)
!3417 = !DILocalVariable(name: "set", scope: !3408, file: !3, line: 2634, type: !1015)
!3418 = !DILocation(line: 2634, column: 7, scope: !3408)
!3419 = !DILocation(line: 2636, column: 3, scope: !3408)
!3420 = !DILocation(line: 2636, column: 10, scope: !3421)
!3421 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2636, column: 3)
!3422 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 2636, column: 3)
!3423 = !DILocation(line: 2636, column: 3, scope: !3422)
!3424 = !DILocation(line: 2638, column: 13, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !3421, file: !3, line: 2637, column: 5)
!3426 = !DILocation(line: 2638, column: 11, scope: !3425)
!3427 = !DILocation(line: 2639, column: 11, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 2639, column: 11)
!3429 = !DILocation(line: 2639, column: 11, scope: !3425)
!3430 = !DILocation(line: 2640, column: 20, scope: !3428)
!3431 = !DILocation(line: 2640, column: 29, scope: !3428)
!3432 = !DILocation(line: 2640, column: 10, scope: !3428)
!3433 = !DILocation(line: 2640, column: 7, scope: !3428)
!3434 = !DILocation(line: 2640, column: 2, scope: !3428)
!3435 = !DILocation(line: 2642, column: 6, scope: !3428)
!3436 = !DILocation(line: 2643, column: 5, scope: !3425)
!3437 = !DILocation(line: 2636, column: 21, scope: !3421)
!3438 = !DILocation(line: 2636, column: 19, scope: !3421)
!3439 = !DILocation(line: 2636, column: 3, scope: !3421)
!3440 = distinct !{!3440, !3423, !3441}
!3441 = !DILocation(line: 2643, column: 5, scope: !3422)
!3442 = !DILocation(line: 2645, column: 10, scope: !3408)
!3443 = !DILocation(line: 2645, column: 3, scope: !3408)
!3444 = !DILocalVariable(name: "ratio", arg: 1, scope: !2602, file: !3, line: 3042, type: !7)
!3445 = !DILocation(line: 3042, column: 48, scope: !2602)
!3446 = !DILocalVariable(name: "mode", arg: 2, scope: !2602, file: !3, line: 3042, type: !8)
!3447 = !DILocation(line: 3042, column: 73, scope: !2602)
!3448 = !DILocalVariable(name: "as", arg: 3, scope: !2602, file: !3, line: 3043, type: !2605)
!3449 = !DILocation(line: 3043, column: 19, scope: !2602)
!3450 = !DILocalVariable(name: "data_index", scope: !2602, file: !3, line: 3046, type: !6)
!3451 = !DILocation(line: 3046, column: 16, scope: !2602)
!3452 = !DILocation(line: 3046, column: 35, scope: !2602)
!3453 = !DILocation(line: 3046, column: 29, scope: !2602)
!3454 = !DILocation(line: 3046, column: 38, scope: !2602)
!3455 = !DILocation(line: 3046, column: 65, scope: !2602)
!3456 = !DILocation(line: 3046, column: 57, scope: !2602)
!3457 = !DILocalVariable(name: "valid_mult", scope: !2602, file: !3, line: 3048, type: !2415)
!3458 = !DILocation(line: 3048, column: 11, scope: !2602)
!3459 = !DILocation(line: 3050, column: 7, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !2602, file: !3, line: 3050, column: 7)
!3461 = !DILocation(line: 3050, column: 21, scope: !3460)
!3462 = !DILocation(line: 3050, column: 18, scope: !3460)
!3463 = !DILocation(line: 3050, column: 7, scope: !2602)
!3464 = !DILocation(line: 3051, column: 5, scope: !3460)
!3465 = !DILocation(line: 3053, column: 16, scope: !2602)
!3466 = !DILocation(line: 3053, column: 14, scope: !2602)
!3467 = !DILocation(line: 3054, column: 8, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !2602, file: !3, line: 3054, column: 7)
!3469 = !DILocation(line: 3054, column: 7, scope: !2602)
!3470 = !DILocalVariable(name: "address_mode", scope: !3471, file: !3, line: 3056, type: !8)
!3471 = distinct !DILexicalBlock(scope: !3468, file: !3, line: 3055, column: 5)
!3472 = !DILocation(line: 3056, column: 25, scope: !3471)
!3473 = !DILocation(line: 3056, column: 59, scope: !3471)
!3474 = !DILocation(line: 3056, column: 73, scope: !3471)
!3475 = !DILocation(line: 3056, column: 40, scope: !3471)
!3476 = !DILocalVariable(name: "reg1", scope: !3471, file: !3, line: 3057, type: !1015)
!3477 = !DILocation(line: 3057, column: 11, scope: !3471)
!3478 = !DILocation(line: 3057, column: 31, scope: !3471)
!3479 = !DILocation(line: 3057, column: 18, scope: !3471)
!3480 = !DILocalVariable(name: "addr", scope: !3471, file: !3, line: 3058, type: !1015)
!3481 = !DILocation(line: 3058, column: 11, scope: !3471)
!3482 = !DILocalVariable(name: "i", scope: !3471, file: !3, line: 3059, type: !7)
!3483 = !DILocation(line: 3059, column: 21, scope: !3471)
!3484 = !DILocation(line: 3061, column: 20, scope: !3471)
!3485 = !DILocation(line: 3061, column: 18, scope: !3471)
!3486 = !DILocation(line: 3062, column: 21, scope: !3471)
!3487 = !DILocation(line: 3062, column: 7, scope: !3471)
!3488 = !DILocation(line: 3063, column: 14, scope: !3471)
!3489 = !DILocation(line: 3063, column: 12, scope: !3471)
!3490 = !DILocation(line: 3064, column: 14, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3471, file: !3, line: 3064, column: 7)
!3492 = !DILocation(line: 3064, column: 12, scope: !3491)
!3493 = !DILocation(line: 3064, column: 28, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3491, file: !3, line: 3064, column: 7)
!3495 = !DILocation(line: 3064, column: 30, scope: !3494)
!3496 = !DILocation(line: 3064, column: 7, scope: !3491)
!3497 = !DILocation(line: 3066, column: 35, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 3065, column: 2)
!3499 = !DILocation(line: 3066, column: 38, scope: !3498)
!3500 = !DILocation(line: 3066, column: 21, scope: !3498)
!3501 = !DILocation(line: 3066, column: 4, scope: !3498)
!3502 = !DILocation(line: 3066, column: 19, scope: !3498)
!3503 = !DILocation(line: 3067, column: 37, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3498, file: !3, line: 3067, column: 8)
!3505 = !DILocation(line: 3067, column: 43, scope: !3504)
!3506 = !DILocation(line: 3067, column: 49, scope: !3504)
!3507 = !DILocation(line: 3067, column: 8, scope: !3504)
!3508 = !DILocation(line: 3067, column: 8, scope: !3498)
!3509 = !DILocation(line: 3068, column: 15, scope: !3504)
!3510 = !DILocation(line: 3068, column: 27, scope: !3504)
!3511 = !DILocation(line: 3068, column: 29, scope: !3504)
!3512 = !DILocation(line: 3068, column: 6, scope: !3504)
!3513 = !DILocation(line: 3069, column: 2, scope: !3498)
!3514 = !DILocation(line: 3064, column: 45, scope: !3494)
!3515 = !DILocation(line: 3064, column: 7, scope: !3494)
!3516 = distinct !{!3516, !3496, !3517}
!3517 = !DILocation(line: 3069, column: 2, scope: !3491)
!3518 = !DILocation(line: 3071, column: 11, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3471, file: !3, line: 3071, column: 11)
!3520 = !DILocation(line: 3071, column: 21, scope: !3519)
!3521 = !DILocation(line: 3071, column: 25, scope: !3519)
!3522 = !DILocation(line: 3071, column: 36, scope: !3519)
!3523 = !DILocation(line: 3071, column: 11, scope: !3471)
!3524 = !DILocation(line: 3073, column: 13, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 3072, column: 2)
!3526 = !DILocation(line: 3073, column: 4, scope: !3525)
!3527 = !DILocation(line: 3074, column: 11, scope: !3528)
!3528 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 3074, column: 4)
!3529 = !DILocation(line: 3074, column: 9, scope: !3528)
!3530 = !DILocation(line: 3074, column: 25, scope: !3531)
!3531 = distinct !DILexicalBlock(scope: !3528, file: !3, line: 3074, column: 4)
!3532 = !DILocation(line: 3074, column: 27, scope: !3531)
!3533 = !DILocation(line: 3074, column: 4, scope: !3528)
!3534 = !DILocation(line: 3075, column: 10, scope: !3535)
!3535 = distinct !DILexicalBlock(scope: !3531, file: !3, line: 3075, column: 10)
!3536 = !DILocation(line: 3075, column: 10, scope: !3531)
!3537 = !DILocation(line: 3076, column: 17, scope: !3535)
!3538 = !DILocation(line: 3076, column: 41, scope: !3535)
!3539 = !DILocation(line: 3076, column: 35, scope: !3535)
!3540 = !DILocation(line: 3076, column: 8, scope: !3535)
!3541 = !DILocation(line: 3074, column: 42, scope: !3531)
!3542 = !DILocation(line: 3074, column: 4, scope: !3531)
!3543 = distinct !{!3543, !3533, !3544}
!3544 = !DILocation(line: 3076, column: 42, scope: !3528)
!3545 = !DILocation(line: 3077, column: 13, scope: !3525)
!3546 = !DILocation(line: 3077, column: 4, scope: !3525)
!3547 = !DILocation(line: 3078, column: 13, scope: !3525)
!3548 = !DILocation(line: 3078, column: 4, scope: !3525)
!3549 = !DILocation(line: 3079, column: 2, scope: !3525)
!3550 = !DILocation(line: 3081, column: 7, scope: !3471)
!3551 = !DILocation(line: 3082, column: 5, scope: !3471)
!3552 = !DILocation(line: 3084, column: 7, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !2602, file: !3, line: 3084, column: 7)
!3554 = !DILocation(line: 3084, column: 13, scope: !3553)
!3555 = !DILocation(line: 3084, column: 25, scope: !3553)
!3556 = !DILocation(line: 3084, column: 28, scope: !3553)
!3557 = !DILocation(line: 3084, column: 34, scope: !3553)
!3558 = !DILocation(line: 3084, column: 7, scope: !2602)
!3559 = !DILocation(line: 3085, column: 5, scope: !3553)
!3560 = !DILocation(line: 3087, column: 10, scope: !2602)
!3561 = !DILocation(line: 3087, column: 3, scope: !2602)
!3562 = !DILocation(line: 3088, column: 1, scope: !2602)
!3563 = distinct !DISubprogram(name: "VEC_sbitmap_base_length", scope: !3, file: !3, line: 3038, type: !3564, scopeLine: 3038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3564 = !DISubroutineType(types: !3565)
!3565 = !{!6, !3566}
!3566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3567, size: 64)
!3567 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2408)
!3568 = !DILocalVariable(name: "vec_", arg: 1, scope: !3563, file: !3, line: 3038, type: !3566)
!3569 = !DILocation(line: 3038, column: 1, scope: !3563)
!3570 = distinct !DISubprogram(name: "VEC_sbitmap_heap_safe_grow_cleared", scope: !3, file: !3, line: 3039, type: !3571, scopeLine: 3039, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3571 = !DISubroutineType(types: !3572)
!3572 = !{null, !3573, !1006}
!3573 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2403, size: 64)
!3574 = !DILocalVariable(name: "vec_", arg: 1, scope: !3570, file: !3, line: 3039, type: !3573)
!3575 = !DILocation(line: 3039, column: 1, scope: !3570)
!3576 = !DILocalVariable(name: "size_", arg: 2, scope: !3570, file: !3, line: 3039, type: !1006)
!3577 = !DILocalVariable(name: "oldsize", scope: !3570, file: !3, line: 3039, type: !1006)
!3578 = distinct !DISubprogram(name: "VEC_sbitmap_base_index", scope: !3, file: !3, line: 3038, type: !3579, scopeLine: 3038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3579 = !DISubroutineType(types: !3580)
!3580 = !{!2415, !3566, !6}
!3581 = !DILocalVariable(name: "vec_", arg: 1, scope: !3578, file: !3, line: 3038, type: !3566)
!3582 = !DILocation(line: 3038, column: 1, scope: !3578)
!3583 = !DILocalVariable(name: "ix_", arg: 2, scope: !3578, file: !3, line: 3038, type: !6)
!3584 = !DILocation(line: 0, scope: !3578)
!3585 = distinct !DISubprogram(name: "SET_BIT", scope: !2416, file: !2416, line: 63, type: !3586, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3586 = !DISubroutineType(types: !3587)
!3587 = !{null, !2415, !6}
!3588 = !DILocalVariable(name: "map", arg: 1, scope: !3585, file: !2416, line: 63, type: !2415)
!3589 = !DILocation(line: 63, column: 18, scope: !3585)
!3590 = !DILocalVariable(name: "bitno", arg: 2, scope: !3585, file: !2416, line: 63, type: !6)
!3591 = !DILocation(line: 63, column: 36, scope: !3585)
!3592 = !DILocation(line: 65, column: 7, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !3585, file: !2416, line: 65, column: 7)
!3594 = !DILocation(line: 65, column: 12, scope: !3593)
!3595 = !DILocation(line: 65, column: 7, scope: !3585)
!3596 = !DILocalVariable(name: "oldbit", scope: !3597, file: !2416, line: 67, type: !136)
!3597 = distinct !DILexicalBlock(scope: !3593, file: !2416, line: 66, column: 5)
!3598 = !DILocation(line: 67, column: 12, scope: !3597)
!3599 = !DILocation(line: 68, column: 16, scope: !3597)
!3600 = !DILocation(line: 68, column: 14, scope: !3597)
!3601 = !DILocation(line: 69, column: 12, scope: !3602)
!3602 = distinct !DILexicalBlock(scope: !3597, file: !2416, line: 69, column: 11)
!3603 = !DILocation(line: 69, column: 11, scope: !3597)
!3604 = !DILocation(line: 70, column: 2, scope: !3602)
!3605 = !DILocation(line: 70, column: 7, scope: !3602)
!3606 = !DILocation(line: 70, column: 16, scope: !3602)
!3607 = !DILocation(line: 70, column: 22, scope: !3602)
!3608 = !DILocation(line: 70, column: 41, scope: !3602)
!3609 = !DILocation(line: 71, column: 5, scope: !3597)
!3610 = !DILocation(line: 73, column: 33, scope: !3585)
!3611 = !DILocation(line: 73, column: 40, scope: !3585)
!3612 = !DILocation(line: 73, column: 29, scope: !3585)
!3613 = !DILocation(line: 72, column: 3, scope: !3585)
!3614 = !DILocation(line: 72, column: 8, scope: !3585)
!3615 = !DILocation(line: 72, column: 13, scope: !3585)
!3616 = !DILocation(line: 72, column: 19, scope: !3585)
!3617 = !DILocation(line: 73, column: 5, scope: !3585)
!3618 = !DILocation(line: 74, column: 1, scope: !3585)
!3619 = distinct !DISubprogram(name: "VEC_sbitmap_base_replace", scope: !3, file: !3, line: 3038, type: !3620, scopeLine: 3038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3620 = !DISubroutineType(types: !3621)
!3621 = !{!2415, !3622, !6, !2415}
!3622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!3623 = !DILocalVariable(name: "vec_", arg: 1, scope: !3619, file: !3, line: 3038, type: !3622)
!3624 = !DILocation(line: 3038, column: 1, scope: !3619)
!3625 = !DILocalVariable(name: "ix_", arg: 2, scope: !3619, file: !3, line: 3038, type: !6)
!3626 = !DILocalVariable(name: "obj_", arg: 3, scope: !3619, file: !3, line: 3038, type: !2415)
!3627 = !DILocalVariable(name: "old_obj_", scope: !3619, file: !3, line: 3038, type: !2415)
!3628 = distinct !DISubprogram(name: "tree_ssa_iv_optimize", scope: !3, file: !3, line: 5859, type: !3629, scopeLine: 5860, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3629 = !DISubroutineType(types: !3630)
!3630 = !{null}
!3631 = !DILocalVariable(name: "loop", scope: !3628, file: !3, line: 5861, type: !1651)
!3632 = !DILocation(line: 5861, column: 16, scope: !3628)
!3633 = !DILocalVariable(name: "data", scope: !3628, file: !3, line: 5862, type: !2531)
!3634 = !DILocation(line: 5862, column: 22, scope: !3628)
!3635 = !DILocalVariable(name: "li", scope: !3628, file: !3, line: 5863, type: !3636)
!3636 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !140, line: 515, baseType: !3637)
!3637 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !140, line: 508, size: 128, elements: !3638)
!3638 = !{!3639, !3640}
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !3637, file: !140, line: 511, baseType: !2513, size: 64)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !3637, file: !140, line: 514, baseType: !6, size: 32, offset: 64)
!3641 = !DILocation(line: 5863, column: 17, scope: !3628)
!3642 = !DILocation(line: 5865, column: 3, scope: !3628)
!3643 = !DILocation(line: 5868, column: 3, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3628, file: !3, line: 5868, column: 3)
!3645 = !DILocation(line: 5868, column: 3, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3644, file: !3, line: 5868, column: 3)
!3647 = !DILocation(line: 5870, column: 11, scope: !3648)
!3648 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 5870, column: 11)
!3649 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 5869, column: 5)
!3650 = !DILocation(line: 5870, column: 21, scope: !3648)
!3651 = !DILocation(line: 5870, column: 25, scope: !3648)
!3652 = !DILocation(line: 5870, column: 36, scope: !3648)
!3653 = !DILocation(line: 5870, column: 11, scope: !3649)
!3654 = !DILocation(line: 5871, column: 18, scope: !3648)
!3655 = !DILocation(line: 5871, column: 24, scope: !3648)
!3656 = !DILocation(line: 5871, column: 2, scope: !3648)
!3657 = !DILocation(line: 5873, column: 41, scope: !3649)
!3658 = !DILocation(line: 5873, column: 7, scope: !3649)
!3659 = !DILocation(line: 5874, column: 5, scope: !3649)
!3660 = distinct !{!3660, !3643, !3661}
!3661 = !DILocation(line: 5874, column: 5, scope: !3644)
!3662 = !DILocation(line: 5876, column: 3, scope: !3628)
!3663 = !DILocation(line: 5877, column: 1, scope: !3628)
!3664 = distinct !DISubprogram(name: "tree_ssa_iv_optimize_init", scope: !3, file: !3, line: 769, type: !3665, scopeLine: 770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3665 = !DISubroutineType(types: !3666)
!3666 = !{null, !2530}
!3667 = !DILocalVariable(name: "data", arg: 1, scope: !3664, file: !3, line: 769, type: !2530)
!3668 = !DILocation(line: 769, column: 48, scope: !3664)
!3669 = !DILocation(line: 771, column: 33, scope: !3664)
!3670 = !DILocation(line: 771, column: 31, scope: !3664)
!3671 = !DILocation(line: 771, column: 3, scope: !3664)
!3672 = !DILocation(line: 771, column: 9, scope: !3664)
!3673 = !DILocation(line: 771, column: 27, scope: !3664)
!3674 = !DILocation(line: 772, column: 24, scope: !3664)
!3675 = !DILocation(line: 772, column: 3, scope: !3664)
!3676 = !DILocation(line: 772, column: 9, scope: !3664)
!3677 = !DILocation(line: 772, column: 22, scope: !3664)
!3678 = !DILocation(line: 773, column: 20, scope: !3664)
!3679 = !DILocation(line: 773, column: 3, scope: !3664)
!3680 = !DILocation(line: 773, column: 9, scope: !3664)
!3681 = !DILocation(line: 773, column: 18, scope: !3664)
!3682 = !DILocation(line: 774, column: 32, scope: !3664)
!3683 = !DILocation(line: 774, column: 3, scope: !3664)
!3684 = !DILocation(line: 774, column: 9, scope: !3664)
!3685 = !DILocation(line: 774, column: 30, scope: !3664)
!3686 = !DILocation(line: 775, column: 3, scope: !3664)
!3687 = !DILocation(line: 775, column: 9, scope: !3664)
!3688 = !DILocation(line: 775, column: 20, scope: !3664)
!3689 = !DILocation(line: 776, column: 3, scope: !3664)
!3690 = !DILocation(line: 776, column: 9, scope: !3664)
!3691 = !DILocation(line: 776, column: 16, scope: !3664)
!3692 = !DILocation(line: 777, column: 19, scope: !3664)
!3693 = !DILocation(line: 777, column: 3, scope: !3664)
!3694 = !DILocation(line: 777, column: 9, scope: !3664)
!3695 = !DILocation(line: 777, column: 17, scope: !3664)
!3696 = !DILocation(line: 778, column: 25, scope: !3664)
!3697 = !DILocation(line: 778, column: 3, scope: !3664)
!3698 = !DILocation(line: 778, column: 9, scope: !3664)
!3699 = !DILocation(line: 778, column: 23, scope: !3664)
!3700 = !DILocation(line: 779, column: 23, scope: !3664)
!3701 = !DILocation(line: 779, column: 21, scope: !3664)
!3702 = !DILocation(line: 780, column: 1, scope: !3664)
!3703 = distinct !DISubprogram(name: "fel_init", scope: !140, file: !140, line: 535, type: !3704, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3704 = !DISubroutineType(types: !3705)
!3705 = !{null, !3706, !3707, !6}
!3706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3636, size: 64)
!3707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1678, size: 64)
!3708 = !DILocalVariable(name: "li", arg: 1, scope: !3703, file: !140, line: 535, type: !3706)
!3709 = !DILocation(line: 535, column: 26, scope: !3703)
!3710 = !DILocalVariable(name: "loop", arg: 2, scope: !3703, file: !140, line: 535, type: !3707)
!3711 = !DILocation(line: 535, column: 38, scope: !3703)
!3712 = !DILocalVariable(name: "flags", arg: 3, scope: !3703, file: !140, line: 535, type: !6)
!3713 = !DILocation(line: 535, column: 53, scope: !3703)
!3714 = !DILocalVariable(name: "aloop", scope: !3703, file: !140, line: 537, type: !1651)
!3715 = !DILocation(line: 537, column: 16, scope: !3703)
!3716 = !DILocalVariable(name: "i", scope: !3703, file: !140, line: 538, type: !6)
!3717 = !DILocation(line: 538, column: 12, scope: !3703)
!3718 = !DILocalVariable(name: "mn", scope: !3703, file: !140, line: 539, type: !1006)
!3719 = !DILocation(line: 539, column: 7, scope: !3703)
!3720 = !DILocation(line: 541, column: 3, scope: !3703)
!3721 = !DILocation(line: 541, column: 7, scope: !3703)
!3722 = !DILocation(line: 541, column: 11, scope: !3703)
!3723 = !DILocation(line: 542, column: 8, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3703, file: !140, line: 542, column: 7)
!3725 = !DILocation(line: 542, column: 7, scope: !3703)
!3726 = !DILocation(line: 544, column: 7, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3724, file: !140, line: 543, column: 5)
!3728 = !DILocation(line: 544, column: 11, scope: !3727)
!3729 = !DILocation(line: 544, column: 20, scope: !3727)
!3730 = !DILocation(line: 545, column: 8, scope: !3727)
!3731 = !DILocation(line: 545, column: 13, scope: !3727)
!3732 = !DILocation(line: 546, column: 7, scope: !3727)
!3733 = !DILocation(line: 549, column: 18, scope: !3703)
!3734 = !DILocation(line: 549, column: 3, scope: !3703)
!3735 = !DILocation(line: 549, column: 7, scope: !3703)
!3736 = !DILocation(line: 549, column: 16, scope: !3703)
!3737 = !DILocation(line: 550, column: 9, scope: !3703)
!3738 = !DILocation(line: 550, column: 15, scope: !3703)
!3739 = !DILocation(line: 550, column: 8, scope: !3703)
!3740 = !DILocation(line: 550, column: 6, scope: !3703)
!3741 = !DILocation(line: 552, column: 7, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3703, file: !140, line: 552, column: 7)
!3743 = !DILocation(line: 552, column: 13, scope: !3742)
!3744 = !DILocation(line: 552, column: 7, scope: !3703)
!3745 = !DILocation(line: 554, column: 14, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3747, file: !140, line: 554, column: 7)
!3747 = distinct !DILexicalBlock(scope: !3742, file: !140, line: 553, column: 5)
!3748 = !DILocation(line: 554, column: 12, scope: !3746)
!3749 = !DILocation(line: 554, column: 19, scope: !3750)
!3750 = distinct !DILexicalBlock(scope: !3746, file: !140, line: 554, column: 7)
!3751 = !DILocation(line: 554, column: 7, scope: !3746)
!3752 = !DILocation(line: 555, column: 6, scope: !3753)
!3753 = distinct !DILexicalBlock(scope: !3750, file: !140, line: 555, column: 6)
!3754 = !DILocation(line: 555, column: 12, scope: !3753)
!3755 = !DILocation(line: 556, column: 6, scope: !3753)
!3756 = !DILocation(line: 556, column: 9, scope: !3753)
!3757 = !DILocation(line: 556, column: 16, scope: !3753)
!3758 = !DILocation(line: 556, column: 22, scope: !3753)
!3759 = !DILocation(line: 557, column: 6, scope: !3753)
!3760 = !DILocation(line: 557, column: 9, scope: !3753)
!3761 = !DILocation(line: 557, column: 16, scope: !3753)
!3762 = !DILocation(line: 557, column: 23, scope: !3753)
!3763 = !DILocation(line: 557, column: 20, scope: !3753)
!3764 = !DILocation(line: 555, column: 6, scope: !3750)
!3765 = !DILocation(line: 558, column: 4, scope: !3753)
!3766 = !DILocation(line: 554, column: 75, scope: !3750)
!3767 = !DILocation(line: 554, column: 7, scope: !3750)
!3768 = distinct !{!3768, !3751, !3769}
!3769 = !DILocation(line: 558, column: 4, scope: !3746)
!3770 = !DILocation(line: 559, column: 5, scope: !3747)
!3771 = !DILocation(line: 560, column: 12, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3742, file: !140, line: 560, column: 12)
!3773 = !DILocation(line: 560, column: 18, scope: !3772)
!3774 = !DILocation(line: 560, column: 12, scope: !3742)
!3775 = !DILocation(line: 563, column: 20, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3777, file: !140, line: 563, column: 7)
!3777 = distinct !DILexicalBlock(scope: !3772, file: !140, line: 561, column: 5)
!3778 = !DILocation(line: 563, column: 35, scope: !3776)
!3779 = !DILocation(line: 563, column: 18, scope: !3776)
!3780 = !DILocation(line: 563, column: 12, scope: !3776)
!3781 = !DILocation(line: 564, column: 5, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3776, file: !140, line: 563, column: 7)
!3783 = !DILocation(line: 564, column: 12, scope: !3782)
!3784 = !DILocation(line: 564, column: 18, scope: !3782)
!3785 = !DILocation(line: 563, column: 7, scope: !3776)
!3786 = !DILocation(line: 566, column: 2, scope: !3782)
!3787 = !DILocation(line: 565, column: 13, scope: !3782)
!3788 = !DILocation(line: 565, column: 20, scope: !3782)
!3789 = !DILocation(line: 565, column: 11, scope: !3782)
!3790 = !DILocation(line: 563, column: 7, scope: !3782)
!3791 = distinct !{!3791, !3785, !3792}
!3792 = !DILocation(line: 566, column: 2, scope: !3776)
!3793 = !DILocation(line: 568, column: 7, scope: !3777)
!3794 = !DILocation(line: 570, column: 8, scope: !3795)
!3795 = distinct !DILexicalBlock(scope: !3796, file: !140, line: 570, column: 8)
!3796 = distinct !DILexicalBlock(scope: !3777, file: !140, line: 569, column: 2)
!3797 = !DILocation(line: 570, column: 15, scope: !3795)
!3798 = !DILocation(line: 570, column: 22, scope: !3795)
!3799 = !DILocation(line: 570, column: 19, scope: !3795)
!3800 = !DILocation(line: 570, column: 8, scope: !3796)
!3801 = !DILocation(line: 571, column: 6, scope: !3795)
!3802 = !DILocation(line: 573, column: 8, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3796, file: !140, line: 573, column: 8)
!3804 = !DILocation(line: 573, column: 15, scope: !3803)
!3805 = !DILocation(line: 573, column: 8, scope: !3796)
!3806 = !DILocation(line: 575, column: 21, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3808, file: !140, line: 575, column: 8)
!3808 = distinct !DILexicalBlock(scope: !3803, file: !140, line: 574, column: 6)
!3809 = !DILocation(line: 575, column: 28, scope: !3807)
!3810 = !DILocation(line: 575, column: 19, scope: !3807)
!3811 = !DILocation(line: 575, column: 13, scope: !3807)
!3812 = !DILocation(line: 576, column: 6, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3807, file: !140, line: 575, column: 8)
!3814 = !DILocation(line: 576, column: 13, scope: !3813)
!3815 = !DILocation(line: 576, column: 19, scope: !3813)
!3816 = !DILocation(line: 575, column: 8, scope: !3807)
!3817 = !DILocation(line: 578, column: 3, scope: !3813)
!3818 = !DILocation(line: 577, column: 14, scope: !3813)
!3819 = !DILocation(line: 577, column: 21, scope: !3813)
!3820 = !DILocation(line: 577, column: 12, scope: !3813)
!3821 = !DILocation(line: 575, column: 8, scope: !3813)
!3822 = distinct !{!3822, !3816, !3823}
!3823 = !DILocation(line: 578, column: 3, scope: !3807)
!3824 = !DILocation(line: 579, column: 6, scope: !3808)
!3825 = !DILocation(line: 580, column: 26, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3803, file: !140, line: 580, column: 13)
!3827 = !DILocation(line: 580, column: 14, scope: !3826)
!3828 = !DILocation(line: 580, column: 13, scope: !3803)
!3829 = !DILocation(line: 581, column: 6, scope: !3826)
!3830 = !DILocation(line: 583, column: 26, scope: !3826)
!3831 = !DILocation(line: 583, column: 14, scope: !3826)
!3832 = !DILocation(line: 583, column: 12, scope: !3826)
!3833 = distinct !{!3833, !3793, !3834}
!3834 = !DILocation(line: 584, column: 2, scope: !3777)
!3835 = !DILocation(line: 585, column: 5, scope: !3777)
!3836 = !DILocation(line: 589, column: 15, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3772, file: !140, line: 587, column: 5)
!3838 = !DILocation(line: 589, column: 30, scope: !3837)
!3839 = !DILocation(line: 589, column: 13, scope: !3837)
!3840 = !DILocation(line: 590, column: 7, scope: !3837)
!3841 = !DILocation(line: 592, column: 8, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3843, file: !140, line: 592, column: 8)
!3843 = distinct !DILexicalBlock(scope: !3837, file: !140, line: 591, column: 2)
!3844 = !DILocation(line: 592, column: 15, scope: !3842)
!3845 = !DILocation(line: 592, column: 22, scope: !3842)
!3846 = !DILocation(line: 592, column: 19, scope: !3842)
!3847 = !DILocation(line: 592, column: 8, scope: !3843)
!3848 = !DILocation(line: 593, column: 6, scope: !3842)
!3849 = !DILocation(line: 595, column: 8, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3843, file: !140, line: 595, column: 8)
!3851 = !DILocation(line: 595, column: 15, scope: !3850)
!3852 = !DILocation(line: 595, column: 21, scope: !3850)
!3853 = !DILocation(line: 595, column: 8, scope: !3843)
!3854 = !DILocation(line: 596, column: 14, scope: !3850)
!3855 = !DILocation(line: 596, column: 21, scope: !3850)
!3856 = !DILocation(line: 596, column: 12, scope: !3850)
!3857 = !DILocation(line: 596, column: 6, scope: !3850)
!3858 = !DILocation(line: 599, column: 8, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3850, file: !140, line: 598, column: 6)
!3860 = !DILocation(line: 599, column: 15, scope: !3859)
!3861 = !DILocation(line: 599, column: 21, scope: !3859)
!3862 = !DILocation(line: 599, column: 29, scope: !3859)
!3863 = !DILocation(line: 599, column: 32, scope: !3859)
!3864 = !DILocation(line: 599, column: 39, scope: !3859)
!3865 = !DILocation(line: 599, column: 44, scope: !3859)
!3866 = !DILocation(line: 0, scope: !3859)
!3867 = !DILocation(line: 600, column: 23, scope: !3859)
!3868 = !DILocation(line: 600, column: 11, scope: !3859)
!3869 = !DILocation(line: 600, column: 9, scope: !3859)
!3870 = distinct !{!3870, !3858, !3871}
!3871 = !DILocation(line: 600, column: 28, scope: !3859)
!3872 = !DILocation(line: 601, column: 12, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3859, file: !140, line: 601, column: 12)
!3874 = !DILocation(line: 601, column: 18, scope: !3873)
!3875 = !DILocation(line: 601, column: 12, scope: !3859)
!3876 = !DILocation(line: 602, column: 3, scope: !3873)
!3877 = !DILocation(line: 603, column: 16, scope: !3859)
!3878 = !DILocation(line: 603, column: 23, scope: !3859)
!3879 = !DILocation(line: 603, column: 14, scope: !3859)
!3880 = distinct !{!3880, !3840, !3881}
!3881 = !DILocation(line: 605, column: 2, scope: !3837)
!3882 = !DILocation(line: 608, column: 13, scope: !3703)
!3883 = !DILocation(line: 608, column: 17, scope: !3703)
!3884 = !DILocation(line: 608, column: 3, scope: !3703)
!3885 = !DILocation(line: 609, column: 1, scope: !3703)
!3886 = distinct !DISubprogram(name: "tree_ssa_iv_optimize_loop", scope: !3, file: !3, line: 5780, type: !3887, scopeLine: 5781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!3887 = !DISubroutineType(types: !3888)
!3888 = !{!136, !2530, !1651}
!3889 = !DILocalVariable(name: "data", arg: 1, scope: !3886, file: !3, line: 5780, type: !2530)
!3890 = !DILocation(line: 5780, column: 48, scope: !3886)
!3891 = !DILocalVariable(name: "loop", arg: 2, scope: !3886, file: !3, line: 5780, type: !1651)
!3892 = !DILocation(line: 5780, column: 67, scope: !3886)
!3893 = !DILocalVariable(name: "changed", scope: !3886, file: !3, line: 5782, type: !136)
!3894 = !DILocation(line: 5782, column: 8, scope: !3886)
!3895 = !DILocalVariable(name: "iv_ca", scope: !3886, file: !3, line: 5783, type: !2576)
!3896 = !DILocation(line: 5783, column: 17, scope: !3886)
!3897 = !DILocalVariable(name: "exit", scope: !3886, file: !3, line: 5784, type: !1416)
!3898 = !DILocation(line: 5784, column: 8, scope: !3886)
!3899 = !DILocalVariable(name: "body", scope: !3886, file: !3, line: 5785, type: !3900)
!3900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1399, size: 64)
!3901 = !DILocation(line: 5785, column: 16, scope: !3886)
!3902 = !DILocation(line: 5787, column: 3, scope: !3886)
!3903 = !DILocation(line: 5788, column: 24, scope: !3886)
!3904 = !DILocation(line: 5788, column: 3, scope: !3886)
!3905 = !DILocation(line: 5788, column: 9, scope: !3886)
!3906 = !DILocation(line: 5788, column: 22, scope: !3886)
!3907 = !DILocation(line: 5789, column: 44, scope: !3886)
!3908 = !DILocation(line: 5789, column: 17, scope: !3886)
!3909 = !DILocation(line: 5789, column: 3, scope: !3886)
!3910 = !DILocation(line: 5789, column: 9, scope: !3886)
!3911 = !DILocation(line: 5789, column: 15, scope: !3886)
!3912 = !DILocation(line: 5791, column: 7, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 5791, column: 7)
!3914 = !DILocation(line: 5791, column: 17, scope: !3913)
!3915 = !DILocation(line: 5791, column: 21, scope: !3913)
!3916 = !DILocation(line: 5791, column: 32, scope: !3913)
!3917 = !DILocation(line: 5791, column: 7, scope: !3886)
!3918 = !DILocation(line: 5793, column: 16, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 5792, column: 5)
!3920 = !DILocation(line: 5793, column: 51, scope: !3919)
!3921 = !DILocation(line: 5793, column: 57, scope: !3919)
!3922 = !DILocation(line: 5793, column: 7, scope: !3919)
!3923 = !DILocation(line: 5795, column: 31, scope: !3919)
!3924 = !DILocation(line: 5795, column: 14, scope: !3919)
!3925 = !DILocation(line: 5795, column: 12, scope: !3919)
!3926 = !DILocation(line: 5796, column: 11, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3919, file: !3, line: 5796, column: 11)
!3928 = !DILocation(line: 5796, column: 11, scope: !3919)
!3929 = !DILocation(line: 5798, column: 13, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3927, file: !3, line: 5797, column: 2)
!3931 = !DILocation(line: 5799, column: 6, scope: !3930)
!3932 = !DILocation(line: 5799, column: 12, scope: !3930)
!3933 = !DILocation(line: 5799, column: 17, scope: !3930)
!3934 = !DILocation(line: 5799, column: 24, scope: !3930)
!3935 = !DILocation(line: 5799, column: 30, scope: !3930)
!3936 = !DILocation(line: 5799, column: 36, scope: !3930)
!3937 = !DILocation(line: 5798, column: 4, scope: !3930)
!3938 = !DILocation(line: 5800, column: 23, scope: !3930)
!3939 = !DILocation(line: 5800, column: 45, scope: !3930)
!3940 = !DILocation(line: 5800, column: 51, scope: !3930)
!3941 = !DILocation(line: 5800, column: 34, scope: !3930)
!3942 = !DILocation(line: 5800, column: 4, scope: !3930)
!3943 = !DILocation(line: 5801, column: 13, scope: !3930)
!3944 = !DILocation(line: 5801, column: 4, scope: !3930)
!3945 = !DILocation(line: 5802, column: 2, scope: !3930)
!3946 = !DILocation(line: 5804, column: 16, scope: !3919)
!3947 = !DILocation(line: 5804, column: 7, scope: !3919)
!3948 = !DILocation(line: 5805, column: 5, scope: !3919)
!3949 = !DILocation(line: 5807, column: 25, scope: !3886)
!3950 = !DILocation(line: 5807, column: 10, scope: !3886)
!3951 = !DILocation(line: 5807, column: 8, scope: !3886)
!3952 = !DILocation(line: 5808, column: 40, scope: !3886)
!3953 = !DILocation(line: 5808, column: 46, scope: !3886)
!3954 = !DILocation(line: 5808, column: 52, scope: !3886)
!3955 = !DILocation(line: 5808, column: 3, scope: !3886)
!3956 = !DILocation(line: 5809, column: 9, scope: !3886)
!3957 = !DILocation(line: 5809, column: 3, scope: !3886)
!3958 = !DILocation(line: 5813, column: 34, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 5813, column: 7)
!3960 = !DILocation(line: 5813, column: 8, scope: !3959)
!3961 = !DILocation(line: 5813, column: 7, scope: !3886)
!3962 = !DILocation(line: 5814, column: 5, scope: !3959)
!3963 = !DILocation(line: 5817, column: 26, scope: !3886)
!3964 = !DILocation(line: 5817, column: 3, scope: !3886)
!3965 = !DILocation(line: 5818, column: 18, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 5818, column: 7)
!3967 = !DILocation(line: 5818, column: 7, scope: !3966)
!3968 = !DILocation(line: 5818, column: 26, scope: !3966)
!3969 = !DILocation(line: 5818, column: 24, scope: !3966)
!3970 = !DILocation(line: 5818, column: 7, scope: !3886)
!3971 = !DILocation(line: 5819, column: 5, scope: !3966)
!3972 = !DILocation(line: 5822, column: 23, scope: !3886)
!3973 = !DILocation(line: 5822, column: 3, scope: !3886)
!3974 = !DILocation(line: 5825, column: 23, scope: !3886)
!3975 = !DILocation(line: 5825, column: 3, scope: !3886)
!3976 = !DILocation(line: 5826, column: 27, scope: !3886)
!3977 = !DILocation(line: 5826, column: 3, scope: !3886)
!3978 = !DILocation(line: 5827, column: 24, scope: !3886)
!3979 = !DILocation(line: 5827, column: 3, scope: !3886)
!3980 = !DILocation(line: 5830, column: 32, scope: !3886)
!3981 = !DILocation(line: 5830, column: 11, scope: !3886)
!3982 = !DILocation(line: 5830, column: 9, scope: !3886)
!3983 = !DILocation(line: 5831, column: 8, scope: !3984)
!3984 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 5831, column: 7)
!3985 = !DILocation(line: 5831, column: 7, scope: !3886)
!3986 = !DILocation(line: 5832, column: 5, scope: !3984)
!3987 = !DILocation(line: 5833, column: 11, scope: !3886)
!3988 = !DILocation(line: 5836, column: 19, scope: !3886)
!3989 = !DILocation(line: 5836, column: 25, scope: !3886)
!3990 = !DILocation(line: 5836, column: 3, scope: !3886)
!3991 = !DILocation(line: 5837, column: 3, scope: !3886)
!3992 = !DILocation(line: 5840, column: 17, scope: !3886)
!3993 = !DILocation(line: 5840, column: 3, scope: !3886)
!3994 = !DILocation(line: 5843, column: 22, scope: !3886)
!3995 = !DILocation(line: 5843, column: 3, scope: !3886)
!3996 = !DILocation(line: 5848, column: 3, scope: !3886)
!3997 = !DILabel(scope: !3886, name: "finish", file: !3, line: 5850)
!3998 = !DILocation(line: 5850, column: 1, scope: !3886)
!3999 = !DILocation(line: 5851, column: 19, scope: !3886)
!4000 = !DILocation(line: 5851, column: 3, scope: !3886)
!4001 = !DILocation(line: 5853, column: 10, scope: !3886)
!4002 = !DILocation(line: 5853, column: 3, scope: !3886)
!4003 = distinct !DISubprogram(name: "fel_next", scope: !140, file: !140, line: 518, type: !4004, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4004 = !DISubroutineType(types: !4005)
!4005 = !{null, !3706, !3707}
!4006 = !DILocalVariable(name: "li", arg: 1, scope: !4003, file: !140, line: 518, type: !3706)
!4007 = !DILocation(line: 518, column: 26, scope: !4003)
!4008 = !DILocalVariable(name: "loop", arg: 2, scope: !4003, file: !140, line: 518, type: !3707)
!4009 = !DILocation(line: 518, column: 38, scope: !4003)
!4010 = !DILocalVariable(name: "anum", scope: !4003, file: !140, line: 520, type: !1006)
!4011 = !DILocation(line: 520, column: 7, scope: !4003)
!4012 = !DILocation(line: 522, column: 3, scope: !4003)
!4013 = !DILocation(line: 522, column: 10, scope: !4003)
!4014 = !DILocation(line: 524, column: 7, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !4003, file: !140, line: 523, column: 5)
!4016 = !DILocation(line: 524, column: 11, scope: !4015)
!4017 = !DILocation(line: 524, column: 14, scope: !4015)
!4018 = !DILocation(line: 525, column: 25, scope: !4015)
!4019 = !DILocation(line: 525, column: 15, scope: !4015)
!4020 = !DILocation(line: 525, column: 8, scope: !4015)
!4021 = !DILocation(line: 525, column: 13, scope: !4015)
!4022 = !DILocation(line: 526, column: 12, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4015, file: !140, line: 526, column: 11)
!4024 = !DILocation(line: 526, column: 11, scope: !4023)
!4025 = !DILocation(line: 526, column: 11, scope: !4015)
!4026 = !DILocation(line: 527, column: 2, scope: !4023)
!4027 = distinct !{!4027, !4012, !4028}
!4028 = !DILocation(line: 528, column: 5, scope: !4003)
!4029 = !DILocation(line: 530, column: 3, scope: !4003)
!4030 = !DILocation(line: 531, column: 4, scope: !4003)
!4031 = !DILocation(line: 531, column: 9, scope: !4003)
!4032 = !DILocation(line: 532, column: 1, scope: !4003)
!4033 = distinct !DISubprogram(name: "tree_ssa_iv_optimize_finalize", scope: !3, file: !3, line: 5765, type: !3665, scopeLine: 5766, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4034 = !DILocalVariable(name: "data", arg: 1, scope: !4033, file: !3, line: 5765, type: !2530)
!4035 = !DILocation(line: 5765, column: 52, scope: !4033)
!4036 = !DILocation(line: 5767, column: 19, scope: !4033)
!4037 = !DILocation(line: 5767, column: 3, scope: !4033)
!4038 = !DILocation(line: 5768, column: 9, scope: !4033)
!4039 = !DILocation(line: 5768, column: 15, scope: !4033)
!4040 = !DILocation(line: 5768, column: 3, scope: !4033)
!4041 = !DILocation(line: 5769, column: 3, scope: !4033)
!4042 = !DILocation(line: 5770, column: 3, scope: !4033)
!4043 = !DILocation(line: 5772, column: 3, scope: !4033)
!4044 = !DILocation(line: 5773, column: 3, scope: !4033)
!4045 = !DILocation(line: 5774, column: 3, scope: !4033)
!4046 = !DILocation(line: 5775, column: 1, scope: !4033)
!4047 = distinct !DISubprogram(name: "VEC_iv_use_p_base_length", scope: !3, file: !3, line: 215, type: !4048, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4048 = !DISubroutineType(types: !4049)
!4049 = !{!6, !4050}
!4050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4051, size: 64)
!4051 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2449)
!4052 = !DILocalVariable(name: "vec_", arg: 1, scope: !4047, file: !3, line: 215, type: !4050)
!4053 = !DILocation(line: 215, column: 1, scope: !4047)
!4054 = distinct !DISubprogram(name: "VEC_iv_use_p_base_index", scope: !3, file: !3, line: 215, type: !4055, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4055 = !DISubroutineType(types: !4056)
!4056 = !{!2456, !4050, !6}
!4057 = !DILocalVariable(name: "vec_", arg: 1, scope: !4054, file: !3, line: 215, type: !4050)
!4058 = !DILocation(line: 215, column: 1, scope: !4054)
!4059 = !DILocalVariable(name: "ix_", arg: 2, scope: !4054, file: !3, line: 215, type: !6)
!4060 = !DILocation(line: 0, scope: !4054)
!4061 = distinct !DISubprogram(name: "abnormal_ssa_name_p", scope: !3, file: !3, line: 632, type: !2991, scopeLine: 633, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4062 = !DILocalVariable(name: "exp", arg: 1, scope: !4061, file: !3, line: 632, type: !1134)
!4063 = !DILocation(line: 632, column: 27, scope: !4061)
!4064 = !DILocation(line: 634, column: 8, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 634, column: 7)
!4066 = !DILocation(line: 634, column: 7, scope: !4061)
!4067 = !DILocation(line: 635, column: 5, scope: !4065)
!4068 = !DILocation(line: 637, column: 7, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 637, column: 7)
!4070 = !DILocation(line: 637, column: 23, scope: !4069)
!4071 = !DILocation(line: 637, column: 7, scope: !4061)
!4072 = !DILocation(line: 638, column: 5, scope: !4069)
!4073 = !DILocation(line: 640, column: 10, scope: !4061)
!4074 = !DILocation(line: 640, column: 48, scope: !4061)
!4075 = !DILocation(line: 640, column: 3, scope: !4061)
!4076 = !DILocation(line: 641, column: 1, scope: !4061)
!4077 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !140, file: !140, line: 85, type: !4078, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4078 = !DISubroutineType(types: !4079)
!4079 = !{!6, !4080}
!4080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4081, size: 64)
!4081 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1671)
!4082 = !DILocalVariable(name: "vec_", arg: 1, scope: !4077, file: !140, line: 85, type: !4080)
!4083 = !DILocation(line: 85, column: 1, scope: !4077)
!4084 = distinct !DISubprogram(name: "gimple_has_ops", scope: !574, file: !574, line: 1274, type: !4085, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4085 = !DISubroutineType(types: !4086)
!4086 = !{!136, !3158}
!4087 = !DILocalVariable(name: "g", arg: 1, scope: !4084, file: !574, line: 1274, type: !3158)
!4088 = !DILocation(line: 1274, column: 30, scope: !4084)
!4089 = !DILocation(line: 1276, column: 23, scope: !4084)
!4090 = !DILocation(line: 1276, column: 10, scope: !4084)
!4091 = !DILocation(line: 1276, column: 26, scope: !4084)
!4092 = !DILocation(line: 1276, column: 41, scope: !4084)
!4093 = !DILocation(line: 1276, column: 57, scope: !4084)
!4094 = !DILocation(line: 1276, column: 44, scope: !4084)
!4095 = !DILocation(line: 1276, column: 60, scope: !4084)
!4096 = !DILocation(line: 0, scope: !4084)
!4097 = !DILocation(line: 1276, column: 3, scope: !4084)
!4098 = distinct !DISubprogram(name: "gimple_ops", scope: !574, file: !574, line: 1614, type: !4099, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4099 = !DISubroutineType(types: !4100)
!4100 = !{!1470, !1436}
!4101 = !DILocalVariable(name: "gs", arg: 1, scope: !4098, file: !574, line: 1614, type: !1436)
!4102 = !DILocation(line: 1614, column: 20, scope: !4098)
!4103 = !DILocalVariable(name: "off", scope: !4098, file: !574, line: 1616, type: !1581)
!4104 = !DILocation(line: 1616, column: 10, scope: !4098)
!4105 = !DILocation(line: 1621, column: 56, scope: !4098)
!4106 = !DILocation(line: 1621, column: 28, scope: !4098)
!4107 = !DILocation(line: 1621, column: 9, scope: !4098)
!4108 = !DILocation(line: 1621, column: 7, scope: !4098)
!4109 = !DILocation(line: 1622, column: 3, scope: !4098)
!4110 = !DILocation(line: 1624, column: 29, scope: !4098)
!4111 = !DILocation(line: 1624, column: 20, scope: !4098)
!4112 = !DILocation(line: 1624, column: 34, scope: !4098)
!4113 = !DILocation(line: 1624, column: 32, scope: !4098)
!4114 = !DILocation(line: 1624, column: 10, scope: !4098)
!4115 = !DILocation(line: 1624, column: 3, scope: !4098)
!4116 = distinct !DISubprogram(name: "gimple_code", scope: !574, file: !574, line: 1052, type: !4117, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4117 = !DISubroutineType(types: !4118)
!4118 = !{!573, !3158}
!4119 = !DILocalVariable(name: "g", arg: 1, scope: !4116, file: !574, line: 1052, type: !3158)
!4120 = !DILocation(line: 1052, column: 27, scope: !4116)
!4121 = !DILocation(line: 1054, column: 10, scope: !4116)
!4122 = !DILocation(line: 1054, column: 13, scope: !4116)
!4123 = !DILocation(line: 1054, column: 20, scope: !4116)
!4124 = !DILocation(line: 1054, column: 3, scope: !4116)
!4125 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !574, file: !574, line: 1073, type: !4126, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4126 = !DISubroutineType(types: !4127)
!4127 = !{!612, !1436}
!4128 = !DILocalVariable(name: "gs", arg: 1, scope: !4125, file: !574, line: 1073, type: !1436)
!4129 = !DILocation(line: 1073, column: 36, scope: !4125)
!4130 = !DILocation(line: 1075, column: 37, scope: !4125)
!4131 = !DILocation(line: 1075, column: 24, scope: !4125)
!4132 = !DILocation(line: 1075, column: 10, scope: !4125)
!4133 = !DILocation(line: 1075, column: 3, scope: !4125)
!4134 = distinct !DISubprogram(name: "gss_for_code", scope: !574, file: !574, line: 1061, type: !4135, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4135 = !DISubroutineType(types: !4136)
!4136 = !{!612, !573}
!4137 = !DILocalVariable(name: "code", arg: 1, scope: !4134, file: !574, line: 1061, type: !573)
!4138 = !DILocation(line: 1061, column: 32, scope: !4134)
!4139 = !DILocation(line: 1066, column: 24, scope: !4134)
!4140 = !DILocation(line: 1066, column: 10, scope: !4134)
!4141 = !DILocation(line: 1066, column: 3, scope: !4134)
!4142 = distinct !DISubprogram(name: "VEC_sbitmap_heap_safe_grow", scope: !3, file: !3, line: 3039, type: !3571, scopeLine: 3039, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4143 = !DILocalVariable(name: "vec_", arg: 1, scope: !4142, file: !3, line: 3039, type: !3573)
!4144 = !DILocation(line: 3039, column: 1, scope: !4142)
!4145 = !DILocalVariable(name: "size_", arg: 2, scope: !4142, file: !3, line: 3039, type: !1006)
!4146 = !DILocation(line: 0, scope: !4142)
!4147 = distinct !DISubprogram(name: "VEC_sbitmap_base_address", scope: !3, file: !3, line: 3038, type: !4148, scopeLine: 3038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4148 = !DISubroutineType(types: !4149)
!4149 = !{!4150, !3622}
!4150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2415, size: 64)
!4151 = !DILocalVariable(name: "vec_", arg: 1, scope: !4147, file: !3, line: 3038, type: !3622)
!4152 = !DILocation(line: 3038, column: 1, scope: !4147)
!4153 = distinct !DISubprogram(name: "VEC_sbitmap_heap_reserve_exact", scope: !3, file: !3, line: 3039, type: !4154, scopeLine: 3039, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4154 = !DISubroutineType(types: !4155)
!4155 = !{!1006, !3573, !1006}
!4156 = !DILocalVariable(name: "vec_", arg: 1, scope: !4153, file: !3, line: 3039, type: !3573)
!4157 = !DILocation(line: 3039, column: 1, scope: !4153)
!4158 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4153, file: !3, line: 3039, type: !1006)
!4159 = !DILocalVariable(name: "extend", scope: !4153, file: !3, line: 3039, type: !1006)
!4160 = !DILocation(line: 3039, column: 1, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 3039, column: 1)
!4162 = distinct !DISubprogram(name: "VEC_sbitmap_base_space", scope: !3, file: !3, line: 3038, type: !4163, scopeLine: 3038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4163 = !DISubroutineType(types: !4164)
!4164 = !{!1006, !3622, !1006}
!4165 = !DILocalVariable(name: "vec_", arg: 1, scope: !4162, file: !3, line: 3038, type: !3622)
!4166 = !DILocation(line: 3038, column: 1, scope: !4162)
!4167 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4162, file: !3, line: 3038, type: !1006)
!4168 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !160, file: !160, line: 182, type: !4169, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4169 = !DISubroutineType(types: !4170)
!4170 = !{!6, !4171}
!4171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4172, size: 64)
!4172 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1834)
!4173 = !DILocalVariable(name: "vec_", arg: 1, scope: !4168, file: !160, line: 182, type: !4171)
!4174 = !DILocation(line: 182, column: 1, scope: !4168)
!4175 = distinct !DISubprogram(name: "VEC_iv_use_p_heap_alloc", scope: !3, file: !3, line: 216, type: !4176, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4176 = !DISubroutineType(types: !4177)
!4177 = !{!2444, !1006}
!4178 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4175, file: !3, line: 216, type: !1006)
!4179 = !DILocation(line: 216, column: 1, scope: !4175)
!4180 = distinct !DISubprogram(name: "VEC_iv_cand_p_heap_alloc", scope: !3, file: !3, line: 220, type: !4181, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4181 = !DISubroutineType(types: !4182)
!4182 = !{!2495, !1006}
!4183 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4180, file: !3, line: 220, type: !1006)
!4184 = !DILocation(line: 220, column: 1, scope: !4180)
!4185 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !160, file: !160, line: 184, type: !4186, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4186 = !DISubroutineType(types: !4187)
!4187 = !{!2508, !1006}
!4188 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4185, file: !160, line: 184, type: !1006)
!4189 = !DILocation(line: 184, column: 1, scope: !4185)
!4190 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2515, file: !2515, line: 32, type: !4191, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4191 = !DISubroutineType(types: !4192)
!4192 = !{!2513, !1006}
!4193 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4190, file: !2515, line: 32, type: !1006)
!4194 = !DILocation(line: 32, column: 1, scope: !4190)
!4195 = distinct !DISubprogram(name: "number_of_loops", scope: !140, file: !140, line: 459, type: !4196, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4196 = !DISubroutineType(types: !4197)
!4197 = !{!6}
!4198 = !DILocation(line: 461, column: 8, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4195, file: !140, line: 461, column: 7)
!4200 = !DILocation(line: 461, column: 7, scope: !4195)
!4201 = !DILocation(line: 462, column: 5, scope: !4199)
!4202 = !DILocation(line: 464, column: 10, scope: !4195)
!4203 = !DILocation(line: 464, column: 3, scope: !4195)
!4204 = !DILocation(line: 465, column: 1, scope: !4195)
!4205 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !140, file: !140, line: 85, type: !4206, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4206 = !DISubroutineType(types: !4207)
!4207 = !{!1006, !4080, !6, !3707}
!4208 = !DILocalVariable(name: "vec_", arg: 1, scope: !4205, file: !140, line: 85, type: !4080)
!4209 = !DILocation(line: 85, column: 1, scope: !4205)
!4210 = !DILocalVariable(name: "ix_", arg: 2, scope: !4205, file: !140, line: 85, type: !6)
!4211 = !DILocalVariable(name: "ptr", arg: 3, scope: !4205, file: !140, line: 85, type: !3707)
!4212 = !DILocation(line: 85, column: 1, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4205, file: !140, line: 85, column: 1)
!4214 = !DILocation(line: 85, column: 1, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4213, file: !140, line: 85, column: 1)
!4216 = !DILocation(line: 85, column: 1, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4213, file: !140, line: 85, column: 1)
!4218 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2515, file: !2515, line: 31, type: !4219, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4219 = !DISubroutineType(types: !4220)
!4220 = !{!2575, !4221, !1006}
!4221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2519, size: 64)
!4222 = !DILocalVariable(name: "vec_", arg: 1, scope: !4218, file: !2515, line: 31, type: !4221)
!4223 = !DILocation(line: 31, column: 1, scope: !4218)
!4224 = !DILocalVariable(name: "obj_", arg: 2, scope: !4218, file: !2515, line: 31, type: !1006)
!4225 = !DILocalVariable(name: "slot_", scope: !4218, file: !2515, line: 31, type: !2575)
!4226 = distinct !DISubprogram(name: "loop_outer", scope: !140, file: !140, line: 434, type: !4227, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4227 = !DISubroutineType(types: !4228)
!4228 = !{!1651, !3149}
!4229 = !DILocalVariable(name: "loop", arg: 1, scope: !4226, file: !140, line: 434, type: !3149)
!4230 = !DILocation(line: 434, column: 32, scope: !4226)
!4231 = !DILocalVariable(name: "n", scope: !4226, file: !140, line: 436, type: !6)
!4232 = !DILocation(line: 436, column: 12, scope: !4226)
!4233 = !DILocation(line: 436, column: 16, scope: !4226)
!4234 = !DILocation(line: 438, column: 7, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4226, file: !140, line: 438, column: 7)
!4236 = !DILocation(line: 438, column: 9, scope: !4235)
!4237 = !DILocation(line: 438, column: 7, scope: !4226)
!4238 = !DILocation(line: 439, column: 5, scope: !4235)
!4239 = !DILocation(line: 441, column: 10, scope: !4226)
!4240 = !DILocation(line: 441, column: 3, scope: !4226)
!4241 = !DILocation(line: 442, column: 1, scope: !4226)
!4242 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !140, file: !140, line: 85, type: !4243, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4243 = !DISubroutineType(types: !4244)
!4244 = !{!1678, !4080, !6}
!4245 = !DILocalVariable(name: "vec_", arg: 1, scope: !4242, file: !140, line: 85, type: !4080)
!4246 = !DILocation(line: 85, column: 1, scope: !4242)
!4247 = !DILocalVariable(name: "ix_", arg: 2, scope: !4242, file: !140, line: 85, type: !6)
!4248 = !DILocation(line: 0, scope: !4242)
!4249 = distinct !DISubprogram(name: "find_induction_variables", scope: !3, file: !3, line: 1061, type: !4250, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4250 = !DISubroutineType(types: !4251)
!4251 = !{!136, !2530}
!4252 = !DILocalVariable(name: "data", arg: 1, scope: !4249, file: !3, line: 1061, type: !2530)
!4253 = !DILocation(line: 1061, column: 47, scope: !4249)
!4254 = !DILocalVariable(name: "i", scope: !4249, file: !3, line: 1063, type: !6)
!4255 = !DILocation(line: 1063, column: 12, scope: !4249)
!4256 = !DILocalVariable(name: "bi", scope: !4249, file: !3, line: 1064, type: !4257)
!4257 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1074, line: 218, baseType: !4258)
!4258 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1074, line: 203, size: 256, elements: !4259)
!4259 = !{!4260, !4261, !4262, !4263}
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4258, file: !1074, line: 206, baseType: !1077, size: 64)
!4261 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4258, file: !1074, line: 209, baseType: !1077, size: 64, offset: 64)
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4258, file: !1074, line: 212, baseType: !6, size: 32, offset: 128)
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4258, file: !1074, line: 217, baseType: !1087, size: 64, offset: 192)
!4264 = !DILocation(line: 1064, column: 19, scope: !4249)
!4265 = !DILocation(line: 1066, column: 19, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 1066, column: 7)
!4267 = !DILocation(line: 1066, column: 8, scope: !4266)
!4268 = !DILocation(line: 1066, column: 7, scope: !4249)
!4269 = !DILocation(line: 1067, column: 5, scope: !4266)
!4270 = !DILocation(line: 1069, column: 14, scope: !4249)
!4271 = !DILocation(line: 1069, column: 3, scope: !4249)
!4272 = !DILocation(line: 1070, column: 14, scope: !4249)
!4273 = !DILocation(line: 1070, column: 3, scope: !4249)
!4274 = !DILocation(line: 1072, column: 7, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 1072, column: 7)
!4276 = !DILocation(line: 1072, column: 17, scope: !4275)
!4277 = !DILocation(line: 1072, column: 21, scope: !4275)
!4278 = !DILocation(line: 1072, column: 32, scope: !4275)
!4279 = !DILocation(line: 1072, column: 7, scope: !4249)
!4280 = !DILocalVariable(name: "niter", scope: !4281, file: !3, line: 1074, type: !1134)
!4281 = distinct !DILexicalBlock(scope: !4275, file: !3, line: 1073, column: 5)
!4282 = !DILocation(line: 1074, column: 12, scope: !4281)
!4283 = !DILocation(line: 1074, column: 47, scope: !4281)
!4284 = !DILocation(line: 1074, column: 20, scope: !4281)
!4285 = !DILocation(line: 1076, column: 11, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 1076, column: 11)
!4287 = !DILocation(line: 1076, column: 11, scope: !4281)
!4288 = !DILocation(line: 1078, column: 13, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1077, column: 2)
!4290 = !DILocation(line: 1078, column: 4, scope: !4289)
!4291 = !DILocation(line: 1079, column: 24, scope: !4289)
!4292 = !DILocation(line: 1079, column: 35, scope: !4289)
!4293 = !DILocation(line: 1079, column: 4, scope: !4289)
!4294 = !DILocation(line: 1080, column: 13, scope: !4289)
!4295 = !DILocation(line: 1080, column: 4, scope: !4289)
!4296 = !DILocation(line: 1081, column: 6, scope: !4289)
!4297 = !DILocation(line: 1083, column: 16, scope: !4281)
!4298 = !DILocation(line: 1083, column: 7, scope: !4281)
!4299 = !DILocation(line: 1085, column: 7, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 1085, column: 7)
!4301 = !DILocation(line: 1085, column: 7, scope: !4302)
!4302 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 1085, column: 7)
!4303 = !DILocation(line: 1087, column: 18, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4305, file: !3, line: 1087, column: 8)
!4305 = distinct !DILexicalBlock(scope: !4302, file: !3, line: 1086, column: 2)
!4306 = !DILocation(line: 1087, column: 24, scope: !4304)
!4307 = !DILocation(line: 1087, column: 8, scope: !4304)
!4308 = !DILocation(line: 1087, column: 28, scope: !4304)
!4309 = !DILocation(line: 1087, column: 8, scope: !4305)
!4310 = !DILocation(line: 1088, column: 15, scope: !4304)
!4311 = !DILocation(line: 1088, column: 36, scope: !4304)
!4312 = !DILocation(line: 1088, column: 42, scope: !4304)
!4313 = !DILocation(line: 1088, column: 26, scope: !4304)
!4314 = !DILocation(line: 1088, column: 46, scope: !4304)
!4315 = !DILocation(line: 1088, column: 6, scope: !4304)
!4316 = !DILocation(line: 1089, column: 2, scope: !4305)
!4317 = distinct !{!4317, !4299, !4318}
!4318 = !DILocation(line: 1089, column: 2, scope: !4300)
!4319 = !DILocation(line: 1090, column: 5, scope: !4281)
!4320 = !DILocation(line: 1092, column: 3, scope: !4249)
!4321 = !DILocation(line: 1093, column: 1, scope: !4249)
!4322 = distinct !DISubprogram(name: "find_interesting_uses", scope: !3, file: !3, line: 1834, type: !3665, scopeLine: 1835, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4323 = !DILocalVariable(name: "data", arg: 1, scope: !4322, file: !3, line: 1834, type: !2530)
!4324 = !DILocation(line: 1834, column: 44, scope: !4322)
!4325 = !DILocalVariable(name: "bb", scope: !4322, file: !3, line: 1836, type: !1399)
!4326 = !DILocation(line: 1836, column: 15, scope: !4322)
!4327 = !DILocalVariable(name: "bsi", scope: !4322, file: !3, line: 1837, type: !4328)
!4328 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !574, line: 265, baseType: !4329)
!4329 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !574, line: 254, size: 192, elements: !4330)
!4330 = !{!4331, !4332, !4333}
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4329, file: !574, line: 257, baseType: !1431, size: 64)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4329, file: !574, line: 263, baseType: !1426, size: 64, offset: 64)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4329, file: !574, line: 264, baseType: !1399, size: 64, offset: 128)
!4334 = !DILocation(line: 1837, column: 24, scope: !4322)
!4335 = !DILocalVariable(name: "body", scope: !4322, file: !3, line: 1838, type: !3900)
!4336 = !DILocation(line: 1838, column: 16, scope: !4322)
!4337 = !DILocation(line: 1838, column: 38, scope: !4322)
!4338 = !DILocation(line: 1838, column: 44, scope: !4322)
!4339 = !DILocation(line: 1838, column: 23, scope: !4322)
!4340 = !DILocalVariable(name: "i", scope: !4322, file: !3, line: 1839, type: !6)
!4341 = !DILocation(line: 1839, column: 12, scope: !4322)
!4342 = !DILocalVariable(name: "info", scope: !4322, file: !3, line: 1840, type: !2426)
!4343 = !DILocation(line: 1840, column: 24, scope: !4322)
!4344 = !DILocalVariable(name: "e", scope: !4322, file: !3, line: 1841, type: !1416)
!4345 = !DILocation(line: 1841, column: 8, scope: !4322)
!4346 = !DILocation(line: 1843, column: 7, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 1843, column: 7)
!4348 = !DILocation(line: 1843, column: 17, scope: !4347)
!4349 = !DILocation(line: 1843, column: 21, scope: !4347)
!4350 = !DILocation(line: 1843, column: 32, scope: !4347)
!4351 = !DILocation(line: 1843, column: 7, scope: !4322)
!4352 = !DILocation(line: 1844, column: 14, scope: !4347)
!4353 = !DILocation(line: 1844, column: 5, scope: !4347)
!4354 = !DILocation(line: 1846, column: 10, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 1846, column: 3)
!4356 = !DILocation(line: 1846, column: 8, scope: !4355)
!4357 = !DILocation(line: 1846, column: 15, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 1846, column: 3)
!4359 = !DILocation(line: 1846, column: 19, scope: !4358)
!4360 = !DILocation(line: 1846, column: 25, scope: !4358)
!4361 = !DILocation(line: 1846, column: 39, scope: !4358)
!4362 = !DILocation(line: 1846, column: 17, scope: !4358)
!4363 = !DILocation(line: 1846, column: 3, scope: !4355)
!4364 = !DILocalVariable(name: "ei", scope: !4365, file: !3, line: 1848, type: !4366)
!4365 = distinct !DILexicalBlock(scope: !4358, file: !3, line: 1847, column: 5)
!4366 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !149, line: 682, baseType: !4367)
!4367 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !149, line: 679, size: 128, elements: !4368)
!4368 = !{!4369, !4370}
!4369 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4367, file: !149, line: 680, baseType: !6, size: 32)
!4370 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4367, file: !149, line: 681, baseType: !4371, size: 64, offset: 64)
!4371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1404, size: 64)
!4372 = !DILocation(line: 1848, column: 21, scope: !4365)
!4373 = !DILocation(line: 1849, column: 12, scope: !4365)
!4374 = !DILocation(line: 1849, column: 17, scope: !4365)
!4375 = !DILocation(line: 1849, column: 10, scope: !4365)
!4376 = !DILocation(line: 1851, column: 7, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 1851, column: 7)
!4378 = !DILocation(line: 1851, column: 7, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4377, file: !3, line: 1851, column: 7)
!4380 = !DILocation(line: 1852, column: 6, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4379, file: !3, line: 1852, column: 6)
!4382 = !DILocation(line: 1852, column: 9, scope: !4381)
!4383 = !DILocation(line: 1852, column: 17, scope: !4381)
!4384 = !DILocation(line: 1852, column: 14, scope: !4381)
!4385 = !DILocation(line: 1853, column: 6, scope: !4381)
!4386 = !DILocation(line: 1853, column: 33, scope: !4381)
!4387 = !DILocation(line: 1853, column: 39, scope: !4381)
!4388 = !DILocation(line: 1853, column: 53, scope: !4381)
!4389 = !DILocation(line: 1853, column: 56, scope: !4381)
!4390 = !DILocation(line: 1853, column: 10, scope: !4381)
!4391 = !DILocation(line: 1852, column: 6, scope: !4379)
!4392 = !DILocation(line: 1854, column: 35, scope: !4381)
!4393 = !DILocation(line: 1854, column: 41, scope: !4381)
!4394 = !DILocation(line: 1854, column: 4, scope: !4381)
!4395 = !DILocation(line: 1853, column: 60, scope: !4381)
!4396 = distinct !{!4396, !4376, !4397}
!4397 = !DILocation(line: 1854, column: 42, scope: !4377)
!4398 = !DILocation(line: 1856, column: 34, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 1856, column: 7)
!4400 = !DILocation(line: 1856, column: 18, scope: !4399)
!4401 = !DILocation(line: 1856, column: 12, scope: !4399)
!4402 = !DILocation(line: 1856, column: 40, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 1856, column: 7)
!4404 = !DILocation(line: 1856, column: 39, scope: !4403)
!4405 = !DILocation(line: 1856, column: 7, scope: !4399)
!4406 = !DILocation(line: 1857, column: 30, scope: !4403)
!4407 = !DILocation(line: 1857, column: 36, scope: !4403)
!4408 = !DILocation(line: 1857, column: 2, scope: !4403)
!4409 = !DILocation(line: 1856, column: 57, scope: !4403)
!4410 = !DILocation(line: 1856, column: 7, scope: !4403)
!4411 = distinct !{!4411, !4405, !4412}
!4412 = !DILocation(line: 1857, column: 50, scope: !4399)
!4413 = !DILocation(line: 1858, column: 32, scope: !4414)
!4414 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 1858, column: 7)
!4415 = !DILocation(line: 1858, column: 18, scope: !4414)
!4416 = !DILocation(line: 1858, column: 12, scope: !4414)
!4417 = !DILocation(line: 1858, column: 38, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4414, file: !3, line: 1858, column: 7)
!4419 = !DILocation(line: 1858, column: 37, scope: !4418)
!4420 = !DILocation(line: 1858, column: 7, scope: !4414)
!4421 = !DILocation(line: 1859, column: 24, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 1859, column: 6)
!4423 = !DILocation(line: 1859, column: 7, scope: !4422)
!4424 = !DILocation(line: 1859, column: 6, scope: !4418)
!4425 = !DILocation(line: 1860, column: 32, scope: !4422)
!4426 = !DILocation(line: 1860, column: 38, scope: !4422)
!4427 = !DILocation(line: 1860, column: 4, scope: !4422)
!4428 = !DILocation(line: 1859, column: 38, scope: !4422)
!4429 = !DILocation(line: 1858, column: 55, scope: !4418)
!4430 = !DILocation(line: 1858, column: 7, scope: !4418)
!4431 = distinct !{!4431, !4420, !4432}
!4432 = !DILocation(line: 1860, column: 52, scope: !4414)
!4433 = !DILocation(line: 1861, column: 5, scope: !4365)
!4434 = !DILocation(line: 1846, column: 51, scope: !4358)
!4435 = !DILocation(line: 1846, column: 3, scope: !4358)
!4436 = distinct !{!4436, !4363, !4437}
!4437 = !DILocation(line: 1861, column: 5, scope: !4355)
!4438 = !DILocation(line: 1863, column: 7, scope: !4439)
!4439 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 1863, column: 7)
!4440 = !DILocation(line: 1863, column: 17, scope: !4439)
!4441 = !DILocation(line: 1863, column: 21, scope: !4439)
!4442 = !DILocation(line: 1863, column: 32, scope: !4439)
!4443 = !DILocation(line: 1863, column: 7, scope: !4322)
!4444 = !DILocalVariable(name: "bi", scope: !4445, file: !3, line: 1865, type: !4257)
!4445 = distinct !DILexicalBlock(scope: !4439, file: !3, line: 1864, column: 5)
!4446 = !DILocation(line: 1865, column: 23, scope: !4445)
!4447 = !DILocation(line: 1867, column: 16, scope: !4445)
!4448 = !DILocation(line: 1867, column: 7, scope: !4445)
!4449 = !DILocation(line: 1869, column: 7, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 1869, column: 7)
!4451 = !DILocation(line: 1869, column: 7, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 1869, column: 7)
!4453 = !DILocation(line: 1871, column: 21, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4452, file: !3, line: 1870, column: 2)
!4455 = !DILocation(line: 1871, column: 27, scope: !4454)
!4456 = !DILocation(line: 1871, column: 11, scope: !4454)
!4457 = !DILocation(line: 1871, column: 9, scope: !4454)
!4458 = !DILocation(line: 1872, column: 8, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 1872, column: 8)
!4460 = !DILocation(line: 1872, column: 14, scope: !4459)
!4461 = !DILocation(line: 1872, column: 8, scope: !4454)
!4462 = !DILocation(line: 1874, column: 17, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1873, column: 6)
!4464 = !DILocation(line: 1874, column: 8, scope: !4463)
!4465 = !DILocation(line: 1875, column: 28, scope: !4463)
!4466 = !DILocation(line: 1875, column: 39, scope: !4463)
!4467 = !DILocation(line: 1875, column: 45, scope: !4463)
!4468 = !DILocation(line: 1875, column: 8, scope: !4463)
!4469 = !DILocation(line: 1876, column: 17, scope: !4463)
!4470 = !DILocation(line: 1877, column: 10, scope: !4463)
!4471 = !DILocation(line: 1877, column: 16, scope: !4463)
!4472 = !DILocation(line: 1877, column: 24, scope: !4463)
!4473 = !DILocation(line: 1877, column: 30, scope: !4463)
!4474 = !DILocation(line: 1876, column: 8, scope: !4463)
!4475 = !DILocation(line: 1878, column: 6, scope: !4463)
!4476 = !DILocation(line: 1879, column: 2, scope: !4454)
!4477 = distinct !{!4477, !4449, !4478}
!4478 = !DILocation(line: 1879, column: 2, scope: !4450)
!4479 = !DILocation(line: 1881, column: 16, scope: !4445)
!4480 = !DILocation(line: 1881, column: 7, scope: !4445)
!4481 = !DILocation(line: 1882, column: 5, scope: !4445)
!4482 = !DILocation(line: 1884, column: 9, scope: !4322)
!4483 = !DILocation(line: 1884, column: 3, scope: !4322)
!4484 = !DILocation(line: 1885, column: 1, scope: !4322)
!4485 = distinct !DISubprogram(name: "find_iv_candidates", scope: !3, file: !3, line: 4244, type: !3665, scopeLine: 4245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4486 = !DILocalVariable(name: "data", arg: 1, scope: !4485, file: !3, line: 4244, type: !2530)
!4487 = !DILocation(line: 4244, column: 41, scope: !4485)
!4488 = !DILocation(line: 4247, column: 31, scope: !4485)
!4489 = !DILocation(line: 4247, column: 3, scope: !4485)
!4490 = !DILocation(line: 4250, column: 27, scope: !4485)
!4491 = !DILocation(line: 4250, column: 3, scope: !4485)
!4492 = !DILocation(line: 4253, column: 31, scope: !4485)
!4493 = !DILocation(line: 4253, column: 3, scope: !4485)
!4494 = !DILocation(line: 4255, column: 40, scope: !4485)
!4495 = !DILocation(line: 4255, column: 3, scope: !4485)
!4496 = !DILocation(line: 4258, column: 32, scope: !4485)
!4497 = !DILocation(line: 4258, column: 3, scope: !4485)
!4498 = !DILocation(line: 4259, column: 1, scope: !4485)
!4499 = distinct !DISubprogram(name: "determine_iv_costs", scope: !3, file: !3, line: 4382, type: !3665, scopeLine: 4383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4500 = !DILocalVariable(name: "data", arg: 1, scope: !4499, file: !3, line: 4382, type: !2530)
!4501 = !DILocation(line: 4382, column: 41, scope: !4499)
!4502 = !DILocalVariable(name: "i", scope: !4499, file: !3, line: 4384, type: !6)
!4503 = !DILocation(line: 4384, column: 12, scope: !4499)
!4504 = !DILocation(line: 4386, column: 7, scope: !4505)
!4505 = distinct !DILexicalBlock(scope: !4499, file: !3, line: 4386, column: 7)
!4506 = !DILocation(line: 4386, column: 17, scope: !4505)
!4507 = !DILocation(line: 4386, column: 21, scope: !4505)
!4508 = !DILocation(line: 4386, column: 32, scope: !4505)
!4509 = !DILocation(line: 4386, column: 7, scope: !4499)
!4510 = !DILocation(line: 4388, column: 16, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4505, file: !3, line: 4387, column: 5)
!4512 = !DILocation(line: 4388, column: 7, scope: !4511)
!4513 = !DILocation(line: 4389, column: 16, scope: !4511)
!4514 = !DILocation(line: 4389, column: 7, scope: !4511)
!4515 = !DILocation(line: 4390, column: 5, scope: !4511)
!4516 = !DILocation(line: 4392, column: 10, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4499, file: !3, line: 4392, column: 3)
!4518 = !DILocation(line: 4392, column: 8, scope: !4517)
!4519 = !DILocation(line: 4392, column: 15, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 4392, column: 3)
!4521 = !DILocation(line: 4392, column: 31, scope: !4520)
!4522 = !DILocation(line: 4392, column: 19, scope: !4520)
!4523 = !DILocation(line: 4392, column: 17, scope: !4520)
!4524 = !DILocation(line: 4392, column: 3, scope: !4517)
!4525 = !DILocalVariable(name: "cand", scope: !4526, file: !3, line: 4394, type: !2472)
!4526 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 4393, column: 5)
!4527 = !DILocation(line: 4394, column: 23, scope: !4526)
!4528 = !DILocation(line: 4394, column: 39, scope: !4526)
!4529 = !DILocation(line: 4394, column: 45, scope: !4526)
!4530 = !DILocation(line: 4394, column: 30, scope: !4526)
!4531 = !DILocation(line: 4396, column: 26, scope: !4526)
!4532 = !DILocation(line: 4396, column: 32, scope: !4526)
!4533 = !DILocation(line: 4396, column: 7, scope: !4526)
!4534 = !DILocation(line: 4398, column: 11, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 4398, column: 11)
!4536 = !DILocation(line: 4398, column: 21, scope: !4535)
!4537 = !DILocation(line: 4398, column: 25, scope: !4535)
!4538 = !DILocation(line: 4398, column: 36, scope: !4535)
!4539 = !DILocation(line: 4398, column: 11, scope: !4526)
!4540 = !DILocation(line: 4399, column: 11, scope: !4535)
!4541 = !DILocation(line: 4399, column: 36, scope: !4535)
!4542 = !DILocation(line: 4399, column: 39, scope: !4535)
!4543 = !DILocation(line: 4399, column: 45, scope: !4535)
!4544 = !DILocation(line: 4399, column: 2, scope: !4535)
!4545 = !DILocation(line: 4400, column: 5, scope: !4526)
!4546 = !DILocation(line: 4392, column: 39, scope: !4520)
!4547 = !DILocation(line: 4392, column: 3, scope: !4520)
!4548 = distinct !{!4548, !4524, !4549}
!4549 = !DILocation(line: 4400, column: 5, scope: !4517)
!4550 = !DILocation(line: 4402, column: 7, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4499, file: !3, line: 4402, column: 7)
!4552 = !DILocation(line: 4402, column: 17, scope: !4551)
!4553 = !DILocation(line: 4402, column: 21, scope: !4551)
!4554 = !DILocation(line: 4402, column: 32, scope: !4551)
!4555 = !DILocation(line: 4402, column: 7, scope: !4499)
!4556 = !DILocation(line: 4403, column: 14, scope: !4551)
!4557 = !DILocation(line: 4403, column: 5, scope: !4551)
!4558 = !DILocation(line: 4404, column: 1, scope: !4499)
!4559 = distinct !DISubprogram(name: "determine_use_iv_costs", scope: !3, file: !3, line: 4264, type: !3665, scopeLine: 4265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4560 = !DILocalVariable(name: "data", arg: 1, scope: !4559, file: !3, line: 4264, type: !2530)
!4561 = !DILocation(line: 4264, column: 45, scope: !4559)
!4562 = !DILocalVariable(name: "i", scope: !4559, file: !3, line: 4266, type: !6)
!4563 = !DILocation(line: 4266, column: 12, scope: !4559)
!4564 = !DILocalVariable(name: "j", scope: !4559, file: !3, line: 4266, type: !6)
!4565 = !DILocation(line: 4266, column: 15, scope: !4559)
!4566 = !DILocalVariable(name: "use", scope: !4559, file: !3, line: 4267, type: !2457)
!4567 = !DILocation(line: 4267, column: 18, scope: !4559)
!4568 = !DILocalVariable(name: "cand", scope: !4559, file: !3, line: 4268, type: !2472)
!4569 = !DILocation(line: 4268, column: 19, scope: !4559)
!4570 = !DILocalVariable(name: "to_clear", scope: !4559, file: !3, line: 4269, type: !1852)
!4571 = !DILocation(line: 4269, column: 10, scope: !4559)
!4572 = !DILocation(line: 4269, column: 21, scope: !4559)
!4573 = !DILocation(line: 4271, column: 23, scope: !4559)
!4574 = !DILocation(line: 4271, column: 3, scope: !4559)
!4575 = !DILocation(line: 4273, column: 10, scope: !4576)
!4576 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 4273, column: 3)
!4577 = !DILocation(line: 4273, column: 8, scope: !4576)
!4578 = !DILocation(line: 4273, column: 15, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4576, file: !3, line: 4273, column: 3)
!4580 = !DILocation(line: 4273, column: 30, scope: !4579)
!4581 = !DILocation(line: 4273, column: 19, scope: !4579)
!4582 = !DILocation(line: 4273, column: 17, scope: !4579)
!4583 = !DILocation(line: 4273, column: 3, scope: !4576)
!4584 = !DILocation(line: 4275, column: 21, scope: !4585)
!4585 = distinct !DILexicalBlock(scope: !4579, file: !3, line: 4274, column: 5)
!4586 = !DILocation(line: 4275, column: 27, scope: !4585)
!4587 = !DILocation(line: 4275, column: 13, scope: !4585)
!4588 = !DILocation(line: 4275, column: 11, scope: !4585)
!4589 = !DILocation(line: 4277, column: 11, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4585, file: !3, line: 4277, column: 11)
!4591 = !DILocation(line: 4277, column: 17, scope: !4590)
!4592 = !DILocation(line: 4277, column: 11, scope: !4585)
!4593 = !DILocation(line: 4279, column: 11, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 4279, column: 4)
!4595 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 4278, column: 2)
!4596 = !DILocation(line: 4279, column: 9, scope: !4594)
!4597 = !DILocation(line: 4279, column: 16, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 4279, column: 4)
!4599 = !DILocation(line: 4279, column: 32, scope: !4598)
!4600 = !DILocation(line: 4279, column: 20, scope: !4598)
!4601 = !DILocation(line: 4279, column: 18, scope: !4598)
!4602 = !DILocation(line: 4279, column: 4, scope: !4594)
!4603 = !DILocation(line: 4281, column: 24, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 4280, column: 6)
!4605 = !DILocation(line: 4281, column: 30, scope: !4604)
!4606 = !DILocation(line: 4281, column: 15, scope: !4604)
!4607 = !DILocation(line: 4281, column: 13, scope: !4604)
!4608 = !DILocation(line: 4282, column: 31, scope: !4604)
!4609 = !DILocation(line: 4282, column: 37, scope: !4604)
!4610 = !DILocation(line: 4282, column: 42, scope: !4604)
!4611 = !DILocation(line: 4282, column: 8, scope: !4604)
!4612 = !DILocation(line: 4283, column: 6, scope: !4604)
!4613 = !DILocation(line: 4279, column: 40, scope: !4598)
!4614 = !DILocation(line: 4279, column: 4, scope: !4598)
!4615 = distinct !{!4615, !4602, !4616}
!4616 = !DILocation(line: 4283, column: 6, scope: !4594)
!4617 = !DILocation(line: 4284, column: 2, scope: !4595)
!4618 = !DILocalVariable(name: "bi", scope: !4619, file: !3, line: 4287, type: !4257)
!4619 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 4286, column: 2)
!4620 = !DILocation(line: 4287, column: 20, scope: !4619)
!4621 = !DILocation(line: 4289, column: 4, scope: !4622)
!4622 = distinct !DILexicalBlock(scope: !4619, file: !3, line: 4289, column: 4)
!4623 = !DILocation(line: 4289, column: 4, scope: !4624)
!4624 = distinct !DILexicalBlock(scope: !4622, file: !3, line: 4289, column: 4)
!4625 = !DILocation(line: 4291, column: 24, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 4290, column: 6)
!4627 = !DILocation(line: 4291, column: 30, scope: !4626)
!4628 = !DILocation(line: 4291, column: 15, scope: !4626)
!4629 = !DILocation(line: 4291, column: 13, scope: !4626)
!4630 = !DILocation(line: 4292, column: 36, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 4292, column: 12)
!4632 = !DILocation(line: 4292, column: 42, scope: !4631)
!4633 = !DILocation(line: 4292, column: 47, scope: !4631)
!4634 = !DILocation(line: 4292, column: 13, scope: !4631)
!4635 = !DILocation(line: 4292, column: 12, scope: !4626)
!4636 = !DILocation(line: 4293, column: 19, scope: !4631)
!4637 = !DILocation(line: 4293, column: 29, scope: !4631)
!4638 = !DILocation(line: 4293, column: 3, scope: !4631)
!4639 = !DILocation(line: 4294, column: 6, scope: !4626)
!4640 = distinct !{!4640, !4621, !4641}
!4641 = !DILocation(line: 4294, column: 6, scope: !4622)
!4642 = !DILocation(line: 4298, column: 27, scope: !4619)
!4643 = !DILocation(line: 4298, column: 32, scope: !4619)
!4644 = !DILocation(line: 4298, column: 47, scope: !4619)
!4645 = !DILocation(line: 4298, column: 4, scope: !4619)
!4646 = !DILocation(line: 4299, column: 18, scope: !4619)
!4647 = !DILocation(line: 4299, column: 4, scope: !4619)
!4648 = !DILocation(line: 4301, column: 5, scope: !4585)
!4649 = !DILocation(line: 4273, column: 38, scope: !4579)
!4650 = !DILocation(line: 4273, column: 3, scope: !4579)
!4651 = distinct !{!4651, !4583, !4652}
!4652 = !DILocation(line: 4301, column: 5, scope: !4576)
!4653 = !DILocation(line: 4303, column: 3, scope: !4559)
!4654 = !DILocation(line: 4305, column: 7, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 4305, column: 7)
!4656 = !DILocation(line: 4305, column: 17, scope: !4655)
!4657 = !DILocation(line: 4305, column: 21, scope: !4655)
!4658 = !DILocation(line: 4305, column: 32, scope: !4655)
!4659 = !DILocation(line: 4305, column: 7, scope: !4559)
!4660 = !DILocation(line: 4307, column: 16, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4655, file: !3, line: 4306, column: 5)
!4662 = !DILocation(line: 4307, column: 7, scope: !4661)
!4663 = !DILocation(line: 4309, column: 14, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 4309, column: 7)
!4665 = !DILocation(line: 4309, column: 12, scope: !4664)
!4666 = !DILocation(line: 4309, column: 19, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4664, file: !3, line: 4309, column: 7)
!4668 = !DILocation(line: 4309, column: 34, scope: !4667)
!4669 = !DILocation(line: 4309, column: 23, scope: !4667)
!4670 = !DILocation(line: 4309, column: 21, scope: !4667)
!4671 = !DILocation(line: 4309, column: 7, scope: !4664)
!4672 = !DILocation(line: 4311, column: 18, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 4310, column: 2)
!4674 = !DILocation(line: 4311, column: 24, scope: !4673)
!4675 = !DILocation(line: 4311, column: 10, scope: !4673)
!4676 = !DILocation(line: 4311, column: 8, scope: !4673)
!4677 = !DILocation(line: 4313, column: 13, scope: !4673)
!4678 = !DILocation(line: 4313, column: 37, scope: !4673)
!4679 = !DILocation(line: 4313, column: 4, scope: !4673)
!4680 = !DILocation(line: 4314, column: 13, scope: !4673)
!4681 = !DILocation(line: 4314, column: 4, scope: !4673)
!4682 = !DILocation(line: 4315, column: 11, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 4315, column: 4)
!4684 = !DILocation(line: 4315, column: 9, scope: !4683)
!4685 = !DILocation(line: 4315, column: 16, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 4315, column: 4)
!4687 = !DILocation(line: 4315, column: 20, scope: !4686)
!4688 = !DILocation(line: 4315, column: 25, scope: !4686)
!4689 = !DILocation(line: 4315, column: 18, scope: !4686)
!4690 = !DILocation(line: 4315, column: 4, scope: !4683)
!4691 = !DILocation(line: 4317, column: 13, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 4317, column: 12)
!4693 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 4316, column: 6)
!4694 = !DILocation(line: 4317, column: 18, scope: !4692)
!4695 = !DILocation(line: 4317, column: 27, scope: !4692)
!4696 = !DILocation(line: 4317, column: 30, scope: !4692)
!4697 = !DILocation(line: 4318, column: 5, scope: !4692)
!4698 = !DILocation(line: 4318, column: 25, scope: !4692)
!4699 = !DILocation(line: 4318, column: 30, scope: !4692)
!4700 = !DILocation(line: 4318, column: 39, scope: !4692)
!4701 = !DILocation(line: 4318, column: 42, scope: !4692)
!4702 = !DILocation(line: 4318, column: 8, scope: !4692)
!4703 = !DILocation(line: 4317, column: 12, scope: !4693)
!4704 = !DILocation(line: 4319, column: 3, scope: !4692)
!4705 = !DILocation(line: 4321, column: 17, scope: !4693)
!4706 = !DILocation(line: 4322, column: 10, scope: !4693)
!4707 = !DILocation(line: 4322, column: 15, scope: !4693)
!4708 = !DILocation(line: 4322, column: 24, scope: !4693)
!4709 = !DILocation(line: 4322, column: 27, scope: !4693)
!4710 = !DILocation(line: 4322, column: 33, scope: !4693)
!4711 = !DILocation(line: 4323, column: 10, scope: !4693)
!4712 = !DILocation(line: 4323, column: 15, scope: !4693)
!4713 = !DILocation(line: 4323, column: 24, scope: !4693)
!4714 = !DILocation(line: 4323, column: 27, scope: !4693)
!4715 = !DILocation(line: 4323, column: 32, scope: !4693)
!4716 = !DILocation(line: 4324, column: 10, scope: !4693)
!4717 = !DILocation(line: 4324, column: 15, scope: !4693)
!4718 = !DILocation(line: 4324, column: 24, scope: !4693)
!4719 = !DILocation(line: 4324, column: 27, scope: !4693)
!4720 = !DILocation(line: 4324, column: 32, scope: !4693)
!4721 = !DILocation(line: 4321, column: 8, scope: !4693)
!4722 = !DILocation(line: 4325, column: 12, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 4325, column: 12)
!4724 = !DILocation(line: 4325, column: 17, scope: !4723)
!4725 = !DILocation(line: 4325, column: 26, scope: !4723)
!4726 = !DILocation(line: 4325, column: 29, scope: !4723)
!4727 = !DILocation(line: 4325, column: 12, scope: !4693)
!4728 = !DILocation(line: 4326, column: 17, scope: !4723)
!4729 = !DILocation(line: 4327, column: 10, scope: !4723)
!4730 = !DILocation(line: 4327, column: 15, scope: !4723)
!4731 = !DILocation(line: 4327, column: 24, scope: !4723)
!4732 = !DILocation(line: 4327, column: 27, scope: !4723)
!4733 = !DILocation(line: 4326, column: 3, scope: !4723)
!4734 = !DILocation(line: 4328, column: 17, scope: !4693)
!4735 = !DILocation(line: 4328, column: 8, scope: !4693)
!4736 = !DILocation(line: 4329, column: 6, scope: !4693)
!4737 = !DILocation(line: 4315, column: 41, scope: !4686)
!4738 = !DILocation(line: 4315, column: 4, scope: !4686)
!4739 = distinct !{!4739, !4690, !4740}
!4740 = !DILocation(line: 4329, column: 6, scope: !4683)
!4741 = !DILocation(line: 4331, column: 13, scope: !4673)
!4742 = !DILocation(line: 4331, column: 4, scope: !4673)
!4743 = !DILocation(line: 4332, column: 2, scope: !4673)
!4744 = !DILocation(line: 4309, column: 42, scope: !4667)
!4745 = !DILocation(line: 4309, column: 7, scope: !4667)
!4746 = distinct !{!4746, !4671, !4747}
!4747 = !DILocation(line: 4332, column: 2, scope: !4664)
!4748 = !DILocation(line: 4333, column: 16, scope: !4661)
!4749 = !DILocation(line: 4333, column: 7, scope: !4661)
!4750 = !DILocation(line: 4334, column: 5, scope: !4661)
!4751 = !DILocation(line: 4335, column: 1, scope: !4559)
!4752 = distinct !DISubprogram(name: "determine_set_costs", scope: !3, file: !3, line: 4419, type: !3665, scopeLine: 4420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4753 = !DILocalVariable(name: "data", arg: 1, scope: !4752, file: !3, line: 4419, type: !2530)
!4754 = !DILocation(line: 4419, column: 42, scope: !4752)
!4755 = !DILocalVariable(name: "j", scope: !4752, file: !3, line: 4421, type: !6)
!4756 = !DILocation(line: 4421, column: 12, scope: !4752)
!4757 = !DILocalVariable(name: "n", scope: !4752, file: !3, line: 4421, type: !6)
!4758 = !DILocation(line: 4421, column: 15, scope: !4752)
!4759 = !DILocalVariable(name: "phi", scope: !4752, file: !3, line: 4422, type: !1436)
!4760 = !DILocation(line: 4422, column: 10, scope: !4752)
!4761 = !DILocalVariable(name: "psi", scope: !4752, file: !3, line: 4423, type: !4328)
!4762 = !DILocation(line: 4423, column: 24, scope: !4752)
!4763 = !DILocalVariable(name: "op", scope: !4752, file: !3, line: 4424, type: !1134)
!4764 = !DILocation(line: 4424, column: 8, scope: !4752)
!4765 = !DILocalVariable(name: "loop", scope: !4752, file: !3, line: 4425, type: !1651)
!4766 = !DILocation(line: 4425, column: 16, scope: !4752)
!4767 = !DILocation(line: 4425, column: 23, scope: !4752)
!4768 = !DILocation(line: 4425, column: 29, scope: !4752)
!4769 = !DILocalVariable(name: "bi", scope: !4752, file: !3, line: 4426, type: !4257)
!4770 = !DILocation(line: 4426, column: 19, scope: !4752)
!4771 = !DILocation(line: 4448, column: 7, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4752, file: !3, line: 4448, column: 7)
!4773 = !DILocation(line: 4448, column: 17, scope: !4772)
!4774 = !DILocation(line: 4448, column: 21, scope: !4772)
!4775 = !DILocation(line: 4448, column: 32, scope: !4772)
!4776 = !DILocation(line: 4448, column: 7, scope: !4752)
!4777 = !DILocation(line: 4450, column: 16, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 4449, column: 5)
!4779 = !DILocation(line: 4450, column: 7, scope: !4778)
!4780 = !DILocation(line: 4451, column: 16, scope: !4778)
!4781 = !DILocation(line: 4451, column: 55, scope: !4778)
!4782 = !DILocation(line: 4451, column: 7, scope: !4778)
!4783 = !DILocation(line: 4452, column: 16, scope: !4778)
!4784 = !DILocation(line: 4452, column: 69, scope: !4778)
!4785 = !DILocation(line: 4452, column: 75, scope: !4778)
!4786 = !DILocation(line: 4452, column: 53, scope: !4778)
!4787 = !DILocation(line: 4452, column: 7, scope: !4778)
!4788 = !DILocation(line: 4453, column: 16, scope: !4778)
!4789 = !DILocation(line: 4453, column: 73, scope: !4778)
!4790 = !DILocation(line: 4453, column: 79, scope: !4778)
!4791 = !DILocation(line: 4453, column: 55, scope: !4778)
!4792 = !DILocation(line: 4453, column: 7, scope: !4778)
!4793 = !DILocation(line: 4454, column: 5, scope: !4778)
!4794 = !DILocation(line: 4456, column: 5, scope: !4752)
!4795 = !DILocation(line: 4457, column: 30, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4752, file: !3, line: 4457, column: 3)
!4797 = !DILocation(line: 4457, column: 36, scope: !4796)
!4798 = !DILocation(line: 4457, column: 14, scope: !4796)
!4799 = !DILocation(line: 4457, column: 8, scope: !4796)
!4800 = !DILocation(line: 4457, column: 46, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 4457, column: 3)
!4802 = !DILocation(line: 4457, column: 45, scope: !4801)
!4803 = !DILocation(line: 4457, column: 3, scope: !4796)
!4804 = !DILocation(line: 4459, column: 13, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 4458, column: 5)
!4806 = !DILocation(line: 4459, column: 11, scope: !4805)
!4807 = !DILocation(line: 4460, column: 12, scope: !4805)
!4808 = !DILocation(line: 4460, column: 10, scope: !4805)
!4809 = !DILocation(line: 4462, column: 27, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 4462, column: 11)
!4811 = !DILocation(line: 4462, column: 12, scope: !4810)
!4812 = !DILocation(line: 4462, column: 11, scope: !4805)
!4813 = !DILocation(line: 4463, column: 2, scope: !4810)
!4814 = !DILocation(line: 4465, column: 19, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 4465, column: 11)
!4816 = !DILocation(line: 4465, column: 25, scope: !4815)
!4817 = !DILocation(line: 4465, column: 11, scope: !4815)
!4818 = !DILocation(line: 4465, column: 11, scope: !4805)
!4819 = !DILocation(line: 4466, column: 2, scope: !4815)
!4820 = !DILocation(line: 4468, column: 8, scope: !4805)
!4821 = !DILocation(line: 4469, column: 5, scope: !4805)
!4822 = !DILocation(line: 4457, column: 63, scope: !4801)
!4823 = !DILocation(line: 4457, column: 3, scope: !4801)
!4824 = distinct !{!4824, !4803, !4825}
!4825 = !DILocation(line: 4469, column: 5, scope: !4796)
!4826 = !DILocation(line: 4471, column: 3, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4752, file: !3, line: 4471, column: 3)
!4828 = !DILocation(line: 4471, column: 3, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 4471, column: 3)
!4830 = !DILocalVariable(name: "info", scope: !4831, file: !3, line: 4473, type: !2426)
!4831 = distinct !DILexicalBlock(scope: !4829, file: !3, line: 4472, column: 5)
!4832 = !DILocation(line: 4473, column: 28, scope: !4831)
!4833 = !DILocation(line: 4473, column: 45, scope: !4831)
!4834 = !DILocation(line: 4473, column: 51, scope: !4831)
!4835 = !DILocation(line: 4473, column: 35, scope: !4831)
!4836 = !DILocation(line: 4475, column: 11, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 4475, column: 11)
!4838 = !DILocation(line: 4475, column: 17, scope: !4837)
!4839 = !DILocation(line: 4475, column: 24, scope: !4837)
!4840 = !DILocation(line: 4475, column: 27, scope: !4837)
!4841 = !DILocation(line: 4475, column: 33, scope: !4837)
!4842 = !DILocation(line: 4475, column: 11, scope: !4831)
!4843 = !DILocation(line: 4476, column: 3, scope: !4837)
!4844 = !DILocation(line: 4476, column: 2, scope: !4837)
!4845 = !DILocation(line: 4477, column: 5, scope: !4831)
!4846 = distinct !{!4846, !4826, !4847}
!4847 = !DILocation(line: 4477, column: 5, scope: !4827)
!4848 = !DILocation(line: 4479, column: 21, scope: !4752)
!4849 = !DILocation(line: 4479, column: 3, scope: !4752)
!4850 = !DILocation(line: 4479, column: 9, scope: !4752)
!4851 = !DILocation(line: 4479, column: 19, scope: !4752)
!4852 = !DILocation(line: 4480, column: 7, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4752, file: !3, line: 4480, column: 7)
!4854 = !DILocation(line: 4480, column: 17, scope: !4853)
!4855 = !DILocation(line: 4480, column: 21, scope: !4853)
!4856 = !DILocation(line: 4480, column: 32, scope: !4853)
!4857 = !DILocation(line: 4480, column: 7, scope: !4752)
!4858 = !DILocation(line: 4481, column: 14, scope: !4853)
!4859 = !DILocation(line: 4481, column: 45, scope: !4853)
!4860 = !DILocation(line: 4481, column: 5, scope: !4853)
!4861 = !DILocation(line: 4483, column: 7, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4752, file: !3, line: 4483, column: 7)
!4863 = !DILocation(line: 4483, column: 17, scope: !4862)
!4864 = !DILocation(line: 4483, column: 21, scope: !4862)
!4865 = !DILocation(line: 4483, column: 32, scope: !4862)
!4866 = !DILocation(line: 4483, column: 7, scope: !4752)
!4867 = !DILocation(line: 4485, column: 16, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4862, file: !3, line: 4484, column: 5)
!4869 = !DILocation(line: 4485, column: 7, scope: !4868)
!4870 = !DILocation(line: 4486, column: 16, scope: !4868)
!4871 = !DILocation(line: 4486, column: 7, scope: !4868)
!4872 = !DILocation(line: 4487, column: 14, scope: !4873)
!4873 = distinct !DILexicalBlock(scope: !4868, file: !3, line: 4487, column: 7)
!4874 = !DILocation(line: 4487, column: 12, scope: !4873)
!4875 = !DILocation(line: 4487, column: 19, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4873, file: !3, line: 4487, column: 7)
!4877 = !DILocation(line: 4487, column: 28, scope: !4876)
!4878 = !DILocation(line: 4487, column: 26, scope: !4876)
!4879 = !DILocation(line: 4487, column: 21, scope: !4876)
!4880 = !DILocation(line: 4487, column: 7, scope: !4873)
!4881 = !DILocation(line: 4488, column: 11, scope: !4876)
!4882 = !DILocation(line: 4488, column: 36, scope: !4876)
!4883 = !DILocation(line: 4489, column: 33, scope: !4876)
!4884 = !DILocation(line: 4489, column: 39, scope: !4876)
!4885 = !DILocation(line: 4489, column: 4, scope: !4876)
!4886 = !DILocation(line: 4488, column: 2, scope: !4876)
!4887 = !DILocation(line: 4487, column: 48, scope: !4876)
!4888 = !DILocation(line: 4487, column: 7, scope: !4876)
!4889 = distinct !{!4889, !4880, !4890}
!4890 = !DILocation(line: 4489, column: 41, scope: !4873)
!4891 = !DILocation(line: 4490, column: 16, scope: !4868)
!4892 = !DILocation(line: 4490, column: 7, scope: !4868)
!4893 = !DILocation(line: 4491, column: 5, scope: !4868)
!4894 = !DILocation(line: 4492, column: 1, scope: !4752)
!4895 = distinct !DISubprogram(name: "find_optimal_iv_set", scope: !3, file: !3, line: 5255, type: !4896, scopeLine: 5256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!4896 = !DISubroutineType(types: !4897)
!4897 = !{!2576, !2530}
!4898 = !DILocalVariable(name: "data", arg: 1, scope: !4895, file: !3, line: 5255, type: !2530)
!4899 = !DILocation(line: 5255, column: 42, scope: !4895)
!4900 = !DILocalVariable(name: "i", scope: !4895, file: !3, line: 5257, type: !6)
!4901 = !DILocation(line: 5257, column: 12, scope: !4895)
!4902 = !DILocalVariable(name: "set", scope: !4895, file: !3, line: 5258, type: !2576)
!4903 = !DILocation(line: 5258, column: 17, scope: !4895)
!4904 = !DILocalVariable(name: "use", scope: !4895, file: !3, line: 5259, type: !2457)
!4905 = !DILocation(line: 5259, column: 18, scope: !4895)
!4906 = !DILocation(line: 5262, column: 31, scope: !4895)
!4907 = !DILocation(line: 5262, column: 9, scope: !4895)
!4908 = !DILocation(line: 5262, column: 7, scope: !4895)
!4909 = !DILocation(line: 5263, column: 8, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 5263, column: 7)
!4911 = !DILocation(line: 5263, column: 7, scope: !4895)
!4912 = !DILocation(line: 5265, column: 11, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4914, file: !3, line: 5265, column: 11)
!4914 = distinct !DILexicalBlock(scope: !4910, file: !3, line: 5264, column: 5)
!4915 = !DILocation(line: 5265, column: 21, scope: !4913)
!4916 = !DILocation(line: 5265, column: 25, scope: !4913)
!4917 = !DILocation(line: 5265, column: 36, scope: !4913)
!4918 = !DILocation(line: 5265, column: 11, scope: !4914)
!4919 = !DILocation(line: 5266, column: 11, scope: !4913)
!4920 = !DILocation(line: 5266, column: 2, scope: !4913)
!4921 = !DILocation(line: 5267, column: 7, scope: !4914)
!4922 = !DILocation(line: 5270, column: 7, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 5270, column: 7)
!4924 = !DILocation(line: 5270, column: 17, scope: !4923)
!4925 = !DILocation(line: 5270, column: 21, scope: !4923)
!4926 = !DILocation(line: 5270, column: 32, scope: !4923)
!4927 = !DILocation(line: 5270, column: 7, scope: !4895)
!4928 = !DILocation(line: 5272, column: 16, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 5271, column: 5)
!4930 = !DILocation(line: 5272, column: 7, scope: !4929)
!4931 = !DILocation(line: 5273, column: 19, scope: !4929)
!4932 = !DILocation(line: 5273, column: 25, scope: !4929)
!4933 = !DILocation(line: 5273, column: 36, scope: !4929)
!4934 = !DILocation(line: 5273, column: 7, scope: !4929)
!4935 = !DILocation(line: 5274, column: 5, scope: !4929)
!4936 = !DILocation(line: 5276, column: 3, scope: !4895)
!4937 = !DILocation(line: 5276, column: 30, scope: !4895)
!4938 = !DILocation(line: 5276, column: 36, scope: !4895)
!4939 = !DILocation(line: 5276, column: 10, scope: !4895)
!4940 = !DILocation(line: 5278, column: 11, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 5278, column: 11)
!4942 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 5277, column: 5)
!4943 = !DILocation(line: 5278, column: 21, scope: !4941)
!4944 = !DILocation(line: 5278, column: 25, scope: !4941)
!4945 = !DILocation(line: 5278, column: 36, scope: !4941)
!4946 = !DILocation(line: 5278, column: 11, scope: !4942)
!4947 = !DILocation(line: 5280, column: 13, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4941, file: !3, line: 5279, column: 2)
!4949 = !DILocation(line: 5280, column: 4, scope: !4948)
!4950 = !DILocation(line: 5281, column: 16, scope: !4948)
!4951 = !DILocation(line: 5281, column: 22, scope: !4948)
!4952 = !DILocation(line: 5281, column: 33, scope: !4948)
!4953 = !DILocation(line: 5281, column: 4, scope: !4948)
!4954 = !DILocation(line: 5282, column: 2, scope: !4948)
!4955 = distinct !{!4955, !4936, !4956}
!4956 = !DILocation(line: 5283, column: 5, scope: !4895)
!4957 = !DILocation(line: 5285, column: 7, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 5285, column: 7)
!4959 = !DILocation(line: 5285, column: 17, scope: !4958)
!4960 = !DILocation(line: 5285, column: 21, scope: !4958)
!4961 = !DILocation(line: 5285, column: 32, scope: !4958)
!4962 = !DILocation(line: 5285, column: 7, scope: !4895)
!4963 = !DILocalVariable(name: "cost", scope: !4964, file: !3, line: 5287, type: !2487)
!4964 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 5286, column: 5)
!4965 = !DILocation(line: 5287, column: 17, scope: !4964)
!4966 = !DILocation(line: 5287, column: 36, scope: !4964)
!4967 = !DILocation(line: 5287, column: 24, scope: !4964)
!4968 = !DILocation(line: 5288, column: 16, scope: !4964)
!4969 = !DILocation(line: 5288, column: 69, scope: !4964)
!4970 = !DILocation(line: 5288, column: 80, scope: !4964)
!4971 = !DILocation(line: 5288, column: 7, scope: !4964)
!4972 = !DILocation(line: 5289, column: 5, scope: !4964)
!4973 = !DILocation(line: 5291, column: 10, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 5291, column: 3)
!4975 = !DILocation(line: 5291, column: 8, scope: !4974)
!4976 = !DILocation(line: 5291, column: 15, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4974, file: !3, line: 5291, column: 3)
!4978 = !DILocation(line: 5291, column: 30, scope: !4977)
!4979 = !DILocation(line: 5291, column: 19, scope: !4977)
!4980 = !DILocation(line: 5291, column: 17, scope: !4977)
!4981 = !DILocation(line: 5291, column: 3, scope: !4974)
!4982 = !DILocation(line: 5293, column: 21, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4977, file: !3, line: 5292, column: 5)
!4984 = !DILocation(line: 5293, column: 27, scope: !4983)
!4985 = !DILocation(line: 5293, column: 13, scope: !4983)
!4986 = !DILocation(line: 5293, column: 11, scope: !4983)
!4987 = !DILocation(line: 5294, column: 43, scope: !4983)
!4988 = !DILocation(line: 5294, column: 48, scope: !4983)
!4989 = !DILocation(line: 5294, column: 23, scope: !4983)
!4990 = !DILocation(line: 5294, column: 54, scope: !4983)
!4991 = !DILocation(line: 5294, column: 7, scope: !4983)
!4992 = !DILocation(line: 5294, column: 12, scope: !4983)
!4993 = !DILocation(line: 5294, column: 21, scope: !4983)
!4994 = !DILocation(line: 5295, column: 5, scope: !4983)
!4995 = !DILocation(line: 5291, column: 38, scope: !4977)
!4996 = !DILocation(line: 5291, column: 3, scope: !4977)
!4997 = distinct !{!4997, !4981, !4998}
!4998 = !DILocation(line: 5295, column: 5, scope: !4974)
!4999 = !DILocation(line: 5297, column: 10, scope: !4895)
!5000 = !DILocation(line: 5297, column: 3, scope: !4895)
!5001 = !DILocation(line: 5298, column: 1, scope: !4895)
!5002 = distinct !DISubprogram(name: "create_new_ivs", scope: !3, file: !3, line: 5354, type: !5003, scopeLine: 5355, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5003 = !DISubroutineType(types: !5004)
!5004 = !{null, !2530, !2576}
!5005 = !DILocalVariable(name: "data", arg: 1, scope: !5002, file: !3, line: 5354, type: !2530)
!5006 = !DILocation(line: 5354, column: 37, scope: !5002)
!5007 = !DILocalVariable(name: "set", arg: 2, scope: !5002, file: !3, line: 5354, type: !2576)
!5008 = !DILocation(line: 5354, column: 57, scope: !5002)
!5009 = !DILocalVariable(name: "i", scope: !5002, file: !3, line: 5356, type: !6)
!5010 = !DILocation(line: 5356, column: 12, scope: !5002)
!5011 = !DILocalVariable(name: "cand", scope: !5002, file: !3, line: 5357, type: !2472)
!5012 = !DILocation(line: 5357, column: 19, scope: !5002)
!5013 = !DILocalVariable(name: "bi", scope: !5002, file: !3, line: 5358, type: !4257)
!5014 = !DILocation(line: 5358, column: 19, scope: !5002)
!5015 = !DILocation(line: 5360, column: 3, scope: !5016)
!5016 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 5360, column: 3)
!5017 = !DILocation(line: 5360, column: 3, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5016, file: !3, line: 5360, column: 3)
!5019 = !DILocation(line: 5362, column: 23, scope: !5020)
!5020 = distinct !DILexicalBlock(scope: !5018, file: !3, line: 5361, column: 5)
!5021 = !DILocation(line: 5362, column: 29, scope: !5020)
!5022 = !DILocation(line: 5362, column: 14, scope: !5020)
!5023 = !DILocation(line: 5362, column: 12, scope: !5020)
!5024 = !DILocation(line: 5363, column: 22, scope: !5020)
!5025 = !DILocation(line: 5363, column: 28, scope: !5020)
!5026 = !DILocation(line: 5363, column: 7, scope: !5020)
!5027 = !DILocation(line: 5364, column: 5, scope: !5020)
!5028 = distinct !{!5028, !5015, !5029}
!5029 = !DILocation(line: 5364, column: 5, scope: !5016)
!5030 = !DILocation(line: 5365, column: 1, scope: !5002)
!5031 = distinct !DISubprogram(name: "iv_ca_free", scope: !3, file: !3, line: 4859, type: !5032, scopeLine: 4860, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5032 = !DISubroutineType(types: !5033)
!5033 = !{null, !5034}
!5034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2576, size: 64)
!5035 = !DILocalVariable(name: "ivs", arg: 1, scope: !5031, file: !3, line: 4859, type: !5034)
!5036 = !DILocation(line: 4859, column: 28, scope: !5031)
!5037 = !DILocation(line: 4861, column: 11, scope: !5031)
!5038 = !DILocation(line: 4861, column: 10, scope: !5031)
!5039 = !DILocation(line: 4861, column: 17, scope: !5031)
!5040 = !DILocation(line: 4861, column: 9, scope: !5031)
!5041 = !DILocation(line: 4861, column: 3, scope: !5031)
!5042 = !DILocation(line: 4862, column: 11, scope: !5031)
!5043 = !DILocation(line: 4862, column: 10, scope: !5031)
!5044 = !DILocation(line: 4862, column: 17, scope: !5031)
!5045 = !DILocation(line: 4862, column: 9, scope: !5031)
!5046 = !DILocation(line: 4862, column: 3, scope: !5031)
!5047 = !DILocation(line: 4863, column: 3, scope: !5031)
!5048 = !DILocation(line: 4864, column: 11, scope: !5031)
!5049 = !DILocation(line: 4864, column: 10, scope: !5031)
!5050 = !DILocation(line: 4864, column: 17, scope: !5031)
!5051 = !DILocation(line: 4864, column: 9, scope: !5031)
!5052 = !DILocation(line: 4864, column: 3, scope: !5031)
!5053 = !DILocation(line: 4865, column: 10, scope: !5031)
!5054 = !DILocation(line: 4865, column: 9, scope: !5031)
!5055 = !DILocation(line: 4865, column: 3, scope: !5031)
!5056 = !DILocation(line: 4866, column: 4, scope: !5031)
!5057 = !DILocation(line: 4866, column: 8, scope: !5031)
!5058 = !DILocation(line: 4867, column: 1, scope: !5031)
!5059 = distinct !DISubprogram(name: "rewrite_uses", scope: !3, file: !3, line: 5644, type: !3665, scopeLine: 5645, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5060 = !DILocalVariable(name: "data", arg: 1, scope: !5059, file: !3, line: 5644, type: !2530)
!5061 = !DILocation(line: 5644, column: 35, scope: !5059)
!5062 = !DILocalVariable(name: "i", scope: !5059, file: !3, line: 5646, type: !6)
!5063 = !DILocation(line: 5646, column: 12, scope: !5059)
!5064 = !DILocalVariable(name: "cand", scope: !5059, file: !3, line: 5647, type: !2472)
!5065 = !DILocation(line: 5647, column: 19, scope: !5059)
!5066 = !DILocalVariable(name: "use", scope: !5059, file: !3, line: 5648, type: !2457)
!5067 = !DILocation(line: 5648, column: 18, scope: !5059)
!5068 = !DILocation(line: 5650, column: 10, scope: !5069)
!5069 = distinct !DILexicalBlock(scope: !5059, file: !3, line: 5650, column: 3)
!5070 = !DILocation(line: 5650, column: 8, scope: !5069)
!5071 = !DILocation(line: 5650, column: 15, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5069, file: !3, line: 5650, column: 3)
!5073 = !DILocation(line: 5650, column: 30, scope: !5072)
!5074 = !DILocation(line: 5650, column: 19, scope: !5072)
!5075 = !DILocation(line: 5650, column: 17, scope: !5072)
!5076 = !DILocation(line: 5650, column: 3, scope: !5069)
!5077 = !DILocation(line: 5652, column: 21, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 5651, column: 5)
!5079 = !DILocation(line: 5652, column: 27, scope: !5078)
!5080 = !DILocation(line: 5652, column: 13, scope: !5078)
!5081 = !DILocation(line: 5652, column: 11, scope: !5078)
!5082 = !DILocation(line: 5653, column: 14, scope: !5078)
!5083 = !DILocation(line: 5653, column: 19, scope: !5078)
!5084 = !DILocation(line: 5653, column: 12, scope: !5078)
!5085 = !DILocation(line: 5654, column: 7, scope: !5078)
!5086 = !DILocation(line: 5656, column: 20, scope: !5078)
!5087 = !DILocation(line: 5656, column: 26, scope: !5078)
!5088 = !DILocation(line: 5656, column: 31, scope: !5078)
!5089 = !DILocation(line: 5656, column: 7, scope: !5078)
!5090 = !DILocation(line: 5657, column: 5, scope: !5078)
!5091 = !DILocation(line: 5650, column: 38, scope: !5072)
!5092 = !DILocation(line: 5650, column: 3, scope: !5072)
!5093 = distinct !{!5093, !5076, !5094}
!5094 = !DILocation(line: 5657, column: 5, scope: !5069)
!5095 = !DILocation(line: 5658, column: 1, scope: !5059)
!5096 = distinct !DISubprogram(name: "remove_unused_ivs", scope: !3, file: !3, line: 5663, type: !3665, scopeLine: 5664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5097 = !DILocalVariable(name: "data", arg: 1, scope: !5096, file: !3, line: 5663, type: !2530)
!5098 = !DILocation(line: 5663, column: 40, scope: !5096)
!5099 = !DILocalVariable(name: "j", scope: !5096, file: !3, line: 5665, type: !6)
!5100 = !DILocation(line: 5665, column: 12, scope: !5096)
!5101 = !DILocalVariable(name: "bi", scope: !5096, file: !3, line: 5666, type: !4257)
!5102 = !DILocation(line: 5666, column: 19, scope: !5096)
!5103 = !DILocalVariable(name: "toremove", scope: !5096, file: !3, line: 5667, type: !1852)
!5104 = !DILocation(line: 5667, column: 10, scope: !5096)
!5105 = !DILocation(line: 5667, column: 21, scope: !5096)
!5106 = !DILocation(line: 5672, column: 3, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 5672, column: 3)
!5108 = !DILocation(line: 5672, column: 3, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 5672, column: 3)
!5110 = !DILocalVariable(name: "info", scope: !5111, file: !3, line: 5674, type: !2426)
!5111 = distinct !DILexicalBlock(scope: !5109, file: !3, line: 5673, column: 5)
!5112 = !DILocation(line: 5674, column: 28, scope: !5111)
!5113 = !DILocation(line: 5676, column: 24, scope: !5111)
!5114 = !DILocation(line: 5676, column: 30, scope: !5111)
!5115 = !DILocation(line: 5676, column: 14, scope: !5111)
!5116 = !DILocation(line: 5676, column: 12, scope: !5111)
!5117 = !DILocation(line: 5677, column: 11, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5111, file: !3, line: 5677, column: 11)
!5119 = !DILocation(line: 5677, column: 17, scope: !5118)
!5120 = !DILocation(line: 5678, column: 4, scope: !5118)
!5121 = !DILocation(line: 5678, column: 23, scope: !5118)
!5122 = !DILocation(line: 5678, column: 29, scope: !5118)
!5123 = !DILocation(line: 5678, column: 33, scope: !5118)
!5124 = !DILocation(line: 5678, column: 8, scope: !5118)
!5125 = !DILocation(line: 5679, column: 4, scope: !5118)
!5126 = !DILocation(line: 5679, column: 8, scope: !5118)
!5127 = !DILocation(line: 5679, column: 14, scope: !5118)
!5128 = !DILocation(line: 5680, column: 4, scope: !5118)
!5129 = !DILocation(line: 5680, column: 8, scope: !5118)
!5130 = !DILocation(line: 5680, column: 14, scope: !5118)
!5131 = !DILocation(line: 5680, column: 18, scope: !5118)
!5132 = !DILocation(line: 5681, column: 4, scope: !5118)
!5133 = !DILocation(line: 5681, column: 8, scope: !5118)
!5134 = !DILocation(line: 5681, column: 14, scope: !5118)
!5135 = !DILocation(line: 5677, column: 11, scope: !5111)
!5136 = !DILocation(line: 5682, column: 18, scope: !5118)
!5137 = !DILocation(line: 5682, column: 28, scope: !5118)
!5138 = !DILocation(line: 5682, column: 2, scope: !5118)
!5139 = !DILocation(line: 5683, column: 5, scope: !5111)
!5140 = distinct !{!5140, !5106, !5141}
!5141 = !DILocation(line: 5683, column: 5, scope: !5107)
!5142 = !DILocation(line: 5685, column: 24, scope: !5096)
!5143 = !DILocation(line: 5685, column: 3, scope: !5096)
!5144 = !DILocation(line: 5687, column: 3, scope: !5096)
!5145 = !DILocation(line: 5688, column: 1, scope: !5096)
!5146 = distinct !DISubprogram(name: "free_loop_data", scope: !3, file: !3, line: 5693, type: !3665, scopeLine: 5694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5147 = !DILocalVariable(name: "data", arg: 1, scope: !5146, file: !3, line: 5693, type: !2530)
!5148 = !DILocation(line: 5693, column: 37, scope: !5146)
!5149 = !DILocalVariable(name: "i", scope: !5146, file: !3, line: 5695, type: !6)
!5150 = !DILocation(line: 5695, column: 12, scope: !5146)
!5151 = !DILocalVariable(name: "j", scope: !5146, file: !3, line: 5695, type: !6)
!5152 = !DILocation(line: 5695, column: 15, scope: !5146)
!5153 = !DILocalVariable(name: "bi", scope: !5146, file: !3, line: 5696, type: !4257)
!5154 = !DILocation(line: 5696, column: 19, scope: !5146)
!5155 = !DILocalVariable(name: "obj", scope: !5146, file: !3, line: 5697, type: !1134)
!5156 = !DILocation(line: 5697, column: 8, scope: !5146)
!5157 = !DILocation(line: 5699, column: 7, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 5699, column: 7)
!5159 = !DILocation(line: 5699, column: 13, scope: !5158)
!5160 = !DILocation(line: 5699, column: 7, scope: !5146)
!5161 = !DILocation(line: 5701, column: 28, scope: !5162)
!5162 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 5700, column: 5)
!5163 = !DILocation(line: 5701, column: 34, scope: !5162)
!5164 = !DILocation(line: 5701, column: 7, scope: !5162)
!5165 = !DILocation(line: 5702, column: 7, scope: !5162)
!5166 = !DILocation(line: 5702, column: 13, scope: !5162)
!5167 = !DILocation(line: 5702, column: 20, scope: !5162)
!5168 = !DILocation(line: 5703, column: 5, scope: !5162)
!5169 = !DILocation(line: 5705, column: 3, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 5705, column: 3)
!5171 = !DILocation(line: 5705, column: 3, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 5705, column: 3)
!5173 = !DILocalVariable(name: "info", scope: !5174, file: !3, line: 5707, type: !2426)
!5174 = distinct !DILexicalBlock(scope: !5172, file: !3, line: 5706, column: 5)
!5175 = !DILocation(line: 5707, column: 28, scope: !5174)
!5176 = !DILocation(line: 5709, column: 24, scope: !5174)
!5177 = !DILocation(line: 5709, column: 30, scope: !5174)
!5178 = !DILocation(line: 5709, column: 14, scope: !5174)
!5179 = !DILocation(line: 5709, column: 12, scope: !5174)
!5180 = !DILocation(line: 5710, column: 11, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5174, file: !3, line: 5710, column: 11)
!5182 = !DILocation(line: 5710, column: 17, scope: !5181)
!5183 = !DILocation(line: 5710, column: 11, scope: !5174)
!5184 = !DILocation(line: 5711, column: 8, scope: !5181)
!5185 = !DILocation(line: 5711, column: 14, scope: !5181)
!5186 = !DILocation(line: 5711, column: 2, scope: !5181)
!5187 = !DILocation(line: 5712, column: 7, scope: !5174)
!5188 = !DILocation(line: 5712, column: 13, scope: !5174)
!5189 = !DILocation(line: 5712, column: 16, scope: !5174)
!5190 = !DILocation(line: 5713, column: 7, scope: !5174)
!5191 = !DILocation(line: 5713, column: 13, scope: !5174)
!5192 = !DILocation(line: 5713, column: 28, scope: !5174)
!5193 = !DILocation(line: 5714, column: 7, scope: !5174)
!5194 = !DILocation(line: 5714, column: 13, scope: !5174)
!5195 = !DILocation(line: 5714, column: 26, scope: !5174)
!5196 = !DILocation(line: 5715, column: 7, scope: !5174)
!5197 = !DILocation(line: 5715, column: 13, scope: !5174)
!5198 = !DILocation(line: 5715, column: 20, scope: !5174)
!5199 = !DILocation(line: 5716, column: 5, scope: !5174)
!5200 = distinct !{!5200, !5169, !5201}
!5201 = !DILocation(line: 5716, column: 5, scope: !5170)
!5202 = !DILocation(line: 5717, column: 17, scope: !5146)
!5203 = !DILocation(line: 5717, column: 23, scope: !5146)
!5204 = !DILocation(line: 5717, column: 3, scope: !5146)
!5205 = !DILocation(line: 5718, column: 17, scope: !5146)
!5206 = !DILocation(line: 5718, column: 23, scope: !5146)
!5207 = !DILocation(line: 5718, column: 3, scope: !5146)
!5208 = !DILocation(line: 5720, column: 10, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 5720, column: 3)
!5210 = !DILocation(line: 5720, column: 8, scope: !5209)
!5211 = !DILocation(line: 5720, column: 15, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 5720, column: 3)
!5213 = !DILocation(line: 5720, column: 30, scope: !5212)
!5214 = !DILocation(line: 5720, column: 19, scope: !5212)
!5215 = !DILocation(line: 5720, column: 17, scope: !5212)
!5216 = !DILocation(line: 5720, column: 3, scope: !5209)
!5217 = !DILocalVariable(name: "use", scope: !5218, file: !3, line: 5722, type: !2457)
!5218 = distinct !DILexicalBlock(scope: !5212, file: !3, line: 5721, column: 5)
!5219 = !DILocation(line: 5722, column: 22, scope: !5218)
!5220 = !DILocation(line: 5722, column: 36, scope: !5218)
!5221 = !DILocation(line: 5722, column: 42, scope: !5218)
!5222 = !DILocation(line: 5722, column: 28, scope: !5218)
!5223 = !DILocation(line: 5724, column: 13, scope: !5218)
!5224 = !DILocation(line: 5724, column: 18, scope: !5218)
!5225 = !DILocation(line: 5724, column: 7, scope: !5218)
!5226 = !DILocation(line: 5725, column: 7, scope: !5218)
!5227 = !DILocation(line: 5726, column: 14, scope: !5228)
!5228 = distinct !DILexicalBlock(scope: !5218, file: !3, line: 5726, column: 7)
!5229 = !DILocation(line: 5726, column: 12, scope: !5228)
!5230 = !DILocation(line: 5726, column: 19, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5228, file: !3, line: 5726, column: 7)
!5232 = !DILocation(line: 5726, column: 23, scope: !5231)
!5233 = !DILocation(line: 5726, column: 28, scope: !5231)
!5234 = !DILocation(line: 5726, column: 21, scope: !5231)
!5235 = !DILocation(line: 5726, column: 7, scope: !5228)
!5236 = !DILocation(line: 5727, column: 6, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 5727, column: 6)
!5238 = !DILocation(line: 5727, column: 11, scope: !5237)
!5239 = !DILocation(line: 5727, column: 20, scope: !5237)
!5240 = !DILocation(line: 5727, column: 23, scope: !5237)
!5241 = !DILocation(line: 5727, column: 6, scope: !5231)
!5242 = !DILocation(line: 5728, column: 4, scope: !5237)
!5243 = !DILocation(line: 5726, column: 44, scope: !5231)
!5244 = !DILocation(line: 5726, column: 7, scope: !5231)
!5245 = distinct !{!5245, !5235, !5246}
!5246 = !DILocation(line: 5728, column: 4, scope: !5228)
!5247 = !DILocation(line: 5729, column: 13, scope: !5218)
!5248 = !DILocation(line: 5729, column: 18, scope: !5218)
!5249 = !DILocation(line: 5729, column: 7, scope: !5218)
!5250 = !DILocation(line: 5730, column: 13, scope: !5218)
!5251 = !DILocation(line: 5730, column: 7, scope: !5218)
!5252 = !DILocation(line: 5731, column: 5, scope: !5218)
!5253 = !DILocation(line: 5720, column: 38, scope: !5212)
!5254 = !DILocation(line: 5720, column: 3, scope: !5212)
!5255 = distinct !{!5255, !5216, !5256}
!5256 = !DILocation(line: 5731, column: 5, scope: !5209)
!5257 = !DILocation(line: 5732, column: 3, scope: !5146)
!5258 = !DILocation(line: 5734, column: 10, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 5734, column: 3)
!5260 = !DILocation(line: 5734, column: 8, scope: !5259)
!5261 = !DILocation(line: 5734, column: 15, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 5734, column: 3)
!5263 = !DILocation(line: 5734, column: 31, scope: !5262)
!5264 = !DILocation(line: 5734, column: 19, scope: !5262)
!5265 = !DILocation(line: 5734, column: 17, scope: !5262)
!5266 = !DILocation(line: 5734, column: 3, scope: !5259)
!5267 = !DILocalVariable(name: "cand", scope: !5268, file: !3, line: 5736, type: !2472)
!5268 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 5735, column: 5)
!5269 = !DILocation(line: 5736, column: 23, scope: !5268)
!5270 = !DILocation(line: 5736, column: 39, scope: !5268)
!5271 = !DILocation(line: 5736, column: 45, scope: !5268)
!5272 = !DILocation(line: 5736, column: 30, scope: !5268)
!5273 = !DILocation(line: 5738, column: 11, scope: !5274)
!5274 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 5738, column: 11)
!5275 = !DILocation(line: 5738, column: 17, scope: !5274)
!5276 = !DILocation(line: 5738, column: 11, scope: !5268)
!5277 = !DILocation(line: 5739, column: 8, scope: !5274)
!5278 = !DILocation(line: 5739, column: 14, scope: !5274)
!5279 = !DILocation(line: 5739, column: 2, scope: !5274)
!5280 = !DILocation(line: 5740, column: 11, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 5740, column: 11)
!5282 = !DILocation(line: 5740, column: 17, scope: !5281)
!5283 = !DILocation(line: 5740, column: 11, scope: !5268)
!5284 = !DILocation(line: 5741, column: 2, scope: !5281)
!5285 = !DILocation(line: 5742, column: 13, scope: !5268)
!5286 = !DILocation(line: 5742, column: 7, scope: !5268)
!5287 = !DILocation(line: 5743, column: 5, scope: !5268)
!5288 = !DILocation(line: 5734, column: 39, scope: !5262)
!5289 = !DILocation(line: 5734, column: 3, scope: !5262)
!5290 = distinct !{!5290, !5266, !5291}
!5291 = !DILocation(line: 5743, column: 5, scope: !5259)
!5292 = !DILocation(line: 5744, column: 3, scope: !5146)
!5293 = !DILocation(line: 5746, column: 7, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 5746, column: 7)
!5295 = !DILocation(line: 5746, column: 13, scope: !5294)
!5296 = !DILocation(line: 5746, column: 33, scope: !5294)
!5297 = !DILocation(line: 5746, column: 31, scope: !5294)
!5298 = !DILocation(line: 5746, column: 7, scope: !5146)
!5299 = !DILocation(line: 5748, column: 37, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 5747, column: 5)
!5301 = !DILocation(line: 5748, column: 35, scope: !5300)
!5302 = !DILocation(line: 5748, column: 7, scope: !5300)
!5303 = !DILocation(line: 5748, column: 13, scope: !5300)
!5304 = !DILocation(line: 5748, column: 31, scope: !5300)
!5305 = !DILocation(line: 5749, column: 13, scope: !5300)
!5306 = !DILocation(line: 5749, column: 19, scope: !5300)
!5307 = !DILocation(line: 5749, column: 7, scope: !5300)
!5308 = !DILocation(line: 5750, column: 28, scope: !5300)
!5309 = !DILocation(line: 5750, column: 7, scope: !5300)
!5310 = !DILocation(line: 5750, column: 13, scope: !5300)
!5311 = !DILocation(line: 5750, column: 26, scope: !5300)
!5312 = !DILocation(line: 5751, column: 5, scope: !5300)
!5313 = !DILocation(line: 5753, column: 3, scope: !5146)
!5314 = !DILocation(line: 5753, column: 9, scope: !5146)
!5315 = !DILocation(line: 5753, column: 20, scope: !5146)
!5316 = !DILocation(line: 5755, column: 10, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 5755, column: 3)
!5318 = !DILocation(line: 5755, column: 8, scope: !5317)
!5319 = !DILocation(line: 5755, column: 15, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 5755, column: 3)
!5321 = !DILocation(line: 5755, column: 3, scope: !5317)
!5322 = !DILocation(line: 5756, column: 5, scope: !5320)
!5323 = !DILocation(line: 5755, column: 63, scope: !5320)
!5324 = !DILocation(line: 5755, column: 3, scope: !5320)
!5325 = distinct !{!5325, !5321, !5326}
!5326 = !DILocation(line: 5756, column: 5, scope: !5317)
!5327 = !DILocation(line: 5758, column: 3, scope: !5146)
!5328 = !DILocation(line: 5759, column: 1, scope: !5146)
!5329 = distinct !DISubprogram(name: "find_bivs", scope: !3, file: !3, line: 911, type: !4250, scopeLine: 912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5330 = !DILocalVariable(name: "data", arg: 1, scope: !5329, file: !3, line: 911, type: !2530)
!5331 = !DILocation(line: 911, column: 32, scope: !5329)
!5332 = !DILocalVariable(name: "phi", scope: !5329, file: !3, line: 913, type: !1436)
!5333 = !DILocation(line: 913, column: 10, scope: !5329)
!5334 = !DILocalVariable(name: "step", scope: !5329, file: !3, line: 914, type: !1134)
!5335 = !DILocation(line: 914, column: 8, scope: !5329)
!5336 = !DILocalVariable(name: "type", scope: !5329, file: !3, line: 914, type: !1134)
!5337 = !DILocation(line: 914, column: 14, scope: !5329)
!5338 = !DILocalVariable(name: "base", scope: !5329, file: !3, line: 914, type: !1134)
!5339 = !DILocation(line: 914, column: 20, scope: !5329)
!5340 = !DILocalVariable(name: "found", scope: !5329, file: !3, line: 915, type: !136)
!5341 = !DILocation(line: 915, column: 8, scope: !5329)
!5342 = !DILocalVariable(name: "loop", scope: !5329, file: !3, line: 916, type: !1651)
!5343 = !DILocation(line: 916, column: 16, scope: !5329)
!5344 = !DILocation(line: 916, column: 23, scope: !5329)
!5345 = !DILocation(line: 916, column: 29, scope: !5329)
!5346 = !DILocalVariable(name: "psi", scope: !5329, file: !3, line: 917, type: !4328)
!5347 = !DILocation(line: 917, column: 24, scope: !5329)
!5348 = !DILocation(line: 919, column: 30, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5329, file: !3, line: 919, column: 3)
!5350 = !DILocation(line: 919, column: 36, scope: !5349)
!5351 = !DILocation(line: 919, column: 14, scope: !5349)
!5352 = !DILocation(line: 919, column: 8, scope: !5349)
!5353 = !DILocation(line: 919, column: 46, scope: !5354)
!5354 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 919, column: 3)
!5355 = !DILocation(line: 919, column: 45, scope: !5354)
!5356 = !DILocation(line: 919, column: 3, scope: !5349)
!5357 = !DILocation(line: 921, column: 13, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !5354, file: !3, line: 920, column: 5)
!5359 = !DILocation(line: 921, column: 11, scope: !5358)
!5360 = !DILocation(line: 923, column: 11, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 923, column: 11)
!5362 = !DILocation(line: 923, column: 11, scope: !5358)
!5363 = !DILocation(line: 924, column: 2, scope: !5361)
!5364 = !DILocation(line: 926, column: 34, scope: !5358)
!5365 = !DILocation(line: 926, column: 14, scope: !5358)
!5366 = !DILocation(line: 926, column: 12, scope: !5358)
!5367 = !DILocation(line: 927, column: 12, scope: !5368)
!5368 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 927, column: 11)
!5369 = !DILocation(line: 927, column: 11, scope: !5358)
!5370 = !DILocation(line: 928, column: 2, scope: !5368)
!5371 = !DILocation(line: 930, column: 14, scope: !5358)
!5372 = !DILocation(line: 930, column: 12, scope: !5358)
!5373 = !DILocation(line: 931, column: 40, scope: !5358)
!5374 = !DILocation(line: 931, column: 14, scope: !5358)
!5375 = !DILocation(line: 931, column: 12, scope: !5358)
!5376 = !DILocation(line: 932, column: 41, scope: !5377)
!5377 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 932, column: 11)
!5378 = !DILocation(line: 932, column: 11, scope: !5377)
!5379 = !DILocation(line: 933, column: 4, scope: !5377)
!5380 = !DILocation(line: 933, column: 37, scope: !5377)
!5381 = !DILocation(line: 933, column: 7, scope: !5377)
!5382 = !DILocation(line: 932, column: 11, scope: !5358)
!5383 = !DILocation(line: 934, column: 2, scope: !5377)
!5384 = !DILocation(line: 936, column: 14, scope: !5358)
!5385 = !DILocation(line: 936, column: 12, scope: !5358)
!5386 = !DILocation(line: 937, column: 14, scope: !5358)
!5387 = !DILocation(line: 937, column: 12, scope: !5358)
!5388 = !DILocation(line: 938, column: 11, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 938, column: 11)
!5390 = !DILocation(line: 938, column: 11, scope: !5358)
!5391 = !DILocation(line: 940, column: 8, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 940, column: 8)
!5393 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 939, column: 2)
!5394 = !DILocation(line: 940, column: 8, scope: !5393)
!5395 = !DILocation(line: 941, column: 13, scope: !5392)
!5396 = !DILocation(line: 941, column: 11, scope: !5392)
!5397 = !DILocation(line: 941, column: 6, scope: !5392)
!5398 = !DILocation(line: 943, column: 13, scope: !5392)
!5399 = !DILocation(line: 943, column: 11, scope: !5392)
!5400 = !DILocation(line: 944, column: 2, scope: !5393)
!5401 = !DILocation(line: 946, column: 15, scope: !5358)
!5402 = !DILocation(line: 946, column: 21, scope: !5358)
!5403 = !DILocation(line: 946, column: 39, scope: !5358)
!5404 = !DILocation(line: 946, column: 45, scope: !5358)
!5405 = !DILocation(line: 946, column: 7, scope: !5358)
!5406 = !DILocation(line: 947, column: 13, scope: !5358)
!5407 = !DILocation(line: 948, column: 5, scope: !5358)
!5408 = !DILocation(line: 919, column: 63, scope: !5354)
!5409 = !DILocation(line: 919, column: 3, scope: !5354)
!5410 = distinct !{!5410, !5356, !5411}
!5411 = !DILocation(line: 948, column: 5, scope: !5349)
!5412 = !DILocation(line: 950, column: 10, scope: !5329)
!5413 = !DILocation(line: 950, column: 3, scope: !5329)
!5414 = distinct !DISubprogram(name: "find_givs", scope: !3, file: !3, line: 1046, type: !3665, scopeLine: 1047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5415 = !DILocalVariable(name: "data", arg: 1, scope: !5414, file: !3, line: 1046, type: !2530)
!5416 = !DILocation(line: 1046, column: 32, scope: !5414)
!5417 = !DILocalVariable(name: "loop", scope: !5414, file: !3, line: 1048, type: !1651)
!5418 = !DILocation(line: 1048, column: 16, scope: !5414)
!5419 = !DILocation(line: 1048, column: 23, scope: !5414)
!5420 = !DILocation(line: 1048, column: 29, scope: !5414)
!5421 = !DILocalVariable(name: "body", scope: !5414, file: !3, line: 1049, type: !3900)
!5422 = !DILocation(line: 1049, column: 16, scope: !5414)
!5423 = !DILocation(line: 1049, column: 51, scope: !5414)
!5424 = !DILocation(line: 1049, column: 23, scope: !5414)
!5425 = !DILocalVariable(name: "i", scope: !5414, file: !3, line: 1050, type: !6)
!5426 = !DILocation(line: 1050, column: 12, scope: !5414)
!5427 = !DILocation(line: 1052, column: 10, scope: !5428)
!5428 = distinct !DILexicalBlock(scope: !5414, file: !3, line: 1052, column: 3)
!5429 = !DILocation(line: 1052, column: 8, scope: !5428)
!5430 = !DILocation(line: 1052, column: 15, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5428, file: !3, line: 1052, column: 3)
!5432 = !DILocation(line: 1052, column: 19, scope: !5431)
!5433 = !DILocation(line: 1052, column: 25, scope: !5431)
!5434 = !DILocation(line: 1052, column: 17, scope: !5431)
!5435 = !DILocation(line: 1052, column: 3, scope: !5428)
!5436 = !DILocation(line: 1053, column: 22, scope: !5431)
!5437 = !DILocation(line: 1053, column: 28, scope: !5431)
!5438 = !DILocation(line: 1053, column: 33, scope: !5431)
!5439 = !DILocation(line: 1053, column: 5, scope: !5431)
!5440 = !DILocation(line: 1052, column: 37, scope: !5431)
!5441 = !DILocation(line: 1052, column: 3, scope: !5431)
!5442 = distinct !{!5442, !5435, !5443}
!5443 = !DILocation(line: 1053, column: 35, scope: !5428)
!5444 = !DILocation(line: 1054, column: 9, scope: !5414)
!5445 = !DILocation(line: 1054, column: 3, scope: !5414)
!5446 = !DILocation(line: 1055, column: 1, scope: !5414)
!5447 = distinct !DISubprogram(name: "mark_bivs", scope: !3, file: !3, line: 956, type: !3665, scopeLine: 957, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5448 = !DILocalVariable(name: "data", arg: 1, scope: !5447, file: !3, line: 956, type: !2530)
!5449 = !DILocation(line: 956, column: 32, scope: !5447)
!5450 = !DILocalVariable(name: "phi", scope: !5447, file: !3, line: 958, type: !1436)
!5451 = !DILocation(line: 958, column: 10, scope: !5447)
!5452 = !DILocalVariable(name: "var", scope: !5447, file: !3, line: 959, type: !1134)
!5453 = !DILocation(line: 959, column: 8, scope: !5447)
!5454 = !DILocalVariable(name: "iv", scope: !5447, file: !3, line: 960, type: !2431)
!5455 = !DILocation(line: 960, column: 14, scope: !5447)
!5456 = !DILocalVariable(name: "incr_iv", scope: !5447, file: !3, line: 960, type: !2431)
!5457 = !DILocation(line: 960, column: 19, scope: !5447)
!5458 = !DILocalVariable(name: "loop", scope: !5447, file: !3, line: 961, type: !1651)
!5459 = !DILocation(line: 961, column: 16, scope: !5447)
!5460 = !DILocation(line: 961, column: 23, scope: !5447)
!5461 = !DILocation(line: 961, column: 29, scope: !5447)
!5462 = !DILocalVariable(name: "incr_bb", scope: !5447, file: !3, line: 962, type: !1399)
!5463 = !DILocation(line: 962, column: 15, scope: !5447)
!5464 = !DILocalVariable(name: "psi", scope: !5447, file: !3, line: 963, type: !4328)
!5465 = !DILocation(line: 963, column: 24, scope: !5447)
!5466 = !DILocation(line: 965, column: 30, scope: !5467)
!5467 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 965, column: 3)
!5468 = !DILocation(line: 965, column: 36, scope: !5467)
!5469 = !DILocation(line: 965, column: 14, scope: !5467)
!5470 = !DILocation(line: 965, column: 8, scope: !5467)
!5471 = !DILocation(line: 965, column: 46, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5467, file: !3, line: 965, column: 3)
!5473 = !DILocation(line: 965, column: 45, scope: !5472)
!5474 = !DILocation(line: 965, column: 3, scope: !5467)
!5475 = !DILocation(line: 967, column: 13, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5472, file: !3, line: 966, column: 5)
!5477 = !DILocation(line: 967, column: 11, scope: !5476)
!5478 = !DILocation(line: 969, column: 20, scope: !5476)
!5479 = !DILocation(line: 969, column: 26, scope: !5476)
!5480 = !DILocation(line: 969, column: 12, scope: !5476)
!5481 = !DILocation(line: 969, column: 10, scope: !5476)
!5482 = !DILocation(line: 970, column: 12, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 970, column: 11)
!5484 = !DILocation(line: 970, column: 11, scope: !5476)
!5485 = !DILocation(line: 971, column: 2, scope: !5483)
!5486 = !DILocation(line: 973, column: 13, scope: !5476)
!5487 = !DILocation(line: 973, column: 11, scope: !5476)
!5488 = !DILocation(line: 974, column: 25, scope: !5476)
!5489 = !DILocation(line: 974, column: 31, scope: !5476)
!5490 = !DILocation(line: 974, column: 17, scope: !5476)
!5491 = !DILocation(line: 974, column: 15, scope: !5476)
!5492 = !DILocation(line: 975, column: 12, scope: !5493)
!5493 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 975, column: 11)
!5494 = !DILocation(line: 975, column: 11, scope: !5476)
!5495 = !DILocation(line: 976, column: 2, scope: !5493)
!5496 = !DILocation(line: 979, column: 28, scope: !5476)
!5497 = !DILocation(line: 979, column: 17, scope: !5476)
!5498 = !DILocation(line: 979, column: 15, scope: !5476)
!5499 = !DILocation(line: 980, column: 11, scope: !5500)
!5500 = distinct !DILexicalBlock(scope: !5476, file: !3, line: 980, column: 11)
!5501 = !DILocation(line: 980, column: 20, scope: !5500)
!5502 = !DILocation(line: 980, column: 35, scope: !5500)
!5503 = !DILocation(line: 980, column: 41, scope: !5500)
!5504 = !DILocation(line: 980, column: 32, scope: !5500)
!5505 = !DILocation(line: 981, column: 4, scope: !5500)
!5506 = !DILocation(line: 981, column: 8, scope: !5500)
!5507 = !DILocation(line: 981, column: 17, scope: !5500)
!5508 = !DILocation(line: 981, column: 23, scope: !5500)
!5509 = !DILocation(line: 980, column: 11, scope: !5476)
!5510 = !DILocation(line: 982, column: 2, scope: !5500)
!5511 = !DILocation(line: 984, column: 7, scope: !5476)
!5512 = !DILocation(line: 984, column: 11, scope: !5476)
!5513 = !DILocation(line: 984, column: 17, scope: !5476)
!5514 = !DILocation(line: 985, column: 7, scope: !5476)
!5515 = !DILocation(line: 985, column: 16, scope: !5476)
!5516 = !DILocation(line: 985, column: 22, scope: !5476)
!5517 = !DILocation(line: 986, column: 5, scope: !5476)
!5518 = !DILocation(line: 965, column: 63, scope: !5472)
!5519 = !DILocation(line: 965, column: 3, scope: !5472)
!5520 = distinct !{!5520, !5474, !5521}
!5521 = !DILocation(line: 986, column: 5, scope: !5467)
!5522 = !DILocation(line: 987, column: 1, scope: !5447)
!5523 = distinct !DISubprogram(name: "niter_for_single_dom_exit", scope: !3, file: !3, line: 755, type: !5524, scopeLine: 756, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5524 = !DISubroutineType(types: !5525)
!5525 = !{!1134, !2530}
!5526 = !DILocalVariable(name: "data", arg: 1, scope: !5523, file: !3, line: 755, type: !2530)
!5527 = !DILocation(line: 755, column: 48, scope: !5523)
!5528 = !DILocalVariable(name: "exit", scope: !5523, file: !3, line: 757, type: !1416)
!5529 = !DILocation(line: 757, column: 8, scope: !5523)
!5530 = !DILocation(line: 757, column: 32, scope: !5523)
!5531 = !DILocation(line: 757, column: 38, scope: !5523)
!5532 = !DILocation(line: 757, column: 15, scope: !5523)
!5533 = !DILocation(line: 759, column: 8, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5523, file: !3, line: 759, column: 7)
!5535 = !DILocation(line: 759, column: 7, scope: !5523)
!5536 = !DILocation(line: 760, column: 5, scope: !5534)
!5537 = !DILocation(line: 762, column: 26, scope: !5523)
!5538 = !DILocation(line: 762, column: 32, scope: !5523)
!5539 = !DILocation(line: 762, column: 10, scope: !5523)
!5540 = !DILocation(line: 762, column: 3, scope: !5523)
!5541 = !DILocation(line: 763, column: 1, scope: !5523)
!5542 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1074, file: !1074, line: 224, type: !5543, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5543 = !DISubroutineType(types: !5544)
!5544 = !{null, !5545, !5546, !6, !2584}
!5545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4257, size: 64)
!5546 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1016, line: 48, baseType: !5547)
!5547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5548, size: 64)
!5548 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1073)
!5549 = !DILocalVariable(name: "bi", arg: 1, scope: !5542, file: !1074, line: 224, type: !5545)
!5550 = !DILocation(line: 224, column: 37, scope: !5542)
!5551 = !DILocalVariable(name: "map", arg: 2, scope: !5542, file: !1074, line: 224, type: !5546)
!5552 = !DILocation(line: 224, column: 54, scope: !5542)
!5553 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5542, file: !1074, line: 225, type: !6)
!5554 = !DILocation(line: 225, column: 15, scope: !5542)
!5555 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5542, file: !1074, line: 225, type: !2584)
!5556 = !DILocation(line: 225, column: 36, scope: !5542)
!5557 = !DILocation(line: 227, column: 14, scope: !5542)
!5558 = !DILocation(line: 227, column: 19, scope: !5542)
!5559 = !DILocation(line: 227, column: 3, scope: !5542)
!5560 = !DILocation(line: 227, column: 7, scope: !5542)
!5561 = !DILocation(line: 227, column: 12, scope: !5542)
!5562 = !DILocation(line: 228, column: 3, scope: !5542)
!5563 = !DILocation(line: 228, column: 7, scope: !5542)
!5564 = !DILocation(line: 228, column: 12, scope: !5542)
!5565 = !DILocation(line: 231, column: 3, scope: !5542)
!5566 = !DILocation(line: 233, column: 12, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5568, file: !1074, line: 233, column: 11)
!5568 = distinct !DILexicalBlock(scope: !5542, file: !1074, line: 232, column: 5)
!5569 = !DILocation(line: 233, column: 16, scope: !5567)
!5570 = !DILocation(line: 233, column: 11, scope: !5568)
!5571 = !DILocation(line: 235, column: 4, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5567, file: !1074, line: 234, column: 2)
!5573 = !DILocation(line: 235, column: 8, scope: !5572)
!5574 = !DILocation(line: 235, column: 13, scope: !5572)
!5575 = !DILocation(line: 236, column: 4, scope: !5572)
!5576 = !DILocation(line: 239, column: 11, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5568, file: !1074, line: 239, column: 11)
!5578 = !DILocation(line: 239, column: 15, scope: !5577)
!5579 = !DILocation(line: 239, column: 21, scope: !5577)
!5580 = !DILocation(line: 239, column: 29, scope: !5577)
!5581 = !DILocation(line: 239, column: 39, scope: !5577)
!5582 = !DILocation(line: 239, column: 26, scope: !5577)
!5583 = !DILocation(line: 239, column: 11, scope: !5568)
!5584 = !DILocation(line: 240, column: 2, scope: !5577)
!5585 = !DILocation(line: 241, column: 18, scope: !5568)
!5586 = !DILocation(line: 241, column: 22, scope: !5568)
!5587 = !DILocation(line: 241, column: 28, scope: !5568)
!5588 = !DILocation(line: 241, column: 7, scope: !5568)
!5589 = !DILocation(line: 241, column: 11, scope: !5568)
!5590 = !DILocation(line: 241, column: 16, scope: !5568)
!5591 = distinct !{!5591, !5565, !5592}
!5592 = !DILocation(line: 242, column: 5, scope: !5542)
!5593 = !DILocation(line: 245, column: 7, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5542, file: !1074, line: 245, column: 7)
!5595 = !DILocation(line: 245, column: 11, scope: !5594)
!5596 = !DILocation(line: 245, column: 17, scope: !5594)
!5597 = !DILocation(line: 245, column: 25, scope: !5594)
!5598 = !DILocation(line: 245, column: 35, scope: !5594)
!5599 = !DILocation(line: 245, column: 22, scope: !5594)
!5600 = !DILocation(line: 245, column: 7, scope: !5542)
!5601 = !DILocation(line: 246, column: 17, scope: !5594)
!5602 = !DILocation(line: 246, column: 21, scope: !5594)
!5603 = !DILocation(line: 246, column: 27, scope: !5594)
!5604 = !DILocation(line: 246, column: 32, scope: !5594)
!5605 = !DILocation(line: 246, column: 15, scope: !5594)
!5606 = !DILocation(line: 246, column: 5, scope: !5594)
!5607 = !DILocation(line: 249, column: 17, scope: !5542)
!5608 = !DILocation(line: 249, column: 27, scope: !5542)
!5609 = !DILocation(line: 249, column: 46, scope: !5542)
!5610 = !DILocation(line: 249, column: 3, scope: !5542)
!5611 = !DILocation(line: 249, column: 7, scope: !5542)
!5612 = !DILocation(line: 249, column: 15, scope: !5542)
!5613 = !DILocation(line: 250, column: 14, scope: !5542)
!5614 = !DILocation(line: 250, column: 18, scope: !5542)
!5615 = !DILocation(line: 250, column: 24, scope: !5542)
!5616 = !DILocation(line: 250, column: 29, scope: !5542)
!5617 = !DILocation(line: 250, column: 33, scope: !5542)
!5618 = !DILocation(line: 250, column: 3, scope: !5542)
!5619 = !DILocation(line: 250, column: 7, scope: !5542)
!5620 = !DILocation(line: 250, column: 12, scope: !5542)
!5621 = !DILocation(line: 251, column: 16, scope: !5542)
!5622 = !DILocation(line: 251, column: 26, scope: !5542)
!5623 = !DILocation(line: 251, column: 3, scope: !5542)
!5624 = !DILocation(line: 251, column: 7, scope: !5542)
!5625 = !DILocation(line: 251, column: 12, scope: !5542)
!5626 = !DILocation(line: 257, column: 17, scope: !5542)
!5627 = !DILocation(line: 257, column: 21, scope: !5542)
!5628 = !DILocation(line: 257, column: 16, scope: !5542)
!5629 = !DILocation(line: 257, column: 13, scope: !5542)
!5630 = !DILocation(line: 259, column: 13, scope: !5542)
!5631 = !DILocation(line: 259, column: 4, scope: !5542)
!5632 = !DILocation(line: 259, column: 11, scope: !5542)
!5633 = !DILocation(line: 260, column: 1, scope: !5542)
!5634 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1074, file: !1074, line: 393, type: !5635, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5635 = !DISubroutineType(types: !5636)
!5636 = !{!136, !5545, !2584}
!5637 = !DILocalVariable(name: "bi", arg: 1, scope: !5634, file: !1074, line: 393, type: !5545)
!5638 = !DILocation(line: 393, column: 32, scope: !5634)
!5639 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5634, file: !1074, line: 393, type: !2584)
!5640 = !DILocation(line: 393, column: 46, scope: !5634)
!5641 = !DILocation(line: 396, column: 7, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5634, file: !1074, line: 396, column: 7)
!5643 = !DILocation(line: 396, column: 11, scope: !5642)
!5644 = !DILocation(line: 396, column: 7, scope: !5634)
!5645 = !DILocation(line: 397, column: 5, scope: !5642)
!5646 = !DILabel(scope: !5647, name: "next_bit", file: !1074, line: 398)
!5647 = distinct !DILexicalBlock(scope: !5642, file: !1074, line: 397, column: 5)
!5648 = !DILocation(line: 398, column: 5, scope: !5647)
!5649 = !DILocation(line: 399, column: 7, scope: !5647)
!5650 = !DILocation(line: 399, column: 16, scope: !5647)
!5651 = !DILocation(line: 399, column: 20, scope: !5647)
!5652 = !DILocation(line: 399, column: 25, scope: !5647)
!5653 = !DILocation(line: 399, column: 14, scope: !5647)
!5654 = !DILocation(line: 401, column: 4, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5647, file: !1074, line: 400, column: 2)
!5656 = !DILocation(line: 401, column: 8, scope: !5655)
!5657 = !DILocation(line: 401, column: 13, scope: !5655)
!5658 = !DILocation(line: 402, column: 5, scope: !5655)
!5659 = !DILocation(line: 402, column: 12, scope: !5655)
!5660 = distinct !{!5660, !5649, !5661}
!5661 = !DILocation(line: 403, column: 2, scope: !5647)
!5662 = !DILocation(line: 404, column: 7, scope: !5647)
!5663 = !DILocation(line: 410, column: 16, scope: !5634)
!5664 = !DILocation(line: 410, column: 15, scope: !5634)
!5665 = !DILocation(line: 410, column: 23, scope: !5634)
!5666 = !DILocation(line: 410, column: 42, scope: !5634)
!5667 = !DILocation(line: 411, column: 7, scope: !5634)
!5668 = !DILocation(line: 411, column: 26, scope: !5634)
!5669 = !DILocation(line: 410, column: 4, scope: !5634)
!5670 = !DILocation(line: 410, column: 11, scope: !5634)
!5671 = !DILocation(line: 412, column: 3, scope: !5634)
!5672 = !DILocation(line: 412, column: 7, scope: !5634)
!5673 = !DILocation(line: 412, column: 14, scope: !5634)
!5674 = !DILocation(line: 414, column: 3, scope: !5634)
!5675 = !DILocation(line: 417, column: 7, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5634, file: !1074, line: 415, column: 5)
!5677 = !DILocation(line: 417, column: 14, scope: !5676)
!5678 = !DILocation(line: 417, column: 18, scope: !5676)
!5679 = !DILocation(line: 417, column: 26, scope: !5676)
!5680 = !DILocation(line: 419, column: 15, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5676, file: !1074, line: 418, column: 2)
!5682 = !DILocation(line: 419, column: 19, scope: !5681)
!5683 = !DILocation(line: 419, column: 25, scope: !5681)
!5684 = !DILocation(line: 419, column: 30, scope: !5681)
!5685 = !DILocation(line: 419, column: 34, scope: !5681)
!5686 = !DILocation(line: 419, column: 4, scope: !5681)
!5687 = !DILocation(line: 419, column: 8, scope: !5681)
!5688 = !DILocation(line: 419, column: 13, scope: !5681)
!5689 = !DILocation(line: 420, column: 8, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5681, file: !1074, line: 420, column: 8)
!5691 = !DILocation(line: 420, column: 12, scope: !5690)
!5692 = !DILocation(line: 420, column: 8, scope: !5681)
!5693 = !DILocation(line: 421, column: 6, scope: !5690)
!5694 = !DILocation(line: 422, column: 5, scope: !5681)
!5695 = !DILocation(line: 422, column: 12, scope: !5681)
!5696 = !DILocation(line: 423, column: 4, scope: !5681)
!5697 = !DILocation(line: 423, column: 8, scope: !5681)
!5698 = !DILocation(line: 423, column: 15, scope: !5681)
!5699 = distinct !{!5699, !5675, !5700}
!5700 = !DILocation(line: 424, column: 2, scope: !5676)
!5701 = !DILocation(line: 427, column: 18, scope: !5676)
!5702 = !DILocation(line: 427, column: 22, scope: !5676)
!5703 = !DILocation(line: 427, column: 28, scope: !5676)
!5704 = !DILocation(line: 427, column: 7, scope: !5676)
!5705 = !DILocation(line: 427, column: 11, scope: !5676)
!5706 = !DILocation(line: 427, column: 16, scope: !5676)
!5707 = !DILocation(line: 428, column: 12, scope: !5708)
!5708 = distinct !DILexicalBlock(scope: !5676, file: !1074, line: 428, column: 11)
!5709 = !DILocation(line: 428, column: 16, scope: !5708)
!5710 = !DILocation(line: 428, column: 11, scope: !5676)
!5711 = !DILocation(line: 429, column: 2, scope: !5708)
!5712 = !DILocation(line: 430, column: 17, scope: !5676)
!5713 = !DILocation(line: 430, column: 21, scope: !5676)
!5714 = !DILocation(line: 430, column: 27, scope: !5676)
!5715 = !DILocation(line: 430, column: 32, scope: !5676)
!5716 = !DILocation(line: 430, column: 8, scope: !5676)
!5717 = !DILocation(line: 430, column: 15, scope: !5676)
!5718 = !DILocation(line: 431, column: 7, scope: !5676)
!5719 = !DILocation(line: 431, column: 11, scope: !5676)
!5720 = !DILocation(line: 431, column: 19, scope: !5676)
!5721 = distinct !{!5721, !5674, !5722}
!5722 = !DILocation(line: 432, column: 5, scope: !5634)
!5723 = !DILocation(line: 433, column: 1, scope: !5634)
!5724 = distinct !DISubprogram(name: "ver_info", scope: !3, file: !3, line: 546, type: !5725, scopeLine: 547, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5725 = !DISubroutineType(types: !5726)
!5726 = !{!2426, !2530, !6}
!5727 = !DILocalVariable(name: "data", arg: 1, scope: !5724, file: !3, line: 546, type: !2530)
!5728 = !DILocation(line: 546, column: 31, scope: !5724)
!5729 = !DILocalVariable(name: "ver", arg: 2, scope: !5724, file: !3, line: 546, type: !6)
!5730 = !DILocation(line: 546, column: 46, scope: !5724)
!5731 = !DILocation(line: 548, column: 10, scope: !5724)
!5732 = !DILocation(line: 548, column: 16, scope: !5724)
!5733 = !DILocation(line: 548, column: 31, scope: !5724)
!5734 = !DILocation(line: 548, column: 29, scope: !5724)
!5735 = !DILocation(line: 548, column: 3, scope: !5724)
!5736 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1074, file: !1074, line: 382, type: !5737, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5737 = !DISubroutineType(types: !5738)
!5738 = !{null, !5545, !2584}
!5739 = !DILocalVariable(name: "bi", arg: 1, scope: !5736, file: !1074, line: 382, type: !5545)
!5740 = !DILocation(line: 382, column: 33, scope: !5736)
!5741 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5736, file: !1074, line: 382, type: !2584)
!5742 = !DILocation(line: 382, column: 47, scope: !5736)
!5743 = !DILocation(line: 384, column: 3, scope: !5736)
!5744 = !DILocation(line: 384, column: 7, scope: !5736)
!5745 = !DILocation(line: 384, column: 12, scope: !5736)
!5746 = !DILocation(line: 385, column: 4, scope: !5736)
!5747 = !DILocation(line: 385, column: 11, scope: !5736)
!5748 = !DILocation(line: 386, column: 1, scope: !5736)
!5749 = distinct !DISubprogram(name: "gsi_end_p", scope: !574, file: !574, line: 4467, type: !5750, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5750 = !DISubroutineType(types: !5751)
!5751 = !{!136, !4328}
!5752 = !DILocalVariable(name: "i", arg: 1, scope: !5749, file: !574, line: 4467, type: !4328)
!5753 = !DILocation(line: 4467, column: 33, scope: !5749)
!5754 = !DILocation(line: 4469, column: 12, scope: !5749)
!5755 = !DILocation(line: 4469, column: 16, scope: !5749)
!5756 = !DILocation(line: 4469, column: 10, scope: !5749)
!5757 = !DILocation(line: 4469, column: 3, scope: !5749)
!5758 = distinct !DISubprogram(name: "gsi_stmt", scope: !574, file: !574, line: 4501, type: !5759, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5759 = !DISubroutineType(types: !5760)
!5760 = !{!1436, !4328}
!5761 = !DILocalVariable(name: "i", arg: 1, scope: !5758, file: !574, line: 4501, type: !4328)
!5762 = !DILocation(line: 4501, column: 32, scope: !5758)
!5763 = !DILocation(line: 4503, column: 12, scope: !5758)
!5764 = !DILocation(line: 4503, column: 17, scope: !5758)
!5765 = !DILocation(line: 4503, column: 3, scope: !5758)
!5766 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !5767, file: !5767, line: 434, type: !5768, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5767 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5768 = !DISubroutineType(types: !5769)
!5769 = !{!1134, !5770}
!5770 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !917, line: 27, baseType: !1470)
!5771 = !DILocalVariable(name: "def", arg: 1, scope: !5766, file: !5767, line: 434, type: !5770)
!5772 = !DILocation(line: 434, column: 33, scope: !5766)
!5773 = !DILocation(line: 436, column: 11, scope: !5766)
!5774 = !DILocation(line: 436, column: 10, scope: !5766)
!5775 = !DILocation(line: 436, column: 3, scope: !5766)
!5776 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !574, file: !574, line: 3080, type: !4099, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5777 = !DILocalVariable(name: "gs", arg: 1, scope: !5776, file: !574, line: 3080, type: !1436)
!5778 = !DILocation(line: 3080, column: 31, scope: !5776)
!5779 = !DILocation(line: 3083, column: 11, scope: !5776)
!5780 = !DILocation(line: 3083, column: 15, scope: !5776)
!5781 = !DILocation(line: 3083, column: 26, scope: !5776)
!5782 = !DILocation(line: 3083, column: 3, scope: !5776)
!5783 = distinct !DISubprogram(name: "determine_biv_step", scope: !3, file: !3, line: 893, type: !5784, scopeLine: 894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5784 = !DISubroutineType(types: !5785)
!5785 = !{!1134, !1436}
!5786 = !DILocalVariable(name: "phi", arg: 1, scope: !5783, file: !3, line: 893, type: !1436)
!5787 = !DILocation(line: 893, column: 28, scope: !5783)
!5788 = !DILocalVariable(name: "loop", scope: !5783, file: !3, line: 895, type: !1651)
!5789 = !DILocation(line: 895, column: 16, scope: !5783)
!5790 = !DILocation(line: 895, column: 34, scope: !5783)
!5791 = !DILocation(line: 895, column: 23, scope: !5783)
!5792 = !DILocation(line: 895, column: 40, scope: !5783)
!5793 = !DILocalVariable(name: "name", scope: !5783, file: !3, line: 896, type: !1134)
!5794 = !DILocation(line: 896, column: 8, scope: !5783)
!5795 = !DILocation(line: 896, column: 15, scope: !5783)
!5796 = !DILocalVariable(name: "iv", scope: !5783, file: !3, line: 897, type: !5797)
!5797 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1340, line: 651, baseType: !5798)
!5798 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1340, line: 644, size: 192, elements: !5799)
!5799 = !{!5800, !5801, !5802}
!5800 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5798, file: !1340, line: 647, baseType: !1134, size: 64)
!5801 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !5798, file: !1340, line: 647, baseType: !1134, size: 64, offset: 64)
!5802 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !5798, file: !1340, line: 650, baseType: !136, size: 8, offset: 128)
!5803 = !DILocation(line: 897, column: 13, scope: !5783)
!5804 = !DILocation(line: 899, column: 23, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 899, column: 7)
!5806 = !DILocation(line: 899, column: 8, scope: !5805)
!5807 = !DILocation(line: 899, column: 7, scope: !5783)
!5808 = !DILocation(line: 900, column: 5, scope: !5805)
!5809 = !DILocation(line: 902, column: 19, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 902, column: 7)
!5811 = !DILocation(line: 902, column: 25, scope: !5810)
!5812 = !DILocation(line: 902, column: 31, scope: !5810)
!5813 = !DILocation(line: 902, column: 8, scope: !5810)
!5814 = !DILocation(line: 902, column: 7, scope: !5783)
!5815 = !DILocation(line: 903, column: 5, scope: !5810)
!5816 = !DILocation(line: 905, column: 28, scope: !5783)
!5817 = !DILocation(line: 905, column: 10, scope: !5783)
!5818 = !DILocation(line: 905, column: 51, scope: !5783)
!5819 = !DILocation(line: 905, column: 3, scope: !5783)
!5820 = !DILocation(line: 906, column: 1, scope: !5783)
!5821 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5767, file: !5767, line: 427, type: !5822, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5822 = !DISubroutineType(types: !5823)
!5823 = !{!1134, !2547}
!5824 = !DILocalVariable(name: "use", arg: 1, scope: !5821, file: !5767, line: 427, type: !2547)
!5825 = !DILocation(line: 427, column: 33, scope: !5821)
!5826 = !DILocation(line: 429, column: 12, scope: !5821)
!5827 = !DILocation(line: 429, column: 17, scope: !5821)
!5828 = !DILocation(line: 429, column: 10, scope: !5821)
!5829 = !DILocation(line: 429, column: 3, scope: !5821)
!5830 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5767, file: !5767, line: 442, type: !5831, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5831 = !DISubroutineType(types: !5832)
!5832 = !{!2547, !1436, !1006}
!5833 = !DILocalVariable(name: "gs", arg: 1, scope: !5830, file: !5767, line: 442, type: !1436)
!5834 = !DILocation(line: 442, column: 36, scope: !5830)
!5835 = !DILocalVariable(name: "i", arg: 2, scope: !5830, file: !5767, line: 442, type: !1006)
!5836 = !DILocation(line: 442, column: 44, scope: !5830)
!5837 = !DILocation(line: 444, column: 27, scope: !5830)
!5838 = !DILocation(line: 444, column: 31, scope: !5830)
!5839 = !DILocation(line: 444, column: 11, scope: !5830)
!5840 = !DILocation(line: 444, column: 35, scope: !5830)
!5841 = !DILocation(line: 444, column: 3, scope: !5830)
!5842 = distinct !DISubprogram(name: "set_iv", scope: !3, file: !3, line: 854, type: !5843, scopeLine: 855, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5843 = !DISubroutineType(types: !5844)
!5844 = !{null, !2530, !1134, !1134, !1134}
!5845 = !DILocalVariable(name: "data", arg: 1, scope: !5842, file: !3, line: 854, type: !2530)
!5846 = !DILocation(line: 854, column: 29, scope: !5842)
!5847 = !DILocalVariable(name: "iv", arg: 2, scope: !5842, file: !3, line: 854, type: !1134)
!5848 = !DILocation(line: 854, column: 40, scope: !5842)
!5849 = !DILocalVariable(name: "base", arg: 3, scope: !5842, file: !3, line: 854, type: !1134)
!5850 = !DILocation(line: 854, column: 49, scope: !5842)
!5851 = !DILocalVariable(name: "step", arg: 4, scope: !5842, file: !3, line: 854, type: !1134)
!5852 = !DILocation(line: 854, column: 60, scope: !5842)
!5853 = !DILocalVariable(name: "info", scope: !5842, file: !3, line: 856, type: !2426)
!5854 = !DILocation(line: 856, column: 24, scope: !5842)
!5855 = !DILocation(line: 856, column: 42, scope: !5842)
!5856 = !DILocation(line: 856, column: 48, scope: !5842)
!5857 = !DILocation(line: 856, column: 31, scope: !5842)
!5858 = !DILocation(line: 858, column: 3, scope: !5842)
!5859 = !DILocation(line: 860, column: 19, scope: !5842)
!5860 = !DILocation(line: 860, column: 25, scope: !5842)
!5861 = !DILocation(line: 860, column: 35, scope: !5842)
!5862 = !DILocation(line: 860, column: 3, scope: !5842)
!5863 = !DILocation(line: 861, column: 24, scope: !5842)
!5864 = !DILocation(line: 861, column: 30, scope: !5842)
!5865 = !DILocation(line: 861, column: 14, scope: !5842)
!5866 = !DILocation(line: 861, column: 3, scope: !5842)
!5867 = !DILocation(line: 861, column: 9, scope: !5842)
!5868 = !DILocation(line: 861, column: 12, scope: !5842)
!5869 = !DILocation(line: 862, column: 24, scope: !5842)
!5870 = !DILocation(line: 862, column: 3, scope: !5842)
!5871 = !DILocation(line: 862, column: 9, scope: !5842)
!5872 = !DILocation(line: 862, column: 13, scope: !5842)
!5873 = !DILocation(line: 862, column: 22, scope: !5842)
!5874 = !DILocation(line: 863, column: 1, scope: !5842)
!5875 = distinct !DISubprogram(name: "gsi_next", scope: !574, file: !574, line: 4485, type: !5876, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5876 = !DISubroutineType(types: !5877)
!5877 = !{null, !5878}
!5878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4328, size: 64)
!5879 = !DILocalVariable(name: "i", arg: 1, scope: !5875, file: !574, line: 4485, type: !5878)
!5880 = !DILocation(line: 4485, column: 33, scope: !5875)
!5881 = !DILocation(line: 4487, column: 12, scope: !5875)
!5882 = !DILocation(line: 4487, column: 15, scope: !5875)
!5883 = !DILocation(line: 4487, column: 20, scope: !5875)
!5884 = !DILocation(line: 4487, column: 3, scope: !5875)
!5885 = !DILocation(line: 4487, column: 6, scope: !5875)
!5886 = !DILocation(line: 4487, column: 10, scope: !5875)
!5887 = !DILocation(line: 4488, column: 1, scope: !5875)
!5888 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !574, file: !574, line: 3100, type: !5889, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5889 = !DISubroutineType(types: !5890)
!5890 = !{!5891, !1436, !6}
!5891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1539, size: 64)
!5892 = !DILocalVariable(name: "gs", arg: 1, scope: !5888, file: !574, line: 3100, type: !1436)
!5893 = !DILocation(line: 3100, column: 24, scope: !5888)
!5894 = !DILocalVariable(name: "index", arg: 2, scope: !5888, file: !574, line: 3100, type: !6)
!5895 = !DILocation(line: 3100, column: 37, scope: !5888)
!5896 = !DILocation(line: 3103, column: 3, scope: !5888)
!5897 = !DILocation(line: 3104, column: 12, scope: !5888)
!5898 = !DILocation(line: 3104, column: 16, scope: !5888)
!5899 = !DILocation(line: 3104, column: 27, scope: !5888)
!5900 = !DILocation(line: 3104, column: 32, scope: !5888)
!5901 = !DILocation(line: 3104, column: 3, scope: !5888)
!5902 = distinct !DISubprogram(name: "name_info", scope: !3, file: !3, line: 554, type: !5903, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5903 = !DISubroutineType(types: !5904)
!5904 = !{!2426, !2530, !1134}
!5905 = !DILocalVariable(name: "data", arg: 1, scope: !5902, file: !3, line: 554, type: !2530)
!5906 = !DILocation(line: 554, column: 32, scope: !5902)
!5907 = !DILocalVariable(name: "name", arg: 2, scope: !5902, file: !3, line: 554, type: !1134)
!5908 = !DILocation(line: 554, column: 43, scope: !5902)
!5909 = !DILocation(line: 556, column: 20, scope: !5902)
!5910 = !DILocation(line: 556, column: 26, scope: !5902)
!5911 = !DILocation(line: 556, column: 10, scope: !5902)
!5912 = !DILocation(line: 556, column: 3, scope: !5902)
!5913 = distinct !DISubprogram(name: "alloc_iv", scope: !3, file: !3, line: 835, type: !5914, scopeLine: 836, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5914 = !DISubroutineType(types: !5915)
!5915 = !{!2431, !1134, !1134}
!5916 = !DILocalVariable(name: "base", arg: 1, scope: !5913, file: !3, line: 835, type: !1134)
!5917 = !DILocation(line: 835, column: 16, scope: !5913)
!5918 = !DILocalVariable(name: "step", arg: 2, scope: !5913, file: !3, line: 835, type: !1134)
!5919 = !DILocation(line: 835, column: 27, scope: !5913)
!5920 = !DILocalVariable(name: "iv", scope: !5913, file: !3, line: 837, type: !2431)
!5921 = !DILocation(line: 837, column: 14, scope: !5913)
!5922 = !DILocation(line: 837, column: 19, scope: !5913)
!5923 = !DILocation(line: 838, column: 3, scope: !5913)
!5924 = !DILocation(line: 840, column: 14, scope: !5913)
!5925 = !DILocation(line: 840, column: 3, scope: !5913)
!5926 = !DILocation(line: 840, column: 7, scope: !5913)
!5927 = !DILocation(line: 840, column: 12, scope: !5913)
!5928 = !DILocation(line: 841, column: 44, scope: !5913)
!5929 = !DILocation(line: 841, column: 21, scope: !5913)
!5930 = !DILocation(line: 841, column: 3, scope: !5913)
!5931 = !DILocation(line: 841, column: 7, scope: !5913)
!5932 = !DILocation(line: 841, column: 19, scope: !5913)
!5933 = !DILocation(line: 842, column: 14, scope: !5913)
!5934 = !DILocation(line: 842, column: 3, scope: !5913)
!5935 = !DILocation(line: 842, column: 7, scope: !5913)
!5936 = !DILocation(line: 842, column: 12, scope: !5913)
!5937 = !DILocation(line: 843, column: 3, scope: !5913)
!5938 = !DILocation(line: 843, column: 7, scope: !5913)
!5939 = !DILocation(line: 843, column: 13, scope: !5913)
!5940 = !DILocation(line: 844, column: 3, scope: !5913)
!5941 = !DILocation(line: 844, column: 7, scope: !5913)
!5942 = !DILocation(line: 844, column: 20, scope: !5913)
!5943 = !DILocation(line: 845, column: 3, scope: !5913)
!5944 = !DILocation(line: 845, column: 7, scope: !5913)
!5945 = !DILocation(line: 845, column: 14, scope: !5913)
!5946 = !DILocation(line: 846, column: 3, scope: !5913)
!5947 = !DILocation(line: 846, column: 7, scope: !5913)
!5948 = !DILocation(line: 846, column: 16, scope: !5913)
!5949 = !DILocation(line: 848, column: 10, scope: !5913)
!5950 = !DILocation(line: 848, column: 3, scope: !5913)
!5951 = distinct !DISubprogram(name: "determine_base_object", scope: !3, file: !3, line: 786, type: !5952, scopeLine: 787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!5952 = !DISubroutineType(types: !5953)
!5953 = !{!1134, !1134}
!5954 = !DILocalVariable(name: "expr", arg: 1, scope: !5951, file: !3, line: 786, type: !1134)
!5955 = !DILocation(line: 786, column: 29, scope: !5951)
!5956 = !DILocalVariable(name: "code", scope: !5951, file: !3, line: 788, type: !159)
!5957 = !DILocation(line: 788, column: 18, scope: !5951)
!5958 = !DILocation(line: 788, column: 25, scope: !5951)
!5959 = !DILocalVariable(name: "base", scope: !5951, file: !3, line: 789, type: !1134)
!5960 = !DILocation(line: 789, column: 8, scope: !5951)
!5961 = !DILocalVariable(name: "obj", scope: !5951, file: !3, line: 789, type: !1134)
!5962 = !DILocation(line: 789, column: 14, scope: !5951)
!5963 = !DILocation(line: 794, column: 7, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 794, column: 7)
!5965 = !DILocation(line: 794, column: 7, scope: !5951)
!5966 = !DILocation(line: 795, column: 35, scope: !5964)
!5967 = !DILocation(line: 795, column: 12, scope: !5964)
!5968 = !DILocation(line: 795, column: 5, scope: !5964)
!5969 = !DILocation(line: 797, column: 8, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 797, column: 7)
!5971 = !DILocation(line: 797, column: 7, scope: !5951)
!5972 = !DILocation(line: 798, column: 5, scope: !5970)
!5973 = !DILocation(line: 800, column: 11, scope: !5951)
!5974 = !DILocation(line: 800, column: 3, scope: !5951)
!5975 = !DILocation(line: 803, column: 7, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 801, column: 5)
!5977 = !DILocation(line: 806, column: 13, scope: !5976)
!5978 = !DILocation(line: 806, column: 11, scope: !5976)
!5979 = !DILocation(line: 807, column: 32, scope: !5976)
!5980 = !DILocation(line: 807, column: 14, scope: !5976)
!5981 = !DILocation(line: 807, column: 12, scope: !5976)
!5982 = !DILocation(line: 809, column: 12, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 809, column: 11)
!5984 = !DILocation(line: 809, column: 11, scope: !5976)
!5985 = !DILocation(line: 810, column: 9, scope: !5983)
!5986 = !DILocation(line: 810, column: 2, scope: !5983)
!5987 = !DILocation(line: 812, column: 11, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 812, column: 11)
!5989 = !DILocation(line: 812, column: 28, scope: !5988)
!5990 = !DILocation(line: 812, column: 11, scope: !5976)
!5991 = !DILocation(line: 813, column: 32, scope: !5988)
!5992 = !DILocation(line: 813, column: 9, scope: !5988)
!5993 = !DILocation(line: 813, column: 2, scope: !5988)
!5994 = !DILocation(line: 815, column: 14, scope: !5976)
!5995 = !DILocation(line: 815, column: 7, scope: !5976)
!5996 = !DILocation(line: 819, column: 37, scope: !5976)
!5997 = !DILocation(line: 819, column: 14, scope: !5976)
!5998 = !DILocation(line: 819, column: 7, scope: !5976)
!5999 = !DILocation(line: 824, column: 7, scope: !5976)
!6000 = !DILocation(line: 827, column: 14, scope: !5976)
!6001 = !DILocation(line: 827, column: 7, scope: !5976)
!6002 = !DILocation(line: 829, column: 1, scope: !5951)
!6003 = distinct !DISubprogram(name: "find_givs_in_bb", scope: !3, file: !3, line: 1035, type: !6004, scopeLine: 1036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6004 = !DISubroutineType(types: !6005)
!6005 = !{null, !2530, !1399}
!6006 = !DILocalVariable(name: "data", arg: 1, scope: !6003, file: !3, line: 1035, type: !2530)
!6007 = !DILocation(line: 1035, column: 38, scope: !6003)
!6008 = !DILocalVariable(name: "bb", arg: 2, scope: !6003, file: !3, line: 1035, type: !1399)
!6009 = !DILocation(line: 1035, column: 56, scope: !6003)
!6010 = !DILocalVariable(name: "bsi", scope: !6003, file: !3, line: 1037, type: !4328)
!6011 = !DILocation(line: 1037, column: 24, scope: !6003)
!6012 = !DILocation(line: 1039, column: 28, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 1039, column: 3)
!6014 = !DILocation(line: 1039, column: 14, scope: !6013)
!6015 = !DILocation(line: 1039, column: 8, scope: !6013)
!6016 = !DILocation(line: 1039, column: 34, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 1039, column: 3)
!6018 = !DILocation(line: 1039, column: 33, scope: !6017)
!6019 = !DILocation(line: 1039, column: 3, scope: !6013)
!6020 = !DILocation(line: 1040, column: 24, scope: !6017)
!6021 = !DILocation(line: 1040, column: 30, scope: !6017)
!6022 = !DILocation(line: 1040, column: 5, scope: !6017)
!6023 = !DILocation(line: 1039, column: 51, scope: !6017)
!6024 = !DILocation(line: 1039, column: 3, scope: !6017)
!6025 = distinct !{!6025, !6019, !6026}
!6026 = !DILocation(line: 1040, column: 44, scope: !6013)
!6027 = !DILocation(line: 1041, column: 1, scope: !6003)
!6028 = distinct !DISubprogram(name: "gsi_start_bb", scope: !574, file: !574, line: 4418, type: !6029, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6029 = !DISubroutineType(types: !6030)
!6030 = !{!4328, !1399}
!6031 = !DILocalVariable(name: "bb", arg: 1, scope: !6028, file: !574, line: 4418, type: !1399)
!6032 = !DILocation(line: 4418, column: 27, scope: !6028)
!6033 = !DILocalVariable(name: "i", scope: !6028, file: !574, line: 4420, type: !4328)
!6034 = !DILocation(line: 4420, column: 24, scope: !6028)
!6035 = !DILocalVariable(name: "seq", scope: !6028, file: !574, line: 4421, type: !1426)
!6036 = !DILocation(line: 4421, column: 14, scope: !6028)
!6037 = !DILocation(line: 4423, column: 17, scope: !6028)
!6038 = !DILocation(line: 4423, column: 9, scope: !6028)
!6039 = !DILocation(line: 4423, column: 7, scope: !6028)
!6040 = !DILocation(line: 4424, column: 29, scope: !6028)
!6041 = !DILocation(line: 4424, column: 11, scope: !6028)
!6042 = !DILocation(line: 4424, column: 5, scope: !6028)
!6043 = !DILocation(line: 4424, column: 9, scope: !6028)
!6044 = !DILocation(line: 4425, column: 11, scope: !6028)
!6045 = !DILocation(line: 4425, column: 5, scope: !6028)
!6046 = !DILocation(line: 4425, column: 9, scope: !6028)
!6047 = !DILocation(line: 4426, column: 10, scope: !6028)
!6048 = !DILocation(line: 4426, column: 5, scope: !6028)
!6049 = !DILocation(line: 4426, column: 8, scope: !6028)
!6050 = !DILocation(line: 4428, column: 3, scope: !6028)
!6051 = distinct !DISubprogram(name: "find_givs_in_stmt", scope: !3, file: !3, line: 1022, type: !6052, scopeLine: 1023, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6052 = !DISubroutineType(types: !6053)
!6053 = !{null, !2530, !1436}
!6054 = !DILocalVariable(name: "data", arg: 1, scope: !6051, file: !3, line: 1022, type: !2530)
!6055 = !DILocation(line: 1022, column: 40, scope: !6051)
!6056 = !DILocalVariable(name: "stmt", arg: 2, scope: !6051, file: !3, line: 1022, type: !1436)
!6057 = !DILocation(line: 1022, column: 53, scope: !6051)
!6058 = !DILocalVariable(name: "iv", scope: !6051, file: !3, line: 1024, type: !5797)
!6059 = !DILocation(line: 1024, column: 13, scope: !6051)
!6060 = !DILocation(line: 1026, column: 32, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6051, file: !3, line: 1026, column: 7)
!6062 = !DILocation(line: 1026, column: 38, scope: !6061)
!6063 = !DILocation(line: 1026, column: 8, scope: !6061)
!6064 = !DILocation(line: 1026, column: 7, scope: !6051)
!6065 = !DILocation(line: 1027, column: 5, scope: !6061)
!6066 = !DILocation(line: 1029, column: 11, scope: !6051)
!6067 = !DILocation(line: 1029, column: 36, scope: !6051)
!6068 = !DILocation(line: 1029, column: 17, scope: !6051)
!6069 = !DILocation(line: 1029, column: 46, scope: !6051)
!6070 = !DILocation(line: 1029, column: 55, scope: !6051)
!6071 = !DILocation(line: 1029, column: 3, scope: !6051)
!6072 = !DILocation(line: 1030, column: 1, scope: !6051)
!6073 = distinct !DISubprogram(name: "bb_seq", scope: !574, file: !574, line: 237, type: !6074, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6074 = !DISubroutineType(types: !6075)
!6075 = !{!1426, !6076}
!6076 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1016, line: 112, baseType: !6077)
!6077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6078, size: 64)
!6078 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1401)
!6079 = !DILocalVariable(name: "bb", arg: 1, scope: !6073, file: !574, line: 237, type: !6076)
!6080 = !DILocation(line: 237, column: 27, scope: !6073)
!6081 = !DILocation(line: 239, column: 13, scope: !6073)
!6082 = !DILocation(line: 239, column: 17, scope: !6073)
!6083 = !DILocation(line: 239, column: 23, scope: !6073)
!6084 = !DILocation(line: 239, column: 33, scope: !6073)
!6085 = !DILocation(line: 239, column: 36, scope: !6073)
!6086 = !DILocation(line: 239, column: 40, scope: !6073)
!6087 = !DILocation(line: 239, column: 43, scope: !6073)
!6088 = !DILocation(line: 239, column: 10, scope: !6073)
!6089 = !DILocation(line: 239, column: 53, scope: !6073)
!6090 = !DILocation(line: 239, column: 57, scope: !6073)
!6091 = !DILocation(line: 239, column: 60, scope: !6073)
!6092 = !DILocation(line: 239, column: 68, scope: !6073)
!6093 = !DILocation(line: 239, column: 3, scope: !6073)
!6094 = distinct !DISubprogram(name: "gimple_seq_first", scope: !574, file: !574, line: 159, type: !6095, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6095 = !DISubroutineType(types: !6096)
!6096 = !{!1431, !6097}
!6097 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1016, line: 67, baseType: !6098)
!6098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6099, size: 64)
!6099 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1428)
!6100 = !DILocalVariable(name: "s", arg: 1, scope: !6094, file: !574, line: 159, type: !6097)
!6101 = !DILocation(line: 159, column: 36, scope: !6094)
!6102 = !DILocation(line: 161, column: 10, scope: !6094)
!6103 = !DILocation(line: 161, column: 14, scope: !6094)
!6104 = !DILocation(line: 161, column: 17, scope: !6094)
!6105 = !DILocation(line: 161, column: 3, scope: !6094)
!6106 = distinct !DISubprogram(name: "find_givs_in_stmt_scev", scope: !3, file: !3, line: 993, type: !6107, scopeLine: 994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6107 = !DISubroutineType(types: !6108)
!6108 = !{!136, !2530, !1436, !6109}
!6109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5797, size: 64)
!6110 = !DILocalVariable(name: "data", arg: 1, scope: !6106, file: !3, line: 993, type: !2530)
!6111 = !DILocation(line: 993, column: 45, scope: !6106)
!6112 = !DILocalVariable(name: "stmt", arg: 2, scope: !6106, file: !3, line: 993, type: !1436)
!6113 = !DILocation(line: 993, column: 58, scope: !6106)
!6114 = !DILocalVariable(name: "iv", arg: 3, scope: !6106, file: !3, line: 993, type: !6109)
!6115 = !DILocation(line: 993, column: 75, scope: !6106)
!6116 = !DILocalVariable(name: "lhs", scope: !6106, file: !3, line: 995, type: !1134)
!6117 = !DILocation(line: 995, column: 8, scope: !6106)
!6118 = !DILocalVariable(name: "loop", scope: !6106, file: !3, line: 996, type: !1651)
!6119 = !DILocation(line: 996, column: 16, scope: !6106)
!6120 = !DILocation(line: 996, column: 23, scope: !6106)
!6121 = !DILocation(line: 996, column: 29, scope: !6106)
!6122 = !DILocation(line: 998, column: 3, scope: !6106)
!6123 = !DILocation(line: 998, column: 7, scope: !6106)
!6124 = !DILocation(line: 998, column: 12, scope: !6106)
!6125 = !DILocation(line: 999, column: 3, scope: !6106)
!6126 = !DILocation(line: 999, column: 7, scope: !6106)
!6127 = !DILocation(line: 999, column: 12, scope: !6106)
!6128 = !DILocation(line: 1001, column: 20, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 1001, column: 7)
!6130 = !DILocation(line: 1001, column: 7, scope: !6129)
!6131 = !DILocation(line: 1001, column: 26, scope: !6129)
!6132 = !DILocation(line: 1001, column: 7, scope: !6106)
!6133 = !DILocation(line: 1002, column: 5, scope: !6129)
!6134 = !DILocation(line: 1004, column: 28, scope: !6106)
!6135 = !DILocation(line: 1004, column: 9, scope: !6106)
!6136 = !DILocation(line: 1004, column: 7, scope: !6106)
!6137 = !DILocation(line: 1005, column: 7, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 1005, column: 7)
!6139 = !DILocation(line: 1005, column: 23, scope: !6138)
!6140 = !DILocation(line: 1005, column: 7, scope: !6106)
!6141 = !DILocation(line: 1006, column: 5, scope: !6138)
!6142 = !DILocation(line: 1008, column: 19, scope: !6143)
!6143 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 1008, column: 7)
!6144 = !DILocation(line: 1008, column: 47, scope: !6143)
!6145 = !DILocation(line: 1008, column: 25, scope: !6143)
!6146 = !DILocation(line: 1008, column: 54, scope: !6143)
!6147 = !DILocation(line: 1008, column: 59, scope: !6143)
!6148 = !DILocation(line: 1008, column: 8, scope: !6143)
!6149 = !DILocation(line: 1008, column: 7, scope: !6106)
!6150 = !DILocation(line: 1009, column: 5, scope: !6143)
!6151 = !DILocation(line: 1010, column: 40, scope: !6106)
!6152 = !DILocation(line: 1010, column: 44, scope: !6106)
!6153 = !DILocation(line: 1010, column: 14, scope: !6106)
!6154 = !DILocation(line: 1010, column: 3, scope: !6106)
!6155 = !DILocation(line: 1010, column: 7, scope: !6106)
!6156 = !DILocation(line: 1010, column: 12, scope: !6106)
!6157 = !DILocation(line: 1012, column: 37, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6106, file: !3, line: 1012, column: 7)
!6159 = !DILocation(line: 1012, column: 41, scope: !6158)
!6160 = !DILocation(line: 1012, column: 7, scope: !6158)
!6161 = !DILocation(line: 1013, column: 7, scope: !6158)
!6162 = !DILocation(line: 1013, column: 40, scope: !6158)
!6163 = !DILocation(line: 1013, column: 44, scope: !6158)
!6164 = !DILocation(line: 1013, column: 10, scope: !6158)
!6165 = !DILocation(line: 1012, column: 7, scope: !6106)
!6166 = !DILocation(line: 1014, column: 5, scope: !6158)
!6167 = !DILocation(line: 1016, column: 3, scope: !6106)
!6168 = !DILocation(line: 1017, column: 1, scope: !6106)
!6169 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !574, file: !574, line: 1694, type: !6170, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6170 = !DISubroutineType(types: !6171)
!6171 = !{!1134, !3158}
!6172 = !DILocalVariable(name: "gs", arg: 1, scope: !6169, file: !574, line: 1694, type: !3158)
!6173 = !DILocation(line: 1694, column: 33, scope: !6169)
!6174 = !DILocation(line: 1697, column: 21, scope: !6169)
!6175 = !DILocation(line: 1697, column: 10, scope: !6169)
!6176 = !DILocation(line: 1697, column: 3, scope: !6169)
!6177 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !5767, file: !5767, line: 617, type: !6178, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6178 = !DISubroutineType(types: !6179)
!6179 = !{!1651, !1436}
!6180 = !DILocalVariable(name: "stmt", arg: 1, scope: !6177, file: !5767, line: 617, type: !1436)
!6181 = !DILocation(line: 617, column: 30, scope: !6177)
!6182 = !DILocalVariable(name: "bb", scope: !6177, file: !5767, line: 619, type: !1399)
!6183 = !DILocation(line: 619, column: 15, scope: !6177)
!6184 = !DILocation(line: 619, column: 31, scope: !6177)
!6185 = !DILocation(line: 619, column: 20, scope: !6177)
!6186 = !DILocation(line: 620, column: 8, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6177, file: !5767, line: 620, column: 7)
!6188 = !DILocation(line: 620, column: 7, scope: !6177)
!6189 = !DILocation(line: 621, column: 5, scope: !6187)
!6190 = !DILocation(line: 623, column: 10, scope: !6177)
!6191 = !DILocation(line: 623, column: 14, scope: !6177)
!6192 = !DILocation(line: 623, column: 3, scope: !6177)
!6193 = !DILocation(line: 624, column: 1, scope: !6177)
!6194 = distinct !DISubprogram(name: "get_iv", scope: !3, file: !3, line: 868, type: !6195, scopeLine: 869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6195 = !DISubroutineType(types: !6196)
!6196 = !{!2431, !2530, !1134}
!6197 = !DILocalVariable(name: "data", arg: 1, scope: !6194, file: !3, line: 868, type: !2530)
!6198 = !DILocation(line: 868, column: 29, scope: !6194)
!6199 = !DILocalVariable(name: "var", arg: 2, scope: !6194, file: !3, line: 868, type: !1134)
!6200 = !DILocation(line: 868, column: 40, scope: !6194)
!6201 = !DILocalVariable(name: "bb", scope: !6194, file: !3, line: 870, type: !1399)
!6202 = !DILocation(line: 870, column: 15, scope: !6194)
!6203 = !DILocalVariable(name: "type", scope: !6194, file: !3, line: 871, type: !1134)
!6204 = !DILocation(line: 871, column: 8, scope: !6194)
!6205 = !DILocation(line: 871, column: 15, scope: !6194)
!6206 = !DILocation(line: 873, column: 8, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !6194, file: !3, line: 873, column: 7)
!6208 = !DILocation(line: 874, column: 7, scope: !6207)
!6209 = !DILocation(line: 874, column: 11, scope: !6207)
!6210 = !DILocation(line: 873, column: 7, scope: !6194)
!6211 = !DILocation(line: 875, column: 5, scope: !6207)
!6212 = !DILocation(line: 877, column: 19, scope: !6213)
!6213 = distinct !DILexicalBlock(scope: !6194, file: !3, line: 877, column: 7)
!6214 = !DILocation(line: 877, column: 25, scope: !6213)
!6215 = !DILocation(line: 877, column: 8, scope: !6213)
!6216 = !DILocation(line: 877, column: 31, scope: !6213)
!6217 = !DILocation(line: 877, column: 7, scope: !6194)
!6218 = !DILocation(line: 879, column: 23, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6213, file: !3, line: 878, column: 5)
!6220 = !DILocation(line: 879, column: 12, scope: !6219)
!6221 = !DILocation(line: 879, column: 10, scope: !6219)
!6222 = !DILocation(line: 881, column: 12, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6219, file: !3, line: 881, column: 11)
!6224 = !DILocation(line: 882, column: 4, scope: !6223)
!6225 = !DILocation(line: 882, column: 31, scope: !6223)
!6226 = !DILocation(line: 882, column: 37, scope: !6223)
!6227 = !DILocation(line: 882, column: 51, scope: !6223)
!6228 = !DILocation(line: 882, column: 8, scope: !6223)
!6229 = !DILocation(line: 881, column: 11, scope: !6219)
!6230 = !DILocation(line: 883, column: 10, scope: !6223)
!6231 = !DILocation(line: 883, column: 16, scope: !6223)
!6232 = !DILocation(line: 883, column: 21, scope: !6223)
!6233 = !DILocation(line: 883, column: 41, scope: !6223)
!6234 = !DILocation(line: 883, column: 26, scope: !6223)
!6235 = !DILocation(line: 883, column: 2, scope: !6223)
!6236 = !DILocation(line: 884, column: 5, scope: !6219)
!6237 = !DILocation(line: 886, column: 21, scope: !6194)
!6238 = !DILocation(line: 886, column: 27, scope: !6194)
!6239 = !DILocation(line: 886, column: 10, scope: !6194)
!6240 = !DILocation(line: 886, column: 33, scope: !6194)
!6241 = !DILocation(line: 886, column: 3, scope: !6194)
!6242 = !DILocation(line: 887, column: 1, scope: !6194)
!6243 = distinct !DISubprogram(name: "niter_for_exit", scope: !3, file: !3, line: 713, type: !6244, scopeLine: 714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6244 = !DISubroutineType(types: !6245)
!6245 = !{!1134, !2530, !1416}
!6246 = !DILocalVariable(name: "data", arg: 1, scope: !6243, file: !3, line: 713, type: !2530)
!6247 = !DILocation(line: 713, column: 37, scope: !6243)
!6248 = !DILocalVariable(name: "exit", arg: 2, scope: !6243, file: !3, line: 713, type: !1416)
!6249 = !DILocation(line: 713, column: 48, scope: !6243)
!6250 = !DILocalVariable(name: "desc", scope: !6243, file: !3, line: 715, type: !6251)
!6251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !1340, line: 657, size: 640, elements: !6252)
!6252 = !{!6253, !6254, !6255, !6256, !6257, !6258, !6259}
!6253 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !6251, file: !1340, line: 659, baseType: !1134, size: 64)
!6254 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !6251, file: !1340, line: 663, baseType: !1134, size: 64, offset: 64)
!6255 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !6251, file: !1340, line: 667, baseType: !1134, size: 64, offset: 128)
!6256 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !6251, file: !1340, line: 671, baseType: !1182, size: 128, offset: 192)
!6257 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !6251, file: !1340, line: 679, baseType: !5797, size: 192, offset: 320)
!6258 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !6251, file: !1340, line: 680, baseType: !1134, size: 64, offset: 512)
!6259 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !6251, file: !1340, line: 681, baseType: !159, size: 32, offset: 576)
!6260 = !DILocation(line: 715, column: 26, scope: !6243)
!6261 = !DILocalVariable(name: "niter", scope: !6243, file: !3, line: 716, type: !1134)
!6262 = !DILocation(line: 716, column: 8, scope: !6243)
!6263 = !DILocalVariable(name: "slot", scope: !6243, file: !3, line: 717, type: !1790)
!6264 = !DILocation(line: 717, column: 10, scope: !6243)
!6265 = !DILocation(line: 719, column: 8, scope: !6266)
!6266 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 719, column: 7)
!6267 = !DILocation(line: 719, column: 14, scope: !6266)
!6268 = !DILocation(line: 719, column: 7, scope: !6243)
!6269 = !DILocation(line: 721, column: 22, scope: !6270)
!6270 = distinct !DILexicalBlock(scope: !6266, file: !3, line: 720, column: 5)
!6271 = !DILocation(line: 721, column: 7, scope: !6270)
!6272 = !DILocation(line: 721, column: 13, scope: !6270)
!6273 = !DILocation(line: 721, column: 20, scope: !6270)
!6274 = !DILocation(line: 722, column: 12, scope: !6270)
!6275 = !DILocation(line: 723, column: 5, scope: !6270)
!6276 = !DILocation(line: 725, column: 34, scope: !6266)
!6277 = !DILocation(line: 725, column: 40, scope: !6266)
!6278 = !DILocation(line: 725, column: 48, scope: !6266)
!6279 = !DILocation(line: 725, column: 12, scope: !6266)
!6280 = !DILocation(line: 725, column: 10, scope: !6266)
!6281 = !DILocation(line: 727, column: 8, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 727, column: 7)
!6283 = !DILocation(line: 727, column: 7, scope: !6243)
!6284 = !DILocation(line: 734, column: 38, scope: !6285)
!6285 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 734, column: 11)
!6286 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 728, column: 5)
!6287 = !DILocation(line: 734, column: 44, scope: !6285)
!6288 = !DILocation(line: 735, column: 10, scope: !6285)
!6289 = !DILocation(line: 734, column: 11, scope: !6285)
!6290 = !DILocation(line: 736, column: 4, scope: !6285)
!6291 = !DILocation(line: 736, column: 27, scope: !6285)
!6292 = !DILocation(line: 736, column: 7, scope: !6285)
!6293 = !DILocation(line: 737, column: 9, scope: !6285)
!6294 = !DILocation(line: 737, column: 48, scope: !6285)
!6295 = !DILocation(line: 737, column: 13, scope: !6285)
!6296 = !DILocation(line: 734, column: 11, scope: !6286)
!6297 = !DILocation(line: 738, column: 15, scope: !6285)
!6298 = !DILocation(line: 738, column: 8, scope: !6285)
!6299 = !DILocation(line: 738, column: 2, scope: !6285)
!6300 = !DILocation(line: 740, column: 8, scope: !6285)
!6301 = !DILocation(line: 742, column: 50, scope: !6286)
!6302 = !DILocation(line: 742, column: 28, scope: !6286)
!6303 = !DILocation(line: 742, column: 34, scope: !6286)
!6304 = !DILocation(line: 742, column: 42, scope: !6286)
!6305 = !DILocation(line: 742, column: 8, scope: !6286)
!6306 = !DILocation(line: 742, column: 48, scope: !6286)
!6307 = !DILocation(line: 743, column: 5, scope: !6286)
!6308 = !DILocation(line: 745, column: 21, scope: !6282)
!6309 = !DILocation(line: 745, column: 20, scope: !6282)
!6310 = !DILocation(line: 745, column: 13, scope: !6282)
!6311 = !DILocation(line: 745, column: 11, scope: !6282)
!6312 = !DILocation(line: 747, column: 10, scope: !6243)
!6313 = !DILocation(line: 747, column: 3, scope: !6243)
!6314 = distinct !DISubprogram(name: "ei_start_1", scope: !149, file: !149, line: 696, type: !6315, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6315 = !DISubroutineType(types: !6316)
!6316 = !{!4366, !4371}
!6317 = !DILocalVariable(name: "ev", arg: 1, scope: !6314, file: !149, line: 696, type: !4371)
!6318 = !DILocation(line: 696, column: 28, scope: !6314)
!6319 = !DILocalVariable(name: "i", scope: !6314, file: !149, line: 698, type: !4366)
!6320 = !DILocation(line: 698, column: 17, scope: !6314)
!6321 = !DILocation(line: 700, column: 5, scope: !6314)
!6322 = !DILocation(line: 700, column: 11, scope: !6314)
!6323 = !DILocation(line: 701, column: 17, scope: !6314)
!6324 = !DILocation(line: 701, column: 5, scope: !6314)
!6325 = !DILocation(line: 701, column: 15, scope: !6314)
!6326 = !DILocation(line: 703, column: 3, scope: !6314)
!6327 = distinct !DISubprogram(name: "ei_cond", scope: !149, file: !149, line: 771, type: !6328, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6328 = !DISubroutineType(types: !6329)
!6329 = !{!136, !4366, !6330}
!6330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1416, size: 64)
!6331 = !DILocalVariable(name: "ei", arg: 1, scope: !6327, file: !149, line: 771, type: !4366)
!6332 = !DILocation(line: 771, column: 24, scope: !6327)
!6333 = !DILocalVariable(name: "p", arg: 2, scope: !6327, file: !149, line: 771, type: !6330)
!6334 = !DILocation(line: 771, column: 34, scope: !6327)
!6335 = !DILocation(line: 773, column: 8, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6327, file: !149, line: 773, column: 7)
!6337 = !DILocation(line: 773, column: 7, scope: !6327)
!6338 = !DILocation(line: 775, column: 12, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6336, file: !149, line: 774, column: 5)
!6340 = !DILocation(line: 775, column: 8, scope: !6339)
!6341 = !DILocation(line: 775, column: 10, scope: !6339)
!6342 = !DILocation(line: 776, column: 7, scope: !6339)
!6343 = !DILocation(line: 780, column: 8, scope: !6344)
!6344 = distinct !DILexicalBlock(scope: !6336, file: !149, line: 779, column: 5)
!6345 = !DILocation(line: 780, column: 10, scope: !6344)
!6346 = !DILocation(line: 781, column: 7, scope: !6344)
!6347 = !DILocation(line: 783, column: 1, scope: !6327)
!6348 = distinct !DISubprogram(name: "find_interesting_uses_outside", scope: !3, file: !3, line: 1816, type: !6349, scopeLine: 1817, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6349 = !DISubroutineType(types: !6350)
!6350 = !{null, !2530, !1416}
!6351 = !DILocalVariable(name: "data", arg: 1, scope: !6348, file: !3, line: 1816, type: !2530)
!6352 = !DILocation(line: 1816, column: 52, scope: !6348)
!6353 = !DILocalVariable(name: "exit", arg: 2, scope: !6348, file: !3, line: 1816, type: !1416)
!6354 = !DILocation(line: 1816, column: 63, scope: !6348)
!6355 = !DILocalVariable(name: "phi", scope: !6348, file: !3, line: 1818, type: !1436)
!6356 = !DILocation(line: 1818, column: 10, scope: !6348)
!6357 = !DILocalVariable(name: "psi", scope: !6348, file: !3, line: 1819, type: !4328)
!6358 = !DILocation(line: 1819, column: 24, scope: !6348)
!6359 = !DILocalVariable(name: "def", scope: !6348, file: !3, line: 1820, type: !1134)
!6360 = !DILocation(line: 1820, column: 8, scope: !6348)
!6361 = !DILocation(line: 1822, column: 30, scope: !6362)
!6362 = distinct !DILexicalBlock(scope: !6348, file: !3, line: 1822, column: 3)
!6363 = !DILocation(line: 1822, column: 36, scope: !6362)
!6364 = !DILocation(line: 1822, column: 14, scope: !6362)
!6365 = !DILocation(line: 1822, column: 8, scope: !6362)
!6366 = !DILocation(line: 1822, column: 44, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 1822, column: 3)
!6368 = !DILocation(line: 1822, column: 43, scope: !6367)
!6369 = !DILocation(line: 1822, column: 3, scope: !6362)
!6370 = !DILocation(line: 1824, column: 13, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6367, file: !3, line: 1823, column: 5)
!6372 = !DILocation(line: 1824, column: 11, scope: !6371)
!6373 = !DILocation(line: 1825, column: 13, scope: !6371)
!6374 = !DILocation(line: 1825, column: 11, scope: !6371)
!6375 = !DILocation(line: 1826, column: 26, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6371, file: !3, line: 1826, column: 11)
!6377 = !DILocation(line: 1826, column: 11, scope: !6376)
!6378 = !DILocation(line: 1826, column: 11, scope: !6371)
!6379 = !DILocation(line: 1827, column: 28, scope: !6376)
!6380 = !DILocation(line: 1827, column: 34, scope: !6376)
!6381 = !DILocation(line: 1827, column: 2, scope: !6376)
!6382 = !DILocation(line: 1828, column: 5, scope: !6371)
!6383 = !DILocation(line: 1822, column: 61, scope: !6367)
!6384 = !DILocation(line: 1822, column: 3, scope: !6367)
!6385 = distinct !{!6385, !6369, !6386}
!6386 = !DILocation(line: 1828, column: 5, scope: !6362)
!6387 = !DILocation(line: 1829, column: 1, scope: !6348)
!6388 = distinct !DISubprogram(name: "ei_next", scope: !149, file: !149, line: 736, type: !6389, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6389 = !DISubroutineType(types: !6390)
!6390 = !{null, !6391}
!6391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4366, size: 64)
!6392 = !DILocalVariable(name: "i", arg: 1, scope: !6388, file: !149, line: 736, type: !6391)
!6393 = !DILocation(line: 736, column: 25, scope: !6388)
!6394 = !DILocation(line: 738, column: 3, scope: !6388)
!6395 = !DILocation(line: 739, column: 3, scope: !6388)
!6396 = !DILocation(line: 739, column: 6, scope: !6388)
!6397 = !DILocation(line: 739, column: 11, scope: !6388)
!6398 = !DILocation(line: 740, column: 1, scope: !6388)
!6399 = distinct !DISubprogram(name: "find_interesting_uses_stmt", scope: !3, file: !3, line: 1727, type: !6052, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6400 = !DILocalVariable(name: "data", arg: 1, scope: !6399, file: !3, line: 1727, type: !2530)
!6401 = !DILocation(line: 1727, column: 49, scope: !6399)
!6402 = !DILocalVariable(name: "stmt", arg: 2, scope: !6399, file: !3, line: 1727, type: !1436)
!6403 = !DILocation(line: 1727, column: 62, scope: !6399)
!6404 = !DILocalVariable(name: "iv", scope: !6399, file: !3, line: 1729, type: !2431)
!6405 = !DILocation(line: 1729, column: 14, scope: !6399)
!6406 = !DILocalVariable(name: "op", scope: !6399, file: !3, line: 1730, type: !1134)
!6407 = !DILocation(line: 1730, column: 8, scope: !6399)
!6408 = !DILocalVariable(name: "lhs", scope: !6399, file: !3, line: 1730, type: !1470)
!6409 = !DILocation(line: 1730, column: 13, scope: !6399)
!6410 = !DILocalVariable(name: "rhs", scope: !6399, file: !3, line: 1730, type: !1470)
!6411 = !DILocation(line: 1730, column: 19, scope: !6399)
!6412 = !DILocalVariable(name: "iter", scope: !6399, file: !3, line: 1731, type: !6413)
!6413 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !917, line: 140, baseType: !6414)
!6414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !917, line: 131, size: 320, elements: !6415)
!6415 = !{!6416, !6417, !6418, !6420, !6422, !6423, !6424}
!6416 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6414, file: !917, line: 133, baseType: !136, size: 8)
!6417 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6414, file: !917, line: 134, baseType: !916, size: 32, offset: 32)
!6418 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6414, file: !917, line: 135, baseType: !6419, size: 64, offset: 64)
!6419 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !917, line: 42, baseType: !1465)
!6420 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6414, file: !917, line: 136, baseType: !6421, size: 64, offset: 128)
!6421 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !917, line: 50, baseType: !1472)
!6422 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6414, file: !917, line: 137, baseType: !1006, size: 32, offset: 192)
!6423 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6414, file: !917, line: 138, baseType: !1006, size: 32, offset: 224)
!6424 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6414, file: !917, line: 139, baseType: !1436, size: 64, offset: 256)
!6425 = !DILocation(line: 1731, column: 15, scope: !6399)
!6426 = !DILocalVariable(name: "use_p", scope: !6399, file: !3, line: 1732, type: !2547)
!6427 = !DILocation(line: 1732, column: 17, scope: !6399)
!6428 = !DILocalVariable(name: "code", scope: !6399, file: !3, line: 1733, type: !159)
!6429 = !DILocation(line: 1733, column: 18, scope: !6399)
!6430 = !DILocation(line: 1735, column: 25, scope: !6399)
!6431 = !DILocation(line: 1735, column: 31, scope: !6399)
!6432 = !DILocation(line: 1735, column: 3, scope: !6399)
!6433 = !DILocation(line: 1737, column: 20, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 1737, column: 7)
!6435 = !DILocation(line: 1737, column: 7, scope: !6434)
!6436 = !DILocation(line: 1737, column: 26, scope: !6434)
!6437 = !DILocation(line: 1737, column: 7, scope: !6399)
!6438 = !DILocation(line: 1739, column: 35, scope: !6439)
!6439 = distinct !DILexicalBlock(scope: !6434, file: !3, line: 1738, column: 5)
!6440 = !DILocation(line: 1739, column: 41, scope: !6439)
!6441 = !DILocation(line: 1739, column: 7, scope: !6439)
!6442 = !DILocation(line: 1740, column: 7, scope: !6439)
!6443 = !DILocation(line: 1743, column: 25, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 1743, column: 7)
!6445 = !DILocation(line: 1743, column: 7, scope: !6444)
!6446 = !DILocation(line: 1743, column: 7, scope: !6399)
!6447 = !DILocation(line: 1745, column: 36, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6444, file: !3, line: 1744, column: 5)
!6449 = !DILocation(line: 1745, column: 13, scope: !6448)
!6450 = !DILocation(line: 1745, column: 11, scope: !6448)
!6451 = !DILocation(line: 1746, column: 37, scope: !6448)
!6452 = !DILocation(line: 1746, column: 13, scope: !6448)
!6453 = !DILocation(line: 1746, column: 11, scope: !6448)
!6454 = !DILocation(line: 1748, column: 11, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 1748, column: 11)
!6456 = !DILocation(line: 1748, column: 28, scope: !6455)
!6457 = !DILocation(line: 1748, column: 11, scope: !6448)
!6458 = !DILocation(line: 1753, column: 17, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 1749, column: 2)
!6460 = !DILocation(line: 1753, column: 24, scope: !6459)
!6461 = !DILocation(line: 1753, column: 23, scope: !6459)
!6462 = !DILocation(line: 1753, column: 9, scope: !6459)
!6463 = !DILocation(line: 1753, column: 7, scope: !6459)
!6464 = !DILocation(line: 1755, column: 8, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 1755, column: 8)
!6466 = !DILocation(line: 1755, column: 11, scope: !6465)
!6467 = !DILocation(line: 1755, column: 30, scope: !6465)
!6468 = !DILocation(line: 1755, column: 34, scope: !6465)
!6469 = !DILocation(line: 1755, column: 15, scope: !6465)
!6470 = !DILocation(line: 1755, column: 8, scope: !6459)
!6471 = !DILocation(line: 1756, column: 6, scope: !6465)
!6472 = !DILocation(line: 1757, column: 2, scope: !6459)
!6473 = !DILocation(line: 1759, column: 38, scope: !6448)
!6474 = !DILocation(line: 1759, column: 14, scope: !6448)
!6475 = !DILocation(line: 1759, column: 12, scope: !6448)
!6476 = !DILocation(line: 1760, column: 33, scope: !6477)
!6477 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 1760, column: 11)
!6478 = !DILocation(line: 1760, column: 11, scope: !6477)
!6479 = !DILocation(line: 1760, column: 39, scope: !6477)
!6480 = !DILocation(line: 1761, column: 4, scope: !6477)
!6481 = !DILocation(line: 1761, column: 8, scope: !6477)
!6482 = !DILocation(line: 1762, column: 8, scope: !6477)
!6483 = !DILocation(line: 1762, column: 27, scope: !6477)
!6484 = !DILocation(line: 1762, column: 26, scope: !6477)
!6485 = !DILocation(line: 1762, column: 11, scope: !6477)
!6486 = !DILocation(line: 1760, column: 11, scope: !6448)
!6487 = !DILocation(line: 1764, column: 8, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6489, file: !3, line: 1764, column: 8)
!6489 = distinct !DILexicalBlock(scope: !6477, file: !3, line: 1763, column: 2)
!6490 = !DILocation(line: 1764, column: 8, scope: !6489)
!6491 = !DILocation(line: 1765, column: 37, scope: !6488)
!6492 = !DILocation(line: 1765, column: 43, scope: !6488)
!6493 = !DILocation(line: 1765, column: 49, scope: !6488)
!6494 = !DILocation(line: 1765, column: 6, scope: !6488)
!6495 = !DILocation(line: 1767, column: 32, scope: !6488)
!6496 = !DILocation(line: 1767, column: 39, scope: !6488)
!6497 = !DILocation(line: 1767, column: 38, scope: !6488)
!6498 = !DILocation(line: 1767, column: 6, scope: !6488)
!6499 = !DILocation(line: 1769, column: 8, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6489, file: !3, line: 1769, column: 8)
!6501 = !DILocation(line: 1769, column: 8, scope: !6489)
!6502 = !DILocation(line: 1770, column: 37, scope: !6500)
!6503 = !DILocation(line: 1770, column: 43, scope: !6500)
!6504 = !DILocation(line: 1770, column: 49, scope: !6500)
!6505 = !DILocation(line: 1770, column: 6, scope: !6500)
!6506 = !DILocation(line: 1771, column: 4, scope: !6489)
!6507 = !DILocation(line: 1773, column: 16, scope: !6508)
!6508 = distinct !DILexicalBlock(scope: !6477, file: !3, line: 1773, column: 16)
!6509 = !DILocation(line: 1773, column: 39, scope: !6508)
!6510 = !DILocation(line: 1773, column: 16, scope: !6477)
!6511 = !DILocation(line: 1775, column: 32, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6508, file: !3, line: 1774, column: 2)
!6513 = !DILocation(line: 1775, column: 38, scope: !6512)
!6514 = !DILocation(line: 1775, column: 4, scope: !6512)
!6515 = !DILocation(line: 1776, column: 4, scope: !6512)
!6516 = !DILocation(line: 1786, column: 5, scope: !6448)
!6517 = !DILocation(line: 1788, column: 20, scope: !6518)
!6518 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 1788, column: 7)
!6519 = !DILocation(line: 1788, column: 7, scope: !6518)
!6520 = !DILocation(line: 1788, column: 26, scope: !6518)
!6521 = !DILocation(line: 1789, column: 7, scope: !6518)
!6522 = !DILocation(line: 1789, column: 21, scope: !6518)
!6523 = !DILocation(line: 1789, column: 10, scope: !6518)
!6524 = !DILocation(line: 1789, column: 30, scope: !6518)
!6525 = !DILocation(line: 1789, column: 36, scope: !6518)
!6526 = !DILocation(line: 1789, column: 50, scope: !6518)
!6527 = !DILocation(line: 1789, column: 27, scope: !6518)
!6528 = !DILocation(line: 1788, column: 7, scope: !6399)
!6529 = !DILocation(line: 1791, column: 20, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6518, file: !3, line: 1790, column: 5)
!6531 = !DILocation(line: 1791, column: 26, scope: !6530)
!6532 = !DILocation(line: 1791, column: 12, scope: !6530)
!6533 = !DILocation(line: 1791, column: 10, scope: !6530)
!6534 = !DILocation(line: 1793, column: 11, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 1793, column: 11)
!6536 = !DILocation(line: 1793, column: 14, scope: !6535)
!6537 = !DILocation(line: 1793, column: 33, scope: !6535)
!6538 = !DILocation(line: 1793, column: 37, scope: !6535)
!6539 = !DILocation(line: 1793, column: 18, scope: !6535)
!6540 = !DILocation(line: 1793, column: 11, scope: !6530)
!6541 = !DILocation(line: 1794, column: 2, scope: !6535)
!6542 = !DILocation(line: 1795, column: 5, scope: !6530)
!6543 = !DILocation(line: 1797, column: 3, scope: !6544)
!6544 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 1797, column: 3)
!6545 = !DILocation(line: 1797, column: 3, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6544, file: !3, line: 1797, column: 3)
!6547 = !DILocation(line: 1799, column: 12, scope: !6548)
!6548 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 1798, column: 5)
!6549 = !DILocation(line: 1799, column: 10, scope: !6548)
!6550 = !DILocation(line: 1801, column: 11, scope: !6551)
!6551 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 1801, column: 11)
!6552 = !DILocation(line: 1801, column: 26, scope: !6551)
!6553 = !DILocation(line: 1801, column: 11, scope: !6548)
!6554 = !DILocation(line: 1802, column: 2, scope: !6551)
!6555 = !DILocation(line: 1804, column: 20, scope: !6548)
!6556 = !DILocation(line: 1804, column: 26, scope: !6548)
!6557 = !DILocation(line: 1804, column: 12, scope: !6548)
!6558 = !DILocation(line: 1804, column: 10, scope: !6548)
!6559 = !DILocation(line: 1805, column: 12, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 1805, column: 11)
!6561 = !DILocation(line: 1805, column: 11, scope: !6548)
!6562 = !DILocation(line: 1806, column: 2, scope: !6560)
!6563 = !DILocation(line: 1808, column: 33, scope: !6548)
!6564 = !DILocation(line: 1808, column: 39, scope: !6548)
!6565 = !DILocation(line: 1808, column: 7, scope: !6548)
!6566 = !DILocation(line: 1809, column: 5, scope: !6548)
!6567 = distinct !{!6567, !6543, !6568}
!6568 = !DILocation(line: 1809, column: 5, scope: !6544)
!6569 = !DILocation(line: 1810, column: 1, scope: !6399)
!6570 = distinct !DISubprogram(name: "is_gimple_debug", scope: !574, file: !574, line: 3249, type: !4085, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6571 = !DILocalVariable(name: "gs", arg: 1, scope: !6570, file: !574, line: 3249, type: !3158)
!6572 = !DILocation(line: 3249, column: 31, scope: !6570)
!6573 = !DILocation(line: 3251, column: 23, scope: !6570)
!6574 = !DILocation(line: 3251, column: 10, scope: !6570)
!6575 = !DILocation(line: 3251, column: 27, scope: !6570)
!6576 = !DILocation(line: 3251, column: 3, scope: !6570)
!6577 = distinct !DISubprogram(name: "ei_end_p", scope: !149, file: !149, line: 721, type: !6578, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6578 = !DISubroutineType(types: !6579)
!6579 = !{!136, !4366}
!6580 = !DILocalVariable(name: "i", arg: 1, scope: !6577, file: !149, line: 721, type: !4366)
!6581 = !DILocation(line: 721, column: 25, scope: !6577)
!6582 = !DILocation(line: 723, column: 13, scope: !6577)
!6583 = !DILocation(line: 723, column: 22, scope: !6577)
!6584 = !DILocation(line: 723, column: 19, scope: !6577)
!6585 = !DILocation(line: 723, column: 10, scope: !6577)
!6586 = !DILocation(line: 723, column: 3, scope: !6577)
!6587 = distinct !DISubprogram(name: "ei_edge", scope: !149, file: !149, line: 752, type: !6588, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6588 = !DISubroutineType(types: !6589)
!6589 = !{!1416, !4366}
!6590 = !DILocalVariable(name: "i", arg: 1, scope: !6587, file: !149, line: 752, type: !4366)
!6591 = !DILocation(line: 752, column: 24, scope: !6587)
!6592 = !DILocation(line: 754, column: 10, scope: !6587)
!6593 = !DILocation(line: 754, column: 3, scope: !6587)
!6594 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !149, file: !149, line: 150, type: !6595, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6595 = !DISubroutineType(types: !6596)
!6596 = !{!6, !6597}
!6597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6598, size: 64)
!6598 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1409)
!6599 = !DILocalVariable(name: "vec_", arg: 1, scope: !6594, file: !149, line: 150, type: !6597)
!6600 = !DILocation(line: 150, column: 1, scope: !6594)
!6601 = distinct !DISubprogram(name: "ei_container", scope: !149, file: !149, line: 685, type: !6602, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6602 = !DISubroutineType(types: !6603)
!6603 = !{!1404, !4366}
!6604 = !DILocalVariable(name: "i", arg: 1, scope: !6601, file: !149, line: 685, type: !4366)
!6605 = !DILocation(line: 685, column: 29, scope: !6601)
!6606 = !DILocation(line: 687, column: 3, scope: !6601)
!6607 = !DILocation(line: 688, column: 13, scope: !6601)
!6608 = !DILocation(line: 688, column: 10, scope: !6601)
!6609 = !DILocation(line: 688, column: 3, scope: !6601)
!6610 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !149, file: !149, line: 150, type: !6611, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6611 = !DISubroutineType(types: !6612)
!6612 = !{!1416, !6597, !6}
!6613 = !DILocalVariable(name: "vec_", arg: 1, scope: !6610, file: !149, line: 150, type: !6597)
!6614 = !DILocation(line: 150, column: 1, scope: !6610)
!6615 = !DILocalVariable(name: "ix_", arg: 2, scope: !6610, file: !149, line: 150, type: !6)
!6616 = !DILocation(line: 0, scope: !6610)
!6617 = distinct !DISubprogram(name: "find_interesting_uses_op", scope: !3, file: !3, line: 1152, type: !6618, scopeLine: 1153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6618 = !DISubroutineType(types: !6619)
!6619 = !{!2457, !2530, !1134}
!6620 = !DILocalVariable(name: "data", arg: 1, scope: !6617, file: !3, line: 1152, type: !2530)
!6621 = !DILocation(line: 1152, column: 47, scope: !6617)
!6622 = !DILocalVariable(name: "op", arg: 2, scope: !6617, file: !3, line: 1152, type: !1134)
!6623 = !DILocation(line: 1152, column: 58, scope: !6617)
!6624 = !DILocalVariable(name: "iv", scope: !6617, file: !3, line: 1154, type: !2431)
!6625 = !DILocation(line: 1154, column: 14, scope: !6617)
!6626 = !DILocalVariable(name: "civ", scope: !6617, file: !3, line: 1155, type: !2431)
!6627 = !DILocation(line: 1155, column: 14, scope: !6617)
!6628 = !DILocalVariable(name: "stmt", scope: !6617, file: !3, line: 1156, type: !1436)
!6629 = !DILocation(line: 1156, column: 10, scope: !6617)
!6630 = !DILocalVariable(name: "use", scope: !6617, file: !3, line: 1157, type: !2457)
!6631 = !DILocation(line: 1157, column: 18, scope: !6617)
!6632 = !DILocation(line: 1159, column: 7, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1159, column: 7)
!6634 = !DILocation(line: 1159, column: 22, scope: !6633)
!6635 = !DILocation(line: 1159, column: 7, scope: !6617)
!6636 = !DILocation(line: 1160, column: 5, scope: !6633)
!6637 = !DILocation(line: 1162, column: 16, scope: !6617)
!6638 = !DILocation(line: 1162, column: 22, scope: !6617)
!6639 = !DILocation(line: 1162, column: 8, scope: !6617)
!6640 = !DILocation(line: 1162, column: 6, scope: !6617)
!6641 = !DILocation(line: 1163, column: 8, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1163, column: 7)
!6643 = !DILocation(line: 1163, column: 7, scope: !6617)
!6644 = !DILocation(line: 1164, column: 5, scope: !6642)
!6645 = !DILocation(line: 1166, column: 7, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1166, column: 7)
!6647 = !DILocation(line: 1166, column: 11, scope: !6646)
!6648 = !DILocation(line: 1166, column: 7, scope: !6617)
!6649 = !DILocation(line: 1168, column: 21, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1167, column: 5)
!6651 = !DILocation(line: 1168, column: 27, scope: !6650)
!6652 = !DILocation(line: 1168, column: 31, scope: !6650)
!6653 = !DILocation(line: 1168, column: 13, scope: !6650)
!6654 = !DILocation(line: 1168, column: 11, scope: !6650)
!6655 = !DILocation(line: 1170, column: 7, scope: !6650)
!6656 = !DILocation(line: 1171, column: 14, scope: !6650)
!6657 = !DILocation(line: 1171, column: 7, scope: !6650)
!6658 = !DILocation(line: 1174, column: 22, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1174, column: 7)
!6660 = !DILocation(line: 1174, column: 26, scope: !6659)
!6661 = !DILocation(line: 1174, column: 7, scope: !6659)
!6662 = !DILocation(line: 1174, column: 7, scope: !6617)
!6663 = !DILocation(line: 1176, column: 25, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6659, file: !3, line: 1175, column: 5)
!6665 = !DILocation(line: 1176, column: 31, scope: !6664)
!6666 = !DILocation(line: 1176, column: 7, scope: !6664)
!6667 = !DILocation(line: 1177, column: 7, scope: !6664)
!6668 = !DILocation(line: 1179, column: 3, scope: !6617)
!6669 = !DILocation(line: 1179, column: 7, scope: !6617)
!6670 = !DILocation(line: 1179, column: 20, scope: !6617)
!6671 = !DILocation(line: 1181, column: 9, scope: !6617)
!6672 = !DILocation(line: 1181, column: 7, scope: !6617)
!6673 = !DILocation(line: 1182, column: 4, scope: !6617)
!6674 = !DILocation(line: 1182, column: 11, scope: !6617)
!6675 = !DILocation(line: 1182, column: 10, scope: !6617)
!6676 = !DILocation(line: 1184, column: 10, scope: !6617)
!6677 = !DILocation(line: 1184, column: 8, scope: !6617)
!6678 = !DILocation(line: 1185, column: 3, scope: !6617)
!6679 = !DILocation(line: 1188, column: 21, scope: !6617)
!6680 = !DILocation(line: 1188, column: 33, scope: !6617)
!6681 = !DILocation(line: 1188, column: 38, scope: !6617)
!6682 = !DILocation(line: 1188, column: 9, scope: !6617)
!6683 = !DILocation(line: 1188, column: 7, scope: !6617)
!6684 = !DILocation(line: 1189, column: 16, scope: !6617)
!6685 = !DILocation(line: 1189, column: 21, scope: !6617)
!6686 = !DILocation(line: 1189, column: 3, scope: !6617)
!6687 = !DILocation(line: 1189, column: 7, scope: !6617)
!6688 = !DILocation(line: 1189, column: 14, scope: !6617)
!6689 = !DILocation(line: 1191, column: 10, scope: !6617)
!6690 = !DILocation(line: 1191, column: 3, scope: !6617)
!6691 = !DILocation(line: 1192, column: 1, scope: !6617)
!6692 = distinct !DISubprogram(name: "record_invariant", scope: !3, file: !3, line: 1127, type: !6693, scopeLine: 1128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6693 = !DISubroutineType(types: !6694)
!6694 = !{null, !2530, !1134, !136}
!6695 = !DILocalVariable(name: "data", arg: 1, scope: !6692, file: !3, line: 1127, type: !2530)
!6696 = !DILocation(line: 1127, column: 39, scope: !6692)
!6697 = !DILocalVariable(name: "op", arg: 2, scope: !6692, file: !3, line: 1127, type: !1134)
!6698 = !DILocation(line: 1127, column: 50, scope: !6692)
!6699 = !DILocalVariable(name: "nonlinear_use", arg: 3, scope: !6692, file: !3, line: 1127, type: !136)
!6700 = !DILocation(line: 1127, column: 59, scope: !6692)
!6701 = !DILocalVariable(name: "bb", scope: !6692, file: !3, line: 1129, type: !1399)
!6702 = !DILocation(line: 1129, column: 15, scope: !6692)
!6703 = !DILocalVariable(name: "info", scope: !6692, file: !3, line: 1130, type: !2426)
!6704 = !DILocation(line: 1130, column: 24, scope: !6692)
!6705 = !DILocation(line: 1132, column: 7, scope: !6706)
!6706 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 1132, column: 7)
!6707 = !DILocation(line: 1132, column: 22, scope: !6706)
!6708 = !DILocation(line: 1133, column: 7, scope: !6706)
!6709 = !DILocation(line: 1133, column: 26, scope: !6706)
!6710 = !DILocation(line: 1133, column: 11, scope: !6706)
!6711 = !DILocation(line: 1132, column: 7, scope: !6692)
!6712 = !DILocation(line: 1134, column: 5, scope: !6706)
!6713 = !DILocation(line: 1136, column: 19, scope: !6692)
!6714 = !DILocation(line: 1136, column: 8, scope: !6692)
!6715 = !DILocation(line: 1136, column: 6, scope: !6692)
!6716 = !DILocation(line: 1137, column: 7, scope: !6717)
!6717 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 1137, column: 7)
!6718 = !DILocation(line: 1138, column: 7, scope: !6717)
!6719 = !DILocation(line: 1138, column: 33, scope: !6717)
!6720 = !DILocation(line: 1138, column: 39, scope: !6717)
!6721 = !DILocation(line: 1138, column: 53, scope: !6717)
!6722 = !DILocation(line: 1138, column: 10, scope: !6717)
!6723 = !DILocation(line: 1137, column: 7, scope: !6692)
!6724 = !DILocation(line: 1139, column: 5, scope: !6717)
!6725 = !DILocation(line: 1141, column: 21, scope: !6692)
!6726 = !DILocation(line: 1141, column: 27, scope: !6692)
!6727 = !DILocation(line: 1141, column: 10, scope: !6692)
!6728 = !DILocation(line: 1141, column: 8, scope: !6692)
!6729 = !DILocation(line: 1142, column: 16, scope: !6692)
!6730 = !DILocation(line: 1142, column: 3, scope: !6692)
!6731 = !DILocation(line: 1142, column: 9, scope: !6692)
!6732 = !DILocation(line: 1142, column: 14, scope: !6692)
!6733 = !DILocation(line: 1143, column: 27, scope: !6692)
!6734 = !DILocation(line: 1143, column: 3, scope: !6692)
!6735 = !DILocation(line: 1143, column: 9, scope: !6692)
!6736 = !DILocation(line: 1143, column: 24, scope: !6692)
!6737 = !DILocation(line: 1144, column: 8, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 1144, column: 7)
!6739 = !DILocation(line: 1144, column: 14, scope: !6738)
!6740 = !DILocation(line: 1144, column: 7, scope: !6692)
!6741 = !DILocation(line: 1145, column: 22, scope: !6738)
!6742 = !DILocation(line: 1145, column: 28, scope: !6738)
!6743 = !DILocation(line: 1145, column: 20, scope: !6738)
!6744 = !DILocation(line: 1145, column: 5, scope: !6738)
!6745 = !DILocation(line: 1145, column: 11, scope: !6738)
!6746 = !DILocation(line: 1145, column: 18, scope: !6738)
!6747 = !DILocation(line: 1146, column: 19, scope: !6692)
!6748 = !DILocation(line: 1146, column: 25, scope: !6692)
!6749 = !DILocation(line: 1146, column: 35, scope: !6692)
!6750 = !DILocation(line: 1146, column: 3, scope: !6692)
!6751 = !DILocation(line: 1147, column: 1, scope: !6692)
!6752 = distinct !DISubprogram(name: "is_gimple_assign", scope: !574, file: !574, line: 1677, type: !4085, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6753 = !DILocalVariable(name: "gs", arg: 1, scope: !6752, file: !574, line: 1677, type: !3158)
!6754 = !DILocation(line: 1677, column: 32, scope: !6752)
!6755 = !DILocation(line: 1679, column: 23, scope: !6752)
!6756 = !DILocation(line: 1679, column: 10, scope: !6752)
!6757 = !DILocation(line: 1679, column: 27, scope: !6752)
!6758 = !DILocation(line: 1679, column: 3, scope: !6752)
!6759 = distinct !DISubprogram(name: "record_use", scope: !3, file: !3, line: 1098, type: !6760, scopeLine: 1100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6760 = !DISubroutineType(types: !6761)
!6761 = !{!2457, !2530, !1470, !2431, !1436, !395}
!6762 = !DILocalVariable(name: "data", arg: 1, scope: !6759, file: !3, line: 1098, type: !2530)
!6763 = !DILocation(line: 1098, column: 33, scope: !6759)
!6764 = !DILocalVariable(name: "use_p", arg: 2, scope: !6759, file: !3, line: 1098, type: !1470)
!6765 = !DILocation(line: 1098, column: 45, scope: !6759)
!6766 = !DILocalVariable(name: "iv", arg: 3, scope: !6759, file: !3, line: 1098, type: !2431)
!6767 = !DILocation(line: 1098, column: 63, scope: !6759)
!6768 = !DILocalVariable(name: "stmt", arg: 4, scope: !6759, file: !3, line: 1099, type: !1436)
!6769 = !DILocation(line: 1099, column: 13, scope: !6759)
!6770 = !DILocalVariable(name: "use_type", arg: 5, scope: !6759, file: !3, line: 1099, type: !395)
!6771 = !DILocation(line: 1099, column: 33, scope: !6759)
!6772 = !DILocalVariable(name: "use", scope: !6759, file: !3, line: 1101, type: !2457)
!6773 = !DILocation(line: 1101, column: 18, scope: !6759)
!6774 = !DILocation(line: 1101, column: 24, scope: !6759)
!6775 = !DILocation(line: 1103, column: 24, scope: !6759)
!6776 = !DILocation(line: 1103, column: 13, scope: !6759)
!6777 = !DILocation(line: 1103, column: 3, scope: !6759)
!6778 = !DILocation(line: 1103, column: 8, scope: !6759)
!6779 = !DILocation(line: 1103, column: 11, scope: !6759)
!6780 = !DILocation(line: 1104, column: 15, scope: !6759)
!6781 = !DILocation(line: 1104, column: 3, scope: !6759)
!6782 = !DILocation(line: 1104, column: 8, scope: !6759)
!6783 = !DILocation(line: 1104, column: 13, scope: !6759)
!6784 = !DILocation(line: 1105, column: 13, scope: !6759)
!6785 = !DILocation(line: 1105, column: 3, scope: !6759)
!6786 = !DILocation(line: 1105, column: 8, scope: !6759)
!6787 = !DILocation(line: 1105, column: 11, scope: !6759)
!6788 = !DILocation(line: 1106, column: 15, scope: !6759)
!6789 = !DILocation(line: 1106, column: 3, scope: !6759)
!6790 = !DILocation(line: 1106, column: 8, scope: !6759)
!6791 = !DILocation(line: 1106, column: 13, scope: !6759)
!6792 = !DILocation(line: 1107, column: 15, scope: !6759)
!6793 = !DILocation(line: 1107, column: 3, scope: !6759)
!6794 = !DILocation(line: 1107, column: 8, scope: !6759)
!6795 = !DILocation(line: 1107, column: 13, scope: !6759)
!6796 = !DILocation(line: 1108, column: 24, scope: !6759)
!6797 = !DILocation(line: 1108, column: 3, scope: !6759)
!6798 = !DILocation(line: 1108, column: 8, scope: !6759)
!6799 = !DILocation(line: 1108, column: 22, scope: !6759)
!6800 = !DILocation(line: 1112, column: 3, scope: !6759)
!6801 = !DILocation(line: 1112, column: 7, scope: !6759)
!6802 = !DILocation(line: 1112, column: 16, scope: !6759)
!6803 = !DILocation(line: 1114, column: 7, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6759, file: !3, line: 1114, column: 7)
!6805 = !DILocation(line: 1114, column: 17, scope: !6804)
!6806 = !DILocation(line: 1114, column: 21, scope: !6804)
!6807 = !DILocation(line: 1114, column: 32, scope: !6804)
!6808 = !DILocation(line: 1114, column: 7, scope: !6759)
!6809 = !DILocation(line: 1115, column: 15, scope: !6804)
!6810 = !DILocation(line: 1115, column: 26, scope: !6804)
!6811 = !DILocation(line: 1115, column: 5, scope: !6804)
!6812 = !DILocation(line: 1117, column: 3, scope: !6759)
!6813 = !DILocation(line: 1119, column: 10, scope: !6759)
!6814 = !DILocation(line: 1119, column: 3, scope: !6759)
!6815 = distinct !DISubprogram(name: "VEC_iv_use_p_heap_safe_push", scope: !3, file: !3, line: 216, type: !6816, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6816 = !DISubroutineType(types: !6817)
!6817 = !{!6818, !6819, !2456}
!6818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2456, size: 64)
!6819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2444, size: 64)
!6820 = !DILocalVariable(name: "vec_", arg: 1, scope: !6815, file: !3, line: 216, type: !6819)
!6821 = !DILocation(line: 216, column: 1, scope: !6815)
!6822 = !DILocalVariable(name: "obj_", arg: 2, scope: !6815, file: !3, line: 216, type: !2456)
!6823 = distinct !DISubprogram(name: "VEC_iv_use_p_heap_reserve", scope: !3, file: !3, line: 216, type: !6824, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6824 = !DISubroutineType(types: !6825)
!6825 = !{!1006, !6819, !1006}
!6826 = !DILocalVariable(name: "vec_", arg: 1, scope: !6823, file: !3, line: 216, type: !6819)
!6827 = !DILocation(line: 216, column: 1, scope: !6823)
!6828 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6823, file: !3, line: 216, type: !1006)
!6829 = !DILocalVariable(name: "extend", scope: !6823, file: !3, line: 216, type: !1006)
!6830 = !DILocation(line: 216, column: 1, scope: !6831)
!6831 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 216, column: 1)
!6832 = distinct !DISubprogram(name: "VEC_iv_use_p_base_quick_push", scope: !3, file: !3, line: 215, type: !6833, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6833 = !DISubroutineType(types: !6834)
!6834 = !{!6818, !6835, !2456}
!6835 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2449, size: 64)
!6836 = !DILocalVariable(name: "vec_", arg: 1, scope: !6832, file: !3, line: 215, type: !6835)
!6837 = !DILocation(line: 215, column: 1, scope: !6832)
!6838 = !DILocalVariable(name: "obj_", arg: 2, scope: !6832, file: !3, line: 215, type: !2456)
!6839 = !DILocalVariable(name: "slot_", scope: !6832, file: !3, line: 215, type: !6818)
!6840 = distinct !DISubprogram(name: "VEC_iv_use_p_base_space", scope: !3, file: !3, line: 215, type: !6841, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6841 = !DISubroutineType(types: !6842)
!6842 = !{!1006, !6835, !1006}
!6843 = !DILocalVariable(name: "vec_", arg: 1, scope: !6840, file: !3, line: 215, type: !6835)
!6844 = !DILocation(line: 215, column: 1, scope: !6840)
!6845 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6840, file: !3, line: 215, type: !1006)
!6846 = distinct !DISubprogram(name: "find_invariants_stmt", scope: !3, file: !3, line: 1711, type: !6052, scopeLine: 1712, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6847 = !DILocalVariable(name: "data", arg: 1, scope: !6846, file: !3, line: 1711, type: !2530)
!6848 = !DILocation(line: 1711, column: 43, scope: !6846)
!6849 = !DILocalVariable(name: "stmt", arg: 2, scope: !6846, file: !3, line: 1711, type: !1436)
!6850 = !DILocation(line: 1711, column: 56, scope: !6846)
!6851 = !DILocalVariable(name: "iter", scope: !6846, file: !3, line: 1713, type: !6413)
!6852 = !DILocation(line: 1713, column: 15, scope: !6846)
!6853 = !DILocalVariable(name: "use_p", scope: !6846, file: !3, line: 1714, type: !2547)
!6854 = !DILocation(line: 1714, column: 17, scope: !6846)
!6855 = !DILocalVariable(name: "op", scope: !6846, file: !3, line: 1715, type: !1134)
!6856 = !DILocation(line: 1715, column: 8, scope: !6846)
!6857 = !DILocation(line: 1717, column: 3, scope: !6858)
!6858 = distinct !DILexicalBlock(scope: !6846, file: !3, line: 1717, column: 3)
!6859 = !DILocation(line: 1717, column: 3, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6858, file: !3, line: 1717, column: 3)
!6861 = !DILocation(line: 1719, column: 12, scope: !6862)
!6862 = distinct !DILexicalBlock(scope: !6860, file: !3, line: 1718, column: 5)
!6863 = !DILocation(line: 1719, column: 10, scope: !6862)
!6864 = !DILocation(line: 1720, column: 25, scope: !6862)
!6865 = !DILocation(line: 1720, column: 31, scope: !6862)
!6866 = !DILocation(line: 1720, column: 7, scope: !6862)
!6867 = !DILocation(line: 1721, column: 5, scope: !6862)
!6868 = distinct !{!6868, !6857, !6869}
!6869 = !DILocation(line: 1721, column: 5, scope: !6858)
!6870 = !DILocation(line: 1722, column: 1, scope: !6846)
!6871 = distinct !DISubprogram(name: "find_interesting_uses_cond", scope: !3, file: !3, line: 1263, type: !6052, scopeLine: 1264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6872 = !DILocalVariable(name: "data", arg: 1, scope: !6871, file: !3, line: 1263, type: !2530)
!6873 = !DILocation(line: 1263, column: 49, scope: !6871)
!6874 = !DILocalVariable(name: "stmt", arg: 2, scope: !6871, file: !3, line: 1263, type: !1436)
!6875 = !DILocation(line: 1263, column: 62, scope: !6871)
!6876 = !DILocalVariable(name: "var_p", scope: !6871, file: !3, line: 1265, type: !1470)
!6877 = !DILocation(line: 1265, column: 9, scope: !6871)
!6878 = !DILocalVariable(name: "bound_p", scope: !6871, file: !3, line: 1265, type: !1470)
!6879 = !DILocation(line: 1265, column: 17, scope: !6871)
!6880 = !DILocalVariable(name: "var_iv", scope: !6871, file: !3, line: 1266, type: !2431)
!6881 = !DILocation(line: 1266, column: 14, scope: !6871)
!6882 = !DILocalVariable(name: "civ", scope: !6871, file: !3, line: 1266, type: !2431)
!6883 = !DILocation(line: 1266, column: 23, scope: !6871)
!6884 = !DILocation(line: 1268, column: 31, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6871, file: !3, line: 1268, column: 7)
!6886 = !DILocation(line: 1268, column: 37, scope: !6885)
!6887 = !DILocation(line: 1268, column: 8, scope: !6885)
!6888 = !DILocation(line: 1268, column: 7, scope: !6871)
!6889 = !DILocation(line: 1270, column: 33, scope: !6890)
!6890 = distinct !DILexicalBlock(scope: !6885, file: !3, line: 1269, column: 5)
!6891 = !DILocation(line: 1270, column: 40, scope: !6890)
!6892 = !DILocation(line: 1270, column: 39, scope: !6890)
!6893 = !DILocation(line: 1270, column: 7, scope: !6890)
!6894 = !DILocation(line: 1271, column: 33, scope: !6890)
!6895 = !DILocation(line: 1271, column: 40, scope: !6890)
!6896 = !DILocation(line: 1271, column: 39, scope: !6890)
!6897 = !DILocation(line: 1271, column: 7, scope: !6890)
!6898 = !DILocation(line: 1272, column: 7, scope: !6890)
!6899 = !DILocation(line: 1275, column: 9, scope: !6871)
!6900 = !DILocation(line: 1275, column: 7, scope: !6871)
!6901 = !DILocation(line: 1276, column: 4, scope: !6871)
!6902 = !DILocation(line: 1276, column: 11, scope: !6871)
!6903 = !DILocation(line: 1276, column: 10, scope: !6871)
!6904 = !DILocation(line: 1277, column: 15, scope: !6871)
!6905 = !DILocation(line: 1277, column: 27, scope: !6871)
!6906 = !DILocation(line: 1277, column: 32, scope: !6871)
!6907 = !DILocation(line: 1277, column: 3, scope: !6871)
!6908 = !DILocation(line: 1278, column: 1, scope: !6871)
!6909 = distinct !DISubprogram(name: "gimple_assign_lhs_ptr", scope: !574, file: !574, line: 1704, type: !6910, scopeLine: 1705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6910 = !DISubroutineType(types: !6911)
!6911 = !{!1470, !3158}
!6912 = !DILocalVariable(name: "gs", arg: 1, scope: !6909, file: !574, line: 1704, type: !3158)
!6913 = !DILocation(line: 1704, column: 37, scope: !6909)
!6914 = !DILocation(line: 1707, column: 25, scope: !6909)
!6915 = !DILocation(line: 1707, column: 10, scope: !6909)
!6916 = !DILocation(line: 1707, column: 3, scope: !6909)
!6917 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !574, file: !574, line: 1738, type: !6910, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6918 = !DILocalVariable(name: "gs", arg: 1, scope: !6917, file: !574, line: 1738, type: !3158)
!6919 = !DILocation(line: 1738, column: 38, scope: !6917)
!6920 = !DILocation(line: 1741, column: 25, scope: !6917)
!6921 = !DILocation(line: 1741, column: 10, scope: !6917)
!6922 = !DILocation(line: 1741, column: 3, scope: !6917)
!6923 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !574, file: !574, line: 1815, type: !6924, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6924 = !DISubroutineType(types: !6925)
!6925 = !{!159, !3158}
!6926 = !DILocalVariable(name: "gs", arg: 1, scope: !6923, file: !574, line: 1815, type: !3158)
!6927 = !DILocation(line: 1815, column: 38, scope: !6923)
!6928 = !DILocalVariable(name: "code", scope: !6923, file: !574, line: 1817, type: !159)
!6929 = !DILocation(line: 1817, column: 18, scope: !6923)
!6930 = !DILocation(line: 1820, column: 28, scope: !6923)
!6931 = !DILocation(line: 1820, column: 10, scope: !6923)
!6932 = !DILocation(line: 1820, column: 8, scope: !6923)
!6933 = !DILocation(line: 1821, column: 29, scope: !6934)
!6934 = distinct !DILexicalBlock(scope: !6923, file: !574, line: 1821, column: 7)
!6935 = !DILocation(line: 1821, column: 7, scope: !6934)
!6936 = !DILocation(line: 1821, column: 35, scope: !6934)
!6937 = !DILocation(line: 1821, column: 7, scope: !6923)
!6938 = !DILocation(line: 1822, column: 12, scope: !6934)
!6939 = !DILocation(line: 1822, column: 10, scope: !6934)
!6940 = !DILocation(line: 1822, column: 5, scope: !6934)
!6941 = !DILocation(line: 1824, column: 10, scope: !6923)
!6942 = !DILocation(line: 1824, column: 3, scope: !6923)
!6943 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !574, file: !574, line: 1686, type: !6944, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6944 = !DISubroutineType(types: !6945)
!6945 = !{!923, !159}
!6946 = !DILocalVariable(name: "code", arg: 1, scope: !6943, file: !574, line: 1686, type: !159)
!6947 = !DILocation(line: 1686, column: 38, scope: !6943)
!6948 = !DILocation(line: 1688, column: 63, scope: !6943)
!6949 = !DILocation(line: 1688, column: 34, scope: !6943)
!6950 = !DILocation(line: 1688, column: 10, scope: !6943)
!6951 = !DILocation(line: 1688, column: 3, scope: !6943)
!6952 = distinct !DISubprogram(name: "find_interesting_uses_address", scope: !3, file: !3, line: 1603, type: !6953, scopeLine: 1604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!6953 = !DISubroutineType(types: !6954)
!6954 = !{null, !2530, !1436, !1470}
!6955 = !DILocalVariable(name: "data", arg: 1, scope: !6952, file: !3, line: 1603, type: !2530)
!6956 = !DILocation(line: 1603, column: 52, scope: !6952)
!6957 = !DILocalVariable(name: "stmt", arg: 2, scope: !6952, file: !3, line: 1603, type: !1436)
!6958 = !DILocation(line: 1603, column: 65, scope: !6952)
!6959 = !DILocalVariable(name: "op_p", arg: 3, scope: !6952, file: !3, line: 1603, type: !1470)
!6960 = !DILocation(line: 1603, column: 77, scope: !6952)
!6961 = !DILocalVariable(name: "base", scope: !6952, file: !3, line: 1605, type: !1134)
!6962 = !DILocation(line: 1605, column: 8, scope: !6952)
!6963 = !DILocation(line: 1605, column: 16, scope: !6952)
!6964 = !DILocation(line: 1605, column: 15, scope: !6952)
!6965 = !DILocalVariable(name: "step", scope: !6952, file: !3, line: 1605, type: !1134)
!6966 = !DILocation(line: 1605, column: 22, scope: !6952)
!6967 = !DILocation(line: 1605, column: 44, scope: !6952)
!6968 = !DILocation(line: 1605, column: 29, scope: !6952)
!6969 = !DILocalVariable(name: "civ", scope: !6952, file: !3, line: 1606, type: !2431)
!6970 = !DILocation(line: 1606, column: 14, scope: !6952)
!6971 = !DILocalVariable(name: "ifs_ivopts_data", scope: !6952, file: !3, line: 1607, type: !2527)
!6972 = !DILocation(line: 1607, column: 26, scope: !6952)
!6973 = !DILocation(line: 1611, column: 32, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1611, column: 7)
!6975 = !DILocation(line: 1611, column: 7, scope: !6974)
!6976 = !DILocation(line: 1611, column: 7, scope: !6952)
!6977 = !DILocation(line: 1612, column: 5, scope: !6974)
!6978 = !DILocation(line: 1616, column: 7, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1616, column: 7)
!6980 = !DILocation(line: 1616, column: 24, scope: !6979)
!6981 = !DILocation(line: 1616, column: 7, scope: !6952)
!6982 = !DILocation(line: 1617, column: 5, scope: !6979)
!6983 = !DILocation(line: 1619, column: 24, scope: !6952)
!6984 = !DILocation(line: 1619, column: 10, scope: !6952)
!6985 = !DILocation(line: 1619, column: 8, scope: !6952)
!6986 = !DILocation(line: 1621, column: 7, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1621, column: 7)
!6988 = !DILocation(line: 1621, column: 24, scope: !6987)
!6989 = !DILocation(line: 1621, column: 7, scope: !6952)
!6990 = !DILocalVariable(name: "type", scope: !6991, file: !3, line: 1623, type: !1134)
!6991 = distinct !DILexicalBlock(scope: !6987, file: !3, line: 1622, column: 5)
!6992 = !DILocation(line: 1623, column: 12, scope: !6991)
!6993 = !DILocation(line: 1623, column: 39, scope: !6991)
!6994 = !DILocation(line: 1623, column: 19, scope: !6991)
!6995 = !DILocalVariable(name: "astep", scope: !6991, file: !3, line: 1624, type: !1134)
!6996 = !DILocation(line: 1624, column: 12, scope: !6991)
!6997 = !DILocation(line: 1626, column: 11, scope: !6998)
!6998 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 1626, column: 11)
!6999 = !DILocation(line: 1627, column: 4, scope: !6998)
!7000 = !DILocation(line: 1627, column: 7, scope: !6998)
!7001 = !DILocation(line: 1627, column: 35, scope: !6998)
!7002 = !DILocation(line: 1626, column: 11, scope: !6991)
!7003 = !DILocation(line: 1629, column: 18, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 1628, column: 2)
!7005 = !DILocation(line: 1629, column: 24, scope: !7004)
!7006 = !DILocation(line: 1629, column: 10, scope: !7004)
!7007 = !DILocation(line: 1629, column: 8, scope: !7004)
!7008 = !DILocation(line: 1630, column: 9, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !7004, file: !3, line: 1630, column: 8)
!7010 = !DILocation(line: 1630, column: 8, scope: !7004)
!7011 = !DILocation(line: 1631, column: 6, scope: !7009)
!7012 = !DILocation(line: 1633, column: 22, scope: !7004)
!7013 = !DILocation(line: 1633, column: 27, scope: !7004)
!7014 = !DILocation(line: 1633, column: 4, scope: !7004)
!7015 = !DILocation(line: 1633, column: 20, scope: !7004)
!7016 = !DILocation(line: 1634, column: 11, scope: !7004)
!7017 = !DILocation(line: 1634, column: 16, scope: !7004)
!7018 = !DILocation(line: 1634, column: 9, scope: !7004)
!7019 = !DILocation(line: 1635, column: 2, scope: !7004)
!7020 = !DILocation(line: 1636, column: 11, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 1636, column: 11)
!7022 = !DILocation(line: 1637, column: 4, scope: !7021)
!7023 = !DILocation(line: 1637, column: 7, scope: !7021)
!7024 = !DILocation(line: 1637, column: 36, scope: !7021)
!7025 = !DILocation(line: 1636, column: 11, scope: !6991)
!7026 = !DILocation(line: 1639, column: 18, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 1638, column: 2)
!7028 = !DILocation(line: 1639, column: 24, scope: !7027)
!7029 = !DILocation(line: 1639, column: 10, scope: !7027)
!7030 = !DILocation(line: 1639, column: 8, scope: !7027)
!7031 = !DILocation(line: 1640, column: 9, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 1640, column: 8)
!7033 = !DILocation(line: 1640, column: 8, scope: !7027)
!7034 = !DILocation(line: 1641, column: 6, scope: !7032)
!7035 = !DILocation(line: 1643, column: 23, scope: !7027)
!7036 = !DILocation(line: 1643, column: 28, scope: !7027)
!7037 = !DILocation(line: 1643, column: 4, scope: !7027)
!7038 = !DILocation(line: 1643, column: 21, scope: !7027)
!7039 = !DILocation(line: 1644, column: 12, scope: !7027)
!7040 = !DILocation(line: 1644, column: 17, scope: !7027)
!7041 = !DILocation(line: 1644, column: 10, scope: !7027)
!7042 = !DILocation(line: 1646, column: 8, scope: !7043)
!7043 = distinct !DILexicalBlock(scope: !7027, file: !3, line: 1646, column: 8)
!7044 = !DILocation(line: 1646, column: 8, scope: !7027)
!7045 = !DILocation(line: 1648, column: 12, scope: !7046)
!7046 = distinct !DILexicalBlock(scope: !7047, file: !3, line: 1648, column: 12)
!7047 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 1647, column: 6)
!7048 = !DILocation(line: 1648, column: 12, scope: !7047)
!7049 = !DILocation(line: 1649, column: 11, scope: !7046)
!7050 = !DILocation(line: 1649, column: 9, scope: !7046)
!7051 = !DILocation(line: 1649, column: 3, scope: !7046)
!7052 = !DILocation(line: 1651, column: 15, scope: !7047)
!7053 = !DILocation(line: 1651, column: 13, scope: !7047)
!7054 = !DILocation(line: 1652, column: 6, scope: !7047)
!7055 = !DILocation(line: 1653, column: 2, scope: !7027)
!7056 = !DILocation(line: 1655, column: 26, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 1655, column: 11)
!7058 = !DILocation(line: 1655, column: 11, scope: !7057)
!7059 = !DILocation(line: 1655, column: 11, scope: !6991)
!7060 = !DILocation(line: 1656, column: 2, scope: !7057)
!7061 = !DILocation(line: 1657, column: 33, scope: !6991)
!7062 = !DILocation(line: 1657, column: 39, scope: !6991)
!7063 = !DILocation(line: 1657, column: 14, scope: !6991)
!7064 = !DILocation(line: 1657, column: 12, scope: !6991)
!7065 = !DILocation(line: 1658, column: 5, scope: !6991)
!7066 = !DILocation(line: 1661, column: 37, scope: !7067)
!7067 = distinct !DILexicalBlock(scope: !6987, file: !3, line: 1660, column: 5)
!7068 = !DILocation(line: 1661, column: 23, scope: !7067)
!7069 = !DILocation(line: 1661, column: 35, scope: !7067)
!7070 = !DILocation(line: 1662, column: 30, scope: !7067)
!7071 = !DILocation(line: 1662, column: 23, scope: !7067)
!7072 = !DILocation(line: 1662, column: 28, scope: !7067)
!7073 = !DILocation(line: 1663, column: 45, scope: !7067)
!7074 = !DILocation(line: 1663, column: 30, scope: !7067)
!7075 = !DILocation(line: 1663, column: 23, scope: !7067)
!7076 = !DILocation(line: 1663, column: 28, scope: !7067)
!7077 = !DILocation(line: 1664, column: 50, scope: !7078)
!7078 = distinct !DILexicalBlock(scope: !7067, file: !3, line: 1664, column: 11)
!7079 = !DILocation(line: 1664, column: 12, scope: !7078)
!7080 = !DILocation(line: 1665, column: 4, scope: !7078)
!7081 = !DILocation(line: 1665, column: 38, scope: !7078)
!7082 = !DILocation(line: 1665, column: 7, scope: !7078)
!7083 = !DILocation(line: 1664, column: 11, scope: !7067)
!7084 = !DILocation(line: 1666, column: 2, scope: !7078)
!7085 = !DILocation(line: 1667, column: 30, scope: !7067)
!7086 = !DILocation(line: 1667, column: 12, scope: !7067)
!7087 = !DILocation(line: 1669, column: 7, scope: !7067)
!7088 = !DILocation(line: 1670, column: 7, scope: !7067)
!7089 = !DILocation(line: 1674, column: 36, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7067, file: !3, line: 1674, column: 11)
!7091 = !DILocation(line: 1674, column: 11, scope: !7090)
!7092 = !DILocation(line: 1674, column: 11, scope: !7067)
!7093 = !DILocation(line: 1675, column: 2, scope: !7090)
!7094 = !DILocation(line: 1682, column: 14, scope: !7067)
!7095 = !DILocation(line: 1682, column: 12, scope: !7067)
!7096 = !DILocation(line: 1686, column: 11, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !7067, file: !3, line: 1686, column: 11)
!7098 = !DILocation(line: 1686, column: 28, scope: !7097)
!7099 = !DILocation(line: 1686, column: 11, scope: !7067)
!7100 = !DILocalVariable(name: "ref", scope: !7101, file: !3, line: 1688, type: !1470)
!7101 = distinct !DILexicalBlock(scope: !7097, file: !3, line: 1687, column: 2)
!7102 = !DILocation(line: 1688, column: 10, scope: !7101)
!7103 = !DILocation(line: 1688, column: 17, scope: !7101)
!7104 = !DILocation(line: 1689, column: 4, scope: !7101)
!7105 = !DILocation(line: 1689, column: 33, scope: !7101)
!7106 = !DILocation(line: 1689, column: 32, scope: !7101)
!7107 = !DILocation(line: 1689, column: 11, scope: !7101)
!7108 = !DILocation(line: 1690, column: 13, scope: !7101)
!7109 = !DILocation(line: 1690, column: 10, scope: !7101)
!7110 = distinct !{!7110, !7104, !7108}
!7111 = !DILocation(line: 1691, column: 8, scope: !7112)
!7112 = distinct !DILexicalBlock(scope: !7101, file: !3, line: 1691, column: 8)
!7113 = !DILocation(line: 1691, column: 25, scope: !7112)
!7114 = !DILocation(line: 1691, column: 8, scope: !7101)
!7115 = !DILocalVariable(name: "tem", scope: !7116, file: !3, line: 1693, type: !1134)
!7116 = distinct !DILexicalBlock(scope: !7112, file: !3, line: 1692, column: 6)
!7117 = !DILocation(line: 1693, column: 13, scope: !7116)
!7118 = !DILocation(line: 1693, column: 45, scope: !7116)
!7119 = !DILocation(line: 1693, column: 19, scope: !7116)
!7120 = !DILocation(line: 1694, column: 12, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !7116, file: !3, line: 1694, column: 12)
!7122 = !DILocation(line: 1694, column: 12, scope: !7116)
!7123 = !DILocation(line: 1695, column: 10, scope: !7121)
!7124 = !DILocation(line: 1695, column: 4, scope: !7121)
!7125 = !DILocation(line: 1695, column: 8, scope: !7121)
!7126 = !DILocation(line: 1695, column: 3, scope: !7121)
!7127 = !DILocation(line: 1696, column: 6, scope: !7116)
!7128 = !DILocation(line: 1697, column: 2, scope: !7101)
!7129 = !DILocation(line: 1700, column: 19, scope: !6952)
!7130 = !DILocation(line: 1700, column: 25, scope: !6952)
!7131 = !DILocation(line: 1700, column: 9, scope: !6952)
!7132 = !DILocation(line: 1700, column: 7, scope: !6952)
!7133 = !DILocation(line: 1701, column: 15, scope: !6952)
!7134 = !DILocation(line: 1701, column: 21, scope: !6952)
!7135 = !DILocation(line: 1701, column: 27, scope: !6952)
!7136 = !DILocation(line: 1701, column: 32, scope: !6952)
!7137 = !DILocation(line: 1701, column: 3, scope: !6952)
!7138 = !DILocation(line: 1702, column: 3, scope: !6952)
!7139 = !DILabel(scope: !6952, name: "fail", file: !3, line: 1704)
!7140 = !DILocation(line: 1704, column: 1, scope: !6952)
!7141 = !DILocation(line: 1705, column: 19, scope: !6952)
!7142 = !DILocation(line: 1705, column: 41, scope: !6952)
!7143 = !DILocation(line: 1705, column: 3, scope: !6952)
!7144 = !DILocation(line: 1706, column: 1, scope: !6952)
!7145 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !5767, file: !5767, line: 910, type: !7146, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7146 = !DISubroutineType(types: !7147)
!7147 = !{!2547, !7148, !1436, !1006}
!7148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6413, size: 64)
!7149 = !DILocalVariable(name: "ptr", arg: 1, scope: !7145, file: !5767, line: 910, type: !7148)
!7150 = !DILocation(line: 910, column: 35, scope: !7145)
!7151 = !DILocalVariable(name: "phi", arg: 2, scope: !7145, file: !5767, line: 910, type: !1436)
!7152 = !DILocation(line: 910, column: 47, scope: !7145)
!7153 = !DILocalVariable(name: "flags", arg: 3, scope: !7145, file: !5767, line: 910, type: !1006)
!7154 = !DILocation(line: 910, column: 56, scope: !7145)
!7155 = !DILocalVariable(name: "phi_def", scope: !7145, file: !5767, line: 912, type: !1134)
!7156 = !DILocation(line: 912, column: 8, scope: !7145)
!7157 = !DILocation(line: 912, column: 37, scope: !7145)
!7158 = !DILocation(line: 912, column: 18, scope: !7145)
!7159 = !DILocalVariable(name: "comp", scope: !7145, file: !5767, line: 913, type: !1006)
!7160 = !DILocation(line: 913, column: 7, scope: !7145)
!7161 = !DILocation(line: 915, column: 28, scope: !7145)
!7162 = !DILocation(line: 915, column: 3, scope: !7145)
!7163 = !DILocation(line: 916, column: 3, scope: !7145)
!7164 = !DILocation(line: 916, column: 8, scope: !7145)
!7165 = !DILocation(line: 916, column: 13, scope: !7145)
!7166 = !DILocation(line: 918, column: 3, scope: !7145)
!7167 = !DILocation(line: 920, column: 26, scope: !7145)
!7168 = !DILocation(line: 920, column: 11, scope: !7145)
!7169 = !DILocation(line: 920, column: 8, scope: !7145)
!7170 = !DILocation(line: 923, column: 8, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7145, file: !5767, line: 923, column: 7)
!7172 = !DILocation(line: 923, column: 16, scope: !7171)
!7173 = !DILocation(line: 923, column: 14, scope: !7171)
!7174 = !DILocation(line: 923, column: 22, scope: !7171)
!7175 = !DILocation(line: 923, column: 7, scope: !7145)
!7176 = !DILocation(line: 925, column: 7, scope: !7177)
!7177 = distinct !DILexicalBlock(scope: !7171, file: !5767, line: 924, column: 5)
!7178 = !DILocation(line: 925, column: 12, scope: !7177)
!7179 = !DILocation(line: 925, column: 17, scope: !7177)
!7180 = !DILocation(line: 926, column: 7, scope: !7177)
!7181 = !DILocation(line: 929, column: 19, scope: !7145)
!7182 = !DILocation(line: 929, column: 3, scope: !7145)
!7183 = !DILocation(line: 929, column: 8, scope: !7145)
!7184 = !DILocation(line: 929, column: 17, scope: !7145)
!7185 = !DILocation(line: 930, column: 39, scope: !7145)
!7186 = !DILocation(line: 930, column: 18, scope: !7145)
!7187 = !DILocation(line: 930, column: 3, scope: !7145)
!7188 = !DILocation(line: 930, column: 8, scope: !7145)
!7189 = !DILocation(line: 930, column: 16, scope: !7145)
!7190 = !DILocation(line: 931, column: 3, scope: !7145)
!7191 = !DILocation(line: 931, column: 8, scope: !7145)
!7192 = !DILocation(line: 931, column: 18, scope: !7145)
!7193 = !DILocation(line: 932, column: 28, scope: !7145)
!7194 = !DILocation(line: 932, column: 10, scope: !7145)
!7195 = !DILocation(line: 932, column: 3, scope: !7145)
!7196 = !DILocation(line: 933, column: 1, scope: !7145)
!7197 = distinct !DISubprogram(name: "op_iter_init_use", scope: !5767, file: !5767, line: 768, type: !7146, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7198 = !DILocalVariable(name: "ptr", arg: 1, scope: !7197, file: !5767, line: 768, type: !7148)
!7199 = !DILocation(line: 768, column: 32, scope: !7197)
!7200 = !DILocalVariable(name: "stmt", arg: 2, scope: !7197, file: !5767, line: 768, type: !1436)
!7201 = !DILocation(line: 768, column: 44, scope: !7197)
!7202 = !DILocalVariable(name: "flags", arg: 3, scope: !7197, file: !5767, line: 768, type: !1006)
!7203 = !DILocation(line: 768, column: 54, scope: !7197)
!7204 = !DILocation(line: 770, column: 3, scope: !7197)
!7205 = !DILocation(line: 772, column: 17, scope: !7197)
!7206 = !DILocation(line: 772, column: 22, scope: !7197)
!7207 = !DILocation(line: 772, column: 28, scope: !7197)
!7208 = !DILocation(line: 772, column: 3, scope: !7197)
!7209 = !DILocation(line: 773, column: 3, scope: !7197)
!7210 = !DILocation(line: 773, column: 8, scope: !7197)
!7211 = !DILocation(line: 773, column: 18, scope: !7197)
!7212 = !DILocation(line: 774, column: 28, scope: !7197)
!7213 = !DILocation(line: 774, column: 10, scope: !7197)
!7214 = !DILocation(line: 774, column: 3, scope: !7197)
!7215 = distinct !DISubprogram(name: "op_iter_done", scope: !5767, file: !5767, line: 652, type: !7216, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7216 = !DISubroutineType(types: !7217)
!7217 = !{!136, !7218}
!7218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7219, size: 64)
!7219 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6413)
!7220 = !DILocalVariable(name: "ptr", arg: 1, scope: !7215, file: !5767, line: 652, type: !7218)
!7221 = !DILocation(line: 652, column: 34, scope: !7215)
!7222 = !DILocation(line: 654, column: 10, scope: !7215)
!7223 = !DILocation(line: 654, column: 15, scope: !7215)
!7224 = !DILocation(line: 654, column: 3, scope: !7215)
!7225 = distinct !DISubprogram(name: "op_iter_next_use", scope: !5767, file: !5767, line: 659, type: !7226, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7226 = !DISubroutineType(types: !7227)
!7227 = !{!2547, !7148}
!7228 = !DILocalVariable(name: "ptr", arg: 1, scope: !7225, file: !5767, line: 659, type: !7148)
!7229 = !DILocation(line: 659, column: 32, scope: !7225)
!7230 = !DILocalVariable(name: "use_p", scope: !7225, file: !5767, line: 661, type: !2547)
!7231 = !DILocation(line: 661, column: 17, scope: !7225)
!7232 = !DILocation(line: 665, column: 7, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7225, file: !5767, line: 665, column: 7)
!7234 = !DILocation(line: 665, column: 12, scope: !7233)
!7235 = !DILocation(line: 665, column: 7, scope: !7225)
!7236 = !DILocation(line: 667, column: 15, scope: !7237)
!7237 = distinct !DILexicalBlock(scope: !7233, file: !5767, line: 666, column: 5)
!7238 = !DILocation(line: 667, column: 13, scope: !7237)
!7239 = !DILocation(line: 668, column: 19, scope: !7237)
!7240 = !DILocation(line: 668, column: 24, scope: !7237)
!7241 = !DILocation(line: 668, column: 30, scope: !7237)
!7242 = !DILocation(line: 668, column: 7, scope: !7237)
!7243 = !DILocation(line: 668, column: 12, scope: !7237)
!7244 = !DILocation(line: 668, column: 17, scope: !7237)
!7245 = !DILocation(line: 669, column: 14, scope: !7237)
!7246 = !DILocation(line: 669, column: 7, scope: !7237)
!7247 = !DILocation(line: 671, column: 7, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7225, file: !5767, line: 671, column: 7)
!7249 = !DILocation(line: 671, column: 12, scope: !7248)
!7250 = !DILocation(line: 671, column: 20, scope: !7248)
!7251 = !DILocation(line: 671, column: 25, scope: !7248)
!7252 = !DILocation(line: 671, column: 18, scope: !7248)
!7253 = !DILocation(line: 671, column: 7, scope: !7225)
!7254 = !DILocation(line: 673, column: 14, scope: !7255)
!7255 = distinct !DILexicalBlock(scope: !7248, file: !5767, line: 672, column: 5)
!7256 = !DILocation(line: 673, column: 7, scope: !7255)
!7257 = !DILocation(line: 675, column: 3, scope: !7225)
!7258 = !DILocation(line: 675, column: 8, scope: !7225)
!7259 = !DILocation(line: 675, column: 13, scope: !7225)
!7260 = !DILocation(line: 676, column: 3, scope: !7225)
!7261 = !DILocation(line: 677, column: 1, scope: !7225)
!7262 = !DILocalVariable(name: "data", arg: 1, scope: !2611, file: !3, line: 1203, type: !2530)
!7263 = !DILocation(line: 1203, column: 44, scope: !2611)
!7264 = !DILocalVariable(name: "stmt", arg: 2, scope: !2611, file: !3, line: 1203, type: !1436)
!7265 = !DILocation(line: 1203, column: 57, scope: !2611)
!7266 = !DILocalVariable(name: "control_var", arg: 3, scope: !2611, file: !3, line: 1204, type: !2614)
!7267 = !DILocation(line: 1204, column: 17, scope: !2611)
!7268 = !DILocalVariable(name: "bound", arg: 4, scope: !2611, file: !3, line: 1204, type: !2614)
!7269 = !DILocation(line: 1204, column: 37, scope: !2611)
!7270 = !DILocalVariable(name: "iv_var", arg: 5, scope: !2611, file: !3, line: 1205, type: !2615)
!7271 = !DILocation(line: 1205, column: 22, scope: !2611)
!7272 = !DILocalVariable(name: "iv_bound", arg: 6, scope: !2611, file: !3, line: 1205, type: !2615)
!7273 = !DILocation(line: 1205, column: 42, scope: !2611)
!7274 = !DILocalVariable(name: "op0", scope: !2611, file: !3, line: 1210, type: !1470)
!7275 = !DILocation(line: 1210, column: 9, scope: !2611)
!7276 = !DILocalVariable(name: "op1", scope: !2611, file: !3, line: 1210, type: !1470)
!7277 = !DILocation(line: 1210, column: 23, scope: !2611)
!7278 = !DILocalVariable(name: "tmp_op", scope: !2611, file: !3, line: 1210, type: !1470)
!7279 = !DILocation(line: 1210, column: 37, scope: !2611)
!7280 = !DILocalVariable(name: "iv0", scope: !2611, file: !3, line: 1211, type: !2431)
!7281 = !DILocation(line: 1211, column: 14, scope: !2611)
!7282 = !DILocalVariable(name: "iv1", scope: !2611, file: !3, line: 1211, type: !2431)
!7283 = !DILocation(line: 1211, column: 32, scope: !2611)
!7284 = !DILocalVariable(name: "tmp_iv", scope: !2611, file: !3, line: 1211, type: !2431)
!7285 = !DILocation(line: 1211, column: 50, scope: !2611)
!7286 = !DILocalVariable(name: "ret", scope: !2611, file: !3, line: 1212, type: !136)
!7287 = !DILocation(line: 1212, column: 8, scope: !2611)
!7288 = !DILocation(line: 1214, column: 20, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1214, column: 7)
!7290 = !DILocation(line: 1214, column: 7, scope: !7289)
!7291 = !DILocation(line: 1214, column: 26, scope: !7289)
!7292 = !DILocation(line: 1214, column: 7, scope: !2611)
!7293 = !DILocation(line: 1216, column: 34, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7289, file: !3, line: 1215, column: 5)
!7295 = !DILocation(line: 1216, column: 13, scope: !7294)
!7296 = !DILocation(line: 1216, column: 11, scope: !7294)
!7297 = !DILocation(line: 1217, column: 34, scope: !7294)
!7298 = !DILocation(line: 1217, column: 13, scope: !7294)
!7299 = !DILocation(line: 1217, column: 11, scope: !7294)
!7300 = !DILocation(line: 1218, column: 5, scope: !7294)
!7301 = !DILocation(line: 1221, column: 37, scope: !7302)
!7302 = distinct !DILexicalBlock(scope: !7289, file: !3, line: 1220, column: 5)
!7303 = !DILocation(line: 1221, column: 13, scope: !7302)
!7304 = !DILocation(line: 1221, column: 11, scope: !7302)
!7305 = !DILocation(line: 1222, column: 37, scope: !7302)
!7306 = !DILocation(line: 1222, column: 13, scope: !7302)
!7307 = !DILocation(line: 1222, column: 11, scope: !7302)
!7308 = !DILocation(line: 1225, column: 10, scope: !2611)
!7309 = !DILocation(line: 1225, column: 8, scope: !2611)
!7310 = !DILocation(line: 1226, column: 19, scope: !2611)
!7311 = !DILocation(line: 1226, column: 17, scope: !2611)
!7312 = !DILocation(line: 1228, column: 7, scope: !7313)
!7313 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1228, column: 7)
!7314 = !DILocation(line: 1228, column: 24, scope: !7313)
!7315 = !DILocation(line: 1228, column: 7, scope: !2611)
!7316 = !DILocation(line: 1229, column: 19, scope: !7313)
!7317 = !DILocation(line: 1229, column: 26, scope: !7313)
!7318 = !DILocation(line: 1229, column: 25, scope: !7313)
!7319 = !DILocation(line: 1229, column: 11, scope: !7313)
!7320 = !DILocation(line: 1229, column: 9, scope: !7313)
!7321 = !DILocation(line: 1229, column: 5, scope: !7313)
!7322 = !DILocation(line: 1230, column: 7, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1230, column: 7)
!7324 = !DILocation(line: 1230, column: 24, scope: !7323)
!7325 = !DILocation(line: 1230, column: 7, scope: !2611)
!7326 = !DILocation(line: 1231, column: 19, scope: !7323)
!7327 = !DILocation(line: 1231, column: 26, scope: !7323)
!7328 = !DILocation(line: 1231, column: 25, scope: !7323)
!7329 = !DILocation(line: 1231, column: 11, scope: !7323)
!7330 = !DILocation(line: 1231, column: 9, scope: !7323)
!7331 = !DILocation(line: 1231, column: 5, scope: !7323)
!7332 = !DILocation(line: 1235, column: 8, scope: !7333)
!7333 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1235, column: 7)
!7334 = !DILocation(line: 1235, column: 12, scope: !7333)
!7335 = !DILocation(line: 1235, column: 16, scope: !7333)
!7336 = !DILocation(line: 1235, column: 7, scope: !2611)
!7337 = !DILocation(line: 1236, column: 5, scope: !7333)
!7338 = !DILocation(line: 1238, column: 22, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1238, column: 7)
!7340 = !DILocation(line: 1238, column: 27, scope: !7339)
!7341 = !DILocation(line: 1238, column: 7, scope: !7339)
!7342 = !DILocation(line: 1238, column: 7, scope: !2611)
!7343 = !DILocation(line: 1241, column: 16, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7339, file: !3, line: 1239, column: 5)
!7345 = !DILocation(line: 1241, column: 14, scope: !7344)
!7346 = !DILocation(line: 1241, column: 27, scope: !7344)
!7347 = !DILocation(line: 1241, column: 25, scope: !7344)
!7348 = !DILocation(line: 1241, column: 38, scope: !7344)
!7349 = !DILocation(line: 1241, column: 36, scope: !7344)
!7350 = !DILocation(line: 1242, column: 16, scope: !7344)
!7351 = !DILocation(line: 1242, column: 14, scope: !7344)
!7352 = !DILocation(line: 1242, column: 27, scope: !7344)
!7353 = !DILocation(line: 1242, column: 25, scope: !7344)
!7354 = !DILocation(line: 1242, column: 38, scope: !7344)
!7355 = !DILocation(line: 1242, column: 36, scope: !7344)
!7356 = !DILocation(line: 1243, column: 5, scope: !7344)
!7357 = !DILocation(line: 1244, column: 25, scope: !2611)
!7358 = !DILocation(line: 1244, column: 30, scope: !2611)
!7359 = !DILocation(line: 1244, column: 10, scope: !2611)
!7360 = !DILocation(line: 1244, column: 36, scope: !2611)
!7361 = !DILocation(line: 1244, column: 54, scope: !2611)
!7362 = !DILocation(line: 1244, column: 59, scope: !2611)
!7363 = !DILocation(line: 1244, column: 39, scope: !2611)
!7364 = !DILocation(line: 0, scope: !2611)
!7365 = !DILocation(line: 1244, column: 9, scope: !2611)
!7366 = !DILocation(line: 1244, column: 7, scope: !2611)
!7367 = !DILocation(line: 1244, column: 3, scope: !2611)
!7368 = !DILabel(scope: !2611, name: "end", file: !3, line: 1246)
!7369 = !DILocation(line: 1246, column: 1, scope: !2611)
!7370 = !DILocation(line: 1247, column: 7, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1247, column: 7)
!7372 = !DILocation(line: 1247, column: 7, scope: !2611)
!7373 = !DILocation(line: 1248, column: 20, scope: !7371)
!7374 = !DILocation(line: 1248, column: 6, scope: !7371)
!7375 = !DILocation(line: 1248, column: 18, scope: !7371)
!7376 = !DILocation(line: 1248, column: 5, scope: !7371)
!7377 = !DILocation(line: 1249, column: 7, scope: !7378)
!7378 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1249, column: 7)
!7379 = !DILocation(line: 1249, column: 7, scope: !2611)
!7380 = !DILocation(line: 1250, column: 15, scope: !7378)
!7381 = !DILocation(line: 1250, column: 6, scope: !7378)
!7382 = !DILocation(line: 1250, column: 13, scope: !7378)
!7383 = !DILocation(line: 1250, column: 5, scope: !7378)
!7384 = !DILocation(line: 1251, column: 7, scope: !7385)
!7385 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1251, column: 7)
!7386 = !DILocation(line: 1251, column: 7, scope: !2611)
!7387 = !DILocation(line: 1252, column: 14, scope: !7385)
!7388 = !DILocation(line: 1252, column: 6, scope: !7385)
!7389 = !DILocation(line: 1252, column: 12, scope: !7385)
!7390 = !DILocation(line: 1252, column: 5, scope: !7385)
!7391 = !DILocation(line: 1253, column: 7, scope: !7392)
!7392 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1253, column: 7)
!7393 = !DILocation(line: 1253, column: 7, scope: !2611)
!7394 = !DILocation(line: 1254, column: 17, scope: !7392)
!7395 = !DILocation(line: 1254, column: 6, scope: !7392)
!7396 = !DILocation(line: 1254, column: 15, scope: !7392)
!7397 = !DILocation(line: 1254, column: 5, scope: !7392)
!7398 = !DILocation(line: 1256, column: 10, scope: !2611)
!7399 = !DILocation(line: 1256, column: 3, scope: !2611)
!7400 = distinct !DISubprogram(name: "gimple_cond_lhs_ptr", scope: !574, file: !574, line: 2251, type: !6910, scopeLine: 2252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7401 = !DILocalVariable(name: "gs", arg: 1, scope: !7400, file: !574, line: 2251, type: !3158)
!7402 = !DILocation(line: 2251, column: 35, scope: !7400)
!7403 = !DILocation(line: 2254, column: 25, scope: !7400)
!7404 = !DILocation(line: 2254, column: 10, scope: !7400)
!7405 = !DILocation(line: 2254, column: 3, scope: !7400)
!7406 = distinct !DISubprogram(name: "gimple_cond_rhs_ptr", scope: !574, file: !574, line: 2281, type: !6910, scopeLine: 2282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7407 = !DILocalVariable(name: "gs", arg: 1, scope: !7406, file: !574, line: 2281, type: !3158)
!7408 = !DILocation(line: 2281, column: 35, scope: !7406)
!7409 = !DILocation(line: 2284, column: 25, scope: !7406)
!7410 = !DILocation(line: 2284, column: 10, scope: !7406)
!7411 = !DILocation(line: 2284, column: 3, scope: !7406)
!7412 = distinct !DISubprogram(name: "gimple_assign_rhs2_ptr", scope: !574, file: !574, line: 1774, type: !6910, scopeLine: 1775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7413 = !DILocalVariable(name: "gs", arg: 1, scope: !7412, file: !574, line: 1774, type: !3158)
!7414 = !DILocation(line: 1774, column: 38, scope: !7412)
!7415 = !DILocation(line: 1777, column: 25, scope: !7412)
!7416 = !DILocation(line: 1777, column: 10, scope: !7412)
!7417 = !DILocation(line: 1777, column: 3, scope: !7412)
!7418 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !574, file: !574, line: 1647, type: !7419, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7419 = !DISubroutineType(types: !7420)
!7420 = !{!1470, !3158, !6}
!7421 = !DILocalVariable(name: "gs", arg: 1, scope: !7418, file: !574, line: 1647, type: !3158)
!7422 = !DILocation(line: 1647, column: 29, scope: !7418)
!7423 = !DILocalVariable(name: "i", arg: 2, scope: !7418, file: !574, line: 1647, type: !6)
!7424 = !DILocation(line: 1647, column: 42, scope: !7418)
!7425 = !DILocation(line: 1649, column: 23, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7418, file: !574, line: 1649, column: 7)
!7427 = !DILocation(line: 1649, column: 7, scope: !7426)
!7428 = !DILocation(line: 1649, column: 7, scope: !7418)
!7429 = !DILocation(line: 1654, column: 26, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7426, file: !574, line: 1650, column: 5)
!7431 = !DILocation(line: 1654, column: 14, scope: !7430)
!7432 = !DILocation(line: 1654, column: 52, scope: !7430)
!7433 = !DILocation(line: 1654, column: 50, scope: !7430)
!7434 = !DILocation(line: 1654, column: 7, scope: !7430)
!7435 = !DILocation(line: 1657, column: 5, scope: !7426)
!7436 = !DILocation(line: 1658, column: 1, scope: !7418)
!7437 = distinct !DISubprogram(name: "gimple_expr_code", scope: !574, file: !574, line: 1438, type: !6924, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7438 = !DILocalVariable(name: "stmt", arg: 1, scope: !7437, file: !574, line: 1438, type: !3158)
!7439 = !DILocation(line: 1438, column: 32, scope: !7437)
!7440 = !DILocalVariable(name: "code", scope: !7437, file: !574, line: 1440, type: !573)
!7441 = !DILocation(line: 1440, column: 20, scope: !7437)
!7442 = !DILocation(line: 1440, column: 40, scope: !7437)
!7443 = !DILocation(line: 1440, column: 27, scope: !7437)
!7444 = !DILocation(line: 1441, column: 7, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7437, file: !574, line: 1441, column: 7)
!7446 = !DILocation(line: 1441, column: 12, scope: !7445)
!7447 = !DILocation(line: 1441, column: 29, scope: !7445)
!7448 = !DILocation(line: 1441, column: 32, scope: !7445)
!7449 = !DILocation(line: 1441, column: 37, scope: !7445)
!7450 = !DILocation(line: 1441, column: 7, scope: !7437)
!7451 = !DILocation(line: 1442, column: 29, scope: !7445)
!7452 = !DILocation(line: 1442, column: 35, scope: !7445)
!7453 = !DILocation(line: 1442, column: 42, scope: !7445)
!7454 = !DILocation(line: 1442, column: 5, scope: !7445)
!7455 = !DILocation(line: 1443, column: 12, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7445, file: !574, line: 1443, column: 12)
!7457 = !DILocation(line: 1443, column: 17, scope: !7456)
!7458 = !DILocation(line: 1443, column: 12, scope: !7445)
!7459 = !DILocation(line: 1444, column: 5, scope: !7456)
!7460 = !DILocation(line: 1446, column: 5, scope: !7456)
!7461 = !DILocation(line: 1448, column: 5, scope: !7437)
!7462 = !DILocation(line: 1450, column: 1, scope: !7437)
!7463 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !574, file: !574, line: 1727, type: !6170, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7464 = !DILocalVariable(name: "gs", arg: 1, scope: !7463, file: !574, line: 1727, type: !3158)
!7465 = !DILocation(line: 1727, column: 34, scope: !7463)
!7466 = !DILocation(line: 1730, column: 21, scope: !7463)
!7467 = !DILocation(line: 1730, column: 10, scope: !7463)
!7468 = !DILocation(line: 1730, column: 3, scope: !7463)
!7469 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !574, file: !574, line: 1477, type: !4085, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7470 = !DILocalVariable(name: "stmt", arg: 1, scope: !7469, file: !574, line: 1477, type: !3158)
!7471 = !DILocation(line: 1477, column: 39, scope: !7469)
!7472 = !DILocation(line: 1479, column: 27, scope: !7473)
!7473 = distinct !DILexicalBlock(scope: !7469, file: !574, line: 1479, column: 7)
!7474 = !DILocation(line: 1479, column: 7, scope: !7473)
!7475 = !DILocation(line: 1479, column: 7, scope: !7469)
!7476 = !DILocation(line: 1480, column: 12, scope: !7473)
!7477 = !DILocation(line: 1480, column: 18, scope: !7473)
!7478 = !DILocation(line: 1480, column: 25, scope: !7473)
!7479 = !DILocation(line: 1480, column: 5, scope: !7473)
!7480 = !DILocation(line: 1482, column: 5, scope: !7473)
!7481 = !DILocation(line: 1483, column: 1, scope: !7469)
!7482 = distinct !DISubprogram(name: "idx_find_step", scope: !3, file: !3, line: 1351, type: !3050, scopeLine: 1352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7483 = !DILocalVariable(name: "base", arg: 1, scope: !7482, file: !3, line: 1351, type: !1134)
!7484 = !DILocation(line: 1351, column: 21, scope: !7482)
!7485 = !DILocalVariable(name: "idx", arg: 2, scope: !7482, file: !3, line: 1351, type: !1470)
!7486 = !DILocation(line: 1351, column: 33, scope: !7482)
!7487 = !DILocalVariable(name: "data", arg: 3, scope: !7482, file: !3, line: 1351, type: !1007)
!7488 = !DILocation(line: 1351, column: 44, scope: !7482)
!7489 = !DILocalVariable(name: "dta", scope: !7482, file: !3, line: 1353, type: !2526)
!7490 = !DILocation(line: 1353, column: 27, scope: !7482)
!7491 = !DILocation(line: 1353, column: 60, scope: !7482)
!7492 = !DILocation(line: 1353, column: 33, scope: !7482)
!7493 = !DILocalVariable(name: "iv", scope: !7482, file: !3, line: 1354, type: !2431)
!7494 = !DILocation(line: 1354, column: 14, scope: !7482)
!7495 = !DILocalVariable(name: "step", scope: !7482, file: !3, line: 1355, type: !1134)
!7496 = !DILocation(line: 1355, column: 8, scope: !7482)
!7497 = !DILocalVariable(name: "iv_base", scope: !7482, file: !3, line: 1355, type: !1134)
!7498 = !DILocation(line: 1355, column: 14, scope: !7482)
!7499 = !DILocalVariable(name: "iv_step", scope: !7482, file: !3, line: 1355, type: !1134)
!7500 = !DILocation(line: 1355, column: 23, scope: !7482)
!7501 = !DILocalVariable(name: "lbound", scope: !7482, file: !3, line: 1355, type: !1134)
!7502 = !DILocation(line: 1355, column: 32, scope: !7482)
!7503 = !DILocalVariable(name: "off", scope: !7482, file: !3, line: 1355, type: !1134)
!7504 = !DILocation(line: 1355, column: 40, scope: !7482)
!7505 = !DILocalVariable(name: "loop", scope: !7482, file: !3, line: 1356, type: !1651)
!7506 = !DILocation(line: 1356, column: 16, scope: !7482)
!7507 = !DILocation(line: 1356, column: 23, scope: !7482)
!7508 = !DILocation(line: 1356, column: 28, scope: !7482)
!7509 = !DILocation(line: 1356, column: 41, scope: !7482)
!7510 = !DILocation(line: 1358, column: 7, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1358, column: 7)
!7512 = !DILocation(line: 1358, column: 24, scope: !7511)
!7513 = !DILocation(line: 1359, column: 7, scope: !7511)
!7514 = !DILocation(line: 1359, column: 10, scope: !7511)
!7515 = !DILocation(line: 1359, column: 27, scope: !7511)
!7516 = !DILocation(line: 1358, column: 7, scope: !7482)
!7517 = !DILocation(line: 1360, column: 5, scope: !7511)
!7518 = !DILocation(line: 1364, column: 7, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1364, column: 7)
!7520 = !DILocation(line: 1364, column: 24, scope: !7519)
!7521 = !DILocation(line: 1364, column: 7, scope: !7482)
!7522 = !DILocation(line: 1366, column: 41, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7519, file: !3, line: 1365, column: 5)
!7524 = !DILocation(line: 1366, column: 13, scope: !7523)
!7525 = !DILocation(line: 1366, column: 11, scope: !7523)
!7526 = !DILocation(line: 1367, column: 40, scope: !7523)
!7527 = !DILocation(line: 1367, column: 46, scope: !7523)
!7528 = !DILocation(line: 1367, column: 14, scope: !7523)
!7529 = !DILocation(line: 1367, column: 7, scope: !7523)
!7530 = !DILocation(line: 1374, column: 7, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1374, column: 7)
!7532 = !DILocation(line: 1374, column: 24, scope: !7531)
!7533 = !DILocation(line: 1374, column: 37, scope: !7531)
!7534 = !DILocation(line: 1374, column: 40, scope: !7531)
!7535 = !DILocation(line: 1374, column: 57, scope: !7531)
!7536 = !DILocation(line: 1374, column: 7, scope: !7482)
!7537 = !DILocation(line: 1377, column: 11, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 1377, column: 11)
!7539 = distinct !DILexicalBlock(scope: !7531, file: !3, line: 1375, column: 5)
!7540 = !DILocation(line: 1377, column: 28, scope: !7538)
!7541 = !DILocation(line: 1378, column: 4, scope: !7538)
!7542 = !DILocation(line: 1378, column: 34, scope: !7538)
!7543 = !DILocation(line: 1378, column: 40, scope: !7538)
!7544 = !DILocation(line: 1378, column: 8, scope: !7538)
!7545 = !DILocation(line: 1377, column: 11, scope: !7539)
!7546 = !DILocation(line: 1379, column: 2, scope: !7538)
!7547 = !DILocation(line: 1381, column: 38, scope: !7539)
!7548 = !DILocation(line: 1381, column: 14, scope: !7539)
!7549 = !DILocation(line: 1381, column: 12, scope: !7539)
!7550 = !DILocation(line: 1382, column: 37, scope: !7539)
!7551 = !DILocation(line: 1382, column: 16, scope: !7539)
!7552 = !DILocation(line: 1382, column: 14, scope: !7539)
!7553 = !DILocation(line: 1384, column: 38, scope: !7554)
!7554 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 1384, column: 11)
!7555 = !DILocation(line: 1384, column: 44, scope: !7554)
!7556 = !DILocation(line: 1384, column: 12, scope: !7554)
!7557 = !DILocation(line: 1385, column: 4, scope: !7554)
!7558 = !DILocation(line: 1385, column: 34, scope: !7554)
!7559 = !DILocation(line: 1385, column: 40, scope: !7554)
!7560 = !DILocation(line: 1385, column: 8, scope: !7554)
!7561 = !DILocation(line: 1384, column: 11, scope: !7539)
!7562 = !DILocation(line: 1386, column: 2, scope: !7554)
!7563 = !DILocation(line: 1387, column: 5, scope: !7539)
!7564 = !DILocation(line: 1389, column: 7, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1389, column: 7)
!7566 = !DILocation(line: 1389, column: 24, scope: !7565)
!7567 = !DILocation(line: 1389, column: 7, scope: !7482)
!7568 = !DILocation(line: 1390, column: 5, scope: !7565)
!7569 = !DILocation(line: 1392, column: 16, scope: !7482)
!7570 = !DILocation(line: 1392, column: 21, scope: !7482)
!7571 = !DILocation(line: 1392, column: 35, scope: !7482)
!7572 = !DILocation(line: 1392, column: 34, scope: !7482)
!7573 = !DILocation(line: 1392, column: 8, scope: !7482)
!7574 = !DILocation(line: 1392, column: 6, scope: !7482)
!7575 = !DILocation(line: 1393, column: 8, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1393, column: 7)
!7577 = !DILocation(line: 1393, column: 7, scope: !7482)
!7578 = !DILocation(line: 1394, column: 5, scope: !7576)
!7579 = !DILocation(line: 1399, column: 10, scope: !7482)
!7580 = !DILocation(line: 1399, column: 14, scope: !7482)
!7581 = !DILocation(line: 1399, column: 4, scope: !7482)
!7582 = !DILocation(line: 1399, column: 8, scope: !7482)
!7583 = !DILocation(line: 1401, column: 22, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1401, column: 7)
!7585 = !DILocation(line: 1401, column: 26, scope: !7584)
!7586 = !DILocation(line: 1401, column: 7, scope: !7584)
!7587 = !DILocation(line: 1401, column: 7, scope: !7482)
!7588 = !DILocation(line: 1402, column: 5, scope: !7584)
!7589 = !DILocation(line: 1404, column: 7, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1404, column: 7)
!7591 = !DILocation(line: 1404, column: 24, scope: !7590)
!7592 = !DILocation(line: 1404, column: 37, scope: !7590)
!7593 = !DILocation(line: 1404, column: 40, scope: !7590)
!7594 = !DILocation(line: 1404, column: 57, scope: !7590)
!7595 = !DILocation(line: 1404, column: 7, scope: !7482)
!7596 = !DILocation(line: 1406, column: 38, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 1405, column: 5)
!7598 = !DILocation(line: 1406, column: 14, scope: !7597)
!7599 = !DILocation(line: 1406, column: 12, scope: !7597)
!7600 = !DILocation(line: 1409, column: 11, scope: !7601)
!7601 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 1409, column: 11)
!7602 = !DILocation(line: 1409, column: 28, scope: !7601)
!7603 = !DILocation(line: 1409, column: 11, scope: !7597)
!7604 = !DILocation(line: 1410, column: 2, scope: !7601)
!7605 = !DILocation(line: 1411, column: 5, scope: !7597)
!7606 = !DILocation(line: 1414, column: 27, scope: !7590)
!7607 = !DILocation(line: 1414, column: 12, scope: !7590)
!7608 = !DILocation(line: 1414, column: 10, scope: !7590)
!7609 = !DILocation(line: 1416, column: 13, scope: !7482)
!7610 = !DILocation(line: 1416, column: 17, scope: !7482)
!7611 = !DILocation(line: 1416, column: 11, scope: !7482)
!7612 = !DILocation(line: 1417, column: 13, scope: !7482)
!7613 = !DILocation(line: 1417, column: 17, scope: !7482)
!7614 = !DILocation(line: 1417, column: 11, scope: !7482)
!7615 = !DILocation(line: 1418, column: 29, scope: !7616)
!7616 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1418, column: 7)
!7617 = !DILocation(line: 1418, column: 34, scope: !7616)
!7618 = !DILocation(line: 1418, column: 47, scope: !7616)
!7619 = !DILocation(line: 1419, column: 8, scope: !7616)
!7620 = !DILocation(line: 1419, column: 38, scope: !7616)
!7621 = !DILocation(line: 1419, column: 43, scope: !7616)
!7622 = !DILocation(line: 1418, column: 8, scope: !7616)
!7623 = !DILocation(line: 1418, column: 7, scope: !7482)
!7624 = !DILocation(line: 1423, column: 7, scope: !7625)
!7625 = distinct !DILexicalBlock(scope: !7616, file: !3, line: 1421, column: 5)
!7626 = !DILocation(line: 1426, column: 10, scope: !7482)
!7627 = !DILocation(line: 1426, column: 8, scope: !7482)
!7628 = !DILocation(line: 1427, column: 15, scope: !7482)
!7629 = !DILocation(line: 1427, column: 3, scope: !7482)
!7630 = !DILocation(line: 1427, column: 8, scope: !7482)
!7631 = !DILocation(line: 1427, column: 13, scope: !7482)
!7632 = !DILocation(line: 1429, column: 3, scope: !7482)
!7633 = !DILocation(line: 1430, column: 1, scope: !7482)
!7634 = distinct !DISubprogram(name: "may_be_nonaddressable_p", scope: !3, file: !3, line: 1562, type: !2991, scopeLine: 1563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7635 = !DILocalVariable(name: "expr", arg: 1, scope: !7634, file: !3, line: 1562, type: !1134)
!7636 = !DILocation(line: 1562, column: 31, scope: !7634)
!7637 = !DILocation(line: 1564, column: 11, scope: !7634)
!7638 = !DILocation(line: 1564, column: 3, scope: !7634)
!7639 = !DILocation(line: 1569, column: 7, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !7634, file: !3, line: 1565, column: 5)
!7641 = !DILocation(line: 1572, column: 14, scope: !7640)
!7642 = !DILocation(line: 1573, column: 7, scope: !7640)
!7643 = !DILocation(line: 1573, column: 35, scope: !7640)
!7644 = !DILocation(line: 1573, column: 10, scope: !7640)
!7645 = !DILocation(line: 1572, column: 7, scope: !7640)
!7646 = !DILocation(line: 1580, column: 26, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 1580, column: 11)
!7648 = !DILocation(line: 1580, column: 11, scope: !7647)
!7649 = !DILocation(line: 1581, column: 4, scope: !7647)
!7650 = !DILocation(line: 1581, column: 31, scope: !7647)
!7651 = !DILocation(line: 1581, column: 8, scope: !7647)
!7652 = !DILocation(line: 1580, column: 11, scope: !7640)
!7653 = !DILocation(line: 1582, column: 2, scope: !7647)
!7654 = !DILocation(line: 1581, column: 53, scope: !7647)
!7655 = !DILocation(line: 1588, column: 39, scope: !7640)
!7656 = !DILocation(line: 1588, column: 14, scope: !7640)
!7657 = !DILocation(line: 1588, column: 7, scope: !7640)
!7658 = !DILocation(line: 1591, column: 7, scope: !7640)
!7659 = !DILocation(line: 1594, column: 7, scope: !7640)
!7660 = !DILocation(line: 1597, column: 3, scope: !7634)
!7661 = !DILocation(line: 1598, column: 1, scope: !7634)
!7662 = distinct !DISubprogram(name: "handled_component_p", scope: !160, file: !160, line: 4551, type: !7663, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7663 = !DISubroutineType(types: !7664)
!7664 = !{!136, !3168}
!7665 = !DILocalVariable(name: "t", arg: 1, scope: !7662, file: !160, line: 4551, type: !3168)
!7666 = !DILocation(line: 4551, column: 33, scope: !7662)
!7667 = !DILocation(line: 4553, column: 11, scope: !7662)
!7668 = !DILocation(line: 4553, column: 3, scope: !7662)
!7669 = !DILocation(line: 4562, column: 7, scope: !7670)
!7670 = distinct !DILexicalBlock(scope: !7662, file: !160, line: 4554, column: 5)
!7671 = !DILocation(line: 4565, column: 7, scope: !7670)
!7672 = !DILocation(line: 4567, column: 1, scope: !7662)
!7673 = distinct !DISubprogram(name: "idx_record_use", scope: !3, file: !3, line: 1436, type: !3050, scopeLine: 1438, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7674 = !DILocalVariable(name: "base", arg: 1, scope: !7673, file: !3, line: 1436, type: !1134)
!7675 = !DILocation(line: 1436, column: 22, scope: !7673)
!7676 = !DILocalVariable(name: "idx", arg: 2, scope: !7673, file: !3, line: 1436, type: !1470)
!7677 = !DILocation(line: 1436, column: 34, scope: !7673)
!7678 = !DILocalVariable(name: "vdata", arg: 3, scope: !7673, file: !3, line: 1437, type: !1007)
!7679 = !DILocation(line: 1437, column: 9, scope: !7673)
!7680 = !DILocalVariable(name: "data", scope: !7673, file: !3, line: 1439, type: !2530)
!7681 = !DILocation(line: 1439, column: 23, scope: !7673)
!7682 = !DILocation(line: 1439, column: 53, scope: !7673)
!7683 = !DILocation(line: 1439, column: 30, scope: !7673)
!7684 = !DILocation(line: 1440, column: 29, scope: !7673)
!7685 = !DILocation(line: 1440, column: 36, scope: !7673)
!7686 = !DILocation(line: 1440, column: 35, scope: !7673)
!7687 = !DILocation(line: 1440, column: 3, scope: !7673)
!7688 = !DILocation(line: 1441, column: 7, scope: !7689)
!7689 = distinct !DILexicalBlock(scope: !7673, file: !3, line: 1441, column: 7)
!7690 = !DILocation(line: 1441, column: 24, scope: !7689)
!7691 = !DILocation(line: 1441, column: 37, scope: !7689)
!7692 = !DILocation(line: 1441, column: 40, scope: !7689)
!7693 = !DILocation(line: 1441, column: 57, scope: !7689)
!7694 = !DILocation(line: 1441, column: 7, scope: !7673)
!7695 = !DILocation(line: 1443, column: 33, scope: !7696)
!7696 = distinct !DILexicalBlock(scope: !7689, file: !3, line: 1442, column: 5)
!7697 = !DILocation(line: 1443, column: 63, scope: !7696)
!7698 = !DILocation(line: 1443, column: 39, scope: !7696)
!7699 = !DILocation(line: 1443, column: 7, scope: !7696)
!7700 = !DILocation(line: 1444, column: 33, scope: !7696)
!7701 = !DILocation(line: 1444, column: 60, scope: !7696)
!7702 = !DILocation(line: 1444, column: 39, scope: !7696)
!7703 = !DILocation(line: 1444, column: 7, scope: !7696)
!7704 = !DILocation(line: 1445, column: 5, scope: !7696)
!7705 = !DILocation(line: 1446, column: 3, scope: !7673)
!7706 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !574, file: !574, line: 1283, type: !4085, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7707 = !DILocalVariable(name: "g", arg: 1, scope: !7706, file: !574, line: 1283, type: !3158)
!7708 = !DILocation(line: 1283, column: 34, scope: !7706)
!7709 = !DILocation(line: 1285, column: 23, scope: !7706)
!7710 = !DILocation(line: 1285, column: 10, scope: !7706)
!7711 = !DILocation(line: 1285, column: 26, scope: !7706)
!7712 = !DILocation(line: 1285, column: 43, scope: !7706)
!7713 = !DILocation(line: 1285, column: 59, scope: !7706)
!7714 = !DILocation(line: 1285, column: 46, scope: !7706)
!7715 = !DILocation(line: 1285, column: 62, scope: !7706)
!7716 = !DILocation(line: 0, scope: !7706)
!7717 = !DILocation(line: 1285, column: 3, scope: !7706)
!7718 = distinct !DISubprogram(name: "gimple_phi_result", scope: !574, file: !574, line: 3071, type: !6170, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7719 = !DILocalVariable(name: "gs", arg: 1, scope: !7718, file: !574, line: 3071, type: !3158)
!7720 = !DILocation(line: 3071, column: 33, scope: !7718)
!7721 = !DILocation(line: 3074, column: 10, scope: !7718)
!7722 = !DILocation(line: 3074, column: 14, scope: !7718)
!7723 = !DILocation(line: 3074, column: 25, scope: !7718)
!7724 = !DILocation(line: 3074, column: 3, scope: !7718)
!7725 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !5767, file: !5767, line: 729, type: !7726, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7726 = !DISubroutineType(types: !7727)
!7727 = !{null, !7148}
!7728 = !DILocalVariable(name: "ptr", arg: 1, scope: !7725, file: !5767, line: 729, type: !7148)
!7729 = !DILocation(line: 729, column: 39, scope: !7725)
!7730 = !DILocation(line: 731, column: 3, scope: !7725)
!7731 = !DILocation(line: 731, column: 8, scope: !7725)
!7732 = !DILocation(line: 731, column: 13, scope: !7725)
!7733 = !DILocation(line: 732, column: 3, scope: !7725)
!7734 = !DILocation(line: 732, column: 8, scope: !7725)
!7735 = !DILocation(line: 732, column: 13, scope: !7725)
!7736 = !DILocation(line: 733, column: 3, scope: !7725)
!7737 = !DILocation(line: 733, column: 8, scope: !7725)
!7738 = !DILocation(line: 733, column: 18, scope: !7725)
!7739 = !DILocation(line: 734, column: 3, scope: !7725)
!7740 = !DILocation(line: 734, column: 8, scope: !7725)
!7741 = !DILocation(line: 734, column: 14, scope: !7725)
!7742 = !DILocation(line: 735, column: 3, scope: !7725)
!7743 = !DILocation(line: 735, column: 8, scope: !7725)
!7744 = !DILocation(line: 735, column: 16, scope: !7725)
!7745 = !DILocation(line: 736, column: 3, scope: !7725)
!7746 = !DILocation(line: 736, column: 8, scope: !7725)
!7747 = !DILocation(line: 736, column: 17, scope: !7725)
!7748 = !DILocation(line: 737, column: 3, scope: !7725)
!7749 = !DILocation(line: 737, column: 8, scope: !7725)
!7750 = !DILocation(line: 737, column: 13, scope: !7725)
!7751 = !DILocation(line: 738, column: 1, scope: !7725)
!7752 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !574, file: !574, line: 3061, type: !3227, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7753 = !DILocalVariable(name: "gs", arg: 1, scope: !7752, file: !574, line: 3061, type: !3158)
!7754 = !DILocation(line: 3061, column: 35, scope: !7752)
!7755 = !DILocation(line: 3064, column: 10, scope: !7752)
!7756 = !DILocation(line: 3064, column: 14, scope: !7752)
!7757 = !DILocation(line: 3064, column: 25, scope: !7752)
!7758 = !DILocation(line: 3064, column: 3, scope: !7752)
!7759 = distinct !DISubprogram(name: "op_iter_init", scope: !5767, file: !5767, line: 742, type: !7760, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7760 = !DISubroutineType(types: !7761)
!7761 = !{null, !7148, !1436, !1006}
!7762 = !DILocalVariable(name: "ptr", arg: 1, scope: !7759, file: !5767, line: 742, type: !7148)
!7763 = !DILocation(line: 742, column: 28, scope: !7759)
!7764 = !DILocalVariable(name: "stmt", arg: 2, scope: !7759, file: !5767, line: 742, type: !1436)
!7765 = !DILocation(line: 742, column: 40, scope: !7759)
!7766 = !DILocalVariable(name: "flags", arg: 3, scope: !7759, file: !5767, line: 742, type: !1006)
!7767 = !DILocation(line: 742, column: 50, scope: !7759)
!7768 = !DILocation(line: 746, column: 3, scope: !7759)
!7769 = !DILocation(line: 748, column: 16, scope: !7759)
!7770 = !DILocation(line: 748, column: 22, scope: !7759)
!7771 = !DILocation(line: 748, column: 15, scope: !7759)
!7772 = !DILocation(line: 748, column: 68, scope: !7759)
!7773 = !DILocation(line: 748, column: 52, scope: !7759)
!7774 = !DILocation(line: 748, column: 3, scope: !7759)
!7775 = !DILocation(line: 748, column: 8, scope: !7759)
!7776 = !DILocation(line: 748, column: 13, scope: !7759)
!7777 = !DILocation(line: 749, column: 9, scope: !7778)
!7778 = distinct !DILexicalBlock(scope: !7759, file: !5767, line: 749, column: 7)
!7779 = !DILocation(line: 749, column: 15, scope: !7778)
!7780 = !DILocation(line: 750, column: 7, scope: !7778)
!7781 = !DILocation(line: 750, column: 10, scope: !7778)
!7782 = !DILocation(line: 750, column: 15, scope: !7778)
!7783 = !DILocation(line: 751, column: 7, scope: !7778)
!7784 = !DILocation(line: 751, column: 23, scope: !7778)
!7785 = !DILocation(line: 751, column: 10, scope: !7778)
!7786 = !DILocation(line: 751, column: 29, scope: !7778)
!7787 = !DILocation(line: 749, column: 7, scope: !7759)
!7788 = !DILocation(line: 752, column: 17, scope: !7778)
!7789 = !DILocation(line: 752, column: 22, scope: !7778)
!7790 = !DILocation(line: 752, column: 28, scope: !7778)
!7791 = !DILocation(line: 752, column: 5, scope: !7778)
!7792 = !DILocation(line: 752, column: 10, scope: !7778)
!7793 = !DILocation(line: 752, column: 15, scope: !7778)
!7794 = !DILocation(line: 753, column: 16, scope: !7759)
!7795 = !DILocation(line: 753, column: 22, scope: !7759)
!7796 = !DILocation(line: 753, column: 15, scope: !7759)
!7797 = !DILocation(line: 753, column: 68, scope: !7759)
!7798 = !DILocation(line: 753, column: 52, scope: !7759)
!7799 = !DILocation(line: 753, column: 3, scope: !7759)
!7800 = !DILocation(line: 753, column: 8, scope: !7759)
!7801 = !DILocation(line: 753, column: 13, scope: !7759)
!7802 = !DILocation(line: 754, column: 9, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7759, file: !5767, line: 754, column: 7)
!7804 = !DILocation(line: 754, column: 15, scope: !7803)
!7805 = !DILocation(line: 755, column: 7, scope: !7803)
!7806 = !DILocation(line: 755, column: 10, scope: !7803)
!7807 = !DILocation(line: 755, column: 15, scope: !7803)
!7808 = !DILocation(line: 756, column: 7, scope: !7803)
!7809 = !DILocation(line: 756, column: 23, scope: !7803)
!7810 = !DILocation(line: 756, column: 10, scope: !7803)
!7811 = !DILocation(line: 756, column: 29, scope: !7803)
!7812 = !DILocation(line: 754, column: 7, scope: !7759)
!7813 = !DILocation(line: 757, column: 17, scope: !7803)
!7814 = !DILocation(line: 757, column: 22, scope: !7803)
!7815 = !DILocation(line: 757, column: 28, scope: !7803)
!7816 = !DILocation(line: 757, column: 5, scope: !7803)
!7817 = !DILocation(line: 757, column: 10, scope: !7803)
!7818 = !DILocation(line: 757, column: 15, scope: !7803)
!7819 = !DILocation(line: 758, column: 3, scope: !7759)
!7820 = !DILocation(line: 758, column: 8, scope: !7759)
!7821 = !DILocation(line: 758, column: 13, scope: !7759)
!7822 = !DILocation(line: 760, column: 3, scope: !7759)
!7823 = !DILocation(line: 760, column: 8, scope: !7759)
!7824 = !DILocation(line: 760, column: 14, scope: !7759)
!7825 = !DILocation(line: 761, column: 3, scope: !7759)
!7826 = !DILocation(line: 761, column: 8, scope: !7759)
!7827 = !DILocation(line: 761, column: 16, scope: !7759)
!7828 = !DILocation(line: 762, column: 3, scope: !7759)
!7829 = !DILocation(line: 762, column: 8, scope: !7759)
!7830 = !DILocation(line: 762, column: 17, scope: !7759)
!7831 = !DILocation(line: 763, column: 1, scope: !7759)
!7832 = distinct !DISubprogram(name: "gimple_def_ops", scope: !574, file: !574, line: 1292, type: !7833, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7833 = !DISubroutineType(types: !7834)
!7834 = !{!1465, !3158}
!7835 = !DILocalVariable(name: "g", arg: 1, scope: !7832, file: !574, line: 1292, type: !3158)
!7836 = !DILocation(line: 1292, column: 30, scope: !7832)
!7837 = !DILocation(line: 1294, column: 24, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7832, file: !574, line: 1294, column: 7)
!7839 = !DILocation(line: 1294, column: 8, scope: !7838)
!7840 = !DILocation(line: 1294, column: 7, scope: !7832)
!7841 = !DILocation(line: 1295, column: 5, scope: !7838)
!7842 = !DILocation(line: 1296, column: 10, scope: !7832)
!7843 = !DILocation(line: 1296, column: 13, scope: !7832)
!7844 = !DILocation(line: 1296, column: 19, scope: !7832)
!7845 = !DILocation(line: 1296, column: 26, scope: !7832)
!7846 = !DILocation(line: 1296, column: 3, scope: !7832)
!7847 = !DILocation(line: 1297, column: 1, scope: !7832)
!7848 = distinct !DISubprogram(name: "gimple_vdef", scope: !574, file: !574, line: 1375, type: !6170, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7849 = !DILocalVariable(name: "g", arg: 1, scope: !7848, file: !574, line: 1375, type: !3158)
!7850 = !DILocation(line: 1375, column: 27, scope: !7848)
!7851 = !DILocation(line: 1377, column: 28, scope: !7852)
!7852 = distinct !DILexicalBlock(scope: !7848, file: !574, line: 1377, column: 7)
!7853 = !DILocation(line: 1377, column: 8, scope: !7852)
!7854 = !DILocation(line: 1377, column: 7, scope: !7848)
!7855 = !DILocation(line: 1378, column: 5, scope: !7852)
!7856 = !DILocation(line: 1379, column: 10, scope: !7848)
!7857 = !DILocation(line: 1379, column: 13, scope: !7848)
!7858 = !DILocation(line: 1379, column: 23, scope: !7848)
!7859 = !DILocation(line: 1379, column: 3, scope: !7848)
!7860 = !DILocation(line: 1380, column: 1, scope: !7848)
!7861 = distinct !DISubprogram(name: "gimple_use_ops", scope: !574, file: !574, line: 1313, type: !7862, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7862 = !DISubroutineType(types: !7863)
!7863 = !{!1472, !3158}
!7864 = !DILocalVariable(name: "g", arg: 1, scope: !7861, file: !574, line: 1313, type: !3158)
!7865 = !DILocation(line: 1313, column: 30, scope: !7861)
!7866 = !DILocation(line: 1315, column: 24, scope: !7867)
!7867 = distinct !DILexicalBlock(scope: !7861, file: !574, line: 1315, column: 7)
!7868 = !DILocation(line: 1315, column: 8, scope: !7867)
!7869 = !DILocation(line: 1315, column: 7, scope: !7861)
!7870 = !DILocation(line: 1316, column: 5, scope: !7867)
!7871 = !DILocation(line: 1317, column: 10, scope: !7861)
!7872 = !DILocation(line: 1317, column: 13, scope: !7861)
!7873 = !DILocation(line: 1317, column: 19, scope: !7861)
!7874 = !DILocation(line: 1317, column: 26, scope: !7861)
!7875 = !DILocation(line: 1317, column: 3, scope: !7861)
!7876 = !DILocation(line: 1318, column: 1, scope: !7861)
!7877 = distinct !DISubprogram(name: "gimple_vuse", scope: !574, file: !574, line: 1365, type: !6170, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7878 = !DILocalVariable(name: "g", arg: 1, scope: !7877, file: !574, line: 1365, type: !3158)
!7879 = !DILocation(line: 1365, column: 27, scope: !7877)
!7880 = !DILocation(line: 1367, column: 28, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7877, file: !574, line: 1367, column: 7)
!7882 = !DILocation(line: 1367, column: 8, scope: !7881)
!7883 = !DILocation(line: 1367, column: 7, scope: !7877)
!7884 = !DILocation(line: 1368, column: 5, scope: !7881)
!7885 = !DILocation(line: 1369, column: 10, scope: !7877)
!7886 = !DILocation(line: 1369, column: 13, scope: !7877)
!7887 = !DILocation(line: 1369, column: 23, scope: !7877)
!7888 = !DILocation(line: 1369, column: 3, scope: !7877)
!7889 = !DILocation(line: 1370, column: 1, scope: !7877)
!7890 = distinct !DISubprogram(name: "add_standard_iv_candidates", scope: !3, file: !3, line: 2305, type: !3665, scopeLine: 2306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7891 = !DILocalVariable(name: "data", arg: 1, scope: !7890, file: !3, line: 2305, type: !2530)
!7892 = !DILocation(line: 2305, column: 49, scope: !7890)
!7893 = !DILocation(line: 2307, column: 40, scope: !7890)
!7894 = !DILocation(line: 2307, column: 3, scope: !7890)
!7895 = !DILocation(line: 2312, column: 1, scope: !7890)
!7896 = distinct !DISubprogram(name: "add_old_ivs_candidates", scope: !3, file: !3, line: 2350, type: !3665, scopeLine: 2351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7897 = !DILocalVariable(name: "data", arg: 1, scope: !7896, file: !3, line: 2350, type: !2530)
!7898 = !DILocation(line: 2350, column: 45, scope: !7896)
!7899 = !DILocalVariable(name: "i", scope: !7896, file: !3, line: 2352, type: !6)
!7900 = !DILocation(line: 2352, column: 12, scope: !7896)
!7901 = !DILocalVariable(name: "iv", scope: !7896, file: !3, line: 2353, type: !2431)
!7902 = !DILocation(line: 2353, column: 14, scope: !7896)
!7903 = !DILocalVariable(name: "bi", scope: !7896, file: !3, line: 2354, type: !4257)
!7904 = !DILocation(line: 2354, column: 19, scope: !7896)
!7905 = !DILocation(line: 2356, column: 3, scope: !7906)
!7906 = distinct !DILexicalBlock(scope: !7896, file: !3, line: 2356, column: 3)
!7907 = !DILocation(line: 2356, column: 3, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7906, file: !3, line: 2356, column: 3)
!7909 = !DILocation(line: 2358, column: 22, scope: !7910)
!7910 = distinct !DILexicalBlock(scope: !7908, file: !3, line: 2357, column: 5)
!7911 = !DILocation(line: 2358, column: 28, scope: !7910)
!7912 = !DILocation(line: 2358, column: 12, scope: !7910)
!7913 = !DILocation(line: 2358, column: 32, scope: !7910)
!7914 = !DILocation(line: 2358, column: 10, scope: !7910)
!7915 = !DILocation(line: 2359, column: 11, scope: !7916)
!7916 = distinct !DILexicalBlock(scope: !7910, file: !3, line: 2359, column: 11)
!7917 = !DILocation(line: 2359, column: 14, scope: !7916)
!7918 = !DILocation(line: 2359, column: 17, scope: !7916)
!7919 = !DILocation(line: 2359, column: 21, scope: !7916)
!7920 = !DILocation(line: 2359, column: 27, scope: !7916)
!7921 = !DILocation(line: 2359, column: 46, scope: !7916)
!7922 = !DILocation(line: 2359, column: 50, scope: !7916)
!7923 = !DILocation(line: 2359, column: 31, scope: !7916)
!7924 = !DILocation(line: 2359, column: 11, scope: !7910)
!7925 = !DILocation(line: 2360, column: 25, scope: !7916)
!7926 = !DILocation(line: 2360, column: 31, scope: !7916)
!7927 = !DILocation(line: 2360, column: 2, scope: !7916)
!7928 = !DILocation(line: 2361, column: 5, scope: !7910)
!7929 = distinct !{!7929, !7905, !7930}
!7930 = !DILocation(line: 2361, column: 5, scope: !7906)
!7931 = !DILocation(line: 2362, column: 1, scope: !7896)
!7932 = distinct !DISubprogram(name: "add_derived_ivs_candidates", scope: !3, file: !3, line: 2396, type: !3665, scopeLine: 2397, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7933 = !DILocalVariable(name: "data", arg: 1, scope: !7932, file: !3, line: 2396, type: !2530)
!7934 = !DILocation(line: 2396, column: 49, scope: !7932)
!7935 = !DILocalVariable(name: "i", scope: !7932, file: !3, line: 2398, type: !6)
!7936 = !DILocation(line: 2398, column: 12, scope: !7932)
!7937 = !DILocation(line: 2400, column: 10, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 2400, column: 3)
!7939 = !DILocation(line: 2400, column: 8, scope: !7938)
!7940 = !DILocation(line: 2400, column: 15, scope: !7941)
!7941 = distinct !DILexicalBlock(scope: !7938, file: !3, line: 2400, column: 3)
!7942 = !DILocation(line: 2400, column: 30, scope: !7941)
!7943 = !DILocation(line: 2400, column: 19, scope: !7941)
!7944 = !DILocation(line: 2400, column: 17, scope: !7941)
!7945 = !DILocation(line: 2400, column: 3, scope: !7938)
!7946 = !DILocalVariable(name: "use", scope: !7947, file: !3, line: 2402, type: !2457)
!7947 = distinct !DILexicalBlock(scope: !7941, file: !3, line: 2401, column: 5)
!7948 = !DILocation(line: 2402, column: 22, scope: !7947)
!7949 = !DILocation(line: 2402, column: 36, scope: !7947)
!7950 = !DILocation(line: 2402, column: 42, scope: !7947)
!7951 = !DILocation(line: 2402, column: 28, scope: !7947)
!7952 = !DILocation(line: 2404, column: 12, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 2404, column: 11)
!7954 = !DILocation(line: 2404, column: 11, scope: !7947)
!7955 = !DILocation(line: 2405, column: 2, scope: !7953)
!7956 = !DILocation(line: 2407, column: 15, scope: !7947)
!7957 = !DILocation(line: 2407, column: 20, scope: !7947)
!7958 = !DILocation(line: 2407, column: 7, scope: !7947)
!7959 = !DILocation(line: 2413, column: 29, scope: !7960)
!7960 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 2408, column: 2)
!7961 = !DILocation(line: 2413, column: 35, scope: !7960)
!7962 = !DILocation(line: 2413, column: 40, scope: !7960)
!7963 = !DILocation(line: 2413, column: 44, scope: !7960)
!7964 = !DILocation(line: 2413, column: 4, scope: !7960)
!7965 = !DILocation(line: 2414, column: 4, scope: !7960)
!7966 = !DILocation(line: 2417, column: 4, scope: !7960)
!7967 = !DILocation(line: 2418, column: 2, scope: !7960)
!7968 = !DILocation(line: 2419, column: 5, scope: !7947)
!7969 = !DILocation(line: 2400, column: 38, scope: !7941)
!7970 = !DILocation(line: 2400, column: 3, scope: !7941)
!7971 = distinct !{!7971, !7945, !7972}
!7972 = !DILocation(line: 2419, column: 5, scope: !7938)
!7973 = !DILocation(line: 2420, column: 1, scope: !7932)
!7974 = distinct !DISubprogram(name: "set_autoinc_for_original_candidates", scope: !3, file: !3, line: 4215, type: !3665, scopeLine: 4216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!7975 = !DILocalVariable(name: "data", arg: 1, scope: !7974, file: !3, line: 4215, type: !2530)
!7976 = !DILocation(line: 4215, column: 58, scope: !7974)
!7977 = !DILocalVariable(name: "i", scope: !7974, file: !3, line: 4217, type: !6)
!7978 = !DILocation(line: 4217, column: 12, scope: !7974)
!7979 = !DILocalVariable(name: "j", scope: !7974, file: !3, line: 4217, type: !6)
!7980 = !DILocation(line: 4217, column: 15, scope: !7974)
!7981 = !DILocation(line: 4219, column: 10, scope: !7982)
!7982 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 4219, column: 3)
!7983 = !DILocation(line: 4219, column: 8, scope: !7982)
!7984 = !DILocation(line: 4219, column: 15, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7982, file: !3, line: 4219, column: 3)
!7986 = !DILocation(line: 4219, column: 31, scope: !7985)
!7987 = !DILocation(line: 4219, column: 19, scope: !7985)
!7988 = !DILocation(line: 4219, column: 17, scope: !7985)
!7989 = !DILocation(line: 4219, column: 3, scope: !7982)
!7990 = !DILocalVariable(name: "cand", scope: !7991, file: !3, line: 4221, type: !2472)
!7991 = distinct !DILexicalBlock(scope: !7985, file: !3, line: 4220, column: 5)
!7992 = !DILocation(line: 4221, column: 23, scope: !7991)
!7993 = !DILocation(line: 4221, column: 39, scope: !7991)
!7994 = !DILocation(line: 4221, column: 45, scope: !7991)
!7995 = !DILocation(line: 4221, column: 30, scope: !7991)
!7996 = !DILocalVariable(name: "closest", scope: !7991, file: !3, line: 4222, type: !2457)
!7997 = !DILocation(line: 4222, column: 22, scope: !7991)
!7998 = !DILocation(line: 4223, column: 11, scope: !7999)
!7999 = distinct !DILexicalBlock(scope: !7991, file: !3, line: 4223, column: 11)
!8000 = !DILocation(line: 4223, column: 17, scope: !7999)
!8001 = !DILocation(line: 4223, column: 21, scope: !7999)
!8002 = !DILocation(line: 4223, column: 11, scope: !7991)
!8003 = !DILocation(line: 4224, column: 2, scope: !7999)
!8004 = !DILocation(line: 4225, column: 14, scope: !8005)
!8005 = distinct !DILexicalBlock(scope: !7991, file: !3, line: 4225, column: 7)
!8006 = !DILocation(line: 4225, column: 12, scope: !8005)
!8007 = !DILocation(line: 4225, column: 19, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4225, column: 7)
!8009 = !DILocation(line: 4225, column: 34, scope: !8008)
!8010 = !DILocation(line: 4225, column: 23, scope: !8008)
!8011 = !DILocation(line: 4225, column: 21, scope: !8008)
!8012 = !DILocation(line: 4225, column: 7, scope: !8005)
!8013 = !DILocalVariable(name: "use", scope: !8014, file: !3, line: 4227, type: !2457)
!8014 = distinct !DILexicalBlock(scope: !8008, file: !3, line: 4226, column: 2)
!8015 = !DILocation(line: 4227, column: 19, scope: !8014)
!8016 = !DILocation(line: 4227, column: 33, scope: !8014)
!8017 = !DILocation(line: 4227, column: 39, scope: !8014)
!8018 = !DILocation(line: 4227, column: 25, scope: !8014)
!8019 = !DILocalVariable(name: "uid", scope: !8014, file: !3, line: 4228, type: !6)
!8020 = !DILocation(line: 4228, column: 13, scope: !8014)
!8021 = !DILocation(line: 4228, column: 31, scope: !8014)
!8022 = !DILocation(line: 4228, column: 36, scope: !8014)
!8023 = !DILocation(line: 4228, column: 19, scope: !8014)
!8024 = !DILocation(line: 4229, column: 19, scope: !8025)
!8025 = distinct !DILexicalBlock(scope: !8014, file: !3, line: 4229, column: 8)
!8026 = !DILocation(line: 4229, column: 24, scope: !8025)
!8027 = !DILocation(line: 4229, column: 8, scope: !8025)
!8028 = !DILocation(line: 4229, column: 44, scope: !8025)
!8029 = !DILocation(line: 4229, column: 50, scope: !8025)
!8030 = !DILocation(line: 4229, column: 33, scope: !8025)
!8031 = !DILocation(line: 4229, column: 30, scope: !8025)
!8032 = !DILocation(line: 4230, column: 8, scope: !8025)
!8033 = !DILocation(line: 4230, column: 11, scope: !8025)
!8034 = !DILocation(line: 4230, column: 29, scope: !8025)
!8035 = !DILocation(line: 4230, column: 35, scope: !8025)
!8036 = !DILocation(line: 4230, column: 17, scope: !8025)
!8037 = !DILocation(line: 4230, column: 15, scope: !8025)
!8038 = !DILocation(line: 4229, column: 8, scope: !8014)
!8039 = !DILocation(line: 4231, column: 6, scope: !8025)
!8040 = !DILocation(line: 4232, column: 8, scope: !8041)
!8041 = distinct !DILexicalBlock(scope: !8014, file: !3, line: 4232, column: 8)
!8042 = !DILocation(line: 4232, column: 16, scope: !8041)
!8043 = !DILocation(line: 4232, column: 24, scope: !8041)
!8044 = !DILocation(line: 4232, column: 27, scope: !8041)
!8045 = !DILocation(line: 4232, column: 45, scope: !8041)
!8046 = !DILocation(line: 4232, column: 54, scope: !8041)
!8047 = !DILocation(line: 4232, column: 33, scope: !8041)
!8048 = !DILocation(line: 4232, column: 31, scope: !8041)
!8049 = !DILocation(line: 4232, column: 8, scope: !8014)
!8050 = !DILocation(line: 4233, column: 16, scope: !8041)
!8051 = !DILocation(line: 4233, column: 14, scope: !8041)
!8052 = !DILocation(line: 4233, column: 6, scope: !8041)
!8053 = !DILocation(line: 4234, column: 2, scope: !8014)
!8054 = !DILocation(line: 4225, column: 42, scope: !8008)
!8055 = !DILocation(line: 4225, column: 7, scope: !8008)
!8056 = distinct !{!8056, !8012, !8057}
!8057 = !DILocation(line: 4234, column: 2, scope: !8005)
!8058 = !DILocation(line: 4235, column: 11, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !7991, file: !3, line: 4235, column: 11)
!8060 = !DILocation(line: 4235, column: 19, scope: !8059)
!8061 = !DILocation(line: 4235, column: 27, scope: !8059)
!8062 = !DILocation(line: 4235, column: 58, scope: !8059)
!8063 = !DILocation(line: 4235, column: 64, scope: !8059)
!8064 = !DILocation(line: 4235, column: 73, scope: !8059)
!8065 = !DILocation(line: 4235, column: 31, scope: !8059)
!8066 = !DILocation(line: 4235, column: 11, scope: !7991)
!8067 = !DILocation(line: 4236, column: 2, scope: !8059)
!8068 = !DILocation(line: 4237, column: 24, scope: !7991)
!8069 = !DILocation(line: 4237, column: 7, scope: !7991)
!8070 = !DILocation(line: 4237, column: 13, scope: !7991)
!8071 = !DILocation(line: 4237, column: 22, scope: !7991)
!8072 = !DILocation(line: 4238, column: 5, scope: !7991)
!8073 = !DILocation(line: 4219, column: 39, scope: !7985)
!8074 = !DILocation(line: 4219, column: 3, scope: !7985)
!8075 = distinct !{!8075, !7989, !8076}
!8076 = !DILocation(line: 4238, column: 5, scope: !7982)
!8077 = !DILocation(line: 4239, column: 1, scope: !7974)
!8078 = distinct !DISubprogram(name: "record_important_candidates", scope: !3, file: !3, line: 2426, type: !3665, scopeLine: 2427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8079 = !DILocalVariable(name: "data", arg: 1, scope: !8078, file: !3, line: 2426, type: !2530)
!8080 = !DILocation(line: 2426, column: 50, scope: !8078)
!8081 = !DILocalVariable(name: "i", scope: !8078, file: !3, line: 2428, type: !6)
!8082 = !DILocation(line: 2428, column: 12, scope: !8078)
!8083 = !DILocalVariable(name: "use", scope: !8078, file: !3, line: 2429, type: !2457)
!8084 = !DILocation(line: 2429, column: 18, scope: !8078)
!8085 = !DILocation(line: 2431, column: 10, scope: !8086)
!8086 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 2431, column: 3)
!8087 = !DILocation(line: 2431, column: 8, scope: !8086)
!8088 = !DILocation(line: 2431, column: 15, scope: !8089)
!8089 = distinct !DILexicalBlock(scope: !8086, file: !3, line: 2431, column: 3)
!8090 = !DILocation(line: 2431, column: 31, scope: !8089)
!8091 = !DILocation(line: 2431, column: 19, scope: !8089)
!8092 = !DILocation(line: 2431, column: 17, scope: !8089)
!8093 = !DILocation(line: 2431, column: 3, scope: !8086)
!8094 = !DILocalVariable(name: "cand", scope: !8095, file: !3, line: 2433, type: !2472)
!8095 = distinct !DILexicalBlock(scope: !8089, file: !3, line: 2432, column: 5)
!8096 = !DILocation(line: 2433, column: 23, scope: !8095)
!8097 = !DILocation(line: 2433, column: 39, scope: !8095)
!8098 = !DILocation(line: 2433, column: 45, scope: !8095)
!8099 = !DILocation(line: 2433, column: 30, scope: !8095)
!8100 = !DILocation(line: 2435, column: 11, scope: !8101)
!8101 = distinct !DILexicalBlock(scope: !8095, file: !3, line: 2435, column: 11)
!8102 = !DILocation(line: 2435, column: 17, scope: !8101)
!8103 = !DILocation(line: 2435, column: 11, scope: !8095)
!8104 = !DILocation(line: 2436, column: 18, scope: !8101)
!8105 = !DILocation(line: 2436, column: 24, scope: !8101)
!8106 = !DILocation(line: 2436, column: 46, scope: !8101)
!8107 = !DILocation(line: 2436, column: 2, scope: !8101)
!8108 = !DILocation(line: 2437, column: 5, scope: !8095)
!8109 = !DILocation(line: 2431, column: 39, scope: !8089)
!8110 = !DILocation(line: 2431, column: 3, scope: !8089)
!8111 = distinct !{!8111, !8093, !8112}
!8112 = !DILocation(line: 2437, column: 5, scope: !8086)
!8113 = !DILocation(line: 2439, column: 48, scope: !8078)
!8114 = !DILocation(line: 2439, column: 36, scope: !8078)
!8115 = !DILocation(line: 2440, column: 11, scope: !8078)
!8116 = !DILocation(line: 2440, column: 8, scope: !8078)
!8117 = !DILocation(line: 2439, column: 35, scope: !8078)
!8118 = !DILocation(line: 2439, column: 3, scope: !8078)
!8119 = !DILocation(line: 2439, column: 9, scope: !8078)
!8120 = !DILocation(line: 2439, column: 33, scope: !8078)
!8121 = !DILocation(line: 2442, column: 7, scope: !8122)
!8122 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 2442, column: 7)
!8123 = !DILocation(line: 2442, column: 13, scope: !8122)
!8124 = !DILocation(line: 2442, column: 7, scope: !8078)
!8125 = !DILocation(line: 2446, column: 14, scope: !8126)
!8126 = distinct !DILexicalBlock(scope: !8127, file: !3, line: 2446, column: 7)
!8127 = distinct !DILexicalBlock(scope: !8122, file: !3, line: 2443, column: 5)
!8128 = !DILocation(line: 2446, column: 12, scope: !8126)
!8129 = !DILocation(line: 2446, column: 19, scope: !8130)
!8130 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 2446, column: 7)
!8131 = !DILocation(line: 2446, column: 34, scope: !8130)
!8132 = !DILocation(line: 2446, column: 23, scope: !8130)
!8133 = !DILocation(line: 2446, column: 21, scope: !8130)
!8134 = !DILocation(line: 2446, column: 7, scope: !8126)
!8135 = !DILocation(line: 2448, column: 18, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 2447, column: 2)
!8137 = !DILocation(line: 2448, column: 24, scope: !8136)
!8138 = !DILocation(line: 2448, column: 10, scope: !8136)
!8139 = !DILocation(line: 2448, column: 8, scope: !8136)
!8140 = !DILocation(line: 2449, column: 4, scope: !8136)
!8141 = !DILocation(line: 2450, column: 2, scope: !8136)
!8142 = !DILocation(line: 2446, column: 42, scope: !8130)
!8143 = !DILocation(line: 2446, column: 7, scope: !8130)
!8144 = distinct !{!8144, !8134, !8145}
!8145 = !DILocation(line: 2450, column: 2, scope: !8126)
!8146 = !DILocation(line: 2451, column: 5, scope: !8127)
!8147 = !DILocation(line: 2455, column: 14, scope: !8148)
!8148 = distinct !DILexicalBlock(scope: !8149, file: !3, line: 2455, column: 7)
!8149 = distinct !DILexicalBlock(scope: !8122, file: !3, line: 2453, column: 5)
!8150 = !DILocation(line: 2455, column: 12, scope: !8148)
!8151 = !DILocation(line: 2455, column: 19, scope: !8152)
!8152 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 2455, column: 7)
!8153 = !DILocation(line: 2455, column: 34, scope: !8152)
!8154 = !DILocation(line: 2455, column: 23, scope: !8152)
!8155 = !DILocation(line: 2455, column: 21, scope: !8152)
!8156 = !DILocation(line: 2455, column: 7, scope: !8148)
!8157 = !DILocation(line: 2456, column: 27, scope: !8152)
!8158 = !DILocation(line: 2456, column: 33, scope: !8152)
!8159 = !DILocation(line: 2456, column: 19, scope: !8152)
!8160 = !DILocation(line: 2456, column: 37, scope: !8152)
!8161 = !DILocation(line: 2457, column: 5, scope: !8152)
!8162 = !DILocation(line: 2457, column: 11, scope: !8152)
!8163 = !DILocation(line: 2456, column: 2, scope: !8152)
!8164 = !DILocation(line: 2455, column: 42, scope: !8152)
!8165 = !DILocation(line: 2455, column: 7, scope: !8152)
!8166 = distinct !{!8166, !8156, !8167}
!8167 = !DILocation(line: 2457, column: 31, scope: !8148)
!8168 = !DILocation(line: 2459, column: 1, scope: !8078)
!8169 = distinct !DISubprogram(name: "add_standard_iv_candidates_for_size", scope: !3, file: !3, line: 2294, type: !8170, scopeLine: 2296, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8170 = !DISubroutineType(types: !8171)
!8171 = !{null, !2530, !6}
!8172 = !DILocalVariable(name: "data", arg: 1, scope: !8169, file: !3, line: 2294, type: !2530)
!8173 = !DILocation(line: 2294, column: 58, scope: !8169)
!8174 = !DILocalVariable(name: "size", arg: 2, scope: !8169, file: !3, line: 2295, type: !6)
!8175 = !DILocation(line: 2295, column: 23, scope: !8169)
!8176 = !DILocalVariable(name: "type", scope: !8169, file: !3, line: 2297, type: !1134)
!8177 = !DILocation(line: 2297, column: 8, scope: !8169)
!8178 = !DILocation(line: 2297, column: 32, scope: !8169)
!8179 = !DILocation(line: 2297, column: 47, scope: !8169)
!8180 = !DILocation(line: 2297, column: 15, scope: !8169)
!8181 = !DILocation(line: 2298, column: 18, scope: !8169)
!8182 = !DILocation(line: 2298, column: 39, scope: !8169)
!8183 = !DILocation(line: 2298, column: 24, scope: !8169)
!8184 = !DILocation(line: 2298, column: 64, scope: !8169)
!8185 = !DILocation(line: 2298, column: 49, scope: !8169)
!8186 = !DILocation(line: 2298, column: 3, scope: !8169)
!8187 = !DILocation(line: 2300, column: 1, scope: !8169)
!8188 = distinct !DISubprogram(name: "add_candidate", scope: !3, file: !3, line: 2277, type: !8189, scopeLine: 2279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8189 = !DISubroutineType(types: !8190)
!8190 = !{null, !2530, !1134, !1134, !136, !2457}
!8191 = !DILocalVariable(name: "data", arg: 1, scope: !8188, file: !3, line: 2277, type: !2530)
!8192 = !DILocation(line: 2277, column: 36, scope: !8188)
!8193 = !DILocalVariable(name: "base", arg: 2, scope: !8188, file: !3, line: 2278, type: !1134)
!8194 = !DILocation(line: 2278, column: 14, scope: !8188)
!8195 = !DILocalVariable(name: "step", arg: 3, scope: !8188, file: !3, line: 2278, type: !1134)
!8196 = !DILocation(line: 2278, column: 25, scope: !8188)
!8197 = !DILocalVariable(name: "important", arg: 4, scope: !8188, file: !3, line: 2278, type: !136)
!8198 = !DILocation(line: 2278, column: 36, scope: !8188)
!8199 = !DILocalVariable(name: "use", arg: 5, scope: !8188, file: !3, line: 2278, type: !2457)
!8200 = !DILocation(line: 2278, column: 62, scope: !8188)
!8201 = !DILocation(line: 2280, column: 22, scope: !8202)
!8202 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 2280, column: 7)
!8203 = !DILocation(line: 2280, column: 28, scope: !8202)
!8204 = !DILocation(line: 2280, column: 7, scope: !8202)
!8205 = !DILocation(line: 2280, column: 7, scope: !8188)
!8206 = !DILocation(line: 2281, column: 22, scope: !8202)
!8207 = !DILocation(line: 2281, column: 28, scope: !8202)
!8208 = !DILocation(line: 2281, column: 34, scope: !8202)
!8209 = !DILocation(line: 2281, column: 40, scope: !8202)
!8210 = !DILocation(line: 2281, column: 62, scope: !8202)
!8211 = !DILocation(line: 2281, column: 5, scope: !8202)
!8212 = !DILocation(line: 2282, column: 19, scope: !8213)
!8213 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 2282, column: 7)
!8214 = !DILocation(line: 2282, column: 25, scope: !8213)
!8215 = !DILocation(line: 2282, column: 7, scope: !8213)
!8216 = !DILocation(line: 2283, column: 7, scope: !8213)
!8217 = !DILocation(line: 2283, column: 30, scope: !8213)
!8218 = !DILocation(line: 2283, column: 36, scope: !8213)
!8219 = !DILocation(line: 2283, column: 10, scope: !8213)
!8220 = !DILocation(line: 2282, column: 7, scope: !8188)
!8221 = !DILocation(line: 2284, column: 22, scope: !8213)
!8222 = !DILocation(line: 2284, column: 28, scope: !8213)
!8223 = !DILocation(line: 2284, column: 34, scope: !8213)
!8224 = !DILocation(line: 2284, column: 40, scope: !8213)
!8225 = !DILocation(line: 2284, column: 59, scope: !8213)
!8226 = !DILocation(line: 2284, column: 5, scope: !8213)
!8227 = !DILocation(line: 2286, column: 7, scope: !8228)
!8228 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 2286, column: 7)
!8229 = !DILocation(line: 2286, column: 11, scope: !8228)
!8230 = !DILocation(line: 2286, column: 19, scope: !8228)
!8231 = !DILocation(line: 2286, column: 22, scope: !8228)
!8232 = !DILocation(line: 2286, column: 27, scope: !8228)
!8233 = !DILocation(line: 2286, column: 32, scope: !8228)
!8234 = !DILocation(line: 2286, column: 7, scope: !8188)
!8235 = !DILocation(line: 2287, column: 29, scope: !8228)
!8236 = !DILocation(line: 2287, column: 35, scope: !8228)
!8237 = !DILocation(line: 2287, column: 41, scope: !8228)
!8238 = !DILocation(line: 2287, column: 47, scope: !8228)
!8239 = !DILocation(line: 2287, column: 58, scope: !8228)
!8240 = !DILocation(line: 2287, column: 5, scope: !8228)
!8241 = !DILocation(line: 2288, column: 1, scope: !8188)
!8242 = distinct !DISubprogram(name: "add_candidate_1", scope: !3, file: !3, line: 2100, type: !8243, scopeLine: 2103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8243 = !DISubroutineType(types: !8244)
!8244 = !{!2472, !2530, !1134, !1134, !136, !400, !2457, !1436}
!8245 = !DILocalVariable(name: "data", arg: 1, scope: !8242, file: !3, line: 2100, type: !2530)
!8246 = !DILocation(line: 2100, column: 38, scope: !8242)
!8247 = !DILocalVariable(name: "base", arg: 2, scope: !8242, file: !3, line: 2101, type: !1134)
!8248 = !DILocation(line: 2101, column: 9, scope: !8242)
!8249 = !DILocalVariable(name: "step", arg: 3, scope: !8242, file: !3, line: 2101, type: !1134)
!8250 = !DILocation(line: 2101, column: 20, scope: !8242)
!8251 = !DILocalVariable(name: "important", arg: 4, scope: !8242, file: !3, line: 2101, type: !136)
!8252 = !DILocation(line: 2101, column: 31, scope: !8242)
!8253 = !DILocalVariable(name: "pos", arg: 5, scope: !8242, file: !3, line: 2101, type: !400)
!8254 = !DILocation(line: 2101, column: 59, scope: !8242)
!8255 = !DILocalVariable(name: "use", arg: 6, scope: !8242, file: !3, line: 2102, type: !2457)
!8256 = !DILocation(line: 2102, column: 19, scope: !8242)
!8257 = !DILocalVariable(name: "incremented_at", arg: 7, scope: !8242, file: !3, line: 2102, type: !1436)
!8258 = !DILocation(line: 2102, column: 31, scope: !8242)
!8259 = !DILocalVariable(name: "i", scope: !8242, file: !3, line: 2104, type: !6)
!8260 = !DILocation(line: 2104, column: 12, scope: !8242)
!8261 = !DILocalVariable(name: "cand", scope: !8242, file: !3, line: 2105, type: !2472)
!8262 = !DILocation(line: 2105, column: 19, scope: !8242)
!8263 = !DILocalVariable(name: "type", scope: !8242, file: !3, line: 2106, type: !1134)
!8264 = !DILocation(line: 2106, column: 8, scope: !8242)
!8265 = !DILocalVariable(name: "orig_type", scope: !8242, file: !3, line: 2106, type: !1134)
!8266 = !DILocation(line: 2106, column: 14, scope: !8242)
!8267 = !DILocation(line: 2108, column: 7, scope: !8268)
!8268 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 2108, column: 7)
!8269 = !DILocation(line: 2108, column: 7, scope: !8242)
!8270 = !DILocation(line: 2110, column: 19, scope: !8271)
!8271 = distinct !DILexicalBlock(scope: !8268, file: !3, line: 2109, column: 5)
!8272 = !DILocation(line: 2110, column: 17, scope: !8271)
!8273 = !DILocation(line: 2111, column: 32, scope: !8271)
!8274 = !DILocation(line: 2111, column: 14, scope: !8271)
!8275 = !DILocation(line: 2111, column: 12, scope: !8271)
!8276 = !DILocation(line: 2112, column: 11, scope: !8277)
!8277 = distinct !DILexicalBlock(scope: !8271, file: !3, line: 2112, column: 11)
!8278 = !DILocation(line: 2112, column: 19, scope: !8277)
!8279 = !DILocation(line: 2112, column: 16, scope: !8277)
!8280 = !DILocation(line: 2112, column: 11, scope: !8271)
!8281 = !DILocation(line: 2114, column: 11, scope: !8282)
!8282 = distinct !DILexicalBlock(scope: !8277, file: !3, line: 2113, column: 2)
!8283 = !DILocation(line: 2114, column: 9, scope: !8282)
!8284 = !DILocation(line: 2115, column: 11, scope: !8282)
!8285 = !DILocation(line: 2115, column: 9, scope: !8282)
!8286 = !DILocation(line: 2116, column: 2, scope: !8282)
!8287 = !DILocation(line: 2117, column: 5, scope: !8271)
!8288 = !DILocation(line: 2119, column: 10, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 2119, column: 3)
!8290 = !DILocation(line: 2119, column: 8, scope: !8289)
!8291 = !DILocation(line: 2119, column: 15, scope: !8292)
!8292 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 2119, column: 3)
!8293 = !DILocation(line: 2119, column: 31, scope: !8292)
!8294 = !DILocation(line: 2119, column: 19, scope: !8292)
!8295 = !DILocation(line: 2119, column: 17, scope: !8292)
!8296 = !DILocation(line: 2119, column: 3, scope: !8289)
!8297 = !DILocation(line: 2121, column: 23, scope: !8298)
!8298 = distinct !DILexicalBlock(scope: !8292, file: !3, line: 2120, column: 5)
!8299 = !DILocation(line: 2121, column: 29, scope: !8298)
!8300 = !DILocation(line: 2121, column: 14, scope: !8298)
!8301 = !DILocation(line: 2121, column: 12, scope: !8298)
!8302 = !DILocation(line: 2123, column: 11, scope: !8303)
!8303 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 2123, column: 11)
!8304 = !DILocation(line: 2123, column: 17, scope: !8303)
!8305 = !DILocation(line: 2123, column: 24, scope: !8303)
!8306 = !DILocation(line: 2123, column: 21, scope: !8303)
!8307 = !DILocation(line: 2123, column: 11, scope: !8298)
!8308 = !DILocation(line: 2124, column: 2, scope: !8303)
!8309 = !DILocation(line: 2126, column: 11, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 2126, column: 11)
!8311 = !DILocation(line: 2126, column: 17, scope: !8310)
!8312 = !DILocation(line: 2126, column: 35, scope: !8310)
!8313 = !DILocation(line: 2126, column: 32, scope: !8310)
!8314 = !DILocation(line: 2127, column: 4, scope: !8310)
!8315 = !DILocation(line: 2127, column: 9, scope: !8310)
!8316 = !DILocation(line: 2127, column: 13, scope: !8310)
!8317 = !DILocation(line: 2127, column: 29, scope: !8310)
!8318 = !DILocation(line: 2127, column: 32, scope: !8310)
!8319 = !DILocation(line: 2127, column: 36, scope: !8310)
!8320 = !DILocation(line: 2128, column: 8, scope: !8310)
!8321 = !DILocation(line: 2128, column: 11, scope: !8310)
!8322 = !DILocation(line: 2128, column: 17, scope: !8310)
!8323 = !DILocation(line: 2128, column: 29, scope: !8310)
!8324 = !DILocation(line: 2128, column: 26, scope: !8310)
!8325 = !DILocation(line: 2126, column: 11, scope: !8298)
!8326 = !DILocation(line: 2129, column: 2, scope: !8310)
!8327 = !DILocation(line: 2131, column: 12, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 2131, column: 11)
!8329 = !DILocation(line: 2131, column: 18, scope: !8328)
!8330 = !DILocation(line: 2131, column: 11, scope: !8298)
!8331 = !DILocation(line: 2133, column: 9, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8333, file: !3, line: 2133, column: 8)
!8333 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 2132, column: 2)
!8334 = !DILocation(line: 2133, column: 14, scope: !8332)
!8335 = !DILocation(line: 2133, column: 18, scope: !8332)
!8336 = !DILocation(line: 2133, column: 8, scope: !8333)
!8337 = !DILocation(line: 2134, column: 6, scope: !8332)
!8338 = !DILocation(line: 2136, column: 4, scope: !8333)
!8339 = !DILocation(line: 2139, column: 12, scope: !8340)
!8340 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 2139, column: 11)
!8341 = !DILocation(line: 2139, column: 17, scope: !8340)
!8342 = !DILocation(line: 2139, column: 21, scope: !8340)
!8343 = !DILocation(line: 2139, column: 11, scope: !8298)
!8344 = !DILocation(line: 2140, column: 2, scope: !8340)
!8345 = !DILocation(line: 2142, column: 28, scope: !8346)
!8346 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 2142, column: 11)
!8347 = !DILocation(line: 2142, column: 34, scope: !8346)
!8348 = !DILocation(line: 2142, column: 40, scope: !8346)
!8349 = !DILocation(line: 2142, column: 44, scope: !8346)
!8350 = !DILocation(line: 2142, column: 11, scope: !8346)
!8351 = !DILocation(line: 2143, column: 4, scope: !8346)
!8352 = !DILocation(line: 2143, column: 24, scope: !8346)
!8353 = !DILocation(line: 2143, column: 30, scope: !8346)
!8354 = !DILocation(line: 2143, column: 36, scope: !8346)
!8355 = !DILocation(line: 2143, column: 40, scope: !8346)
!8356 = !DILocation(line: 2143, column: 7, scope: !8346)
!8357 = !DILocation(line: 2142, column: 11, scope: !8298)
!8358 = !DILocation(line: 2144, column: 2, scope: !8346)
!8359 = !DILocation(line: 2145, column: 5, scope: !8298)
!8360 = !DILocation(line: 2119, column: 39, scope: !8292)
!8361 = !DILocation(line: 2119, column: 3, scope: !8292)
!8362 = distinct !{!8362, !8296, !8363}
!8363 = !DILocation(line: 2145, column: 5, scope: !8289)
!8364 = !DILocation(line: 2147, column: 7, scope: !8365)
!8365 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 2147, column: 7)
!8366 = !DILocation(line: 2147, column: 24, scope: !8365)
!8367 = !DILocation(line: 2147, column: 12, scope: !8365)
!8368 = !DILocation(line: 2147, column: 9, scope: !8365)
!8369 = !DILocation(line: 2147, column: 7, scope: !8242)
!8370 = !DILocation(line: 2149, column: 14, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8365, file: !3, line: 2148, column: 5)
!8372 = !DILocation(line: 2149, column: 12, scope: !8371)
!8373 = !DILocation(line: 2150, column: 18, scope: !8371)
!8374 = !DILocation(line: 2150, column: 7, scope: !8371)
!8375 = !DILocation(line: 2150, column: 13, scope: !8371)
!8376 = !DILocation(line: 2150, column: 16, scope: !8371)
!8377 = !DILocation(line: 2152, column: 12, scope: !8378)
!8378 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 2152, column: 11)
!8379 = !DILocation(line: 2152, column: 17, scope: !8378)
!8380 = !DILocation(line: 2152, column: 21, scope: !8378)
!8381 = !DILocation(line: 2152, column: 11, scope: !8371)
!8382 = !DILocation(line: 2153, column: 2, scope: !8378)
!8383 = !DILocation(line: 2153, column: 8, scope: !8378)
!8384 = !DILocation(line: 2153, column: 11, scope: !8378)
!8385 = !DILocation(line: 2155, column: 23, scope: !8378)
!8386 = !DILocation(line: 2155, column: 29, scope: !8378)
!8387 = !DILocation(line: 2155, column: 13, scope: !8378)
!8388 = !DILocation(line: 2155, column: 2, scope: !8378)
!8389 = !DILocation(line: 2155, column: 8, scope: !8378)
!8390 = !DILocation(line: 2155, column: 11, scope: !8378)
!8391 = !DILocation(line: 2157, column: 19, scope: !8371)
!8392 = !DILocation(line: 2157, column: 7, scope: !8371)
!8393 = !DILocation(line: 2157, column: 13, scope: !8371)
!8394 = !DILocation(line: 2157, column: 17, scope: !8371)
!8395 = !DILocation(line: 2158, column: 11, scope: !8396)
!8396 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 2158, column: 11)
!8397 = !DILocation(line: 2158, column: 15, scope: !8396)
!8398 = !DILocation(line: 2158, column: 30, scope: !8396)
!8399 = !DILocation(line: 2158, column: 33, scope: !8396)
!8400 = !DILocation(line: 2158, column: 39, scope: !8396)
!8401 = !DILocation(line: 2158, column: 11, scope: !8371)
!8402 = !DILocation(line: 2160, column: 43, scope: !8403)
!8403 = distinct !DILexicalBlock(scope: !8396, file: !3, line: 2159, column: 2)
!8404 = !DILocation(line: 2160, column: 23, scope: !8403)
!8405 = !DILocation(line: 2160, column: 4, scope: !8403)
!8406 = !DILocation(line: 2160, column: 10, scope: !8403)
!8407 = !DILocation(line: 2160, column: 21, scope: !8403)
!8408 = !DILocation(line: 2161, column: 22, scope: !8403)
!8409 = !DILocation(line: 2161, column: 28, scope: !8403)
!8410 = !DILocation(line: 2161, column: 4, scope: !8403)
!8411 = !DILocation(line: 2161, column: 10, scope: !8403)
!8412 = !DILocation(line: 2161, column: 20, scope: !8403)
!8413 = !DILocation(line: 2162, column: 2, scope: !8403)
!8414 = !DILocation(line: 2163, column: 25, scope: !8371)
!8415 = !DILocation(line: 2163, column: 7, scope: !8371)
!8416 = !DILocation(line: 2163, column: 13, scope: !8371)
!8417 = !DILocation(line: 2163, column: 23, scope: !8371)
!8418 = !DILocation(line: 2164, column: 30, scope: !8371)
!8419 = !DILocation(line: 2164, column: 7, scope: !8371)
!8420 = !DILocation(line: 2164, column: 13, scope: !8371)
!8421 = !DILocation(line: 2164, column: 28, scope: !8371)
!8422 = !DILocation(line: 2165, column: 7, scope: !8371)
!8423 = !DILocation(line: 2167, column: 11, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 2167, column: 11)
!8425 = !DILocation(line: 2168, column: 4, scope: !8424)
!8426 = !DILocation(line: 2168, column: 7, scope: !8424)
!8427 = !DILocation(line: 2168, column: 24, scope: !8424)
!8428 = !DILocation(line: 2167, column: 11, scope: !8371)
!8429 = !DILocation(line: 2170, column: 21, scope: !8430)
!8430 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 2169, column: 2)
!8431 = !DILocation(line: 2170, column: 19, scope: !8430)
!8432 = !DILocation(line: 2171, column: 4, scope: !8430)
!8433 = !DILocation(line: 2172, column: 2, scope: !8430)
!8434 = !DILocation(line: 2174, column: 11, scope: !8435)
!8435 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 2174, column: 11)
!8436 = !DILocation(line: 2174, column: 15, scope: !8435)
!8437 = !DILocation(line: 2174, column: 31, scope: !8435)
!8438 = !DILocation(line: 2174, column: 34, scope: !8435)
!8439 = !DILocation(line: 2174, column: 38, scope: !8435)
!8440 = !DILocation(line: 2174, column: 11, scope: !8371)
!8441 = !DILocation(line: 2175, column: 19, scope: !8435)
!8442 = !DILocation(line: 2175, column: 2, scope: !8435)
!8443 = !DILocation(line: 2175, column: 8, scope: !8435)
!8444 = !DILocation(line: 2175, column: 17, scope: !8435)
!8445 = !DILocation(line: 2177, column: 2, scope: !8435)
!8446 = !DILocation(line: 2177, column: 8, scope: !8435)
!8447 = !DILocation(line: 2177, column: 17, scope: !8435)
!8448 = !DILocation(line: 2179, column: 11, scope: !8449)
!8449 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 2179, column: 11)
!8450 = !DILocation(line: 2179, column: 21, scope: !8449)
!8451 = !DILocation(line: 2179, column: 25, scope: !8449)
!8452 = !DILocation(line: 2179, column: 36, scope: !8449)
!8453 = !DILocation(line: 2179, column: 11, scope: !8371)
!8454 = !DILocation(line: 2180, column: 13, scope: !8449)
!8455 = !DILocation(line: 2180, column: 24, scope: !8449)
!8456 = !DILocation(line: 2180, column: 2, scope: !8449)
!8457 = !DILocation(line: 2181, column: 5, scope: !8371)
!8458 = !DILocation(line: 2183, column: 7, scope: !8459)
!8459 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 2183, column: 7)
!8460 = !DILocation(line: 2183, column: 17, scope: !8459)
!8461 = !DILocation(line: 2183, column: 21, scope: !8459)
!8462 = !DILocation(line: 2183, column: 27, scope: !8459)
!8463 = !DILocation(line: 2183, column: 7, scope: !8242)
!8464 = !DILocation(line: 2185, column: 7, scope: !8465)
!8465 = distinct !DILexicalBlock(scope: !8459, file: !3, line: 2184, column: 5)
!8466 = !DILocation(line: 2185, column: 13, scope: !8465)
!8467 = !DILocation(line: 2185, column: 23, scope: !8465)
!8468 = !DILocation(line: 2186, column: 11, scope: !8469)
!8469 = distinct !DILexicalBlock(scope: !8465, file: !3, line: 2186, column: 11)
!8470 = !DILocation(line: 2186, column: 21, scope: !8469)
!8471 = !DILocation(line: 2186, column: 25, scope: !8469)
!8472 = !DILocation(line: 2186, column: 36, scope: !8469)
!8473 = !DILocation(line: 2186, column: 11, scope: !8465)
!8474 = !DILocation(line: 2187, column: 11, scope: !8469)
!8475 = !DILocation(line: 2187, column: 53, scope: !8469)
!8476 = !DILocation(line: 2187, column: 59, scope: !8469)
!8477 = !DILocation(line: 2187, column: 2, scope: !8469)
!8478 = !DILocation(line: 2188, column: 5, scope: !8465)
!8479 = !DILocation(line: 2190, column: 7, scope: !8480)
!8480 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 2190, column: 7)
!8481 = !DILocation(line: 2190, column: 7, scope: !8242)
!8482 = !DILocation(line: 2192, column: 23, scope: !8483)
!8483 = distinct !DILexicalBlock(scope: !8480, file: !3, line: 2191, column: 5)
!8484 = !DILocation(line: 2192, column: 28, scope: !8483)
!8485 = !DILocation(line: 2192, column: 43, scope: !8483)
!8486 = !DILocation(line: 2192, column: 7, scope: !8483)
!8487 = !DILocation(line: 2193, column: 11, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8483, file: !3, line: 2193, column: 11)
!8489 = !DILocation(line: 2193, column: 21, scope: !8488)
!8490 = !DILocation(line: 2193, column: 25, scope: !8488)
!8491 = !DILocation(line: 2193, column: 36, scope: !8488)
!8492 = !DILocation(line: 2193, column: 11, scope: !8483)
!8493 = !DILocation(line: 2194, column: 11, scope: !8488)
!8494 = !DILocation(line: 2195, column: 4, scope: !8488)
!8495 = !DILocation(line: 2195, column: 10, scope: !8488)
!8496 = !DILocation(line: 2195, column: 14, scope: !8488)
!8497 = !DILocation(line: 2195, column: 19, scope: !8488)
!8498 = !DILocation(line: 2194, column: 2, scope: !8488)
!8499 = !DILocation(line: 2196, column: 5, scope: !8483)
!8500 = !DILocation(line: 2198, column: 10, scope: !8242)
!8501 = !DILocation(line: 2198, column: 3, scope: !8242)
!8502 = distinct !DISubprogram(name: "allow_ip_end_pos_p", scope: !3, file: !3, line: 2211, type: !8503, scopeLine: 2212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8503 = !DISubroutineType(types: !8504)
!8504 = !{!136, !1651}
!8505 = !DILocalVariable(name: "loop", arg: 1, scope: !8502, file: !3, line: 2211, type: !1651)
!8506 = !DILocation(line: 2211, column: 34, scope: !8502)
!8507 = !DILocation(line: 2213, column: 23, scope: !8508)
!8508 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 2213, column: 7)
!8509 = !DILocation(line: 2213, column: 8, scope: !8508)
!8510 = !DILocation(line: 2213, column: 7, scope: !8502)
!8511 = !DILocation(line: 2214, column: 5, scope: !8508)
!8512 = !DILocation(line: 2216, column: 35, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 2216, column: 7)
!8514 = !DILocation(line: 2216, column: 23, scope: !8513)
!8515 = !DILocation(line: 2216, column: 8, scope: !8513)
!8516 = !DILocation(line: 2216, column: 7, scope: !8502)
!8517 = !DILocation(line: 2217, column: 5, scope: !8513)
!8518 = !DILocation(line: 2219, column: 3, scope: !8502)
!8519 = !DILocation(line: 2220, column: 1, scope: !8502)
!8520 = distinct !DISubprogram(name: "add_autoinc_candidates", scope: !3, file: !3, line: 2226, type: !8189, scopeLine: 2228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8521 = !DILocalVariable(name: "data", arg: 1, scope: !8520, file: !3, line: 2226, type: !2530)
!8522 = !DILocation(line: 2226, column: 45, scope: !8520)
!8523 = !DILocalVariable(name: "base", arg: 2, scope: !8520, file: !3, line: 2226, type: !1134)
!8524 = !DILocation(line: 2226, column: 56, scope: !8520)
!8525 = !DILocalVariable(name: "step", arg: 3, scope: !8520, file: !3, line: 2226, type: !1134)
!8526 = !DILocation(line: 2226, column: 67, scope: !8520)
!8527 = !DILocalVariable(name: "important", arg: 4, scope: !8520, file: !3, line: 2227, type: !136)
!8528 = !DILocation(line: 2227, column: 9, scope: !8520)
!8529 = !DILocalVariable(name: "use", arg: 5, scope: !8520, file: !3, line: 2227, type: !2457)
!8530 = !DILocation(line: 2227, column: 35, scope: !8520)
!8531 = !DILocalVariable(name: "use_bb", scope: !8520, file: !3, line: 2229, type: !1399)
!8532 = !DILocation(line: 2229, column: 15, scope: !8520)
!8533 = !DILocation(line: 2229, column: 35, scope: !8520)
!8534 = !DILocation(line: 2229, column: 40, scope: !8520)
!8535 = !DILocation(line: 2229, column: 24, scope: !8520)
!8536 = !DILocalVariable(name: "mem_mode", scope: !8520, file: !3, line: 2230, type: !8)
!8537 = !DILocation(line: 2230, column: 21, scope: !8520)
!8538 = !DILocalVariable(name: "cstepi", scope: !8520, file: !3, line: 2231, type: !1088)
!8539 = !DILocation(line: 2231, column: 26, scope: !8520)
!8540 = !DILocation(line: 2237, column: 7, scope: !8541)
!8541 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 2237, column: 7)
!8542 = !DILocation(line: 2237, column: 15, scope: !8541)
!8543 = !DILocation(line: 2237, column: 30, scope: !8541)
!8544 = !DILocation(line: 2237, column: 36, scope: !8541)
!8545 = !DILocation(line: 2237, column: 27, scope: !8541)
!8546 = !DILocation(line: 2238, column: 7, scope: !8541)
!8547 = !DILocation(line: 2238, column: 43, scope: !8541)
!8548 = !DILocation(line: 2238, column: 49, scope: !8541)
!8549 = !DILocation(line: 2238, column: 63, scope: !8541)
!8550 = !DILocation(line: 2238, column: 70, scope: !8541)
!8551 = !DILocation(line: 2238, column: 11, scope: !8541)
!8552 = !DILocation(line: 2239, column: 7, scope: !8541)
!8553 = !DILocation(line: 2239, column: 30, scope: !8541)
!8554 = !DILocation(line: 2239, column: 35, scope: !8541)
!8555 = !DILocation(line: 2239, column: 10, scope: !8541)
!8556 = !DILocation(line: 2240, column: 7, scope: !8541)
!8557 = !DILocation(line: 2240, column: 32, scope: !8541)
!8558 = !DILocation(line: 2240, column: 11, scope: !8541)
!8559 = !DILocation(line: 2237, column: 7, scope: !8520)
!8560 = !DILocation(line: 2241, column: 5, scope: !8541)
!8561 = !DILocation(line: 2243, column: 27, scope: !8520)
!8562 = !DILocation(line: 2243, column: 12, scope: !8520)
!8563 = !DILocation(line: 2243, column: 10, scope: !8520)
!8564 = !DILocation(line: 2245, column: 14, scope: !8520)
!8565 = !DILocation(line: 2245, column: 12, scope: !8520)
!8566 = !DILocation(line: 2270, column: 1, scope: !8520)
!8567 = distinct !DISubprogram(name: "generic_type_for", scope: !3, file: !3, line: 2059, type: !5952, scopeLine: 2060, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8568 = !DILocalVariable(name: "type", arg: 1, scope: !8567, file: !3, line: 2059, type: !1134)
!8569 = !DILocation(line: 2059, column: 24, scope: !8567)
!8570 = !DILocation(line: 2061, column: 7, scope: !8571)
!8571 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 2061, column: 7)
!8572 = !DILocation(line: 2061, column: 7, scope: !8567)
!8573 = !DILocation(line: 2062, column: 31, scope: !8571)
!8574 = !DILocation(line: 2062, column: 12, scope: !8571)
!8575 = !DILocation(line: 2062, column: 5, scope: !8571)
!8576 = !DILocation(line: 2064, column: 7, scope: !8577)
!8577 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 2064, column: 7)
!8578 = !DILocation(line: 2064, column: 7, scope: !8567)
!8579 = !DILocation(line: 2065, column: 12, scope: !8577)
!8580 = !DILocation(line: 2065, column: 5, scope: !8577)
!8581 = !DILocation(line: 2067, column: 29, scope: !8567)
!8582 = !DILocation(line: 2067, column: 10, scope: !8567)
!8583 = !DILocation(line: 2067, column: 3, scope: !8567)
!8584 = !DILocation(line: 2068, column: 1, scope: !8567)
!8585 = distinct !DISubprogram(name: "n_iv_cands", scope: !3, file: !3, line: 358, type: !2913, scopeLine: 359, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8586 = !DILocalVariable(name: "data", arg: 1, scope: !8585, file: !3, line: 358, type: !2530)
!8587 = !DILocation(line: 358, column: 33, scope: !8585)
!8588 = !DILocation(line: 360, column: 10, scope: !8585)
!8589 = !DILocation(line: 360, column: 3, scope: !8585)
!8590 = distinct !DISubprogram(name: "iv_cand", scope: !3, file: !3, line: 366, type: !8591, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8591 = !DISubroutineType(types: !8592)
!8592 = !{!2472, !2530, !6}
!8593 = !DILocalVariable(name: "data", arg: 1, scope: !8590, file: !3, line: 366, type: !2530)
!8594 = !DILocation(line: 366, column: 30, scope: !8590)
!8595 = !DILocalVariable(name: "i", arg: 2, scope: !8590, file: !3, line: 366, type: !6)
!8596 = !DILocation(line: 366, column: 45, scope: !8590)
!8597 = !DILocation(line: 368, column: 10, scope: !8590)
!8598 = !DILocation(line: 368, column: 3, scope: !8590)
!8599 = distinct !DISubprogram(name: "VEC_iv_cand_p_heap_safe_push", scope: !3, file: !3, line: 220, type: !8600, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8600 = !DISubroutineType(types: !8601)
!8601 = !{!8602, !8603, !2507}
!8602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2507, size: 64)
!8603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!8604 = !DILocalVariable(name: "vec_", arg: 1, scope: !8599, file: !3, line: 220, type: !8603)
!8605 = !DILocation(line: 220, column: 1, scope: !8599)
!8606 = !DILocalVariable(name: "obj_", arg: 2, scope: !8599, file: !3, line: 220, type: !2507)
!8607 = distinct !DISubprogram(name: "find_depends", scope: !3, file: !3, line: 2075, type: !8608, scopeLine: 2076, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8608 = !DISubroutineType(types: !8609)
!8609 = !{!1134, !1470, !2575, !1007}
!8610 = !DILocalVariable(name: "expr_p", arg: 1, scope: !8607, file: !3, line: 2075, type: !1470)
!8611 = !DILocation(line: 2075, column: 21, scope: !8607)
!8612 = !DILocalVariable(name: "ws", arg: 2, scope: !8607, file: !3, line: 2075, type: !2575)
!8613 = !DILocation(line: 2075, column: 34, scope: !8607)
!8614 = !DILocalVariable(name: "data", arg: 3, scope: !8607, file: !3, line: 2075, type: !1007)
!8615 = !DILocation(line: 2075, column: 61, scope: !8607)
!8616 = !DILocalVariable(name: "depends_on", scope: !8607, file: !3, line: 2077, type: !2550)
!8617 = !DILocation(line: 2077, column: 11, scope: !8607)
!8618 = !DILocation(line: 2077, column: 35, scope: !8607)
!8619 = !DILocation(line: 2077, column: 24, scope: !8607)
!8620 = !DILocalVariable(name: "info", scope: !8607, file: !3, line: 2078, type: !2426)
!8621 = !DILocation(line: 2078, column: 24, scope: !8607)
!8622 = !DILocation(line: 2080, column: 7, scope: !8623)
!8623 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 2080, column: 7)
!8624 = !DILocation(line: 2080, column: 27, scope: !8623)
!8625 = !DILocation(line: 2080, column: 7, scope: !8607)
!8626 = !DILocation(line: 2081, column: 5, scope: !8623)
!8627 = !DILocation(line: 2082, column: 21, scope: !8607)
!8628 = !DILocation(line: 2082, column: 38, scope: !8607)
!8629 = !DILocation(line: 2082, column: 37, scope: !8607)
!8630 = !DILocation(line: 2082, column: 10, scope: !8607)
!8631 = !DILocation(line: 2082, column: 8, scope: !8607)
!8632 = !DILocation(line: 2084, column: 8, scope: !8633)
!8633 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 2084, column: 7)
!8634 = !DILocation(line: 2084, column: 14, scope: !8633)
!8635 = !DILocation(line: 2084, column: 21, scope: !8633)
!8636 = !DILocation(line: 2084, column: 24, scope: !8633)
!8637 = !DILocation(line: 2084, column: 30, scope: !8633)
!8638 = !DILocation(line: 2084, column: 7, scope: !8607)
!8639 = !DILocation(line: 2085, column: 5, scope: !8633)
!8640 = !DILocation(line: 2087, column: 9, scope: !8641)
!8641 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 2087, column: 7)
!8642 = !DILocation(line: 2087, column: 8, scope: !8641)
!8643 = !DILocation(line: 2087, column: 7, scope: !8607)
!8644 = !DILocation(line: 2088, column: 19, scope: !8641)
!8645 = !DILocation(line: 2088, column: 6, scope: !8641)
!8646 = !DILocation(line: 2088, column: 17, scope: !8641)
!8647 = !DILocation(line: 2088, column: 5, scope: !8641)
!8648 = !DILocation(line: 2089, column: 20, scope: !8607)
!8649 = !DILocation(line: 2089, column: 19, scope: !8607)
!8650 = !DILocation(line: 2089, column: 32, scope: !8607)
!8651 = !DILocation(line: 2089, column: 38, scope: !8607)
!8652 = !DILocation(line: 2089, column: 3, scope: !8607)
!8653 = !DILocation(line: 2091, column: 3, scope: !8607)
!8654 = !DILocation(line: 2092, column: 1, scope: !8607)
!8655 = distinct !DISubprogram(name: "VEC_iv_cand_p_base_length", scope: !3, file: !3, line: 219, type: !8656, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8656 = !DISubroutineType(types: !8657)
!8657 = !{!6, !8658}
!8658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8659, size: 64)
!8659 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2500)
!8660 = !DILocalVariable(name: "vec_", arg: 1, scope: !8655, file: !3, line: 219, type: !8658)
!8661 = !DILocation(line: 219, column: 1, scope: !8655)
!8662 = distinct !DISubprogram(name: "VEC_iv_cand_p_base_index", scope: !3, file: !3, line: 219, type: !8663, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8663 = !DISubroutineType(types: !8664)
!8664 = !{!2507, !8658, !6}
!8665 = !DILocalVariable(name: "vec_", arg: 1, scope: !8662, file: !3, line: 219, type: !8658)
!8666 = !DILocation(line: 219, column: 1, scope: !8662)
!8667 = !DILocalVariable(name: "ix_", arg: 2, scope: !8662, file: !3, line: 219, type: !6)
!8668 = !DILocation(line: 0, scope: !8662)
!8669 = distinct !DISubprogram(name: "VEC_iv_cand_p_heap_reserve", scope: !3, file: !3, line: 220, type: !8670, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8670 = !DISubroutineType(types: !8671)
!8671 = !{!1006, !8603, !1006}
!8672 = !DILocalVariable(name: "vec_", arg: 1, scope: !8669, file: !3, line: 220, type: !8603)
!8673 = !DILocation(line: 220, column: 1, scope: !8669)
!8674 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8669, file: !3, line: 220, type: !1006)
!8675 = !DILocalVariable(name: "extend", scope: !8669, file: !3, line: 220, type: !1006)
!8676 = !DILocation(line: 220, column: 1, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8669, file: !3, line: 220, column: 1)
!8678 = distinct !DISubprogram(name: "VEC_iv_cand_p_base_quick_push", scope: !3, file: !3, line: 219, type: !8679, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8679 = !DISubroutineType(types: !8680)
!8680 = !{!8602, !8681, !2507}
!8681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2500, size: 64)
!8682 = !DILocalVariable(name: "vec_", arg: 1, scope: !8678, file: !3, line: 219, type: !8681)
!8683 = !DILocation(line: 219, column: 1, scope: !8678)
!8684 = !DILocalVariable(name: "obj_", arg: 2, scope: !8678, file: !3, line: 219, type: !2507)
!8685 = !DILocalVariable(name: "slot_", scope: !8678, file: !3, line: 219, type: !8602)
!8686 = distinct !DISubprogram(name: "VEC_iv_cand_p_base_space", scope: !3, file: !3, line: 219, type: !8687, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8687 = !DISubroutineType(types: !8688)
!8688 = !{!1006, !8681, !1006}
!8689 = !DILocalVariable(name: "vec_", arg: 1, scope: !8686, file: !3, line: 219, type: !8681)
!8690 = !DILocation(line: 219, column: 1, scope: !8686)
!8691 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8686, file: !3, line: 219, type: !1006)
!8692 = distinct !DISubprogram(name: "add_old_iv_candidates", scope: !3, file: !3, line: 2318, type: !8693, scopeLine: 2319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8693 = !DISubroutineType(types: !8694)
!8694 = !{null, !2530, !2431}
!8695 = !DILocalVariable(name: "data", arg: 1, scope: !8692, file: !3, line: 2318, type: !2530)
!8696 = !DILocation(line: 2318, column: 44, scope: !8692)
!8697 = !DILocalVariable(name: "iv", arg: 2, scope: !8692, file: !3, line: 2318, type: !2431)
!8698 = !DILocation(line: 2318, column: 61, scope: !8692)
!8699 = !DILocalVariable(name: "phi", scope: !8692, file: !3, line: 2320, type: !1436)
!8700 = !DILocation(line: 2320, column: 10, scope: !8692)
!8701 = !DILocalVariable(name: "def", scope: !8692, file: !3, line: 2321, type: !1134)
!8702 = !DILocation(line: 2321, column: 8, scope: !8692)
!8703 = !DILocalVariable(name: "cand", scope: !8692, file: !3, line: 2322, type: !2472)
!8704 = !DILocation(line: 2322, column: 19, scope: !8692)
!8705 = !DILocation(line: 2324, column: 18, scope: !8692)
!8706 = !DILocation(line: 2324, column: 24, scope: !8692)
!8707 = !DILocation(line: 2324, column: 28, scope: !8692)
!8708 = !DILocation(line: 2324, column: 34, scope: !8692)
!8709 = !DILocation(line: 2324, column: 38, scope: !8692)
!8710 = !DILocation(line: 2324, column: 3, scope: !8692)
!8711 = !DILocation(line: 2327, column: 7, scope: !8712)
!8712 = distinct !DILexicalBlock(scope: !8692, file: !3, line: 2327, column: 7)
!8713 = !DILocation(line: 2327, column: 7, scope: !8692)
!8714 = !DILocation(line: 2328, column: 20, scope: !8712)
!8715 = !DILocation(line: 2328, column: 26, scope: !8712)
!8716 = !DILocation(line: 2328, column: 40, scope: !8712)
!8717 = !DILocation(line: 2328, column: 44, scope: !8712)
!8718 = !DILocation(line: 2328, column: 5, scope: !8712)
!8719 = !DILocation(line: 2330, column: 20, scope: !8712)
!8720 = !DILocation(line: 2330, column: 41, scope: !8712)
!8721 = !DILocation(line: 2330, column: 26, scope: !8712)
!8722 = !DILocation(line: 2331, column: 6, scope: !8712)
!8723 = !DILocation(line: 2331, column: 10, scope: !8712)
!8724 = !DILocation(line: 2330, column: 5, scope: !8712)
!8725 = !DILocation(line: 2333, column: 9, scope: !8692)
!8726 = !DILocation(line: 2333, column: 7, scope: !8692)
!8727 = !DILocation(line: 2334, column: 20, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8692, file: !3, line: 2334, column: 7)
!8729 = !DILocation(line: 2334, column: 7, scope: !8728)
!8730 = !DILocation(line: 2334, column: 25, scope: !8728)
!8731 = !DILocation(line: 2334, column: 7, scope: !8692)
!8732 = !DILocation(line: 2338, column: 13, scope: !8733)
!8733 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 2335, column: 5)
!8734 = !DILocation(line: 2338, column: 11, scope: !8733)
!8735 = !DILocation(line: 2339, column: 31, scope: !8733)
!8736 = !DILocation(line: 2340, column: 10, scope: !8733)
!8737 = !DILocation(line: 2340, column: 14, scope: !8733)
!8738 = !DILocation(line: 2340, column: 20, scope: !8733)
!8739 = !DILocation(line: 2340, column: 24, scope: !8733)
!8740 = !DILocation(line: 2341, column: 10, scope: !8733)
!8741 = !DILocation(line: 2339, column: 14, scope: !8733)
!8742 = !DILocation(line: 2339, column: 12, scope: !8733)
!8743 = !DILocation(line: 2342, column: 26, scope: !8733)
!8744 = !DILocation(line: 2342, column: 30, scope: !8733)
!8745 = !DILocation(line: 2342, column: 7, scope: !8733)
!8746 = !DILocation(line: 2342, column: 13, scope: !8733)
!8747 = !DILocation(line: 2342, column: 24, scope: !8733)
!8748 = !DILocation(line: 2343, column: 25, scope: !8733)
!8749 = !DILocation(line: 2343, column: 7, scope: !8733)
!8750 = !DILocation(line: 2343, column: 13, scope: !8733)
!8751 = !DILocation(line: 2343, column: 23, scope: !8733)
!8752 = !DILocation(line: 2344, column: 5, scope: !8733)
!8753 = !DILocation(line: 2345, column: 1, scope: !8692)
!8754 = distinct !DISubprogram(name: "add_iv_value_candidates", scope: !3, file: !3, line: 2367, type: !8755, scopeLine: 2369, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8755 = !DISubroutineType(types: !8756)
!8756 = !{null, !2530, !2431, !2457}
!8757 = !DILocalVariable(name: "data", arg: 1, scope: !8754, file: !3, line: 2367, type: !2530)
!8758 = !DILocation(line: 2367, column: 46, scope: !8754)
!8759 = !DILocalVariable(name: "iv", arg: 2, scope: !8754, file: !3, line: 2368, type: !2431)
!8760 = !DILocation(line: 2368, column: 16, scope: !8754)
!8761 = !DILocalVariable(name: "use", arg: 3, scope: !8754, file: !3, line: 2368, type: !2457)
!8762 = !DILocation(line: 2368, column: 35, scope: !8754)
!8763 = !DILocalVariable(name: "offset", scope: !8754, file: !3, line: 2370, type: !1088)
!8764 = !DILocation(line: 2370, column: 26, scope: !8754)
!8765 = !DILocalVariable(name: "base", scope: !8754, file: !3, line: 2371, type: !1134)
!8766 = !DILocation(line: 2371, column: 8, scope: !8754)
!8767 = !DILocalVariable(name: "basetype", scope: !8754, file: !3, line: 2372, type: !1134)
!8768 = !DILocation(line: 2372, column: 8, scope: !8754)
!8769 = !DILocation(line: 2374, column: 18, scope: !8754)
!8770 = !DILocation(line: 2374, column: 24, scope: !8754)
!8771 = !DILocation(line: 2374, column: 28, scope: !8754)
!8772 = !DILocation(line: 2374, column: 34, scope: !8754)
!8773 = !DILocation(line: 2374, column: 38, scope: !8754)
!8774 = !DILocation(line: 2374, column: 51, scope: !8754)
!8775 = !DILocation(line: 2374, column: 3, scope: !8754)
!8776 = !DILocation(line: 2379, column: 14, scope: !8754)
!8777 = !DILocation(line: 2379, column: 12, scope: !8754)
!8778 = !DILocation(line: 2380, column: 7, scope: !8779)
!8779 = distinct !DILexicalBlock(scope: !8754, file: !3, line: 2380, column: 7)
!8780 = !DILocation(line: 2380, column: 7, scope: !8754)
!8781 = !DILocation(line: 2381, column: 16, scope: !8779)
!8782 = !DILocation(line: 2381, column: 14, scope: !8779)
!8783 = !DILocation(line: 2381, column: 5, scope: !8779)
!8784 = !DILocation(line: 2382, column: 18, scope: !8754)
!8785 = !DILocation(line: 2382, column: 39, scope: !8754)
!8786 = !DILocation(line: 2382, column: 24, scope: !8754)
!8787 = !DILocation(line: 2383, column: 4, scope: !8754)
!8788 = !DILocation(line: 2383, column: 8, scope: !8754)
!8789 = !DILocation(line: 2383, column: 20, scope: !8754)
!8790 = !DILocation(line: 2382, column: 3, scope: !8754)
!8791 = !DILocation(line: 2387, column: 24, scope: !8754)
!8792 = !DILocation(line: 2387, column: 28, scope: !8754)
!8793 = !DILocation(line: 2387, column: 10, scope: !8754)
!8794 = !DILocation(line: 2387, column: 8, scope: !8754)
!8795 = !DILocation(line: 2388, column: 7, scope: !8796)
!8796 = distinct !DILexicalBlock(scope: !8754, file: !3, line: 2388, column: 7)
!8797 = !DILocation(line: 2389, column: 7, scope: !8796)
!8798 = !DILocation(line: 2389, column: 10, scope: !8796)
!8799 = !DILocation(line: 2389, column: 18, scope: !8796)
!8800 = !DILocation(line: 2389, column: 22, scope: !8796)
!8801 = !DILocation(line: 2389, column: 15, scope: !8796)
!8802 = !DILocation(line: 2388, column: 7, scope: !8754)
!8803 = !DILocation(line: 2390, column: 20, scope: !8796)
!8804 = !DILocation(line: 2390, column: 26, scope: !8796)
!8805 = !DILocation(line: 2390, column: 32, scope: !8796)
!8806 = !DILocation(line: 2390, column: 36, scope: !8796)
!8807 = !DILocation(line: 2390, column: 49, scope: !8796)
!8808 = !DILocation(line: 2390, column: 5, scope: !8796)
!8809 = !DILocation(line: 2391, column: 1, scope: !8754)
!8810 = distinct !DISubprogram(name: "strip_offset", scope: !3, file: !3, line: 2049, type: !8811, scopeLine: 2050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8811 = !DISubroutineType(types: !8812)
!8812 = !{!1134, !1134, !8813}
!8813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!8814 = !DILocalVariable(name: "expr", arg: 1, scope: !8810, file: !3, line: 2049, type: !1134)
!8815 = !DILocation(line: 2049, column: 20, scope: !8810)
!8816 = !DILocalVariable(name: "offset", arg: 2, scope: !8810, file: !3, line: 2049, type: !8813)
!8817 = !DILocation(line: 2049, column: 50, scope: !8810)
!8818 = !DILocation(line: 2051, column: 26, scope: !8810)
!8819 = !DILocation(line: 2051, column: 46, scope: !8810)
!8820 = !DILocation(line: 2051, column: 10, scope: !8810)
!8821 = !DILocation(line: 2051, column: 3, scope: !8810)
!8822 = distinct !DISubprogram(name: "strip_offset_1", scope: !3, file: !3, line: 1892, type: !8823, scopeLine: 1894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!8823 = !DISubroutineType(types: !8824)
!8824 = !{!1134, !1134, !136, !136, !8813}
!8825 = !DILocalVariable(name: "expr", arg: 1, scope: !8822, file: !3, line: 1892, type: !1134)
!8826 = !DILocation(line: 1892, column: 22, scope: !8822)
!8827 = !DILocalVariable(name: "inside_addr", arg: 2, scope: !8822, file: !3, line: 1892, type: !136)
!8828 = !DILocation(line: 1892, column: 33, scope: !8822)
!8829 = !DILocalVariable(name: "top_compref", arg: 3, scope: !8822, file: !3, line: 1892, type: !136)
!8830 = !DILocation(line: 1892, column: 51, scope: !8822)
!8831 = !DILocalVariable(name: "offset", arg: 4, scope: !8822, file: !3, line: 1893, type: !8813)
!8832 = !DILocation(line: 1893, column: 27, scope: !8822)
!8833 = !DILocalVariable(name: "op0", scope: !8822, file: !3, line: 1895, type: !1134)
!8834 = !DILocation(line: 1895, column: 8, scope: !8822)
!8835 = !DILocalVariable(name: "op1", scope: !8822, file: !3, line: 1895, type: !1134)
!8836 = !DILocation(line: 1895, column: 25, scope: !8822)
!8837 = !DILocalVariable(name: "tmp", scope: !8822, file: !3, line: 1895, type: !1134)
!8838 = !DILocation(line: 1895, column: 42, scope: !8822)
!8839 = !DILocalVariable(name: "step", scope: !8822, file: !3, line: 1895, type: !1134)
!8840 = !DILocation(line: 1895, column: 47, scope: !8822)
!8841 = !DILocalVariable(name: "code", scope: !8822, file: !3, line: 1896, type: !159)
!8842 = !DILocation(line: 1896, column: 18, scope: !8822)
!8843 = !DILocalVariable(name: "type", scope: !8822, file: !3, line: 1897, type: !1134)
!8844 = !DILocation(line: 1897, column: 8, scope: !8822)
!8845 = !DILocalVariable(name: "orig_type", scope: !8822, file: !3, line: 1897, type: !1134)
!8846 = !DILocation(line: 1897, column: 14, scope: !8822)
!8847 = !DILocation(line: 1897, column: 26, scope: !8822)
!8848 = !DILocalVariable(name: "off0", scope: !8822, file: !3, line: 1898, type: !1088)
!8849 = !DILocation(line: 1898, column: 26, scope: !8822)
!8850 = !DILocalVariable(name: "off1", scope: !8822, file: !3, line: 1898, type: !1088)
!8851 = !DILocation(line: 1898, column: 32, scope: !8822)
!8852 = !DILocalVariable(name: "st", scope: !8822, file: !3, line: 1898, type: !1088)
!8853 = !DILocation(line: 1898, column: 38, scope: !8822)
!8854 = !DILocalVariable(name: "orig_expr", scope: !8822, file: !3, line: 1899, type: !1134)
!8855 = !DILocation(line: 1899, column: 8, scope: !8822)
!8856 = !DILocation(line: 1899, column: 20, scope: !8822)
!8857 = !DILocation(line: 1901, column: 3, scope: !8822)
!8858 = !DILocation(line: 1903, column: 10, scope: !8822)
!8859 = !DILocation(line: 1903, column: 8, scope: !8822)
!8860 = !DILocation(line: 1904, column: 10, scope: !8822)
!8861 = !DILocation(line: 1904, column: 8, scope: !8822)
!8862 = !DILocation(line: 1905, column: 4, scope: !8822)
!8863 = !DILocation(line: 1905, column: 11, scope: !8822)
!8864 = !DILocation(line: 1907, column: 11, scope: !8822)
!8865 = !DILocation(line: 1907, column: 3, scope: !8822)
!8866 = !DILocation(line: 1910, column: 33, scope: !8867)
!8867 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1910, column: 11)
!8868 = distinct !DILexicalBlock(scope: !8822, file: !3, line: 1908, column: 5)
!8869 = !DILocation(line: 1910, column: 12, scope: !8867)
!8870 = !DILocation(line: 1911, column: 4, scope: !8867)
!8871 = !DILocation(line: 1911, column: 22, scope: !8867)
!8872 = !DILocation(line: 1911, column: 7, scope: !8867)
!8873 = !DILocation(line: 1910, column: 11, scope: !8868)
!8874 = !DILocation(line: 1912, column: 9, scope: !8867)
!8875 = !DILocation(line: 1912, column: 2, scope: !8867)
!8876 = !DILocation(line: 1914, column: 32, scope: !8868)
!8877 = !DILocation(line: 1914, column: 17, scope: !8868)
!8878 = !DILocation(line: 1914, column: 8, scope: !8868)
!8879 = !DILocation(line: 1914, column: 15, scope: !8868)
!8880 = !DILocation(line: 1915, column: 29, scope: !8868)
!8881 = !DILocation(line: 1915, column: 14, scope: !8868)
!8882 = !DILocation(line: 1915, column: 7, scope: !8868)
!8883 = !DILocation(line: 1920, column: 13, scope: !8868)
!8884 = !DILocation(line: 1920, column: 11, scope: !8868)
!8885 = !DILocation(line: 1921, column: 13, scope: !8868)
!8886 = !DILocation(line: 1921, column: 11, scope: !8868)
!8887 = !DILocation(line: 1923, column: 29, scope: !8868)
!8888 = !DILocation(line: 1923, column: 13, scope: !8868)
!8889 = !DILocation(line: 1923, column: 11, scope: !8868)
!8890 = !DILocation(line: 1924, column: 29, scope: !8868)
!8891 = !DILocation(line: 1924, column: 13, scope: !8868)
!8892 = !DILocation(line: 1924, column: 11, scope: !8868)
!8893 = !DILocation(line: 1926, column: 18, scope: !8868)
!8894 = !DILocation(line: 1926, column: 23, scope: !8868)
!8895 = !DILocation(line: 1926, column: 39, scope: !8868)
!8896 = !DILocation(line: 1926, column: 46, scope: !8868)
!8897 = !DILocation(line: 1926, column: 44, scope: !8868)
!8898 = !DILocation(line: 1926, column: 53, scope: !8868)
!8899 = !DILocation(line: 1926, column: 60, scope: !8868)
!8900 = !DILocation(line: 1926, column: 58, scope: !8868)
!8901 = !DILocation(line: 1926, column: 8, scope: !8868)
!8902 = !DILocation(line: 1926, column: 15, scope: !8868)
!8903 = !DILocation(line: 1927, column: 11, scope: !8904)
!8904 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1927, column: 11)
!8905 = !DILocation(line: 1927, column: 18, scope: !8904)
!8906 = !DILocation(line: 1927, column: 15, scope: !8904)
!8907 = !DILocation(line: 1928, column: 4, scope: !8904)
!8908 = !DILocation(line: 1928, column: 7, scope: !8904)
!8909 = !DILocation(line: 1928, column: 14, scope: !8904)
!8910 = !DILocation(line: 1928, column: 11, scope: !8904)
!8911 = !DILocation(line: 1927, column: 11, scope: !8868)
!8912 = !DILocation(line: 1929, column: 9, scope: !8904)
!8913 = !DILocation(line: 1929, column: 2, scope: !8904)
!8914 = !DILocation(line: 1931, column: 26, scope: !8915)
!8915 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1931, column: 11)
!8916 = !DILocation(line: 1931, column: 11, scope: !8915)
!8917 = !DILocation(line: 1931, column: 11, scope: !8868)
!8918 = !DILocation(line: 1932, column: 9, scope: !8915)
!8919 = !DILocation(line: 1932, column: 7, scope: !8915)
!8920 = !DILocation(line: 1932, column: 2, scope: !8915)
!8921 = !DILocation(line: 1933, column: 31, scope: !8922)
!8922 = distinct !DILexicalBlock(scope: !8915, file: !3, line: 1933, column: 16)
!8923 = !DILocation(line: 1933, column: 16, scope: !8922)
!8924 = !DILocation(line: 1933, column: 16, scope: !8915)
!8925 = !DILocation(line: 1935, column: 8, scope: !8926)
!8926 = distinct !DILexicalBlock(scope: !8927, file: !3, line: 1935, column: 8)
!8927 = distinct !DILexicalBlock(scope: !8922, file: !3, line: 1934, column: 2)
!8928 = !DILocation(line: 1935, column: 13, scope: !8926)
!8929 = !DILocation(line: 1935, column: 8, scope: !8927)
!8930 = !DILocation(line: 1936, column: 13, scope: !8926)
!8931 = !DILocation(line: 1936, column: 11, scope: !8926)
!8932 = !DILocation(line: 1936, column: 6, scope: !8926)
!8933 = !DILocation(line: 1938, column: 13, scope: !8926)
!8934 = !DILocation(line: 1938, column: 11, scope: !8926)
!8935 = !DILocation(line: 1939, column: 2, scope: !8927)
!8936 = !DILocation(line: 1941, column: 9, scope: !8922)
!8937 = !DILocation(line: 1941, column: 7, scope: !8922)
!8938 = !DILocation(line: 1943, column: 14, scope: !8868)
!8939 = !DILocation(line: 1943, column: 7, scope: !8868)
!8940 = !DILocation(line: 1946, column: 13, scope: !8868)
!8941 = !DILocation(line: 1946, column: 11, scope: !8868)
!8942 = !DILocation(line: 1947, column: 33, scope: !8943)
!8943 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1947, column: 11)
!8944 = !DILocation(line: 1947, column: 12, scope: !8943)
!8945 = !DILocation(line: 1947, column: 11, scope: !8868)
!8946 = !DILocation(line: 1948, column: 9, scope: !8943)
!8947 = !DILocation(line: 1948, column: 2, scope: !8943)
!8948 = !DILocation(line: 1950, column: 13, scope: !8868)
!8949 = !DILocation(line: 1950, column: 11, scope: !8868)
!8950 = !DILocation(line: 1951, column: 29, scope: !8868)
!8951 = !DILocation(line: 1951, column: 13, scope: !8868)
!8952 = !DILocation(line: 1951, column: 11, scope: !8868)
!8953 = !DILocation(line: 1952, column: 11, scope: !8954)
!8954 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1952, column: 11)
!8955 = !DILocation(line: 1952, column: 18, scope: !8954)
!8956 = !DILocation(line: 1952, column: 15, scope: !8954)
!8957 = !DILocation(line: 1952, column: 11, scope: !8868)
!8958 = !DILocation(line: 1953, column: 9, scope: !8954)
!8959 = !DILocation(line: 1953, column: 2, scope: !8954)
!8960 = !DILocation(line: 1955, column: 17, scope: !8868)
!8961 = !DILocation(line: 1955, column: 39, scope: !8868)
!8962 = !DILocation(line: 1955, column: 24, scope: !8868)
!8963 = !DILocation(line: 1955, column: 22, scope: !8868)
!8964 = !DILocation(line: 1955, column: 8, scope: !8868)
!8965 = !DILocation(line: 1955, column: 15, scope: !8868)
!8966 = !DILocation(line: 1956, column: 26, scope: !8967)
!8967 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1956, column: 11)
!8968 = !DILocation(line: 1956, column: 11, scope: !8967)
!8969 = !DILocation(line: 1956, column: 11, scope: !8868)
!8970 = !DILocation(line: 1957, column: 9, scope: !8967)
!8971 = !DILocation(line: 1957, column: 7, scope: !8967)
!8972 = !DILocation(line: 1957, column: 2, scope: !8967)
!8973 = !DILocation(line: 1959, column: 9, scope: !8967)
!8974 = !DILocation(line: 1959, column: 7, scope: !8967)
!8975 = !DILocation(line: 1961, column: 14, scope: !8868)
!8976 = !DILocation(line: 1961, column: 7, scope: !8868)
!8977 = !DILocation(line: 1965, column: 12, scope: !8978)
!8978 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1965, column: 11)
!8979 = !DILocation(line: 1965, column: 11, scope: !8868)
!8980 = !DILocation(line: 1966, column: 9, scope: !8978)
!8981 = !DILocation(line: 1966, column: 2, scope: !8978)
!8982 = !DILocation(line: 1968, column: 38, scope: !8868)
!8983 = !DILocation(line: 1968, column: 14, scope: !8868)
!8984 = !DILocation(line: 1968, column: 12, scope: !8868)
!8985 = !DILocation(line: 1969, column: 33, scope: !8986)
!8986 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1969, column: 11)
!8987 = !DILocation(line: 1969, column: 12, scope: !8986)
!8988 = !DILocation(line: 1969, column: 11, scope: !8868)
!8989 = !DILocation(line: 1970, column: 2, scope: !8986)
!8990 = !DILocation(line: 1972, column: 27, scope: !8868)
!8991 = !DILocation(line: 1972, column: 12, scope: !8868)
!8992 = !DILocation(line: 1972, column: 10, scope: !8868)
!8993 = !DILocation(line: 1973, column: 13, scope: !8868)
!8994 = !DILocation(line: 1973, column: 11, scope: !8868)
!8995 = !DILocation(line: 1974, column: 29, scope: !8868)
!8996 = !DILocation(line: 1974, column: 13, scope: !8868)
!8997 = !DILocation(line: 1974, column: 11, scope: !8868)
!8998 = !DILocation(line: 1975, column: 17, scope: !8868)
!8999 = !DILocation(line: 1975, column: 24, scope: !8868)
!9000 = !DILocation(line: 1975, column: 22, scope: !8868)
!9001 = !DILocation(line: 1975, column: 8, scope: !8868)
!9002 = !DILocation(line: 1975, column: 15, scope: !8868)
!9003 = !DILocation(line: 1977, column: 11, scope: !9004)
!9004 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1977, column: 11)
!9005 = !DILocation(line: 1978, column: 4, scope: !9004)
!9006 = !DILocation(line: 1978, column: 22, scope: !9004)
!9007 = !DILocation(line: 1978, column: 7, scope: !9004)
!9008 = !DILocation(line: 1977, column: 11, scope: !8868)
!9009 = !DILocation(line: 1981, column: 10, scope: !9010)
!9010 = distinct !DILexicalBlock(scope: !9004, file: !3, line: 1979, column: 2)
!9011 = !DILocation(line: 1981, column: 8, scope: !9010)
!9012 = !DILocation(line: 1982, column: 26, scope: !9010)
!9013 = !DILocation(line: 1982, column: 31, scope: !9010)
!9014 = !DILocation(line: 1982, column: 44, scope: !9010)
!9015 = !DILocation(line: 1982, column: 10, scope: !9010)
!9016 = !DILocation(line: 1982, column: 8, scope: !9010)
!9017 = !DILocation(line: 1983, column: 15, scope: !9010)
!9018 = !DILocation(line: 1983, column: 5, scope: !9010)
!9019 = !DILocation(line: 1983, column: 12, scope: !9010)
!9020 = !DILocation(line: 1984, column: 11, scope: !9010)
!9021 = !DILocation(line: 1984, column: 4, scope: !9010)
!9022 = !DILocation(line: 1986, column: 7, scope: !8868)
!9023 = !DILocation(line: 1989, column: 12, scope: !9024)
!9024 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1989, column: 11)
!9025 = !DILocation(line: 1989, column: 11, scope: !8868)
!9026 = !DILocation(line: 1990, column: 9, scope: !9024)
!9027 = !DILocation(line: 1990, column: 2, scope: !9024)
!9028 = !DILocation(line: 1992, column: 41, scope: !8868)
!9029 = !DILocation(line: 1992, column: 13, scope: !8868)
!9030 = !DILocation(line: 1992, column: 11, scope: !8868)
!9031 = !DILocation(line: 1993, column: 11, scope: !9032)
!9032 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 1993, column: 11)
!9033 = !DILocation(line: 1994, column: 4, scope: !9032)
!9034 = !DILocation(line: 1994, column: 28, scope: !9032)
!9035 = !DILocation(line: 1994, column: 7, scope: !9032)
!9036 = !DILocation(line: 1993, column: 11, scope: !8868)
!9037 = !DILocation(line: 1997, column: 10, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !9032, file: !3, line: 1995, column: 2)
!9039 = !DILocation(line: 1997, column: 8, scope: !9038)
!9040 = !DILocation(line: 1998, column: 26, scope: !9038)
!9041 = !DILocation(line: 1998, column: 31, scope: !9038)
!9042 = !DILocation(line: 1998, column: 44, scope: !9038)
!9043 = !DILocation(line: 1998, column: 10, scope: !9038)
!9044 = !DILocation(line: 1998, column: 8, scope: !9038)
!9045 = !DILocation(line: 1999, column: 14, scope: !9038)
!9046 = !DILocation(line: 1999, column: 36, scope: !9038)
!9047 = !DILocation(line: 1999, column: 21, scope: !9038)
!9048 = !DILocation(line: 1999, column: 19, scope: !9038)
!9049 = !DILocation(line: 1999, column: 5, scope: !9038)
!9050 = !DILocation(line: 1999, column: 12, scope: !9038)
!9051 = !DILocation(line: 2000, column: 11, scope: !9038)
!9052 = !DILocation(line: 2000, column: 4, scope: !9038)
!9053 = !DILocation(line: 2002, column: 7, scope: !8868)
!9054 = !DILocation(line: 2005, column: 13, scope: !8868)
!9055 = !DILocation(line: 2005, column: 11, scope: !8868)
!9056 = !DILocation(line: 2006, column: 29, scope: !8868)
!9057 = !DILocation(line: 2006, column: 13, scope: !8868)
!9058 = !DILocation(line: 2006, column: 11, scope: !8868)
!9059 = !DILocation(line: 2007, column: 18, scope: !8868)
!9060 = !DILocation(line: 2007, column: 8, scope: !8868)
!9061 = !DILocation(line: 2007, column: 15, scope: !8868)
!9062 = !DILocation(line: 2009, column: 11, scope: !9063)
!9063 = distinct !DILexicalBlock(scope: !8868, file: !3, line: 2009, column: 11)
!9064 = !DILocation(line: 2009, column: 18, scope: !9063)
!9065 = !DILocation(line: 2009, column: 15, scope: !9063)
!9066 = !DILocation(line: 2009, column: 11, scope: !8868)
!9067 = !DILocation(line: 2010, column: 9, scope: !9063)
!9068 = !DILocation(line: 2010, column: 2, scope: !9063)
!9069 = !DILocation(line: 2012, column: 14, scope: !8868)
!9070 = !DILocation(line: 2012, column: 12, scope: !8868)
!9071 = !DILocation(line: 2013, column: 14, scope: !8868)
!9072 = !DILocation(line: 2013, column: 7, scope: !8868)
!9073 = !DILocation(line: 2016, column: 19, scope: !8868)
!9074 = !DILocation(line: 2017, column: 7, scope: !8868)
!9075 = !DILocation(line: 2020, column: 14, scope: !8868)
!9076 = !DILocation(line: 2020, column: 7, scope: !8868)
!9077 = !DILocation(line: 2025, column: 9, scope: !8822)
!9078 = !DILocation(line: 2025, column: 7, scope: !8822)
!9079 = !DILocation(line: 2026, column: 25, scope: !8822)
!9080 = !DILocation(line: 2026, column: 30, scope: !8822)
!9081 = !DILocation(line: 2026, column: 9, scope: !8822)
!9082 = !DILocation(line: 2026, column: 7, scope: !8822)
!9083 = !DILocation(line: 2027, column: 14, scope: !8822)
!9084 = !DILocation(line: 2027, column: 4, scope: !8822)
!9085 = !DILocation(line: 2027, column: 11, scope: !8822)
!9086 = !DILocation(line: 2029, column: 7, scope: !9087)
!9087 = distinct !DILexicalBlock(scope: !8822, file: !3, line: 2029, column: 7)
!9088 = !DILocation(line: 2029, column: 14, scope: !9087)
!9089 = !DILocation(line: 2029, column: 11, scope: !9087)
!9090 = !DILocation(line: 2030, column: 7, scope: !9087)
!9091 = !DILocation(line: 2030, column: 12, scope: !9087)
!9092 = !DILocation(line: 2030, column: 16, scope: !9087)
!9093 = !DILocation(line: 2030, column: 19, scope: !9087)
!9094 = !DILocation(line: 2030, column: 26, scope: !9087)
!9095 = !DILocation(line: 2030, column: 23, scope: !9087)
!9096 = !DILocation(line: 2029, column: 7, scope: !8822)
!9097 = !DILocation(line: 2031, column: 12, scope: !9087)
!9098 = !DILocation(line: 2031, column: 5, scope: !9087)
!9099 = !DILocation(line: 2033, column: 10, scope: !8822)
!9100 = !DILocation(line: 2033, column: 8, scope: !8822)
!9101 = !DILocation(line: 2034, column: 28, scope: !8822)
!9102 = !DILocation(line: 2034, column: 3, scope: !8822)
!9103 = !DILocation(line: 2034, column: 26, scope: !8822)
!9104 = !DILocation(line: 2035, column: 7, scope: !9105)
!9105 = distinct !DILexicalBlock(scope: !8822, file: !3, line: 2035, column: 7)
!9106 = !DILocation(line: 2035, column: 7, scope: !8822)
!9107 = !DILocation(line: 2036, column: 30, scope: !9105)
!9108 = !DILocation(line: 2036, column: 5, scope: !9105)
!9109 = !DILocation(line: 2036, column: 28, scope: !9105)
!9110 = !DILocation(line: 2041, column: 10, scope: !8822)
!9111 = !DILocation(line: 2041, column: 8, scope: !8822)
!9112 = !DILocation(line: 2043, column: 10, scope: !8822)
!9113 = !DILocation(line: 2043, column: 3, scope: !8822)
!9114 = !DILocation(line: 2044, column: 1, scope: !8822)
!9115 = distinct !DISubprogram(name: "gimple_uid", scope: !574, file: !574, line: 1265, type: !3227, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9116 = !DILocalVariable(name: "g", arg: 1, scope: !9115, file: !574, line: 1265, type: !3158)
!9117 = !DILocation(line: 1265, column: 26, scope: !9115)
!9118 = !DILocation(line: 1267, column: 10, scope: !9115)
!9119 = !DILocation(line: 1267, column: 13, scope: !9115)
!9120 = !DILocation(line: 1267, column: 20, scope: !9115)
!9121 = !DILocation(line: 1267, column: 3, scope: !9115)
!9122 = distinct !DISubprogram(name: "autoinc_possible_for_pair", scope: !3, file: !3, line: 4193, type: !9123, scopeLine: 4195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9123 = !DISubroutineType(types: !9124)
!9124 = !{!136, !2530, !2457, !2472}
!9125 = !DILocalVariable(name: "data", arg: 1, scope: !9122, file: !3, line: 4193, type: !2530)
!9126 = !DILocation(line: 4193, column: 48, scope: !9122)
!9127 = !DILocalVariable(name: "use", arg: 2, scope: !9122, file: !3, line: 4193, type: !2457)
!9128 = !DILocation(line: 4193, column: 69, scope: !9122)
!9129 = !DILocalVariable(name: "cand", arg: 3, scope: !9122, file: !3, line: 4194, type: !2472)
!9130 = !DILocation(line: 4194, column: 23, scope: !9122)
!9131 = !DILocalVariable(name: "depends_on", scope: !9122, file: !3, line: 4196, type: !1852)
!9132 = !DILocation(line: 4196, column: 10, scope: !9122)
!9133 = !DILocalVariable(name: "can_autoinc", scope: !9122, file: !3, line: 4197, type: !136)
!9134 = !DILocation(line: 4197, column: 8, scope: !9122)
!9135 = !DILocalVariable(name: "cost", scope: !9122, file: !3, line: 4198, type: !2487)
!9136 = !DILocation(line: 4198, column: 13, scope: !9122)
!9137 = !DILocation(line: 4200, column: 7, scope: !9138)
!9138 = distinct !DILexicalBlock(scope: !9122, file: !3, line: 4200, column: 7)
!9139 = !DILocation(line: 4200, column: 12, scope: !9138)
!9140 = !DILocation(line: 4200, column: 17, scope: !9138)
!9141 = !DILocation(line: 4200, column: 7, scope: !9122)
!9142 = !DILocation(line: 4201, column: 5, scope: !9138)
!9143 = !DILocation(line: 4203, column: 32, scope: !9122)
!9144 = !DILocation(line: 4203, column: 38, scope: !9122)
!9145 = !DILocation(line: 4203, column: 43, scope: !9122)
!9146 = !DILocation(line: 4203, column: 10, scope: !9122)
!9147 = !DILocation(line: 4206, column: 3, scope: !9122)
!9148 = !DILocation(line: 4208, column: 11, scope: !9122)
!9149 = !DILocation(line: 4208, column: 34, scope: !9122)
!9150 = !DILocation(line: 4208, column: 37, scope: !9122)
!9151 = !DILocation(line: 0, scope: !9122)
!9152 = !DILocation(line: 4208, column: 10, scope: !9122)
!9153 = !DILocation(line: 4208, column: 3, scope: !9122)
!9154 = !DILocation(line: 4209, column: 1, scope: !9122)
!9155 = distinct !DISubprogram(name: "get_computation_cost", scope: !3, file: !3, line: 3884, type: !9156, scopeLine: 3887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9156 = !DISubroutineType(types: !9157)
!9157 = !{!2487, !2530, !2457, !2472, !136, !2550, !2421}
!9158 = !DILocalVariable(name: "data", arg: 1, scope: !9155, file: !3, line: 3884, type: !2530)
!9159 = !DILocation(line: 3884, column: 43, scope: !9155)
!9160 = !DILocalVariable(name: "use", arg: 2, scope: !9155, file: !3, line: 3885, type: !2457)
!9161 = !DILocation(line: 3885, column: 24, scope: !9155)
!9162 = !DILocalVariable(name: "cand", arg: 3, scope: !9155, file: !3, line: 3885, type: !2472)
!9163 = !DILocation(line: 3885, column: 45, scope: !9155)
!9164 = !DILocalVariable(name: "address_p", arg: 4, scope: !9155, file: !3, line: 3886, type: !136)
!9165 = !DILocation(line: 3886, column: 14, scope: !9155)
!9166 = !DILocalVariable(name: "depends_on", arg: 5, scope: !9155, file: !3, line: 3886, type: !2550)
!9167 = !DILocation(line: 3886, column: 33, scope: !9155)
!9168 = !DILocalVariable(name: "can_autoinc", arg: 6, scope: !9155, file: !3, line: 3886, type: !2421)
!9169 = !DILocation(line: 3886, column: 51, scope: !9155)
!9170 = !DILocation(line: 3888, column: 35, scope: !9155)
!9171 = !DILocation(line: 3889, column: 7, scope: !9155)
!9172 = !DILocation(line: 3889, column: 12, scope: !9155)
!9173 = !DILocation(line: 3889, column: 18, scope: !9155)
!9174 = !DILocation(line: 3889, column: 29, scope: !9155)
!9175 = !DILocation(line: 3889, column: 41, scope: !9155)
!9176 = !DILocation(line: 3889, column: 46, scope: !9155)
!9177 = !DILocation(line: 3890, column: 7, scope: !9155)
!9178 = !DILocation(line: 3888, column: 10, scope: !9155)
!9179 = !DILocation(line: 3888, column: 3, scope: !9155)
!9180 = distinct !DISubprogram(name: "infinite_cost_p", scope: !3, file: !3, line: 2545, type: !9181, scopeLine: 2546, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9181 = !DISubroutineType(types: !9182)
!9182 = !{!136, !2487}
!9183 = !DILocalVariable(name: "cost", arg: 1, scope: !9180, file: !3, line: 2545, type: !2487)
!9184 = !DILocation(line: 2545, column: 28, scope: !9180)
!9185 = !DILocation(line: 2547, column: 15, scope: !9180)
!9186 = !DILocation(line: 2547, column: 20, scope: !9180)
!9187 = !DILocation(line: 2547, column: 10, scope: !9180)
!9188 = !DILocation(line: 2547, column: 3, scope: !9180)
!9189 = distinct !DISubprogram(name: "get_computation_cost_at", scope: !3, file: !3, line: 3697, type: !9190, scopeLine: 3701, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9190 = !DISubroutineType(types: !9191)
!9191 = !{!2487, !2530, !2457, !2472, !136, !2550, !1436, !2421}
!9192 = !DILocalVariable(name: "data", arg: 1, scope: !9189, file: !3, line: 3697, type: !2530)
!9193 = !DILocation(line: 3697, column: 46, scope: !9189)
!9194 = !DILocalVariable(name: "use", arg: 2, scope: !9189, file: !3, line: 3698, type: !2457)
!9195 = !DILocation(line: 3698, column: 20, scope: !9189)
!9196 = !DILocalVariable(name: "cand", arg: 3, scope: !9189, file: !3, line: 3698, type: !2472)
!9197 = !DILocation(line: 3698, column: 41, scope: !9189)
!9198 = !DILocalVariable(name: "address_p", arg: 4, scope: !9189, file: !3, line: 3699, type: !136)
!9199 = !DILocation(line: 3699, column: 10, scope: !9189)
!9200 = !DILocalVariable(name: "depends_on", arg: 5, scope: !9189, file: !3, line: 3699, type: !2550)
!9201 = !DILocation(line: 3699, column: 29, scope: !9189)
!9202 = !DILocalVariable(name: "at", arg: 6, scope: !9189, file: !3, line: 3699, type: !1436)
!9203 = !DILocation(line: 3699, column: 48, scope: !9189)
!9204 = !DILocalVariable(name: "can_autoinc", arg: 7, scope: !9189, file: !3, line: 3700, type: !2421)
!9205 = !DILocation(line: 3700, column: 11, scope: !9189)
!9206 = !DILocalVariable(name: "ubase", scope: !9189, file: !3, line: 3702, type: !1134)
!9207 = !DILocation(line: 3702, column: 8, scope: !9189)
!9208 = !DILocation(line: 3702, column: 16, scope: !9189)
!9209 = !DILocation(line: 3702, column: 21, scope: !9189)
!9210 = !DILocation(line: 3702, column: 25, scope: !9189)
!9211 = !DILocalVariable(name: "ustep", scope: !9189, file: !3, line: 3702, type: !1134)
!9212 = !DILocation(line: 3702, column: 31, scope: !9189)
!9213 = !DILocation(line: 3702, column: 39, scope: !9189)
!9214 = !DILocation(line: 3702, column: 44, scope: !9189)
!9215 = !DILocation(line: 3702, column: 48, scope: !9189)
!9216 = !DILocalVariable(name: "cbase", scope: !9189, file: !3, line: 3703, type: !1134)
!9217 = !DILocation(line: 3703, column: 8, scope: !9189)
!9218 = !DILocalVariable(name: "cstep", scope: !9189, file: !3, line: 3703, type: !1134)
!9219 = !DILocation(line: 3703, column: 15, scope: !9189)
!9220 = !DILocalVariable(name: "utype", scope: !9189, file: !3, line: 3704, type: !1134)
!9221 = !DILocation(line: 3704, column: 8, scope: !9189)
!9222 = !DILocation(line: 3704, column: 16, scope: !9189)
!9223 = !DILocalVariable(name: "ctype", scope: !9189, file: !3, line: 3704, type: !1134)
!9224 = !DILocation(line: 3704, column: 35, scope: !9189)
!9225 = !DILocalVariable(name: "cstepi", scope: !9189, file: !3, line: 3705, type: !1088)
!9226 = !DILocation(line: 3705, column: 26, scope: !9189)
!9227 = !DILocalVariable(name: "offset", scope: !9189, file: !3, line: 3705, type: !1088)
!9228 = !DILocation(line: 3705, column: 34, scope: !9189)
!9229 = !DILocalVariable(name: "ratio", scope: !9189, file: !3, line: 3706, type: !7)
!9230 = !DILocation(line: 3706, column: 17, scope: !9189)
!9231 = !DILocalVariable(name: "aratio", scope: !9189, file: !3, line: 3706, type: !7)
!9232 = !DILocation(line: 3706, column: 24, scope: !9189)
!9233 = !DILocalVariable(name: "var_present", scope: !9189, file: !3, line: 3707, type: !136)
!9234 = !DILocation(line: 3707, column: 8, scope: !9189)
!9235 = !DILocalVariable(name: "symbol_present", scope: !9189, file: !3, line: 3707, type: !136)
!9236 = !DILocation(line: 3707, column: 21, scope: !9189)
!9237 = !DILocalVariable(name: "stmt_is_after_inc", scope: !9189, file: !3, line: 3707, type: !136)
!9238 = !DILocation(line: 3707, column: 37, scope: !9189)
!9239 = !DILocalVariable(name: "cost", scope: !9189, file: !3, line: 3708, type: !2487)
!9240 = !DILocation(line: 3708, column: 13, scope: !9189)
!9241 = !DILocalVariable(name: "rat", scope: !9189, file: !3, line: 3709, type: !1182)
!9242 = !DILocation(line: 3709, column: 14, scope: !9189)
!9243 = !DILocalVariable(name: "speed", scope: !9189, file: !3, line: 3710, type: !136)
!9244 = !DILocation(line: 3710, column: 8, scope: !9189)
!9245 = !DILocation(line: 3710, column: 52, scope: !9189)
!9246 = !DILocation(line: 3710, column: 41, scope: !9189)
!9247 = !DILocation(line: 3710, column: 16, scope: !9189)
!9248 = !DILocation(line: 3712, column: 4, scope: !9189)
!9249 = !DILocation(line: 3712, column: 15, scope: !9189)
!9250 = !DILocation(line: 3715, column: 8, scope: !9251)
!9251 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3715, column: 7)
!9252 = !DILocation(line: 3715, column: 14, scope: !9251)
!9253 = !DILocation(line: 3715, column: 7, scope: !9189)
!9254 = !DILocation(line: 3716, column: 12, scope: !9251)
!9255 = !DILocation(line: 3716, column: 5, scope: !9251)
!9256 = !DILocation(line: 3718, column: 11, scope: !9189)
!9257 = !DILocation(line: 3718, column: 17, scope: !9189)
!9258 = !DILocation(line: 3718, column: 21, scope: !9189)
!9259 = !DILocation(line: 3718, column: 9, scope: !9189)
!9260 = !DILocation(line: 3719, column: 11, scope: !9189)
!9261 = !DILocation(line: 3719, column: 17, scope: !9189)
!9262 = !DILocation(line: 3719, column: 21, scope: !9189)
!9263 = !DILocation(line: 3719, column: 9, scope: !9189)
!9264 = !DILocation(line: 3720, column: 11, scope: !9189)
!9265 = !DILocation(line: 3720, column: 9, scope: !9189)
!9266 = !DILocation(line: 3722, column: 7, scope: !9267)
!9267 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3722, column: 7)
!9268 = !DILocation(line: 3722, column: 32, scope: !9267)
!9269 = !DILocation(line: 3722, column: 30, scope: !9267)
!9270 = !DILocation(line: 3722, column: 7, scope: !9189)
!9271 = !DILocation(line: 3725, column: 14, scope: !9272)
!9272 = distinct !DILexicalBlock(scope: !9267, file: !3, line: 3723, column: 5)
!9273 = !DILocation(line: 3725, column: 7, scope: !9272)
!9274 = !DILocation(line: 3728, column: 7, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3728, column: 7)
!9276 = !DILocation(line: 3728, column: 7, scope: !9189)
!9277 = !DILocation(line: 3735, column: 11, scope: !9278)
!9278 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 3735, column: 11)
!9279 = distinct !DILexicalBlock(scope: !9275, file: !3, line: 3729, column: 5)
!9280 = !DILocation(line: 3735, column: 16, scope: !9278)
!9281 = !DILocation(line: 3735, column: 20, scope: !9278)
!9282 = !DILocation(line: 3736, column: 4, scope: !9278)
!9283 = !DILocation(line: 3736, column: 7, scope: !9278)
!9284 = !DILocation(line: 3736, column: 13, scope: !9278)
!9285 = !DILocation(line: 3736, column: 17, scope: !9278)
!9286 = !DILocation(line: 3737, column: 4, scope: !9278)
!9287 = !DILocation(line: 3737, column: 25, scope: !9278)
!9288 = !DILocation(line: 3737, column: 30, scope: !9278)
!9289 = !DILocation(line: 3737, column: 34, scope: !9278)
!9290 = !DILocation(line: 3737, column: 47, scope: !9278)
!9291 = !DILocation(line: 3737, column: 53, scope: !9278)
!9292 = !DILocation(line: 3737, column: 57, scope: !9278)
!9293 = !DILocation(line: 3737, column: 8, scope: !9278)
!9294 = !DILocation(line: 3735, column: 11, scope: !9279)
!9295 = !DILocation(line: 3738, column: 9, scope: !9278)
!9296 = !DILocation(line: 3738, column: 2, scope: !9278)
!9297 = !DILocation(line: 3739, column: 5, scope: !9279)
!9298 = !DILocation(line: 3741, column: 7, scope: !9299)
!9299 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3741, column: 7)
!9300 = !DILocation(line: 3741, column: 32, scope: !9299)
!9301 = !DILocation(line: 3741, column: 30, scope: !9299)
!9302 = !DILocation(line: 3741, column: 7, scope: !9189)
!9303 = !DILocation(line: 3744, column: 7, scope: !9304)
!9304 = distinct !DILexicalBlock(scope: !9299, file: !3, line: 3742, column: 5)
!9305 = !DILocation(line: 3753, column: 28, scope: !9306)
!9306 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3753, column: 7)
!9307 = !DILocation(line: 3753, column: 7, scope: !9306)
!9308 = !DILocation(line: 3753, column: 7, scope: !9189)
!9309 = !DILocation(line: 3754, column: 29, scope: !9306)
!9310 = !DILocation(line: 3754, column: 14, scope: !9306)
!9311 = !DILocation(line: 3754, column: 12, scope: !9306)
!9312 = !DILocation(line: 3754, column: 5, scope: !9306)
!9313 = !DILocation(line: 3756, column: 12, scope: !9306)
!9314 = !DILocation(line: 3758, column: 30, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3758, column: 7)
!9316 = !DILocation(line: 3758, column: 37, scope: !9315)
!9317 = !DILocation(line: 3758, column: 8, scope: !9315)
!9318 = !DILocation(line: 3758, column: 7, scope: !9189)
!9319 = !DILocation(line: 3759, column: 12, scope: !9315)
!9320 = !DILocation(line: 3759, column: 5, scope: !9315)
!9321 = !DILocation(line: 3761, column: 7, scope: !9322)
!9322 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3761, column: 7)
!9323 = !DILocation(line: 3761, column: 7, scope: !9189)
!9324 = !DILocation(line: 3762, column: 13, scope: !9322)
!9325 = !DILocation(line: 3762, column: 11, scope: !9322)
!9326 = !DILocation(line: 3762, column: 5, scope: !9322)
!9327 = !DILocation(line: 3764, column: 12, scope: !9322)
!9328 = !DILocation(line: 3764, column: 5, scope: !9322)
!9329 = !DILocation(line: 3766, column: 3, scope: !9189)
!9330 = !DILocation(line: 3767, column: 11, scope: !9189)
!9331 = !DILocation(line: 3767, column: 9, scope: !9189)
!9332 = !DILocation(line: 3776, column: 28, scope: !9333)
!9333 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3776, column: 7)
!9334 = !DILocation(line: 3776, column: 7, scope: !9333)
!9335 = !DILocation(line: 3776, column: 7, scope: !9189)
!9336 = !DILocation(line: 3778, column: 18, scope: !9337)
!9337 = distinct !DILexicalBlock(scope: !9333, file: !3, line: 3777, column: 5)
!9338 = !DILocation(line: 3778, column: 16, scope: !9337)
!9339 = !DILocation(line: 3778, column: 41, scope: !9337)
!9340 = !DILocation(line: 3778, column: 26, scope: !9337)
!9341 = !DILocation(line: 3778, column: 24, scope: !9337)
!9342 = !DILocation(line: 3778, column: 14, scope: !9337)
!9343 = !DILocation(line: 3779, column: 31, scope: !9337)
!9344 = !DILocation(line: 3780, column: 10, scope: !9337)
!9345 = !DILocation(line: 3780, column: 32, scope: !9337)
!9346 = !DILocation(line: 3780, column: 17, scope: !9337)
!9347 = !DILocation(line: 3782, column: 10, scope: !9337)
!9348 = !DILocation(line: 3779, column: 14, scope: !9337)
!9349 = !DILocation(line: 3783, column: 5, scope: !9337)
!9350 = !DILocation(line: 3784, column: 12, scope: !9351)
!9351 = distinct !DILexicalBlock(scope: !9333, file: !3, line: 3784, column: 12)
!9352 = !DILocation(line: 3784, column: 18, scope: !9351)
!9353 = !DILocation(line: 3784, column: 12, scope: !9333)
!9354 = !DILocation(line: 3786, column: 31, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9351, file: !3, line: 3785, column: 5)
!9356 = !DILocation(line: 3787, column: 10, scope: !9355)
!9357 = !DILocation(line: 3787, column: 17, scope: !9355)
!9358 = !DILocation(line: 3789, column: 10, scope: !9355)
!9359 = !DILocation(line: 3786, column: 14, scope: !9355)
!9360 = !DILocation(line: 3790, column: 5, scope: !9355)
!9361 = !DILocation(line: 3791, column: 12, scope: !9362)
!9362 = distinct !DILexicalBlock(scope: !9351, file: !3, line: 3791, column: 12)
!9363 = !DILocation(line: 3792, column: 5, scope: !9362)
!9364 = !DILocation(line: 3792, column: 9, scope: !9362)
!9365 = !DILocation(line: 3793, column: 5, scope: !9362)
!9366 = !DILocation(line: 3794, column: 4, scope: !9362)
!9367 = !DILocation(line: 3794, column: 11, scope: !9362)
!9368 = !DILocation(line: 3795, column: 4, scope: !9362)
!9369 = !DILocation(line: 3793, column: 8, scope: !9362)
!9370 = !DILocation(line: 3791, column: 12, scope: !9351)
!9371 = !DILocation(line: 3798, column: 4, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9362, file: !3, line: 3796, column: 5)
!9373 = !DILocation(line: 3798, column: 2, scope: !9372)
!9374 = !DILocation(line: 3799, column: 31, scope: !9372)
!9375 = !DILocation(line: 3800, column: 10, scope: !9372)
!9376 = !DILocation(line: 3800, column: 17, scope: !9372)
!9377 = !DILocation(line: 3802, column: 10, scope: !9372)
!9378 = !DILocation(line: 3799, column: 14, scope: !9372)
!9379 = !DILocation(line: 3803, column: 5, scope: !9372)
!9380 = !DILocation(line: 3806, column: 30, scope: !9381)
!9381 = distinct !DILexicalBlock(scope: !9362, file: !3, line: 3805, column: 5)
!9382 = !DILocation(line: 3806, column: 36, scope: !9381)
!9383 = !DILocation(line: 3806, column: 43, scope: !9381)
!9384 = !DILocation(line: 3806, column: 14, scope: !9381)
!9385 = !DILocation(line: 3807, column: 30, scope: !9381)
!9386 = !DILocation(line: 3807, column: 49, scope: !9381)
!9387 = !DILocation(line: 3807, column: 55, scope: !9381)
!9388 = !DILocation(line: 3807, column: 20, scope: !9381)
!9389 = !DILocation(line: 3807, column: 12, scope: !9381)
!9390 = !DILocation(line: 3807, column: 17, scope: !9381)
!9391 = !DILocation(line: 3809, column: 21, scope: !9381)
!9392 = !DILocation(line: 3810, column: 7, scope: !9381)
!9393 = !DILocation(line: 3810, column: 29, scope: !9381)
!9394 = !DILocation(line: 3810, column: 14, scope: !9381)
!9395 = !DILocation(line: 3812, column: 16, scope: !9381)
!9396 = !DILocation(line: 3809, column: 4, scope: !9381)
!9397 = !DILocation(line: 3808, column: 14, scope: !9381)
!9398 = !DILocation(line: 3817, column: 45, scope: !9189)
!9399 = !DILocation(line: 3817, column: 51, scope: !9189)
!9400 = !DILocation(line: 3817, column: 65, scope: !9189)
!9401 = !DILocation(line: 3817, column: 71, scope: !9189)
!9402 = !DILocation(line: 3817, column: 23, scope: !9189)
!9403 = !DILocation(line: 3817, column: 21, scope: !9189)
!9404 = !DILocation(line: 3818, column: 7, scope: !9405)
!9405 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3818, column: 7)
!9406 = !DILocation(line: 3818, column: 7, scope: !9189)
!9407 = !DILocation(line: 3819, column: 15, scope: !9405)
!9408 = !DILocation(line: 3819, column: 23, scope: !9405)
!9409 = !DILocation(line: 3819, column: 21, scope: !9405)
!9410 = !DILocation(line: 3819, column: 12, scope: !9405)
!9411 = !DILocation(line: 3819, column: 5, scope: !9405)
!9412 = !DILocation(line: 3824, column: 7, scope: !9413)
!9413 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3824, column: 7)
!9414 = !DILocation(line: 3824, column: 7, scope: !9189)
!9415 = !DILocation(line: 3826, column: 27, scope: !9413)
!9416 = !DILocation(line: 3826, column: 43, scope: !9413)
!9417 = !DILocation(line: 3827, column: 6, scope: !9413)
!9418 = !DILocation(line: 3827, column: 14, scope: !9413)
!9419 = !DILocation(line: 3827, column: 21, scope: !9413)
!9420 = !DILocation(line: 3828, column: 6, scope: !9413)
!9421 = !DILocation(line: 3829, column: 6, scope: !9413)
!9422 = !DILocation(line: 3830, column: 6, scope: !9413)
!9423 = !DILocation(line: 3830, column: 13, scope: !9413)
!9424 = !DILocation(line: 3831, column: 6, scope: !9413)
!9425 = !DILocation(line: 3826, column: 9, scope: !9413)
!9426 = !DILocation(line: 3825, column: 12, scope: !9413)
!9427 = !DILocation(line: 3825, column: 5, scope: !9413)
!9428 = !DILocation(line: 3834, column: 8, scope: !9429)
!9429 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3834, column: 7)
!9430 = !DILocation(line: 3834, column: 23, scope: !9429)
!9431 = !DILocation(line: 3834, column: 27, scope: !9429)
!9432 = !DILocation(line: 3834, column: 39, scope: !9429)
!9433 = !DILocation(line: 3834, column: 43, scope: !9429)
!9434 = !DILocation(line: 3834, column: 7, scope: !9189)
!9435 = !DILocation(line: 3836, column: 11, scope: !9436)
!9436 = distinct !DILexicalBlock(scope: !9437, file: !3, line: 3836, column: 11)
!9437 = distinct !DILexicalBlock(scope: !9429, file: !3, line: 3835, column: 5)
!9438 = !DILocation(line: 3836, column: 17, scope: !9436)
!9439 = !DILocation(line: 3836, column: 11, scope: !9437)
!9440 = !DILocation(line: 3837, column: 33, scope: !9436)
!9441 = !DILocation(line: 3837, column: 40, scope: !9436)
!9442 = !DILocation(line: 3837, column: 59, scope: !9436)
!9443 = !DILocation(line: 3837, column: 15, scope: !9436)
!9444 = !DILocation(line: 3837, column: 7, scope: !9436)
!9445 = !DILocation(line: 3837, column: 12, scope: !9436)
!9446 = !DILocation(line: 3837, column: 2, scope: !9436)
!9447 = !DILocation(line: 3838, column: 14, scope: !9437)
!9448 = !DILocation(line: 3838, column: 7, scope: !9437)
!9449 = !DILocation(line: 3843, column: 7, scope: !9450)
!9450 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3843, column: 7)
!9451 = !DILocation(line: 3843, column: 19, scope: !9450)
!9452 = !DILocation(line: 3843, column: 23, scope: !9450)
!9453 = !DILocation(line: 3843, column: 38, scope: !9450)
!9454 = !DILocation(line: 3843, column: 41, scope: !9450)
!9455 = !DILocation(line: 3843, column: 7, scope: !9189)
!9456 = !DILocation(line: 3844, column: 28, scope: !9450)
!9457 = !DILocation(line: 3844, column: 47, scope: !9450)
!9458 = !DILocation(line: 3844, column: 18, scope: !9450)
!9459 = !DILocation(line: 3845, column: 4, scope: !9450)
!9460 = !DILocation(line: 3844, column: 10, scope: !9450)
!9461 = !DILocation(line: 3844, column: 15, scope: !9450)
!9462 = !DILocation(line: 3844, column: 5, scope: !9450)
!9463 = !DILocation(line: 3849, column: 7, scope: !9464)
!9464 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3849, column: 7)
!9465 = !DILocation(line: 3849, column: 7, scope: !9189)
!9466 = !DILocation(line: 3850, column: 10, scope: !9464)
!9467 = !DILocation(line: 3850, column: 20, scope: !9464)
!9468 = !DILocation(line: 3850, column: 5, scope: !9464)
!9469 = !DILocation(line: 3852, column: 26, scope: !9189)
!9470 = !DILocation(line: 3852, column: 45, scope: !9189)
!9471 = !DILocation(line: 3852, column: 16, scope: !9189)
!9472 = !DILocation(line: 3852, column: 8, scope: !9189)
!9473 = !DILocation(line: 3852, column: 13, scope: !9189)
!9474 = !DILocation(line: 3854, column: 12, scope: !9189)
!9475 = !DILocation(line: 3854, column: 18, scope: !9189)
!9476 = !DILocation(line: 3854, column: 24, scope: !9189)
!9477 = !DILocation(line: 3854, column: 33, scope: !9189)
!9478 = !DILocation(line: 3854, column: 32, scope: !9189)
!9479 = !DILocation(line: 3854, column: 10, scope: !9189)
!9480 = !DILocation(line: 3855, column: 7, scope: !9481)
!9481 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3855, column: 7)
!9482 = !DILocation(line: 3855, column: 14, scope: !9481)
!9483 = !DILocation(line: 3855, column: 7, scope: !9189)
!9484 = !DILocation(line: 3856, column: 36, scope: !9481)
!9485 = !DILocation(line: 3856, column: 44, scope: !9481)
!9486 = !DILocation(line: 3856, column: 63, scope: !9481)
!9487 = !DILocation(line: 3856, column: 18, scope: !9481)
!9488 = !DILocation(line: 3856, column: 10, scope: !9481)
!9489 = !DILocation(line: 3856, column: 15, scope: !9481)
!9490 = !DILocation(line: 3856, column: 5, scope: !9481)
!9491 = !DILocation(line: 3855, column: 17, scope: !9481)
!9492 = !DILabel(scope: !9189, name: "fallback", file: !3, line: 3858)
!9493 = !DILocation(line: 3858, column: 1, scope: !9189)
!9494 = !DILocation(line: 3859, column: 7, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3859, column: 7)
!9496 = !DILocation(line: 3859, column: 7, scope: !9189)
!9497 = !DILocation(line: 3860, column: 6, scope: !9495)
!9498 = !DILocation(line: 3860, column: 18, scope: !9495)
!9499 = !DILocation(line: 3860, column: 5, scope: !9495)
!9500 = !DILocalVariable(name: "comp", scope: !9501, file: !3, line: 3864, type: !1134)
!9501 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 3862, column: 3)
!9502 = !DILocation(line: 3864, column: 10, scope: !9501)
!9503 = !DILocation(line: 3864, column: 37, scope: !9501)
!9504 = !DILocation(line: 3864, column: 43, scope: !9501)
!9505 = !DILocation(line: 3864, column: 57, scope: !9501)
!9506 = !DILocation(line: 3864, column: 62, scope: !9501)
!9507 = !DILocation(line: 3864, column: 68, scope: !9501)
!9508 = !DILocation(line: 3864, column: 17, scope: !9501)
!9509 = !DILocation(line: 3866, column: 10, scope: !9510)
!9510 = distinct !DILexicalBlock(scope: !9501, file: !3, line: 3866, column: 9)
!9511 = !DILocation(line: 3866, column: 9, scope: !9501)
!9512 = !DILocation(line: 3867, column: 14, scope: !9510)
!9513 = !DILocation(line: 3867, column: 7, scope: !9510)
!9514 = !DILocation(line: 3869, column: 9, scope: !9515)
!9515 = distinct !DILexicalBlock(scope: !9501, file: !3, line: 3869, column: 9)
!9516 = !DILocation(line: 3869, column: 9, scope: !9501)
!9517 = !DILocation(line: 3870, column: 14, scope: !9515)
!9518 = !DILocation(line: 3870, column: 12, scope: !9515)
!9519 = !DILocation(line: 3870, column: 7, scope: !9515)
!9520 = !DILocation(line: 3872, column: 40, scope: !9501)
!9521 = !DILocation(line: 3872, column: 46, scope: !9501)
!9522 = !DILocation(line: 3872, column: 22, scope: !9501)
!9523 = !DILocation(line: 3872, column: 12, scope: !9501)
!9524 = !DILocation(line: 3872, column: 5, scope: !9501)
!9525 = !DILocation(line: 3874, column: 1, scope: !9189)
!9526 = distinct !DISubprogram(name: "constant_multiple_of", scope: !3, file: !3, line: 1455, type: !9527, scopeLine: 1456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9527 = !DISubroutineType(types: !9528)
!9528 = !{!136, !1134, !1134, !9529}
!9529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!9530 = !DILocalVariable(name: "top", arg: 1, scope: !9526, file: !3, line: 1455, type: !1134)
!9531 = !DILocation(line: 1455, column: 28, scope: !9526)
!9532 = !DILocalVariable(name: "bot", arg: 2, scope: !9526, file: !3, line: 1455, type: !1134)
!9533 = !DILocation(line: 1455, column: 38, scope: !9526)
!9534 = !DILocalVariable(name: "mul", arg: 3, scope: !9526, file: !3, line: 1455, type: !9529)
!9535 = !DILocation(line: 1455, column: 55, scope: !9526)
!9536 = !DILocalVariable(name: "mby", scope: !9526, file: !3, line: 1457, type: !1134)
!9537 = !DILocation(line: 1457, column: 8, scope: !9526)
!9538 = !DILocalVariable(name: "code", scope: !9526, file: !3, line: 1458, type: !159)
!9539 = !DILocation(line: 1458, column: 18, scope: !9526)
!9540 = !DILocalVariable(name: "res", scope: !9526, file: !3, line: 1459, type: !1182)
!9541 = !DILocation(line: 1459, column: 14, scope: !9526)
!9542 = !DILocalVariable(name: "p0", scope: !9526, file: !3, line: 1459, type: !1182)
!9543 = !DILocation(line: 1459, column: 19, scope: !9526)
!9544 = !DILocalVariable(name: "p1", scope: !9526, file: !3, line: 1459, type: !1182)
!9545 = !DILocation(line: 1459, column: 23, scope: !9526)
!9546 = !DILocalVariable(name: "precision", scope: !9526, file: !3, line: 1460, type: !6)
!9547 = !DILocation(line: 1460, column: 12, scope: !9526)
!9548 = !DILocation(line: 1460, column: 24, scope: !9526)
!9549 = !DILocation(line: 1462, column: 3, scope: !9526)
!9550 = !DILocation(line: 1463, column: 3, scope: !9526)
!9551 = !DILocation(line: 1465, column: 24, scope: !9552)
!9552 = distinct !DILexicalBlock(scope: !9526, file: !3, line: 1465, column: 7)
!9553 = !DILocation(line: 1465, column: 29, scope: !9552)
!9554 = !DILocation(line: 1465, column: 7, scope: !9552)
!9555 = !DILocation(line: 1465, column: 7, scope: !9526)
!9556 = !DILocation(line: 1467, column: 8, scope: !9557)
!9557 = distinct !DILexicalBlock(scope: !9552, file: !3, line: 1466, column: 5)
!9558 = !DILocation(line: 1467, column: 14, scope: !9557)
!9559 = !DILocation(line: 1468, column: 7, scope: !9557)
!9560 = !DILocation(line: 1471, column: 10, scope: !9526)
!9561 = !DILocation(line: 1471, column: 8, scope: !9526)
!9562 = !DILocation(line: 1472, column: 11, scope: !9526)
!9563 = !DILocation(line: 1472, column: 3, scope: !9526)
!9564 = !DILocation(line: 1475, column: 13, scope: !9565)
!9565 = distinct !DILexicalBlock(scope: !9526, file: !3, line: 1473, column: 5)
!9566 = !DILocation(line: 1475, column: 11, scope: !9565)
!9567 = !DILocation(line: 1476, column: 11, scope: !9568)
!9568 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 1476, column: 11)
!9569 = !DILocation(line: 1476, column: 27, scope: !9568)
!9570 = !DILocation(line: 1476, column: 11, scope: !9565)
!9571 = !DILocation(line: 1477, column: 2, scope: !9568)
!9572 = !DILocation(line: 1479, column: 34, scope: !9573)
!9573 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 1479, column: 11)
!9574 = !DILocation(line: 1479, column: 57, scope: !9573)
!9575 = !DILocation(line: 1479, column: 12, scope: !9573)
!9576 = !DILocation(line: 1479, column: 11, scope: !9565)
!9577 = !DILocation(line: 1480, column: 2, scope: !9573)
!9578 = !DILocation(line: 1482, column: 8, scope: !9565)
!9579 = !DILocation(line: 1482, column: 72, scope: !9565)
!9580 = !DILocation(line: 1482, column: 52, scope: !9565)
!9581 = !DILocation(line: 1482, column: 31, scope: !9565)
!9582 = !DILocation(line: 1483, column: 10, scope: !9565)
!9583 = !DILocation(line: 1482, column: 14, scope: !9565)
!9584 = !DILocation(line: 1484, column: 7, scope: !9565)
!9585 = !DILocation(line: 1488, column: 34, scope: !9586)
!9586 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 1488, column: 11)
!9587 = !DILocation(line: 1488, column: 57, scope: !9586)
!9588 = !DILocation(line: 1488, column: 12, scope: !9586)
!9589 = !DILocation(line: 1489, column: 4, scope: !9586)
!9590 = !DILocation(line: 1489, column: 30, scope: !9586)
!9591 = !DILocation(line: 1489, column: 53, scope: !9586)
!9592 = !DILocation(line: 1489, column: 8, scope: !9586)
!9593 = !DILocation(line: 1488, column: 11, scope: !9565)
!9594 = !DILocation(line: 1490, column: 2, scope: !9586)
!9595 = !DILocation(line: 1492, column: 11, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 1492, column: 11)
!9597 = !DILocation(line: 1492, column: 16, scope: !9596)
!9598 = !DILocation(line: 1492, column: 11, scope: !9565)
!9599 = !DILocation(line: 1493, column: 7, scope: !9596)
!9600 = !DILocation(line: 1493, column: 2, scope: !9596)
!9601 = !DILocation(line: 1494, column: 8, scope: !9565)
!9602 = !DILocation(line: 1494, column: 31, scope: !9565)
!9603 = !DILocation(line: 1494, column: 56, scope: !9565)
!9604 = !DILocation(line: 1494, column: 14, scope: !9565)
!9605 = !DILocation(line: 1495, column: 7, scope: !9565)
!9606 = !DILocation(line: 1498, column: 11, scope: !9607)
!9607 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 1498, column: 11)
!9608 = !DILocation(line: 1498, column: 27, scope: !9607)
!9609 = !DILocation(line: 1498, column: 11, scope: !9565)
!9610 = !DILocation(line: 1499, column: 2, scope: !9607)
!9611 = !DILocation(line: 1501, column: 49, scope: !9565)
!9612 = !DILocation(line: 1501, column: 29, scope: !9565)
!9613 = !DILocation(line: 1501, column: 55, scope: !9565)
!9614 = !DILocation(line: 1501, column: 12, scope: !9565)
!9615 = !DILocation(line: 1502, column: 49, scope: !9565)
!9616 = !DILocation(line: 1502, column: 29, scope: !9565)
!9617 = !DILocation(line: 1502, column: 55, scope: !9565)
!9618 = !DILocation(line: 1502, column: 12, scope: !9565)
!9619 = !DILocation(line: 1503, column: 11, scope: !9620)
!9620 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 1503, column: 11)
!9621 = !DILocation(line: 1503, column: 11, scope: !9565)
!9622 = !DILocation(line: 1504, column: 2, scope: !9620)
!9623 = !DILocation(line: 1505, column: 8, scope: !9565)
!9624 = !DILocation(line: 1505, column: 31, scope: !9565)
!9625 = !DILocation(line: 1506, column: 10, scope: !9565)
!9626 = !DILocation(line: 1505, column: 14, scope: !9565)
!9627 = !DILocation(line: 1507, column: 14, scope: !9565)
!9628 = !DILocation(line: 1507, column: 7, scope: !9565)
!9629 = !DILocation(line: 1510, column: 7, scope: !9565)
!9630 = !DILocation(line: 1512, column: 1, scope: !9526)
!9631 = distinct !DISubprogram(name: "difference_cost", scope: !3, file: !3, line: 3640, type: !9632, scopeLine: 3643, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9632 = !DISubroutineType(types: !9633)
!9633 = !{!2487, !2530, !1134, !1134, !2421, !2421, !8813, !2550}
!9634 = !DILocalVariable(name: "data", arg: 1, scope: !9631, file: !3, line: 3640, type: !2530)
!9635 = !DILocation(line: 3640, column: 38, scope: !9631)
!9636 = !DILocalVariable(name: "e1", arg: 2, scope: !9631, file: !3, line: 3641, type: !1134)
!9637 = !DILocation(line: 3641, column: 9, scope: !9631)
!9638 = !DILocalVariable(name: "e2", arg: 3, scope: !9631, file: !3, line: 3641, type: !1134)
!9639 = !DILocation(line: 3641, column: 18, scope: !9631)
!9640 = !DILocalVariable(name: "symbol_present", arg: 4, scope: !9631, file: !3, line: 3641, type: !2421)
!9641 = !DILocation(line: 3641, column: 28, scope: !9631)
!9642 = !DILocalVariable(name: "var_present", arg: 5, scope: !9631, file: !3, line: 3641, type: !2421)
!9643 = !DILocation(line: 3641, column: 50, scope: !9631)
!9644 = !DILocalVariable(name: "offset", arg: 6, scope: !9631, file: !3, line: 3642, type: !8813)
!9645 = !DILocation(line: 3642, column: 28, scope: !9631)
!9646 = !DILocalVariable(name: "depends_on", arg: 7, scope: !9631, file: !3, line: 3642, type: !2550)
!9647 = !DILocation(line: 3642, column: 44, scope: !9631)
!9648 = !DILocalVariable(name: "mode", scope: !9631, file: !3, line: 3644, type: !8)
!9649 = !DILocation(line: 3644, column: 21, scope: !9631)
!9650 = !DILocation(line: 3644, column: 28, scope: !9631)
!9651 = !DILocalVariable(name: "off1", scope: !9631, file: !3, line: 3645, type: !1088)
!9652 = !DILocation(line: 3645, column: 26, scope: !9631)
!9653 = !DILocalVariable(name: "off2", scope: !9631, file: !3, line: 3645, type: !1088)
!9654 = !DILocation(line: 3645, column: 32, scope: !9631)
!9655 = !DILocalVariable(name: "aff_e1", scope: !9631, file: !3, line: 3646, type: !9656)
!9656 = !DIDerivedType(tag: DW_TAG_typedef, name: "aff_tree", file: !9657, line: 59, baseType: !9658)
!9657 = !DIFile(filename: "./tree-affine.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!9658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "affine_tree_combination", file: !9657, line: 36, size: 1856, elements: !9659)
!9659 = !{!9660, !9661, !9662, !9663, !9671}
!9660 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !9658, file: !9657, line: 39, baseType: !1134, size: 64)
!9661 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !9658, file: !9657, line: 42, baseType: !1182, size: 128, offset: 64)
!9662 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !9658, file: !9657, line: 45, baseType: !6, size: 32, offset: 192)
!9663 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !9658, file: !9657, line: 53, baseType: !9664, size: 1536, offset: 256)
!9664 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9665, size: 1536, elements: !9669)
!9665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "aff_comb_elt", file: !9657, line: 27, size: 192, elements: !9666)
!9666 = !{!9667, !9668}
!9667 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !9665, file: !9657, line: 30, baseType: !1134, size: 64)
!9668 = !DIDerivedType(tag: DW_TAG_member, name: "coef", scope: !9665, file: !9657, line: 33, baseType: !1182, size: 128, offset: 64)
!9669 = !{!9670}
!9670 = !DISubrange(count: 8)
!9671 = !DIDerivedType(tag: DW_TAG_member, name: "rest", scope: !9658, file: !9657, line: 58, baseType: !1134, size: 64, offset: 1792)
!9672 = !DILocation(line: 3646, column: 12, scope: !9631)
!9673 = !DILocalVariable(name: "aff_e2", scope: !9631, file: !3, line: 3646, type: !9656)
!9674 = !DILocation(line: 3646, column: 20, scope: !9631)
!9675 = !DILocalVariable(name: "type", scope: !9631, file: !3, line: 3647, type: !1134)
!9676 = !DILocation(line: 3647, column: 8, scope: !9631)
!9677 = !DILocation(line: 3649, column: 22, scope: !9631)
!9678 = !DILocation(line: 3649, column: 8, scope: !9631)
!9679 = !DILocation(line: 3649, column: 6, scope: !9631)
!9680 = !DILocation(line: 3650, column: 22, scope: !9631)
!9681 = !DILocation(line: 3650, column: 8, scope: !9631)
!9682 = !DILocation(line: 3650, column: 6, scope: !9631)
!9683 = !DILocation(line: 3651, column: 14, scope: !9631)
!9684 = !DILocation(line: 3651, column: 21, scope: !9631)
!9685 = !DILocation(line: 3651, column: 19, scope: !9631)
!9686 = !DILocation(line: 3651, column: 4, scope: !9631)
!9687 = !DILocation(line: 3651, column: 11, scope: !9631)
!9688 = !DILocation(line: 3653, column: 3, scope: !9631)
!9689 = !DILocation(line: 3654, column: 3, scope: !9631)
!9690 = !DILocation(line: 3656, column: 7, scope: !9691)
!9691 = distinct !DILexicalBlock(scope: !9631, file: !3, line: 3656, column: 7)
!9692 = !DILocation(line: 3656, column: 22, scope: !9691)
!9693 = !DILocation(line: 3656, column: 7, scope: !9631)
!9694 = !DILocation(line: 3657, column: 33, scope: !9691)
!9695 = !DILocation(line: 3657, column: 39, scope: !9691)
!9696 = !DILocation(line: 3657, column: 43, scope: !9691)
!9697 = !DILocation(line: 3657, column: 47, scope: !9691)
!9698 = !DILocation(line: 3657, column: 63, scope: !9691)
!9699 = !DILocation(line: 3658, column: 5, scope: !9691)
!9700 = !DILocation(line: 3658, column: 13, scope: !9691)
!9701 = !DILocation(line: 3657, column: 12, scope: !9691)
!9702 = !DILocation(line: 3657, column: 5, scope: !9691)
!9703 = !DILocation(line: 3659, column: 4, scope: !9631)
!9704 = !DILocation(line: 3659, column: 19, scope: !9631)
!9705 = !DILocation(line: 3661, column: 24, scope: !9706)
!9706 = distinct !DILexicalBlock(scope: !9631, file: !3, line: 3661, column: 7)
!9707 = !DILocation(line: 3661, column: 28, scope: !9706)
!9708 = !DILocation(line: 3661, column: 7, scope: !9706)
!9709 = !DILocation(line: 3661, column: 7, scope: !9631)
!9710 = !DILocation(line: 3663, column: 8, scope: !9711)
!9711 = distinct !DILexicalBlock(scope: !9706, file: !3, line: 3662, column: 5)
!9712 = !DILocation(line: 3663, column: 20, scope: !9711)
!9713 = !DILocation(line: 3664, column: 14, scope: !9711)
!9714 = !DILocation(line: 3664, column: 7, scope: !9711)
!9715 = !DILocation(line: 3667, column: 4, scope: !9631)
!9716 = !DILocation(line: 3667, column: 16, scope: !9631)
!9717 = !DILocation(line: 3669, column: 22, scope: !9718)
!9718 = distinct !DILexicalBlock(scope: !9631, file: !3, line: 3669, column: 7)
!9719 = !DILocation(line: 3669, column: 7, scope: !9718)
!9720 = !DILocation(line: 3669, column: 7, scope: !9631)
!9721 = !DILocation(line: 3670, column: 28, scope: !9718)
!9722 = !DILocation(line: 3670, column: 34, scope: !9718)
!9723 = !DILocation(line: 3670, column: 38, scope: !9718)
!9724 = !DILocation(line: 3670, column: 12, scope: !9718)
!9725 = !DILocation(line: 3670, column: 5, scope: !9718)
!9726 = !DILocation(line: 3672, column: 22, scope: !9727)
!9727 = distinct !DILexicalBlock(scope: !9631, file: !3, line: 3672, column: 7)
!9728 = !DILocation(line: 3672, column: 7, scope: !9727)
!9729 = !DILocation(line: 3672, column: 7, scope: !9631)
!9730 = !DILocalVariable(name: "cost", scope: !9731, file: !3, line: 3674, type: !2487)
!9731 = distinct !DILexicalBlock(scope: !9727, file: !3, line: 3673, column: 5)
!9732 = !DILocation(line: 3674, column: 17, scope: !9731)
!9733 = !DILocation(line: 3674, column: 40, scope: !9731)
!9734 = !DILocation(line: 3674, column: 46, scope: !9731)
!9735 = !DILocation(line: 3674, column: 50, scope: !9731)
!9736 = !DILocation(line: 3674, column: 24, scope: !9731)
!9737 = !DILocation(line: 3675, column: 42, scope: !9731)
!9738 = !DILocation(line: 3675, column: 48, scope: !9731)
!9739 = !DILocation(line: 3675, column: 54, scope: !9731)
!9740 = !DILocation(line: 3675, column: 20, scope: !9731)
!9741 = !DILocation(line: 3675, column: 12, scope: !9731)
!9742 = !DILocation(line: 3675, column: 17, scope: !9731)
!9743 = !DILocation(line: 3676, column: 7, scope: !9731)
!9744 = !DILocation(line: 3679, column: 27, scope: !9631)
!9745 = !DILocation(line: 3679, column: 10, scope: !9631)
!9746 = !DILocation(line: 3679, column: 8, scope: !9631)
!9747 = !DILocation(line: 3680, column: 28, scope: !9631)
!9748 = !DILocation(line: 3680, column: 32, scope: !9631)
!9749 = !DILocation(line: 3680, column: 3, scope: !9631)
!9750 = !DILocation(line: 3681, column: 28, scope: !9631)
!9751 = !DILocation(line: 3681, column: 32, scope: !9631)
!9752 = !DILocation(line: 3681, column: 3, scope: !9631)
!9753 = !DILocation(line: 3682, column: 35, scope: !9631)
!9754 = !DILocation(line: 3682, column: 3, scope: !9631)
!9755 = !DILocation(line: 3683, column: 3, scope: !9631)
!9756 = !DILocation(line: 3685, column: 26, scope: !9631)
!9757 = !DILocation(line: 3685, column: 32, scope: !9631)
!9758 = !DILocation(line: 3685, column: 67, scope: !9631)
!9759 = !DILocation(line: 3685, column: 10, scope: !9631)
!9760 = !DILocation(line: 3685, column: 3, scope: !9631)
!9761 = !DILocation(line: 3686, column: 1, scope: !9631)
!9762 = distinct !DISubprogram(name: "force_var_cost", scope: !3, file: !3, line: 3535, type: !9763, scopeLine: 3537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9763 = !DISubroutineType(types: !9764)
!9764 = !{!2487, !2530, !1134, !2550}
!9765 = !DILocalVariable(name: "data", arg: 1, scope: !9762, file: !3, line: 3535, type: !2530)
!9766 = !DILocation(line: 3535, column: 37, scope: !9762)
!9767 = !DILocalVariable(name: "expr", arg: 2, scope: !9762, file: !3, line: 3536, type: !1134)
!9768 = !DILocation(line: 3536, column: 8, scope: !9762)
!9769 = !DILocalVariable(name: "depends_on", arg: 3, scope: !9762, file: !3, line: 3536, type: !2550)
!9770 = !DILocation(line: 3536, column: 22, scope: !9762)
!9771 = !DILocation(line: 3538, column: 7, scope: !9772)
!9772 = distinct !DILexicalBlock(scope: !9762, file: !3, line: 3538, column: 7)
!9773 = !DILocation(line: 3538, column: 7, scope: !9762)
!9774 = !DILocation(line: 3540, column: 24, scope: !9775)
!9775 = distinct !DILexicalBlock(scope: !9772, file: !3, line: 3539, column: 5)
!9776 = !DILocation(line: 3540, column: 22, scope: !9775)
!9777 = !DILocation(line: 3541, column: 7, scope: !9775)
!9778 = !DILocation(line: 3542, column: 5, scope: !9775)
!9779 = !DILocation(line: 3544, column: 34, scope: !9762)
!9780 = !DILocation(line: 3544, column: 40, scope: !9762)
!9781 = !DILocation(line: 3544, column: 46, scope: !9762)
!9782 = !DILocation(line: 3544, column: 10, scope: !9762)
!9783 = !DILocation(line: 3544, column: 3, scope: !9762)
!9784 = !DILocalVariable(name: "mode", arg: 1, scope: !2638, file: !3, line: 2935, type: !8)
!9785 = !DILocation(line: 2935, column: 29, scope: !2638)
!9786 = !DILocalVariable(name: "speed", arg: 2, scope: !2638, file: !3, line: 2935, type: !136)
!9787 = !DILocation(line: 2935, column: 40, scope: !2638)
!9788 = !DILocalVariable(name: "seq", scope: !2638, file: !3, line: 2938, type: !1015)
!9789 = !DILocation(line: 2938, column: 7, scope: !2638)
!9790 = !DILocalVariable(name: "cost", scope: !2638, file: !3, line: 2939, type: !6)
!9791 = !DILocation(line: 2939, column: 12, scope: !2638)
!9792 = !DILocation(line: 2941, column: 13, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 2941, column: 7)
!9794 = !DILocation(line: 2941, column: 7, scope: !9793)
!9795 = !DILocation(line: 2941, column: 7, scope: !2638)
!9796 = !DILocation(line: 2942, column: 18, scope: !9793)
!9797 = !DILocation(line: 2942, column: 12, scope: !9793)
!9798 = !DILocation(line: 2942, column: 5, scope: !9793)
!9799 = !DILocation(line: 2944, column: 3, scope: !2638)
!9800 = !DILocation(line: 2945, column: 18, scope: !2638)
!9801 = !DILocation(line: 2945, column: 3, scope: !2638)
!9802 = !DILocation(line: 2949, column: 9, scope: !2638)
!9803 = !DILocation(line: 2949, column: 7, scope: !2638)
!9804 = !DILocation(line: 2950, column: 3, scope: !2638)
!9805 = !DILocation(line: 2952, column: 20, scope: !2638)
!9806 = !DILocation(line: 2952, column: 25, scope: !2638)
!9807 = !DILocation(line: 2952, column: 10, scope: !2638)
!9808 = !DILocation(line: 2952, column: 8, scope: !2638)
!9809 = !DILocation(line: 2953, column: 8, scope: !9810)
!9810 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 2953, column: 7)
!9811 = !DILocation(line: 2953, column: 7, scope: !2638)
!9812 = !DILocation(line: 2954, column: 10, scope: !9810)
!9813 = !DILocation(line: 2954, column: 5, scope: !9810)
!9814 = !DILocation(line: 2956, column: 17, scope: !2638)
!9815 = !DILocation(line: 2956, column: 9, scope: !2638)
!9816 = !DILocation(line: 2956, column: 3, scope: !2638)
!9817 = !DILocation(line: 2956, column: 15, scope: !2638)
!9818 = !DILocation(line: 2958, column: 7, scope: !9819)
!9819 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 2958, column: 7)
!9820 = !DILocation(line: 2958, column: 17, scope: !9819)
!9821 = !DILocation(line: 2958, column: 21, scope: !9819)
!9822 = !DILocation(line: 2958, column: 32, scope: !9819)
!9823 = !DILocation(line: 2958, column: 7, scope: !2638)
!9824 = !DILocation(line: 2959, column: 14, scope: !9819)
!9825 = !DILocation(line: 2960, column: 7, scope: !9819)
!9826 = !DILocation(line: 2960, column: 29, scope: !9819)
!9827 = !DILocation(line: 2959, column: 5, scope: !9819)
!9828 = !DILocation(line: 2961, column: 10, scope: !2638)
!9829 = !DILocation(line: 2961, column: 3, scope: !2638)
!9830 = !DILocation(line: 2962, column: 1, scope: !2638)
!9831 = distinct !DISubprogram(name: "add_costs", scope: !3, file: !3, line: 2512, type: !9832, scopeLine: 2513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9832 = !DISubroutineType(types: !9833)
!9833 = !{!2487, !2487, !2487}
!9834 = !DILocalVariable(name: "cost1", arg: 1, scope: !9831, file: !3, line: 2512, type: !2487)
!9835 = !DILocation(line: 2512, column: 22, scope: !9831)
!9836 = !DILocalVariable(name: "cost2", arg: 2, scope: !9831, file: !3, line: 2512, type: !2487)
!9837 = !DILocation(line: 2512, column: 39, scope: !9831)
!9838 = !DILocation(line: 2514, column: 23, scope: !9831)
!9839 = !DILocation(line: 2514, column: 9, scope: !9831)
!9840 = !DILocation(line: 2514, column: 14, scope: !9831)
!9841 = !DILocation(line: 2515, column: 29, scope: !9831)
!9842 = !DILocation(line: 2515, column: 9, scope: !9831)
!9843 = !DILocation(line: 2515, column: 20, scope: !9831)
!9844 = !DILocation(line: 2517, column: 10, scope: !9831)
!9845 = !DILocation(line: 2517, column: 3, scope: !9831)
!9846 = distinct !DISubprogram(name: "stmt_after_increment", scope: !3, file: !3, line: 604, type: !9847, scopeLine: 605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!9847 = !DISubroutineType(types: !9848)
!9848 = !{!136, !1651, !2472, !1436}
!9849 = !DILocalVariable(name: "loop", arg: 1, scope: !9846, file: !3, line: 604, type: !1651)
!9850 = !DILocation(line: 604, column: 36, scope: !9846)
!9851 = !DILocalVariable(name: "cand", arg: 2, scope: !9846, file: !3, line: 604, type: !2472)
!9852 = !DILocation(line: 604, column: 58, scope: !9846)
!9853 = !DILocalVariable(name: "stmt", arg: 3, scope: !9846, file: !3, line: 604, type: !1436)
!9854 = !DILocation(line: 604, column: 71, scope: !9846)
!9855 = !DILocation(line: 606, column: 11, scope: !9846)
!9856 = !DILocation(line: 606, column: 17, scope: !9846)
!9857 = !DILocation(line: 606, column: 3, scope: !9846)
!9858 = !DILocation(line: 609, column: 7, scope: !9859)
!9859 = distinct !DILexicalBlock(scope: !9846, file: !3, line: 607, column: 5)
!9860 = !DILocation(line: 612, column: 40, scope: !9859)
!9861 = !DILocation(line: 612, column: 46, scope: !9859)
!9862 = !DILocation(line: 612, column: 14, scope: !9859)
!9863 = !DILocation(line: 612, column: 7, scope: !9859)
!9864 = !DILocation(line: 616, column: 34, scope: !9859)
!9865 = !DILocation(line: 616, column: 40, scope: !9859)
!9866 = !DILocation(line: 616, column: 14, scope: !9859)
!9867 = !DILocation(line: 616, column: 7, scope: !9859)
!9868 = !DILocation(line: 619, column: 34, scope: !9859)
!9869 = !DILocation(line: 619, column: 40, scope: !9859)
!9870 = !DILocation(line: 619, column: 14, scope: !9859)
!9871 = !DILocation(line: 619, column: 7, scope: !9859)
!9872 = !DILocation(line: 622, column: 7, scope: !9859)
!9873 = !DILocation(line: 623, column: 5, scope: !9859)
!9874 = !DILocation(line: 625, column: 5, scope: !9846)
!9875 = !DILocation(line: 627, column: 1, scope: !9846)
!9876 = !DILocalVariable(name: "symbol_present", arg: 1, scope: !2646, file: !3, line: 3114, type: !136)
!9877 = !DILocation(line: 3114, column: 24, scope: !2646)
!9878 = !DILocalVariable(name: "var_present", arg: 2, scope: !2646, file: !3, line: 3114, type: !136)
!9879 = !DILocation(line: 3114, column: 45, scope: !2646)
!9880 = !DILocalVariable(name: "offset", arg: 3, scope: !2646, file: !3, line: 3115, type: !1088)
!9881 = !DILocation(line: 3115, column: 28, scope: !2646)
!9882 = !DILocalVariable(name: "ratio", arg: 4, scope: !2646, file: !3, line: 3115, type: !7)
!9883 = !DILocation(line: 3115, column: 50, scope: !2646)
!9884 = !DILocalVariable(name: "cstep", arg: 5, scope: !2646, file: !3, line: 3116, type: !7)
!9885 = !DILocation(line: 3116, column: 19, scope: !2646)
!9886 = !DILocalVariable(name: "mem_mode", arg: 6, scope: !2646, file: !3, line: 3116, type: !8)
!9887 = !DILocation(line: 3116, column: 44, scope: !2646)
!9888 = !DILocalVariable(name: "as", arg: 7, scope: !2646, file: !3, line: 3117, type: !2605)
!9889 = !DILocation(line: 3117, column: 18, scope: !2646)
!9890 = !DILocalVariable(name: "speed", arg: 8, scope: !2646, file: !3, line: 3117, type: !136)
!9891 = !DILocation(line: 3117, column: 27, scope: !2646)
!9892 = !DILocalVariable(name: "stmt_after_inc", arg: 9, scope: !2646, file: !3, line: 3118, type: !136)
!9893 = !DILocation(line: 3118, column: 10, scope: !2646)
!9894 = !DILocalVariable(name: "may_autoinc", arg: 10, scope: !2646, file: !3, line: 3118, type: !2421)
!9895 = !DILocation(line: 3118, column: 32, scope: !2646)
!9896 = !DILocalVariable(name: "address_mode", scope: !2646, file: !3, line: 3120, type: !8)
!9897 = !DILocation(line: 3120, column: 21, scope: !2646)
!9898 = !DILocation(line: 3120, column: 55, scope: !2646)
!9899 = !DILocation(line: 3120, column: 69, scope: !2646)
!9900 = !DILocation(line: 3120, column: 36, scope: !2646)
!9901 = !DILocalVariable(name: "data_index", scope: !2646, file: !3, line: 3122, type: !6)
!9902 = !DILocation(line: 3122, column: 16, scope: !2646)
!9903 = !DILocation(line: 3122, column: 35, scope: !2646)
!9904 = !DILocation(line: 3122, column: 29, scope: !2646)
!9905 = !DILocation(line: 3122, column: 38, scope: !2646)
!9906 = !DILocation(line: 3122, column: 65, scope: !2646)
!9907 = !DILocation(line: 3122, column: 57, scope: !2646)
!9908 = !DILocalVariable(name: "data", scope: !2646, file: !3, line: 3123, type: !2553)
!9909 = !DILocation(line: 3123, column: 21, scope: !2646)
!9910 = !DILocalVariable(name: "cost", scope: !2646, file: !3, line: 3126, type: !6)
!9911 = !DILocation(line: 3126, column: 12, scope: !2646)
!9912 = !DILocalVariable(name: "acost", scope: !2646, file: !3, line: 3126, type: !6)
!9913 = !DILocation(line: 3126, column: 18, scope: !2646)
!9914 = !DILocalVariable(name: "complexity", scope: !2646, file: !3, line: 3126, type: !6)
!9915 = !DILocation(line: 3126, column: 25, scope: !2646)
!9916 = !DILocalVariable(name: "offset_p", scope: !2646, file: !3, line: 3127, type: !136)
!9917 = !DILocation(line: 3127, column: 8, scope: !2646)
!9918 = !DILocalVariable(name: "ratio_p", scope: !2646, file: !3, line: 3127, type: !136)
!9919 = !DILocation(line: 3127, column: 18, scope: !2646)
!9920 = !DILocalVariable(name: "autoinc", scope: !2646, file: !3, line: 3127, type: !136)
!9921 = !DILocation(line: 3127, column: 27, scope: !2646)
!9922 = !DILocalVariable(name: "s_offset", scope: !2646, file: !3, line: 3128, type: !7)
!9923 = !DILocation(line: 3128, column: 17, scope: !2646)
!9924 = !DILocalVariable(name: "autoinc_offset", scope: !2646, file: !3, line: 3128, type: !7)
!9925 = !DILocation(line: 3128, column: 27, scope: !2646)
!9926 = !DILocalVariable(name: "msize", scope: !2646, file: !3, line: 3128, type: !7)
!9927 = !DILocation(line: 3128, column: 43, scope: !2646)
!9928 = !DILocalVariable(name: "mask", scope: !2646, file: !3, line: 3129, type: !1088)
!9929 = !DILocation(line: 3129, column: 26, scope: !2646)
!9930 = !DILocalVariable(name: "bits", scope: !2646, file: !3, line: 3130, type: !6)
!9931 = !DILocation(line: 3130, column: 12, scope: !2646)
!9932 = !DILocation(line: 3132, column: 7, scope: !9933)
!9933 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3132, column: 7)
!9934 = !DILocation(line: 3132, column: 21, scope: !9933)
!9935 = !DILocation(line: 3132, column: 18, scope: !9933)
!9936 = !DILocation(line: 3132, column: 7, scope: !2646)
!9937 = !DILocation(line: 3133, column: 5, scope: !9933)
!9938 = !DILocation(line: 3136, column: 10, scope: !2646)
!9939 = !DILocation(line: 3136, column: 8, scope: !2646)
!9940 = !DILocation(line: 3137, column: 8, scope: !9941)
!9941 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3137, column: 7)
!9942 = !DILocation(line: 3137, column: 7, scope: !2646)
!9943 = !DILocalVariable(name: "i", scope: !9944, file: !3, line: 3139, type: !7)
!9944 = distinct !DILexicalBlock(scope: !9941, file: !3, line: 3138, column: 5)
!9945 = !DILocation(line: 3139, column: 21, scope: !9944)
!9946 = !DILocalVariable(name: "start", scope: !9944, file: !3, line: 3140, type: !7)
!9947 = !DILocation(line: 3140, column: 21, scope: !9944)
!9948 = !DILocation(line: 3140, column: 29, scope: !9944)
!9949 = !DILocation(line: 3140, column: 47, scope: !9944)
!9950 = !DILocalVariable(name: "rat", scope: !9944, file: !3, line: 3141, type: !7)
!9951 = !DILocation(line: 3141, column: 21, scope: !9944)
!9952 = !DILocalVariable(name: "off", scope: !9944, file: !3, line: 3141, type: !7)
!9953 = !DILocation(line: 3141, column: 26, scope: !9944)
!9954 = !DILocalVariable(name: "old_cse_not_expected", scope: !9944, file: !3, line: 3142, type: !1006)
!9955 = !DILocation(line: 3142, column: 11, scope: !9944)
!9956 = !DILocalVariable(name: "sym_p", scope: !9944, file: !3, line: 3143, type: !6)
!9957 = !DILocation(line: 3143, column: 16, scope: !9944)
!9958 = !DILocalVariable(name: "var_p", scope: !9944, file: !3, line: 3143, type: !6)
!9959 = !DILocation(line: 3143, column: 23, scope: !9944)
!9960 = !DILocalVariable(name: "off_p", scope: !9944, file: !3, line: 3143, type: !6)
!9961 = !DILocation(line: 3143, column: 30, scope: !9944)
!9962 = !DILocalVariable(name: "rat_p", scope: !9944, file: !3, line: 3143, type: !6)
!9963 = !DILocation(line: 3143, column: 37, scope: !9944)
!9964 = !DILocalVariable(name: "add_c", scope: !9944, file: !3, line: 3143, type: !6)
!9965 = !DILocation(line: 3143, column: 44, scope: !9944)
!9966 = !DILocalVariable(name: "seq", scope: !9944, file: !3, line: 3144, type: !1015)
!9967 = !DILocation(line: 3144, column: 11, scope: !9944)
!9968 = !DILocalVariable(name: "addr", scope: !9944, file: !3, line: 3144, type: !1015)
!9969 = !DILocation(line: 3144, column: 16, scope: !9944)
!9970 = !DILocalVariable(name: "base", scope: !9944, file: !3, line: 3144, type: !1015)
!9971 = !DILocation(line: 3144, column: 22, scope: !9944)
!9972 = !DILocalVariable(name: "reg0", scope: !9944, file: !3, line: 3145, type: !1015)
!9973 = !DILocation(line: 3145, column: 11, scope: !9944)
!9974 = !DILocalVariable(name: "reg1", scope: !9944, file: !3, line: 3145, type: !1015)
!9975 = !DILocation(line: 3145, column: 17, scope: !9944)
!9976 = !DILocation(line: 3147, column: 34, scope: !9944)
!9977 = !DILocation(line: 3147, column: 14, scope: !9944)
!9978 = !DILocation(line: 3147, column: 12, scope: !9944)
!9979 = !DILocation(line: 3149, column: 27, scope: !9944)
!9980 = !DILocation(line: 3149, column: 14, scope: !9944)
!9981 = !DILocation(line: 3149, column: 12, scope: !9944)
!9982 = !DILocation(line: 3151, column: 14, scope: !9944)
!9983 = !DILocation(line: 3151, column: 12, scope: !9944)
!9984 = !DILocation(line: 3152, column: 16, scope: !9985)
!9985 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3152, column: 7)
!9986 = !DILocation(line: 3152, column: 14, scope: !9985)
!9987 = !DILocation(line: 3152, column: 12, scope: !9985)
!9988 = !DILocation(line: 3152, column: 23, scope: !9989)
!9989 = distinct !DILexicalBlock(scope: !9985, file: !3, line: 3152, column: 7)
!9990 = !DILocation(line: 3152, column: 25, scope: !9989)
!9991 = !DILocation(line: 3152, column: 7, scope: !9985)
!9992 = !DILocation(line: 3154, column: 35, scope: !9993)
!9993 = distinct !DILexicalBlock(scope: !9989, file: !3, line: 3153, column: 2)
!9994 = !DILocation(line: 3154, column: 38, scope: !9993)
!9995 = !DILocation(line: 3154, column: 21, scope: !9993)
!9996 = !DILocation(line: 3154, column: 4, scope: !9993)
!9997 = !DILocation(line: 3154, column: 19, scope: !9993)
!9998 = !DILocation(line: 3155, column: 38, scope: !9999)
!9999 = distinct !DILexicalBlock(scope: !9993, file: !3, line: 3155, column: 8)
!10000 = !DILocation(line: 3155, column: 48, scope: !9999)
!10001 = !DILocation(line: 3155, column: 54, scope: !9999)
!10002 = !DILocation(line: 3155, column: 9, scope: !9999)
!10003 = !DILocation(line: 3155, column: 8, scope: !9993)
!10004 = !DILocation(line: 3156, column: 6, scope: !9999)
!10005 = !DILocation(line: 3157, column: 2, scope: !9993)
!10006 = !DILocation(line: 3152, column: 39, scope: !9989)
!10007 = !DILocation(line: 3152, column: 7, scope: !9989)
!10008 = distinct !{!10008, !9991, !10009}
!10009 = !DILocation(line: 3157, column: 2, scope: !9985)
!10010 = !DILocation(line: 3158, column: 26, scope: !9944)
!10011 = !DILocation(line: 3158, column: 31, scope: !9944)
!10012 = !DILocation(line: 3158, column: 28, scope: !9944)
!10013 = !DILocation(line: 3158, column: 43, scope: !9944)
!10014 = !DILocation(line: 3158, column: 45, scope: !9944)
!10015 = !DILocation(line: 3158, column: 7, scope: !9944)
!10016 = !DILocation(line: 3158, column: 13, scope: !9944)
!10017 = !DILocation(line: 3158, column: 24, scope: !9944)
!10018 = !DILocation(line: 3159, column: 13, scope: !9944)
!10019 = !DILocation(line: 3159, column: 19, scope: !9944)
!10020 = !DILocation(line: 3159, column: 11, scope: !9944)
!10021 = !DILocation(line: 3161, column: 16, scope: !10022)
!10022 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3161, column: 7)
!10023 = !DILocation(line: 3161, column: 14, scope: !10022)
!10024 = !DILocation(line: 3161, column: 12, scope: !10022)
!10025 = !DILocation(line: 3161, column: 23, scope: !10026)
!10026 = distinct !DILexicalBlock(scope: !10022, file: !3, line: 3161, column: 7)
!10027 = !DILocation(line: 3161, column: 25, scope: !10026)
!10028 = !DILocation(line: 3161, column: 7, scope: !10022)
!10029 = !DILocation(line: 3163, column: 36, scope: !10030)
!10030 = distinct !DILexicalBlock(scope: !10026, file: !3, line: 3162, column: 2)
!10031 = !DILocation(line: 3163, column: 35, scope: !10030)
!10032 = !DILocation(line: 3163, column: 39, scope: !10030)
!10033 = !DILocation(line: 3163, column: 21, scope: !10030)
!10034 = !DILocation(line: 3163, column: 4, scope: !10030)
!10035 = !DILocation(line: 3163, column: 19, scope: !10030)
!10036 = !DILocation(line: 3164, column: 38, scope: !10037)
!10037 = distinct !DILexicalBlock(scope: !10030, file: !3, line: 3164, column: 8)
!10038 = !DILocation(line: 3164, column: 48, scope: !10037)
!10039 = !DILocation(line: 3164, column: 54, scope: !10037)
!10040 = !DILocation(line: 3164, column: 9, scope: !10037)
!10041 = !DILocation(line: 3164, column: 8, scope: !10030)
!10042 = !DILocation(line: 3165, column: 6, scope: !10037)
!10043 = !DILocation(line: 3166, column: 2, scope: !10030)
!10044 = !DILocation(line: 3161, column: 39, scope: !10026)
!10045 = !DILocation(line: 3161, column: 7, scope: !10026)
!10046 = distinct !{!10046, !10028, !10047}
!10047 = !DILocation(line: 3166, column: 2, scope: !10022)
!10048 = !DILocation(line: 3167, column: 26, scope: !9944)
!10049 = !DILocation(line: 3167, column: 31, scope: !9944)
!10050 = !DILocation(line: 3167, column: 28, scope: !9944)
!10051 = !DILocation(line: 3167, column: 45, scope: !9944)
!10052 = !DILocation(line: 3167, column: 47, scope: !9944)
!10053 = !DILocation(line: 3167, column: 43, scope: !9944)
!10054 = !DILocation(line: 3167, column: 7, scope: !9944)
!10055 = !DILocation(line: 3167, column: 13, scope: !9944)
!10056 = !DILocation(line: 3167, column: 24, scope: !9944)
!10057 = !DILocation(line: 3169, column: 11, scope: !10058)
!10058 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3169, column: 11)
!10059 = !DILocation(line: 3169, column: 21, scope: !10058)
!10060 = !DILocation(line: 3169, column: 25, scope: !10058)
!10061 = !DILocation(line: 3169, column: 36, scope: !10058)
!10062 = !DILocation(line: 3169, column: 11, scope: !9944)
!10063 = !DILocation(line: 3171, column: 13, scope: !10064)
!10064 = distinct !DILexicalBlock(scope: !10058, file: !3, line: 3170, column: 2)
!10065 = !DILocation(line: 3171, column: 4, scope: !10064)
!10066 = !DILocation(line: 3172, column: 13, scope: !10064)
!10067 = !DILocation(line: 3173, column: 6, scope: !10064)
!10068 = !DILocation(line: 3174, column: 12, scope: !10064)
!10069 = !DILocation(line: 3174, column: 18, scope: !10064)
!10070 = !DILocation(line: 3174, column: 6, scope: !10064)
!10071 = !DILocation(line: 3172, column: 4, scope: !10064)
!10072 = !DILocation(line: 3175, column: 13, scope: !10064)
!10073 = !DILocation(line: 3176, column: 6, scope: !10064)
!10074 = !DILocation(line: 3177, column: 12, scope: !10064)
!10075 = !DILocation(line: 3177, column: 18, scope: !10064)
!10076 = !DILocation(line: 3177, column: 6, scope: !10064)
!10077 = !DILocation(line: 3175, column: 4, scope: !10064)
!10078 = !DILocation(line: 3178, column: 2, scope: !10064)
!10079 = !DILocation(line: 3180, column: 11, scope: !9944)
!10080 = !DILocation(line: 3181, column: 14, scope: !10081)
!10081 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3181, column: 7)
!10082 = !DILocation(line: 3181, column: 12, scope: !10081)
!10083 = !DILocation(line: 3181, column: 19, scope: !10084)
!10084 = distinct !DILexicalBlock(scope: !10081, file: !3, line: 3181, column: 7)
!10085 = !DILocation(line: 3181, column: 21, scope: !10084)
!10086 = !DILocation(line: 3181, column: 7, scope: !10081)
!10087 = !DILocation(line: 3182, column: 39, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10084, file: !3, line: 3182, column: 6)
!10089 = !DILocation(line: 3182, column: 42, scope: !10088)
!10090 = !DILocation(line: 3182, column: 52, scope: !10088)
!10091 = !DILocation(line: 3182, column: 6, scope: !10088)
!10092 = !DILocation(line: 3182, column: 6, scope: !10084)
!10093 = !DILocation(line: 3184, column: 12, scope: !10094)
!10094 = distinct !DILexicalBlock(scope: !10088, file: !3, line: 3183, column: 4)
!10095 = !DILocation(line: 3184, column: 10, scope: !10094)
!10096 = !DILocation(line: 3185, column: 6, scope: !10094)
!10097 = !DILocation(line: 3182, column: 54, scope: !10088)
!10098 = !DILocation(line: 3181, column: 36, scope: !10084)
!10099 = !DILocation(line: 3181, column: 7, scope: !10084)
!10100 = distinct !{!10100, !10086, !10101}
!10101 = !DILocation(line: 3186, column: 4, scope: !10081)
!10102 = !DILocation(line: 3189, column: 13, scope: !9944)
!10103 = !DILocation(line: 3190, column: 27, scope: !9944)
!10104 = !DILocation(line: 3190, column: 14, scope: !9944)
!10105 = !DILocation(line: 3190, column: 12, scope: !9944)
!10106 = !DILocation(line: 3191, column: 27, scope: !9944)
!10107 = !DILocation(line: 3191, column: 14, scope: !9944)
!10108 = !DILocation(line: 3191, column: 12, scope: !9944)
!10109 = !DILocation(line: 3217, column: 14, scope: !10110)
!10110 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3217, column: 7)
!10111 = !DILocation(line: 3217, column: 12, scope: !10110)
!10112 = !DILocation(line: 3217, column: 19, scope: !10113)
!10113 = distinct !DILexicalBlock(scope: !10110, file: !3, line: 3217, column: 7)
!10114 = !DILocation(line: 3217, column: 21, scope: !10113)
!10115 = !DILocation(line: 3217, column: 7, scope: !10110)
!10116 = !DILocation(line: 3219, column: 12, scope: !10117)
!10117 = distinct !DILexicalBlock(scope: !10113, file: !3, line: 3218, column: 2)
!10118 = !DILocation(line: 3219, column: 14, scope: !10117)
!10119 = !DILocation(line: 3219, column: 10, scope: !10117)
!10120 = !DILocation(line: 3220, column: 13, scope: !10117)
!10121 = !DILocation(line: 3220, column: 15, scope: !10117)
!10122 = !DILocation(line: 3220, column: 21, scope: !10117)
!10123 = !DILocation(line: 3220, column: 12, scope: !10117)
!10124 = !DILocation(line: 3220, column: 10, scope: !10117)
!10125 = !DILocation(line: 3221, column: 13, scope: !10117)
!10126 = !DILocation(line: 3221, column: 15, scope: !10117)
!10127 = !DILocation(line: 3221, column: 21, scope: !10117)
!10128 = !DILocation(line: 3221, column: 12, scope: !10117)
!10129 = !DILocation(line: 3221, column: 10, scope: !10117)
!10130 = !DILocation(line: 3222, column: 13, scope: !10117)
!10131 = !DILocation(line: 3222, column: 15, scope: !10117)
!10132 = !DILocation(line: 3222, column: 21, scope: !10117)
!10133 = !DILocation(line: 3222, column: 12, scope: !10117)
!10134 = !DILocation(line: 3222, column: 10, scope: !10117)
!10135 = !DILocation(line: 3224, column: 11, scope: !10117)
!10136 = !DILocation(line: 3224, column: 9, scope: !10117)
!10137 = !DILocation(line: 3225, column: 8, scope: !10138)
!10138 = distinct !DILexicalBlock(scope: !10117, file: !3, line: 3225, column: 8)
!10139 = !DILocation(line: 3225, column: 8, scope: !10117)
!10140 = !DILocation(line: 3226, column: 13, scope: !10138)
!10141 = !DILocation(line: 3226, column: 11, scope: !10138)
!10142 = !DILocation(line: 3226, column: 6, scope: !10138)
!10143 = !DILocation(line: 3229, column: 8, scope: !10144)
!10144 = distinct !DILexicalBlock(scope: !10117, file: !3, line: 3229, column: 8)
!10145 = !DILocation(line: 3229, column: 8, scope: !10117)
!10146 = !DILocation(line: 3230, column: 13, scope: !10144)
!10147 = !DILocation(line: 3230, column: 11, scope: !10144)
!10148 = !DILocation(line: 3230, column: 6, scope: !10144)
!10149 = !DILocation(line: 3232, column: 8, scope: !10150)
!10150 = distinct !DILexicalBlock(scope: !10117, file: !3, line: 3232, column: 8)
!10151 = !DILocation(line: 3232, column: 8, scope: !10117)
!10152 = !DILocation(line: 3234, column: 15, scope: !10153)
!10153 = distinct !DILexicalBlock(scope: !10150, file: !3, line: 3233, column: 6)
!10154 = !DILocation(line: 3234, column: 13, scope: !10153)
!10155 = !DILocation(line: 3239, column: 8, scope: !10153)
!10156 = !DILocation(line: 3239, column: 32, scope: !10153)
!10157 = !DILocation(line: 3241, column: 12, scope: !10158)
!10158 = distinct !DILexicalBlock(scope: !10153, file: !3, line: 3241, column: 12)
!10159 = !DILocation(line: 3241, column: 12, scope: !10153)
!10160 = !DILocation(line: 3242, column: 10, scope: !10158)
!10161 = !DILocation(line: 3242, column: 8, scope: !10158)
!10162 = !DILocation(line: 3242, column: 3, scope: !10158)
!10163 = !DILocation(line: 3246, column: 6, scope: !10153)
!10164 = !DILocation(line: 3247, column: 13, scope: !10165)
!10165 = distinct !DILexicalBlock(scope: !10150, file: !3, line: 3247, column: 13)
!10166 = !DILocation(line: 3247, column: 13, scope: !10150)
!10167 = !DILocation(line: 3248, column: 27, scope: !10165)
!10168 = !DILocation(line: 3248, column: 32, scope: !10165)
!10169 = !DILocation(line: 3248, column: 13, scope: !10165)
!10170 = !DILocation(line: 3248, column: 11, scope: !10165)
!10171 = !DILocation(line: 3248, column: 6, scope: !10165)
!10172 = !DILocation(line: 3250, column: 11, scope: !10165)
!10173 = !DILocation(line: 3252, column: 8, scope: !10174)
!10174 = distinct !DILexicalBlock(scope: !10117, file: !3, line: 3252, column: 8)
!10175 = !DILocation(line: 3252, column: 8, scope: !10117)
!10176 = !DILocation(line: 3253, column: 13, scope: !10174)
!10177 = !DILocation(line: 3253, column: 11, scope: !10174)
!10178 = !DILocation(line: 3253, column: 6, scope: !10174)
!10179 = !DILocation(line: 3255, column: 4, scope: !10117)
!10180 = !DILocation(line: 3258, column: 27, scope: !10117)
!10181 = !DILocation(line: 3258, column: 25, scope: !10117)
!10182 = !DILocation(line: 3259, column: 21, scope: !10117)
!10183 = !DILocation(line: 3260, column: 38, scope: !10117)
!10184 = !DILocation(line: 3260, column: 48, scope: !10117)
!10185 = !DILocation(line: 3260, column: 54, scope: !10117)
!10186 = !DILocation(line: 3260, column: 11, scope: !10117)
!10187 = !DILocation(line: 3260, column: 9, scope: !10117)
!10188 = !DILocation(line: 3261, column: 23, scope: !10117)
!10189 = !DILocation(line: 3261, column: 21, scope: !10117)
!10190 = !DILocation(line: 3262, column: 10, scope: !10117)
!10191 = !DILocation(line: 3262, column: 8, scope: !10117)
!10192 = !DILocation(line: 3263, column: 4, scope: !10117)
!10193 = !DILocation(line: 3265, column: 22, scope: !10117)
!10194 = !DILocation(line: 3265, column: 27, scope: !10117)
!10195 = !DILocation(line: 3265, column: 12, scope: !10117)
!10196 = !DILocation(line: 3265, column: 10, scope: !10117)
!10197 = !DILocation(line: 3266, column: 27, scope: !10117)
!10198 = !DILocation(line: 3266, column: 33, scope: !10117)
!10199 = !DILocation(line: 3266, column: 43, scope: !10117)
!10200 = !DILocation(line: 3266, column: 47, scope: !10117)
!10201 = !DILocation(line: 3266, column: 13, scope: !10117)
!10202 = !DILocation(line: 3266, column: 10, scope: !10117)
!10203 = !DILocation(line: 3268, column: 9, scope: !10204)
!10204 = distinct !DILexicalBlock(scope: !10117, file: !3, line: 3268, column: 8)
!10205 = !DILocation(line: 3268, column: 8, scope: !10117)
!10206 = !DILocation(line: 3269, column: 12, scope: !10204)
!10207 = !DILocation(line: 3269, column: 6, scope: !10204)
!10208 = !DILocation(line: 3270, column: 46, scope: !10117)
!10209 = !DILocation(line: 3270, column: 4, scope: !10117)
!10210 = !DILocation(line: 3270, column: 10, scope: !10117)
!10211 = !DILocation(line: 3270, column: 16, scope: !10117)
!10212 = !DILocation(line: 3270, column: 23, scope: !10117)
!10213 = !DILocation(line: 3270, column: 30, scope: !10117)
!10214 = !DILocation(line: 3270, column: 37, scope: !10117)
!10215 = !DILocation(line: 3270, column: 44, scope: !10117)
!10216 = !DILocation(line: 3271, column: 2, scope: !10117)
!10217 = !DILocation(line: 3217, column: 28, scope: !10113)
!10218 = !DILocation(line: 3217, column: 7, scope: !10113)
!10219 = distinct !{!10219, !10115, !10220}
!10220 = !DILocation(line: 3271, column: 2, scope: !10110)
!10221 = !DILocation(line: 3285, column: 25, scope: !9944)
!10222 = !DILocation(line: 3285, column: 39, scope: !9944)
!10223 = !DILocation(line: 3285, column: 15, scope: !9944)
!10224 = !DILocation(line: 3285, column: 13, scope: !9944)
!10225 = !DILocation(line: 3286, column: 14, scope: !10226)
!10226 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3286, column: 7)
!10227 = !DILocation(line: 3286, column: 12, scope: !10226)
!10228 = !DILocation(line: 3286, column: 19, scope: !10229)
!10229 = distinct !DILexicalBlock(scope: !10226, file: !3, line: 3286, column: 7)
!10230 = !DILocation(line: 3286, column: 21, scope: !10229)
!10231 = !DILocation(line: 3286, column: 7, scope: !10226)
!10232 = !DILocation(line: 3288, column: 12, scope: !10233)
!10233 = distinct !DILexicalBlock(scope: !10229, file: !3, line: 3287, column: 2)
!10234 = !DILocation(line: 3288, column: 14, scope: !10233)
!10235 = !DILocation(line: 3288, column: 10, scope: !10233)
!10236 = !DILocation(line: 3289, column: 13, scope: !10233)
!10237 = !DILocation(line: 3289, column: 15, scope: !10233)
!10238 = !DILocation(line: 3289, column: 21, scope: !10233)
!10239 = !DILocation(line: 3289, column: 12, scope: !10233)
!10240 = !DILocation(line: 3289, column: 10, scope: !10233)
!10241 = !DILocation(line: 3290, column: 13, scope: !10233)
!10242 = !DILocation(line: 3290, column: 15, scope: !10233)
!10243 = !DILocation(line: 3290, column: 21, scope: !10233)
!10244 = !DILocation(line: 3290, column: 12, scope: !10233)
!10245 = !DILocation(line: 3290, column: 10, scope: !10233)
!10246 = !DILocation(line: 3292, column: 12, scope: !10233)
!10247 = !DILocation(line: 3292, column: 18, scope: !10233)
!10248 = !DILocation(line: 3292, column: 30, scope: !10233)
!10249 = !DILocation(line: 3292, column: 37, scope: !10233)
!10250 = !DILocation(line: 3292, column: 44, scope: !10233)
!10251 = !DILocation(line: 3292, column: 10, scope: !10233)
!10252 = !DILocation(line: 3293, column: 8, scope: !10253)
!10253 = distinct !DILexicalBlock(scope: !10233, file: !3, line: 3293, column: 8)
!10254 = !DILocation(line: 3293, column: 8, scope: !10233)
!10255 = !DILocation(line: 3294, column: 15, scope: !10253)
!10256 = !DILocation(line: 3294, column: 12, scope: !10253)
!10257 = !DILocation(line: 3294, column: 6, scope: !10253)
!10258 = !DILocation(line: 3296, column: 8, scope: !10259)
!10259 = distinct !DILexicalBlock(scope: !10233, file: !3, line: 3296, column: 8)
!10260 = !DILocation(line: 3296, column: 16, scope: !10259)
!10261 = !DILocation(line: 3296, column: 22, scope: !10259)
!10262 = !DILocation(line: 3296, column: 31, scope: !10259)
!10263 = !DILocation(line: 3296, column: 38, scope: !10259)
!10264 = !DILocation(line: 3296, column: 45, scope: !10259)
!10265 = !DILocation(line: 3296, column: 14, scope: !10259)
!10266 = !DILocation(line: 3296, column: 8, scope: !10233)
!10267 = !DILocation(line: 3297, column: 44, scope: !10259)
!10268 = !DILocation(line: 3297, column: 6, scope: !10259)
!10269 = !DILocation(line: 3297, column: 12, scope: !10259)
!10270 = !DILocation(line: 3297, column: 21, scope: !10259)
!10271 = !DILocation(line: 3297, column: 28, scope: !10259)
!10272 = !DILocation(line: 3297, column: 35, scope: !10259)
!10273 = !DILocation(line: 3297, column: 42, scope: !10259)
!10274 = !DILocation(line: 3298, column: 2, scope: !10233)
!10275 = !DILocation(line: 3286, column: 27, scope: !10229)
!10276 = !DILocation(line: 3286, column: 7, scope: !10229)
!10277 = distinct !{!10277, !10231, !10278}
!10278 = !DILocation(line: 3298, column: 2, scope: !10226)
!10279 = !DILocation(line: 3300, column: 11, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !9944, file: !3, line: 3300, column: 11)
!10281 = !DILocation(line: 3300, column: 21, scope: !10280)
!10282 = !DILocation(line: 3300, column: 25, scope: !10280)
!10283 = !DILocation(line: 3300, column: 36, scope: !10280)
!10284 = !DILocation(line: 3300, column: 11, scope: !9944)
!10285 = !DILocation(line: 3302, column: 13, scope: !10286)
!10286 = distinct !DILexicalBlock(scope: !10280, file: !3, line: 3301, column: 2)
!10287 = !DILocation(line: 3302, column: 4, scope: !10286)
!10288 = !DILocation(line: 3304, column: 11, scope: !10289)
!10289 = distinct !DILexicalBlock(scope: !10286, file: !3, line: 3304, column: 4)
!10290 = !DILocation(line: 3304, column: 9, scope: !10289)
!10291 = !DILocation(line: 3304, column: 16, scope: !10292)
!10292 = distinct !DILexicalBlock(scope: !10289, file: !3, line: 3304, column: 4)
!10293 = !DILocation(line: 3304, column: 18, scope: !10292)
!10294 = !DILocation(line: 3304, column: 4, scope: !10289)
!10295 = !DILocation(line: 3306, column: 16, scope: !10296)
!10296 = distinct !DILexicalBlock(scope: !10292, file: !3, line: 3305, column: 6)
!10297 = !DILocation(line: 3306, column: 18, scope: !10296)
!10298 = !DILocation(line: 3306, column: 14, scope: !10296)
!10299 = !DILocation(line: 3307, column: 17, scope: !10296)
!10300 = !DILocation(line: 3307, column: 19, scope: !10296)
!10301 = !DILocation(line: 3307, column: 25, scope: !10296)
!10302 = !DILocation(line: 3307, column: 16, scope: !10296)
!10303 = !DILocation(line: 3307, column: 14, scope: !10296)
!10304 = !DILocation(line: 3308, column: 17, scope: !10296)
!10305 = !DILocation(line: 3308, column: 19, scope: !10296)
!10306 = !DILocation(line: 3308, column: 25, scope: !10296)
!10307 = !DILocation(line: 3308, column: 16, scope: !10296)
!10308 = !DILocation(line: 3308, column: 14, scope: !10296)
!10309 = !DILocation(line: 3309, column: 17, scope: !10296)
!10310 = !DILocation(line: 3309, column: 19, scope: !10296)
!10311 = !DILocation(line: 3309, column: 25, scope: !10296)
!10312 = !DILocation(line: 3309, column: 16, scope: !10296)
!10313 = !DILocation(line: 3309, column: 14, scope: !10296)
!10314 = !DILocation(line: 3311, column: 17, scope: !10296)
!10315 = !DILocation(line: 3311, column: 8, scope: !10296)
!10316 = !DILocation(line: 3312, column: 12, scope: !10317)
!10317 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 3312, column: 12)
!10318 = !DILocation(line: 3312, column: 12, scope: !10296)
!10319 = !DILocation(line: 3313, column: 12, scope: !10317)
!10320 = !DILocation(line: 3313, column: 3, scope: !10317)
!10321 = !DILocation(line: 3314, column: 12, scope: !10322)
!10322 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 3314, column: 12)
!10323 = !DILocation(line: 3314, column: 12, scope: !10296)
!10324 = !DILocation(line: 3315, column: 12, scope: !10322)
!10325 = !DILocation(line: 3315, column: 3, scope: !10322)
!10326 = !DILocation(line: 3316, column: 12, scope: !10327)
!10327 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 3316, column: 12)
!10328 = !DILocation(line: 3316, column: 12, scope: !10296)
!10329 = !DILocation(line: 3317, column: 12, scope: !10327)
!10330 = !DILocation(line: 3317, column: 3, scope: !10327)
!10331 = !DILocation(line: 3318, column: 12, scope: !10332)
!10332 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 3318, column: 12)
!10333 = !DILocation(line: 3318, column: 12, scope: !10296)
!10334 = !DILocation(line: 3319, column: 12, scope: !10332)
!10335 = !DILocation(line: 3319, column: 3, scope: !10332)
!10336 = !DILocation(line: 3321, column: 16, scope: !10296)
!10337 = !DILocation(line: 3321, column: 22, scope: !10296)
!10338 = !DILocation(line: 3321, column: 28, scope: !10296)
!10339 = !DILocation(line: 3321, column: 35, scope: !10296)
!10340 = !DILocation(line: 3321, column: 42, scope: !10296)
!10341 = !DILocation(line: 3321, column: 49, scope: !10296)
!10342 = !DILocation(line: 3321, column: 14, scope: !10296)
!10343 = !DILocation(line: 3322, column: 17, scope: !10296)
!10344 = !DILocation(line: 3322, column: 48, scope: !10296)
!10345 = !DILocation(line: 3322, column: 8, scope: !10296)
!10346 = !DILocation(line: 3323, column: 6, scope: !10296)
!10347 = !DILocation(line: 3304, column: 25, scope: !10292)
!10348 = !DILocation(line: 3304, column: 4, scope: !10292)
!10349 = distinct !{!10349, !10294, !10350}
!10350 = !DILocation(line: 3323, column: 6, scope: !10289)
!10351 = !DILocation(line: 3324, column: 19, scope: !10352)
!10352 = distinct !DILexicalBlock(scope: !10286, file: !3, line: 3324, column: 8)
!10353 = !DILocation(line: 3324, column: 8, scope: !10352)
!10354 = !DILocation(line: 3324, column: 29, scope: !10352)
!10355 = !DILocation(line: 3324, column: 44, scope: !10352)
!10356 = !DILocation(line: 3324, column: 32, scope: !10352)
!10357 = !DILocation(line: 3325, column: 8, scope: !10352)
!10358 = !DILocation(line: 3325, column: 22, scope: !10352)
!10359 = !DILocation(line: 3325, column: 11, scope: !10352)
!10360 = !DILocation(line: 3325, column: 32, scope: !10352)
!10361 = !DILocation(line: 3325, column: 47, scope: !10352)
!10362 = !DILocation(line: 3325, column: 35, scope: !10352)
!10363 = !DILocation(line: 3324, column: 8, scope: !10286)
!10364 = !DILocation(line: 3326, column: 15, scope: !10352)
!10365 = !DILocation(line: 3326, column: 6, scope: !10352)
!10366 = !DILocation(line: 3327, column: 13, scope: !10286)
!10367 = !DILocation(line: 3327, column: 4, scope: !10286)
!10368 = !DILocation(line: 3328, column: 2, scope: !10286)
!10369 = !DILocation(line: 3330, column: 7, scope: !9944)
!10370 = !DILocation(line: 3332, column: 5, scope: !9944)
!10371 = !DILocation(line: 3334, column: 10, scope: !2646)
!10372 = !DILocation(line: 3334, column: 8, scope: !2646)
!10373 = !DILocation(line: 3335, column: 44, scope: !2646)
!10374 = !DILocation(line: 3335, column: 49, scope: !2646)
!10375 = !DILocation(line: 3335, column: 40, scope: !2646)
!10376 = !DILocation(line: 3335, column: 54, scope: !2646)
!10377 = !DILocation(line: 3335, column: 10, scope: !2646)
!10378 = !DILocation(line: 3335, column: 8, scope: !2646)
!10379 = !DILocation(line: 3336, column: 13, scope: !2646)
!10380 = !DILocation(line: 3336, column: 10, scope: !2646)
!10381 = !DILocation(line: 3337, column: 8, scope: !10382)
!10382 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3337, column: 7)
!10383 = !DILocation(line: 3337, column: 19, scope: !10382)
!10384 = !DILocation(line: 3337, column: 24, scope: !10382)
!10385 = !DILocation(line: 3337, column: 15, scope: !10382)
!10386 = !DILocation(line: 3337, column: 29, scope: !10382)
!10387 = !DILocation(line: 3337, column: 7, scope: !2646)
!10388 = !DILocation(line: 3338, column: 16, scope: !10382)
!10389 = !DILocation(line: 3338, column: 15, scope: !10382)
!10390 = !DILocation(line: 3338, column: 12, scope: !10382)
!10391 = !DILocation(line: 3338, column: 5, scope: !10382)
!10392 = !DILocation(line: 3339, column: 14, scope: !2646)
!10393 = !DILocation(line: 3339, column: 12, scope: !2646)
!10394 = !DILocation(line: 3341, column: 11, scope: !2646)
!10395 = !DILocation(line: 3342, column: 11, scope: !2646)
!10396 = !DILocation(line: 3342, column: 9, scope: !2646)
!10397 = !DILocation(line: 3343, column: 20, scope: !2646)
!10398 = !DILocation(line: 3343, column: 18, scope: !2646)
!10399 = !DILocation(line: 3344, column: 7, scope: !10400)
!10400 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3344, column: 7)
!10401 = !DILocation(line: 3344, column: 7, scope: !2646)
!10402 = !DILocation(line: 3345, column: 23, scope: !10400)
!10403 = !DILocation(line: 3345, column: 31, scope: !10400)
!10404 = !DILocation(line: 3345, column: 29, scope: !10400)
!10405 = !DILocation(line: 3345, column: 20, scope: !10400)
!10406 = !DILocation(line: 3345, column: 5, scope: !10400)
!10407 = !DILocation(line: 3346, column: 7, scope: !10408)
!10408 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3346, column: 7)
!10409 = !DILocation(line: 3346, column: 22, scope: !10408)
!10410 = !DILocation(line: 3346, column: 25, scope: !10408)
!10411 = !DILocation(line: 3346, column: 37, scope: !10408)
!10412 = !DILocation(line: 3346, column: 40, scope: !10408)
!10413 = !DILocation(line: 3346, column: 46, scope: !10408)
!10414 = !DILocation(line: 3346, column: 7, scope: !2646)
!10415 = !DILocation(line: 3347, column: 13, scope: !10408)
!10416 = !DILocation(line: 3347, column: 5, scope: !10408)
!10417 = !DILocation(line: 3348, column: 25, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10408, file: !3, line: 3348, column: 12)
!10419 = !DILocation(line: 3348, column: 13, scope: !10418)
!10420 = !DILocation(line: 3348, column: 35, scope: !10418)
!10421 = !DILocation(line: 3348, column: 38, scope: !10418)
!10422 = !DILocation(line: 3348, column: 53, scope: !10418)
!10423 = !DILocation(line: 3349, column: 9, scope: !10418)
!10424 = !DILocation(line: 3349, column: 12, scope: !10418)
!10425 = !DILocation(line: 3349, column: 21, scope: !10418)
!10426 = !DILocation(line: 3349, column: 18, scope: !10418)
!10427 = !DILocation(line: 3350, column: 5, scope: !10418)
!10428 = !DILocation(line: 3350, column: 21, scope: !10418)
!10429 = !DILocation(line: 3350, column: 9, scope: !10418)
!10430 = !DILocation(line: 3350, column: 31, scope: !10418)
!10431 = !DILocation(line: 3350, column: 34, scope: !10418)
!10432 = !DILocation(line: 3350, column: 49, scope: !10418)
!10433 = !DILocation(line: 3351, column: 9, scope: !10418)
!10434 = !DILocation(line: 3351, column: 12, scope: !10418)
!10435 = !DILocation(line: 3351, column: 22, scope: !10418)
!10436 = !DILocation(line: 3351, column: 21, scope: !10418)
!10437 = !DILocation(line: 3351, column: 18, scope: !10418)
!10438 = !DILocation(line: 3352, column: 5, scope: !10418)
!10439 = !DILocation(line: 3352, column: 20, scope: !10418)
!10440 = !DILocation(line: 3352, column: 9, scope: !10418)
!10441 = !DILocation(line: 3352, column: 30, scope: !10418)
!10442 = !DILocation(line: 3352, column: 33, scope: !10418)
!10443 = !DILocation(line: 3352, column: 51, scope: !10418)
!10444 = !DILocation(line: 3352, column: 48, scope: !10418)
!10445 = !DILocation(line: 3353, column: 9, scope: !10418)
!10446 = !DILocation(line: 3353, column: 12, scope: !10418)
!10447 = !DILocation(line: 3353, column: 21, scope: !10418)
!10448 = !DILocation(line: 3353, column: 18, scope: !10418)
!10449 = !DILocation(line: 3354, column: 5, scope: !10418)
!10450 = !DILocation(line: 3354, column: 20, scope: !10418)
!10451 = !DILocation(line: 3354, column: 9, scope: !10418)
!10452 = !DILocation(line: 3354, column: 30, scope: !10418)
!10453 = !DILocation(line: 3354, column: 33, scope: !10418)
!10454 = !DILocation(line: 3354, column: 52, scope: !10418)
!10455 = !DILocation(line: 3354, column: 51, scope: !10418)
!10456 = !DILocation(line: 3354, column: 48, scope: !10418)
!10457 = !DILocation(line: 3355, column: 9, scope: !10418)
!10458 = !DILocation(line: 3355, column: 12, scope: !10418)
!10459 = !DILocation(line: 3355, column: 22, scope: !10418)
!10460 = !DILocation(line: 3355, column: 21, scope: !10418)
!10461 = !DILocation(line: 3355, column: 18, scope: !10418)
!10462 = !DILocation(line: 3348, column: 12, scope: !10408)
!10463 = !DILocation(line: 3356, column: 13, scope: !10418)
!10464 = !DILocation(line: 3356, column: 5, scope: !10418)
!10465 = !DILocation(line: 3358, column: 8, scope: !2646)
!10466 = !DILocation(line: 3359, column: 15, scope: !2646)
!10467 = !DILocation(line: 3359, column: 24, scope: !2646)
!10468 = !DILocation(line: 3360, column: 8, scope: !2646)
!10469 = !DILocation(line: 3360, column: 11, scope: !2646)
!10470 = !DILocation(line: 3360, column: 17, scope: !2646)
!10471 = !DILocation(line: 3360, column: 31, scope: !2646)
!10472 = !DILocation(line: 3360, column: 28, scope: !2646)
!10473 = !DILocation(line: 3361, column: 8, scope: !2646)
!10474 = !DILocation(line: 3361, column: 11, scope: !2646)
!10475 = !DILocation(line: 3361, column: 23, scope: !2646)
!10476 = !DILocation(line: 3361, column: 29, scope: !2646)
!10477 = !DILocation(line: 3361, column: 20, scope: !2646)
!10478 = !DILocation(line: 0, scope: !2646)
!10479 = !DILocation(line: 3359, column: 14, scope: !2646)
!10480 = !DILocation(line: 3359, column: 12, scope: !2646)
!10481 = !DILocation(line: 3362, column: 14, scope: !2646)
!10482 = !DILocation(line: 3362, column: 20, scope: !2646)
!10483 = !DILocation(line: 3363, column: 7, scope: !2646)
!10484 = !DILocation(line: 3363, column: 43, scope: !2646)
!10485 = !DILocation(line: 3363, column: 50, scope: !2646)
!10486 = !DILocation(line: 3363, column: 60, scope: !2646)
!10487 = !DILocation(line: 3363, column: 10, scope: !2646)
!10488 = !DILocation(line: 3362, column: 13, scope: !2646)
!10489 = !DILocation(line: 3362, column: 11, scope: !2646)
!10490 = !DILocation(line: 3365, column: 7, scope: !10491)
!10491 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3365, column: 7)
!10492 = !DILocation(line: 3365, column: 13, scope: !10491)
!10493 = !DILocation(line: 3365, column: 18, scope: !10491)
!10494 = !DILocation(line: 3365, column: 22, scope: !10491)
!10495 = !DILocation(line: 3365, column: 7, scope: !2646)
!10496 = !DILocation(line: 3366, column: 31, scope: !10491)
!10497 = !DILocation(line: 3366, column: 38, scope: !10491)
!10498 = !DILocation(line: 3366, column: 52, scope: !10491)
!10499 = !DILocation(line: 3366, column: 13, scope: !10491)
!10500 = !DILocation(line: 3366, column: 10, scope: !10491)
!10501 = !DILocation(line: 3366, column: 5, scope: !10491)
!10502 = !DILocation(line: 3368, column: 7, scope: !10503)
!10503 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3368, column: 7)
!10504 = !DILocation(line: 3368, column: 16, scope: !10503)
!10505 = !DILocation(line: 3368, column: 20, scope: !10503)
!10506 = !DILocation(line: 3368, column: 29, scope: !10503)
!10507 = !DILocation(line: 3368, column: 33, scope: !10503)
!10508 = !DILocation(line: 3368, column: 7, scope: !2646)
!10509 = !DILocation(line: 3369, column: 23, scope: !10503)
!10510 = !DILocation(line: 3369, column: 37, scope: !10503)
!10511 = !DILocation(line: 3369, column: 13, scope: !10503)
!10512 = !DILocation(line: 3369, column: 10, scope: !10503)
!10513 = !DILocation(line: 3369, column: 5, scope: !10503)
!10514 = !DILocation(line: 3371, column: 7, scope: !10515)
!10515 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 3371, column: 7)
!10516 = !DILocation(line: 3371, column: 7, scope: !2646)
!10517 = !DILocation(line: 3372, column: 20, scope: !10515)
!10518 = !DILocation(line: 3372, column: 6, scope: !10515)
!10519 = !DILocation(line: 3372, column: 18, scope: !10515)
!10520 = !DILocation(line: 3372, column: 5, scope: !10515)
!10521 = !DILocation(line: 3373, column: 11, scope: !2646)
!10522 = !DILocation(line: 3373, column: 17, scope: !2646)
!10523 = !DILocation(line: 3373, column: 23, scope: !2646)
!10524 = !DILocation(line: 3373, column: 39, scope: !2646)
!10525 = !DILocation(line: 3373, column: 52, scope: !2646)
!10526 = !DILocation(line: 3373, column: 62, scope: !2646)
!10527 = !DILocation(line: 3373, column: 9, scope: !2646)
!10528 = !DILocation(line: 3374, column: 17, scope: !2646)
!10529 = !DILocation(line: 3374, column: 32, scope: !2646)
!10530 = !DILocation(line: 3374, column: 41, scope: !2646)
!10531 = !DILocation(line: 3374, column: 53, scope: !2646)
!10532 = !DILocation(line: 3374, column: 38, scope: !2646)
!10533 = !DILocation(line: 3374, column: 61, scope: !2646)
!10534 = !DILocation(line: 3374, column: 59, scope: !2646)
!10535 = !DILocation(line: 3374, column: 72, scope: !2646)
!10536 = !DILocation(line: 3374, column: 70, scope: !2646)
!10537 = !DILocation(line: 3374, column: 14, scope: !2646)
!10538 = !DILocation(line: 3375, column: 20, scope: !2646)
!10539 = !DILocation(line: 3375, column: 27, scope: !2646)
!10540 = !DILocation(line: 3375, column: 25, scope: !2646)
!10541 = !DILocation(line: 3375, column: 34, scope: !2646)
!10542 = !DILocation(line: 3375, column: 10, scope: !2646)
!10543 = !DILocation(line: 3375, column: 3, scope: !2646)
!10544 = distinct !DISubprogram(name: "get_computation_at", scope: !3, file: !3, line: 2911, type: !10545, scopeLine: 2913, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10545 = !DISubroutineType(types: !10546)
!10546 = !{!1134, !1651, !2457, !2472, !1436}
!10547 = !DILocalVariable(name: "loop", arg: 1, scope: !10544, file: !3, line: 2911, type: !1651)
!10548 = !DILocation(line: 2911, column: 34, scope: !10544)
!10549 = !DILocalVariable(name: "use", arg: 2, scope: !10544, file: !3, line: 2912, type: !2457)
!10550 = !DILocation(line: 2912, column: 22, scope: !10544)
!10551 = !DILocalVariable(name: "cand", arg: 3, scope: !10544, file: !3, line: 2912, type: !2472)
!10552 = !DILocation(line: 2912, column: 43, scope: !10544)
!10553 = !DILocalVariable(name: "at", arg: 4, scope: !10544, file: !3, line: 2912, type: !1436)
!10554 = !DILocation(line: 2912, column: 56, scope: !10544)
!10555 = !DILocalVariable(name: "aff", scope: !10544, file: !3, line: 2914, type: !9656)
!10556 = !DILocation(line: 2914, column: 12, scope: !10544)
!10557 = !DILocalVariable(name: "type", scope: !10544, file: !3, line: 2915, type: !1134)
!10558 = !DILocation(line: 2915, column: 8, scope: !10544)
!10559 = !DILocation(line: 2915, column: 15, scope: !10544)
!10560 = !DILocation(line: 2917, column: 29, scope: !10561)
!10561 = distinct !DILexicalBlock(scope: !10544, file: !3, line: 2917, column: 7)
!10562 = !DILocation(line: 2917, column: 35, scope: !10561)
!10563 = !DILocation(line: 2917, column: 40, scope: !10561)
!10564 = !DILocation(line: 2917, column: 46, scope: !10561)
!10565 = !DILocation(line: 2917, column: 8, scope: !10561)
!10566 = !DILocation(line: 2917, column: 7, scope: !10544)
!10567 = !DILocation(line: 2918, column: 5, scope: !10561)
!10568 = !DILocation(line: 2919, column: 3, scope: !10544)
!10569 = !DILocation(line: 2920, column: 10, scope: !10544)
!10570 = !DILocation(line: 2920, column: 3, scope: !10544)
!10571 = !DILocation(line: 2921, column: 1, scope: !10544)
!10572 = distinct !DISubprogram(name: "new_cost", scope: !3, file: !3, line: 2499, type: !10573, scopeLine: 2500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10573 = !DISubroutineType(types: !10574)
!10574 = !{!2487, !6, !6}
!10575 = !DILocalVariable(name: "runtime", arg: 1, scope: !10572, file: !3, line: 2499, type: !6)
!10576 = !DILocation(line: 2499, column: 20, scope: !10572)
!10577 = !DILocalVariable(name: "complexity", arg: 2, scope: !10572, file: !3, line: 2499, type: !6)
!10578 = !DILocation(line: 2499, column: 38, scope: !10572)
!10579 = !DILocalVariable(name: "cost", scope: !10572, file: !3, line: 2501, type: !2487)
!10580 = !DILocation(line: 2501, column: 13, scope: !10572)
!10581 = !DILocation(line: 2503, column: 15, scope: !10572)
!10582 = !DILocation(line: 2503, column: 8, scope: !10572)
!10583 = !DILocation(line: 2503, column: 13, scope: !10572)
!10584 = !DILocation(line: 2504, column: 21, scope: !10572)
!10585 = !DILocation(line: 2504, column: 8, scope: !10572)
!10586 = !DILocation(line: 2504, column: 19, scope: !10572)
!10587 = !DILocation(line: 2506, column: 3, scope: !10572)
!10588 = distinct !DISubprogram(name: "computation_cost", scope: !3, file: !3, line: 2737, type: !10589, scopeLine: 2738, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10589 = !DISubroutineType(types: !10590)
!10590 = !{!6, !1134, !136}
!10591 = !DILocalVariable(name: "expr", arg: 1, scope: !10588, file: !3, line: 2737, type: !1134)
!10592 = !DILocation(line: 2737, column: 24, scope: !10588)
!10593 = !DILocalVariable(name: "speed", arg: 2, scope: !10588, file: !3, line: 2737, type: !136)
!10594 = !DILocation(line: 2737, column: 35, scope: !10588)
!10595 = !DILocalVariable(name: "seq", scope: !10588, file: !3, line: 2739, type: !1015)
!10596 = !DILocation(line: 2739, column: 7, scope: !10588)
!10597 = !DILocalVariable(name: "rslt", scope: !10588, file: !3, line: 2739, type: !1015)
!10598 = !DILocation(line: 2739, column: 12, scope: !10588)
!10599 = !DILocalVariable(name: "type", scope: !10588, file: !3, line: 2740, type: !1134)
!10600 = !DILocation(line: 2740, column: 8, scope: !10588)
!10601 = !DILocation(line: 2740, column: 15, scope: !10588)
!10602 = !DILocalVariable(name: "cost", scope: !10588, file: !3, line: 2741, type: !6)
!10603 = !DILocation(line: 2741, column: 12, scope: !10588)
!10604 = !DILocalVariable(name: "regno", scope: !10588, file: !3, line: 2743, type: !1006)
!10605 = !DILocation(line: 2743, column: 7, scope: !10588)
!10606 = !DILocalVariable(name: "real_frequency", scope: !10588, file: !3, line: 2744, type: !947)
!10607 = !DILocation(line: 2744, column: 27, scope: !10588)
!10608 = !DILocation(line: 2744, column: 44, scope: !10588)
!10609 = !DILocation(line: 2744, column: 50, scope: !10588)
!10610 = !DILocation(line: 2746, column: 3, scope: !10588)
!10611 = !DILocation(line: 2746, column: 9, scope: !10588)
!10612 = !DILocation(line: 2746, column: 28, scope: !10588)
!10613 = !DILocation(line: 2747, column: 28, scope: !10588)
!10614 = !DILocation(line: 2747, column: 26, scope: !10588)
!10615 = !DILocation(line: 2748, column: 3, scope: !10588)
!10616 = !DILocation(line: 2749, column: 3, scope: !10588)
!10617 = !DILocation(line: 2750, column: 23, scope: !10588)
!10618 = !DILocation(line: 2750, column: 39, scope: !10588)
!10619 = !DILocation(line: 2750, column: 10, scope: !10588)
!10620 = !DILocation(line: 2750, column: 8, scope: !10588)
!10621 = !DILocation(line: 2751, column: 9, scope: !10588)
!10622 = !DILocation(line: 2751, column: 7, scope: !10588)
!10623 = !DILocation(line: 2752, column: 3, scope: !10588)
!10624 = !DILocation(line: 2753, column: 3, scope: !10588)
!10625 = !DILocation(line: 2754, column: 30, scope: !10588)
!10626 = !DILocation(line: 2754, column: 3, scope: !10588)
!10627 = !DILocation(line: 2754, column: 9, scope: !10588)
!10628 = !DILocation(line: 2754, column: 28, scope: !10588)
!10629 = !DILocation(line: 2756, column: 20, scope: !10588)
!10630 = !DILocation(line: 2756, column: 25, scope: !10588)
!10631 = !DILocation(line: 2756, column: 10, scope: !10588)
!10632 = !DILocation(line: 2756, column: 8, scope: !10588)
!10633 = !DILocation(line: 2757, column: 7, scope: !10634)
!10634 = distinct !DILexicalBlock(scope: !10588, file: !3, line: 2757, column: 7)
!10635 = !DILocation(line: 2757, column: 7, scope: !10588)
!10636 = !DILocation(line: 2758, column: 27, scope: !10634)
!10637 = !DILocation(line: 2758, column: 43, scope: !10634)
!10638 = !DILocation(line: 2759, column: 6, scope: !10634)
!10639 = !DILocation(line: 2759, column: 30, scope: !10634)
!10640 = !DILocation(line: 2758, column: 13, scope: !10634)
!10641 = !DILocation(line: 2758, column: 10, scope: !10634)
!10642 = !DILocation(line: 2758, column: 5, scope: !10634)
!10643 = !DILocation(line: 2761, column: 10, scope: !10588)
!10644 = !DILocation(line: 2761, column: 3, scope: !10588)
!10645 = distinct !DISubprogram(name: "shwi_to_double_int", scope: !1183, file: !1183, line: 72, type: !10646, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10646 = !DISubroutineType(types: !10647)
!10647 = !{!1182, !7}
!10648 = !DILocalVariable(name: "cst", arg: 1, scope: !10645, file: !1183, line: 72, type: !7)
!10649 = !DILocation(line: 72, column: 35, scope: !10645)
!10650 = !DILocalVariable(name: "r", scope: !10645, file: !1183, line: 74, type: !1182)
!10651 = !DILocation(line: 74, column: 14, scope: !10645)
!10652 = !DILocation(line: 76, column: 36, scope: !10645)
!10653 = !DILocation(line: 76, column: 5, scope: !10645)
!10654 = !DILocation(line: 76, column: 9, scope: !10645)
!10655 = !DILocation(line: 77, column: 12, scope: !10645)
!10656 = !DILocation(line: 77, column: 16, scope: !10645)
!10657 = !DILocation(line: 77, column: 5, scope: !10645)
!10658 = !DILocation(line: 77, column: 10, scope: !10645)
!10659 = !DILocation(line: 79, column: 3, scope: !10645)
!10660 = distinct !DISubprogram(name: "double_int_zero_p", scope: !1183, file: !1183, line: 152, type: !10661, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10661 = !DISubroutineType(types: !10662)
!10662 = !{!136, !1182}
!10663 = !DILocalVariable(name: "cst", arg: 1, scope: !10660, file: !1183, line: 152, type: !1182)
!10664 = !DILocation(line: 152, column: 31, scope: !10660)
!10665 = !DILocation(line: 154, column: 14, scope: !10660)
!10666 = !DILocation(line: 154, column: 18, scope: !10660)
!10667 = !DILocation(line: 154, column: 23, scope: !10660)
!10668 = !DILocation(line: 154, column: 30, scope: !10660)
!10669 = !DILocation(line: 154, column: 35, scope: !10660)
!10670 = !DILocation(line: 0, scope: !10660)
!10671 = !DILocation(line: 154, column: 10, scope: !10660)
!10672 = !DILocation(line: 154, column: 3, scope: !10660)
!10673 = distinct !DISubprogram(name: "ptr_difference_cost", scope: !3, file: !3, line: 3599, type: !9632, scopeLine: 3602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10674 = !DILocalVariable(name: "data", arg: 1, scope: !10673, file: !3, line: 3599, type: !2530)
!10675 = !DILocation(line: 3599, column: 42, scope: !10673)
!10676 = !DILocalVariable(name: "e1", arg: 2, scope: !10673, file: !3, line: 3600, type: !1134)
!10677 = !DILocation(line: 3600, column: 13, scope: !10673)
!10678 = !DILocalVariable(name: "e2", arg: 3, scope: !10673, file: !3, line: 3600, type: !1134)
!10679 = !DILocation(line: 3600, column: 22, scope: !10673)
!10680 = !DILocalVariable(name: "symbol_present", arg: 4, scope: !10673, file: !3, line: 3600, type: !2421)
!10681 = !DILocation(line: 3600, column: 32, scope: !10673)
!10682 = !DILocalVariable(name: "var_present", arg: 5, scope: !10673, file: !3, line: 3600, type: !2421)
!10683 = !DILocation(line: 3600, column: 54, scope: !10673)
!10684 = !DILocalVariable(name: "offset", arg: 6, scope: !10673, file: !3, line: 3601, type: !8813)
!10685 = !DILocation(line: 3601, column: 32, scope: !10673)
!10686 = !DILocalVariable(name: "depends_on", arg: 7, scope: !10673, file: !3, line: 3601, type: !2550)
!10687 = !DILocation(line: 3601, column: 48, scope: !10673)
!10688 = !DILocalVariable(name: "diff", scope: !10673, file: !3, line: 3603, type: !7)
!10689 = !DILocation(line: 3603, column: 17, scope: !10673)
!10690 = !DILocalVariable(name: "aff_e1", scope: !10673, file: !3, line: 3604, type: !9656)
!10691 = !DILocation(line: 3604, column: 12, scope: !10673)
!10692 = !DILocalVariable(name: "aff_e2", scope: !10673, file: !3, line: 3604, type: !9656)
!10693 = !DILocation(line: 3604, column: 20, scope: !10673)
!10694 = !DILocalVariable(name: "type", scope: !10673, file: !3, line: 3605, type: !1134)
!10695 = !DILocation(line: 3605, column: 8, scope: !10673)
!10696 = !DILocation(line: 3607, column: 3, scope: !10673)
!10697 = !DILocation(line: 3609, column: 29, scope: !10698)
!10698 = distinct !DILexicalBlock(scope: !10673, file: !3, line: 3609, column: 7)
!10699 = !DILocation(line: 3609, column: 33, scope: !10698)
!10700 = !DILocation(line: 3609, column: 7, scope: !10698)
!10701 = !DILocation(line: 3609, column: 7, scope: !10673)
!10702 = !DILocation(line: 3611, column: 18, scope: !10703)
!10703 = distinct !DILexicalBlock(scope: !10698, file: !3, line: 3610, column: 5)
!10704 = !DILocation(line: 3611, column: 8, scope: !10703)
!10705 = !DILocation(line: 3611, column: 15, scope: !10703)
!10706 = !DILocation(line: 3612, column: 8, scope: !10703)
!10707 = !DILocation(line: 3612, column: 23, scope: !10703)
!10708 = !DILocation(line: 3613, column: 8, scope: !10703)
!10709 = !DILocation(line: 3613, column: 20, scope: !10703)
!10710 = !DILocation(line: 3614, column: 14, scope: !10703)
!10711 = !DILocation(line: 3614, column: 7, scope: !10703)
!10712 = !DILocation(line: 3617, column: 22, scope: !10713)
!10713 = distinct !DILexicalBlock(scope: !10673, file: !3, line: 3617, column: 7)
!10714 = !DILocation(line: 3617, column: 7, scope: !10713)
!10715 = !DILocation(line: 3617, column: 7, scope: !10673)
!10716 = !DILocation(line: 3618, column: 32, scope: !10713)
!10717 = !DILocation(line: 3618, column: 38, scope: !10713)
!10718 = !DILocation(line: 3619, column: 11, scope: !10713)
!10719 = !DILocation(line: 3619, column: 27, scope: !10713)
!10720 = !DILocation(line: 3619, column: 40, scope: !10713)
!10721 = !DILocation(line: 3619, column: 48, scope: !10713)
!10722 = !DILocation(line: 3618, column: 12, scope: !10713)
!10723 = !DILocation(line: 3618, column: 5, scope: !10713)
!10724 = !DILocation(line: 3621, column: 4, scope: !10673)
!10725 = !DILocation(line: 3621, column: 19, scope: !10673)
!10726 = !DILocation(line: 3622, column: 4, scope: !10673)
!10727 = !DILocation(line: 3622, column: 16, scope: !10673)
!10728 = !DILocation(line: 3624, column: 27, scope: !10673)
!10729 = !DILocation(line: 3624, column: 10, scope: !10673)
!10730 = !DILocation(line: 3624, column: 8, scope: !10673)
!10731 = !DILocation(line: 3625, column: 28, scope: !10673)
!10732 = !DILocation(line: 3625, column: 32, scope: !10673)
!10733 = !DILocation(line: 3625, column: 3, scope: !10673)
!10734 = !DILocation(line: 3626, column: 28, scope: !10673)
!10735 = !DILocation(line: 3626, column: 32, scope: !10673)
!10736 = !DILocation(line: 3626, column: 3, scope: !10673)
!10737 = !DILocation(line: 3627, column: 35, scope: !10673)
!10738 = !DILocation(line: 3627, column: 3, scope: !10673)
!10739 = !DILocation(line: 3628, column: 3, scope: !10673)
!10740 = !DILocation(line: 3630, column: 26, scope: !10673)
!10741 = !DILocation(line: 3630, column: 32, scope: !10673)
!10742 = !DILocation(line: 3630, column: 67, scope: !10673)
!10743 = !DILocation(line: 3630, column: 10, scope: !10673)
!10744 = !DILocation(line: 3630, column: 3, scope: !10673)
!10745 = !DILocation(line: 3631, column: 1, scope: !10673)
!10746 = distinct !DISubprogram(name: "split_address_cost", scope: !3, file: !3, line: 3553, type: !10747, scopeLine: 3556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!10747 = !DISubroutineType(types: !10748)
!10748 = !{!2487, !2530, !1134, !2421, !2421, !8813, !2550}
!10749 = !DILocalVariable(name: "data", arg: 1, scope: !10746, file: !3, line: 3553, type: !2530)
!10750 = !DILocation(line: 3553, column: 41, scope: !10746)
!10751 = !DILocalVariable(name: "addr", arg: 2, scope: !10746, file: !3, line: 3554, type: !1134)
!10752 = !DILocation(line: 3554, column: 12, scope: !10746)
!10753 = !DILocalVariable(name: "symbol_present", arg: 3, scope: !10746, file: !3, line: 3554, type: !2421)
!10754 = !DILocation(line: 3554, column: 24, scope: !10746)
!10755 = !DILocalVariable(name: "var_present", arg: 4, scope: !10746, file: !3, line: 3554, type: !2421)
!10756 = !DILocation(line: 3554, column: 46, scope: !10746)
!10757 = !DILocalVariable(name: "offset", arg: 5, scope: !10746, file: !3, line: 3555, type: !8813)
!10758 = !DILocation(line: 3555, column: 31, scope: !10746)
!10759 = !DILocalVariable(name: "depends_on", arg: 6, scope: !10746, file: !3, line: 3555, type: !2550)
!10760 = !DILocation(line: 3555, column: 47, scope: !10746)
!10761 = !DILocalVariable(name: "core", scope: !10746, file: !3, line: 3557, type: !1134)
!10762 = !DILocation(line: 3557, column: 8, scope: !10746)
!10763 = !DILocalVariable(name: "bitsize", scope: !10746, file: !3, line: 3558, type: !7)
!10764 = !DILocation(line: 3558, column: 17, scope: !10746)
!10765 = !DILocalVariable(name: "bitpos", scope: !10746, file: !3, line: 3559, type: !7)
!10766 = !DILocation(line: 3559, column: 17, scope: !10746)
!10767 = !DILocalVariable(name: "toffset", scope: !10746, file: !3, line: 3560, type: !1134)
!10768 = !DILocation(line: 3560, column: 8, scope: !10746)
!10769 = !DILocalVariable(name: "mode", scope: !10746, file: !3, line: 3561, type: !8)
!10770 = !DILocation(line: 3561, column: 21, scope: !10746)
!10771 = !DILocalVariable(name: "unsignedp", scope: !10746, file: !3, line: 3562, type: !1006)
!10772 = !DILocation(line: 3562, column: 7, scope: !10746)
!10773 = !DILocalVariable(name: "volatilep", scope: !10746, file: !3, line: 3562, type: !1006)
!10774 = !DILocation(line: 3562, column: 18, scope: !10746)
!10775 = !DILocation(line: 3564, column: 31, scope: !10746)
!10776 = !DILocation(line: 3564, column: 10, scope: !10746)
!10777 = !DILocation(line: 3564, column: 8, scope: !10746)
!10778 = !DILocation(line: 3567, column: 7, scope: !10779)
!10779 = distinct !DILexicalBlock(scope: !10746, file: !3, line: 3567, column: 7)
!10780 = !DILocation(line: 3567, column: 15, scope: !10779)
!10781 = !DILocation(line: 3568, column: 7, scope: !10779)
!10782 = !DILocation(line: 3568, column: 10, scope: !10779)
!10783 = !DILocation(line: 3568, column: 17, scope: !10779)
!10784 = !DILocation(line: 3568, column: 33, scope: !10779)
!10785 = !DILocation(line: 3569, column: 7, scope: !10779)
!10786 = !DILocation(line: 3569, column: 10, scope: !10779)
!10787 = !DILocation(line: 3569, column: 27, scope: !10779)
!10788 = !DILocation(line: 3567, column: 7, scope: !10746)
!10789 = !DILocation(line: 3571, column: 8, scope: !10790)
!10790 = distinct !DILexicalBlock(scope: !10779, file: !3, line: 3570, column: 5)
!10791 = !DILocation(line: 3571, column: 23, scope: !10790)
!10792 = !DILocation(line: 3572, column: 8, scope: !10790)
!10793 = !DILocation(line: 3572, column: 20, scope: !10790)
!10794 = !DILocation(line: 3573, column: 24, scope: !10790)
!10795 = !DILocation(line: 3573, column: 22, scope: !10790)
!10796 = !DILocation(line: 3574, column: 7, scope: !10790)
!10797 = !DILocation(line: 3575, column: 42, scope: !10790)
!10798 = !DILocation(line: 3575, column: 48, scope: !10790)
!10799 = !DILocation(line: 3575, column: 24, scope: !10790)
!10800 = !DILocation(line: 3575, column: 14, scope: !10790)
!10801 = !DILocation(line: 3575, column: 7, scope: !10790)
!10802 = !DILocation(line: 3578, column: 14, scope: !10746)
!10803 = !DILocation(line: 3578, column: 21, scope: !10746)
!10804 = !DILocation(line: 3578, column: 4, scope: !10746)
!10805 = !DILocation(line: 3578, column: 11, scope: !10746)
!10806 = !DILocation(line: 3579, column: 7, scope: !10807)
!10807 = distinct !DILexicalBlock(scope: !10746, file: !3, line: 3579, column: 7)
!10808 = !DILocation(line: 3580, column: 7, scope: !10807)
!10809 = !DILocation(line: 3580, column: 10, scope: !10807)
!10810 = !DILocation(line: 3579, column: 7, scope: !10746)
!10811 = !DILocation(line: 3582, column: 8, scope: !10812)
!10812 = distinct !DILexicalBlock(scope: !10807, file: !3, line: 3581, column: 5)
!10813 = !DILocation(line: 3582, column: 23, scope: !10812)
!10814 = !DILocation(line: 3583, column: 8, scope: !10812)
!10815 = !DILocation(line: 3583, column: 20, scope: !10812)
!10816 = !DILocation(line: 3584, column: 14, scope: !10812)
!10817 = !DILocation(line: 3584, column: 7, scope: !10812)
!10818 = !DILocation(line: 3587, column: 4, scope: !10746)
!10819 = !DILocation(line: 3587, column: 19, scope: !10746)
!10820 = !DILocation(line: 3588, column: 4, scope: !10746)
!10821 = !DILocation(line: 3588, column: 16, scope: !10746)
!10822 = !DILocation(line: 3589, column: 10, scope: !10746)
!10823 = !DILocation(line: 3589, column: 3, scope: !10746)
!10824 = !DILocation(line: 3590, column: 1, scope: !10746)
!10825 = !DILocalVariable(name: "expr", arg: 1, scope: !2627, file: !3, line: 3381, type: !1134)
!10826 = !DILocation(line: 3381, column: 30, scope: !2627)
!10827 = !DILocalVariable(name: "speed", arg: 2, scope: !2627, file: !3, line: 3381, type: !136)
!10828 = !DILocation(line: 3381, column: 41, scope: !2627)
!10829 = !DILocalVariable(name: "op0", scope: !2627, file: !3, line: 3387, type: !1134)
!10830 = !DILocation(line: 3387, column: 8, scope: !2627)
!10831 = !DILocalVariable(name: "op1", scope: !2627, file: !3, line: 3387, type: !1134)
!10832 = !DILocation(line: 3387, column: 13, scope: !2627)
!10833 = !DILocalVariable(name: "cost0", scope: !2627, file: !3, line: 3388, type: !2487)
!10834 = !DILocation(line: 3388, column: 13, scope: !2627)
!10835 = !DILocalVariable(name: "cost1", scope: !2627, file: !3, line: 3388, type: !2487)
!10836 = !DILocation(line: 3388, column: 20, scope: !2627)
!10837 = !DILocalVariable(name: "cost", scope: !2627, file: !3, line: 3388, type: !2487)
!10838 = !DILocation(line: 3388, column: 27, scope: !2627)
!10839 = !DILocalVariable(name: "mode", scope: !2627, file: !3, line: 3389, type: !8)
!10840 = !DILocation(line: 3389, column: 21, scope: !2627)
!10841 = !DILocation(line: 3391, column: 8, scope: !10842)
!10842 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 3391, column: 7)
!10843 = !DILocation(line: 3391, column: 7, scope: !2627)
!10844 = !DILocalVariable(name: "type", scope: !10845, file: !3, line: 3393, type: !1134)
!10845 = distinct !DILexicalBlock(scope: !10842, file: !3, line: 3392, column: 5)
!10846 = !DILocation(line: 3393, column: 12, scope: !10845)
!10847 = !DILocation(line: 3393, column: 39, scope: !10845)
!10848 = !DILocation(line: 3393, column: 19, scope: !10845)
!10849 = !DILocalVariable(name: "var", scope: !10845, file: !3, line: 3394, type: !1134)
!10850 = !DILocation(line: 3394, column: 12, scope: !10845)
!10851 = !DILocalVariable(name: "addr", scope: !10845, file: !3, line: 3394, type: !1134)
!10852 = !DILocation(line: 3394, column: 17, scope: !10845)
!10853 = !DILocalVariable(name: "x", scope: !10845, file: !3, line: 3395, type: !1015)
!10854 = !DILocation(line: 3395, column: 11, scope: !10845)
!10855 = !DILocalVariable(name: "i", scope: !10845, file: !3, line: 3396, type: !1006)
!10856 = !DILocation(line: 3396, column: 11, scope: !10845)
!10857 = !DILocation(line: 3398, column: 33, scope: !10845)
!10858 = !DILocation(line: 3398, column: 13, scope: !10845)
!10859 = !DILocation(line: 3398, column: 11, scope: !10845)
!10860 = !DILocation(line: 3399, column: 7, scope: !10845)
!10861 = !DILocation(line: 3399, column: 25, scope: !10845)
!10862 = !DILocation(line: 3400, column: 36, scope: !10845)
!10863 = !DILocation(line: 3400, column: 11, scope: !10845)
!10864 = !DILocation(line: 3400, column: 9, scope: !10845)
!10865 = !DILocation(line: 3401, column: 7, scope: !10845)
!10866 = !DILocation(line: 3403, column: 14, scope: !10845)
!10867 = !DILocation(line: 3403, column: 12, scope: !10845)
!10868 = !DILocation(line: 3406, column: 14, scope: !10869)
!10869 = distinct !DILexicalBlock(scope: !10845, file: !3, line: 3406, column: 7)
!10870 = !DILocation(line: 3406, column: 12, scope: !10869)
!10871 = !DILocation(line: 3406, column: 19, scope: !10872)
!10872 = distinct !DILexicalBlock(scope: !10869, file: !3, line: 3406, column: 7)
!10873 = !DILocation(line: 3406, column: 21, scope: !10872)
!10874 = !DILocation(line: 3406, column: 7, scope: !10869)
!10875 = !DILocation(line: 3408, column: 55, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10872, file: !3, line: 3407, column: 2)
!10877 = !DILocation(line: 3408, column: 40, scope: !10876)
!10878 = !DILocation(line: 3409, column: 20, scope: !10876)
!10879 = !DILocation(line: 3408, column: 22, scope: !10876)
!10880 = !DILocation(line: 3408, column: 17, scope: !10876)
!10881 = !DILocation(line: 3408, column: 4, scope: !10876)
!10882 = !DILocation(line: 3408, column: 20, scope: !10876)
!10883 = !DILocation(line: 3411, column: 39, scope: !10876)
!10884 = !DILocation(line: 3411, column: 45, scope: !10876)
!10885 = !DILocation(line: 3411, column: 21, scope: !10876)
!10886 = !DILocation(line: 3411, column: 48, scope: !10876)
!10887 = !DILocation(line: 3411, column: 16, scope: !10876)
!10888 = !DILocation(line: 3411, column: 4, scope: !10876)
!10889 = !DILocation(line: 3411, column: 19, scope: !10876)
!10890 = !DILocation(line: 3414, column: 26, scope: !10876)
!10891 = !DILocation(line: 3416, column: 39, scope: !10876)
!10892 = !DILocation(line: 3414, column: 8, scope: !10876)
!10893 = !DILocation(line: 3416, column: 42, scope: !10876)
!10894 = !DILocation(line: 3413, column: 17, scope: !10876)
!10895 = !DILocation(line: 3413, column: 4, scope: !10876)
!10896 = !DILocation(line: 3414, column: 6, scope: !10876)
!10897 = !DILocation(line: 3417, column: 8, scope: !10898)
!10898 = distinct !DILexicalBlock(scope: !10876, file: !3, line: 3417, column: 8)
!10899 = !DILocation(line: 3417, column: 18, scope: !10898)
!10900 = !DILocation(line: 3417, column: 22, scope: !10898)
!10901 = !DILocation(line: 3417, column: 33, scope: !10898)
!10902 = !DILocation(line: 3417, column: 8, scope: !10876)
!10903 = !DILocation(line: 3419, column: 17, scope: !10904)
!10904 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 3418, column: 6)
!10905 = !DILocation(line: 3419, column: 66, scope: !10904)
!10906 = !DILocation(line: 3419, column: 8, scope: !10904)
!10907 = !DILocation(line: 3420, column: 17, scope: !10904)
!10908 = !DILocation(line: 3420, column: 65, scope: !10904)
!10909 = !DILocation(line: 3420, column: 52, scope: !10904)
!10910 = !DILocation(line: 3420, column: 8, scope: !10904)
!10911 = !DILocation(line: 3421, column: 17, scope: !10904)
!10912 = !DILocation(line: 3421, column: 63, scope: !10904)
!10913 = !DILocation(line: 3421, column: 51, scope: !10904)
!10914 = !DILocation(line: 3421, column: 8, scope: !10904)
!10915 = !DILocation(line: 3422, column: 17, scope: !10904)
!10916 = !DILocation(line: 3422, column: 65, scope: !10904)
!10917 = !DILocation(line: 3422, column: 52, scope: !10904)
!10918 = !DILocation(line: 3422, column: 8, scope: !10904)
!10919 = !DILocation(line: 3423, column: 17, scope: !10904)
!10920 = !DILocation(line: 3423, column: 68, scope: !10904)
!10921 = !DILocation(line: 3423, column: 50, scope: !10904)
!10922 = !DILocation(line: 3423, column: 8, scope: !10904)
!10923 = !DILocation(line: 3424, column: 17, scope: !10904)
!10924 = !DILocation(line: 3424, column: 8, scope: !10904)
!10925 = !DILocation(line: 3425, column: 6, scope: !10904)
!10926 = !DILocation(line: 3426, column: 2, scope: !10876)
!10927 = !DILocation(line: 3406, column: 27, scope: !10872)
!10928 = !DILocation(line: 3406, column: 7, scope: !10872)
!10929 = distinct !{!10929, !10874, !10930}
!10930 = !DILocation(line: 3426, column: 2, scope: !10869)
!10931 = !DILocation(line: 3428, column: 25, scope: !10845)
!10932 = !DILocation(line: 3429, column: 5, scope: !10845)
!10933 = !DILocation(line: 3431, column: 3, scope: !2627)
!10934 = !DILocation(line: 3433, column: 7, scope: !10935)
!10935 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 3433, column: 7)
!10936 = !DILocation(line: 3433, column: 7, scope: !2627)
!10937 = !DILocation(line: 3434, column: 12, scope: !10935)
!10938 = !DILocation(line: 3434, column: 5, scope: !10935)
!10939 = !DILocation(line: 3436, column: 32, scope: !10940)
!10940 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 3436, column: 7)
!10941 = !DILocation(line: 3436, column: 7, scope: !10940)
!10942 = !DILocation(line: 3436, column: 7, scope: !2627)
!10943 = !DILocation(line: 3438, column: 11, scope: !10944)
!10944 = distinct !DILexicalBlock(scope: !10945, file: !3, line: 3438, column: 11)
!10945 = distinct !DILexicalBlock(scope: !10940, file: !3, line: 3437, column: 5)
!10946 = !DILocation(line: 3438, column: 28, scope: !10944)
!10947 = !DILocation(line: 3438, column: 11, scope: !10945)
!10948 = !DILocation(line: 3439, column: 33, scope: !10944)
!10949 = !DILocation(line: 3439, column: 19, scope: !10944)
!10950 = !DILocation(line: 3439, column: 9, scope: !10944)
!10951 = !DILocation(line: 3439, column: 2, scope: !10944)
!10952 = !DILocation(line: 3441, column: 11, scope: !10953)
!10953 = distinct !DILexicalBlock(scope: !10945, file: !3, line: 3441, column: 11)
!10954 = !DILocation(line: 3441, column: 28, scope: !10953)
!10955 = !DILocation(line: 3441, column: 11, scope: !10945)
!10956 = !DILocalVariable(name: "obj", scope: !10957, file: !3, line: 3443, type: !1134)
!10957 = distinct !DILexicalBlock(scope: !10953, file: !3, line: 3442, column: 2)
!10958 = !DILocation(line: 3443, column: 9, scope: !10957)
!10959 = !DILocation(line: 3443, column: 15, scope: !10957)
!10960 = !DILocation(line: 3445, column: 8, scope: !10961)
!10961 = distinct !DILexicalBlock(scope: !10957, file: !3, line: 3445, column: 8)
!10962 = !DILocation(line: 3445, column: 24, scope: !10961)
!10963 = !DILocation(line: 3446, column: 8, scope: !10961)
!10964 = !DILocation(line: 3446, column: 11, scope: !10961)
!10965 = !DILocation(line: 3446, column: 27, scope: !10961)
!10966 = !DILocation(line: 3447, column: 8, scope: !10961)
!10967 = !DILocation(line: 3447, column: 11, scope: !10961)
!10968 = !DILocation(line: 3447, column: 27, scope: !10961)
!10969 = !DILocation(line: 3445, column: 8, scope: !10957)
!10970 = !DILocation(line: 3448, column: 36, scope: !10961)
!10971 = !DILocation(line: 3448, column: 23, scope: !10961)
!10972 = !DILocation(line: 3448, column: 13, scope: !10961)
!10973 = !DILocation(line: 3448, column: 6, scope: !10961)
!10974 = !DILocation(line: 3449, column: 2, scope: !10957)
!10975 = !DILocation(line: 3451, column: 38, scope: !10945)
!10976 = !DILocation(line: 3451, column: 24, scope: !10945)
!10977 = !DILocation(line: 3451, column: 14, scope: !10945)
!10978 = !DILocation(line: 3451, column: 7, scope: !10945)
!10979 = !DILocation(line: 3454, column: 11, scope: !2627)
!10980 = !DILocation(line: 3454, column: 3, scope: !2627)
!10981 = !DILocation(line: 3460, column: 13, scope: !10982)
!10982 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 3455, column: 5)
!10983 = !DILocation(line: 3460, column: 11, scope: !10982)
!10984 = !DILocation(line: 3461, column: 13, scope: !10982)
!10985 = !DILocation(line: 3461, column: 11, scope: !10982)
!10986 = !DILocation(line: 3462, column: 7, scope: !10982)
!10987 = !DILocation(line: 3463, column: 7, scope: !10982)
!10988 = !DILocation(line: 3465, column: 26, scope: !10989)
!10989 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 3465, column: 11)
!10990 = !DILocation(line: 3465, column: 11, scope: !10989)
!10991 = !DILocation(line: 3465, column: 11, scope: !10982)
!10992 = !DILocation(line: 3466, column: 10, scope: !10989)
!10993 = !DILocation(line: 3466, column: 2, scope: !10989)
!10994 = !DILocation(line: 3468, column: 34, scope: !10989)
!10995 = !DILocation(line: 3468, column: 39, scope: !10989)
!10996 = !DILocation(line: 3468, column: 10, scope: !10989)
!10997 = !DILocation(line: 3470, column: 26, scope: !10998)
!10998 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 3470, column: 11)
!10999 = !DILocation(line: 3470, column: 11, scope: !10998)
!11000 = !DILocation(line: 3470, column: 11, scope: !10982)
!11001 = !DILocation(line: 3471, column: 10, scope: !10998)
!11002 = !DILocation(line: 3471, column: 2, scope: !10998)
!11003 = !DILocation(line: 3473, column: 34, scope: !10998)
!11004 = !DILocation(line: 3473, column: 39, scope: !10998)
!11005 = !DILocation(line: 3473, column: 10, scope: !10998)
!11006 = !DILocation(line: 3475, column: 7, scope: !10982)
!11007 = !DILocation(line: 3478, column: 13, scope: !10982)
!11008 = !DILocation(line: 3478, column: 11, scope: !10982)
!11009 = !DILocation(line: 3479, column: 7, scope: !10982)
!11010 = !DILocation(line: 3480, column: 11, scope: !10982)
!11011 = !DILocation(line: 3482, column: 26, scope: !11012)
!11012 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 3482, column: 11)
!11013 = !DILocation(line: 3482, column: 11, scope: !11012)
!11014 = !DILocation(line: 3482, column: 11, scope: !10982)
!11015 = !DILocation(line: 3483, column: 10, scope: !11012)
!11016 = !DILocation(line: 3483, column: 2, scope: !11012)
!11017 = !DILocation(line: 3485, column: 34, scope: !11012)
!11018 = !DILocation(line: 3485, column: 39, scope: !11012)
!11019 = !DILocation(line: 3485, column: 10, scope: !11012)
!11020 = !DILocation(line: 3487, column: 15, scope: !10982)
!11021 = !DILocation(line: 3488, column: 7, scope: !10982)
!11022 = !DILocation(line: 3492, column: 42, scope: !10982)
!11023 = !DILocation(line: 3492, column: 24, scope: !10982)
!11024 = !DILocation(line: 3492, column: 14, scope: !10982)
!11025 = !DILocation(line: 3492, column: 7, scope: !10982)
!11026 = !DILocation(line: 3495, column: 10, scope: !2627)
!11027 = !DILocation(line: 3495, column: 8, scope: !2627)
!11028 = !DILocation(line: 3496, column: 11, scope: !2627)
!11029 = !DILocation(line: 3496, column: 3, scope: !2627)
!11030 = !DILocation(line: 3502, column: 34, scope: !11031)
!11031 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 3497, column: 5)
!11032 = !DILocation(line: 3502, column: 40, scope: !11031)
!11033 = !DILocation(line: 3502, column: 24, scope: !11031)
!11034 = !DILocation(line: 3502, column: 14, scope: !11031)
!11035 = !DILocation(line: 3503, column: 7, scope: !11031)
!11036 = !DILocation(line: 3506, column: 32, scope: !11037)
!11037 = distinct !DILexicalBlock(scope: !11031, file: !3, line: 3506, column: 11)
!11038 = !DILocation(line: 3506, column: 11, scope: !11037)
!11039 = !DILocation(line: 3506, column: 11, scope: !11031)
!11040 = !DILocation(line: 3507, column: 52, scope: !11037)
!11041 = !DILocation(line: 3507, column: 37, scope: !11037)
!11042 = !DILocation(line: 3507, column: 58, scope: !11037)
!11043 = !DILocation(line: 3507, column: 64, scope: !11037)
!11044 = !DILocation(line: 3507, column: 19, scope: !11037)
!11045 = !DILocation(line: 3507, column: 9, scope: !11037)
!11046 = !DILocation(line: 3507, column: 2, scope: !11037)
!11047 = !DILocation(line: 3508, column: 37, scope: !11048)
!11048 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 3508, column: 16)
!11049 = !DILocation(line: 3508, column: 16, scope: !11048)
!11050 = !DILocation(line: 3508, column: 16, scope: !11037)
!11051 = !DILocation(line: 3509, column: 52, scope: !11048)
!11052 = !DILocation(line: 3509, column: 37, scope: !11048)
!11053 = !DILocation(line: 3509, column: 58, scope: !11048)
!11054 = !DILocation(line: 3509, column: 64, scope: !11048)
!11055 = !DILocation(line: 3509, column: 19, scope: !11048)
!11056 = !DILocation(line: 3509, column: 9, scope: !11048)
!11057 = !DILocation(line: 3509, column: 2, scope: !11048)
!11058 = !DILocation(line: 3511, column: 38, scope: !11048)
!11059 = !DILocation(line: 3511, column: 19, scope: !11048)
!11060 = !DILocation(line: 3511, column: 9, scope: !11048)
!11061 = !DILocation(line: 3511, column: 2, scope: !11048)
!11062 = !DILocation(line: 3512, column: 7, scope: !11031)
!11063 = !DILocation(line: 3515, column: 7, scope: !11031)
!11064 = !DILocation(line: 3516, column: 5, scope: !11031)
!11065 = !DILocation(line: 3518, column: 10, scope: !2627)
!11066 = !DILocation(line: 3519, column: 10, scope: !2627)
!11067 = !DILocation(line: 3525, column: 12, scope: !11068)
!11068 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 3525, column: 7)
!11069 = !DILocation(line: 3525, column: 44, scope: !11068)
!11070 = !DILocation(line: 3525, column: 25, scope: !11068)
!11071 = !DILocation(line: 3525, column: 17, scope: !11068)
!11072 = !DILocation(line: 3525, column: 7, scope: !2627)
!11073 = !DILocation(line: 3526, column: 36, scope: !11068)
!11074 = !DILocation(line: 3526, column: 17, scope: !11068)
!11075 = !DILocation(line: 3526, column: 10, scope: !11068)
!11076 = !DILocation(line: 3526, column: 15, scope: !11068)
!11077 = !DILocation(line: 3526, column: 5, scope: !11068)
!11078 = !DILocation(line: 3528, column: 10, scope: !2627)
!11079 = !DILocation(line: 3528, column: 3, scope: !2627)
!11080 = !DILocation(line: 3529, column: 1, scope: !2627)
!11081 = distinct !DISubprogram(name: "produce_memory_decl_rtl", scope: !3, file: !3, line: 2650, type: !11082, scopeLine: 2651, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11082 = !DISubroutineType(types: !11083)
!11083 = !{!1015, !1134, !2575}
!11084 = !DILocalVariable(name: "obj", arg: 1, scope: !11081, file: !3, line: 2650, type: !1134)
!11085 = !DILocation(line: 2650, column: 31, scope: !11081)
!11086 = !DILocalVariable(name: "regno", arg: 2, scope: !11081, file: !3, line: 2650, type: !2575)
!11087 = !DILocation(line: 2650, column: 41, scope: !11081)
!11088 = !DILocalVariable(name: "as", scope: !11081, file: !3, line: 2652, type: !2605)
!11089 = !DILocation(line: 2652, column: 16, scope: !11081)
!11090 = !DILocation(line: 2652, column: 21, scope: !11081)
!11091 = !DILocalVariable(name: "address_mode", scope: !11081, file: !3, line: 2653, type: !8)
!11092 = !DILocation(line: 2653, column: 21, scope: !11081)
!11093 = !DILocation(line: 2653, column: 55, scope: !11081)
!11094 = !DILocation(line: 2653, column: 69, scope: !11081)
!11095 = !DILocation(line: 2653, column: 36, scope: !11081)
!11096 = !DILocalVariable(name: "x", scope: !11081, file: !3, line: 2654, type: !1015)
!11097 = !DILocation(line: 2654, column: 7, scope: !11081)
!11098 = !DILocation(line: 2656, column: 3, scope: !11081)
!11099 = !DILocation(line: 2657, column: 7, scope: !11100)
!11100 = distinct !DILexicalBlock(scope: !11081, file: !3, line: 2657, column: 7)
!11101 = !DILocation(line: 2657, column: 25, scope: !11100)
!11102 = !DILocation(line: 2657, column: 28, scope: !11100)
!11103 = !DILocation(line: 2657, column: 7, scope: !11081)
!11104 = !DILocalVariable(name: "name", scope: !11105, file: !3, line: 2659, type: !1041)
!11105 = distinct !DILexicalBlock(scope: !11100, file: !3, line: 2658, column: 5)
!11106 = !DILocation(line: 2659, column: 19, scope: !11105)
!11107 = !DILocation(line: 2659, column: 26, scope: !11105)
!11108 = !DILocation(line: 2660, column: 11, scope: !11105)
!11109 = !DILocation(line: 2660, column: 9, scope: !11105)
!11110 = !DILocation(line: 2661, column: 7, scope: !11105)
!11111 = !DILocation(line: 2662, column: 24, scope: !11105)
!11112 = !DILocation(line: 2662, column: 41, scope: !11105)
!11113 = !DILocation(line: 2662, column: 11, scope: !11105)
!11114 = !DILocation(line: 2662, column: 9, scope: !11105)
!11115 = !DILocation(line: 2663, column: 27, scope: !11105)
!11116 = !DILocation(line: 2663, column: 30, scope: !11105)
!11117 = !DILocation(line: 2663, column: 7, scope: !11105)
!11118 = !DILocation(line: 2664, column: 15, scope: !11105)
!11119 = !DILocation(line: 2664, column: 36, scope: !11105)
!11120 = !DILocation(line: 2664, column: 41, scope: !11105)
!11121 = !DILocation(line: 2664, column: 7, scope: !11105)
!11122 = !DILocation(line: 2665, column: 5, scope: !11105)
!11123 = !DILocation(line: 2668, column: 24, scope: !11124)
!11124 = distinct !DILexicalBlock(scope: !11100, file: !3, line: 2667, column: 5)
!11125 = !DILocation(line: 2668, column: 40, scope: !11124)
!11126 = !DILocation(line: 2668, column: 46, scope: !11124)
!11127 = !DILocation(line: 2668, column: 11, scope: !11124)
!11128 = !DILocation(line: 2668, column: 9, scope: !11124)
!11129 = !DILocation(line: 2669, column: 24, scope: !11124)
!11130 = !DILocation(line: 2669, column: 41, scope: !11124)
!11131 = !DILocation(line: 2669, column: 11, scope: !11124)
!11132 = !DILocation(line: 2669, column: 9, scope: !11124)
!11133 = !DILocation(line: 2670, column: 27, scope: !11124)
!11134 = !DILocation(line: 2670, column: 30, scope: !11124)
!11135 = !DILocation(line: 2670, column: 7, scope: !11124)
!11136 = !DILocation(line: 2673, column: 10, scope: !11081)
!11137 = !DILocation(line: 2673, column: 3, scope: !11081)
!11138 = distinct !DISubprogram(name: "stmt_after_ip_normal_pos", scope: !3, file: !3, line: 563, type: !3180, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11139 = !DILocalVariable(name: "loop", arg: 1, scope: !11138, file: !3, line: 563, type: !1651)
!11140 = !DILocation(line: 563, column: 40, scope: !11138)
!11141 = !DILocalVariable(name: "stmt", arg: 2, scope: !11138, file: !3, line: 563, type: !1436)
!11142 = !DILocation(line: 563, column: 53, scope: !11138)
!11143 = !DILocalVariable(name: "bb", scope: !11138, file: !3, line: 565, type: !1399)
!11144 = !DILocation(line: 565, column: 15, scope: !11138)
!11145 = !DILocation(line: 565, column: 35, scope: !11138)
!11146 = !DILocation(line: 565, column: 20, scope: !11138)
!11147 = !DILocalVariable(name: "sbb", scope: !11138, file: !3, line: 565, type: !1399)
!11148 = !DILocation(line: 565, column: 42, scope: !11138)
!11149 = !DILocation(line: 565, column: 59, scope: !11138)
!11150 = !DILocation(line: 565, column: 48, scope: !11138)
!11151 = !DILocation(line: 567, column: 3, scope: !11138)
!11152 = !DILocation(line: 569, column: 7, scope: !11153)
!11153 = distinct !DILexicalBlock(scope: !11138, file: !3, line: 569, column: 7)
!11154 = !DILocation(line: 569, column: 14, scope: !11153)
!11155 = !DILocation(line: 569, column: 20, scope: !11153)
!11156 = !DILocation(line: 569, column: 11, scope: !11153)
!11157 = !DILocation(line: 569, column: 7, scope: !11138)
!11158 = !DILocation(line: 570, column: 5, scope: !11153)
!11159 = !DILocation(line: 572, column: 7, scope: !11160)
!11160 = distinct !DILexicalBlock(scope: !11138, file: !3, line: 572, column: 7)
!11161 = !DILocation(line: 572, column: 14, scope: !11160)
!11162 = !DILocation(line: 572, column: 11, scope: !11160)
!11163 = !DILocation(line: 572, column: 7, scope: !11138)
!11164 = !DILocation(line: 573, column: 5, scope: !11160)
!11165 = !DILocation(line: 575, column: 10, scope: !11138)
!11166 = !DILocation(line: 575, column: 29, scope: !11138)
!11167 = !DILocation(line: 575, column: 18, scope: !11138)
!11168 = !DILocation(line: 575, column: 15, scope: !11138)
!11169 = !DILocation(line: 575, column: 3, scope: !11138)
!11170 = !DILocation(line: 576, column: 1, scope: !11138)
!11171 = distinct !DISubprogram(name: "stmt_after_inc_pos", scope: !3, file: !3, line: 583, type: !11172, scopeLine: 584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11172 = !DISubroutineType(types: !11173)
!11173 = !{!136, !2472, !1436, !136}
!11174 = !DILocalVariable(name: "cand", arg: 1, scope: !11171, file: !3, line: 583, type: !2472)
!11175 = !DILocation(line: 583, column: 37, scope: !11171)
!11176 = !DILocalVariable(name: "stmt", arg: 2, scope: !11171, file: !3, line: 583, type: !1436)
!11177 = !DILocation(line: 583, column: 50, scope: !11171)
!11178 = !DILocalVariable(name: "true_if_equal", arg: 3, scope: !11171, file: !3, line: 583, type: !136)
!11179 = !DILocation(line: 583, column: 61, scope: !11171)
!11180 = !DILocalVariable(name: "cand_bb", scope: !11171, file: !3, line: 585, type: !1399)
!11181 = !DILocation(line: 585, column: 15, scope: !11171)
!11182 = !DILocation(line: 585, column: 36, scope: !11171)
!11183 = !DILocation(line: 585, column: 42, scope: !11171)
!11184 = !DILocation(line: 585, column: 25, scope: !11171)
!11185 = !DILocalVariable(name: "stmt_bb", scope: !11171, file: !3, line: 586, type: !1399)
!11186 = !DILocation(line: 586, column: 15, scope: !11171)
!11187 = !DILocation(line: 586, column: 36, scope: !11171)
!11188 = !DILocation(line: 586, column: 25, scope: !11171)
!11189 = !DILocation(line: 588, column: 40, scope: !11190)
!11190 = distinct !DILexicalBlock(scope: !11171, file: !3, line: 588, column: 7)
!11191 = !DILocation(line: 588, column: 49, scope: !11190)
!11192 = !DILocation(line: 588, column: 8, scope: !11190)
!11193 = !DILocation(line: 588, column: 7, scope: !11171)
!11194 = !DILocation(line: 589, column: 5, scope: !11190)
!11195 = !DILocation(line: 591, column: 7, scope: !11196)
!11196 = distinct !DILexicalBlock(scope: !11171, file: !3, line: 591, column: 7)
!11197 = !DILocation(line: 591, column: 18, scope: !11196)
!11198 = !DILocation(line: 591, column: 15, scope: !11196)
!11199 = !DILocation(line: 591, column: 7, scope: !11171)
!11200 = !DILocation(line: 592, column: 5, scope: !11196)
!11201 = !DILocation(line: 594, column: 7, scope: !11202)
!11202 = distinct !DILexicalBlock(scope: !11171, file: !3, line: 594, column: 7)
!11203 = !DILocation(line: 595, column: 7, scope: !11202)
!11204 = !DILocation(line: 595, column: 22, scope: !11202)
!11205 = !DILocation(line: 595, column: 10, scope: !11202)
!11206 = !DILocation(line: 595, column: 43, scope: !11202)
!11207 = !DILocation(line: 595, column: 49, scope: !11202)
!11208 = !DILocation(line: 595, column: 31, scope: !11202)
!11209 = !DILocation(line: 595, column: 28, scope: !11202)
!11210 = !DILocation(line: 594, column: 7, scope: !11171)
!11211 = !DILocation(line: 596, column: 5, scope: !11202)
!11212 = !DILocation(line: 597, column: 22, scope: !11171)
!11213 = !DILocation(line: 597, column: 10, scope: !11171)
!11214 = !DILocation(line: 597, column: 42, scope: !11171)
!11215 = !DILocation(line: 597, column: 48, scope: !11171)
!11216 = !DILocation(line: 597, column: 30, scope: !11171)
!11217 = !DILocation(line: 597, column: 28, scope: !11171)
!11218 = !DILocation(line: 597, column: 3, scope: !11171)
!11219 = !DILocation(line: 598, column: 1, scope: !11171)
!11220 = distinct !DISubprogram(name: "VEC_address_cost_data_base_length", scope: !3, file: !3, line: 3110, type: !11221, scopeLine: 3110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11221 = !DISubroutineType(types: !11222)
!11222 = !{!6, !11223}
!11223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11224, size: 64)
!11224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2568)
!11225 = !DILocalVariable(name: "vec_", arg: 1, scope: !11220, file: !3, line: 3110, type: !11223)
!11226 = !DILocation(line: 3110, column: 1, scope: !11220)
!11227 = distinct !DISubprogram(name: "VEC_address_cost_data_heap_safe_grow_cleared", scope: !3, file: !3, line: 3111, type: !11228, scopeLine: 3111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11228 = !DISubroutineType(types: !11229)
!11229 = !{null, !11230, !1006}
!11230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2563, size: 64)
!11231 = !DILocalVariable(name: "vec_", arg: 1, scope: !11227, file: !3, line: 3111, type: !11230)
!11232 = !DILocation(line: 3111, column: 1, scope: !11227)
!11233 = !DILocalVariable(name: "size_", arg: 2, scope: !11227, file: !3, line: 3111, type: !1006)
!11234 = !DILocalVariable(name: "oldsize", scope: !11227, file: !3, line: 3111, type: !1006)
!11235 = distinct !DISubprogram(name: "VEC_address_cost_data_base_index", scope: !3, file: !3, line: 3110, type: !11236, scopeLine: 3110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11236 = !DISubroutineType(types: !11237)
!11237 = !{!2553, !11223, !6}
!11238 = !DILocalVariable(name: "vec_", arg: 1, scope: !11235, file: !3, line: 3110, type: !11223)
!11239 = !DILocation(line: 3110, column: 1, scope: !11235)
!11240 = !DILocalVariable(name: "ix_", arg: 2, scope: !11235, file: !3, line: 3110, type: !6)
!11241 = !DILocation(line: 0, scope: !11235)
!11242 = distinct !DISubprogram(name: "VEC_address_cost_data_base_replace", scope: !3, file: !3, line: 3110, type: !11243, scopeLine: 3110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11243 = !DISubroutineType(types: !11244)
!11244 = !{!2553, !11245, !6, !2553}
!11245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2568, size: 64)
!11246 = !DILocalVariable(name: "vec_", arg: 1, scope: !11242, file: !3, line: 3110, type: !11245)
!11247 = !DILocation(line: 3110, column: 1, scope: !11242)
!11248 = !DILocalVariable(name: "ix_", arg: 2, scope: !11242, file: !3, line: 3110, type: !6)
!11249 = !DILocalVariable(name: "obj_", arg: 3, scope: !11242, file: !3, line: 3110, type: !2553)
!11250 = !DILocalVariable(name: "old_obj_", scope: !11242, file: !3, line: 3110, type: !2553)
!11251 = distinct !DISubprogram(name: "VEC_address_cost_data_heap_safe_grow", scope: !3, file: !3, line: 3111, type: !11228, scopeLine: 3111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11252 = !DILocalVariable(name: "vec_", arg: 1, scope: !11251, file: !3, line: 3111, type: !11230)
!11253 = !DILocation(line: 3111, column: 1, scope: !11251)
!11254 = !DILocalVariable(name: "size_", arg: 2, scope: !11251, file: !3, line: 3111, type: !1006)
!11255 = !DILocation(line: 0, scope: !11251)
!11256 = distinct !DISubprogram(name: "VEC_address_cost_data_base_address", scope: !3, file: !3, line: 3110, type: !11257, scopeLine: 3110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11257 = !DISubroutineType(types: !11258)
!11258 = !{!11259, !11245}
!11259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!11260 = !DILocalVariable(name: "vec_", arg: 1, scope: !11256, file: !3, line: 3110, type: !11245)
!11261 = !DILocation(line: 3110, column: 1, scope: !11256)
!11262 = distinct !DISubprogram(name: "VEC_address_cost_data_heap_reserve_exact", scope: !3, file: !3, line: 3111, type: !11263, scopeLine: 3111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11263 = !DISubroutineType(types: !11264)
!11264 = !{!1006, !11230, !1006}
!11265 = !DILocalVariable(name: "vec_", arg: 1, scope: !11262, file: !3, line: 3111, type: !11230)
!11266 = !DILocation(line: 3111, column: 1, scope: !11262)
!11267 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11262, file: !3, line: 3111, type: !1006)
!11268 = !DILocalVariable(name: "extend", scope: !11262, file: !3, line: 3111, type: !1006)
!11269 = !DILocation(line: 3111, column: 1, scope: !11270)
!11270 = distinct !DILexicalBlock(scope: !11262, file: !3, line: 3111, column: 1)
!11271 = distinct !DISubprogram(name: "VEC_address_cost_data_base_space", scope: !3, file: !3, line: 3110, type: !11272, scopeLine: 3110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11272 = !DISubroutineType(types: !11273)
!11273 = !{!1006, !11245, !1006}
!11274 = !DILocalVariable(name: "vec_", arg: 1, scope: !11271, file: !3, line: 3110, type: !11245)
!11275 = !DILocation(line: 3110, column: 1, scope: !11271)
!11276 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11271, file: !3, line: 3110, type: !1006)
!11277 = distinct !DISubprogram(name: "get_computation_aff", scope: !3, file: !3, line: 2836, type: !11278, scopeLine: 2839, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11278 = !DISubroutineType(types: !11279)
!11279 = !{!136, !1651, !2457, !2472, !1436, !11280}
!11280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9658, size: 64)
!11281 = !DILocalVariable(name: "loop", arg: 1, scope: !11277, file: !3, line: 2836, type: !1651)
!11282 = !DILocation(line: 2836, column: 35, scope: !11277)
!11283 = !DILocalVariable(name: "use", arg: 2, scope: !11277, file: !3, line: 2837, type: !2457)
!11284 = !DILocation(line: 2837, column: 23, scope: !11277)
!11285 = !DILocalVariable(name: "cand", arg: 3, scope: !11277, file: !3, line: 2837, type: !2472)
!11286 = !DILocation(line: 2837, column: 44, scope: !11277)
!11287 = !DILocalVariable(name: "at", arg: 4, scope: !11277, file: !3, line: 2837, type: !1436)
!11288 = !DILocation(line: 2837, column: 57, scope: !11277)
!11289 = !DILocalVariable(name: "aff", arg: 5, scope: !11277, file: !3, line: 2838, type: !11280)
!11290 = !DILocation(line: 2838, column: 40, scope: !11277)
!11291 = !DILocalVariable(name: "ubase", scope: !11277, file: !3, line: 2840, type: !1134)
!11292 = !DILocation(line: 2840, column: 8, scope: !11277)
!11293 = !DILocation(line: 2840, column: 16, scope: !11277)
!11294 = !DILocation(line: 2840, column: 21, scope: !11277)
!11295 = !DILocation(line: 2840, column: 25, scope: !11277)
!11296 = !DILocalVariable(name: "ustep", scope: !11277, file: !3, line: 2841, type: !1134)
!11297 = !DILocation(line: 2841, column: 8, scope: !11277)
!11298 = !DILocation(line: 2841, column: 16, scope: !11277)
!11299 = !DILocation(line: 2841, column: 21, scope: !11277)
!11300 = !DILocation(line: 2841, column: 25, scope: !11277)
!11301 = !DILocalVariable(name: "cbase", scope: !11277, file: !3, line: 2842, type: !1134)
!11302 = !DILocation(line: 2842, column: 8, scope: !11277)
!11303 = !DILocation(line: 2842, column: 16, scope: !11277)
!11304 = !DILocation(line: 2842, column: 22, scope: !11277)
!11305 = !DILocation(line: 2842, column: 26, scope: !11277)
!11306 = !DILocalVariable(name: "cstep", scope: !11277, file: !3, line: 2843, type: !1134)
!11307 = !DILocation(line: 2843, column: 8, scope: !11277)
!11308 = !DILocation(line: 2843, column: 16, scope: !11277)
!11309 = !DILocation(line: 2843, column: 22, scope: !11277)
!11310 = !DILocation(line: 2843, column: 26, scope: !11277)
!11311 = !DILocalVariable(name: "cstep_common", scope: !11277, file: !3, line: 2843, type: !1134)
!11312 = !DILocation(line: 2843, column: 32, scope: !11277)
!11313 = !DILocalVariable(name: "utype", scope: !11277, file: !3, line: 2844, type: !1134)
!11314 = !DILocation(line: 2844, column: 8, scope: !11277)
!11315 = !DILocation(line: 2844, column: 16, scope: !11277)
!11316 = !DILocalVariable(name: "ctype", scope: !11277, file: !3, line: 2844, type: !1134)
!11317 = !DILocation(line: 2844, column: 35, scope: !11277)
!11318 = !DILocation(line: 2844, column: 43, scope: !11277)
!11319 = !DILocalVariable(name: "common_type", scope: !11277, file: !3, line: 2845, type: !1134)
!11320 = !DILocation(line: 2845, column: 8, scope: !11277)
!11321 = !DILocalVariable(name: "var", scope: !11277, file: !3, line: 2845, type: !1134)
!11322 = !DILocation(line: 2845, column: 21, scope: !11277)
!11323 = !DILocalVariable(name: "uutype", scope: !11277, file: !3, line: 2846, type: !1134)
!11324 = !DILocation(line: 2846, column: 8, scope: !11277)
!11325 = !DILocalVariable(name: "cbase_aff", scope: !11277, file: !3, line: 2847, type: !9656)
!11326 = !DILocation(line: 2847, column: 12, scope: !11277)
!11327 = !DILocalVariable(name: "var_aff", scope: !11277, file: !3, line: 2847, type: !9656)
!11328 = !DILocation(line: 2847, column: 23, scope: !11277)
!11329 = !DILocalVariable(name: "rat", scope: !11277, file: !3, line: 2848, type: !1182)
!11330 = !DILocation(line: 2848, column: 14, scope: !11277)
!11331 = !DILocation(line: 2850, column: 7, scope: !11332)
!11332 = distinct !DILexicalBlock(scope: !11277, file: !3, line: 2850, column: 7)
!11333 = !DILocation(line: 2850, column: 32, scope: !11332)
!11334 = !DILocation(line: 2850, column: 30, scope: !11332)
!11335 = !DILocation(line: 2850, column: 7, scope: !11277)
!11336 = !DILocation(line: 2853, column: 7, scope: !11337)
!11337 = distinct !DILexicalBlock(scope: !11332, file: !3, line: 2851, column: 5)
!11338 = !DILocation(line: 2856, column: 22, scope: !11277)
!11339 = !DILocation(line: 2856, column: 28, scope: !11277)
!11340 = !DILocation(line: 2856, column: 34, scope: !11277)
!11341 = !DILocation(line: 2856, column: 9, scope: !11277)
!11342 = !DILocation(line: 2856, column: 7, scope: !11277)
!11343 = !DILocation(line: 2857, column: 31, scope: !11277)
!11344 = !DILocation(line: 2857, column: 12, scope: !11277)
!11345 = !DILocation(line: 2857, column: 10, scope: !11277)
!11346 = !DILocation(line: 2860, column: 7, scope: !11347)
!11347 = distinct !DILexicalBlock(scope: !11277, file: !3, line: 2860, column: 7)
!11348 = !DILocation(line: 2860, column: 32, scope: !11347)
!11349 = !DILocation(line: 2860, column: 30, scope: !11347)
!11350 = !DILocation(line: 2860, column: 7, scope: !11277)
!11351 = !DILocation(line: 2862, column: 15, scope: !11352)
!11352 = distinct !DILexicalBlock(scope: !11347, file: !3, line: 2861, column: 5)
!11353 = !DILocation(line: 2862, column: 13, scope: !11352)
!11354 = !DILocation(line: 2863, column: 15, scope: !11352)
!11355 = !DILocation(line: 2863, column: 13, scope: !11352)
!11356 = !DILocation(line: 2864, column: 13, scope: !11352)
!11357 = !DILocation(line: 2864, column: 11, scope: !11352)
!11358 = !DILocation(line: 2865, column: 5, scope: !11352)
!11359 = !DILocation(line: 2867, column: 30, scope: !11360)
!11360 = distinct !DILexicalBlock(scope: !11277, file: !3, line: 2867, column: 7)
!11361 = !DILocation(line: 2867, column: 37, scope: !11360)
!11362 = !DILocation(line: 2867, column: 8, scope: !11360)
!11363 = !DILocation(line: 2867, column: 7, scope: !11277)
!11364 = !DILocation(line: 2868, column: 5, scope: !11360)
!11365 = !DILocation(line: 2875, column: 17, scope: !11277)
!11366 = !DILocation(line: 2875, column: 15, scope: !11277)
!11367 = !DILocation(line: 2878, column: 28, scope: !11277)
!11368 = !DILocation(line: 2878, column: 35, scope: !11277)
!11369 = !DILocation(line: 2878, column: 48, scope: !11277)
!11370 = !DILocation(line: 2878, column: 3, scope: !11277)
!11371 = !DILocation(line: 2879, column: 28, scope: !11277)
!11372 = !DILocation(line: 2879, column: 35, scope: !11277)
!11373 = !DILocation(line: 2879, column: 3, scope: !11277)
!11374 = !DILocation(line: 2880, column: 28, scope: !11277)
!11375 = !DILocation(line: 2880, column: 33, scope: !11277)
!11376 = !DILocation(line: 2880, column: 3, scope: !11277)
!11377 = !DILocation(line: 2883, column: 29, scope: !11378)
!11378 = distinct !DILexicalBlock(scope: !11277, file: !3, line: 2883, column: 7)
!11379 = !DILocation(line: 2883, column: 35, scope: !11378)
!11380 = !DILocation(line: 2883, column: 41, scope: !11378)
!11381 = !DILocation(line: 2883, column: 7, scope: !11378)
!11382 = !DILocation(line: 2883, column: 7, scope: !11277)
!11383 = !DILocalVariable(name: "cstep_aff", scope: !11384, file: !3, line: 2885, type: !9656)
!11384 = distinct !DILexicalBlock(scope: !11378, file: !3, line: 2884, column: 5)
!11385 = !DILocation(line: 2885, column: 16, scope: !11384)
!11386 = !DILocation(line: 2887, column: 11, scope: !11387)
!11387 = distinct !DILexicalBlock(scope: !11384, file: !3, line: 2887, column: 11)
!11388 = !DILocation(line: 2887, column: 26, scope: !11387)
!11389 = !DILocation(line: 2887, column: 23, scope: !11387)
!11390 = !DILocation(line: 2887, column: 11, scope: !11384)
!11391 = !DILocation(line: 2888, column: 17, scope: !11387)
!11392 = !DILocation(line: 2888, column: 15, scope: !11387)
!11393 = !DILocation(line: 2888, column: 2, scope: !11387)
!11394 = !DILocation(line: 2890, column: 17, scope: !11387)
!11395 = !DILocation(line: 2890, column: 15, scope: !11387)
!11396 = !DILocation(line: 2892, column: 32, scope: !11384)
!11397 = !DILocation(line: 2892, column: 46, scope: !11384)
!11398 = !DILocation(line: 2892, column: 7, scope: !11384)
!11399 = !DILocation(line: 2893, column: 7, scope: !11384)
!11400 = !DILocation(line: 2894, column: 5, scope: !11384)
!11401 = !DILocation(line: 2896, column: 38, scope: !11277)
!11402 = !DILocation(line: 2896, column: 3, scope: !11277)
!11403 = !DILocation(line: 2897, column: 24, scope: !11277)
!11404 = !DILocation(line: 2897, column: 3, scope: !11277)
!11405 = !DILocation(line: 2898, column: 7, scope: !11406)
!11406 = distinct !DILexicalBlock(scope: !11277, file: !3, line: 2898, column: 7)
!11407 = !DILocation(line: 2898, column: 22, scope: !11406)
!11408 = !DILocation(line: 2898, column: 19, scope: !11406)
!11409 = !DILocation(line: 2898, column: 7, scope: !11277)
!11410 = !DILocation(line: 2899, column: 30, scope: !11406)
!11411 = !DILocation(line: 2899, column: 35, scope: !11406)
!11412 = !DILocation(line: 2899, column: 5, scope: !11406)
!11413 = !DILocation(line: 2901, column: 3, scope: !11277)
!11414 = !DILocation(line: 2902, column: 24, scope: !11277)
!11415 = !DILocation(line: 2902, column: 3, scope: !11277)
!11416 = !DILocation(line: 2904, column: 3, scope: !11277)
!11417 = !DILocation(line: 2905, column: 1, scope: !11277)
!11418 = distinct !DISubprogram(name: "var_at_stmt", scope: !3, file: !3, line: 2767, type: !11419, scopeLine: 2768, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11419 = !DISubroutineType(types: !11420)
!11420 = !{!1134, !1651, !2472, !1436}
!11421 = !DILocalVariable(name: "loop", arg: 1, scope: !11418, file: !3, line: 2767, type: !1651)
!11422 = !DILocation(line: 2767, column: 27, scope: !11418)
!11423 = !DILocalVariable(name: "cand", arg: 2, scope: !11418, file: !3, line: 2767, type: !2472)
!11424 = !DILocation(line: 2767, column: 49, scope: !11418)
!11425 = !DILocalVariable(name: "stmt", arg: 3, scope: !11418, file: !3, line: 2767, type: !1436)
!11426 = !DILocation(line: 2767, column: 62, scope: !11418)
!11427 = !DILocation(line: 2769, column: 29, scope: !11428)
!11428 = distinct !DILexicalBlock(scope: !11418, file: !3, line: 2769, column: 7)
!11429 = !DILocation(line: 2769, column: 35, scope: !11428)
!11430 = !DILocation(line: 2769, column: 41, scope: !11428)
!11431 = !DILocation(line: 2769, column: 7, scope: !11428)
!11432 = !DILocation(line: 2769, column: 7, scope: !11418)
!11433 = !DILocation(line: 2770, column: 12, scope: !11428)
!11434 = !DILocation(line: 2770, column: 18, scope: !11428)
!11435 = !DILocation(line: 2770, column: 5, scope: !11428)
!11436 = !DILocation(line: 2772, column: 12, scope: !11428)
!11437 = !DILocation(line: 2772, column: 18, scope: !11428)
!11438 = !DILocation(line: 2772, column: 5, scope: !11428)
!11439 = !DILocation(line: 2773, column: 1, scope: !11418)
!11440 = distinct !DISubprogram(name: "determine_common_wider_type", scope: !3, file: !3, line: 2801, type: !11441, scopeLine: 2802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11441 = !DISubroutineType(types: !11442)
!11442 = !{!1134, !1470, !1470}
!11443 = !DILocalVariable(name: "a", arg: 1, scope: !11440, file: !3, line: 2801, type: !1470)
!11444 = !DILocation(line: 2801, column: 36, scope: !11440)
!11445 = !DILocalVariable(name: "b", arg: 2, scope: !11440, file: !3, line: 2801, type: !1470)
!11446 = !DILocation(line: 2801, column: 45, scope: !11440)
!11447 = !DILocalVariable(name: "wider_type", scope: !11440, file: !3, line: 2803, type: !1134)
!11448 = !DILocation(line: 2803, column: 8, scope: !11440)
!11449 = !DILocalVariable(name: "suba", scope: !11440, file: !3, line: 2804, type: !1134)
!11450 = !DILocation(line: 2804, column: 8, scope: !11440)
!11451 = !DILocalVariable(name: "subb", scope: !11440, file: !3, line: 2804, type: !1134)
!11452 = !DILocation(line: 2804, column: 14, scope: !11440)
!11453 = !DILocalVariable(name: "atype", scope: !11440, file: !3, line: 2805, type: !1134)
!11454 = !DILocation(line: 2805, column: 8, scope: !11440)
!11455 = !DILocation(line: 2805, column: 16, scope: !11440)
!11456 = !DILocation(line: 2807, column: 7, scope: !11457)
!11457 = distinct !DILexicalBlock(scope: !11440, file: !3, line: 2807, column: 7)
!11458 = !DILocation(line: 2807, column: 7, scope: !11440)
!11459 = !DILocation(line: 2809, column: 14, scope: !11460)
!11460 = distinct !DILexicalBlock(scope: !11457, file: !3, line: 2808, column: 5)
!11461 = !DILocation(line: 2809, column: 12, scope: !11460)
!11462 = !DILocation(line: 2810, column: 20, scope: !11460)
!11463 = !DILocation(line: 2810, column: 18, scope: !11460)
!11464 = !DILocation(line: 2811, column: 11, scope: !11465)
!11465 = distinct !DILexicalBlock(scope: !11460, file: !3, line: 2811, column: 11)
!11466 = !DILocation(line: 2811, column: 41, scope: !11465)
!11467 = !DILocation(line: 2811, column: 39, scope: !11465)
!11468 = !DILocation(line: 2811, column: 11, scope: !11460)
!11469 = !DILocation(line: 2812, column: 9, scope: !11465)
!11470 = !DILocation(line: 2812, column: 2, scope: !11465)
!11471 = !DILocation(line: 2813, column: 5, scope: !11460)
!11472 = !DILocation(line: 2815, column: 12, scope: !11457)
!11473 = !DILocation(line: 2815, column: 5, scope: !11457)
!11474 = !DILocation(line: 2817, column: 7, scope: !11475)
!11475 = distinct !DILexicalBlock(scope: !11440, file: !3, line: 2817, column: 7)
!11476 = !DILocation(line: 2817, column: 7, scope: !11440)
!11477 = !DILocation(line: 2819, column: 14, scope: !11478)
!11478 = distinct !DILexicalBlock(scope: !11475, file: !3, line: 2818, column: 5)
!11479 = !DILocation(line: 2819, column: 12, scope: !11478)
!11480 = !DILocation(line: 2820, column: 11, scope: !11481)
!11481 = distinct !DILexicalBlock(scope: !11478, file: !3, line: 2820, column: 11)
!11482 = !DILocation(line: 2820, column: 42, scope: !11481)
!11483 = !DILocation(line: 2820, column: 39, scope: !11481)
!11484 = !DILocation(line: 2820, column: 11, scope: !11478)
!11485 = !DILocation(line: 2821, column: 9, scope: !11481)
!11486 = !DILocation(line: 2821, column: 2, scope: !11481)
!11487 = !DILocation(line: 2822, column: 5, scope: !11478)
!11488 = !DILocation(line: 2824, column: 12, scope: !11475)
!11489 = !DILocation(line: 2824, column: 5, scope: !11475)
!11490 = !DILocation(line: 2826, column: 8, scope: !11440)
!11491 = !DILocation(line: 2826, column: 4, scope: !11440)
!11492 = !DILocation(line: 2826, column: 6, scope: !11440)
!11493 = !DILocation(line: 2827, column: 8, scope: !11440)
!11494 = !DILocation(line: 2827, column: 4, scope: !11440)
!11495 = !DILocation(line: 2827, column: 6, scope: !11440)
!11496 = !DILocation(line: 2828, column: 10, scope: !11440)
!11497 = !DILocation(line: 2828, column: 3, scope: !11440)
!11498 = !DILocation(line: 2829, column: 1, scope: !11440)
!11499 = distinct !DISubprogram(name: "prepare_decl_rtl", scope: !3, file: !3, line: 2680, type: !8608, scopeLine: 2681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11500 = !DILocalVariable(name: "expr_p", arg: 1, scope: !11499, file: !3, line: 2680, type: !1470)
!11501 = !DILocation(line: 2680, column: 25, scope: !11499)
!11502 = !DILocalVariable(name: "ws", arg: 2, scope: !11499, file: !3, line: 2680, type: !2575)
!11503 = !DILocation(line: 2680, column: 38, scope: !11499)
!11504 = !DILocalVariable(name: "data", arg: 3, scope: !11499, file: !3, line: 2680, type: !1007)
!11505 = !DILocation(line: 2680, column: 48, scope: !11499)
!11506 = !DILocalVariable(name: "obj", scope: !11499, file: !3, line: 2682, type: !1134)
!11507 = !DILocation(line: 2682, column: 8, scope: !11499)
!11508 = !DILocalVariable(name: "x", scope: !11499, file: !3, line: 2683, type: !1015)
!11509 = !DILocation(line: 2683, column: 7, scope: !11499)
!11510 = !DILocalVariable(name: "regno", scope: !11499, file: !3, line: 2684, type: !2575)
!11511 = !DILocation(line: 2684, column: 8, scope: !11499)
!11512 = !DILocation(line: 2684, column: 24, scope: !11499)
!11513 = !DILocation(line: 2684, column: 16, scope: !11499)
!11514 = !DILocation(line: 2686, column: 11, scope: !11499)
!11515 = !DILocation(line: 2686, column: 3, scope: !11499)
!11516 = !DILocation(line: 2689, column: 22, scope: !11517)
!11517 = distinct !DILexicalBlock(scope: !11518, file: !3, line: 2689, column: 7)
!11518 = distinct !DILexicalBlock(scope: !11499, file: !3, line: 2687, column: 5)
!11519 = !DILocation(line: 2689, column: 19, scope: !11517)
!11520 = !DILocation(line: 2689, column: 12, scope: !11517)
!11521 = !DILocation(line: 2690, column: 27, scope: !11522)
!11522 = distinct !DILexicalBlock(scope: !11517, file: !3, line: 2689, column: 7)
!11523 = !DILocation(line: 2690, column: 26, scope: !11522)
!11524 = !DILocation(line: 2690, column: 5, scope: !11522)
!11525 = !DILocation(line: 2689, column: 7, scope: !11517)
!11526 = !DILocation(line: 2692, column: 2, scope: !11522)
!11527 = !DILocation(line: 2691, column: 15, scope: !11522)
!11528 = !DILocation(line: 2691, column: 12, scope: !11522)
!11529 = !DILocation(line: 2689, column: 7, scope: !11522)
!11530 = distinct !{!11530, !11525, !11531}
!11531 = !DILocation(line: 2692, column: 2, scope: !11517)
!11532 = !DILocation(line: 2693, column: 14, scope: !11518)
!11533 = !DILocation(line: 2693, column: 13, scope: !11518)
!11534 = !DILocation(line: 2693, column: 11, scope: !11518)
!11535 = !DILocation(line: 2694, column: 11, scope: !11536)
!11536 = distinct !DILexicalBlock(scope: !11518, file: !3, line: 2694, column: 11)
!11537 = !DILocation(line: 2694, column: 24, scope: !11536)
!11538 = !DILocation(line: 2694, column: 28, scope: !11536)
!11539 = !DILocation(line: 2694, column: 11, scope: !11518)
!11540 = !DILocation(line: 2695, column: 38, scope: !11536)
!11541 = !DILocation(line: 2695, column: 43, scope: !11536)
!11542 = !DILocation(line: 2695, column: 13, scope: !11536)
!11543 = !DILocation(line: 2695, column: 11, scope: !11536)
!11544 = !DILocation(line: 2695, column: 9, scope: !11536)
!11545 = !DILocation(line: 2696, column: 7, scope: !11518)
!11546 = !DILocation(line: 2699, column: 8, scope: !11518)
!11547 = !DILocation(line: 2699, column: 11, scope: !11518)
!11548 = !DILocation(line: 2700, column: 13, scope: !11518)
!11549 = !DILocation(line: 2700, column: 11, scope: !11518)
!11550 = !DILocation(line: 2701, column: 12, scope: !11551)
!11551 = distinct !DILexicalBlock(scope: !11518, file: !3, line: 2701, column: 11)
!11552 = !DILocation(line: 2701, column: 11, scope: !11518)
!11553 = !DILocation(line: 2702, column: 19, scope: !11551)
!11554 = !DILocation(line: 2702, column: 38, scope: !11551)
!11555 = !DILocation(line: 2702, column: 44, scope: !11551)
!11556 = !DILocation(line: 2702, column: 6, scope: !11551)
!11557 = !DILocation(line: 2702, column: 4, scope: !11551)
!11558 = !DILocation(line: 2702, column: 2, scope: !11551)
!11559 = !DILocation(line: 2703, column: 7, scope: !11518)
!11560 = !DILocation(line: 2708, column: 8, scope: !11518)
!11561 = !DILocation(line: 2708, column: 11, scope: !11518)
!11562 = !DILocation(line: 2709, column: 14, scope: !11518)
!11563 = !DILocation(line: 2709, column: 13, scope: !11518)
!11564 = !DILocation(line: 2709, column: 11, scope: !11518)
!11565 = !DILocation(line: 2711, column: 11, scope: !11566)
!11566 = distinct !DILexicalBlock(scope: !11518, file: !3, line: 2711, column: 11)
!11567 = !DILocation(line: 2711, column: 11, scope: !11518)
!11568 = !DILocation(line: 2712, column: 2, scope: !11566)
!11569 = !DILocation(line: 2714, column: 11, scope: !11570)
!11570 = distinct !DILexicalBlock(scope: !11518, file: !3, line: 2714, column: 11)
!11571 = !DILocation(line: 2714, column: 27, scope: !11570)
!11572 = !DILocation(line: 2714, column: 11, scope: !11518)
!11573 = !DILocation(line: 2715, column: 31, scope: !11570)
!11574 = !DILocation(line: 2715, column: 36, scope: !11570)
!11575 = !DILocation(line: 2715, column: 6, scope: !11570)
!11576 = !DILocation(line: 2715, column: 4, scope: !11570)
!11577 = !DILocation(line: 2715, column: 2, scope: !11570)
!11578 = !DILocation(line: 2717, column: 19, scope: !11570)
!11579 = !DILocation(line: 2717, column: 38, scope: !11570)
!11580 = !DILocation(line: 2717, column: 44, scope: !11570)
!11581 = !DILocation(line: 2717, column: 6, scope: !11570)
!11582 = !DILocation(line: 2717, column: 4, scope: !11570)
!11583 = !DILocation(line: 2719, column: 7, scope: !11518)
!11584 = !DILocation(line: 2722, column: 7, scope: !11518)
!11585 = !DILocation(line: 2725, column: 7, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11499, file: !3, line: 2725, column: 7)
!11587 = !DILocation(line: 2725, column: 7, scope: !11499)
!11588 = !DILocation(line: 2727, column: 7, scope: !11589)
!11589 = distinct !DILexicalBlock(scope: !11586, file: !3, line: 2726, column: 5)
!11590 = !DILocation(line: 2728, column: 7, scope: !11589)
!11591 = !DILocation(line: 2729, column: 5, scope: !11589)
!11592 = !DILocation(line: 2731, column: 3, scope: !11499)
!11593 = distinct !DISubprogram(name: "expand_expr", scope: !954, file: !954, line: 555, type: !11594, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11594 = !DISubroutineType(types: !11595)
!11595 = !{!1015, !1134, !1015, !8, !953}
!11596 = !DILocalVariable(name: "exp", arg: 1, scope: !11593, file: !954, line: 555, type: !1134)
!11597 = !DILocation(line: 555, column: 19, scope: !11593)
!11598 = !DILocalVariable(name: "target", arg: 2, scope: !11593, file: !954, line: 555, type: !1015)
!11599 = !DILocation(line: 555, column: 28, scope: !11593)
!11600 = !DILocalVariable(name: "mode", arg: 3, scope: !11593, file: !954, line: 555, type: !8)
!11601 = !DILocation(line: 555, column: 54, scope: !11593)
!11602 = !DILocalVariable(name: "modifier", arg: 4, scope: !11593, file: !954, line: 556, type: !953)
!11603 = !DILocation(line: 556, column: 28, scope: !11593)
!11604 = !DILocation(line: 558, column: 28, scope: !11593)
!11605 = !DILocation(line: 558, column: 33, scope: !11593)
!11606 = !DILocation(line: 558, column: 41, scope: !11593)
!11607 = !DILocation(line: 558, column: 47, scope: !11593)
!11608 = !DILocation(line: 558, column: 10, scope: !11593)
!11609 = !DILocation(line: 558, column: 3, scope: !11593)
!11610 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !160, file: !160, line: 184, type: !11611, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11611 = !DISubroutineType(types: !11612)
!11612 = !{!1470, !11613, !1134}
!11613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2508, size: 64)
!11614 = !DILocalVariable(name: "vec_", arg: 1, scope: !11610, file: !160, line: 184, type: !11613)
!11615 = !DILocation(line: 184, column: 1, scope: !11610)
!11616 = !DILocalVariable(name: "obj_", arg: 2, scope: !11610, file: !160, line: 184, type: !1134)
!11617 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !160, file: !160, line: 184, type: !11618, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11618 = !DISubroutineType(types: !11619)
!11619 = !{!1006, !11613, !1006}
!11620 = !DILocalVariable(name: "vec_", arg: 1, scope: !11617, file: !160, line: 184, type: !11613)
!11621 = !DILocation(line: 184, column: 1, scope: !11617)
!11622 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11617, file: !160, line: 184, type: !1006)
!11623 = !DILocalVariable(name: "extend", scope: !11617, file: !160, line: 184, type: !1006)
!11624 = !DILocation(line: 184, column: 1, scope: !11625)
!11625 = distinct !DILexicalBlock(scope: !11617, file: !160, line: 184, column: 1)
!11626 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !160, file: !160, line: 182, type: !11627, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11627 = !DISubroutineType(types: !11628)
!11628 = !{!1470, !11629, !1134}
!11629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1834, size: 64)
!11630 = !DILocalVariable(name: "vec_", arg: 1, scope: !11626, file: !160, line: 182, type: !11629)
!11631 = !DILocation(line: 182, column: 1, scope: !11626)
!11632 = !DILocalVariable(name: "obj_", arg: 2, scope: !11626, file: !160, line: 182, type: !1134)
!11633 = !DILocalVariable(name: "slot_", scope: !11626, file: !160, line: 182, type: !1470)
!11634 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !160, file: !160, line: 182, type: !11635, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11635 = !DISubroutineType(types: !11636)
!11636 = !{!1006, !11629, !1006}
!11637 = !DILocalVariable(name: "vec_", arg: 1, scope: !11634, file: !160, line: 182, type: !11629)
!11638 = !DILocation(line: 182, column: 1, scope: !11634)
!11639 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11634, file: !160, line: 182, type: !1006)
!11640 = distinct !DISubprogram(name: "determine_iv_cost", scope: !3, file: !3, line: 4340, type: !11641, scopeLine: 4341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11641 = !DISubroutineType(types: !11642)
!11642 = !{null, !2530, !2472}
!11643 = !DILocalVariable(name: "data", arg: 1, scope: !11640, file: !3, line: 4340, type: !2530)
!11644 = !DILocation(line: 4340, column: 40, scope: !11640)
!11645 = !DILocalVariable(name: "cand", arg: 2, scope: !11640, file: !3, line: 4340, type: !2472)
!11646 = !DILocation(line: 4340, column: 62, scope: !11640)
!11647 = !DILocalVariable(name: "cost_base", scope: !11640, file: !3, line: 4342, type: !2487)
!11648 = !DILocation(line: 4342, column: 13, scope: !11640)
!11649 = !DILocalVariable(name: "cost", scope: !11640, file: !3, line: 4343, type: !6)
!11650 = !DILocation(line: 4343, column: 12, scope: !11640)
!11651 = !DILocalVariable(name: "cost_step", scope: !11640, file: !3, line: 4343, type: !6)
!11652 = !DILocation(line: 4343, column: 18, scope: !11640)
!11653 = !DILocalVariable(name: "base", scope: !11640, file: !3, line: 4344, type: !1134)
!11654 = !DILocation(line: 4344, column: 8, scope: !11640)
!11655 = !DILocation(line: 4346, column: 8, scope: !11656)
!11656 = distinct !DILexicalBlock(scope: !11640, file: !3, line: 4346, column: 7)
!11657 = !DILocation(line: 4346, column: 14, scope: !11656)
!11658 = !DILocation(line: 4346, column: 7, scope: !11640)
!11659 = !DILocation(line: 4348, column: 7, scope: !11660)
!11660 = distinct !DILexicalBlock(scope: !11656, file: !3, line: 4347, column: 5)
!11661 = !DILocation(line: 4348, column: 13, scope: !11660)
!11662 = !DILocation(line: 4348, column: 18, scope: !11660)
!11663 = !DILocation(line: 4349, column: 7, scope: !11660)
!11664 = !DILocation(line: 4356, column: 10, scope: !11640)
!11665 = !DILocation(line: 4356, column: 16, scope: !11640)
!11666 = !DILocation(line: 4356, column: 20, scope: !11640)
!11667 = !DILocation(line: 4356, column: 8, scope: !11640)
!11668 = !DILocation(line: 4357, column: 31, scope: !11640)
!11669 = !DILocation(line: 4357, column: 37, scope: !11640)
!11670 = !DILocation(line: 4357, column: 15, scope: !11640)
!11671 = !DILocation(line: 4358, column: 25, scope: !11640)
!11672 = !DILocation(line: 4358, column: 55, scope: !11640)
!11673 = !DILocation(line: 4358, column: 61, scope: !11640)
!11674 = !DILocation(line: 4358, column: 15, scope: !11640)
!11675 = !DILocation(line: 4358, column: 13, scope: !11640)
!11676 = !DILocation(line: 4360, column: 10, scope: !11640)
!11677 = !DILocation(line: 4360, column: 32, scope: !11640)
!11678 = !DILocation(line: 4360, column: 37, scope: !11640)
!11679 = !DILocation(line: 4360, column: 20, scope: !11640)
!11680 = !DILocation(line: 4360, column: 8, scope: !11640)
!11681 = !DILocation(line: 4365, column: 7, scope: !11682)
!11682 = distinct !DILexicalBlock(scope: !11640, file: !3, line: 4365, column: 7)
!11683 = !DILocation(line: 4365, column: 13, scope: !11682)
!11684 = !DILocation(line: 4365, column: 17, scope: !11682)
!11685 = !DILocation(line: 4366, column: 7, scope: !11682)
!11686 = !DILocation(line: 4366, column: 10, scope: !11682)
!11687 = !DILocation(line: 4365, column: 7, scope: !11640)
!11688 = !DILocation(line: 4367, column: 9, scope: !11682)
!11689 = !DILocation(line: 4367, column: 5, scope: !11682)
!11690 = !DILocation(line: 4371, column: 7, scope: !11691)
!11691 = distinct !DILexicalBlock(scope: !11640, file: !3, line: 4371, column: 7)
!11692 = !DILocation(line: 4371, column: 13, scope: !11691)
!11693 = !DILocation(line: 4371, column: 17, scope: !11691)
!11694 = !DILocation(line: 4372, column: 7, scope: !11691)
!11695 = !DILocation(line: 4372, column: 37, scope: !11691)
!11696 = !DILocation(line: 4372, column: 43, scope: !11691)
!11697 = !DILocation(line: 4372, column: 25, scope: !11691)
!11698 = !DILocation(line: 4372, column: 10, scope: !11691)
!11699 = !DILocation(line: 4371, column: 7, scope: !11640)
!11700 = !DILocation(line: 4373, column: 9, scope: !11691)
!11701 = !DILocation(line: 4373, column: 5, scope: !11691)
!11702 = !DILocation(line: 4375, column: 16, scope: !11640)
!11703 = !DILocation(line: 4375, column: 3, scope: !11640)
!11704 = !DILocation(line: 4375, column: 9, scope: !11640)
!11705 = !DILocation(line: 4375, column: 14, scope: !11640)
!11706 = !DILocation(line: 4376, column: 21, scope: !11640)
!11707 = !DILocation(line: 4376, column: 3, scope: !11640)
!11708 = !DILocation(line: 4376, column: 9, scope: !11640)
!11709 = !DILocation(line: 4376, column: 19, scope: !11640)
!11710 = !DILocation(line: 4377, column: 1, scope: !11640)
!11711 = distinct !DISubprogram(name: "alloc_use_cost_map", scope: !3, file: !3, line: 2466, type: !3665, scopeLine: 2467, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11712 = !DILocalVariable(name: "data", arg: 1, scope: !11711, file: !3, line: 2466, type: !2530)
!11713 = !DILocation(line: 2466, column: 41, scope: !11711)
!11714 = !DILocalVariable(name: "i", scope: !11711, file: !3, line: 2468, type: !6)
!11715 = !DILocation(line: 2468, column: 12, scope: !11711)
!11716 = !DILocalVariable(name: "size", scope: !11711, file: !3, line: 2468, type: !6)
!11717 = !DILocation(line: 2468, column: 15, scope: !11711)
!11718 = !DILocalVariable(name: "s", scope: !11711, file: !3, line: 2468, type: !6)
!11719 = !DILocation(line: 2468, column: 21, scope: !11711)
!11720 = !DILocalVariable(name: "j", scope: !11711, file: !3, line: 2468, type: !6)
!11721 = !DILocation(line: 2468, column: 24, scope: !11711)
!11722 = !DILocation(line: 2470, column: 10, scope: !11723)
!11723 = distinct !DILexicalBlock(scope: !11711, file: !3, line: 2470, column: 3)
!11724 = !DILocation(line: 2470, column: 8, scope: !11723)
!11725 = !DILocation(line: 2470, column: 15, scope: !11726)
!11726 = distinct !DILexicalBlock(scope: !11723, file: !3, line: 2470, column: 3)
!11727 = !DILocation(line: 2470, column: 30, scope: !11726)
!11728 = !DILocation(line: 2470, column: 19, scope: !11726)
!11729 = !DILocation(line: 2470, column: 17, scope: !11726)
!11730 = !DILocation(line: 2470, column: 3, scope: !11723)
!11731 = !DILocalVariable(name: "use", scope: !11732, file: !3, line: 2472, type: !2457)
!11732 = distinct !DILexicalBlock(scope: !11726, file: !3, line: 2471, column: 5)
!11733 = !DILocation(line: 2472, column: 22, scope: !11732)
!11734 = !DILocation(line: 2472, column: 36, scope: !11732)
!11735 = !DILocation(line: 2472, column: 42, scope: !11732)
!11736 = !DILocation(line: 2472, column: 28, scope: !11732)
!11737 = !DILocalVariable(name: "bi", scope: !11732, file: !3, line: 2473, type: !4257)
!11738 = !DILocation(line: 2473, column: 23, scope: !11732)
!11739 = !DILocation(line: 2475, column: 11, scope: !11740)
!11740 = distinct !DILexicalBlock(scope: !11732, file: !3, line: 2475, column: 11)
!11741 = !DILocation(line: 2475, column: 17, scope: !11740)
!11742 = !DILocation(line: 2475, column: 11, scope: !11732)
!11743 = !DILocation(line: 2476, column: 21, scope: !11740)
!11744 = !DILocation(line: 2476, column: 9, scope: !11740)
!11745 = !DILocation(line: 2476, column: 7, scope: !11740)
!11746 = !DILocation(line: 2476, column: 2, scope: !11740)
!11747 = !DILocation(line: 2479, column: 6, scope: !11748)
!11748 = distinct !DILexicalBlock(scope: !11740, file: !3, line: 2478, column: 2)
!11749 = !DILocation(line: 2480, column: 4, scope: !11750)
!11750 = distinct !DILexicalBlock(scope: !11748, file: !3, line: 2480, column: 4)
!11751 = !DILocation(line: 2480, column: 4, scope: !11752)
!11752 = distinct !DILexicalBlock(scope: !11750, file: !3, line: 2480, column: 4)
!11753 = !DILocation(line: 2482, column: 9, scope: !11754)
!11754 = distinct !DILexicalBlock(scope: !11752, file: !3, line: 2481, column: 6)
!11755 = !DILocation(line: 2483, column: 6, scope: !11754)
!11756 = distinct !{!11756, !11749, !11757}
!11757 = !DILocation(line: 2483, column: 6, scope: !11750)
!11758 = !DILocation(line: 2486, column: 14, scope: !11759)
!11759 = distinct !DILexicalBlock(scope: !11748, file: !3, line: 2486, column: 4)
!11760 = !DILocation(line: 2486, column: 9, scope: !11759)
!11761 = !DILocation(line: 2486, column: 19, scope: !11762)
!11762 = distinct !DILexicalBlock(scope: !11759, file: !3, line: 2486, column: 4)
!11763 = !DILocation(line: 2486, column: 26, scope: !11762)
!11764 = !DILocation(line: 2486, column: 24, scope: !11762)
!11765 = !DILocation(line: 2486, column: 4, scope: !11759)
!11766 = !DILocation(line: 2487, column: 6, scope: !11762)
!11767 = !DILocation(line: 2486, column: 34, scope: !11762)
!11768 = !DILocation(line: 2486, column: 4, scope: !11762)
!11769 = distinct !{!11769, !11765, !11770}
!11770 = !DILocation(line: 2487, column: 6, scope: !11759)
!11771 = !DILocation(line: 2490, column: 28, scope: !11732)
!11772 = !DILocation(line: 2490, column: 7, scope: !11732)
!11773 = !DILocation(line: 2490, column: 12, scope: !11732)
!11774 = !DILocation(line: 2490, column: 26, scope: !11732)
!11775 = !DILocation(line: 2491, column: 23, scope: !11732)
!11776 = !DILocation(line: 2491, column: 7, scope: !11732)
!11777 = !DILocation(line: 2491, column: 12, scope: !11732)
!11778 = !DILocation(line: 2491, column: 21, scope: !11732)
!11779 = !DILocation(line: 2492, column: 5, scope: !11732)
!11780 = !DILocation(line: 2470, column: 38, scope: !11726)
!11781 = !DILocation(line: 2470, column: 3, scope: !11726)
!11782 = distinct !{!11782, !11730, !11783}
!11783 = !DILocation(line: 2492, column: 5, scope: !11723)
!11784 = !DILocation(line: 2493, column: 1, scope: !11711)
!11785 = distinct !DISubprogram(name: "determine_use_iv_cost", scope: !3, file: !3, line: 4167, type: !9123, scopeLine: 4169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11786 = !DILocalVariable(name: "data", arg: 1, scope: !11785, file: !3, line: 4167, type: !2530)
!11787 = !DILocation(line: 4167, column: 44, scope: !11785)
!11788 = !DILocalVariable(name: "use", arg: 2, scope: !11785, file: !3, line: 4168, type: !2457)
!11789 = !DILocation(line: 4168, column: 25, scope: !11785)
!11790 = !DILocalVariable(name: "cand", arg: 3, scope: !11785, file: !3, line: 4168, type: !2472)
!11791 = !DILocation(line: 4168, column: 46, scope: !11785)
!11792 = !DILocation(line: 4170, column: 11, scope: !11785)
!11793 = !DILocation(line: 4170, column: 16, scope: !11785)
!11794 = !DILocation(line: 4170, column: 3, scope: !11785)
!11795 = !DILocation(line: 4173, column: 45, scope: !11796)
!11796 = distinct !DILexicalBlock(scope: !11785, file: !3, line: 4171, column: 5)
!11797 = !DILocation(line: 4173, column: 51, scope: !11796)
!11798 = !DILocation(line: 4173, column: 56, scope: !11796)
!11799 = !DILocation(line: 4173, column: 14, scope: !11796)
!11800 = !DILocation(line: 4173, column: 7, scope: !11796)
!11801 = !DILocation(line: 4176, column: 45, scope: !11796)
!11802 = !DILocation(line: 4176, column: 51, scope: !11796)
!11803 = !DILocation(line: 4176, column: 56, scope: !11796)
!11804 = !DILocation(line: 4176, column: 14, scope: !11796)
!11805 = !DILocation(line: 4176, column: 7, scope: !11796)
!11806 = !DILocation(line: 4179, column: 47, scope: !11796)
!11807 = !DILocation(line: 4179, column: 53, scope: !11796)
!11808 = !DILocation(line: 4179, column: 58, scope: !11796)
!11809 = !DILocation(line: 4179, column: 14, scope: !11796)
!11810 = !DILocation(line: 4179, column: 7, scope: !11796)
!11811 = !DILocation(line: 4182, column: 7, scope: !11796)
!11812 = !DILocation(line: 4183, column: 5, scope: !11796)
!11813 = !DILocation(line: 4185, column: 5, scope: !11785)
!11814 = !DILocation(line: 4187, column: 1, scope: !11785)
!11815 = distinct !DISubprogram(name: "determine_use_iv_cost_generic", scope: !3, file: !3, line: 3897, type: !9123, scopeLine: 3899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11816 = !DILocalVariable(name: "data", arg: 1, scope: !11815, file: !3, line: 3897, type: !2530)
!11817 = !DILocation(line: 3897, column: 52, scope: !11815)
!11818 = !DILocalVariable(name: "use", arg: 2, scope: !11815, file: !3, line: 3898, type: !2457)
!11819 = !DILocation(line: 3898, column: 26, scope: !11815)
!11820 = !DILocalVariable(name: "cand", arg: 3, scope: !11815, file: !3, line: 3898, type: !2472)
!11821 = !DILocation(line: 3898, column: 47, scope: !11815)
!11822 = !DILocalVariable(name: "depends_on", scope: !11815, file: !3, line: 3900, type: !1852)
!11823 = !DILocation(line: 3900, column: 10, scope: !11815)
!11824 = !DILocalVariable(name: "cost", scope: !11815, file: !3, line: 3901, type: !2487)
!11825 = !DILocation(line: 3901, column: 13, scope: !11815)
!11826 = !DILocation(line: 3907, column: 7, scope: !11827)
!11827 = distinct !DILexicalBlock(scope: !11815, file: !3, line: 3907, column: 7)
!11828 = !DILocation(line: 3907, column: 13, scope: !11827)
!11829 = !DILocation(line: 3907, column: 17, scope: !11827)
!11830 = !DILocation(line: 3908, column: 7, scope: !11827)
!11831 = !DILocation(line: 3908, column: 10, scope: !11827)
!11832 = !DILocation(line: 3908, column: 16, scope: !11827)
!11833 = !DILocation(line: 3908, column: 34, scope: !11827)
!11834 = !DILocation(line: 3908, column: 39, scope: !11827)
!11835 = !DILocation(line: 3908, column: 31, scope: !11827)
!11836 = !DILocation(line: 3907, column: 7, scope: !11815)
!11837 = !DILocation(line: 3910, column: 24, scope: !11838)
!11838 = distinct !DILexicalBlock(scope: !11827, file: !3, line: 3909, column: 5)
!11839 = !DILocation(line: 3910, column: 30, scope: !11838)
!11840 = !DILocation(line: 3910, column: 35, scope: !11838)
!11841 = !DILocation(line: 3910, column: 7, scope: !11838)
!11842 = !DILocation(line: 3911, column: 7, scope: !11838)
!11843 = !DILocation(line: 3914, column: 32, scope: !11815)
!11844 = !DILocation(line: 3914, column: 38, scope: !11815)
!11845 = !DILocation(line: 3914, column: 43, scope: !11815)
!11846 = !DILocation(line: 3914, column: 10, scope: !11815)
!11847 = !DILocation(line: 3915, column: 20, scope: !11815)
!11848 = !DILocation(line: 3915, column: 26, scope: !11815)
!11849 = !DILocation(line: 3915, column: 31, scope: !11815)
!11850 = !DILocation(line: 3915, column: 43, scope: !11815)
!11851 = !DILocation(line: 3915, column: 3, scope: !11815)
!11852 = !DILocation(line: 3917, column: 11, scope: !11815)
!11853 = !DILocation(line: 3917, column: 10, scope: !11815)
!11854 = !DILocation(line: 3917, column: 3, scope: !11815)
!11855 = !DILocation(line: 3918, column: 1, scope: !11815)
!11856 = distinct !DISubprogram(name: "determine_use_iv_cost_address", scope: !3, file: !3, line: 3923, type: !9123, scopeLine: 3925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11857 = !DILocalVariable(name: "data", arg: 1, scope: !11856, file: !3, line: 3923, type: !2530)
!11858 = !DILocation(line: 3923, column: 52, scope: !11856)
!11859 = !DILocalVariable(name: "use", arg: 2, scope: !11856, file: !3, line: 3924, type: !2457)
!11860 = !DILocation(line: 3924, column: 26, scope: !11856)
!11861 = !DILocalVariable(name: "cand", arg: 3, scope: !11856, file: !3, line: 3924, type: !2472)
!11862 = !DILocation(line: 3924, column: 47, scope: !11856)
!11863 = !DILocalVariable(name: "depends_on", scope: !11856, file: !3, line: 3926, type: !1852)
!11864 = !DILocation(line: 3926, column: 10, scope: !11856)
!11865 = !DILocalVariable(name: "can_autoinc", scope: !11856, file: !3, line: 3927, type: !136)
!11866 = !DILocation(line: 3927, column: 8, scope: !11856)
!11867 = !DILocalVariable(name: "cost", scope: !11856, file: !3, line: 3928, type: !2487)
!11868 = !DILocation(line: 3928, column: 13, scope: !11856)
!11869 = !DILocation(line: 3928, column: 42, scope: !11856)
!11870 = !DILocation(line: 3928, column: 48, scope: !11856)
!11871 = !DILocation(line: 3928, column: 53, scope: !11856)
!11872 = !DILocation(line: 3928, column: 20, scope: !11856)
!11873 = !DILocation(line: 3931, column: 7, scope: !11874)
!11874 = distinct !DILexicalBlock(scope: !11856, file: !3, line: 3931, column: 7)
!11875 = !DILocation(line: 3931, column: 13, scope: !11874)
!11876 = !DILocation(line: 3931, column: 25, scope: !11874)
!11877 = !DILocation(line: 3931, column: 22, scope: !11874)
!11878 = !DILocation(line: 3931, column: 7, scope: !11856)
!11879 = !DILocation(line: 3933, column: 11, scope: !11880)
!11880 = distinct !DILexicalBlock(scope: !11881, file: !3, line: 3933, column: 11)
!11881 = distinct !DILexicalBlock(scope: !11874, file: !3, line: 3932, column: 5)
!11882 = !DILocation(line: 3933, column: 11, scope: !11881)
!11883 = !DILocation(line: 3934, column: 15, scope: !11880)
!11884 = !DILocation(line: 3934, column: 21, scope: !11880)
!11885 = !DILocation(line: 3934, column: 7, scope: !11880)
!11886 = !DILocation(line: 3934, column: 12, scope: !11880)
!11887 = !DILocation(line: 3934, column: 2, scope: !11880)
!11888 = !DILocation(line: 3938, column: 16, scope: !11889)
!11889 = distinct !DILexicalBlock(scope: !11880, file: !3, line: 3938, column: 16)
!11890 = !DILocation(line: 3938, column: 22, scope: !11889)
!11891 = !DILocation(line: 3938, column: 26, scope: !11889)
!11892 = !DILocation(line: 3938, column: 42, scope: !11889)
!11893 = !DILocation(line: 3938, column: 45, scope: !11889)
!11894 = !DILocation(line: 3938, column: 51, scope: !11889)
!11895 = !DILocation(line: 3938, column: 55, scope: !11889)
!11896 = !DILocation(line: 3938, column: 16, scope: !11880)
!11897 = !DILocation(line: 3939, column: 9, scope: !11889)
!11898 = !DILocation(line: 3939, column: 2, scope: !11889)
!11899 = !DILocation(line: 3940, column: 5, scope: !11881)
!11900 = !DILocation(line: 3941, column: 20, scope: !11856)
!11901 = !DILocation(line: 3941, column: 26, scope: !11856)
!11902 = !DILocation(line: 3941, column: 31, scope: !11856)
!11903 = !DILocation(line: 3941, column: 43, scope: !11856)
!11904 = !DILocation(line: 3941, column: 3, scope: !11856)
!11905 = !DILocation(line: 3943, column: 11, scope: !11856)
!11906 = !DILocation(line: 3943, column: 10, scope: !11856)
!11907 = !DILocation(line: 3943, column: 3, scope: !11856)
!11908 = distinct !DISubprogram(name: "determine_use_iv_cost_condition", scope: !3, file: !3, line: 4087, type: !9123, scopeLine: 4089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!11909 = !DILocalVariable(name: "data", arg: 1, scope: !11908, file: !3, line: 4087, type: !2530)
!11910 = !DILocation(line: 4087, column: 54, scope: !11908)
!11911 = !DILocalVariable(name: "use", arg: 2, scope: !11908, file: !3, line: 4088, type: !2457)
!11912 = !DILocation(line: 4088, column: 21, scope: !11908)
!11913 = !DILocalVariable(name: "cand", arg: 3, scope: !11908, file: !3, line: 4088, type: !2472)
!11914 = !DILocation(line: 4088, column: 42, scope: !11908)
!11915 = !DILocalVariable(name: "bound", scope: !11908, file: !3, line: 4090, type: !1134)
!11916 = !DILocation(line: 4090, column: 8, scope: !11908)
!11917 = !DILocalVariable(name: "cmp_iv", scope: !11908, file: !3, line: 4091, type: !2431)
!11918 = !DILocation(line: 4091, column: 14, scope: !11908)
!11919 = !DILocalVariable(name: "depends_on_elim", scope: !11908, file: !3, line: 4092, type: !1852)
!11920 = !DILocation(line: 4092, column: 10, scope: !11908)
!11921 = !DILocalVariable(name: "depends_on_express", scope: !11908, file: !3, line: 4092, type: !1852)
!11922 = !DILocation(line: 4092, column: 34, scope: !11908)
!11923 = !DILocalVariable(name: "depends_on", scope: !11908, file: !3, line: 4092, type: !1852)
!11924 = !DILocation(line: 4092, column: 61, scope: !11908)
!11925 = !DILocalVariable(name: "elim_cost", scope: !11908, file: !3, line: 4093, type: !2487)
!11926 = !DILocation(line: 4093, column: 13, scope: !11908)
!11927 = !DILocalVariable(name: "express_cost", scope: !11908, file: !3, line: 4093, type: !2487)
!11928 = !DILocation(line: 4093, column: 24, scope: !11908)
!11929 = !DILocalVariable(name: "cost", scope: !11908, file: !3, line: 4093, type: !2487)
!11930 = !DILocation(line: 4093, column: 38, scope: !11908)
!11931 = !DILocalVariable(name: "ok", scope: !11908, file: !3, line: 4094, type: !136)
!11932 = !DILocation(line: 4094, column: 8, scope: !11908)
!11933 = !DILocalVariable(name: "control_var", scope: !11908, file: !3, line: 4095, type: !1470)
!11934 = !DILocation(line: 4095, column: 9, scope: !11908)
!11935 = !DILocalVariable(name: "bound_cst", scope: !11908, file: !3, line: 4095, type: !1470)
!11936 = !DILocation(line: 4095, column: 23, scope: !11908)
!11937 = !DILocation(line: 4098, column: 8, scope: !11938)
!11938 = distinct !DILexicalBlock(scope: !11908, file: !3, line: 4098, column: 7)
!11939 = !DILocation(line: 4098, column: 14, scope: !11938)
!11940 = !DILocation(line: 4098, column: 7, scope: !11908)
!11941 = !DILocation(line: 4100, column: 24, scope: !11942)
!11942 = distinct !DILexicalBlock(scope: !11938, file: !3, line: 4099, column: 5)
!11943 = !DILocation(line: 4100, column: 30, scope: !11942)
!11944 = !DILocation(line: 4100, column: 35, scope: !11942)
!11945 = !DILocation(line: 4100, column: 7, scope: !11942)
!11946 = !DILocation(line: 4101, column: 7, scope: !11942)
!11947 = !DILocation(line: 4105, column: 25, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11908, file: !3, line: 4105, column: 7)
!11949 = !DILocation(line: 4105, column: 31, scope: !11948)
!11950 = !DILocation(line: 4105, column: 36, scope: !11948)
!11951 = !DILocation(line: 4105, column: 7, scope: !11948)
!11952 = !DILocation(line: 4105, column: 7, scope: !11908)
!11953 = !DILocation(line: 4107, column: 35, scope: !11954)
!11954 = distinct !DILexicalBlock(scope: !11948, file: !3, line: 4106, column: 5)
!11955 = !DILocation(line: 4107, column: 41, scope: !11954)
!11956 = !DILocation(line: 4107, column: 19, scope: !11954)
!11957 = !DILocation(line: 4110, column: 17, scope: !11954)
!11958 = !DILocation(line: 4110, column: 22, scope: !11954)
!11959 = !DILocation(line: 4111, column: 5, scope: !11954)
!11960 = !DILocation(line: 4113, column: 17, scope: !11948)
!11961 = !DILocation(line: 4117, column: 31, scope: !11908)
!11962 = !DILocation(line: 4117, column: 37, scope: !11908)
!11963 = !DILocation(line: 4117, column: 42, scope: !11908)
!11964 = !DILocation(line: 4117, column: 8, scope: !11908)
!11965 = !DILocation(line: 4117, column: 6, scope: !11908)
!11966 = !DILocation(line: 4119, column: 3, scope: !11908)
!11967 = !DILocation(line: 4127, column: 8, scope: !11968)
!11968 = distinct !DILexicalBlock(scope: !11908, file: !3, line: 4127, column: 7)
!11969 = !DILocation(line: 4128, column: 7, scope: !11968)
!11970 = !DILocation(line: 4128, column: 26, scope: !11968)
!11971 = !DILocation(line: 4128, column: 25, scope: !11968)
!11972 = !DILocation(line: 4128, column: 10, scope: !11968)
!11973 = !DILocation(line: 4129, column: 7, scope: !11968)
!11974 = !DILocation(line: 4129, column: 29, scope: !11968)
!11975 = !DILocation(line: 4129, column: 28, scope: !11968)
!11976 = !DILocation(line: 4129, column: 42, scope: !11968)
!11977 = !DILocation(line: 4129, column: 48, scope: !11968)
!11978 = !DILocation(line: 4129, column: 11, scope: !11968)
!11979 = !DILocation(line: 4130, column: 4, scope: !11968)
!11980 = !DILocation(line: 4130, column: 25, scope: !11968)
!11981 = !DILocation(line: 4130, column: 24, scope: !11968)
!11982 = !DILocation(line: 4130, column: 38, scope: !11968)
!11983 = !DILocation(line: 4130, column: 44, scope: !11968)
!11984 = !DILocation(line: 4130, column: 7, scope: !11968)
!11985 = !DILocation(line: 4127, column: 7, scope: !11908)
!11986 = !DILocation(line: 4131, column: 15, scope: !11968)
!11987 = !DILocation(line: 4131, column: 20, scope: !11968)
!11988 = !DILocation(line: 4131, column: 5, scope: !11968)
!11989 = !DILocation(line: 4133, column: 40, scope: !11908)
!11990 = !DILocation(line: 4133, column: 46, scope: !11908)
!11991 = !DILocation(line: 4133, column: 51, scope: !11908)
!11992 = !DILocation(line: 4133, column: 18, scope: !11908)
!11993 = !DILocation(line: 4135, column: 20, scope: !11908)
!11994 = !DILocation(line: 4135, column: 18, scope: !11908)
!11995 = !DILocation(line: 4136, column: 3, scope: !11908)
!11996 = !DILocation(line: 4139, column: 7, scope: !11997)
!11997 = distinct !DILexicalBlock(scope: !11908, file: !3, line: 4139, column: 7)
!11998 = !DILocation(line: 4139, column: 47, scope: !11997)
!11999 = !DILocation(line: 4139, column: 7, scope: !11908)
!12000 = !DILocation(line: 4141, column: 14, scope: !12001)
!12001 = distinct !DILexicalBlock(scope: !11997, file: !3, line: 4140, column: 5)
!12002 = !DILocation(line: 4142, column: 20, scope: !12001)
!12003 = !DILocation(line: 4142, column: 18, scope: !12001)
!12004 = !DILocation(line: 4143, column: 23, scope: !12001)
!12005 = !DILocation(line: 4144, column: 5, scope: !12001)
!12006 = !DILocation(line: 4147, column: 14, scope: !12007)
!12007 = distinct !DILexicalBlock(scope: !11997, file: !3, line: 4146, column: 5)
!12008 = !DILocation(line: 4148, column: 20, scope: !12007)
!12009 = !DILocation(line: 4148, column: 18, scope: !12007)
!12010 = !DILocation(line: 4149, column: 26, scope: !12007)
!12011 = !DILocation(line: 4150, column: 13, scope: !12007)
!12012 = !DILocation(line: 4153, column: 20, scope: !11908)
!12013 = !DILocation(line: 4153, column: 26, scope: !11908)
!12014 = !DILocation(line: 4153, column: 31, scope: !11908)
!12015 = !DILocation(line: 4153, column: 43, scope: !11908)
!12016 = !DILocation(line: 4153, column: 55, scope: !11908)
!12017 = !DILocation(line: 4153, column: 3, scope: !11908)
!12018 = !DILocation(line: 4155, column: 7, scope: !12019)
!12019 = distinct !DILexicalBlock(scope: !11908, file: !3, line: 4155, column: 7)
!12020 = !DILocation(line: 4155, column: 7, scope: !11908)
!12021 = !DILocation(line: 4156, column: 5, scope: !12019)
!12022 = !DILocation(line: 4157, column: 7, scope: !12023)
!12023 = distinct !DILexicalBlock(scope: !11908, file: !3, line: 4157, column: 7)
!12024 = !DILocation(line: 4157, column: 7, scope: !11908)
!12025 = !DILocation(line: 4158, column: 5, scope: !12023)
!12026 = !DILocation(line: 4160, column: 11, scope: !11908)
!12027 = !DILocation(line: 4160, column: 10, scope: !11908)
!12028 = !DILocation(line: 4160, column: 3, scope: !11908)
!12029 = !DILocation(line: 4161, column: 1, scope: !11908)
!12030 = distinct !DISubprogram(name: "set_use_iv_cost", scope: !3, file: !3, line: 2555, type: !12031, scopeLine: 2558, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12031 = !DISubroutineType(types: !12032)
!12032 = !{null, !2530, !2457, !2472, !2487, !1852, !1134}
!12033 = !DILocalVariable(name: "data", arg: 1, scope: !12030, file: !3, line: 2555, type: !2530)
!12034 = !DILocation(line: 2555, column: 38, scope: !12030)
!12035 = !DILocalVariable(name: "use", arg: 2, scope: !12030, file: !3, line: 2556, type: !2457)
!12036 = !DILocation(line: 2556, column: 19, scope: !12030)
!12037 = !DILocalVariable(name: "cand", arg: 3, scope: !12030, file: !3, line: 2556, type: !2472)
!12038 = !DILocation(line: 2556, column: 40, scope: !12030)
!12039 = !DILocalVariable(name: "cost", arg: 4, scope: !12030, file: !3, line: 2557, type: !2487)
!12040 = !DILocation(line: 2557, column: 14, scope: !12030)
!12041 = !DILocalVariable(name: "depends_on", arg: 5, scope: !12030, file: !3, line: 2557, type: !1852)
!12042 = !DILocation(line: 2557, column: 27, scope: !12030)
!12043 = !DILocalVariable(name: "value", arg: 6, scope: !12030, file: !3, line: 2557, type: !1134)
!12044 = !DILocation(line: 2557, column: 44, scope: !12030)
!12045 = !DILocalVariable(name: "i", scope: !12030, file: !3, line: 2559, type: !6)
!12046 = !DILocation(line: 2559, column: 12, scope: !12030)
!12047 = !DILocalVariable(name: "s", scope: !12030, file: !3, line: 2559, type: !6)
!12048 = !DILocation(line: 2559, column: 15, scope: !12030)
!12049 = !DILocation(line: 2561, column: 7, scope: !12050)
!12050 = distinct !DILexicalBlock(scope: !12030, file: !3, line: 2561, column: 7)
!12051 = !DILocation(line: 2561, column: 7, scope: !12030)
!12052 = !DILocation(line: 2563, column: 7, scope: !12053)
!12053 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2562, column: 5)
!12054 = !DILocation(line: 2564, column: 7, scope: !12053)
!12055 = !DILocation(line: 2567, column: 7, scope: !12056)
!12056 = distinct !DILexicalBlock(scope: !12030, file: !3, line: 2567, column: 7)
!12057 = !DILocation(line: 2567, column: 13, scope: !12056)
!12058 = !DILocation(line: 2567, column: 7, scope: !12030)
!12059 = !DILocation(line: 2569, column: 38, scope: !12060)
!12060 = distinct !DILexicalBlock(scope: !12056, file: !3, line: 2568, column: 5)
!12061 = !DILocation(line: 2569, column: 7, scope: !12060)
!12062 = !DILocation(line: 2569, column: 12, scope: !12060)
!12063 = !DILocation(line: 2569, column: 21, scope: !12060)
!12064 = !DILocation(line: 2569, column: 27, scope: !12060)
!12065 = !DILocation(line: 2569, column: 31, scope: !12060)
!12066 = !DILocation(line: 2569, column: 36, scope: !12060)
!12067 = !DILocation(line: 2570, column: 7, scope: !12060)
!12068 = !DILocation(line: 2570, column: 12, scope: !12060)
!12069 = !DILocation(line: 2570, column: 21, scope: !12060)
!12070 = !DILocation(line: 2570, column: 27, scope: !12060)
!12071 = !DILocation(line: 2570, column: 31, scope: !12060)
!12072 = !DILocation(line: 2570, column: 38, scope: !12060)
!12073 = !DILocation(line: 2571, column: 44, scope: !12060)
!12074 = !DILocation(line: 2571, column: 7, scope: !12060)
!12075 = !DILocation(line: 2571, column: 12, scope: !12060)
!12076 = !DILocation(line: 2571, column: 21, scope: !12060)
!12077 = !DILocation(line: 2571, column: 27, scope: !12060)
!12078 = !DILocation(line: 2571, column: 31, scope: !12060)
!12079 = !DILocation(line: 2571, column: 42, scope: !12060)
!12080 = !DILocation(line: 2572, column: 39, scope: !12060)
!12081 = !DILocation(line: 2572, column: 7, scope: !12060)
!12082 = !DILocation(line: 2572, column: 12, scope: !12060)
!12083 = !DILocation(line: 2572, column: 21, scope: !12060)
!12084 = !DILocation(line: 2572, column: 27, scope: !12060)
!12085 = !DILocation(line: 2572, column: 31, scope: !12060)
!12086 = !DILocation(line: 2572, column: 37, scope: !12060)
!12087 = !DILocation(line: 2573, column: 7, scope: !12060)
!12088 = !DILocation(line: 2577, column: 7, scope: !12030)
!12089 = !DILocation(line: 2577, column: 13, scope: !12030)
!12090 = !DILocation(line: 2577, column: 19, scope: !12030)
!12091 = !DILocation(line: 2577, column: 24, scope: !12030)
!12092 = !DILocation(line: 2577, column: 38, scope: !12030)
!12093 = !DILocation(line: 2577, column: 16, scope: !12030)
!12094 = !DILocation(line: 2577, column: 5, scope: !12030)
!12095 = !DILocation(line: 2578, column: 12, scope: !12096)
!12096 = distinct !DILexicalBlock(scope: !12030, file: !3, line: 2578, column: 3)
!12097 = !DILocation(line: 2578, column: 10, scope: !12096)
!12098 = !DILocation(line: 2578, column: 8, scope: !12096)
!12099 = !DILocation(line: 2578, column: 15, scope: !12100)
!12100 = distinct !DILexicalBlock(scope: !12096, file: !3, line: 2578, column: 3)
!12101 = !DILocation(line: 2578, column: 19, scope: !12100)
!12102 = !DILocation(line: 2578, column: 24, scope: !12100)
!12103 = !DILocation(line: 2578, column: 17, scope: !12100)
!12104 = !DILocation(line: 2578, column: 3, scope: !12096)
!12105 = !DILocation(line: 2579, column: 10, scope: !12106)
!12106 = distinct !DILexicalBlock(scope: !12100, file: !3, line: 2579, column: 9)
!12107 = !DILocation(line: 2579, column: 15, scope: !12106)
!12108 = !DILocation(line: 2579, column: 24, scope: !12106)
!12109 = !DILocation(line: 2579, column: 27, scope: !12106)
!12110 = !DILocation(line: 2579, column: 9, scope: !12100)
!12111 = !DILocation(line: 2580, column: 7, scope: !12106)
!12112 = !DILocation(line: 2578, column: 40, scope: !12100)
!12113 = !DILocation(line: 2578, column: 3, scope: !12100)
!12114 = distinct !{!12114, !12104, !12115}
!12115 = !DILocation(line: 2580, column: 12, scope: !12096)
!12116 = !DILocation(line: 2581, column: 10, scope: !12117)
!12117 = distinct !DILexicalBlock(scope: !12030, file: !3, line: 2581, column: 3)
!12118 = !DILocation(line: 2581, column: 8, scope: !12117)
!12119 = !DILocation(line: 2581, column: 15, scope: !12120)
!12120 = distinct !DILexicalBlock(scope: !12117, file: !3, line: 2581, column: 3)
!12121 = !DILocation(line: 2581, column: 19, scope: !12120)
!12122 = !DILocation(line: 2581, column: 17, scope: !12120)
!12123 = !DILocation(line: 2581, column: 3, scope: !12117)
!12124 = !DILocation(line: 2582, column: 10, scope: !12125)
!12125 = distinct !DILexicalBlock(scope: !12120, file: !3, line: 2582, column: 9)
!12126 = !DILocation(line: 2582, column: 15, scope: !12125)
!12127 = !DILocation(line: 2582, column: 24, scope: !12125)
!12128 = !DILocation(line: 2582, column: 27, scope: !12125)
!12129 = !DILocation(line: 2582, column: 9, scope: !12120)
!12130 = !DILocation(line: 2583, column: 7, scope: !12125)
!12131 = !DILocation(line: 2581, column: 23, scope: !12120)
!12132 = !DILocation(line: 2581, column: 3, scope: !12120)
!12133 = distinct !{!12133, !12123, !12134}
!12134 = !DILocation(line: 2583, column: 12, scope: !12117)
!12135 = !DILocation(line: 2585, column: 3, scope: !12030)
!12136 = !DILabel(scope: !12030, name: "found", file: !3, line: 2587)
!12137 = !DILocation(line: 2587, column: 1, scope: !12030)
!12138 = !DILocation(line: 2588, column: 27, scope: !12030)
!12139 = !DILocation(line: 2588, column: 3, scope: !12030)
!12140 = !DILocation(line: 2588, column: 8, scope: !12030)
!12141 = !DILocation(line: 2588, column: 17, scope: !12030)
!12142 = !DILocation(line: 2588, column: 20, scope: !12030)
!12143 = !DILocation(line: 2588, column: 25, scope: !12030)
!12144 = !DILocation(line: 2589, column: 3, scope: !12030)
!12145 = !DILocation(line: 2589, column: 8, scope: !12030)
!12146 = !DILocation(line: 2589, column: 17, scope: !12030)
!12147 = !DILocation(line: 2589, column: 20, scope: !12030)
!12148 = !DILocation(line: 2589, column: 27, scope: !12030)
!12149 = !DILocation(line: 2590, column: 33, scope: !12030)
!12150 = !DILocation(line: 2590, column: 3, scope: !12030)
!12151 = !DILocation(line: 2590, column: 8, scope: !12030)
!12152 = !DILocation(line: 2590, column: 17, scope: !12030)
!12153 = !DILocation(line: 2590, column: 20, scope: !12030)
!12154 = !DILocation(line: 2590, column: 31, scope: !12030)
!12155 = !DILocation(line: 2591, column: 28, scope: !12030)
!12156 = !DILocation(line: 2591, column: 3, scope: !12030)
!12157 = !DILocation(line: 2591, column: 8, scope: !12030)
!12158 = !DILocation(line: 2591, column: 17, scope: !12030)
!12159 = !DILocation(line: 2591, column: 20, scope: !12030)
!12160 = !DILocation(line: 2591, column: 26, scope: !12030)
!12161 = !DILocation(line: 2592, column: 1, scope: !12030)
!12162 = distinct !DISubprogram(name: "may_eliminate_iv", scope: !3, file: !3, line: 4015, type: !12163, scopeLine: 4017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12163 = !DISubroutineType(types: !12164)
!12164 = !{!136, !2530, !2457, !2472, !1470}
!12165 = !DILocalVariable(name: "data", arg: 1, scope: !12162, file: !3, line: 4015, type: !2530)
!12166 = !DILocation(line: 4015, column: 39, scope: !12162)
!12167 = !DILocalVariable(name: "use", arg: 2, scope: !12162, file: !3, line: 4016, type: !2457)
!12168 = !DILocation(line: 4016, column: 20, scope: !12162)
!12169 = !DILocalVariable(name: "cand", arg: 3, scope: !12162, file: !3, line: 4016, type: !2472)
!12170 = !DILocation(line: 4016, column: 41, scope: !12162)
!12171 = !DILocalVariable(name: "bound", arg: 4, scope: !12162, file: !3, line: 4016, type: !1470)
!12172 = !DILocation(line: 4016, column: 53, scope: !12162)
!12173 = !DILocalVariable(name: "ex_bb", scope: !12162, file: !3, line: 4018, type: !1399)
!12174 = !DILocation(line: 4018, column: 15, scope: !12162)
!12175 = !DILocalVariable(name: "exit", scope: !12162, file: !3, line: 4019, type: !1416)
!12176 = !DILocation(line: 4019, column: 8, scope: !12162)
!12177 = !DILocalVariable(name: "nit", scope: !12162, file: !3, line: 4020, type: !1134)
!12178 = !DILocation(line: 4020, column: 8, scope: !12162)
!12179 = !DILocalVariable(name: "period", scope: !12162, file: !3, line: 4020, type: !1134)
!12180 = !DILocation(line: 4020, column: 13, scope: !12162)
!12181 = !DILocalVariable(name: "loop", scope: !12162, file: !3, line: 4021, type: !1651)
!12182 = !DILocation(line: 4021, column: 16, scope: !12162)
!12183 = !DILocation(line: 4021, column: 23, scope: !12162)
!12184 = !DILocation(line: 4021, column: 29, scope: !12162)
!12185 = !DILocalVariable(name: "bnd", scope: !12162, file: !3, line: 4022, type: !9656)
!12186 = !DILocation(line: 4022, column: 12, scope: !12162)
!12187 = !DILocation(line: 4024, column: 7, scope: !12188)
!12188 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4024, column: 7)
!12189 = !DILocation(line: 4024, column: 34, scope: !12188)
!12190 = !DILocation(line: 4024, column: 7, scope: !12162)
!12191 = !DILocation(line: 4025, column: 5, scope: !12188)
!12192 = !DILocation(line: 4029, column: 22, scope: !12162)
!12193 = !DILocation(line: 4029, column: 27, scope: !12162)
!12194 = !DILocation(line: 4029, column: 11, scope: !12162)
!12195 = !DILocation(line: 4029, column: 9, scope: !12162)
!12196 = !DILocation(line: 4030, column: 7, scope: !12197)
!12197 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4030, column: 7)
!12198 = !DILocation(line: 4030, column: 12, scope: !12197)
!12199 = !DILocation(line: 4030, column: 31, scope: !12197)
!12200 = !DILocation(line: 4030, column: 20, scope: !12197)
!12201 = !DILocation(line: 4030, column: 17, scope: !12197)
!12202 = !DILocation(line: 4031, column: 7, scope: !12197)
!12203 = !DILocation(line: 4031, column: 23, scope: !12197)
!12204 = !DILocation(line: 4031, column: 28, scope: !12197)
!12205 = !DILocation(line: 4031, column: 10, scope: !12197)
!12206 = !DILocation(line: 4031, column: 34, scope: !12197)
!12207 = !DILocation(line: 4032, column: 7, scope: !12197)
!12208 = !DILocation(line: 4032, column: 43, scope: !12197)
!12209 = !DILocation(line: 4032, column: 49, scope: !12197)
!12210 = !DILocation(line: 4032, column: 56, scope: !12197)
!12211 = !DILocation(line: 4032, column: 11, scope: !12197)
!12212 = !DILocation(line: 4030, column: 7, scope: !12162)
!12213 = !DILocation(line: 4033, column: 5, scope: !12197)
!12214 = !DILocation(line: 4035, column: 10, scope: !12162)
!12215 = !DILocation(line: 4035, column: 8, scope: !12162)
!12216 = !DILocation(line: 4036, column: 30, scope: !12217)
!12217 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4036, column: 7)
!12218 = !DILocation(line: 4036, column: 36, scope: !12217)
!12219 = !DILocation(line: 4036, column: 42, scope: !12217)
!12220 = !DILocation(line: 4036, column: 7, scope: !12217)
!12221 = !DILocation(line: 4036, column: 7, scope: !12162)
!12222 = !DILocation(line: 4037, column: 12, scope: !12217)
!12223 = !DILocation(line: 4037, column: 10, scope: !12217)
!12224 = !DILocation(line: 4037, column: 5, scope: !12217)
!12225 = !DILocation(line: 4038, column: 30, scope: !12226)
!12226 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4038, column: 7)
!12227 = !DILocation(line: 4038, column: 36, scope: !12226)
!12228 = !DILocation(line: 4038, column: 42, scope: !12226)
!12229 = !DILocation(line: 4038, column: 7, scope: !12226)
!12230 = !DILocation(line: 4038, column: 7, scope: !12162)
!12231 = !DILocation(line: 4039, column: 5, scope: !12226)
!12232 = !DILocation(line: 4041, column: 25, scope: !12162)
!12233 = !DILocation(line: 4041, column: 31, scope: !12162)
!12234 = !DILocation(line: 4041, column: 9, scope: !12162)
!12235 = !DILocation(line: 4041, column: 7, scope: !12162)
!12236 = !DILocation(line: 4042, column: 8, scope: !12237)
!12237 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4042, column: 7)
!12238 = !DILocation(line: 4042, column: 7, scope: !12162)
!12239 = !DILocation(line: 4043, column: 5, scope: !12237)
!12240 = !DILocation(line: 4048, column: 23, scope: !12162)
!12241 = !DILocation(line: 4048, column: 29, scope: !12162)
!12242 = !DILocation(line: 4048, column: 12, scope: !12162)
!12243 = !DILocation(line: 4048, column: 10, scope: !12162)
!12244 = !DILocation(line: 4051, column: 7, scope: !12245)
!12245 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4051, column: 7)
!12246 = !DILocation(line: 4051, column: 23, scope: !12245)
!12247 = !DILocation(line: 4051, column: 7, scope: !12162)
!12248 = !DILocation(line: 4053, column: 29, scope: !12249)
!12249 = distinct !DILexicalBlock(scope: !12250, file: !3, line: 4053, column: 11)
!12250 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 4052, column: 5)
!12251 = !DILocation(line: 4053, column: 34, scope: !12249)
!12252 = !DILocation(line: 4053, column: 12, scope: !12249)
!12253 = !DILocation(line: 4053, column: 11, scope: !12250)
!12254 = !DILocation(line: 4054, column: 2, scope: !12249)
!12255 = !DILocation(line: 4055, column: 5, scope: !12250)
!12256 = !DILocation(line: 4060, column: 30, scope: !12257)
!12257 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 4060, column: 12)
!12258 = !DILocation(line: 4060, column: 36, scope: !12257)
!12259 = !DILocation(line: 4060, column: 12, scope: !12257)
!12260 = !DILocation(line: 4060, column: 12, scope: !12245)
!12261 = !DILocalVariable(name: "period_value", scope: !12262, file: !3, line: 4062, type: !1182)
!12262 = distinct !DILexicalBlock(scope: !12257, file: !3, line: 4061, column: 5)
!12263 = !DILocation(line: 4062, column: 18, scope: !12262)
!12264 = !DILocalVariable(name: "max_niter", scope: !12262, file: !3, line: 4062, type: !1182)
!12265 = !DILocation(line: 4062, column: 32, scope: !12262)
!12266 = !DILocation(line: 4063, column: 39, scope: !12267)
!12267 = distinct !DILexicalBlock(scope: !12262, file: !3, line: 4063, column: 11)
!12268 = !DILocation(line: 4063, column: 12, scope: !12267)
!12269 = !DILocation(line: 4063, column: 11, scope: !12262)
!12270 = !DILocation(line: 4064, column: 2, scope: !12267)
!12271 = !DILocation(line: 4065, column: 42, scope: !12262)
!12272 = !DILocation(line: 4065, column: 22, scope: !12262)
!12273 = !DILocation(line: 4066, column: 11, scope: !12274)
!12274 = distinct !DILexicalBlock(scope: !12262, file: !3, line: 4066, column: 11)
!12275 = !DILocation(line: 4066, column: 53, scope: !12274)
!12276 = !DILocation(line: 4066, column: 11, scope: !12262)
!12277 = !DILocation(line: 4067, column: 2, scope: !12274)
!12278 = !DILocation(line: 4068, column: 5, scope: !12262)
!12279 = !DILocation(line: 4072, column: 5, scope: !12257)
!12280 = !DILocation(line: 4074, column: 18, scope: !12162)
!12281 = !DILocation(line: 4074, column: 24, scope: !12162)
!12282 = !DILocation(line: 4074, column: 30, scope: !12162)
!12283 = !DILocation(line: 4074, column: 35, scope: !12162)
!12284 = !DILocation(line: 4074, column: 41, scope: !12162)
!12285 = !DILocation(line: 4074, column: 3, scope: !12162)
!12286 = !DILocation(line: 4076, column: 12, scope: !12162)
!12287 = !DILocation(line: 4076, column: 4, scope: !12162)
!12288 = !DILocation(line: 4076, column: 10, scope: !12162)
!12289 = !DILocation(line: 4079, column: 32, scope: !12290)
!12290 = distinct !DILexicalBlock(scope: !12162, file: !3, line: 4079, column: 7)
!12291 = !DILocation(line: 4079, column: 31, scope: !12290)
!12292 = !DILocation(line: 4079, column: 7, scope: !12290)
!12293 = !DILocation(line: 4079, column: 7, scope: !12162)
!12294 = !DILocation(line: 4080, column: 5, scope: !12290)
!12295 = !DILocation(line: 4081, column: 3, scope: !12162)
!12296 = !DILocation(line: 4082, column: 1, scope: !12162)
!12297 = distinct !DISubprogram(name: "compare_costs", scope: !3, file: !3, line: 2534, type: !12298, scopeLine: 2535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12298 = !DISubroutineType(types: !12299)
!12299 = !{!1006, !2487, !2487}
!12300 = !DILocalVariable(name: "cost1", arg: 1, scope: !12297, file: !3, line: 2534, type: !2487)
!12301 = !DILocation(line: 2534, column: 26, scope: !12297)
!12302 = !DILocalVariable(name: "cost2", arg: 2, scope: !12297, file: !3, line: 2534, type: !2487)
!12303 = !DILocation(line: 2534, column: 43, scope: !12297)
!12304 = !DILocation(line: 2536, column: 13, scope: !12305)
!12305 = distinct !DILexicalBlock(scope: !12297, file: !3, line: 2536, column: 7)
!12306 = !DILocation(line: 2536, column: 27, scope: !12305)
!12307 = !DILocation(line: 2536, column: 18, scope: !12305)
!12308 = !DILocation(line: 2536, column: 7, scope: !12297)
!12309 = !DILocation(line: 2537, column: 18, scope: !12305)
!12310 = !DILocation(line: 2537, column: 37, scope: !12305)
!12311 = !DILocation(line: 2537, column: 29, scope: !12305)
!12312 = !DILocation(line: 2537, column: 5, scope: !12305)
!12313 = !DILocation(line: 2539, column: 16, scope: !12297)
!12314 = !DILocation(line: 2539, column: 29, scope: !12297)
!12315 = !DILocation(line: 2539, column: 21, scope: !12297)
!12316 = !DILocation(line: 2539, column: 3, scope: !12297)
!12317 = !DILocation(line: 2540, column: 1, scope: !12297)
!12318 = distinct !DISubprogram(name: "iv_period", scope: !3, file: !3, line: 3974, type: !12319, scopeLine: 3975, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12319 = !DISubroutineType(types: !12320)
!12320 = !{!1134, !2431}
!12321 = !DILocalVariable(name: "iv", arg: 1, scope: !12318, file: !3, line: 3974, type: !2431)
!12322 = !DILocation(line: 3974, column: 23, scope: !12318)
!12323 = !DILocalVariable(name: "step", scope: !12318, file: !3, line: 3976, type: !1134)
!12324 = !DILocation(line: 3976, column: 8, scope: !12318)
!12325 = !DILocation(line: 3976, column: 15, scope: !12318)
!12326 = !DILocation(line: 3976, column: 19, scope: !12318)
!12327 = !DILocalVariable(name: "period", scope: !12318, file: !3, line: 3976, type: !1134)
!12328 = !DILocation(line: 3976, column: 25, scope: !12318)
!12329 = !DILocalVariable(name: "type", scope: !12318, file: !3, line: 3976, type: !1134)
!12330 = !DILocation(line: 3976, column: 33, scope: !12318)
!12331 = !DILocalVariable(name: "pow2div", scope: !12318, file: !3, line: 3977, type: !1134)
!12332 = !DILocation(line: 3977, column: 8, scope: !12318)
!12333 = !DILocation(line: 3979, column: 3, scope: !12318)
!12334 = !DILocation(line: 3984, column: 31, scope: !12318)
!12335 = !DILocation(line: 3984, column: 13, scope: !12318)
!12336 = !DILocation(line: 3984, column: 11, scope: !12318)
!12337 = !DILocation(line: 3985, column: 29, scope: !12318)
!12338 = !DILocation(line: 3985, column: 10, scope: !12318)
!12339 = !DILocation(line: 3985, column: 8, scope: !12318)
!12340 = !DILocation(line: 3987, column: 33, scope: !12318)
!12341 = !DILocation(line: 3988, column: 6, scope: !12318)
!12342 = !DILocation(line: 3989, column: 22, scope: !12318)
!12343 = !DILocation(line: 3989, column: 8, scope: !12318)
!12344 = !DILocation(line: 3989, column: 6, scope: !12318)
!12345 = !DILocation(line: 3988, column: 5, scope: !12318)
!12346 = !DILocation(line: 3987, column: 12, scope: !12318)
!12347 = !DILocation(line: 3987, column: 10, scope: !12318)
!12348 = !DILocation(line: 3991, column: 10, scope: !12318)
!12349 = !DILocation(line: 3991, column: 3, scope: !12318)
!12350 = distinct !DISubprogram(name: "cand_value_at", scope: !3, file: !3, line: 3950, type: !12351, scopeLine: 3952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12351 = !DISubroutineType(types: !12352)
!12352 = !{null, !1651, !2472, !1436, !1134, !12353}
!12353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9656, size: 64)
!12354 = !DILocalVariable(name: "loop", arg: 1, scope: !12350, file: !3, line: 3950, type: !1651)
!12355 = !DILocation(line: 3950, column: 29, scope: !12350)
!12356 = !DILocalVariable(name: "cand", arg: 2, scope: !12350, file: !3, line: 3950, type: !2472)
!12357 = !DILocation(line: 3950, column: 51, scope: !12350)
!12358 = !DILocalVariable(name: "at", arg: 3, scope: !12350, file: !3, line: 3950, type: !1436)
!12359 = !DILocation(line: 3950, column: 64, scope: !12350)
!12360 = !DILocalVariable(name: "niter", arg: 4, scope: !12350, file: !3, line: 3950, type: !1134)
!12361 = !DILocation(line: 3950, column: 73, scope: !12350)
!12362 = !DILocalVariable(name: "val", arg: 5, scope: !12350, file: !3, line: 3951, type: !12353)
!12363 = !DILocation(line: 3951, column: 19, scope: !12350)
!12364 = !DILocalVariable(name: "step", scope: !12350, file: !3, line: 3953, type: !9656)
!12365 = !DILocation(line: 3953, column: 12, scope: !12350)
!12366 = !DILocalVariable(name: "delta", scope: !12350, file: !3, line: 3953, type: !9656)
!12367 = !DILocation(line: 3953, column: 18, scope: !12350)
!12368 = !DILocalVariable(name: "nit", scope: !12350, file: !3, line: 3953, type: !9656)
!12369 = !DILocation(line: 3953, column: 25, scope: !12350)
!12370 = !DILocalVariable(name: "iv", scope: !12350, file: !3, line: 3954, type: !2431)
!12371 = !DILocation(line: 3954, column: 14, scope: !12350)
!12372 = !DILocation(line: 3954, column: 19, scope: !12350)
!12373 = !DILocation(line: 3954, column: 25, scope: !12350)
!12374 = !DILocalVariable(name: "type", scope: !12350, file: !3, line: 3955, type: !1134)
!12375 = !DILocation(line: 3955, column: 8, scope: !12350)
!12376 = !DILocation(line: 3955, column: 15, scope: !12350)
!12377 = !DILocalVariable(name: "steptype", scope: !12350, file: !3, line: 3956, type: !1134)
!12378 = !DILocation(line: 3956, column: 8, scope: !12350)
!12379 = !DILocation(line: 3956, column: 19, scope: !12350)
!12380 = !DILocation(line: 3957, column: 7, scope: !12381)
!12381 = distinct !DILexicalBlock(scope: !12350, file: !3, line: 3957, column: 7)
!12382 = !DILocation(line: 3957, column: 7, scope: !12350)
!12383 = !DILocation(line: 3958, column: 16, scope: !12381)
!12384 = !DILocation(line: 3958, column: 14, scope: !12381)
!12385 = !DILocation(line: 3958, column: 5, scope: !12381)
!12386 = !DILocation(line: 3960, column: 28, scope: !12350)
!12387 = !DILocation(line: 3960, column: 32, scope: !12350)
!12388 = !DILocation(line: 3960, column: 38, scope: !12350)
!12389 = !DILocation(line: 3960, column: 3, scope: !12350)
!12390 = !DILocation(line: 3961, column: 28, scope: !12350)
!12391 = !DILocation(line: 3961, column: 35, scope: !12350)
!12392 = !DILocation(line: 3961, column: 3, scope: !12350)
!12393 = !DILocation(line: 3962, column: 34, scope: !12350)
!12394 = !DILocation(line: 3962, column: 3, scope: !12350)
!12395 = !DILocation(line: 3963, column: 3, scope: !12350)
!12396 = !DILocation(line: 3964, column: 29, scope: !12397)
!12397 = distinct !DILexicalBlock(scope: !12350, file: !3, line: 3964, column: 7)
!12398 = !DILocation(line: 3964, column: 35, scope: !12397)
!12399 = !DILocation(line: 3964, column: 41, scope: !12397)
!12400 = !DILocation(line: 3964, column: 7, scope: !12397)
!12401 = !DILocation(line: 3964, column: 7, scope: !12350)
!12402 = !DILocation(line: 3965, column: 5, scope: !12397)
!12403 = !DILocation(line: 3967, column: 28, scope: !12350)
!12404 = !DILocation(line: 3967, column: 32, scope: !12350)
!12405 = !DILocation(line: 3967, column: 38, scope: !12350)
!12406 = !DILocation(line: 3967, column: 44, scope: !12350)
!12407 = !DILocation(line: 3967, column: 3, scope: !12350)
!12408 = !DILocation(line: 3968, column: 24, scope: !12350)
!12409 = !DILocation(line: 3968, column: 3, scope: !12350)
!12410 = !DILocation(line: 3969, column: 1, scope: !12350)
!12411 = distinct !DISubprogram(name: "ivopts_global_cost_for_size", scope: !3, file: !3, line: 4409, type: !12412, scopeLine: 4410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12412 = !DISubroutineType(types: !12413)
!12413 = !{!6, !2530, !6}
!12414 = !DILocalVariable(name: "data", arg: 1, scope: !12411, file: !3, line: 4409, type: !2530)
!12415 = !DILocation(line: 4409, column: 50, scope: !12411)
!12416 = !DILocalVariable(name: "size", arg: 2, scope: !12411, file: !3, line: 4409, type: !6)
!12417 = !DILocation(line: 4409, column: 65, scope: !12411)
!12418 = !DILocation(line: 4413, column: 10, scope: !12411)
!12419 = !DILocation(line: 4413, column: 45, scope: !12411)
!12420 = !DILocation(line: 4413, column: 51, scope: !12411)
!12421 = !DILocation(line: 4413, column: 57, scope: !12411)
!12422 = !DILocation(line: 4413, column: 68, scope: !12411)
!12423 = !DILocation(line: 4413, column: 74, scope: !12411)
!12424 = !DILocation(line: 4413, column: 17, scope: !12411)
!12425 = !DILocation(line: 4413, column: 15, scope: !12411)
!12426 = !DILocation(line: 4413, column: 3, scope: !12411)
!12427 = distinct !DISubprogram(name: "get_initial_solution", scope: !3, file: !3, line: 5177, type: !4896, scopeLine: 5178, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12428 = !DILocalVariable(name: "data", arg: 1, scope: !12427, file: !3, line: 5177, type: !2530)
!12429 = !DILocation(line: 5177, column: 43, scope: !12427)
!12430 = !DILocalVariable(name: "ivs", scope: !12427, file: !3, line: 5179, type: !2576)
!12431 = !DILocation(line: 5179, column: 17, scope: !12427)
!12432 = !DILocation(line: 5179, column: 34, scope: !12427)
!12433 = !DILocation(line: 5179, column: 23, scope: !12427)
!12434 = !DILocalVariable(name: "i", scope: !12427, file: !3, line: 5180, type: !6)
!12435 = !DILocation(line: 5180, column: 12, scope: !12427)
!12436 = !DILocation(line: 5182, column: 10, scope: !12437)
!12437 = distinct !DILexicalBlock(scope: !12427, file: !3, line: 5182, column: 3)
!12438 = !DILocation(line: 5182, column: 8, scope: !12437)
!12439 = !DILocation(line: 5182, column: 15, scope: !12440)
!12440 = distinct !DILexicalBlock(scope: !12437, file: !3, line: 5182, column: 3)
!12441 = !DILocation(line: 5182, column: 30, scope: !12440)
!12442 = !DILocation(line: 5182, column: 19, scope: !12440)
!12443 = !DILocation(line: 5182, column: 17, scope: !12440)
!12444 = !DILocation(line: 5182, column: 3, scope: !12437)
!12445 = !DILocation(line: 5183, column: 28, scope: !12446)
!12446 = distinct !DILexicalBlock(scope: !12440, file: !3, line: 5183, column: 9)
!12447 = !DILocation(line: 5183, column: 34, scope: !12446)
!12448 = !DILocation(line: 5183, column: 47, scope: !12446)
!12449 = !DILocation(line: 5183, column: 53, scope: !12446)
!12450 = !DILocation(line: 5183, column: 39, scope: !12446)
!12451 = !DILocation(line: 5183, column: 10, scope: !12446)
!12452 = !DILocation(line: 5183, column: 9, scope: !12440)
!12453 = !DILocation(line: 5185, column: 2, scope: !12454)
!12454 = distinct !DILexicalBlock(scope: !12446, file: !3, line: 5184, column: 7)
!12455 = !DILocation(line: 5186, column: 2, scope: !12454)
!12456 = !DILocation(line: 5183, column: 55, scope: !12446)
!12457 = !DILocation(line: 5182, column: 38, scope: !12440)
!12458 = !DILocation(line: 5182, column: 3, scope: !12440)
!12459 = distinct !{!12459, !12444, !12460}
!12460 = !DILocation(line: 5187, column: 7, scope: !12437)
!12461 = !DILocation(line: 5189, column: 10, scope: !12427)
!12462 = !DILocation(line: 5189, column: 3, scope: !12427)
!12463 = !DILocation(line: 5190, column: 1, scope: !12427)
!12464 = distinct !DISubprogram(name: "iv_ca_dump", scope: !3, file: !3, line: 4872, type: !12465, scopeLine: 4873, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12465 = !DISubroutineType(types: !12466)
!12466 = !{null, !2530, !2688, !2576}
!12467 = !DILocalVariable(name: "data", arg: 1, scope: !12464, file: !3, line: 4872, type: !2530)
!12468 = !DILocation(line: 4872, column: 33, scope: !12464)
!12469 = !DILocalVariable(name: "file", arg: 2, scope: !12464, file: !3, line: 4872, type: !2688)
!12470 = !DILocation(line: 4872, column: 45, scope: !12464)
!12471 = !DILocalVariable(name: "ivs", arg: 3, scope: !12464, file: !3, line: 4872, type: !2576)
!12472 = !DILocation(line: 4872, column: 65, scope: !12464)
!12473 = !DILocalVariable(name: "pref", scope: !12464, file: !3, line: 4874, type: !1041)
!12474 = !DILocation(line: 4874, column: 15, scope: !12464)
!12475 = !DILocalVariable(name: "i", scope: !12464, file: !3, line: 4875, type: !6)
!12476 = !DILocation(line: 4875, column: 12, scope: !12464)
!12477 = !DILocalVariable(name: "cost", scope: !12464, file: !3, line: 4876, type: !2487)
!12478 = !DILocation(line: 4876, column: 13, scope: !12464)
!12479 = !DILocation(line: 4876, column: 32, scope: !12464)
!12480 = !DILocation(line: 4876, column: 20, scope: !12464)
!12481 = !DILocation(line: 4878, column: 12, scope: !12464)
!12482 = !DILocation(line: 4878, column: 54, scope: !12464)
!12483 = !DILocation(line: 4878, column: 65, scope: !12464)
!12484 = !DILocation(line: 4878, column: 3, scope: !12464)
!12485 = !DILocation(line: 4879, column: 17, scope: !12464)
!12486 = !DILocation(line: 4879, column: 23, scope: !12464)
!12487 = !DILocation(line: 4879, column: 28, scope: !12464)
!12488 = !DILocation(line: 4879, column: 3, scope: !12464)
!12489 = !DILocation(line: 4881, column: 10, scope: !12490)
!12490 = distinct !DILexicalBlock(scope: !12464, file: !3, line: 4881, column: 3)
!12491 = !DILocation(line: 4881, column: 8, scope: !12490)
!12492 = !DILocation(line: 4881, column: 15, scope: !12493)
!12493 = distinct !DILexicalBlock(scope: !12490, file: !3, line: 4881, column: 3)
!12494 = !DILocation(line: 4881, column: 20, scope: !12493)
!12495 = !DILocation(line: 4881, column: 26, scope: !12493)
!12496 = !DILocation(line: 4881, column: 17, scope: !12493)
!12497 = !DILocation(line: 4881, column: 3, scope: !12490)
!12498 = !DILocation(line: 4882, column: 9, scope: !12499)
!12499 = distinct !DILexicalBlock(scope: !12493, file: !3, line: 4882, column: 9)
!12500 = !DILocation(line: 4882, column: 14, scope: !12499)
!12501 = !DILocation(line: 4882, column: 31, scope: !12499)
!12502 = !DILocation(line: 4882, column: 9, scope: !12493)
!12503 = !DILocation(line: 4884, column: 11, scope: !12504)
!12504 = distinct !DILexicalBlock(scope: !12499, file: !3, line: 4883, column: 7)
!12505 = !DILocation(line: 4884, column: 25, scope: !12504)
!12506 = !DILocation(line: 4884, column: 31, scope: !12504)
!12507 = !DILocation(line: 4884, column: 2, scope: !12504)
!12508 = !DILocation(line: 4885, column: 7, scope: !12504)
!12509 = !DILocation(line: 4886, column: 7, scope: !12504)
!12510 = !DILocation(line: 4882, column: 32, scope: !12499)
!12511 = !DILocation(line: 4881, column: 39, scope: !12493)
!12512 = !DILocation(line: 4881, column: 3, scope: !12493)
!12513 = distinct !{!12513, !12497, !12514}
!12514 = !DILocation(line: 4886, column: 7, scope: !12490)
!12515 = !DILocation(line: 4887, column: 12, scope: !12464)
!12516 = !DILocation(line: 4887, column: 3, scope: !12464)
!12517 = !DILocation(line: 4888, column: 1, scope: !12464)
!12518 = distinct !DISubprogram(name: "try_improve_iv_set", scope: !3, file: !3, line: 5195, type: !12519, scopeLine: 5196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12519 = !DISubroutineType(types: !12520)
!12520 = !{!136, !2530, !2576}
!12521 = !DILocalVariable(name: "data", arg: 1, scope: !12518, file: !3, line: 5195, type: !2530)
!12522 = !DILocation(line: 5195, column: 41, scope: !12518)
!12523 = !DILocalVariable(name: "ivs", arg: 2, scope: !12518, file: !3, line: 5195, type: !2576)
!12524 = !DILocation(line: 5195, column: 61, scope: !12518)
!12525 = !DILocalVariable(name: "i", scope: !12518, file: !3, line: 5197, type: !6)
!12526 = !DILocation(line: 5197, column: 12, scope: !12518)
!12527 = !DILocalVariable(name: "n_ivs", scope: !12518, file: !3, line: 5197, type: !6)
!12528 = !DILocation(line: 5197, column: 15, scope: !12518)
!12529 = !DILocalVariable(name: "acost", scope: !12518, file: !3, line: 5198, type: !2487)
!12530 = !DILocation(line: 5198, column: 13, scope: !12518)
!12531 = !DILocalVariable(name: "best_cost", scope: !12518, file: !3, line: 5198, type: !2487)
!12532 = !DILocation(line: 5198, column: 20, scope: !12518)
!12533 = !DILocation(line: 5198, column: 44, scope: !12518)
!12534 = !DILocation(line: 5198, column: 32, scope: !12518)
!12535 = !DILocalVariable(name: "best_delta", scope: !12518, file: !3, line: 5199, type: !2592)
!12536 = !DILocation(line: 5199, column: 23, scope: !12518)
!12537 = !DILocalVariable(name: "act_delta", scope: !12518, file: !3, line: 5199, type: !2592)
!12538 = !DILocation(line: 5199, column: 43, scope: !12518)
!12539 = !DILocalVariable(name: "tmp_delta", scope: !12518, file: !3, line: 5199, type: !2592)
!12540 = !DILocation(line: 5199, column: 55, scope: !12518)
!12541 = !DILocalVariable(name: "cand", scope: !12518, file: !3, line: 5200, type: !2472)
!12542 = !DILocation(line: 5200, column: 19, scope: !12518)
!12543 = !DILocation(line: 5203, column: 10, scope: !12544)
!12544 = distinct !DILexicalBlock(scope: !12518, file: !3, line: 5203, column: 3)
!12545 = !DILocation(line: 5203, column: 8, scope: !12544)
!12546 = !DILocation(line: 5203, column: 15, scope: !12547)
!12547 = distinct !DILexicalBlock(scope: !12544, file: !3, line: 5203, column: 3)
!12548 = !DILocation(line: 5203, column: 31, scope: !12547)
!12549 = !DILocation(line: 5203, column: 19, scope: !12547)
!12550 = !DILocation(line: 5203, column: 17, scope: !12547)
!12551 = !DILocation(line: 5203, column: 3, scope: !12544)
!12552 = !DILocation(line: 5205, column: 23, scope: !12553)
!12553 = distinct !DILexicalBlock(scope: !12547, file: !3, line: 5204, column: 5)
!12554 = !DILocation(line: 5205, column: 29, scope: !12553)
!12555 = !DILocation(line: 5205, column: 14, scope: !12553)
!12556 = !DILocation(line: 5205, column: 12, scope: !12553)
!12557 = !DILocation(line: 5207, column: 30, scope: !12558)
!12558 = distinct !DILexicalBlock(scope: !12553, file: !3, line: 5207, column: 11)
!12559 = !DILocation(line: 5207, column: 35, scope: !12558)
!12560 = !DILocation(line: 5207, column: 11, scope: !12558)
!12561 = !DILocation(line: 5207, column: 11, scope: !12553)
!12562 = !DILocation(line: 5208, column: 2, scope: !12558)
!12563 = !DILocation(line: 5210, column: 29, scope: !12553)
!12564 = !DILocation(line: 5210, column: 35, scope: !12553)
!12565 = !DILocation(line: 5210, column: 40, scope: !12553)
!12566 = !DILocation(line: 5210, column: 15, scope: !12553)
!12567 = !DILocation(line: 5211, column: 12, scope: !12568)
!12568 = distinct !DILexicalBlock(scope: !12553, file: !3, line: 5211, column: 11)
!12569 = !DILocation(line: 5211, column: 11, scope: !12553)
!12570 = !DILocation(line: 5212, column: 2, scope: !12568)
!12571 = !DILocation(line: 5216, column: 11, scope: !12572)
!12572 = distinct !DILexicalBlock(scope: !12553, file: !3, line: 5216, column: 11)
!12573 = !DILocation(line: 5216, column: 20, scope: !12572)
!12574 = !DILocation(line: 5216, column: 17, scope: !12572)
!12575 = !DILocation(line: 5216, column: 11, scope: !12553)
!12576 = !DILocation(line: 5218, column: 24, scope: !12577)
!12577 = distinct !DILexicalBlock(scope: !12572, file: !3, line: 5217, column: 8)
!12578 = !DILocation(line: 5218, column: 30, scope: !12577)
!12579 = !DILocation(line: 5218, column: 35, scope: !12577)
!12580 = !DILocation(line: 5218, column: 4, scope: !12577)
!12581 = !DILocation(line: 5219, column: 25, scope: !12577)
!12582 = !DILocation(line: 5219, column: 31, scope: !12577)
!12583 = !DILocation(line: 5219, column: 36, scope: !12577)
!12584 = !DILocation(line: 5219, column: 12, scope: !12577)
!12585 = !DILocation(line: 5220, column: 24, scope: !12577)
!12586 = !DILocation(line: 5220, column: 30, scope: !12577)
!12587 = !DILocation(line: 5220, column: 35, scope: !12577)
!12588 = !DILocation(line: 5220, column: 4, scope: !12577)
!12589 = !DILocation(line: 5221, column: 34, scope: !12577)
!12590 = !DILocation(line: 5221, column: 45, scope: !12577)
!12591 = !DILocation(line: 5221, column: 16, scope: !12577)
!12592 = !DILocation(line: 5221, column: 14, scope: !12577)
!12593 = !DILocation(line: 5222, column: 2, scope: !12577)
!12594 = !DILocation(line: 5224, column: 11, scope: !12595)
!12595 = distinct !DILexicalBlock(scope: !12553, file: !3, line: 5224, column: 11)
!12596 = !DILocation(line: 5224, column: 44, scope: !12595)
!12597 = !DILocation(line: 5224, column: 11, scope: !12553)
!12598 = !DILocation(line: 5226, column: 16, scope: !12599)
!12599 = distinct !DILexicalBlock(scope: !12595, file: !3, line: 5225, column: 2)
!12600 = !DILocation(line: 5227, column: 4, scope: !12599)
!12601 = !DILocation(line: 5228, column: 17, scope: !12599)
!12602 = !DILocation(line: 5228, column: 15, scope: !12599)
!12603 = !DILocation(line: 5229, column: 2, scope: !12599)
!12604 = !DILocation(line: 5231, column: 2, scope: !12595)
!12605 = !DILocation(line: 5232, column: 5, scope: !12553)
!12606 = !DILocation(line: 5203, column: 39, scope: !12547)
!12607 = !DILocation(line: 5203, column: 3, scope: !12547)
!12608 = distinct !{!12608, !12551, !12609}
!12609 = !DILocation(line: 5232, column: 5, scope: !12544)
!12610 = !DILocation(line: 5234, column: 8, scope: !12611)
!12611 = distinct !DILexicalBlock(scope: !12518, file: !3, line: 5234, column: 7)
!12612 = !DILocation(line: 5234, column: 7, scope: !12518)
!12613 = !DILocation(line: 5237, column: 32, scope: !12614)
!12614 = distinct !DILexicalBlock(scope: !12611, file: !3, line: 5235, column: 5)
!12615 = !DILocation(line: 5237, column: 38, scope: !12614)
!12616 = !DILocation(line: 5237, column: 19, scope: !12614)
!12617 = !DILocation(line: 5240, column: 12, scope: !12618)
!12618 = distinct !DILexicalBlock(scope: !12614, file: !3, line: 5240, column: 11)
!12619 = !DILocation(line: 5240, column: 11, scope: !12614)
!12620 = !DILocation(line: 5241, column: 2, scope: !12618)
!12621 = !DILocation(line: 5242, column: 5, scope: !12614)
!12622 = !DILocation(line: 5244, column: 23, scope: !12518)
!12623 = !DILocation(line: 5244, column: 29, scope: !12518)
!12624 = !DILocation(line: 5244, column: 34, scope: !12518)
!12625 = !DILocation(line: 5244, column: 3, scope: !12518)
!12626 = !DILocation(line: 5245, column: 3, scope: !12518)
!12627 = !DILocation(line: 5246, column: 3, scope: !12518)
!12628 = !DILocation(line: 5247, column: 3, scope: !12518)
!12629 = !DILocation(line: 5248, column: 1, scope: !12518)
!12630 = distinct !DISubprogram(name: "iv_ca_cost", scope: !3, file: !3, line: 4679, type: !12631, scopeLine: 4680, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12631 = !DISubroutineType(types: !12632)
!12632 = !{!2487, !2576}
!12633 = !DILocalVariable(name: "ivs", arg: 1, scope: !12630, file: !3, line: 4679, type: !2576)
!12634 = !DILocation(line: 4679, column: 27, scope: !12630)
!12635 = !DILocation(line: 4683, column: 7, scope: !12636)
!12636 = distinct !DILexicalBlock(scope: !12630, file: !3, line: 4683, column: 7)
!12637 = !DILocation(line: 4683, column: 12, scope: !12636)
!12638 = !DILocation(line: 4683, column: 7, scope: !12630)
!12639 = !DILocation(line: 4684, column: 12, scope: !12636)
!12640 = !DILocation(line: 4684, column: 5, scope: !12636)
!12641 = !DILocation(line: 4686, column: 12, scope: !12636)
!12642 = !DILocation(line: 4686, column: 17, scope: !12636)
!12643 = !DILocation(line: 4686, column: 5, scope: !12636)
!12644 = !DILocation(line: 4687, column: 1, scope: !12630)
!12645 = distinct !DISubprogram(name: "iv_ca_cand_for_use", scope: !3, file: !3, line: 4750, type: !12646, scopeLine: 4751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12646 = !DISubroutineType(types: !12647)
!12647 = !{!2468, !2576, !2457}
!12648 = !DILocalVariable(name: "ivs", arg: 1, scope: !12645, file: !3, line: 4750, type: !2576)
!12649 = !DILocation(line: 4750, column: 35, scope: !12645)
!12650 = !DILocalVariable(name: "use", arg: 2, scope: !12645, file: !3, line: 4750, type: !2457)
!12651 = !DILocation(line: 4750, column: 55, scope: !12645)
!12652 = !DILocation(line: 4752, column: 10, scope: !12645)
!12653 = !DILocation(line: 4752, column: 15, scope: !12645)
!12654 = !DILocation(line: 4752, column: 28, scope: !12645)
!12655 = !DILocation(line: 4752, column: 33, scope: !12645)
!12656 = !DILocation(line: 4752, column: 3, scope: !12645)
!12657 = distinct !DISubprogram(name: "iv_ca_new", scope: !3, file: !3, line: 4837, type: !4896, scopeLine: 4838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12658 = !DILocalVariable(name: "data", arg: 1, scope: !12657, file: !3, line: 4837, type: !2530)
!12659 = !DILocation(line: 4837, column: 32, scope: !12657)
!12660 = !DILocalVariable(name: "nw", scope: !12657, file: !3, line: 4839, type: !2576)
!12661 = !DILocation(line: 4839, column: 17, scope: !12657)
!12662 = !DILocation(line: 4839, column: 22, scope: !12657)
!12663 = !DILocation(line: 4841, column: 3, scope: !12657)
!12664 = !DILocation(line: 4841, column: 7, scope: !12657)
!12665 = !DILocation(line: 4841, column: 12, scope: !12657)
!12666 = !DILocation(line: 4842, column: 3, scope: !12657)
!12667 = !DILocation(line: 4842, column: 7, scope: !12657)
!12668 = !DILocation(line: 4842, column: 16, scope: !12657)
!12669 = !DILocation(line: 4843, column: 22, scope: !12657)
!12670 = !DILocation(line: 4843, column: 3, scope: !12657)
!12671 = !DILocation(line: 4843, column: 7, scope: !12657)
!12672 = !DILocation(line: 4843, column: 20, scope: !12657)
!12673 = !DILocation(line: 4844, column: 21, scope: !12657)
!12674 = !DILocation(line: 4844, column: 3, scope: !12657)
!12675 = !DILocation(line: 4844, column: 7, scope: !12657)
!12676 = !DILocation(line: 4844, column: 19, scope: !12657)
!12677 = !DILocation(line: 4845, column: 15, scope: !12657)
!12678 = !DILocation(line: 4845, column: 3, scope: !12657)
!12679 = !DILocation(line: 4845, column: 7, scope: !12657)
!12680 = !DILocation(line: 4845, column: 13, scope: !12657)
!12681 = !DILocation(line: 4846, column: 3, scope: !12657)
!12682 = !DILocation(line: 4846, column: 7, scope: !12657)
!12683 = !DILocation(line: 4846, column: 15, scope: !12657)
!12684 = !DILocation(line: 4847, column: 3, scope: !12657)
!12685 = !DILocation(line: 4847, column: 7, scope: !12657)
!12686 = !DILocation(line: 4847, column: 14, scope: !12657)
!12687 = !DILocation(line: 4848, column: 3, scope: !12657)
!12688 = !DILocation(line: 4848, column: 7, scope: !12657)
!12689 = !DILocation(line: 4848, column: 23, scope: !12657)
!12690 = !DILocation(line: 4849, column: 3, scope: !12657)
!12691 = !DILocation(line: 4849, column: 7, scope: !12657)
!12692 = !DILocation(line: 4849, column: 17, scope: !12657)
!12693 = !DILocation(line: 4850, column: 26, scope: !12657)
!12694 = !DILocation(line: 4850, column: 3, scope: !12657)
!12695 = !DILocation(line: 4850, column: 7, scope: !12657)
!12696 = !DILocation(line: 4850, column: 24, scope: !12657)
!12697 = !DILocation(line: 4851, column: 3, scope: !12657)
!12698 = !DILocation(line: 4851, column: 7, scope: !12657)
!12699 = !DILocation(line: 4851, column: 14, scope: !12657)
!12700 = !DILocation(line: 4853, column: 10, scope: !12657)
!12701 = !DILocation(line: 4853, column: 3, scope: !12657)
!12702 = distinct !DISubprogram(name: "try_add_cand_for", scope: !3, file: !3, line: 5074, type: !12703, scopeLine: 5076, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12703 = !DISubroutineType(types: !12704)
!12704 = !{!136, !2530, !2576, !2457}
!12705 = !DILocalVariable(name: "data", arg: 1, scope: !12702, file: !3, line: 5074, type: !2530)
!12706 = !DILocation(line: 5074, column: 39, scope: !12702)
!12707 = !DILocalVariable(name: "ivs", arg: 2, scope: !12702, file: !3, line: 5074, type: !2576)
!12708 = !DILocation(line: 5074, column: 59, scope: !12702)
!12709 = !DILocalVariable(name: "use", arg: 3, scope: !12702, file: !3, line: 5075, type: !2457)
!12710 = !DILocation(line: 5075, column: 20, scope: !12702)
!12711 = !DILocalVariable(name: "best_cost", scope: !12702, file: !3, line: 5077, type: !2487)
!12712 = !DILocation(line: 5077, column: 13, scope: !12702)
!12713 = !DILocalVariable(name: "act_cost", scope: !12702, file: !3, line: 5077, type: !2487)
!12714 = !DILocation(line: 5077, column: 24, scope: !12702)
!12715 = !DILocalVariable(name: "i", scope: !12702, file: !3, line: 5078, type: !6)
!12716 = !DILocation(line: 5078, column: 12, scope: !12702)
!12717 = !DILocalVariable(name: "bi", scope: !12702, file: !3, line: 5079, type: !4257)
!12718 = !DILocation(line: 5079, column: 19, scope: !12702)
!12719 = !DILocalVariable(name: "cand", scope: !12702, file: !3, line: 5080, type: !2472)
!12720 = !DILocation(line: 5080, column: 19, scope: !12702)
!12721 = !DILocalVariable(name: "best_delta", scope: !12702, file: !3, line: 5081, type: !2592)
!12722 = !DILocation(line: 5081, column: 23, scope: !12702)
!12723 = !DILocalVariable(name: "act_delta", scope: !12702, file: !3, line: 5081, type: !2592)
!12724 = !DILocation(line: 5081, column: 43, scope: !12702)
!12725 = !DILocalVariable(name: "cp", scope: !12702, file: !3, line: 5082, type: !2468)
!12726 = !DILocation(line: 5082, column: 21, scope: !12702)
!12727 = !DILocation(line: 5084, column: 18, scope: !12702)
!12728 = !DILocation(line: 5084, column: 24, scope: !12702)
!12729 = !DILocation(line: 5084, column: 29, scope: !12702)
!12730 = !DILocation(line: 5084, column: 3, scope: !12702)
!12731 = !DILocation(line: 5085, column: 27, scope: !12702)
!12732 = !DILocation(line: 5085, column: 15, scope: !12702)
!12733 = !DILocation(line: 5087, column: 28, scope: !12702)
!12734 = !DILocation(line: 5087, column: 33, scope: !12702)
!12735 = !DILocation(line: 5087, column: 8, scope: !12702)
!12736 = !DILocation(line: 5087, column: 6, scope: !12702)
!12737 = !DILocation(line: 5088, column: 7, scope: !12738)
!12738 = distinct !DILexicalBlock(scope: !12702, file: !3, line: 5088, column: 7)
!12739 = !DILocation(line: 5088, column: 7, scope: !12702)
!12740 = !DILocation(line: 5090, column: 37, scope: !12741)
!12741 = distinct !DILexicalBlock(scope: !12738, file: !3, line: 5089, column: 5)
!12742 = !DILocation(line: 5090, column: 48, scope: !12741)
!12743 = !DILocation(line: 5090, column: 20, scope: !12741)
!12744 = !DILocation(line: 5090, column: 18, scope: !12741)
!12745 = !DILocation(line: 5091, column: 24, scope: !12741)
!12746 = !DILocation(line: 5091, column: 30, scope: !12741)
!12747 = !DILocation(line: 5091, column: 35, scope: !12741)
!12748 = !DILocation(line: 5091, column: 7, scope: !12741)
!12749 = !DILocation(line: 5092, column: 5, scope: !12741)
!12750 = !DILocation(line: 5102, column: 3, scope: !12751)
!12751 = distinct !DILexicalBlock(scope: !12702, file: !3, line: 5102, column: 3)
!12752 = !DILocation(line: 5102, column: 3, scope: !12753)
!12753 = distinct !DILexicalBlock(scope: !12751, file: !3, line: 5102, column: 3)
!12754 = !DILocation(line: 5104, column: 23, scope: !12755)
!12755 = distinct !DILexicalBlock(scope: !12753, file: !3, line: 5103, column: 5)
!12756 = !DILocation(line: 5104, column: 29, scope: !12755)
!12757 = !DILocation(line: 5104, column: 14, scope: !12755)
!12758 = !DILocation(line: 5104, column: 12, scope: !12755)
!12759 = !DILocation(line: 5106, column: 11, scope: !12760)
!12760 = distinct !DILexicalBlock(scope: !12755, file: !3, line: 5106, column: 11)
!12761 = !DILocation(line: 5106, column: 17, scope: !12760)
!12762 = !DILocation(line: 5106, column: 21, scope: !12760)
!12763 = !DILocation(line: 5106, column: 33, scope: !12760)
!12764 = !DILocation(line: 5106, column: 11, scope: !12755)
!12765 = !DILocation(line: 5107, column: 2, scope: !12760)
!12766 = !DILocation(line: 5109, column: 30, scope: !12767)
!12767 = distinct !DILexicalBlock(scope: !12755, file: !3, line: 5109, column: 11)
!12768 = !DILocation(line: 5109, column: 35, scope: !12767)
!12769 = !DILocation(line: 5109, column: 11, scope: !12767)
!12770 = !DILocation(line: 5109, column: 11, scope: !12755)
!12771 = !DILocation(line: 5110, column: 2, scope: !12767)
!12772 = !DILocation(line: 5112, column: 29, scope: !12755)
!12773 = !DILocation(line: 5112, column: 35, scope: !12755)
!12774 = !DILocation(line: 5112, column: 40, scope: !12755)
!12775 = !DILocation(line: 5112, column: 12, scope: !12755)
!12776 = !DILocation(line: 5112, column: 10, scope: !12755)
!12777 = !DILocation(line: 5113, column: 12, scope: !12778)
!12778 = distinct !DILexicalBlock(scope: !12755, file: !3, line: 5113, column: 11)
!12779 = !DILocation(line: 5113, column: 11, scope: !12755)
!12780 = !DILocation(line: 5114, column: 2, scope: !12778)
!12781 = !DILocation(line: 5116, column: 21, scope: !12755)
!12782 = !DILocation(line: 5116, column: 27, scope: !12755)
!12783 = !DILocation(line: 5116, column: 32, scope: !12755)
!12784 = !DILocation(line: 5116, column: 37, scope: !12755)
!12785 = !DILocation(line: 5116, column: 7, scope: !12755)
!12786 = !DILocation(line: 5117, column: 32, scope: !12755)
!12787 = !DILocation(line: 5117, column: 38, scope: !12755)
!12788 = !DILocation(line: 5117, column: 43, scope: !12755)
!12789 = !DILocation(line: 5117, column: 18, scope: !12755)
!12790 = !DILocation(line: 5118, column: 24, scope: !12755)
!12791 = !DILocation(line: 5118, column: 30, scope: !12755)
!12792 = !DILocation(line: 5118, column: 35, scope: !12755)
!12793 = !DILocation(line: 5118, column: 7, scope: !12755)
!12794 = !DILocation(line: 5119, column: 36, scope: !12755)
!12795 = !DILocation(line: 5119, column: 47, scope: !12755)
!12796 = !DILocation(line: 5119, column: 51, scope: !12755)
!12797 = !DILocation(line: 5119, column: 19, scope: !12755)
!12798 = !DILocation(line: 5119, column: 17, scope: !12755)
!12799 = !DILocation(line: 5121, column: 11, scope: !12800)
!12800 = distinct !DILexicalBlock(scope: !12755, file: !3, line: 5121, column: 11)
!12801 = !DILocation(line: 5121, column: 47, scope: !12800)
!12802 = !DILocation(line: 5121, column: 11, scope: !12755)
!12803 = !DILocation(line: 5123, column: 16, scope: !12804)
!12804 = distinct !DILexicalBlock(scope: !12800, file: !3, line: 5122, column: 2)
!12805 = !DILocation(line: 5125, column: 4, scope: !12804)
!12806 = !DILocation(line: 5126, column: 17, scope: !12804)
!12807 = !DILocation(line: 5126, column: 15, scope: !12804)
!12808 = !DILocation(line: 5127, column: 2, scope: !12804)
!12809 = !DILocation(line: 5129, column: 2, scope: !12800)
!12810 = !DILocation(line: 5130, column: 5, scope: !12755)
!12811 = distinct !{!12811, !12750, !12812}
!12812 = !DILocation(line: 5130, column: 5, scope: !12751)
!12813 = !DILocation(line: 5132, column: 7, scope: !12814)
!12814 = distinct !DILexicalBlock(scope: !12702, file: !3, line: 5132, column: 7)
!12815 = !DILocation(line: 5132, column: 7, scope: !12702)
!12816 = !DILocation(line: 5134, column: 14, scope: !12817)
!12817 = distinct !DILexicalBlock(scope: !12818, file: !3, line: 5134, column: 7)
!12818 = distinct !DILexicalBlock(scope: !12814, file: !3, line: 5133, column: 5)
!12819 = !DILocation(line: 5134, column: 12, scope: !12817)
!12820 = !DILocation(line: 5134, column: 19, scope: !12821)
!12821 = distinct !DILexicalBlock(scope: !12817, file: !3, line: 5134, column: 7)
!12822 = !DILocation(line: 5134, column: 23, scope: !12821)
!12823 = !DILocation(line: 5134, column: 28, scope: !12821)
!12824 = !DILocation(line: 5134, column: 21, scope: !12821)
!12825 = !DILocation(line: 5134, column: 7, scope: !12817)
!12826 = !DILocation(line: 5136, column: 9, scope: !12827)
!12827 = distinct !DILexicalBlock(scope: !12821, file: !3, line: 5135, column: 2)
!12828 = !DILocation(line: 5136, column: 14, scope: !12827)
!12829 = !DILocation(line: 5136, column: 25, scope: !12827)
!12830 = !DILocation(line: 5136, column: 23, scope: !12827)
!12831 = !DILocation(line: 5136, column: 7, scope: !12827)
!12832 = !DILocation(line: 5137, column: 11, scope: !12827)
!12833 = !DILocation(line: 5137, column: 15, scope: !12827)
!12834 = !DILocation(line: 5137, column: 9, scope: !12827)
!12835 = !DILocation(line: 5138, column: 9, scope: !12836)
!12836 = distinct !DILexicalBlock(scope: !12827, file: !3, line: 5138, column: 8)
!12837 = !DILocation(line: 5138, column: 8, scope: !12827)
!12838 = !DILocation(line: 5139, column: 6, scope: !12836)
!12839 = !DILocation(line: 5142, column: 8, scope: !12840)
!12840 = distinct !DILexicalBlock(scope: !12827, file: !3, line: 5142, column: 8)
!12841 = !DILocation(line: 5142, column: 14, scope: !12840)
!12842 = !DILocation(line: 5142, column: 24, scope: !12840)
!12843 = !DILocation(line: 5142, column: 27, scope: !12840)
!12844 = !DILocation(line: 5142, column: 33, scope: !12840)
!12845 = !DILocation(line: 5142, column: 37, scope: !12840)
!12846 = !DILocation(line: 5142, column: 49, scope: !12840)
!12847 = !DILocation(line: 5142, column: 8, scope: !12827)
!12848 = !DILocation(line: 5143, column: 6, scope: !12840)
!12849 = !DILocation(line: 5145, column: 27, scope: !12850)
!12850 = distinct !DILexicalBlock(scope: !12827, file: !3, line: 5145, column: 8)
!12851 = !DILocation(line: 5145, column: 32, scope: !12850)
!12852 = !DILocation(line: 5145, column: 8, scope: !12850)
!12853 = !DILocation(line: 5145, column: 8, scope: !12827)
!12854 = !DILocation(line: 5146, column: 6, scope: !12850)
!12855 = !DILocation(line: 5148, column: 14, scope: !12827)
!12856 = !DILocation(line: 5149, column: 18, scope: !12827)
!12857 = !DILocation(line: 5149, column: 24, scope: !12827)
!12858 = !DILocation(line: 5149, column: 29, scope: !12827)
!12859 = !DILocation(line: 5149, column: 34, scope: !12827)
!12860 = !DILocation(line: 5149, column: 4, scope: !12827)
!12861 = !DILocation(line: 5150, column: 29, scope: !12827)
!12862 = !DILocation(line: 5150, column: 35, scope: !12827)
!12863 = !DILocation(line: 5150, column: 40, scope: !12827)
!12864 = !DILocation(line: 5150, column: 15, scope: !12827)
!12865 = !DILocation(line: 5151, column: 21, scope: !12827)
!12866 = !DILocation(line: 5151, column: 27, scope: !12827)
!12867 = !DILocation(line: 5151, column: 32, scope: !12827)
!12868 = !DILocation(line: 5151, column: 4, scope: !12827)
!12869 = !DILocation(line: 5152, column: 33, scope: !12827)
!12870 = !DILocation(line: 5152, column: 58, scope: !12827)
!12871 = !DILocation(line: 5152, column: 63, scope: !12827)
!12872 = !DILocation(line: 5152, column: 38, scope: !12827)
!12873 = !DILocation(line: 5153, column: 12, scope: !12827)
!12874 = !DILocation(line: 5153, column: 16, scope: !12827)
!12875 = !DILocation(line: 5152, column: 16, scope: !12827)
!12876 = !DILocation(line: 5152, column: 14, scope: !12827)
!12877 = !DILocation(line: 5155, column: 8, scope: !12878)
!12878 = distinct !DILexicalBlock(scope: !12827, file: !3, line: 5155, column: 8)
!12879 = !DILocation(line: 5155, column: 44, scope: !12878)
!12880 = !DILocation(line: 5155, column: 8, scope: !12827)
!12881 = !DILocation(line: 5157, column: 20, scope: !12882)
!12882 = distinct !DILexicalBlock(scope: !12878, file: !3, line: 5156, column: 6)
!12883 = !DILocation(line: 5159, column: 12, scope: !12884)
!12884 = distinct !DILexicalBlock(scope: !12882, file: !3, line: 5159, column: 12)
!12885 = !DILocation(line: 5159, column: 12, scope: !12882)
!12886 = !DILocation(line: 5160, column: 3, scope: !12884)
!12887 = !DILocation(line: 5161, column: 21, scope: !12882)
!12888 = !DILocation(line: 5161, column: 19, scope: !12882)
!12889 = !DILocation(line: 5162, column: 6, scope: !12882)
!12890 = !DILocation(line: 5164, column: 6, scope: !12878)
!12891 = !DILocation(line: 5165, column: 2, scope: !12827)
!12892 = !DILocation(line: 5134, column: 44, scope: !12821)
!12893 = !DILocation(line: 5134, column: 7, scope: !12821)
!12894 = distinct !{!12894, !12825, !12895}
!12895 = !DILocation(line: 5165, column: 2, scope: !12817)
!12896 = !DILocation(line: 5166, column: 5, scope: !12818)
!12897 = !DILocation(line: 5168, column: 23, scope: !12702)
!12898 = !DILocation(line: 5168, column: 29, scope: !12702)
!12899 = !DILocation(line: 5168, column: 34, scope: !12702)
!12900 = !DILocation(line: 5168, column: 3, scope: !12702)
!12901 = !DILocation(line: 5169, column: 3, scope: !12702)
!12902 = !DILocation(line: 5171, column: 11, scope: !12702)
!12903 = !DILocation(line: 5171, column: 10, scope: !12702)
!12904 = !DILocation(line: 5171, column: 3, scope: !12702)
!12905 = distinct !DISubprogram(name: "iv_ca_add_use", scope: !3, file: !3, line: 4650, type: !12906, scopeLine: 4652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12906 = !DISubroutineType(types: !12907)
!12907 = !{null, !2530, !2576, !2457}
!12908 = !DILocalVariable(name: "data", arg: 1, scope: !12905, file: !3, line: 4650, type: !2530)
!12909 = !DILocation(line: 4650, column: 36, scope: !12905)
!12910 = !DILocalVariable(name: "ivs", arg: 2, scope: !12905, file: !3, line: 4650, type: !2576)
!12911 = !DILocation(line: 4650, column: 56, scope: !12905)
!12912 = !DILocalVariable(name: "use", arg: 3, scope: !12905, file: !3, line: 4651, type: !2457)
!12913 = !DILocation(line: 4651, column: 24, scope: !12905)
!12914 = !DILocalVariable(name: "best_cp", scope: !12905, file: !3, line: 4653, type: !2468)
!12915 = !DILocation(line: 4653, column: 21, scope: !12905)
!12916 = !DILocalVariable(name: "cp", scope: !12905, file: !3, line: 4653, type: !2468)
!12917 = !DILocation(line: 4653, column: 38, scope: !12905)
!12918 = !DILocalVariable(name: "bi", scope: !12905, file: !3, line: 4654, type: !4257)
!12919 = !DILocation(line: 4654, column: 19, scope: !12905)
!12920 = !DILocalVariable(name: "i", scope: !12905, file: !3, line: 4655, type: !6)
!12921 = !DILocation(line: 4655, column: 12, scope: !12905)
!12922 = !DILocation(line: 4657, column: 3, scope: !12905)
!12923 = !DILocation(line: 4659, column: 7, scope: !12924)
!12924 = distinct !DILexicalBlock(scope: !12905, file: !3, line: 4659, column: 7)
!12925 = !DILocation(line: 4659, column: 12, scope: !12924)
!12926 = !DILocation(line: 4659, column: 20, scope: !12924)
!12927 = !DILocation(line: 4659, column: 25, scope: !12924)
!12928 = !DILocation(line: 4659, column: 17, scope: !12924)
!12929 = !DILocation(line: 4659, column: 7, scope: !12905)
!12930 = !DILocation(line: 4661, column: 7, scope: !12931)
!12931 = distinct !DILexicalBlock(scope: !12924, file: !3, line: 4660, column: 5)
!12932 = !DILocation(line: 4661, column: 12, scope: !12931)
!12933 = !DILocation(line: 4661, column: 16, scope: !12931)
!12934 = !DILocation(line: 4662, column: 7, scope: !12931)
!12935 = !DILocation(line: 4662, column: 12, scope: !12931)
!12936 = !DILocation(line: 4662, column: 20, scope: !12931)
!12937 = !DILocation(line: 4663, column: 5, scope: !12931)
!12938 = !DILocation(line: 4665, column: 3, scope: !12939)
!12939 = distinct !DILexicalBlock(scope: !12905, file: !3, line: 4665, column: 3)
!12940 = !DILocation(line: 4665, column: 3, scope: !12941)
!12941 = distinct !DILexicalBlock(scope: !12939, file: !3, line: 4665, column: 3)
!12942 = !DILocation(line: 4667, column: 29, scope: !12943)
!12943 = distinct !DILexicalBlock(scope: !12941, file: !3, line: 4666, column: 5)
!12944 = !DILocation(line: 4667, column: 35, scope: !12943)
!12945 = !DILocation(line: 4667, column: 49, scope: !12943)
!12946 = !DILocation(line: 4667, column: 55, scope: !12943)
!12947 = !DILocation(line: 4667, column: 40, scope: !12943)
!12948 = !DILocation(line: 4667, column: 12, scope: !12943)
!12949 = !DILocation(line: 4667, column: 10, scope: !12943)
!12950 = !DILocation(line: 4669, column: 30, scope: !12951)
!12951 = distinct !DILexicalBlock(scope: !12943, file: !3, line: 4669, column: 11)
!12952 = !DILocation(line: 4669, column: 34, scope: !12951)
!12953 = !DILocation(line: 4669, column: 11, scope: !12951)
!12954 = !DILocation(line: 4669, column: 11, scope: !12943)
!12955 = !DILocation(line: 4670, column: 12, scope: !12951)
!12956 = !DILocation(line: 4670, column: 10, scope: !12951)
!12957 = !DILocation(line: 4670, column: 2, scope: !12951)
!12958 = !DILocation(line: 4671, column: 5, scope: !12943)
!12959 = distinct !{!12959, !12938, !12960}
!12960 = !DILocation(line: 4671, column: 5, scope: !12939)
!12961 = !DILocation(line: 4673, column: 17, scope: !12905)
!12962 = !DILocation(line: 4673, column: 23, scope: !12905)
!12963 = !DILocation(line: 4673, column: 28, scope: !12905)
!12964 = !DILocation(line: 4673, column: 33, scope: !12905)
!12965 = !DILocation(line: 4673, column: 3, scope: !12905)
!12966 = !DILocation(line: 4674, column: 1, scope: !12905)
!12967 = distinct !DISubprogram(name: "iv_ca_delta_add", scope: !3, file: !3, line: 4713, type: !12968, scopeLine: 4715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!12968 = !DISubroutineType(types: !12969)
!12969 = !{!2592, !2457, !2468, !2468, !2592}
!12970 = !DILocalVariable(name: "use", arg: 1, scope: !12967, file: !3, line: 4713, type: !2457)
!12971 = !DILocation(line: 4713, column: 33, scope: !12967)
!12972 = !DILocalVariable(name: "old_cp", arg: 2, scope: !12967, file: !3, line: 4713, type: !2468)
!12973 = !DILocation(line: 4713, column: 56, scope: !12967)
!12974 = !DILocalVariable(name: "new_cp", arg: 3, scope: !12967, file: !3, line: 4714, type: !2468)
!12975 = !DILocation(line: 4714, column: 22, scope: !12967)
!12976 = !DILocalVariable(name: "next_change", arg: 4, scope: !12967, file: !3, line: 4714, type: !2592)
!12977 = !DILocation(line: 4714, column: 50, scope: !12967)
!12978 = !DILocalVariable(name: "change", scope: !12967, file: !3, line: 4716, type: !2592)
!12979 = !DILocation(line: 4716, column: 23, scope: !12967)
!12980 = !DILocation(line: 4716, column: 32, scope: !12967)
!12981 = !DILocation(line: 4718, column: 17, scope: !12967)
!12982 = !DILocation(line: 4718, column: 3, scope: !12967)
!12983 = !DILocation(line: 4718, column: 11, scope: !12967)
!12984 = !DILocation(line: 4718, column: 15, scope: !12967)
!12985 = !DILocation(line: 4719, column: 20, scope: !12967)
!12986 = !DILocation(line: 4719, column: 3, scope: !12967)
!12987 = !DILocation(line: 4719, column: 11, scope: !12967)
!12988 = !DILocation(line: 4719, column: 18, scope: !12967)
!12989 = !DILocation(line: 4720, column: 20, scope: !12967)
!12990 = !DILocation(line: 4720, column: 3, scope: !12967)
!12991 = !DILocation(line: 4720, column: 11, scope: !12967)
!12992 = !DILocation(line: 4720, column: 18, scope: !12967)
!12993 = !DILocation(line: 4721, column: 25, scope: !12967)
!12994 = !DILocation(line: 4721, column: 3, scope: !12967)
!12995 = !DILocation(line: 4721, column: 11, scope: !12967)
!12996 = !DILocation(line: 4721, column: 23, scope: !12967)
!12997 = !DILocation(line: 4723, column: 10, scope: !12967)
!12998 = !DILocation(line: 4723, column: 3, scope: !12967)
!12999 = distinct !DISubprogram(name: "iv_ca_set_no_cp", scope: !3, file: !3, line: 4555, type: !12906, scopeLine: 4557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13000 = !DILocalVariable(name: "data", arg: 1, scope: !12999, file: !3, line: 4555, type: !2530)
!13001 = !DILocation(line: 4555, column: 38, scope: !12999)
!13002 = !DILocalVariable(name: "ivs", arg: 2, scope: !12999, file: !3, line: 4555, type: !2576)
!13003 = !DILocation(line: 4555, column: 58, scope: !12999)
!13004 = !DILocalVariable(name: "use", arg: 3, scope: !12999, file: !3, line: 4556, type: !2457)
!13005 = !DILocation(line: 4556, column: 19, scope: !12999)
!13006 = !DILocalVariable(name: "uid", scope: !12999, file: !3, line: 4558, type: !6)
!13007 = !DILocation(line: 4558, column: 12, scope: !12999)
!13008 = !DILocation(line: 4558, column: 18, scope: !12999)
!13009 = !DILocation(line: 4558, column: 23, scope: !12999)
!13010 = !DILocalVariable(name: "cid", scope: !12999, file: !3, line: 4558, type: !6)
!13011 = !DILocation(line: 4558, column: 27, scope: !12999)
!13012 = !DILocalVariable(name: "cp", scope: !12999, file: !3, line: 4559, type: !2468)
!13013 = !DILocation(line: 4559, column: 21, scope: !12999)
!13014 = !DILocation(line: 4561, column: 8, scope: !12999)
!13015 = !DILocation(line: 4561, column: 13, scope: !12999)
!13016 = !DILocation(line: 4561, column: 26, scope: !12999)
!13017 = !DILocation(line: 4561, column: 6, scope: !12999)
!13018 = !DILocation(line: 4562, column: 8, scope: !13019)
!13019 = distinct !DILexicalBlock(scope: !12999, file: !3, line: 4562, column: 7)
!13020 = !DILocation(line: 4562, column: 7, scope: !12999)
!13021 = !DILocation(line: 4563, column: 5, scope: !13019)
!13022 = !DILocation(line: 4564, column: 9, scope: !12999)
!13023 = !DILocation(line: 4564, column: 13, scope: !12999)
!13024 = !DILocation(line: 4564, column: 19, scope: !12999)
!13025 = !DILocation(line: 4564, column: 7, scope: !12999)
!13026 = !DILocation(line: 4566, column: 3, scope: !12999)
!13027 = !DILocation(line: 4566, column: 8, scope: !12999)
!13028 = !DILocation(line: 4566, column: 16, scope: !12999)
!13029 = !DILocation(line: 4567, column: 3, scope: !12999)
!13030 = !DILocation(line: 4567, column: 8, scope: !12999)
!13031 = !DILocation(line: 4567, column: 21, scope: !12999)
!13032 = !DILocation(line: 4567, column: 26, scope: !12999)
!13033 = !DILocation(line: 4568, column: 3, scope: !12999)
!13034 = !DILocation(line: 4568, column: 8, scope: !12999)
!13035 = !DILocation(line: 4568, column: 20, scope: !12999)
!13036 = !DILocation(line: 4568, column: 24, scope: !12999)
!13037 = !DILocation(line: 4570, column: 7, scope: !13038)
!13038 = distinct !DILexicalBlock(scope: !12999, file: !3, line: 4570, column: 7)
!13039 = !DILocation(line: 4570, column: 12, scope: !13038)
!13040 = !DILocation(line: 4570, column: 24, scope: !13038)
!13041 = !DILocation(line: 4570, column: 29, scope: !13038)
!13042 = !DILocation(line: 4570, column: 7, scope: !12999)
!13043 = !DILocation(line: 4572, column: 25, scope: !13044)
!13044 = distinct !DILexicalBlock(scope: !13038, file: !3, line: 4571, column: 5)
!13045 = !DILocation(line: 4572, column: 30, scope: !13044)
!13046 = !DILocation(line: 4572, column: 37, scope: !13044)
!13047 = !DILocation(line: 4572, column: 7, scope: !13044)
!13048 = !DILocation(line: 4574, column: 11, scope: !13049)
!13049 = distinct !DILexicalBlock(scope: !13044, file: !3, line: 4574, column: 11)
!13050 = !DILocation(line: 4574, column: 15, scope: !13049)
!13051 = !DILocation(line: 4574, column: 21, scope: !13049)
!13052 = !DILocation(line: 4574, column: 11, scope: !13044)
!13053 = !DILocation(line: 4575, column: 2, scope: !13049)
!13054 = !DILocation(line: 4575, column: 7, scope: !13049)
!13055 = !DILocation(line: 4575, column: 13, scope: !13049)
!13056 = !DILocation(line: 4576, column: 7, scope: !13044)
!13057 = !DILocation(line: 4576, column: 12, scope: !13044)
!13058 = !DILocation(line: 4576, column: 19, scope: !13044)
!13059 = !DILocation(line: 4577, column: 25, scope: !13044)
!13060 = !DILocation(line: 4577, column: 29, scope: !13044)
!13061 = !DILocation(line: 4577, column: 35, scope: !13044)
!13062 = !DILocation(line: 4577, column: 7, scope: !13044)
!13063 = !DILocation(line: 4577, column: 12, scope: !13044)
!13064 = !DILocation(line: 4577, column: 22, scope: !13044)
!13065 = !DILocation(line: 4579, column: 36, scope: !13044)
!13066 = !DILocation(line: 4579, column: 41, scope: !13044)
!13067 = !DILocation(line: 4579, column: 45, scope: !13044)
!13068 = !DILocation(line: 4579, column: 51, scope: !13044)
!13069 = !DILocation(line: 4579, column: 7, scope: !13044)
!13070 = !DILocation(line: 4580, column: 5, scope: !13044)
!13071 = !DILocation(line: 4582, column: 3, scope: !12999)
!13072 = !DILocation(line: 4582, column: 8, scope: !12999)
!13073 = !DILocation(line: 4582, column: 35, scope: !12999)
!13074 = !DILocation(line: 4582, column: 40, scope: !12999)
!13075 = !DILocation(line: 4582, column: 55, scope: !12999)
!13076 = !DILocation(line: 4582, column: 59, scope: !12999)
!13077 = !DILocation(line: 4582, column: 24, scope: !12999)
!13078 = !DILocation(line: 4584, column: 32, scope: !12999)
!13079 = !DILocation(line: 4584, column: 37, scope: !12999)
!13080 = !DILocation(line: 4584, column: 41, scope: !12999)
!13081 = !DILocation(line: 4584, column: 3, scope: !12999)
!13082 = !DILocation(line: 4585, column: 23, scope: !12999)
!13083 = !DILocation(line: 4585, column: 29, scope: !12999)
!13084 = !DILocation(line: 4585, column: 3, scope: !12999)
!13085 = !DILocation(line: 4586, column: 1, scope: !12999)
!13086 = distinct !DISubprogram(name: "iv_ca_cand_used_p", scope: !3, file: !3, line: 4805, type: !13087, scopeLine: 4806, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13087 = !DISubroutineType(types: !13088)
!13088 = !{!136, !2576, !2472}
!13089 = !DILocalVariable(name: "ivs", arg: 1, scope: !13086, file: !3, line: 4805, type: !2576)
!13090 = !DILocation(line: 4805, column: 34, scope: !13086)
!13091 = !DILocalVariable(name: "cand", arg: 2, scope: !13086, file: !3, line: 4805, type: !2472)
!13092 = !DILocation(line: 4805, column: 55, scope: !13086)
!13093 = !DILocation(line: 4807, column: 10, scope: !13086)
!13094 = !DILocation(line: 4807, column: 15, scope: !13086)
!13095 = !DILocation(line: 4807, column: 27, scope: !13086)
!13096 = !DILocation(line: 4807, column: 33, scope: !13086)
!13097 = !DILocation(line: 4807, column: 37, scope: !13086)
!13098 = !DILocation(line: 4807, column: 3, scope: !13086)
!13099 = distinct !DISubprogram(name: "get_use_iv_cost", scope: !3, file: !3, line: 2597, type: !13100, scopeLine: 2599, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13100 = !DISubroutineType(types: !13101)
!13101 = !{!2468, !2530, !2457, !2472}
!13102 = !DILocalVariable(name: "data", arg: 1, scope: !13099, file: !3, line: 2597, type: !2530)
!13103 = !DILocation(line: 2597, column: 38, scope: !13099)
!13104 = !DILocalVariable(name: "use", arg: 2, scope: !13099, file: !3, line: 2597, type: !2457)
!13105 = !DILocation(line: 2597, column: 59, scope: !13099)
!13106 = !DILocalVariable(name: "cand", arg: 3, scope: !13099, file: !3, line: 2598, type: !2472)
!13107 = !DILocation(line: 2598, column: 20, scope: !13099)
!13108 = !DILocalVariable(name: "i", scope: !13099, file: !3, line: 2600, type: !6)
!13109 = !DILocation(line: 2600, column: 12, scope: !13099)
!13110 = !DILocalVariable(name: "s", scope: !13099, file: !3, line: 2600, type: !6)
!13111 = !DILocation(line: 2600, column: 15, scope: !13099)
!13112 = !DILocalVariable(name: "ret", scope: !13099, file: !3, line: 2601, type: !2468)
!13113 = !DILocation(line: 2601, column: 21, scope: !13099)
!13114 = !DILocation(line: 2603, column: 8, scope: !13115)
!13115 = distinct !DILexicalBlock(scope: !13099, file: !3, line: 2603, column: 7)
!13116 = !DILocation(line: 2603, column: 7, scope: !13099)
!13117 = !DILocation(line: 2604, column: 5, scope: !13115)
!13118 = !DILocation(line: 2606, column: 7, scope: !13119)
!13119 = distinct !DILexicalBlock(scope: !13099, file: !3, line: 2606, column: 7)
!13120 = !DILocation(line: 2606, column: 13, scope: !13119)
!13121 = !DILocation(line: 2606, column: 7, scope: !13099)
!13122 = !DILocation(line: 2608, column: 13, scope: !13123)
!13123 = distinct !DILexicalBlock(scope: !13119, file: !3, line: 2607, column: 5)
!13124 = !DILocation(line: 2608, column: 18, scope: !13123)
!13125 = !DILocation(line: 2608, column: 29, scope: !13123)
!13126 = !DILocation(line: 2608, column: 35, scope: !13123)
!13127 = !DILocation(line: 2608, column: 27, scope: !13123)
!13128 = !DILocation(line: 2608, column: 11, scope: !13123)
!13129 = !DILocation(line: 2609, column: 12, scope: !13130)
!13130 = distinct !DILexicalBlock(scope: !13123, file: !3, line: 2609, column: 11)
!13131 = !DILocation(line: 2609, column: 17, scope: !13130)
!13132 = !DILocation(line: 2609, column: 11, scope: !13123)
!13133 = !DILocation(line: 2610, column: 2, scope: !13130)
!13134 = !DILocation(line: 2612, column: 14, scope: !13123)
!13135 = !DILocation(line: 2612, column: 7, scope: !13123)
!13136 = !DILocation(line: 2616, column: 7, scope: !13099)
!13137 = !DILocation(line: 2616, column: 13, scope: !13099)
!13138 = !DILocation(line: 2616, column: 19, scope: !13099)
!13139 = !DILocation(line: 2616, column: 24, scope: !13099)
!13140 = !DILocation(line: 2616, column: 38, scope: !13099)
!13141 = !DILocation(line: 2616, column: 16, scope: !13099)
!13142 = !DILocation(line: 2616, column: 5, scope: !13099)
!13143 = !DILocation(line: 2617, column: 12, scope: !13144)
!13144 = distinct !DILexicalBlock(scope: !13099, file: !3, line: 2617, column: 3)
!13145 = !DILocation(line: 2617, column: 10, scope: !13144)
!13146 = !DILocation(line: 2617, column: 8, scope: !13144)
!13147 = !DILocation(line: 2617, column: 15, scope: !13148)
!13148 = distinct !DILexicalBlock(scope: !13144, file: !3, line: 2617, column: 3)
!13149 = !DILocation(line: 2617, column: 19, scope: !13148)
!13150 = !DILocation(line: 2617, column: 24, scope: !13148)
!13151 = !DILocation(line: 2617, column: 17, scope: !13148)
!13152 = !DILocation(line: 2617, column: 3, scope: !13144)
!13153 = !DILocation(line: 2618, column: 9, scope: !13154)
!13154 = distinct !DILexicalBlock(scope: !13148, file: !3, line: 2618, column: 9)
!13155 = !DILocation(line: 2618, column: 14, scope: !13154)
!13156 = !DILocation(line: 2618, column: 23, scope: !13154)
!13157 = !DILocation(line: 2618, column: 26, scope: !13154)
!13158 = !DILocation(line: 2618, column: 34, scope: !13154)
!13159 = !DILocation(line: 2618, column: 31, scope: !13154)
!13160 = !DILocation(line: 2618, column: 9, scope: !13148)
!13161 = !DILocation(line: 2619, column: 14, scope: !13154)
!13162 = !DILocation(line: 2619, column: 19, scope: !13154)
!13163 = !DILocation(line: 2619, column: 30, scope: !13154)
!13164 = !DILocation(line: 2619, column: 28, scope: !13154)
!13165 = !DILocation(line: 2619, column: 7, scope: !13154)
!13166 = !DILocation(line: 2617, column: 40, scope: !13148)
!13167 = !DILocation(line: 2617, column: 3, scope: !13148)
!13168 = distinct !{!13168, !13152, !13169}
!13169 = !DILocation(line: 2619, column: 30, scope: !13144)
!13170 = !DILocation(line: 2621, column: 10, scope: !13171)
!13171 = distinct !DILexicalBlock(scope: !13099, file: !3, line: 2621, column: 3)
!13172 = !DILocation(line: 2621, column: 8, scope: !13171)
!13173 = !DILocation(line: 2621, column: 15, scope: !13174)
!13174 = distinct !DILexicalBlock(scope: !13171, file: !3, line: 2621, column: 3)
!13175 = !DILocation(line: 2621, column: 19, scope: !13174)
!13176 = !DILocation(line: 2621, column: 17, scope: !13174)
!13177 = !DILocation(line: 2621, column: 3, scope: !13171)
!13178 = !DILocation(line: 2622, column: 9, scope: !13179)
!13179 = distinct !DILexicalBlock(scope: !13174, file: !3, line: 2622, column: 9)
!13180 = !DILocation(line: 2622, column: 14, scope: !13179)
!13181 = !DILocation(line: 2622, column: 23, scope: !13179)
!13182 = !DILocation(line: 2622, column: 26, scope: !13179)
!13183 = !DILocation(line: 2622, column: 34, scope: !13179)
!13184 = !DILocation(line: 2622, column: 31, scope: !13179)
!13185 = !DILocation(line: 2622, column: 9, scope: !13174)
!13186 = !DILocation(line: 2623, column: 14, scope: !13179)
!13187 = !DILocation(line: 2623, column: 19, scope: !13179)
!13188 = !DILocation(line: 2623, column: 30, scope: !13179)
!13189 = !DILocation(line: 2623, column: 28, scope: !13179)
!13190 = !DILocation(line: 2623, column: 7, scope: !13179)
!13191 = !DILocation(line: 2621, column: 23, scope: !13174)
!13192 = !DILocation(line: 2621, column: 3, scope: !13174)
!13193 = distinct !{!13193, !13177, !13194}
!13194 = !DILocation(line: 2623, column: 30, scope: !13171)
!13195 = !DILocation(line: 2625, column: 3, scope: !13099)
!13196 = !DILocation(line: 2626, column: 1, scope: !13099)
!13197 = distinct !DISubprogram(name: "iv_ca_set_cp", scope: !3, file: !3, line: 4610, type: !13198, scopeLine: 4612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13198 = !DISubroutineType(types: !13199)
!13199 = !{null, !2530, !2576, !2457, !2468}
!13200 = !DILocalVariable(name: "data", arg: 1, scope: !13197, file: !3, line: 4610, type: !2530)
!13201 = !DILocation(line: 4610, column: 35, scope: !13197)
!13202 = !DILocalVariable(name: "ivs", arg: 2, scope: !13197, file: !3, line: 4610, type: !2576)
!13203 = !DILocation(line: 4610, column: 55, scope: !13197)
!13204 = !DILocalVariable(name: "use", arg: 3, scope: !13197, file: !3, line: 4611, type: !2457)
!13205 = !DILocation(line: 4611, column: 23, scope: !13197)
!13206 = !DILocalVariable(name: "cp", arg: 4, scope: !13197, file: !3, line: 4611, type: !2468)
!13207 = !DILocation(line: 4611, column: 46, scope: !13197)
!13208 = !DILocalVariable(name: "uid", scope: !13197, file: !3, line: 4613, type: !6)
!13209 = !DILocation(line: 4613, column: 12, scope: !13197)
!13210 = !DILocation(line: 4613, column: 18, scope: !13197)
!13211 = !DILocation(line: 4613, column: 23, scope: !13197)
!13212 = !DILocalVariable(name: "cid", scope: !13197, file: !3, line: 4613, type: !6)
!13213 = !DILocation(line: 4613, column: 27, scope: !13197)
!13214 = !DILocation(line: 4615, column: 7, scope: !13215)
!13215 = distinct !DILexicalBlock(scope: !13197, file: !3, line: 4615, column: 7)
!13216 = !DILocation(line: 4615, column: 12, scope: !13215)
!13217 = !DILocation(line: 4615, column: 25, scope: !13215)
!13218 = !DILocation(line: 4615, column: 33, scope: !13215)
!13219 = !DILocation(line: 4615, column: 30, scope: !13215)
!13220 = !DILocation(line: 4615, column: 7, scope: !13197)
!13221 = !DILocation(line: 4616, column: 5, scope: !13215)
!13222 = !DILocation(line: 4618, column: 7, scope: !13223)
!13223 = distinct !DILexicalBlock(scope: !13197, file: !3, line: 4618, column: 7)
!13224 = !DILocation(line: 4618, column: 12, scope: !13223)
!13225 = !DILocation(line: 4618, column: 25, scope: !13223)
!13226 = !DILocation(line: 4618, column: 7, scope: !13197)
!13227 = !DILocation(line: 4619, column: 22, scope: !13223)
!13228 = !DILocation(line: 4619, column: 28, scope: !13223)
!13229 = !DILocation(line: 4619, column: 33, scope: !13223)
!13230 = !DILocation(line: 4619, column: 5, scope: !13223)
!13231 = !DILocation(line: 4621, column: 7, scope: !13232)
!13232 = distinct !DILexicalBlock(scope: !13197, file: !3, line: 4621, column: 7)
!13233 = !DILocation(line: 4621, column: 7, scope: !13197)
!13234 = !DILocation(line: 4623, column: 13, scope: !13235)
!13235 = distinct !DILexicalBlock(scope: !13232, file: !3, line: 4622, column: 5)
!13236 = !DILocation(line: 4623, column: 17, scope: !13235)
!13237 = !DILocation(line: 4623, column: 23, scope: !13235)
!13238 = !DILocation(line: 4623, column: 11, scope: !13235)
!13239 = !DILocation(line: 4625, column: 7, scope: !13235)
!13240 = !DILocation(line: 4625, column: 12, scope: !13235)
!13241 = !DILocation(line: 4625, column: 20, scope: !13235)
!13242 = !DILocation(line: 4626, column: 32, scope: !13235)
!13243 = !DILocation(line: 4626, column: 7, scope: !13235)
!13244 = !DILocation(line: 4626, column: 12, scope: !13235)
!13245 = !DILocation(line: 4626, column: 25, scope: !13235)
!13246 = !DILocation(line: 4626, column: 30, scope: !13235)
!13247 = !DILocation(line: 4627, column: 7, scope: !13235)
!13248 = !DILocation(line: 4627, column: 12, scope: !13235)
!13249 = !DILocation(line: 4627, column: 24, scope: !13235)
!13250 = !DILocation(line: 4627, column: 28, scope: !13235)
!13251 = !DILocation(line: 4628, column: 11, scope: !13252)
!13252 = distinct !DILexicalBlock(scope: !13235, file: !3, line: 4628, column: 11)
!13253 = !DILocation(line: 4628, column: 16, scope: !13252)
!13254 = !DILocation(line: 4628, column: 28, scope: !13252)
!13255 = !DILocation(line: 4628, column: 33, scope: !13252)
!13256 = !DILocation(line: 4628, column: 11, scope: !13235)
!13257 = !DILocation(line: 4630, column: 20, scope: !13258)
!13258 = distinct !DILexicalBlock(scope: !13252, file: !3, line: 4629, column: 2)
!13259 = !DILocation(line: 4630, column: 25, scope: !13258)
!13260 = !DILocation(line: 4630, column: 32, scope: !13258)
!13261 = !DILocation(line: 4630, column: 4, scope: !13258)
!13262 = !DILocation(line: 4632, column: 8, scope: !13263)
!13263 = distinct !DILexicalBlock(scope: !13258, file: !3, line: 4632, column: 8)
!13264 = !DILocation(line: 4632, column: 12, scope: !13263)
!13265 = !DILocation(line: 4632, column: 18, scope: !13263)
!13266 = !DILocation(line: 4632, column: 8, scope: !13258)
!13267 = !DILocation(line: 4633, column: 6, scope: !13263)
!13268 = !DILocation(line: 4633, column: 11, scope: !13263)
!13269 = !DILocation(line: 4633, column: 17, scope: !13263)
!13270 = !DILocation(line: 4634, column: 4, scope: !13258)
!13271 = !DILocation(line: 4634, column: 9, scope: !13258)
!13272 = !DILocation(line: 4634, column: 16, scope: !13258)
!13273 = !DILocation(line: 4635, column: 22, scope: !13258)
!13274 = !DILocation(line: 4635, column: 26, scope: !13258)
!13275 = !DILocation(line: 4635, column: 32, scope: !13258)
!13276 = !DILocation(line: 4635, column: 4, scope: !13258)
!13277 = !DILocation(line: 4635, column: 9, scope: !13258)
!13278 = !DILocation(line: 4635, column: 19, scope: !13258)
!13279 = !DILocation(line: 4637, column: 30, scope: !13258)
!13280 = !DILocation(line: 4637, column: 35, scope: !13258)
!13281 = !DILocation(line: 4637, column: 39, scope: !13258)
!13282 = !DILocation(line: 4637, column: 45, scope: !13258)
!13283 = !DILocation(line: 4637, column: 4, scope: !13258)
!13284 = !DILocation(line: 4638, column: 2, scope: !13258)
!13285 = !DILocation(line: 4640, column: 7, scope: !13235)
!13286 = !DILocation(line: 4640, column: 12, scope: !13235)
!13287 = !DILocation(line: 4640, column: 39, scope: !13235)
!13288 = !DILocation(line: 4640, column: 44, scope: !13235)
!13289 = !DILocation(line: 4640, column: 59, scope: !13235)
!13290 = !DILocation(line: 4640, column: 63, scope: !13235)
!13291 = !DILocation(line: 4640, column: 28, scope: !13235)
!13292 = !DILocation(line: 4641, column: 33, scope: !13235)
!13293 = !DILocation(line: 4641, column: 38, scope: !13235)
!13294 = !DILocation(line: 4641, column: 42, scope: !13235)
!13295 = !DILocation(line: 4641, column: 7, scope: !13235)
!13296 = !DILocation(line: 4642, column: 27, scope: !13235)
!13297 = !DILocation(line: 4642, column: 33, scope: !13235)
!13298 = !DILocation(line: 4642, column: 7, scope: !13235)
!13299 = !DILocation(line: 4643, column: 5, scope: !13235)
!13300 = !DILocation(line: 4644, column: 1, scope: !13197)
!13301 = distinct !DISubprogram(name: "iv_ca_extend", scope: !3, file: !3, line: 4895, type: !13302, scopeLine: 4898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13302 = !DISubroutineType(types: !13303)
!13303 = !{!2487, !2530, !2576, !2472, !13304, !2584}
!13304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2592, size: 64)
!13305 = !DILocalVariable(name: "data", arg: 1, scope: !13301, file: !3, line: 4895, type: !2530)
!13306 = !DILocation(line: 4895, column: 35, scope: !13301)
!13307 = !DILocalVariable(name: "ivs", arg: 2, scope: !13301, file: !3, line: 4895, type: !2576)
!13308 = !DILocation(line: 4895, column: 55, scope: !13301)
!13309 = !DILocalVariable(name: "cand", arg: 3, scope: !13301, file: !3, line: 4896, type: !2472)
!13310 = !DILocation(line: 4896, column: 24, scope: !13301)
!13311 = !DILocalVariable(name: "delta", arg: 4, scope: !13301, file: !3, line: 4896, type: !13304)
!13312 = !DILocation(line: 4896, column: 51, scope: !13301)
!13313 = !DILocalVariable(name: "n_ivs", arg: 5, scope: !13301, file: !3, line: 4897, type: !2584)
!13314 = !DILocation(line: 4897, column: 18, scope: !13301)
!13315 = !DILocalVariable(name: "i", scope: !13301, file: !3, line: 4899, type: !6)
!13316 = !DILocation(line: 4899, column: 12, scope: !13301)
!13317 = !DILocalVariable(name: "cost", scope: !13301, file: !3, line: 4900, type: !2487)
!13318 = !DILocation(line: 4900, column: 13, scope: !13301)
!13319 = !DILocalVariable(name: "use", scope: !13301, file: !3, line: 4901, type: !2457)
!13320 = !DILocation(line: 4901, column: 18, scope: !13301)
!13321 = !DILocalVariable(name: "old_cp", scope: !13301, file: !3, line: 4902, type: !2468)
!13322 = !DILocation(line: 4902, column: 21, scope: !13301)
!13323 = !DILocalVariable(name: "new_cp", scope: !13301, file: !3, line: 4902, type: !2468)
!13324 = !DILocation(line: 4902, column: 30, scope: !13301)
!13325 = !DILocation(line: 4904, column: 4, scope: !13301)
!13326 = !DILocation(line: 4904, column: 10, scope: !13301)
!13327 = !DILocation(line: 4905, column: 10, scope: !13328)
!13328 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 4905, column: 3)
!13329 = !DILocation(line: 4905, column: 8, scope: !13328)
!13330 = !DILocation(line: 4905, column: 15, scope: !13331)
!13331 = distinct !DILexicalBlock(scope: !13328, file: !3, line: 4905, column: 3)
!13332 = !DILocation(line: 4905, column: 19, scope: !13331)
!13333 = !DILocation(line: 4905, column: 24, scope: !13331)
!13334 = !DILocation(line: 4905, column: 17, scope: !13331)
!13335 = !DILocation(line: 4905, column: 3, scope: !13328)
!13336 = !DILocation(line: 4907, column: 21, scope: !13337)
!13337 = distinct !DILexicalBlock(scope: !13331, file: !3, line: 4906, column: 5)
!13338 = !DILocation(line: 4907, column: 27, scope: !13337)
!13339 = !DILocation(line: 4907, column: 13, scope: !13337)
!13340 = !DILocation(line: 4907, column: 11, scope: !13337)
!13341 = !DILocation(line: 4908, column: 36, scope: !13337)
!13342 = !DILocation(line: 4908, column: 41, scope: !13337)
!13343 = !DILocation(line: 4908, column: 16, scope: !13337)
!13344 = !DILocation(line: 4908, column: 14, scope: !13337)
!13345 = !DILocation(line: 4910, column: 11, scope: !13346)
!13346 = distinct !DILexicalBlock(scope: !13337, file: !3, line: 4910, column: 11)
!13347 = !DILocation(line: 4911, column: 4, scope: !13346)
!13348 = !DILocation(line: 4911, column: 7, scope: !13346)
!13349 = !DILocation(line: 4911, column: 15, scope: !13346)
!13350 = !DILocation(line: 4911, column: 23, scope: !13346)
!13351 = !DILocation(line: 4911, column: 20, scope: !13346)
!13352 = !DILocation(line: 4910, column: 11, scope: !13337)
!13353 = !DILocation(line: 4912, column: 2, scope: !13346)
!13354 = !DILocation(line: 4914, column: 33, scope: !13337)
!13355 = !DILocation(line: 4914, column: 39, scope: !13337)
!13356 = !DILocation(line: 4914, column: 44, scope: !13337)
!13357 = !DILocation(line: 4914, column: 16, scope: !13337)
!13358 = !DILocation(line: 4914, column: 14, scope: !13337)
!13359 = !DILocation(line: 4915, column: 12, scope: !13360)
!13360 = distinct !DILexicalBlock(scope: !13337, file: !3, line: 4915, column: 11)
!13361 = !DILocation(line: 4915, column: 11, scope: !13337)
!13362 = !DILocation(line: 4916, column: 2, scope: !13360)
!13363 = !DILocation(line: 4918, column: 28, scope: !13364)
!13364 = distinct !DILexicalBlock(scope: !13337, file: !3, line: 4918, column: 11)
!13365 = !DILocation(line: 4918, column: 33, scope: !13364)
!13366 = !DILocation(line: 4918, column: 12, scope: !13364)
!13367 = !DILocation(line: 4918, column: 11, scope: !13337)
!13368 = !DILocation(line: 4919, column: 2, scope: !13364)
!13369 = !DILocation(line: 4921, column: 31, scope: !13370)
!13370 = distinct !DILexicalBlock(scope: !13337, file: !3, line: 4921, column: 11)
!13371 = !DILocation(line: 4921, column: 39, scope: !13370)
!13372 = !DILocation(line: 4921, column: 12, scope: !13370)
!13373 = !DILocation(line: 4921, column: 11, scope: !13337)
!13374 = !DILocation(line: 4922, column: 2, scope: !13370)
!13375 = !DILocation(line: 4924, column: 33, scope: !13337)
!13376 = !DILocation(line: 4924, column: 38, scope: !13337)
!13377 = !DILocation(line: 4924, column: 46, scope: !13337)
!13378 = !DILocation(line: 4924, column: 55, scope: !13337)
!13379 = !DILocation(line: 4924, column: 54, scope: !13337)
!13380 = !DILocation(line: 4924, column: 16, scope: !13337)
!13381 = !DILocation(line: 4924, column: 8, scope: !13337)
!13382 = !DILocation(line: 4924, column: 14, scope: !13337)
!13383 = !DILocation(line: 4925, column: 5, scope: !13337)
!13384 = !DILocation(line: 4905, column: 31, scope: !13331)
!13385 = !DILocation(line: 4905, column: 3, scope: !13331)
!13386 = distinct !{!13386, !13335, !13387}
!13387 = !DILocation(line: 4925, column: 5, scope: !13328)
!13388 = !DILocation(line: 4927, column: 23, scope: !13301)
!13389 = !DILocation(line: 4927, column: 29, scope: !13301)
!13390 = !DILocation(line: 4927, column: 35, scope: !13301)
!13391 = !DILocation(line: 4927, column: 34, scope: !13301)
!13392 = !DILocation(line: 4927, column: 3, scope: !13301)
!13393 = !DILocation(line: 4928, column: 22, scope: !13301)
!13394 = !DILocation(line: 4928, column: 10, scope: !13301)
!13395 = !DILocation(line: 4929, column: 7, scope: !13396)
!13396 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 4929, column: 7)
!13397 = !DILocation(line: 4929, column: 7, scope: !13301)
!13398 = !DILocation(line: 4930, column: 29, scope: !13396)
!13399 = !DILocation(line: 4930, column: 14, scope: !13396)
!13400 = !DILocation(line: 4930, column: 6, scope: !13396)
!13401 = !DILocation(line: 4930, column: 12, scope: !13396)
!13402 = !DILocation(line: 4930, column: 5, scope: !13396)
!13403 = !DILocation(line: 4931, column: 23, scope: !13301)
!13404 = !DILocation(line: 4931, column: 29, scope: !13301)
!13405 = !DILocation(line: 4931, column: 35, scope: !13301)
!13406 = !DILocation(line: 4931, column: 34, scope: !13301)
!13407 = !DILocation(line: 4931, column: 3, scope: !13301)
!13408 = !DILocation(line: 4933, column: 3, scope: !13301)
!13409 = distinct !DISubprogram(name: "iv_ca_delta_free", scope: !3, file: !3, line: 4821, type: !13410, scopeLine: 4822, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13410 = !DISubroutineType(types: !13411)
!13411 = !{null, !13304}
!13412 = !DILocalVariable(name: "delta", arg: 1, scope: !13409, file: !3, line: 4821, type: !13304)
!13413 = !DILocation(line: 4821, column: 40, scope: !13409)
!13414 = !DILocalVariable(name: "act", scope: !13409, file: !3, line: 4823, type: !2592)
!13415 = !DILocation(line: 4823, column: 23, scope: !13409)
!13416 = !DILocalVariable(name: "next", scope: !13409, file: !3, line: 4823, type: !2592)
!13417 = !DILocation(line: 4823, column: 29, scope: !13409)
!13418 = !DILocation(line: 4825, column: 15, scope: !13419)
!13419 = distinct !DILexicalBlock(scope: !13409, file: !3, line: 4825, column: 3)
!13420 = !DILocation(line: 4825, column: 14, scope: !13419)
!13421 = !DILocation(line: 4825, column: 12, scope: !13419)
!13422 = !DILocation(line: 4825, column: 8, scope: !13419)
!13423 = !DILocation(line: 4825, column: 22, scope: !13424)
!13424 = distinct !DILexicalBlock(scope: !13419, file: !3, line: 4825, column: 3)
!13425 = !DILocation(line: 4825, column: 3, scope: !13419)
!13426 = !DILocation(line: 4827, column: 14, scope: !13427)
!13427 = distinct !DILexicalBlock(scope: !13424, file: !3, line: 4826, column: 5)
!13428 = !DILocation(line: 4827, column: 19, scope: !13427)
!13429 = !DILocation(line: 4827, column: 12, scope: !13427)
!13430 = !DILocation(line: 4828, column: 13, scope: !13427)
!13431 = !DILocation(line: 4828, column: 7, scope: !13427)
!13432 = !DILocation(line: 4829, column: 5, scope: !13427)
!13433 = !DILocation(line: 4825, column: 33, scope: !13424)
!13434 = !DILocation(line: 4825, column: 31, scope: !13424)
!13435 = !DILocation(line: 4825, column: 3, scope: !13424)
!13436 = distinct !{!13436, !13425, !13437}
!13437 = !DILocation(line: 4829, column: 5, scope: !13419)
!13438 = !DILocation(line: 4831, column: 4, scope: !13409)
!13439 = !DILocation(line: 4831, column: 10, scope: !13409)
!13440 = !DILocation(line: 4832, column: 1, scope: !13409)
!13441 = distinct !DISubprogram(name: "iv_ca_delta_commit", scope: !3, file: !3, line: 4781, type: !13442, scopeLine: 4783, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13442 = !DISubroutineType(types: !13443)
!13443 = !{null, !2530, !2576, !2592, !136}
!13444 = !DILocalVariable(name: "data", arg: 1, scope: !13441, file: !3, line: 4781, type: !2530)
!13445 = !DILocation(line: 4781, column: 41, scope: !13441)
!13446 = !DILocalVariable(name: "ivs", arg: 2, scope: !13441, file: !3, line: 4781, type: !2576)
!13447 = !DILocation(line: 4781, column: 61, scope: !13441)
!13448 = !DILocalVariable(name: "delta", arg: 3, scope: !13441, file: !3, line: 4782, type: !2592)
!13449 = !DILocation(line: 4782, column: 27, scope: !13441)
!13450 = !DILocalVariable(name: "forward", arg: 4, scope: !13441, file: !3, line: 4782, type: !136)
!13451 = !DILocation(line: 4782, column: 39, scope: !13441)
!13452 = !DILocalVariable(name: "from", scope: !13441, file: !3, line: 4784, type: !2468)
!13453 = !DILocation(line: 4784, column: 21, scope: !13441)
!13454 = !DILocalVariable(name: "to", scope: !13441, file: !3, line: 4784, type: !2468)
!13455 = !DILocation(line: 4784, column: 28, scope: !13441)
!13456 = !DILocalVariable(name: "act", scope: !13441, file: !3, line: 4785, type: !2592)
!13457 = !DILocation(line: 4785, column: 23, scope: !13441)
!13458 = !DILocation(line: 4787, column: 8, scope: !13459)
!13459 = distinct !DILexicalBlock(scope: !13441, file: !3, line: 4787, column: 7)
!13460 = !DILocation(line: 4787, column: 7, scope: !13441)
!13461 = !DILocation(line: 4788, column: 34, scope: !13459)
!13462 = !DILocation(line: 4788, column: 13, scope: !13459)
!13463 = !DILocation(line: 4788, column: 11, scope: !13459)
!13464 = !DILocation(line: 4788, column: 5, scope: !13459)
!13465 = !DILocation(line: 4790, column: 14, scope: !13466)
!13466 = distinct !DILexicalBlock(scope: !13441, file: !3, line: 4790, column: 3)
!13467 = !DILocation(line: 4790, column: 12, scope: !13466)
!13468 = !DILocation(line: 4790, column: 8, scope: !13466)
!13469 = !DILocation(line: 4790, column: 21, scope: !13470)
!13470 = distinct !DILexicalBlock(scope: !13466, file: !3, line: 4790, column: 3)
!13471 = !DILocation(line: 4790, column: 3, scope: !13466)
!13472 = !DILocation(line: 4792, column: 14, scope: !13473)
!13473 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 4791, column: 5)
!13474 = !DILocation(line: 4792, column: 19, scope: !13473)
!13475 = !DILocation(line: 4792, column: 12, scope: !13473)
!13476 = !DILocation(line: 4793, column: 12, scope: !13473)
!13477 = !DILocation(line: 4793, column: 17, scope: !13473)
!13478 = !DILocation(line: 4793, column: 10, scope: !13473)
!13479 = !DILocation(line: 4794, column: 7, scope: !13473)
!13480 = !DILocation(line: 4795, column: 21, scope: !13473)
!13481 = !DILocation(line: 4795, column: 27, scope: !13473)
!13482 = !DILocation(line: 4795, column: 32, scope: !13473)
!13483 = !DILocation(line: 4795, column: 37, scope: !13473)
!13484 = !DILocation(line: 4795, column: 42, scope: !13473)
!13485 = !DILocation(line: 4795, column: 7, scope: !13473)
!13486 = !DILocation(line: 4796, column: 5, scope: !13473)
!13487 = !DILocation(line: 4790, column: 32, scope: !13470)
!13488 = !DILocation(line: 4790, column: 37, scope: !13470)
!13489 = !DILocation(line: 4790, column: 30, scope: !13470)
!13490 = !DILocation(line: 4790, column: 3, scope: !13470)
!13491 = distinct !{!13491, !13471, !13492}
!13492 = !DILocation(line: 4796, column: 5, scope: !13466)
!13493 = !DILocation(line: 4798, column: 8, scope: !13494)
!13494 = distinct !DILexicalBlock(scope: !13441, file: !3, line: 4798, column: 7)
!13495 = !DILocation(line: 4798, column: 7, scope: !13441)
!13496 = !DILocation(line: 4799, column: 26, scope: !13494)
!13497 = !DILocation(line: 4799, column: 5, scope: !13494)
!13498 = !DILocation(line: 4800, column: 1, scope: !13441)
!13499 = distinct !DISubprogram(name: "cheaper_cost_pair", scope: !3, file: !3, line: 4497, type: !13500, scopeLine: 4498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13500 = !DISubroutineType(types: !13501)
!13501 = !{!136, !2468, !2468}
!13502 = !DILocalVariable(name: "a", arg: 1, scope: !13499, file: !3, line: 4497, type: !2468)
!13503 = !DILocation(line: 4497, column: 38, scope: !13499)
!13504 = !DILocalVariable(name: "b", arg: 2, scope: !13499, file: !3, line: 4497, type: !2468)
!13505 = !DILocation(line: 4497, column: 59, scope: !13499)
!13506 = !DILocalVariable(name: "cmp", scope: !13499, file: !3, line: 4499, type: !1006)
!13507 = !DILocation(line: 4499, column: 7, scope: !13499)
!13508 = !DILocation(line: 4501, column: 8, scope: !13509)
!13509 = distinct !DILexicalBlock(scope: !13499, file: !3, line: 4501, column: 7)
!13510 = !DILocation(line: 4501, column: 7, scope: !13499)
!13511 = !DILocation(line: 4502, column: 5, scope: !13509)
!13512 = !DILocation(line: 4504, column: 8, scope: !13513)
!13513 = distinct !DILexicalBlock(scope: !13499, file: !3, line: 4504, column: 7)
!13514 = !DILocation(line: 4504, column: 7, scope: !13499)
!13515 = !DILocation(line: 4505, column: 5, scope: !13513)
!13516 = !DILocation(line: 4507, column: 24, scope: !13499)
!13517 = !DILocation(line: 4507, column: 27, scope: !13499)
!13518 = !DILocation(line: 4507, column: 33, scope: !13499)
!13519 = !DILocation(line: 4507, column: 36, scope: !13499)
!13520 = !DILocation(line: 4507, column: 9, scope: !13499)
!13521 = !DILocation(line: 4507, column: 7, scope: !13499)
!13522 = !DILocation(line: 4508, column: 7, scope: !13523)
!13523 = distinct !DILexicalBlock(scope: !13499, file: !3, line: 4508, column: 7)
!13524 = !DILocation(line: 4508, column: 11, scope: !13523)
!13525 = !DILocation(line: 4508, column: 7, scope: !13499)
!13526 = !DILocation(line: 4509, column: 5, scope: !13523)
!13527 = !DILocation(line: 4511, column: 7, scope: !13528)
!13528 = distinct !DILexicalBlock(scope: !13499, file: !3, line: 4511, column: 7)
!13529 = !DILocation(line: 4511, column: 11, scope: !13528)
!13530 = !DILocation(line: 4511, column: 7, scope: !13499)
!13531 = !DILocation(line: 4512, column: 5, scope: !13528)
!13532 = !DILocation(line: 4515, column: 7, scope: !13533)
!13533 = distinct !DILexicalBlock(scope: !13499, file: !3, line: 4515, column: 7)
!13534 = !DILocation(line: 4515, column: 10, scope: !13533)
!13535 = !DILocation(line: 4515, column: 16, scope: !13533)
!13536 = !DILocation(line: 4515, column: 23, scope: !13533)
!13537 = !DILocation(line: 4515, column: 26, scope: !13533)
!13538 = !DILocation(line: 4515, column: 32, scope: !13533)
!13539 = !DILocation(line: 4515, column: 21, scope: !13533)
!13540 = !DILocation(line: 4515, column: 7, scope: !13499)
!13541 = !DILocation(line: 4516, column: 5, scope: !13533)
!13542 = !DILocation(line: 4518, column: 3, scope: !13499)
!13543 = !DILocation(line: 4519, column: 1, scope: !13499)
!13544 = distinct !DISubprogram(name: "iv_ca_set_remove_invariants", scope: !3, file: !3, line: 4536, type: !13545, scopeLine: 4537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13545 = !DISubroutineType(types: !13546)
!13546 = !{null, !2576, !1852}
!13547 = !DILocalVariable(name: "ivs", arg: 1, scope: !13544, file: !3, line: 4536, type: !2576)
!13548 = !DILocation(line: 4536, column: 44, scope: !13544)
!13549 = !DILocalVariable(name: "invs", arg: 2, scope: !13544, file: !3, line: 4536, type: !1852)
!13550 = !DILocation(line: 4536, column: 56, scope: !13544)
!13551 = !DILocalVariable(name: "bi", scope: !13544, file: !3, line: 4538, type: !4257)
!13552 = !DILocation(line: 4538, column: 19, scope: !13544)
!13553 = !DILocalVariable(name: "iid", scope: !13544, file: !3, line: 4539, type: !6)
!13554 = !DILocation(line: 4539, column: 12, scope: !13544)
!13555 = !DILocation(line: 4541, column: 8, scope: !13556)
!13556 = distinct !DILexicalBlock(scope: !13544, file: !3, line: 4541, column: 7)
!13557 = !DILocation(line: 4541, column: 7, scope: !13544)
!13558 = !DILocation(line: 4542, column: 5, scope: !13556)
!13559 = !DILocation(line: 4544, column: 3, scope: !13560)
!13560 = distinct !DILexicalBlock(scope: !13544, file: !3, line: 4544, column: 3)
!13561 = !DILocation(line: 4544, column: 3, scope: !13562)
!13562 = distinct !DILexicalBlock(scope: !13560, file: !3, line: 4544, column: 3)
!13563 = !DILocation(line: 4546, column: 7, scope: !13564)
!13564 = distinct !DILexicalBlock(scope: !13562, file: !3, line: 4545, column: 5)
!13565 = !DILocation(line: 4546, column: 12, scope: !13564)
!13566 = !DILocation(line: 4546, column: 29, scope: !13564)
!13567 = !DILocation(line: 4546, column: 33, scope: !13564)
!13568 = !DILocation(line: 4547, column: 11, scope: !13569)
!13569 = distinct !DILexicalBlock(scope: !13564, file: !3, line: 4547, column: 11)
!13570 = !DILocation(line: 4547, column: 16, scope: !13569)
!13571 = !DILocation(line: 4547, column: 33, scope: !13569)
!13572 = !DILocation(line: 4547, column: 38, scope: !13569)
!13573 = !DILocation(line: 4547, column: 11, scope: !13564)
!13574 = !DILocation(line: 4548, column: 2, scope: !13569)
!13575 = !DILocation(line: 4548, column: 7, scope: !13569)
!13576 = !DILocation(line: 4548, column: 13, scope: !13569)
!13577 = !DILocation(line: 4549, column: 5, scope: !13564)
!13578 = distinct !{!13578, !13559, !13579}
!13579 = !DILocation(line: 4549, column: 5, scope: !13560)
!13580 = !DILocation(line: 4550, column: 1, scope: !13544)
!13581 = distinct !DISubprogram(name: "sub_costs", scope: !3, file: !3, line: 2522, type: !9832, scopeLine: 2523, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13582 = !DILocalVariable(name: "cost1", arg: 1, scope: !13581, file: !3, line: 2522, type: !2487)
!13583 = !DILocation(line: 2522, column: 22, scope: !13581)
!13584 = !DILocalVariable(name: "cost2", arg: 2, scope: !13581, file: !3, line: 2522, type: !2487)
!13585 = !DILocation(line: 2522, column: 39, scope: !13581)
!13586 = !DILocation(line: 2524, column: 23, scope: !13581)
!13587 = !DILocation(line: 2524, column: 9, scope: !13581)
!13588 = !DILocation(line: 2524, column: 14, scope: !13581)
!13589 = !DILocation(line: 2525, column: 29, scope: !13581)
!13590 = !DILocation(line: 2525, column: 9, scope: !13581)
!13591 = !DILocation(line: 2525, column: 20, scope: !13581)
!13592 = !DILocation(line: 2527, column: 10, scope: !13581)
!13593 = !DILocation(line: 2527, column: 3, scope: !13581)
!13594 = distinct !DISubprogram(name: "iv_ca_recount_cost", scope: !3, file: !3, line: 4524, type: !5003, scopeLine: 4525, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13595 = !DILocalVariable(name: "data", arg: 1, scope: !13594, file: !3, line: 4524, type: !2530)
!13596 = !DILocation(line: 4524, column: 41, scope: !13594)
!13597 = !DILocalVariable(name: "ivs", arg: 2, scope: !13594, file: !3, line: 4524, type: !2576)
!13598 = !DILocation(line: 4524, column: 61, scope: !13594)
!13599 = !DILocalVariable(name: "cost", scope: !13594, file: !3, line: 4526, type: !2487)
!13600 = !DILocation(line: 4526, column: 13, scope: !13594)
!13601 = !DILocation(line: 4526, column: 20, scope: !13594)
!13602 = !DILocation(line: 4526, column: 25, scope: !13594)
!13603 = !DILocation(line: 4527, column: 16, scope: !13594)
!13604 = !DILocation(line: 4527, column: 21, scope: !13594)
!13605 = !DILocation(line: 4527, column: 8, scope: !13594)
!13606 = !DILocation(line: 4527, column: 13, scope: !13594)
!13607 = !DILocation(line: 4528, column: 45, scope: !13594)
!13608 = !DILocation(line: 4528, column: 51, scope: !13594)
!13609 = !DILocation(line: 4528, column: 56, scope: !13594)
!13610 = !DILocation(line: 4528, column: 16, scope: !13594)
!13611 = !DILocation(line: 4528, column: 8, scope: !13594)
!13612 = !DILocation(line: 4528, column: 13, scope: !13594)
!13613 = !DILocation(line: 4530, column: 3, scope: !13594)
!13614 = !DILocation(line: 4530, column: 8, scope: !13594)
!13615 = !DILocation(line: 4530, column: 15, scope: !13594)
!13616 = !DILocation(line: 4531, column: 1, scope: !13594)
!13617 = distinct !DISubprogram(name: "iv_ca_set_add_invariants", scope: !3, file: !3, line: 4591, type: !13545, scopeLine: 4592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13618 = !DILocalVariable(name: "ivs", arg: 1, scope: !13617, file: !3, line: 4591, type: !2576)
!13619 = !DILocation(line: 4591, column: 41, scope: !13617)
!13620 = !DILocalVariable(name: "invs", arg: 2, scope: !13617, file: !3, line: 4591, type: !1852)
!13621 = !DILocation(line: 4591, column: 53, scope: !13617)
!13622 = !DILocalVariable(name: "bi", scope: !13617, file: !3, line: 4593, type: !4257)
!13623 = !DILocation(line: 4593, column: 19, scope: !13617)
!13624 = !DILocalVariable(name: "iid", scope: !13617, file: !3, line: 4594, type: !6)
!13625 = !DILocation(line: 4594, column: 12, scope: !13617)
!13626 = !DILocation(line: 4596, column: 8, scope: !13627)
!13627 = distinct !DILexicalBlock(scope: !13617, file: !3, line: 4596, column: 7)
!13628 = !DILocation(line: 4596, column: 7, scope: !13617)
!13629 = !DILocation(line: 4597, column: 5, scope: !13627)
!13630 = !DILocation(line: 4599, column: 3, scope: !13631)
!13631 = distinct !DILexicalBlock(scope: !13617, file: !3, line: 4599, column: 3)
!13632 = !DILocation(line: 4599, column: 3, scope: !13633)
!13633 = distinct !DILexicalBlock(scope: !13631, file: !3, line: 4599, column: 3)
!13634 = !DILocation(line: 4601, column: 7, scope: !13635)
!13635 = distinct !DILexicalBlock(scope: !13633, file: !3, line: 4600, column: 5)
!13636 = !DILocation(line: 4601, column: 12, scope: !13635)
!13637 = !DILocation(line: 4601, column: 29, scope: !13635)
!13638 = !DILocation(line: 4601, column: 33, scope: !13635)
!13639 = !DILocation(line: 4602, column: 11, scope: !13640)
!13640 = distinct !DILexicalBlock(scope: !13635, file: !3, line: 4602, column: 11)
!13641 = !DILocation(line: 4602, column: 16, scope: !13640)
!13642 = !DILocation(line: 4602, column: 33, scope: !13640)
!13643 = !DILocation(line: 4602, column: 38, scope: !13640)
!13644 = !DILocation(line: 4602, column: 11, scope: !13635)
!13645 = !DILocation(line: 4603, column: 2, scope: !13640)
!13646 = !DILocation(line: 4603, column: 7, scope: !13640)
!13647 = !DILocation(line: 4603, column: 13, scope: !13640)
!13648 = !DILocation(line: 4604, column: 5, scope: !13635)
!13649 = distinct !{!13649, !13630, !13650}
!13650 = !DILocation(line: 4604, column: 5, scope: !13631)
!13651 = !DILocation(line: 4605, column: 1, scope: !13617)
!13652 = distinct !DISubprogram(name: "iv_ca_has_deps", scope: !3, file: !3, line: 4692, type: !13653, scopeLine: 4693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13653 = !DISubroutineType(types: !13654)
!13654 = !{!136, !2576, !2468}
!13655 = !DILocalVariable(name: "ivs", arg: 1, scope: !13652, file: !3, line: 4692, type: !2576)
!13656 = !DILocation(line: 4692, column: 31, scope: !13652)
!13657 = !DILocalVariable(name: "cp", arg: 2, scope: !13652, file: !3, line: 4692, type: !2468)
!13658 = !DILocation(line: 4692, column: 54, scope: !13652)
!13659 = !DILocalVariable(name: "i", scope: !13652, file: !3, line: 4694, type: !6)
!13660 = !DILocation(line: 4694, column: 12, scope: !13652)
!13661 = !DILocalVariable(name: "bi", scope: !13652, file: !3, line: 4695, type: !4257)
!13662 = !DILocation(line: 4695, column: 19, scope: !13652)
!13663 = !DILocation(line: 4697, column: 8, scope: !13664)
!13664 = distinct !DILexicalBlock(scope: !13652, file: !3, line: 4697, column: 7)
!13665 = !DILocation(line: 4697, column: 12, scope: !13664)
!13666 = !DILocation(line: 4697, column: 7, scope: !13652)
!13667 = !DILocation(line: 4698, column: 5, scope: !13664)
!13668 = !DILocation(line: 4700, column: 3, scope: !13669)
!13669 = distinct !DILexicalBlock(scope: !13652, file: !3, line: 4700, column: 3)
!13670 = !DILocation(line: 4700, column: 3, scope: !13671)
!13671 = distinct !DILexicalBlock(scope: !13669, file: !3, line: 4700, column: 3)
!13672 = !DILocation(line: 4702, column: 11, scope: !13673)
!13673 = distinct !DILexicalBlock(scope: !13674, file: !3, line: 4702, column: 11)
!13674 = distinct !DILexicalBlock(scope: !13671, file: !3, line: 4701, column: 5)
!13675 = !DILocation(line: 4702, column: 16, scope: !13673)
!13676 = !DILocation(line: 4702, column: 33, scope: !13673)
!13677 = !DILocation(line: 4702, column: 36, scope: !13673)
!13678 = !DILocation(line: 4702, column: 11, scope: !13674)
!13679 = !DILocation(line: 4703, column: 2, scope: !13673)
!13680 = !DILocation(line: 4704, column: 5, scope: !13674)
!13681 = distinct !{!13681, !13668, !13682}
!13682 = !DILocation(line: 4704, column: 5, scope: !13669)
!13683 = !DILocation(line: 4706, column: 3, scope: !13652)
!13684 = !DILocation(line: 4707, column: 1, scope: !13652)
!13685 = distinct !DISubprogram(name: "iv_ca_n_cands", scope: !3, file: !3, line: 4813, type: !13686, scopeLine: 4814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13686 = !DISubroutineType(types: !13687)
!13687 = !{!6, !2576}
!13688 = !DILocalVariable(name: "ivs", arg: 1, scope: !13685, file: !3, line: 4813, type: !2576)
!13689 = !DILocation(line: 4813, column: 30, scope: !13685)
!13690 = !DILocation(line: 4815, column: 10, scope: !13685)
!13691 = !DILocation(line: 4815, column: 15, scope: !13685)
!13692 = !DILocation(line: 4815, column: 3, scope: !13685)
!13693 = distinct !DISubprogram(name: "iv_ca_delta_reverse", scope: !3, file: !3, line: 4758, type: !13694, scopeLine: 4759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13694 = !DISubroutineType(types: !13695)
!13695 = !{!2592, !2592}
!13696 = !DILocalVariable(name: "delta", arg: 1, scope: !13693, file: !3, line: 4758, type: !2592)
!13697 = !DILocation(line: 4758, column: 42, scope: !13693)
!13698 = !DILocalVariable(name: "act", scope: !13693, file: !3, line: 4760, type: !2592)
!13699 = !DILocation(line: 4760, column: 23, scope: !13693)
!13700 = !DILocalVariable(name: "next", scope: !13693, file: !3, line: 4760, type: !2592)
!13701 = !DILocation(line: 4760, column: 29, scope: !13693)
!13702 = !DILocalVariable(name: "prev", scope: !13693, file: !3, line: 4760, type: !2592)
!13703 = !DILocation(line: 4760, column: 36, scope: !13693)
!13704 = !DILocalVariable(name: "tmp", scope: !13693, file: !3, line: 4761, type: !2468)
!13705 = !DILocation(line: 4761, column: 21, scope: !13693)
!13706 = !DILocation(line: 4763, column: 14, scope: !13707)
!13707 = distinct !DILexicalBlock(scope: !13693, file: !3, line: 4763, column: 3)
!13708 = !DILocation(line: 4763, column: 12, scope: !13707)
!13709 = !DILocation(line: 4763, column: 8, scope: !13707)
!13710 = !DILocation(line: 4763, column: 21, scope: !13711)
!13711 = distinct !DILexicalBlock(scope: !13707, file: !3, line: 4763, column: 3)
!13712 = !DILocation(line: 4763, column: 3, scope: !13707)
!13713 = !DILocation(line: 4765, column: 14, scope: !13714)
!13714 = distinct !DILexicalBlock(scope: !13711, file: !3, line: 4764, column: 5)
!13715 = !DILocation(line: 4765, column: 19, scope: !13714)
!13716 = !DILocation(line: 4765, column: 12, scope: !13714)
!13717 = !DILocation(line: 4766, column: 26, scope: !13714)
!13718 = !DILocation(line: 4766, column: 7, scope: !13714)
!13719 = !DILocation(line: 4766, column: 12, scope: !13714)
!13720 = !DILocation(line: 4766, column: 24, scope: !13714)
!13721 = !DILocation(line: 4767, column: 14, scope: !13714)
!13722 = !DILocation(line: 4767, column: 12, scope: !13714)
!13723 = !DILocation(line: 4769, column: 13, scope: !13714)
!13724 = !DILocation(line: 4769, column: 18, scope: !13714)
!13725 = !DILocation(line: 4769, column: 11, scope: !13714)
!13726 = !DILocation(line: 4770, column: 21, scope: !13714)
!13727 = !DILocation(line: 4770, column: 26, scope: !13714)
!13728 = !DILocation(line: 4770, column: 7, scope: !13714)
!13729 = !DILocation(line: 4770, column: 12, scope: !13714)
!13730 = !DILocation(line: 4770, column: 19, scope: !13714)
!13731 = !DILocation(line: 4771, column: 21, scope: !13714)
!13732 = !DILocation(line: 4771, column: 7, scope: !13714)
!13733 = !DILocation(line: 4771, column: 12, scope: !13714)
!13734 = !DILocation(line: 4771, column: 19, scope: !13714)
!13735 = !DILocation(line: 4772, column: 5, scope: !13714)
!13736 = !DILocation(line: 4763, column: 32, scope: !13711)
!13737 = !DILocation(line: 4763, column: 30, scope: !13711)
!13738 = !DILocation(line: 4763, column: 3, scope: !13711)
!13739 = distinct !{!13739, !13712, !13740}
!13740 = !DILocation(line: 4772, column: 5, scope: !13707)
!13741 = !DILocation(line: 4774, column: 10, scope: !13693)
!13742 = !DILocation(line: 4774, column: 3, scope: !13693)
!13743 = distinct !DISubprogram(name: "iv_ca_prune", scope: !3, file: !3, line: 5025, type: !13744, scopeLine: 5027, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13744 = !DISubroutineType(types: !13745)
!13745 = !{!2487, !2530, !2576, !2472, !13304}
!13746 = !DILocalVariable(name: "data", arg: 1, scope: !13743, file: !3, line: 5025, type: !2530)
!13747 = !DILocation(line: 5025, column: 34, scope: !13743)
!13748 = !DILocalVariable(name: "ivs", arg: 2, scope: !13743, file: !3, line: 5025, type: !2576)
!13749 = !DILocation(line: 5025, column: 54, scope: !13743)
!13750 = !DILocalVariable(name: "except_cand", arg: 3, scope: !13743, file: !3, line: 5026, type: !2472)
!13751 = !DILocation(line: 5026, column: 23, scope: !13743)
!13752 = !DILocalVariable(name: "delta", arg: 4, scope: !13743, file: !3, line: 5026, type: !13304)
!13753 = !DILocation(line: 5026, column: 57, scope: !13743)
!13754 = !DILocalVariable(name: "bi", scope: !13743, file: !3, line: 5028, type: !4257)
!13755 = !DILocation(line: 5028, column: 19, scope: !13743)
!13756 = !DILocalVariable(name: "act_delta", scope: !13743, file: !3, line: 5029, type: !2592)
!13757 = !DILocation(line: 5029, column: 23, scope: !13743)
!13758 = !DILocalVariable(name: "best_delta", scope: !13743, file: !3, line: 5029, type: !2592)
!13759 = !DILocation(line: 5029, column: 35, scope: !13743)
!13760 = !DILocalVariable(name: "i", scope: !13743, file: !3, line: 5030, type: !6)
!13761 = !DILocation(line: 5030, column: 12, scope: !13743)
!13762 = !DILocalVariable(name: "best_cost", scope: !13743, file: !3, line: 5031, type: !2487)
!13763 = !DILocation(line: 5031, column: 13, scope: !13743)
!13764 = !DILocalVariable(name: "acost", scope: !13743, file: !3, line: 5031, type: !2487)
!13765 = !DILocation(line: 5031, column: 24, scope: !13743)
!13766 = !DILocalVariable(name: "cand", scope: !13743, file: !3, line: 5032, type: !2472)
!13767 = !DILocation(line: 5032, column: 19, scope: !13743)
!13768 = !DILocation(line: 5034, column: 14, scope: !13743)
!13769 = !DILocation(line: 5035, column: 27, scope: !13743)
!13770 = !DILocation(line: 5035, column: 15, scope: !13743)
!13771 = !DILocation(line: 5037, column: 3, scope: !13772)
!13772 = distinct !DILexicalBlock(scope: !13743, file: !3, line: 5037, column: 3)
!13773 = !DILocation(line: 5037, column: 3, scope: !13774)
!13774 = distinct !DILexicalBlock(scope: !13772, file: !3, line: 5037, column: 3)
!13775 = !DILocation(line: 5039, column: 23, scope: !13776)
!13776 = distinct !DILexicalBlock(scope: !13774, file: !3, line: 5038, column: 5)
!13777 = !DILocation(line: 5039, column: 29, scope: !13776)
!13778 = !DILocation(line: 5039, column: 14, scope: !13776)
!13779 = !DILocation(line: 5039, column: 12, scope: !13776)
!13780 = !DILocation(line: 5041, column: 11, scope: !13781)
!13781 = distinct !DILexicalBlock(scope: !13776, file: !3, line: 5041, column: 11)
!13782 = !DILocation(line: 5041, column: 19, scope: !13781)
!13783 = !DILocation(line: 5041, column: 16, scope: !13781)
!13784 = !DILocation(line: 5041, column: 11, scope: !13776)
!13785 = !DILocation(line: 5042, column: 2, scope: !13781)
!13786 = !DILocation(line: 5044, column: 29, scope: !13776)
!13787 = !DILocation(line: 5044, column: 35, scope: !13776)
!13788 = !DILocation(line: 5044, column: 40, scope: !13776)
!13789 = !DILocation(line: 5044, column: 15, scope: !13776)
!13790 = !DILocation(line: 5046, column: 11, scope: !13791)
!13791 = distinct !DILexicalBlock(scope: !13776, file: !3, line: 5046, column: 11)
!13792 = !DILocation(line: 5046, column: 44, scope: !13791)
!13793 = !DILocation(line: 5046, column: 11, scope: !13776)
!13794 = !DILocation(line: 5048, column: 16, scope: !13795)
!13795 = distinct !DILexicalBlock(scope: !13791, file: !3, line: 5047, column: 2)
!13796 = !DILocation(line: 5049, column: 4, scope: !13795)
!13797 = !DILocation(line: 5050, column: 17, scope: !13795)
!13798 = !DILocation(line: 5050, column: 15, scope: !13795)
!13799 = !DILocation(line: 5051, column: 2, scope: !13795)
!13800 = !DILocation(line: 5053, column: 2, scope: !13791)
!13801 = !DILocation(line: 5054, column: 5, scope: !13776)
!13802 = distinct !{!13802, !13771, !13803}
!13803 = !DILocation(line: 5054, column: 5, scope: !13772)
!13804 = !DILocation(line: 5056, column: 8, scope: !13805)
!13805 = distinct !DILexicalBlock(scope: !13743, file: !3, line: 5056, column: 7)
!13806 = !DILocation(line: 5056, column: 7, scope: !13743)
!13807 = !DILocation(line: 5058, column: 8, scope: !13808)
!13808 = distinct !DILexicalBlock(scope: !13805, file: !3, line: 5057, column: 5)
!13809 = !DILocation(line: 5058, column: 14, scope: !13808)
!13810 = !DILocation(line: 5059, column: 7, scope: !13808)
!13811 = !DILocation(line: 5063, column: 23, scope: !13743)
!13812 = !DILocation(line: 5063, column: 29, scope: !13743)
!13813 = !DILocation(line: 5063, column: 34, scope: !13743)
!13814 = !DILocation(line: 5063, column: 3, scope: !13743)
!13815 = !DILocation(line: 5064, column: 28, scope: !13743)
!13816 = !DILocation(line: 5064, column: 34, scope: !13743)
!13817 = !DILocation(line: 5064, column: 39, scope: !13743)
!13818 = !DILocation(line: 5064, column: 52, scope: !13743)
!13819 = !DILocation(line: 5064, column: 15, scope: !13743)
!13820 = !DILocation(line: 5065, column: 23, scope: !13743)
!13821 = !DILocation(line: 5065, column: 29, scope: !13743)
!13822 = !DILocation(line: 5065, column: 34, scope: !13743)
!13823 = !DILocation(line: 5065, column: 3, scope: !13743)
!13824 = !DILocation(line: 5066, column: 30, scope: !13743)
!13825 = !DILocation(line: 5066, column: 43, scope: !13743)
!13826 = !DILocation(line: 5066, column: 42, scope: !13743)
!13827 = !DILocation(line: 5066, column: 12, scope: !13743)
!13828 = !DILocation(line: 5066, column: 4, scope: !13743)
!13829 = !DILocation(line: 5066, column: 10, scope: !13743)
!13830 = !DILocation(line: 5067, column: 3, scope: !13743)
!13831 = !DILocation(line: 5068, column: 1, scope: !13743)
!13832 = distinct !DISubprogram(name: "iv_ca_delta_join", scope: !3, file: !3, line: 4730, type: !13833, scopeLine: 4731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13833 = !DISubroutineType(types: !13834)
!13834 = !{!2592, !2592, !2592}
!13835 = !DILocalVariable(name: "l1", arg: 1, scope: !13832, file: !3, line: 4730, type: !2592)
!13836 = !DILocation(line: 4730, column: 39, scope: !13832)
!13837 = !DILocalVariable(name: "l2", arg: 2, scope: !13832, file: !3, line: 4730, type: !2592)
!13838 = !DILocation(line: 4730, column: 63, scope: !13832)
!13839 = !DILocalVariable(name: "last", scope: !13832, file: !3, line: 4732, type: !2592)
!13840 = !DILocation(line: 4732, column: 23, scope: !13832)
!13841 = !DILocation(line: 4734, column: 8, scope: !13842)
!13842 = distinct !DILexicalBlock(scope: !13832, file: !3, line: 4734, column: 7)
!13843 = !DILocation(line: 4734, column: 7, scope: !13832)
!13844 = !DILocation(line: 4735, column: 12, scope: !13842)
!13845 = !DILocation(line: 4735, column: 5, scope: !13842)
!13846 = !DILocation(line: 4737, column: 8, scope: !13847)
!13847 = distinct !DILexicalBlock(scope: !13832, file: !3, line: 4737, column: 7)
!13848 = !DILocation(line: 4737, column: 7, scope: !13832)
!13849 = !DILocation(line: 4738, column: 12, scope: !13847)
!13850 = !DILocation(line: 4738, column: 5, scope: !13847)
!13851 = !DILocation(line: 4740, column: 15, scope: !13852)
!13852 = distinct !DILexicalBlock(scope: !13832, file: !3, line: 4740, column: 3)
!13853 = !DILocation(line: 4740, column: 13, scope: !13852)
!13854 = !DILocation(line: 4740, column: 8, scope: !13852)
!13855 = !DILocation(line: 4740, column: 19, scope: !13856)
!13856 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4740, column: 3)
!13857 = !DILocation(line: 4740, column: 25, scope: !13856)
!13858 = !DILocation(line: 4740, column: 3, scope: !13852)
!13859 = !DILocation(line: 4741, column: 5, scope: !13856)
!13860 = !DILocation(line: 4740, column: 45, scope: !13856)
!13861 = !DILocation(line: 4740, column: 51, scope: !13856)
!13862 = !DILocation(line: 4740, column: 43, scope: !13856)
!13863 = !DILocation(line: 4740, column: 3, scope: !13856)
!13864 = distinct !{!13864, !13858, !13865}
!13865 = !DILocation(line: 4741, column: 5, scope: !13852)
!13866 = !DILocation(line: 4742, column: 23, scope: !13832)
!13867 = !DILocation(line: 4742, column: 3, scope: !13832)
!13868 = !DILocation(line: 4742, column: 9, scope: !13832)
!13869 = !DILocation(line: 4742, column: 21, scope: !13832)
!13870 = !DILocation(line: 4744, column: 10, scope: !13832)
!13871 = !DILocation(line: 4744, column: 3, scope: !13832)
!13872 = !DILocation(line: 4745, column: 1, scope: !13832)
!13873 = distinct !DISubprogram(name: "iv_ca_narrow", scope: !3, file: !3, line: 4940, type: !13744, scopeLine: 4942, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!13874 = !DILocalVariable(name: "data", arg: 1, scope: !13873, file: !3, line: 4940, type: !2530)
!13875 = !DILocation(line: 4940, column: 35, scope: !13873)
!13876 = !DILocalVariable(name: "ivs", arg: 2, scope: !13873, file: !3, line: 4940, type: !2576)
!13877 = !DILocation(line: 4940, column: 55, scope: !13873)
!13878 = !DILocalVariable(name: "cand", arg: 3, scope: !13873, file: !3, line: 4941, type: !2472)
!13879 = !DILocation(line: 4941, column: 24, scope: !13873)
!13880 = !DILocalVariable(name: "delta", arg: 4, scope: !13873, file: !3, line: 4941, type: !13304)
!13881 = !DILocation(line: 4941, column: 51, scope: !13873)
!13882 = !DILocalVariable(name: "i", scope: !13873, file: !3, line: 4943, type: !6)
!13883 = !DILocation(line: 4943, column: 12, scope: !13873)
!13884 = !DILocalVariable(name: "ci", scope: !13873, file: !3, line: 4943, type: !6)
!13885 = !DILocation(line: 4943, column: 15, scope: !13873)
!13886 = !DILocalVariable(name: "use", scope: !13873, file: !3, line: 4944, type: !2457)
!13887 = !DILocation(line: 4944, column: 18, scope: !13873)
!13888 = !DILocalVariable(name: "old_cp", scope: !13873, file: !3, line: 4945, type: !2468)
!13889 = !DILocation(line: 4945, column: 21, scope: !13873)
!13890 = !DILocalVariable(name: "new_cp", scope: !13873, file: !3, line: 4945, type: !2468)
!13891 = !DILocation(line: 4945, column: 30, scope: !13873)
!13892 = !DILocalVariable(name: "cp", scope: !13873, file: !3, line: 4945, type: !2468)
!13893 = !DILocation(line: 4945, column: 39, scope: !13873)
!13894 = !DILocalVariable(name: "bi", scope: !13873, file: !3, line: 4946, type: !4257)
!13895 = !DILocation(line: 4946, column: 19, scope: !13873)
!13896 = !DILocalVariable(name: "cnd", scope: !13873, file: !3, line: 4947, type: !2472)
!13897 = !DILocation(line: 4947, column: 19, scope: !13873)
!13898 = !DILocalVariable(name: "cost", scope: !13873, file: !3, line: 4948, type: !2487)
!13899 = !DILocation(line: 4948, column: 13, scope: !13873)
!13900 = !DILocation(line: 4950, column: 4, scope: !13873)
!13901 = !DILocation(line: 4950, column: 10, scope: !13873)
!13902 = !DILocation(line: 4951, column: 10, scope: !13903)
!13903 = distinct !DILexicalBlock(scope: !13873, file: !3, line: 4951, column: 3)
!13904 = !DILocation(line: 4951, column: 8, scope: !13903)
!13905 = !DILocation(line: 4951, column: 15, scope: !13906)
!13906 = distinct !DILexicalBlock(scope: !13903, file: !3, line: 4951, column: 3)
!13907 = !DILocation(line: 4951, column: 30, scope: !13906)
!13908 = !DILocation(line: 4951, column: 19, scope: !13906)
!13909 = !DILocation(line: 4951, column: 17, scope: !13906)
!13910 = !DILocation(line: 4951, column: 3, scope: !13903)
!13911 = !DILocation(line: 4953, column: 21, scope: !13912)
!13912 = distinct !DILexicalBlock(scope: !13906, file: !3, line: 4952, column: 5)
!13913 = !DILocation(line: 4953, column: 27, scope: !13912)
!13914 = !DILocation(line: 4953, column: 13, scope: !13912)
!13915 = !DILocation(line: 4953, column: 11, scope: !13912)
!13916 = !DILocation(line: 4955, column: 36, scope: !13912)
!13917 = !DILocation(line: 4955, column: 41, scope: !13912)
!13918 = !DILocation(line: 4955, column: 16, scope: !13912)
!13919 = !DILocation(line: 4955, column: 14, scope: !13912)
!13920 = !DILocation(line: 4956, column: 11, scope: !13921)
!13921 = distinct !DILexicalBlock(scope: !13912, file: !3, line: 4956, column: 11)
!13922 = !DILocation(line: 4956, column: 19, scope: !13921)
!13923 = !DILocation(line: 4956, column: 27, scope: !13921)
!13924 = !DILocation(line: 4956, column: 24, scope: !13921)
!13925 = !DILocation(line: 4956, column: 11, scope: !13912)
!13926 = !DILocation(line: 4957, column: 2, scope: !13921)
!13927 = !DILocation(line: 4959, column: 14, scope: !13912)
!13928 = !DILocation(line: 4961, column: 11, scope: !13929)
!13929 = distinct !DILexicalBlock(scope: !13912, file: !3, line: 4961, column: 11)
!13930 = !DILocation(line: 4961, column: 17, scope: !13929)
!13931 = !DILocation(line: 4961, column: 11, scope: !13912)
!13932 = !DILocation(line: 4963, column: 4, scope: !13933)
!13933 = distinct !DILexicalBlock(scope: !13934, file: !3, line: 4963, column: 4)
!13934 = distinct !DILexicalBlock(scope: !13929, file: !3, line: 4962, column: 2)
!13935 = !DILocation(line: 4963, column: 4, scope: !13936)
!13936 = distinct !DILexicalBlock(scope: !13933, file: !3, line: 4963, column: 4)
!13937 = !DILocation(line: 4965, column: 12, scope: !13938)
!13938 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 4965, column: 12)
!13939 = distinct !DILexicalBlock(scope: !13936, file: !3, line: 4964, column: 6)
!13940 = !DILocation(line: 4965, column: 18, scope: !13938)
!13941 = !DILocation(line: 4965, column: 24, scope: !13938)
!13942 = !DILocation(line: 4965, column: 15, scope: !13938)
!13943 = !DILocation(line: 4965, column: 12, scope: !13939)
!13944 = !DILocation(line: 4966, column: 3, scope: !13938)
!13945 = !DILocation(line: 4968, column: 23, scope: !13939)
!13946 = !DILocation(line: 4968, column: 29, scope: !13939)
!13947 = !DILocation(line: 4968, column: 14, scope: !13939)
!13948 = !DILocation(line: 4968, column: 12, scope: !13939)
!13949 = !DILocation(line: 4970, column: 30, scope: !13939)
!13950 = !DILocation(line: 4970, column: 36, scope: !13939)
!13951 = !DILocation(line: 4970, column: 41, scope: !13939)
!13952 = !DILocation(line: 4970, column: 13, scope: !13939)
!13953 = !DILocation(line: 4970, column: 11, scope: !13939)
!13954 = !DILocation(line: 4971, column: 13, scope: !13955)
!13955 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 4971, column: 12)
!13956 = !DILocation(line: 4971, column: 12, scope: !13939)
!13957 = !DILocation(line: 4972, column: 3, scope: !13955)
!13958 = !DILocation(line: 4973, column: 29, scope: !13959)
!13959 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 4973, column: 12)
!13960 = !DILocation(line: 4973, column: 34, scope: !13959)
!13961 = !DILocation(line: 4973, column: 13, scope: !13959)
!13962 = !DILocation(line: 4973, column: 12, scope: !13939)
!13963 = !DILocation(line: 4974, column: 3, scope: !13959)
!13964 = !DILocation(line: 4976, column: 32, scope: !13965)
!13965 = distinct !DILexicalBlock(scope: !13939, file: !3, line: 4976, column: 12)
!13966 = !DILocation(line: 4976, column: 36, scope: !13965)
!13967 = !DILocation(line: 4976, column: 13, scope: !13965)
!13968 = !DILocation(line: 4976, column: 12, scope: !13939)
!13969 = !DILocation(line: 4977, column: 3, scope: !13965)
!13970 = !DILocation(line: 4979, column: 17, scope: !13939)
!13971 = !DILocation(line: 4979, column: 15, scope: !13939)
!13972 = !DILocation(line: 4980, column: 6, scope: !13939)
!13973 = distinct !{!13973, !13932, !13974}
!13974 = !DILocation(line: 4980, column: 6, scope: !13933)
!13975 = !DILocation(line: 4981, column: 2, scope: !13934)
!13976 = !DILocation(line: 4984, column: 4, scope: !13977)
!13977 = distinct !DILexicalBlock(scope: !13978, file: !3, line: 4984, column: 4)
!13978 = distinct !DILexicalBlock(scope: !13929, file: !3, line: 4983, column: 2)
!13979 = !DILocation(line: 4984, column: 4, scope: !13980)
!13980 = distinct !DILexicalBlock(scope: !13977, file: !3, line: 4984, column: 4)
!13981 = !DILocation(line: 4986, column: 12, scope: !13982)
!13982 = distinct !DILexicalBlock(scope: !13983, file: !3, line: 4986, column: 12)
!13983 = distinct !DILexicalBlock(scope: !13980, file: !3, line: 4985, column: 6)
!13984 = !DILocation(line: 4986, column: 18, scope: !13982)
!13985 = !DILocation(line: 4986, column: 24, scope: !13982)
!13986 = !DILocation(line: 4986, column: 15, scope: !13982)
!13987 = !DILocation(line: 4986, column: 12, scope: !13983)
!13988 = !DILocation(line: 4987, column: 3, scope: !13982)
!13989 = !DILocation(line: 4989, column: 23, scope: !13983)
!13990 = !DILocation(line: 4989, column: 29, scope: !13983)
!13991 = !DILocation(line: 4989, column: 14, scope: !13983)
!13992 = !DILocation(line: 4989, column: 12, scope: !13983)
!13993 = !DILocation(line: 4991, column: 30, scope: !13983)
!13994 = !DILocation(line: 4991, column: 36, scope: !13983)
!13995 = !DILocation(line: 4991, column: 41, scope: !13983)
!13996 = !DILocation(line: 4991, column: 13, scope: !13983)
!13997 = !DILocation(line: 4991, column: 11, scope: !13983)
!13998 = !DILocation(line: 4992, column: 13, scope: !13999)
!13999 = distinct !DILexicalBlock(scope: !13983, file: !3, line: 4992, column: 12)
!14000 = !DILocation(line: 4992, column: 12, scope: !13983)
!14001 = !DILocation(line: 4993, column: 3, scope: !13999)
!14002 = !DILocation(line: 4994, column: 29, scope: !14003)
!14003 = distinct !DILexicalBlock(scope: !13983, file: !3, line: 4994, column: 12)
!14004 = !DILocation(line: 4994, column: 34, scope: !14003)
!14005 = !DILocation(line: 4994, column: 13, scope: !14003)
!14006 = !DILocation(line: 4994, column: 12, scope: !13983)
!14007 = !DILocation(line: 4995, column: 3, scope: !14003)
!14008 = !DILocation(line: 4997, column: 32, scope: !14009)
!14009 = distinct !DILexicalBlock(scope: !13983, file: !3, line: 4997, column: 12)
!14010 = !DILocation(line: 4997, column: 36, scope: !14009)
!14011 = !DILocation(line: 4997, column: 13, scope: !14009)
!14012 = !DILocation(line: 4997, column: 12, scope: !13983)
!14013 = !DILocation(line: 4998, column: 3, scope: !14009)
!14014 = !DILocation(line: 5000, column: 17, scope: !13983)
!14015 = !DILocation(line: 5000, column: 15, scope: !13983)
!14016 = !DILocation(line: 5001, column: 6, scope: !13983)
!14017 = distinct !{!14017, !13976, !14018}
!14018 = !DILocation(line: 5001, column: 6, scope: !13977)
!14019 = !DILocation(line: 5004, column: 12, scope: !14020)
!14020 = distinct !DILexicalBlock(scope: !13912, file: !3, line: 5004, column: 11)
!14021 = !DILocation(line: 5004, column: 11, scope: !13912)
!14022 = !DILocation(line: 5006, column: 22, scope: !14023)
!14023 = distinct !DILexicalBlock(scope: !14020, file: !3, line: 5005, column: 2)
!14024 = !DILocation(line: 5006, column: 4, scope: !14023)
!14025 = !DILocation(line: 5007, column: 11, scope: !14023)
!14026 = !DILocation(line: 5007, column: 4, scope: !14023)
!14027 = !DILocation(line: 5010, column: 33, scope: !13912)
!14028 = !DILocation(line: 5010, column: 38, scope: !13912)
!14029 = !DILocation(line: 5010, column: 46, scope: !13912)
!14030 = !DILocation(line: 5010, column: 55, scope: !13912)
!14031 = !DILocation(line: 5010, column: 54, scope: !13912)
!14032 = !DILocation(line: 5010, column: 16, scope: !13912)
!14033 = !DILocation(line: 5010, column: 8, scope: !13912)
!14034 = !DILocation(line: 5010, column: 14, scope: !13912)
!14035 = !DILocation(line: 5011, column: 5, scope: !13912)
!14036 = !DILocation(line: 4951, column: 38, scope: !13906)
!14037 = !DILocation(line: 4951, column: 3, scope: !13906)
!14038 = distinct !{!14038, !13910, !14039}
!14039 = !DILocation(line: 5011, column: 5, scope: !13903)
!14040 = !DILocation(line: 5013, column: 23, scope: !13873)
!14041 = !DILocation(line: 5013, column: 29, scope: !13873)
!14042 = !DILocation(line: 5013, column: 35, scope: !13873)
!14043 = !DILocation(line: 5013, column: 34, scope: !13873)
!14044 = !DILocation(line: 5013, column: 3, scope: !13873)
!14045 = !DILocation(line: 5014, column: 22, scope: !13873)
!14046 = !DILocation(line: 5014, column: 10, scope: !13873)
!14047 = !DILocation(line: 5015, column: 23, scope: !13873)
!14048 = !DILocation(line: 5015, column: 29, scope: !13873)
!14049 = !DILocation(line: 5015, column: 35, scope: !13873)
!14050 = !DILocation(line: 5015, column: 34, scope: !13873)
!14051 = !DILocation(line: 5015, column: 3, scope: !13873)
!14052 = !DILocation(line: 5017, column: 10, scope: !13873)
!14053 = !DILocation(line: 5017, column: 3, scope: !13873)
!14054 = !DILocation(line: 5018, column: 1, scope: !13873)
!14055 = distinct !DISubprogram(name: "bmp_iter_and_init", scope: !1074, file: !1074, line: 266, type: !14056, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14056 = !DISubroutineType(types: !14057)
!14057 = !{null, !5545, !5546, !5546, !6, !2584}
!14058 = !DILocalVariable(name: "bi", arg: 1, scope: !14055, file: !1074, line: 266, type: !5545)
!14059 = !DILocation(line: 266, column: 37, scope: !14055)
!14060 = !DILocalVariable(name: "map1", arg: 2, scope: !14055, file: !1074, line: 266, type: !5546)
!14061 = !DILocation(line: 266, column: 54, scope: !14055)
!14062 = !DILocalVariable(name: "map2", arg: 3, scope: !14055, file: !1074, line: 266, type: !5546)
!14063 = !DILocation(line: 266, column: 73, scope: !14055)
!14064 = !DILocalVariable(name: "start_bit", arg: 4, scope: !14055, file: !1074, line: 267, type: !6)
!14065 = !DILocation(line: 267, column: 15, scope: !14055)
!14066 = !DILocalVariable(name: "bit_no", arg: 5, scope: !14055, file: !1074, line: 267, type: !2584)
!14067 = !DILocation(line: 267, column: 36, scope: !14055)
!14068 = !DILocation(line: 269, column: 14, scope: !14055)
!14069 = !DILocation(line: 269, column: 20, scope: !14055)
!14070 = !DILocation(line: 269, column: 3, scope: !14055)
!14071 = !DILocation(line: 269, column: 7, scope: !14055)
!14072 = !DILocation(line: 269, column: 12, scope: !14055)
!14073 = !DILocation(line: 270, column: 14, scope: !14055)
!14074 = !DILocation(line: 270, column: 20, scope: !14055)
!14075 = !DILocation(line: 270, column: 3, scope: !14055)
!14076 = !DILocation(line: 270, column: 7, scope: !14055)
!14077 = !DILocation(line: 270, column: 12, scope: !14055)
!14078 = !DILocation(line: 274, column: 3, scope: !14055)
!14079 = !DILocation(line: 276, column: 12, scope: !14080)
!14080 = distinct !DILexicalBlock(scope: !14081, file: !1074, line: 276, column: 11)
!14081 = distinct !DILexicalBlock(scope: !14055, file: !1074, line: 275, column: 5)
!14082 = !DILocation(line: 276, column: 16, scope: !14080)
!14083 = !DILocation(line: 276, column: 11, scope: !14081)
!14084 = !DILocation(line: 278, column: 4, scope: !14085)
!14085 = distinct !DILexicalBlock(scope: !14080, file: !1074, line: 277, column: 2)
!14086 = !DILocation(line: 278, column: 8, scope: !14085)
!14087 = !DILocation(line: 278, column: 13, scope: !14085)
!14088 = !DILocation(line: 279, column: 4, scope: !14085)
!14089 = !DILocation(line: 282, column: 11, scope: !14090)
!14090 = distinct !DILexicalBlock(scope: !14081, file: !1074, line: 282, column: 11)
!14091 = !DILocation(line: 282, column: 15, scope: !14090)
!14092 = !DILocation(line: 282, column: 21, scope: !14090)
!14093 = !DILocation(line: 282, column: 29, scope: !14090)
!14094 = !DILocation(line: 282, column: 39, scope: !14090)
!14095 = !DILocation(line: 282, column: 26, scope: !14090)
!14096 = !DILocation(line: 282, column: 11, scope: !14081)
!14097 = !DILocation(line: 283, column: 2, scope: !14090)
!14098 = !DILocation(line: 284, column: 18, scope: !14081)
!14099 = !DILocation(line: 284, column: 22, scope: !14081)
!14100 = !DILocation(line: 284, column: 28, scope: !14081)
!14101 = !DILocation(line: 284, column: 7, scope: !14081)
!14102 = !DILocation(line: 284, column: 11, scope: !14081)
!14103 = !DILocation(line: 284, column: 16, scope: !14081)
!14104 = distinct !{!14104, !14078, !14105}
!14105 = !DILocation(line: 285, column: 5, scope: !14055)
!14106 = !DILocation(line: 288, column: 3, scope: !14055)
!14107 = !DILocation(line: 290, column: 12, scope: !14108)
!14108 = distinct !DILexicalBlock(scope: !14109, file: !1074, line: 290, column: 11)
!14109 = distinct !DILexicalBlock(scope: !14055, file: !1074, line: 289, column: 5)
!14110 = !DILocation(line: 290, column: 16, scope: !14108)
!14111 = !DILocation(line: 290, column: 11, scope: !14109)
!14112 = !DILocation(line: 292, column: 15, scope: !14113)
!14113 = distinct !DILexicalBlock(scope: !14108, file: !1074, line: 291, column: 2)
!14114 = !DILocation(line: 292, column: 19, scope: !14113)
!14115 = !DILocation(line: 292, column: 24, scope: !14113)
!14116 = !DILocation(line: 292, column: 4, scope: !14113)
!14117 = !DILocation(line: 292, column: 8, scope: !14113)
!14118 = !DILocation(line: 292, column: 13, scope: !14113)
!14119 = !DILocation(line: 293, column: 4, scope: !14113)
!14120 = !DILocation(line: 296, column: 11, scope: !14121)
!14121 = distinct !DILexicalBlock(scope: !14109, file: !1074, line: 296, column: 11)
!14122 = !DILocation(line: 296, column: 15, scope: !14121)
!14123 = !DILocation(line: 296, column: 21, scope: !14121)
!14124 = !DILocation(line: 296, column: 29, scope: !14121)
!14125 = !DILocation(line: 296, column: 33, scope: !14121)
!14126 = !DILocation(line: 296, column: 39, scope: !14121)
!14127 = !DILocation(line: 296, column: 26, scope: !14121)
!14128 = !DILocation(line: 296, column: 11, scope: !14109)
!14129 = !DILocation(line: 297, column: 2, scope: !14121)
!14130 = !DILocation(line: 298, column: 18, scope: !14109)
!14131 = !DILocation(line: 298, column: 22, scope: !14109)
!14132 = !DILocation(line: 298, column: 28, scope: !14109)
!14133 = !DILocation(line: 298, column: 7, scope: !14109)
!14134 = !DILocation(line: 298, column: 11, scope: !14109)
!14135 = !DILocation(line: 298, column: 16, scope: !14109)
!14136 = distinct !{!14136, !14106, !14137}
!14137 = !DILocation(line: 299, column: 5, scope: !14055)
!14138 = !DILocation(line: 302, column: 7, scope: !14139)
!14139 = distinct !DILexicalBlock(scope: !14055, file: !1074, line: 302, column: 7)
!14140 = !DILocation(line: 302, column: 11, scope: !14139)
!14141 = !DILocation(line: 302, column: 17, scope: !14139)
!14142 = !DILocation(line: 302, column: 25, scope: !14139)
!14143 = !DILocation(line: 302, column: 29, scope: !14139)
!14144 = !DILocation(line: 302, column: 35, scope: !14139)
!14145 = !DILocation(line: 302, column: 22, scope: !14139)
!14146 = !DILocation(line: 302, column: 7, scope: !14055)
!14147 = !DILocation(line: 306, column: 11, scope: !14148)
!14148 = distinct !DILexicalBlock(scope: !14149, file: !1074, line: 306, column: 11)
!14149 = distinct !DILexicalBlock(scope: !14139, file: !1074, line: 303, column: 5)
!14150 = !DILocation(line: 306, column: 15, scope: !14148)
!14151 = !DILocation(line: 306, column: 21, scope: !14148)
!14152 = !DILocation(line: 306, column: 29, scope: !14148)
!14153 = !DILocation(line: 306, column: 39, scope: !14148)
!14154 = !DILocation(line: 306, column: 26, scope: !14148)
!14155 = !DILocation(line: 306, column: 11, scope: !14149)
!14156 = !DILocation(line: 307, column: 14, scope: !14148)
!14157 = !DILocation(line: 307, column: 18, scope: !14148)
!14158 = !DILocation(line: 307, column: 24, scope: !14148)
!14159 = !DILocation(line: 307, column: 29, scope: !14148)
!14160 = !DILocation(line: 307, column: 12, scope: !14148)
!14161 = !DILocation(line: 307, column: 2, scope: !14148)
!14162 = !DILocation(line: 309, column: 21, scope: !14149)
!14163 = !DILocation(line: 309, column: 31, scope: !14149)
!14164 = !DILocation(line: 309, column: 50, scope: !14149)
!14165 = !DILocation(line: 309, column: 7, scope: !14149)
!14166 = !DILocation(line: 309, column: 11, scope: !14149)
!14167 = !DILocation(line: 309, column: 19, scope: !14149)
!14168 = !DILocation(line: 310, column: 18, scope: !14149)
!14169 = !DILocation(line: 310, column: 22, scope: !14149)
!14170 = !DILocation(line: 310, column: 28, scope: !14149)
!14171 = !DILocation(line: 310, column: 33, scope: !14149)
!14172 = !DILocation(line: 310, column: 37, scope: !14149)
!14173 = !DILocation(line: 310, column: 48, scope: !14149)
!14174 = !DILocation(line: 310, column: 52, scope: !14149)
!14175 = !DILocation(line: 310, column: 58, scope: !14149)
!14176 = !DILocation(line: 310, column: 63, scope: !14149)
!14177 = !DILocation(line: 310, column: 67, scope: !14149)
!14178 = !DILocation(line: 310, column: 46, scope: !14149)
!14179 = !DILocation(line: 310, column: 7, scope: !14149)
!14180 = !DILocation(line: 310, column: 11, scope: !14149)
!14181 = !DILocation(line: 310, column: 16, scope: !14149)
!14182 = !DILocation(line: 311, column: 20, scope: !14149)
!14183 = !DILocation(line: 311, column: 30, scope: !14149)
!14184 = !DILocation(line: 311, column: 7, scope: !14149)
!14185 = !DILocation(line: 311, column: 11, scope: !14149)
!14186 = !DILocation(line: 311, column: 16, scope: !14149)
!14187 = !DILocation(line: 312, column: 5, scope: !14149)
!14188 = !DILocation(line: 317, column: 7, scope: !14189)
!14189 = distinct !DILexicalBlock(scope: !14139, file: !1074, line: 314, column: 5)
!14190 = !DILocation(line: 317, column: 11, scope: !14189)
!14191 = !DILocation(line: 317, column: 19, scope: !14189)
!14192 = !DILocation(line: 318, column: 7, scope: !14189)
!14193 = !DILocation(line: 318, column: 11, scope: !14189)
!14194 = !DILocation(line: 318, column: 16, scope: !14189)
!14195 = !DILocation(line: 325, column: 17, scope: !14055)
!14196 = !DILocation(line: 325, column: 21, scope: !14055)
!14197 = !DILocation(line: 325, column: 16, scope: !14055)
!14198 = !DILocation(line: 325, column: 13, scope: !14055)
!14199 = !DILocation(line: 327, column: 13, scope: !14055)
!14200 = !DILocation(line: 327, column: 4, scope: !14055)
!14201 = !DILocation(line: 327, column: 11, scope: !14055)
!14202 = !DILocation(line: 328, column: 1, scope: !14055)
!14203 = distinct !DISubprogram(name: "bmp_iter_and", scope: !1074, file: !1074, line: 440, type: !5635, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14204 = !DILocalVariable(name: "bi", arg: 1, scope: !14203, file: !1074, line: 440, type: !5545)
!14205 = !DILocation(line: 440, column: 32, scope: !14203)
!14206 = !DILocalVariable(name: "bit_no", arg: 2, scope: !14203, file: !1074, line: 440, type: !2584)
!14207 = !DILocation(line: 440, column: 46, scope: !14203)
!14208 = !DILocation(line: 443, column: 7, scope: !14209)
!14209 = distinct !DILexicalBlock(scope: !14203, file: !1074, line: 443, column: 7)
!14210 = !DILocation(line: 443, column: 11, scope: !14209)
!14211 = !DILocation(line: 443, column: 7, scope: !14203)
!14212 = !DILocation(line: 444, column: 5, scope: !14209)
!14213 = !DILabel(scope: !14214, name: "next_bit", file: !1074, line: 445)
!14214 = distinct !DILexicalBlock(scope: !14209, file: !1074, line: 444, column: 5)
!14215 = !DILocation(line: 445, column: 5, scope: !14214)
!14216 = !DILocation(line: 446, column: 7, scope: !14214)
!14217 = !DILocation(line: 446, column: 16, scope: !14214)
!14218 = !DILocation(line: 446, column: 20, scope: !14214)
!14219 = !DILocation(line: 446, column: 25, scope: !14214)
!14220 = !DILocation(line: 446, column: 14, scope: !14214)
!14221 = !DILocation(line: 448, column: 4, scope: !14222)
!14222 = distinct !DILexicalBlock(scope: !14214, file: !1074, line: 447, column: 2)
!14223 = !DILocation(line: 448, column: 8, scope: !14222)
!14224 = !DILocation(line: 448, column: 13, scope: !14222)
!14225 = !DILocation(line: 449, column: 5, scope: !14222)
!14226 = !DILocation(line: 449, column: 12, scope: !14222)
!14227 = distinct !{!14227, !14216, !14228}
!14228 = !DILocation(line: 450, column: 2, scope: !14214)
!14229 = !DILocation(line: 451, column: 7, scope: !14214)
!14230 = !DILocation(line: 457, column: 16, scope: !14203)
!14231 = !DILocation(line: 457, column: 15, scope: !14203)
!14232 = !DILocation(line: 457, column: 23, scope: !14203)
!14233 = !DILocation(line: 457, column: 42, scope: !14203)
!14234 = !DILocation(line: 458, column: 7, scope: !14203)
!14235 = !DILocation(line: 458, column: 26, scope: !14203)
!14236 = !DILocation(line: 457, column: 4, scope: !14203)
!14237 = !DILocation(line: 457, column: 11, scope: !14203)
!14238 = !DILocation(line: 459, column: 3, scope: !14203)
!14239 = !DILocation(line: 459, column: 7, scope: !14203)
!14240 = !DILocation(line: 459, column: 14, scope: !14203)
!14241 = !DILocation(line: 461, column: 3, scope: !14203)
!14242 = !DILocation(line: 464, column: 7, scope: !14243)
!14243 = distinct !DILexicalBlock(scope: !14203, file: !1074, line: 462, column: 5)
!14244 = !DILocation(line: 464, column: 14, scope: !14243)
!14245 = !DILocation(line: 464, column: 18, scope: !14243)
!14246 = !DILocation(line: 464, column: 26, scope: !14243)
!14247 = !DILocation(line: 466, column: 15, scope: !14248)
!14248 = distinct !DILexicalBlock(scope: !14243, file: !1074, line: 465, column: 2)
!14249 = !DILocation(line: 466, column: 19, scope: !14248)
!14250 = !DILocation(line: 466, column: 25, scope: !14248)
!14251 = !DILocation(line: 466, column: 30, scope: !14248)
!14252 = !DILocation(line: 466, column: 34, scope: !14248)
!14253 = !DILocation(line: 466, column: 45, scope: !14248)
!14254 = !DILocation(line: 466, column: 49, scope: !14248)
!14255 = !DILocation(line: 466, column: 55, scope: !14248)
!14256 = !DILocation(line: 466, column: 60, scope: !14248)
!14257 = !DILocation(line: 466, column: 64, scope: !14248)
!14258 = !DILocation(line: 466, column: 43, scope: !14248)
!14259 = !DILocation(line: 466, column: 4, scope: !14248)
!14260 = !DILocation(line: 466, column: 8, scope: !14248)
!14261 = !DILocation(line: 466, column: 13, scope: !14248)
!14262 = !DILocation(line: 467, column: 8, scope: !14263)
!14263 = distinct !DILexicalBlock(scope: !14248, file: !1074, line: 467, column: 8)
!14264 = !DILocation(line: 467, column: 12, scope: !14263)
!14265 = !DILocation(line: 467, column: 8, scope: !14248)
!14266 = !DILocation(line: 468, column: 6, scope: !14263)
!14267 = !DILocation(line: 469, column: 5, scope: !14248)
!14268 = !DILocation(line: 469, column: 12, scope: !14248)
!14269 = !DILocation(line: 470, column: 4, scope: !14248)
!14270 = !DILocation(line: 470, column: 8, scope: !14248)
!14271 = !DILocation(line: 470, column: 15, scope: !14248)
!14272 = distinct !{!14272, !14242, !14273}
!14273 = !DILocation(line: 471, column: 2, scope: !14243)
!14274 = !DILocation(line: 474, column: 7, scope: !14243)
!14275 = !DILocation(line: 478, column: 4, scope: !14276)
!14276 = distinct !DILexicalBlock(scope: !14243, file: !1074, line: 475, column: 2)
!14277 = !DILocation(line: 480, column: 19, scope: !14278)
!14278 = distinct !DILexicalBlock(scope: !14276, file: !1074, line: 479, column: 6)
!14279 = !DILocation(line: 480, column: 23, scope: !14278)
!14280 = !DILocation(line: 480, column: 29, scope: !14278)
!14281 = !DILocation(line: 480, column: 8, scope: !14278)
!14282 = !DILocation(line: 480, column: 12, scope: !14278)
!14283 = !DILocation(line: 480, column: 17, scope: !14278)
!14284 = !DILocation(line: 481, column: 13, scope: !14285)
!14285 = distinct !DILexicalBlock(scope: !14278, file: !1074, line: 481, column: 12)
!14286 = !DILocation(line: 481, column: 17, scope: !14285)
!14287 = !DILocation(line: 481, column: 12, scope: !14278)
!14288 = !DILocation(line: 482, column: 3, scope: !14285)
!14289 = !DILocation(line: 483, column: 6, scope: !14278)
!14290 = !DILocation(line: 484, column: 11, scope: !14276)
!14291 = !DILocation(line: 484, column: 15, scope: !14276)
!14292 = !DILocation(line: 484, column: 21, scope: !14276)
!14293 = !DILocation(line: 484, column: 28, scope: !14276)
!14294 = !DILocation(line: 484, column: 32, scope: !14276)
!14295 = !DILocation(line: 484, column: 38, scope: !14276)
!14296 = !DILocation(line: 484, column: 26, scope: !14276)
!14297 = distinct !{!14297, !14275, !14298}
!14298 = !DILocation(line: 484, column: 42, scope: !14276)
!14299 = !DILocation(line: 488, column: 4, scope: !14276)
!14300 = !DILocation(line: 488, column: 11, scope: !14276)
!14301 = !DILocation(line: 488, column: 15, scope: !14276)
!14302 = !DILocation(line: 488, column: 21, scope: !14276)
!14303 = !DILocation(line: 488, column: 28, scope: !14276)
!14304 = !DILocation(line: 488, column: 32, scope: !14276)
!14305 = !DILocation(line: 488, column: 38, scope: !14276)
!14306 = !DILocation(line: 488, column: 26, scope: !14276)
!14307 = !DILocation(line: 490, column: 19, scope: !14308)
!14308 = distinct !DILexicalBlock(scope: !14276, file: !1074, line: 489, column: 6)
!14309 = !DILocation(line: 490, column: 23, scope: !14308)
!14310 = !DILocation(line: 490, column: 29, scope: !14308)
!14311 = !DILocation(line: 490, column: 8, scope: !14308)
!14312 = !DILocation(line: 490, column: 12, scope: !14308)
!14313 = !DILocation(line: 490, column: 17, scope: !14308)
!14314 = !DILocation(line: 491, column: 13, scope: !14315)
!14315 = distinct !DILexicalBlock(scope: !14308, file: !1074, line: 491, column: 12)
!14316 = !DILocation(line: 491, column: 17, scope: !14315)
!14317 = !DILocation(line: 491, column: 12, scope: !14308)
!14318 = !DILocation(line: 492, column: 3, scope: !14315)
!14319 = distinct !{!14319, !14299, !14320}
!14320 = !DILocation(line: 493, column: 6, scope: !14276)
!14321 = !DILocation(line: 494, column: 2, scope: !14276)
!14322 = !DILocation(line: 495, column: 14, scope: !14243)
!14323 = !DILocation(line: 495, column: 18, scope: !14243)
!14324 = !DILocation(line: 495, column: 24, scope: !14243)
!14325 = !DILocation(line: 495, column: 32, scope: !14243)
!14326 = !DILocation(line: 495, column: 36, scope: !14243)
!14327 = !DILocation(line: 495, column: 42, scope: !14243)
!14328 = !DILocation(line: 495, column: 29, scope: !14243)
!14329 = distinct !{!14329, !14274, !14330}
!14330 = !DILocation(line: 495, column: 46, scope: !14243)
!14331 = !DILocation(line: 497, column: 17, scope: !14243)
!14332 = !DILocation(line: 497, column: 21, scope: !14243)
!14333 = !DILocation(line: 497, column: 27, scope: !14243)
!14334 = !DILocation(line: 497, column: 32, scope: !14243)
!14335 = !DILocation(line: 497, column: 8, scope: !14243)
!14336 = !DILocation(line: 497, column: 15, scope: !14243)
!14337 = !DILocation(line: 498, column: 7, scope: !14243)
!14338 = !DILocation(line: 498, column: 11, scope: !14243)
!14339 = !DILocation(line: 498, column: 19, scope: !14243)
!14340 = distinct !{!14340, !14241, !14341}
!14341 = !DILocation(line: 499, column: 5, scope: !14203)
!14342 = !DILocation(line: 500, column: 1, scope: !14203)
!14343 = distinct !DISubprogram(name: "create_new_iv", scope: !3, file: !3, line: 5303, type: !11641, scopeLine: 5304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14344 = !DILocalVariable(name: "data", arg: 1, scope: !14343, file: !3, line: 5303, type: !2530)
!14345 = !DILocation(line: 5303, column: 36, scope: !14343)
!14346 = !DILocalVariable(name: "cand", arg: 2, scope: !14343, file: !3, line: 5303, type: !2472)
!14347 = !DILocation(line: 5303, column: 58, scope: !14343)
!14348 = !DILocalVariable(name: "incr_pos", scope: !14343, file: !3, line: 5305, type: !4328)
!14349 = !DILocation(line: 5305, column: 24, scope: !14343)
!14350 = !DILocalVariable(name: "base", scope: !14343, file: !3, line: 5306, type: !1134)
!14351 = !DILocation(line: 5306, column: 8, scope: !14343)
!14352 = !DILocalVariable(name: "after", scope: !14343, file: !3, line: 5307, type: !136)
!14353 = !DILocation(line: 5307, column: 8, scope: !14343)
!14354 = !DILocation(line: 5309, column: 8, scope: !14355)
!14355 = distinct !DILexicalBlock(scope: !14343, file: !3, line: 5309, column: 7)
!14356 = !DILocation(line: 5309, column: 14, scope: !14355)
!14357 = !DILocation(line: 5309, column: 7, scope: !14343)
!14358 = !DILocation(line: 5310, column: 5, scope: !14355)
!14359 = !DILocation(line: 5312, column: 11, scope: !14343)
!14360 = !DILocation(line: 5312, column: 17, scope: !14343)
!14361 = !DILocation(line: 5312, column: 3, scope: !14343)
!14362 = !DILocation(line: 5315, column: 46, scope: !14363)
!14363 = distinct !DILexicalBlock(scope: !14343, file: !3, line: 5313, column: 5)
!14364 = !DILocation(line: 5315, column: 52, scope: !14363)
!14365 = !DILocation(line: 5315, column: 31, scope: !14363)
!14366 = !DILocation(line: 5315, column: 18, scope: !14363)
!14367 = !DILocation(line: 5316, column: 7, scope: !14363)
!14368 = !DILocation(line: 5319, column: 43, scope: !14363)
!14369 = !DILocation(line: 5319, column: 49, scope: !14363)
!14370 = !DILocation(line: 5319, column: 31, scope: !14363)
!14371 = !DILocation(line: 5319, column: 18, scope: !14363)
!14372 = !DILocation(line: 5320, column: 13, scope: !14363)
!14373 = !DILocation(line: 5321, column: 7, scope: !14363)
!14374 = !DILocation(line: 5324, column: 13, scope: !14363)
!14375 = !DILocation(line: 5324, column: 7, scope: !14363)
!14376 = !DILocation(line: 5327, column: 32, scope: !14363)
!14377 = !DILocation(line: 5327, column: 38, scope: !14363)
!14378 = !DILocation(line: 5327, column: 18, scope: !14363)
!14379 = !DILocation(line: 5328, column: 7, scope: !14363)
!14380 = !DILocation(line: 5332, column: 18, scope: !14363)
!14381 = !DILocation(line: 5332, column: 24, scope: !14363)
!14382 = !DILocation(line: 5332, column: 30, scope: !14363)
!14383 = !DILocation(line: 5332, column: 7, scope: !14363)
!14384 = !DILocation(line: 5332, column: 43, scope: !14363)
!14385 = !DILocation(line: 5332, column: 56, scope: !14363)
!14386 = !DILocation(line: 5333, column: 18, scope: !14363)
!14387 = !DILocation(line: 5333, column: 24, scope: !14363)
!14388 = !DILocation(line: 5333, column: 30, scope: !14363)
!14389 = !DILocation(line: 5333, column: 7, scope: !14363)
!14390 = !DILocation(line: 5333, column: 42, scope: !14363)
!14391 = !DILocation(line: 5333, column: 55, scope: !14363)
!14392 = !DILocation(line: 5336, column: 68, scope: !14363)
!14393 = !DILocation(line: 5336, column: 33, scope: !14363)
!14394 = !DILocation(line: 5336, column: 39, scope: !14363)
!14395 = !DILocation(line: 5336, column: 45, scope: !14363)
!14396 = !DILocation(line: 5336, column: 7, scope: !14363)
!14397 = !DILocation(line: 5336, column: 57, scope: !14363)
!14398 = !DILocation(line: 5336, column: 66, scope: !14363)
!14399 = !DILocation(line: 5338, column: 7, scope: !14363)
!14400 = !DILocation(line: 5341, column: 23, scope: !14343)
!14401 = !DILocation(line: 5341, column: 29, scope: !14343)
!14402 = !DILocation(line: 5341, column: 3, scope: !14343)
!14403 = !DILocation(line: 5342, column: 23, scope: !14343)
!14404 = !DILocation(line: 5342, column: 29, scope: !14343)
!14405 = !DILocation(line: 5342, column: 3, scope: !14343)
!14406 = !DILocation(line: 5344, column: 24, scope: !14343)
!14407 = !DILocation(line: 5344, column: 30, scope: !14343)
!14408 = !DILocation(line: 5344, column: 34, scope: !14343)
!14409 = !DILocation(line: 5344, column: 10, scope: !14343)
!14410 = !DILocation(line: 5344, column: 8, scope: !14343)
!14411 = !DILocation(line: 5346, column: 14, scope: !14343)
!14412 = !DILocation(line: 5346, column: 34, scope: !14343)
!14413 = !DILocation(line: 5346, column: 40, scope: !14343)
!14414 = !DILocation(line: 5346, column: 44, scope: !14343)
!14415 = !DILocation(line: 5346, column: 20, scope: !14343)
!14416 = !DILocation(line: 5347, column: 7, scope: !14343)
!14417 = !DILocation(line: 5347, column: 13, scope: !14343)
!14418 = !DILocation(line: 5347, column: 25, scope: !14343)
!14419 = !DILocation(line: 5347, column: 31, scope: !14343)
!14420 = !DILocation(line: 5348, column: 18, scope: !14343)
!14421 = !DILocation(line: 5348, column: 26, scope: !14343)
!14422 = !DILocation(line: 5348, column: 32, scope: !14343)
!14423 = !DILocation(line: 5348, column: 45, scope: !14343)
!14424 = !DILocation(line: 5348, column: 51, scope: !14343)
!14425 = !DILocation(line: 5346, column: 3, scope: !14343)
!14426 = !DILocation(line: 5349, column: 1, scope: !14343)
!14427 = distinct !DISubprogram(name: "gsi_last_bb", scope: !574, file: !574, line: 4450, type: !6029, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14428 = !DILocalVariable(name: "bb", arg: 1, scope: !14427, file: !574, line: 4450, type: !1399)
!14429 = !DILocation(line: 4450, column: 26, scope: !14427)
!14430 = !DILocalVariable(name: "i", scope: !14427, file: !574, line: 4452, type: !4328)
!14431 = !DILocation(line: 4452, column: 24, scope: !14427)
!14432 = !DILocalVariable(name: "seq", scope: !14427, file: !574, line: 4453, type: !1426)
!14433 = !DILocation(line: 4453, column: 14, scope: !14427)
!14434 = !DILocation(line: 4455, column: 17, scope: !14427)
!14435 = !DILocation(line: 4455, column: 9, scope: !14427)
!14436 = !DILocation(line: 4455, column: 7, scope: !14427)
!14437 = !DILocation(line: 4456, column: 28, scope: !14427)
!14438 = !DILocation(line: 4456, column: 11, scope: !14427)
!14439 = !DILocation(line: 4456, column: 5, scope: !14427)
!14440 = !DILocation(line: 4456, column: 9, scope: !14427)
!14441 = !DILocation(line: 4457, column: 11, scope: !14427)
!14442 = !DILocation(line: 4457, column: 5, scope: !14427)
!14443 = !DILocation(line: 4457, column: 9, scope: !14427)
!14444 = !DILocation(line: 4458, column: 10, scope: !14427)
!14445 = !DILocation(line: 4458, column: 5, scope: !14427)
!14446 = !DILocation(line: 4458, column: 8, scope: !14427)
!14447 = !DILocation(line: 4460, column: 3, scope: !14427)
!14448 = distinct !DISubprogram(name: "gimple_seq_last", scope: !574, file: !574, line: 178, type: !6095, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14449 = !DILocalVariable(name: "s", arg: 1, scope: !14448, file: !574, line: 178, type: !6097)
!14450 = !DILocation(line: 178, column: 35, scope: !14448)
!14451 = !DILocation(line: 180, column: 10, scope: !14448)
!14452 = !DILocation(line: 180, column: 14, scope: !14448)
!14453 = !DILocation(line: 180, column: 17, scope: !14448)
!14454 = !DILocation(line: 180, column: 3, scope: !14448)
!14455 = distinct !DISubprogram(name: "rewrite_use", scope: !3, file: !3, line: 5618, type: !14456, scopeLine: 5619, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14456 = !DISubroutineType(types: !14457)
!14457 = !{null, !2530, !2457, !2472}
!14458 = !DILocalVariable(name: "data", arg: 1, scope: !14455, file: !3, line: 5618, type: !2530)
!14459 = !DILocation(line: 5618, column: 34, scope: !14455)
!14460 = !DILocalVariable(name: "use", arg: 2, scope: !14455, file: !3, line: 5618, type: !2457)
!14461 = !DILocation(line: 5618, column: 55, scope: !14455)
!14462 = !DILocalVariable(name: "cand", arg: 3, scope: !14455, file: !3, line: 5618, type: !2472)
!14463 = !DILocation(line: 5618, column: 76, scope: !14455)
!14464 = !DILocation(line: 5620, column: 11, scope: !14455)
!14465 = !DILocation(line: 5620, column: 16, scope: !14455)
!14466 = !DILocation(line: 5620, column: 3, scope: !14455)
!14467 = !DILocation(line: 5623, column: 30, scope: !14468)
!14468 = distinct !DILexicalBlock(scope: !14455, file: !3, line: 5621, column: 5)
!14469 = !DILocation(line: 5623, column: 36, scope: !14468)
!14470 = !DILocation(line: 5623, column: 41, scope: !14468)
!14471 = !DILocation(line: 5623, column: 2, scope: !14468)
!14472 = !DILocation(line: 5624, column: 2, scope: !14468)
!14473 = !DILocation(line: 5627, column: 23, scope: !14468)
!14474 = !DILocation(line: 5627, column: 29, scope: !14468)
!14475 = !DILocation(line: 5627, column: 34, scope: !14468)
!14476 = !DILocation(line: 5627, column: 2, scope: !14468)
!14477 = !DILocation(line: 5628, column: 2, scope: !14468)
!14478 = !DILocation(line: 5631, column: 23, scope: !14468)
!14479 = !DILocation(line: 5631, column: 29, scope: !14468)
!14480 = !DILocation(line: 5631, column: 34, scope: !14468)
!14481 = !DILocation(line: 5631, column: 2, scope: !14468)
!14482 = !DILocation(line: 5632, column: 2, scope: !14468)
!14483 = !DILocation(line: 5635, column: 2, scope: !14468)
!14484 = !DILocation(line: 5636, column: 5, scope: !14468)
!14485 = !DILocation(line: 5638, column: 16, scope: !14455)
!14486 = !DILocation(line: 5638, column: 21, scope: !14455)
!14487 = !DILocation(line: 5638, column: 3, scope: !14455)
!14488 = !DILocation(line: 5639, column: 1, scope: !14455)
!14489 = distinct !DISubprogram(name: "rewrite_use_nonlinear_expr", scope: !3, file: !3, line: 5372, type: !14456, scopeLine: 5374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14490 = !DILocalVariable(name: "data", arg: 1, scope: !14489, file: !3, line: 5372, type: !2530)
!14491 = !DILocation(line: 5372, column: 49, scope: !14489)
!14492 = !DILocalVariable(name: "use", arg: 2, scope: !14489, file: !3, line: 5373, type: !2457)
!14493 = !DILocation(line: 5373, column: 23, scope: !14489)
!14494 = !DILocalVariable(name: "cand", arg: 3, scope: !14489, file: !3, line: 5373, type: !2472)
!14495 = !DILocation(line: 5373, column: 44, scope: !14489)
!14496 = !DILocalVariable(name: "comp", scope: !14489, file: !3, line: 5375, type: !1134)
!14497 = !DILocation(line: 5375, column: 8, scope: !14489)
!14498 = !DILocalVariable(name: "op", scope: !14489, file: !3, line: 5376, type: !1134)
!14499 = !DILocation(line: 5376, column: 8, scope: !14489)
!14500 = !DILocalVariable(name: "tgt", scope: !14489, file: !3, line: 5376, type: !1134)
!14501 = !DILocation(line: 5376, column: 12, scope: !14489)
!14502 = !DILocalVariable(name: "ass", scope: !14489, file: !3, line: 5377, type: !1436)
!14503 = !DILocation(line: 5377, column: 10, scope: !14489)
!14504 = !DILocalVariable(name: "bsi", scope: !14489, file: !3, line: 5378, type: !4328)
!14505 = !DILocation(line: 5378, column: 24, scope: !14489)
!14506 = !DILocation(line: 5384, column: 7, scope: !14507)
!14507 = distinct !DILexicalBlock(scope: !14489, file: !3, line: 5384, column: 7)
!14508 = !DILocation(line: 5384, column: 13, scope: !14507)
!14509 = !DILocation(line: 5384, column: 17, scope: !14507)
!14510 = !DILocation(line: 5385, column: 7, scope: !14507)
!14511 = !DILocation(line: 5385, column: 10, scope: !14507)
!14512 = !DILocation(line: 5385, column: 16, scope: !14507)
!14513 = !DILocation(line: 5385, column: 34, scope: !14507)
!14514 = !DILocation(line: 5385, column: 39, scope: !14507)
!14515 = !DILocation(line: 5385, column: 31, scope: !14507)
!14516 = !DILocation(line: 5384, column: 7, scope: !14489)
!14517 = !DILocalVariable(name: "step", scope: !14518, file: !3, line: 5387, type: !1134)
!14518 = distinct !DILexicalBlock(scope: !14507, file: !3, line: 5386, column: 5)
!14519 = !DILocation(line: 5387, column: 12, scope: !14518)
!14520 = !DILocalVariable(name: "ctype", scope: !14518, file: !3, line: 5387, type: !1134)
!14521 = !DILocation(line: 5387, column: 18, scope: !14518)
!14522 = !DILocalVariable(name: "utype", scope: !14518, file: !3, line: 5387, type: !1134)
!14523 = !DILocation(line: 5387, column: 25, scope: !14518)
!14524 = !DILocalVariable(name: "incr_code", scope: !14518, file: !3, line: 5388, type: !159)
!14525 = !DILocation(line: 5388, column: 22, scope: !14518)
!14526 = !DILocalVariable(name: "old_code", scope: !14518, file: !3, line: 5388, type: !159)
!14527 = !DILocation(line: 5388, column: 45, scope: !14518)
!14528 = !DILocation(line: 5390, column: 7, scope: !14518)
!14529 = !DILocation(line: 5391, column: 7, scope: !14518)
!14530 = !DILocation(line: 5393, column: 14, scope: !14518)
!14531 = !DILocation(line: 5393, column: 20, scope: !14518)
!14532 = !DILocation(line: 5393, column: 24, scope: !14518)
!14533 = !DILocation(line: 5393, column: 12, scope: !14518)
!14534 = !DILocation(line: 5394, column: 15, scope: !14518)
!14535 = !DILocation(line: 5394, column: 13, scope: !14518)
!14536 = !DILocation(line: 5395, column: 15, scope: !14518)
!14537 = !DILocation(line: 5395, column: 13, scope: !14518)
!14538 = !DILocation(line: 5396, column: 11, scope: !14539)
!14539 = distinct !DILexicalBlock(scope: !14518, file: !3, line: 5396, column: 11)
!14540 = !DILocation(line: 5396, column: 28, scope: !14539)
!14541 = !DILocation(line: 5396, column: 11, scope: !14518)
!14542 = !DILocation(line: 5398, column: 14, scope: !14543)
!14543 = distinct !DILexicalBlock(scope: !14539, file: !3, line: 5397, column: 2)
!14544 = !DILocation(line: 5399, column: 11, scope: !14543)
!14545 = !DILocation(line: 5399, column: 9, scope: !14543)
!14546 = !DILocation(line: 5400, column: 2, scope: !14543)
!14547 = !DILocation(line: 5407, column: 42, scope: !14518)
!14548 = !DILocation(line: 5407, column: 47, scope: !14518)
!14549 = !DILocation(line: 5407, column: 18, scope: !14518)
!14550 = !DILocation(line: 5407, column: 16, scope: !14518)
!14551 = !DILocation(line: 5408, column: 11, scope: !14552)
!14552 = distinct !DILexicalBlock(scope: !14518, file: !3, line: 5408, column: 11)
!14553 = !DILocation(line: 5408, column: 20, scope: !14552)
!14554 = !DILocation(line: 5409, column: 4, scope: !14552)
!14555 = !DILocation(line: 5409, column: 7, scope: !14552)
!14556 = !DILocation(line: 5409, column: 16, scope: !14552)
!14557 = !DILocation(line: 5410, column: 4, scope: !14552)
!14558 = !DILocation(line: 5410, column: 7, scope: !14552)
!14559 = !DILocation(line: 5410, column: 16, scope: !14552)
!14560 = !DILocation(line: 5408, column: 11, scope: !14518)
!14561 = !DILocation(line: 5412, column: 28, scope: !14562)
!14562 = distinct !DILexicalBlock(scope: !14563, file: !3, line: 5412, column: 8)
!14563 = distinct !DILexicalBlock(scope: !14552, file: !3, line: 5411, column: 2)
!14564 = !DILocation(line: 5412, column: 33, scope: !14562)
!14565 = !DILocation(line: 5412, column: 8, scope: !14562)
!14566 = !DILocation(line: 5412, column: 42, scope: !14562)
!14567 = !DILocation(line: 5412, column: 48, scope: !14562)
!14568 = !DILocation(line: 5412, column: 39, scope: !14562)
!14569 = !DILocation(line: 5412, column: 8, scope: !14563)
!14570 = !DILocation(line: 5413, column: 31, scope: !14562)
!14571 = !DILocation(line: 5413, column: 36, scope: !14562)
!14572 = !DILocation(line: 5413, column: 11, scope: !14562)
!14573 = !DILocation(line: 5413, column: 9, scope: !14562)
!14574 = !DILocation(line: 5413, column: 6, scope: !14562)
!14575 = !DILocation(line: 5414, column: 13, scope: !14576)
!14576 = distinct !DILexicalBlock(scope: !14562, file: !3, line: 5414, column: 13)
!14577 = !DILocation(line: 5414, column: 22, scope: !14576)
!14578 = !DILocation(line: 5415, column: 6, scope: !14576)
!14579 = !DILocation(line: 5415, column: 29, scope: !14576)
!14580 = !DILocation(line: 5415, column: 34, scope: !14576)
!14581 = !DILocation(line: 5415, column: 9, scope: !14576)
!14582 = !DILocation(line: 5415, column: 43, scope: !14576)
!14583 = !DILocation(line: 5415, column: 49, scope: !14576)
!14584 = !DILocation(line: 5415, column: 40, scope: !14576)
!14585 = !DILocation(line: 5414, column: 13, scope: !14562)
!14586 = !DILocation(line: 5416, column: 31, scope: !14576)
!14587 = !DILocation(line: 5416, column: 36, scope: !14576)
!14588 = !DILocation(line: 5416, column: 11, scope: !14576)
!14589 = !DILocation(line: 5416, column: 9, scope: !14576)
!14590 = !DILocation(line: 5416, column: 6, scope: !14576)
!14591 = !DILocation(line: 5418, column: 9, scope: !14576)
!14592 = !DILocation(line: 5419, column: 2, scope: !14563)
!14593 = !DILocation(line: 5421, column: 5, scope: !14552)
!14594 = !DILocation(line: 5423, column: 11, scope: !14595)
!14595 = distinct !DILexicalBlock(scope: !14518, file: !3, line: 5423, column: 11)
!14596 = !DILocation(line: 5424, column: 4, scope: !14595)
!14597 = !DILocation(line: 5424, column: 8, scope: !14595)
!14598 = !DILocation(line: 5424, column: 23, scope: !14595)
!14599 = !DILocation(line: 5425, column: 8, scope: !14595)
!14600 = !DILocation(line: 5425, column: 28, scope: !14595)
!14601 = !DILocation(line: 5425, column: 32, scope: !14595)
!14602 = !DILocation(line: 5425, column: 11, scope: !14595)
!14603 = !DILocation(line: 5423, column: 11, scope: !14518)
!14604 = !DILocation(line: 5426, column: 2, scope: !14595)
!14605 = !DILocation(line: 5430, column: 12, scope: !14518)
!14606 = !DILocation(line: 5430, column: 10, scope: !14518)
!14607 = !DILocation(line: 5431, column: 14, scope: !14518)
!14608 = !DILocation(line: 5431, column: 12, scope: !14518)
!14609 = !DILocation(line: 5434, column: 5, scope: !14518)
!14610 = !DILocation(line: 5437, column: 31, scope: !14611)
!14611 = distinct !DILexicalBlock(scope: !14507, file: !3, line: 5436, column: 5)
!14612 = !DILocation(line: 5437, column: 37, scope: !14611)
!14613 = !DILocation(line: 5437, column: 51, scope: !14611)
!14614 = !DILocation(line: 5437, column: 56, scope: !14611)
!14615 = !DILocation(line: 5437, column: 14, scope: !14611)
!14616 = !DILocation(line: 5437, column: 12, scope: !14611)
!14617 = !DILocation(line: 5438, column: 7, scope: !14611)
!14618 = !DILocation(line: 5441, column: 24, scope: !14489)
!14619 = !DILocation(line: 5441, column: 29, scope: !14489)
!14620 = !DILocation(line: 5441, column: 11, scope: !14489)
!14621 = !DILocation(line: 5441, column: 3, scope: !14489)
!14622 = !DILocation(line: 5444, column: 13, scope: !14623)
!14623 = distinct !DILexicalBlock(scope: !14489, file: !3, line: 5442, column: 5)
!14624 = !DILocation(line: 5444, column: 11, scope: !14623)
!14625 = !DILocation(line: 5447, column: 22, scope: !14626)
!14626 = distinct !DILexicalBlock(scope: !14623, file: !3, line: 5447, column: 11)
!14627 = !DILocation(line: 5447, column: 28, scope: !14626)
!14628 = !DILocation(line: 5447, column: 11, scope: !14626)
!14629 = !DILocation(line: 5447, column: 34, scope: !14626)
!14630 = !DILocation(line: 5447, column: 11, scope: !14623)
!14631 = !DILocation(line: 5448, column: 2, scope: !14626)
!14632 = !DILocation(line: 5450, column: 42, scope: !14623)
!14633 = !DILocation(line: 5450, column: 47, scope: !14623)
!14634 = !DILocation(line: 5450, column: 31, scope: !14623)
!14635 = !DILocation(line: 5450, column: 13, scope: !14623)
!14636 = !DILocation(line: 5451, column: 7, scope: !14623)
!14637 = !DILocation(line: 5454, column: 32, scope: !14623)
!14638 = !DILocation(line: 5454, column: 37, scope: !14623)
!14639 = !DILocation(line: 5454, column: 13, scope: !14623)
!14640 = !DILocation(line: 5454, column: 11, scope: !14623)
!14641 = !DILocation(line: 5455, column: 27, scope: !14623)
!14642 = !DILocation(line: 5455, column: 32, scope: !14623)
!14643 = !DILocation(line: 5455, column: 13, scope: !14623)
!14644 = !DILocation(line: 5456, column: 7, scope: !14623)
!14645 = !DILocation(line: 5459, column: 7, scope: !14623)
!14646 = !DILocation(line: 5460, column: 5, scope: !14623)
!14647 = !DILocation(line: 5462, column: 40, scope: !14489)
!14648 = !DILocation(line: 5462, column: 53, scope: !14489)
!14649 = !DILocation(line: 5462, column: 8, scope: !14489)
!14650 = !DILocation(line: 5462, column: 6, scope: !14489)
!14651 = !DILocation(line: 5465, column: 20, scope: !14652)
!14652 = distinct !DILexicalBlock(scope: !14489, file: !3, line: 5465, column: 7)
!14653 = !DILocation(line: 5465, column: 25, scope: !14652)
!14654 = !DILocation(line: 5465, column: 7, scope: !14652)
!14655 = !DILocation(line: 5465, column: 31, scope: !14652)
!14656 = !DILocation(line: 5465, column: 7, scope: !14489)
!14657 = !DILocation(line: 5467, column: 13, scope: !14658)
!14658 = distinct !DILexicalBlock(scope: !14652, file: !3, line: 5466, column: 5)
!14659 = !DILocation(line: 5467, column: 11, scope: !14658)
!14660 = !DILocation(line: 5468, column: 32, scope: !14658)
!14661 = !DILocation(line: 5468, column: 7, scope: !14658)
!14662 = !DILocation(line: 5470, column: 27, scope: !14658)
!14663 = !DILocation(line: 5470, column: 32, scope: !14658)
!14664 = !DILocation(line: 5470, column: 13, scope: !14658)
!14665 = !DILocation(line: 5471, column: 7, scope: !14658)
!14666 = !DILocation(line: 5472, column: 5, scope: !14658)
!14667 = !DILocation(line: 5475, column: 46, scope: !14668)
!14668 = distinct !DILexicalBlock(scope: !14652, file: !3, line: 5474, column: 5)
!14669 = !DILocation(line: 5475, column: 7, scope: !14668)
!14670 = !DILocation(line: 5476, column: 19, scope: !14668)
!14671 = !DILocation(line: 5476, column: 7, scope: !14668)
!14672 = !DILocation(line: 5476, column: 12, scope: !14668)
!14673 = !DILocation(line: 5476, column: 17, scope: !14668)
!14674 = !DILocation(line: 5478, column: 1, scope: !14489)
!14675 = distinct !DISubprogram(name: "rewrite_use_address", scope: !3, file: !3, line: 5536, type: !14456, scopeLine: 5538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14676 = !DILocalVariable(name: "data", arg: 1, scope: !14675, file: !3, line: 5536, type: !2530)
!14677 = !DILocation(line: 5536, column: 42, scope: !14675)
!14678 = !DILocalVariable(name: "use", arg: 2, scope: !14675, file: !3, line: 5537, type: !2457)
!14679 = !DILocation(line: 5537, column: 23, scope: !14675)
!14680 = !DILocalVariable(name: "cand", arg: 3, scope: !14675, file: !3, line: 5537, type: !2472)
!14681 = !DILocation(line: 5537, column: 44, scope: !14675)
!14682 = !DILocalVariable(name: "aff", scope: !14675, file: !3, line: 5539, type: !9656)
!14683 = !DILocation(line: 5539, column: 12, scope: !14675)
!14684 = !DILocalVariable(name: "bsi", scope: !14675, file: !3, line: 5540, type: !4328)
!14685 = !DILocation(line: 5540, column: 24, scope: !14675)
!14686 = !DILocation(line: 5540, column: 44, scope: !14675)
!14687 = !DILocation(line: 5540, column: 49, scope: !14675)
!14688 = !DILocation(line: 5540, column: 30, scope: !14675)
!14689 = !DILocalVariable(name: "base_hint", scope: !14675, file: !3, line: 5541, type: !1134)
!14690 = !DILocation(line: 5541, column: 8, scope: !14675)
!14691 = !DILocalVariable(name: "ref", scope: !14675, file: !3, line: 5542, type: !1134)
!14692 = !DILocation(line: 5542, column: 8, scope: !14675)
!14693 = !DILocalVariable(name: "ok", scope: !14675, file: !3, line: 5543, type: !136)
!14694 = !DILocation(line: 5543, column: 8, scope: !14675)
!14695 = !DILocation(line: 5545, column: 29, scope: !14675)
!14696 = !DILocation(line: 5545, column: 35, scope: !14675)
!14697 = !DILocation(line: 5545, column: 49, scope: !14675)
!14698 = !DILocation(line: 5545, column: 54, scope: !14675)
!14699 = !DILocation(line: 5545, column: 60, scope: !14675)
!14700 = !DILocation(line: 5545, column: 65, scope: !14675)
!14701 = !DILocation(line: 5545, column: 8, scope: !14675)
!14702 = !DILocation(line: 5545, column: 6, scope: !14675)
!14703 = !DILocation(line: 5546, column: 3, scope: !14675)
!14704 = !DILocation(line: 5547, column: 3, scope: !14675)
!14705 = !DILocation(line: 5560, column: 7, scope: !14706)
!14706 = distinct !DILexicalBlock(scope: !14675, file: !3, line: 5560, column: 7)
!14707 = !DILocation(line: 5560, column: 13, scope: !14706)
!14708 = !DILocation(line: 5560, column: 17, scope: !14706)
!14709 = !DILocation(line: 5560, column: 7, scope: !14675)
!14710 = !DILocation(line: 5561, column: 30, scope: !14706)
!14711 = !DILocation(line: 5561, column: 36, scope: !14706)
!14712 = !DILocation(line: 5561, column: 50, scope: !14706)
!14713 = !DILocation(line: 5561, column: 56, scope: !14706)
!14714 = !DILocation(line: 5561, column: 61, scope: !14706)
!14715 = !DILocation(line: 5561, column: 17, scope: !14706)
!14716 = !DILocation(line: 5561, column: 15, scope: !14706)
!14717 = !DILocation(line: 5561, column: 5, scope: !14706)
!14718 = !DILocation(line: 5563, column: 31, scope: !14675)
!14719 = !DILocation(line: 5563, column: 61, scope: !14675)
!14720 = !DILocation(line: 5564, column: 4, scope: !14675)
!14721 = !DILocation(line: 5564, column: 10, scope: !14675)
!14722 = !DILocation(line: 5563, column: 9, scope: !14675)
!14723 = !DILocation(line: 5563, column: 7, scope: !14675)
!14724 = !DILocation(line: 5565, column: 18, scope: !14675)
!14725 = !DILocation(line: 5565, column: 24, scope: !14675)
!14726 = !DILocation(line: 5565, column: 29, scope: !14675)
!14727 = !DILocation(line: 5565, column: 23, scope: !14675)
!14728 = !DILocation(line: 5565, column: 3, scope: !14675)
!14729 = !DILocation(line: 5566, column: 16, scope: !14675)
!14730 = !DILocation(line: 5566, column: 4, scope: !14675)
!14731 = !DILocation(line: 5566, column: 9, scope: !14675)
!14732 = !DILocation(line: 5566, column: 14, scope: !14675)
!14733 = !DILocation(line: 5567, column: 1, scope: !14675)
!14734 = distinct !DISubprogram(name: "rewrite_use_compare", scope: !3, file: !3, line: 5573, type: !14456, scopeLine: 5575, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14735 = !DILocalVariable(name: "data", arg: 1, scope: !14734, file: !3, line: 5573, type: !2530)
!14736 = !DILocation(line: 5573, column: 42, scope: !14734)
!14737 = !DILocalVariable(name: "use", arg: 2, scope: !14734, file: !3, line: 5574, type: !2457)
!14738 = !DILocation(line: 5574, column: 23, scope: !14734)
!14739 = !DILocalVariable(name: "cand", arg: 3, scope: !14734, file: !3, line: 5574, type: !2472)
!14740 = !DILocation(line: 5574, column: 44, scope: !14734)
!14741 = !DILocalVariable(name: "comp", scope: !14734, file: !3, line: 5576, type: !1134)
!14742 = !DILocation(line: 5576, column: 8, scope: !14734)
!14743 = !DILocalVariable(name: "var_p", scope: !14734, file: !3, line: 5576, type: !1470)
!14744 = !DILocation(line: 5576, column: 15, scope: !14734)
!14745 = !DILocalVariable(name: "op", scope: !14734, file: !3, line: 5576, type: !1134)
!14746 = !DILocation(line: 5576, column: 22, scope: !14734)
!14747 = !DILocalVariable(name: "bound", scope: !14734, file: !3, line: 5576, type: !1134)
!14748 = !DILocation(line: 5576, column: 26, scope: !14734)
!14749 = !DILocalVariable(name: "bsi", scope: !14734, file: !3, line: 5577, type: !4328)
!14750 = !DILocation(line: 5577, column: 24, scope: !14734)
!14751 = !DILocation(line: 5577, column: 44, scope: !14734)
!14752 = !DILocation(line: 5577, column: 49, scope: !14734)
!14753 = !DILocation(line: 5577, column: 30, scope: !14734)
!14754 = !DILocalVariable(name: "compare", scope: !14734, file: !3, line: 5578, type: !159)
!14755 = !DILocation(line: 5578, column: 18, scope: !14734)
!14756 = !DILocalVariable(name: "cp", scope: !14734, file: !3, line: 5579, type: !2468)
!14757 = !DILocation(line: 5579, column: 21, scope: !14734)
!14758 = !DILocation(line: 5579, column: 43, scope: !14734)
!14759 = !DILocation(line: 5579, column: 49, scope: !14734)
!14760 = !DILocation(line: 5579, column: 54, scope: !14734)
!14761 = !DILocation(line: 5579, column: 26, scope: !14734)
!14762 = !DILocalVariable(name: "ok", scope: !14734, file: !3, line: 5580, type: !136)
!14763 = !DILocation(line: 5580, column: 8, scope: !14734)
!14764 = !DILocation(line: 5582, column: 11, scope: !14734)
!14765 = !DILocation(line: 5582, column: 15, scope: !14734)
!14766 = !DILocation(line: 5582, column: 9, scope: !14734)
!14767 = !DILocation(line: 5583, column: 7, scope: !14768)
!14768 = distinct !DILexicalBlock(scope: !14734, file: !3, line: 5583, column: 7)
!14769 = !DILocation(line: 5583, column: 7, scope: !14734)
!14770 = !DILocalVariable(name: "var", scope: !14771, file: !3, line: 5585, type: !1134)
!14771 = distinct !DILexicalBlock(scope: !14768, file: !3, line: 5584, column: 5)
!14772 = !DILocation(line: 5585, column: 12, scope: !14771)
!14773 = !DILocation(line: 5585, column: 31, scope: !14771)
!14774 = !DILocation(line: 5585, column: 37, scope: !14771)
!14775 = !DILocation(line: 5585, column: 51, scope: !14771)
!14776 = !DILocation(line: 5585, column: 57, scope: !14771)
!14777 = !DILocation(line: 5585, column: 62, scope: !14771)
!14778 = !DILocation(line: 5585, column: 18, scope: !14771)
!14779 = !DILocalVariable(name: "var_type", scope: !14771, file: !3, line: 5586, type: !1134)
!14780 = !DILocation(line: 5586, column: 12, scope: !14771)
!14781 = !DILocation(line: 5586, column: 23, scope: !14771)
!14782 = !DILocalVariable(name: "stmts", scope: !14771, file: !3, line: 5587, type: !1426)
!14783 = !DILocation(line: 5587, column: 18, scope: !14771)
!14784 = !DILocation(line: 5589, column: 41, scope: !14771)
!14785 = !DILocation(line: 5589, column: 47, scope: !14771)
!14786 = !DILocation(line: 5589, column: 17, scope: !14771)
!14787 = !DILocation(line: 5589, column: 15, scope: !14771)
!14788 = !DILocation(line: 5590, column: 29, scope: !14771)
!14789 = !DILocation(line: 5590, column: 15, scope: !14771)
!14790 = !DILocation(line: 5590, column: 13, scope: !14771)
!14791 = !DILocation(line: 5591, column: 34, scope: !14771)
!14792 = !DILocation(line: 5591, column: 12, scope: !14771)
!14793 = !DILocation(line: 5591, column: 10, scope: !14771)
!14794 = !DILocation(line: 5592, column: 11, scope: !14795)
!14795 = distinct !DILexicalBlock(scope: !14771, file: !3, line: 5592, column: 11)
!14796 = !DILocation(line: 5592, column: 11, scope: !14771)
!14797 = !DILocation(line: 5594, column: 24, scope: !14795)
!14798 = !DILocation(line: 5594, column: 30, scope: !14795)
!14799 = !DILocation(line: 5594, column: 3, scope: !14795)
!14800 = !DILocation(line: 5595, column: 3, scope: !14795)
!14801 = !DILocation(line: 5593, column: 2, scope: !14795)
!14802 = !DILocation(line: 5597, column: 28, scope: !14771)
!14803 = !DILocation(line: 5597, column: 33, scope: !14771)
!14804 = !DILocation(line: 5597, column: 39, scope: !14771)
!14805 = !DILocation(line: 5597, column: 7, scope: !14771)
!14806 = !DILocation(line: 5598, column: 29, scope: !14771)
!14807 = !DILocation(line: 5598, column: 34, scope: !14771)
!14808 = !DILocation(line: 5598, column: 40, scope: !14771)
!14809 = !DILocation(line: 5598, column: 7, scope: !14771)
!14810 = !DILocation(line: 5599, column: 28, scope: !14771)
!14811 = !DILocation(line: 5599, column: 33, scope: !14771)
!14812 = !DILocation(line: 5599, column: 39, scope: !14771)
!14813 = !DILocation(line: 5599, column: 7, scope: !14771)
!14814 = !DILocation(line: 5600, column: 7, scope: !14771)
!14815 = !DILocation(line: 5605, column: 27, scope: !14734)
!14816 = !DILocation(line: 5605, column: 33, scope: !14734)
!14817 = !DILocation(line: 5605, column: 47, scope: !14734)
!14818 = !DILocation(line: 5605, column: 52, scope: !14734)
!14819 = !DILocation(line: 5605, column: 10, scope: !14734)
!14820 = !DILocation(line: 5605, column: 8, scope: !14734)
!14821 = !DILocation(line: 5606, column: 3, scope: !14734)
!14822 = !DILocation(line: 5608, column: 31, scope: !14734)
!14823 = !DILocation(line: 5608, column: 37, scope: !14734)
!14824 = !DILocation(line: 5608, column: 42, scope: !14734)
!14825 = !DILocation(line: 5608, column: 8, scope: !14734)
!14826 = !DILocation(line: 5608, column: 6, scope: !14734)
!14827 = !DILocation(line: 5609, column: 3, scope: !14734)
!14828 = !DILocation(line: 5611, column: 44, scope: !14734)
!14829 = !DILocation(line: 5611, column: 56, scope: !14734)
!14830 = !DILocation(line: 5611, column: 12, scope: !14734)
!14831 = !DILocation(line: 5611, column: 4, scope: !14734)
!14832 = !DILocation(line: 5611, column: 10, scope: !14734)
!14833 = !DILocation(line: 5613, column: 1, scope: !14734)
!14834 = distinct !DISubprogram(name: "update_stmt", scope: !574, file: !574, line: 1456, type: !14835, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14835 = !DISubroutineType(types: !14836)
!14836 = !{null, !1436}
!14837 = !DILocalVariable(name: "s", arg: 1, scope: !14834, file: !574, line: 1456, type: !1436)
!14838 = !DILocation(line: 1456, column: 21, scope: !14834)
!14839 = !DILocation(line: 1458, column: 23, scope: !14840)
!14840 = distinct !DILexicalBlock(scope: !14834, file: !574, line: 1458, column: 7)
!14841 = !DILocation(line: 1458, column: 7, scope: !14840)
!14842 = !DILocation(line: 1458, column: 7, scope: !14834)
!14843 = !DILocation(line: 1460, column: 28, scope: !14844)
!14844 = distinct !DILexicalBlock(scope: !14840, file: !574, line: 1459, column: 5)
!14845 = !DILocation(line: 1460, column: 7, scope: !14844)
!14846 = !DILocation(line: 1461, column: 29, scope: !14844)
!14847 = !DILocation(line: 1461, column: 7, scope: !14844)
!14848 = !DILocation(line: 1462, column: 5, scope: !14844)
!14849 = !DILocation(line: 1463, column: 1, scope: !14834)
!14850 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !574, file: !574, line: 1759, type: !6170, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14851 = !DILocalVariable(name: "gs", arg: 1, scope: !14850, file: !574, line: 1759, type: !3158)
!14852 = !DILocation(line: 1759, column: 34, scope: !14850)
!14853 = !DILocation(line: 1763, column: 23, scope: !14854)
!14854 = distinct !DILexicalBlock(scope: !14850, file: !574, line: 1763, column: 7)
!14855 = !DILocation(line: 1763, column: 7, scope: !14854)
!14856 = !DILocation(line: 1763, column: 27, scope: !14854)
!14857 = !DILocation(line: 1763, column: 7, scope: !14850)
!14858 = !DILocation(line: 1764, column: 23, scope: !14854)
!14859 = !DILocation(line: 1764, column: 12, scope: !14854)
!14860 = !DILocation(line: 1764, column: 5, scope: !14854)
!14861 = !DILocation(line: 1766, column: 5, scope: !14854)
!14862 = !DILocation(line: 1767, column: 1, scope: !14850)
!14863 = distinct !DISubprogram(name: "get_computation", scope: !3, file: !3, line: 2927, type: !14864, scopeLine: 2928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14864 = !DISubroutineType(types: !14865)
!14865 = !{!1134, !1651, !2457, !2472}
!14866 = !DILocalVariable(name: "loop", arg: 1, scope: !14863, file: !3, line: 2927, type: !1651)
!14867 = !DILocation(line: 2927, column: 31, scope: !14863)
!14868 = !DILocalVariable(name: "use", arg: 2, scope: !14863, file: !3, line: 2927, type: !2457)
!14869 = !DILocation(line: 2927, column: 52, scope: !14863)
!14870 = !DILocalVariable(name: "cand", arg: 3, scope: !14863, file: !3, line: 2927, type: !2472)
!14871 = !DILocation(line: 2927, column: 73, scope: !14863)
!14872 = !DILocation(line: 2929, column: 30, scope: !14863)
!14873 = !DILocation(line: 2929, column: 36, scope: !14863)
!14874 = !DILocation(line: 2929, column: 41, scope: !14863)
!14875 = !DILocation(line: 2929, column: 47, scope: !14863)
!14876 = !DILocation(line: 2929, column: 52, scope: !14863)
!14877 = !DILocation(line: 2929, column: 10, scope: !14863)
!14878 = !DILocation(line: 2929, column: 3, scope: !14863)
!14879 = distinct !DISubprogram(name: "gsi_after_labels", scope: !574, file: !574, line: 4510, type: !6029, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14880 = !DILocalVariable(name: "bb", arg: 1, scope: !14879, file: !574, line: 4510, type: !1399)
!14881 = !DILocation(line: 4510, column: 31, scope: !14879)
!14882 = !DILocalVariable(name: "gsi", scope: !14879, file: !574, line: 4512, type: !4328)
!14883 = !DILocation(line: 4512, column: 24, scope: !14879)
!14884 = !DILocation(line: 4512, column: 44, scope: !14879)
!14885 = !DILocation(line: 4512, column: 30, scope: !14879)
!14886 = !DILocation(line: 4514, column: 3, scope: !14879)
!14887 = !DILocation(line: 4514, column: 11, scope: !14879)
!14888 = !DILocation(line: 4514, column: 27, scope: !14879)
!14889 = !DILocation(line: 4514, column: 43, scope: !14879)
!14890 = !DILocation(line: 4514, column: 30, scope: !14879)
!14891 = !DILocation(line: 4514, column: 59, scope: !14879)
!14892 = !DILocation(line: 0, scope: !14879)
!14893 = !DILocation(line: 4515, column: 5, scope: !14879)
!14894 = distinct !{!14894, !14886, !14895}
!14895 = !DILocation(line: 4515, column: 19, scope: !14879)
!14896 = !DILocation(line: 4517, column: 3, scope: !14879)
!14897 = distinct !DISubprogram(name: "copy_ref_info", scope: !3, file: !3, line: 5521, type: !14898, scopeLine: 5522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14898 = !DISubroutineType(types: !14899)
!14899 = !{null, !1134, !1134}
!14900 = !DILocalVariable(name: "new_ref", arg: 1, scope: !14897, file: !3, line: 5521, type: !1134)
!14901 = !DILocation(line: 5521, column: 21, scope: !14897)
!14902 = !DILocalVariable(name: "old_ref", arg: 2, scope: !14897, file: !3, line: 5521, type: !1134)
!14903 = !DILocation(line: 5521, column: 35, scope: !14897)
!14904 = !DILocation(line: 5523, column: 7, scope: !14905)
!14905 = distinct !DILexicalBlock(scope: !14897, file: !3, line: 5523, column: 7)
!14906 = !DILocation(line: 5523, column: 27, scope: !14905)
!14907 = !DILocation(line: 5523, column: 7, scope: !14897)
!14908 = !DILocation(line: 5524, column: 24, scope: !14905)
!14909 = !DILocation(line: 5524, column: 33, scope: !14905)
!14910 = !DILocation(line: 5524, column: 5, scope: !14905)
!14911 = !DILocation(line: 5527, column: 62, scope: !14912)
!14912 = distinct !DILexicalBlock(scope: !14905, file: !3, line: 5526, column: 5)
!14913 = !DILocation(line: 5527, column: 32, scope: !14912)
!14914 = !DILocation(line: 5527, column: 7, scope: !14912)
!14915 = !DILocation(line: 5527, column: 30, scope: !14912)
!14916 = !DILocation(line: 5528, column: 37, scope: !14912)
!14917 = !DILocation(line: 5528, column: 7, scope: !14912)
!14918 = !DILocation(line: 5528, column: 35, scope: !14912)
!14919 = !DILocation(line: 5529, column: 38, scope: !14912)
!14920 = !DILocation(line: 5529, column: 7, scope: !14912)
!14921 = !DILocation(line: 5529, column: 36, scope: !14912)
!14922 = !DILocation(line: 5531, column: 1, scope: !14897)
!14923 = distinct !DISubprogram(name: "unshare_and_remove_ssa_names", scope: !3, file: !3, line: 5510, type: !5952, scopeLine: 5511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14924 = !DILocalVariable(name: "ref", arg: 1, scope: !14923, file: !3, line: 5510, type: !1134)
!14925 = !DILocation(line: 5510, column: 36, scope: !14923)
!14926 = !DILocation(line: 5512, column: 23, scope: !14923)
!14927 = !DILocation(line: 5512, column: 9, scope: !14923)
!14928 = !DILocation(line: 5512, column: 7, scope: !14923)
!14929 = !DILocation(line: 5513, column: 3, scope: !14923)
!14930 = !DILocation(line: 5515, column: 10, scope: !14923)
!14931 = !DILocation(line: 5515, column: 3, scope: !14923)
!14932 = distinct !DISubprogram(name: "idx_remove_ssa_names", scope: !3, file: !3, line: 5484, type: !3050, scopeLine: 5486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14933 = !DILocalVariable(name: "base", arg: 1, scope: !14932, file: !3, line: 5484, type: !1134)
!14934 = !DILocation(line: 5484, column: 28, scope: !14932)
!14935 = !DILocalVariable(name: "idx", arg: 2, scope: !14932, file: !3, line: 5484, type: !1470)
!14936 = !DILocation(line: 5484, column: 40, scope: !14932)
!14937 = !DILocalVariable(name: "data", arg: 3, scope: !14932, file: !3, line: 5485, type: !1007)
!14938 = !DILocation(line: 5485, column: 15, scope: !14932)
!14939 = !DILocalVariable(name: "op", scope: !14932, file: !3, line: 5487, type: !1470)
!14940 = !DILocation(line: 5487, column: 9, scope: !14932)
!14941 = !DILocation(line: 5489, column: 7, scope: !14942)
!14942 = distinct !DILexicalBlock(scope: !14932, file: !3, line: 5489, column: 7)
!14943 = !DILocation(line: 5489, column: 24, scope: !14942)
!14944 = !DILocation(line: 5489, column: 7, scope: !14932)
!14945 = !DILocation(line: 5490, column: 12, scope: !14942)
!14946 = !DILocation(line: 5490, column: 6, scope: !14942)
!14947 = !DILocation(line: 5490, column: 10, scope: !14942)
!14948 = !DILocation(line: 5490, column: 5, scope: !14942)
!14949 = !DILocation(line: 5492, column: 7, scope: !14950)
!14950 = distinct !DILexicalBlock(scope: !14932, file: !3, line: 5492, column: 7)
!14951 = !DILocation(line: 5492, column: 24, scope: !14950)
!14952 = !DILocation(line: 5492, column: 37, scope: !14950)
!14953 = !DILocation(line: 5492, column: 40, scope: !14950)
!14954 = !DILocation(line: 5492, column: 57, scope: !14950)
!14955 = !DILocation(line: 5492, column: 7, scope: !14932)
!14956 = !DILocation(line: 5494, column: 13, scope: !14957)
!14957 = distinct !DILexicalBlock(scope: !14950, file: !3, line: 5493, column: 5)
!14958 = !DILocation(line: 5494, column: 10, scope: !14957)
!14959 = !DILocation(line: 5495, column: 12, scope: !14960)
!14960 = distinct !DILexicalBlock(scope: !14957, file: !3, line: 5495, column: 11)
!14961 = !DILocation(line: 5495, column: 11, scope: !14960)
!14962 = !DILocation(line: 5496, column: 4, scope: !14960)
!14963 = !DILocation(line: 5496, column: 7, scope: !14960)
!14964 = !DILocation(line: 5496, column: 23, scope: !14960)
!14965 = !DILocation(line: 5495, column: 11, scope: !14957)
!14966 = !DILocation(line: 5497, column: 8, scope: !14960)
!14967 = !DILocation(line: 5497, column: 3, scope: !14960)
!14968 = !DILocation(line: 5497, column: 6, scope: !14960)
!14969 = !DILocation(line: 5497, column: 2, scope: !14960)
!14970 = !DILocation(line: 5498, column: 13, scope: !14957)
!14971 = !DILocation(line: 5498, column: 10, scope: !14957)
!14972 = !DILocation(line: 5499, column: 12, scope: !14973)
!14973 = distinct !DILexicalBlock(scope: !14957, file: !3, line: 5499, column: 11)
!14974 = !DILocation(line: 5499, column: 11, scope: !14973)
!14975 = !DILocation(line: 5500, column: 4, scope: !14973)
!14976 = !DILocation(line: 5500, column: 7, scope: !14973)
!14977 = !DILocation(line: 5500, column: 23, scope: !14973)
!14978 = !DILocation(line: 5499, column: 11, scope: !14957)
!14979 = !DILocation(line: 5501, column: 8, scope: !14973)
!14980 = !DILocation(line: 5501, column: 3, scope: !14973)
!14981 = !DILocation(line: 5501, column: 6, scope: !14973)
!14982 = !DILocation(line: 5501, column: 2, scope: !14973)
!14983 = !DILocation(line: 5502, column: 5, scope: !14957)
!14984 = !DILocation(line: 5504, column: 3, scope: !14932)
!14985 = distinct !DISubprogram(name: "iv_elimination_compare", scope: !3, file: !3, line: 3997, type: !14986, scopeLine: 3998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!14986 = !DISubroutineType(types: !14987)
!14987 = !{!159, !2530, !2457}
!14988 = !DILocalVariable(name: "data", arg: 1, scope: !14985, file: !3, line: 3997, type: !2530)
!14989 = !DILocation(line: 3997, column: 45, scope: !14985)
!14990 = !DILocalVariable(name: "use", arg: 2, scope: !14985, file: !3, line: 3997, type: !2457)
!14991 = !DILocation(line: 3997, column: 66, scope: !14985)
!14992 = !DILocalVariable(name: "loop", scope: !14985, file: !3, line: 3999, type: !1651)
!14993 = !DILocation(line: 3999, column: 16, scope: !14985)
!14994 = !DILocation(line: 3999, column: 23, scope: !14985)
!14995 = !DILocation(line: 3999, column: 29, scope: !14985)
!14996 = !DILocalVariable(name: "ex_bb", scope: !14985, file: !3, line: 4000, type: !1399)
!14997 = !DILocation(line: 4000, column: 15, scope: !14985)
!14998 = !DILocalVariable(name: "exit", scope: !14985, file: !3, line: 4001, type: !1416)
!14999 = !DILocation(line: 4001, column: 8, scope: !14985)
!15000 = !DILocation(line: 4003, column: 22, scope: !14985)
!15001 = !DILocation(line: 4003, column: 27, scope: !14985)
!15002 = !DILocation(line: 4003, column: 11, scope: !14985)
!15003 = !DILocation(line: 4003, column: 9, scope: !14985)
!15004 = !DILocation(line: 4004, column: 10, scope: !14985)
!15005 = !DILocation(line: 4004, column: 8, scope: !14985)
!15006 = !DILocation(line: 4005, column: 30, scope: !15007)
!15007 = distinct !DILexicalBlock(scope: !14985, file: !3, line: 4005, column: 7)
!15008 = !DILocation(line: 4005, column: 36, scope: !15007)
!15009 = !DILocation(line: 4005, column: 42, scope: !15007)
!15010 = !DILocation(line: 4005, column: 7, scope: !15007)
!15011 = !DILocation(line: 4005, column: 7, scope: !14985)
!15012 = !DILocation(line: 4006, column: 12, scope: !15007)
!15013 = !DILocation(line: 4006, column: 10, scope: !15007)
!15014 = !DILocation(line: 4006, column: 5, scope: !15007)
!15015 = !DILocation(line: 4008, column: 11, scope: !14985)
!15016 = !DILocation(line: 4008, column: 17, scope: !14985)
!15017 = !DILocation(line: 4008, column: 23, scope: !14985)
!15018 = !DILocation(line: 4008, column: 3, scope: !14985)
!15019 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !574, file: !574, line: 2261, type: !15020, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15020 = !DISubroutineType(types: !15021)
!15021 = !{null, !1436, !1134}
!15022 = !DILocalVariable(name: "gs", arg: 1, scope: !15019, file: !574, line: 2261, type: !1436)
!15023 = !DILocation(line: 2261, column: 29, scope: !15019)
!15024 = !DILocalVariable(name: "lhs", arg: 2, scope: !15019, file: !574, line: 2261, type: !1134)
!15025 = !DILocation(line: 2261, column: 38, scope: !15019)
!15026 = !DILocation(line: 2264, column: 18, scope: !15019)
!15027 = !DILocation(line: 2264, column: 25, scope: !15019)
!15028 = !DILocation(line: 2264, column: 3, scope: !15019)
!15029 = !DILocation(line: 2265, column: 1, scope: !15019)
!15030 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !574, file: !574, line: 2231, type: !15031, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15031 = !DISubroutineType(types: !15032)
!15032 = !{null, !1436, !159}
!15033 = !DILocalVariable(name: "gs", arg: 1, scope: !15030, file: !574, line: 2231, type: !1436)
!15034 = !DILocation(line: 2231, column: 30, scope: !15030)
!15035 = !DILocalVariable(name: "code", arg: 2, scope: !15030, file: !574, line: 2231, type: !159)
!15036 = !DILocation(line: 2231, column: 49, scope: !15030)
!15037 = !DILocation(line: 2234, column: 24, scope: !15030)
!15038 = !DILocation(line: 2234, column: 3, scope: !15030)
!15039 = !DILocation(line: 2234, column: 7, scope: !15030)
!15040 = !DILocation(line: 2234, column: 14, scope: !15030)
!15041 = !DILocation(line: 2234, column: 22, scope: !15030)
!15042 = !DILocation(line: 2235, column: 1, scope: !15030)
!15043 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !574, file: !574, line: 2292, type: !15020, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15044 = !DILocalVariable(name: "gs", arg: 1, scope: !15043, file: !574, line: 2292, type: !1436)
!15045 = !DILocation(line: 2292, column: 29, scope: !15043)
!15046 = !DILocalVariable(name: "rhs", arg: 2, scope: !15043, file: !574, line: 2292, type: !1134)
!15047 = !DILocation(line: 2292, column: 38, scope: !15043)
!15048 = !DILocation(line: 2295, column: 18, scope: !15043)
!15049 = !DILocation(line: 2295, column: 25, scope: !15043)
!15050 = !DILocation(line: 2295, column: 3, scope: !15043)
!15051 = !DILocation(line: 2296, column: 1, scope: !15043)
!15052 = distinct !DISubprogram(name: "gimple_set_op", scope: !574, file: !574, line: 1663, type: !15053, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15053 = !DISubroutineType(types: !15054)
!15054 = !{null, !1436, !6, !1134}
!15055 = !DILocalVariable(name: "gs", arg: 1, scope: !15052, file: !574, line: 1663, type: !1436)
!15056 = !DILocation(line: 1663, column: 23, scope: !15052)
!15057 = !DILocalVariable(name: "i", arg: 2, scope: !15052, file: !574, line: 1663, type: !6)
!15058 = !DILocation(line: 1663, column: 36, scope: !15052)
!15059 = !DILocalVariable(name: "op", arg: 3, scope: !15052, file: !574, line: 1663, type: !1134)
!15060 = !DILocation(line: 1663, column: 44, scope: !15052)
!15061 = !DILocation(line: 1665, column: 3, scope: !15052)
!15062 = !DILocation(line: 1671, column: 24, scope: !15052)
!15063 = !DILocation(line: 1671, column: 15, scope: !15052)
!15064 = !DILocation(line: 1671, column: 3, scope: !15052)
!15065 = !DILocation(line: 1671, column: 19, scope: !15052)
!15066 = !DILocation(line: 1671, column: 22, scope: !15052)
!15067 = !DILocation(line: 1672, column: 1, scope: !15052)
!15068 = distinct !DISubprogram(name: "VEC_iv_use_p_base_truncate", scope: !3, file: !3, line: 215, type: !15069, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15069 = !DISubroutineType(types: !15070)
!15070 = !{null, !6835, !6}
!15071 = !DILocalVariable(name: "vec_", arg: 1, scope: !15068, file: !3, line: 215, type: !6835)
!15072 = !DILocation(line: 215, column: 1, scope: !15068)
!15073 = !DILocalVariable(name: "size_", arg: 2, scope: !15068, file: !3, line: 215, type: !6)
!15074 = !DILocation(line: 215, column: 1, scope: !15075)
!15075 = distinct !DILexicalBlock(scope: !15068, file: !3, line: 215, column: 1)
!15076 = distinct !DISubprogram(name: "VEC_iv_cand_p_base_truncate", scope: !3, file: !3, line: 219, type: !15077, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15077 = !DISubroutineType(types: !15078)
!15078 = !{null, !8681, !6}
!15079 = !DILocalVariable(name: "vec_", arg: 1, scope: !15076, file: !3, line: 219, type: !8681)
!15080 = !DILocation(line: 219, column: 1, scope: !15076)
!15081 = !DILocalVariable(name: "size_", arg: 2, scope: !15076, file: !3, line: 219, type: !6)
!15082 = !DILocation(line: 219, column: 1, scope: !15083)
!15083 = distinct !DILexicalBlock(scope: !15076, file: !3, line: 219, column: 1)
!15084 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !160, file: !160, line: 182, type: !15085, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15085 = !DISubroutineType(types: !15086)
!15086 = !{!1006, !4171, !6, !1470}
!15087 = !DILocalVariable(name: "vec_", arg: 1, scope: !15084, file: !160, line: 182, type: !4171)
!15088 = !DILocation(line: 182, column: 1, scope: !15084)
!15089 = !DILocalVariable(name: "ix_", arg: 2, scope: !15084, file: !160, line: 182, type: !6)
!15090 = !DILocalVariable(name: "ptr", arg: 3, scope: !15084, file: !160, line: 182, type: !1470)
!15091 = !DILocation(line: 182, column: 1, scope: !15092)
!15092 = distinct !DILexicalBlock(scope: !15084, file: !160, line: 182, column: 1)
!15093 = !DILocation(line: 182, column: 1, scope: !15094)
!15094 = distinct !DILexicalBlock(scope: !15092, file: !160, line: 182, column: 1)
!15095 = !DILocation(line: 182, column: 1, scope: !15096)
!15096 = distinct !DILexicalBlock(scope: !15092, file: !160, line: 182, column: 1)
!15097 = distinct !DISubprogram(name: "VEC_tree_base_truncate", scope: !160, file: !160, line: 182, type: !15098, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15098 = !DISubroutineType(types: !15099)
!15099 = !{null, !11629, !6}
!15100 = !DILocalVariable(name: "vec_", arg: 1, scope: !15097, file: !160, line: 182, type: !11629)
!15101 = !DILocation(line: 182, column: 1, scope: !15097)
!15102 = !DILocalVariable(name: "size_", arg: 2, scope: !15097, file: !160, line: 182, type: !6)
!15103 = !DILocation(line: 182, column: 1, scope: !15104)
!15104 = distinct !DILexicalBlock(scope: !15097, file: !160, line: 182, column: 1)
!15105 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2515, file: !2515, line: 31, type: !15106, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15106 = !DISubroutineType(types: !15107)
!15107 = !{!1006, !15108, !6, !2575}
!15108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15109, size: 64)
!15109 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2519)
!15110 = !DILocalVariable(name: "vec_", arg: 1, scope: !15105, file: !2515, line: 31, type: !15108)
!15111 = !DILocation(line: 31, column: 1, scope: !15105)
!15112 = !DILocalVariable(name: "ix_", arg: 2, scope: !15105, file: !2515, line: 31, type: !6)
!15113 = !DILocalVariable(name: "ptr", arg: 3, scope: !15105, file: !2515, line: 31, type: !2575)
!15114 = !DILocation(line: 31, column: 1, scope: !15115)
!15115 = distinct !DILexicalBlock(scope: !15105, file: !2515, line: 31, column: 1)
!15116 = !DILocation(line: 31, column: 1, scope: !15117)
!15117 = distinct !DILexicalBlock(scope: !15115, file: !2515, line: 31, column: 1)
!15118 = !DILocation(line: 31, column: 1, scope: !15119)
!15119 = distinct !DILexicalBlock(scope: !15115, file: !2515, line: 31, column: 1)
!15120 = distinct !DISubprogram(name: "get_loop", scope: !140, file: !140, line: 417, type: !15121, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15121 = !DISubroutineType(types: !15122)
!15122 = !{!1651, !6}
!15123 = !DILocalVariable(name: "num", arg: 1, scope: !15120, file: !140, line: 417, type: !6)
!15124 = !DILocation(line: 417, column: 20, scope: !15120)
!15125 = !DILocation(line: 419, column: 10, scope: !15120)
!15126 = !DILocation(line: 419, column: 3, scope: !15120)
!15127 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2515, file: !2515, line: 32, type: !15128, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15128 = !DISubroutineType(types: !15129)
!15129 = !{null, !15130}
!15130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2513, size: 64)
!15131 = !DILocalVariable(name: "vec_", arg: 1, scope: !15127, file: !2515, line: 32, type: !15130)
!15132 = !DILocation(line: 32, column: 1, scope: !15127)
!15133 = !DILocation(line: 32, column: 1, scope: !15134)
!15134 = distinct !DILexicalBlock(scope: !15127, file: !2515, line: 32, column: 1)
!15135 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !160, file: !160, line: 184, type: !15136, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15136 = !DISubroutineType(types: !15137)
!15137 = !{null, !11613}
!15138 = !DILocalVariable(name: "vec_", arg: 1, scope: !15135, file: !160, line: 184, type: !11613)
!15139 = !DILocation(line: 184, column: 1, scope: !15135)
!15140 = !DILocation(line: 184, column: 1, scope: !15141)
!15141 = distinct !DILexicalBlock(scope: !15135, file: !160, line: 184, column: 1)
!15142 = distinct !DISubprogram(name: "VEC_iv_use_p_heap_free", scope: !3, file: !3, line: 216, type: !15143, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15143 = !DISubroutineType(types: !15144)
!15144 = !{null, !6819}
!15145 = !DILocalVariable(name: "vec_", arg: 1, scope: !15142, file: !3, line: 216, type: !6819)
!15146 = !DILocation(line: 216, column: 1, scope: !15142)
!15147 = !DILocation(line: 216, column: 1, scope: !15148)
!15148 = distinct !DILexicalBlock(scope: !15142, file: !3, line: 216, column: 1)
!15149 = distinct !DISubprogram(name: "VEC_iv_cand_p_heap_free", scope: !3, file: !3, line: 220, type: !15150, scopeLine: 220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !137, retainedNodes: !2606)
!15150 = !DISubroutineType(types: !15151)
!15151 = !{null, !8603}
!15152 = !DILocalVariable(name: "vec_", arg: 1, scope: !15149, file: !3, line: 220, type: !8603)
!15153 = !DILocation(line: 220, column: 1, scope: !15149)
!15154 = !DILocation(line: 220, column: 1, scope: !15155)
!15155 = distinct !DILexicalBlock(scope: !15149, file: !3, line: 220, column: 1)
