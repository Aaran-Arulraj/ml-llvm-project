; ModuleID = 'optabs.c'
source_filename = "optabs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.convert_optab_d = type { i32, i8*, void (%struct.convert_optab_d*, i8*, i32, i32)*, [87 x [87 x %struct.optab_handlers]] }
%struct.optab_handlers = type { i32 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.insn_data = type { i8*, %union.anon.0, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%union.anon.0 = type { i8* }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.rtl_hooks = type { %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i64, i64*)*, %struct.rtx_def* (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (i32, %struct.rtx_def*)* }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.libfunc_entry = type { i64, i32, i32, %struct.rtx_def* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.separate_ops = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.no_conflict_data = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }

@convert_optab_table = common dso_local global [17 x %struct.convert_optab_d] zeroinitializer, align 16, !dbg !0
@libfunc_hash = internal global %struct.htab* null, align 8, !dbg !3948
@optab_table = common dso_local global [159 x %struct.optab_d] zeroinitializer, align 16, !dbg !3908
@mode_class = external dso_local constant [87 x i8], align 16
@.str = private unnamed_addr constant [9 x i8] c"optabs.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_trapv = external dso_local global i32, align 4
@tree_code_length = external dso_local constant [0 x i8], align 1
@insn_data = external dso_local constant [0 x %struct.insn_data], align 8
@code_to_optab = common dso_local global [140 x %struct.optab_d*] zeroinitializer, align 16, !dbg !3935
@mode_size = external dso_local global [87 x i8], align 16
@targetm = external dso_local global %struct.gcc_target, align 8
@mode_wider = external dso_local constant [87 x i8], align 16
@rtl_hooks = external dso_local global %struct.rtl_hooks, align 8
@word_mode = external dso_local global i32, align 4
@const_tiny_rtx = external dso_local global [3 x [87 x %struct.rtx_def*]], align 16
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_signed_zeros = external dso_local global i32, align 4
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@ix86_branch_cost = external dso_local global i32, align 4
@x_rtl = external dso_local global %struct.rtl_data, align 8
@flag_non_call_exceptions = external dso_local global i32, align 4
@reload_completed = external dso_local global i32, align 4
@rtx_class = external dso_local constant [139 x i32], align 16
@movcc_gen_code = common dso_local global [87 x i32] zeroinitializer, align 16, !dbg !3941
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@libfunc_decls = internal global %struct.htab* null, align 8, !dbg !3950
@init_optabs.reinit = internal global i8 0, align 1, !dbg !3888
@vcond_gen_code = common dso_local global [87 x i32] zeroinitializer, align 16, !dbg !3944
@vcondu_gen_code = common dso_local global [87 x i32] zeroinitializer, align 16, !dbg !3946
@movmem_optab = external dso_local global [87 x i32], align 16
@cmpstr_optab = external dso_local global [87 x i32], align 16
@cmpstrn_optab = external dso_local global [87 x i32], align 16
@cmpmem_optab = external dso_local global [87 x i32], align 16
@setmem_optab = external dso_local global [87 x i32], align 16
@sync_add_optab = external dso_local global [87 x i32], align 16
@sync_sub_optab = external dso_local global [87 x i32], align 16
@sync_ior_optab = external dso_local global [87 x i32], align 16
@sync_and_optab = external dso_local global [87 x i32], align 16
@sync_xor_optab = external dso_local global [87 x i32], align 16
@sync_nand_optab = external dso_local global [87 x i32], align 16
@sync_old_add_optab = external dso_local global [87 x i32], align 16
@sync_old_sub_optab = external dso_local global [87 x i32], align 16
@sync_old_ior_optab = external dso_local global [87 x i32], align 16
@sync_old_and_optab = external dso_local global [87 x i32], align 16
@sync_old_xor_optab = external dso_local global [87 x i32], align 16
@sync_old_nand_optab = external dso_local global [87 x i32], align 16
@sync_new_add_optab = external dso_local global [87 x i32], align 16
@sync_new_sub_optab = external dso_local global [87 x i32], align 16
@sync_new_ior_optab = external dso_local global [87 x i32], align 16
@sync_new_and_optab = external dso_local global [87 x i32], align 16
@sync_new_xor_optab = external dso_local global [87 x i32], align 16
@sync_new_nand_optab = external dso_local global [87 x i32], align 16
@sync_compare_and_swap = external dso_local global [87 x i32], align 16
@sync_lock_test_and_set = external dso_local global [87 x i32], align 16
@sync_lock_release = external dso_local global [87 x i32], align 16
@reload_out_optab = external dso_local global [87 x i32], align 16
@reload_in_optab = external dso_local global [87 x i32], align 16
@.str.2 = private unnamed_addr constant [4 x i8] c"add\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"ssadd\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"usadd\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"sub\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"sssub\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"ussub\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"mul\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"ssmul\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"usmul\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"div\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"divv\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"ssdiv\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"udiv\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"usdiv\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"divmod\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"udivmod\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"mod\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"umod\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"ftrunc\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"ior\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"xor\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"ashl\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"ssashl\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"usashl\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"ashr\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"lshr\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"umin\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"umax\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"neg\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"ssneg\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"usneg\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"one_cmpl\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"ffs\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"clz\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"ctz\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"popcount\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"parity\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"cmp\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"ucmp\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"eq\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"ne\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"gt\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"ge\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"unord\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"powi\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.53 = private unnamed_addr constant [4 x i8] c"fix\00", align 1
@.str.54 = private unnamed_addr constant [7 x i8] c"fixuns\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"lrint\00", align 1
@.str.56 = private unnamed_addr constant [7 x i8] c"lround\00", align 1
@.str.57 = private unnamed_addr constant [7 x i8] c"lfloor\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"lceil\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"extend\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"trunc\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"fract\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"satfract\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c"fractuns\00", align 1
@.str.64 = private unnamed_addr constant [12 x i8] c"satfractuns\00", align 1
@.str.65 = private unnamed_addr constant [11 x i8] c"__bswapsi2\00", align 1
@.str.66 = private unnamed_addr constant [11 x i8] c"__bswapdi2\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"cabs\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"abort\00", align 1
@libfunc_table = common dso_local global [14 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !3930
@.str.69 = private unnamed_addr constant [7 x i8] c"memcpy\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"memmove\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"memcmp\00", align 1
@.str.72 = private unnamed_addr constant [7 x i8] c"memset\00", align 1
@.str.73 = private unnamed_addr constant [10 x i8] c"__setbits\00", align 1
@.str.74 = private unnamed_addr constant [17 x i8] c"__builtin_setjmp\00", align 1
@.str.75 = private unnamed_addr constant [18 x i8] c"__builtin_longjmp\00", align 1
@.str.76 = private unnamed_addr constant [22 x i8] c"_Unwind_SjLj_Register\00", align 1
@.str.77 = private unnamed_addr constant [24 x i8] c"_Unwind_SjLj_Unregister\00", align 1
@.str.78 = private unnamed_addr constant [25 x i8] c"__cyg_profile_func_enter\00", align 1
@.str.79 = private unnamed_addr constant [24 x i8] c"__cyg_profile_func_exit\00", align 1
@.str.80 = private unnamed_addr constant [13 x i8] c"__gcov_flush\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.81 = private unnamed_addr constant [11 x i8] c"%s\09%s:\09%s\0A\00", align 1
@rtx_name = external dso_local constant [139 x i8*], align 16
@mode_name = external dso_local constant [87 x i8*], align 16
@.str.82 = private unnamed_addr constant [14 x i8] c"%s\09%s\09%s:\09%s\0A\00", align 1
@gt_ggc_r_gt_optabs_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.htab** @libfunc_decls to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P9tree_node4htab, void (i8*)* @gt_pch_n_P9tree_node4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @libfunc_hash to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P13libfunc_entry4htab, void (i8*)* @gt_pch_n_P13libfunc_entry4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3894
@mode_nunits = external dso_local constant [87 x i8], align 16
@optimize = external dso_local global i32, align 4
@class_narrowest_mode = external dso_local constant [18 x i8], align 16
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@const_true_rtx = external dso_local global %struct.rtx_def*, align 8
@_sch_tolower = external dso_local constant [256 x i8], align 16
@.str.83 = private unnamed_addr constant [5 x i8] c"bid_\00", align 1
@.str.84 = private unnamed_addr constant [9 x i8] c"floatuns\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c"floatun\00", align 1
@mode_precision = external dso_local constant [87 x i16], align 16
@tree_code_type = external dso_local constant [0 x i32], align 4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @convert_optab_libfunc(%struct.convert_optab_d* %optab, i32 %mode1, i32 %mode2) #0 !dbg !3971 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %optab.addr = alloca %struct.convert_optab_d*, align 8
  %mode1.addr = alloca i32, align 4
  %mode2.addr = alloca i32, align 4
  %e = alloca %struct.libfunc_entry, align 8
  %slot = alloca %struct.libfunc_entry**, align 8
  store %struct.convert_optab_d* %optab, %struct.convert_optab_d** %optab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %optab.addr, metadata !3975, metadata !DIExpression()), !dbg !3976
  store i32 %mode1, i32* %mode1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode1.addr, metadata !3977, metadata !DIExpression()), !dbg !3978
  store i32 %mode2, i32* %mode2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode2.addr, metadata !3979, metadata !DIExpression()), !dbg !3980
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry* %e, metadata !3981, metadata !DIExpression()), !dbg !3982
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry*** %slot, metadata !3983, metadata !DIExpression()), !dbg !3984
  %0 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optab.addr, align 8, !dbg !3985
  %sub.ptr.lhs.cast = ptrtoint %struct.convert_optab_d* %0 to i64, !dbg !3986
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([17 x %struct.convert_optab_d]* @convert_optab_table to i64), !dbg !3986
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 30304, !dbg !3986
  %optab1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 0, !dbg !3987
  store i64 %sub.ptr.div, i64* %optab1, align 8, !dbg !3988
  %1 = load i32, i32* %mode1.addr, align 4, !dbg !3989
  %mode12 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 1, !dbg !3990
  store i32 %1, i32* %mode12, align 8, !dbg !3991
  %2 = load i32, i32* %mode2.addr, align 4, !dbg !3992
  %mode23 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 2, !dbg !3993
  store i32 %2, i32* %mode23, align 4, !dbg !3994
  %3 = load %struct.htab*, %struct.htab** @libfunc_hash, align 8, !dbg !3995
  %4 = bitcast %struct.libfunc_entry* %e to i8*, !dbg !3996
  %call = call i8** @htab_find_slot(%struct.htab* %3, i8* %4, i32 0), !dbg !3997
  %5 = bitcast i8** %call to %struct.libfunc_entry**, !dbg !3998
  store %struct.libfunc_entry** %5, %struct.libfunc_entry*** %slot, align 8, !dbg !3999
  %6 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4000
  %tobool = icmp ne %struct.libfunc_entry** %6, null, !dbg !4000
  br i1 %tobool, label %if.end10, label %if.then, !dbg !4002

if.then:                                          ; preds = %entry
  %7 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optab.addr, align 8, !dbg !4003
  %libcall_gen = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %7, i32 0, i32 2, !dbg !4006
  %8 = load void (%struct.convert_optab_d*, i8*, i32, i32)*, void (%struct.convert_optab_d*, i8*, i32, i32)** %libcall_gen, align 8, !dbg !4006
  %tobool4 = icmp ne void (%struct.convert_optab_d*, i8*, i32, i32)* %8, null, !dbg !4003
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !4007

if.then5:                                         ; preds = %if.then
  %9 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optab.addr, align 8, !dbg !4008
  %libcall_gen6 = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %9, i32 0, i32 2, !dbg !4010
  %10 = load void (%struct.convert_optab_d*, i8*, i32, i32)*, void (%struct.convert_optab_d*, i8*, i32, i32)** %libcall_gen6, align 8, !dbg !4010
  %11 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optab.addr, align 8, !dbg !4011
  %12 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optab.addr, align 8, !dbg !4012
  %libcall_basename = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %12, i32 0, i32 1, !dbg !4013
  %13 = load i8*, i8** %libcall_basename, align 8, !dbg !4013
  %14 = load i32, i32* %mode1.addr, align 4, !dbg !4014
  %15 = load i32, i32* %mode2.addr, align 4, !dbg !4015
  call void %10(%struct.convert_optab_d* %11, i8* %13, i32 %14, i32 %15), !dbg !4008
  %16 = load %struct.htab*, %struct.htab** @libfunc_hash, align 8, !dbg !4016
  %17 = bitcast %struct.libfunc_entry* %e to i8*, !dbg !4017
  %call7 = call i8** @htab_find_slot(%struct.htab* %16, i8* %17, i32 0), !dbg !4018
  %18 = bitcast i8** %call7 to %struct.libfunc_entry**, !dbg !4019
  store %struct.libfunc_entry** %18, %struct.libfunc_entry*** %slot, align 8, !dbg !4020
  %19 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4021
  %tobool8 = icmp ne %struct.libfunc_entry** %19, null, !dbg !4021
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !4023

if.then9:                                         ; preds = %if.then5
  %20 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4024
  %21 = load %struct.libfunc_entry*, %struct.libfunc_entry** %20, align 8, !dbg !4025
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %21, i32 0, i32 3, !dbg !4026
  %22 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !4026
  store %struct.rtx_def* %22, %struct.rtx_def** %retval, align 8, !dbg !4027
  br label %return, !dbg !4027

if.else:                                          ; preds = %if.then5
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4028
  br label %return, !dbg !4028

if.end:                                           ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4029
  br label %return, !dbg !4029

if.end10:                                         ; preds = %entry
  %23 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4030
  %24 = load %struct.libfunc_entry*, %struct.libfunc_entry** %23, align 8, !dbg !4031
  %libfunc11 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %24, i32 0, i32 3, !dbg !4032
  %25 = load %struct.rtx_def*, %struct.rtx_def** %libfunc11, align 8, !dbg !4032
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !4033
  br label %return, !dbg !4033

return:                                           ; preds = %if.end10, %if.end, %if.else, %if.then9
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4034
  ret %struct.rtx_def* %26, !dbg !4034
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @optab_libfunc(%struct.optab_d* %optab, i32 %mode) #0 !dbg !4035 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %optab.addr = alloca %struct.optab_d*, align 8
  %mode.addr = alloca i32, align 4
  %e = alloca %struct.libfunc_entry, align 8
  %slot = alloca %struct.libfunc_entry**, align 8
  store %struct.optab_d* %optab, %struct.optab_d** %optab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optab.addr, metadata !4038, metadata !DIExpression()), !dbg !4039
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4040, metadata !DIExpression()), !dbg !4041
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry* %e, metadata !4042, metadata !DIExpression()), !dbg !4043
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry*** %slot, metadata !4044, metadata !DIExpression()), !dbg !4045
  %0 = load %struct.optab_d*, %struct.optab_d** %optab.addr, align 8, !dbg !4046
  %sub.ptr.lhs.cast = ptrtoint %struct.optab_d* %0 to i64, !dbg !4047
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([159 x %struct.optab_d]* @optab_table to i64), !dbg !4047
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 384, !dbg !4047
  %optab1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 0, !dbg !4048
  store i64 %sub.ptr.div, i64* %optab1, align 8, !dbg !4049
  %1 = load i32, i32* %mode.addr, align 4, !dbg !4050
  %mode1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 1, !dbg !4051
  store i32 %1, i32* %mode1, align 8, !dbg !4052
  %mode2 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 2, !dbg !4053
  store i32 0, i32* %mode2, align 4, !dbg !4054
  %2 = load %struct.htab*, %struct.htab** @libfunc_hash, align 8, !dbg !4055
  %3 = bitcast %struct.libfunc_entry* %e to i8*, !dbg !4056
  %call = call i8** @htab_find_slot(%struct.htab* %2, i8* %3, i32 0), !dbg !4057
  %4 = bitcast i8** %call to %struct.libfunc_entry**, !dbg !4058
  store %struct.libfunc_entry** %4, %struct.libfunc_entry*** %slot, align 8, !dbg !4059
  %5 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4060
  %tobool = icmp ne %struct.libfunc_entry** %5, null, !dbg !4060
  br i1 %tobool, label %if.end8, label %if.then, !dbg !4062

if.then:                                          ; preds = %entry
  %6 = load %struct.optab_d*, %struct.optab_d** %optab.addr, align 8, !dbg !4063
  %libcall_gen = getelementptr inbounds %struct.optab_d, %struct.optab_d* %6, i32 0, i32 3, !dbg !4066
  %7 = load void (%struct.optab_d*, i8*, i8, i32)*, void (%struct.optab_d*, i8*, i8, i32)** %libcall_gen, align 8, !dbg !4066
  %tobool2 = icmp ne void (%struct.optab_d*, i8*, i8, i32)* %7, null, !dbg !4063
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !4067

if.then3:                                         ; preds = %if.then
  %8 = load %struct.optab_d*, %struct.optab_d** %optab.addr, align 8, !dbg !4068
  %libcall_gen4 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %8, i32 0, i32 3, !dbg !4070
  %9 = load void (%struct.optab_d*, i8*, i8, i32)*, void (%struct.optab_d*, i8*, i8, i32)** %libcall_gen4, align 8, !dbg !4070
  %10 = load %struct.optab_d*, %struct.optab_d** %optab.addr, align 8, !dbg !4071
  %11 = load %struct.optab_d*, %struct.optab_d** %optab.addr, align 8, !dbg !4072
  %libcall_basename = getelementptr inbounds %struct.optab_d, %struct.optab_d* %11, i32 0, i32 1, !dbg !4073
  %12 = load i8*, i8** %libcall_basename, align 8, !dbg !4073
  %13 = load %struct.optab_d*, %struct.optab_d** %optab.addr, align 8, !dbg !4074
  %libcall_suffix = getelementptr inbounds %struct.optab_d, %struct.optab_d* %13, i32 0, i32 2, !dbg !4075
  %14 = load i8, i8* %libcall_suffix, align 8, !dbg !4075
  %15 = load i32, i32* %mode.addr, align 4, !dbg !4076
  call void %9(%struct.optab_d* %10, i8* %12, i8 signext %14, i32 %15), !dbg !4068
  %16 = load %struct.htab*, %struct.htab** @libfunc_hash, align 8, !dbg !4077
  %17 = bitcast %struct.libfunc_entry* %e to i8*, !dbg !4078
  %call5 = call i8** @htab_find_slot(%struct.htab* %16, i8* %17, i32 0), !dbg !4079
  %18 = bitcast i8** %call5 to %struct.libfunc_entry**, !dbg !4080
  store %struct.libfunc_entry** %18, %struct.libfunc_entry*** %slot, align 8, !dbg !4081
  %19 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4082
  %tobool6 = icmp ne %struct.libfunc_entry** %19, null, !dbg !4082
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !4084

if.then7:                                         ; preds = %if.then3
  %20 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4085
  %21 = load %struct.libfunc_entry*, %struct.libfunc_entry** %20, align 8, !dbg !4086
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %21, i32 0, i32 3, !dbg !4087
  %22 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !4087
  store %struct.rtx_def* %22, %struct.rtx_def** %retval, align 8, !dbg !4088
  br label %return, !dbg !4088

if.else:                                          ; preds = %if.then3
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4089
  br label %return, !dbg !4089

if.end:                                           ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !4090
  br label %return, !dbg !4090

if.end8:                                          ; preds = %entry
  %23 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !4091
  %24 = load %struct.libfunc_entry*, %struct.libfunc_entry** %23, align 8, !dbg !4092
  %libfunc9 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %24, i32 0, i32 3, !dbg !4093
  %25 = load %struct.rtx_def*, %struct.rtx_def** %libfunc9, align 8, !dbg !4093
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !4094
  br label %return, !dbg !4094

return:                                           ; preds = %if.end8, %if.end, %if.else, %if.then7
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4095
  ret %struct.rtx_def* %26, !dbg !4095
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.optab_d* @optab_for_tree_code(i32 %code, %union.tree_node* %type, i32 %subtype) #0 !dbg !4096 {
entry:
  %retval = alloca %struct.optab_d*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %subtype.addr = alloca i32, align 4
  %trapv = alloca i8, align 1
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4099, metadata !DIExpression()), !dbg !4100
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4101, metadata !DIExpression()), !dbg !4102
  store i32 %subtype, i32* %subtype.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %subtype.addr, metadata !4103, metadata !DIExpression()), !dbg !4104
  call void @llvm.dbg.declare(metadata i8* %trapv, metadata !4105, metadata !DIExpression()), !dbg !4106
  %0 = load i32, i32* %code.addr, align 4, !dbg !4107
  switch i32 %0, label %sw.default [
    i32 89, label %sw.bb
    i32 87, label %sw.bb1
    i32 90, label %sw.bb2
    i32 88, label %sw.bb3
    i32 71, label %sw.bb4
    i32 72, label %sw.bb4
    i32 73, label %sw.bb4
    i32 74, label %sw.bb4
    i32 75, label %sw.bb5
    i32 67, label %sw.bb5
    i32 68, label %sw.bb5
    i32 69, label %sw.bb5
    i32 70, label %sw.bb5
    i32 76, label %sw.bb5
    i32 83, label %sw.bb26
    i32 84, label %sw.bb181
    i32 85, label %sw.bb339
    i32 86, label %sw.bb483
    i32 81, label %sw.bb627
    i32 80, label %sw.bb635
    i32 151, label %sw.bb643
    i32 168, label %sw.bb644
    i32 167, label %sw.bb652
    i32 164, label %sw.bb660
    i32 165, label %sw.bb668
    i32 166, label %sw.bb676
    i32 170, label %sw.bb684
    i32 171, label %sw.bb685
    i32 172, label %sw.bb686
    i32 173, label %sw.bb694
    i32 174, label %sw.bb702
    i32 175, label %sw.bb710
    i32 176, label %sw.bb718
    i32 177, label %sw.bb726
    i32 178, label %sw.bb734
    i32 179, label %sw.bb735
    i32 180, label %sw.bb743
  ], !dbg !4108

sw.bb:                                            ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.optab_d** %retval, align 8, !dbg !4109
  br label %return, !dbg !4109

sw.bb1:                                           ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.optab_d** %retval, align 8, !dbg !4111
  br label %return, !dbg !4111

sw.bb2:                                           ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), %struct.optab_d** %retval, align 8, !dbg !4112
  br label %return, !dbg !4112

sw.bb3:                                           ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.optab_d** %retval, align 8, !dbg !4113
  br label %return, !dbg !4113

sw.bb4:                                           ; preds = %entry, %entry, %entry, %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4114
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4114
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4114
  %bf.load = load i64, i64* %2, align 8, !dbg !4114
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !4114
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4114
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4114
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4114
  %3 = zext i1 %tobool to i64, !dbg !4114
  %cond = select i1 %tobool, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36), !dbg !4114
  store %struct.optab_d* %cond, %struct.optab_d** %retval, align 8, !dbg !4115
  br label %return, !dbg !4115

sw.bb5:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4116
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4116
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4116
  %bf.load7 = load i64, i64* %5, align 8, !dbg !4116
  %bf.lshr8 = lshr i64 %bf.load7, 31, !dbg !4116
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !4116
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4116
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !4116
  br i1 %tobool11, label %if.then, label %if.end, !dbg !4118

if.then:                                          ; preds = %sw.bb5
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4119
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4119
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !4119
  %bf.load13 = load i64, i64* %7, align 8, !dbg !4119
  %bf.lshr14 = lshr i64 %bf.load13, 21, !dbg !4119
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !4119
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !4119
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !4119
  %8 = zext i1 %tobool17 to i64, !dbg !4119
  %cond18 = select i1 %tobool17, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 7), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 6), !dbg !4119
  store %struct.optab_d* %cond18, %struct.optab_d** %retval, align 8, !dbg !4120
  br label %return, !dbg !4120

if.end:                                           ; preds = %sw.bb5
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4121
  %base19 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4121
  %10 = bitcast %struct.tree_base* %base19 to i64*, !dbg !4121
  %bf.load20 = load i64, i64* %10, align 8, !dbg !4121
  %bf.lshr21 = lshr i64 %bf.load20, 21, !dbg !4121
  %bf.clear22 = and i64 %bf.lshr21, 1, !dbg !4121
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !4121
  %tobool24 = icmp ne i32 %bf.cast23, 0, !dbg !4121
  %11 = zext i1 %tobool24 to i64, !dbg !4121
  %cond25 = select i1 %tobool24, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), !dbg !4121
  store %struct.optab_d* %cond25, %struct.optab_d** %retval, align 8, !dbg !4122
  br label %return, !dbg !4122

sw.bb26:                                          ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %base27 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4123
  %13 = bitcast %struct.tree_base* %base27 to i64*, !dbg !4123
  %bf.load28 = load i64, i64* %13, align 8, !dbg !4123
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !4123
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !4123
  %cmp = icmp eq i32 %bf.cast30, 14, !dbg !4123
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4123

cond.true:                                        ; preds = %sw.bb26
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %call = call i32 @vector_type_mode(%union.tree_node* %14), !dbg !4123
  br label %cond.end, !dbg !4123

cond.false:                                       ; preds = %sw.bb26
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %type31 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !4123
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 6, !dbg !4123
  %bf.load32 = load i32, i32* %mode, align 4, !dbg !4123
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !4123
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !4123
  br label %cond.end, !dbg !4123

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond35 = phi i32 [ %call, %cond.true ], [ %bf.clear34, %cond.false ], !dbg !4123
  %idxprom = zext i32 %cond35 to i64, !dbg !4123
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4123
  %16 = load i8, i8* %arrayidx, align 1, !dbg !4123
  %conv = zext i8 %16 to i32, !dbg !4123
  %cmp36 = icmp eq i32 %conv, 12, !dbg !4123
  br i1 %cmp36, label %if.then147, label %lor.lhs.false, !dbg !4123

lor.lhs.false:                                    ; preds = %cond.end
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %base38 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4123
  %18 = bitcast %struct.tree_base* %base38 to i64*, !dbg !4123
  %bf.load39 = load i64, i64* %18, align 8, !dbg !4123
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !4123
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !4123
  %cmp42 = icmp eq i32 %bf.cast41, 14, !dbg !4123
  br i1 %cmp42, label %cond.true44, label %cond.false46, !dbg !4123

cond.true44:                                      ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %call45 = call i32 @vector_type_mode(%union.tree_node* %19), !dbg !4123
  br label %cond.end52, !dbg !4123

cond.false46:                                     ; preds = %lor.lhs.false
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %type47 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !4123
  %mode48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 6, !dbg !4123
  %bf.load49 = load i32, i32* %mode48, align 4, !dbg !4123
  %bf.lshr50 = lshr i32 %bf.load49, 16, !dbg !4123
  %bf.clear51 = and i32 %bf.lshr50, 255, !dbg !4123
  br label %cond.end52, !dbg !4123

cond.end52:                                       ; preds = %cond.false46, %cond.true44
  %cond53 = phi i32 [ %call45, %cond.true44 ], [ %bf.clear51, %cond.false46 ], !dbg !4123
  %idxprom54 = zext i32 %cond53 to i64, !dbg !4123
  %arrayidx55 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom54, !dbg !4123
  %21 = load i8, i8* %arrayidx55, align 1, !dbg !4123
  %conv56 = zext i8 %21 to i32, !dbg !4123
  %cmp57 = icmp eq i32 %conv56, 17, !dbg !4123
  br i1 %cmp57, label %if.then147, label %lor.lhs.false59, !dbg !4123

lor.lhs.false59:                                  ; preds = %cond.end52
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %base60 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4123
  %23 = bitcast %struct.tree_base* %base60 to i64*, !dbg !4123
  %bf.load61 = load i64, i64* %23, align 8, !dbg !4123
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !4123
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !4123
  %cmp64 = icmp eq i32 %bf.cast63, 14, !dbg !4123
  br i1 %cmp64, label %cond.true66, label %cond.false68, !dbg !4123

cond.true66:                                      ; preds = %lor.lhs.false59
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %call67 = call i32 @vector_type_mode(%union.tree_node* %24), !dbg !4123
  br label %cond.end74, !dbg !4123

cond.false68:                                     ; preds = %lor.lhs.false59
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %type69 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !4123
  %mode70 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type69, i32 0, i32 6, !dbg !4123
  %bf.load71 = load i32, i32* %mode70, align 4, !dbg !4123
  %bf.lshr72 = lshr i32 %bf.load71, 16, !dbg !4123
  %bf.clear73 = and i32 %bf.lshr72, 255, !dbg !4123
  br label %cond.end74, !dbg !4123

cond.end74:                                       ; preds = %cond.false68, %cond.true66
  %cond75 = phi i32 [ %call67, %cond.true66 ], [ %bf.clear73, %cond.false68 ], !dbg !4123
  %idxprom76 = zext i32 %cond75 to i64, !dbg !4123
  %arrayidx77 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom76, !dbg !4123
  %26 = load i8, i8* %arrayidx77, align 1, !dbg !4123
  %conv78 = zext i8 %26 to i32, !dbg !4123
  %cmp79 = icmp eq i32 %conv78, 13, !dbg !4123
  br i1 %cmp79, label %if.then147, label %lor.lhs.false81, !dbg !4123

lor.lhs.false81:                                  ; preds = %cond.end74
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %base82 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !4123
  %28 = bitcast %struct.tree_base* %base82 to i64*, !dbg !4123
  %bf.load83 = load i64, i64* %28, align 8, !dbg !4123
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !4123
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !4123
  %cmp86 = icmp eq i32 %bf.cast85, 14, !dbg !4123
  br i1 %cmp86, label %cond.true88, label %cond.false90, !dbg !4123

cond.true88:                                      ; preds = %lor.lhs.false81
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %call89 = call i32 @vector_type_mode(%union.tree_node* %29), !dbg !4123
  br label %cond.end96, !dbg !4123

cond.false90:                                     ; preds = %lor.lhs.false81
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %type91 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !4123
  %mode92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 6, !dbg !4123
  %bf.load93 = load i32, i32* %mode92, align 4, !dbg !4123
  %bf.lshr94 = lshr i32 %bf.load93, 16, !dbg !4123
  %bf.clear95 = and i32 %bf.lshr94, 255, !dbg !4123
  br label %cond.end96, !dbg !4123

cond.end96:                                       ; preds = %cond.false90, %cond.true88
  %cond97 = phi i32 [ %call89, %cond.true88 ], [ %bf.clear95, %cond.false90 ], !dbg !4123
  %idxprom98 = zext i32 %cond97 to i64, !dbg !4123
  %arrayidx99 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom98, !dbg !4123
  %31 = load i8, i8* %arrayidx99, align 1, !dbg !4123
  %conv100 = zext i8 %31 to i32, !dbg !4123
  %cmp101 = icmp eq i32 %conv100, 14, !dbg !4123
  br i1 %cmp101, label %if.then147, label %lor.lhs.false103, !dbg !4123

lor.lhs.false103:                                 ; preds = %cond.end96
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %base104 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4123
  %33 = bitcast %struct.tree_base* %base104 to i64*, !dbg !4123
  %bf.load105 = load i64, i64* %33, align 8, !dbg !4123
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !4123
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !4123
  %cmp108 = icmp eq i32 %bf.cast107, 14, !dbg !4123
  br i1 %cmp108, label %cond.true110, label %cond.false112, !dbg !4123

cond.true110:                                     ; preds = %lor.lhs.false103
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %call111 = call i32 @vector_type_mode(%union.tree_node* %34), !dbg !4123
  br label %cond.end118, !dbg !4123

cond.false112:                                    ; preds = %lor.lhs.false103
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %type113 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !4123
  %mode114 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type113, i32 0, i32 6, !dbg !4123
  %bf.load115 = load i32, i32* %mode114, align 4, !dbg !4123
  %bf.lshr116 = lshr i32 %bf.load115, 16, !dbg !4123
  %bf.clear117 = and i32 %bf.lshr116, 255, !dbg !4123
  br label %cond.end118, !dbg !4123

cond.end118:                                      ; preds = %cond.false112, %cond.true110
  %cond119 = phi i32 [ %call111, %cond.true110 ], [ %bf.clear117, %cond.false112 ], !dbg !4123
  %idxprom120 = zext i32 %cond119 to i64, !dbg !4123
  %arrayidx121 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom120, !dbg !4123
  %36 = load i8, i8* %arrayidx121, align 1, !dbg !4123
  %conv122 = zext i8 %36 to i32, !dbg !4123
  %cmp123 = icmp eq i32 %conv122, 15, !dbg !4123
  br i1 %cmp123, label %if.then147, label %lor.lhs.false125, !dbg !4123

lor.lhs.false125:                                 ; preds = %cond.end118
  %37 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %base126 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4123
  %38 = bitcast %struct.tree_base* %base126 to i64*, !dbg !4123
  %bf.load127 = load i64, i64* %38, align 8, !dbg !4123
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !4123
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !4123
  %cmp130 = icmp eq i32 %bf.cast129, 14, !dbg !4123
  br i1 %cmp130, label %cond.true132, label %cond.false134, !dbg !4123

cond.true132:                                     ; preds = %lor.lhs.false125
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %call133 = call i32 @vector_type_mode(%union.tree_node* %39), !dbg !4123
  br label %cond.end140, !dbg !4123

cond.false134:                                    ; preds = %lor.lhs.false125
  %40 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4123
  %type135 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !4123
  %mode136 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type135, i32 0, i32 6, !dbg !4123
  %bf.load137 = load i32, i32* %mode136, align 4, !dbg !4123
  %bf.lshr138 = lshr i32 %bf.load137, 16, !dbg !4123
  %bf.clear139 = and i32 %bf.lshr138, 255, !dbg !4123
  br label %cond.end140, !dbg !4123

cond.end140:                                      ; preds = %cond.false134, %cond.true132
  %cond141 = phi i32 [ %call133, %cond.true132 ], [ %bf.clear139, %cond.false134 ], !dbg !4123
  %idxprom142 = zext i32 %cond141 to i64, !dbg !4123
  %arrayidx143 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom142, !dbg !4123
  %41 = load i8, i8* %arrayidx143, align 1, !dbg !4123
  %conv144 = zext i8 %41 to i32, !dbg !4123
  %cmp145 = icmp eq i32 %conv144, 16, !dbg !4123
  br i1 %cmp145, label %if.then147, label %if.end165, !dbg !4125

if.then147:                                       ; preds = %cond.end140, %cond.end118, %cond.end96, %cond.end74, %cond.end52, %cond.end
  %42 = load i32, i32* %subtype.addr, align 4, !dbg !4126
  %cmp148 = icmp eq i32 %42, 2, !dbg !4129
  br i1 %cmp148, label %if.then150, label %if.end158, !dbg !4130

if.then150:                                       ; preds = %if.then147
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4131
  %base151 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4131
  %44 = bitcast %struct.tree_base* %base151 to i64*, !dbg !4131
  %bf.load152 = load i64, i64* %44, align 8, !dbg !4131
  %bf.lshr153 = lshr i64 %bf.load152, 31, !dbg !4131
  %bf.clear154 = and i64 %bf.lshr153, 1, !dbg !4131
  %bf.cast155 = trunc i64 %bf.clear154 to i32, !dbg !4131
  %tobool156 = icmp ne i32 %bf.cast155, 0, !dbg !4131
  %45 = zext i1 %tobool156 to i64, !dbg !4131
  %cond157 = select i1 %tobool156, %struct.optab_d* null, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 49), !dbg !4131
  store %struct.optab_d* %cond157, %struct.optab_d** %retval, align 8, !dbg !4132
  br label %return, !dbg !4132

if.end158:                                        ; preds = %if.then147
  %46 = load i32, i32* %subtype.addr, align 4, !dbg !4133
  %cmp159 = icmp eq i32 %46, 1, !dbg !4133
  br i1 %cmp159, label %cond.false162, label %cond.true161, !dbg !4133

cond.true161:                                     ; preds = %if.end158
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 360, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4133
  br label %cond.end163, !dbg !4133

cond.false162:                                    ; preds = %if.end158
  br label %cond.end163, !dbg !4133

cond.end163:                                      ; preds = %cond.false162, %cond.true161
  %cond164 = phi i32 [ 0, %cond.true161 ], [ 0, %cond.false162 ], !dbg !4133
  br label %if.end165, !dbg !4134

if.end165:                                        ; preds = %cond.end163, %cond.end140
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4135
  %base166 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !4135
  %48 = bitcast %struct.tree_base* %base166 to i64*, !dbg !4135
  %bf.load167 = load i64, i64* %48, align 8, !dbg !4135
  %bf.lshr168 = lshr i64 %bf.load167, 31, !dbg !4135
  %bf.clear169 = and i64 %bf.lshr168, 1, !dbg !4135
  %bf.cast170 = trunc i64 %bf.clear169 to i32, !dbg !4135
  %tobool171 = icmp ne i32 %bf.cast170, 0, !dbg !4135
  br i1 %tobool171, label %if.then172, label %if.end180, !dbg !4137

if.then172:                                       ; preds = %if.end165
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4138
  %base173 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !4138
  %50 = bitcast %struct.tree_base* %base173 to i64*, !dbg !4138
  %bf.load174 = load i64, i64* %50, align 8, !dbg !4138
  %bf.lshr175 = lshr i64 %bf.load174, 21, !dbg !4138
  %bf.clear176 = and i64 %bf.lshr175, 1, !dbg !4138
  %bf.cast177 = trunc i64 %bf.clear176 to i32, !dbg !4138
  %tobool178 = icmp ne i32 %bf.cast177, 0, !dbg !4138
  %51 = zext i1 %tobool178 to i64, !dbg !4138
  %cond179 = select i1 %tobool178, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 11), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 10), !dbg !4138
  store %struct.optab_d* %cond179, %struct.optab_d** %retval, align 8, !dbg !4139
  br label %return, !dbg !4139

if.end180:                                        ; preds = %if.end165
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), %struct.optab_d** %retval, align 8, !dbg !4140
  br label %return, !dbg !4140

sw.bb181:                                         ; preds = %entry
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %base182 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4141
  %53 = bitcast %struct.tree_base* %base182 to i64*, !dbg !4141
  %bf.load183 = load i64, i64* %53, align 8, !dbg !4141
  %bf.clear184 = and i64 %bf.load183, 65535, !dbg !4141
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !4141
  %cmp186 = icmp eq i32 %bf.cast185, 14, !dbg !4141
  br i1 %cmp186, label %cond.true188, label %cond.false190, !dbg !4141

cond.true188:                                     ; preds = %sw.bb181
  %54 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %call189 = call i32 @vector_type_mode(%union.tree_node* %54), !dbg !4141
  br label %cond.end196, !dbg !4141

cond.false190:                                    ; preds = %sw.bb181
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type191 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !4141
  %mode192 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type191, i32 0, i32 6, !dbg !4141
  %bf.load193 = load i32, i32* %mode192, align 4, !dbg !4141
  %bf.lshr194 = lshr i32 %bf.load193, 16, !dbg !4141
  %bf.clear195 = and i32 %bf.lshr194, 255, !dbg !4141
  br label %cond.end196, !dbg !4141

cond.end196:                                      ; preds = %cond.false190, %cond.true188
  %cond197 = phi i32 [ %call189, %cond.true188 ], [ %bf.clear195, %cond.false190 ], !dbg !4141
  %idxprom198 = zext i32 %cond197 to i64, !dbg !4141
  %arrayidx199 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom198, !dbg !4141
  %56 = load i8, i8* %arrayidx199, align 1, !dbg !4141
  %conv200 = zext i8 %56 to i32, !dbg !4141
  %cmp201 = icmp eq i32 %conv200, 12, !dbg !4141
  br i1 %cmp201, label %if.then313, label %lor.lhs.false203, !dbg !4141

lor.lhs.false203:                                 ; preds = %cond.end196
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %base204 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !4141
  %58 = bitcast %struct.tree_base* %base204 to i64*, !dbg !4141
  %bf.load205 = load i64, i64* %58, align 8, !dbg !4141
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !4141
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !4141
  %cmp208 = icmp eq i32 %bf.cast207, 14, !dbg !4141
  br i1 %cmp208, label %cond.true210, label %cond.false212, !dbg !4141

cond.true210:                                     ; preds = %lor.lhs.false203
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %call211 = call i32 @vector_type_mode(%union.tree_node* %59), !dbg !4141
  br label %cond.end218, !dbg !4141

cond.false212:                                    ; preds = %lor.lhs.false203
  %60 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type213 = bitcast %union.tree_node* %60 to %struct.tree_type*, !dbg !4141
  %mode214 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type213, i32 0, i32 6, !dbg !4141
  %bf.load215 = load i32, i32* %mode214, align 4, !dbg !4141
  %bf.lshr216 = lshr i32 %bf.load215, 16, !dbg !4141
  %bf.clear217 = and i32 %bf.lshr216, 255, !dbg !4141
  br label %cond.end218, !dbg !4141

cond.end218:                                      ; preds = %cond.false212, %cond.true210
  %cond219 = phi i32 [ %call211, %cond.true210 ], [ %bf.clear217, %cond.false212 ], !dbg !4141
  %idxprom220 = zext i32 %cond219 to i64, !dbg !4141
  %arrayidx221 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom220, !dbg !4141
  %61 = load i8, i8* %arrayidx221, align 1, !dbg !4141
  %conv222 = zext i8 %61 to i32, !dbg !4141
  %cmp223 = icmp eq i32 %conv222, 17, !dbg !4141
  br i1 %cmp223, label %if.then313, label %lor.lhs.false225, !dbg !4141

lor.lhs.false225:                                 ; preds = %cond.end218
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %base226 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !4141
  %63 = bitcast %struct.tree_base* %base226 to i64*, !dbg !4141
  %bf.load227 = load i64, i64* %63, align 8, !dbg !4141
  %bf.clear228 = and i64 %bf.load227, 65535, !dbg !4141
  %bf.cast229 = trunc i64 %bf.clear228 to i32, !dbg !4141
  %cmp230 = icmp eq i32 %bf.cast229, 14, !dbg !4141
  br i1 %cmp230, label %cond.true232, label %cond.false234, !dbg !4141

cond.true232:                                     ; preds = %lor.lhs.false225
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %call233 = call i32 @vector_type_mode(%union.tree_node* %64), !dbg !4141
  br label %cond.end240, !dbg !4141

cond.false234:                                    ; preds = %lor.lhs.false225
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type235 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !4141
  %mode236 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type235, i32 0, i32 6, !dbg !4141
  %bf.load237 = load i32, i32* %mode236, align 4, !dbg !4141
  %bf.lshr238 = lshr i32 %bf.load237, 16, !dbg !4141
  %bf.clear239 = and i32 %bf.lshr238, 255, !dbg !4141
  br label %cond.end240, !dbg !4141

cond.end240:                                      ; preds = %cond.false234, %cond.true232
  %cond241 = phi i32 [ %call233, %cond.true232 ], [ %bf.clear239, %cond.false234 ], !dbg !4141
  %idxprom242 = zext i32 %cond241 to i64, !dbg !4141
  %arrayidx243 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom242, !dbg !4141
  %66 = load i8, i8* %arrayidx243, align 1, !dbg !4141
  %conv244 = zext i8 %66 to i32, !dbg !4141
  %cmp245 = icmp eq i32 %conv244, 13, !dbg !4141
  br i1 %cmp245, label %if.then313, label %lor.lhs.false247, !dbg !4141

lor.lhs.false247:                                 ; preds = %cond.end240
  %67 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %base248 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !4141
  %68 = bitcast %struct.tree_base* %base248 to i64*, !dbg !4141
  %bf.load249 = load i64, i64* %68, align 8, !dbg !4141
  %bf.clear250 = and i64 %bf.load249, 65535, !dbg !4141
  %bf.cast251 = trunc i64 %bf.clear250 to i32, !dbg !4141
  %cmp252 = icmp eq i32 %bf.cast251, 14, !dbg !4141
  br i1 %cmp252, label %cond.true254, label %cond.false256, !dbg !4141

cond.true254:                                     ; preds = %lor.lhs.false247
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %call255 = call i32 @vector_type_mode(%union.tree_node* %69), !dbg !4141
  br label %cond.end262, !dbg !4141

cond.false256:                                    ; preds = %lor.lhs.false247
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type257 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !4141
  %mode258 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type257, i32 0, i32 6, !dbg !4141
  %bf.load259 = load i32, i32* %mode258, align 4, !dbg !4141
  %bf.lshr260 = lshr i32 %bf.load259, 16, !dbg !4141
  %bf.clear261 = and i32 %bf.lshr260, 255, !dbg !4141
  br label %cond.end262, !dbg !4141

cond.end262:                                      ; preds = %cond.false256, %cond.true254
  %cond263 = phi i32 [ %call255, %cond.true254 ], [ %bf.clear261, %cond.false256 ], !dbg !4141
  %idxprom264 = zext i32 %cond263 to i64, !dbg !4141
  %arrayidx265 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom264, !dbg !4141
  %71 = load i8, i8* %arrayidx265, align 1, !dbg !4141
  %conv266 = zext i8 %71 to i32, !dbg !4141
  %cmp267 = icmp eq i32 %conv266, 14, !dbg !4141
  br i1 %cmp267, label %if.then313, label %lor.lhs.false269, !dbg !4141

lor.lhs.false269:                                 ; preds = %cond.end262
  %72 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %base270 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !4141
  %73 = bitcast %struct.tree_base* %base270 to i64*, !dbg !4141
  %bf.load271 = load i64, i64* %73, align 8, !dbg !4141
  %bf.clear272 = and i64 %bf.load271, 65535, !dbg !4141
  %bf.cast273 = trunc i64 %bf.clear272 to i32, !dbg !4141
  %cmp274 = icmp eq i32 %bf.cast273, 14, !dbg !4141
  br i1 %cmp274, label %cond.true276, label %cond.false278, !dbg !4141

cond.true276:                                     ; preds = %lor.lhs.false269
  %74 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %call277 = call i32 @vector_type_mode(%union.tree_node* %74), !dbg !4141
  br label %cond.end284, !dbg !4141

cond.false278:                                    ; preds = %lor.lhs.false269
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type279 = bitcast %union.tree_node* %75 to %struct.tree_type*, !dbg !4141
  %mode280 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type279, i32 0, i32 6, !dbg !4141
  %bf.load281 = load i32, i32* %mode280, align 4, !dbg !4141
  %bf.lshr282 = lshr i32 %bf.load281, 16, !dbg !4141
  %bf.clear283 = and i32 %bf.lshr282, 255, !dbg !4141
  br label %cond.end284, !dbg !4141

cond.end284:                                      ; preds = %cond.false278, %cond.true276
  %cond285 = phi i32 [ %call277, %cond.true276 ], [ %bf.clear283, %cond.false278 ], !dbg !4141
  %idxprom286 = zext i32 %cond285 to i64, !dbg !4141
  %arrayidx287 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom286, !dbg !4141
  %76 = load i8, i8* %arrayidx287, align 1, !dbg !4141
  %conv288 = zext i8 %76 to i32, !dbg !4141
  %cmp289 = icmp eq i32 %conv288, 15, !dbg !4141
  br i1 %cmp289, label %if.then313, label %lor.lhs.false291, !dbg !4141

lor.lhs.false291:                                 ; preds = %cond.end284
  %77 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %base292 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !4141
  %78 = bitcast %struct.tree_base* %base292 to i64*, !dbg !4141
  %bf.load293 = load i64, i64* %78, align 8, !dbg !4141
  %bf.clear294 = and i64 %bf.load293, 65535, !dbg !4141
  %bf.cast295 = trunc i64 %bf.clear294 to i32, !dbg !4141
  %cmp296 = icmp eq i32 %bf.cast295, 14, !dbg !4141
  br i1 %cmp296, label %cond.true298, label %cond.false300, !dbg !4141

cond.true298:                                     ; preds = %lor.lhs.false291
  %79 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %call299 = call i32 @vector_type_mode(%union.tree_node* %79), !dbg !4141
  br label %cond.end306, !dbg !4141

cond.false300:                                    ; preds = %lor.lhs.false291
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4141
  %type301 = bitcast %union.tree_node* %80 to %struct.tree_type*, !dbg !4141
  %mode302 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type301, i32 0, i32 6, !dbg !4141
  %bf.load303 = load i32, i32* %mode302, align 4, !dbg !4141
  %bf.lshr304 = lshr i32 %bf.load303, 16, !dbg !4141
  %bf.clear305 = and i32 %bf.lshr304, 255, !dbg !4141
  br label %cond.end306, !dbg !4141

cond.end306:                                      ; preds = %cond.false300, %cond.true298
  %cond307 = phi i32 [ %call299, %cond.true298 ], [ %bf.clear305, %cond.false300 ], !dbg !4141
  %idxprom308 = zext i32 %cond307 to i64, !dbg !4141
  %arrayidx309 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom308, !dbg !4141
  %81 = load i8, i8* %arrayidx309, align 1, !dbg !4141
  %conv310 = zext i8 %81 to i32, !dbg !4141
  %cmp311 = icmp eq i32 %conv310, 16, !dbg !4141
  br i1 %cmp311, label %if.then313, label %if.end331, !dbg !4143

if.then313:                                       ; preds = %cond.end306, %cond.end284, %cond.end262, %cond.end240, %cond.end218, %cond.end196
  %82 = load i32, i32* %subtype.addr, align 4, !dbg !4144
  %cmp314 = icmp eq i32 %82, 2, !dbg !4147
  br i1 %cmp314, label %if.then316, label %if.end324, !dbg !4148

if.then316:                                       ; preds = %if.then313
  %83 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4149
  %base317 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !4149
  %84 = bitcast %struct.tree_base* %base317 to i64*, !dbg !4149
  %bf.load318 = load i64, i64* %84, align 8, !dbg !4149
  %bf.lshr319 = lshr i64 %bf.load318, 21, !dbg !4149
  %bf.clear320 = and i64 %bf.lshr319, 1, !dbg !4149
  %bf.cast321 = trunc i64 %bf.clear320 to i32, !dbg !4149
  %tobool322 = icmp ne i32 %bf.cast321, 0, !dbg !4149
  %85 = zext i1 %tobool322 to i64, !dbg !4149
  %cond323 = select i1 %tobool322, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 50), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 51), !dbg !4149
  store %struct.optab_d* %cond323, %struct.optab_d** %retval, align 8, !dbg !4150
  br label %return, !dbg !4150

if.end324:                                        ; preds = %if.then313
  %86 = load i32, i32* %subtype.addr, align 4, !dbg !4151
  %cmp325 = icmp eq i32 %86, 1, !dbg !4151
  br i1 %cmp325, label %cond.false328, label %cond.true327, !dbg !4151

cond.true327:                                     ; preds = %if.end324
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 372, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4151
  br label %cond.end329, !dbg !4151

cond.false328:                                    ; preds = %if.end324
  br label %cond.end329, !dbg !4151

cond.end329:                                      ; preds = %cond.false328, %cond.true327
  %cond330 = phi i32 [ 0, %cond.true327 ], [ 0, %cond.false328 ], !dbg !4151
  br label %if.end331, !dbg !4152

if.end331:                                        ; preds = %cond.end329, %cond.end306
  %87 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4153
  %base332 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !4153
  %88 = bitcast %struct.tree_base* %base332 to i64*, !dbg !4153
  %bf.load333 = load i64, i64* %88, align 8, !dbg !4153
  %bf.lshr334 = lshr i64 %bf.load333, 21, !dbg !4153
  %bf.clear335 = and i64 %bf.lshr334, 1, !dbg !4153
  %bf.cast336 = trunc i64 %bf.clear335 to i32, !dbg !4153
  %tobool337 = icmp ne i32 %bf.cast336, 0, !dbg !4153
  %89 = zext i1 %tobool337 to i64, !dbg !4153
  %cond338 = select i1 %tobool337, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), !dbg !4153
  store %struct.optab_d* %cond338, %struct.optab_d** %retval, align 8, !dbg !4154
  br label %return, !dbg !4154

sw.bb339:                                         ; preds = %entry
  %90 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %base340 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !4155
  %91 = bitcast %struct.tree_base* %base340 to i64*, !dbg !4155
  %bf.load341 = load i64, i64* %91, align 8, !dbg !4155
  %bf.clear342 = and i64 %bf.load341, 65535, !dbg !4155
  %bf.cast343 = trunc i64 %bf.clear342 to i32, !dbg !4155
  %cmp344 = icmp eq i32 %bf.cast343, 14, !dbg !4155
  br i1 %cmp344, label %cond.true346, label %cond.false348, !dbg !4155

cond.true346:                                     ; preds = %sw.bb339
  %92 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %call347 = call i32 @vector_type_mode(%union.tree_node* %92), !dbg !4155
  br label %cond.end354, !dbg !4155

cond.false348:                                    ; preds = %sw.bb339
  %93 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %type349 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !4155
  %mode350 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type349, i32 0, i32 6, !dbg !4155
  %bf.load351 = load i32, i32* %mode350, align 4, !dbg !4155
  %bf.lshr352 = lshr i32 %bf.load351, 16, !dbg !4155
  %bf.clear353 = and i32 %bf.lshr352, 255, !dbg !4155
  br label %cond.end354, !dbg !4155

cond.end354:                                      ; preds = %cond.false348, %cond.true346
  %cond355 = phi i32 [ %call347, %cond.true346 ], [ %bf.clear353, %cond.false348 ], !dbg !4155
  %idxprom356 = zext i32 %cond355 to i64, !dbg !4155
  %arrayidx357 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom356, !dbg !4155
  %94 = load i8, i8* %arrayidx357, align 1, !dbg !4155
  %conv358 = zext i8 %94 to i32, !dbg !4155
  %cmp359 = icmp eq i32 %conv358, 12, !dbg !4155
  br i1 %cmp359, label %if.then471, label %lor.lhs.false361, !dbg !4155

lor.lhs.false361:                                 ; preds = %cond.end354
  %95 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %base362 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !4155
  %96 = bitcast %struct.tree_base* %base362 to i64*, !dbg !4155
  %bf.load363 = load i64, i64* %96, align 8, !dbg !4155
  %bf.clear364 = and i64 %bf.load363, 65535, !dbg !4155
  %bf.cast365 = trunc i64 %bf.clear364 to i32, !dbg !4155
  %cmp366 = icmp eq i32 %bf.cast365, 14, !dbg !4155
  br i1 %cmp366, label %cond.true368, label %cond.false370, !dbg !4155

cond.true368:                                     ; preds = %lor.lhs.false361
  %97 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %call369 = call i32 @vector_type_mode(%union.tree_node* %97), !dbg !4155
  br label %cond.end376, !dbg !4155

cond.false370:                                    ; preds = %lor.lhs.false361
  %98 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %type371 = bitcast %union.tree_node* %98 to %struct.tree_type*, !dbg !4155
  %mode372 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type371, i32 0, i32 6, !dbg !4155
  %bf.load373 = load i32, i32* %mode372, align 4, !dbg !4155
  %bf.lshr374 = lshr i32 %bf.load373, 16, !dbg !4155
  %bf.clear375 = and i32 %bf.lshr374, 255, !dbg !4155
  br label %cond.end376, !dbg !4155

cond.end376:                                      ; preds = %cond.false370, %cond.true368
  %cond377 = phi i32 [ %call369, %cond.true368 ], [ %bf.clear375, %cond.false370 ], !dbg !4155
  %idxprom378 = zext i32 %cond377 to i64, !dbg !4155
  %arrayidx379 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom378, !dbg !4155
  %99 = load i8, i8* %arrayidx379, align 1, !dbg !4155
  %conv380 = zext i8 %99 to i32, !dbg !4155
  %cmp381 = icmp eq i32 %conv380, 17, !dbg !4155
  br i1 %cmp381, label %if.then471, label %lor.lhs.false383, !dbg !4155

lor.lhs.false383:                                 ; preds = %cond.end376
  %100 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %base384 = bitcast %union.tree_node* %100 to %struct.tree_base*, !dbg !4155
  %101 = bitcast %struct.tree_base* %base384 to i64*, !dbg !4155
  %bf.load385 = load i64, i64* %101, align 8, !dbg !4155
  %bf.clear386 = and i64 %bf.load385, 65535, !dbg !4155
  %bf.cast387 = trunc i64 %bf.clear386 to i32, !dbg !4155
  %cmp388 = icmp eq i32 %bf.cast387, 14, !dbg !4155
  br i1 %cmp388, label %cond.true390, label %cond.false392, !dbg !4155

cond.true390:                                     ; preds = %lor.lhs.false383
  %102 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %call391 = call i32 @vector_type_mode(%union.tree_node* %102), !dbg !4155
  br label %cond.end398, !dbg !4155

cond.false392:                                    ; preds = %lor.lhs.false383
  %103 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %type393 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !4155
  %mode394 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type393, i32 0, i32 6, !dbg !4155
  %bf.load395 = load i32, i32* %mode394, align 4, !dbg !4155
  %bf.lshr396 = lshr i32 %bf.load395, 16, !dbg !4155
  %bf.clear397 = and i32 %bf.lshr396, 255, !dbg !4155
  br label %cond.end398, !dbg !4155

cond.end398:                                      ; preds = %cond.false392, %cond.true390
  %cond399 = phi i32 [ %call391, %cond.true390 ], [ %bf.clear397, %cond.false392 ], !dbg !4155
  %idxprom400 = zext i32 %cond399 to i64, !dbg !4155
  %arrayidx401 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom400, !dbg !4155
  %104 = load i8, i8* %arrayidx401, align 1, !dbg !4155
  %conv402 = zext i8 %104 to i32, !dbg !4155
  %cmp403 = icmp eq i32 %conv402, 13, !dbg !4155
  br i1 %cmp403, label %if.then471, label %lor.lhs.false405, !dbg !4155

lor.lhs.false405:                                 ; preds = %cond.end398
  %105 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %base406 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !4155
  %106 = bitcast %struct.tree_base* %base406 to i64*, !dbg !4155
  %bf.load407 = load i64, i64* %106, align 8, !dbg !4155
  %bf.clear408 = and i64 %bf.load407, 65535, !dbg !4155
  %bf.cast409 = trunc i64 %bf.clear408 to i32, !dbg !4155
  %cmp410 = icmp eq i32 %bf.cast409, 14, !dbg !4155
  br i1 %cmp410, label %cond.true412, label %cond.false414, !dbg !4155

cond.true412:                                     ; preds = %lor.lhs.false405
  %107 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %call413 = call i32 @vector_type_mode(%union.tree_node* %107), !dbg !4155
  br label %cond.end420, !dbg !4155

cond.false414:                                    ; preds = %lor.lhs.false405
  %108 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %type415 = bitcast %union.tree_node* %108 to %struct.tree_type*, !dbg !4155
  %mode416 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type415, i32 0, i32 6, !dbg !4155
  %bf.load417 = load i32, i32* %mode416, align 4, !dbg !4155
  %bf.lshr418 = lshr i32 %bf.load417, 16, !dbg !4155
  %bf.clear419 = and i32 %bf.lshr418, 255, !dbg !4155
  br label %cond.end420, !dbg !4155

cond.end420:                                      ; preds = %cond.false414, %cond.true412
  %cond421 = phi i32 [ %call413, %cond.true412 ], [ %bf.clear419, %cond.false414 ], !dbg !4155
  %idxprom422 = zext i32 %cond421 to i64, !dbg !4155
  %arrayidx423 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom422, !dbg !4155
  %109 = load i8, i8* %arrayidx423, align 1, !dbg !4155
  %conv424 = zext i8 %109 to i32, !dbg !4155
  %cmp425 = icmp eq i32 %conv424, 14, !dbg !4155
  br i1 %cmp425, label %if.then471, label %lor.lhs.false427, !dbg !4155

lor.lhs.false427:                                 ; preds = %cond.end420
  %110 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %base428 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !4155
  %111 = bitcast %struct.tree_base* %base428 to i64*, !dbg !4155
  %bf.load429 = load i64, i64* %111, align 8, !dbg !4155
  %bf.clear430 = and i64 %bf.load429, 65535, !dbg !4155
  %bf.cast431 = trunc i64 %bf.clear430 to i32, !dbg !4155
  %cmp432 = icmp eq i32 %bf.cast431, 14, !dbg !4155
  br i1 %cmp432, label %cond.true434, label %cond.false436, !dbg !4155

cond.true434:                                     ; preds = %lor.lhs.false427
  %112 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %call435 = call i32 @vector_type_mode(%union.tree_node* %112), !dbg !4155
  br label %cond.end442, !dbg !4155

cond.false436:                                    ; preds = %lor.lhs.false427
  %113 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %type437 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !4155
  %mode438 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type437, i32 0, i32 6, !dbg !4155
  %bf.load439 = load i32, i32* %mode438, align 4, !dbg !4155
  %bf.lshr440 = lshr i32 %bf.load439, 16, !dbg !4155
  %bf.clear441 = and i32 %bf.lshr440, 255, !dbg !4155
  br label %cond.end442, !dbg !4155

cond.end442:                                      ; preds = %cond.false436, %cond.true434
  %cond443 = phi i32 [ %call435, %cond.true434 ], [ %bf.clear441, %cond.false436 ], !dbg !4155
  %idxprom444 = zext i32 %cond443 to i64, !dbg !4155
  %arrayidx445 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom444, !dbg !4155
  %114 = load i8, i8* %arrayidx445, align 1, !dbg !4155
  %conv446 = zext i8 %114 to i32, !dbg !4155
  %cmp447 = icmp eq i32 %conv446, 15, !dbg !4155
  br i1 %cmp447, label %if.then471, label %lor.lhs.false449, !dbg !4155

lor.lhs.false449:                                 ; preds = %cond.end442
  %115 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %base450 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !4155
  %116 = bitcast %struct.tree_base* %base450 to i64*, !dbg !4155
  %bf.load451 = load i64, i64* %116, align 8, !dbg !4155
  %bf.clear452 = and i64 %bf.load451, 65535, !dbg !4155
  %bf.cast453 = trunc i64 %bf.clear452 to i32, !dbg !4155
  %cmp454 = icmp eq i32 %bf.cast453, 14, !dbg !4155
  br i1 %cmp454, label %cond.true456, label %cond.false458, !dbg !4155

cond.true456:                                     ; preds = %lor.lhs.false449
  %117 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %call457 = call i32 @vector_type_mode(%union.tree_node* %117), !dbg !4155
  br label %cond.end464, !dbg !4155

cond.false458:                                    ; preds = %lor.lhs.false449
  %118 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4155
  %type459 = bitcast %union.tree_node* %118 to %struct.tree_type*, !dbg !4155
  %mode460 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type459, i32 0, i32 6, !dbg !4155
  %bf.load461 = load i32, i32* %mode460, align 4, !dbg !4155
  %bf.lshr462 = lshr i32 %bf.load461, 16, !dbg !4155
  %bf.clear463 = and i32 %bf.lshr462, 255, !dbg !4155
  br label %cond.end464, !dbg !4155

cond.end464:                                      ; preds = %cond.false458, %cond.true456
  %cond465 = phi i32 [ %call457, %cond.true456 ], [ %bf.clear463, %cond.false458 ], !dbg !4155
  %idxprom466 = zext i32 %cond465 to i64, !dbg !4155
  %arrayidx467 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom466, !dbg !4155
  %119 = load i8, i8* %arrayidx467, align 1, !dbg !4155
  %conv468 = zext i8 %119 to i32, !dbg !4155
  %cmp469 = icmp eq i32 %conv468, 16, !dbg !4155
  br i1 %cmp469, label %if.then471, label %if.end482, !dbg !4157

if.then471:                                       ; preds = %cond.end464, %cond.end442, %cond.end420, %cond.end398, %cond.end376, %cond.end354
  %120 = load i32, i32* %subtype.addr, align 4, !dbg !4158
  %cmp472 = icmp eq i32 %120, 2, !dbg !4161
  br i1 %cmp472, label %if.then474, label %if.end475, !dbg !4162

if.then474:                                       ; preds = %if.then471
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 52), %struct.optab_d** %retval, align 8, !dbg !4163
  br label %return, !dbg !4163

if.end475:                                        ; preds = %if.then471
  %121 = load i32, i32* %subtype.addr, align 4, !dbg !4164
  %cmp476 = icmp eq i32 %121, 1, !dbg !4164
  br i1 %cmp476, label %cond.false479, label %cond.true478, !dbg !4164

cond.true478:                                     ; preds = %if.end475
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 382, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4164
  br label %cond.end480, !dbg !4164

cond.false479:                                    ; preds = %if.end475
  br label %cond.end480, !dbg !4164

cond.end480:                                      ; preds = %cond.false479, %cond.true478
  %cond481 = phi i32 [ 0, %cond.true478 ], [ 0, %cond.false479 ], !dbg !4164
  br label %if.end482, !dbg !4165

if.end482:                                        ; preds = %cond.end480, %cond.end464
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), %struct.optab_d** %retval, align 8, !dbg !4166
  br label %return, !dbg !4166

sw.bb483:                                         ; preds = %entry
  %122 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %base484 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !4167
  %123 = bitcast %struct.tree_base* %base484 to i64*, !dbg !4167
  %bf.load485 = load i64, i64* %123, align 8, !dbg !4167
  %bf.clear486 = and i64 %bf.load485, 65535, !dbg !4167
  %bf.cast487 = trunc i64 %bf.clear486 to i32, !dbg !4167
  %cmp488 = icmp eq i32 %bf.cast487, 14, !dbg !4167
  br i1 %cmp488, label %cond.true490, label %cond.false492, !dbg !4167

cond.true490:                                     ; preds = %sw.bb483
  %124 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %call491 = call i32 @vector_type_mode(%union.tree_node* %124), !dbg !4167
  br label %cond.end498, !dbg !4167

cond.false492:                                    ; preds = %sw.bb483
  %125 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %type493 = bitcast %union.tree_node* %125 to %struct.tree_type*, !dbg !4167
  %mode494 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type493, i32 0, i32 6, !dbg !4167
  %bf.load495 = load i32, i32* %mode494, align 4, !dbg !4167
  %bf.lshr496 = lshr i32 %bf.load495, 16, !dbg !4167
  %bf.clear497 = and i32 %bf.lshr496, 255, !dbg !4167
  br label %cond.end498, !dbg !4167

cond.end498:                                      ; preds = %cond.false492, %cond.true490
  %cond499 = phi i32 [ %call491, %cond.true490 ], [ %bf.clear497, %cond.false492 ], !dbg !4167
  %idxprom500 = zext i32 %cond499 to i64, !dbg !4167
  %arrayidx501 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom500, !dbg !4167
  %126 = load i8, i8* %arrayidx501, align 1, !dbg !4167
  %conv502 = zext i8 %126 to i32, !dbg !4167
  %cmp503 = icmp eq i32 %conv502, 12, !dbg !4167
  br i1 %cmp503, label %if.then615, label %lor.lhs.false505, !dbg !4167

lor.lhs.false505:                                 ; preds = %cond.end498
  %127 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %base506 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !4167
  %128 = bitcast %struct.tree_base* %base506 to i64*, !dbg !4167
  %bf.load507 = load i64, i64* %128, align 8, !dbg !4167
  %bf.clear508 = and i64 %bf.load507, 65535, !dbg !4167
  %bf.cast509 = trunc i64 %bf.clear508 to i32, !dbg !4167
  %cmp510 = icmp eq i32 %bf.cast509, 14, !dbg !4167
  br i1 %cmp510, label %cond.true512, label %cond.false514, !dbg !4167

cond.true512:                                     ; preds = %lor.lhs.false505
  %129 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %call513 = call i32 @vector_type_mode(%union.tree_node* %129), !dbg !4167
  br label %cond.end520, !dbg !4167

cond.false514:                                    ; preds = %lor.lhs.false505
  %130 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %type515 = bitcast %union.tree_node* %130 to %struct.tree_type*, !dbg !4167
  %mode516 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type515, i32 0, i32 6, !dbg !4167
  %bf.load517 = load i32, i32* %mode516, align 4, !dbg !4167
  %bf.lshr518 = lshr i32 %bf.load517, 16, !dbg !4167
  %bf.clear519 = and i32 %bf.lshr518, 255, !dbg !4167
  br label %cond.end520, !dbg !4167

cond.end520:                                      ; preds = %cond.false514, %cond.true512
  %cond521 = phi i32 [ %call513, %cond.true512 ], [ %bf.clear519, %cond.false514 ], !dbg !4167
  %idxprom522 = zext i32 %cond521 to i64, !dbg !4167
  %arrayidx523 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom522, !dbg !4167
  %131 = load i8, i8* %arrayidx523, align 1, !dbg !4167
  %conv524 = zext i8 %131 to i32, !dbg !4167
  %cmp525 = icmp eq i32 %conv524, 17, !dbg !4167
  br i1 %cmp525, label %if.then615, label %lor.lhs.false527, !dbg !4167

lor.lhs.false527:                                 ; preds = %cond.end520
  %132 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %base528 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !4167
  %133 = bitcast %struct.tree_base* %base528 to i64*, !dbg !4167
  %bf.load529 = load i64, i64* %133, align 8, !dbg !4167
  %bf.clear530 = and i64 %bf.load529, 65535, !dbg !4167
  %bf.cast531 = trunc i64 %bf.clear530 to i32, !dbg !4167
  %cmp532 = icmp eq i32 %bf.cast531, 14, !dbg !4167
  br i1 %cmp532, label %cond.true534, label %cond.false536, !dbg !4167

cond.true534:                                     ; preds = %lor.lhs.false527
  %134 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %call535 = call i32 @vector_type_mode(%union.tree_node* %134), !dbg !4167
  br label %cond.end542, !dbg !4167

cond.false536:                                    ; preds = %lor.lhs.false527
  %135 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %type537 = bitcast %union.tree_node* %135 to %struct.tree_type*, !dbg !4167
  %mode538 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type537, i32 0, i32 6, !dbg !4167
  %bf.load539 = load i32, i32* %mode538, align 4, !dbg !4167
  %bf.lshr540 = lshr i32 %bf.load539, 16, !dbg !4167
  %bf.clear541 = and i32 %bf.lshr540, 255, !dbg !4167
  br label %cond.end542, !dbg !4167

cond.end542:                                      ; preds = %cond.false536, %cond.true534
  %cond543 = phi i32 [ %call535, %cond.true534 ], [ %bf.clear541, %cond.false536 ], !dbg !4167
  %idxprom544 = zext i32 %cond543 to i64, !dbg !4167
  %arrayidx545 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom544, !dbg !4167
  %136 = load i8, i8* %arrayidx545, align 1, !dbg !4167
  %conv546 = zext i8 %136 to i32, !dbg !4167
  %cmp547 = icmp eq i32 %conv546, 13, !dbg !4167
  br i1 %cmp547, label %if.then615, label %lor.lhs.false549, !dbg !4167

lor.lhs.false549:                                 ; preds = %cond.end542
  %137 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %base550 = bitcast %union.tree_node* %137 to %struct.tree_base*, !dbg !4167
  %138 = bitcast %struct.tree_base* %base550 to i64*, !dbg !4167
  %bf.load551 = load i64, i64* %138, align 8, !dbg !4167
  %bf.clear552 = and i64 %bf.load551, 65535, !dbg !4167
  %bf.cast553 = trunc i64 %bf.clear552 to i32, !dbg !4167
  %cmp554 = icmp eq i32 %bf.cast553, 14, !dbg !4167
  br i1 %cmp554, label %cond.true556, label %cond.false558, !dbg !4167

cond.true556:                                     ; preds = %lor.lhs.false549
  %139 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %call557 = call i32 @vector_type_mode(%union.tree_node* %139), !dbg !4167
  br label %cond.end564, !dbg !4167

cond.false558:                                    ; preds = %lor.lhs.false549
  %140 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %type559 = bitcast %union.tree_node* %140 to %struct.tree_type*, !dbg !4167
  %mode560 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type559, i32 0, i32 6, !dbg !4167
  %bf.load561 = load i32, i32* %mode560, align 4, !dbg !4167
  %bf.lshr562 = lshr i32 %bf.load561, 16, !dbg !4167
  %bf.clear563 = and i32 %bf.lshr562, 255, !dbg !4167
  br label %cond.end564, !dbg !4167

cond.end564:                                      ; preds = %cond.false558, %cond.true556
  %cond565 = phi i32 [ %call557, %cond.true556 ], [ %bf.clear563, %cond.false558 ], !dbg !4167
  %idxprom566 = zext i32 %cond565 to i64, !dbg !4167
  %arrayidx567 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom566, !dbg !4167
  %141 = load i8, i8* %arrayidx567, align 1, !dbg !4167
  %conv568 = zext i8 %141 to i32, !dbg !4167
  %cmp569 = icmp eq i32 %conv568, 14, !dbg !4167
  br i1 %cmp569, label %if.then615, label %lor.lhs.false571, !dbg !4167

lor.lhs.false571:                                 ; preds = %cond.end564
  %142 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %base572 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !4167
  %143 = bitcast %struct.tree_base* %base572 to i64*, !dbg !4167
  %bf.load573 = load i64, i64* %143, align 8, !dbg !4167
  %bf.clear574 = and i64 %bf.load573, 65535, !dbg !4167
  %bf.cast575 = trunc i64 %bf.clear574 to i32, !dbg !4167
  %cmp576 = icmp eq i32 %bf.cast575, 14, !dbg !4167
  br i1 %cmp576, label %cond.true578, label %cond.false580, !dbg !4167

cond.true578:                                     ; preds = %lor.lhs.false571
  %144 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %call579 = call i32 @vector_type_mode(%union.tree_node* %144), !dbg !4167
  br label %cond.end586, !dbg !4167

cond.false580:                                    ; preds = %lor.lhs.false571
  %145 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %type581 = bitcast %union.tree_node* %145 to %struct.tree_type*, !dbg !4167
  %mode582 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type581, i32 0, i32 6, !dbg !4167
  %bf.load583 = load i32, i32* %mode582, align 4, !dbg !4167
  %bf.lshr584 = lshr i32 %bf.load583, 16, !dbg !4167
  %bf.clear585 = and i32 %bf.lshr584, 255, !dbg !4167
  br label %cond.end586, !dbg !4167

cond.end586:                                      ; preds = %cond.false580, %cond.true578
  %cond587 = phi i32 [ %call579, %cond.true578 ], [ %bf.clear585, %cond.false580 ], !dbg !4167
  %idxprom588 = zext i32 %cond587 to i64, !dbg !4167
  %arrayidx589 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom588, !dbg !4167
  %146 = load i8, i8* %arrayidx589, align 1, !dbg !4167
  %conv590 = zext i8 %146 to i32, !dbg !4167
  %cmp591 = icmp eq i32 %conv590, 15, !dbg !4167
  br i1 %cmp591, label %if.then615, label %lor.lhs.false593, !dbg !4167

lor.lhs.false593:                                 ; preds = %cond.end586
  %147 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %base594 = bitcast %union.tree_node* %147 to %struct.tree_base*, !dbg !4167
  %148 = bitcast %struct.tree_base* %base594 to i64*, !dbg !4167
  %bf.load595 = load i64, i64* %148, align 8, !dbg !4167
  %bf.clear596 = and i64 %bf.load595, 65535, !dbg !4167
  %bf.cast597 = trunc i64 %bf.clear596 to i32, !dbg !4167
  %cmp598 = icmp eq i32 %bf.cast597, 14, !dbg !4167
  br i1 %cmp598, label %cond.true600, label %cond.false602, !dbg !4167

cond.true600:                                     ; preds = %lor.lhs.false593
  %149 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %call601 = call i32 @vector_type_mode(%union.tree_node* %149), !dbg !4167
  br label %cond.end608, !dbg !4167

cond.false602:                                    ; preds = %lor.lhs.false593
  %150 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4167
  %type603 = bitcast %union.tree_node* %150 to %struct.tree_type*, !dbg !4167
  %mode604 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type603, i32 0, i32 6, !dbg !4167
  %bf.load605 = load i32, i32* %mode604, align 4, !dbg !4167
  %bf.lshr606 = lshr i32 %bf.load605, 16, !dbg !4167
  %bf.clear607 = and i32 %bf.lshr606, 255, !dbg !4167
  br label %cond.end608, !dbg !4167

cond.end608:                                      ; preds = %cond.false602, %cond.true600
  %cond609 = phi i32 [ %call601, %cond.true600 ], [ %bf.clear607, %cond.false602 ], !dbg !4167
  %idxprom610 = zext i32 %cond609 to i64, !dbg !4167
  %arrayidx611 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom610, !dbg !4167
  %151 = load i8, i8* %arrayidx611, align 1, !dbg !4167
  %conv612 = zext i8 %151 to i32, !dbg !4167
  %cmp613 = icmp eq i32 %conv612, 16, !dbg !4167
  br i1 %cmp613, label %if.then615, label %if.end626, !dbg !4169

if.then615:                                       ; preds = %cond.end608, %cond.end586, %cond.end564, %cond.end542, %cond.end520, %cond.end498
  %152 = load i32, i32* %subtype.addr, align 4, !dbg !4170
  %cmp616 = icmp eq i32 %152, 2, !dbg !4173
  br i1 %cmp616, label %if.then618, label %if.end619, !dbg !4174

if.then618:                                       ; preds = %if.then615
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 53), %struct.optab_d** %retval, align 8, !dbg !4175
  br label %return, !dbg !4175

if.end619:                                        ; preds = %if.then615
  %153 = load i32, i32* %subtype.addr, align 4, !dbg !4176
  %cmp620 = icmp eq i32 %153, 1, !dbg !4176
  br i1 %cmp620, label %cond.false623, label %cond.true622, !dbg !4176

cond.true622:                                     ; preds = %if.end619
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 392, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4176
  br label %cond.end624, !dbg !4176

cond.false623:                                    ; preds = %if.end619
  br label %cond.end624, !dbg !4176

cond.end624:                                      ; preds = %cond.false623, %cond.true622
  %cond625 = phi i32 [ 0, %cond.true622 ], [ 0, %cond.false623 ], !dbg !4176
  br label %if.end626, !dbg !4177

if.end626:                                        ; preds = %cond.end624, %cond.end608
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48), %struct.optab_d** %retval, align 8, !dbg !4178
  br label %return, !dbg !4178

sw.bb627:                                         ; preds = %entry
  %154 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4179
  %base628 = bitcast %union.tree_node* %154 to %struct.tree_base*, !dbg !4179
  %155 = bitcast %struct.tree_base* %base628 to i64*, !dbg !4179
  %bf.load629 = load i64, i64* %155, align 8, !dbg !4179
  %bf.lshr630 = lshr i64 %bf.load629, 21, !dbg !4179
  %bf.clear631 = and i64 %bf.lshr630, 1, !dbg !4179
  %bf.cast632 = trunc i64 %bf.clear631 to i32, !dbg !4179
  %tobool633 = icmp ne i32 %bf.cast632, 0, !dbg !4179
  %156 = zext i1 %tobool633 to i64, !dbg !4179
  %cond634 = select i1 %tobool633, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 57), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55), !dbg !4179
  store %struct.optab_d* %cond634, %struct.optab_d** %retval, align 8, !dbg !4180
  br label %return, !dbg !4180

sw.bb635:                                         ; preds = %entry
  %157 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4181
  %base636 = bitcast %union.tree_node* %157 to %struct.tree_base*, !dbg !4181
  %158 = bitcast %struct.tree_base* %base636 to i64*, !dbg !4181
  %bf.load637 = load i64, i64* %158, align 8, !dbg !4181
  %bf.lshr638 = lshr i64 %bf.load637, 21, !dbg !4181
  %bf.clear639 = and i64 %bf.lshr638, 1, !dbg !4181
  %bf.cast640 = trunc i64 %bf.clear639 to i32, !dbg !4181
  %tobool641 = icmp ne i32 %bf.cast640, 0, !dbg !4181
  %159 = zext i1 %tobool641 to i64, !dbg !4181
  %cond642 = select i1 %tobool641, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 56), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 54), !dbg !4181
  store %struct.optab_d* %cond642, %struct.optab_d** %retval, align 8, !dbg !4182
  br label %return, !dbg !4182

sw.bb643:                                         ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 140), %struct.optab_d** %retval, align 8, !dbg !4183
  br label %return, !dbg !4183

sw.bb644:                                         ; preds = %entry
  %160 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4184
  %base645 = bitcast %union.tree_node* %160 to %struct.tree_base*, !dbg !4184
  %161 = bitcast %struct.tree_base* %base645 to i64*, !dbg !4184
  %bf.load646 = load i64, i64* %161, align 8, !dbg !4184
  %bf.lshr647 = lshr i64 %bf.load646, 21, !dbg !4184
  %bf.clear648 = and i64 %bf.lshr647, 1, !dbg !4184
  %bf.cast649 = trunc i64 %bf.clear648 to i32, !dbg !4184
  %tobool650 = icmp ne i32 %bf.cast649, 0, !dbg !4184
  %162 = zext i1 %tobool650 to i64, !dbg !4184
  %cond651 = select i1 %tobool650, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 128), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 127), !dbg !4184
  store %struct.optab_d* %cond651, %struct.optab_d** %retval, align 8, !dbg !4185
  br label %return, !dbg !4185

sw.bb652:                                         ; preds = %entry
  %163 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4186
  %base653 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !4186
  %164 = bitcast %struct.tree_base* %base653 to i64*, !dbg !4186
  %bf.load654 = load i64, i64* %164, align 8, !dbg !4186
  %bf.lshr655 = lshr i64 %bf.load654, 21, !dbg !4186
  %bf.clear656 = and i64 %bf.lshr655, 1, !dbg !4186
  %bf.cast657 = trunc i64 %bf.clear656 to i32, !dbg !4186
  %tobool658 = icmp ne i32 %bf.cast657, 0, !dbg !4186
  %165 = zext i1 %tobool658 to i64, !dbg !4186
  %cond659 = select i1 %tobool658, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 130), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 129), !dbg !4186
  store %struct.optab_d* %cond659, %struct.optab_d** %retval, align 8, !dbg !4187
  br label %return, !dbg !4187

sw.bb660:                                         ; preds = %entry
  %166 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4188
  %base661 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !4188
  %167 = bitcast %struct.tree_base* %base661 to i64*, !dbg !4188
  %bf.load662 = load i64, i64* %167, align 8, !dbg !4188
  %bf.lshr663 = lshr i64 %bf.load662, 21, !dbg !4188
  %bf.clear664 = and i64 %bf.lshr663, 1, !dbg !4188
  %bf.cast665 = trunc i64 %bf.clear664 to i32, !dbg !4188
  %tobool666 = icmp ne i32 %bf.cast665, 0, !dbg !4188
  %168 = zext i1 %tobool666 to i64, !dbg !4188
  %cond667 = select i1 %tobool666, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 122), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 121), !dbg !4188
  store %struct.optab_d* %cond667, %struct.optab_d** %retval, align 8, !dbg !4189
  br label %return, !dbg !4189

sw.bb668:                                         ; preds = %entry
  %169 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4190
  %base669 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !4190
  %170 = bitcast %struct.tree_base* %base669 to i64*, !dbg !4190
  %bf.load670 = load i64, i64* %170, align 8, !dbg !4190
  %bf.lshr671 = lshr i64 %bf.load670, 21, !dbg !4190
  %bf.clear672 = and i64 %bf.lshr671, 1, !dbg !4190
  %bf.cast673 = trunc i64 %bf.clear672 to i32, !dbg !4190
  %tobool674 = icmp ne i32 %bf.cast673, 0, !dbg !4190
  %171 = zext i1 %tobool674 to i64, !dbg !4190
  %cond675 = select i1 %tobool674, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 124), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 123), !dbg !4190
  store %struct.optab_d* %cond675, %struct.optab_d** %retval, align 8, !dbg !4191
  br label %return, !dbg !4191

sw.bb676:                                         ; preds = %entry
  %172 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4192
  %base677 = bitcast %union.tree_node* %172 to %struct.tree_base*, !dbg !4192
  %173 = bitcast %struct.tree_base* %base677 to i64*, !dbg !4192
  %bf.load678 = load i64, i64* %173, align 8, !dbg !4192
  %bf.lshr679 = lshr i64 %bf.load678, 21, !dbg !4192
  %bf.clear680 = and i64 %bf.lshr679, 1, !dbg !4192
  %bf.cast681 = trunc i64 %bf.clear680 to i32, !dbg !4192
  %tobool682 = icmp ne i32 %bf.cast681, 0, !dbg !4192
  %174 = zext i1 %tobool682 to i64, !dbg !4192
  %cond683 = select i1 %tobool682, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 126), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 125), !dbg !4192
  store %struct.optab_d* %cond683, %struct.optab_d** %retval, align 8, !dbg !4193
  br label %return, !dbg !4193

sw.bb684:                                         ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 138), %struct.optab_d** %retval, align 8, !dbg !4194
  br label %return, !dbg !4194

sw.bb685:                                         ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 139), %struct.optab_d** %retval, align 8, !dbg !4195
  br label %return, !dbg !4195

sw.bb686:                                         ; preds = %entry
  %175 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4196
  %base687 = bitcast %union.tree_node* %175 to %struct.tree_base*, !dbg !4196
  %176 = bitcast %struct.tree_base* %base687 to i64*, !dbg !4196
  %bf.load688 = load i64, i64* %176, align 8, !dbg !4196
  %bf.lshr689 = lshr i64 %bf.load688, 21, !dbg !4196
  %bf.clear690 = and i64 %bf.lshr689, 1, !dbg !4196
  %bf.cast691 = trunc i64 %bf.clear690 to i32, !dbg !4196
  %tobool692 = icmp ne i32 %bf.cast691, 0, !dbg !4196
  %177 = zext i1 %tobool692 to i64, !dbg !4196
  %cond693 = select i1 %tobool692, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 141), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 143), !dbg !4196
  store %struct.optab_d* %cond693, %struct.optab_d** %retval, align 8, !dbg !4197
  br label %return, !dbg !4197

sw.bb694:                                         ; preds = %entry
  %178 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4198
  %base695 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !4198
  %179 = bitcast %struct.tree_base* %base695 to i64*, !dbg !4198
  %bf.load696 = load i64, i64* %179, align 8, !dbg !4198
  %bf.lshr697 = lshr i64 %bf.load696, 21, !dbg !4198
  %bf.clear698 = and i64 %bf.lshr697, 1, !dbg !4198
  %bf.cast699 = trunc i64 %bf.clear698 to i32, !dbg !4198
  %tobool700 = icmp ne i32 %bf.cast699, 0, !dbg !4198
  %180 = zext i1 %tobool700 to i64, !dbg !4198
  %cond701 = select i1 %tobool700, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 142), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 144), !dbg !4198
  store %struct.optab_d* %cond701, %struct.optab_d** %retval, align 8, !dbg !4199
  br label %return, !dbg !4199

sw.bb702:                                         ; preds = %entry
  %181 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4200
  %base703 = bitcast %union.tree_node* %181 to %struct.tree_base*, !dbg !4200
  %182 = bitcast %struct.tree_base* %base703 to i64*, !dbg !4200
  %bf.load704 = load i64, i64* %182, align 8, !dbg !4200
  %bf.lshr705 = lshr i64 %bf.load704, 21, !dbg !4200
  %bf.clear706 = and i64 %bf.lshr705, 1, !dbg !4200
  %bf.cast707 = trunc i64 %bf.clear706 to i32, !dbg !4200
  %tobool708 = icmp ne i32 %bf.cast707, 0, !dbg !4200
  %183 = zext i1 %tobool708 to i64, !dbg !4200
  %cond709 = select i1 %tobool708, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 147), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 145), !dbg !4200
  store %struct.optab_d* %cond709, %struct.optab_d** %retval, align 8, !dbg !4201
  br label %return, !dbg !4201

sw.bb710:                                         ; preds = %entry
  %184 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4202
  %base711 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !4202
  %185 = bitcast %struct.tree_base* %base711 to i64*, !dbg !4202
  %bf.load712 = load i64, i64* %185, align 8, !dbg !4202
  %bf.lshr713 = lshr i64 %bf.load712, 21, !dbg !4202
  %bf.clear714 = and i64 %bf.lshr713, 1, !dbg !4202
  %bf.cast715 = trunc i64 %bf.clear714 to i32, !dbg !4202
  %tobool716 = icmp ne i32 %bf.cast715, 0, !dbg !4202
  %186 = zext i1 %tobool716 to i64, !dbg !4202
  %cond717 = select i1 %tobool716, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 148), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 146), !dbg !4202
  store %struct.optab_d* %cond717, %struct.optab_d** %retval, align 8, !dbg !4203
  br label %return, !dbg !4203

sw.bb718:                                         ; preds = %entry
  %187 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4204
  %base719 = bitcast %union.tree_node* %187 to %struct.tree_base*, !dbg !4204
  %188 = bitcast %struct.tree_base* %base719 to i64*, !dbg !4204
  %bf.load720 = load i64, i64* %188, align 8, !dbg !4204
  %bf.lshr721 = lshr i64 %bf.load720, 21, !dbg !4204
  %bf.clear722 = and i64 %bf.lshr721, 1, !dbg !4204
  %bf.cast723 = trunc i64 %bf.clear722 to i32, !dbg !4204
  %tobool724 = icmp ne i32 %bf.cast723, 0, !dbg !4204
  %189 = zext i1 %tobool724 to i64, !dbg !4204
  %cond725 = select i1 %tobool724, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 151), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 149), !dbg !4204
  store %struct.optab_d* %cond725, %struct.optab_d** %retval, align 8, !dbg !4205
  br label %return, !dbg !4205

sw.bb726:                                         ; preds = %entry
  %190 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4206
  %base727 = bitcast %union.tree_node* %190 to %struct.tree_base*, !dbg !4206
  %191 = bitcast %struct.tree_base* %base727 to i64*, !dbg !4206
  %bf.load728 = load i64, i64* %191, align 8, !dbg !4206
  %bf.lshr729 = lshr i64 %bf.load728, 21, !dbg !4206
  %bf.clear730 = and i64 %bf.lshr729, 1, !dbg !4206
  %bf.cast731 = trunc i64 %bf.clear730 to i32, !dbg !4206
  %tobool732 = icmp ne i32 %bf.cast731, 0, !dbg !4206
  %192 = zext i1 %tobool732 to i64, !dbg !4206
  %cond733 = select i1 %tobool732, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 152), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 150), !dbg !4206
  store %struct.optab_d* %cond733, %struct.optab_d** %retval, align 8, !dbg !4207
  br label %return, !dbg !4207

sw.bb734:                                         ; preds = %entry
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 153), %struct.optab_d** %retval, align 8, !dbg !4208
  br label %return, !dbg !4208

sw.bb735:                                         ; preds = %entry
  %193 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4209
  %base736 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !4209
  %194 = bitcast %struct.tree_base* %base736 to i64*, !dbg !4209
  %bf.load737 = load i64, i64* %194, align 8, !dbg !4209
  %bf.lshr738 = lshr i64 %bf.load737, 21, !dbg !4209
  %bf.clear739 = and i64 %bf.lshr738, 1, !dbg !4209
  %bf.cast740 = trunc i64 %bf.clear739 to i32, !dbg !4209
  %tobool741 = icmp ne i32 %bf.cast740, 0, !dbg !4209
  %195 = zext i1 %tobool741 to i64, !dbg !4209
  %cond742 = select i1 %tobool741, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 154), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 155), !dbg !4209
  store %struct.optab_d* %cond742, %struct.optab_d** %retval, align 8, !dbg !4210
  br label %return, !dbg !4210

sw.bb743:                                         ; preds = %entry
  %196 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4211
  %base744 = bitcast %union.tree_node* %196 to %struct.tree_base*, !dbg !4211
  %197 = bitcast %struct.tree_base* %base744 to i64*, !dbg !4211
  %bf.load745 = load i64, i64* %197, align 8, !dbg !4211
  %bf.lshr746 = lshr i64 %bf.load745, 21, !dbg !4211
  %bf.clear747 = and i64 %bf.lshr746, 1, !dbg !4211
  %bf.cast748 = trunc i64 %bf.clear747 to i32, !dbg !4211
  %tobool749 = icmp ne i32 %bf.cast748, 0, !dbg !4211
  %198 = zext i1 %tobool749 to i64, !dbg !4211
  %cond750 = select i1 %tobool749, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 157), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 156), !dbg !4211
  store %struct.optab_d* %cond750, %struct.optab_d** %retval, align 8, !dbg !4212
  br label %return, !dbg !4212

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !4213

sw.epilog:                                        ; preds = %sw.default
  %199 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4214
  %base751 = bitcast %union.tree_node* %199 to %struct.tree_base*, !dbg !4214
  %200 = bitcast %struct.tree_base* %base751 to i64*, !dbg !4214
  %bf.load752 = load i64, i64* %200, align 8, !dbg !4214
  %bf.clear753 = and i64 %bf.load752, 65535, !dbg !4214
  %bf.cast754 = trunc i64 %bf.clear753 to i32, !dbg !4214
  %cmp755 = icmp eq i32 %bf.cast754, 6, !dbg !4214
  br i1 %cmp755, label %land.rhs, label %lor.lhs.false757, !dbg !4214

lor.lhs.false757:                                 ; preds = %sw.epilog
  %201 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4214
  %base758 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !4214
  %202 = bitcast %struct.tree_base* %base758 to i64*, !dbg !4214
  %bf.load759 = load i64, i64* %202, align 8, !dbg !4214
  %bf.clear760 = and i64 %bf.load759, 65535, !dbg !4214
  %bf.cast761 = trunc i64 %bf.clear760 to i32, !dbg !4214
  %cmp762 = icmp eq i32 %bf.cast761, 7, !dbg !4214
  br i1 %cmp762, label %land.rhs, label %lor.lhs.false764, !dbg !4214

lor.lhs.false764:                                 ; preds = %lor.lhs.false757
  %203 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4214
  %base765 = bitcast %union.tree_node* %203 to %struct.tree_base*, !dbg !4214
  %204 = bitcast %struct.tree_base* %base765 to i64*, !dbg !4214
  %bf.load766 = load i64, i64* %204, align 8, !dbg !4214
  %bf.clear767 = and i64 %bf.load766, 65535, !dbg !4214
  %bf.cast768 = trunc i64 %bf.clear767 to i32, !dbg !4214
  %cmp769 = icmp eq i32 %bf.cast768, 8, !dbg !4214
  br i1 %cmp769, label %land.rhs, label %land.end779, !dbg !4215

land.rhs:                                         ; preds = %lor.lhs.false764, %lor.lhs.false757, %sw.epilog
  %205 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4216
  %base771 = bitcast %union.tree_node* %205 to %struct.tree_base*, !dbg !4216
  %206 = bitcast %struct.tree_base* %base771 to i64*, !dbg !4216
  %bf.load772 = load i64, i64* %206, align 8, !dbg !4216
  %bf.lshr773 = lshr i64 %bf.load772, 21, !dbg !4216
  %bf.clear774 = and i64 %bf.lshr773, 1, !dbg !4216
  %bf.cast775 = trunc i64 %bf.clear774 to i32, !dbg !4216
  %tobool776 = icmp ne i32 %bf.cast775, 0, !dbg !4216
  br i1 %tobool776, label %land.end, label %land.rhs777, !dbg !4216

land.rhs777:                                      ; preds = %land.rhs
  %207 = load i32, i32* @flag_trapv, align 4, !dbg !4216
  %tobool778 = icmp ne i32 %207, 0, !dbg !4216
  br label %land.end

land.end:                                         ; preds = %land.rhs777, %land.rhs
  %208 = phi i1 [ false, %land.rhs ], [ %tobool778, %land.rhs777 ], !dbg !4217
  br label %land.end779

land.end779:                                      ; preds = %land.end, %lor.lhs.false764
  %209 = phi i1 [ false, %lor.lhs.false764 ], [ %208, %land.end ], !dbg !4217
  %land.ext = zext i1 %209 to i32, !dbg !4215
  %conv780 = trunc i32 %land.ext to i8, !dbg !4214
  store i8 %conv780, i8* %trapv, align 1, !dbg !4218
  %210 = load i32, i32* %code.addr, align 4, !dbg !4219
  switch i32 %210, label %sw.default865 [
    i32 66, label %sw.bb781
    i32 63, label %sw.bb781
    i32 64, label %sw.bb800
    i32 65, label %sw.bb819
    i32 79, label %sw.bb838
    i32 82, label %sw.bb857
    i32 181, label %sw.bb861
    i32 182, label %sw.bb862
    i32 183, label %sw.bb863
    i32 184, label %sw.bb864
  ], !dbg !4220

sw.bb781:                                         ; preds = %land.end779, %land.end779
  %211 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4221
  %base782 = bitcast %union.tree_node* %211 to %struct.tree_base*, !dbg !4221
  %212 = bitcast %struct.tree_base* %base782 to i64*, !dbg !4221
  %bf.load783 = load i64, i64* %212, align 8, !dbg !4221
  %bf.lshr784 = lshr i64 %bf.load783, 31, !dbg !4221
  %bf.clear785 = and i64 %bf.lshr784, 1, !dbg !4221
  %bf.cast786 = trunc i64 %bf.clear785 to i32, !dbg !4221
  %tobool787 = icmp ne i32 %bf.cast786, 0, !dbg !4221
  br i1 %tobool787, label %if.then788, label %if.end796, !dbg !4224

if.then788:                                       ; preds = %sw.bb781
  %213 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4225
  %base789 = bitcast %union.tree_node* %213 to %struct.tree_base*, !dbg !4225
  %214 = bitcast %struct.tree_base* %base789 to i64*, !dbg !4225
  %bf.load790 = load i64, i64* %214, align 8, !dbg !4225
  %bf.lshr791 = lshr i64 %bf.load790, 21, !dbg !4225
  %bf.clear792 = and i64 %bf.lshr791, 1, !dbg !4225
  %bf.cast793 = trunc i64 %bf.clear792 to i32, !dbg !4225
  %tobool794 = icmp ne i32 %bf.cast793, 0, !dbg !4225
  %215 = zext i1 %tobool794 to i64, !dbg !4225
  %cond795 = select i1 %tobool794, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 1), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 0), !dbg !4225
  store %struct.optab_d* %cond795, %struct.optab_d** %retval, align 8, !dbg !4226
  br label %return, !dbg !4226

if.end796:                                        ; preds = %sw.bb781
  %216 = load i8, i8* %trapv, align 1, !dbg !4227
  %conv797 = zext i8 %216 to i32, !dbg !4227
  %tobool798 = icmp ne i32 %conv797, 0, !dbg !4227
  %217 = zext i1 %tobool798 to i64, !dbg !4227
  %cond799 = select i1 %tobool798, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 13), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !4227
  store %struct.optab_d* %cond799, %struct.optab_d** %retval, align 8, !dbg !4228
  br label %return, !dbg !4228

sw.bb800:                                         ; preds = %land.end779
  %218 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4229
  %base801 = bitcast %union.tree_node* %218 to %struct.tree_base*, !dbg !4229
  %219 = bitcast %struct.tree_base* %base801 to i64*, !dbg !4229
  %bf.load802 = load i64, i64* %219, align 8, !dbg !4229
  %bf.lshr803 = lshr i64 %bf.load802, 31, !dbg !4229
  %bf.clear804 = and i64 %bf.lshr803, 1, !dbg !4229
  %bf.cast805 = trunc i64 %bf.clear804 to i32, !dbg !4229
  %tobool806 = icmp ne i32 %bf.cast805, 0, !dbg !4229
  br i1 %tobool806, label %if.then807, label %if.end815, !dbg !4231

if.then807:                                       ; preds = %sw.bb800
  %220 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4232
  %base808 = bitcast %union.tree_node* %220 to %struct.tree_base*, !dbg !4232
  %221 = bitcast %struct.tree_base* %base808 to i64*, !dbg !4232
  %bf.load809 = load i64, i64* %221, align 8, !dbg !4232
  %bf.lshr810 = lshr i64 %bf.load809, 21, !dbg !4232
  %bf.clear811 = and i64 %bf.lshr810, 1, !dbg !4232
  %bf.cast812 = trunc i64 %bf.clear811 to i32, !dbg !4232
  %tobool813 = icmp ne i32 %bf.cast812, 0, !dbg !4232
  %222 = zext i1 %tobool813 to i64, !dbg !4232
  %cond814 = select i1 %tobool813, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 3), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 2), !dbg !4232
  store %struct.optab_d* %cond814, %struct.optab_d** %retval, align 8, !dbg !4233
  br label %return, !dbg !4233

if.end815:                                        ; preds = %sw.bb800
  %223 = load i8, i8* %trapv, align 1, !dbg !4234
  %conv816 = zext i8 %223 to i32, !dbg !4234
  %tobool817 = icmp ne i32 %conv816, 0, !dbg !4234
  %224 = zext i1 %tobool817 to i64, !dbg !4234
  %cond818 = select i1 %tobool817, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !4234
  store %struct.optab_d* %cond818, %struct.optab_d** %retval, align 8, !dbg !4235
  br label %return, !dbg !4235

sw.bb819:                                         ; preds = %land.end779
  %225 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4236
  %base820 = bitcast %union.tree_node* %225 to %struct.tree_base*, !dbg !4236
  %226 = bitcast %struct.tree_base* %base820 to i64*, !dbg !4236
  %bf.load821 = load i64, i64* %226, align 8, !dbg !4236
  %bf.lshr822 = lshr i64 %bf.load821, 31, !dbg !4236
  %bf.clear823 = and i64 %bf.lshr822, 1, !dbg !4236
  %bf.cast824 = trunc i64 %bf.clear823 to i32, !dbg !4236
  %tobool825 = icmp ne i32 %bf.cast824, 0, !dbg !4236
  br i1 %tobool825, label %if.then826, label %if.end834, !dbg !4238

if.then826:                                       ; preds = %sw.bb819
  %227 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4239
  %base827 = bitcast %union.tree_node* %227 to %struct.tree_base*, !dbg !4239
  %228 = bitcast %struct.tree_base* %base827 to i64*, !dbg !4239
  %bf.load828 = load i64, i64* %228, align 8, !dbg !4239
  %bf.lshr829 = lshr i64 %bf.load828, 21, !dbg !4239
  %bf.clear830 = and i64 %bf.lshr829, 1, !dbg !4239
  %bf.cast831 = trunc i64 %bf.clear830 to i32, !dbg !4239
  %tobool832 = icmp ne i32 %bf.cast831, 0, !dbg !4239
  %229 = zext i1 %tobool832 to i64, !dbg !4239
  %cond833 = select i1 %tobool832, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 5), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 4), !dbg !4239
  store %struct.optab_d* %cond833, %struct.optab_d** %retval, align 8, !dbg !4240
  br label %return, !dbg !4240

if.end834:                                        ; preds = %sw.bb819
  %230 = load i8, i8* %trapv, align 1, !dbg !4241
  %conv835 = zext i8 %230 to i32, !dbg !4241
  %tobool836 = icmp ne i32 %conv835, 0, !dbg !4241
  %231 = zext i1 %tobool836 to i64, !dbg !4241
  %cond837 = select i1 %tobool836, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 17), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !4241
  store %struct.optab_d* %cond837, %struct.optab_d** %retval, align 8, !dbg !4242
  br label %return, !dbg !4242

sw.bb838:                                         ; preds = %land.end779
  %232 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4243
  %base839 = bitcast %union.tree_node* %232 to %struct.tree_base*, !dbg !4243
  %233 = bitcast %struct.tree_base* %base839 to i64*, !dbg !4243
  %bf.load840 = load i64, i64* %233, align 8, !dbg !4243
  %bf.lshr841 = lshr i64 %bf.load840, 31, !dbg !4243
  %bf.clear842 = and i64 %bf.lshr841, 1, !dbg !4243
  %bf.cast843 = trunc i64 %bf.clear842 to i32, !dbg !4243
  %tobool844 = icmp ne i32 %bf.cast843, 0, !dbg !4243
  br i1 %tobool844, label %if.then845, label %if.end853, !dbg !4245

if.then845:                                       ; preds = %sw.bb838
  %234 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4246
  %base846 = bitcast %union.tree_node* %234 to %struct.tree_base*, !dbg !4246
  %235 = bitcast %struct.tree_base* %base846 to i64*, !dbg !4246
  %bf.load847 = load i64, i64* %235, align 8, !dbg !4246
  %bf.lshr848 = lshr i64 %bf.load847, 21, !dbg !4246
  %bf.clear849 = and i64 %bf.lshr848, 1, !dbg !4246
  %bf.cast850 = trunc i64 %bf.clear849 to i32, !dbg !4246
  %tobool851 = icmp ne i32 %bf.cast850, 0, !dbg !4246
  %236 = zext i1 %tobool851 to i64, !dbg !4246
  %cond852 = select i1 %tobool851, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 9), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 8), !dbg !4246
  store %struct.optab_d* %cond852, %struct.optab_d** %retval, align 8, !dbg !4247
  br label %return, !dbg !4247

if.end853:                                        ; preds = %sw.bb838
  %237 = load i8, i8* %trapv, align 1, !dbg !4248
  %conv854 = zext i8 %237 to i32, !dbg !4248
  %tobool855 = icmp ne i32 %conv854, 0, !dbg !4248
  %238 = zext i1 %tobool855 to i64, !dbg !4248
  %cond856 = select i1 %tobool855, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), !dbg !4248
  store %struct.optab_d* %cond856, %struct.optab_d** %retval, align 8, !dbg !4249
  br label %return, !dbg !4249

sw.bb857:                                         ; preds = %land.end779
  %239 = load i8, i8* %trapv, align 1, !dbg !4250
  %conv858 = zext i8 %239 to i32, !dbg !4250
  %tobool859 = icmp ne i32 %conv858, 0, !dbg !4250
  %240 = zext i1 %tobool859 to i64, !dbg !4250
  %cond860 = select i1 %tobool859, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 67), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66), !dbg !4250
  store %struct.optab_d* %cond860, %struct.optab_d** %retval, align 8, !dbg !4251
  br label %return, !dbg !4251

sw.bb861:                                         ; preds = %land.end779
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 133), %struct.optab_d** %retval, align 8, !dbg !4252
  br label %return, !dbg !4252

sw.bb862:                                         ; preds = %land.end779
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 134), %struct.optab_d** %retval, align 8, !dbg !4253
  br label %return, !dbg !4253

sw.bb863:                                         ; preds = %land.end779
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 135), %struct.optab_d** %retval, align 8, !dbg !4254
  br label %return, !dbg !4254

sw.bb864:                                         ; preds = %land.end779
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 136), %struct.optab_d** %retval, align 8, !dbg !4255
  br label %return, !dbg !4255

sw.default865:                                    ; preds = %land.end779
  store %struct.optab_d* null, %struct.optab_d** %retval, align 8, !dbg !4256
  br label %return, !dbg !4256

return:                                           ; preds = %sw.default865, %sw.bb864, %sw.bb863, %sw.bb862, %sw.bb861, %sw.bb857, %if.end853, %if.then845, %if.end834, %if.then826, %if.end815, %if.then807, %if.end796, %if.then788, %sw.bb743, %sw.bb735, %sw.bb734, %sw.bb726, %sw.bb718, %sw.bb710, %sw.bb702, %sw.bb694, %sw.bb686, %sw.bb685, %sw.bb684, %sw.bb676, %sw.bb668, %sw.bb660, %sw.bb652, %sw.bb644, %sw.bb643, %sw.bb635, %sw.bb627, %if.end626, %if.then618, %if.end482, %if.then474, %if.end331, %if.then316, %if.end180, %if.then172, %if.then150, %if.end, %if.then, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %241 = load %struct.optab_d*, %struct.optab_d** %retval, align 8, !dbg !4257
  ret %struct.optab_d* %241, !dbg !4257
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_widen_pattern_expr(%struct.separate_ops* %ops, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %wide_op, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !4258 {
entry:
  %ops.addr = alloca %struct.separate_ops*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %wide_op.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %oprnd0 = alloca %union.tree_node*, align 8
  %oprnd1 = alloca %union.tree_node*, align 8
  %oprnd2 = alloca %union.tree_node*, align 8
  %wmode = alloca i32, align 4
  %tmode0 = alloca i32, align 4
  %tmode1 = alloca i32, align 4
  %widen_pattern_optab = alloca %struct.optab_d*, align 8
  %icode = alloca i32, align 4
  %xmode0 = alloca i32, align 4
  %xmode1 = alloca i32, align 4
  %wxmode = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %xop1 = alloca %struct.rtx_def*, align 8
  %wxop = alloca %struct.rtx_def*, align 8
  %nops = alloca i32, align 4
  store %struct.separate_ops* %ops, %struct.separate_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.separate_ops** %ops.addr, metadata !4271, metadata !DIExpression()), !dbg !4272
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !4273, metadata !DIExpression()), !dbg !4274
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !4275, metadata !DIExpression()), !dbg !4276
  store %struct.rtx_def* %wide_op, %struct.rtx_def** %wide_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %wide_op.addr, metadata !4277, metadata !DIExpression()), !dbg !4278
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4279, metadata !DIExpression()), !dbg !4280
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4281, metadata !DIExpression()), !dbg !4282
  call void @llvm.dbg.declare(metadata %union.tree_node** %oprnd0, metadata !4283, metadata !DIExpression()), !dbg !4284
  call void @llvm.dbg.declare(metadata %union.tree_node** %oprnd1, metadata !4285, metadata !DIExpression()), !dbg !4286
  call void @llvm.dbg.declare(metadata %union.tree_node** %oprnd2, metadata !4287, metadata !DIExpression()), !dbg !4288
  call void @llvm.dbg.declare(metadata i32* %wmode, metadata !4289, metadata !DIExpression()), !dbg !4290
  store i32 0, i32* %wmode, align 4, !dbg !4290
  call void @llvm.dbg.declare(metadata i32* %tmode0, metadata !4291, metadata !DIExpression()), !dbg !4292
  call void @llvm.dbg.declare(metadata i32* %tmode1, metadata !4293, metadata !DIExpression()), !dbg !4294
  store i32 0, i32* %tmode1, align 4, !dbg !4294
  call void @llvm.dbg.declare(metadata %struct.optab_d** %widen_pattern_optab, metadata !4295, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !4297, metadata !DIExpression()), !dbg !4298
  call void @llvm.dbg.declare(metadata i32* %xmode0, metadata !4299, metadata !DIExpression()), !dbg !4300
  call void @llvm.dbg.declare(metadata i32* %xmode1, metadata !4301, metadata !DIExpression()), !dbg !4302
  store i32 0, i32* %xmode1, align 4, !dbg !4302
  call void @llvm.dbg.declare(metadata i32* %wxmode, metadata !4303, metadata !DIExpression()), !dbg !4304
  store i32 0, i32* %wxmode, align 4, !dbg !4304
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !4305, metadata !DIExpression()), !dbg !4306
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4307, metadata !DIExpression()), !dbg !4308
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !4309, metadata !DIExpression()), !dbg !4310
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1, metadata !4311, metadata !DIExpression()), !dbg !4312
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %wxop, metadata !4313, metadata !DIExpression()), !dbg !4314
  call void @llvm.dbg.declare(metadata i32* %nops, metadata !4315, metadata !DIExpression()), !dbg !4316
  %0 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4317
  %code = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %0, i32 0, i32 0, !dbg !4317
  %1 = load i32, i32* %code, align 8, !dbg !4317
  %idxprom = sext i32 %1 to i64, !dbg !4317
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom, !dbg !4317
  %2 = load i8, i8* %arrayidx, align 1, !dbg !4317
  %conv = zext i8 %2 to i32, !dbg !4317
  store i32 %conv, i32* %nops, align 4, !dbg !4316
  %3 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4318
  %op01 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %3, i32 0, i32 2, !dbg !4319
  %4 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !4319
  store %union.tree_node* %4, %union.tree_node** %oprnd0, align 8, !dbg !4320
  %5 = load %union.tree_node*, %union.tree_node** %oprnd0, align 8, !dbg !4321
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4321
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4321
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4321
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4321
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4321
  %bf.load = load i64, i64* %7, align 8, !dbg !4321
  %bf.clear = and i64 %bf.load, 65535, !dbg !4321
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4321
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !4321
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4321

cond.true:                                        ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %oprnd0, align 8, !dbg !4321
  %common3 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4321
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !4321
  %9 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !4321
  %call = call i32 @vector_type_mode(%union.tree_node* %9), !dbg !4321
  br label %cond.end, !dbg !4321

cond.false:                                       ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %oprnd0, align 8, !dbg !4321
  %common5 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !4321
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !4321
  %11 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !4321
  %type7 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4321
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 6, !dbg !4321
  %bf.load8 = load i32, i32* %mode, align 4, !dbg !4321
  %bf.lshr = lshr i32 %bf.load8, 16, !dbg !4321
  %bf.clear9 = and i32 %bf.lshr, 255, !dbg !4321
  br label %cond.end, !dbg !4321

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear9, %cond.false ], !dbg !4321
  store i32 %cond, i32* %tmode0, align 4, !dbg !4322
  %12 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4323
  %code10 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %12, i32 0, i32 0, !dbg !4324
  %13 = load i32, i32* %code10, align 8, !dbg !4324
  %14 = load %union.tree_node*, %union.tree_node** %oprnd0, align 8, !dbg !4325
  %common11 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4325
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !4325
  %15 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !4325
  %call13 = call %struct.optab_d* @optab_for_tree_code(i32 %13, %union.tree_node* %15, i32 0), !dbg !4326
  store %struct.optab_d* %call13, %struct.optab_d** %widen_pattern_optab, align 8, !dbg !4327
  %16 = load %struct.optab_d*, %struct.optab_d** %widen_pattern_optab, align 8, !dbg !4328
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %16, i32 0, i32 4, !dbg !4328
  %17 = load i32, i32* %tmode0, align 4, !dbg !4328
  %idxprom14 = sext i32 %17 to i64, !dbg !4328
  %arrayidx15 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom14, !dbg !4328
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx15, i32 0, i32 0, !dbg !4329
  %18 = load i32, i32* %insn_code, align 4, !dbg !4329
  store i32 %18, i32* %icode, align 4, !dbg !4330
  %19 = load i32, i32* %icode, align 4, !dbg !4331
  %cmp16 = icmp ne i32 %19, 2956, !dbg !4331
  br i1 %cmp16, label %cond.false19, label %cond.true18, !dbg !4331

cond.true18:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 551, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4331
  br label %cond.end20, !dbg !4331

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !4331

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !4331
  %20 = load i32, i32* %icode, align 4, !dbg !4332
  %idxprom22 = sext i32 %20 to i64, !dbg !4333
  %arrayidx23 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom22, !dbg !4333
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx23, i32 0, i32 3, !dbg !4334
  %21 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !4334
  %arrayidx24 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %21, i64 1, !dbg !4333
  %mode25 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx24, i32 0, i32 2, !dbg !4335
  %bf.load26 = load i16, i16* %mode25, align 8, !dbg !4335
  %bf.cast27 = zext i16 %bf.load26 to i32, !dbg !4335
  store i32 %bf.cast27, i32* %xmode0, align 4, !dbg !4336
  %22 = load i32, i32* %nops, align 4, !dbg !4337
  %cmp28 = icmp sge i32 %22, 2, !dbg !4339
  br i1 %cmp28, label %if.then, label %if.end, !dbg !4340

if.then:                                          ; preds = %cond.end20
  %23 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4341
  %op130 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %23, i32 0, i32 3, !dbg !4343
  %24 = load %union.tree_node*, %union.tree_node** %op130, align 8, !dbg !4343
  store %union.tree_node* %24, %union.tree_node** %oprnd1, align 8, !dbg !4344
  %25 = load %union.tree_node*, %union.tree_node** %oprnd1, align 8, !dbg !4345
  %common31 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4345
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !4345
  %26 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !4345
  %base33 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !4345
  %27 = bitcast %struct.tree_base* %base33 to i64*, !dbg !4345
  %bf.load34 = load i64, i64* %27, align 8, !dbg !4345
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !4345
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !4345
  %cmp37 = icmp eq i32 %bf.cast36, 14, !dbg !4345
  br i1 %cmp37, label %cond.true39, label %cond.false43, !dbg !4345

cond.true39:                                      ; preds = %if.then
  %28 = load %union.tree_node*, %union.tree_node** %oprnd1, align 8, !dbg !4345
  %common40 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !4345
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !4345
  %29 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !4345
  %call42 = call i32 @vector_type_mode(%union.tree_node* %29), !dbg !4345
  br label %cond.end51, !dbg !4345

cond.false43:                                     ; preds = %if.then
  %30 = load %union.tree_node*, %union.tree_node** %oprnd1, align 8, !dbg !4345
  %common44 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !4345
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !4345
  %31 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4345
  %type46 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !4345
  %mode47 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type46, i32 0, i32 6, !dbg !4345
  %bf.load48 = load i32, i32* %mode47, align 4, !dbg !4345
  %bf.lshr49 = lshr i32 %bf.load48, 16, !dbg !4345
  %bf.clear50 = and i32 %bf.lshr49, 255, !dbg !4345
  br label %cond.end51, !dbg !4345

cond.end51:                                       ; preds = %cond.false43, %cond.true39
  %cond52 = phi i32 [ %call42, %cond.true39 ], [ %bf.clear50, %cond.false43 ], !dbg !4345
  store i32 %cond52, i32* %tmode1, align 4, !dbg !4346
  %32 = load i32, i32* %icode, align 4, !dbg !4347
  %idxprom53 = sext i32 %32 to i64, !dbg !4348
  %arrayidx54 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom53, !dbg !4348
  %operand55 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx54, i32 0, i32 3, !dbg !4349
  %33 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand55, align 8, !dbg !4349
  %arrayidx56 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %33, i64 2, !dbg !4348
  %mode57 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx56, i32 0, i32 2, !dbg !4350
  %bf.load58 = load i16, i16* %mode57, align 8, !dbg !4350
  %bf.cast59 = zext i16 %bf.load58 to i32, !dbg !4350
  store i32 %bf.cast59, i32* %xmode1, align 4, !dbg !4351
  br label %if.end, !dbg !4352

if.end:                                           ; preds = %cond.end51, %cond.end20
  %34 = load i32, i32* %nops, align 4, !dbg !4353
  %cmp60 = icmp eq i32 %34, 2, !dbg !4355
  br i1 %cmp60, label %if.then62, label %if.else, !dbg !4356

if.then62:                                        ; preds = %if.end
  %35 = load i32, i32* %tmode1, align 4, !dbg !4357
  store i32 %35, i32* %wmode, align 4, !dbg !4359
  %36 = load i32, i32* %xmode1, align 4, !dbg !4360
  store i32 %36, i32* %wxmode, align 4, !dbg !4361
  br label %if.end106, !dbg !4362

if.else:                                          ; preds = %if.end
  %37 = load i32, i32* %nops, align 4, !dbg !4363
  %cmp63 = icmp eq i32 %37, 3, !dbg !4365
  br i1 %cmp63, label %if.then65, label %if.end105, !dbg !4366

if.then65:                                        ; preds = %if.else
  %38 = load i32, i32* %tmode1, align 4, !dbg !4367
  %39 = load i32, i32* %tmode0, align 4, !dbg !4367
  %cmp66 = icmp eq i32 %38, %39, !dbg !4367
  br i1 %cmp66, label %cond.false69, label %cond.true68, !dbg !4367

cond.true68:                                      ; preds = %if.then65
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 569, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4367
  br label %cond.end70, !dbg !4367

cond.false69:                                     ; preds = %if.then65
  br label %cond.end70, !dbg !4367

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i32 [ 0, %cond.true68 ], [ 0, %cond.false69 ], !dbg !4367
  %40 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4369
  %tobool = icmp ne %struct.rtx_def* %40, null, !dbg !4369
  br i1 %tobool, label %cond.false73, label %cond.true72, !dbg !4369

cond.true72:                                      ; preds = %cond.end70
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 570, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4369
  br label %cond.end74, !dbg !4369

cond.false73:                                     ; preds = %cond.end70
  br label %cond.end74, !dbg !4369

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i32 [ 0, %cond.true72 ], [ 0, %cond.false73 ], !dbg !4369
  %41 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4370
  %op2 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %41, i32 0, i32 4, !dbg !4371
  %42 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !4371
  store %union.tree_node* %42, %union.tree_node** %oprnd2, align 8, !dbg !4372
  %43 = load %union.tree_node*, %union.tree_node** %oprnd2, align 8, !dbg !4373
  %common76 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !4373
  %type77 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common76, i32 0, i32 2, !dbg !4373
  %44 = load %union.tree_node*, %union.tree_node** %type77, align 8, !dbg !4373
  %base78 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !4373
  %45 = bitcast %struct.tree_base* %base78 to i64*, !dbg !4373
  %bf.load79 = load i64, i64* %45, align 8, !dbg !4373
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !4373
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !4373
  %cmp82 = icmp eq i32 %bf.cast81, 14, !dbg !4373
  br i1 %cmp82, label %cond.true84, label %cond.false88, !dbg !4373

cond.true84:                                      ; preds = %cond.end74
  %46 = load %union.tree_node*, %union.tree_node** %oprnd2, align 8, !dbg !4373
  %common85 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !4373
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !4373
  %47 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !4373
  %call87 = call i32 @vector_type_mode(%union.tree_node* %47), !dbg !4373
  br label %cond.end96, !dbg !4373

cond.false88:                                     ; preds = %cond.end74
  %48 = load %union.tree_node*, %union.tree_node** %oprnd2, align 8, !dbg !4373
  %common89 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !4373
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !4373
  %49 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !4373
  %type91 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !4373
  %mode92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 6, !dbg !4373
  %bf.load93 = load i32, i32* %mode92, align 4, !dbg !4373
  %bf.lshr94 = lshr i32 %bf.load93, 16, !dbg !4373
  %bf.clear95 = and i32 %bf.lshr94, 255, !dbg !4373
  br label %cond.end96, !dbg !4373

cond.end96:                                       ; preds = %cond.false88, %cond.true84
  %cond97 = phi i32 [ %call87, %cond.true84 ], [ %bf.clear95, %cond.false88 ], !dbg !4373
  store i32 %cond97, i32* %wmode, align 4, !dbg !4374
  %50 = load i32, i32* %icode, align 4, !dbg !4375
  %idxprom98 = sext i32 %50 to i64, !dbg !4376
  %arrayidx99 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom98, !dbg !4376
  %operand100 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx99, i32 0, i32 3, !dbg !4377
  %51 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand100, align 8, !dbg !4377
  %arrayidx101 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %51, i64 3, !dbg !4376
  %mode102 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx101, i32 0, i32 2, !dbg !4378
  %bf.load103 = load i16, i16* %mode102, align 8, !dbg !4378
  %bf.cast104 = zext i16 %bf.load103 to i32, !dbg !4378
  store i32 %bf.cast104, i32* %wxmode, align 4, !dbg !4379
  br label %if.end105, !dbg !4380

if.end105:                                        ; preds = %cond.end96, %if.else
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then62
  %52 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4381
  %tobool107 = icmp ne %struct.rtx_def* %52, null, !dbg !4381
  br i1 %tobool107, label %if.end116, label %if.then108, !dbg !4383

if.then108:                                       ; preds = %if.end106
  %53 = load i32, i32* %icode, align 4, !dbg !4384
  %idxprom109 = sext i32 %53 to i64, !dbg !4385
  %arrayidx110 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom109, !dbg !4385
  %operand111 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx110, i32 0, i32 3, !dbg !4386
  %54 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand111, align 8, !dbg !4386
  %arrayidx112 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %54, i64 0, !dbg !4385
  %mode113 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx112, i32 0, i32 2, !dbg !4387
  %bf.load114 = load i16, i16* %mode113, align 8, !dbg !4387
  %bf.cast115 = zext i16 %bf.load114 to i32, !dbg !4387
  store i32 %bf.cast115, i32* %wxmode, align 4, !dbg !4388
  store i32 %bf.cast115, i32* %wmode, align 4, !dbg !4389
  br label %if.end116, !dbg !4390

if.end116:                                        ; preds = %if.then108, %if.end106
  %55 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4391
  %tobool117 = icmp ne %struct.rtx_def* %55, null, !dbg !4391
  br i1 %tobool117, label %lor.lhs.false, label %if.then124, !dbg !4393

lor.lhs.false:                                    ; preds = %if.end116
  %56 = load i32, i32* %icode, align 4, !dbg !4394
  %idxprom118 = sext i32 %56 to i64, !dbg !4395
  %arrayidx119 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom118, !dbg !4395
  %operand120 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx119, i32 0, i32 3, !dbg !4396
  %57 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand120, align 8, !dbg !4396
  %arrayidx121 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %57, i64 0, !dbg !4395
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx121, i32 0, i32 0, !dbg !4397
  %58 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !4397
  %59 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4398
  %60 = load i32, i32* %wmode, align 4, !dbg !4399
  %call122 = call i32 %58(%struct.rtx_def* %59, i32 %60), !dbg !4400
  %tobool123 = icmp ne i32 %call122, 0, !dbg !4400
  br i1 %tobool123, label %if.else126, label %if.then124, !dbg !4401

if.then124:                                       ; preds = %lor.lhs.false, %if.end116
  %61 = load i32, i32* %wmode, align 4, !dbg !4402
  %call125 = call %struct.rtx_def* @gen_reg_rtx(i32 %61), !dbg !4403
  store %struct.rtx_def* %call125, %struct.rtx_def** %temp, align 8, !dbg !4404
  br label %if.end127, !dbg !4405

if.else126:                                       ; preds = %lor.lhs.false
  %62 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4406
  store %struct.rtx_def* %62, %struct.rtx_def** %temp, align 8, !dbg !4407
  br label %if.end127

if.end127:                                        ; preds = %if.else126, %if.then124
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4408
  store %struct.rtx_def* %63, %struct.rtx_def** %xop0, align 8, !dbg !4409
  %64 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4410
  store %struct.rtx_def* %64, %struct.rtx_def** %xop1, align 8, !dbg !4411
  %65 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4412
  store %struct.rtx_def* %65, %struct.rtx_def** %wxop, align 8, !dbg !4413
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4414
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !4414
  %bf.load128 = load i32, i32* %67, align 8, !dbg !4414
  %bf.lshr129 = lshr i32 %bf.load128, 16, !dbg !4414
  %bf.clear130 = and i32 %bf.lshr129, 255, !dbg !4414
  %68 = load i32, i32* %xmode0, align 4, !dbg !4416
  %cmp131 = icmp ne i32 %bf.clear130, %68, !dbg !4417
  br i1 %cmp131, label %land.lhs.true, label %if.end149, !dbg !4418

land.lhs.true:                                    ; preds = %if.end127
  %69 = load i32, i32* %xmode0, align 4, !dbg !4419
  %cmp133 = icmp ne i32 %69, 0, !dbg !4420
  br i1 %cmp133, label %if.then135, label %if.end149, !dbg !4421

if.then135:                                       ; preds = %land.lhs.true
  %70 = load i32, i32* %xmode0, align 4, !dbg !4422
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4423
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !4423
  %bf.load136 = load i32, i32* %72, align 8, !dbg !4423
  %bf.lshr137 = lshr i32 %bf.load136, 16, !dbg !4423
  %bf.clear138 = and i32 %bf.lshr137, 255, !dbg !4423
  %cmp139 = icmp ne i32 %bf.clear138, 0, !dbg !4424
  br i1 %cmp139, label %cond.true141, label %cond.false145, !dbg !4423

cond.true141:                                     ; preds = %if.then135
  %73 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4425
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !4425
  %bf.load142 = load i32, i32* %74, align 8, !dbg !4425
  %bf.lshr143 = lshr i32 %bf.load142, 16, !dbg !4425
  %bf.clear144 = and i32 %bf.lshr143, 255, !dbg !4425
  br label %cond.end146, !dbg !4423

cond.false145:                                    ; preds = %if.then135
  %75 = load i32, i32* %tmode0, align 4, !dbg !4426
  br label %cond.end146, !dbg !4423

cond.end146:                                      ; preds = %cond.false145, %cond.true141
  %cond147 = phi i32 [ %bf.clear144, %cond.true141 ], [ %75, %cond.false145 ], !dbg !4423
  %76 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4427
  %77 = load i32, i32* %unsignedp.addr, align 4, !dbg !4428
  %call148 = call %struct.rtx_def* @convert_modes(i32 %70, i32 %cond147, %struct.rtx_def* %76, i32 %77), !dbg !4429
  store %struct.rtx_def* %call148, %struct.rtx_def** %xop0, align 8, !dbg !4430
  br label %if.end149, !dbg !4431

if.end149:                                        ; preds = %cond.end146, %land.lhs.true, %if.end127
  %78 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4432
  %tobool150 = icmp ne %struct.rtx_def* %78, null, !dbg !4432
  br i1 %tobool150, label %if.then151, label %if.end175, !dbg !4434

if.then151:                                       ; preds = %if.end149
  %79 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4435
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !4435
  %bf.load152 = load i32, i32* %80, align 8, !dbg !4435
  %bf.lshr153 = lshr i32 %bf.load152, 16, !dbg !4435
  %bf.clear154 = and i32 %bf.lshr153, 255, !dbg !4435
  %81 = load i32, i32* %xmode1, align 4, !dbg !4437
  %cmp155 = icmp ne i32 %bf.clear154, %81, !dbg !4438
  br i1 %cmp155, label %land.lhs.true157, label %if.end174, !dbg !4439

land.lhs.true157:                                 ; preds = %if.then151
  %82 = load i32, i32* %xmode1, align 4, !dbg !4440
  %cmp158 = icmp ne i32 %82, 0, !dbg !4441
  br i1 %cmp158, label %if.then160, label %if.end174, !dbg !4442

if.then160:                                       ; preds = %land.lhs.true157
  %83 = load i32, i32* %xmode1, align 4, !dbg !4443
  %84 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4444
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !4444
  %bf.load161 = load i32, i32* %85, align 8, !dbg !4444
  %bf.lshr162 = lshr i32 %bf.load161, 16, !dbg !4444
  %bf.clear163 = and i32 %bf.lshr162, 255, !dbg !4444
  %cmp164 = icmp ne i32 %bf.clear163, 0, !dbg !4445
  br i1 %cmp164, label %cond.true166, label %cond.false170, !dbg !4444

cond.true166:                                     ; preds = %if.then160
  %86 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4446
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !4446
  %bf.load167 = load i32, i32* %87, align 8, !dbg !4446
  %bf.lshr168 = lshr i32 %bf.load167, 16, !dbg !4446
  %bf.clear169 = and i32 %bf.lshr168, 255, !dbg !4446
  br label %cond.end171, !dbg !4444

cond.false170:                                    ; preds = %if.then160
  %88 = load i32, i32* %tmode1, align 4, !dbg !4447
  br label %cond.end171, !dbg !4444

cond.end171:                                      ; preds = %cond.false170, %cond.true166
  %cond172 = phi i32 [ %bf.clear169, %cond.true166 ], [ %88, %cond.false170 ], !dbg !4444
  %89 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4448
  %90 = load i32, i32* %unsignedp.addr, align 4, !dbg !4449
  %call173 = call %struct.rtx_def* @convert_modes(i32 %83, i32 %cond172, %struct.rtx_def* %89, i32 %90), !dbg !4450
  store %struct.rtx_def* %call173, %struct.rtx_def** %xop1, align 8, !dbg !4451
  br label %if.end174, !dbg !4452

if.end174:                                        ; preds = %cond.end171, %land.lhs.true157, %if.then151
  br label %if.end175, !dbg !4453

if.end175:                                        ; preds = %if.end174, %if.end149
  %91 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4454
  %tobool176 = icmp ne %struct.rtx_def* %91, null, !dbg !4454
  br i1 %tobool176, label %if.then177, label %if.end201, !dbg !4456

if.then177:                                       ; preds = %if.end175
  %92 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4457
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !4457
  %bf.load178 = load i32, i32* %93, align 8, !dbg !4457
  %bf.lshr179 = lshr i32 %bf.load178, 16, !dbg !4457
  %bf.clear180 = and i32 %bf.lshr179, 255, !dbg !4457
  %94 = load i32, i32* %wxmode, align 4, !dbg !4459
  %cmp181 = icmp ne i32 %bf.clear180, %94, !dbg !4460
  br i1 %cmp181, label %land.lhs.true183, label %if.end200, !dbg !4461

land.lhs.true183:                                 ; preds = %if.then177
  %95 = load i32, i32* %wxmode, align 4, !dbg !4462
  %cmp184 = icmp ne i32 %95, 0, !dbg !4463
  br i1 %cmp184, label %if.then186, label %if.end200, !dbg !4464

if.then186:                                       ; preds = %land.lhs.true183
  %96 = load i32, i32* %wxmode, align 4, !dbg !4465
  %97 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4466
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !4466
  %bf.load187 = load i32, i32* %98, align 8, !dbg !4466
  %bf.lshr188 = lshr i32 %bf.load187, 16, !dbg !4466
  %bf.clear189 = and i32 %bf.lshr188, 255, !dbg !4466
  %cmp190 = icmp ne i32 %bf.clear189, 0, !dbg !4467
  br i1 %cmp190, label %cond.true192, label %cond.false196, !dbg !4466

cond.true192:                                     ; preds = %if.then186
  %99 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4468
  %100 = bitcast %struct.rtx_def* %99 to i32*, !dbg !4468
  %bf.load193 = load i32, i32* %100, align 8, !dbg !4468
  %bf.lshr194 = lshr i32 %bf.load193, 16, !dbg !4468
  %bf.clear195 = and i32 %bf.lshr194, 255, !dbg !4468
  br label %cond.end197, !dbg !4466

cond.false196:                                    ; preds = %if.then186
  %101 = load i32, i32* %wmode, align 4, !dbg !4469
  br label %cond.end197, !dbg !4466

cond.end197:                                      ; preds = %cond.false196, %cond.true192
  %cond198 = phi i32 [ %bf.clear195, %cond.true192 ], [ %101, %cond.false196 ], !dbg !4466
  %102 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4470
  %103 = load i32, i32* %unsignedp.addr, align 4, !dbg !4471
  %call199 = call %struct.rtx_def* @convert_modes(i32 %96, i32 %cond198, %struct.rtx_def* %102, i32 %103), !dbg !4472
  store %struct.rtx_def* %call199, %struct.rtx_def** %wxop, align 8, !dbg !4473
  br label %if.end200, !dbg !4474

if.end200:                                        ; preds = %cond.end197, %land.lhs.true183, %if.then177
  br label %if.end201, !dbg !4475

if.end201:                                        ; preds = %if.end200, %if.end175
  %104 = load i32, i32* %icode, align 4, !dbg !4476
  %idxprom202 = sext i32 %104 to i64, !dbg !4478
  %arrayidx203 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom202, !dbg !4478
  %operand204 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx203, i32 0, i32 3, !dbg !4479
  %105 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand204, align 8, !dbg !4479
  %arrayidx205 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %105, i64 1, !dbg !4478
  %predicate206 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx205, i32 0, i32 0, !dbg !4480
  %106 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate206, align 8, !dbg !4480
  %107 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4481
  %108 = load i32, i32* %xmode0, align 4, !dbg !4482
  %call207 = call i32 %106(%struct.rtx_def* %107, i32 %108), !dbg !4483
  %tobool208 = icmp ne i32 %call207, 0, !dbg !4483
  br i1 %tobool208, label %if.end214, label %land.lhs.true209, !dbg !4484

land.lhs.true209:                                 ; preds = %if.end201
  %109 = load i32, i32* %xmode0, align 4, !dbg !4485
  %cmp210 = icmp ne i32 %109, 0, !dbg !4486
  br i1 %cmp210, label %if.then212, label %if.end214, !dbg !4487

if.then212:                                       ; preds = %land.lhs.true209
  %110 = load i32, i32* %xmode0, align 4, !dbg !4488
  %111 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4489
  %call213 = call %struct.rtx_def* @copy_to_mode_reg(i32 %110, %struct.rtx_def* %111), !dbg !4490
  store %struct.rtx_def* %call213, %struct.rtx_def** %xop0, align 8, !dbg !4491
  br label %if.end214, !dbg !4492

if.end214:                                        ; preds = %if.then212, %land.lhs.true209, %if.end201
  %112 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4493
  %tobool215 = icmp ne %struct.rtx_def* %112, null, !dbg !4493
  br i1 %tobool215, label %if.then216, label %if.else254, !dbg !4495

if.then216:                                       ; preds = %if.end214
  %113 = load i32, i32* %icode, align 4, !dbg !4496
  %idxprom217 = sext i32 %113 to i64, !dbg !4499
  %arrayidx218 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom217, !dbg !4499
  %operand219 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx218, i32 0, i32 3, !dbg !4500
  %114 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand219, align 8, !dbg !4500
  %arrayidx220 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %114, i64 2, !dbg !4499
  %predicate221 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx220, i32 0, i32 0, !dbg !4501
  %115 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate221, align 8, !dbg !4501
  %116 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4502
  %117 = load i32, i32* %xmode1, align 4, !dbg !4503
  %call222 = call i32 %115(%struct.rtx_def* %116, i32 %117), !dbg !4504
  %tobool223 = icmp ne i32 %call222, 0, !dbg !4504
  br i1 %tobool223, label %if.end229, label %land.lhs.true224, !dbg !4505

land.lhs.true224:                                 ; preds = %if.then216
  %118 = load i32, i32* %xmode1, align 4, !dbg !4506
  %cmp225 = icmp ne i32 %118, 0, !dbg !4507
  br i1 %cmp225, label %if.then227, label %if.end229, !dbg !4508

if.then227:                                       ; preds = %land.lhs.true224
  %119 = load i32, i32* %xmode1, align 4, !dbg !4509
  %120 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4510
  %call228 = call %struct.rtx_def* @copy_to_mode_reg(i32 %119, %struct.rtx_def* %120), !dbg !4511
  store %struct.rtx_def* %call228, %struct.rtx_def** %xop1, align 8, !dbg !4512
  br label %if.end229, !dbg !4513

if.end229:                                        ; preds = %if.then227, %land.lhs.true224, %if.then216
  %121 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4514
  %tobool230 = icmp ne %struct.rtx_def* %121, null, !dbg !4514
  br i1 %tobool230, label %if.then231, label %if.else248, !dbg !4516

if.then231:                                       ; preds = %if.end229
  %122 = load i32, i32* %icode, align 4, !dbg !4517
  %idxprom232 = sext i32 %122 to i64, !dbg !4520
  %arrayidx233 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom232, !dbg !4520
  %operand234 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx233, i32 0, i32 3, !dbg !4521
  %123 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand234, align 8, !dbg !4521
  %arrayidx235 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %123, i64 3, !dbg !4520
  %predicate236 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx235, i32 0, i32 0, !dbg !4522
  %124 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate236, align 8, !dbg !4522
  %125 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4523
  %126 = load i32, i32* %wxmode, align 4, !dbg !4524
  %call237 = call i32 %124(%struct.rtx_def* %125, i32 %126), !dbg !4525
  %tobool238 = icmp ne i32 %call237, 0, !dbg !4525
  br i1 %tobool238, label %if.end244, label %land.lhs.true239, !dbg !4526

land.lhs.true239:                                 ; preds = %if.then231
  %127 = load i32, i32* %wxmode, align 4, !dbg !4527
  %cmp240 = icmp ne i32 %127, 0, !dbg !4528
  br i1 %cmp240, label %if.then242, label %if.end244, !dbg !4529

if.then242:                                       ; preds = %land.lhs.true239
  %128 = load i32, i32* %wxmode, align 4, !dbg !4530
  %129 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4531
  %call243 = call %struct.rtx_def* @copy_to_mode_reg(i32 %128, %struct.rtx_def* %129), !dbg !4532
  store %struct.rtx_def* %call243, %struct.rtx_def** %wxop, align 8, !dbg !4533
  br label %if.end244, !dbg !4534

if.end244:                                        ; preds = %if.then242, %land.lhs.true239, %if.then231
  %130 = load i32, i32* %icode, align 4, !dbg !4535
  %idxprom245 = sext i32 %130 to i64, !dbg !4535
  %arrayidx246 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom245, !dbg !4535
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx246, i32 0, i32 2, !dbg !4535
  %131 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !4535
  %132 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4536
  %133 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4537
  %134 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4538
  %135 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4539
  %call247 = call %struct.rtx_def* (%struct.rtx_def*, ...) %131(%struct.rtx_def* %132, %struct.rtx_def* %133, %struct.rtx_def* %134, %struct.rtx_def* %135), !dbg !4535
  store %struct.rtx_def* %call247, %struct.rtx_def** %pat, align 8, !dbg !4540
  br label %if.end253, !dbg !4541

if.else248:                                       ; preds = %if.end229
  %136 = load i32, i32* %icode, align 4, !dbg !4542
  %idxprom249 = sext i32 %136 to i64, !dbg !4542
  %arrayidx250 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom249, !dbg !4542
  %genfun251 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx250, i32 0, i32 2, !dbg !4542
  %137 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun251, align 8, !dbg !4542
  %138 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4543
  %139 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4544
  %140 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4545
  %call252 = call %struct.rtx_def* (%struct.rtx_def*, ...) %137(%struct.rtx_def* %138, %struct.rtx_def* %139, %struct.rtx_def* %140), !dbg !4542
  store %struct.rtx_def* %call252, %struct.rtx_def** %pat, align 8, !dbg !4546
  br label %if.end253

if.end253:                                        ; preds = %if.else248, %if.end244
  br label %if.end280, !dbg !4547

if.else254:                                       ; preds = %if.end214
  %141 = load %struct.rtx_def*, %struct.rtx_def** %wide_op.addr, align 8, !dbg !4548
  %tobool255 = icmp ne %struct.rtx_def* %141, null, !dbg !4548
  br i1 %tobool255, label %if.then256, label %if.else274, !dbg !4551

if.then256:                                       ; preds = %if.else254
  %142 = load i32, i32* %icode, align 4, !dbg !4552
  %idxprom257 = sext i32 %142 to i64, !dbg !4555
  %arrayidx258 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom257, !dbg !4555
  %operand259 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx258, i32 0, i32 3, !dbg !4556
  %143 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand259, align 8, !dbg !4556
  %arrayidx260 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %143, i64 2, !dbg !4555
  %predicate261 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx260, i32 0, i32 0, !dbg !4557
  %144 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate261, align 8, !dbg !4557
  %145 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4558
  %146 = load i32, i32* %wxmode, align 4, !dbg !4559
  %call262 = call i32 %144(%struct.rtx_def* %145, i32 %146), !dbg !4560
  %tobool263 = icmp ne i32 %call262, 0, !dbg !4560
  br i1 %tobool263, label %if.end269, label %land.lhs.true264, !dbg !4561

land.lhs.true264:                                 ; preds = %if.then256
  %147 = load i32, i32* %wxmode, align 4, !dbg !4562
  %cmp265 = icmp ne i32 %147, 0, !dbg !4563
  br i1 %cmp265, label %if.then267, label %if.end269, !dbg !4564

if.then267:                                       ; preds = %land.lhs.true264
  %148 = load i32, i32* %wxmode, align 4, !dbg !4565
  %149 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4566
  %call268 = call %struct.rtx_def* @copy_to_mode_reg(i32 %148, %struct.rtx_def* %149), !dbg !4567
  store %struct.rtx_def* %call268, %struct.rtx_def** %wxop, align 8, !dbg !4568
  br label %if.end269, !dbg !4569

if.end269:                                        ; preds = %if.then267, %land.lhs.true264, %if.then256
  %150 = load i32, i32* %icode, align 4, !dbg !4570
  %idxprom270 = sext i32 %150 to i64, !dbg !4570
  %arrayidx271 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom270, !dbg !4570
  %genfun272 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx271, i32 0, i32 2, !dbg !4570
  %151 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun272, align 8, !dbg !4570
  %152 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4571
  %153 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4572
  %154 = load %struct.rtx_def*, %struct.rtx_def** %wxop, align 8, !dbg !4573
  %call273 = call %struct.rtx_def* (%struct.rtx_def*, ...) %151(%struct.rtx_def* %152, %struct.rtx_def* %153, %struct.rtx_def* %154), !dbg !4570
  store %struct.rtx_def* %call273, %struct.rtx_def** %pat, align 8, !dbg !4574
  br label %if.end279, !dbg !4575

if.else274:                                       ; preds = %if.else254
  %155 = load i32, i32* %icode, align 4, !dbg !4576
  %idxprom275 = sext i32 %155 to i64, !dbg !4576
  %arrayidx276 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom275, !dbg !4576
  %genfun277 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx276, i32 0, i32 2, !dbg !4576
  %156 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun277, align 8, !dbg !4576
  %157 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4577
  %158 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4578
  %call278 = call %struct.rtx_def* (%struct.rtx_def*, ...) %156(%struct.rtx_def* %157, %struct.rtx_def* %158), !dbg !4576
  store %struct.rtx_def* %call278, %struct.rtx_def** %pat, align 8, !dbg !4579
  br label %if.end279

if.end279:                                        ; preds = %if.else274, %if.end269
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.end253
  %159 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4580
  %call281 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %159), !dbg !4581
  %160 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4582
  ret %struct.rtx_def* %160, !dbg !4583
}

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

declare dso_local %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_ternary_op(i32 %mode, %struct.optab_d* %ternary_optab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %op2, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !4584 {
entry:
  %mode.addr = alloca i32, align 4
  %ternary_optab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %op2.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %icode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %mode2 = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %xop1 = alloca %struct.rtx_def*, align 8
  %xop2 = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4587, metadata !DIExpression()), !dbg !4588
  store %struct.optab_d* %ternary_optab, %struct.optab_d** %ternary_optab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %ternary_optab.addr, metadata !4589, metadata !DIExpression()), !dbg !4590
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !4591, metadata !DIExpression()), !dbg !4592
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !4593, metadata !DIExpression()), !dbg !4594
  store %struct.rtx_def* %op2, %struct.rtx_def** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op2.addr, metadata !4595, metadata !DIExpression()), !dbg !4596
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4597, metadata !DIExpression()), !dbg !4598
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4599, metadata !DIExpression()), !dbg !4600
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !4601, metadata !DIExpression()), !dbg !4602
  %0 = load %struct.optab_d*, %struct.optab_d** %ternary_optab.addr, align 8, !dbg !4603
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %0, i32 0, i32 4, !dbg !4603
  %1 = load i32, i32* %mode.addr, align 4, !dbg !4603
  %idxprom = sext i32 %1 to i64, !dbg !4603
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !4603
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !4604
  %2 = load i32, i32* %insn_code, align 4, !dbg !4604
  store i32 %2, i32* %icode, align 4, !dbg !4602
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !4605, metadata !DIExpression()), !dbg !4606
  %3 = load i32, i32* %icode, align 4, !dbg !4607
  %idxprom1 = sext i32 %3 to i64, !dbg !4608
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !4608
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !4609
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !4609
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 1, !dbg !4608
  %mode4 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 2, !dbg !4610
  %bf.load = load i16, i16* %mode4, align 8, !dbg !4610
  %bf.cast = zext i16 %bf.load to i32, !dbg !4610
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !4606
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !4611, metadata !DIExpression()), !dbg !4612
  %5 = load i32, i32* %icode, align 4, !dbg !4613
  %idxprom5 = sext i32 %5 to i64, !dbg !4614
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom5, !dbg !4614
  %operand7 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3, !dbg !4615
  %6 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand7, align 8, !dbg !4615
  %arrayidx8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %6, i64 2, !dbg !4614
  %mode9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx8, i32 0, i32 2, !dbg !4616
  %bf.load10 = load i16, i16* %mode9, align 8, !dbg !4616
  %bf.cast11 = zext i16 %bf.load10 to i32, !dbg !4616
  store i32 %bf.cast11, i32* %mode1, align 4, !dbg !4612
  call void @llvm.dbg.declare(metadata i32* %mode2, metadata !4617, metadata !DIExpression()), !dbg !4618
  %7 = load i32, i32* %icode, align 4, !dbg !4619
  %idxprom12 = sext i32 %7 to i64, !dbg !4620
  %arrayidx13 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom12, !dbg !4620
  %operand14 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx13, i32 0, i32 3, !dbg !4621
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand14, align 8, !dbg !4621
  %arrayidx15 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 3, !dbg !4620
  %mode16 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx15, i32 0, i32 2, !dbg !4622
  %bf.load17 = load i16, i16* %mode16, align 8, !dbg !4622
  %bf.cast18 = zext i16 %bf.load17 to i32, !dbg !4622
  store i32 %bf.cast18, i32* %mode2, align 4, !dbg !4618
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !4623, metadata !DIExpression()), !dbg !4624
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4625, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !4627, metadata !DIExpression()), !dbg !4628
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4629
  store %struct.rtx_def* %9, %struct.rtx_def** %xop0, align 8, !dbg !4628
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1, metadata !4630, metadata !DIExpression()), !dbg !4631
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4632
  store %struct.rtx_def* %10, %struct.rtx_def** %xop1, align 8, !dbg !4631
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop2, metadata !4633, metadata !DIExpression()), !dbg !4634
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !4635
  store %struct.rtx_def* %11, %struct.rtx_def** %xop2, align 8, !dbg !4634
  %12 = load %struct.optab_d*, %struct.optab_d** %ternary_optab.addr, align 8, !dbg !4636
  %handlers19 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %12, i32 0, i32 4, !dbg !4636
  %13 = load i32, i32* %mode.addr, align 4, !dbg !4636
  %idxprom20 = sext i32 %13 to i64, !dbg !4636
  %arrayidx21 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers19, i64 0, i64 %idxprom20, !dbg !4636
  %insn_code22 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx21, i32 0, i32 0, !dbg !4636
  %14 = load i32, i32* %insn_code22, align 4, !dbg !4636
  %cmp = icmp ne i32 %14, 2956, !dbg !4636
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4636

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 684, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4636
  br label %cond.end, !dbg !4636

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4636
  %15 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4637
  %tobool = icmp ne %struct.rtx_def* %15, null, !dbg !4637
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4639

lor.lhs.false:                                    ; preds = %cond.end
  %16 = load i32, i32* %icode, align 4, !dbg !4640
  %idxprom23 = sext i32 %16 to i64, !dbg !4641
  %arrayidx24 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom23, !dbg !4641
  %operand25 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx24, i32 0, i32 3, !dbg !4642
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand25, align 8, !dbg !4642
  %arrayidx26 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 0, !dbg !4641
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx26, i32 0, i32 0, !dbg !4643
  %18 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !4643
  %19 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4644
  %20 = load i32, i32* %mode.addr, align 4, !dbg !4645
  %call = call i32 %18(%struct.rtx_def* %19, i32 %20), !dbg !4641
  %tobool27 = icmp ne i32 %call, 0, !dbg !4641
  br i1 %tobool27, label %if.else, label %if.then, !dbg !4646

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %21 = load i32, i32* %mode.addr, align 4, !dbg !4647
  %call28 = call %struct.rtx_def* @gen_reg_rtx(i32 %21), !dbg !4648
  store %struct.rtx_def* %call28, %struct.rtx_def** %temp, align 8, !dbg !4649
  br label %if.end, !dbg !4650

if.else:                                          ; preds = %lor.lhs.false
  %22 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4651
  store %struct.rtx_def* %22, %struct.rtx_def** %temp, align 8, !dbg !4652
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4653
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4653
  %bf.load29 = load i32, i32* %24, align 8, !dbg !4653
  %bf.lshr = lshr i32 %bf.load29, 16, !dbg !4653
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4653
  %25 = load i32, i32* %mode0, align 4, !dbg !4655
  %cmp30 = icmp ne i32 %bf.clear, %25, !dbg !4656
  br i1 %cmp30, label %land.lhs.true, label %if.end45, !dbg !4657

land.lhs.true:                                    ; preds = %if.end
  %26 = load i32, i32* %mode0, align 4, !dbg !4658
  %cmp31 = icmp ne i32 %26, 0, !dbg !4659
  br i1 %cmp31, label %if.then32, label %if.end45, !dbg !4660

if.then32:                                        ; preds = %land.lhs.true
  %27 = load i32, i32* %mode0, align 4, !dbg !4661
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4662
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !4662
  %bf.load33 = load i32, i32* %29, align 8, !dbg !4662
  %bf.lshr34 = lshr i32 %bf.load33, 16, !dbg !4662
  %bf.clear35 = and i32 %bf.lshr34, 255, !dbg !4662
  %cmp36 = icmp ne i32 %bf.clear35, 0, !dbg !4663
  br i1 %cmp36, label %cond.true37, label %cond.false41, !dbg !4662

cond.true37:                                      ; preds = %if.then32
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4664
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !4664
  %bf.load38 = load i32, i32* %31, align 8, !dbg !4664
  %bf.lshr39 = lshr i32 %bf.load38, 16, !dbg !4664
  %bf.clear40 = and i32 %bf.lshr39, 255, !dbg !4664
  br label %cond.end42, !dbg !4662

cond.false41:                                     ; preds = %if.then32
  %32 = load i32, i32* %mode.addr, align 4, !dbg !4665
  br label %cond.end42, !dbg !4662

cond.end42:                                       ; preds = %cond.false41, %cond.true37
  %cond43 = phi i32 [ %bf.clear40, %cond.true37 ], [ %32, %cond.false41 ], !dbg !4662
  %33 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4666
  %34 = load i32, i32* %unsignedp.addr, align 4, !dbg !4667
  %call44 = call %struct.rtx_def* @convert_modes(i32 %27, i32 %cond43, %struct.rtx_def* %33, i32 %34), !dbg !4668
  store %struct.rtx_def* %call44, %struct.rtx_def** %xop0, align 8, !dbg !4669
  br label %if.end45, !dbg !4670

if.end45:                                         ; preds = %cond.end42, %land.lhs.true, %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4671
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4671
  %bf.load46 = load i32, i32* %36, align 8, !dbg !4671
  %bf.lshr47 = lshr i32 %bf.load46, 16, !dbg !4671
  %bf.clear48 = and i32 %bf.lshr47, 255, !dbg !4671
  %37 = load i32, i32* %mode1, align 4, !dbg !4673
  %cmp49 = icmp ne i32 %bf.clear48, %37, !dbg !4674
  br i1 %cmp49, label %land.lhs.true50, label %if.end65, !dbg !4675

land.lhs.true50:                                  ; preds = %if.end45
  %38 = load i32, i32* %mode1, align 4, !dbg !4676
  %cmp51 = icmp ne i32 %38, 0, !dbg !4677
  br i1 %cmp51, label %if.then52, label %if.end65, !dbg !4678

if.then52:                                        ; preds = %land.lhs.true50
  %39 = load i32, i32* %mode1, align 4, !dbg !4679
  %40 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4680
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !4680
  %bf.load53 = load i32, i32* %41, align 8, !dbg !4680
  %bf.lshr54 = lshr i32 %bf.load53, 16, !dbg !4680
  %bf.clear55 = and i32 %bf.lshr54, 255, !dbg !4680
  %cmp56 = icmp ne i32 %bf.clear55, 0, !dbg !4681
  br i1 %cmp56, label %cond.true57, label %cond.false61, !dbg !4680

cond.true57:                                      ; preds = %if.then52
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4682
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !4682
  %bf.load58 = load i32, i32* %43, align 8, !dbg !4682
  %bf.lshr59 = lshr i32 %bf.load58, 16, !dbg !4682
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !4682
  br label %cond.end62, !dbg !4680

cond.false61:                                     ; preds = %if.then52
  %44 = load i32, i32* %mode.addr, align 4, !dbg !4683
  br label %cond.end62, !dbg !4680

cond.end62:                                       ; preds = %cond.false61, %cond.true57
  %cond63 = phi i32 [ %bf.clear60, %cond.true57 ], [ %44, %cond.false61 ], !dbg !4680
  %45 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4684
  %46 = load i32, i32* %unsignedp.addr, align 4, !dbg !4685
  %call64 = call %struct.rtx_def* @convert_modes(i32 %39, i32 %cond63, %struct.rtx_def* %45, i32 %46), !dbg !4686
  store %struct.rtx_def* %call64, %struct.rtx_def** %xop1, align 8, !dbg !4687
  br label %if.end65, !dbg !4688

if.end65:                                         ; preds = %cond.end62, %land.lhs.true50, %if.end45
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !4689
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !4689
  %bf.load66 = load i32, i32* %48, align 8, !dbg !4689
  %bf.lshr67 = lshr i32 %bf.load66, 16, !dbg !4689
  %bf.clear68 = and i32 %bf.lshr67, 255, !dbg !4689
  %49 = load i32, i32* %mode2, align 4, !dbg !4691
  %cmp69 = icmp ne i32 %bf.clear68, %49, !dbg !4692
  br i1 %cmp69, label %land.lhs.true70, label %if.end85, !dbg !4693

land.lhs.true70:                                  ; preds = %if.end65
  %50 = load i32, i32* %mode2, align 4, !dbg !4694
  %cmp71 = icmp ne i32 %50, 0, !dbg !4695
  br i1 %cmp71, label %if.then72, label %if.end85, !dbg !4696

if.then72:                                        ; preds = %land.lhs.true70
  %51 = load i32, i32* %mode2, align 4, !dbg !4697
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !4698
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !4698
  %bf.load73 = load i32, i32* %53, align 8, !dbg !4698
  %bf.lshr74 = lshr i32 %bf.load73, 16, !dbg !4698
  %bf.clear75 = and i32 %bf.lshr74, 255, !dbg !4698
  %cmp76 = icmp ne i32 %bf.clear75, 0, !dbg !4699
  br i1 %cmp76, label %cond.true77, label %cond.false81, !dbg !4698

cond.true77:                                      ; preds = %if.then72
  %54 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !4700
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !4700
  %bf.load78 = load i32, i32* %55, align 8, !dbg !4700
  %bf.lshr79 = lshr i32 %bf.load78, 16, !dbg !4700
  %bf.clear80 = and i32 %bf.lshr79, 255, !dbg !4700
  br label %cond.end82, !dbg !4698

cond.false81:                                     ; preds = %if.then72
  %56 = load i32, i32* %mode.addr, align 4, !dbg !4701
  br label %cond.end82, !dbg !4698

cond.end82:                                       ; preds = %cond.false81, %cond.true77
  %cond83 = phi i32 [ %bf.clear80, %cond.true77 ], [ %56, %cond.false81 ], !dbg !4698
  %57 = load %struct.rtx_def*, %struct.rtx_def** %xop2, align 8, !dbg !4702
  %58 = load i32, i32* %unsignedp.addr, align 4, !dbg !4703
  %call84 = call %struct.rtx_def* @convert_modes(i32 %51, i32 %cond83, %struct.rtx_def* %57, i32 %58), !dbg !4704
  store %struct.rtx_def* %call84, %struct.rtx_def** %xop2, align 8, !dbg !4705
  br label %if.end85, !dbg !4706

if.end85:                                         ; preds = %cond.end82, %land.lhs.true70, %if.end65
  %59 = load i32, i32* %icode, align 4, !dbg !4707
  %idxprom86 = sext i32 %59 to i64, !dbg !4709
  %arrayidx87 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom86, !dbg !4709
  %operand88 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx87, i32 0, i32 3, !dbg !4710
  %60 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand88, align 8, !dbg !4710
  %arrayidx89 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %60, i64 1, !dbg !4709
  %predicate90 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx89, i32 0, i32 0, !dbg !4711
  %61 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate90, align 8, !dbg !4711
  %62 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4712
  %63 = load i32, i32* %mode0, align 4, !dbg !4713
  %call91 = call i32 %61(%struct.rtx_def* %62, i32 %63), !dbg !4709
  %tobool92 = icmp ne i32 %call91, 0, !dbg !4709
  br i1 %tobool92, label %if.end97, label %land.lhs.true93, !dbg !4714

land.lhs.true93:                                  ; preds = %if.end85
  %64 = load i32, i32* %mode0, align 4, !dbg !4715
  %cmp94 = icmp ne i32 %64, 0, !dbg !4716
  br i1 %cmp94, label %if.then95, label %if.end97, !dbg !4717

if.then95:                                        ; preds = %land.lhs.true93
  %65 = load i32, i32* %mode0, align 4, !dbg !4718
  %66 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4719
  %call96 = call %struct.rtx_def* @copy_to_mode_reg(i32 %65, %struct.rtx_def* %66), !dbg !4720
  store %struct.rtx_def* %call96, %struct.rtx_def** %xop0, align 8, !dbg !4721
  br label %if.end97, !dbg !4722

if.end97:                                         ; preds = %if.then95, %land.lhs.true93, %if.end85
  %67 = load i32, i32* %icode, align 4, !dbg !4723
  %idxprom98 = sext i32 %67 to i64, !dbg !4725
  %arrayidx99 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom98, !dbg !4725
  %operand100 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx99, i32 0, i32 3, !dbg !4726
  %68 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand100, align 8, !dbg !4726
  %arrayidx101 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %68, i64 2, !dbg !4725
  %predicate102 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx101, i32 0, i32 0, !dbg !4727
  %69 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate102, align 8, !dbg !4727
  %70 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4728
  %71 = load i32, i32* %mode1, align 4, !dbg !4729
  %call103 = call i32 %69(%struct.rtx_def* %70, i32 %71), !dbg !4725
  %tobool104 = icmp ne i32 %call103, 0, !dbg !4725
  br i1 %tobool104, label %if.end109, label %land.lhs.true105, !dbg !4730

land.lhs.true105:                                 ; preds = %if.end97
  %72 = load i32, i32* %mode1, align 4, !dbg !4731
  %cmp106 = icmp ne i32 %72, 0, !dbg !4732
  br i1 %cmp106, label %if.then107, label %if.end109, !dbg !4733

if.then107:                                       ; preds = %land.lhs.true105
  %73 = load i32, i32* %mode1, align 4, !dbg !4734
  %74 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4735
  %call108 = call %struct.rtx_def* @copy_to_mode_reg(i32 %73, %struct.rtx_def* %74), !dbg !4736
  store %struct.rtx_def* %call108, %struct.rtx_def** %xop1, align 8, !dbg !4737
  br label %if.end109, !dbg !4738

if.end109:                                        ; preds = %if.then107, %land.lhs.true105, %if.end97
  %75 = load i32, i32* %icode, align 4, !dbg !4739
  %idxprom110 = sext i32 %75 to i64, !dbg !4741
  %arrayidx111 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom110, !dbg !4741
  %operand112 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx111, i32 0, i32 3, !dbg !4742
  %76 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand112, align 8, !dbg !4742
  %arrayidx113 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %76, i64 3, !dbg !4741
  %predicate114 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx113, i32 0, i32 0, !dbg !4743
  %77 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate114, align 8, !dbg !4743
  %78 = load %struct.rtx_def*, %struct.rtx_def** %xop2, align 8, !dbg !4744
  %79 = load i32, i32* %mode2, align 4, !dbg !4745
  %call115 = call i32 %77(%struct.rtx_def* %78, i32 %79), !dbg !4741
  %tobool116 = icmp ne i32 %call115, 0, !dbg !4741
  br i1 %tobool116, label %if.end121, label %land.lhs.true117, !dbg !4746

land.lhs.true117:                                 ; preds = %if.end109
  %80 = load i32, i32* %mode2, align 4, !dbg !4747
  %cmp118 = icmp ne i32 %80, 0, !dbg !4748
  br i1 %cmp118, label %if.then119, label %if.end121, !dbg !4749

if.then119:                                       ; preds = %land.lhs.true117
  %81 = load i32, i32* %mode2, align 4, !dbg !4750
  %82 = load %struct.rtx_def*, %struct.rtx_def** %xop2, align 8, !dbg !4751
  %call120 = call %struct.rtx_def* @copy_to_mode_reg(i32 %81, %struct.rtx_def* %82), !dbg !4752
  store %struct.rtx_def* %call120, %struct.rtx_def** %xop2, align 8, !dbg !4753
  br label %if.end121, !dbg !4754

if.end121:                                        ; preds = %if.then119, %land.lhs.true117, %if.end109
  %83 = load i32, i32* %icode, align 4, !dbg !4755
  %idxprom122 = sext i32 %83 to i64, !dbg !4755
  %arrayidx123 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom122, !dbg !4755
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx123, i32 0, i32 2, !dbg !4755
  %84 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !4755
  %85 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4756
  %86 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !4757
  %87 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !4758
  %88 = load %struct.rtx_def*, %struct.rtx_def** %xop2, align 8, !dbg !4759
  %call124 = call %struct.rtx_def* (%struct.rtx_def*, ...) %84(%struct.rtx_def* %85, %struct.rtx_def* %86, %struct.rtx_def* %87, %struct.rtx_def* %88), !dbg !4755
  store %struct.rtx_def* %call124, %struct.rtx_def** %pat, align 8, !dbg !4760
  %89 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4761
  %call125 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %89), !dbg !4762
  %90 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4763
  ret %struct.rtx_def* %90, !dbg !4764
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @force_expand_binop(i32 %mode, %struct.optab_d* %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %methods) #0 !dbg !4765 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4768, metadata !DIExpression()), !dbg !4769
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !4770, metadata !DIExpression()), !dbg !4771
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !4772, metadata !DIExpression()), !dbg !4773
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4776, metadata !DIExpression()), !dbg !4777
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4778, metadata !DIExpression()), !dbg !4779
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !4780, metadata !DIExpression()), !dbg !4781
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4782, metadata !DIExpression()), !dbg !4783
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4784
  %1 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !4785
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4786
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4787
  %4 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4788
  %5 = load i32, i32* %unsignedp.addr, align 4, !dbg !4789
  %6 = load i32, i32* %methods.addr, align 4, !dbg !4790
  %call = call %struct.rtx_def* @simplify_expand_binop(i32 %0, %struct.optab_d* %1, %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %4, i32 %5, i32 %6), !dbg !4791
  store %struct.rtx_def* %call, %struct.rtx_def** %x, align 8, !dbg !4783
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4792
  %cmp = icmp eq %struct.rtx_def* %7, null, !dbg !4794
  br i1 %cmp, label %if.then, label %if.end, !dbg !4795

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4796
  br label %return, !dbg !4796

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4797
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4799
  %cmp1 = icmp ne %struct.rtx_def* %8, %9, !dbg !4800
  br i1 %cmp1, label %if.then2, label %if.end4, !dbg !4801

if.then2:                                         ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4802
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4803
  %call3 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11), !dbg !4804
  br label %if.end4, !dbg !4804

if.end4:                                          ; preds = %if.then2, %if.end
  store i8 1, i8* %retval, align 1, !dbg !4805
  br label %return, !dbg !4805

return:                                           ; preds = %if.end4, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !4806
  ret i8 %12, !dbg !4806
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @simplify_expand_binop(i32 %mode, %struct.optab_d* %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %methods) #0 !dbg !4807 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4810, metadata !DIExpression()), !dbg !4811
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !4812, metadata !DIExpression()), !dbg !4813
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !4814, metadata !DIExpression()), !dbg !4815
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !4816, metadata !DIExpression()), !dbg !4817
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4818, metadata !DIExpression()), !dbg !4819
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4820, metadata !DIExpression()), !dbg !4821
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !4822, metadata !DIExpression()), !dbg !4823
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4824
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4824
  %bf.load = load i32, i32* %1, align 8, !dbg !4824
  %bf.clear = and i32 %bf.load, 65535, !dbg !4824
  %idxprom = sext i32 %bf.clear to i64, !dbg !4824
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !4824
  %2 = load i32, i32* %arrayidx, align 4, !dbg !4824
  %cmp = icmp eq i32 %2, 9, !dbg !4824
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !4826

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4827
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4827
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4827
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4827
  %idxprom3 = sext i32 %bf.clear2 to i64, !dbg !4827
  %arrayidx4 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom3, !dbg !4827
  %5 = load i32, i32* %arrayidx4, align 4, !dbg !4827
  %cmp5 = icmp eq i32 %5, 9, !dbg !4827
  br i1 %cmp5, label %if.then, label %if.end7, !dbg !4828

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4829, metadata !DIExpression()), !dbg !4831
  %6 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !4832
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %6, i32 0, i32 0, !dbg !4833
  %7 = load i32, i32* %code, align 8, !dbg !4833
  %8 = load i32, i32* %mode.addr, align 4, !dbg !4834
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4835
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4836
  %call = call %struct.rtx_def* @simplify_binary_operation(i32 %7, i32 %8, %struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !4837
  store %struct.rtx_def* %call, %struct.rtx_def** %x, align 8, !dbg !4831
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4838
  %tobool = icmp ne %struct.rtx_def* %11, null, !dbg !4838
  br i1 %tobool, label %if.then6, label %if.end, !dbg !4840

if.then6:                                         ; preds = %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4841
  store %struct.rtx_def* %12, %struct.rtx_def** %retval, align 8, !dbg !4842
  br label %return, !dbg !4842

if.end:                                           ; preds = %if.then
  br label %if.end7, !dbg !4843

if.end7:                                          ; preds = %if.end, %land.lhs.true, %entry
  %13 = load i32, i32* %mode.addr, align 4, !dbg !4844
  %14 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !4845
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !4846
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !4847
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4848
  %18 = load i32, i32* %unsignedp.addr, align 4, !dbg !4849
  %19 = load i32, i32* %methods.addr, align 4, !dbg !4850
  %call8 = call %struct.rtx_def* @expand_binop(i32 %13, %struct.optab_d* %14, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, i32 %18, i32 %19), !dbg !4851
  store %struct.rtx_def* %call8, %struct.rtx_def** %retval, align 8, !dbg !4852
  br label %return, !dbg !4852

return:                                           ; preds = %if.end7, %if.then6
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4853
  ret %struct.rtx_def* %20, !dbg !4853
}

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_vec_shift_expr(%struct.separate_ops* %ops, %struct.rtx_def* %target) #0 !dbg !4854 {
entry:
  %ops.addr = alloca %struct.separate_ops*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %rtx_op1 = alloca %struct.rtx_def*, align 8
  %rtx_op2 = alloca %struct.rtx_def*, align 8
  %mode1 = alloca i32, align 4
  %mode2 = alloca i32, align 4
  %mode = alloca i32, align 4
  %vec_oprnd = alloca %union.tree_node*, align 8
  %shift_oprnd = alloca %union.tree_node*, align 8
  %shift_optab = alloca %struct.optab_d*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.separate_ops* %ops, %struct.separate_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.separate_ops** %ops.addr, metadata !4857, metadata !DIExpression()), !dbg !4858
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4859, metadata !DIExpression()), !dbg !4860
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !4861, metadata !DIExpression()), !dbg !4862
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_op1, metadata !4863, metadata !DIExpression()), !dbg !4864
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_op2, metadata !4865, metadata !DIExpression()), !dbg !4866
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata i32* %mode2, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4871, metadata !DIExpression()), !dbg !4872
  %0 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4873
  %type = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %0, i32 0, i32 1, !dbg !4873
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4873
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4873
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4873
  %bf.load = load i64, i64* %2, align 8, !dbg !4873
  %bf.clear = and i64 %bf.load, 65535, !dbg !4873
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4873
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !4873
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4873

cond.true:                                        ; preds = %entry
  %3 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4873
  %type1 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %3, i32 0, i32 1, !dbg !4873
  %4 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4873
  %call = call i32 @vector_type_mode(%union.tree_node* %4), !dbg !4873
  br label %cond.end, !dbg !4873

cond.false:                                       ; preds = %entry
  %5 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4873
  %type2 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %5, i32 0, i32 1, !dbg !4873
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4873
  %type3 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !4873
  %mode4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 6, !dbg !4873
  %bf.load5 = load i32, i32* %mode4, align 4, !dbg !4873
  %bf.lshr = lshr i32 %bf.load5, 16, !dbg !4873
  %bf.clear6 = and i32 %bf.lshr, 255, !dbg !4873
  br label %cond.end, !dbg !4873

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear6, %cond.false ], !dbg !4873
  store i32 %cond, i32* %mode, align 4, !dbg !4872
  call void @llvm.dbg.declare(metadata %union.tree_node** %vec_oprnd, metadata !4874, metadata !DIExpression()), !dbg !4875
  %7 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4876
  %op0 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %7, i32 0, i32 2, !dbg !4877
  %8 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4877
  store %union.tree_node* %8, %union.tree_node** %vec_oprnd, align 8, !dbg !4875
  call void @llvm.dbg.declare(metadata %union.tree_node** %shift_oprnd, metadata !4878, metadata !DIExpression()), !dbg !4879
  %9 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4880
  %op1 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %9, i32 0, i32 3, !dbg !4881
  %10 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !4881
  store %union.tree_node* %10, %union.tree_node** %shift_oprnd, align 8, !dbg !4879
  call void @llvm.dbg.declare(metadata %struct.optab_d** %shift_optab, metadata !4882, metadata !DIExpression()), !dbg !4883
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4884, metadata !DIExpression()), !dbg !4885
  %11 = load %struct.separate_ops*, %struct.separate_ops** %ops.addr, align 8, !dbg !4886
  %code = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %11, i32 0, i32 0, !dbg !4887
  %12 = load i32, i32* %code, align 8, !dbg !4887
  switch i32 %12, label %sw.default [
    i32 171, label %sw.bb
    i32 170, label %sw.bb7
  ], !dbg !4888

sw.bb:                                            ; preds = %cond.end
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 139), %struct.optab_d** %shift_optab, align 8, !dbg !4889
  br label %sw.epilog, !dbg !4891

sw.bb7:                                           ; preds = %cond.end
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 138), %struct.optab_d** %shift_optab, align 8, !dbg !4892
  br label %sw.epilog, !dbg !4893

sw.default:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 801, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4894
  br label %sw.epilog, !dbg !4895

sw.epilog:                                        ; preds = %sw.default, %sw.bb7, %sw.bb
  %13 = load %struct.optab_d*, %struct.optab_d** %shift_optab, align 8, !dbg !4896
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %13, i32 0, i32 4, !dbg !4896
  %14 = load i32, i32* %mode, align 4, !dbg !4896
  %idxprom = sext i32 %14 to i64, !dbg !4896
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !4896
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !4897
  %15 = load i32, i32* %insn_code, align 4, !dbg !4897
  store i32 %15, i32* %icode, align 4, !dbg !4898
  %16 = load i32, i32* %icode, align 4, !dbg !4899
  %cmp8 = icmp ne i32 %16, 2956, !dbg !4899
  br i1 %cmp8, label %cond.false10, label %cond.true9, !dbg !4899

cond.true9:                                       ; preds = %sw.epilog
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 805, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4899
  br label %cond.end11, !dbg !4899

cond.false10:                                     ; preds = %sw.epilog
  br label %cond.end11, !dbg !4899

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !4899
  %17 = load i32, i32* %icode, align 4, !dbg !4900
  %idxprom13 = zext i32 %17 to i64, !dbg !4901
  %arrayidx14 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom13, !dbg !4901
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx14, i32 0, i32 3, !dbg !4902
  %18 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !4902
  %arrayidx15 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %18, i64 1, !dbg !4901
  %mode16 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx15, i32 0, i32 2, !dbg !4903
  %bf.load17 = load i16, i16* %mode16, align 8, !dbg !4903
  %bf.cast18 = zext i16 %bf.load17 to i32, !dbg !4903
  store i32 %bf.cast18, i32* %mode1, align 4, !dbg !4904
  %19 = load i32, i32* %icode, align 4, !dbg !4905
  %idxprom19 = zext i32 %19 to i64, !dbg !4906
  %arrayidx20 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom19, !dbg !4906
  %operand21 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx20, i32 0, i32 3, !dbg !4907
  %20 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand21, align 8, !dbg !4907
  %arrayidx22 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %20, i64 2, !dbg !4906
  %mode23 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx22, i32 0, i32 2, !dbg !4908
  %bf.load24 = load i16, i16* %mode23, align 8, !dbg !4908
  %bf.cast25 = zext i16 %bf.load24 to i32, !dbg !4908
  store i32 %bf.cast25, i32* %mode2, align 4, !dbg !4909
  %21 = load %union.tree_node*, %union.tree_node** %vec_oprnd, align 8, !dbg !4910
  %call26 = call %struct.rtx_def* @expand_normal(%union.tree_node* %21), !dbg !4911
  store %struct.rtx_def* %call26, %struct.rtx_def** %rtx_op1, align 8, !dbg !4912
  %22 = load i32, i32* %icode, align 4, !dbg !4913
  %idxprom27 = zext i32 %22 to i64, !dbg !4915
  %arrayidx28 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom27, !dbg !4915
  %operand29 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx28, i32 0, i32 3, !dbg !4916
  %23 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand29, align 8, !dbg !4916
  %arrayidx30 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %23, i64 1, !dbg !4915
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx30, i32 0, i32 0, !dbg !4917
  %24 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !4917
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !4918
  %26 = load i32, i32* %mode1, align 4, !dbg !4919
  %call31 = call i32 %24(%struct.rtx_def* %25, i32 %26), !dbg !4920
  %tobool = icmp ne i32 %call31, 0, !dbg !4920
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4921

land.lhs.true:                                    ; preds = %cond.end11
  %27 = load i32, i32* %mode1, align 4, !dbg !4922
  %cmp32 = icmp ne i32 %27, 0, !dbg !4923
  br i1 %cmp32, label %if.then, label %if.end, !dbg !4924

if.then:                                          ; preds = %land.lhs.true
  %28 = load i32, i32* %mode1, align 4, !dbg !4925
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !4926
  %call33 = call %struct.rtx_def* @force_reg(i32 %28, %struct.rtx_def* %29), !dbg !4927
  store %struct.rtx_def* %call33, %struct.rtx_def** %rtx_op1, align 8, !dbg !4928
  br label %if.end, !dbg !4929

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end11
  %30 = load %union.tree_node*, %union.tree_node** %shift_oprnd, align 8, !dbg !4930
  %call34 = call %struct.rtx_def* @expand_normal(%union.tree_node* %30), !dbg !4931
  store %struct.rtx_def* %call34, %struct.rtx_def** %rtx_op2, align 8, !dbg !4932
  %31 = load i32, i32* %icode, align 4, !dbg !4933
  %idxprom35 = zext i32 %31 to i64, !dbg !4935
  %arrayidx36 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom35, !dbg !4935
  %operand37 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx36, i32 0, i32 3, !dbg !4936
  %32 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand37, align 8, !dbg !4936
  %arrayidx38 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %32, i64 2, !dbg !4935
  %predicate39 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx38, i32 0, i32 0, !dbg !4937
  %33 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate39, align 8, !dbg !4937
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op2, align 8, !dbg !4938
  %35 = load i32, i32* %mode2, align 4, !dbg !4939
  %call40 = call i32 %33(%struct.rtx_def* %34, i32 %35), !dbg !4940
  %tobool41 = icmp ne i32 %call40, 0, !dbg !4940
  br i1 %tobool41, label %if.end46, label %land.lhs.true42, !dbg !4941

land.lhs.true42:                                  ; preds = %if.end
  %36 = load i32, i32* %mode2, align 4, !dbg !4942
  %cmp43 = icmp ne i32 %36, 0, !dbg !4943
  br i1 %cmp43, label %if.then44, label %if.end46, !dbg !4944

if.then44:                                        ; preds = %land.lhs.true42
  %37 = load i32, i32* %mode2, align 4, !dbg !4945
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op2, align 8, !dbg !4946
  %call45 = call %struct.rtx_def* @force_reg(i32 %37, %struct.rtx_def* %38), !dbg !4947
  store %struct.rtx_def* %call45, %struct.rtx_def** %rtx_op2, align 8, !dbg !4948
  br label %if.end46, !dbg !4949

if.end46:                                         ; preds = %if.then44, %land.lhs.true42, %if.end
  %39 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4950
  %tobool47 = icmp ne %struct.rtx_def* %39, null, !dbg !4950
  br i1 %tobool47, label %lor.lhs.false, label %if.then55, !dbg !4952

lor.lhs.false:                                    ; preds = %if.end46
  %40 = load i32, i32* %icode, align 4, !dbg !4953
  %idxprom48 = zext i32 %40 to i64, !dbg !4954
  %arrayidx49 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom48, !dbg !4954
  %operand50 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx49, i32 0, i32 3, !dbg !4955
  %41 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand50, align 8, !dbg !4955
  %arrayidx51 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %41, i64 0, !dbg !4954
  %predicate52 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx51, i32 0, i32 0, !dbg !4956
  %42 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate52, align 8, !dbg !4956
  %43 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4957
  %44 = load i32, i32* %mode, align 4, !dbg !4958
  %call53 = call i32 %42(%struct.rtx_def* %43, i32 %44), !dbg !4959
  %tobool54 = icmp ne i32 %call53, 0, !dbg !4959
  br i1 %tobool54, label %if.end57, label %if.then55, !dbg !4960

if.then55:                                        ; preds = %lor.lhs.false, %if.end46
  %45 = load i32, i32* %mode, align 4, !dbg !4961
  %call56 = call %struct.rtx_def* @gen_reg_rtx(i32 %45), !dbg !4962
  store %struct.rtx_def* %call56, %struct.rtx_def** %target.addr, align 8, !dbg !4963
  br label %if.end57, !dbg !4964

if.end57:                                         ; preds = %if.then55, %lor.lhs.false
  %46 = load i32, i32* %icode, align 4, !dbg !4965
  %idxprom58 = zext i32 %46 to i64, !dbg !4965
  %arrayidx59 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom58, !dbg !4965
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx59, i32 0, i32 2, !dbg !4965
  %47 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !4965
  %48 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4966
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !4967
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op2, align 8, !dbg !4968
  %call60 = call %struct.rtx_def* (%struct.rtx_def*, ...) %47(%struct.rtx_def* %48, %struct.rtx_def* %49, %struct.rtx_def* %50), !dbg !4965
  store %struct.rtx_def* %call60, %struct.rtx_def** %pat, align 8, !dbg !4969
  %51 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4970
  %tobool61 = icmp ne %struct.rtx_def* %51, null, !dbg !4970
  br i1 %tobool61, label %cond.false63, label %cond.true62, !dbg !4970

cond.true62:                                      ; preds = %if.end57
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 826, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4970
  br label %cond.end64, !dbg !4970

cond.false63:                                     ; preds = %if.end57
  br label %cond.end64, !dbg !4970

cond.end64:                                       ; preds = %cond.false63, %cond.true62
  %cond65 = phi i32 [ 0, %cond.true62 ], [ 0, %cond.false63 ], !dbg !4970
  %52 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4971
  %call66 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %52), !dbg !4972
  %53 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4973
  ret %struct.rtx_def* %53, !dbg !4974
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_normal(%union.tree_node* %exp) #0 !dbg !4975 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !4978, metadata !DIExpression()), !dbg !4979
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4980
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* null, i32 0, i32 0, %struct.rtx_def** null), !dbg !4981
  ret %struct.rtx_def* %call, !dbg !4982
}

declare dso_local %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_simple_binop(i32 %mode, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %methods) #0 !dbg !4983 {
entry:
  %mode.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %binop = alloca %struct.optab_d*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4986, metadata !DIExpression()), !dbg !4987
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4988, metadata !DIExpression()), !dbg !4989
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !4990, metadata !DIExpression()), !dbg !4991
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !4992, metadata !DIExpression()), !dbg !4993
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !4994, metadata !DIExpression()), !dbg !4995
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !4996, metadata !DIExpression()), !dbg !4997
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !4998, metadata !DIExpression()), !dbg !4999
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binop, metadata !5000, metadata !DIExpression()), !dbg !5001
  %0 = load i32, i32* %code.addr, align 4, !dbg !5002
  %idxprom = sext i32 %0 to i64, !dbg !5003
  %arrayidx = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom, !dbg !5003
  %1 = load %struct.optab_d*, %struct.optab_d** %arrayidx, align 8, !dbg !5003
  store %struct.optab_d* %1, %struct.optab_d** %binop, align 8, !dbg !5001
  %2 = load %struct.optab_d*, %struct.optab_d** %binop, align 8, !dbg !5004
  %tobool = icmp ne %struct.optab_d* %2, null, !dbg !5004
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5004

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1322, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5004
  br label %cond.end, !dbg !5004

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5004
  %3 = load i32, i32* %mode.addr, align 4, !dbg !5005
  %4 = load %struct.optab_d*, %struct.optab_d** %binop, align 8, !dbg !5006
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5007
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5008
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5009
  %8 = load i32, i32* %unsignedp.addr, align 4, !dbg !5010
  %9 = load i32, i32* %methods.addr, align 4, !dbg !5011
  %call = call %struct.rtx_def* @expand_binop(i32 %3, %struct.optab_d* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, i32 %8, i32 %9), !dbg !5012
  ret %struct.rtx_def* %call, !dbg !5013
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_binop(i32 %mode, %struct.optab_d* %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %methods) #0 !dbg !5014 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %next_methods = alloca i32, align 4
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %libfunc = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %entry_last = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %otheroptab = alloca %struct.optab_d*, align 8
  %newop1 = alloca %struct.rtx_def*, align 8
  %bits = alloca i32, align 4
  %xop0 = alloca %struct.rtx_def*, align 8
  %xop1 = alloca %struct.rtx_def*, align 8
  %no_extend = alloca i32, align 4
  %i = alloca i32, align 4
  %insns = alloca %struct.rtx_def*, align 8
  %target_piece = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %shift_mask = alloca i64, align 8
  %double_shift_mask = alloca i64, align 8
  %op1_mode = alloca i32, align 4
  %insns419 = alloca %struct.rtx_def*, align 8
  %into_target = alloca %struct.rtx_def*, align 8
  %outof_target = alloca %struct.rtx_def*, align 8
  %into_input = alloca %struct.rtx_def*, align 8
  %outof_input = alloca %struct.rtx_def*, align 8
  %left_shift = alloca i32, align 4
  %outof_word = alloca i32, align 4
  %insns480 = alloca %struct.rtx_def*, align 8
  %into_target481 = alloca %struct.rtx_def*, align 8
  %outof_target482 = alloca %struct.rtx_def*, align 8
  %into_input483 = alloca %struct.rtx_def*, align 8
  %outof_input484 = alloca %struct.rtx_def*, align 8
  %inter = alloca %struct.rtx_def*, align 8
  %shift_count = alloca i32, align 4
  %left_shift485 = alloca i32, align 4
  %outof_word486 = alloca i32, align 4
  %into_temp1 = alloca %struct.rtx_def*, align 8
  %into_temp2 = alloca %struct.rtx_def*, align 8
  %outof_temp1 = alloca %struct.rtx_def*, align 8
  %outof_temp2 = alloca %struct.rtx_def*, align 8
  %first_shift_count = alloca %struct.rtx_def*, align 8
  %second_shift_count = alloca %struct.rtx_def*, align 8
  %reverse_unsigned_shift = alloca %struct.optab_d*, align 8
  %unsigned_shift = alloca %struct.optab_d*, align 8
  %i619 = alloca i32, align 4
  %otheroptab620 = alloca %struct.optab_d*, align 8
  %nwords = alloca i32, align 4
  %carry_in = alloca %struct.rtx_def*, align 8
  %carry_out = alloca %struct.rtx_def*, align 8
  %xop0632 = alloca %struct.rtx_def*, align 8
  %xop1633 = alloca %struct.rtx_def*, align 8
  %xtarget = alloca %struct.rtx_def*, align 8
  %normalizep = alloca i32, align 4
  %index = alloca i32, align 4
  %target_piece657 = alloca %struct.rtx_def*, align 8
  %op0_piece = alloca %struct.rtx_def*, align 8
  %op1_piece = alloca %struct.rtx_def*, align 8
  %x661 = alloca %struct.rtx_def*, align 8
  %newx = alloca %struct.rtx_def*, align 8
  %carry_tmp = alloca %struct.rtx_def*, align 8
  %temp732 = alloca %struct.rtx_def*, align 8
  %product = alloca %struct.rtx_def*, align 8
  %insns824 = alloca %struct.rtx_def*, align 8
  %op1x = alloca %struct.rtx_def*, align 8
  %op1_mode825 = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %xop0909 = alloca %struct.rtx_def*, align 8
  %xop1910 = alloca %struct.rtx_def*, align 8
  %no_extend911 = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !5019, metadata !DIExpression()), !dbg !5020
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !5021, metadata !DIExpression()), !dbg !5022
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5023, metadata !DIExpression()), !dbg !5024
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !5025, metadata !DIExpression()), !dbg !5026
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !5027, metadata !DIExpression()), !dbg !5028
  call void @llvm.dbg.declare(metadata i32* %next_methods, metadata !5029, metadata !DIExpression()), !dbg !5030
  %0 = load i32, i32* %methods.addr, align 4, !dbg !5031
  %cmp = icmp eq i32 %0, 1, !dbg !5032
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !5033

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %methods.addr, align 4, !dbg !5034
  %cmp1 = icmp eq i32 %1, 3, !dbg !5035
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !5031

cond.true:                                        ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !5031

cond.false:                                       ; preds = %lor.lhs.false
  %2 = load i32, i32* %methods.addr, align 4, !dbg !5036
  br label %cond.end, !dbg !5031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %2, %cond.false ], !dbg !5031
  store i32 %cond, i32* %next_methods, align 4, !dbg !5030
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !5037, metadata !DIExpression()), !dbg !5038
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !5039, metadata !DIExpression()), !dbg !5040
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !5041, metadata !DIExpression()), !dbg !5042
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !5043, metadata !DIExpression()), !dbg !5044
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_last, metadata !5045, metadata !DIExpression()), !dbg !5046
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !5047
  store %struct.rtx_def* %call, %struct.rtx_def** %entry_last, align 8, !dbg !5046
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !5048, metadata !DIExpression()), !dbg !5049
  %3 = load i32, i32* %mode.addr, align 4, !dbg !5050
  %idxprom = zext i32 %3 to i64, !dbg !5050
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5050
  %4 = load i8, i8* %arrayidx, align 1, !dbg !5050
  %conv = zext i8 %4 to i32, !dbg !5050
  store i32 %conv, i32* %mclass, align 4, !dbg !5051
  %5 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5052
  %cmp2 = icmp eq %struct.optab_d* %5, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !5054
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !5055

land.lhs.true:                                    ; preds = %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5056
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5056
  %bf.load = load i32, i32* %7, align 8, !dbg !5056
  %bf.clear = and i32 %bf.load, 65535, !dbg !5056
  %cmp4 = icmp eq i32 %bf.clear, 30, !dbg !5056
  br i1 %cmp4, label %if.then, label %if.end, !dbg !5057

if.then:                                          ; preds = %land.lhs.true
  %8 = load i32, i32* %mode.addr, align 4, !dbg !5058
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5060
  %call6 = call %struct.rtx_def* @negate_rtx(i32 %8, %struct.rtx_def* %9), !dbg !5061
  store %struct.rtx_def* %call6, %struct.rtx_def** %op1.addr, align 8, !dbg !5062
  store %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.optab_d** %binoptab.addr, align 8, !dbg !5063
  br label %if.end, !dbg !5064

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %call7 = call %struct.rtx_def* @get_last_insn(), !dbg !5065
  store %struct.rtx_def* %call7, %struct.rtx_def** %last, align 8, !dbg !5066
  %10 = load i32, i32* %methods.addr, align 4, !dbg !5067
  %cmp8 = icmp ne i32 %10, 4, !dbg !5069
  br i1 %cmp8, label %land.lhs.true10, label %if.end19, !dbg !5070

land.lhs.true10:                                  ; preds = %if.end
  %11 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5071
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %11, i32 0, i32 4, !dbg !5071
  %12 = load i32, i32* %mode.addr, align 4, !dbg !5071
  %idxprom11 = sext i32 %12 to i64, !dbg !5071
  %arrayidx12 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom11, !dbg !5071
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx12, i32 0, i32 0, !dbg !5072
  %13 = load i32, i32* %insn_code, align 4, !dbg !5072
  %cmp13 = icmp ne i32 %13, 2956, !dbg !5073
  br i1 %cmp13, label %if.then15, label %if.end19, !dbg !5074

if.then15:                                        ; preds = %land.lhs.true10
  %14 = load i32, i32* %mode.addr, align 4, !dbg !5075
  %15 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5077
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5078
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5079
  %18 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5080
  %19 = load i32, i32* %unsignedp.addr, align 4, !dbg !5081
  %20 = load i32, i32* %methods.addr, align 4, !dbg !5082
  %21 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5083
  %call16 = call %struct.rtx_def* @expand_binop_directly(i32 %14, %struct.optab_d* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18, i32 %19, i32 %20, %struct.rtx_def* %21), !dbg !5084
  store %struct.rtx_def* %call16, %struct.rtx_def** %temp, align 8, !dbg !5085
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5086
  %tobool = icmp ne %struct.rtx_def* %22, null, !dbg !5086
  br i1 %tobool, label %if.then17, label %if.end18, !dbg !5088

if.then17:                                        ; preds = %if.then15
  %23 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5089
  store %struct.rtx_def* %23, %struct.rtx_def** %retval, align 8, !dbg !5090
  br label %return, !dbg !5090

if.end18:                                         ; preds = %if.then15
  br label %if.end19, !dbg !5091

if.end19:                                         ; preds = %if.end18, %land.lhs.true10, %if.end
  %24 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5092
  %cmp20 = icmp eq %struct.optab_d* %24, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), !dbg !5094
  br i1 %cmp20, label %land.lhs.true22, label %lor.lhs.false28, !dbg !5095

land.lhs.true22:                                  ; preds = %if.end19
  %25 = load i32, i32* %mode.addr, align 4, !dbg !5096
  %idxprom23 = sext i32 %25 to i64, !dbg !5096
  %arrayidx24 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48, i32 4), i64 0, i64 %idxprom23, !dbg !5096
  %insn_code25 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx24, i32 0, i32 0, !dbg !5097
  %26 = load i32, i32* %insn_code25, align 4, !dbg !5097
  %cmp26 = icmp ne i32 %26, 2956, !dbg !5098
  br i1 %cmp26, label %land.lhs.true37, label %lor.lhs.false28, !dbg !5099

lor.lhs.false28:                                  ; preds = %land.lhs.true22, %if.end19
  %27 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5100
  %cmp29 = icmp eq %struct.optab_d* %27, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48), !dbg !5101
  br i1 %cmp29, label %land.lhs.true31, label %if.end80, !dbg !5102

land.lhs.true31:                                  ; preds = %lor.lhs.false28
  %28 = load i32, i32* %mode.addr, align 4, !dbg !5103
  %idxprom32 = sext i32 %28 to i64, !dbg !5103
  %arrayidx33 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47, i32 4), i64 0, i64 %idxprom32, !dbg !5103
  %insn_code34 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx33, i32 0, i32 0, !dbg !5104
  %29 = load i32, i32* %insn_code34, align 4, !dbg !5104
  %cmp35 = icmp ne i32 %29, 2956, !dbg !5105
  br i1 %cmp35, label %land.lhs.true37, label %if.end80, !dbg !5106

land.lhs.true37:                                  ; preds = %land.lhs.true31, %land.lhs.true22
  %30 = load i32, i32* %mclass, align 4, !dbg !5107
  %cmp38 = icmp eq i32 %30, 2, !dbg !5108
  br i1 %cmp38, label %if.then40, label %if.end80, !dbg !5109

if.then40:                                        ; preds = %land.lhs.true37
  call void @llvm.dbg.declare(metadata %struct.optab_d** %otheroptab, metadata !5110, metadata !DIExpression()), !dbg !5112
  %31 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5113
  %cmp41 = icmp eq %struct.optab_d* %31, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), !dbg !5114
  %32 = zext i1 %cmp41 to i64, !dbg !5113
  %cond43 = select i1 %cmp41, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), !dbg !5113
  store %struct.optab_d* %cond43, %struct.optab_d** %otheroptab, align 8, !dbg !5112
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newop1, metadata !5115, metadata !DIExpression()), !dbg !5116
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !5117, metadata !DIExpression()), !dbg !5118
  %33 = load i32, i32* %mode.addr, align 4, !dbg !5119
  %idxprom44 = zext i32 %33 to i64, !dbg !5119
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom44, !dbg !5119
  %34 = load i8, i8* %arrayidx45, align 1, !dbg !5119
  %conv46 = zext i8 %34 to i16, !dbg !5119
  %conv47 = zext i16 %conv46 to i32, !dbg !5119
  %mul = mul nsw i32 %conv47, 8, !dbg !5119
  %conv48 = trunc i32 %mul to i16, !dbg !5119
  %conv49 = zext i16 %conv48 to i32, !dbg !5119
  store i32 %conv49, i32* %bits, align 4, !dbg !5118
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5120
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !5120
  %bf.load50 = load i32, i32* %36, align 8, !dbg !5120
  %bf.clear51 = and i32 %bf.load50, 65535, !dbg !5120
  %cmp52 = icmp eq i32 %bf.clear51, 30, !dbg !5120
  br i1 %cmp52, label %if.then54, label %if.else, !dbg !5122

if.then54:                                        ; preds = %if.then40
  %37 = load i32, i32* %bits, align 4, !dbg !5123
  %conv55 = zext i32 %37 to i64, !dbg !5123
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5123
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5123
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !5123
  %arrayidx56 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !5123
  %39 = load i64, i64* %arrayidx56, align 8, !dbg !5123
  %sub = sub nsw i64 %conv55, %39, !dbg !5123
  %call57 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub), !dbg !5123
  store %struct.rtx_def* %call57, %struct.rtx_def** %newop1, align 8, !dbg !5124
  br label %if.end75, !dbg !5125

if.else:                                          ; preds = %if.then40
  %40 = load i64 (i32)*, i64 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 53), align 8, !dbg !5126
  %41 = load i32, i32* %mode.addr, align 4, !dbg !5128
  %call58 = call i64 %40(i32 %41), !dbg !5129
  %42 = load i32, i32* %bits, align 4, !dbg !5130
  %sub59 = sub i32 %42, 1, !dbg !5131
  %conv60 = zext i32 %sub59 to i64, !dbg !5130
  %cmp61 = icmp eq i64 %call58, %conv60, !dbg !5132
  br i1 %cmp61, label %if.then63, label %if.else67, !dbg !5133

if.then63:                                        ; preds = %if.else
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5134
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5134
  %bf.load64 = load i32, i32* %44, align 8, !dbg !5134
  %bf.lshr = lshr i32 %bf.load64, 16, !dbg !5134
  %bf.clear65 = and i32 %bf.lshr, 255, !dbg !5134
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5135
  %call66 = call %struct.rtx_def* @negate_rtx(i32 %bf.clear65, %struct.rtx_def* %45), !dbg !5136
  store %struct.rtx_def* %call66, %struct.rtx_def** %newop1, align 8, !dbg !5137
  br label %if.end74, !dbg !5138

if.else67:                                        ; preds = %if.else
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5139
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !5139
  %bf.load68 = load i32, i32* %47, align 8, !dbg !5139
  %bf.lshr69 = lshr i32 %bf.load68, 16, !dbg !5139
  %bf.clear70 = and i32 %bf.lshr69, 255, !dbg !5139
  %48 = load i32, i32* %bits, align 4, !dbg !5140
  %conv71 = zext i32 %48 to i64, !dbg !5140
  %call72 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv71), !dbg !5140
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5141
  %50 = load i32, i32* %unsignedp.addr, align 4, !dbg !5142
  %call73 = call %struct.rtx_def* @expand_binop(i32 %bf.clear70, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %call72, %struct.rtx_def* %49, %struct.rtx_def* null, i32 %50, i32 0), !dbg !5143
  store %struct.rtx_def* %call73, %struct.rtx_def** %newop1, align 8, !dbg !5144
  br label %if.end74

if.end74:                                         ; preds = %if.else67, %if.then63
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then54
  %51 = load i32, i32* %mode.addr, align 4, !dbg !5145
  %52 = load %struct.optab_d*, %struct.optab_d** %otheroptab, align 8, !dbg !5146
  %53 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5147
  %54 = load %struct.rtx_def*, %struct.rtx_def** %newop1, align 8, !dbg !5148
  %55 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5149
  %56 = load i32, i32* %unsignedp.addr, align 4, !dbg !5150
  %57 = load i32, i32* %methods.addr, align 4, !dbg !5151
  %58 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5152
  %call76 = call %struct.rtx_def* @expand_binop_directly(i32 %51, %struct.optab_d* %52, %struct.rtx_def* %53, %struct.rtx_def* %54, %struct.rtx_def* %55, i32 %56, i32 %57, %struct.rtx_def* %58), !dbg !5153
  store %struct.rtx_def* %call76, %struct.rtx_def** %temp, align 8, !dbg !5154
  %59 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5155
  %tobool77 = icmp ne %struct.rtx_def* %59, null, !dbg !5155
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !5157

if.then78:                                        ; preds = %if.end75
  %60 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5158
  store %struct.rtx_def* %60, %struct.rtx_def** %retval, align 8, !dbg !5159
  br label %return, !dbg !5159

if.end79:                                         ; preds = %if.end75
  br label %if.end80, !dbg !5160

if.end80:                                         ; preds = %if.end79, %land.lhs.true37, %land.lhs.true31, %lor.lhs.false28
  %61 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5161
  %cmp81 = icmp eq %struct.optab_d* %61, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !5163
  br i1 %cmp81, label %land.lhs.true83, label %if.end121, !dbg !5164

land.lhs.true83:                                  ; preds = %if.end80
  %62 = load i32, i32* %mode.addr, align 4, !dbg !5165
  %idxprom84 = zext i32 %62 to i64, !dbg !5165
  %arrayidx85 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom84, !dbg !5165
  %63 = load i8, i8* %arrayidx85, align 1, !dbg !5165
  %conv86 = zext i8 %63 to i32, !dbg !5165
  %cmp87 = icmp ne i32 %conv86, 0, !dbg !5166
  br i1 %cmp87, label %land.lhs.true89, label %if.end121, !dbg !5167

land.lhs.true89:                                  ; preds = %land.lhs.true83
  %64 = load i32, i32* %unsignedp.addr, align 4, !dbg !5168
  %tobool90 = icmp ne i32 %64, 0, !dbg !5168
  %65 = zext i1 %tobool90 to i64, !dbg !5168
  %cond91 = select i1 %tobool90, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), !dbg !5168
  %handlers92 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %cond91, i32 0, i32 4, !dbg !5168
  %66 = load i32, i32* %mode.addr, align 4, !dbg !5168
  %idxprom93 = zext i32 %66 to i64, !dbg !5168
  %arrayidx94 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom93, !dbg !5168
  %67 = load i8, i8* %arrayidx94, align 1, !dbg !5168
  %conv95 = zext i8 %67 to i32, !dbg !5168
  %idxprom96 = sext i32 %conv95 to i64, !dbg !5168
  %arrayidx97 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers92, i64 0, i64 %idxprom96, !dbg !5168
  %insn_code98 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx97, i32 0, i32 0, !dbg !5169
  %68 = load i32, i32* %insn_code98, align 4, !dbg !5169
  %cmp99 = icmp ne i32 %68, 2956, !dbg !5170
  br i1 %cmp99, label %if.then101, label %if.end121, !dbg !5171

if.then101:                                       ; preds = %land.lhs.true89
  %69 = load i32, i32* %mode.addr, align 4, !dbg !5172
  %idxprom102 = zext i32 %69 to i64, !dbg !5172
  %arrayidx103 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom102, !dbg !5172
  %70 = load i8, i8* %arrayidx103, align 1, !dbg !5172
  %conv104 = zext i8 %70 to i32, !dbg !5172
  %71 = load i32, i32* %unsignedp.addr, align 4, !dbg !5174
  %tobool105 = icmp ne i32 %71, 0, !dbg !5174
  %72 = zext i1 %tobool105 to i64, !dbg !5174
  %cond106 = select i1 %tobool105, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), !dbg !5174
  %73 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5175
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5176
  %75 = load i32, i32* %unsignedp.addr, align 4, !dbg !5177
  %call107 = call %struct.rtx_def* @expand_binop(i32 %conv104, %struct.optab_d* %cond106, %struct.rtx_def* %73, %struct.rtx_def* %74, %struct.rtx_def* null, i32 %75, i32 0), !dbg !5178
  store %struct.rtx_def* %call107, %struct.rtx_def** %temp, align 8, !dbg !5179
  %76 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5180
  %cmp108 = icmp ne %struct.rtx_def* %76, null, !dbg !5182
  br i1 %cmp108, label %if.then110, label %if.end120, !dbg !5183

if.then110:                                       ; preds = %if.then101
  %77 = load i32, i32* %mode.addr, align 4, !dbg !5184
  %idxprom111 = zext i32 %77 to i64, !dbg !5184
  %arrayidx112 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom111, !dbg !5184
  %78 = load i8, i8* %arrayidx112, align 1, !dbg !5184
  %conv113 = zext i8 %78 to i32, !dbg !5184
  %cmp114 = icmp eq i32 %conv113, 2, !dbg !5187
  br i1 %cmp114, label %if.then116, label %if.else118, !dbg !5188

if.then116:                                       ; preds = %if.then110
  %79 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5189
  %80 = load i32, i32* %mode.addr, align 4, !dbg !5190
  %81 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5191
  %call117 = call %struct.rtx_def* %79(i32 %80, %struct.rtx_def* %81), !dbg !5189
  store %struct.rtx_def* %call117, %struct.rtx_def** %retval, align 8, !dbg !5192
  br label %return, !dbg !5192

if.else118:                                       ; preds = %if.then110
  %82 = load i32, i32* %mode.addr, align 4, !dbg !5193
  %83 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5194
  %84 = load i32, i32* %unsignedp.addr, align 4, !dbg !5195
  %call119 = call %struct.rtx_def* @convert_to_mode(i32 %82, %struct.rtx_def* %83, i32 %84), !dbg !5196
  store %struct.rtx_def* %call119, %struct.rtx_def** %retval, align 8, !dbg !5197
  br label %return, !dbg !5197

if.end120:                                        ; preds = %if.then101
  br label %if.end121, !dbg !5198

if.end121:                                        ; preds = %if.end120, %land.lhs.true89, %land.lhs.true83, %if.end80
  %85 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp122 = icmp eq i32 %85, 2, !dbg !5199
  br i1 %cmp122, label %land.lhs.true145, label %lor.lhs.false124, !dbg !5199

lor.lhs.false124:                                 ; preds = %if.end121
  %86 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp125 = icmp eq i32 %86, 8, !dbg !5199
  br i1 %cmp125, label %land.lhs.true145, label %lor.lhs.false127, !dbg !5199

lor.lhs.false127:                                 ; preds = %lor.lhs.false124
  %87 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp128 = icmp eq i32 %87, 9, !dbg !5199
  br i1 %cmp128, label %land.lhs.true145, label %lor.lhs.false130, !dbg !5199

lor.lhs.false130:                                 ; preds = %lor.lhs.false127
  %88 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp131 = icmp eq i32 %88, 11, !dbg !5199
  br i1 %cmp131, label %land.lhs.true145, label %lor.lhs.false133, !dbg !5199

lor.lhs.false133:                                 ; preds = %lor.lhs.false130
  %89 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp134 = icmp eq i32 %89, 4, !dbg !5199
  br i1 %cmp134, label %land.lhs.true145, label %lor.lhs.false136, !dbg !5199

lor.lhs.false136:                                 ; preds = %lor.lhs.false133
  %90 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp137 = icmp eq i32 %90, 5, !dbg !5199
  br i1 %cmp137, label %land.lhs.true145, label %lor.lhs.false139, !dbg !5199

lor.lhs.false139:                                 ; preds = %lor.lhs.false136
  %91 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp140 = icmp eq i32 %91, 6, !dbg !5199
  br i1 %cmp140, label %land.lhs.true145, label %lor.lhs.false142, !dbg !5199

lor.lhs.false142:                                 ; preds = %lor.lhs.false139
  %92 = load i32, i32* %mclass, align 4, !dbg !5199
  %cmp143 = icmp eq i32 %92, 7, !dbg !5199
  br i1 %cmp143, label %land.lhs.true145, label %if.end242, !dbg !5201

land.lhs.true145:                                 ; preds = %lor.lhs.false142, %lor.lhs.false139, %lor.lhs.false136, %lor.lhs.false133, %lor.lhs.false130, %lor.lhs.false127, %lor.lhs.false124, %if.end121
  %93 = load i32, i32* %methods.addr, align 4, !dbg !5202
  %cmp146 = icmp ne i32 %93, 0, !dbg !5203
  br i1 %cmp146, label %land.lhs.true148, label %if.end242, !dbg !5204

land.lhs.true148:                                 ; preds = %land.lhs.true145
  %94 = load i32, i32* %methods.addr, align 4, !dbg !5205
  %cmp149 = icmp ne i32 %94, 1, !dbg !5206
  br i1 %cmp149, label %if.then151, label %if.end242, !dbg !5207

if.then151:                                       ; preds = %land.lhs.true148
  %95 = load i32, i32* %mode.addr, align 4, !dbg !5208
  %idxprom152 = zext i32 %95 to i64, !dbg !5208
  %arrayidx153 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom152, !dbg !5208
  %96 = load i8, i8* %arrayidx153, align 1, !dbg !5208
  %conv154 = zext i8 %96 to i32, !dbg !5208
  store i32 %conv154, i32* %wider_mode, align 4, !dbg !5210
  br label %for.cond, !dbg !5211

for.cond:                                         ; preds = %for.inc, %if.then151
  %97 = load i32, i32* %wider_mode, align 4, !dbg !5212
  %cmp155 = icmp ne i32 %97, 0, !dbg !5214
  br i1 %cmp155, label %for.body, label %for.end, !dbg !5215

for.body:                                         ; preds = %for.cond
  %98 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5216
  %handlers157 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %98, i32 0, i32 4, !dbg !5216
  %99 = load i32, i32* %wider_mode, align 4, !dbg !5216
  %idxprom158 = sext i32 %99 to i64, !dbg !5216
  %arrayidx159 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers157, i64 0, i64 %idxprom158, !dbg !5216
  %insn_code160 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx159, i32 0, i32 0, !dbg !5219
  %100 = load i32, i32* %insn_code160, align 4, !dbg !5219
  %cmp161 = icmp ne i32 %100, 2956, !dbg !5220
  br i1 %cmp161, label %if.then184, label %lor.lhs.false163, !dbg !5221

lor.lhs.false163:                                 ; preds = %for.body
  %101 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5222
  %cmp164 = icmp eq %struct.optab_d* %101, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !5223
  br i1 %cmp164, label %land.lhs.true166, label %if.end238, !dbg !5224

land.lhs.true166:                                 ; preds = %lor.lhs.false163
  %102 = load i32, i32* %wider_mode, align 4, !dbg !5225
  %idxprom167 = zext i32 %102 to i64, !dbg !5225
  %arrayidx168 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom167, !dbg !5225
  %103 = load i8, i8* %arrayidx168, align 1, !dbg !5225
  %conv169 = zext i8 %103 to i32, !dbg !5225
  %cmp170 = icmp ne i32 %conv169, 0, !dbg !5226
  br i1 %cmp170, label %land.lhs.true172, label %if.end238, !dbg !5227

land.lhs.true172:                                 ; preds = %land.lhs.true166
  %104 = load i32, i32* %unsignedp.addr, align 4, !dbg !5228
  %tobool173 = icmp ne i32 %104, 0, !dbg !5228
  %105 = zext i1 %tobool173 to i64, !dbg !5228
  %cond174 = select i1 %tobool173, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), !dbg !5228
  %handlers175 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %cond174, i32 0, i32 4, !dbg !5228
  %106 = load i32, i32* %wider_mode, align 4, !dbg !5228
  %idxprom176 = zext i32 %106 to i64, !dbg !5228
  %arrayidx177 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom176, !dbg !5228
  %107 = load i8, i8* %arrayidx177, align 1, !dbg !5228
  %conv178 = zext i8 %107 to i32, !dbg !5228
  %idxprom179 = sext i32 %conv178 to i64, !dbg !5228
  %arrayidx180 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers175, i64 0, i64 %idxprom179, !dbg !5228
  %insn_code181 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx180, i32 0, i32 0, !dbg !5229
  %108 = load i32, i32* %insn_code181, align 4, !dbg !5229
  %cmp182 = icmp ne i32 %108, 2956, !dbg !5230
  br i1 %cmp182, label %if.then184, label %if.end238, !dbg !5231

if.then184:                                       ; preds = %land.lhs.true172, %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !5232, metadata !DIExpression()), !dbg !5234
  %109 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5235
  store %struct.rtx_def* %109, %struct.rtx_def** %xop0, align 8, !dbg !5234
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1, metadata !5236, metadata !DIExpression()), !dbg !5237
  %110 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5238
  store %struct.rtx_def* %110, %struct.rtx_def** %xop1, align 8, !dbg !5237
  call void @llvm.dbg.declare(metadata i32* %no_extend, metadata !5239, metadata !DIExpression()), !dbg !5240
  store i32 0, i32* %no_extend, align 4, !dbg !5240
  %111 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5241
  %cmp185 = icmp eq %struct.optab_d* %111, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), !dbg !5243
  br i1 %cmp185, label %land.lhs.true205, label %lor.lhs.false187, !dbg !5244

lor.lhs.false187:                                 ; preds = %if.then184
  %112 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5245
  %cmp188 = icmp eq %struct.optab_d* %112, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), !dbg !5246
  br i1 %cmp188, label %land.lhs.true205, label %lor.lhs.false190, !dbg !5247

lor.lhs.false190:                                 ; preds = %lor.lhs.false187
  %113 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5248
  %cmp191 = icmp eq %struct.optab_d* %113, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), !dbg !5249
  br i1 %cmp191, label %land.lhs.true205, label %lor.lhs.false193, !dbg !5250

lor.lhs.false193:                                 ; preds = %lor.lhs.false190
  %114 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5251
  %cmp194 = icmp eq %struct.optab_d* %114, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !5252
  br i1 %cmp194, label %land.lhs.true205, label %lor.lhs.false196, !dbg !5253

lor.lhs.false196:                                 ; preds = %lor.lhs.false193
  %115 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5254
  %cmp197 = icmp eq %struct.optab_d* %115, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !5255
  br i1 %cmp197, label %land.lhs.true205, label %lor.lhs.false199, !dbg !5256

lor.lhs.false199:                                 ; preds = %lor.lhs.false196
  %116 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5257
  %cmp200 = icmp eq %struct.optab_d* %116, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !5258
  br i1 %cmp200, label %land.lhs.true205, label %lor.lhs.false202, !dbg !5259

lor.lhs.false202:                                 ; preds = %lor.lhs.false199
  %117 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5260
  %cmp203 = icmp eq %struct.optab_d* %117, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !5261
  br i1 %cmp203, label %land.lhs.true205, label %if.end217, !dbg !5262

land.lhs.true205:                                 ; preds = %lor.lhs.false202, %lor.lhs.false199, %lor.lhs.false196, %lor.lhs.false193, %lor.lhs.false190, %lor.lhs.false187, %if.then184
  %118 = load i32, i32* %mclass, align 4, !dbg !5263
  %cmp206 = icmp eq i32 %118, 2, !dbg !5264
  br i1 %cmp206, label %if.then208, label %if.end217, !dbg !5265

if.then208:                                       ; preds = %land.lhs.true205
  store i32 1, i32* %no_extend, align 4, !dbg !5266
  %119 = load i32, i32* %mode.addr, align 4, !dbg !5268
  %120 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5269
  %121 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5270
  %122 = load i32, i32* %unsignedp.addr, align 4, !dbg !5271
  %conv209 = trunc i32 %122 to i8, !dbg !5271
  %call210 = call %struct.rtx_def* @avoid_expensive_constant(i32 %119, %struct.optab_d* %120, %struct.rtx_def* %121, i8 zeroext %conv209), !dbg !5272
  store %struct.rtx_def* %call210, %struct.rtx_def** %xop0, align 8, !dbg !5273
  %123 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5274
  %cmp211 = icmp ne %struct.optab_d* %123, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !5276
  br i1 %cmp211, label %if.then213, label %if.end216, !dbg !5277

if.then213:                                       ; preds = %if.then208
  %124 = load i32, i32* %mode.addr, align 4, !dbg !5278
  %125 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5279
  %126 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !5280
  %127 = load i32, i32* %unsignedp.addr, align 4, !dbg !5281
  %conv214 = trunc i32 %127 to i8, !dbg !5281
  %call215 = call %struct.rtx_def* @avoid_expensive_constant(i32 %124, %struct.optab_d* %125, %struct.rtx_def* %126, i8 zeroext %conv214), !dbg !5282
  store %struct.rtx_def* %call215, %struct.rtx_def** %xop1, align 8, !dbg !5283
  br label %if.end216, !dbg !5284

if.end216:                                        ; preds = %if.then213, %if.then208
  br label %if.end217, !dbg !5285

if.end217:                                        ; preds = %if.end216, %land.lhs.true205, %lor.lhs.false202
  %128 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5286
  %129 = load i32, i32* %wider_mode, align 4, !dbg !5287
  %130 = load i32, i32* %mode.addr, align 4, !dbg !5288
  %131 = load i32, i32* %unsignedp.addr, align 4, !dbg !5289
  %132 = load i32, i32* %no_extend, align 4, !dbg !5290
  %call218 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %128, i32 %129, i32 %130, i32 %131, i32 %132), !dbg !5291
  store %struct.rtx_def* %call218, %struct.rtx_def** %xop0, align 8, !dbg !5292
  %133 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !5293
  %134 = load i32, i32* %wider_mode, align 4, !dbg !5294
  %135 = load i32, i32* %mode.addr, align 4, !dbg !5295
  %136 = load i32, i32* %unsignedp.addr, align 4, !dbg !5296
  %137 = load i32, i32* %no_extend, align 4, !dbg !5297
  %tobool219 = icmp ne i32 %137, 0, !dbg !5297
  br i1 %tobool219, label %land.rhs, label %land.end, !dbg !5298

land.rhs:                                         ; preds = %if.end217
  %138 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5299
  %cmp220 = icmp ne %struct.optab_d* %138, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !5300
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end217
  %139 = phi i1 [ false, %if.end217 ], [ %cmp220, %land.rhs ], !dbg !5301
  %land.ext = zext i1 %139 to i32, !dbg !5298
  %call222 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %133, i32 %134, i32 %135, i32 %136, i32 %land.ext), !dbg !5302
  store %struct.rtx_def* %call222, %struct.rtx_def** %xop1, align 8, !dbg !5303
  %140 = load i32, i32* %wider_mode, align 4, !dbg !5304
  %141 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5305
  %142 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !5306
  %143 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !5307
  %144 = load i32, i32* %unsignedp.addr, align 4, !dbg !5308
  %call223 = call %struct.rtx_def* @expand_binop(i32 %140, %struct.optab_d* %141, %struct.rtx_def* %142, %struct.rtx_def* %143, %struct.rtx_def* null, i32 %144, i32 0), !dbg !5309
  store %struct.rtx_def* %call223, %struct.rtx_def** %temp, align 8, !dbg !5310
  %145 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5311
  %tobool224 = icmp ne %struct.rtx_def* %145, null, !dbg !5311
  br i1 %tobool224, label %if.then225, label %if.else236, !dbg !5313

if.then225:                                       ; preds = %land.end
  %146 = load i32, i32* %mclass, align 4, !dbg !5314
  %cmp226 = icmp ne i32 %146, 2, !dbg !5317
  br i1 %cmp226, label %if.then228, label %if.else234, !dbg !5318

if.then228:                                       ; preds = %if.then225
  %147 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5319
  %cmp229 = icmp eq %struct.rtx_def* %147, null, !dbg !5322
  br i1 %cmp229, label %if.then231, label %if.end233, !dbg !5323

if.then231:                                       ; preds = %if.then228
  %148 = load i32, i32* %mode.addr, align 4, !dbg !5324
  %call232 = call %struct.rtx_def* @gen_reg_rtx(i32 %148), !dbg !5325
  store %struct.rtx_def* %call232, %struct.rtx_def** %target.addr, align 8, !dbg !5326
  br label %if.end233, !dbg !5327

if.end233:                                        ; preds = %if.then231, %if.then228
  %149 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5328
  %150 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5329
  call void @convert_move(%struct.rtx_def* %149, %struct.rtx_def* %150, i32 0), !dbg !5330
  %151 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5331
  store %struct.rtx_def* %151, %struct.rtx_def** %retval, align 8, !dbg !5332
  br label %return, !dbg !5332

if.else234:                                       ; preds = %if.then225
  %152 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !5333
  %153 = load i32, i32* %mode.addr, align 4, !dbg !5334
  %154 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5335
  %call235 = call %struct.rtx_def* %152(i32 %153, %struct.rtx_def* %154), !dbg !5333
  store %struct.rtx_def* %call235, %struct.rtx_def** %retval, align 8, !dbg !5336
  br label %return, !dbg !5336

if.else236:                                       ; preds = %land.end
  %155 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5337
  call void @delete_insns_since(%struct.rtx_def* %155), !dbg !5338
  br label %if.end237

if.end237:                                        ; preds = %if.else236
  br label %if.end238, !dbg !5339

if.end238:                                        ; preds = %if.end237, %land.lhs.true172, %land.lhs.true166, %lor.lhs.false163
  br label %for.inc, !dbg !5340

for.inc:                                          ; preds = %if.end238
  %156 = load i32, i32* %wider_mode, align 4, !dbg !5341
  %idxprom239 = zext i32 %156 to i64, !dbg !5341
  %arrayidx240 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom239, !dbg !5341
  %157 = load i8, i8* %arrayidx240, align 1, !dbg !5341
  %conv241 = zext i8 %157 to i32, !dbg !5341
  store i32 %conv241, i32* %wider_mode, align 4, !dbg !5342
  br label %for.cond, !dbg !5343, !llvm.loop !5344

for.end:                                          ; preds = %for.cond
  br label %if.end242, !dbg !5345

if.end242:                                        ; preds = %for.end, %land.lhs.true148, %land.lhs.true145, %lor.lhs.false142
  %158 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5346
  %call243 = call zeroext i8 @commutative_optab_p(%struct.optab_d* %158), !dbg !5348
  %conv244 = zext i8 %call243 to i32, !dbg !5348
  %tobool245 = icmp ne i32 %conv244, 0, !dbg !5348
  br i1 %tobool245, label %land.lhs.true246, label %if.end251, !dbg !5349

land.lhs.true246:                                 ; preds = %if.end242
  %159 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5350
  %160 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5351
  %161 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5352
  %call247 = call zeroext i8 @swap_commutative_operands_with_target(%struct.rtx_def* %159, %struct.rtx_def* %160, %struct.rtx_def* %161), !dbg !5353
  %conv248 = zext i8 %call247 to i32, !dbg !5353
  %tobool249 = icmp ne i32 %conv248, 0, !dbg !5353
  br i1 %tobool249, label %if.then250, label %if.end251, !dbg !5354

if.then250:                                       ; preds = %land.lhs.true246
  %162 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5355
  store %struct.rtx_def* %162, %struct.rtx_def** %temp, align 8, !dbg !5357
  %163 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5358
  store %struct.rtx_def* %163, %struct.rtx_def** %op1.addr, align 8, !dbg !5359
  %164 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !5360
  store %struct.rtx_def* %164, %struct.rtx_def** %op0.addr, align 8, !dbg !5361
  br label %if.end251, !dbg !5362

if.end251:                                        ; preds = %if.then250, %land.lhs.true246, %if.end242
  %165 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5363
  %cmp252 = icmp eq %struct.optab_d* %165, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), !dbg !5365
  br i1 %cmp252, label %land.lhs.true260, label %lor.lhs.false254, !dbg !5366

lor.lhs.false254:                                 ; preds = %if.end251
  %166 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5367
  %cmp255 = icmp eq %struct.optab_d* %166, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), !dbg !5368
  br i1 %cmp255, label %land.lhs.true260, label %lor.lhs.false257, !dbg !5369

lor.lhs.false257:                                 ; preds = %lor.lhs.false254
  %167 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5370
  %cmp258 = icmp eq %struct.optab_d* %167, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), !dbg !5371
  br i1 %cmp258, label %land.lhs.true260, label %if.end329, !dbg !5372

land.lhs.true260:                                 ; preds = %lor.lhs.false257, %lor.lhs.false254, %if.end251
  %168 = load i32, i32* %mclass, align 4, !dbg !5373
  %cmp261 = icmp eq i32 %168, 2, !dbg !5374
  br i1 %cmp261, label %land.lhs.true263, label %if.end329, !dbg !5375

land.lhs.true263:                                 ; preds = %land.lhs.true260
  %169 = load i32, i32* %mode.addr, align 4, !dbg !5376
  %idxprom264 = zext i32 %169 to i64, !dbg !5376
  %arrayidx265 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom264, !dbg !5376
  %170 = load i8, i8* %arrayidx265, align 1, !dbg !5376
  %conv266 = zext i8 %170 to i16, !dbg !5376
  %conv267 = zext i16 %conv266 to i32, !dbg !5376
  %cmp268 = icmp sgt i32 %conv267, 4, !dbg !5377
  br i1 %cmp268, label %land.lhs.true270, label %if.end329, !dbg !5378

land.lhs.true270:                                 ; preds = %land.lhs.true263
  %171 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5379
  %handlers271 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %171, i32 0, i32 4, !dbg !5379
  %172 = load i32, i32* @word_mode, align 4, !dbg !5379
  %idxprom272 = sext i32 %172 to i64, !dbg !5379
  %arrayidx273 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers271, i64 0, i64 %idxprom272, !dbg !5379
  %insn_code274 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx273, i32 0, i32 0, !dbg !5380
  %173 = load i32, i32* %insn_code274, align 4, !dbg !5380
  %cmp275 = icmp ne i32 %173, 2956, !dbg !5381
  br i1 %cmp275, label %if.then277, label %if.end329, !dbg !5382

if.then277:                                       ; preds = %land.lhs.true270
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5383, metadata !DIExpression()), !dbg !5385
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !5386, metadata !DIExpression()), !dbg !5387
  %174 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5388
  %cmp278 = icmp eq %struct.rtx_def* %174, null, !dbg !5390
  br i1 %cmp278, label %if.then286, label %lor.lhs.false280, !dbg !5391

lor.lhs.false280:                                 ; preds = %if.then277
  %175 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5392
  %176 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5393
  %cmp281 = icmp eq %struct.rtx_def* %175, %176, !dbg !5394
  br i1 %cmp281, label %if.then286, label %lor.lhs.false283, !dbg !5395

lor.lhs.false283:                                 ; preds = %lor.lhs.false280
  %177 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5396
  %178 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5397
  %cmp284 = icmp eq %struct.rtx_def* %177, %178, !dbg !5398
  br i1 %cmp284, label %if.then286, label %if.end288, !dbg !5399

if.then286:                                       ; preds = %lor.lhs.false283, %lor.lhs.false280, %if.then277
  %179 = load i32, i32* %mode.addr, align 4, !dbg !5400
  %call287 = call %struct.rtx_def* @gen_reg_rtx(i32 %179), !dbg !5401
  store %struct.rtx_def* %call287, %struct.rtx_def** %target.addr, align 8, !dbg !5402
  br label %if.end288, !dbg !5403

if.end288:                                        ; preds = %if.then286, %lor.lhs.false283
  call void @start_sequence(), !dbg !5404
  store i32 0, i32* %i, align 4, !dbg !5405
  br label %for.cond289, !dbg !5407

for.cond289:                                      ; preds = %for.inc313, %if.end288
  %180 = load i32, i32* %i, align 4, !dbg !5408
  %181 = load i32, i32* %mode.addr, align 4, !dbg !5410
  %idxprom290 = zext i32 %181 to i64, !dbg !5410
  %arrayidx291 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom290, !dbg !5410
  %182 = load i8, i8* %arrayidx291, align 1, !dbg !5410
  %conv292 = zext i8 %182 to i16, !dbg !5410
  %conv293 = zext i16 %conv292 to i32, !dbg !5410
  %mul294 = mul nsw i32 %conv293, 8, !dbg !5410
  %conv295 = trunc i32 %mul294 to i16, !dbg !5410
  %conv296 = zext i16 %conv295 to i32, !dbg !5410
  %div = sdiv i32 %conv296, 32, !dbg !5411
  %cmp297 = icmp slt i32 %180, %div, !dbg !5412
  br i1 %cmp297, label %for.body299, label %for.end314, !dbg !5413

for.body299:                                      ; preds = %for.cond289
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target_piece, metadata !5414, metadata !DIExpression()), !dbg !5416
  %183 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5417
  %184 = load i32, i32* %i, align 4, !dbg !5418
  %185 = load i32, i32* %mode.addr, align 4, !dbg !5419
  %call300 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %183, i32 %184, i32 1, i32 %185), !dbg !5420
  store %struct.rtx_def* %call300, %struct.rtx_def** %target_piece, align 8, !dbg !5416
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5421, metadata !DIExpression()), !dbg !5422
  %186 = load i32, i32* @word_mode, align 4, !dbg !5423
  %187 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5424
  %188 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5425
  %189 = load i32, i32* %i, align 4, !dbg !5426
  %190 = load i32, i32* %mode.addr, align 4, !dbg !5427
  %call301 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %188, i32 %189, i32 %190), !dbg !5428
  %191 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5429
  %192 = load i32, i32* %i, align 4, !dbg !5430
  %193 = load i32, i32* %mode.addr, align 4, !dbg !5431
  %call302 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %191, i32 %192, i32 %193), !dbg !5432
  %194 = load %struct.rtx_def*, %struct.rtx_def** %target_piece, align 8, !dbg !5433
  %195 = load i32, i32* %unsignedp.addr, align 4, !dbg !5434
  %196 = load i32, i32* %next_methods, align 4, !dbg !5435
  %call303 = call %struct.rtx_def* @expand_binop(i32 %186, %struct.optab_d* %187, %struct.rtx_def* %call301, %struct.rtx_def* %call302, %struct.rtx_def* %194, i32 %195, i32 %196), !dbg !5436
  store %struct.rtx_def* %call303, %struct.rtx_def** %x, align 8, !dbg !5422
  %197 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5437
  %cmp304 = icmp eq %struct.rtx_def* %197, null, !dbg !5439
  br i1 %cmp304, label %if.then306, label %if.end307, !dbg !5440

if.then306:                                       ; preds = %for.body299
  br label %for.end314, !dbg !5441

if.end307:                                        ; preds = %for.body299
  %198 = load %struct.rtx_def*, %struct.rtx_def** %target_piece, align 8, !dbg !5442
  %199 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5444
  %cmp308 = icmp ne %struct.rtx_def* %198, %199, !dbg !5445
  br i1 %cmp308, label %if.then310, label %if.end312, !dbg !5446

if.then310:                                       ; preds = %if.end307
  %200 = load %struct.rtx_def*, %struct.rtx_def** %target_piece, align 8, !dbg !5447
  %201 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5448
  %call311 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %200, %struct.rtx_def* %201), !dbg !5449
  br label %if.end312, !dbg !5449

if.end312:                                        ; preds = %if.then310, %if.end307
  br label %for.inc313, !dbg !5450

for.inc313:                                       ; preds = %if.end312
  %202 = load i32, i32* %i, align 4, !dbg !5451
  %inc = add nsw i32 %202, 1, !dbg !5451
  store i32 %inc, i32* %i, align 4, !dbg !5451
  br label %for.cond289, !dbg !5452, !llvm.loop !5453

for.end314:                                       ; preds = %if.then306, %for.cond289
  %call315 = call %struct.rtx_def* @get_insns(), !dbg !5455
  store %struct.rtx_def* %call315, %struct.rtx_def** %insns, align 8, !dbg !5456
  call void @end_sequence(), !dbg !5457
  %203 = load i32, i32* %i, align 4, !dbg !5458
  %204 = load i32, i32* %mode.addr, align 4, !dbg !5460
  %idxprom316 = zext i32 %204 to i64, !dbg !5460
  %arrayidx317 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom316, !dbg !5460
  %205 = load i8, i8* %arrayidx317, align 1, !dbg !5460
  %conv318 = zext i8 %205 to i16, !dbg !5460
  %conv319 = zext i16 %conv318 to i32, !dbg !5460
  %mul320 = mul nsw i32 %conv319, 8, !dbg !5460
  %conv321 = trunc i32 %mul320 to i16, !dbg !5460
  %conv322 = zext i16 %conv321 to i32, !dbg !5460
  %div323 = sdiv i32 %conv322, 32, !dbg !5461
  %cmp324 = icmp eq i32 %203, %div323, !dbg !5462
  br i1 %cmp324, label %if.then326, label %if.end328, !dbg !5463

if.then326:                                       ; preds = %for.end314
  %206 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !5464
  %call327 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %206), !dbg !5466
  %207 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5467
  store %struct.rtx_def* %207, %struct.rtx_def** %retval, align 8, !dbg !5468
  br label %return, !dbg !5468

if.end328:                                        ; preds = %for.end314
  br label %if.end329, !dbg !5469

if.end329:                                        ; preds = %if.end328, %land.lhs.true270, %land.lhs.true263, %land.lhs.true260, %lor.lhs.false257
  %208 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5470
  %cmp330 = icmp eq %struct.optab_d* %208, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), !dbg !5472
  br i1 %cmp330, label %land.lhs.true338, label %lor.lhs.false332, !dbg !5473

lor.lhs.false332:                                 ; preds = %if.end329
  %209 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5474
  %cmp333 = icmp eq %struct.optab_d* %209, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !5475
  br i1 %cmp333, label %land.lhs.true338, label %lor.lhs.false335, !dbg !5476

lor.lhs.false335:                                 ; preds = %lor.lhs.false332
  %210 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5477
  %cmp336 = icmp eq %struct.optab_d* %210, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), !dbg !5478
  br i1 %cmp336, label %land.lhs.true338, label %if.end446, !dbg !5479

land.lhs.true338:                                 ; preds = %lor.lhs.false335, %lor.lhs.false332, %if.end329
  %211 = load i32, i32* %mclass, align 4, !dbg !5480
  %cmp339 = icmp eq i32 %211, 2, !dbg !5481
  br i1 %cmp339, label %land.lhs.true341, label %if.end446, !dbg !5482

land.lhs.true341:                                 ; preds = %land.lhs.true338
  %212 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5483
  %213 = bitcast %struct.rtx_def* %212 to i32*, !dbg !5483
  %bf.load342 = load i32, i32* %213, align 8, !dbg !5483
  %bf.clear343 = and i32 %bf.load342, 65535, !dbg !5483
  %cmp344 = icmp eq i32 %bf.clear343, 30, !dbg !5483
  br i1 %cmp344, label %land.lhs.true350, label %lor.lhs.false346, !dbg !5484

lor.lhs.false346:                                 ; preds = %land.lhs.true341
  %call347 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !5485
  %conv348 = zext i8 %call347 to i32, !dbg !5485
  %tobool349 = icmp ne i32 %conv348, 0, !dbg !5485
  br i1 %tobool349, label %land.lhs.true350, label %if.end446, !dbg !5486

land.lhs.true350:                                 ; preds = %lor.lhs.false346, %land.lhs.true341
  %214 = load i32, i32* %mode.addr, align 4, !dbg !5487
  %idxprom351 = zext i32 %214 to i64, !dbg !5487
  %arrayidx352 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom351, !dbg !5487
  %215 = load i8, i8* %arrayidx352, align 1, !dbg !5487
  %conv353 = zext i8 %215 to i16, !dbg !5487
  %conv354 = zext i16 %conv353 to i32, !dbg !5487
  %cmp355 = icmp eq i32 %conv354, 8, !dbg !5488
  br i1 %cmp355, label %land.lhs.true357, label %if.end446, !dbg !5489

land.lhs.true357:                                 ; preds = %land.lhs.true350
  %216 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5490
  %handlers358 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %216, i32 0, i32 4, !dbg !5490
  %217 = load i32, i32* @word_mode, align 4, !dbg !5490
  %idxprom359 = sext i32 %217 to i64, !dbg !5490
  %arrayidx360 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers358, i64 0, i64 %idxprom359, !dbg !5490
  %insn_code361 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx360, i32 0, i32 0, !dbg !5491
  %218 = load i32, i32* %insn_code361, align 4, !dbg !5491
  %cmp362 = icmp ne i32 %218, 2956, !dbg !5492
  br i1 %cmp362, label %land.lhs.true364, label %if.end446, !dbg !5493

land.lhs.true364:                                 ; preds = %land.lhs.true357
  %219 = load i32, i32* @word_mode, align 4, !dbg !5494
  %idxprom365 = sext i32 %219 to i64, !dbg !5494
  %arrayidx366 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44, i32 4), i64 0, i64 %idxprom365, !dbg !5494
  %insn_code367 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx366, i32 0, i32 0, !dbg !5495
  %220 = load i32, i32* %insn_code367, align 4, !dbg !5495
  %cmp368 = icmp ne i32 %220, 2956, !dbg !5496
  br i1 %cmp368, label %land.lhs.true370, label %if.end446, !dbg !5497

land.lhs.true370:                                 ; preds = %land.lhs.true364
  %221 = load i32, i32* @word_mode, align 4, !dbg !5498
  %idxprom371 = sext i32 %221 to i64, !dbg !5498
  %arrayidx372 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45, i32 4), i64 0, i64 %idxprom371, !dbg !5498
  %insn_code373 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx372, i32 0, i32 0, !dbg !5499
  %222 = load i32, i32* %insn_code373, align 4, !dbg !5499
  %cmp374 = icmp ne i32 %222, 2956, !dbg !5500
  br i1 %cmp374, label %if.then376, label %if.end446, !dbg !5501

if.then376:                                       ; preds = %land.lhs.true370
  call void @llvm.dbg.declare(metadata i64* %shift_mask, metadata !5502, metadata !DIExpression()), !dbg !5504
  call void @llvm.dbg.declare(metadata i64* %double_shift_mask, metadata !5505, metadata !DIExpression()), !dbg !5506
  call void @llvm.dbg.declare(metadata i32* %op1_mode, metadata !5507, metadata !DIExpression()), !dbg !5508
  %223 = load i64 (i32)*, i64 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 53), align 8, !dbg !5509
  %224 = load i32, i32* %mode.addr, align 4, !dbg !5510
  %call377 = call i64 %223(i32 %224), !dbg !5511
  store i64 %call377, i64* %double_shift_mask, align 8, !dbg !5512
  %225 = load i64 (i32)*, i64 (i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 53), align 8, !dbg !5513
  %226 = load i32, i32* @word_mode, align 4, !dbg !5514
  %call378 = call i64 %225(i32 %226), !dbg !5515
  store i64 %call378, i64* %shift_mask, align 8, !dbg !5516
  %227 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5517
  %228 = bitcast %struct.rtx_def* %227 to i32*, !dbg !5517
  %bf.load379 = load i32, i32* %228, align 8, !dbg !5517
  %bf.lshr380 = lshr i32 %bf.load379, 16, !dbg !5517
  %bf.clear381 = and i32 %bf.lshr380, 255, !dbg !5517
  %cmp382 = icmp ne i32 %bf.clear381, 0, !dbg !5518
  br i1 %cmp382, label %cond.true384, label %cond.false388, !dbg !5517

cond.true384:                                     ; preds = %if.then376
  %229 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5519
  %230 = bitcast %struct.rtx_def* %229 to i32*, !dbg !5519
  %bf.load385 = load i32, i32* %230, align 8, !dbg !5519
  %bf.lshr386 = lshr i32 %bf.load385, 16, !dbg !5519
  %bf.clear387 = and i32 %bf.lshr386, 255, !dbg !5519
  br label %cond.end389, !dbg !5517

cond.false388:                                    ; preds = %if.then376
  %231 = load i32, i32* @word_mode, align 4, !dbg !5520
  br label %cond.end389, !dbg !5517

cond.end389:                                      ; preds = %cond.false388, %cond.true384
  %cond390 = phi i32 [ %bf.clear387, %cond.true384 ], [ %231, %cond.false388 ], !dbg !5517
  store i32 %cond390, i32* %op1_mode, align 4, !dbg !5521
  %232 = load i64, i64* %double_shift_mask, align 8, !dbg !5522
  %cmp391 = icmp ugt i64 %232, 0, !dbg !5524
  br i1 %cmp391, label %land.lhs.true393, label %if.end403, !dbg !5525

land.lhs.true393:                                 ; preds = %cond.end389
  %233 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5526
  %234 = bitcast %struct.rtx_def* %233 to i32*, !dbg !5526
  %bf.load394 = load i32, i32* %234, align 8, !dbg !5526
  %bf.clear395 = and i32 %bf.load394, 65535, !dbg !5526
  %cmp396 = icmp eq i32 %bf.clear395, 30, !dbg !5526
  br i1 %cmp396, label %if.then398, label %if.end403, !dbg !5527

if.then398:                                       ; preds = %land.lhs.true393
  %235 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5528
  %u399 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1, !dbg !5528
  %hwint400 = bitcast %union.u* %u399 to [1 x i64]*, !dbg !5528
  %arrayidx401 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint400, i64 0, i64 0, !dbg !5528
  %236 = load i64, i64* %arrayidx401, align 8, !dbg !5528
  %237 = load i64, i64* %double_shift_mask, align 8, !dbg !5528
  %and = and i64 %236, %237, !dbg !5528
  %call402 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and), !dbg !5528
  store %struct.rtx_def* %call402, %struct.rtx_def** %op1.addr, align 8, !dbg !5529
  br label %if.end403, !dbg !5530

if.end403:                                        ; preds = %if.then398, %land.lhs.true393, %cond.end389
  %238 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5531
  %239 = load i32, i32* %op1_mode, align 4, !dbg !5533
  %idxprom404 = sext i32 %239 to i64, !dbg !5533
  %arrayidx405 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom404, !dbg !5533
  %240 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx405, align 8, !dbg !5533
  %cmp406 = icmp eq %struct.rtx_def* %238, %240, !dbg !5534
  br i1 %cmp406, label %if.then408, label %if.end409, !dbg !5535

if.then408:                                       ; preds = %if.end403
  %241 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5536
  store %struct.rtx_def* %241, %struct.rtx_def** %retval, align 8, !dbg !5537
  br label %return, !dbg !5537

if.end409:                                        ; preds = %if.end403
  %242 = load i64, i64* %double_shift_mask, align 8, !dbg !5538
  %cmp410 = icmp eq i64 %242, 0, !dbg !5540
  br i1 %cmp410, label %if.then418, label %lor.lhs.false412, !dbg !5541

lor.lhs.false412:                                 ; preds = %if.end409
  %243 = load i64, i64* %shift_mask, align 8, !dbg !5542
  %cmp413 = icmp eq i64 %243, 31, !dbg !5543
  br i1 %cmp413, label %land.lhs.true415, label %if.end445, !dbg !5544

land.lhs.true415:                                 ; preds = %lor.lhs.false412
  %244 = load i64, i64* %double_shift_mask, align 8, !dbg !5545
  %cmp416 = icmp eq i64 %244, 63, !dbg !5546
  br i1 %cmp416, label %if.then418, label %if.end445, !dbg !5547

if.then418:                                       ; preds = %land.lhs.true415, %if.end409
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns419, metadata !5548, metadata !DIExpression()), !dbg !5550
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_target, metadata !5551, metadata !DIExpression()), !dbg !5552
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_target, metadata !5553, metadata !DIExpression()), !dbg !5554
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_input, metadata !5555, metadata !DIExpression()), !dbg !5556
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_input, metadata !5557, metadata !DIExpression()), !dbg !5558
  call void @llvm.dbg.declare(metadata i32* %left_shift, metadata !5559, metadata !DIExpression()), !dbg !5560
  call void @llvm.dbg.declare(metadata i32* %outof_word, metadata !5561, metadata !DIExpression()), !dbg !5562
  %245 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5563
  %cmp420 = icmp eq %struct.rtx_def* %245, null, !dbg !5565
  br i1 %cmp420, label %if.then428, label %lor.lhs.false422, !dbg !5566

lor.lhs.false422:                                 ; preds = %if.then418
  %246 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5567
  %247 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5568
  %cmp423 = icmp eq %struct.rtx_def* %246, %247, !dbg !5569
  br i1 %cmp423, label %if.then428, label %lor.lhs.false425, !dbg !5570

lor.lhs.false425:                                 ; preds = %lor.lhs.false422
  %248 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5571
  %249 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5572
  %cmp426 = icmp eq %struct.rtx_def* %248, %249, !dbg !5573
  br i1 %cmp426, label %if.then428, label %if.end430, !dbg !5574

if.then428:                                       ; preds = %lor.lhs.false425, %lor.lhs.false422, %if.then418
  %250 = load i32, i32* %mode.addr, align 4, !dbg !5575
  %call429 = call %struct.rtx_def* @gen_reg_rtx(i32 %250), !dbg !5576
  store %struct.rtx_def* %call429, %struct.rtx_def** %target.addr, align 8, !dbg !5577
  br label %if.end430, !dbg !5578

if.end430:                                        ; preds = %if.then428, %lor.lhs.false425
  call void @start_sequence(), !dbg !5579
  %251 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5580
  %cmp431 = icmp eq %struct.optab_d* %251, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !5581
  %conv432 = zext i1 %cmp431 to i32, !dbg !5581
  store i32 %conv432, i32* %left_shift, align 4, !dbg !5582
  %252 = load i32, i32* %left_shift, align 4, !dbg !5583
  %xor = xor i32 %252, 1, !dbg !5584
  store i32 %xor, i32* %outof_word, align 4, !dbg !5585
  %253 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5586
  %254 = load i32, i32* %outof_word, align 4, !dbg !5587
  %255 = load i32, i32* %mode.addr, align 4, !dbg !5588
  %call433 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %253, i32 %254, i32 1, i32 %255), !dbg !5589
  store %struct.rtx_def* %call433, %struct.rtx_def** %outof_target, align 8, !dbg !5590
  %256 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5591
  %257 = load i32, i32* %outof_word, align 4, !dbg !5592
  %sub434 = sub nsw i32 1, %257, !dbg !5593
  %258 = load i32, i32* %mode.addr, align 4, !dbg !5594
  %call435 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %256, i32 %sub434, i32 1, i32 %258), !dbg !5595
  store %struct.rtx_def* %call435, %struct.rtx_def** %into_target, align 8, !dbg !5596
  %259 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5597
  %260 = load i32, i32* %outof_word, align 4, !dbg !5598
  %261 = load i32, i32* %mode.addr, align 4, !dbg !5599
  %call436 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %259, i32 %260, i32 %261), !dbg !5600
  store %struct.rtx_def* %call436, %struct.rtx_def** %outof_input, align 8, !dbg !5601
  %262 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5602
  %263 = load i32, i32* %outof_word, align 4, !dbg !5603
  %sub437 = sub nsw i32 1, %263, !dbg !5604
  %264 = load i32, i32* %mode.addr, align 4, !dbg !5605
  %call438 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %262, i32 %sub437, i32 %264), !dbg !5606
  store %struct.rtx_def* %call438, %struct.rtx_def** %into_input, align 8, !dbg !5607
  %265 = load i32, i32* %op1_mode, align 4, !dbg !5608
  %266 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5610
  %267 = load %struct.rtx_def*, %struct.rtx_def** %outof_input, align 8, !dbg !5611
  %268 = load %struct.rtx_def*, %struct.rtx_def** %into_input, align 8, !dbg !5612
  %269 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5613
  %270 = load %struct.rtx_def*, %struct.rtx_def** %outof_target, align 8, !dbg !5614
  %271 = load %struct.rtx_def*, %struct.rtx_def** %into_target, align 8, !dbg !5615
  %272 = load i32, i32* %unsignedp.addr, align 4, !dbg !5616
  %273 = load i32, i32* %next_methods, align 4, !dbg !5617
  %274 = load i64, i64* %shift_mask, align 8, !dbg !5618
  %call439 = call zeroext i8 @expand_doubleword_shift(i32 %265, %struct.optab_d* %266, %struct.rtx_def* %267, %struct.rtx_def* %268, %struct.rtx_def* %269, %struct.rtx_def* %270, %struct.rtx_def* %271, i32 %272, i32 %273, i64 %274), !dbg !5619
  %tobool440 = icmp ne i8 %call439, 0, !dbg !5619
  br i1 %tobool440, label %if.then441, label %if.end444, !dbg !5620

if.then441:                                       ; preds = %if.end430
  %call442 = call %struct.rtx_def* @get_insns(), !dbg !5621
  store %struct.rtx_def* %call442, %struct.rtx_def** %insns419, align 8, !dbg !5623
  call void @end_sequence(), !dbg !5624
  %275 = load %struct.rtx_def*, %struct.rtx_def** %insns419, align 8, !dbg !5625
  %call443 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %275), !dbg !5626
  %276 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5627
  store %struct.rtx_def* %276, %struct.rtx_def** %retval, align 8, !dbg !5628
  br label %return, !dbg !5628

if.end444:                                        ; preds = %if.end430
  call void @end_sequence(), !dbg !5629
  br label %if.end445, !dbg !5630

if.end445:                                        ; preds = %if.end444, %land.lhs.true415, %lor.lhs.false412
  br label %if.end446, !dbg !5631

if.end446:                                        ; preds = %if.end445, %land.lhs.true370, %land.lhs.true364, %land.lhs.true357, %land.lhs.true350, %lor.lhs.false346, %land.lhs.true338, %lor.lhs.false335
  %277 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5632
  %cmp447 = icmp eq %struct.optab_d* %277, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), !dbg !5634
  br i1 %cmp447, label %land.lhs.true452, label %lor.lhs.false449, !dbg !5635

lor.lhs.false449:                                 ; preds = %if.end446
  %278 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5636
  %cmp450 = icmp eq %struct.optab_d* %278, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48), !dbg !5637
  br i1 %cmp450, label %land.lhs.true452, label %if.end595, !dbg !5638

land.lhs.true452:                                 ; preds = %lor.lhs.false449, %if.end446
  %279 = load i32, i32* %mclass, align 4, !dbg !5639
  %cmp453 = icmp eq i32 %279, 2, !dbg !5640
  br i1 %cmp453, label %land.lhs.true455, label %if.end595, !dbg !5641

land.lhs.true455:                                 ; preds = %land.lhs.true452
  %280 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5642
  %281 = bitcast %struct.rtx_def* %280 to i32*, !dbg !5642
  %bf.load456 = load i32, i32* %281, align 8, !dbg !5642
  %bf.clear457 = and i32 %bf.load456, 65535, !dbg !5642
  %cmp458 = icmp eq i32 %bf.clear457, 30, !dbg !5642
  br i1 %cmp458, label %land.lhs.true460, label %if.end595, !dbg !5643

land.lhs.true460:                                 ; preds = %land.lhs.true455
  %282 = load i32, i32* %mode.addr, align 4, !dbg !5644
  %idxprom461 = zext i32 %282 to i64, !dbg !5644
  %arrayidx462 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom461, !dbg !5644
  %283 = load i8, i8* %arrayidx462, align 1, !dbg !5644
  %conv463 = zext i8 %283 to i16, !dbg !5644
  %conv464 = zext i16 %conv463 to i32, !dbg !5644
  %cmp465 = icmp eq i32 %conv464, 8, !dbg !5645
  br i1 %cmp465, label %land.lhs.true467, label %if.end595, !dbg !5646

land.lhs.true467:                                 ; preds = %land.lhs.true460
  %284 = load i32, i32* @word_mode, align 4, !dbg !5647
  %idxprom468 = sext i32 %284 to i64, !dbg !5647
  %arrayidx469 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44, i32 4), i64 0, i64 %idxprom468, !dbg !5647
  %insn_code470 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx469, i32 0, i32 0, !dbg !5648
  %285 = load i32, i32* %insn_code470, align 4, !dbg !5648
  %cmp471 = icmp ne i32 %285, 2956, !dbg !5649
  br i1 %cmp471, label %land.lhs.true473, label %if.end595, !dbg !5650

land.lhs.true473:                                 ; preds = %land.lhs.true467
  %286 = load i32, i32* @word_mode, align 4, !dbg !5651
  %idxprom474 = sext i32 %286 to i64, !dbg !5651
  %arrayidx475 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45, i32 4), i64 0, i64 %idxprom474, !dbg !5651
  %insn_code476 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx475, i32 0, i32 0, !dbg !5652
  %287 = load i32, i32* %insn_code476, align 4, !dbg !5652
  %cmp477 = icmp ne i32 %287, 2956, !dbg !5653
  br i1 %cmp477, label %if.then479, label %if.end595, !dbg !5654

if.then479:                                       ; preds = %land.lhs.true473
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns480, metadata !5655, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_target481, metadata !5658, metadata !DIExpression()), !dbg !5659
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_target482, metadata !5660, metadata !DIExpression()), !dbg !5661
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_input483, metadata !5662, metadata !DIExpression()), !dbg !5663
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_input484, metadata !5664, metadata !DIExpression()), !dbg !5665
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %inter, metadata !5666, metadata !DIExpression()), !dbg !5667
  call void @llvm.dbg.declare(metadata i32* %shift_count, metadata !5668, metadata !DIExpression()), !dbg !5669
  call void @llvm.dbg.declare(metadata i32* %left_shift485, metadata !5670, metadata !DIExpression()), !dbg !5671
  call void @llvm.dbg.declare(metadata i32* %outof_word486, metadata !5672, metadata !DIExpression()), !dbg !5673
  %288 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5674
  %cmp487 = icmp eq %struct.rtx_def* %288, null, !dbg !5676
  br i1 %cmp487, label %if.then500, label %lor.lhs.false489, !dbg !5677

lor.lhs.false489:                                 ; preds = %if.then479
  %289 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5678
  %290 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5679
  %cmp490 = icmp eq %struct.rtx_def* %289, %290, !dbg !5680
  br i1 %cmp490, label %if.then500, label %lor.lhs.false492, !dbg !5681

lor.lhs.false492:                                 ; preds = %lor.lhs.false489
  %291 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5682
  %292 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5683
  %cmp493 = icmp eq %struct.rtx_def* %291, %292, !dbg !5684
  br i1 %cmp493, label %if.then500, label %lor.lhs.false495, !dbg !5685

lor.lhs.false495:                                 ; preds = %lor.lhs.false492
  %293 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5686
  %294 = bitcast %struct.rtx_def* %293 to i32*, !dbg !5686
  %bf.load496 = load i32, i32* %294, align 8, !dbg !5686
  %bf.clear497 = and i32 %bf.load496, 65535, !dbg !5686
  %cmp498 = icmp eq i32 %bf.clear497, 37, !dbg !5686
  br i1 %cmp498, label %if.end502, label %if.then500, !dbg !5687

if.then500:                                       ; preds = %lor.lhs.false495, %lor.lhs.false492, %lor.lhs.false489, %if.then479
  %295 = load i32, i32* %mode.addr, align 4, !dbg !5688
  %call501 = call %struct.rtx_def* @gen_reg_rtx(i32 %295), !dbg !5689
  store %struct.rtx_def* %call501, %struct.rtx_def** %target.addr, align 8, !dbg !5690
  br label %if.end502, !dbg !5691

if.end502:                                        ; preds = %if.then500, %lor.lhs.false495
  call void @start_sequence(), !dbg !5692
  %296 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5693
  %u503 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %296, i32 0, i32 1, !dbg !5693
  %hwint504 = bitcast %union.u* %u503 to [1 x i64]*, !dbg !5693
  %arrayidx505 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint504, i64 0, i64 0, !dbg !5693
  %297 = load i64, i64* %arrayidx505, align 8, !dbg !5693
  %conv506 = trunc i64 %297 to i32, !dbg !5693
  store i32 %conv506, i32* %shift_count, align 4, !dbg !5694
  %298 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5695
  %cmp507 = icmp eq %struct.optab_d* %298, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), !dbg !5696
  %conv508 = zext i1 %cmp507 to i32, !dbg !5696
  store i32 %conv508, i32* %left_shift485, align 4, !dbg !5697
  %299 = load i32, i32* %left_shift485, align 4, !dbg !5698
  %xor509 = xor i32 %299, 1, !dbg !5699
  store i32 %xor509, i32* %outof_word486, align 4, !dbg !5700
  %300 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5701
  %301 = load i32, i32* %outof_word486, align 4, !dbg !5702
  %302 = load i32, i32* %mode.addr, align 4, !dbg !5703
  %call510 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %300, i32 %301, i32 1, i32 %302), !dbg !5704
  store %struct.rtx_def* %call510, %struct.rtx_def** %outof_target482, align 8, !dbg !5705
  %303 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5706
  %304 = load i32, i32* %outof_word486, align 4, !dbg !5707
  %sub511 = sub nsw i32 1, %304, !dbg !5708
  %305 = load i32, i32* %mode.addr, align 4, !dbg !5709
  %call512 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %303, i32 %sub511, i32 1, i32 %305), !dbg !5710
  store %struct.rtx_def* %call512, %struct.rtx_def** %into_target481, align 8, !dbg !5711
  %306 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5712
  %307 = load i32, i32* %outof_word486, align 4, !dbg !5713
  %308 = load i32, i32* %mode.addr, align 4, !dbg !5714
  %call513 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %306, i32 %307, i32 %308), !dbg !5715
  store %struct.rtx_def* %call513, %struct.rtx_def** %outof_input484, align 8, !dbg !5716
  %309 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5717
  %310 = load i32, i32* %outof_word486, align 4, !dbg !5718
  %sub514 = sub nsw i32 1, %310, !dbg !5719
  %311 = load i32, i32* %mode.addr, align 4, !dbg !5720
  %call515 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %309, i32 %sub514, i32 %311), !dbg !5721
  store %struct.rtx_def* %call515, %struct.rtx_def** %into_input483, align 8, !dbg !5722
  %312 = load i32, i32* %shift_count, align 4, !dbg !5723
  %cmp516 = icmp eq i32 %312, 32, !dbg !5725
  br i1 %cmp516, label %if.then518, label %if.else521, !dbg !5726

if.then518:                                       ; preds = %if.end502
  %313 = load %struct.rtx_def*, %struct.rtx_def** %outof_target482, align 8, !dbg !5727
  %314 = load %struct.rtx_def*, %struct.rtx_def** %into_input483, align 8, !dbg !5729
  %call519 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %313, %struct.rtx_def* %314), !dbg !5730
  %315 = load %struct.rtx_def*, %struct.rtx_def** %into_target481, align 8, !dbg !5731
  %316 = load %struct.rtx_def*, %struct.rtx_def** %outof_input484, align 8, !dbg !5732
  %call520 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %315, %struct.rtx_def* %316), !dbg !5733
  %317 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5734
  store %struct.rtx_def* %317, %struct.rtx_def** %inter, align 8, !dbg !5735
  br label %if.end588, !dbg !5736

if.else521:                                       ; preds = %if.end502
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_temp1, metadata !5737, metadata !DIExpression()), !dbg !5739
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_temp2, metadata !5740, metadata !DIExpression()), !dbg !5741
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_temp1, metadata !5742, metadata !DIExpression()), !dbg !5743
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_temp2, metadata !5744, metadata !DIExpression()), !dbg !5745
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first_shift_count, metadata !5746, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %second_shift_count, metadata !5748, metadata !DIExpression()), !dbg !5749
  call void @llvm.dbg.declare(metadata %struct.optab_d** %reverse_unsigned_shift, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata %struct.optab_d** %unsigned_shift, metadata !5752, metadata !DIExpression()), !dbg !5753
  %318 = load i32, i32* %left_shift485, align 4, !dbg !5754
  %319 = load i32, i32* %shift_count, align 4, !dbg !5755
  %cmp522 = icmp slt i32 %319, 32, !dbg !5756
  %conv523 = zext i1 %cmp522 to i32, !dbg !5756
  %xor524 = xor i32 %318, %conv523, !dbg !5757
  %tobool525 = icmp ne i32 %xor524, 0, !dbg !5754
  %320 = zext i1 %tobool525 to i64, !dbg !5754
  %cond526 = select i1 %tobool525, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !5754
  store %struct.optab_d* %cond526, %struct.optab_d** %reverse_unsigned_shift, align 8, !dbg !5758
  %321 = load i32, i32* %left_shift485, align 4, !dbg !5759
  %322 = load i32, i32* %shift_count, align 4, !dbg !5760
  %cmp527 = icmp slt i32 %322, 32, !dbg !5761
  %conv528 = zext i1 %cmp527 to i32, !dbg !5761
  %xor529 = xor i32 %321, %conv528, !dbg !5762
  %tobool530 = icmp ne i32 %xor529, 0, !dbg !5759
  %323 = zext i1 %tobool530 to i64, !dbg !5759
  %cond531 = select i1 %tobool530, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), !dbg !5759
  store %struct.optab_d* %cond531, %struct.optab_d** %unsigned_shift, align 8, !dbg !5763
  %324 = load i32, i32* %shift_count, align 4, !dbg !5764
  %cmp532 = icmp sgt i32 %324, 32, !dbg !5766
  br i1 %cmp532, label %if.then534, label %if.else541, !dbg !5767

if.then534:                                       ; preds = %if.else521
  %325 = load i32, i32* %shift_count, align 4, !dbg !5768
  %sub535 = sub nsw i32 %325, 32, !dbg !5768
  %conv536 = sext i32 %sub535 to i64, !dbg !5768
  %call537 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv536), !dbg !5768
  store %struct.rtx_def* %call537, %struct.rtx_def** %first_shift_count, align 8, !dbg !5770
  %326 = load i32, i32* %shift_count, align 4, !dbg !5771
  %sub538 = sub nsw i32 64, %326, !dbg !5771
  %conv539 = sext i32 %sub538 to i64, !dbg !5771
  %call540 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv539), !dbg !5771
  store %struct.rtx_def* %call540, %struct.rtx_def** %second_shift_count, align 8, !dbg !5772
  br label %if.end547, !dbg !5773

if.else541:                                       ; preds = %if.else521
  %327 = load i32, i32* %shift_count, align 4, !dbg !5774
  %sub542 = sub nsw i32 32, %327, !dbg !5774
  %conv543 = sext i32 %sub542 to i64, !dbg !5774
  %call544 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv543), !dbg !5774
  store %struct.rtx_def* %call544, %struct.rtx_def** %first_shift_count, align 8, !dbg !5776
  %328 = load i32, i32* %shift_count, align 4, !dbg !5777
  %conv545 = sext i32 %328 to i64, !dbg !5777
  %call546 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv545), !dbg !5777
  store %struct.rtx_def* %call546, %struct.rtx_def** %second_shift_count, align 8, !dbg !5778
  br label %if.end547

if.end547:                                        ; preds = %if.else541, %if.then534
  %329 = load i32, i32* @word_mode, align 4, !dbg !5779
  %330 = load %struct.optab_d*, %struct.optab_d** %unsigned_shift, align 8, !dbg !5780
  %331 = load %struct.rtx_def*, %struct.rtx_def** %outof_input484, align 8, !dbg !5781
  %332 = load %struct.rtx_def*, %struct.rtx_def** %first_shift_count, align 8, !dbg !5782
  %333 = load i32, i32* %unsignedp.addr, align 4, !dbg !5783
  %334 = load i32, i32* %next_methods, align 4, !dbg !5784
  %call548 = call %struct.rtx_def* @expand_binop(i32 %329, %struct.optab_d* %330, %struct.rtx_def* %331, %struct.rtx_def* %332, %struct.rtx_def* null, i32 %333, i32 %334), !dbg !5785
  store %struct.rtx_def* %call548, %struct.rtx_def** %into_temp1, align 8, !dbg !5786
  %335 = load i32, i32* @word_mode, align 4, !dbg !5787
  %336 = load %struct.optab_d*, %struct.optab_d** %reverse_unsigned_shift, align 8, !dbg !5788
  %337 = load %struct.rtx_def*, %struct.rtx_def** %into_input483, align 8, !dbg !5789
  %338 = load %struct.rtx_def*, %struct.rtx_def** %second_shift_count, align 8, !dbg !5790
  %339 = load i32, i32* %unsignedp.addr, align 4, !dbg !5791
  %340 = load i32, i32* %next_methods, align 4, !dbg !5792
  %call549 = call %struct.rtx_def* @expand_binop(i32 %335, %struct.optab_d* %336, %struct.rtx_def* %337, %struct.rtx_def* %338, %struct.rtx_def* null, i32 %339, i32 %340), !dbg !5793
  store %struct.rtx_def* %call549, %struct.rtx_def** %into_temp2, align 8, !dbg !5794
  %341 = load %struct.rtx_def*, %struct.rtx_def** %into_temp1, align 8, !dbg !5795
  %cmp550 = icmp ne %struct.rtx_def* %341, null, !dbg !5797
  br i1 %cmp550, label %land.lhs.true552, label %if.else557, !dbg !5798

land.lhs.true552:                                 ; preds = %if.end547
  %342 = load %struct.rtx_def*, %struct.rtx_def** %into_temp2, align 8, !dbg !5799
  %cmp553 = icmp ne %struct.rtx_def* %342, null, !dbg !5800
  br i1 %cmp553, label %if.then555, label %if.else557, !dbg !5801

if.then555:                                       ; preds = %land.lhs.true552
  %343 = load i32, i32* @word_mode, align 4, !dbg !5802
  %344 = load %struct.rtx_def*, %struct.rtx_def** %into_temp1, align 8, !dbg !5803
  %345 = load %struct.rtx_def*, %struct.rtx_def** %into_temp2, align 8, !dbg !5804
  %346 = load %struct.rtx_def*, %struct.rtx_def** %into_target481, align 8, !dbg !5805
  %347 = load i32, i32* %unsignedp.addr, align 4, !dbg !5806
  %348 = load i32, i32* %next_methods, align 4, !dbg !5807
  %call556 = call %struct.rtx_def* @expand_binop(i32 %343, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %344, %struct.rtx_def* %345, %struct.rtx_def* %346, i32 %347, i32 %348), !dbg !5808
  store %struct.rtx_def* %call556, %struct.rtx_def** %inter, align 8, !dbg !5809
  br label %if.end558, !dbg !5810

if.else557:                                       ; preds = %land.lhs.true552, %if.end547
  store %struct.rtx_def* null, %struct.rtx_def** %inter, align 8, !dbg !5811
  br label %if.end558

if.end558:                                        ; preds = %if.else557, %if.then555
  %349 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5812
  %cmp559 = icmp ne %struct.rtx_def* %349, null, !dbg !5814
  br i1 %cmp559, label %land.lhs.true561, label %if.end566, !dbg !5815

land.lhs.true561:                                 ; preds = %if.end558
  %350 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5816
  %351 = load %struct.rtx_def*, %struct.rtx_def** %into_target481, align 8, !dbg !5817
  %cmp562 = icmp ne %struct.rtx_def* %350, %351, !dbg !5818
  br i1 %cmp562, label %if.then564, label %if.end566, !dbg !5819

if.then564:                                       ; preds = %land.lhs.true561
  %352 = load %struct.rtx_def*, %struct.rtx_def** %into_target481, align 8, !dbg !5820
  %353 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5821
  %call565 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %352, %struct.rtx_def* %353), !dbg !5822
  br label %if.end566, !dbg !5822

if.end566:                                        ; preds = %if.then564, %land.lhs.true561, %if.end558
  %354 = load i32, i32* @word_mode, align 4, !dbg !5823
  %355 = load %struct.optab_d*, %struct.optab_d** %unsigned_shift, align 8, !dbg !5824
  %356 = load %struct.rtx_def*, %struct.rtx_def** %into_input483, align 8, !dbg !5825
  %357 = load %struct.rtx_def*, %struct.rtx_def** %first_shift_count, align 8, !dbg !5826
  %358 = load i32, i32* %unsignedp.addr, align 4, !dbg !5827
  %359 = load i32, i32* %next_methods, align 4, !dbg !5828
  %call567 = call %struct.rtx_def* @expand_binop(i32 %354, %struct.optab_d* %355, %struct.rtx_def* %356, %struct.rtx_def* %357, %struct.rtx_def* null, i32 %358, i32 %359), !dbg !5829
  store %struct.rtx_def* %call567, %struct.rtx_def** %outof_temp1, align 8, !dbg !5830
  %360 = load i32, i32* @word_mode, align 4, !dbg !5831
  %361 = load %struct.optab_d*, %struct.optab_d** %reverse_unsigned_shift, align 8, !dbg !5832
  %362 = load %struct.rtx_def*, %struct.rtx_def** %outof_input484, align 8, !dbg !5833
  %363 = load %struct.rtx_def*, %struct.rtx_def** %second_shift_count, align 8, !dbg !5834
  %364 = load i32, i32* %unsignedp.addr, align 4, !dbg !5835
  %365 = load i32, i32* %next_methods, align 4, !dbg !5836
  %call568 = call %struct.rtx_def* @expand_binop(i32 %360, %struct.optab_d* %361, %struct.rtx_def* %362, %struct.rtx_def* %363, %struct.rtx_def* null, i32 %364, i32 %365), !dbg !5837
  store %struct.rtx_def* %call568, %struct.rtx_def** %outof_temp2, align 8, !dbg !5838
  %366 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5839
  %cmp569 = icmp ne %struct.rtx_def* %366, null, !dbg !5841
  br i1 %cmp569, label %land.lhs.true571, label %if.end579, !dbg !5842

land.lhs.true571:                                 ; preds = %if.end566
  %367 = load %struct.rtx_def*, %struct.rtx_def** %outof_temp1, align 8, !dbg !5843
  %cmp572 = icmp ne %struct.rtx_def* %367, null, !dbg !5844
  br i1 %cmp572, label %land.lhs.true574, label %if.end579, !dbg !5845

land.lhs.true574:                                 ; preds = %land.lhs.true571
  %368 = load %struct.rtx_def*, %struct.rtx_def** %outof_temp2, align 8, !dbg !5846
  %cmp575 = icmp ne %struct.rtx_def* %368, null, !dbg !5847
  br i1 %cmp575, label %if.then577, label %if.end579, !dbg !5848

if.then577:                                       ; preds = %land.lhs.true574
  %369 = load i32, i32* @word_mode, align 4, !dbg !5849
  %370 = load %struct.rtx_def*, %struct.rtx_def** %outof_temp1, align 8, !dbg !5850
  %371 = load %struct.rtx_def*, %struct.rtx_def** %outof_temp2, align 8, !dbg !5851
  %372 = load %struct.rtx_def*, %struct.rtx_def** %outof_target482, align 8, !dbg !5852
  %373 = load i32, i32* %unsignedp.addr, align 4, !dbg !5853
  %374 = load i32, i32* %next_methods, align 4, !dbg !5854
  %call578 = call %struct.rtx_def* @expand_binop(i32 %369, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %370, %struct.rtx_def* %371, %struct.rtx_def* %372, i32 %373, i32 %374), !dbg !5855
  store %struct.rtx_def* %call578, %struct.rtx_def** %inter, align 8, !dbg !5856
  br label %if.end579, !dbg !5857

if.end579:                                        ; preds = %if.then577, %land.lhs.true574, %land.lhs.true571, %if.end566
  %375 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5858
  %cmp580 = icmp ne %struct.rtx_def* %375, null, !dbg !5860
  br i1 %cmp580, label %land.lhs.true582, label %if.end587, !dbg !5861

land.lhs.true582:                                 ; preds = %if.end579
  %376 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5862
  %377 = load %struct.rtx_def*, %struct.rtx_def** %outof_target482, align 8, !dbg !5863
  %cmp583 = icmp ne %struct.rtx_def* %376, %377, !dbg !5864
  br i1 %cmp583, label %if.then585, label %if.end587, !dbg !5865

if.then585:                                       ; preds = %land.lhs.true582
  %378 = load %struct.rtx_def*, %struct.rtx_def** %outof_target482, align 8, !dbg !5866
  %379 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5867
  %call586 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %378, %struct.rtx_def* %379), !dbg !5868
  br label %if.end587, !dbg !5868

if.end587:                                        ; preds = %if.then585, %land.lhs.true582, %if.end579
  br label %if.end588

if.end588:                                        ; preds = %if.end587, %if.then518
  %call589 = call %struct.rtx_def* @get_insns(), !dbg !5869
  store %struct.rtx_def* %call589, %struct.rtx_def** %insns480, align 8, !dbg !5870
  call void @end_sequence(), !dbg !5871
  %380 = load %struct.rtx_def*, %struct.rtx_def** %inter, align 8, !dbg !5872
  %cmp590 = icmp ne %struct.rtx_def* %380, null, !dbg !5874
  br i1 %cmp590, label %if.then592, label %if.end594, !dbg !5875

if.then592:                                       ; preds = %if.end588
  %381 = load %struct.rtx_def*, %struct.rtx_def** %insns480, align 8, !dbg !5876
  %call593 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %381), !dbg !5878
  %382 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5879
  store %struct.rtx_def* %382, %struct.rtx_def** %retval, align 8, !dbg !5880
  br label %return, !dbg !5880

if.end594:                                        ; preds = %if.end588
  br label %if.end595, !dbg !5881

if.end595:                                        ; preds = %if.end594, %land.lhs.true473, %land.lhs.true467, %land.lhs.true460, %land.lhs.true455, %land.lhs.true452, %lor.lhs.false449
  %383 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5882
  %cmp596 = icmp eq %struct.optab_d* %383, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !5884
  br i1 %cmp596, label %land.lhs.true601, label %lor.lhs.false598, !dbg !5885

lor.lhs.false598:                                 ; preds = %if.end595
  %384 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5886
  %cmp599 = icmp eq %struct.optab_d* %384, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !5887
  br i1 %cmp599, label %land.lhs.true601, label %if.end742, !dbg !5888

land.lhs.true601:                                 ; preds = %lor.lhs.false598, %if.end595
  %385 = load i32, i32* %mclass, align 4, !dbg !5889
  %cmp602 = icmp eq i32 %385, 2, !dbg !5890
  br i1 %cmp602, label %land.lhs.true604, label %if.end742, !dbg !5891

land.lhs.true604:                                 ; preds = %land.lhs.true601
  %386 = load i32, i32* %mode.addr, align 4, !dbg !5892
  %idxprom605 = zext i32 %386 to i64, !dbg !5892
  %arrayidx606 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom605, !dbg !5892
  %387 = load i8, i8* %arrayidx606, align 1, !dbg !5892
  %conv607 = zext i8 %387 to i16, !dbg !5892
  %conv608 = zext i16 %conv607 to i32, !dbg !5892
  %cmp609 = icmp sge i32 %conv608, 8, !dbg !5893
  br i1 %cmp609, label %land.lhs.true611, label %if.end742, !dbg !5894

land.lhs.true611:                                 ; preds = %land.lhs.true604
  %388 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5895
  %handlers612 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %388, i32 0, i32 4, !dbg !5895
  %389 = load i32, i32* @word_mode, align 4, !dbg !5895
  %idxprom613 = sext i32 %389 to i64, !dbg !5895
  %arrayidx614 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers612, i64 0, i64 %idxprom613, !dbg !5895
  %insn_code615 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx614, i32 0, i32 0, !dbg !5896
  %390 = load i32, i32* %insn_code615, align 4, !dbg !5896
  %cmp616 = icmp ne i32 %390, 2956, !dbg !5897
  br i1 %cmp616, label %if.then618, label %if.end742, !dbg !5898

if.then618:                                       ; preds = %land.lhs.true611
  call void @llvm.dbg.declare(metadata i32* %i619, metadata !5899, metadata !DIExpression()), !dbg !5901
  call void @llvm.dbg.declare(metadata %struct.optab_d** %otheroptab620, metadata !5902, metadata !DIExpression()), !dbg !5903
  %391 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5904
  %cmp621 = icmp eq %struct.optab_d* %391, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !5905
  %392 = zext i1 %cmp621 to i64, !dbg !5904
  %cond623 = select i1 %cmp621, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !5904
  store %struct.optab_d* %cond623, %struct.optab_d** %otheroptab620, align 8, !dbg !5903
  call void @llvm.dbg.declare(metadata i32* %nwords, metadata !5906, metadata !DIExpression()), !dbg !5908
  %393 = load i32, i32* %mode.addr, align 4, !dbg !5909
  %idxprom624 = zext i32 %393 to i64, !dbg !5909
  %arrayidx625 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom624, !dbg !5909
  %394 = load i8, i8* %arrayidx625, align 1, !dbg !5909
  %conv626 = zext i8 %394 to i16, !dbg !5909
  %conv627 = zext i16 %conv626 to i32, !dbg !5909
  %mul628 = mul nsw i32 %conv627, 8, !dbg !5909
  %conv629 = trunc i32 %mul628 to i16, !dbg !5909
  %conv630 = zext i16 %conv629 to i32, !dbg !5909
  %div631 = sdiv i32 %conv630, 32, !dbg !5910
  store i32 %div631, i32* %nwords, align 4, !dbg !5908
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %carry_in, metadata !5911, metadata !DIExpression()), !dbg !5912
  store %struct.rtx_def* null, %struct.rtx_def** %carry_in, align 8, !dbg !5912
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %carry_out, metadata !5913, metadata !DIExpression()), !dbg !5914
  store %struct.rtx_def* null, %struct.rtx_def** %carry_out, align 8, !dbg !5914
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0632, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1633, metadata !5917, metadata !DIExpression()), !dbg !5918
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xtarget, metadata !5919, metadata !DIExpression()), !dbg !5920
  call void @llvm.dbg.declare(metadata i32* %normalizep, metadata !5921, metadata !DIExpression()), !dbg !5922
  store i32 1, i32* %normalizep, align 4, !dbg !5922
  %395 = load i32, i32* %mode.addr, align 4, !dbg !5923
  %396 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !5924
  %call634 = call %struct.rtx_def* @force_reg(i32 %395, %struct.rtx_def* %396), !dbg !5925
  store %struct.rtx_def* %call634, %struct.rtx_def** %xop0632, align 8, !dbg !5926
  %397 = load i32, i32* %mode.addr, align 4, !dbg !5927
  %398 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !5928
  %call635 = call %struct.rtx_def* @force_reg(i32 %397, %struct.rtx_def* %398), !dbg !5929
  store %struct.rtx_def* %call635, %struct.rtx_def** %xop1633, align 8, !dbg !5930
  %399 = load i32, i32* %mode.addr, align 4, !dbg !5931
  %call636 = call %struct.rtx_def* @gen_reg_rtx(i32 %399), !dbg !5932
  store %struct.rtx_def* %call636, %struct.rtx_def** %xtarget, align 8, !dbg !5933
  %400 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5934
  %cmp637 = icmp eq %struct.rtx_def* %400, null, !dbg !5936
  br i1 %cmp637, label %if.then644, label %lor.lhs.false639, !dbg !5937

lor.lhs.false639:                                 ; preds = %if.then618
  %401 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5938
  %402 = bitcast %struct.rtx_def* %401 to i32*, !dbg !5938
  %bf.load640 = load i32, i32* %402, align 8, !dbg !5938
  %bf.clear641 = and i32 %bf.load640, 65535, !dbg !5938
  %cmp642 = icmp eq i32 %bf.clear641, 37, !dbg !5938
  br i1 %cmp642, label %if.end645, label %if.then644, !dbg !5939

if.then644:                                       ; preds = %lor.lhs.false639, %if.then618
  %403 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5940
  store %struct.rtx_def* %403, %struct.rtx_def** %target.addr, align 8, !dbg !5941
  br label %if.end645, !dbg !5942

if.end645:                                        ; preds = %if.then644, %lor.lhs.false639
  %404 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5943
  %405 = bitcast %struct.rtx_def* %404 to i32*, !dbg !5943
  %bf.load646 = load i32, i32* %405, align 8, !dbg !5943
  %bf.clear647 = and i32 %bf.load646, 65535, !dbg !5943
  %cmp648 = icmp eq i32 %bf.clear647, 37, !dbg !5943
  br i1 %cmp648, label %if.then650, label %if.end652, !dbg !5945

if.then650:                                       ; preds = %if.end645
  %406 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5946
  %call651 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %406), !dbg !5947
  br label %if.end652, !dbg !5947

if.end652:                                        ; preds = %if.then650, %if.end645
  store i32 0, i32* %i619, align 4, !dbg !5948
  br label %for.cond653, !dbg !5950

for.cond653:                                      ; preds = %for.inc709, %if.end652
  %407 = load i32, i32* %i619, align 4, !dbg !5951
  %408 = load i32, i32* %nwords, align 4, !dbg !5953
  %cmp654 = icmp ult i32 %407, %408, !dbg !5954
  br i1 %cmp654, label %for.body656, label %for.end711, !dbg !5955

for.body656:                                      ; preds = %for.cond653
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5956, metadata !DIExpression()), !dbg !5958
  %409 = load i32, i32* %i619, align 4, !dbg !5959
  store i32 %409, i32* %index, align 4, !dbg !5958
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target_piece657, metadata !5960, metadata !DIExpression()), !dbg !5961
  %410 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !5962
  %411 = load i32, i32* %index, align 4, !dbg !5963
  %412 = load i32, i32* %mode.addr, align 4, !dbg !5964
  %call658 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %410, i32 %411, i32 1, i32 %412), !dbg !5965
  store %struct.rtx_def* %call658, %struct.rtx_def** %target_piece657, align 8, !dbg !5961
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0_piece, metadata !5966, metadata !DIExpression()), !dbg !5967
  %413 = load %struct.rtx_def*, %struct.rtx_def** %xop0632, align 8, !dbg !5968
  %414 = load i32, i32* %index, align 4, !dbg !5969
  %415 = load i32, i32* %mode.addr, align 4, !dbg !5970
  %call659 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %413, i32 %414, i32 %415), !dbg !5971
  store %struct.rtx_def* %call659, %struct.rtx_def** %op0_piece, align 8, !dbg !5967
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1_piece, metadata !5972, metadata !DIExpression()), !dbg !5973
  %416 = load %struct.rtx_def*, %struct.rtx_def** %xop1633, align 8, !dbg !5974
  %417 = load i32, i32* %index, align 4, !dbg !5975
  %418 = load i32, i32* %mode.addr, align 4, !dbg !5976
  %call660 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %416, i32 %417, i32 %418), !dbg !5977
  store %struct.rtx_def* %call660, %struct.rtx_def** %op1_piece, align 8, !dbg !5973
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x661, metadata !5978, metadata !DIExpression()), !dbg !5979
  %419 = load i32, i32* @word_mode, align 4, !dbg !5980
  %420 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !5981
  %421 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !5982
  %422 = load %struct.rtx_def*, %struct.rtx_def** %op1_piece, align 8, !dbg !5983
  %423 = load %struct.rtx_def*, %struct.rtx_def** %target_piece657, align 8, !dbg !5984
  %424 = load i32, i32* %unsignedp.addr, align 4, !dbg !5985
  %425 = load i32, i32* %next_methods, align 4, !dbg !5986
  %call662 = call %struct.rtx_def* @expand_binop(i32 %419, %struct.optab_d* %420, %struct.rtx_def* %421, %struct.rtx_def* %422, %struct.rtx_def* %423, i32 %424, i32 %425), !dbg !5987
  store %struct.rtx_def* %call662, %struct.rtx_def** %x661, align 8, !dbg !5988
  %426 = load %struct.rtx_def*, %struct.rtx_def** %x661, align 8, !dbg !5989
  %cmp663 = icmp eq %struct.rtx_def* %426, null, !dbg !5991
  br i1 %cmp663, label %if.then665, label %if.end666, !dbg !5992

if.then665:                                       ; preds = %for.body656
  br label %for.end711, !dbg !5993

if.end666:                                        ; preds = %for.body656
  %427 = load i32, i32* %i619, align 4, !dbg !5994
  %add = add i32 %427, 1, !dbg !5996
  %428 = load i32, i32* %nwords, align 4, !dbg !5997
  %cmp667 = icmp ult i32 %add, %428, !dbg !5998
  br i1 %cmp667, label %if.then669, label %if.end675, !dbg !5999

if.then669:                                       ; preds = %if.end666
  %429 = load i32, i32* @word_mode, align 4, !dbg !6000
  %call670 = call %struct.rtx_def* @gen_reg_rtx(i32 %429), !dbg !6002
  store %struct.rtx_def* %call670, %struct.rtx_def** %carry_out, align 8, !dbg !6003
  %430 = load %struct.rtx_def*, %struct.rtx_def** %carry_out, align 8, !dbg !6004
  %431 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6005
  %cmp671 = icmp eq %struct.optab_d* %431, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !6006
  %432 = zext i1 %cmp671 to i64, !dbg !6005
  %cond673 = select i1 %cmp671, i32 85, i32 83, !dbg !6005
  %433 = load %struct.rtx_def*, %struct.rtx_def** %x661, align 8, !dbg !6007
  %434 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !6008
  %435 = load i32, i32* @word_mode, align 4, !dbg !6009
  %436 = load i32, i32* %normalizep, align 4, !dbg !6010
  %call674 = call %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def* %430, i32 %cond673, %struct.rtx_def* %433, %struct.rtx_def* %434, i32 %435, i32 1, i32 %436), !dbg !6011
  store %struct.rtx_def* %call674, %struct.rtx_def** %carry_out, align 8, !dbg !6012
  br label %if.end675, !dbg !6013

if.end675:                                        ; preds = %if.then669, %if.end666
  %437 = load i32, i32* %i619, align 4, !dbg !6014
  %cmp676 = icmp ugt i32 %437, 0, !dbg !6016
  br i1 %cmp676, label %if.then678, label %if.else702, !dbg !6017

if.then678:                                       ; preds = %if.end675
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newx, metadata !6018, metadata !DIExpression()), !dbg !6020
  %438 = load i32, i32* @word_mode, align 4, !dbg !6021
  %439 = load i32, i32* %normalizep, align 4, !dbg !6022
  %cmp679 = icmp eq i32 %439, 1, !dbg !6023
  br i1 %cmp679, label %cond.true681, label %cond.false682, !dbg !6022

cond.true681:                                     ; preds = %if.then678
  %440 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6024
  br label %cond.end683, !dbg !6022

cond.false682:                                    ; preds = %if.then678
  %441 = load %struct.optab_d*, %struct.optab_d** %otheroptab620, align 8, !dbg !6025
  br label %cond.end683, !dbg !6022

cond.end683:                                      ; preds = %cond.false682, %cond.true681
  %cond684 = phi %struct.optab_d* [ %440, %cond.true681 ], [ %441, %cond.false682 ], !dbg !6022
  %442 = load %struct.rtx_def*, %struct.rtx_def** %x661, align 8, !dbg !6026
  %443 = load %struct.rtx_def*, %struct.rtx_def** %carry_in, align 8, !dbg !6027
  %444 = load i32, i32* %next_methods, align 4, !dbg !6028
  %call685 = call %struct.rtx_def* @expand_binop(i32 %438, %struct.optab_d* %cond684, %struct.rtx_def* %442, %struct.rtx_def* %443, %struct.rtx_def* null, i32 1, i32 %444), !dbg !6029
  store %struct.rtx_def* %call685, %struct.rtx_def** %newx, align 8, !dbg !6030
  %445 = load i32, i32* %i619, align 4, !dbg !6031
  %add686 = add i32 %445, 1, !dbg !6033
  %446 = load i32, i32* %nwords, align 4, !dbg !6034
  %cmp687 = icmp ult i32 %add686, %446, !dbg !6035
  br i1 %cmp687, label %if.then689, label %if.end700, !dbg !6036

if.then689:                                       ; preds = %cond.end683
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %carry_tmp, metadata !6037, metadata !DIExpression()), !dbg !6039
  %447 = load i32, i32* @word_mode, align 4, !dbg !6040
  %call690 = call %struct.rtx_def* @gen_reg_rtx(i32 %447), !dbg !6041
  store %struct.rtx_def* %call690, %struct.rtx_def** %carry_tmp, align 8, !dbg !6039
  %448 = load %struct.rtx_def*, %struct.rtx_def** %carry_tmp, align 8, !dbg !6042
  %449 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6043
  %cmp691 = icmp eq %struct.optab_d* %449, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !6044
  %450 = zext i1 %cmp691 to i64, !dbg !6043
  %cond693 = select i1 %cmp691, i32 85, i32 83, !dbg !6043
  %451 = load %struct.rtx_def*, %struct.rtx_def** %newx, align 8, !dbg !6045
  %452 = load %struct.rtx_def*, %struct.rtx_def** %x661, align 8, !dbg !6046
  %453 = load i32, i32* @word_mode, align 4, !dbg !6047
  %454 = load i32, i32* %normalizep, align 4, !dbg !6048
  %call694 = call %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def* %448, i32 %cond693, %struct.rtx_def* %451, %struct.rtx_def* %452, i32 %453, i32 1, i32 %454), !dbg !6049
  store %struct.rtx_def* %call694, %struct.rtx_def** %carry_tmp, align 8, !dbg !6050
  %455 = load i32, i32* @word_mode, align 4, !dbg !6051
  %456 = load %struct.rtx_def*, %struct.rtx_def** %carry_out, align 8, !dbg !6052
  %457 = load %struct.rtx_def*, %struct.rtx_def** %carry_tmp, align 8, !dbg !6053
  %458 = load %struct.rtx_def*, %struct.rtx_def** %carry_out, align 8, !dbg !6054
  %459 = load i32, i32* %next_methods, align 4, !dbg !6055
  %call695 = call %struct.rtx_def* @expand_binop(i32 %455, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %456, %struct.rtx_def* %457, %struct.rtx_def* %458, i32 0, i32 %459), !dbg !6056
  store %struct.rtx_def* %call695, %struct.rtx_def** %carry_out, align 8, !dbg !6057
  %460 = load %struct.rtx_def*, %struct.rtx_def** %carry_out, align 8, !dbg !6058
  %cmp696 = icmp eq %struct.rtx_def* %460, null, !dbg !6060
  br i1 %cmp696, label %if.then698, label %if.end699, !dbg !6061

if.then698:                                       ; preds = %if.then689
  br label %for.end711, !dbg !6062

if.end699:                                        ; preds = %if.then689
  br label %if.end700, !dbg !6063

if.end700:                                        ; preds = %if.end699, %cond.end683
  %461 = load %struct.rtx_def*, %struct.rtx_def** %target_piece657, align 8, !dbg !6064
  %462 = load %struct.rtx_def*, %struct.rtx_def** %newx, align 8, !dbg !6065
  %call701 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %461, %struct.rtx_def* %462), !dbg !6066
  br label %if.end708, !dbg !6067

if.else702:                                       ; preds = %if.end675
  %463 = load %struct.rtx_def*, %struct.rtx_def** %x661, align 8, !dbg !6068
  %464 = load %struct.rtx_def*, %struct.rtx_def** %target_piece657, align 8, !dbg !6071
  %cmp703 = icmp ne %struct.rtx_def* %463, %464, !dbg !6072
  br i1 %cmp703, label %if.then705, label %if.end707, !dbg !6073

if.then705:                                       ; preds = %if.else702
  %465 = load %struct.rtx_def*, %struct.rtx_def** %target_piece657, align 8, !dbg !6074
  %466 = load %struct.rtx_def*, %struct.rtx_def** %x661, align 8, !dbg !6075
  %call706 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %465, %struct.rtx_def* %466), !dbg !6076
  br label %if.end707, !dbg !6076

if.end707:                                        ; preds = %if.then705, %if.else702
  br label %if.end708

if.end708:                                        ; preds = %if.end707, %if.end700
  %467 = load %struct.rtx_def*, %struct.rtx_def** %carry_out, align 8, !dbg !6077
  store %struct.rtx_def* %467, %struct.rtx_def** %carry_in, align 8, !dbg !6078
  br label %for.inc709, !dbg !6079

for.inc709:                                       ; preds = %if.end708
  %468 = load i32, i32* %i619, align 4, !dbg !6080
  %inc710 = add i32 %468, 1, !dbg !6080
  store i32 %inc710, i32* %i619, align 4, !dbg !6080
  br label %for.cond653, !dbg !6081, !llvm.loop !6082

for.end711:                                       ; preds = %if.then698, %if.then665, %for.cond653
  %469 = load i32, i32* %i619, align 4, !dbg !6084
  %470 = load i32, i32* %mode.addr, align 4, !dbg !6086
  %idxprom712 = zext i32 %470 to i64, !dbg !6086
  %arrayidx713 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom712, !dbg !6086
  %471 = load i8, i8* %arrayidx713, align 1, !dbg !6086
  %conv714 = zext i8 %471 to i16, !dbg !6086
  %conv715 = zext i16 %conv714 to i32, !dbg !6086
  %mul716 = mul nsw i32 %conv715, 8, !dbg !6086
  %conv717 = trunc i32 %mul716 to i16, !dbg !6086
  %conv718 = zext i16 %conv717 to i32, !dbg !6086
  %div719 = udiv i32 %conv718, 32, !dbg !6087
  %cmp720 = icmp eq i32 %469, %div719, !dbg !6088
  br i1 %cmp720, label %if.then722, label %if.else740, !dbg !6089

if.then722:                                       ; preds = %for.end711
  %472 = load i32, i32* %mode.addr, align 4, !dbg !6090
  %idxprom723 = sext i32 %472 to i64, !dbg !6090
  %arrayidx724 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 60, i32 4), i64 0, i64 %idxprom723, !dbg !6090
  %insn_code725 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx724, i32 0, i32 0, !dbg !6093
  %473 = load i32, i32* %insn_code725, align 4, !dbg !6093
  %cmp726 = icmp ne i32 %473, 2956, !dbg !6094
  br i1 %cmp726, label %if.then731, label %lor.lhs.false728, !dbg !6095

lor.lhs.false728:                                 ; preds = %if.then722
  %474 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6096
  %475 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !6097
  %call729 = call i32 @rtx_equal_p(%struct.rtx_def* %474, %struct.rtx_def* %475), !dbg !6098
  %tobool730 = icmp ne i32 %call729, 0, !dbg !6098
  br i1 %tobool730, label %if.else738, label %if.then731, !dbg !6099

if.then731:                                       ; preds = %lor.lhs.false728, %if.then722
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp732, metadata !6100, metadata !DIExpression()), !dbg !6102
  %476 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6103
  %477 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !6104
  %call733 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %476, %struct.rtx_def* %477), !dbg !6105
  store %struct.rtx_def* %call733, %struct.rtx_def** %temp732, align 8, !dbg !6102
  %478 = load %struct.rtx_def*, %struct.rtx_def** %temp732, align 8, !dbg !6106
  %479 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6107
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %479, i32 0, i32 0, !dbg !6107
  %480 = load i32, i32* %code, align 8, !dbg !6107
  %481 = load i32, i32* %mode.addr, align 4, !dbg !6107
  %482 = load %struct.rtx_def*, %struct.rtx_def** %xop0632, align 8, !dbg !6107
  %call734 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %482), !dbg !6107
  %483 = load %struct.rtx_def*, %struct.rtx_def** %xop1633, align 8, !dbg !6107
  %call735 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %483), !dbg !6107
  %call736 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %480, i32 %481, %struct.rtx_def* %call734, %struct.rtx_def* %call735), !dbg !6107
  %call737 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %478, i32 4, %struct.rtx_def* %call736), !dbg !6108
  br label %if.end739, !dbg !6109

if.else738:                                       ; preds = %lor.lhs.false728
  %484 = load %struct.rtx_def*, %struct.rtx_def** %xtarget, align 8, !dbg !6110
  store %struct.rtx_def* %484, %struct.rtx_def** %target.addr, align 8, !dbg !6111
  br label %if.end739

if.end739:                                        ; preds = %if.else738, %if.then731
  %485 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6112
  store %struct.rtx_def* %485, %struct.rtx_def** %retval, align 8, !dbg !6113
  br label %return, !dbg !6113

if.else740:                                       ; preds = %for.end711
  %486 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6114
  call void @delete_insns_since(%struct.rtx_def* %486), !dbg !6115
  br label %if.end741

if.end741:                                        ; preds = %if.else740
  br label %if.end742, !dbg !6116

if.end742:                                        ; preds = %if.end741, %land.lhs.true611, %land.lhs.true604, %land.lhs.true601, %lor.lhs.false598
  %487 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6117
  %cmp743 = icmp eq %struct.optab_d* %487, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !6119
  br i1 %cmp743, label %land.lhs.true745, label %if.end814, !dbg !6120

land.lhs.true745:                                 ; preds = %if.end742
  %488 = load i32, i32* %mclass, align 4, !dbg !6121
  %cmp746 = icmp eq i32 %488, 2, !dbg !6122
  br i1 %cmp746, label %land.lhs.true748, label %if.end814, !dbg !6123

land.lhs.true748:                                 ; preds = %land.lhs.true745
  %489 = load i32, i32* %mode.addr, align 4, !dbg !6124
  %idxprom749 = zext i32 %489 to i64, !dbg !6124
  %arrayidx750 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom749, !dbg !6124
  %490 = load i8, i8* %arrayidx750, align 1, !dbg !6124
  %conv751 = zext i8 %490 to i16, !dbg !6124
  %conv752 = zext i16 %conv751 to i32, !dbg !6124
  %cmp753 = icmp eq i32 %conv752, 8, !dbg !6125
  br i1 %cmp753, label %land.lhs.true755, label %if.end814, !dbg !6126

land.lhs.true755:                                 ; preds = %land.lhs.true748
  %491 = load i32, i32* @word_mode, align 4, !dbg !6127
  %idxprom756 = sext i32 %491 to i64, !dbg !6127
  %arrayidx757 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16, i32 4), i64 0, i64 %idxprom756, !dbg !6127
  %insn_code758 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx757, i32 0, i32 0, !dbg !6128
  %492 = load i32, i32* %insn_code758, align 4, !dbg !6128
  %cmp759 = icmp ne i32 %492, 2956, !dbg !6129
  br i1 %cmp759, label %land.lhs.true761, label %if.end814, !dbg !6130

land.lhs.true761:                                 ; preds = %land.lhs.true755
  %493 = load i32, i32* @word_mode, align 4, !dbg !6131
  %idxprom762 = sext i32 %493 to i64, !dbg !6131
  %arrayidx763 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 4), i64 0, i64 %idxprom762, !dbg !6131
  %insn_code764 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx763, i32 0, i32 0, !dbg !6132
  %494 = load i32, i32* %insn_code764, align 4, !dbg !6132
  %cmp765 = icmp ne i32 %494, 2956, !dbg !6133
  br i1 %cmp765, label %if.then767, label %if.end814, !dbg !6134

if.then767:                                       ; preds = %land.lhs.true761
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %product, metadata !6135, metadata !DIExpression()), !dbg !6137
  store %struct.rtx_def* null, %struct.rtx_def** %product, align 8, !dbg !6137
  %495 = load i32, i32* %mode.addr, align 4, !dbg !6138
  %idxprom768 = sext i32 %495 to i64, !dbg !6138
  %arrayidx769 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21, i32 4), i64 0, i64 %idxprom768, !dbg !6138
  %insn_code770 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx769, i32 0, i32 0, !dbg !6140
  %496 = load i32, i32* %insn_code770, align 4, !dbg !6140
  %cmp771 = icmp ne i32 %496, 2956, !dbg !6141
  br i1 %cmp771, label %if.then773, label %if.end778, !dbg !6142

if.then773:                                       ; preds = %if.then767
  %497 = load i32, i32* %mode.addr, align 4, !dbg !6143
  %498 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6145
  %499 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6146
  %500 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6147
  %501 = load i32, i32* %methods.addr, align 4, !dbg !6148
  %call774 = call %struct.rtx_def* @expand_doubleword_mult(i32 %497, %struct.rtx_def* %498, %struct.rtx_def* %499, %struct.rtx_def* %500, i8 zeroext 1, i32 %501), !dbg !6149
  store %struct.rtx_def* %call774, %struct.rtx_def** %product, align 8, !dbg !6150
  %502 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6151
  %tobool775 = icmp ne %struct.rtx_def* %502, null, !dbg !6151
  br i1 %tobool775, label %if.end777, label %if.then776, !dbg !6153

if.then776:                                       ; preds = %if.then773
  %503 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6154
  call void @delete_insns_since(%struct.rtx_def* %503), !dbg !6155
  br label %if.end777, !dbg !6155

if.end777:                                        ; preds = %if.then776, %if.then773
  br label %if.end778, !dbg !6156

if.end778:                                        ; preds = %if.end777, %if.then767
  %504 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6157
  %cmp779 = icmp eq %struct.rtx_def* %504, null, !dbg !6159
  br i1 %cmp779, label %land.lhs.true781, label %if.end792, !dbg !6160

land.lhs.true781:                                 ; preds = %if.end778
  %505 = load i32, i32* %mode.addr, align 4, !dbg !6161
  %idxprom782 = sext i32 %505 to i64, !dbg !6161
  %arrayidx783 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20, i32 4), i64 0, i64 %idxprom782, !dbg !6161
  %insn_code784 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx783, i32 0, i32 0, !dbg !6162
  %506 = load i32, i32* %insn_code784, align 4, !dbg !6162
  %cmp785 = icmp ne i32 %506, 2956, !dbg !6163
  br i1 %cmp785, label %if.then787, label %if.end792, !dbg !6164

if.then787:                                       ; preds = %land.lhs.true781
  %507 = load i32, i32* %mode.addr, align 4, !dbg !6165
  %508 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6167
  %509 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6168
  %510 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6169
  %511 = load i32, i32* %methods.addr, align 4, !dbg !6170
  %call788 = call %struct.rtx_def* @expand_doubleword_mult(i32 %507, %struct.rtx_def* %508, %struct.rtx_def* %509, %struct.rtx_def* %510, i8 zeroext 0, i32 %511), !dbg !6171
  store %struct.rtx_def* %call788, %struct.rtx_def** %product, align 8, !dbg !6172
  %512 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6173
  %tobool789 = icmp ne %struct.rtx_def* %512, null, !dbg !6173
  br i1 %tobool789, label %if.end791, label %if.then790, !dbg !6175

if.then790:                                       ; preds = %if.then787
  %513 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6176
  call void @delete_insns_since(%struct.rtx_def* %513), !dbg !6177
  br label %if.end791, !dbg !6177

if.end791:                                        ; preds = %if.then790, %if.then787
  br label %if.end792, !dbg !6178

if.end792:                                        ; preds = %if.end791, %land.lhs.true781, %if.end778
  %514 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6179
  %cmp793 = icmp ne %struct.rtx_def* %514, null, !dbg !6181
  br i1 %cmp793, label %if.then795, label %if.end813, !dbg !6182

if.then795:                                       ; preds = %if.end792
  %515 = load i32, i32* %mode.addr, align 4, !dbg !6183
  %idxprom796 = sext i32 %515 to i64, !dbg !6183
  %arrayidx797 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 60, i32 4), i64 0, i64 %idxprom796, !dbg !6183
  %insn_code798 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx797, i32 0, i32 0, !dbg !6186
  %516 = load i32, i32* %insn_code798, align 4, !dbg !6186
  %cmp799 = icmp ne i32 %516, 2956, !dbg !6187
  br i1 %cmp799, label %if.then801, label %if.end812, !dbg !6188

if.then801:                                       ; preds = %if.then795
  %517 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6189
  %tobool802 = icmp ne %struct.rtx_def* %517, null, !dbg !6189
  br i1 %tobool802, label %cond.true803, label %cond.false804, !dbg !6189

cond.true803:                                     ; preds = %if.then801
  %518 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6191
  br label %cond.end805, !dbg !6189

cond.false804:                                    ; preds = %if.then801
  %519 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6192
  br label %cond.end805, !dbg !6189

cond.end805:                                      ; preds = %cond.false804, %cond.true803
  %cond806 = phi %struct.rtx_def* [ %518, %cond.true803 ], [ %519, %cond.false804 ], !dbg !6189
  %520 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6193
  %call807 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %cond806, %struct.rtx_def* %520), !dbg !6194
  store %struct.rtx_def* %call807, %struct.rtx_def** %temp, align 8, !dbg !6195
  %521 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6196
  %522 = load i32, i32* %mode.addr, align 4, !dbg !6197
  %523 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6197
  %call808 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %523), !dbg !6197
  %524 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6197
  %call809 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %524), !dbg !6197
  %call810 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %522, %struct.rtx_def* %call808, %struct.rtx_def* %call809), !dbg !6197
  %call811 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %521, i32 4, %struct.rtx_def* %call810), !dbg !6198
  br label %if.end812, !dbg !6199

if.end812:                                        ; preds = %cond.end805, %if.then795
  %525 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !6200
  store %struct.rtx_def* %525, %struct.rtx_def** %retval, align 8, !dbg !6201
  br label %return, !dbg !6201

if.end813:                                        ; preds = %if.end792
  br label %if.end814, !dbg !6202

if.end814:                                        ; preds = %if.end813, %land.lhs.true761, %land.lhs.true755, %land.lhs.true748, %land.lhs.true745, %if.end742
  %526 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6203
  %527 = load i32, i32* %mode.addr, align 4, !dbg !6204
  %call815 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %526, i32 %527), !dbg !6205
  store %struct.rtx_def* %call815, %struct.rtx_def** %libfunc, align 8, !dbg !6206
  %528 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !6207
  %tobool816 = icmp ne %struct.rtx_def* %528, null, !dbg !6207
  br i1 %tobool816, label %land.lhs.true817, label %if.end851, !dbg !6209

land.lhs.true817:                                 ; preds = %if.end814
  %529 = load i32, i32* %methods.addr, align 4, !dbg !6210
  %cmp818 = icmp eq i32 %529, 1, !dbg !6211
  br i1 %cmp818, label %if.then823, label %lor.lhs.false820, !dbg !6212

lor.lhs.false820:                                 ; preds = %land.lhs.true817
  %530 = load i32, i32* %methods.addr, align 4, !dbg !6213
  %cmp821 = icmp eq i32 %530, 3, !dbg !6214
  br i1 %cmp821, label %if.then823, label %if.end851, !dbg !6215

if.then823:                                       ; preds = %lor.lhs.false820, %land.lhs.true817
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns824, metadata !6216, metadata !DIExpression()), !dbg !6218
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1x, metadata !6219, metadata !DIExpression()), !dbg !6220
  %531 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6221
  store %struct.rtx_def* %531, %struct.rtx_def** %op1x, align 8, !dbg !6220
  call void @llvm.dbg.declare(metadata i32* %op1_mode825, metadata !6222, metadata !DIExpression()), !dbg !6223
  %532 = load i32, i32* %mode.addr, align 4, !dbg !6224
  store i32 %532, i32* %op1_mode825, align 4, !dbg !6223
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !6225, metadata !DIExpression()), !dbg !6226
  call void @start_sequence(), !dbg !6227
  %533 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6228
  %call826 = call zeroext i8 @shift_optab_p(%struct.optab_d* %533), !dbg !6230
  %tobool827 = icmp ne i8 %call826, 0, !dbg !6230
  br i1 %tobool827, label %if.then828, label %if.end831, !dbg !6231

if.then828:                                       ; preds = %if.then823
  %534 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 9), align 8, !dbg !6232
  %call829 = call i32 %534(), !dbg !6234
  store i32 %call829, i32* %op1_mode825, align 4, !dbg !6235
  %535 = load i32, i32* %op1_mode825, align 4, !dbg !6236
  %536 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6237
  %call830 = call %struct.rtx_def* @convert_to_mode(i32 %535, %struct.rtx_def* %536, i32 1), !dbg !6238
  store %struct.rtx_def* %call830, %struct.rtx_def** %op1x, align 8, !dbg !6239
  br label %if.end831, !dbg !6240

if.end831:                                        ; preds = %if.then828, %if.then823
  %537 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6241
  %538 = bitcast %struct.rtx_def* %537 to i32*, !dbg !6241
  %bf.load832 = load i32, i32* %538, align 8, !dbg !6241
  %bf.lshr833 = lshr i32 %bf.load832, 16, !dbg !6241
  %bf.clear834 = and i32 %bf.lshr833, 255, !dbg !6241
  %cmp835 = icmp ne i32 %bf.clear834, 0, !dbg !6243
  br i1 %cmp835, label %land.lhs.true837, label %if.end845, !dbg !6244

land.lhs.true837:                                 ; preds = %if.end831
  %539 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6245
  %540 = bitcast %struct.rtx_def* %539 to i32*, !dbg !6245
  %bf.load838 = load i32, i32* %540, align 8, !dbg !6245
  %bf.lshr839 = lshr i32 %bf.load838, 16, !dbg !6245
  %bf.clear840 = and i32 %bf.lshr839, 255, !dbg !6245
  %541 = load i32, i32* %mode.addr, align 4, !dbg !6246
  %cmp841 = icmp ne i32 %bf.clear840, %541, !dbg !6247
  br i1 %cmp841, label %if.then843, label %if.end845, !dbg !6248

if.then843:                                       ; preds = %land.lhs.true837
  %542 = load i32, i32* %mode.addr, align 4, !dbg !6249
  %543 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6250
  %544 = load i32, i32* %unsignedp.addr, align 4, !dbg !6251
  %call844 = call %struct.rtx_def* @convert_to_mode(i32 %542, %struct.rtx_def* %543, i32 %544), !dbg !6252
  store %struct.rtx_def* %call844, %struct.rtx_def** %op0.addr, align 8, !dbg !6253
  br label %if.end845, !dbg !6254

if.end845:                                        ; preds = %if.then843, %land.lhs.true837, %if.end831
  %545 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !6255
  %546 = load i32, i32* %mode.addr, align 4, !dbg !6256
  %547 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6257
  %548 = load i32, i32* %mode.addr, align 4, !dbg !6258
  %549 = load %struct.rtx_def*, %struct.rtx_def** %op1x, align 8, !dbg !6259
  %550 = load i32, i32* %op1_mode825, align 4, !dbg !6260
  %call846 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %545, %struct.rtx_def* null, i32 1, i32 %546, i32 2, %struct.rtx_def* %547, i32 %548, %struct.rtx_def* %549, i32 %550), !dbg !6261
  store %struct.rtx_def* %call846, %struct.rtx_def** %value, align 8, !dbg !6262
  %call847 = call %struct.rtx_def* @get_insns(), !dbg !6263
  store %struct.rtx_def* %call847, %struct.rtx_def** %insns824, align 8, !dbg !6264
  call void @end_sequence(), !dbg !6265
  %551 = load i32, i32* %mode.addr, align 4, !dbg !6266
  %call848 = call %struct.rtx_def* @gen_reg_rtx(i32 %551), !dbg !6267
  store %struct.rtx_def* %call848, %struct.rtx_def** %target.addr, align 8, !dbg !6268
  %552 = load %struct.rtx_def*, %struct.rtx_def** %insns824, align 8, !dbg !6269
  %553 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6270
  %554 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !6271
  %555 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6272
  %code849 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %555, i32 0, i32 0, !dbg !6272
  %556 = load i32, i32* %code849, align 8, !dbg !6272
  %557 = load i32, i32* %mode.addr, align 4, !dbg !6272
  %558 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6272
  %559 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6272
  %call850 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %556, i32 %557, %struct.rtx_def* %558, %struct.rtx_def* %559), !dbg !6272
  call void @emit_libcall_block(%struct.rtx_def* %552, %struct.rtx_def* %553, %struct.rtx_def* %554, %struct.rtx_def* %call850), !dbg !6273
  %560 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6274
  store %struct.rtx_def* %560, %struct.rtx_def** %retval, align 8, !dbg !6275
  br label %return, !dbg !6275

if.end851:                                        ; preds = %lor.lhs.false820, %if.end814
  %561 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6276
  call void @delete_insns_since(%struct.rtx_def* %561), !dbg !6277
  %562 = load i32, i32* %methods.addr, align 4, !dbg !6278
  %cmp852 = icmp eq i32 %562, 2, !dbg !6280
  br i1 %cmp852, label %if.end861, label %lor.lhs.false854, !dbg !6281

lor.lhs.false854:                                 ; preds = %if.end851
  %563 = load i32, i32* %methods.addr, align 4, !dbg !6282
  %cmp855 = icmp eq i32 %563, 3, !dbg !6283
  br i1 %cmp855, label %if.end861, label %lor.lhs.false857, !dbg !6284

lor.lhs.false857:                                 ; preds = %lor.lhs.false854
  %564 = load i32, i32* %methods.addr, align 4, !dbg !6285
  %cmp858 = icmp eq i32 %564, 4, !dbg !6286
  br i1 %cmp858, label %if.end861, label %if.then860, !dbg !6287

if.then860:                                       ; preds = %lor.lhs.false857
  %565 = load %struct.rtx_def*, %struct.rtx_def** %entry_last, align 8, !dbg !6288
  call void @delete_insns_since(%struct.rtx_def* %565), !dbg !6290
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6291
  br label %return, !dbg !6291

if.end861:                                        ; preds = %lor.lhs.false857, %lor.lhs.false854, %if.end851
  %566 = load i32, i32* %methods.addr, align 4, !dbg !6292
  %cmp862 = icmp eq i32 %566, 3, !dbg !6293
  %567 = zext i1 %cmp862 to i64, !dbg !6292
  %cond864 = select i1 %cmp862, i32 1, i32 0, !dbg !6292
  store i32 %cond864, i32* %methods.addr, align 4, !dbg !6294
  %568 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp865 = icmp eq i32 %568, 2, !dbg !6295
  br i1 %cmp865, label %if.then888, label %lor.lhs.false867, !dbg !6295

lor.lhs.false867:                                 ; preds = %if.end861
  %569 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp868 = icmp eq i32 %569, 8, !dbg !6295
  br i1 %cmp868, label %if.then888, label %lor.lhs.false870, !dbg !6295

lor.lhs.false870:                                 ; preds = %lor.lhs.false867
  %570 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp871 = icmp eq i32 %570, 9, !dbg !6295
  br i1 %cmp871, label %if.then888, label %lor.lhs.false873, !dbg !6295

lor.lhs.false873:                                 ; preds = %lor.lhs.false870
  %571 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp874 = icmp eq i32 %571, 11, !dbg !6295
  br i1 %cmp874, label %if.then888, label %lor.lhs.false876, !dbg !6295

lor.lhs.false876:                                 ; preds = %lor.lhs.false873
  %572 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp877 = icmp eq i32 %572, 4, !dbg !6295
  br i1 %cmp877, label %if.then888, label %lor.lhs.false879, !dbg !6295

lor.lhs.false879:                                 ; preds = %lor.lhs.false876
  %573 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp880 = icmp eq i32 %573, 5, !dbg !6295
  br i1 %cmp880, label %if.then888, label %lor.lhs.false882, !dbg !6295

lor.lhs.false882:                                 ; preds = %lor.lhs.false879
  %574 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp883 = icmp eq i32 %574, 6, !dbg !6295
  br i1 %cmp883, label %if.then888, label %lor.lhs.false885, !dbg !6295

lor.lhs.false885:                                 ; preds = %lor.lhs.false882
  %575 = load i32, i32* %mclass, align 4, !dbg !6295
  %cmp886 = icmp eq i32 %575, 7, !dbg !6295
  br i1 %cmp886, label %if.then888, label %if.end966, !dbg !6297

if.then888:                                       ; preds = %lor.lhs.false885, %lor.lhs.false882, %lor.lhs.false879, %lor.lhs.false876, %lor.lhs.false873, %lor.lhs.false870, %lor.lhs.false867, %if.end861
  %576 = load i32, i32* %mode.addr, align 4, !dbg !6298
  %idxprom889 = zext i32 %576 to i64, !dbg !6298
  %arrayidx890 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom889, !dbg !6298
  %577 = load i8, i8* %arrayidx890, align 1, !dbg !6298
  %conv891 = zext i8 %577 to i32, !dbg !6298
  store i32 %conv891, i32* %wider_mode, align 4, !dbg !6301
  br label %for.cond892, !dbg !6302

for.cond892:                                      ; preds = %for.inc961, %if.then888
  %578 = load i32, i32* %wider_mode, align 4, !dbg !6303
  %cmp893 = icmp ne i32 %578, 0, !dbg !6305
  br i1 %cmp893, label %for.body895, label %for.end965, !dbg !6306

for.body895:                                      ; preds = %for.cond892
  %579 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6307
  %handlers896 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %579, i32 0, i32 4, !dbg !6307
  %580 = load i32, i32* %wider_mode, align 4, !dbg !6307
  %idxprom897 = sext i32 %580 to i64, !dbg !6307
  %arrayidx898 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers896, i64 0, i64 %idxprom897, !dbg !6307
  %insn_code899 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx898, i32 0, i32 0, !dbg !6310
  %581 = load i32, i32* %insn_code899, align 4, !dbg !6310
  %cmp900 = icmp ne i32 %581, 2956, !dbg !6311
  br i1 %cmp900, label %if.then908, label %lor.lhs.false902, !dbg !6312

lor.lhs.false902:                                 ; preds = %for.body895
  %582 = load i32, i32* %methods.addr, align 4, !dbg !6313
  %cmp903 = icmp eq i32 %582, 1, !dbg !6314
  br i1 %cmp903, label %land.lhs.true905, label %if.end960, !dbg !6315

land.lhs.true905:                                 ; preds = %lor.lhs.false902
  %583 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6316
  %584 = load i32, i32* %wider_mode, align 4, !dbg !6317
  %call906 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %583, i32 %584), !dbg !6318
  %tobool907 = icmp ne %struct.rtx_def* %call906, null, !dbg !6318
  br i1 %tobool907, label %if.then908, label %if.end960, !dbg !6319

if.then908:                                       ; preds = %land.lhs.true905, %for.body895
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0909, metadata !6320, metadata !DIExpression()), !dbg !6322
  %585 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6323
  store %struct.rtx_def* %585, %struct.rtx_def** %xop0909, align 8, !dbg !6322
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1910, metadata !6324, metadata !DIExpression()), !dbg !6325
  %586 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6326
  store %struct.rtx_def* %586, %struct.rtx_def** %xop1910, align 8, !dbg !6325
  call void @llvm.dbg.declare(metadata i32* %no_extend911, metadata !6327, metadata !DIExpression()), !dbg !6328
  store i32 0, i32* %no_extend911, align 4, !dbg !6328
  %587 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6329
  %cmp912 = icmp eq %struct.optab_d* %587, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), !dbg !6331
  br i1 %cmp912, label %land.lhs.true932, label %lor.lhs.false914, !dbg !6332

lor.lhs.false914:                                 ; preds = %if.then908
  %588 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6333
  %cmp915 = icmp eq %struct.optab_d* %588, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), !dbg !6334
  br i1 %cmp915, label %land.lhs.true932, label %lor.lhs.false917, !dbg !6335

lor.lhs.false917:                                 ; preds = %lor.lhs.false914
  %589 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6336
  %cmp918 = icmp eq %struct.optab_d* %589, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), !dbg !6337
  br i1 %cmp918, label %land.lhs.true932, label %lor.lhs.false920, !dbg !6338

lor.lhs.false920:                                 ; preds = %lor.lhs.false917
  %590 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6339
  %cmp921 = icmp eq %struct.optab_d* %590, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), !dbg !6340
  br i1 %cmp921, label %land.lhs.true932, label %lor.lhs.false923, !dbg !6341

lor.lhs.false923:                                 ; preds = %lor.lhs.false920
  %591 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6342
  %cmp924 = icmp eq %struct.optab_d* %591, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !6343
  br i1 %cmp924, label %land.lhs.true932, label %lor.lhs.false926, !dbg !6344

lor.lhs.false926:                                 ; preds = %lor.lhs.false923
  %592 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6345
  %cmp927 = icmp eq %struct.optab_d* %592, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), !dbg !6346
  br i1 %cmp927, label %land.lhs.true932, label %lor.lhs.false929, !dbg !6347

lor.lhs.false929:                                 ; preds = %lor.lhs.false926
  %593 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6348
  %cmp930 = icmp eq %struct.optab_d* %593, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !6349
  br i1 %cmp930, label %land.lhs.true932, label %if.end936, !dbg !6350

land.lhs.true932:                                 ; preds = %lor.lhs.false929, %lor.lhs.false926, %lor.lhs.false923, %lor.lhs.false920, %lor.lhs.false917, %lor.lhs.false914, %if.then908
  %594 = load i32, i32* %mclass, align 4, !dbg !6351
  %cmp933 = icmp eq i32 %594, 2, !dbg !6352
  br i1 %cmp933, label %if.then935, label %if.end936, !dbg !6353

if.then935:                                       ; preds = %land.lhs.true932
  store i32 1, i32* %no_extend911, align 4, !dbg !6354
  br label %if.end936, !dbg !6355

if.end936:                                        ; preds = %if.then935, %land.lhs.true932, %lor.lhs.false929
  %595 = load %struct.rtx_def*, %struct.rtx_def** %xop0909, align 8, !dbg !6356
  %596 = load i32, i32* %wider_mode, align 4, !dbg !6357
  %597 = load i32, i32* %mode.addr, align 4, !dbg !6358
  %598 = load i32, i32* %unsignedp.addr, align 4, !dbg !6359
  %599 = load i32, i32* %no_extend911, align 4, !dbg !6360
  %call937 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %595, i32 %596, i32 %597, i32 %598, i32 %599), !dbg !6361
  store %struct.rtx_def* %call937, %struct.rtx_def** %xop0909, align 8, !dbg !6362
  %600 = load %struct.rtx_def*, %struct.rtx_def** %xop1910, align 8, !dbg !6363
  %601 = load i32, i32* %wider_mode, align 4, !dbg !6364
  %602 = load i32, i32* %mode.addr, align 4, !dbg !6365
  %603 = load i32, i32* %unsignedp.addr, align 4, !dbg !6366
  %604 = load i32, i32* %no_extend911, align 4, !dbg !6367
  %tobool938 = icmp ne i32 %604, 0, !dbg !6367
  br i1 %tobool938, label %land.rhs939, label %land.end942, !dbg !6368

land.rhs939:                                      ; preds = %if.end936
  %605 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6369
  %cmp940 = icmp ne %struct.optab_d* %605, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !6370
  br label %land.end942

land.end942:                                      ; preds = %land.rhs939, %if.end936
  %606 = phi i1 [ false, %if.end936 ], [ %cmp940, %land.rhs939 ], !dbg !6371
  %land.ext943 = zext i1 %606 to i32, !dbg !6368
  %call944 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %600, i32 %601, i32 %602, i32 %603, i32 %land.ext943), !dbg !6372
  store %struct.rtx_def* %call944, %struct.rtx_def** %xop1910, align 8, !dbg !6373
  %607 = load i32, i32* %wider_mode, align 4, !dbg !6374
  %608 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6375
  %609 = load %struct.rtx_def*, %struct.rtx_def** %xop0909, align 8, !dbg !6376
  %610 = load %struct.rtx_def*, %struct.rtx_def** %xop1910, align 8, !dbg !6377
  %611 = load i32, i32* %unsignedp.addr, align 4, !dbg !6378
  %612 = load i32, i32* %methods.addr, align 4, !dbg !6379
  %call945 = call %struct.rtx_def* @expand_binop(i32 %607, %struct.optab_d* %608, %struct.rtx_def* %609, %struct.rtx_def* %610, %struct.rtx_def* null, i32 %611, i32 %612), !dbg !6380
  store %struct.rtx_def* %call945, %struct.rtx_def** %temp, align 8, !dbg !6381
  %613 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6382
  %tobool946 = icmp ne %struct.rtx_def* %613, null, !dbg !6382
  br i1 %tobool946, label %if.then947, label %if.else958, !dbg !6384

if.then947:                                       ; preds = %land.end942
  %614 = load i32, i32* %mclass, align 4, !dbg !6385
  %cmp948 = icmp ne i32 %614, 2, !dbg !6388
  br i1 %cmp948, label %if.then950, label %if.else956, !dbg !6389

if.then950:                                       ; preds = %if.then947
  %615 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6390
  %cmp951 = icmp eq %struct.rtx_def* %615, null, !dbg !6393
  br i1 %cmp951, label %if.then953, label %if.end955, !dbg !6394

if.then953:                                       ; preds = %if.then950
  %616 = load i32, i32* %mode.addr, align 4, !dbg !6395
  %call954 = call %struct.rtx_def* @gen_reg_rtx(i32 %616), !dbg !6396
  store %struct.rtx_def* %call954, %struct.rtx_def** %target.addr, align 8, !dbg !6397
  br label %if.end955, !dbg !6398

if.end955:                                        ; preds = %if.then953, %if.then950
  %617 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6399
  %618 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6400
  call void @convert_move(%struct.rtx_def* %617, %struct.rtx_def* %618, i32 0), !dbg !6401
  %619 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6402
  store %struct.rtx_def* %619, %struct.rtx_def** %retval, align 8, !dbg !6403
  br label %return, !dbg !6403

if.else956:                                       ; preds = %if.then947
  %620 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !6404
  %621 = load i32, i32* %mode.addr, align 4, !dbg !6405
  %622 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6406
  %call957 = call %struct.rtx_def* %620(i32 %621, %struct.rtx_def* %622), !dbg !6404
  store %struct.rtx_def* %call957, %struct.rtx_def** %retval, align 8, !dbg !6407
  br label %return, !dbg !6407

if.else958:                                       ; preds = %land.end942
  %623 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6408
  call void @delete_insns_since(%struct.rtx_def* %623), !dbg !6409
  br label %if.end959

if.end959:                                        ; preds = %if.else958
  br label %if.end960, !dbg !6410

if.end960:                                        ; preds = %if.end959, %land.lhs.true905, %lor.lhs.false902
  br label %for.inc961, !dbg !6411

for.inc961:                                       ; preds = %if.end960
  %624 = load i32, i32* %wider_mode, align 4, !dbg !6412
  %idxprom962 = zext i32 %624 to i64, !dbg !6412
  %arrayidx963 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom962, !dbg !6412
  %625 = load i8, i8* %arrayidx963, align 1, !dbg !6412
  %conv964 = zext i8 %625 to i32, !dbg !6412
  store i32 %conv964, i32* %wider_mode, align 4, !dbg !6413
  br label %for.cond892, !dbg !6414, !llvm.loop !6415

for.end965:                                       ; preds = %for.cond892
  br label %if.end966, !dbg !6417

if.end966:                                        ; preds = %for.end965, %lor.lhs.false885
  %626 = load %struct.rtx_def*, %struct.rtx_def** %entry_last, align 8, !dbg !6418
  call void @delete_insns_since(%struct.rtx_def* %626), !dbg !6419
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6420
  br label %return, !dbg !6420

return:                                           ; preds = %if.end966, %if.else956, %if.end955, %if.then860, %if.end845, %if.end812, %if.end739, %if.then592, %if.then441, %if.then408, %if.then326, %if.else234, %if.end233, %if.else118, %if.then116, %if.then78, %if.then17
  %627 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6421
  ret %struct.rtx_def* %627, !dbg !6421
}

declare dso_local %struct.rtx_def* @get_last_insn() #2

declare dso_local %struct.rtx_def* @negate_rtx(i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_binop_directly(i32 %mode, %struct.optab_d* %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %methods, %struct.rtx_def* %last) #0 !dbg !6422 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %last.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %tmp_mode = alloca i32, align 4
  %commutative_p = alloca i8, align 1
  %pat = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %xop1 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %swap = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6425, metadata !DIExpression()), !dbg !6426
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !6427, metadata !DIExpression()), !dbg !6428
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !6429, metadata !DIExpression()), !dbg !6430
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !6431, metadata !DIExpression()), !dbg !6432
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !6433, metadata !DIExpression()), !dbg !6434
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !6435, metadata !DIExpression()), !dbg !6436
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !6437, metadata !DIExpression()), !dbg !6438
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !6439, metadata !DIExpression()), !dbg !6440
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !6441, metadata !DIExpression()), !dbg !6442
  %0 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6443
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %0, i32 0, i32 4, !dbg !6443
  %1 = load i32, i32* %mode.addr, align 4, !dbg !6443
  %idxprom = sext i32 %1 to i64, !dbg !6443
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !6443
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !6444
  %2 = load i32, i32* %insn_code, align 4, !dbg !6444
  store i32 %2, i32* %icode, align 4, !dbg !6442
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !6445, metadata !DIExpression()), !dbg !6446
  %3 = load i32, i32* %icode, align 4, !dbg !6447
  %idxprom1 = sext i32 %3 to i64, !dbg !6448
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !6448
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !6449
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !6449
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 1, !dbg !6448
  %mode4 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 2, !dbg !6450
  %bf.load = load i16, i16* %mode4, align 8, !dbg !6450
  %bf.cast = zext i16 %bf.load to i32, !dbg !6450
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !6446
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !6451, metadata !DIExpression()), !dbg !6452
  %5 = load i32, i32* %icode, align 4, !dbg !6453
  %idxprom5 = sext i32 %5 to i64, !dbg !6454
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom5, !dbg !6454
  %operand7 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3, !dbg !6455
  %6 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand7, align 8, !dbg !6455
  %arrayidx8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %6, i64 2, !dbg !6454
  %mode9 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx8, i32 0, i32 2, !dbg !6456
  %bf.load10 = load i16, i16* %mode9, align 8, !dbg !6456
  %bf.cast11 = zext i16 %bf.load10 to i32, !dbg !6456
  store i32 %bf.cast11, i32* %mode1, align 4, !dbg !6452
  call void @llvm.dbg.declare(metadata i32* %tmp_mode, metadata !6457, metadata !DIExpression()), !dbg !6458
  call void @llvm.dbg.declare(metadata i8* %commutative_p, metadata !6459, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !6461, metadata !DIExpression()), !dbg !6462
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !6463, metadata !DIExpression()), !dbg !6464
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6465
  store %struct.rtx_def* %7, %struct.rtx_def** %xop0, align 8, !dbg !6464
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1, metadata !6466, metadata !DIExpression()), !dbg !6467
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6468
  store %struct.rtx_def* %8, %struct.rtx_def** %xop1, align 8, !dbg !6467
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !6469, metadata !DIExpression()), !dbg !6470
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %swap, metadata !6471, metadata !DIExpression()), !dbg !6472
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6473
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !6473
  br i1 %tobool, label %if.then, label %if.else, !dbg !6475

if.then:                                          ; preds = %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6476
  store %struct.rtx_def* %10, %struct.rtx_def** %temp, align 8, !dbg !6477
  br label %if.end, !dbg !6478

if.else:                                          ; preds = %entry
  %11 = load i32, i32* %mode.addr, align 4, !dbg !6479
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %11), !dbg !6480
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !6481
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6482
  %call12 = call zeroext i8 @commutative_optab_p(%struct.optab_d* %12), !dbg !6483
  store i8 %call12, i8* %commutative_p, align 1, !dbg !6484
  %13 = load i8, i8* %commutative_p, align 1, !dbg !6485
  %conv = zext i8 %13 to i32, !dbg !6485
  %tobool13 = icmp ne i32 %conv, 0, !dbg !6485
  br i1 %tobool13, label %land.lhs.true, label %if.end35, !dbg !6487

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6488
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6488
  %bf.load14 = load i32, i32* %15, align 8, !dbg !6488
  %bf.lshr = lshr i32 %bf.load14, 16, !dbg !6488
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6488
  %16 = load i32, i32* %mode0, align 4, !dbg !6489
  %cmp = icmp ne i32 %bf.clear, %16, !dbg !6490
  br i1 %cmp, label %land.lhs.true16, label %if.end35, !dbg !6491

land.lhs.true16:                                  ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6492
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6492
  %bf.load17 = load i32, i32* %18, align 8, !dbg !6492
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !6492
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !6492
  %19 = load i32, i32* %mode1, align 4, !dbg !6493
  %cmp20 = icmp ne i32 %bf.clear19, %19, !dbg !6494
  br i1 %cmp20, label %land.lhs.true22, label %if.end35, !dbg !6495

land.lhs.true22:                                  ; preds = %land.lhs.true16
  %20 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6496
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !6496
  %bf.load23 = load i32, i32* %21, align 8, !dbg !6496
  %bf.lshr24 = lshr i32 %bf.load23, 16, !dbg !6496
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !6496
  %22 = load i32, i32* %mode1, align 4, !dbg !6497
  %cmp26 = icmp eq i32 %bf.clear25, %22, !dbg !6498
  br i1 %cmp26, label %land.lhs.true28, label %if.end35, !dbg !6499

land.lhs.true28:                                  ; preds = %land.lhs.true22
  %23 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6500
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6500
  %bf.load29 = load i32, i32* %24, align 8, !dbg !6500
  %bf.lshr30 = lshr i32 %bf.load29, 16, !dbg !6500
  %bf.clear31 = and i32 %bf.lshr30, 255, !dbg !6500
  %25 = load i32, i32* %mode1, align 4, !dbg !6501
  %cmp32 = icmp eq i32 %bf.clear31, %25, !dbg !6502
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !6503

if.then34:                                        ; preds = %land.lhs.true28
  %26 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6504
  store %struct.rtx_def* %26, %struct.rtx_def** %swap, align 8, !dbg !6506
  %27 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6507
  store %struct.rtx_def* %27, %struct.rtx_def** %xop0, align 8, !dbg !6508
  %28 = load %struct.rtx_def*, %struct.rtx_def** %swap, align 8, !dbg !6509
  store %struct.rtx_def* %28, %struct.rtx_def** %xop1, align 8, !dbg !6510
  br label %if.end35, !dbg !6511

if.end35:                                         ; preds = %if.then34, %land.lhs.true28, %land.lhs.true22, %land.lhs.true16, %land.lhs.true, %if.end
  %29 = load i32, i32* %mode0, align 4, !dbg !6512
  %30 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6513
  %31 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6514
  %32 = load i32, i32* %unsignedp.addr, align 4, !dbg !6515
  %conv36 = trunc i32 %32 to i8, !dbg !6515
  %call37 = call %struct.rtx_def* @avoid_expensive_constant(i32 %29, %struct.optab_d* %30, %struct.rtx_def* %31, i8 zeroext %conv36), !dbg !6516
  store %struct.rtx_def* %call37, %struct.rtx_def** %xop0, align 8, !dbg !6517
  %33 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6518
  %call38 = call zeroext i8 @shift_optab_p(%struct.optab_d* %33), !dbg !6520
  %tobool39 = icmp ne i8 %call38, 0, !dbg !6520
  br i1 %tobool39, label %if.end43, label %if.then40, !dbg !6521

if.then40:                                        ; preds = %if.end35
  %34 = load i32, i32* %mode1, align 4, !dbg !6522
  %35 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6523
  %36 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6524
  %37 = load i32, i32* %unsignedp.addr, align 4, !dbg !6525
  %conv41 = trunc i32 %37 to i8, !dbg !6525
  %call42 = call %struct.rtx_def* @avoid_expensive_constant(i32 %34, %struct.optab_d* %35, %struct.rtx_def* %36, i8 zeroext %conv41), !dbg !6526
  store %struct.rtx_def* %call42, %struct.rtx_def** %xop1, align 8, !dbg !6527
  br label %if.end43, !dbg !6528

if.end43:                                         ; preds = %if.then40, %if.end35
  %38 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6529
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !6529
  %bf.load44 = load i32, i32* %39, align 8, !dbg !6529
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !6529
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !6529
  %40 = load i32, i32* %mode0, align 4, !dbg !6531
  %cmp47 = icmp ne i32 %bf.clear46, %40, !dbg !6532
  br i1 %cmp47, label %land.lhs.true49, label %if.end62, !dbg !6533

land.lhs.true49:                                  ; preds = %if.end43
  %41 = load i32, i32* %mode0, align 4, !dbg !6534
  %cmp50 = icmp ne i32 %41, 0, !dbg !6535
  br i1 %cmp50, label %if.then52, label %if.end62, !dbg !6536

if.then52:                                        ; preds = %land.lhs.true49
  %42 = load i32, i32* %mode0, align 4, !dbg !6537
  %43 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6538
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !6538
  %bf.load53 = load i32, i32* %44, align 8, !dbg !6538
  %bf.lshr54 = lshr i32 %bf.load53, 16, !dbg !6538
  %bf.clear55 = and i32 %bf.lshr54, 255, !dbg !6538
  %cmp56 = icmp ne i32 %bf.clear55, 0, !dbg !6539
  br i1 %cmp56, label %cond.true, label %cond.false, !dbg !6538

cond.true:                                        ; preds = %if.then52
  %45 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6540
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !6540
  %bf.load58 = load i32, i32* %46, align 8, !dbg !6540
  %bf.lshr59 = lshr i32 %bf.load58, 16, !dbg !6540
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !6540
  br label %cond.end, !dbg !6538

cond.false:                                       ; preds = %if.then52
  %47 = load i32, i32* %mode.addr, align 4, !dbg !6541
  br label %cond.end, !dbg !6538

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.clear60, %cond.true ], [ %47, %cond.false ], !dbg !6538
  %48 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6542
  %49 = load i32, i32* %unsignedp.addr, align 4, !dbg !6543
  %call61 = call %struct.rtx_def* @convert_modes(i32 %42, i32 %cond, %struct.rtx_def* %48, i32 %49), !dbg !6544
  store %struct.rtx_def* %call61, %struct.rtx_def** %xop0, align 8, !dbg !6545
  br label %if.end62, !dbg !6546

if.end62:                                         ; preds = %cond.end, %land.lhs.true49, %if.end43
  %50 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6547
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !6547
  %bf.load63 = load i32, i32* %51, align 8, !dbg !6547
  %bf.lshr64 = lshr i32 %bf.load63, 16, !dbg !6547
  %bf.clear65 = and i32 %bf.lshr64, 255, !dbg !6547
  %52 = load i32, i32* %mode1, align 4, !dbg !6549
  %cmp66 = icmp ne i32 %bf.clear65, %52, !dbg !6550
  br i1 %cmp66, label %land.lhs.true68, label %if.end85, !dbg !6551

land.lhs.true68:                                  ; preds = %if.end62
  %53 = load i32, i32* %mode1, align 4, !dbg !6552
  %cmp69 = icmp ne i32 %53, 0, !dbg !6553
  br i1 %cmp69, label %if.then71, label %if.end85, !dbg !6554

if.then71:                                        ; preds = %land.lhs.true68
  %54 = load i32, i32* %mode1, align 4, !dbg !6555
  %55 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6556
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !6556
  %bf.load72 = load i32, i32* %56, align 8, !dbg !6556
  %bf.lshr73 = lshr i32 %bf.load72, 16, !dbg !6556
  %bf.clear74 = and i32 %bf.lshr73, 255, !dbg !6556
  %cmp75 = icmp ne i32 %bf.clear74, 0, !dbg !6557
  br i1 %cmp75, label %cond.true77, label %cond.false81, !dbg !6556

cond.true77:                                      ; preds = %if.then71
  %57 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6558
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !6558
  %bf.load78 = load i32, i32* %58, align 8, !dbg !6558
  %bf.lshr79 = lshr i32 %bf.load78, 16, !dbg !6558
  %bf.clear80 = and i32 %bf.lshr79, 255, !dbg !6558
  br label %cond.end82, !dbg !6556

cond.false81:                                     ; preds = %if.then71
  %59 = load i32, i32* %mode.addr, align 4, !dbg !6559
  br label %cond.end82, !dbg !6556

cond.end82:                                       ; preds = %cond.false81, %cond.true77
  %cond83 = phi i32 [ %bf.clear80, %cond.true77 ], [ %59, %cond.false81 ], !dbg !6556
  %60 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6560
  %61 = load i32, i32* %unsignedp.addr, align 4, !dbg !6561
  %call84 = call %struct.rtx_def* @convert_modes(i32 %54, i32 %cond83, %struct.rtx_def* %60, i32 %61), !dbg !6562
  store %struct.rtx_def* %call84, %struct.rtx_def** %xop1, align 8, !dbg !6563
  br label %if.end85, !dbg !6564

if.end85:                                         ; preds = %cond.end82, %land.lhs.true68, %if.end62
  %62 = load i8, i8* %commutative_p, align 1, !dbg !6565
  %conv86 = zext i8 %62 to i32, !dbg !6565
  %tobool87 = icmp ne i32 %conv86, 0, !dbg !6565
  br i1 %tobool87, label %land.lhs.true88, label %if.end93, !dbg !6567

land.lhs.true88:                                  ; preds = %if.end85
  %63 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6568
  %64 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6569
  %65 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6570
  %call89 = call zeroext i8 @swap_commutative_operands_with_target(%struct.rtx_def* %63, %struct.rtx_def* %64, %struct.rtx_def* %65), !dbg !6571
  %conv90 = zext i8 %call89 to i32, !dbg !6571
  %tobool91 = icmp ne i32 %conv90, 0, !dbg !6571
  br i1 %tobool91, label %if.then92, label %if.end93, !dbg !6572

if.then92:                                        ; preds = %land.lhs.true88
  %66 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6573
  store %struct.rtx_def* %66, %struct.rtx_def** %swap, align 8, !dbg !6575
  %67 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6576
  store %struct.rtx_def* %67, %struct.rtx_def** %xop1, align 8, !dbg !6577
  %68 = load %struct.rtx_def*, %struct.rtx_def** %swap, align 8, !dbg !6578
  store %struct.rtx_def* %68, %struct.rtx_def** %xop0, align 8, !dbg !6579
  br label %if.end93, !dbg !6580

if.end93:                                         ; preds = %if.then92, %land.lhs.true88, %if.end85
  %69 = load i32, i32* %icode, align 4, !dbg !6581
  %idxprom94 = sext i32 %69 to i64, !dbg !6583
  %arrayidx95 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom94, !dbg !6583
  %operand96 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx95, i32 0, i32 3, !dbg !6584
  %70 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand96, align 8, !dbg !6584
  %arrayidx97 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %70, i64 1, !dbg !6583
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx97, i32 0, i32 0, !dbg !6585
  %71 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !6585
  %72 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6586
  %73 = load i32, i32* %mode0, align 4, !dbg !6587
  %call98 = call i32 %71(%struct.rtx_def* %72, i32 %73), !dbg !6583
  %tobool99 = icmp ne i32 %call98, 0, !dbg !6583
  br i1 %tobool99, label %if.end105, label %land.lhs.true100, !dbg !6588

land.lhs.true100:                                 ; preds = %if.end93
  %74 = load i32, i32* %mode0, align 4, !dbg !6589
  %cmp101 = icmp ne i32 %74, 0, !dbg !6590
  br i1 %cmp101, label %if.then103, label %if.end105, !dbg !6591

if.then103:                                       ; preds = %land.lhs.true100
  %75 = load i32, i32* %mode0, align 4, !dbg !6592
  %76 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6593
  %call104 = call %struct.rtx_def* @copy_to_mode_reg(i32 %75, %struct.rtx_def* %76), !dbg !6594
  store %struct.rtx_def* %call104, %struct.rtx_def** %xop0, align 8, !dbg !6595
  br label %if.end105, !dbg !6596

if.end105:                                        ; preds = %if.then103, %land.lhs.true100, %if.end93
  %77 = load i32, i32* %icode, align 4, !dbg !6597
  %idxprom106 = sext i32 %77 to i64, !dbg !6599
  %arrayidx107 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom106, !dbg !6599
  %operand108 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx107, i32 0, i32 3, !dbg !6600
  %78 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand108, align 8, !dbg !6600
  %arrayidx109 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %78, i64 2, !dbg !6599
  %predicate110 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx109, i32 0, i32 0, !dbg !6601
  %79 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate110, align 8, !dbg !6601
  %80 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6602
  %81 = load i32, i32* %mode1, align 4, !dbg !6603
  %call111 = call i32 %79(%struct.rtx_def* %80, i32 %81), !dbg !6599
  %tobool112 = icmp ne i32 %call111, 0, !dbg !6599
  br i1 %tobool112, label %if.end118, label %land.lhs.true113, !dbg !6604

land.lhs.true113:                                 ; preds = %if.end105
  %82 = load i32, i32* %mode1, align 4, !dbg !6605
  %cmp114 = icmp ne i32 %82, 0, !dbg !6606
  br i1 %cmp114, label %if.then116, label %if.end118, !dbg !6607

if.then116:                                       ; preds = %land.lhs.true113
  %83 = load i32, i32* %mode1, align 4, !dbg !6608
  %84 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6609
  %call117 = call %struct.rtx_def* @copy_to_mode_reg(i32 %83, %struct.rtx_def* %84), !dbg !6610
  store %struct.rtx_def* %call117, %struct.rtx_def** %xop1, align 8, !dbg !6611
  br label %if.end118, !dbg !6612

if.end118:                                        ; preds = %if.then116, %land.lhs.true113, %if.end105
  %85 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6613
  %cmp119 = icmp eq %struct.optab_d* %85, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 153), !dbg !6615
  br i1 %cmp119, label %if.then132, label %lor.lhs.false, !dbg !6616

lor.lhs.false:                                    ; preds = %if.end118
  %86 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6617
  %cmp121 = icmp eq %struct.optab_d* %86, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 154), !dbg !6618
  br i1 %cmp121, label %if.then132, label %lor.lhs.false123, !dbg !6619

lor.lhs.false123:                                 ; preds = %lor.lhs.false
  %87 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6620
  %cmp124 = icmp eq %struct.optab_d* %87, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 155), !dbg !6621
  br i1 %cmp124, label %if.then132, label %lor.lhs.false126, !dbg !6622

lor.lhs.false126:                                 ; preds = %lor.lhs.false123
  %88 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6623
  %cmp127 = icmp eq %struct.optab_d* %88, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 157), !dbg !6624
  br i1 %cmp127, label %if.then132, label %lor.lhs.false129, !dbg !6625

lor.lhs.false129:                                 ; preds = %lor.lhs.false126
  %89 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6626
  %cmp130 = icmp eq %struct.optab_d* %89, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 156), !dbg !6627
  br i1 %cmp130, label %if.then132, label %if.else150, !dbg !6628

if.then132:                                       ; preds = %lor.lhs.false129, %lor.lhs.false126, %lor.lhs.false123, %lor.lhs.false, %if.end118
  %90 = load i32, i32* %icode, align 4, !dbg !6629
  %idxprom133 = sext i32 %90 to i64, !dbg !6631
  %arrayidx134 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom133, !dbg !6631
  %operand135 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx134, i32 0, i32 3, !dbg !6632
  %91 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand135, align 8, !dbg !6632
  %arrayidx136 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %91, i64 0, !dbg !6631
  %mode137 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx136, i32 0, i32 2, !dbg !6633
  %bf.load138 = load i16, i16* %mode137, align 8, !dbg !6633
  %bf.cast139 = zext i16 %bf.load138 to i32, !dbg !6633
  store i32 %bf.cast139, i32* %tmp_mode, align 4, !dbg !6634
  %92 = load i32, i32* %tmp_mode, align 4, !dbg !6635
  %idxprom140 = zext i32 %92 to i64, !dbg !6635
  %arrayidx141 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom140, !dbg !6635
  %93 = load i8, i8* %arrayidx141, align 1, !dbg !6635
  %conv142 = zext i8 %93 to i32, !dbg !6635
  %94 = load i32, i32* %mode.addr, align 4, !dbg !6637
  %idxprom143 = zext i32 %94 to i64, !dbg !6637
  %arrayidx144 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_nunits, i64 0, i64 %idxprom143, !dbg !6637
  %95 = load i8, i8* %arrayidx144, align 1, !dbg !6637
  %conv145 = zext i8 %95 to i32, !dbg !6637
  %mul = mul nsw i32 2, %conv145, !dbg !6638
  %cmp146 = icmp ne i32 %conv142, %mul, !dbg !6639
  br i1 %cmp146, label %if.then148, label %if.end149, !dbg !6640

if.then148:                                       ; preds = %if.then132
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6641
  br label %return, !dbg !6641

if.end149:                                        ; preds = %if.then132
  br label %if.end151, !dbg !6642

if.else150:                                       ; preds = %lor.lhs.false129
  %96 = load i32, i32* %mode.addr, align 4, !dbg !6643
  store i32 %96, i32* %tmp_mode, align 4, !dbg !6644
  br label %if.end151

if.end151:                                        ; preds = %if.else150, %if.end149
  %97 = load i32, i32* %icode, align 4, !dbg !6645
  %idxprom152 = sext i32 %97 to i64, !dbg !6647
  %arrayidx153 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom152, !dbg !6647
  %operand154 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx153, i32 0, i32 3, !dbg !6648
  %98 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand154, align 8, !dbg !6648
  %arrayidx155 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %98, i64 0, !dbg !6647
  %predicate156 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx155, i32 0, i32 0, !dbg !6649
  %99 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate156, align 8, !dbg !6649
  %100 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6650
  %101 = load i32, i32* %tmp_mode, align 4, !dbg !6651
  %call157 = call i32 %99(%struct.rtx_def* %100, i32 %101), !dbg !6647
  %tobool158 = icmp ne i32 %call157, 0, !dbg !6647
  br i1 %tobool158, label %if.end161, label %if.then159, !dbg !6652

if.then159:                                       ; preds = %if.end151
  %102 = load i32, i32* %tmp_mode, align 4, !dbg !6653
  %call160 = call %struct.rtx_def* @gen_reg_rtx(i32 %102), !dbg !6654
  store %struct.rtx_def* %call160, %struct.rtx_def** %temp, align 8, !dbg !6655
  br label %if.end161, !dbg !6656

if.end161:                                        ; preds = %if.then159, %if.end151
  %103 = load i32, i32* %icode, align 4, !dbg !6657
  %idxprom162 = sext i32 %103 to i64, !dbg !6657
  %arrayidx163 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom162, !dbg !6657
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx163, i32 0, i32 2, !dbg !6657
  %104 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !6657
  %105 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6658
  %106 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6659
  %107 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6660
  %call164 = call %struct.rtx_def* (%struct.rtx_def*, ...) %104(%struct.rtx_def* %105, %struct.rtx_def* %106, %struct.rtx_def* %107), !dbg !6657
  store %struct.rtx_def* %call164, %struct.rtx_def** %pat, align 8, !dbg !6661
  %108 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6662
  %tobool165 = icmp ne %struct.rtx_def* %108, null, !dbg !6662
  br i1 %tobool165, label %if.then166, label %if.end197, !dbg !6664

if.then166:                                       ; preds = %if.end161
  %109 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6665
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !6665
  %bf.load167 = load i32, i32* %110, align 8, !dbg !6665
  %bf.clear168 = and i32 %bf.load167, 65535, !dbg !6665
  %cmp169 = icmp eq i32 %bf.clear168, 8, !dbg !6665
  br i1 %cmp169, label %land.lhs.true186, label %lor.lhs.false171, !dbg !6665

lor.lhs.false171:                                 ; preds = %if.then166
  %111 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6665
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !6665
  %bf.load172 = load i32, i32* %112, align 8, !dbg !6665
  %bf.clear173 = and i32 %bf.load172, 65535, !dbg !6665
  %cmp174 = icmp eq i32 %bf.clear173, 7, !dbg !6665
  br i1 %cmp174, label %land.lhs.true186, label %lor.lhs.false176, !dbg !6665

lor.lhs.false176:                                 ; preds = %lor.lhs.false171
  %113 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6665
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !6665
  %bf.load177 = load i32, i32* %114, align 8, !dbg !6665
  %bf.clear178 = and i32 %bf.load177, 65535, !dbg !6665
  %cmp179 = icmp eq i32 %bf.clear178, 9, !dbg !6665
  br i1 %cmp179, label %land.lhs.true186, label %lor.lhs.false181, !dbg !6665

lor.lhs.false181:                                 ; preds = %lor.lhs.false176
  %115 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6665
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !6665
  %bf.load182 = load i32, i32* %116, align 8, !dbg !6665
  %bf.clear183 = and i32 %bf.load182, 65535, !dbg !6665
  %cmp184 = icmp eq i32 %bf.clear183, 10, !dbg !6665
  br i1 %cmp184, label %land.lhs.true186, label %if.end195, !dbg !6668

land.lhs.true186:                                 ; preds = %lor.lhs.false181, %lor.lhs.false176, %lor.lhs.false171, %if.then166
  %117 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6669
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !6669
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6669
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6669
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtx_def**, !dbg !6669
  %118 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6669
  %cmp188 = icmp ne %struct.rtx_def* %118, null, !dbg !6670
  br i1 %cmp188, label %land.lhs.true190, label %if.end195, !dbg !6671

land.lhs.true190:                                 ; preds = %land.lhs.true186
  %119 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6672
  %120 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6673
  %121 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6674
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %121, i32 0, i32 0, !dbg !6675
  %122 = load i32, i32* %code, align 8, !dbg !6675
  %123 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !6676
  %124 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !6677
  %call191 = call i32 @add_equal_note(%struct.rtx_def* %119, %struct.rtx_def* %120, i32 %122, %struct.rtx_def* %123, %struct.rtx_def* %124), !dbg !6678
  %tobool192 = icmp ne i32 %call191, 0, !dbg !6678
  br i1 %tobool192, label %if.end195, label %if.then193, !dbg !6679

if.then193:                                       ; preds = %land.lhs.true190
  %125 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !6680
  call void @delete_insns_since(%struct.rtx_def* %125), !dbg !6682
  %126 = load i32, i32* %mode.addr, align 4, !dbg !6683
  %127 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6684
  %128 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6685
  %129 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6686
  %130 = load i32, i32* %unsignedp.addr, align 4, !dbg !6687
  %131 = load i32, i32* %methods.addr, align 4, !dbg !6688
  %call194 = call %struct.rtx_def* @expand_binop(i32 %126, %struct.optab_d* %127, %struct.rtx_def* %128, %struct.rtx_def* %129, %struct.rtx_def* null, i32 %130, i32 %131), !dbg !6689
  store %struct.rtx_def* %call194, %struct.rtx_def** %retval, align 8, !dbg !6690
  br label %return, !dbg !6690

if.end195:                                        ; preds = %land.lhs.true190, %land.lhs.true186, %lor.lhs.false181
  %132 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6691
  %call196 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %132), !dbg !6692
  %133 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6693
  store %struct.rtx_def* %133, %struct.rtx_def** %retval, align 8, !dbg !6694
  br label %return, !dbg !6694

if.end197:                                        ; preds = %if.end161
  %134 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !6695
  call void @delete_insns_since(%struct.rtx_def* %134), !dbg !6696
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6697
  br label %return, !dbg !6697

return:                                           ; preds = %if.end197, %if.end195, %if.then193, %if.then148
  %135 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6698
  ret %struct.rtx_def* %135, !dbg !6698
}

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @avoid_expensive_constant(i32 %mode, %struct.optab_d* %binoptab, %struct.rtx_def* %x, i8 zeroext %unsignedp) #0 !dbg !6699 {
entry:
  %mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i8, align 1
  %speed = alloca i8, align 1
  %intval = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6702, metadata !DIExpression()), !dbg !6703
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !6704, metadata !DIExpression()), !dbg !6705
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6706, metadata !DIExpression()), !dbg !6707
  store i8 %unsignedp, i8* %unsignedp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unsignedp.addr, metadata !6708, metadata !DIExpression()), !dbg !6709
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !6710, metadata !DIExpression()), !dbg !6711
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !6712
  store i8 %call, i8* %speed, align 1, !dbg !6711
  %0 = load i32, i32* %mode.addr, align 4, !dbg !6713
  %cmp = icmp ne i32 %0, 0, !dbg !6715
  br i1 %cmp, label %land.lhs.true, label %if.end22, !dbg !6716

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @optimize, align 4, !dbg !6717
  %tobool = icmp ne i32 %1, 0, !dbg !6717
  br i1 %tobool, label %land.lhs.true1, label %if.end22, !dbg !6718

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6719
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6719
  %bf.load = load i32, i32* %3, align 8, !dbg !6719
  %bf.clear = and i32 %bf.load, 65535, !dbg !6719
  %idxprom = sext i32 %bf.clear to i64, !dbg !6719
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !6719
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6719
  %cmp2 = icmp eq i32 %4, 9, !dbg !6719
  br i1 %cmp2, label %land.lhs.true3, label %if.end22, !dbg !6720

land.lhs.true3:                                   ; preds = %land.lhs.true1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6721
  %6 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6722
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %6, i32 0, i32 0, !dbg !6723
  %7 = load i32, i32* %code, align 8, !dbg !6723
  %8 = load i8, i8* %speed, align 1, !dbg !6724
  %call4 = call i32 @rtx_cost(%struct.rtx_def* %5, i32 %7, i8 zeroext %8), !dbg !6725
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6726
  %10 = load i8, i8* %speed, align 1, !dbg !6727
  %call5 = call i32 @rtx_cost(%struct.rtx_def* %9, i32 23, i8 zeroext %10), !dbg !6728
  %cmp6 = icmp sgt i32 %call4, %call5, !dbg !6729
  br i1 %cmp6, label %if.then, label %if.end22, !dbg !6730

if.then:                                          ; preds = %land.lhs.true3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6731
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6731
  %bf.load7 = load i32, i32* %12, align 8, !dbg !6731
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6731
  %cmp9 = icmp eq i32 %bf.clear8, 30, !dbg !6731
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !6734

if.then10:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %intval, metadata !6735, metadata !DIExpression()), !dbg !6737
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6738
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !6738
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !6738
  %arrayidx11 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6738
  %14 = load i64, i64* %arrayidx11, align 8, !dbg !6738
  %15 = load i32, i32* %mode.addr, align 4, !dbg !6739
  %call12 = call i64 @trunc_int_for_mode(i64 %14, i32 %15), !dbg !6740
  store i64 %call12, i64* %intval, align 8, !dbg !6737
  %16 = load i64, i64* %intval, align 8, !dbg !6741
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6743
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !6743
  %hwint14 = bitcast %union.u* %u13 to [1 x i64]*, !dbg !6743
  %arrayidx15 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint14, i64 0, i64 0, !dbg !6743
  %18 = load i64, i64* %arrayidx15, align 8, !dbg !6743
  %cmp16 = icmp ne i64 %16, %18, !dbg !6744
  br i1 %cmp16, label %if.then17, label %if.end, !dbg !6745

if.then17:                                        ; preds = %if.then10
  %19 = load i64, i64* %intval, align 8, !dbg !6746
  %call18 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %19), !dbg !6746
  store %struct.rtx_def* %call18, %struct.rtx_def** %x.addr, align 8, !dbg !6747
  br label %if.end, !dbg !6748

if.end:                                           ; preds = %if.then17, %if.then10
  br label %if.end20, !dbg !6749

if.else:                                          ; preds = %if.then
  %20 = load i32, i32* %mode.addr, align 4, !dbg !6750
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6751
  %22 = load i8, i8* %unsignedp.addr, align 1, !dbg !6752
  %conv = zext i8 %22 to i32, !dbg !6752
  %call19 = call %struct.rtx_def* @convert_modes(i32 %20, i32 0, %struct.rtx_def* %21, i32 %conv), !dbg !6753
  store %struct.rtx_def* %call19, %struct.rtx_def** %x.addr, align 8, !dbg !6754
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.end
  %23 = load i32, i32* %mode.addr, align 4, !dbg !6755
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6756
  %call21 = call %struct.rtx_def* @force_reg(i32 %23, %struct.rtx_def* %24), !dbg !6757
  store %struct.rtx_def* %call21, %struct.rtx_def** %x.addr, align 8, !dbg !6758
  br label %if.end22, !dbg !6759

if.end22:                                         ; preds = %if.end20, %land.lhs.true3, %land.lhs.true1, %land.lhs.true, %entry
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6760
  ret %struct.rtx_def* %25, !dbg !6761
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @widen_operand(%struct.rtx_def* %op, i32 %mode, i32 %oldmode, i32 %unsignedp, i32 %no_extend) #0 !dbg !6762 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %op.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %oldmode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %no_extend.addr = alloca i32, align 4
  %result = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op.addr, metadata !6765, metadata !DIExpression()), !dbg !6766
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6767, metadata !DIExpression()), !dbg !6768
  store i32 %oldmode, i32* %oldmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oldmode.addr, metadata !6769, metadata !DIExpression()), !dbg !6770
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !6771, metadata !DIExpression()), !dbg !6772
  store i32 %no_extend, i32* %no_extend.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %no_extend.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !6775, metadata !DIExpression()), !dbg !6776
  %0 = load i32, i32* %no_extend.addr, align 4, !dbg !6777
  %tobool = icmp ne i32 %0, 0, !dbg !6777
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6779

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6780
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6780
  %bf.load = load i32, i32* %2, align 8, !dbg !6780
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6780
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6780
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !6781
  br i1 %cmp, label %if.then, label %if.end, !dbg !6782

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6783
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !6784
  br label %return, !dbg !6784

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %no_extend.addr, align 4, !dbg !6785
  %tobool1 = icmp ne i32 %4, 0, !dbg !6785
  br i1 %tobool1, label %lor.lhs.false, label %if.then19, !dbg !6787

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6788
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !6788
  %bf.load2 = load i32, i32* %6, align 8, !dbg !6788
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !6788
  %cmp4 = icmp eq i32 %bf.clear3, 39, !dbg !6789
  br i1 %cmp4, label %land.lhs.true5, label %if.end20, !dbg !6790

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6791
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6791
  %bf.load6 = load i32, i32* %8, align 8, !dbg !6791
  %bf.lshr7 = lshr i32 %bf.load6, 28, !dbg !6791
  %bf.clear8 = and i32 %bf.lshr7, 1, !dbg !6791
  %tobool9 = icmp ne i32 %bf.clear8, 0, !dbg !6791
  br i1 %tobool9, label %land.lhs.true10, label %if.end20, !dbg !6792

land.lhs.true10:                                  ; preds = %land.lhs.true5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6793
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6793
  %bf.load11 = load i32, i32* %10, align 8, !dbg !6793
  %bf.lshr12 = lshr i32 %bf.load11, 27, !dbg !6793
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !6793
  %tobool14 = icmp ne i32 %bf.clear13, 0, !dbg !6793
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !6793

cond.true:                                        ; preds = %land.lhs.true10
  br label %cond.end, !dbg !6793

cond.false:                                       ; preds = %land.lhs.true10
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6793
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6793
  %bf.load15 = load i32, i32* %12, align 8, !dbg !6793
  %bf.lshr16 = lshr i32 %bf.load15, 26, !dbg !6793
  %bf.clear17 = and i32 %bf.lshr16, 1, !dbg !6793
  br label %cond.end, !dbg !6793

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %bf.clear17, %cond.false ], !dbg !6793
  %13 = load i32, i32* %unsignedp.addr, align 4, !dbg !6794
  %cmp18 = icmp eq i32 %cond, %13, !dbg !6795
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !6796

if.then19:                                        ; preds = %cond.end, %if.end
  %14 = load i32, i32* %mode.addr, align 4, !dbg !6797
  %15 = load i32, i32* %oldmode.addr, align 4, !dbg !6798
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6799
  %17 = load i32, i32* %unsignedp.addr, align 4, !dbg !6800
  %call = call %struct.rtx_def* @convert_modes(i32 %14, i32 %15, %struct.rtx_def* %16, i32 %17), !dbg !6801
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !6802
  br label %return, !dbg !6802

if.end20:                                         ; preds = %cond.end, %land.lhs.true5, %lor.lhs.false
  %18 = load i32, i32* %mode.addr, align 4, !dbg !6803
  %idxprom = zext i32 %18 to i64, !dbg !6803
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6803
  %19 = load i8, i8* %arrayidx, align 1, !dbg !6803
  %conv = zext i8 %19 to i16, !dbg !6803
  %conv21 = zext i16 %conv to i32, !dbg !6803
  %cmp22 = icmp sle i32 %conv21, 4, !dbg !6805
  br i1 %cmp22, label %if.then24, label %if.end30, !dbg !6806

if.then24:                                        ; preds = %if.end20
  %20 = load i32, i32* %mode.addr, align 4, !dbg !6807
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6808
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !6808
  %bf.load25 = load i32, i32* %22, align 8, !dbg !6808
  %bf.lshr26 = lshr i32 %bf.load25, 16, !dbg !6808
  %bf.clear27 = and i32 %bf.lshr26, 255, !dbg !6808
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6809
  %call28 = call %struct.rtx_def* @force_reg(i32 %bf.clear27, %struct.rtx_def* %23), !dbg !6810
  %call29 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %20, %struct.rtx_def* %call28, i32 0), !dbg !6811
  store %struct.rtx_def* %call29, %struct.rtx_def** %retval, align 8, !dbg !6812
  br label %return, !dbg !6812

if.end30:                                         ; preds = %if.end20
  %24 = load i32, i32* %mode.addr, align 4, !dbg !6813
  %call31 = call %struct.rtx_def* @gen_reg_rtx(i32 %24), !dbg !6814
  store %struct.rtx_def* %call31, %struct.rtx_def** %result, align 8, !dbg !6815
  %25 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6816
  %call32 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %25), !dbg !6817
  %26 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !6818
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6819
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6819
  %bf.load33 = load i32, i32* %28, align 8, !dbg !6819
  %bf.lshr34 = lshr i32 %bf.load33, 16, !dbg !6819
  %bf.clear35 = and i32 %bf.lshr34, 255, !dbg !6819
  %29 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6820
  %call36 = call %struct.rtx_def* %26(i32 %bf.clear35, %struct.rtx_def* %29), !dbg !6818
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6821
  %call37 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call36, %struct.rtx_def* %30), !dbg !6822
  %31 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6823
  store %struct.rtx_def* %31, %struct.rtx_def** %retval, align 8, !dbg !6824
  br label %return, !dbg !6824

return:                                           ; preds = %if.end30, %if.then24, %if.then19, %if.then
  %32 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6825
  ret %struct.rtx_def* %32, !dbg !6825
}

declare dso_local void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @delete_insns_since(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @commutative_optab_p(%struct.optab_d* %binoptab) #0 !dbg !6826 {
entry:
  %binoptab.addr = alloca %struct.optab_d*, align 8
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !6829, metadata !DIExpression()), !dbg !6830
  %0 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6831
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %0, i32 0, i32 0, !dbg !6831
  %1 = load i32, i32* %code, align 8, !dbg !6831
  %idxprom = sext i32 %1 to i64, !dbg !6831
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !6831
  %2 = load i32, i32* %arrayidx, align 4, !dbg !6831
  %cmp = icmp eq i32 %2, 3, !dbg !6832
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6833

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6834
  %cmp1 = icmp eq %struct.optab_d* %3, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), !dbg !6835
  br i1 %cmp1, label %lor.end, label %lor.lhs.false2, !dbg !6836

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6837
  %cmp3 = icmp eq %struct.optab_d* %4, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), !dbg !6838
  br i1 %cmp3, label %lor.end, label %lor.lhs.false4, !dbg !6839

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6840
  %cmp5 = icmp eq %struct.optab_d* %5, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 18), !dbg !6841
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !6842

lor.rhs:                                          ; preds = %lor.lhs.false4
  %6 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6843
  %cmp6 = icmp eq %struct.optab_d* %6, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 19), !dbg !6844
  br label %lor.end, !dbg !6842

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %7 = phi i1 [ true, %lor.lhs.false4 ], [ true, %lor.lhs.false2 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %7 to i32, !dbg !6842
  %conv = trunc i32 %lor.ext to i8, !dbg !6845
  ret i8 %conv, !dbg !6846
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @swap_commutative_operands_with_target(%struct.rtx_def* %target, %struct.rtx_def* %op0, %struct.rtx_def* %op1) #0 !dbg !6847 {
entry:
  %retval = alloca i8, align 1
  %target.addr = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %op0_prec = alloca i32, align 4
  %op1_prec = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !6850, metadata !DIExpression()), !dbg !6851
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !6852, metadata !DIExpression()), !dbg !6853
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !6854, metadata !DIExpression()), !dbg !6855
  call void @llvm.dbg.declare(metadata i32* %op0_prec, metadata !6856, metadata !DIExpression()), !dbg !6857
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6858
  %call = call i32 @commutative_operand_precedence(%struct.rtx_def* %0), !dbg !6859
  store i32 %call, i32* %op0_prec, align 4, !dbg !6857
  call void @llvm.dbg.declare(metadata i32* %op1_prec, metadata !6860, metadata !DIExpression()), !dbg !6861
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6862
  %call1 = call i32 @commutative_operand_precedence(%struct.rtx_def* %1), !dbg !6863
  store i32 %call1, i32* %op1_prec, align 4, !dbg !6861
  %2 = load i32, i32* %op0_prec, align 4, !dbg !6864
  %3 = load i32, i32* %op1_prec, align 4, !dbg !6866
  %cmp = icmp slt i32 %2, %3, !dbg !6867
  br i1 %cmp, label %if.then, label %if.end, !dbg !6868

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6869
  br label %return, !dbg !6869

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %op0_prec, align 4, !dbg !6870
  %5 = load i32, i32* %op1_prec, align 4, !dbg !6872
  %cmp2 = icmp sgt i32 %4, %5, !dbg !6873
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !6874

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6875
  br label %return, !dbg !6875

if.end4:                                          ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6876
  %cmp5 = icmp eq %struct.rtx_def* %6, null, !dbg !6878
  br i1 %cmp5, label %if.then7, label %lor.lhs.false, !dbg !6879

lor.lhs.false:                                    ; preds = %if.end4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6880
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6880
  %bf.load = load i32, i32* %8, align 8, !dbg !6880
  %bf.clear = and i32 %bf.load, 65535, !dbg !6880
  %cmp6 = icmp eq i32 %bf.clear, 37, !dbg !6880
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !6881

if.then7:                                         ; preds = %lor.lhs.false, %if.end4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6882
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6882
  %bf.load8 = load i32, i32* %10, align 8, !dbg !6882
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !6882
  %cmp10 = icmp eq i32 %bf.clear9, 37, !dbg !6882
  br i1 %cmp10, label %land.lhs.true, label %lor.rhs, !dbg !6883

land.lhs.true:                                    ; preds = %if.then7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !6884
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6884
  %bf.load11 = load i32, i32* %12, align 8, !dbg !6884
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !6884
  %cmp13 = icmp eq i32 %bf.clear12, 37, !dbg !6884
  br i1 %cmp13, label %lor.rhs, label %lor.end, !dbg !6885

lor.rhs:                                          ; preds = %land.lhs.true, %if.then7
  %13 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6886
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6887
  %cmp14 = icmp eq %struct.rtx_def* %13, %14, !dbg !6888
  br label %lor.end, !dbg !6885

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true
  %15 = phi i1 [ true, %land.lhs.true ], [ %cmp14, %lor.rhs ]
  %lor.ext = zext i1 %15 to i32, !dbg !6885
  %conv = trunc i32 %lor.ext to i8, !dbg !6889
  store i8 %conv, i8* %retval, align 1, !dbg !6890
  br label %return, !dbg !6890

if.else:                                          ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6891
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !6892
  %call15 = call i32 @rtx_equal_p(%struct.rtx_def* %16, %struct.rtx_def* %17), !dbg !6893
  %conv16 = trunc i32 %call15 to i8, !dbg !6893
  store i8 %conv16, i8* %retval, align 1, !dbg !6894
  br label %return, !dbg !6894

return:                                           ; preds = %if.else, %lor.end, %if.then3, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !6895
  ret i8 %18, !dbg !6895
}

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @operand_subword(%struct.rtx_def*, i32, i32, i32) #2

declare dso_local %struct.rtx_def* @operand_subword_force(%struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

declare dso_local zeroext i8 @optimize_insn_for_speed_p() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expand_doubleword_shift(i32 %op1_mode, %struct.optab_d* %binoptab, %struct.rtx_def* %outof_input, %struct.rtx_def* %into_input, %struct.rtx_def* %op1, %struct.rtx_def* %outof_target, %struct.rtx_def* %into_target, i32 %unsignedp, i32 %methods, i64 %shift_mask) #0 !dbg !6896 {
entry:
  %retval = alloca i8, align 1
  %op1_mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %outof_input.addr = alloca %struct.rtx_def*, align 8
  %into_input.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %outof_target.addr = alloca %struct.rtx_def*, align 8
  %into_target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %shift_mask.addr = alloca i64, align 8
  %superword_op1 = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %cmp1 = alloca %struct.rtx_def*, align 8
  %cmp2 = alloca %struct.rtx_def*, align 8
  %subword_label = alloca %struct.rtx_def*, align 8
  %done_label = alloca %struct.rtx_def*, align 8
  %cmp_code = alloca i32, align 4
  %start = alloca %struct.rtx_def*, align 8
  store i32 %op1_mode, i32* %op1_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1_mode.addr, metadata !6899, metadata !DIExpression()), !dbg !6900
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !6901, metadata !DIExpression()), !dbg !6902
  store %struct.rtx_def* %outof_input, %struct.rtx_def** %outof_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_input.addr, metadata !6903, metadata !DIExpression()), !dbg !6904
  store %struct.rtx_def* %into_input, %struct.rtx_def** %into_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_input.addr, metadata !6905, metadata !DIExpression()), !dbg !6906
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !6907, metadata !DIExpression()), !dbg !6908
  store %struct.rtx_def* %outof_target, %struct.rtx_def** %outof_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_target.addr, metadata !6909, metadata !DIExpression()), !dbg !6910
  store %struct.rtx_def* %into_target, %struct.rtx_def** %into_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_target.addr, metadata !6911, metadata !DIExpression()), !dbg !6912
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !6913, metadata !DIExpression()), !dbg !6914
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !6915, metadata !DIExpression()), !dbg !6916
  store i64 %shift_mask, i64* %shift_mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %shift_mask.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %superword_op1, metadata !6919, metadata !DIExpression()), !dbg !6920
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !6921, metadata !DIExpression()), !dbg !6922
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp1, metadata !6923, metadata !DIExpression()), !dbg !6924
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp2, metadata !6925, metadata !DIExpression()), !dbg !6926
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subword_label, metadata !6927, metadata !DIExpression()), !dbg !6928
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %done_label, metadata !6929, metadata !DIExpression()), !dbg !6930
  call void @llvm.dbg.declare(metadata i32* %cmp_code, metadata !6931, metadata !DIExpression()), !dbg !6932
  %0 = load i64, i64* %shift_mask.addr, align 8, !dbg !6933
  %cmp = icmp uge i64 %0, 32, !dbg !6935
  br i1 %cmp, label %land.lhs.true, label %if.end11, !dbg !6936

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !6937
  %cmp3 = icmp ne %struct.rtx_def* %1, null, !dbg !6938
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !6939

land.lhs.true4:                                   ; preds = %land.lhs.true
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6940
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6940
  %bf.load = load i32, i32* %3, align 8, !dbg !6940
  %bf.clear = and i32 %bf.load, 65535, !dbg !6940
  %idxprom = sext i32 %bf.clear to i64, !dbg !6940
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !6940
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6940
  %cmp5 = icmp eq i32 %4, 9, !dbg !6940
  br i1 %cmp5, label %if.end11, label %if.then, !dbg !6941

if.then:                                          ; preds = %land.lhs.true4
  %5 = load i32, i32* %op1_mode.addr, align 4, !dbg !6942
  %6 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6945
  %7 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !6946
  %8 = load %struct.rtx_def*, %struct.rtx_def** %into_input.addr, align 8, !dbg !6947
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6948
  %10 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !6949
  %11 = load i32, i32* %unsignedp.addr, align 4, !dbg !6950
  %12 = load i32, i32* %methods.addr, align 4, !dbg !6951
  %13 = load i64, i64* %shift_mask.addr, align 8, !dbg !6952
  %call = call zeroext i8 @expand_doubleword_shift(i32 %5, %struct.optab_d* %6, %struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* null, %struct.rtx_def* %10, i32 %11, i32 %12, i64 %13), !dbg !6953
  %tobool = icmp ne i8 %call, 0, !dbg !6953
  br i1 %tobool, label %if.end, label %if.then6, !dbg !6954

if.then6:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !6955
  br label %return, !dbg !6955

if.end:                                           ; preds = %if.then
  %14 = load i32, i32* @word_mode, align 4, !dbg !6956
  %15 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !6958
  %16 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !6959
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6960
  %18 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !6961
  %19 = load i32, i32* %unsignedp.addr, align 4, !dbg !6962
  %20 = load i32, i32* %methods.addr, align 4, !dbg !6963
  %call7 = call zeroext i8 @force_expand_binop(i32 %14, %struct.optab_d* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18, i32 %19, i32 %20), !dbg !6964
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6964
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !6965

if.then9:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6966
  br label %return, !dbg !6966

if.end10:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !6967
  br label %return, !dbg !6967

if.end11:                                         ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %21 = load i32, i32* %op1_mode.addr, align 4, !dbg !6968
  %call12 = call %struct.rtx_def* @immed_double_const(i64 32, i64 0, i32 %21), !dbg !6969
  store %struct.rtx_def* %call12, %struct.rtx_def** %tmp, align 8, !dbg !6970
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6971
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6971
  %bf.load13 = load i32, i32* %23, align 8, !dbg !6971
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !6971
  %idxprom15 = sext i32 %bf.clear14 to i64, !dbg !6971
  %arrayidx16 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom15, !dbg !6971
  %24 = load i32, i32* %arrayidx16, align 4, !dbg !6971
  %cmp17 = icmp eq i32 %24, 9, !dbg !6971
  br i1 %cmp17, label %if.else, label %land.lhs.true18, !dbg !6973

land.lhs.true18:                                  ; preds = %if.end11
  %25 = load i64, i64* %shift_mask.addr, align 8, !dbg !6974
  %cmp19 = icmp eq i64 %25, 31, !dbg !6975
  br i1 %cmp19, label %if.then20, label %if.else, !dbg !6976

if.then20:                                        ; preds = %land.lhs.true18
  %26 = load i32, i32* %op1_mode.addr, align 4, !dbg !6977
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6979
  %28 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !6980
  %29 = load i32, i32* %methods.addr, align 4, !dbg !6981
  %call21 = call %struct.rtx_def* @simplify_expand_binop(i32 %26, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %27, %struct.rtx_def* %28, %struct.rtx_def* null, i32 1, i32 %29), !dbg !6982
  store %struct.rtx_def* %call21, %struct.rtx_def** %cmp1, align 8, !dbg !6983
  %30 = load i32, i32* %op1_mode.addr, align 4, !dbg !6984
  %idxprom22 = sext i32 %30 to i64, !dbg !6984
  %arrayidx23 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom22, !dbg !6984
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8, !dbg !6984
  store %struct.rtx_def* %31, %struct.rtx_def** %cmp2, align 8, !dbg !6985
  store i32 81, i32* %cmp_code, align 4, !dbg !6986
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6987
  store %struct.rtx_def* %32, %struct.rtx_def** %superword_op1, align 8, !dbg !6988
  br label %if.end27, !dbg !6989

if.else:                                          ; preds = %land.lhs.true18, %if.end11
  %33 = load i32, i32* %op1_mode.addr, align 4, !dbg !6990
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !6992
  %35 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !6993
  %36 = load i32, i32* %methods.addr, align 4, !dbg !6994
  %call24 = call %struct.rtx_def* @simplify_expand_binop(i32 %33, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* null, i32 1, i32 %36), !dbg !6995
  store %struct.rtx_def* %call24, %struct.rtx_def** %cmp1, align 8, !dbg !6996
  %37 = load i32, i32* %op1_mode.addr, align 4, !dbg !6997
  %idxprom25 = sext i32 %37 to i64, !dbg !6997
  %arrayidx26 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom25, !dbg !6997
  %38 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8, !dbg !6997
  store %struct.rtx_def* %38, %struct.rtx_def** %cmp2, align 8, !dbg !6998
  store i32 85, i32* %cmp_code, align 4, !dbg !6999
  %39 = load %struct.rtx_def*, %struct.rtx_def** %cmp1, align 8, !dbg !7000
  store %struct.rtx_def* %39, %struct.rtx_def** %superword_op1, align 8, !dbg !7001
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then20
  %40 = load %struct.rtx_def*, %struct.rtx_def** %cmp1, align 8, !dbg !7002
  %cmp28 = icmp eq %struct.rtx_def* %40, null, !dbg !7004
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !7005

if.then29:                                        ; preds = %if.end27
  store i8 0, i8* %retval, align 1, !dbg !7006
  br label %return, !dbg !7006

if.end30:                                         ; preds = %if.end27
  %41 = load i32, i32* %cmp_code, align 4, !dbg !7007
  %42 = load i32, i32* %op1_mode.addr, align 4, !dbg !7008
  %43 = load %struct.rtx_def*, %struct.rtx_def** %cmp1, align 8, !dbg !7009
  %44 = load %struct.rtx_def*, %struct.rtx_def** %cmp2, align 8, !dbg !7010
  %call31 = call %struct.rtx_def* @simplify_relational_operation(i32 %41, i32 16, i32 %42, %struct.rtx_def* %43, %struct.rtx_def* %44), !dbg !7011
  store %struct.rtx_def* %call31, %struct.rtx_def** %tmp, align 8, !dbg !7012
  %45 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7013
  %cmp32 = icmp ne %struct.rtx_def* %45, null, !dbg !7015
  br i1 %cmp32, label %land.lhs.true33, label %if.end43, !dbg !7016

land.lhs.true33:                                  ; preds = %if.end30
  %46 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7017
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !7017
  %bf.load34 = load i32, i32* %47, align 8, !dbg !7017
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !7017
  %cmp36 = icmp eq i32 %bf.clear35, 30, !dbg !7017
  br i1 %cmp36, label %if.then37, label %if.end43, !dbg !7018

if.then37:                                        ; preds = %land.lhs.true33
  %48 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7019
  %49 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7022
  %cmp38 = icmp eq %struct.rtx_def* %48, %49, !dbg !7023
  br i1 %cmp38, label %if.then39, label %if.else41, !dbg !7024

if.then39:                                        ; preds = %if.then37
  %50 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7025
  %51 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !7026
  %52 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1, align 8, !dbg !7027
  %53 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !7028
  %54 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !7029
  %55 = load i32, i32* %unsignedp.addr, align 4, !dbg !7030
  %56 = load i32, i32* %methods.addr, align 4, !dbg !7031
  %call40 = call zeroext i8 @expand_superword_shift(%struct.optab_d* %50, %struct.rtx_def* %51, %struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def* %54, i32 %55, i32 %56), !dbg !7032
  store i8 %call40, i8* %retval, align 1, !dbg !7033
  br label %return, !dbg !7033

if.else41:                                        ; preds = %if.then37
  %57 = load i32, i32* %op1_mode.addr, align 4, !dbg !7034
  %58 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7035
  %59 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !7036
  %60 = load %struct.rtx_def*, %struct.rtx_def** %into_input.addr, align 8, !dbg !7037
  %61 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7038
  %62 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !7039
  %63 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !7040
  %64 = load i32, i32* %unsignedp.addr, align 4, !dbg !7041
  %65 = load i32, i32* %methods.addr, align 4, !dbg !7042
  %66 = load i64, i64* %shift_mask.addr, align 8, !dbg !7043
  %call42 = call zeroext i8 @expand_subword_shift(i32 %57, %struct.optab_d* %58, %struct.rtx_def* %59, %struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* %62, %struct.rtx_def* %63, i32 %64, i32 %65, i64 %66), !dbg !7044
  store i8 %call42, i8* %retval, align 1, !dbg !7045
  br label %return, !dbg !7045

if.end43:                                         ; preds = %land.lhs.true33, %if.end30
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start, metadata !7046, metadata !DIExpression()), !dbg !7048
  %call44 = call %struct.rtx_def* @get_last_insn(), !dbg !7049
  store %struct.rtx_def* %call44, %struct.rtx_def** %start, align 8, !dbg !7048
  %67 = load i32, i32* %op1_mode.addr, align 4, !dbg !7050
  %68 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7052
  %69 = load i32, i32* %cmp_code, align 4, !dbg !7053
  %70 = load %struct.rtx_def*, %struct.rtx_def** %cmp1, align 8, !dbg !7054
  %71 = load %struct.rtx_def*, %struct.rtx_def** %cmp2, align 8, !dbg !7055
  %72 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !7056
  %73 = load %struct.rtx_def*, %struct.rtx_def** %into_input.addr, align 8, !dbg !7057
  %74 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7058
  %75 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1, align 8, !dbg !7059
  %76 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !7060
  %77 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !7061
  %78 = load i32, i32* %unsignedp.addr, align 4, !dbg !7062
  %79 = load i32, i32* %methods.addr, align 4, !dbg !7063
  %80 = load i64, i64* %shift_mask.addr, align 8, !dbg !7064
  %call45 = call zeroext i8 @expand_doubleword_shift_condmove(i32 %67, %struct.optab_d* %68, i32 %69, %struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72, %struct.rtx_def* %73, %struct.rtx_def* %74, %struct.rtx_def* %75, %struct.rtx_def* %76, %struct.rtx_def* %77, i32 %78, i32 %79, i64 %80), !dbg !7065
  %tobool46 = icmp ne i8 %call45, 0, !dbg !7065
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !7066

if.then47:                                        ; preds = %if.end43
  store i8 1, i8* %retval, align 1, !dbg !7067
  br label %return, !dbg !7067

if.end48:                                         ; preds = %if.end43
  %81 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8, !dbg !7068
  call void @delete_insns_since(%struct.rtx_def* %81), !dbg !7069
  %call49 = call %struct.rtx_def* @gen_label_rtx(), !dbg !7070
  store %struct.rtx_def* %call49, %struct.rtx_def** %subword_label, align 8, !dbg !7071
  %call50 = call %struct.rtx_def* @gen_label_rtx(), !dbg !7072
  store %struct.rtx_def* %call50, %struct.rtx_def** %done_label, align 8, !dbg !7073
  %82 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !7074
  %add = add nsw i32 %82, 1, !dbg !7074
  store i32 %add, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !7074
  %83 = load %struct.rtx_def*, %struct.rtx_def** %cmp1, align 8, !dbg !7075
  %84 = load %struct.rtx_def*, %struct.rtx_def** %cmp2, align 8, !dbg !7076
  %85 = load i32, i32* %cmp_code, align 4, !dbg !7077
  %86 = load i32, i32* %op1_mode.addr, align 4, !dbg !7078
  %87 = load %struct.rtx_def*, %struct.rtx_def** %subword_label, align 8, !dbg !7079
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %83, %struct.rtx_def* %84, i32 %85, i32 0, i32 %86, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %87, i32 -1), !dbg !7080
  %88 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !7081
  %sub = sub nsw i32 %88, 1, !dbg !7081
  store i32 %sub, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !7081
  %89 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7082
  %90 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !7084
  %91 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1, align 8, !dbg !7085
  %92 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !7086
  %93 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !7087
  %94 = load i32, i32* %unsignedp.addr, align 4, !dbg !7088
  %95 = load i32, i32* %methods.addr, align 4, !dbg !7089
  %call51 = call zeroext i8 @expand_superword_shift(%struct.optab_d* %89, %struct.rtx_def* %90, %struct.rtx_def* %91, %struct.rtx_def* %92, %struct.rtx_def* %93, i32 %94, i32 %95), !dbg !7090
  %tobool52 = icmp ne i8 %call51, 0, !dbg !7090
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !7091

if.then53:                                        ; preds = %if.end48
  store i8 0, i8* %retval, align 1, !dbg !7092
  br label %return, !dbg !7092

if.end54:                                         ; preds = %if.end48
  %96 = load %struct.rtx_def*, %struct.rtx_def** %done_label, align 8, !dbg !7093
  %call55 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %96), !dbg !7094
  %call56 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call55), !dbg !7095
  %call57 = call %struct.rtx_def* @emit_barrier(), !dbg !7096
  %97 = load %struct.rtx_def*, %struct.rtx_def** %subword_label, align 8, !dbg !7097
  %call58 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %97), !dbg !7098
  %98 = load i32, i32* %op1_mode.addr, align 4, !dbg !7099
  %99 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7101
  %100 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !7102
  %101 = load %struct.rtx_def*, %struct.rtx_def** %into_input.addr, align 8, !dbg !7103
  %102 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7104
  %103 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !7105
  %104 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !7106
  %105 = load i32, i32* %unsignedp.addr, align 4, !dbg !7107
  %106 = load i32, i32* %methods.addr, align 4, !dbg !7108
  %107 = load i64, i64* %shift_mask.addr, align 8, !dbg !7109
  %call59 = call zeroext i8 @expand_subword_shift(i32 %98, %struct.optab_d* %99, %struct.rtx_def* %100, %struct.rtx_def* %101, %struct.rtx_def* %102, %struct.rtx_def* %103, %struct.rtx_def* %104, i32 %105, i32 %106, i64 %107), !dbg !7110
  %tobool60 = icmp ne i8 %call59, 0, !dbg !7110
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !7111

if.then61:                                        ; preds = %if.end54
  store i8 0, i8* %retval, align 1, !dbg !7112
  br label %return, !dbg !7112

if.end62:                                         ; preds = %if.end54
  %108 = load %struct.rtx_def*, %struct.rtx_def** %done_label, align 8, !dbg !7113
  %call63 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %108), !dbg !7114
  store i8 1, i8* %retval, align 1, !dbg !7115
  br label %return, !dbg !7115

return:                                           ; preds = %if.end62, %if.then61, %if.then53, %if.then47, %if.else41, %if.then39, %if.then29, %if.end10, %if.then9, %if.then6
  %109 = load i8, i8* %retval, align 1, !dbg !7116
  ret i8 %109, !dbg !7116
}

declare dso_local %struct.rtx_def* @emit_clobber(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_doubleword_mult(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i8 zeroext %umulp, i32 %methods) #0 !dbg !7117 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %umulp.addr = alloca i8, align 1
  %methods.addr = alloca i32, align 4
  %low = alloca i32, align 4
  %high = alloca i32, align 4
  %wordm1 = alloca %struct.rtx_def*, align 8
  %product = alloca %struct.rtx_def*, align 8
  %adjust = alloca %struct.rtx_def*, align 8
  %product_high = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %op0_high = alloca %struct.rtx_def*, align 8
  %op0_low = alloca %struct.rtx_def*, align 8
  %op1_high = alloca %struct.rtx_def*, align 8
  %op1_low = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7120, metadata !DIExpression()), !dbg !7121
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7122, metadata !DIExpression()), !dbg !7123
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !7124, metadata !DIExpression()), !dbg !7125
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7126, metadata !DIExpression()), !dbg !7127
  store i8 %umulp, i8* %umulp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %umulp.addr, metadata !7128, metadata !DIExpression()), !dbg !7129
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !7130, metadata !DIExpression()), !dbg !7131
  call void @llvm.dbg.declare(metadata i32* %low, metadata !7132, metadata !DIExpression()), !dbg !7133
  store i32 0, i32* %low, align 4, !dbg !7133
  call void @llvm.dbg.declare(metadata i32* %high, metadata !7134, metadata !DIExpression()), !dbg !7135
  store i32 1, i32* %high, align 4, !dbg !7135
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %wordm1, metadata !7136, metadata !DIExpression()), !dbg !7137
  %0 = load i8, i8* %umulp.addr, align 1, !dbg !7138
  %conv = zext i8 %0 to i32, !dbg !7138
  %tobool = icmp ne i32 %conv, 0, !dbg !7138
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7138

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !7138

cond.false:                                       ; preds = %entry
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31), !dbg !7139
  br label %cond.end, !dbg !7138

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ null, %cond.true ], [ %call, %cond.false ], !dbg !7138
  store %struct.rtx_def* %cond, %struct.rtx_def** %wordm1, align 8, !dbg !7137
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %product, metadata !7140, metadata !DIExpression()), !dbg !7141
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adjust, metadata !7142, metadata !DIExpression()), !dbg !7143
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %product_high, metadata !7144, metadata !DIExpression()), !dbg !7145
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !7146, metadata !DIExpression()), !dbg !7147
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0_high, metadata !7148, metadata !DIExpression()), !dbg !7149
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7150
  %2 = load i32, i32* %high, align 4, !dbg !7151
  %3 = load i32, i32* %mode.addr, align 4, !dbg !7152
  %call1 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %1, i32 %2, i32 %3), !dbg !7153
  store %struct.rtx_def* %call1, %struct.rtx_def** %op0_high, align 8, !dbg !7149
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0_low, metadata !7154, metadata !DIExpression()), !dbg !7155
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7156
  %5 = load i32, i32* %low, align 4, !dbg !7157
  %6 = load i32, i32* %mode.addr, align 4, !dbg !7158
  %call2 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %4, i32 %5, i32 %6), !dbg !7159
  store %struct.rtx_def* %call2, %struct.rtx_def** %op0_low, align 8, !dbg !7155
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1_high, metadata !7160, metadata !DIExpression()), !dbg !7161
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7162
  %8 = load i32, i32* %high, align 4, !dbg !7163
  %9 = load i32, i32* %mode.addr, align 4, !dbg !7164
  %call3 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %7, i32 %8, i32 %9), !dbg !7165
  store %struct.rtx_def* %call3, %struct.rtx_def** %op1_high, align 8, !dbg !7161
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1_low, metadata !7166, metadata !DIExpression()), !dbg !7167
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7168
  %11 = load i32, i32* %low, align 4, !dbg !7169
  %12 = load i32, i32* %mode.addr, align 4, !dbg !7170
  %call4 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %10, i32 %11, i32 %12), !dbg !7171
  store %struct.rtx_def* %call4, %struct.rtx_def** %op1_low, align 8, !dbg !7167
  %13 = load i8, i8* %umulp.addr, align 1, !dbg !7172
  %tobool5 = icmp ne i8 %13, 0, !dbg !7172
  br i1 %tobool5, label %if.end18, label %if.then, !dbg !7174

if.then:                                          ; preds = %cond.end
  %14 = load i32, i32* @word_mode, align 4, !dbg !7175
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0_low, align 8, !dbg !7177
  %16 = load %struct.rtx_def*, %struct.rtx_def** %wordm1, align 8, !dbg !7178
  %17 = load i32, i32* %methods.addr, align 4, !dbg !7179
  %call6 = call %struct.rtx_def* @expand_binop(i32 %14, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* null, i32 1, i32 %17), !dbg !7180
  store %struct.rtx_def* %call6, %struct.rtx_def** %temp, align 8, !dbg !7181
  %18 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7182
  %tobool7 = icmp ne %struct.rtx_def* %18, null, !dbg !7182
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !7184

if.then8:                                         ; preds = %if.then
  %19 = load i32, i32* @word_mode, align 4, !dbg !7185
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0_high, align 8, !dbg !7186
  %21 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7187
  %call9 = call %struct.rtx_def* @expand_binop(i32 %19, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %20, %struct.rtx_def* %21, %struct.rtx_def* null, i32 0, i32 0), !dbg !7188
  store %struct.rtx_def* %call9, %struct.rtx_def** %op0_high, align 8, !dbg !7189
  br label %if.end14, !dbg !7190

if.else:                                          ; preds = %if.then
  %22 = load i32, i32* @word_mode, align 4, !dbg !7191
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0_low, align 8, !dbg !7193
  %24 = load %struct.rtx_def*, %struct.rtx_def** %wordm1, align 8, !dbg !7194
  %25 = load i32, i32* %methods.addr, align 4, !dbg !7195
  %call10 = call %struct.rtx_def* @expand_binop(i32 %22, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), %struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* null, i32 0, i32 %25), !dbg !7196
  store %struct.rtx_def* %call10, %struct.rtx_def** %temp, align 8, !dbg !7197
  %26 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7198
  %tobool11 = icmp ne %struct.rtx_def* %26, null, !dbg !7198
  br i1 %tobool11, label %if.end, label %if.then12, !dbg !7200

if.then12:                                        ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7201
  br label %return, !dbg !7201

if.end:                                           ; preds = %if.else
  %27 = load i32, i32* @word_mode, align 4, !dbg !7202
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op0_high, align 8, !dbg !7203
  %29 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7204
  %call13 = call %struct.rtx_def* @expand_binop(i32 %27, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* null, i32 0, i32 0), !dbg !7205
  store %struct.rtx_def* %call13, %struct.rtx_def** %op0_high, align 8, !dbg !7206
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then8
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0_high, align 8, !dbg !7207
  %tobool15 = icmp ne %struct.rtx_def* %30, null, !dbg !7207
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !7209

if.then16:                                        ; preds = %if.end14
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7210
  br label %return, !dbg !7210

if.end17:                                         ; preds = %if.end14
  br label %if.end18, !dbg !7211

if.end18:                                         ; preds = %if.end17, %cond.end
  %31 = load i32, i32* @word_mode, align 4, !dbg !7212
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op0_high, align 8, !dbg !7213
  %33 = load %struct.rtx_def*, %struct.rtx_def** %op1_low, align 8, !dbg !7214
  %call19 = call %struct.rtx_def* @expand_binop(i32 %31, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), %struct.rtx_def* %32, %struct.rtx_def* %33, %struct.rtx_def* null, i32 0, i32 0), !dbg !7215
  store %struct.rtx_def* %call19, %struct.rtx_def** %adjust, align 8, !dbg !7216
  %34 = load %struct.rtx_def*, %struct.rtx_def** %adjust, align 8, !dbg !7217
  %tobool20 = icmp ne %struct.rtx_def* %34, null, !dbg !7217
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !7219

if.then21:                                        ; preds = %if.end18
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7220
  br label %return, !dbg !7220

if.end22:                                         ; preds = %if.end18
  %35 = load i8, i8* %umulp.addr, align 1, !dbg !7221
  %tobool23 = icmp ne i8 %35, 0, !dbg !7221
  br i1 %tobool23, label %if.end39, label %if.then24, !dbg !7223

if.then24:                                        ; preds = %if.end22
  %36 = load i32, i32* @word_mode, align 4, !dbg !7224
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op1_low, align 8, !dbg !7226
  %38 = load %struct.rtx_def*, %struct.rtx_def** %wordm1, align 8, !dbg !7227
  %39 = load i32, i32* %methods.addr, align 4, !dbg !7228
  %call25 = call %struct.rtx_def* @expand_binop(i32 %36, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.rtx_def* %37, %struct.rtx_def* %38, %struct.rtx_def* null, i32 1, i32 %39), !dbg !7229
  store %struct.rtx_def* %call25, %struct.rtx_def** %temp, align 8, !dbg !7230
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7231
  %tobool26 = icmp ne %struct.rtx_def* %40, null, !dbg !7231
  br i1 %tobool26, label %if.then27, label %if.else29, !dbg !7233

if.then27:                                        ; preds = %if.then24
  %41 = load i32, i32* @word_mode, align 4, !dbg !7234
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op1_high, align 8, !dbg !7235
  %43 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7236
  %call28 = call %struct.rtx_def* @expand_binop(i32 %41, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %42, %struct.rtx_def* %43, %struct.rtx_def* null, i32 0, i32 0), !dbg !7237
  store %struct.rtx_def* %call28, %struct.rtx_def** %op1_high, align 8, !dbg !7238
  br label %if.end35, !dbg !7239

if.else29:                                        ; preds = %if.then24
  %44 = load i32, i32* @word_mode, align 4, !dbg !7240
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op1_low, align 8, !dbg !7242
  %46 = load %struct.rtx_def*, %struct.rtx_def** %wordm1, align 8, !dbg !7243
  %47 = load i32, i32* %methods.addr, align 4, !dbg !7244
  %call30 = call %struct.rtx_def* @expand_binop(i32 %44, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), %struct.rtx_def* %45, %struct.rtx_def* %46, %struct.rtx_def* null, i32 0, i32 %47), !dbg !7245
  store %struct.rtx_def* %call30, %struct.rtx_def** %temp, align 8, !dbg !7246
  %48 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7247
  %tobool31 = icmp ne %struct.rtx_def* %48, null, !dbg !7247
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !7249

if.then32:                                        ; preds = %if.else29
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7250
  br label %return, !dbg !7250

if.end33:                                         ; preds = %if.else29
  %49 = load i32, i32* @word_mode, align 4, !dbg !7251
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op1_high, align 8, !dbg !7252
  %51 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7253
  %call34 = call %struct.rtx_def* @expand_binop(i32 %49, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %50, %struct.rtx_def* %51, %struct.rtx_def* null, i32 0, i32 0), !dbg !7254
  store %struct.rtx_def* %call34, %struct.rtx_def** %op1_high, align 8, !dbg !7255
  br label %if.end35

if.end35:                                         ; preds = %if.end33, %if.then27
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op1_high, align 8, !dbg !7256
  %tobool36 = icmp ne %struct.rtx_def* %52, null, !dbg !7256
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7258

if.then37:                                        ; preds = %if.end35
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7259
  br label %return, !dbg !7259

if.end38:                                         ; preds = %if.end35
  br label %if.end39, !dbg !7260

if.end39:                                         ; preds = %if.end38, %if.end22
  %53 = load i32, i32* @word_mode, align 4, !dbg !7261
  %54 = load %struct.rtx_def*, %struct.rtx_def** %op1_high, align 8, !dbg !7262
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0_low, align 8, !dbg !7263
  %call40 = call %struct.rtx_def* @expand_binop(i32 %53, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), %struct.rtx_def* %54, %struct.rtx_def* %55, %struct.rtx_def* null, i32 0, i32 0), !dbg !7264
  store %struct.rtx_def* %call40, %struct.rtx_def** %temp, align 8, !dbg !7265
  %56 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7266
  %tobool41 = icmp ne %struct.rtx_def* %56, null, !dbg !7266
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !7268

if.then42:                                        ; preds = %if.end39
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7269
  br label %return, !dbg !7269

if.end43:                                         ; preds = %if.end39
  %57 = load i32, i32* @word_mode, align 4, !dbg !7270
  %58 = load %struct.rtx_def*, %struct.rtx_def** %adjust, align 8, !dbg !7271
  %59 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7272
  %60 = load %struct.rtx_def*, %struct.rtx_def** %adjust, align 8, !dbg !7273
  %call44 = call %struct.rtx_def* @expand_binop(i32 %57, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %58, %struct.rtx_def* %59, %struct.rtx_def* %60, i32 0, i32 0), !dbg !7274
  store %struct.rtx_def* %call44, %struct.rtx_def** %adjust, align 8, !dbg !7275
  %61 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7276
  %tobool45 = icmp ne %struct.rtx_def* %61, null, !dbg !7276
  br i1 %tobool45, label %land.lhs.true, label %if.end48, !dbg !7278

land.lhs.true:                                    ; preds = %if.end43
  %62 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7279
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !7279
  %bf.load = load i32, i32* %63, align 8, !dbg !7279
  %bf.clear = and i32 %bf.load, 65535, !dbg !7279
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !7279
  br i1 %cmp, label %if.end48, label %if.then47, !dbg !7280

if.then47:                                        ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !7281
  br label %if.end48, !dbg !7282

if.end48:                                         ; preds = %if.then47, %land.lhs.true, %if.end43
  %64 = load i8, i8* %umulp.addr, align 1, !dbg !7283
  %tobool49 = icmp ne i8 %64, 0, !dbg !7283
  br i1 %tobool49, label %if.then50, label %if.else52, !dbg !7285

if.then50:                                        ; preds = %if.end48
  %65 = load i32, i32* %mode.addr, align 4, !dbg !7286
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0_low, align 8, !dbg !7287
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op1_low, align 8, !dbg !7288
  %68 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7289
  %call51 = call %struct.rtx_def* @expand_binop(i32 %65, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), %struct.rtx_def* %66, %struct.rtx_def* %67, %struct.rtx_def* %68, i32 1, i32 0), !dbg !7290
  store %struct.rtx_def* %call51, %struct.rtx_def** %product, align 8, !dbg !7291
  br label %if.end54, !dbg !7292

if.else52:                                        ; preds = %if.end48
  %69 = load i32, i32* %mode.addr, align 4, !dbg !7293
  %70 = load %struct.rtx_def*, %struct.rtx_def** %op0_low, align 8, !dbg !7294
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op1_low, align 8, !dbg !7295
  %72 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7296
  %call53 = call %struct.rtx_def* @expand_binop(i32 %69, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), %struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72, i32 1, i32 0), !dbg !7297
  store %struct.rtx_def* %call53, %struct.rtx_def** %product, align 8, !dbg !7298
  br label %if.end54

if.end54:                                         ; preds = %if.else52, %if.then50
  %73 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !7299
  %tobool55 = icmp ne %struct.rtx_def* %73, null, !dbg !7299
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !7301

if.then56:                                        ; preds = %if.end54
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7302
  br label %return, !dbg !7302

if.end57:                                         ; preds = %if.end54
  %74 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !7303
  %75 = load i32, i32* %high, align 4, !dbg !7304
  %76 = load i32, i32* %mode.addr, align 4, !dbg !7305
  %call58 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %74, i32 %75, i32 1, i32 %76), !dbg !7306
  store %struct.rtx_def* %call58, %struct.rtx_def** %product_high, align 8, !dbg !7307
  %77 = load i32, i32* @word_mode, align 4, !dbg !7308
  %78 = load %struct.rtx_def*, %struct.rtx_def** %product_high, align 8, !dbg !7309
  %79 = load %struct.rtx_def*, %struct.rtx_def** %adjust, align 8, !dbg !7310
  %80 = load %struct.rtx_def*, %struct.rtx_def** %product_high, align 8, !dbg !7311
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !7311
  %bf.load59 = load i32, i32* %81, align 8, !dbg !7311
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !7311
  %cmp61 = icmp eq i32 %bf.clear60, 37, !dbg !7311
  br i1 %cmp61, label %cond.true63, label %cond.false64, !dbg !7311

cond.true63:                                      ; preds = %if.end57
  %82 = load %struct.rtx_def*, %struct.rtx_def** %product_high, align 8, !dbg !7312
  br label %cond.end65, !dbg !7311

cond.false64:                                     ; preds = %if.end57
  %83 = load %struct.rtx_def*, %struct.rtx_def** %adjust, align 8, !dbg !7313
  br label %cond.end65, !dbg !7311

cond.end65:                                       ; preds = %cond.false64, %cond.true63
  %cond66 = phi %struct.rtx_def* [ %82, %cond.true63 ], [ %83, %cond.false64 ], !dbg !7311
  %call67 = call %struct.rtx_def* @expand_binop(i32 %77, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %78, %struct.rtx_def* %79, %struct.rtx_def* %cond66, i32 0, i32 0), !dbg !7314
  store %struct.rtx_def* %call67, %struct.rtx_def** %adjust, align 8, !dbg !7315
  %84 = load %struct.rtx_def*, %struct.rtx_def** %product_high, align 8, !dbg !7316
  %85 = load %struct.rtx_def*, %struct.rtx_def** %adjust, align 8, !dbg !7317
  %call68 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %84, %struct.rtx_def* %85), !dbg !7318
  %86 = load %struct.rtx_def*, %struct.rtx_def** %product, align 8, !dbg !7319
  store %struct.rtx_def* %86, %struct.rtx_def** %retval, align 8, !dbg !7320
  br label %return, !dbg !7320

return:                                           ; preds = %cond.end65, %if.then56, %if.then42, %if.then37, %if.then32, %if.then21, %if.then16, %if.then12
  %87 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7321
  ret %struct.rtx_def* %87, !dbg !7321
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @shift_optab_p(%struct.optab_d* %binoptab) #0 !dbg !7322 {
entry:
  %retval = alloca i8, align 1
  %binoptab.addr = alloca %struct.optab_d*, align 8
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !7323, metadata !DIExpression()), !dbg !7324
  %0 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7325
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %0, i32 0, i32 0, !dbg !7326
  %1 = load i32, i32* %code, align 8, !dbg !7326
  switch i32 %1, label %sw.default [
    i32 65, label %sw.bb
    i32 133, label %sw.bb
    i32 134, label %sw.bb
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 66, label %sw.bb
    i32 69, label %sw.bb
  ], !dbg !7327

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !7328
  br label %return, !dbg !7328

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7330
  br label %return, !dbg !7330

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !7331
  ret i8 %2, !dbg !7331
}

declare dso_local %struct.rtx_def* @emit_library_call_value(%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @emit_libcall_block(%struct.rtx_def* %insns, %struct.rtx_def* %target, %struct.rtx_def* %result, %struct.rtx_def* %equiv) #0 !dbg !7332 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %result.addr = alloca %struct.rtx_def*, align 8
  %equiv.addr = alloca %struct.rtx_def*, align 8
  %final_dest = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %lp_nr = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %data = alloca %struct.no_conflict_data, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns.addr, metadata !7335, metadata !DIExpression()), !dbg !7336
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7337, metadata !DIExpression()), !dbg !7338
  store %struct.rtx_def* %result, %struct.rtx_def** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result.addr, metadata !7339, metadata !DIExpression()), !dbg !7340
  store %struct.rtx_def* %equiv, %struct.rtx_def** %equiv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %equiv.addr, metadata !7341, metadata !DIExpression()), !dbg !7342
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %final_dest, metadata !7343, metadata !DIExpression()), !dbg !7344
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7345
  store %struct.rtx_def* %0, %struct.rtx_def** %final_dest, align 8, !dbg !7344
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !7346, metadata !DIExpression()), !dbg !7347
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7348, metadata !DIExpression()), !dbg !7349
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7350, metadata !DIExpression()), !dbg !7351
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7352
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7352
  %bf.load = load i32, i32* %2, align 8, !dbg !7352
  %bf.clear = and i32 %bf.load, 65535, !dbg !7352
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !7352
  br i1 %cmp, label %lor.lhs.false, label %if.then, !dbg !7354

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7355
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7355
  %bf.load1 = load i32, i32* %4, align 8, !dbg !7355
  %bf.lshr = lshr i32 %bf.load1, 27, !dbg !7355
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !7355
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !7355
  br i1 %tobool, label %if.then, label %if.end, !dbg !7356

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7357
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !7357
  %bf.load3 = load i32, i32* %6, align 8, !dbg !7357
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !7357
  %bf.clear5 = and i32 %bf.lshr4, 255, !dbg !7357
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear5), !dbg !7358
  store %struct.rtx_def* %call, %struct.rtx_def** %target.addr, align 8, !dbg !7359
  br label %if.end, !dbg !7360

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %7 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !7361
  %tobool6 = icmp ne i32 %7, 0, !dbg !7361
  br i1 %tobool6, label %land.lhs.true, label %if.else, !dbg !7363

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %equiv.addr, align 8, !dbg !7364
  %call7 = call i32 @may_trap_p(%struct.rtx_def* %8), !dbg !7365
  %tobool8 = icmp ne i32 %call7, 0, !dbg !7365
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !7366

if.then9:                                         ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !7367
  store %struct.rtx_def* %9, %struct.rtx_def** %insn, align 8, !dbg !7370
  br label %for.cond, !dbg !7371

for.cond:                                         ; preds = %for.inc, %if.then9
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7372
  %tobool10 = icmp ne %struct.rtx_def* %10, null, !dbg !7374
  br i1 %tobool10, label %for.body, label %for.end, !dbg !7374

for.body:                                         ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7375
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !7375
  %bf.load11 = load i32, i32* %12, align 8, !dbg !7375
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !7375
  %cmp13 = icmp eq i32 %bf.clear12, 10, !dbg !7375
  br i1 %cmp13, label %if.then14, label %if.end28, !dbg !7377

if.then14:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !7378, metadata !DIExpression()), !dbg !7380
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7381
  %call15 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %13, i32 25, %struct.rtx_def* null), !dbg !7382
  store %struct.rtx_def* %call15, %struct.rtx_def** %note, align 8, !dbg !7380
  %14 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7383
  %tobool16 = icmp ne %struct.rtx_def* %14, null, !dbg !7383
  br i1 %tobool16, label %if.then17, label %if.end27, !dbg !7385

if.then17:                                        ; preds = %if.then14
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !7386, metadata !DIExpression()), !dbg !7388
  %15 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7389
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7389
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7389
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7389
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7389
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7389
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !7389
  %hwint = bitcast %union.u* %u18 to [1 x i64]*, !dbg !7389
  %arrayidx19 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !7389
  %17 = load i64, i64* %arrayidx19, align 8, !dbg !7389
  %conv = trunc i64 %17 to i32, !dbg !7389
  store i32 %conv, i32* %lp_nr, align 4, !dbg !7388
  %18 = load i32, i32* %lp_nr, align 4, !dbg !7390
  %cmp20 = icmp eq i32 %18, 0, !dbg !7392
  br i1 %cmp20, label %if.then25, label %lor.lhs.false22, !dbg !7393

lor.lhs.false22:                                  ; preds = %if.then17
  %19 = load i32, i32* %lp_nr, align 4, !dbg !7394
  %cmp23 = icmp eq i32 %19, -2147483648, !dbg !7395
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !7396

if.then25:                                        ; preds = %lor.lhs.false22, %if.then17
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7397
  %21 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7398
  call void @remove_note(%struct.rtx_def* %20, %struct.rtx_def* %21), !dbg !7399
  br label %if.end26, !dbg !7399

if.end26:                                         ; preds = %if.then25, %lor.lhs.false22
  br label %if.end27, !dbg !7400

if.end27:                                         ; preds = %if.end26, %if.then14
  br label %if.end28, !dbg !7401

if.end28:                                         ; preds = %if.end27, %for.body
  br label %for.inc, !dbg !7375

for.inc:                                          ; preds = %if.end28
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7402
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7402
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7402
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 2, !dbg !7402
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !7402
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !7402
  store %struct.rtx_def* %23, %struct.rtx_def** %insn, align 8, !dbg !7403
  br label %for.cond, !dbg !7404, !llvm.loop !7405

for.end:                                          ; preds = %for.cond
  br label %if.end48, !dbg !7407

if.else:                                          ; preds = %land.lhs.true, %if.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !7408
  store %struct.rtx_def* %24, %struct.rtx_def** %insn, align 8, !dbg !7411
  br label %for.cond33, !dbg !7412

for.cond33:                                       ; preds = %for.inc42, %if.else
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7413
  %tobool34 = icmp ne %struct.rtx_def* %25, null, !dbg !7415
  br i1 %tobool34, label %for.body35, label %for.end47, !dbg !7415

for.body35:                                       ; preds = %for.cond33
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7416
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !7416
  %bf.load36 = load i32, i32* %27, align 8, !dbg !7416
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !7416
  %cmp38 = icmp eq i32 %bf.clear37, 10, !dbg !7416
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !7418

if.then40:                                        ; preds = %for.body35
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7419
  call void @make_reg_eh_region_note_nothrow_nononlocal(%struct.rtx_def* %28), !dbg !7420
  br label %if.end41, !dbg !7420

if.end41:                                         ; preds = %if.then40, %for.body35
  br label %for.inc42, !dbg !7416

for.inc42:                                        ; preds = %if.end41
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7421
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !7421
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !7421
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 2, !dbg !7421
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !7421
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !7421
  store %struct.rtx_def* %30, %struct.rtx_def** %insn, align 8, !dbg !7422
  br label %for.cond33, !dbg !7423, !llvm.loop !7424

for.end47:                                        ; preds = %for.cond33
  br label %if.end48

if.end48:                                         ; preds = %for.end47, %for.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !7426
  store %struct.rtx_def* %31, %struct.rtx_def** %insn, align 8, !dbg !7428
  br label %for.cond49, !dbg !7429

for.cond49:                                       ; preds = %for.inc160, %if.end48
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7430
  %tobool50 = icmp ne %struct.rtx_def* %32, null, !dbg !7432
  br i1 %tobool50, label %for.body51, label %for.end161, !dbg !7432

for.body51:                                       ; preds = %for.cond49
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !7433, metadata !DIExpression()), !dbg !7435
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !7436
  %bf.load52 = load i32, i32* %34, align 8, !dbg !7436
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !7436
  %cmp54 = icmp eq i32 %bf.clear53, 8, !dbg !7436
  br i1 %cmp54, label %cond.true, label %lor.lhs.false56, !dbg !7436

lor.lhs.false56:                                  ; preds = %for.body51
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7436
  %bf.load57 = load i32, i32* %36, align 8, !dbg !7436
  %bf.clear58 = and i32 %bf.load57, 65535, !dbg !7436
  %cmp59 = icmp eq i32 %bf.clear58, 7, !dbg !7436
  br i1 %cmp59, label %cond.true, label %lor.lhs.false61, !dbg !7436

lor.lhs.false61:                                  ; preds = %lor.lhs.false56
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !7436
  %bf.load62 = load i32, i32* %38, align 8, !dbg !7436
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !7436
  %cmp64 = icmp eq i32 %bf.clear63, 9, !dbg !7436
  br i1 %cmp64, label %cond.true, label %lor.lhs.false66, !dbg !7436

lor.lhs.false66:                                  ; preds = %lor.lhs.false61
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !7436
  %bf.load67 = load i32, i32* %40, align 8, !dbg !7436
  %bf.clear68 = and i32 %bf.load67, 65535, !dbg !7436
  %cmp69 = icmp eq i32 %bf.clear68, 10, !dbg !7436
  br i1 %cmp69, label %cond.true, label %cond.false89, !dbg !7436

cond.true:                                        ; preds = %lor.lhs.false66, %lor.lhs.false61, %lor.lhs.false56, %for.body51
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !7436
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !7436
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 5, !dbg !7436
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !7436
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !7436
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !7436
  %bf.load75 = load i32, i32* %43, align 8, !dbg !7436
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !7436
  %cmp77 = icmp eq i32 %bf.clear76, 23, !dbg !7436
  br i1 %cmp77, label %cond.true79, label %cond.false, !dbg !7436

cond.true79:                                      ; preds = %cond.true
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !7436
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !7436
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 5, !dbg !7436
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !7436
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !7436
  br label %cond.end, !dbg !7436

cond.false:                                       ; preds = %cond.true
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7436
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !7436
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !7436
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 5, !dbg !7436
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !7436
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx87, align 8, !dbg !7436
  %call88 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %46, %struct.rtx_def* %48), !dbg !7436
  br label %cond.end, !dbg !7436

cond.end:                                         ; preds = %cond.false, %cond.true79
  %cond = phi %struct.rtx_def* [ %45, %cond.true79 ], [ %call88, %cond.false ], !dbg !7436
  br label %cond.end90, !dbg !7436

cond.false89:                                     ; preds = %lor.lhs.false66
  br label %cond.end90, !dbg !7436

cond.end90:                                       ; preds = %cond.false89, %cond.end
  %cond91 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false89 ], !dbg !7436
  store %struct.rtx_def* %cond91, %struct.rtx_def** %set, align 8, !dbg !7435
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7437
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !7437
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !7437
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 2, !dbg !7437
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !7437
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !7437
  store %struct.rtx_def* %50, %struct.rtx_def** %next, align 8, !dbg !7438
  %51 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !7439
  %cmp96 = icmp ne %struct.rtx_def* %51, null, !dbg !7441
  br i1 %cmp96, label %land.lhs.true98, label %if.end153, !dbg !7442

land.lhs.true98:                                  ; preds = %cond.end90
  %52 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !7443
  %u99 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !7443
  %fld100 = bitcast %union.u* %u99 to [1 x %union.rtunion_def]*, !dbg !7443
  %arrayidx101 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld100, i64 0, i64 0, !dbg !7443
  %rt_rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**, !dbg !7443
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx102, align 8, !dbg !7443
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !7443
  %bf.load103 = load i32, i32* %54, align 8, !dbg !7443
  %bf.clear104 = and i32 %bf.load103, 65535, !dbg !7443
  %cmp105 = icmp eq i32 %bf.clear104, 37, !dbg !7443
  br i1 %cmp105, label %land.lhs.true107, label %if.end153, !dbg !7444

land.lhs.true107:                                 ; preds = %land.lhs.true98
  %55 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !7445
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !7445
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !7445
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 0, !dbg !7445
  %rt_rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**, !dbg !7445
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx111, align 8, !dbg !7445
  %call112 = call i32 @rhs_regno(%struct.rtx_def* %56), !dbg !7445
  %cmp113 = icmp uge i32 %call112, 53, !dbg !7446
  br i1 %cmp113, label %if.then115, label %if.end153, !dbg !7447

if.then115:                                       ; preds = %land.lhs.true107
  call void @llvm.dbg.declare(metadata %struct.no_conflict_data* %data, metadata !7448, metadata !DIExpression()), !dbg !7450
  %57 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7451
  %target116 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %data, i32 0, i32 0, !dbg !7452
  store %struct.rtx_def* %57, %struct.rtx_def** %target116, align 8, !dbg !7453
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !7454
  %first = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %data, i32 0, i32 1, !dbg !7455
  store %struct.rtx_def* %58, %struct.rtx_def** %first, align 8, !dbg !7456
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7457
  %insn117 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %data, i32 0, i32 2, !dbg !7458
  store %struct.rtx_def* %59, %struct.rtx_def** %insn117, align 8, !dbg !7459
  %must_stay = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %data, i32 0, i32 3, !dbg !7460
  store i8 0, i8* %must_stay, align 8, !dbg !7461
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7462
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !7462
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !7462
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 5, !dbg !7462
  %rt_rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**, !dbg !7462
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx121, align 8, !dbg !7462
  %62 = bitcast %struct.no_conflict_data* %data to i8*, !dbg !7463
  call void @note_stores(%struct.rtx_def* %61, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @no_conflict_move_test, i8* %62), !dbg !7464
  %must_stay122 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %data, i32 0, i32 3, !dbg !7465
  %63 = load i8, i8* %must_stay122, align 8, !dbg !7465
  %tobool123 = icmp ne i8 %63, 0, !dbg !7467
  br i1 %tobool123, label %if.end152, label %if.then124, !dbg !7468

if.then124:                                       ; preds = %if.then115
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7469
  %u125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !7469
  %fld126 = bitcast %union.u* %u125 to [1 x %union.rtunion_def]*, !dbg !7469
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i64 0, i64 1, !dbg !7469
  %rt_rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**, !dbg !7469
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx128, align 8, !dbg !7469
  %tobool129 = icmp ne %struct.rtx_def* %65, null, !dbg !7469
  br i1 %tobool129, label %if.then130, label %if.else139, !dbg !7472

if.then130:                                       ; preds = %if.then124
  %66 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7473
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7474
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !7474
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !7474
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 1, !dbg !7474
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !7474
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx134, align 8, !dbg !7474
  %u135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !7474
  %fld136 = bitcast %union.u* %u135 to [1 x %union.rtunion_def]*, !dbg !7474
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i64 0, i64 2, !dbg !7474
  %rt_rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**, !dbg !7474
  store %struct.rtx_def* %66, %struct.rtx_def** %rt_rtx138, align 8, !dbg !7475
  br label %if.end140, !dbg !7474

if.else139:                                       ; preds = %if.then124
  %69 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7476
  store %struct.rtx_def* %69, %struct.rtx_def** %insns.addr, align 8, !dbg !7477
  br label %if.end140

if.end140:                                        ; preds = %if.else139, %if.then130
  %70 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7478
  %tobool141 = icmp ne %struct.rtx_def* %70, null, !dbg !7478
  br i1 %tobool141, label %if.then142, label %if.end151, !dbg !7480

if.then142:                                       ; preds = %if.end140
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7481
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !7481
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !7481
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 1, !dbg !7481
  %rt_rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**, !dbg !7481
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx146, align 8, !dbg !7481
  %73 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7482
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !7482
  %fld148 = bitcast %union.u* %u147 to [1 x %union.rtunion_def]*, !dbg !7482
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i64 0, i64 1, !dbg !7482
  %rt_rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**, !dbg !7482
  store %struct.rtx_def* %72, %struct.rtx_def** %rt_rtx150, align 8, !dbg !7483
  br label %if.end151, !dbg !7482

if.end151:                                        ; preds = %if.then142, %if.end140
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7484
  call void @add_insn(%struct.rtx_def* %74), !dbg !7485
  br label %if.end152, !dbg !7486

if.end152:                                        ; preds = %if.end151, %if.then115
  br label %if.end153, !dbg !7487

if.end153:                                        ; preds = %if.end152, %land.lhs.true107, %land.lhs.true98, %cond.end90
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7488
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !7488
  %bf.load154 = load i32, i32* %76, align 8, !dbg !7488
  %bf.clear155 = and i32 %bf.load154, 65535, !dbg !7488
  %cmp156 = icmp eq i32 %bf.clear155, 12, !dbg !7488
  br i1 %cmp156, label %if.then158, label %if.end159, !dbg !7490

if.then158:                                       ; preds = %if.end153
  br label %for.end161, !dbg !7491

if.end159:                                        ; preds = %if.end153
  br label %for.inc160, !dbg !7492

for.inc160:                                       ; preds = %if.end159
  %77 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7493
  store %struct.rtx_def* %77, %struct.rtx_def** %insn, align 8, !dbg !7494
  br label %for.cond49, !dbg !7495, !llvm.loop !7496

for.end161:                                       ; preds = %if.then158, %for.cond49
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !7498
  store %struct.rtx_def* %78, %struct.rtx_def** %insn, align 8, !dbg !7500
  br label %for.cond162, !dbg !7501

for.cond162:                                      ; preds = %for.inc169, %for.end161
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7502
  %tobool163 = icmp ne %struct.rtx_def* %79, null, !dbg !7504
  br i1 %tobool163, label %for.body164, label %for.end170, !dbg !7504

for.body164:                                      ; preds = %for.cond162
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7505
  %u165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !7505
  %fld166 = bitcast %union.u* %u165 to [1 x %union.rtunion_def]*, !dbg !7505
  %arrayidx167 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld166, i64 0, i64 2, !dbg !7505
  %rt_rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**, !dbg !7505
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx168, align 8, !dbg !7505
  store %struct.rtx_def* %81, %struct.rtx_def** %next, align 8, !dbg !7507
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7508
  call void @add_insn(%struct.rtx_def* %82), !dbg !7509
  br label %for.inc169, !dbg !7510

for.inc169:                                       ; preds = %for.body164
  %83 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !7511
  store %struct.rtx_def* %83, %struct.rtx_def** %insn, align 8, !dbg !7512
  br label %for.cond162, !dbg !7513, !llvm.loop !7514

for.end170:                                       ; preds = %for.cond162
  %84 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7516
  %85 = load %struct.rtx_def*, %struct.rtx_def** %result.addr, align 8, !dbg !7517
  %call171 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %84, %struct.rtx_def* %85), !dbg !7518
  store %struct.rtx_def* %call171, %struct.rtx_def** %last, align 8, !dbg !7519
  %86 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7520
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !7520
  %bf.load172 = load i32, i32* %87, align 8, !dbg !7520
  %bf.lshr173 = lshr i32 %bf.load172, 16, !dbg !7520
  %bf.clear174 = and i32 %bf.lshr173, 255, !dbg !7520
  %idxprom = sext i32 %bf.clear174 to i64, !dbg !7520
  %arrayidx175 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 60, i32 4), i64 0, i64 %idxprom, !dbg !7520
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx175, i32 0, i32 0, !dbg !7522
  %88 = load i32, i32* %insn_code, align 4, !dbg !7522
  %cmp176 = icmp ne i32 %88, 2956, !dbg !7523
  br i1 %cmp176, label %if.then178, label %if.end181, !dbg !7524

if.then178:                                       ; preds = %for.end170
  %89 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7525
  %90 = load %struct.rtx_def*, %struct.rtx_def** %equiv.addr, align 8, !dbg !7526
  %call179 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %90), !dbg !7527
  %call180 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %89, i32 4, %struct.rtx_def* %call179), !dbg !7528
  br label %if.end181, !dbg !7528

if.end181:                                        ; preds = %if.then178, %for.end170
  %91 = load %struct.rtx_def*, %struct.rtx_def** %final_dest, align 8, !dbg !7529
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7531
  %cmp182 = icmp ne %struct.rtx_def* %91, %92, !dbg !7532
  br i1 %cmp182, label %if.then184, label %if.end186, !dbg !7533

if.then184:                                       ; preds = %if.end181
  %93 = load %struct.rtx_def*, %struct.rtx_def** %final_dest, align 8, !dbg !7534
  %94 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7535
  %call185 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %93, %struct.rtx_def* %94), !dbg !7536
  br label %if.end186, !dbg !7536

if.end186:                                        ; preds = %if.then184, %if.end181
  ret void, !dbg !7537
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sign_expand_binop(i32 %mode, %struct.optab_d* %uoptab, %struct.optab_d* %soptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %unsignedp, i32 %methods) #0 !dbg !7538 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %uoptab.addr = alloca %struct.optab_d*, align 8
  %soptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %direct_optab = alloca %struct.optab_d*, align 8
  %wide_soptab = alloca %struct.optab_d, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7541, metadata !DIExpression()), !dbg !7542
  store %struct.optab_d* %uoptab, %struct.optab_d** %uoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %uoptab.addr, metadata !7543, metadata !DIExpression()), !dbg !7544
  store %struct.optab_d* %soptab, %struct.optab_d** %soptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %soptab.addr, metadata !7545, metadata !DIExpression()), !dbg !7546
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7547, metadata !DIExpression()), !dbg !7548
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !7549, metadata !DIExpression()), !dbg !7550
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !7551, metadata !DIExpression()), !dbg !7552
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !7553, metadata !DIExpression()), !dbg !7554
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !7555, metadata !DIExpression()), !dbg !7556
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !7557, metadata !DIExpression()), !dbg !7558
  call void @llvm.dbg.declare(metadata %struct.optab_d** %direct_optab, metadata !7559, metadata !DIExpression()), !dbg !7560
  %0 = load i32, i32* %unsignedp.addr, align 4, !dbg !7561
  %tobool = icmp ne i32 %0, 0, !dbg !7561
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7561

cond.true:                                        ; preds = %entry
  %1 = load %struct.optab_d*, %struct.optab_d** %uoptab.addr, align 8, !dbg !7562
  br label %cond.end, !dbg !7561

cond.false:                                       ; preds = %entry
  %2 = load %struct.optab_d*, %struct.optab_d** %soptab.addr, align 8, !dbg !7563
  br label %cond.end, !dbg !7561

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.optab_d* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !7561
  store %struct.optab_d* %cond, %struct.optab_d** %direct_optab, align 8, !dbg !7560
  call void @llvm.dbg.declare(metadata %struct.optab_d* %wide_soptab, metadata !7564, metadata !DIExpression()), !dbg !7565
  %3 = load i32, i32* %mode.addr, align 4, !dbg !7566
  %4 = load %struct.optab_d*, %struct.optab_d** %direct_optab, align 8, !dbg !7567
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7568
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7569
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7570
  %8 = load i32, i32* %unsignedp.addr, align 4, !dbg !7571
  %call = call %struct.rtx_def* @expand_binop(i32 %3, %struct.optab_d* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, i32 %8, i32 0), !dbg !7572
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !7573
  %9 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7574
  %tobool1 = icmp ne %struct.rtx_def* %9, null, !dbg !7574
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !7576

lor.lhs.false:                                    ; preds = %cond.end
  %10 = load i32, i32* %methods.addr, align 4, !dbg !7577
  %cmp = icmp eq i32 %10, 0, !dbg !7578
  br i1 %cmp, label %if.then, label %if.end, !dbg !7579

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7580
  store %struct.rtx_def* %11, %struct.rtx_def** %retval, align 8, !dbg !7581
  br label %return, !dbg !7581

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct.optab_d*, %struct.optab_d** %soptab.addr, align 8, !dbg !7582
  %13 = bitcast %struct.optab_d* %wide_soptab to i8*, !dbg !7583
  %14 = bitcast %struct.optab_d* %12 to i8*, !dbg !7583
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 384, i1 false), !dbg !7583
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %wide_soptab, i32 0, i32 4, !dbg !7584
  %15 = load i32, i32* %mode.addr, align 4, !dbg !7584
  %idxprom = sext i32 %15 to i64, !dbg !7584
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !7584
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !7585
  store i32 2956, i32* %insn_code, align 4, !dbg !7586
  %libcall_gen = getelementptr inbounds %struct.optab_d, %struct.optab_d* %wide_soptab, i32 0, i32 3, !dbg !7587
  store void (%struct.optab_d*, i8*, i8, i32)* null, void (%struct.optab_d*, i8*, i8, i32)** %libcall_gen, align 8, !dbg !7588
  %16 = load i32, i32* %mode.addr, align 4, !dbg !7589
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7590
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7591
  %19 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7592
  %20 = load i32, i32* %unsignedp.addr, align 4, !dbg !7593
  %call2 = call %struct.rtx_def* @expand_binop(i32 %16, %struct.optab_d* %wide_soptab, %struct.rtx_def* %17, %struct.rtx_def* %18, %struct.rtx_def* %19, i32 %20, i32 2), !dbg !7594
  store %struct.rtx_def* %call2, %struct.rtx_def** %temp, align 8, !dbg !7595
  %21 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7596
  %cmp3 = icmp eq %struct.rtx_def* %21, null, !dbg !7598
  br i1 %cmp3, label %land.lhs.true, label %if.end7, !dbg !7599

land.lhs.true:                                    ; preds = %if.end
  %22 = load i32, i32* %unsignedp.addr, align 4, !dbg !7600
  %tobool4 = icmp ne i32 %22, 0, !dbg !7600
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !7601

if.then5:                                         ; preds = %land.lhs.true
  %23 = load i32, i32* %mode.addr, align 4, !dbg !7602
  %24 = load %struct.optab_d*, %struct.optab_d** %uoptab.addr, align 8, !dbg !7603
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7604
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7605
  %27 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7606
  %28 = load i32, i32* %unsignedp.addr, align 4, !dbg !7607
  %call6 = call %struct.rtx_def* @expand_binop(i32 %23, %struct.optab_d* %24, %struct.rtx_def* %25, %struct.rtx_def* %26, %struct.rtx_def* %27, i32 %28, i32 2), !dbg !7608
  store %struct.rtx_def* %call6, %struct.rtx_def** %temp, align 8, !dbg !7609
  br label %if.end7, !dbg !7610

if.end7:                                          ; preds = %if.then5, %land.lhs.true, %if.end
  %29 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7611
  %tobool8 = icmp ne %struct.rtx_def* %29, null, !dbg !7611
  br i1 %tobool8, label %if.then11, label %lor.lhs.false9, !dbg !7613

lor.lhs.false9:                                   ; preds = %if.end7
  %30 = load i32, i32* %methods.addr, align 4, !dbg !7614
  %cmp10 = icmp eq i32 %30, 2, !dbg !7615
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !7616

if.then11:                                        ; preds = %lor.lhs.false9, %if.end7
  %31 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7617
  store %struct.rtx_def* %31, %struct.rtx_def** %retval, align 8, !dbg !7618
  br label %return, !dbg !7618

if.end12:                                         ; preds = %lor.lhs.false9
  %32 = load i32, i32* %mode.addr, align 4, !dbg !7619
  %33 = load %struct.optab_d*, %struct.optab_d** %direct_optab, align 8, !dbg !7620
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7621
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7622
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7623
  %37 = load i32, i32* %unsignedp.addr, align 4, !dbg !7624
  %call13 = call %struct.rtx_def* @expand_binop(i32 %32, %struct.optab_d* %33, %struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* %36, i32 %37, i32 1), !dbg !7625
  store %struct.rtx_def* %call13, %struct.rtx_def** %temp, align 8, !dbg !7626
  %38 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7627
  %tobool14 = icmp ne %struct.rtx_def* %38, null, !dbg !7627
  br i1 %tobool14, label %if.then17, label %lor.lhs.false15, !dbg !7629

lor.lhs.false15:                                  ; preds = %if.end12
  %39 = load i32, i32* %methods.addr, align 4, !dbg !7630
  %cmp16 = icmp eq i32 %39, 1, !dbg !7631
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !7632

if.then17:                                        ; preds = %lor.lhs.false15, %if.end12
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7633
  store %struct.rtx_def* %40, %struct.rtx_def** %retval, align 8, !dbg !7634
  br label %return, !dbg !7634

if.end18:                                         ; preds = %lor.lhs.false15
  %41 = load i32, i32* %mode.addr, align 4, !dbg !7635
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7636
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7637
  %44 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7638
  %45 = load i32, i32* %unsignedp.addr, align 4, !dbg !7639
  %46 = load i32, i32* %methods.addr, align 4, !dbg !7640
  %call19 = call %struct.rtx_def* @expand_binop(i32 %41, %struct.optab_d* %wide_soptab, %struct.rtx_def* %42, %struct.rtx_def* %43, %struct.rtx_def* %44, i32 %45, i32 %46), !dbg !7641
  store %struct.rtx_def* %call19, %struct.rtx_def** %temp, align 8, !dbg !7642
  %47 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7643
  %cmp20 = icmp ne %struct.rtx_def* %47, null, !dbg !7645
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !7646

if.then21:                                        ; preds = %if.end18
  %48 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !7647
  store %struct.rtx_def* %48, %struct.rtx_def** %retval, align 8, !dbg !7648
  br label %return, !dbg !7648

if.end22:                                         ; preds = %if.end18
  %49 = load i32, i32* %unsignedp.addr, align 4, !dbg !7649
  %tobool23 = icmp ne i32 %49, 0, !dbg !7649
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !7651

if.then24:                                        ; preds = %if.end22
  %50 = load i32, i32* %mode.addr, align 4, !dbg !7652
  %51 = load %struct.optab_d*, %struct.optab_d** %uoptab.addr, align 8, !dbg !7653
  %52 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7654
  %53 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7655
  %54 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !7656
  %55 = load i32, i32* %unsignedp.addr, align 4, !dbg !7657
  %56 = load i32, i32* %methods.addr, align 4, !dbg !7658
  %call25 = call %struct.rtx_def* @expand_binop(i32 %50, %struct.optab_d* %51, %struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def* %54, i32 %55, i32 %56), !dbg !7659
  store %struct.rtx_def* %call25, %struct.rtx_def** %retval, align 8, !dbg !7660
  br label %return, !dbg !7660

if.end26:                                         ; preds = %if.end22
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7661
  br label %return, !dbg !7661

return:                                           ; preds = %if.end26, %if.then24, %if.then21, %if.then17, %if.then11, %if.then
  %57 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7662
  ret %struct.rtx_def* %57, !dbg !7662
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @expand_twoval_unop(%struct.optab_d* %unoptab, %struct.rtx_def* %op0, %struct.rtx_def* %targ0, %struct.rtx_def* %targ1, i32 %unsignedp) #0 !dbg !7663 {
entry:
  %retval = alloca i32, align 4
  %unoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %targ0.addr = alloca %struct.rtx_def*, align 8
  %targ1.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %entry_last = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %t0 = alloca %struct.rtx_def*, align 8
  %t1 = alloca %struct.rtx_def*, align 8
  %cop0 = alloca %struct.rtx_def*, align 8
  store %struct.optab_d* %unoptab, %struct.optab_d** %unoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %unoptab.addr, metadata !7666, metadata !DIExpression()), !dbg !7667
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7668, metadata !DIExpression()), !dbg !7669
  store %struct.rtx_def* %targ0, %struct.rtx_def** %targ0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ0.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  store %struct.rtx_def* %targ1, %struct.rtx_def** %targ1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ1.addr, metadata !7672, metadata !DIExpression()), !dbg !7673
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !7674, metadata !DIExpression()), !dbg !7675
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !7676, metadata !DIExpression()), !dbg !7677
  %0 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7678
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !7678
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7678

cond.true:                                        ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7678
  br label %cond.end, !dbg !7678

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7678
  br label %cond.end, !dbg !7678

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !7678
  %3 = bitcast %struct.rtx_def* %cond to i32*, !dbg !7678
  %bf.load = load i32, i32* %3, align 8, !dbg !7678
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7678
  %bf.clear = and i32 %bf.lshr, 255, !dbg !7678
  store i32 %bf.clear, i32* %mode, align 4, !dbg !7677
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !7679, metadata !DIExpression()), !dbg !7680
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !7681, metadata !DIExpression()), !dbg !7682
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_last, metadata !7683, metadata !DIExpression()), !dbg !7684
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !7685
  store %struct.rtx_def* %call, %struct.rtx_def** %entry_last, align 8, !dbg !7684
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7686, metadata !DIExpression()), !dbg !7687
  %4 = load i32, i32* %mode, align 4, !dbg !7688
  %idxprom = zext i32 %4 to i64, !dbg !7688
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !7688
  %5 = load i8, i8* %arrayidx, align 1, !dbg !7688
  %conv = zext i8 %5 to i32, !dbg !7688
  store i32 %conv, i32* %mclass, align 4, !dbg !7689
  %6 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7690
  %tobool1 = icmp ne %struct.rtx_def* %6, null, !dbg !7690
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7692

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %mode, align 4, !dbg !7693
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 %7), !dbg !7694
  store %struct.rtx_def* %call2, %struct.rtx_def** %targ0.addr, align 8, !dbg !7695
  br label %if.end, !dbg !7696

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7697
  %tobool3 = icmp ne %struct.rtx_def* %8, null, !dbg !7697
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !7699

if.then4:                                         ; preds = %if.end
  %9 = load i32, i32* %mode, align 4, !dbg !7700
  %call5 = call %struct.rtx_def* @gen_reg_rtx(i32 %9), !dbg !7701
  store %struct.rtx_def* %call5, %struct.rtx_def** %targ1.addr, align 8, !dbg !7702
  br label %if.end6, !dbg !7703

if.end6:                                          ; preds = %if.then4, %if.end
  %call7 = call %struct.rtx_def* @get_last_insn(), !dbg !7704
  store %struct.rtx_def* %call7, %struct.rtx_def** %last, align 8, !dbg !7705
  %10 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !7706
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %10, i32 0, i32 4, !dbg !7706
  %11 = load i32, i32* %mode, align 4, !dbg !7706
  %idxprom8 = sext i32 %11 to i64, !dbg !7706
  %arrayidx9 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom8, !dbg !7706
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx9, i32 0, i32 0, !dbg !7708
  %12 = load i32, i32* %insn_code, align 4, !dbg !7708
  %cmp = icmp ne i32 %12, 2956, !dbg !7709
  br i1 %cmp, label %if.then11, label %if.end72, !dbg !7710

if.then11:                                        ; preds = %if.end6
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !7711, metadata !DIExpression()), !dbg !7713
  %13 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !7714
  %handlers12 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %13, i32 0, i32 4, !dbg !7714
  %14 = load i32, i32* %mode, align 4, !dbg !7714
  %idxprom13 = sext i32 %14 to i64, !dbg !7714
  %arrayidx14 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers12, i64 0, i64 %idxprom13, !dbg !7714
  %insn_code15 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx14, i32 0, i32 0, !dbg !7715
  %15 = load i32, i32* %insn_code15, align 4, !dbg !7715
  store i32 %15, i32* %icode, align 4, !dbg !7713
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !7716, metadata !DIExpression()), !dbg !7717
  %16 = load i32, i32* %icode, align 4, !dbg !7718
  %idxprom16 = sext i32 %16 to i64, !dbg !7719
  %arrayidx17 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom16, !dbg !7719
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx17, i32 0, i32 3, !dbg !7720
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !7720
  %arrayidx18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 2, !dbg !7719
  %mode19 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx18, i32 0, i32 2, !dbg !7721
  %bf.load20 = load i16, i16* %mode19, align 8, !dbg !7721
  %bf.cast = zext i16 %bf.load20 to i32, !dbg !7721
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !7717
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !7722, metadata !DIExpression()), !dbg !7723
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !7724, metadata !DIExpression()), !dbg !7725
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7726
  store %struct.rtx_def* %18, %struct.rtx_def** %xop0, align 8, !dbg !7725
  %19 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7727
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !7727
  %bf.load21 = load i32, i32* %20, align 8, !dbg !7727
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !7727
  %bf.clear23 = and i32 %bf.lshr22, 255, !dbg !7727
  %cmp24 = icmp ne i32 %bf.clear23, 0, !dbg !7729
  br i1 %cmp24, label %land.lhs.true, label %if.end33, !dbg !7730

land.lhs.true:                                    ; preds = %if.then11
  %21 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7731
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !7731
  %bf.load26 = load i32, i32* %22, align 8, !dbg !7731
  %bf.lshr27 = lshr i32 %bf.load26, 16, !dbg !7731
  %bf.clear28 = and i32 %bf.lshr27, 255, !dbg !7731
  %23 = load i32, i32* %mode0, align 4, !dbg !7732
  %cmp29 = icmp ne i32 %bf.clear28, %23, !dbg !7733
  br i1 %cmp29, label %if.then31, label %if.end33, !dbg !7734

if.then31:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %mode0, align 4, !dbg !7735
  %25 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7736
  %26 = load i32, i32* %unsignedp.addr, align 4, !dbg !7737
  %call32 = call %struct.rtx_def* @convert_to_mode(i32 %24, %struct.rtx_def* %25, i32 %26), !dbg !7738
  store %struct.rtx_def* %call32, %struct.rtx_def** %xop0, align 8, !dbg !7739
  br label %if.end33, !dbg !7740

if.end33:                                         ; preds = %if.then31, %land.lhs.true, %if.then11
  %27 = load i32, i32* %icode, align 4, !dbg !7741
  %idxprom34 = sext i32 %27 to i64, !dbg !7743
  %arrayidx35 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom34, !dbg !7743
  %operand36 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx35, i32 0, i32 3, !dbg !7744
  %28 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand36, align 8, !dbg !7744
  %arrayidx37 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %28, i64 2, !dbg !7743
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx37, i32 0, i32 0, !dbg !7745
  %29 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !7745
  %30 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7746
  %31 = load i32, i32* %mode0, align 4, !dbg !7747
  %call38 = call i32 %29(%struct.rtx_def* %30, i32 %31), !dbg !7743
  %tobool39 = icmp ne i32 %call38, 0, !dbg !7743
  br i1 %tobool39, label %if.end42, label %if.then40, !dbg !7748

if.then40:                                        ; preds = %if.end33
  %32 = load i32, i32* %mode0, align 4, !dbg !7749
  %33 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7750
  %call41 = call %struct.rtx_def* @copy_to_mode_reg(i32 %32, %struct.rtx_def* %33), !dbg !7751
  store %struct.rtx_def* %call41, %struct.rtx_def** %xop0, align 8, !dbg !7752
  br label %if.end42, !dbg !7753

if.end42:                                         ; preds = %if.then40, %if.end33
  %34 = load i32, i32* %icode, align 4, !dbg !7754
  %idxprom43 = sext i32 %34 to i64, !dbg !7754
  %arrayidx44 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom43, !dbg !7754
  %operand45 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx44, i32 0, i32 3, !dbg !7754
  %35 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand45, align 8, !dbg !7754
  %arrayidx46 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %35, i64 0, !dbg !7754
  %predicate47 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx46, i32 0, i32 0, !dbg !7754
  %36 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate47, align 8, !dbg !7754
  %37 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7754
  %38 = load i32, i32* %mode, align 4, !dbg !7754
  %call48 = call i32 %36(%struct.rtx_def* %37, i32 %38), !dbg !7754
  %tobool49 = icmp ne i32 %call48, 0, !dbg !7754
  br i1 %tobool49, label %cond.false51, label %cond.true50, !dbg !7754

cond.true50:                                      ; preds = %if.end42
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2334, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7754
  br label %cond.end52, !dbg !7754

cond.false51:                                     ; preds = %if.end42
  br label %cond.end52, !dbg !7754

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi i32 [ 0, %cond.true50 ], [ 0, %cond.false51 ], !dbg !7754
  %39 = load i32, i32* %icode, align 4, !dbg !7755
  %idxprom54 = sext i32 %39 to i64, !dbg !7755
  %arrayidx55 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom54, !dbg !7755
  %operand56 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx55, i32 0, i32 3, !dbg !7755
  %40 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand56, align 8, !dbg !7755
  %arrayidx57 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %40, i64 1, !dbg !7755
  %predicate58 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx57, i32 0, i32 0, !dbg !7755
  %41 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate58, align 8, !dbg !7755
  %42 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7755
  %43 = load i32, i32* %mode, align 4, !dbg !7755
  %call59 = call i32 %41(%struct.rtx_def* %42, i32 %43), !dbg !7755
  %tobool60 = icmp ne i32 %call59, 0, !dbg !7755
  br i1 %tobool60, label %cond.false62, label %cond.true61, !dbg !7755

cond.true61:                                      ; preds = %cond.end52
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2335, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7755
  br label %cond.end63, !dbg !7755

cond.false62:                                     ; preds = %cond.end52
  br label %cond.end63, !dbg !7755

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond64 = phi i32 [ 0, %cond.true61 ], [ 0, %cond.false62 ], !dbg !7755
  %44 = load i32, i32* %icode, align 4, !dbg !7756
  %idxprom65 = sext i32 %44 to i64, !dbg !7756
  %arrayidx66 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom65, !dbg !7756
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx66, i32 0, i32 2, !dbg !7756
  %45 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !7756
  %46 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7757
  %47 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7758
  %48 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7759
  %call67 = call %struct.rtx_def* (%struct.rtx_def*, ...) %45(%struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !7756
  store %struct.rtx_def* %call67, %struct.rtx_def** %pat, align 8, !dbg !7760
  %49 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7761
  %tobool68 = icmp ne %struct.rtx_def* %49, null, !dbg !7761
  br i1 %tobool68, label %if.then69, label %if.else, !dbg !7763

if.then69:                                        ; preds = %cond.end63
  %50 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7764
  %call70 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %50), !dbg !7766
  store i32 1, i32* %retval, align 4, !dbg !7767
  br label %return, !dbg !7767

if.else:                                          ; preds = %cond.end63
  %51 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7768
  call void @delete_insns_since(%struct.rtx_def* %51), !dbg !7769
  br label %if.end71

if.end71:                                         ; preds = %if.else
  br label %if.end72, !dbg !7770

if.end72:                                         ; preds = %if.end71, %if.end6
  %52 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp73 = icmp eq i32 %52, 2, !dbg !7771
  br i1 %cmp73, label %if.then95, label %lor.lhs.false, !dbg !7771

lor.lhs.false:                                    ; preds = %if.end72
  %53 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp75 = icmp eq i32 %53, 8, !dbg !7771
  br i1 %cmp75, label %if.then95, label %lor.lhs.false77, !dbg !7771

lor.lhs.false77:                                  ; preds = %lor.lhs.false
  %54 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp78 = icmp eq i32 %54, 9, !dbg !7771
  br i1 %cmp78, label %if.then95, label %lor.lhs.false80, !dbg !7771

lor.lhs.false80:                                  ; preds = %lor.lhs.false77
  %55 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp81 = icmp eq i32 %55, 11, !dbg !7771
  br i1 %cmp81, label %if.then95, label %lor.lhs.false83, !dbg !7771

lor.lhs.false83:                                  ; preds = %lor.lhs.false80
  %56 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp84 = icmp eq i32 %56, 4, !dbg !7771
  br i1 %cmp84, label %if.then95, label %lor.lhs.false86, !dbg !7771

lor.lhs.false86:                                  ; preds = %lor.lhs.false83
  %57 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp87 = icmp eq i32 %57, 5, !dbg !7771
  br i1 %cmp87, label %if.then95, label %lor.lhs.false89, !dbg !7771

lor.lhs.false89:                                  ; preds = %lor.lhs.false86
  %58 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp90 = icmp eq i32 %58, 6, !dbg !7771
  br i1 %cmp90, label %if.then95, label %lor.lhs.false92, !dbg !7771

lor.lhs.false92:                                  ; preds = %lor.lhs.false89
  %59 = load i32, i32* %mclass, align 4, !dbg !7771
  %cmp93 = icmp eq i32 %59, 7, !dbg !7771
  br i1 %cmp93, label %if.then95, label %if.end120, !dbg !7773

if.then95:                                        ; preds = %lor.lhs.false92, %lor.lhs.false89, %lor.lhs.false86, %lor.lhs.false83, %lor.lhs.false80, %lor.lhs.false77, %lor.lhs.false, %if.end72
  %60 = load i32, i32* %mode, align 4, !dbg !7774
  %idxprom96 = zext i32 %60 to i64, !dbg !7774
  %arrayidx97 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom96, !dbg !7774
  %61 = load i8, i8* %arrayidx97, align 1, !dbg !7774
  %conv98 = zext i8 %61 to i32, !dbg !7774
  store i32 %conv98, i32* %wider_mode, align 4, !dbg !7777
  br label %for.cond, !dbg !7778

for.cond:                                         ; preds = %for.inc, %if.then95
  %62 = load i32, i32* %wider_mode, align 4, !dbg !7779
  %cmp99 = icmp ne i32 %62, 0, !dbg !7781
  br i1 %cmp99, label %for.body, label %for.end, !dbg !7782

for.body:                                         ; preds = %for.cond
  %63 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !7783
  %handlers101 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %63, i32 0, i32 4, !dbg !7783
  %64 = load i32, i32* %wider_mode, align 4, !dbg !7783
  %idxprom102 = sext i32 %64 to i64, !dbg !7783
  %arrayidx103 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers101, i64 0, i64 %idxprom102, !dbg !7783
  %insn_code104 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx103, i32 0, i32 0, !dbg !7786
  %65 = load i32, i32* %insn_code104, align 4, !dbg !7786
  %cmp105 = icmp ne i32 %65, 2956, !dbg !7787
  br i1 %cmp105, label %if.then107, label %if.end116, !dbg !7788

if.then107:                                       ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t0, metadata !7789, metadata !DIExpression()), !dbg !7791
  %66 = load i32, i32* %wider_mode, align 4, !dbg !7792
  %call108 = call %struct.rtx_def* @gen_reg_rtx(i32 %66), !dbg !7793
  store %struct.rtx_def* %call108, %struct.rtx_def** %t0, align 8, !dbg !7791
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1, metadata !7794, metadata !DIExpression()), !dbg !7795
  %67 = load i32, i32* %wider_mode, align 4, !dbg !7796
  %call109 = call %struct.rtx_def* @gen_reg_rtx(i32 %67), !dbg !7797
  store %struct.rtx_def* %call109, %struct.rtx_def** %t1, align 8, !dbg !7795
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cop0, metadata !7798, metadata !DIExpression()), !dbg !7799
  %68 = load i32, i32* %wider_mode, align 4, !dbg !7800
  %69 = load i32, i32* %mode, align 4, !dbg !7801
  %70 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7802
  %71 = load i32, i32* %unsignedp.addr, align 4, !dbg !7803
  %call110 = call %struct.rtx_def* @convert_modes(i32 %68, i32 %69, %struct.rtx_def* %70, i32 %71), !dbg !7804
  store %struct.rtx_def* %call110, %struct.rtx_def** %cop0, align 8, !dbg !7799
  %72 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !7805
  %73 = load %struct.rtx_def*, %struct.rtx_def** %cop0, align 8, !dbg !7807
  %74 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !7808
  %75 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !7809
  %76 = load i32, i32* %unsignedp.addr, align 4, !dbg !7810
  %call111 = call i32 @expand_twoval_unop(%struct.optab_d* %72, %struct.rtx_def* %73, %struct.rtx_def* %74, %struct.rtx_def* %75, i32 %76), !dbg !7811
  %tobool112 = icmp ne i32 %call111, 0, !dbg !7811
  br i1 %tobool112, label %if.then113, label %if.else114, !dbg !7812

if.then113:                                       ; preds = %if.then107
  %77 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7813
  %78 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !7815
  %79 = load i32, i32* %unsignedp.addr, align 4, !dbg !7816
  call void @convert_move(%struct.rtx_def* %77, %struct.rtx_def* %78, i32 %79), !dbg !7817
  %80 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7818
  %81 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !7819
  %82 = load i32, i32* %unsignedp.addr, align 4, !dbg !7820
  call void @convert_move(%struct.rtx_def* %80, %struct.rtx_def* %81, i32 %82), !dbg !7821
  store i32 1, i32* %retval, align 4, !dbg !7822
  br label %return, !dbg !7822

if.else114:                                       ; preds = %if.then107
  %83 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7823
  call void @delete_insns_since(%struct.rtx_def* %83), !dbg !7824
  br label %if.end115

if.end115:                                        ; preds = %if.else114
  br label %if.end116, !dbg !7825

if.end116:                                        ; preds = %if.end115, %for.body
  br label %for.inc, !dbg !7826

for.inc:                                          ; preds = %if.end116
  %84 = load i32, i32* %wider_mode, align 4, !dbg !7827
  %idxprom117 = zext i32 %84 to i64, !dbg !7827
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom117, !dbg !7827
  %85 = load i8, i8* %arrayidx118, align 1, !dbg !7827
  %conv119 = zext i8 %85 to i32, !dbg !7827
  store i32 %conv119, i32* %wider_mode, align 4, !dbg !7828
  br label %for.cond, !dbg !7829, !llvm.loop !7830

for.end:                                          ; preds = %for.cond
  br label %if.end120, !dbg !7832

if.end120:                                        ; preds = %for.end, %lor.lhs.false92
  %86 = load %struct.rtx_def*, %struct.rtx_def** %entry_last, align 8, !dbg !7833
  call void @delete_insns_since(%struct.rtx_def* %86), !dbg !7834
  store i32 0, i32* %retval, align 4, !dbg !7835
  br label %return, !dbg !7835

return:                                           ; preds = %if.end120, %if.then113, %if.then69
  %87 = load i32, i32* %retval, align 4, !dbg !7836
  ret i32 %87, !dbg !7836
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @expand_twoval_binop(%struct.optab_d* %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %targ0, %struct.rtx_def* %targ1, i32 %unsignedp) #0 !dbg !7837 {
entry:
  %retval = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %targ0.addr = alloca %struct.rtx_def*, align 8
  %targ1.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %entry_last = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %xop1 = alloca %struct.rtx_def*, align 8
  %t0 = alloca %struct.rtx_def*, align 8
  %t1 = alloca %struct.rtx_def*, align 8
  %cop0 = alloca %struct.rtx_def*, align 8
  %cop1 = alloca %struct.rtx_def*, align 8
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !7840, metadata !DIExpression()), !dbg !7841
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !7842, metadata !DIExpression()), !dbg !7843
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !7844, metadata !DIExpression()), !dbg !7845
  store %struct.rtx_def* %targ0, %struct.rtx_def** %targ0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ0.addr, metadata !7846, metadata !DIExpression()), !dbg !7847
  store %struct.rtx_def* %targ1, %struct.rtx_def** %targ1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ1.addr, metadata !7848, metadata !DIExpression()), !dbg !7849
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !7850, metadata !DIExpression()), !dbg !7851
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !7852, metadata !DIExpression()), !dbg !7853
  %0 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7854
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !7854
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7854

cond.true:                                        ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7854
  br label %cond.end, !dbg !7854

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7854
  br label %cond.end, !dbg !7854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !7854
  %3 = bitcast %struct.rtx_def* %cond to i32*, !dbg !7854
  %bf.load = load i32, i32* %3, align 8, !dbg !7854
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7854
  %bf.clear = and i32 %bf.lshr, 255, !dbg !7854
  store i32 %bf.clear, i32* %mode, align 4, !dbg !7853
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !7855, metadata !DIExpression()), !dbg !7856
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !7857, metadata !DIExpression()), !dbg !7858
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_last, metadata !7859, metadata !DIExpression()), !dbg !7860
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !7861
  store %struct.rtx_def* %call, %struct.rtx_def** %entry_last, align 8, !dbg !7860
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7862, metadata !DIExpression()), !dbg !7863
  %4 = load i32, i32* %mode, align 4, !dbg !7864
  %idxprom = zext i32 %4 to i64, !dbg !7864
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !7864
  %5 = load i8, i8* %arrayidx, align 1, !dbg !7864
  %conv = zext i8 %5 to i32, !dbg !7864
  store i32 %conv, i32* %mclass, align 4, !dbg !7865
  %6 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7866
  %tobool1 = icmp ne %struct.rtx_def* %6, null, !dbg !7866
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7868

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %mode, align 4, !dbg !7869
  %call2 = call %struct.rtx_def* @gen_reg_rtx(i32 %7), !dbg !7870
  store %struct.rtx_def* %call2, %struct.rtx_def** %targ0.addr, align 8, !dbg !7871
  br label %if.end, !dbg !7872

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7873
  %tobool3 = icmp ne %struct.rtx_def* %8, null, !dbg !7873
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !7875

if.then4:                                         ; preds = %if.end
  %9 = load i32, i32* %mode, align 4, !dbg !7876
  %call5 = call %struct.rtx_def* @gen_reg_rtx(i32 %9), !dbg !7877
  store %struct.rtx_def* %call5, %struct.rtx_def** %targ1.addr, align 8, !dbg !7878
  br label %if.end6, !dbg !7879

if.end6:                                          ; preds = %if.then4, %if.end
  %call7 = call %struct.rtx_def* @get_last_insn(), !dbg !7880
  store %struct.rtx_def* %call7, %struct.rtx_def** %last, align 8, !dbg !7881
  %10 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7882
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %10, i32 0, i32 4, !dbg !7882
  %11 = load i32, i32* %mode, align 4, !dbg !7882
  %idxprom8 = sext i32 %11 to i64, !dbg !7882
  %arrayidx9 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom8, !dbg !7882
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx9, i32 0, i32 0, !dbg !7884
  %12 = load i32, i32* %insn_code, align 4, !dbg !7884
  %cmp = icmp ne i32 %12, 2956, !dbg !7885
  br i1 %cmp, label %if.then11, label %if.end125, !dbg !7886

if.then11:                                        ; preds = %if.end6
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !7887, metadata !DIExpression()), !dbg !7889
  %13 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7890
  %handlers12 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %13, i32 0, i32 4, !dbg !7890
  %14 = load i32, i32* %mode, align 4, !dbg !7890
  %idxprom13 = sext i32 %14 to i64, !dbg !7890
  %arrayidx14 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers12, i64 0, i64 %idxprom13, !dbg !7890
  %insn_code15 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx14, i32 0, i32 0, !dbg !7891
  %15 = load i32, i32* %insn_code15, align 4, !dbg !7891
  store i32 %15, i32* %icode, align 4, !dbg !7889
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !7892, metadata !DIExpression()), !dbg !7893
  %16 = load i32, i32* %icode, align 4, !dbg !7894
  %idxprom16 = sext i32 %16 to i64, !dbg !7895
  %arrayidx17 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom16, !dbg !7895
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx17, i32 0, i32 3, !dbg !7896
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !7896
  %arrayidx18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 1, !dbg !7895
  %mode19 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx18, i32 0, i32 2, !dbg !7897
  %bf.load20 = load i16, i16* %mode19, align 8, !dbg !7897
  %bf.cast = zext i16 %bf.load20 to i32, !dbg !7897
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !7893
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !7898, metadata !DIExpression()), !dbg !7899
  %18 = load i32, i32* %icode, align 4, !dbg !7900
  %idxprom21 = sext i32 %18 to i64, !dbg !7901
  %arrayidx22 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom21, !dbg !7901
  %operand23 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx22, i32 0, i32 3, !dbg !7902
  %19 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand23, align 8, !dbg !7902
  %arrayidx24 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %19, i64 2, !dbg !7901
  %mode25 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx24, i32 0, i32 2, !dbg !7903
  %bf.load26 = load i16, i16* %mode25, align 8, !dbg !7903
  %bf.cast27 = zext i16 %bf.load26 to i32, !dbg !7903
  store i32 %bf.cast27, i32* %mode1, align 4, !dbg !7899
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !7904, metadata !DIExpression()), !dbg !7905
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !7906, metadata !DIExpression()), !dbg !7907
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7908
  store %struct.rtx_def* %20, %struct.rtx_def** %xop0, align 8, !dbg !7907
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop1, metadata !7909, metadata !DIExpression()), !dbg !7910
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7911
  store %struct.rtx_def* %21, %struct.rtx_def** %xop1, align 8, !dbg !7910
  %22 = load i32, i32* %mode0, align 4, !dbg !7912
  %23 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7913
  %24 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7914
  %25 = load i32, i32* %unsignedp.addr, align 4, !dbg !7915
  %conv28 = trunc i32 %25 to i8, !dbg !7915
  %call29 = call %struct.rtx_def* @avoid_expensive_constant(i32 %22, %struct.optab_d* %23, %struct.rtx_def* %24, i8 zeroext %conv28), !dbg !7916
  store %struct.rtx_def* %call29, %struct.rtx_def** %xop0, align 8, !dbg !7917
  %26 = load i32, i32* %mode1, align 4, !dbg !7918
  %27 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !7919
  %28 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !7920
  %29 = load i32, i32* %unsignedp.addr, align 4, !dbg !7921
  %conv30 = trunc i32 %29 to i8, !dbg !7921
  %call31 = call %struct.rtx_def* @avoid_expensive_constant(i32 %26, %struct.optab_d* %27, %struct.rtx_def* %28, i8 zeroext %conv30), !dbg !7922
  store %struct.rtx_def* %call31, %struct.rtx_def** %xop1, align 8, !dbg !7923
  %30 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7924
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !7924
  %bf.load32 = load i32, i32* %31, align 8, !dbg !7924
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !7924
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !7924
  %32 = load i32, i32* %mode0, align 4, !dbg !7926
  %cmp35 = icmp ne i32 %bf.clear34, %32, !dbg !7927
  br i1 %cmp35, label %land.lhs.true, label %if.end53, !dbg !7928

land.lhs.true:                                    ; preds = %if.then11
  %33 = load i32, i32* %mode0, align 4, !dbg !7929
  %cmp37 = icmp ne i32 %33, 0, !dbg !7930
  br i1 %cmp37, label %if.then39, label %if.end53, !dbg !7931

if.then39:                                        ; preds = %land.lhs.true
  %34 = load i32, i32* %mode0, align 4, !dbg !7932
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7933
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7933
  %bf.load40 = load i32, i32* %36, align 8, !dbg !7933
  %bf.lshr41 = lshr i32 %bf.load40, 16, !dbg !7933
  %bf.clear42 = and i32 %bf.lshr41, 255, !dbg !7933
  %cmp43 = icmp ne i32 %bf.clear42, 0, !dbg !7934
  br i1 %cmp43, label %cond.true45, label %cond.false49, !dbg !7933

cond.true45:                                      ; preds = %if.then39
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !7935
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !7935
  %bf.load46 = load i32, i32* %38, align 8, !dbg !7935
  %bf.lshr47 = lshr i32 %bf.load46, 16, !dbg !7935
  %bf.clear48 = and i32 %bf.lshr47, 255, !dbg !7935
  br label %cond.end50, !dbg !7933

cond.false49:                                     ; preds = %if.then39
  %39 = load i32, i32* %mode, align 4, !dbg !7936
  br label %cond.end50, !dbg !7933

cond.end50:                                       ; preds = %cond.false49, %cond.true45
  %cond51 = phi i32 [ %bf.clear48, %cond.true45 ], [ %39, %cond.false49 ], !dbg !7933
  %40 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7937
  %41 = load i32, i32* %unsignedp.addr, align 4, !dbg !7938
  %call52 = call %struct.rtx_def* @convert_modes(i32 %34, i32 %cond51, %struct.rtx_def* %40, i32 %41), !dbg !7939
  store %struct.rtx_def* %call52, %struct.rtx_def** %xop0, align 8, !dbg !7940
  br label %if.end53, !dbg !7941

if.end53:                                         ; preds = %cond.end50, %land.lhs.true, %if.then11
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7942
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !7942
  %bf.load54 = load i32, i32* %43, align 8, !dbg !7942
  %bf.lshr55 = lshr i32 %bf.load54, 16, !dbg !7942
  %bf.clear56 = and i32 %bf.lshr55, 255, !dbg !7942
  %44 = load i32, i32* %mode1, align 4, !dbg !7944
  %cmp57 = icmp ne i32 %bf.clear56, %44, !dbg !7945
  br i1 %cmp57, label %land.lhs.true59, label %if.end76, !dbg !7946

land.lhs.true59:                                  ; preds = %if.end53
  %45 = load i32, i32* %mode1, align 4, !dbg !7947
  %cmp60 = icmp ne i32 %45, 0, !dbg !7948
  br i1 %cmp60, label %if.then62, label %if.end76, !dbg !7949

if.then62:                                        ; preds = %land.lhs.true59
  %46 = load i32, i32* %mode1, align 4, !dbg !7950
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7951
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !7951
  %bf.load63 = load i32, i32* %48, align 8, !dbg !7951
  %bf.lshr64 = lshr i32 %bf.load63, 16, !dbg !7951
  %bf.clear65 = and i32 %bf.lshr64, 255, !dbg !7951
  %cmp66 = icmp ne i32 %bf.clear65, 0, !dbg !7952
  br i1 %cmp66, label %cond.true68, label %cond.false72, !dbg !7951

cond.true68:                                      ; preds = %if.then62
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !7953
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !7953
  %bf.load69 = load i32, i32* %50, align 8, !dbg !7953
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !7953
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !7953
  br label %cond.end73, !dbg !7951

cond.false72:                                     ; preds = %if.then62
  %51 = load i32, i32* %mode, align 4, !dbg !7954
  br label %cond.end73, !dbg !7951

cond.end73:                                       ; preds = %cond.false72, %cond.true68
  %cond74 = phi i32 [ %bf.clear71, %cond.true68 ], [ %51, %cond.false72 ], !dbg !7951
  %52 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !7955
  %53 = load i32, i32* %unsignedp.addr, align 4, !dbg !7956
  %call75 = call %struct.rtx_def* @convert_modes(i32 %46, i32 %cond74, %struct.rtx_def* %52, i32 %53), !dbg !7957
  store %struct.rtx_def* %call75, %struct.rtx_def** %xop1, align 8, !dbg !7958
  br label %if.end76, !dbg !7959

if.end76:                                         ; preds = %cond.end73, %land.lhs.true59, %if.end53
  %54 = load i32, i32* %icode, align 4, !dbg !7960
  %idxprom77 = sext i32 %54 to i64, !dbg !7962
  %arrayidx78 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom77, !dbg !7962
  %operand79 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx78, i32 0, i32 3, !dbg !7963
  %55 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand79, align 8, !dbg !7963
  %arrayidx80 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %55, i64 1, !dbg !7962
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx80, i32 0, i32 0, !dbg !7964
  %56 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !7964
  %57 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7965
  %58 = load i32, i32* %mode0, align 4, !dbg !7966
  %call81 = call i32 %56(%struct.rtx_def* %57, i32 %58), !dbg !7962
  %tobool82 = icmp ne i32 %call81, 0, !dbg !7962
  br i1 %tobool82, label %if.end85, label %if.then83, !dbg !7967

if.then83:                                        ; preds = %if.end76
  %59 = load i32, i32* %mode0, align 4, !dbg !7968
  %60 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7969
  %call84 = call %struct.rtx_def* @copy_to_mode_reg(i32 %59, %struct.rtx_def* %60), !dbg !7970
  store %struct.rtx_def* %call84, %struct.rtx_def** %xop0, align 8, !dbg !7971
  br label %if.end85, !dbg !7972

if.end85:                                         ; preds = %if.then83, %if.end76
  %61 = load i32, i32* %icode, align 4, !dbg !7973
  %idxprom86 = sext i32 %61 to i64, !dbg !7975
  %arrayidx87 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom86, !dbg !7975
  %operand88 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx87, i32 0, i32 3, !dbg !7976
  %62 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand88, align 8, !dbg !7976
  %arrayidx89 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %62, i64 2, !dbg !7975
  %predicate90 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx89, i32 0, i32 0, !dbg !7977
  %63 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate90, align 8, !dbg !7977
  %64 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !7978
  %65 = load i32, i32* %mode1, align 4, !dbg !7979
  %call91 = call i32 %63(%struct.rtx_def* %64, i32 %65), !dbg !7975
  %tobool92 = icmp ne i32 %call91, 0, !dbg !7975
  br i1 %tobool92, label %if.end95, label %if.then93, !dbg !7980

if.then93:                                        ; preds = %if.end85
  %66 = load i32, i32* %mode1, align 4, !dbg !7981
  %67 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !7982
  %call94 = call %struct.rtx_def* @copy_to_mode_reg(i32 %66, %struct.rtx_def* %67), !dbg !7983
  store %struct.rtx_def* %call94, %struct.rtx_def** %xop1, align 8, !dbg !7984
  br label %if.end95, !dbg !7985

if.end95:                                         ; preds = %if.then93, %if.end85
  %68 = load i32, i32* %icode, align 4, !dbg !7986
  %idxprom96 = sext i32 %68 to i64, !dbg !7986
  %arrayidx97 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom96, !dbg !7986
  %operand98 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx97, i32 0, i32 3, !dbg !7986
  %69 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand98, align 8, !dbg !7986
  %arrayidx99 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %69, i64 0, !dbg !7986
  %predicate100 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx99, i32 0, i32 0, !dbg !7986
  %70 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate100, align 8, !dbg !7986
  %71 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7986
  %72 = load i32, i32* %mode, align 4, !dbg !7986
  %call101 = call i32 %70(%struct.rtx_def* %71, i32 %72), !dbg !7986
  %tobool102 = icmp ne i32 %call101, 0, !dbg !7986
  br i1 %tobool102, label %cond.false104, label %cond.true103, !dbg !7986

cond.true103:                                     ; preds = %if.end95
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2451, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7986
  br label %cond.end105, !dbg !7986

cond.false104:                                    ; preds = %if.end95
  br label %cond.end105, !dbg !7986

cond.end105:                                      ; preds = %cond.false104, %cond.true103
  %cond106 = phi i32 [ 0, %cond.true103 ], [ 0, %cond.false104 ], !dbg !7986
  %73 = load i32, i32* %icode, align 4, !dbg !7987
  %idxprom107 = sext i32 %73 to i64, !dbg !7987
  %arrayidx108 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom107, !dbg !7987
  %operand109 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx108, i32 0, i32 3, !dbg !7987
  %74 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand109, align 8, !dbg !7987
  %arrayidx110 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %74, i64 3, !dbg !7987
  %predicate111 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx110, i32 0, i32 0, !dbg !7987
  %75 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate111, align 8, !dbg !7987
  %76 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7987
  %77 = load i32, i32* %mode, align 4, !dbg !7987
  %call112 = call i32 %75(%struct.rtx_def* %76, i32 %77), !dbg !7987
  %tobool113 = icmp ne i32 %call112, 0, !dbg !7987
  br i1 %tobool113, label %cond.false115, label %cond.true114, !dbg !7987

cond.true114:                                     ; preds = %cond.end105
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2452, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7987
  br label %cond.end116, !dbg !7987

cond.false115:                                    ; preds = %cond.end105
  br label %cond.end116, !dbg !7987

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i32 [ 0, %cond.true114 ], [ 0, %cond.false115 ], !dbg !7987
  %78 = load i32, i32* %icode, align 4, !dbg !7988
  %idxprom118 = sext i32 %78 to i64, !dbg !7988
  %arrayidx119 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom118, !dbg !7988
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx119, i32 0, i32 2, !dbg !7988
  %79 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !7988
  %80 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !7989
  %81 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !7990
  %82 = load %struct.rtx_def*, %struct.rtx_def** %xop1, align 8, !dbg !7991
  %83 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !7992
  %call120 = call %struct.rtx_def* (%struct.rtx_def*, ...) %79(%struct.rtx_def* %80, %struct.rtx_def* %81, %struct.rtx_def* %82, %struct.rtx_def* %83), !dbg !7988
  store %struct.rtx_def* %call120, %struct.rtx_def** %pat, align 8, !dbg !7993
  %84 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7994
  %tobool121 = icmp ne %struct.rtx_def* %84, null, !dbg !7994
  br i1 %tobool121, label %if.then122, label %if.else, !dbg !7996

if.then122:                                       ; preds = %cond.end116
  %85 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7997
  %call123 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %85), !dbg !7999
  store i32 1, i32* %retval, align 4, !dbg !8000
  br label %return, !dbg !8000

if.else:                                          ; preds = %cond.end116
  %86 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8001
  call void @delete_insns_since(%struct.rtx_def* %86), !dbg !8002
  br label %if.end124

if.end124:                                        ; preds = %if.else
  br label %if.end125, !dbg !8003

if.end125:                                        ; preds = %if.end124, %if.end6
  %87 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp126 = icmp eq i32 %87, 2, !dbg !8004
  br i1 %cmp126, label %if.then148, label %lor.lhs.false, !dbg !8004

lor.lhs.false:                                    ; preds = %if.end125
  %88 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp128 = icmp eq i32 %88, 8, !dbg !8004
  br i1 %cmp128, label %if.then148, label %lor.lhs.false130, !dbg !8004

lor.lhs.false130:                                 ; preds = %lor.lhs.false
  %89 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp131 = icmp eq i32 %89, 9, !dbg !8004
  br i1 %cmp131, label %if.then148, label %lor.lhs.false133, !dbg !8004

lor.lhs.false133:                                 ; preds = %lor.lhs.false130
  %90 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp134 = icmp eq i32 %90, 11, !dbg !8004
  br i1 %cmp134, label %if.then148, label %lor.lhs.false136, !dbg !8004

lor.lhs.false136:                                 ; preds = %lor.lhs.false133
  %91 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp137 = icmp eq i32 %91, 4, !dbg !8004
  br i1 %cmp137, label %if.then148, label %lor.lhs.false139, !dbg !8004

lor.lhs.false139:                                 ; preds = %lor.lhs.false136
  %92 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp140 = icmp eq i32 %92, 5, !dbg !8004
  br i1 %cmp140, label %if.then148, label %lor.lhs.false142, !dbg !8004

lor.lhs.false142:                                 ; preds = %lor.lhs.false139
  %93 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp143 = icmp eq i32 %93, 6, !dbg !8004
  br i1 %cmp143, label %if.then148, label %lor.lhs.false145, !dbg !8004

lor.lhs.false145:                                 ; preds = %lor.lhs.false142
  %94 = load i32, i32* %mclass, align 4, !dbg !8004
  %cmp146 = icmp eq i32 %94, 7, !dbg !8004
  br i1 %cmp146, label %if.then148, label %if.end174, !dbg !8006

if.then148:                                       ; preds = %lor.lhs.false145, %lor.lhs.false142, %lor.lhs.false139, %lor.lhs.false136, %lor.lhs.false133, %lor.lhs.false130, %lor.lhs.false, %if.end125
  %95 = load i32, i32* %mode, align 4, !dbg !8007
  %idxprom149 = zext i32 %95 to i64, !dbg !8007
  %arrayidx150 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom149, !dbg !8007
  %96 = load i8, i8* %arrayidx150, align 1, !dbg !8007
  %conv151 = zext i8 %96 to i32, !dbg !8007
  store i32 %conv151, i32* %wider_mode, align 4, !dbg !8010
  br label %for.cond, !dbg !8011

for.cond:                                         ; preds = %for.inc, %if.then148
  %97 = load i32, i32* %wider_mode, align 4, !dbg !8012
  %cmp152 = icmp ne i32 %97, 0, !dbg !8014
  br i1 %cmp152, label %for.body, label %for.end, !dbg !8015

for.body:                                         ; preds = %for.cond
  %98 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !8016
  %handlers154 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %98, i32 0, i32 4, !dbg !8016
  %99 = load i32, i32* %wider_mode, align 4, !dbg !8016
  %idxprom155 = sext i32 %99 to i64, !dbg !8016
  %arrayidx156 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers154, i64 0, i64 %idxprom155, !dbg !8016
  %insn_code157 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx156, i32 0, i32 0, !dbg !8019
  %100 = load i32, i32* %insn_code157, align 4, !dbg !8019
  %cmp158 = icmp ne i32 %100, 2956, !dbg !8020
  br i1 %cmp158, label %if.then160, label %if.end170, !dbg !8021

if.then160:                                       ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t0, metadata !8022, metadata !DIExpression()), !dbg !8024
  %101 = load i32, i32* %wider_mode, align 4, !dbg !8025
  %call161 = call %struct.rtx_def* @gen_reg_rtx(i32 %101), !dbg !8026
  store %struct.rtx_def* %call161, %struct.rtx_def** %t0, align 8, !dbg !8024
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1, metadata !8027, metadata !DIExpression()), !dbg !8028
  %102 = load i32, i32* %wider_mode, align 4, !dbg !8029
  %call162 = call %struct.rtx_def* @gen_reg_rtx(i32 %102), !dbg !8030
  store %struct.rtx_def* %call162, %struct.rtx_def** %t1, align 8, !dbg !8028
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cop0, metadata !8031, metadata !DIExpression()), !dbg !8032
  %103 = load i32, i32* %wider_mode, align 4, !dbg !8033
  %104 = load i32, i32* %mode, align 4, !dbg !8034
  %105 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8035
  %106 = load i32, i32* %unsignedp.addr, align 4, !dbg !8036
  %call163 = call %struct.rtx_def* @convert_modes(i32 %103, i32 %104, %struct.rtx_def* %105, i32 %106), !dbg !8037
  store %struct.rtx_def* %call163, %struct.rtx_def** %cop0, align 8, !dbg !8032
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cop1, metadata !8038, metadata !DIExpression()), !dbg !8039
  %107 = load i32, i32* %wider_mode, align 4, !dbg !8040
  %108 = load i32, i32* %mode, align 4, !dbg !8041
  %109 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8042
  %110 = load i32, i32* %unsignedp.addr, align 4, !dbg !8043
  %call164 = call %struct.rtx_def* @convert_modes(i32 %107, i32 %108, %struct.rtx_def* %109, i32 %110), !dbg !8044
  store %struct.rtx_def* %call164, %struct.rtx_def** %cop1, align 8, !dbg !8039
  %111 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !8045
  %112 = load %struct.rtx_def*, %struct.rtx_def** %cop0, align 8, !dbg !8047
  %113 = load %struct.rtx_def*, %struct.rtx_def** %cop1, align 8, !dbg !8048
  %114 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !8049
  %115 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !8050
  %116 = load i32, i32* %unsignedp.addr, align 4, !dbg !8051
  %call165 = call i32 @expand_twoval_binop(%struct.optab_d* %111, %struct.rtx_def* %112, %struct.rtx_def* %113, %struct.rtx_def* %114, %struct.rtx_def* %115, i32 %116), !dbg !8052
  %tobool166 = icmp ne i32 %call165, 0, !dbg !8052
  br i1 %tobool166, label %if.then167, label %if.else168, !dbg !8053

if.then167:                                       ; preds = %if.then160
  %117 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !8054
  %118 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !8056
  %119 = load i32, i32* %unsignedp.addr, align 4, !dbg !8057
  call void @convert_move(%struct.rtx_def* %117, %struct.rtx_def* %118, i32 %119), !dbg !8058
  %120 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !8059
  %121 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !8060
  %122 = load i32, i32* %unsignedp.addr, align 4, !dbg !8061
  call void @convert_move(%struct.rtx_def* %120, %struct.rtx_def* %121, i32 %122), !dbg !8062
  store i32 1, i32* %retval, align 4, !dbg !8063
  br label %return, !dbg !8063

if.else168:                                       ; preds = %if.then160
  %123 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8064
  call void @delete_insns_since(%struct.rtx_def* %123), !dbg !8065
  br label %if.end169

if.end169:                                        ; preds = %if.else168
  br label %if.end170, !dbg !8066

if.end170:                                        ; preds = %if.end169, %for.body
  br label %for.inc, !dbg !8067

for.inc:                                          ; preds = %if.end170
  %124 = load i32, i32* %wider_mode, align 4, !dbg !8068
  %idxprom171 = zext i32 %124 to i64, !dbg !8068
  %arrayidx172 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom171, !dbg !8068
  %125 = load i8, i8* %arrayidx172, align 1, !dbg !8068
  %conv173 = zext i8 %125 to i32, !dbg !8068
  store i32 %conv173, i32* %wider_mode, align 4, !dbg !8069
  br label %for.cond, !dbg !8070, !llvm.loop !8071

for.end:                                          ; preds = %for.cond
  br label %if.end174, !dbg !8073

if.end174:                                        ; preds = %for.end, %lor.lhs.false145
  %126 = load %struct.rtx_def*, %struct.rtx_def** %entry_last, align 8, !dbg !8074
  call void @delete_insns_since(%struct.rtx_def* %126), !dbg !8075
  store i32 0, i32* %retval, align 4, !dbg !8076
  br label %return, !dbg !8076

return:                                           ; preds = %if.end174, %if.then167, %if.then122
  %127 = load i32, i32* %retval, align 4, !dbg !8077
  ret i32 %127, !dbg !8077
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expand_twoval_binop_libfunc(%struct.optab_d* %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %targ0, %struct.rtx_def* %targ1, i32 %code) #0 !dbg !8078 {
entry:
  %retval = alloca i8, align 1
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %targ0.addr = alloca %struct.rtx_def*, align 8
  %targ1.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %libval_mode = alloca i32, align 4
  %libval = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %libfunc = alloca %struct.rtx_def*, align 8
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !8081, metadata !DIExpression()), !dbg !8082
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !8083, metadata !DIExpression()), !dbg !8084
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !8085, metadata !DIExpression()), !dbg !8086
  store %struct.rtx_def* %targ0, %struct.rtx_def** %targ0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ0.addr, metadata !8087, metadata !DIExpression()), !dbg !8088
  store %struct.rtx_def* %targ1, %struct.rtx_def** %targ1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ1.addr, metadata !8089, metadata !DIExpression()), !dbg !8090
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8091, metadata !DIExpression()), !dbg !8092
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !8093, metadata !DIExpression()), !dbg !8094
  call void @llvm.dbg.declare(metadata i32* %libval_mode, metadata !8095, metadata !DIExpression()), !dbg !8096
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libval, metadata !8097, metadata !DIExpression()), !dbg !8098
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !8099, metadata !DIExpression()), !dbg !8100
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !8101, metadata !DIExpression()), !dbg !8102
  %0 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !8103
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8103
  %lnot = xor i1 %tobool, true, !dbg !8103
  %lnot.ext = zext i1 %lnot to i32, !dbg !8103
  %1 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !8103
  %tobool1 = icmp ne %struct.rtx_def* %1, null, !dbg !8103
  %lnot2 = xor i1 %tobool1, true, !dbg !8103
  %lnot.ext3 = zext i1 %lnot2 to i32, !dbg !8103
  %cmp = icmp ne i32 %lnot.ext, %lnot.ext3, !dbg !8103
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8103

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8103
  br label %cond.end, !dbg !8103

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8103

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8103
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8104
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8104
  %bf.load = load i32, i32* %3, align 8, !dbg !8104
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8104
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8104
  store i32 %bf.clear, i32* %mode, align 4, !dbg !8105
  %4 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !8106
  %5 = load i32, i32* %mode, align 4, !dbg !8107
  %call = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %4, i32 %5), !dbg !8108
  store %struct.rtx_def* %call, %struct.rtx_def** %libfunc, align 8, !dbg !8109
  %6 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !8110
  %tobool4 = icmp ne %struct.rtx_def* %6, null, !dbg !8110
  br i1 %tobool4, label %if.end, label %if.then, !dbg !8112

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !8113
  br label %return, !dbg !8113

if.end:                                           ; preds = %cond.end
  %7 = load i32, i32* %mode, align 4, !dbg !8114
  %idxprom = zext i32 %7 to i64, !dbg !8114
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !8114
  %8 = load i8, i8* %arrayidx, align 1, !dbg !8114
  %conv = zext i8 %8 to i16, !dbg !8114
  %conv5 = zext i16 %conv to i32, !dbg !8114
  %mul = mul nsw i32 %conv5, 8, !dbg !8114
  %conv6 = trunc i32 %mul to i16, !dbg !8114
  %conv7 = zext i16 %conv6 to i32, !dbg !8114
  %mul8 = mul nsw i32 2, %conv7, !dbg !8115
  %call9 = call i32 @smallest_mode_for_size(i32 %mul8, i32 2), !dbg !8116
  store i32 %call9, i32* %libval_mode, align 4, !dbg !8117
  call void @start_sequence(), !dbg !8118
  %9 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !8119
  %10 = load i32, i32* %libval_mode, align 4, !dbg !8120
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8121
  %12 = load i32, i32* %mode, align 4, !dbg !8122
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8123
  %14 = load i32, i32* %mode, align 4, !dbg !8124
  %call10 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %9, %struct.rtx_def* null, i32 1, i32 %10, i32 2, %struct.rtx_def* %11, i32 %12, %struct.rtx_def* %13, i32 %14), !dbg !8125
  store %struct.rtx_def* %call10, %struct.rtx_def** %libval, align 8, !dbg !8126
  %15 = load i32, i32* %mode, align 4, !dbg !8127
  %16 = load %struct.rtx_def*, %struct.rtx_def** %libval, align 8, !dbg !8128
  %17 = load i32, i32* %libval_mode, align 4, !dbg !8129
  %18 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !8130
  %tobool11 = icmp ne %struct.rtx_def* %18, null, !dbg !8130
  br i1 %tobool11, label %cond.true12, label %cond.false13, !dbg !8130

cond.true12:                                      ; preds = %if.end
  br label %cond.end18, !dbg !8130

cond.false13:                                     ; preds = %if.end
  %19 = load i32, i32* %mode, align 4, !dbg !8131
  %idxprom14 = zext i32 %19 to i64, !dbg !8131
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !8131
  %20 = load i8, i8* %arrayidx15, align 1, !dbg !8131
  %conv16 = zext i8 %20 to i16, !dbg !8131
  %conv17 = zext i16 %conv16 to i32, !dbg !8131
  br label %cond.end18, !dbg !8130

cond.end18:                                       ; preds = %cond.false13, %cond.true12
  %cond19 = phi i32 [ 0, %cond.true12 ], [ %conv17, %cond.false13 ], !dbg !8130
  %call20 = call %struct.rtx_def* @simplify_gen_subreg(i32 %15, %struct.rtx_def* %16, i32 %17, i32 %cond19), !dbg !8132
  store %struct.rtx_def* %call20, %struct.rtx_def** %libval, align 8, !dbg !8133
  %call21 = call %struct.rtx_def* @get_insns(), !dbg !8134
  store %struct.rtx_def* %call21, %struct.rtx_def** %insns, align 8, !dbg !8135
  call void @end_sequence(), !dbg !8136
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !8137
  %22 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !8138
  %tobool22 = icmp ne %struct.rtx_def* %22, null, !dbg !8138
  br i1 %tobool22, label %cond.true23, label %cond.false24, !dbg !8138

cond.true23:                                      ; preds = %cond.end18
  %23 = load %struct.rtx_def*, %struct.rtx_def** %targ0.addr, align 8, !dbg !8139
  br label %cond.end25, !dbg !8138

cond.false24:                                     ; preds = %cond.end18
  %24 = load %struct.rtx_def*, %struct.rtx_def** %targ1.addr, align 8, !dbg !8140
  br label %cond.end25, !dbg !8138

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi %struct.rtx_def* [ %23, %cond.true23 ], [ %24, %cond.false24 ], !dbg !8138
  %25 = load %struct.rtx_def*, %struct.rtx_def** %libval, align 8, !dbg !8141
  %26 = load i32, i32* %code.addr, align 4, !dbg !8142
  %27 = load i32, i32* %mode, align 4, !dbg !8142
  %28 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8142
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !8142
  %call27 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %26, i32 %27, %struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !8142
  call void @emit_libcall_block(%struct.rtx_def* %21, %struct.rtx_def* %cond26, %struct.rtx_def* %25, %struct.rtx_def* %call27), !dbg !8143
  store i8 1, i8* %retval, align 1, !dbg !8144
  br label %return, !dbg !8144

return:                                           ; preds = %cond.end25, %if.then
  %30 = load i8, i8* %retval, align 1, !dbg !8145
  ret i8 %30, !dbg !8145
}

declare dso_local i32 @smallest_mode_for_size(i32, i32) #2

declare dso_local %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_simple_unop(i32 %mode, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !8146 {
entry:
  %mode.addr = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %unop = alloca %struct.optab_d*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8149, metadata !DIExpression()), !dbg !8150
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8151, metadata !DIExpression()), !dbg !8152
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !8153, metadata !DIExpression()), !dbg !8154
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8155, metadata !DIExpression()), !dbg !8156
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !8157, metadata !DIExpression()), !dbg !8158
  call void @llvm.dbg.declare(metadata %struct.optab_d** %unop, metadata !8159, metadata !DIExpression()), !dbg !8160
  %0 = load i32, i32* %code.addr, align 4, !dbg !8161
  %idxprom = sext i32 %0 to i64, !dbg !8162
  %arrayidx = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom, !dbg !8162
  %1 = load %struct.optab_d*, %struct.optab_d** %arrayidx, align 8, !dbg !8162
  store %struct.optab_d* %1, %struct.optab_d** %unop, align 8, !dbg !8160
  %2 = load %struct.optab_d*, %struct.optab_d** %unop, align 8, !dbg !8163
  %tobool = icmp ne %struct.optab_d* %2, null, !dbg !8163
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8163

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2554, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8163
  br label %cond.end, !dbg !8163

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8163

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8163
  %3 = load i32, i32* %mode.addr, align 4, !dbg !8164
  %4 = load %struct.optab_d*, %struct.optab_d** %unop, align 8, !dbg !8165
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8166
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8167
  %7 = load i32, i32* %unsignedp.addr, align 4, !dbg !8168
  %call = call %struct.rtx_def* @expand_unop(i32 %3, %struct.optab_d* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, i32 %7), !dbg !8169
  ret %struct.rtx_def* %call, !dbg !8170
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_unop(i32 %mode, %struct.optab_d* %unoptab, %struct.rtx_def* %op0, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !8171 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %libfunc = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %insns = alloca %struct.rtx_def*, align 8
  %target_piece = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %insns314 = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %eq_value = alloca %struct.rtx_def*, align 8
  %outmode = alloca i32, align 4
  %xop0420 = alloca %struct.rtx_def*, align 8
  %last421 = alloca %struct.rtx_def*, align 8
  %temp583 = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8174, metadata !DIExpression()), !dbg !8175
  store %struct.optab_d* %unoptab, %struct.optab_d** %unoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %unoptab.addr, metadata !8176, metadata !DIExpression()), !dbg !8177
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !8178, metadata !DIExpression()), !dbg !8179
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8180, metadata !DIExpression()), !dbg !8181
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !8182, metadata !DIExpression()), !dbg !8183
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !8184, metadata !DIExpression()), !dbg !8185
  %0 = load i32, i32* %mode.addr, align 4, !dbg !8186
  %idxprom = zext i32 %0 to i64, !dbg !8186
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !8186
  %1 = load i8, i8* %arrayidx, align 1, !dbg !8186
  %conv = zext i8 %1 to i32, !dbg !8186
  store i32 %conv, i32* %mclass, align 4, !dbg !8185
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !8187, metadata !DIExpression()), !dbg !8188
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !8189, metadata !DIExpression()), !dbg !8190
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !8191, metadata !DIExpression()), !dbg !8192
  %2 = load i32, i32* %mode.addr, align 4, !dbg !8193
  %3 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8194
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8195
  %5 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8196
  %6 = load i32, i32* %unsignedp.addr, align 4, !dbg !8197
  %call = call %struct.rtx_def* @expand_unop_direct(i32 %2, %struct.optab_d* %3, %struct.rtx_def* %4, %struct.rtx_def* %5, i32 %6), !dbg !8198
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !8199
  %7 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8200
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !8200
  br i1 %tobool, label %if.then, label %if.end, !dbg !8202

if.then:                                          ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8203
  store %struct.rtx_def* %8, %struct.rtx_def** %retval, align 8, !dbg !8204
  br label %return, !dbg !8204

if.end:                                           ; preds = %entry
  %9 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8205
  %cmp = icmp eq %struct.optab_d* %9, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), !dbg !8207
  br i1 %cmp, label %if.then2, label %if.end23, !dbg !8208

if.then2:                                         ; preds = %if.end
  %10 = load i32, i32* %mode.addr, align 4, !dbg !8209
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8211
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8212
  %call3 = call %struct.rtx_def* @widen_clz(i32 %10, %struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !8213
  store %struct.rtx_def* %call3, %struct.rtx_def** %temp, align 8, !dbg !8214
  %13 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8215
  %tobool4 = icmp ne %struct.rtx_def* %13, null, !dbg !8215
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !8217

if.then5:                                         ; preds = %if.then2
  %14 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8218
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !8219
  br label %return, !dbg !8219

if.end6:                                          ; preds = %if.then2
  %15 = load i32, i32* %mode.addr, align 4, !dbg !8220
  %idxprom7 = zext i32 %15 to i64, !dbg !8220
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom7, !dbg !8220
  %16 = load i8, i8* %arrayidx8, align 1, !dbg !8220
  %conv9 = zext i8 %16 to i16, !dbg !8220
  %conv10 = zext i16 %conv9 to i32, !dbg !8220
  %cmp11 = icmp eq i32 %conv10, 8, !dbg !8222
  br i1 %cmp11, label %land.lhs.true, label %if.end22, !dbg !8223

land.lhs.true:                                    ; preds = %if.end6
  %17 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8224
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %17, i32 0, i32 4, !dbg !8224
  %18 = load i32, i32* @word_mode, align 4, !dbg !8224
  %idxprom13 = sext i32 %18 to i64, !dbg !8224
  %arrayidx14 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom13, !dbg !8224
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx14, i32 0, i32 0, !dbg !8225
  %19 = load i32, i32* %insn_code, align 4, !dbg !8225
  %cmp15 = icmp ne i32 %19, 2956, !dbg !8226
  br i1 %cmp15, label %if.then17, label %if.end22, !dbg !8227

if.then17:                                        ; preds = %land.lhs.true
  %20 = load i32, i32* %mode.addr, align 4, !dbg !8228
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8230
  %22 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8231
  %call18 = call %struct.rtx_def* @expand_doubleword_clz(i32 %20, %struct.rtx_def* %21, %struct.rtx_def* %22), !dbg !8232
  store %struct.rtx_def* %call18, %struct.rtx_def** %temp, align 8, !dbg !8233
  %23 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8234
  %tobool19 = icmp ne %struct.rtx_def* %23, null, !dbg !8234
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !8236

if.then20:                                        ; preds = %if.then17
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8237
  store %struct.rtx_def* %24, %struct.rtx_def** %retval, align 8, !dbg !8238
  br label %return, !dbg !8238

if.end21:                                         ; preds = %if.then17
  br label %if.end22, !dbg !8239

if.end22:                                         ; preds = %if.end21, %land.lhs.true, %if.end6
  br label %try_libcall, !dbg !8240

if.end23:                                         ; preds = %if.end
  %25 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8241
  %cmp24 = icmp eq %struct.optab_d* %25, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), !dbg !8243
  br i1 %cmp24, label %if.then26, label %if.end50, !dbg !8244

if.then26:                                        ; preds = %if.end23
  %26 = load i32, i32* %mode.addr, align 4, !dbg !8245
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8247
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8248
  %call27 = call %struct.rtx_def* @widen_bswap(i32 %26, %struct.rtx_def* %27, %struct.rtx_def* %28), !dbg !8249
  store %struct.rtx_def* %call27, %struct.rtx_def** %temp, align 8, !dbg !8250
  %29 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8251
  %tobool28 = icmp ne %struct.rtx_def* %29, null, !dbg !8251
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !8253

if.then29:                                        ; preds = %if.then26
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8254
  store %struct.rtx_def* %30, %struct.rtx_def** %retval, align 8, !dbg !8255
  br label %return, !dbg !8255

if.end30:                                         ; preds = %if.then26
  %31 = load i32, i32* %mode.addr, align 4, !dbg !8256
  %idxprom31 = zext i32 %31 to i64, !dbg !8256
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom31, !dbg !8256
  %32 = load i8, i8* %arrayidx32, align 1, !dbg !8256
  %conv33 = zext i8 %32 to i16, !dbg !8256
  %conv34 = zext i16 %conv33 to i32, !dbg !8256
  %cmp35 = icmp eq i32 %conv34, 8, !dbg !8258
  br i1 %cmp35, label %land.lhs.true37, label %if.end49, !dbg !8259

land.lhs.true37:                                  ; preds = %if.end30
  %33 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8260
  %handlers38 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %33, i32 0, i32 4, !dbg !8260
  %34 = load i32, i32* @word_mode, align 4, !dbg !8260
  %idxprom39 = sext i32 %34 to i64, !dbg !8260
  %arrayidx40 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers38, i64 0, i64 %idxprom39, !dbg !8260
  %insn_code41 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx40, i32 0, i32 0, !dbg !8261
  %35 = load i32, i32* %insn_code41, align 4, !dbg !8261
  %cmp42 = icmp ne i32 %35, 2956, !dbg !8262
  br i1 %cmp42, label %if.then44, label %if.end49, !dbg !8263

if.then44:                                        ; preds = %land.lhs.true37
  %36 = load i32, i32* %mode.addr, align 4, !dbg !8264
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8266
  %38 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8267
  %call45 = call %struct.rtx_def* @expand_doubleword_bswap(i32 %36, %struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !8268
  store %struct.rtx_def* %call45, %struct.rtx_def** %temp, align 8, !dbg !8269
  %39 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8270
  %tobool46 = icmp ne %struct.rtx_def* %39, null, !dbg !8270
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !8272

if.then47:                                        ; preds = %if.then44
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8273
  store %struct.rtx_def* %40, %struct.rtx_def** %retval, align 8, !dbg !8274
  br label %return, !dbg !8274

if.end48:                                         ; preds = %if.then44
  br label %if.end49, !dbg !8275

if.end49:                                         ; preds = %if.end48, %land.lhs.true37, %if.end30
  br label %try_libcall, !dbg !8276

if.end50:                                         ; preds = %if.end23
  %41 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp51 = icmp eq i32 %41, 2, !dbg !8277
  br i1 %cmp51, label %if.then73, label %lor.lhs.false, !dbg !8277

lor.lhs.false:                                    ; preds = %if.end50
  %42 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp53 = icmp eq i32 %42, 8, !dbg !8277
  br i1 %cmp53, label %if.then73, label %lor.lhs.false55, !dbg !8277

lor.lhs.false55:                                  ; preds = %lor.lhs.false
  %43 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp56 = icmp eq i32 %43, 9, !dbg !8277
  br i1 %cmp56, label %if.then73, label %lor.lhs.false58, !dbg !8277

lor.lhs.false58:                                  ; preds = %lor.lhs.false55
  %44 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp59 = icmp eq i32 %44, 11, !dbg !8277
  br i1 %cmp59, label %if.then73, label %lor.lhs.false61, !dbg !8277

lor.lhs.false61:                                  ; preds = %lor.lhs.false58
  %45 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp62 = icmp eq i32 %45, 4, !dbg !8277
  br i1 %cmp62, label %if.then73, label %lor.lhs.false64, !dbg !8277

lor.lhs.false64:                                  ; preds = %lor.lhs.false61
  %46 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp65 = icmp eq i32 %46, 5, !dbg !8277
  br i1 %cmp65, label %if.then73, label %lor.lhs.false67, !dbg !8277

lor.lhs.false67:                                  ; preds = %lor.lhs.false64
  %47 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp68 = icmp eq i32 %47, 6, !dbg !8277
  br i1 %cmp68, label %if.then73, label %lor.lhs.false70, !dbg !8277

lor.lhs.false70:                                  ; preds = %lor.lhs.false67
  %48 = load i32, i32* %mclass, align 4, !dbg !8277
  %cmp71 = icmp eq i32 %48, 7, !dbg !8277
  br i1 %cmp71, label %if.then73, label %if.end113, !dbg !8279

if.then73:                                        ; preds = %lor.lhs.false70, %lor.lhs.false67, %lor.lhs.false64, %lor.lhs.false61, %lor.lhs.false58, %lor.lhs.false55, %lor.lhs.false, %if.end50
  %49 = load i32, i32* %mode.addr, align 4, !dbg !8280
  %idxprom74 = zext i32 %49 to i64, !dbg !8280
  %arrayidx75 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom74, !dbg !8280
  %50 = load i8, i8* %arrayidx75, align 1, !dbg !8280
  %conv76 = zext i8 %50 to i32, !dbg !8280
  store i32 %conv76, i32* %wider_mode, align 4, !dbg !8282
  br label %for.cond, !dbg !8283

for.cond:                                         ; preds = %for.inc, %if.then73
  %51 = load i32, i32* %wider_mode, align 4, !dbg !8284
  %cmp77 = icmp ne i32 %51, 0, !dbg !8286
  br i1 %cmp77, label %for.body, label %for.end, !dbg !8287

for.body:                                         ; preds = %for.cond
  %52 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8288
  %handlers79 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %52, i32 0, i32 4, !dbg !8288
  %53 = load i32, i32* %wider_mode, align 4, !dbg !8288
  %idxprom80 = sext i32 %53 to i64, !dbg !8288
  %arrayidx81 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers79, i64 0, i64 %idxprom80, !dbg !8288
  %insn_code82 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx81, i32 0, i32 0, !dbg !8291
  %54 = load i32, i32* %insn_code82, align 4, !dbg !8291
  %cmp83 = icmp ne i32 %54, 2956, !dbg !8292
  br i1 %cmp83, label %if.then85, label %if.end109, !dbg !8293

if.then85:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !8294, metadata !DIExpression()), !dbg !8296
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8297
  store %struct.rtx_def* %55, %struct.rtx_def** %xop0, align 8, !dbg !8296
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8298, metadata !DIExpression()), !dbg !8299
  %call86 = call %struct.rtx_def* @get_last_insn(), !dbg !8300
  store %struct.rtx_def* %call86, %struct.rtx_def** %last, align 8, !dbg !8299
  %56 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8301
  %57 = load i32, i32* %wider_mode, align 4, !dbg !8302
  %58 = load i32, i32* %mode.addr, align 4, !dbg !8303
  %59 = load i32, i32* %unsignedp.addr, align 4, !dbg !8304
  %60 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8305
  %cmp87 = icmp eq %struct.optab_d* %60, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), !dbg !8306
  br i1 %cmp87, label %land.rhs, label %lor.lhs.false89, !dbg !8307

lor.lhs.false89:                                  ; preds = %if.then85
  %61 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8308
  %cmp90 = icmp eq %struct.optab_d* %61, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), !dbg !8309
  br i1 %cmp90, label %land.rhs, label %land.end, !dbg !8310

land.rhs:                                         ; preds = %lor.lhs.false89, %if.then85
  %62 = load i32, i32* %mclass, align 4, !dbg !8311
  %cmp92 = icmp eq i32 %62, 2, !dbg !8312
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false89
  %63 = phi i1 [ false, %lor.lhs.false89 ], [ %cmp92, %land.rhs ], !dbg !8313
  %land.ext = zext i1 %63 to i32, !dbg !8310
  %call94 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %56, i32 %57, i32 %58, i32 %59, i32 %land.ext), !dbg !8314
  store %struct.rtx_def* %call94, %struct.rtx_def** %xop0, align 8, !dbg !8315
  %64 = load i32, i32* %wider_mode, align 4, !dbg !8316
  %65 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8317
  %66 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8318
  %67 = load i32, i32* %unsignedp.addr, align 4, !dbg !8319
  %call95 = call %struct.rtx_def* @expand_unop(i32 %64, %struct.optab_d* %65, %struct.rtx_def* %66, %struct.rtx_def* null, i32 %67), !dbg !8320
  store %struct.rtx_def* %call95, %struct.rtx_def** %temp, align 8, !dbg !8321
  %68 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8322
  %tobool96 = icmp ne %struct.rtx_def* %68, null, !dbg !8322
  br i1 %tobool96, label %if.then97, label %if.else107, !dbg !8324

if.then97:                                        ; preds = %land.end
  %69 = load i32, i32* %mclass, align 4, !dbg !8325
  %cmp98 = icmp ne i32 %69, 2, !dbg !8328
  br i1 %cmp98, label %if.then100, label %if.else, !dbg !8329

if.then100:                                       ; preds = %if.then97
  %70 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8330
  %cmp101 = icmp eq %struct.rtx_def* %70, null, !dbg !8333
  br i1 %cmp101, label %if.then103, label %if.end105, !dbg !8334

if.then103:                                       ; preds = %if.then100
  %71 = load i32, i32* %mode.addr, align 4, !dbg !8335
  %call104 = call %struct.rtx_def* @gen_reg_rtx(i32 %71), !dbg !8336
  store %struct.rtx_def* %call104, %struct.rtx_def** %target.addr, align 8, !dbg !8337
  br label %if.end105, !dbg !8338

if.end105:                                        ; preds = %if.then103, %if.then100
  %72 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8339
  %73 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8340
  call void @convert_move(%struct.rtx_def* %72, %struct.rtx_def* %73, i32 0), !dbg !8341
  %74 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8342
  store %struct.rtx_def* %74, %struct.rtx_def** %retval, align 8, !dbg !8343
  br label %return, !dbg !8343

if.else:                                          ; preds = %if.then97
  %75 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8344
  %76 = load i32, i32* %mode.addr, align 4, !dbg !8345
  %77 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8346
  %call106 = call %struct.rtx_def* %75(i32 %76, %struct.rtx_def* %77), !dbg !8344
  store %struct.rtx_def* %call106, %struct.rtx_def** %retval, align 8, !dbg !8347
  br label %return, !dbg !8347

if.else107:                                       ; preds = %land.end
  %78 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8348
  call void @delete_insns_since(%struct.rtx_def* %78), !dbg !8349
  br label %if.end108

if.end108:                                        ; preds = %if.else107
  br label %if.end109, !dbg !8350

if.end109:                                        ; preds = %if.end108, %for.body
  br label %for.inc, !dbg !8351

for.inc:                                          ; preds = %if.end109
  %79 = load i32, i32* %wider_mode, align 4, !dbg !8352
  %idxprom110 = zext i32 %79 to i64, !dbg !8352
  %arrayidx111 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom110, !dbg !8352
  %80 = load i8, i8* %arrayidx111, align 1, !dbg !8352
  %conv112 = zext i8 %80 to i32, !dbg !8352
  store i32 %conv112, i32* %wider_mode, align 4, !dbg !8353
  br label %for.cond, !dbg !8354, !llvm.loop !8355

for.end:                                          ; preds = %for.cond
  br label %if.end113, !dbg !8356

if.end113:                                        ; preds = %for.end, %lor.lhs.false70
  %81 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8357
  %cmp114 = icmp eq %struct.optab_d* %81, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), !dbg !8359
  br i1 %cmp114, label %land.lhs.true116, label %if.end164, !dbg !8360

land.lhs.true116:                                 ; preds = %if.end113
  %82 = load i32, i32* %mclass, align 4, !dbg !8361
  %cmp117 = icmp eq i32 %82, 2, !dbg !8362
  br i1 %cmp117, label %land.lhs.true119, label %if.end164, !dbg !8363

land.lhs.true119:                                 ; preds = %land.lhs.true116
  %83 = load i32, i32* %mode.addr, align 4, !dbg !8364
  %idxprom120 = zext i32 %83 to i64, !dbg !8364
  %arrayidx121 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom120, !dbg !8364
  %84 = load i8, i8* %arrayidx121, align 1, !dbg !8364
  %conv122 = zext i8 %84 to i16, !dbg !8364
  %conv123 = zext i16 %conv122 to i32, !dbg !8364
  %cmp124 = icmp sgt i32 %conv123, 4, !dbg !8365
  br i1 %cmp124, label %land.lhs.true126, label %if.end164, !dbg !8366

land.lhs.true126:                                 ; preds = %land.lhs.true119
  %85 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8367
  %handlers127 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %85, i32 0, i32 4, !dbg !8367
  %86 = load i32, i32* @word_mode, align 4, !dbg !8367
  %idxprom128 = sext i32 %86 to i64, !dbg !8367
  %arrayidx129 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers127, i64 0, i64 %idxprom128, !dbg !8367
  %insn_code130 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx129, i32 0, i32 0, !dbg !8368
  %87 = load i32, i32* %insn_code130, align 4, !dbg !8368
  %cmp131 = icmp ne i32 %87, 2956, !dbg !8369
  br i1 %cmp131, label %if.then133, label %if.end164, !dbg !8370

if.then133:                                       ; preds = %land.lhs.true126
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8371, metadata !DIExpression()), !dbg !8373
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !8374, metadata !DIExpression()), !dbg !8375
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8376
  %cmp134 = icmp eq %struct.rtx_def* %88, null, !dbg !8378
  br i1 %cmp134, label %if.then139, label %lor.lhs.false136, !dbg !8379

lor.lhs.false136:                                 ; preds = %if.then133
  %89 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8380
  %90 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8381
  %cmp137 = icmp eq %struct.rtx_def* %89, %90, !dbg !8382
  br i1 %cmp137, label %if.then139, label %if.end141, !dbg !8383

if.then139:                                       ; preds = %lor.lhs.false136, %if.then133
  %91 = load i32, i32* %mode.addr, align 4, !dbg !8384
  %call140 = call %struct.rtx_def* @gen_reg_rtx(i32 %91), !dbg !8385
  store %struct.rtx_def* %call140, %struct.rtx_def** %target.addr, align 8, !dbg !8386
  br label %if.end141, !dbg !8387

if.end141:                                        ; preds = %if.then139, %lor.lhs.false136
  call void @start_sequence(), !dbg !8388
  store i32 0, i32* %i, align 4, !dbg !8389
  br label %for.cond142, !dbg !8391

for.cond142:                                      ; preds = %for.inc160, %if.end141
  %92 = load i32, i32* %i, align 4, !dbg !8392
  %93 = load i32, i32* %mode.addr, align 4, !dbg !8394
  %idxprom143 = zext i32 %93 to i64, !dbg !8394
  %arrayidx144 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom143, !dbg !8394
  %94 = load i8, i8* %arrayidx144, align 1, !dbg !8394
  %conv145 = zext i8 %94 to i16, !dbg !8394
  %conv146 = zext i16 %conv145 to i32, !dbg !8394
  %mul = mul nsw i32 %conv146, 8, !dbg !8394
  %conv147 = trunc i32 %mul to i16, !dbg !8394
  %conv148 = zext i16 %conv147 to i32, !dbg !8394
  %div = sdiv i32 %conv148, 32, !dbg !8395
  %cmp149 = icmp slt i32 %92, %div, !dbg !8396
  br i1 %cmp149, label %for.body151, label %for.end161, !dbg !8397

for.body151:                                      ; preds = %for.cond142
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target_piece, metadata !8398, metadata !DIExpression()), !dbg !8400
  %95 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8401
  %96 = load i32, i32* %i, align 4, !dbg !8402
  %97 = load i32, i32* %mode.addr, align 4, !dbg !8403
  %call152 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %95, i32 %96, i32 1, i32 %97), !dbg !8404
  store %struct.rtx_def* %call152, %struct.rtx_def** %target_piece, align 8, !dbg !8400
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8405, metadata !DIExpression()), !dbg !8406
  %98 = load i32, i32* @word_mode, align 4, !dbg !8407
  %99 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8408
  %100 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8409
  %101 = load i32, i32* %i, align 4, !dbg !8410
  %102 = load i32, i32* %mode.addr, align 4, !dbg !8411
  %call153 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %100, i32 %101, i32 %102), !dbg !8412
  %103 = load %struct.rtx_def*, %struct.rtx_def** %target_piece, align 8, !dbg !8413
  %104 = load i32, i32* %unsignedp.addr, align 4, !dbg !8414
  %call154 = call %struct.rtx_def* @expand_unop(i32 %98, %struct.optab_d* %99, %struct.rtx_def* %call153, %struct.rtx_def* %103, i32 %104), !dbg !8415
  store %struct.rtx_def* %call154, %struct.rtx_def** %x, align 8, !dbg !8406
  %105 = load %struct.rtx_def*, %struct.rtx_def** %target_piece, align 8, !dbg !8416
  %106 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8418
  %cmp155 = icmp ne %struct.rtx_def* %105, %106, !dbg !8419
  br i1 %cmp155, label %if.then157, label %if.end159, !dbg !8420

if.then157:                                       ; preds = %for.body151
  %107 = load %struct.rtx_def*, %struct.rtx_def** %target_piece, align 8, !dbg !8421
  %108 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8422
  %call158 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %107, %struct.rtx_def* %108), !dbg !8423
  br label %if.end159, !dbg !8423

if.end159:                                        ; preds = %if.then157, %for.body151
  br label %for.inc160, !dbg !8424

for.inc160:                                       ; preds = %if.end159
  %109 = load i32, i32* %i, align 4, !dbg !8425
  %inc = add nsw i32 %109, 1, !dbg !8425
  store i32 %inc, i32* %i, align 4, !dbg !8425
  br label %for.cond142, !dbg !8426, !llvm.loop !8427

for.end161:                                       ; preds = %for.cond142
  %call162 = call %struct.rtx_def* @get_insns(), !dbg !8429
  store %struct.rtx_def* %call162, %struct.rtx_def** %insns, align 8, !dbg !8430
  call void @end_sequence(), !dbg !8431
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !8432
  %call163 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %110), !dbg !8433
  %111 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8434
  store %struct.rtx_def* %111, %struct.rtx_def** %retval, align 8, !dbg !8435
  br label %return, !dbg !8435

if.end164:                                        ; preds = %land.lhs.true126, %land.lhs.true119, %land.lhs.true116, %if.end113
  %112 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8436
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %112, i32 0, i32 0, !dbg !8438
  %113 = load i32, i32* %code, align 8, !dbg !8438
  %cmp165 = icmp eq i32 %113, 51, !dbg !8439
  br i1 %cmp165, label %if.then167, label %if.end286, !dbg !8440

if.then167:                                       ; preds = %if.end164
  %114 = load i32, i32* %mode.addr, align 4, !dbg !8441
  %idxprom168 = zext i32 %114 to i64, !dbg !8441
  %arrayidx169 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom168, !dbg !8441
  %115 = load i8, i8* %arrayidx169, align 1, !dbg !8441
  %conv170 = zext i8 %115 to i32, !dbg !8441
  %cmp171 = icmp eq i32 %conv170, 8, !dbg !8441
  br i1 %cmp171, label %if.then179, label %lor.lhs.false173, !dbg !8441

lor.lhs.false173:                                 ; preds = %if.then167
  %116 = load i32, i32* %mode.addr, align 4, !dbg !8441
  %idxprom174 = zext i32 %116 to i64, !dbg !8441
  %arrayidx175 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom174, !dbg !8441
  %117 = load i8, i8* %arrayidx175, align 1, !dbg !8441
  %conv176 = zext i8 %117 to i32, !dbg !8441
  %cmp177 = icmp eq i32 %conv176, 9, !dbg !8441
  br i1 %cmp177, label %if.then179, label %if.end184, !dbg !8444

if.then179:                                       ; preds = %lor.lhs.false173, %if.then167
  %118 = load i32, i32* %mode.addr, align 4, !dbg !8445
  %119 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8447
  %120 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8448
  %call180 = call %struct.rtx_def* @expand_absneg_bit(i32 51, i32 %118, %struct.rtx_def* %119, %struct.rtx_def* %120), !dbg !8449
  store %struct.rtx_def* %call180, %struct.rtx_def** %temp, align 8, !dbg !8450
  %121 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8451
  %tobool181 = icmp ne %struct.rtx_def* %121, null, !dbg !8451
  br i1 %tobool181, label %if.then182, label %if.end183, !dbg !8453

if.then182:                                       ; preds = %if.then179
  %122 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8454
  store %struct.rtx_def* %122, %struct.rtx_def** %retval, align 8, !dbg !8455
  br label %return, !dbg !8455

if.end183:                                        ; preds = %if.then179
  br label %if.end184, !dbg !8456

if.end184:                                        ; preds = %if.end183, %lor.lhs.false173
  %123 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom185 = zext i32 %123 to i64, !dbg !8457
  %arrayidx186 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom185, !dbg !8457
  %124 = load i8, i8* %arrayidx186, align 1, !dbg !8457
  %conv187 = zext i8 %124 to i32, !dbg !8457
  %cmp188 = icmp eq i32 %conv187, 8, !dbg !8457
  br i1 %cmp188, label %land.lhs.true208, label %lor.lhs.false190, !dbg !8457

lor.lhs.false190:                                 ; preds = %if.end184
  %125 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom191 = zext i32 %125 to i64, !dbg !8457
  %arrayidx192 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom191, !dbg !8457
  %126 = load i8, i8* %arrayidx192, align 1, !dbg !8457
  %conv193 = zext i8 %126 to i32, !dbg !8457
  %cmp194 = icmp eq i32 %conv193, 9, !dbg !8457
  br i1 %cmp194, label %land.lhs.true208, label %lor.lhs.false196, !dbg !8457

lor.lhs.false196:                                 ; preds = %lor.lhs.false190
  %127 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom197 = zext i32 %127 to i64, !dbg !8457
  %arrayidx198 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom197, !dbg !8457
  %128 = load i8, i8* %arrayidx198, align 1, !dbg !8457
  %conv199 = zext i8 %128 to i32, !dbg !8457
  %cmp200 = icmp eq i32 %conv199, 11, !dbg !8457
  br i1 %cmp200, label %land.lhs.true208, label %lor.lhs.false202, !dbg !8457

lor.lhs.false202:                                 ; preds = %lor.lhs.false196
  %129 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom203 = zext i32 %129 to i64, !dbg !8457
  %arrayidx204 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom203, !dbg !8457
  %130 = load i8, i8* %arrayidx204, align 1, !dbg !8457
  %conv205 = zext i8 %130 to i32, !dbg !8457
  %cmp206 = icmp eq i32 %conv205, 17, !dbg !8457
  br i1 %cmp206, label %land.lhs.true208, label %if.then275, !dbg !8457

land.lhs.true208:                                 ; preds = %lor.lhs.false202, %lor.lhs.false196, %lor.lhs.false190, %if.end184
  %131 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom209 = zext i32 %131 to i64, !dbg !8457
  %arrayidx210 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom209, !dbg !8457
  %132 = load i8, i8* %arrayidx210, align 1, !dbg !8457
  %conv211 = zext i8 %132 to i32, !dbg !8457
  %cmp212 = icmp eq i32 %conv211, 8, !dbg !8457
  br i1 %cmp212, label %cond.true, label %lor.lhs.false214, !dbg !8457

lor.lhs.false214:                                 ; preds = %land.lhs.true208
  %133 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom215 = zext i32 %133 to i64, !dbg !8457
  %arrayidx216 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom215, !dbg !8457
  %134 = load i8, i8* %arrayidx216, align 1, !dbg !8457
  %conv217 = zext i8 %134 to i32, !dbg !8457
  %cmp218 = icmp eq i32 %conv217, 9, !dbg !8457
  br i1 %cmp218, label %cond.true, label %cond.false, !dbg !8457

cond.true:                                        ; preds = %lor.lhs.false214, %land.lhs.true208
  %135 = load i32, i32* %mode.addr, align 4, !dbg !8457
  br label %cond.end, !dbg !8457

cond.false:                                       ; preds = %lor.lhs.false214
  %136 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom220 = zext i32 %136 to i64, !dbg !8457
  %arrayidx221 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom220, !dbg !8457
  %137 = load i8, i8* %arrayidx221, align 1, !dbg !8457
  %conv222 = zext i8 %137 to i32, !dbg !8457
  br label %cond.end, !dbg !8457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %135, %cond.true ], [ %conv222, %cond.false ], !dbg !8457
  %idxprom223 = zext i32 %cond to i64, !dbg !8457
  %arrayidx224 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom223, !dbg !8457
  %138 = load i8, i8* %arrayidx224, align 1, !dbg !8457
  %conv225 = zext i8 %138 to i32, !dbg !8457
  %cmp226 = icmp eq i32 %conv225, 9, !dbg !8457
  br i1 %cmp226, label %cond.true228, label %cond.false247, !dbg !8457

cond.true228:                                     ; preds = %cond.end
  %139 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom229 = zext i32 %139 to i64, !dbg !8457
  %arrayidx230 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom229, !dbg !8457
  %140 = load i8, i8* %arrayidx230, align 1, !dbg !8457
  %conv231 = zext i8 %140 to i32, !dbg !8457
  %cmp232 = icmp eq i32 %conv231, 8, !dbg !8457
  br i1 %cmp232, label %cond.true240, label %lor.lhs.false234, !dbg !8457

lor.lhs.false234:                                 ; preds = %cond.true228
  %141 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom235 = zext i32 %141 to i64, !dbg !8457
  %arrayidx236 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom235, !dbg !8457
  %142 = load i8, i8* %arrayidx236, align 1, !dbg !8457
  %conv237 = zext i8 %142 to i32, !dbg !8457
  %cmp238 = icmp eq i32 %conv237, 9, !dbg !8457
  br i1 %cmp238, label %cond.true240, label %cond.false241, !dbg !8457

cond.true240:                                     ; preds = %lor.lhs.false234, %cond.true228
  %143 = load i32, i32* %mode.addr, align 4, !dbg !8457
  br label %cond.end245, !dbg !8457

cond.false241:                                    ; preds = %lor.lhs.false234
  %144 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom242 = zext i32 %144 to i64, !dbg !8457
  %arrayidx243 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom242, !dbg !8457
  %145 = load i8, i8* %arrayidx243, align 1, !dbg !8457
  %conv244 = zext i8 %145 to i32, !dbg !8457
  br label %cond.end245, !dbg !8457

cond.end245:                                      ; preds = %cond.false241, %cond.true240
  %cond246 = phi i32 [ %143, %cond.true240 ], [ %conv244, %cond.false241 ], !dbg !8457
  %sub = sub i32 %cond246, 42, !dbg !8457
  %add = add i32 %sub, 4, !dbg !8457
  br label %cond.end267, !dbg !8457

cond.false247:                                    ; preds = %cond.end
  %146 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom248 = zext i32 %146 to i64, !dbg !8457
  %arrayidx249 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom248, !dbg !8457
  %147 = load i8, i8* %arrayidx249, align 1, !dbg !8457
  %conv250 = zext i8 %147 to i32, !dbg !8457
  %cmp251 = icmp eq i32 %conv250, 8, !dbg !8457
  br i1 %cmp251, label %cond.true259, label %lor.lhs.false253, !dbg !8457

lor.lhs.false253:                                 ; preds = %cond.false247
  %148 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom254 = zext i32 %148 to i64, !dbg !8457
  %arrayidx255 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom254, !dbg !8457
  %149 = load i8, i8* %arrayidx255, align 1, !dbg !8457
  %conv256 = zext i8 %149 to i32, !dbg !8457
  %cmp257 = icmp eq i32 %conv256, 9, !dbg !8457
  br i1 %cmp257, label %cond.true259, label %cond.false260, !dbg !8457

cond.true259:                                     ; preds = %lor.lhs.false253, %cond.false247
  %150 = load i32, i32* %mode.addr, align 4, !dbg !8457
  br label %cond.end264, !dbg !8457

cond.false260:                                    ; preds = %lor.lhs.false253
  %151 = load i32, i32* %mode.addr, align 4, !dbg !8457
  %idxprom261 = zext i32 %151 to i64, !dbg !8457
  %arrayidx262 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom261, !dbg !8457
  %152 = load i8, i8* %arrayidx262, align 1, !dbg !8457
  %conv263 = zext i8 %152 to i32, !dbg !8457
  br label %cond.end264, !dbg !8457

cond.end264:                                      ; preds = %cond.false260, %cond.true259
  %cond265 = phi i32 [ %150, %cond.true259 ], [ %conv263, %cond.false260 ], !dbg !8457
  %sub266 = sub i32 %cond265, 38, !dbg !8457
  br label %cond.end267, !dbg !8457

cond.end267:                                      ; preds = %cond.end264, %cond.end245
  %cond268 = phi i32 [ %add, %cond.end245 ], [ %sub266, %cond.end264 ], !dbg !8457
  %idxprom269 = zext i32 %cond268 to i64, !dbg !8457
  %arrayidx270 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom269, !dbg !8457
  %153 = load %struct.real_format*, %struct.real_format** %arrayidx270, align 8, !dbg !8457
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %153, i32 0, i32 14, !dbg !8457
  %154 = load i8, i8* %has_signed_zero, align 1, !dbg !8457
  %conv271 = zext i8 %154 to i32, !dbg !8457
  %tobool272 = icmp ne i32 %conv271, 0, !dbg !8457
  br i1 %tobool272, label %land.lhs.true273, label %if.then275, !dbg !8457

land.lhs.true273:                                 ; preds = %cond.end267
  %155 = load i32, i32* @flag_signed_zeros, align 4, !dbg !8457
  %tobool274 = icmp ne i32 %155, 0, !dbg !8457
  br i1 %tobool274, label %if.end285, label %if.then275, !dbg !8459

if.then275:                                       ; preds = %land.lhs.true273, %cond.end267, %lor.lhs.false202
  %156 = load i32, i32* %mode.addr, align 4, !dbg !8460
  %157 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8462
  %cmp276 = icmp eq %struct.optab_d* %157, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), !dbg !8463
  %158 = zext i1 %cmp276 to i64, !dbg !8462
  %cond278 = select i1 %cmp276, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !8462
  %159 = load i32, i32* %mode.addr, align 4, !dbg !8464
  %idxprom279 = sext i32 %159 to i64, !dbg !8464
  %arrayidx280 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom279, !dbg !8464
  %160 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx280, align 8, !dbg !8464
  %161 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8465
  %162 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8466
  %163 = load i32, i32* %unsignedp.addr, align 4, !dbg !8467
  %call281 = call %struct.rtx_def* @expand_binop(i32 %156, %struct.optab_d* %cond278, %struct.rtx_def* %160, %struct.rtx_def* %161, %struct.rtx_def* %162, i32 %163, i32 0), !dbg !8468
  store %struct.rtx_def* %call281, %struct.rtx_def** %temp, align 8, !dbg !8469
  %164 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8470
  %tobool282 = icmp ne %struct.rtx_def* %164, null, !dbg !8470
  br i1 %tobool282, label %if.then283, label %if.end284, !dbg !8472

if.then283:                                       ; preds = %if.then275
  %165 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8473
  store %struct.rtx_def* %165, %struct.rtx_def** %retval, align 8, !dbg !8474
  br label %return, !dbg !8474

if.end284:                                        ; preds = %if.then275
  br label %if.end285, !dbg !8475

if.end285:                                        ; preds = %if.end284, %land.lhs.true273
  br label %if.end286, !dbg !8476

if.end286:                                        ; preds = %if.end285, %if.end164
  %166 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8477
  %cmp287 = icmp eq %struct.optab_d* %166, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 74), !dbg !8479
  br i1 %cmp287, label %if.then289, label %if.end294, !dbg !8480

if.then289:                                       ; preds = %if.end286
  %167 = load i32, i32* %mode.addr, align 4, !dbg !8481
  %168 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8483
  %169 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8484
  %call290 = call %struct.rtx_def* @expand_parity(i32 %167, %struct.rtx_def* %168, %struct.rtx_def* %169), !dbg !8485
  store %struct.rtx_def* %call290, %struct.rtx_def** %temp, align 8, !dbg !8486
  %170 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8487
  %tobool291 = icmp ne %struct.rtx_def* %170, null, !dbg !8487
  br i1 %tobool291, label %if.then292, label %if.end293, !dbg !8489

if.then292:                                       ; preds = %if.then289
  %171 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8490
  store %struct.rtx_def* %171, %struct.rtx_def** %retval, align 8, !dbg !8491
  br label %return, !dbg !8491

if.end293:                                        ; preds = %if.then289
  br label %if.end294, !dbg !8492

if.end294:                                        ; preds = %if.end293, %if.end286
  %172 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8493
  %cmp295 = icmp eq %struct.optab_d* %172, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70), !dbg !8495
  br i1 %cmp295, label %if.then297, label %if.end302, !dbg !8496

if.then297:                                       ; preds = %if.end294
  %173 = load i32, i32* %mode.addr, align 4, !dbg !8497
  %174 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8499
  %175 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8500
  %call298 = call %struct.rtx_def* @expand_ffs(i32 %173, %struct.rtx_def* %174, %struct.rtx_def* %175), !dbg !8501
  store %struct.rtx_def* %call298, %struct.rtx_def** %temp, align 8, !dbg !8502
  %176 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8503
  %tobool299 = icmp ne %struct.rtx_def* %176, null, !dbg !8503
  br i1 %tobool299, label %if.then300, label %if.end301, !dbg !8505

if.then300:                                       ; preds = %if.then297
  %177 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8506
  store %struct.rtx_def* %177, %struct.rtx_def** %retval, align 8, !dbg !8507
  br label %return, !dbg !8507

if.end301:                                        ; preds = %if.then297
  br label %if.end302, !dbg !8508

if.end302:                                        ; preds = %if.end301, %if.end294
  %178 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8509
  %cmp303 = icmp eq %struct.optab_d* %178, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72), !dbg !8511
  br i1 %cmp303, label %if.then305, label %if.end310, !dbg !8512

if.then305:                                       ; preds = %if.end302
  %179 = load i32, i32* %mode.addr, align 4, !dbg !8513
  %180 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8515
  %181 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8516
  %call306 = call %struct.rtx_def* @expand_ctz(i32 %179, %struct.rtx_def* %180, %struct.rtx_def* %181), !dbg !8517
  store %struct.rtx_def* %call306, %struct.rtx_def** %temp, align 8, !dbg !8518
  %182 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8519
  %tobool307 = icmp ne %struct.rtx_def* %182, null, !dbg !8519
  br i1 %tobool307, label %if.then308, label %if.end309, !dbg !8521

if.then308:                                       ; preds = %if.then305
  %183 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8522
  store %struct.rtx_def* %183, %struct.rtx_def** %retval, align 8, !dbg !8523
  br label %return, !dbg !8523

if.end309:                                        ; preds = %if.then305
  br label %if.end310, !dbg !8524

if.end310:                                        ; preds = %if.end309, %if.end302
  br label %try_libcall, !dbg !8525

try_libcall:                                      ; preds = %if.end310, %if.end49, %if.end22
  call void @llvm.dbg.label(metadata !8526), !dbg !8527
  %184 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8528
  %185 = load i32, i32* %mode.addr, align 4, !dbg !8529
  %call311 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %184, i32 %185), !dbg !8530
  store %struct.rtx_def* %call311, %struct.rtx_def** %libfunc, align 8, !dbg !8531
  %186 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !8532
  %tobool312 = icmp ne %struct.rtx_def* %186, null, !dbg !8532
  br i1 %tobool312, label %if.then313, label %if.end378, !dbg !8534

if.then313:                                       ; preds = %try_libcall
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns314, metadata !8535, metadata !DIExpression()), !dbg !8537
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !8538, metadata !DIExpression()), !dbg !8539
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %eq_value, metadata !8540, metadata !DIExpression()), !dbg !8541
  call void @llvm.dbg.declare(metadata i32* %outmode, metadata !8542, metadata !DIExpression()), !dbg !8543
  %187 = load i32, i32* %mode.addr, align 4, !dbg !8544
  store i32 %187, i32* %outmode, align 4, !dbg !8543
  %188 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8545
  %cmp315 = icmp eq %struct.optab_d* %188, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70), !dbg !8547
  br i1 %cmp315, label %if.then329, label %lor.lhs.false317, !dbg !8548

lor.lhs.false317:                                 ; preds = %if.then313
  %189 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8549
  %cmp318 = icmp eq %struct.optab_d* %189, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), !dbg !8550
  br i1 %cmp318, label %if.then329, label %lor.lhs.false320, !dbg !8551

lor.lhs.false320:                                 ; preds = %lor.lhs.false317
  %190 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8552
  %cmp321 = icmp eq %struct.optab_d* %190, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72), !dbg !8553
  br i1 %cmp321, label %if.then329, label %lor.lhs.false323, !dbg !8554

lor.lhs.false323:                                 ; preds = %lor.lhs.false320
  %191 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8555
  %cmp324 = icmp eq %struct.optab_d* %191, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73), !dbg !8556
  br i1 %cmp324, label %if.then329, label %lor.lhs.false326, !dbg !8557

lor.lhs.false326:                                 ; preds = %lor.lhs.false323
  %192 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8558
  %cmp327 = icmp eq %struct.optab_d* %192, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 74), !dbg !8559
  br i1 %cmp327, label %if.then329, label %if.end345, !dbg !8560

if.then329:                                       ; preds = %lor.lhs.false326, %lor.lhs.false323, %lor.lhs.false320, %lor.lhs.false317, %if.then313
  %193 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8561
  %base = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !8561
  %194 = bitcast %struct.tree_base* %base to i64*, !dbg !8561
  %bf.load = load i64, i64* %194, align 8, !dbg !8561
  %bf.clear = and i64 %bf.load, 65535, !dbg !8561
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8561
  %cmp330 = icmp eq i32 %bf.cast, 14, !dbg !8561
  br i1 %cmp330, label %cond.true332, label %cond.false334, !dbg !8561

cond.true332:                                     ; preds = %if.then329
  %195 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8561
  %call333 = call i32 @vector_type_mode(%union.tree_node* %195), !dbg !8561
  br label %cond.end338, !dbg !8561

cond.false334:                                    ; preds = %if.then329
  %196 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !8561
  %type = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !8561
  %mode335 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !8561
  %bf.load336 = load i32, i32* %mode335, align 4, !dbg !8561
  %bf.lshr = lshr i32 %bf.load336, 16, !dbg !8561
  %bf.clear337 = and i32 %bf.lshr, 255, !dbg !8561
  br label %cond.end338, !dbg !8561

cond.end338:                                      ; preds = %cond.false334, %cond.true332
  %cond339 = phi i32 [ %call333, %cond.true332 ], [ %bf.clear337, %cond.false334 ], !dbg !8561
  %197 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8561
  %198 = load i32, i32* %mode.addr, align 4, !dbg !8561
  %call340 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %197, i32 %198), !dbg !8561
  %call341 = call %struct.rtx_def* @hard_libcall_value(i32 %cond339, %struct.rtx_def* %call340), !dbg !8561
  %199 = bitcast %struct.rtx_def* %call341 to i32*, !dbg !8561
  %bf.load342 = load i32, i32* %199, align 8, !dbg !8561
  %bf.lshr343 = lshr i32 %bf.load342, 16, !dbg !8561
  %bf.clear344 = and i32 %bf.lshr343, 255, !dbg !8561
  store i32 %bf.clear344, i32* %outmode, align 4, !dbg !8562
  br label %if.end345, !dbg !8563

if.end345:                                        ; preds = %cond.end338, %lor.lhs.false326
  call void @start_sequence(), !dbg !8564
  %200 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !8565
  %201 = load i32, i32* %outmode, align 4, !dbg !8566
  %202 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8567
  %203 = load i32, i32* %mode.addr, align 4, !dbg !8568
  %call346 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %200, %struct.rtx_def* null, i32 1, i32 %201, i32 1, %struct.rtx_def* %202, i32 %203), !dbg !8569
  store %struct.rtx_def* %call346, %struct.rtx_def** %value, align 8, !dbg !8570
  %call347 = call %struct.rtx_def* @get_insns(), !dbg !8571
  store %struct.rtx_def* %call347, %struct.rtx_def** %insns314, align 8, !dbg !8572
  call void @end_sequence(), !dbg !8573
  %204 = load i32, i32* %outmode, align 4, !dbg !8574
  %call348 = call %struct.rtx_def* @gen_reg_rtx(i32 %204), !dbg !8575
  store %struct.rtx_def* %call348, %struct.rtx_def** %target.addr, align 8, !dbg !8576
  %205 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8577
  %code349 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %205, i32 0, i32 0, !dbg !8577
  %206 = load i32, i32* %code349, align 8, !dbg !8577
  %207 = load i32, i32* %mode.addr, align 4, !dbg !8577
  %208 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8577
  %call350 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %206, i32 %207, %struct.rtx_def* %208), !dbg !8577
  store %struct.rtx_def* %call350, %struct.rtx_def** %eq_value, align 8, !dbg !8578
  %209 = load i32, i32* %outmode, align 4, !dbg !8579
  %idxprom351 = zext i32 %209 to i64, !dbg !8579
  %arrayidx352 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom351, !dbg !8579
  %210 = load i8, i8* %arrayidx352, align 1, !dbg !8579
  %conv353 = zext i8 %210 to i16, !dbg !8579
  %conv354 = zext i16 %conv353 to i32, !dbg !8579
  %211 = load i32, i32* %mode.addr, align 4, !dbg !8581
  %idxprom355 = zext i32 %211 to i64, !dbg !8581
  %arrayidx356 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom355, !dbg !8581
  %212 = load i8, i8* %arrayidx356, align 1, !dbg !8581
  %conv357 = zext i8 %212 to i16, !dbg !8581
  %conv358 = zext i16 %conv357 to i32, !dbg !8581
  %cmp359 = icmp slt i32 %conv354, %conv358, !dbg !8582
  br i1 %cmp359, label %if.then361, label %if.else363, !dbg !8583

if.then361:                                       ; preds = %if.end345
  %213 = load i32, i32* %outmode, align 4, !dbg !8584
  %214 = load %struct.rtx_def*, %struct.rtx_def** %eq_value, align 8, !dbg !8585
  %215 = load i32, i32* %mode.addr, align 4, !dbg !8586
  %call362 = call %struct.rtx_def* @simplify_gen_unary(i32 100, i32 %213, %struct.rtx_def* %214, i32 %215), !dbg !8587
  store %struct.rtx_def* %call362, %struct.rtx_def** %eq_value, align 8, !dbg !8588
  br label %if.end377, !dbg !8589

if.else363:                                       ; preds = %if.end345
  %216 = load i32, i32* %outmode, align 4, !dbg !8590
  %idxprom364 = zext i32 %216 to i64, !dbg !8590
  %arrayidx365 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom364, !dbg !8590
  %217 = load i8, i8* %arrayidx365, align 1, !dbg !8590
  %conv366 = zext i8 %217 to i16, !dbg !8590
  %conv367 = zext i16 %conv366 to i32, !dbg !8590
  %218 = load i32, i32* %mode.addr, align 4, !dbg !8592
  %idxprom368 = zext i32 %218 to i64, !dbg !8592
  %arrayidx369 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom368, !dbg !8592
  %219 = load i8, i8* %arrayidx369, align 1, !dbg !8592
  %conv370 = zext i8 %219 to i16, !dbg !8592
  %conv371 = zext i16 %conv370 to i32, !dbg !8592
  %cmp372 = icmp sgt i32 %conv367, %conv371, !dbg !8593
  br i1 %cmp372, label %if.then374, label %if.end376, !dbg !8594

if.then374:                                       ; preds = %if.else363
  %220 = load i32, i32* %outmode, align 4, !dbg !8595
  %221 = load %struct.rtx_def*, %struct.rtx_def** %eq_value, align 8, !dbg !8596
  %222 = load i32, i32* %mode.addr, align 4, !dbg !8597
  %call375 = call %struct.rtx_def* @simplify_gen_unary(i32 99, i32 %220, %struct.rtx_def* %221, i32 %222), !dbg !8598
  store %struct.rtx_def* %call375, %struct.rtx_def** %eq_value, align 8, !dbg !8599
  br label %if.end376, !dbg !8600

if.end376:                                        ; preds = %if.then374, %if.else363
  br label %if.end377

if.end377:                                        ; preds = %if.end376, %if.then361
  %223 = load %struct.rtx_def*, %struct.rtx_def** %insns314, align 8, !dbg !8601
  %224 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8602
  %225 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !8603
  %226 = load %struct.rtx_def*, %struct.rtx_def** %eq_value, align 8, !dbg !8604
  call void @emit_libcall_block(%struct.rtx_def* %223, %struct.rtx_def* %224, %struct.rtx_def* %225, %struct.rtx_def* %226), !dbg !8605
  %227 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8606
  store %struct.rtx_def* %227, %struct.rtx_def** %retval, align 8, !dbg !8607
  br label %return, !dbg !8607

if.end378:                                        ; preds = %try_libcall
  %228 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp379 = icmp eq i32 %228, 2, !dbg !8608
  br i1 %cmp379, label %if.then402, label %lor.lhs.false381, !dbg !8608

lor.lhs.false381:                                 ; preds = %if.end378
  %229 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp382 = icmp eq i32 %229, 8, !dbg !8608
  br i1 %cmp382, label %if.then402, label %lor.lhs.false384, !dbg !8608

lor.lhs.false384:                                 ; preds = %lor.lhs.false381
  %230 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp385 = icmp eq i32 %230, 9, !dbg !8608
  br i1 %cmp385, label %if.then402, label %lor.lhs.false387, !dbg !8608

lor.lhs.false387:                                 ; preds = %lor.lhs.false384
  %231 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp388 = icmp eq i32 %231, 11, !dbg !8608
  br i1 %cmp388, label %if.then402, label %lor.lhs.false390, !dbg !8608

lor.lhs.false390:                                 ; preds = %lor.lhs.false387
  %232 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp391 = icmp eq i32 %232, 4, !dbg !8608
  br i1 %cmp391, label %if.then402, label %lor.lhs.false393, !dbg !8608

lor.lhs.false393:                                 ; preds = %lor.lhs.false390
  %233 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp394 = icmp eq i32 %233, 5, !dbg !8608
  br i1 %cmp394, label %if.then402, label %lor.lhs.false396, !dbg !8608

lor.lhs.false396:                                 ; preds = %lor.lhs.false393
  %234 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp397 = icmp eq i32 %234, 6, !dbg !8608
  br i1 %cmp397, label %if.then402, label %lor.lhs.false399, !dbg !8608

lor.lhs.false399:                                 ; preds = %lor.lhs.false396
  %235 = load i32, i32* %mclass, align 4, !dbg !8608
  %cmp400 = icmp eq i32 %235, 7, !dbg !8608
  br i1 %cmp400, label %if.then402, label %if.end480, !dbg !8610

if.then402:                                       ; preds = %lor.lhs.false399, %lor.lhs.false396, %lor.lhs.false393, %lor.lhs.false390, %lor.lhs.false387, %lor.lhs.false384, %lor.lhs.false381, %if.end378
  %236 = load i32, i32* %mode.addr, align 4, !dbg !8611
  %idxprom403 = zext i32 %236 to i64, !dbg !8611
  %arrayidx404 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom403, !dbg !8611
  %237 = load i8, i8* %arrayidx404, align 1, !dbg !8611
  %conv405 = zext i8 %237 to i32, !dbg !8611
  store i32 %conv405, i32* %wider_mode, align 4, !dbg !8614
  br label %for.cond406, !dbg !8615

for.cond406:                                      ; preds = %for.inc475, %if.then402
  %238 = load i32, i32* %wider_mode, align 4, !dbg !8616
  %cmp407 = icmp ne i32 %238, 0, !dbg !8618
  br i1 %cmp407, label %for.body409, label %for.end479, !dbg !8619

for.body409:                                      ; preds = %for.cond406
  %239 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8620
  %handlers410 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %239, i32 0, i32 4, !dbg !8620
  %240 = load i32, i32* %wider_mode, align 4, !dbg !8620
  %idxprom411 = sext i32 %240 to i64, !dbg !8620
  %arrayidx412 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers410, i64 0, i64 %idxprom411, !dbg !8620
  %insn_code413 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx412, i32 0, i32 0, !dbg !8623
  %241 = load i32, i32* %insn_code413, align 4, !dbg !8623
  %cmp414 = icmp ne i32 %241, 2956, !dbg !8624
  br i1 %cmp414, label %if.then419, label %lor.lhs.false416, !dbg !8625

lor.lhs.false416:                                 ; preds = %for.body409
  %242 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8626
  %243 = load i32, i32* %wider_mode, align 4, !dbg !8627
  %call417 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %242, i32 %243), !dbg !8628
  %tobool418 = icmp ne %struct.rtx_def* %call417, null, !dbg !8628
  br i1 %tobool418, label %if.then419, label %if.end474, !dbg !8629

if.then419:                                       ; preds = %lor.lhs.false416, %for.body409
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0420, metadata !8630, metadata !DIExpression()), !dbg !8632
  %244 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8633
  store %struct.rtx_def* %244, %struct.rtx_def** %xop0420, align 8, !dbg !8632
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last421, metadata !8634, metadata !DIExpression()), !dbg !8635
  %call422 = call %struct.rtx_def* @get_last_insn(), !dbg !8636
  store %struct.rtx_def* %call422, %struct.rtx_def** %last421, align 8, !dbg !8635
  %245 = load %struct.rtx_def*, %struct.rtx_def** %xop0420, align 8, !dbg !8637
  %246 = load i32, i32* %wider_mode, align 4, !dbg !8638
  %247 = load i32, i32* %mode.addr, align 4, !dbg !8639
  %248 = load i32, i32* %unsignedp.addr, align 4, !dbg !8640
  %249 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8641
  %cmp423 = icmp eq %struct.optab_d* %249, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), !dbg !8642
  br i1 %cmp423, label %land.rhs428, label %lor.lhs.false425, !dbg !8643

lor.lhs.false425:                                 ; preds = %if.then419
  %250 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8644
  %cmp426 = icmp eq %struct.optab_d* %250, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), !dbg !8645
  br i1 %cmp426, label %land.rhs428, label %land.end431, !dbg !8646

land.rhs428:                                      ; preds = %lor.lhs.false425, %if.then419
  %251 = load i32, i32* %mclass, align 4, !dbg !8647
  %cmp429 = icmp eq i32 %251, 2, !dbg !8648
  br label %land.end431

land.end431:                                      ; preds = %land.rhs428, %lor.lhs.false425
  %252 = phi i1 [ false, %lor.lhs.false425 ], [ %cmp429, %land.rhs428 ], !dbg !8649
  %land.ext432 = zext i1 %252 to i32, !dbg !8646
  %call433 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %245, i32 %246, i32 %247, i32 %248, i32 %land.ext432), !dbg !8650
  store %struct.rtx_def* %call433, %struct.rtx_def** %xop0420, align 8, !dbg !8651
  %253 = load i32, i32* %wider_mode, align 4, !dbg !8652
  %254 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8653
  %255 = load %struct.rtx_def*, %struct.rtx_def** %xop0420, align 8, !dbg !8654
  %256 = load i32, i32* %unsignedp.addr, align 4, !dbg !8655
  %call434 = call %struct.rtx_def* @expand_unop(i32 %253, %struct.optab_d* %254, %struct.rtx_def* %255, %struct.rtx_def* null, i32 %256), !dbg !8656
  store %struct.rtx_def* %call434, %struct.rtx_def** %temp, align 8, !dbg !8657
  %257 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8658
  %cmp435 = icmp eq %struct.optab_d* %257, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), !dbg !8660
  br i1 %cmp435, label %land.lhs.true437, label %if.end459, !dbg !8661

land.lhs.true437:                                 ; preds = %land.end431
  %258 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8662
  %cmp438 = icmp ne %struct.rtx_def* %258, null, !dbg !8663
  br i1 %cmp438, label %if.then440, label %if.end459, !dbg !8664

if.then440:                                       ; preds = %land.lhs.true437
  %259 = load i32, i32* %wider_mode, align 4, !dbg !8665
  %260 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8666
  %261 = load i32, i32* %wider_mode, align 4, !dbg !8667
  %idxprom441 = zext i32 %261 to i64, !dbg !8667
  %arrayidx442 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom441, !dbg !8667
  %262 = load i8, i8* %arrayidx442, align 1, !dbg !8667
  %conv443 = zext i8 %262 to i16, !dbg !8667
  %conv444 = zext i16 %conv443 to i32, !dbg !8667
  %mul445 = mul nsw i32 %conv444, 8, !dbg !8667
  %conv446 = trunc i32 %mul445 to i16, !dbg !8667
  %conv447 = zext i16 %conv446 to i32, !dbg !8667
  %263 = load i32, i32* %mode.addr, align 4, !dbg !8667
  %idxprom448 = zext i32 %263 to i64, !dbg !8667
  %arrayidx449 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom448, !dbg !8667
  %264 = load i8, i8* %arrayidx449, align 1, !dbg !8667
  %conv450 = zext i8 %264 to i16, !dbg !8667
  %conv451 = zext i16 %conv450 to i32, !dbg !8667
  %mul452 = mul nsw i32 %conv451, 8, !dbg !8667
  %conv453 = trunc i32 %mul452 to i16, !dbg !8667
  %conv454 = zext i16 %conv453 to i32, !dbg !8667
  %sub455 = sub nsw i32 %conv447, %conv454, !dbg !8667
  %conv456 = sext i32 %sub455 to i64, !dbg !8667
  %call457 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv456), !dbg !8667
  %265 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8668
  %call458 = call %struct.rtx_def* @expand_binop(i32 %259, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %260, %struct.rtx_def* %call457, %struct.rtx_def* %265, i32 1, i32 0), !dbg !8669
  store %struct.rtx_def* %call458, %struct.rtx_def** %temp, align 8, !dbg !8670
  br label %if.end459, !dbg !8671

if.end459:                                        ; preds = %if.then440, %land.lhs.true437, %land.end431
  %266 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8672
  %tobool460 = icmp ne %struct.rtx_def* %266, null, !dbg !8672
  br i1 %tobool460, label %if.then461, label %if.else472, !dbg !8674

if.then461:                                       ; preds = %if.end459
  %267 = load i32, i32* %mclass, align 4, !dbg !8675
  %cmp462 = icmp ne i32 %267, 2, !dbg !8678
  br i1 %cmp462, label %if.then464, label %if.else470, !dbg !8679

if.then464:                                       ; preds = %if.then461
  %268 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8680
  %cmp465 = icmp eq %struct.rtx_def* %268, null, !dbg !8683
  br i1 %cmp465, label %if.then467, label %if.end469, !dbg !8684

if.then467:                                       ; preds = %if.then464
  %269 = load i32, i32* %mode.addr, align 4, !dbg !8685
  %call468 = call %struct.rtx_def* @gen_reg_rtx(i32 %269), !dbg !8686
  store %struct.rtx_def* %call468, %struct.rtx_def** %target.addr, align 8, !dbg !8687
  br label %if.end469, !dbg !8688

if.end469:                                        ; preds = %if.then467, %if.then464
  %270 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8689
  %271 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8690
  call void @convert_move(%struct.rtx_def* %270, %struct.rtx_def* %271, i32 0), !dbg !8691
  %272 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8692
  store %struct.rtx_def* %272, %struct.rtx_def** %retval, align 8, !dbg !8693
  br label %return, !dbg !8693

if.else470:                                       ; preds = %if.then461
  %273 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8694
  %274 = load i32, i32* %mode.addr, align 4, !dbg !8695
  %275 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8696
  %call471 = call %struct.rtx_def* %273(i32 %274, %struct.rtx_def* %275), !dbg !8694
  store %struct.rtx_def* %call471, %struct.rtx_def** %retval, align 8, !dbg !8697
  br label %return, !dbg !8697

if.else472:                                       ; preds = %if.end459
  %276 = load %struct.rtx_def*, %struct.rtx_def** %last421, align 8, !dbg !8698
  call void @delete_insns_since(%struct.rtx_def* %276), !dbg !8699
  br label %if.end473

if.end473:                                        ; preds = %if.else472
  br label %if.end474, !dbg !8700

if.end474:                                        ; preds = %if.end473, %lor.lhs.false416
  br label %for.inc475, !dbg !8701

for.inc475:                                       ; preds = %if.end474
  %277 = load i32, i32* %wider_mode, align 4, !dbg !8702
  %idxprom476 = zext i32 %277 to i64, !dbg !8702
  %arrayidx477 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom476, !dbg !8702
  %278 = load i8, i8* %arrayidx477, align 1, !dbg !8702
  %conv478 = zext i8 %278 to i32, !dbg !8702
  store i32 %conv478, i32* %wider_mode, align 4, !dbg !8703
  br label %for.cond406, !dbg !8704, !llvm.loop !8705

for.end479:                                       ; preds = %for.cond406
  br label %if.end480, !dbg !8707

if.end480:                                        ; preds = %for.end479, %lor.lhs.false399
  %279 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8708
  %code481 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %279, i32 0, i32 0, !dbg !8710
  %280 = load i32, i32* %code481, align 8, !dbg !8710
  %cmp482 = icmp eq i32 %280, 51, !dbg !8711
  br i1 %cmp482, label %land.lhs.true484, label %if.end593, !dbg !8712

land.lhs.true484:                                 ; preds = %if.end480
  %281 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom485 = zext i32 %281 to i64, !dbg !8713
  %arrayidx486 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom485, !dbg !8713
  %282 = load i8, i8* %arrayidx486, align 1, !dbg !8713
  %conv487 = zext i8 %282 to i32, !dbg !8713
  %cmp488 = icmp eq i32 %conv487, 8, !dbg !8713
  br i1 %cmp488, label %land.lhs.true508, label %lor.lhs.false490, !dbg !8713

lor.lhs.false490:                                 ; preds = %land.lhs.true484
  %283 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom491 = zext i32 %283 to i64, !dbg !8713
  %arrayidx492 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom491, !dbg !8713
  %284 = load i8, i8* %arrayidx492, align 1, !dbg !8713
  %conv493 = zext i8 %284 to i32, !dbg !8713
  %cmp494 = icmp eq i32 %conv493, 9, !dbg !8713
  br i1 %cmp494, label %land.lhs.true508, label %lor.lhs.false496, !dbg !8713

lor.lhs.false496:                                 ; preds = %lor.lhs.false490
  %285 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom497 = zext i32 %285 to i64, !dbg !8713
  %arrayidx498 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom497, !dbg !8713
  %286 = load i8, i8* %arrayidx498, align 1, !dbg !8713
  %conv499 = zext i8 %286 to i32, !dbg !8713
  %cmp500 = icmp eq i32 %conv499, 11, !dbg !8713
  br i1 %cmp500, label %land.lhs.true508, label %lor.lhs.false502, !dbg !8713

lor.lhs.false502:                                 ; preds = %lor.lhs.false496
  %287 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom503 = zext i32 %287 to i64, !dbg !8713
  %arrayidx504 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom503, !dbg !8713
  %288 = load i8, i8* %arrayidx504, align 1, !dbg !8713
  %conv505 = zext i8 %288 to i32, !dbg !8713
  %cmp506 = icmp eq i32 %conv505, 17, !dbg !8713
  br i1 %cmp506, label %land.lhs.true508, label %if.then582, !dbg !8713

land.lhs.true508:                                 ; preds = %lor.lhs.false502, %lor.lhs.false496, %lor.lhs.false490, %land.lhs.true484
  %289 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom509 = zext i32 %289 to i64, !dbg !8713
  %arrayidx510 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom509, !dbg !8713
  %290 = load i8, i8* %arrayidx510, align 1, !dbg !8713
  %conv511 = zext i8 %290 to i32, !dbg !8713
  %cmp512 = icmp eq i32 %conv511, 8, !dbg !8713
  br i1 %cmp512, label %cond.true520, label %lor.lhs.false514, !dbg !8713

lor.lhs.false514:                                 ; preds = %land.lhs.true508
  %291 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom515 = zext i32 %291 to i64, !dbg !8713
  %arrayidx516 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom515, !dbg !8713
  %292 = load i8, i8* %arrayidx516, align 1, !dbg !8713
  %conv517 = zext i8 %292 to i32, !dbg !8713
  %cmp518 = icmp eq i32 %conv517, 9, !dbg !8713
  br i1 %cmp518, label %cond.true520, label %cond.false521, !dbg !8713

cond.true520:                                     ; preds = %lor.lhs.false514, %land.lhs.true508
  %293 = load i32, i32* %mode.addr, align 4, !dbg !8713
  br label %cond.end525, !dbg !8713

cond.false521:                                    ; preds = %lor.lhs.false514
  %294 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom522 = zext i32 %294 to i64, !dbg !8713
  %arrayidx523 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom522, !dbg !8713
  %295 = load i8, i8* %arrayidx523, align 1, !dbg !8713
  %conv524 = zext i8 %295 to i32, !dbg !8713
  br label %cond.end525, !dbg !8713

cond.end525:                                      ; preds = %cond.false521, %cond.true520
  %cond526 = phi i32 [ %293, %cond.true520 ], [ %conv524, %cond.false521 ], !dbg !8713
  %idxprom527 = zext i32 %cond526 to i64, !dbg !8713
  %arrayidx528 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom527, !dbg !8713
  %296 = load i8, i8* %arrayidx528, align 1, !dbg !8713
  %conv529 = zext i8 %296 to i32, !dbg !8713
  %cmp530 = icmp eq i32 %conv529, 9, !dbg !8713
  br i1 %cmp530, label %cond.true532, label %cond.false553, !dbg !8713

cond.true532:                                     ; preds = %cond.end525
  %297 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom533 = zext i32 %297 to i64, !dbg !8713
  %arrayidx534 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom533, !dbg !8713
  %298 = load i8, i8* %arrayidx534, align 1, !dbg !8713
  %conv535 = zext i8 %298 to i32, !dbg !8713
  %cmp536 = icmp eq i32 %conv535, 8, !dbg !8713
  br i1 %cmp536, label %cond.true544, label %lor.lhs.false538, !dbg !8713

lor.lhs.false538:                                 ; preds = %cond.true532
  %299 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom539 = zext i32 %299 to i64, !dbg !8713
  %arrayidx540 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom539, !dbg !8713
  %300 = load i8, i8* %arrayidx540, align 1, !dbg !8713
  %conv541 = zext i8 %300 to i32, !dbg !8713
  %cmp542 = icmp eq i32 %conv541, 9, !dbg !8713
  br i1 %cmp542, label %cond.true544, label %cond.false545, !dbg !8713

cond.true544:                                     ; preds = %lor.lhs.false538, %cond.true532
  %301 = load i32, i32* %mode.addr, align 4, !dbg !8713
  br label %cond.end549, !dbg !8713

cond.false545:                                    ; preds = %lor.lhs.false538
  %302 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom546 = zext i32 %302 to i64, !dbg !8713
  %arrayidx547 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom546, !dbg !8713
  %303 = load i8, i8* %arrayidx547, align 1, !dbg !8713
  %conv548 = zext i8 %303 to i32, !dbg !8713
  br label %cond.end549, !dbg !8713

cond.end549:                                      ; preds = %cond.false545, %cond.true544
  %cond550 = phi i32 [ %301, %cond.true544 ], [ %conv548, %cond.false545 ], !dbg !8713
  %sub551 = sub i32 %cond550, 42, !dbg !8713
  %add552 = add i32 %sub551, 4, !dbg !8713
  br label %cond.end573, !dbg !8713

cond.false553:                                    ; preds = %cond.end525
  %304 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom554 = zext i32 %304 to i64, !dbg !8713
  %arrayidx555 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom554, !dbg !8713
  %305 = load i8, i8* %arrayidx555, align 1, !dbg !8713
  %conv556 = zext i8 %305 to i32, !dbg !8713
  %cmp557 = icmp eq i32 %conv556, 8, !dbg !8713
  br i1 %cmp557, label %cond.true565, label %lor.lhs.false559, !dbg !8713

lor.lhs.false559:                                 ; preds = %cond.false553
  %306 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom560 = zext i32 %306 to i64, !dbg !8713
  %arrayidx561 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom560, !dbg !8713
  %307 = load i8, i8* %arrayidx561, align 1, !dbg !8713
  %conv562 = zext i8 %307 to i32, !dbg !8713
  %cmp563 = icmp eq i32 %conv562, 9, !dbg !8713
  br i1 %cmp563, label %cond.true565, label %cond.false566, !dbg !8713

cond.true565:                                     ; preds = %lor.lhs.false559, %cond.false553
  %308 = load i32, i32* %mode.addr, align 4, !dbg !8713
  br label %cond.end570, !dbg !8713

cond.false566:                                    ; preds = %lor.lhs.false559
  %309 = load i32, i32* %mode.addr, align 4, !dbg !8713
  %idxprom567 = zext i32 %309 to i64, !dbg !8713
  %arrayidx568 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom567, !dbg !8713
  %310 = load i8, i8* %arrayidx568, align 1, !dbg !8713
  %conv569 = zext i8 %310 to i32, !dbg !8713
  br label %cond.end570, !dbg !8713

cond.end570:                                      ; preds = %cond.false566, %cond.true565
  %cond571 = phi i32 [ %308, %cond.true565 ], [ %conv569, %cond.false566 ], !dbg !8713
  %sub572 = sub i32 %cond571, 38, !dbg !8713
  br label %cond.end573, !dbg !8713

cond.end573:                                      ; preds = %cond.end570, %cond.end549
  %cond574 = phi i32 [ %add552, %cond.end549 ], [ %sub572, %cond.end570 ], !dbg !8713
  %idxprom575 = zext i32 %cond574 to i64, !dbg !8713
  %arrayidx576 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom575, !dbg !8713
  %311 = load %struct.real_format*, %struct.real_format** %arrayidx576, align 8, !dbg !8713
  %has_signed_zero577 = getelementptr inbounds %struct.real_format, %struct.real_format* %311, i32 0, i32 14, !dbg !8713
  %312 = load i8, i8* %has_signed_zero577, align 1, !dbg !8713
  %conv578 = zext i8 %312 to i32, !dbg !8713
  %tobool579 = icmp ne i32 %conv578, 0, !dbg !8713
  br i1 %tobool579, label %land.lhs.true580, label %if.then582, !dbg !8713

land.lhs.true580:                                 ; preds = %cond.end573
  %313 = load i32, i32* @flag_signed_zeros, align 4, !dbg !8713
  %tobool581 = icmp ne i32 %313, 0, !dbg !8713
  br i1 %tobool581, label %if.end593, label %if.then582, !dbg !8714

if.then582:                                       ; preds = %land.lhs.true580, %cond.end573, %lor.lhs.false502
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp583, metadata !8715, metadata !DIExpression()), !dbg !8717
  %314 = load i32, i32* %mode.addr, align 4, !dbg !8718
  %315 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8719
  %cmp584 = icmp eq %struct.optab_d* %315, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), !dbg !8720
  %316 = zext i1 %cmp584 to i64, !dbg !8719
  %cond586 = select i1 %cmp584, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), !dbg !8719
  %317 = load i32, i32* %mode.addr, align 4, !dbg !8721
  %idxprom587 = sext i32 %317 to i64, !dbg !8721
  %arrayidx588 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom587, !dbg !8721
  %318 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx588, align 8, !dbg !8721
  %319 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8722
  %320 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8723
  %321 = load i32, i32* %unsignedp.addr, align 4, !dbg !8724
  %call589 = call %struct.rtx_def* @expand_binop(i32 %314, %struct.optab_d* %cond586, %struct.rtx_def* %318, %struct.rtx_def* %319, %struct.rtx_def* %320, i32 %321, i32 3), !dbg !8725
  store %struct.rtx_def* %call589, %struct.rtx_def** %temp583, align 8, !dbg !8726
  %322 = load %struct.rtx_def*, %struct.rtx_def** %temp583, align 8, !dbg !8727
  %tobool590 = icmp ne %struct.rtx_def* %322, null, !dbg !8727
  br i1 %tobool590, label %if.then591, label %if.end592, !dbg !8729

if.then591:                                       ; preds = %if.then582
  %323 = load %struct.rtx_def*, %struct.rtx_def** %temp583, align 8, !dbg !8730
  store %struct.rtx_def* %323, %struct.rtx_def** %retval, align 8, !dbg !8731
  br label %return, !dbg !8731

if.end592:                                        ; preds = %if.then582
  br label %if.end593, !dbg !8732

if.end593:                                        ; preds = %if.end592, %land.lhs.true580, %if.end480
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8733
  br label %return, !dbg !8733

return:                                           ; preds = %if.end593, %if.then591, %if.else470, %if.end469, %if.end377, %if.then308, %if.then300, %if.then292, %if.then283, %if.then182, %for.end161, %if.else, %if.end105, %if.then47, %if.then29, %if.then20, %if.then5, %if.then
  %324 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8734
  ret %struct.rtx_def* %324, !dbg !8734
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_unop_direct(i32 %mode, %struct.optab_d* %unoptab, %struct.rtx_def* %op0, %struct.rtx_def* %target, i32 %unsignedp) #0 !dbg !8735 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unoptab.addr = alloca %struct.optab_d*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %icode = alloca i32, align 4
  %mode0 = alloca i32, align 4
  %xop0 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8736, metadata !DIExpression()), !dbg !8737
  store %struct.optab_d* %unoptab, %struct.optab_d** %unoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %unoptab.addr, metadata !8738, metadata !DIExpression()), !dbg !8739
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !8740, metadata !DIExpression()), !dbg !8741
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8742, metadata !DIExpression()), !dbg !8743
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !8744, metadata !DIExpression()), !dbg !8745
  %0 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8746
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %0, i32 0, i32 4, !dbg !8746
  %1 = load i32, i32* %mode.addr, align 4, !dbg !8746
  %idxprom = sext i32 %1 to i64, !dbg !8746
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom, !dbg !8746
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !8748
  %2 = load i32, i32* %insn_code, align 4, !dbg !8748
  %cmp = icmp ne i32 %2, 2956, !dbg !8749
  br i1 %cmp, label %if.then, label %if.end70, !dbg !8750

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !8751, metadata !DIExpression()), !dbg !8753
  %3 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8754
  %handlers1 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %3, i32 0, i32 4, !dbg !8754
  %4 = load i32, i32* %mode.addr, align 4, !dbg !8754
  %idxprom2 = sext i32 %4 to i64, !dbg !8754
  %arrayidx3 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers1, i64 0, i64 %idxprom2, !dbg !8754
  %insn_code4 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx3, i32 0, i32 0, !dbg !8755
  %5 = load i32, i32* %insn_code4, align 4, !dbg !8755
  store i32 %5, i32* %icode, align 4, !dbg !8753
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !8756, metadata !DIExpression()), !dbg !8757
  %6 = load i32, i32* %icode, align 4, !dbg !8758
  %idxprom5 = sext i32 %6 to i64, !dbg !8759
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom5, !dbg !8759
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3, !dbg !8760
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !8760
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 1, !dbg !8759
  %mode8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 2, !dbg !8761
  %bf.load = load i16, i16* %mode8, align 8, !dbg !8761
  %bf.cast = zext i16 %bf.load to i32, !dbg !8761
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !8757
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !8762, metadata !DIExpression()), !dbg !8763
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8764
  store %struct.rtx_def* %8, %struct.rtx_def** %xop0, align 8, !dbg !8763
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8765, metadata !DIExpression()), !dbg !8766
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !8767
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8766
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !8768, metadata !DIExpression()), !dbg !8769
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !8770, metadata !DIExpression()), !dbg !8771
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8772
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !8772
  br i1 %tobool, label %if.then9, label %if.else, !dbg !8774

if.then9:                                         ; preds = %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8775
  store %struct.rtx_def* %10, %struct.rtx_def** %temp, align 8, !dbg !8776
  br label %if.end, !dbg !8777

if.else:                                          ; preds = %if.then
  %11 = load i32, i32* %mode.addr, align 4, !dbg !8778
  %call10 = call %struct.rtx_def* @gen_reg_rtx(i32 %11), !dbg !8779
  store %struct.rtx_def* %call10, %struct.rtx_def** %temp, align 8, !dbg !8780
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %12 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8781
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !8781
  %bf.load11 = load i32, i32* %13, align 8, !dbg !8781
  %bf.lshr = lshr i32 %bf.load11, 16, !dbg !8781
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8781
  %cmp12 = icmp ne i32 %bf.clear, 0, !dbg !8783
  br i1 %cmp12, label %land.lhs.true, label %if.end19, !dbg !8784

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8785
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !8785
  %bf.load13 = load i32, i32* %15, align 8, !dbg !8785
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !8785
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !8785
  %16 = load i32, i32* %mode0, align 4, !dbg !8786
  %cmp16 = icmp ne i32 %bf.clear15, %16, !dbg !8787
  br i1 %cmp16, label %if.then17, label %if.end19, !dbg !8788

if.then17:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %mode0, align 4, !dbg !8789
  %18 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8790
  %19 = load i32, i32* %unsignedp.addr, align 4, !dbg !8791
  %call18 = call %struct.rtx_def* @convert_to_mode(i32 %17, %struct.rtx_def* %18, i32 %19), !dbg !8792
  store %struct.rtx_def* %call18, %struct.rtx_def** %xop0, align 8, !dbg !8793
  br label %if.end19, !dbg !8794

if.end19:                                         ; preds = %if.then17, %land.lhs.true, %if.end
  %20 = load i32, i32* %icode, align 4, !dbg !8795
  %idxprom20 = sext i32 %20 to i64, !dbg !8797
  %arrayidx21 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom20, !dbg !8797
  %operand22 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx21, i32 0, i32 3, !dbg !8798
  %21 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand22, align 8, !dbg !8798
  %arrayidx23 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %21, i64 1, !dbg !8797
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx23, i32 0, i32 0, !dbg !8799
  %22 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !8799
  %23 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8800
  %24 = load i32, i32* %mode0, align 4, !dbg !8801
  %call24 = call i32 %22(%struct.rtx_def* %23, i32 %24), !dbg !8797
  %tobool25 = icmp ne i32 %call24, 0, !dbg !8797
  br i1 %tobool25, label %if.end28, label %if.then26, !dbg !8802

if.then26:                                        ; preds = %if.end19
  %25 = load i32, i32* %mode0, align 4, !dbg !8803
  %26 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8804
  %call27 = call %struct.rtx_def* @copy_to_mode_reg(i32 %25, %struct.rtx_def* %26), !dbg !8805
  store %struct.rtx_def* %call27, %struct.rtx_def** %xop0, align 8, !dbg !8806
  br label %if.end28, !dbg !8807

if.end28:                                         ; preds = %if.then26, %if.end19
  %27 = load i32, i32* %icode, align 4, !dbg !8808
  %idxprom29 = sext i32 %27 to i64, !dbg !8810
  %arrayidx30 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom29, !dbg !8810
  %operand31 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx30, i32 0, i32 3, !dbg !8811
  %28 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand31, align 8, !dbg !8811
  %arrayidx32 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %28, i64 0, !dbg !8810
  %predicate33 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx32, i32 0, i32 0, !dbg !8812
  %29 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate33, align 8, !dbg !8812
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8813
  %31 = load i32, i32* %mode.addr, align 4, !dbg !8814
  %call34 = call i32 %29(%struct.rtx_def* %30, i32 %31), !dbg !8810
  %tobool35 = icmp ne i32 %call34, 0, !dbg !8810
  br i1 %tobool35, label %if.end38, label %if.then36, !dbg !8815

if.then36:                                        ; preds = %if.end28
  %32 = load i32, i32* %mode.addr, align 4, !dbg !8816
  %call37 = call %struct.rtx_def* @gen_reg_rtx(i32 %32), !dbg !8817
  store %struct.rtx_def* %call37, %struct.rtx_def** %temp, align 8, !dbg !8818
  br label %if.end38, !dbg !8819

if.end38:                                         ; preds = %if.then36, %if.end28
  %33 = load i32, i32* %icode, align 4, !dbg !8820
  %idxprom39 = sext i32 %33 to i64, !dbg !8820
  %arrayidx40 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom39, !dbg !8820
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx40, i32 0, i32 2, !dbg !8820
  %34 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !8820
  %35 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8821
  %36 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8822
  %call41 = call %struct.rtx_def* (%struct.rtx_def*, ...) %34(%struct.rtx_def* %35, %struct.rtx_def* %36), !dbg !8820
  store %struct.rtx_def* %call41, %struct.rtx_def** %pat, align 8, !dbg !8823
  %37 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8824
  %tobool42 = icmp ne %struct.rtx_def* %37, null, !dbg !8824
  br i1 %tobool42, label %if.then43, label %if.else68, !dbg !8826

if.then43:                                        ; preds = %if.end38
  %38 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8827
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !8827
  %bf.load44 = load i32, i32* %39, align 8, !dbg !8827
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !8827
  %cmp46 = icmp eq i32 %bf.clear45, 8, !dbg !8827
  br i1 %cmp46, label %land.lhs.true58, label %lor.lhs.false, !dbg !8827

lor.lhs.false:                                    ; preds = %if.then43
  %40 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8827
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !8827
  %bf.load47 = load i32, i32* %41, align 8, !dbg !8827
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !8827
  %cmp49 = icmp eq i32 %bf.clear48, 7, !dbg !8827
  br i1 %cmp49, label %land.lhs.true58, label %lor.lhs.false50, !dbg !8827

lor.lhs.false50:                                  ; preds = %lor.lhs.false
  %42 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8827
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !8827
  %bf.load51 = load i32, i32* %43, align 8, !dbg !8827
  %bf.clear52 = and i32 %bf.load51, 65535, !dbg !8827
  %cmp53 = icmp eq i32 %bf.clear52, 9, !dbg !8827
  br i1 %cmp53, label %land.lhs.true58, label %lor.lhs.false54, !dbg !8827

lor.lhs.false54:                                  ; preds = %lor.lhs.false50
  %44 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8827
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !8827
  %bf.load55 = load i32, i32* %45, align 8, !dbg !8827
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !8827
  %cmp57 = icmp eq i32 %bf.clear56, 10, !dbg !8827
  br i1 %cmp57, label %land.lhs.true58, label %if.end66, !dbg !8830

land.lhs.true58:                                  ; preds = %lor.lhs.false54, %lor.lhs.false50, %lor.lhs.false, %if.then43
  %46 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8831
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !8831
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8831
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8831
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !8831
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8831
  %cmp60 = icmp ne %struct.rtx_def* %47, null, !dbg !8832
  br i1 %cmp60, label %land.lhs.true61, label %if.end66, !dbg !8833

land.lhs.true61:                                  ; preds = %land.lhs.true58
  %48 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8834
  %49 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8835
  %50 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8836
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %50, i32 0, i32 0, !dbg !8837
  %51 = load i32, i32* %code, align 8, !dbg !8837
  %52 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8838
  %call62 = call i32 @add_equal_note(%struct.rtx_def* %48, %struct.rtx_def* %49, i32 %51, %struct.rtx_def* %52, %struct.rtx_def* null), !dbg !8839
  %tobool63 = icmp ne i32 %call62, 0, !dbg !8839
  br i1 %tobool63, label %if.end66, label %if.then64, !dbg !8840

if.then64:                                        ; preds = %land.lhs.true61
  %53 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8841
  call void @delete_insns_since(%struct.rtx_def* %53), !dbg !8843
  %54 = load i32, i32* %mode.addr, align 4, !dbg !8844
  %55 = load %struct.optab_d*, %struct.optab_d** %unoptab.addr, align 8, !dbg !8845
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8846
  %57 = load i32, i32* %unsignedp.addr, align 4, !dbg !8847
  %call65 = call %struct.rtx_def* @expand_unop(i32 %54, %struct.optab_d* %55, %struct.rtx_def* %56, %struct.rtx_def* null, i32 %57), !dbg !8848
  store %struct.rtx_def* %call65, %struct.rtx_def** %retval, align 8, !dbg !8849
  br label %return, !dbg !8849

if.end66:                                         ; preds = %land.lhs.true61, %land.lhs.true58, %lor.lhs.false54
  %58 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8850
  %call67 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %58), !dbg !8851
  %59 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8852
  store %struct.rtx_def* %59, %struct.rtx_def** %retval, align 8, !dbg !8853
  br label %return, !dbg !8853

if.else68:                                        ; preds = %if.end38
  %60 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8854
  call void @delete_insns_since(%struct.rtx_def* %60), !dbg !8855
  br label %if.end69

if.end69:                                         ; preds = %if.else68
  br label %if.end70, !dbg !8856

if.end70:                                         ; preds = %if.end69, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8857
  br label %return, !dbg !8857

return:                                           ; preds = %if.end70, %if.end66, %if.then64
  %61 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8858
  ret %struct.rtx_def* %61, !dbg !8858
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @widen_clz(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !8859 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %xop0 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8862, metadata !DIExpression()), !dbg !8863
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !8864, metadata !DIExpression()), !dbg !8865
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8866, metadata !DIExpression()), !dbg !8867
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !8868, metadata !DIExpression()), !dbg !8869
  %0 = load i32, i32* %mode.addr, align 4, !dbg !8870
  %idxprom = zext i32 %0 to i64, !dbg !8870
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !8870
  %1 = load i8, i8* %arrayidx, align 1, !dbg !8870
  %conv = zext i8 %1 to i32, !dbg !8870
  store i32 %conv, i32* %mclass, align 4, !dbg !8869
  %2 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp = icmp eq i32 %2, 2, !dbg !8871
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8871

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp2 = icmp eq i32 %3, 8, !dbg !8871
  br i1 %cmp2, label %if.then, label %lor.lhs.false4, !dbg !8871

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp5 = icmp eq i32 %4, 9, !dbg !8871
  br i1 %cmp5, label %if.then, label %lor.lhs.false7, !dbg !8871

lor.lhs.false7:                                   ; preds = %lor.lhs.false4
  %5 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp8 = icmp eq i32 %5, 11, !dbg !8871
  br i1 %cmp8, label %if.then, label %lor.lhs.false10, !dbg !8871

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp11 = icmp eq i32 %6, 4, !dbg !8871
  br i1 %cmp11, label %if.then, label %lor.lhs.false13, !dbg !8871

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %7 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp14 = icmp eq i32 %7, 5, !dbg !8871
  br i1 %cmp14, label %if.then, label %lor.lhs.false16, !dbg !8871

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %8 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp17 = icmp eq i32 %8, 6, !dbg !8871
  br i1 %cmp17, label %if.then, label %lor.lhs.false19, !dbg !8871

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %9 = load i32, i32* %mclass, align 4, !dbg !8871
  %cmp20 = icmp eq i32 %9, 7, !dbg !8871
  br i1 %cmp20, label %if.then, label %if.end66, !dbg !8873

if.then:                                          ; preds = %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false4, %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !8874, metadata !DIExpression()), !dbg !8876
  %10 = load i32, i32* %mode.addr, align 4, !dbg !8877
  %idxprom22 = zext i32 %10 to i64, !dbg !8877
  %arrayidx23 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom22, !dbg !8877
  %11 = load i8, i8* %arrayidx23, align 1, !dbg !8877
  %conv24 = zext i8 %11 to i32, !dbg !8877
  store i32 %conv24, i32* %wider_mode, align 4, !dbg !8879
  br label %for.cond, !dbg !8880

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %wider_mode, align 4, !dbg !8881
  %cmp25 = icmp ne i32 %12, 0, !dbg !8883
  br i1 %cmp25, label %for.body, label %for.end, !dbg !8884

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %wider_mode, align 4, !dbg !8885
  %idxprom27 = sext i32 %13 to i64, !dbg !8885
  %arrayidx28 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71, i32 4), i64 0, i64 %idxprom27, !dbg !8885
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx28, i32 0, i32 0, !dbg !8888
  %14 = load i32, i32* %insn_code, align 4, !dbg !8888
  %cmp29 = icmp ne i32 %14, 2956, !dbg !8889
  br i1 %cmp29, label %if.then31, label %if.end62, !dbg !8890

if.then31:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !8891, metadata !DIExpression()), !dbg !8893
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !8894, metadata !DIExpression()), !dbg !8895
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8896, metadata !DIExpression()), !dbg !8897
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !8898
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8899
  %15 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8900
  %cmp32 = icmp eq %struct.rtx_def* %15, null, !dbg !8902
  br i1 %cmp32, label %if.then34, label %if.end, !dbg !8903

if.then34:                                        ; preds = %if.then31
  %16 = load i32, i32* %mode.addr, align 4, !dbg !8904
  %call35 = call %struct.rtx_def* @gen_reg_rtx(i32 %16), !dbg !8905
  store %struct.rtx_def* %call35, %struct.rtx_def** %target.addr, align 8, !dbg !8906
  br label %if.end, !dbg !8907

if.end:                                           ; preds = %if.then34, %if.then31
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8908
  %18 = load i32, i32* %wider_mode, align 4, !dbg !8909
  %19 = load i32, i32* %mode.addr, align 4, !dbg !8910
  %call36 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %17, i32 %18, i32 %19, i32 1, i32 0), !dbg !8911
  store %struct.rtx_def* %call36, %struct.rtx_def** %xop0, align 8, !dbg !8912
  %20 = load i32, i32* %wider_mode, align 4, !dbg !8913
  %21 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8914
  %call37 = call %struct.rtx_def* @expand_unop(i32 %20, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), %struct.rtx_def* %21, %struct.rtx_def* null, i32 1), !dbg !8915
  store %struct.rtx_def* %call37, %struct.rtx_def** %temp, align 8, !dbg !8916
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8917
  %cmp38 = icmp ne %struct.rtx_def* %22, null, !dbg !8919
  br i1 %cmp38, label %if.then40, label %if.end57, !dbg !8920

if.then40:                                        ; preds = %if.end
  %23 = load i32, i32* %wider_mode, align 4, !dbg !8921
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8922
  %25 = load i32, i32* %wider_mode, align 4, !dbg !8923
  %idxprom41 = zext i32 %25 to i64, !dbg !8923
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom41, !dbg !8923
  %26 = load i8, i8* %arrayidx42, align 1, !dbg !8923
  %conv43 = zext i8 %26 to i16, !dbg !8923
  %conv44 = zext i16 %conv43 to i32, !dbg !8923
  %mul = mul nsw i32 %conv44, 8, !dbg !8923
  %conv45 = trunc i32 %mul to i16, !dbg !8923
  %conv46 = zext i16 %conv45 to i32, !dbg !8923
  %27 = load i32, i32* %mode.addr, align 4, !dbg !8923
  %idxprom47 = zext i32 %27 to i64, !dbg !8923
  %arrayidx48 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom47, !dbg !8923
  %28 = load i8, i8* %arrayidx48, align 1, !dbg !8923
  %conv49 = zext i8 %28 to i16, !dbg !8923
  %conv50 = zext i16 %conv49 to i32, !dbg !8923
  %mul51 = mul nsw i32 %conv50, 8, !dbg !8923
  %conv52 = trunc i32 %mul51 to i16, !dbg !8923
  %conv53 = zext i16 %conv52 to i32, !dbg !8923
  %sub = sub nsw i32 %conv46, %conv53, !dbg !8923
  %conv54 = sext i32 %sub to i64, !dbg !8923
  %call55 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv54), !dbg !8923
  %29 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8924
  %call56 = call %struct.rtx_def* @expand_binop(i32 %23, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %24, %struct.rtx_def* %call55, %struct.rtx_def* %29, i32 1, i32 0), !dbg !8925
  store %struct.rtx_def* %call56, %struct.rtx_def** %temp, align 8, !dbg !8926
  br label %if.end57, !dbg !8927

if.end57:                                         ; preds = %if.then40, %if.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8928
  %cmp58 = icmp eq %struct.rtx_def* %30, null, !dbg !8930
  br i1 %cmp58, label %if.then60, label %if.end61, !dbg !8931

if.then60:                                        ; preds = %if.end57
  %31 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8932
  call void @delete_insns_since(%struct.rtx_def* %31), !dbg !8933
  br label %if.end61, !dbg !8933

if.end61:                                         ; preds = %if.then60, %if.end57
  %32 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !8934
  store %struct.rtx_def* %32, %struct.rtx_def** %retval, align 8, !dbg !8935
  br label %return, !dbg !8935

if.end62:                                         ; preds = %for.body
  br label %for.inc, !dbg !8936

for.inc:                                          ; preds = %if.end62
  %33 = load i32, i32* %wider_mode, align 4, !dbg !8937
  %idxprom63 = zext i32 %33 to i64, !dbg !8937
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom63, !dbg !8937
  %34 = load i8, i8* %arrayidx64, align 1, !dbg !8937
  %conv65 = zext i8 %34 to i32, !dbg !8937
  store i32 %conv65, i32* %wider_mode, align 4, !dbg !8938
  br label %for.cond, !dbg !8939, !llvm.loop !8940

for.end:                                          ; preds = %for.cond
  br label %if.end66, !dbg !8942

if.end66:                                         ; preds = %for.end, %lor.lhs.false19
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8943
  br label %return, !dbg !8943

return:                                           ; preds = %if.end66, %if.end61
  %35 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8944
  ret %struct.rtx_def* %35, !dbg !8944
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_doubleword_clz(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !8945 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %xop0 = alloca %struct.rtx_def*, align 8
  %subhi = alloca %struct.rtx_def*, align 8
  %sublo = alloca %struct.rtx_def*, align 8
  %hi0_label = alloca %struct.rtx_def*, align 8
  %after_label = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8946, metadata !DIExpression()), !dbg !8947
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !8948, metadata !DIExpression()), !dbg !8949
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8950, metadata !DIExpression()), !dbg !8951
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !8952, metadata !DIExpression()), !dbg !8953
  %0 = load i32, i32* %mode.addr, align 4, !dbg !8954
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !8955
  %call = call %struct.rtx_def* @force_reg(i32 %0, %struct.rtx_def* %1), !dbg !8956
  store %struct.rtx_def* %call, %struct.rtx_def** %xop0, align 8, !dbg !8953
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subhi, metadata !8957, metadata !DIExpression()), !dbg !8958
  %2 = load i32, i32* @word_mode, align 4, !dbg !8959
  %3 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8960
  %call1 = call %struct.rtx_def* @gen_highpart(i32 %2, %struct.rtx_def* %3), !dbg !8961
  store %struct.rtx_def* %call1, %struct.rtx_def** %subhi, align 8, !dbg !8958
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sublo, metadata !8962, metadata !DIExpression()), !dbg !8963
  %4 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !8964
  %5 = load i32, i32* @word_mode, align 4, !dbg !8965
  %6 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !8966
  %call2 = call %struct.rtx_def* %4(i32 %5, %struct.rtx_def* %6), !dbg !8964
  store %struct.rtx_def* %call2, %struct.rtx_def** %sublo, align 8, !dbg !8963
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %hi0_label, metadata !8967, metadata !DIExpression()), !dbg !8968
  %call3 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8969
  store %struct.rtx_def* %call3, %struct.rtx_def** %hi0_label, align 8, !dbg !8968
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after_label, metadata !8970, metadata !DIExpression()), !dbg !8971
  %call4 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8972
  store %struct.rtx_def* %call4, %struct.rtx_def** %after_label, align 8, !dbg !8971
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !8973, metadata !DIExpression()), !dbg !8974
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !8975, metadata !DIExpression()), !dbg !8976
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !8977, metadata !DIExpression()), !dbg !8978
  %7 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8979
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !8979
  br i1 %tobool, label %if.end, label %if.then, !dbg !8981

if.then:                                          ; preds = %entry
  %8 = load i32, i32* @word_mode, align 4, !dbg !8982
  %call5 = call %struct.rtx_def* @gen_reg_rtx(i32 %8), !dbg !8983
  store %struct.rtx_def* %call5, %struct.rtx_def** %target.addr, align 8, !dbg !8984
  br label %if.end, !dbg !8985

if.end:                                           ; preds = %if.then, %entry
  %9 = load i32, i32* @word_mode, align 4, !dbg !8986
  %call6 = call %struct.rtx_def* @gen_reg_rtx(i32 %9), !dbg !8987
  store %struct.rtx_def* %call6, %struct.rtx_def** %result, align 8, !dbg !8988
  call void @start_sequence(), !dbg !8989
  %10 = load %struct.rtx_def*, %struct.rtx_def** %subhi, align 8, !dbg !8990
  %11 = load i32, i32* @word_mode, align 4, !dbg !8991
  %idxprom = sext i32 %11 to i64, !dbg !8991
  %arrayidx = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom, !dbg !8991
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !8991
  %13 = load i32, i32* @word_mode, align 4, !dbg !8992
  %14 = load %struct.rtx_def*, %struct.rtx_def** %hi0_label, align 8, !dbg !8993
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %10, %struct.rtx_def* %12, i32 81, %struct.rtx_def* null, i32 %13, i32 1, %struct.rtx_def* %14), !dbg !8994
  %15 = load i32, i32* @word_mode, align 4, !dbg !8995
  %16 = load %struct.rtx_def*, %struct.rtx_def** %subhi, align 8, !dbg !8996
  %17 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !8997
  %call7 = call %struct.rtx_def* @expand_unop_direct(i32 %15, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), %struct.rtx_def* %16, %struct.rtx_def* %17, i32 1), !dbg !8998
  store %struct.rtx_def* %call7, %struct.rtx_def** %temp, align 8, !dbg !8999
  %18 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9000
  %tobool8 = icmp ne %struct.rtx_def* %18, null, !dbg !9000
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !9002

if.then9:                                         ; preds = %if.end
  br label %fail, !dbg !9003

if.end10:                                         ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9004
  %20 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9006
  %cmp = icmp ne %struct.rtx_def* %19, %20, !dbg !9007
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !9008

if.then11:                                        ; preds = %if.end10
  %21 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9009
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9010
  call void @convert_move(%struct.rtx_def* %21, %struct.rtx_def* %22, i32 1), !dbg !9011
  br label %if.end12, !dbg !9011

if.end12:                                         ; preds = %if.then11, %if.end10
  %23 = load %struct.rtx_def*, %struct.rtx_def** %after_label, align 8, !dbg !9012
  %call13 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %23), !dbg !9013
  %call14 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call13), !dbg !9014
  %call15 = call %struct.rtx_def* @emit_barrier(), !dbg !9015
  %24 = load %struct.rtx_def*, %struct.rtx_def** %hi0_label, align 8, !dbg !9016
  %call16 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %24), !dbg !9017
  %25 = load i32, i32* @word_mode, align 4, !dbg !9018
  %26 = load %struct.rtx_def*, %struct.rtx_def** %sublo, align 8, !dbg !9019
  %call17 = call %struct.rtx_def* @expand_unop_direct(i32 %25, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), %struct.rtx_def* %26, %struct.rtx_def* null, i32 1), !dbg !9020
  store %struct.rtx_def* %call17, %struct.rtx_def** %temp, align 8, !dbg !9021
  %27 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9022
  %tobool18 = icmp ne %struct.rtx_def* %27, null, !dbg !9022
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !9024

if.then19:                                        ; preds = %if.end12
  br label %fail, !dbg !9025

if.end20:                                         ; preds = %if.end12
  %28 = load i32, i32* @word_mode, align 4, !dbg !9026
  %29 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9027
  %30 = load i32, i32* @word_mode, align 4, !dbg !9028
  %idxprom21 = zext i32 %30 to i64, !dbg !9028
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom21, !dbg !9028
  %31 = load i8, i8* %arrayidx22, align 1, !dbg !9028
  %conv = zext i8 %31 to i16, !dbg !9028
  %conv23 = zext i16 %conv to i32, !dbg !9028
  %mul = mul nsw i32 %conv23, 8, !dbg !9028
  %conv24 = trunc i32 %mul to i16, !dbg !9028
  %conv25 = zext i16 %conv24 to i64, !dbg !9028
  %call26 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv25), !dbg !9028
  %32 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9029
  %call27 = call %struct.rtx_def* @expand_binop(i32 %28, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %29, %struct.rtx_def* %call26, %struct.rtx_def* %32, i32 1, i32 0), !dbg !9030
  store %struct.rtx_def* %call27, %struct.rtx_def** %temp, align 8, !dbg !9031
  %33 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9032
  %tobool28 = icmp ne %struct.rtx_def* %33, null, !dbg !9032
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !9034

if.then29:                                        ; preds = %if.end20
  br label %fail, !dbg !9035

if.end30:                                         ; preds = %if.end20
  %34 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9036
  %35 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9038
  %cmp31 = icmp ne %struct.rtx_def* %34, %35, !dbg !9039
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !9040

if.then33:                                        ; preds = %if.end30
  %36 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9041
  %37 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9042
  call void @convert_move(%struct.rtx_def* %36, %struct.rtx_def* %37, i32 1), !dbg !9043
  br label %if.end34, !dbg !9043

if.end34:                                         ; preds = %if.then33, %if.end30
  %38 = load %struct.rtx_def*, %struct.rtx_def** %after_label, align 8, !dbg !9044
  %call35 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %38), !dbg !9045
  %39 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9046
  %40 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9047
  call void @convert_move(%struct.rtx_def* %39, %struct.rtx_def* %40, i32 1), !dbg !9048
  %call36 = call %struct.rtx_def* @get_insns(), !dbg !9049
  store %struct.rtx_def* %call36, %struct.rtx_def** %seq, align 8, !dbg !9050
  call void @end_sequence(), !dbg !9051
  %41 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9052
  %42 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9053
  %43 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !9054
  %call37 = call i32 @add_equal_note(%struct.rtx_def* %41, %struct.rtx_def* %42, i32 115, %struct.rtx_def* %43, %struct.rtx_def* null), !dbg !9055
  %44 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9056
  %call38 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %44), !dbg !9057
  %45 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9058
  store %struct.rtx_def* %45, %struct.rtx_def** %retval, align 8, !dbg !9059
  br label %return, !dbg !9059

fail:                                             ; preds = %if.then29, %if.then19, %if.then9
  call void @llvm.dbg.label(metadata !9060), !dbg !9061
  call void @end_sequence(), !dbg !9062
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9063
  br label %return, !dbg !9063

return:                                           ; preds = %fail, %if.end34
  %46 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9064
  ret %struct.rtx_def* %46, !dbg !9064
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @widen_bswap(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !9065 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9066, metadata !DIExpression()), !dbg !9067
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9068, metadata !DIExpression()), !dbg !9069
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9070, metadata !DIExpression()), !dbg !9071
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !9072, metadata !DIExpression()), !dbg !9073
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9074
  %idxprom = zext i32 %0 to i64, !dbg !9074
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9074
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9074
  %conv = zext i8 %1 to i32, !dbg !9074
  store i32 %conv, i32* %mclass, align 4, !dbg !9073
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !9075, metadata !DIExpression()), !dbg !9076
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !9077, metadata !DIExpression()), !dbg !9078
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9079, metadata !DIExpression()), !dbg !9080
  %2 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp = icmp eq i32 %2, 2, !dbg !9081
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !9081

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp2 = icmp eq i32 %3, 8, !dbg !9081
  br i1 %cmp2, label %if.end, label %lor.lhs.false4, !dbg !9081

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp5 = icmp eq i32 %4, 9, !dbg !9081
  br i1 %cmp5, label %if.end, label %lor.lhs.false7, !dbg !9081

lor.lhs.false7:                                   ; preds = %lor.lhs.false4
  %5 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp8 = icmp eq i32 %5, 11, !dbg !9081
  br i1 %cmp8, label %if.end, label %lor.lhs.false10, !dbg !9081

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp11 = icmp eq i32 %6, 4, !dbg !9081
  br i1 %cmp11, label %if.end, label %lor.lhs.false13, !dbg !9081

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %7 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp14 = icmp eq i32 %7, 5, !dbg !9081
  br i1 %cmp14, label %if.end, label %lor.lhs.false16, !dbg !9081

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %8 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp17 = icmp eq i32 %8, 6, !dbg !9081
  br i1 %cmp17, label %if.end, label %lor.lhs.false19, !dbg !9081

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %9 = load i32, i32* %mclass, align 4, !dbg !9081
  %cmp20 = icmp eq i32 %9, 7, !dbg !9081
  br i1 %cmp20, label %if.end, label %if.then, !dbg !9083

if.then:                                          ; preds = %lor.lhs.false19
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9084
  br label %return, !dbg !9084

if.end:                                           ; preds = %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false4, %lor.lhs.false, %entry
  %10 = load i32, i32* %mode.addr, align 4, !dbg !9085
  %idxprom22 = zext i32 %10 to i64, !dbg !9085
  %arrayidx23 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom22, !dbg !9085
  %11 = load i8, i8* %arrayidx23, align 1, !dbg !9085
  %conv24 = zext i8 %11 to i32, !dbg !9085
  store i32 %conv24, i32* %wider_mode, align 4, !dbg !9087
  br label %for.cond, !dbg !9088

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32, i32* %wider_mode, align 4, !dbg !9089
  %cmp25 = icmp ne i32 %12, 0, !dbg !9091
  br i1 %cmp25, label %for.body, label %for.end, !dbg !9092

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %wider_mode, align 4, !dbg !9093
  %idxprom27 = sext i32 %13 to i64, !dbg !9093
  %arrayidx28 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68, i32 4), i64 0, i64 %idxprom27, !dbg !9093
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx28, i32 0, i32 0, !dbg !9095
  %14 = load i32, i32* %insn_code, align 4, !dbg !9095
  %cmp29 = icmp ne i32 %14, 2956, !dbg !9096
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !9097

if.then31:                                        ; preds = %for.body
  br label %found, !dbg !9098

if.end32:                                         ; preds = %for.body
  br label %for.inc, !dbg !9099

for.inc:                                          ; preds = %if.end32
  %15 = load i32, i32* %wider_mode, align 4, !dbg !9100
  %idxprom33 = zext i32 %15 to i64, !dbg !9100
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom33, !dbg !9100
  %16 = load i8, i8* %arrayidx34, align 1, !dbg !9100
  %conv35 = zext i8 %16 to i32, !dbg !9100
  store i32 %conv35, i32* %wider_mode, align 4, !dbg !9101
  br label %for.cond, !dbg !9102, !llvm.loop !9103

for.end:                                          ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9105
  br label %return, !dbg !9105

found:                                            ; preds = %if.then31
  call void @llvm.dbg.label(metadata !9106), !dbg !9107
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !9108
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9109
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9110
  %18 = load i32, i32* %wider_mode, align 4, !dbg !9111
  %19 = load i32, i32* %mode.addr, align 4, !dbg !9112
  %call36 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %17, i32 %18, i32 %19, i32 1, i32 1), !dbg !9113
  store %struct.rtx_def* %call36, %struct.rtx_def** %x, align 8, !dbg !9114
  %20 = load i32, i32* %wider_mode, align 4, !dbg !9115
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9116
  %call37 = call %struct.rtx_def* @expand_unop(i32 %20, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), %struct.rtx_def* %21, %struct.rtx_def* null, i32 1), !dbg !9117
  store %struct.rtx_def* %call37, %struct.rtx_def** %x, align 8, !dbg !9118
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9119
  %cmp38 = icmp ne %struct.rtx_def* %22, null, !dbg !9121
  br i1 %cmp38, label %if.then40, label %if.end57, !dbg !9122

if.then40:                                        ; preds = %found
  %23 = load i32, i32* %wider_mode, align 4, !dbg !9123
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9124
  %25 = load i32, i32* %wider_mode, align 4, !dbg !9125
  %idxprom41 = zext i32 %25 to i64, !dbg !9125
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom41, !dbg !9125
  %26 = load i8, i8* %arrayidx42, align 1, !dbg !9125
  %conv43 = zext i8 %26 to i16, !dbg !9125
  %conv44 = zext i16 %conv43 to i32, !dbg !9125
  %mul = mul nsw i32 %conv44, 8, !dbg !9125
  %conv45 = trunc i32 %mul to i16, !dbg !9125
  %conv46 = zext i16 %conv45 to i32, !dbg !9125
  %27 = load i32, i32* %mode.addr, align 4, !dbg !9125
  %idxprom47 = zext i32 %27 to i64, !dbg !9125
  %arrayidx48 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom47, !dbg !9125
  %28 = load i8, i8* %arrayidx48, align 1, !dbg !9125
  %conv49 = zext i8 %28 to i16, !dbg !9125
  %conv50 = zext i16 %conv49 to i32, !dbg !9125
  %mul51 = mul nsw i32 %conv50, 8, !dbg !9125
  %conv52 = trunc i32 %mul51 to i16, !dbg !9125
  %conv53 = zext i16 %conv52 to i32, !dbg !9125
  %sub = sub nsw i32 %conv46, %conv53, !dbg !9125
  %conv54 = sext i32 %sub to i64, !dbg !9125
  %call55 = call %union.tree_node* @size_int_kind(i64 %conv54, i32 0), !dbg !9125
  %call56 = call %struct.rtx_def* @expand_shift(i32 84, i32 %23, %struct.rtx_def* %24, %union.tree_node* %call55, %struct.rtx_def* null, i32 1), !dbg !9126
  store %struct.rtx_def* %call56, %struct.rtx_def** %x, align 8, !dbg !9127
  br label %if.end57, !dbg !9128

if.end57:                                         ; preds = %if.then40, %found
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9129
  %cmp58 = icmp ne %struct.rtx_def* %29, null, !dbg !9131
  br i1 %cmp58, label %if.then60, label %if.else, !dbg !9132

if.then60:                                        ; preds = %if.end57
  %30 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9133
  %cmp61 = icmp eq %struct.rtx_def* %30, null, !dbg !9136
  br i1 %cmp61, label %if.then63, label %if.end65, !dbg !9137

if.then63:                                        ; preds = %if.then60
  %31 = load i32, i32* %mode.addr, align 4, !dbg !9138
  %call64 = call %struct.rtx_def* @gen_reg_rtx(i32 %31), !dbg !9139
  store %struct.rtx_def* %call64, %struct.rtx_def** %target.addr, align 8, !dbg !9140
  br label %if.end65, !dbg !9141

if.end65:                                         ; preds = %if.then63, %if.then60
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9142
  %33 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !9143
  %34 = load i32, i32* %mode.addr, align 4, !dbg !9144
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !9145
  %call66 = call %struct.rtx_def* %33(i32 %34, %struct.rtx_def* %35), !dbg !9143
  %call67 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %32, %struct.rtx_def* %call66), !dbg !9146
  br label %if.end68, !dbg !9147

if.else:                                          ; preds = %if.end57
  %36 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9148
  call void @delete_insns_since(%struct.rtx_def* %36), !dbg !9149
  br label %if.end68

if.end68:                                         ; preds = %if.else, %if.end65
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9150
  store %struct.rtx_def* %37, %struct.rtx_def** %retval, align 8, !dbg !9151
  br label %return, !dbg !9151

return:                                           ; preds = %if.end68, %for.end, %if.then
  %38 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9152
  ret %struct.rtx_def* %38, !dbg !9152
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_doubleword_bswap(i32 %mode, %struct.rtx_def* %op, %struct.rtx_def* %target) #0 !dbg !9153 {
entry:
  %mode.addr = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %t0 = alloca %struct.rtx_def*, align 8
  %t1 = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9154, metadata !DIExpression()), !dbg !9155
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op.addr, metadata !9156, metadata !DIExpression()), !dbg !9157
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9158, metadata !DIExpression()), !dbg !9159
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t0, metadata !9160, metadata !DIExpression()), !dbg !9161
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1, metadata !9162, metadata !DIExpression()), !dbg !9163
  %0 = load i32, i32* @word_mode, align 4, !dbg !9164
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !9165
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9166
  %call = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %1, i32 0, i32 %2), !dbg !9167
  %call1 = call %struct.rtx_def* @expand_unop(i32 %0, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), %struct.rtx_def* %call, %struct.rtx_def* null, i32 1), !dbg !9168
  store %struct.rtx_def* %call1, %struct.rtx_def** %t1, align 8, !dbg !9169
  %3 = load i32, i32* @word_mode, align 4, !dbg !9170
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !9171
  %5 = load i32, i32* %mode.addr, align 4, !dbg !9172
  %call2 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %4, i32 1, i32 %5), !dbg !9173
  %call3 = call %struct.rtx_def* @expand_unop(i32 %3, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), %struct.rtx_def* %call2, %struct.rtx_def* null, i32 1), !dbg !9174
  store %struct.rtx_def* %call3, %struct.rtx_def** %t0, align 8, !dbg !9175
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9176
  %cmp = icmp eq %struct.rtx_def* %6, null, !dbg !9178
  br i1 %cmp, label %if.then, label %if.end, !dbg !9179

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %mode.addr, align 4, !dbg !9180
  %call4 = call %struct.rtx_def* @gen_reg_rtx(i32 %7), !dbg !9181
  store %struct.rtx_def* %call4, %struct.rtx_def** %target.addr, align 8, !dbg !9182
  br label %if.end, !dbg !9183

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9184
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !9184
  %bf.load = load i32, i32* %9, align 8, !dbg !9184
  %bf.clear = and i32 %bf.load, 65535, !dbg !9184
  %cmp5 = icmp eq i32 %bf.clear, 37, !dbg !9184
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !9186

if.then6:                                         ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9187
  %call7 = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %10), !dbg !9188
  br label %if.end8, !dbg !9188

if.end8:                                          ; preds = %if.then6, %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9189
  %12 = load i32, i32* %mode.addr, align 4, !dbg !9190
  %call9 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %11, i32 0, i32 1, i32 %12), !dbg !9191
  %13 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !9192
  %call10 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call9, %struct.rtx_def* %13), !dbg !9193
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9194
  %15 = load i32, i32* %mode.addr, align 4, !dbg !9195
  %call11 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %14, i32 1, i32 1, i32 %15), !dbg !9196
  %16 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !9197
  %call12 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call11, %struct.rtx_def* %16), !dbg !9198
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9199
  ret %struct.rtx_def* %17, !dbg !9200
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_absneg_bit(i32 %code, i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !9201 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %fmt = alloca %struct.real_format*, align 8
  %bitpos = alloca i32, align 4
  %word = alloca i32, align 4
  %nwords = alloca i32, align 4
  %i = alloca i32, align 4
  %imode = alloca i32, align 4
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %targ_piece = alloca %struct.rtx_def*, align 8
  %op0_piece = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9204, metadata !DIExpression()), !dbg !9205
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9206, metadata !DIExpression()), !dbg !9207
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9208, metadata !DIExpression()), !dbg !9209
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9210, metadata !DIExpression()), !dbg !9211
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !9212, metadata !DIExpression()), !dbg !9243
  call void @llvm.dbg.declare(metadata i32* %bitpos, metadata !9244, metadata !DIExpression()), !dbg !9245
  call void @llvm.dbg.declare(metadata i32* %word, metadata !9246, metadata !DIExpression()), !dbg !9247
  call void @llvm.dbg.declare(metadata i32* %nwords, metadata !9248, metadata !DIExpression()), !dbg !9249
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9250, metadata !DIExpression()), !dbg !9251
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !9252, metadata !DIExpression()), !dbg !9253
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !9254, metadata !DIExpression()), !dbg !9255
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !9256, metadata !DIExpression()), !dbg !9257
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9258, metadata !DIExpression()), !dbg !9259
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !9260, metadata !DIExpression()), !dbg !9261
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9262
  %idxprom = zext i32 %0 to i64, !dbg !9262
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9262
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9262
  %conv = zext i8 %1 to i32, !dbg !9262
  %cmp = icmp eq i32 %conv, 9, !dbg !9262
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9262

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9262
  %sub = sub i32 %2, 42, !dbg !9262
  %add = add i32 %sub, 4, !dbg !9262
  br label %cond.end, !dbg !9262

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !9262
  %sub2 = sub i32 %3, 38, !dbg !9262
  br label %cond.end, !dbg !9262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %sub2, %cond.false ], !dbg !9262
  %idxprom3 = zext i32 %cond to i64, !dbg !9262
  %arrayidx4 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom3, !dbg !9262
  %4 = load %struct.real_format*, %struct.real_format** %arrayidx4, align 8, !dbg !9262
  store %struct.real_format* %4, %struct.real_format** %fmt, align 8, !dbg !9263
  %5 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !9264
  %cmp5 = icmp eq %struct.real_format* %5, null, !dbg !9266
  br i1 %cmp5, label %if.then, label %if.end, !dbg !9267

if.then:                                          ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9268
  br label %return, !dbg !9268

if.end:                                           ; preds = %cond.end
  %6 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !9269
  %signbit_rw = getelementptr inbounds %struct.real_format, %struct.real_format* %6, i32 0, i32 8, !dbg !9270
  %7 = load i32, i32* %signbit_rw, align 8, !dbg !9270
  store i32 %7, i32* %bitpos, align 4, !dbg !9271
  %8 = load i32, i32* %bitpos, align 4, !dbg !9272
  %cmp7 = icmp slt i32 %8, 0, !dbg !9274
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !9275

if.then9:                                         ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9276
  br label %return, !dbg !9276

if.end10:                                         ; preds = %if.end
  %9 = load i32, i32* %code.addr, align 4, !dbg !9277
  %cmp11 = icmp eq i32 %9, 51, !dbg !9279
  br i1 %cmp11, label %land.lhs.true, label %if.end14, !dbg !9280

land.lhs.true:                                    ; preds = %if.end10
  %10 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !9281
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %10, i32 0, i32 14, !dbg !9282
  %11 = load i8, i8* %has_signed_zero, align 1, !dbg !9282
  %tobool = icmp ne i8 %11, 0, !dbg !9281
  br i1 %tobool, label %if.end14, label %if.then13, !dbg !9283

if.then13:                                        ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9284
  br label %return, !dbg !9284

if.end14:                                         ; preds = %land.lhs.true, %if.end10
  %12 = load i32, i32* %mode.addr, align 4, !dbg !9285
  %idxprom15 = zext i32 %12 to i64, !dbg !9285
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom15, !dbg !9285
  %13 = load i8, i8* %arrayidx16, align 1, !dbg !9285
  %conv17 = zext i8 %13 to i16, !dbg !9285
  %conv18 = zext i16 %conv17 to i32, !dbg !9285
  %cmp19 = icmp sle i32 %conv18, 4, !dbg !9287
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !9288

if.then21:                                        ; preds = %if.end14
  %14 = load i32, i32* %mode.addr, align 4, !dbg !9289
  %call = call i32 @int_mode_for_mode(i32 %14), !dbg !9291
  store i32 %call, i32* %imode, align 4, !dbg !9292
  %15 = load i32, i32* %imode, align 4, !dbg !9293
  %cmp22 = icmp eq i32 %15, 1, !dbg !9295
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !9296

if.then24:                                        ; preds = %if.then21
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9297
  br label %return, !dbg !9297

if.end25:                                         ; preds = %if.then21
  store i32 0, i32* %word, align 4, !dbg !9298
  store i32 1, i32* %nwords, align 4, !dbg !9299
  br label %if.end35, !dbg !9300

if.else:                                          ; preds = %if.end14
  %16 = load i32, i32* @word_mode, align 4, !dbg !9301
  store i32 %16, i32* %imode, align 4, !dbg !9303
  %17 = load i32, i32* %bitpos, align 4, !dbg !9304
  %div = sdiv i32 %17, 32, !dbg !9306
  store i32 %div, i32* %word, align 4, !dbg !9307
  %18 = load i32, i32* %bitpos, align 4, !dbg !9308
  %rem = srem i32 %18, 32, !dbg !9309
  store i32 %rem, i32* %bitpos, align 4, !dbg !9310
  %19 = load i32, i32* %mode.addr, align 4, !dbg !9311
  %idxprom26 = zext i32 %19 to i64, !dbg !9311
  %arrayidx27 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom26, !dbg !9311
  %20 = load i8, i8* %arrayidx27, align 1, !dbg !9311
  %conv28 = zext i8 %20 to i16, !dbg !9311
  %conv29 = zext i16 %conv28 to i32, !dbg !9311
  %mul = mul nsw i32 %conv29, 8, !dbg !9311
  %conv30 = trunc i32 %mul to i16, !dbg !9311
  %conv31 = zext i16 %conv30 to i32, !dbg !9311
  %add32 = add nsw i32 %conv31, 32, !dbg !9312
  %sub33 = sub nsw i32 %add32, 1, !dbg !9313
  %div34 = sdiv i32 %sub33, 32, !dbg !9314
  store i32 %div34, i32* %nwords, align 4, !dbg !9315
  br label %if.end35

if.end35:                                         ; preds = %if.else, %if.end25
  %21 = load i32, i32* %bitpos, align 4, !dbg !9316
  %cmp36 = icmp slt i32 %21, 64, !dbg !9318
  br i1 %cmp36, label %if.then38, label %if.else39, !dbg !9319

if.then38:                                        ; preds = %if.end35
  store i64 0, i64* %hi, align 8, !dbg !9320
  %22 = load i32, i32* %bitpos, align 4, !dbg !9322
  %sh_prom = zext i32 %22 to i64, !dbg !9323
  %shl = shl i64 1, %sh_prom, !dbg !9323
  store i64 %shl, i64* %lo, align 8, !dbg !9324
  br label %if.end43, !dbg !9325

if.else39:                                        ; preds = %if.end35
  %23 = load i32, i32* %bitpos, align 4, !dbg !9326
  %sub40 = sub nsw i32 %23, 64, !dbg !9328
  %sh_prom41 = zext i32 %sub40 to i64, !dbg !9329
  %shl42 = shl i64 1, %sh_prom41, !dbg !9329
  store i64 %shl42, i64* %hi, align 8, !dbg !9330
  store i64 0, i64* %lo, align 8, !dbg !9331
  br label %if.end43

if.end43:                                         ; preds = %if.else39, %if.then38
  %24 = load i32, i32* %code.addr, align 4, !dbg !9332
  %cmp44 = icmp eq i32 %24, 111, !dbg !9334
  br i1 %cmp44, label %if.then46, label %if.end48, !dbg !9335

if.then46:                                        ; preds = %if.end43
  %25 = load i64, i64* %lo, align 8, !dbg !9336
  %neg = xor i64 %25, -1, !dbg !9337
  store i64 %neg, i64* %lo, align 8, !dbg !9338
  %26 = load i64, i64* %hi, align 8, !dbg !9339
  %neg47 = xor i64 %26, -1, !dbg !9340
  store i64 %neg47, i64* %hi, align 8, !dbg !9341
  br label %if.end48, !dbg !9342

if.end48:                                         ; preds = %if.then46, %if.end43
  %27 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9343
  %cmp49 = icmp eq %struct.rtx_def* %27, null, !dbg !9345
  br i1 %cmp49, label %if.then53, label %lor.lhs.false, !dbg !9346

lor.lhs.false:                                    ; preds = %if.end48
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9347
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9348
  %cmp51 = icmp eq %struct.rtx_def* %28, %29, !dbg !9349
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !9350

if.then53:                                        ; preds = %lor.lhs.false, %if.end48
  %30 = load i32, i32* %mode.addr, align 4, !dbg !9351
  %call54 = call %struct.rtx_def* @gen_reg_rtx(i32 %30), !dbg !9352
  store %struct.rtx_def* %call54, %struct.rtx_def** %target.addr, align 8, !dbg !9353
  br label %if.end55, !dbg !9354

if.end55:                                         ; preds = %if.then53, %lor.lhs.false
  %31 = load i32, i32* %nwords, align 4, !dbg !9355
  %cmp56 = icmp sgt i32 %31, 1, !dbg !9357
  br i1 %cmp56, label %if.then58, label %if.else81, !dbg !9358

if.then58:                                        ; preds = %if.end55
  call void @start_sequence(), !dbg !9359
  store i32 0, i32* %i, align 4, !dbg !9361
  br label %for.cond, !dbg !9363

for.cond:                                         ; preds = %for.inc, %if.then58
  %32 = load i32, i32* %i, align 4, !dbg !9364
  %33 = load i32, i32* %nwords, align 4, !dbg !9366
  %cmp59 = icmp slt i32 %32, %33, !dbg !9367
  br i1 %cmp59, label %for.body, label %for.end, !dbg !9368

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ_piece, metadata !9369, metadata !DIExpression()), !dbg !9371
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9372
  %35 = load i32, i32* %i, align 4, !dbg !9373
  %36 = load i32, i32* %mode.addr, align 4, !dbg !9374
  %call61 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %34, i32 %35, i32 1, i32 %36), !dbg !9375
  store %struct.rtx_def* %call61, %struct.rtx_def** %targ_piece, align 8, !dbg !9371
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0_piece, metadata !9376, metadata !DIExpression()), !dbg !9377
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9378
  %38 = load i32, i32* %i, align 4, !dbg !9379
  %39 = load i32, i32* %mode.addr, align 4, !dbg !9380
  %call62 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %37, i32 %38, i32 %39), !dbg !9381
  store %struct.rtx_def* %call62, %struct.rtx_def** %op0_piece, align 8, !dbg !9377
  %40 = load i32, i32* %i, align 4, !dbg !9382
  %41 = load i32, i32* %word, align 4, !dbg !9384
  %cmp63 = icmp eq i32 %40, %41, !dbg !9385
  br i1 %cmp63, label %if.then65, label %if.else76, !dbg !9386

if.then65:                                        ; preds = %for.body
  %42 = load i32, i32* %imode, align 4, !dbg !9387
  %43 = load i32, i32* %code.addr, align 4, !dbg !9389
  %cmp66 = icmp eq i32 %43, 111, !dbg !9390
  %44 = zext i1 %cmp66 to i64, !dbg !9389
  %cond68 = select i1 %cmp66, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), !dbg !9389
  %45 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !9391
  %46 = load i64, i64* %lo, align 8, !dbg !9392
  %47 = load i64, i64* %hi, align 8, !dbg !9393
  %48 = load i32, i32* %imode, align 4, !dbg !9394
  %call69 = call %struct.rtx_def* @immed_double_const(i64 %46, i64 %47, i32 %48), !dbg !9395
  %49 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !9396
  %call70 = call %struct.rtx_def* @expand_binop(i32 %42, %struct.optab_d* %cond68, %struct.rtx_def* %45, %struct.rtx_def* %call69, %struct.rtx_def* %49, i32 1, i32 3), !dbg !9397
  store %struct.rtx_def* %call70, %struct.rtx_def** %temp, align 8, !dbg !9398
  %50 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9399
  %51 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !9401
  %cmp71 = icmp ne %struct.rtx_def* %50, %51, !dbg !9402
  br i1 %cmp71, label %if.then73, label %if.end75, !dbg !9403

if.then73:                                        ; preds = %if.then65
  %52 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !9404
  %53 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9405
  %call74 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %52, %struct.rtx_def* %53), !dbg !9406
  br label %if.end75, !dbg !9406

if.end75:                                         ; preds = %if.then73, %if.then65
  br label %if.end78, !dbg !9407

if.else76:                                        ; preds = %for.body
  %54 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !9408
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !9409
  %call77 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %54, %struct.rtx_def* %55), !dbg !9410
  br label %if.end78

if.end78:                                         ; preds = %if.else76, %if.end75
  br label %for.inc, !dbg !9411

for.inc:                                          ; preds = %if.end78
  %56 = load i32, i32* %i, align 4, !dbg !9412
  %inc = add nsw i32 %56, 1, !dbg !9412
  store i32 %inc, i32* %i, align 4, !dbg !9412
  br label %for.cond, !dbg !9413, !llvm.loop !9414

for.end:                                          ; preds = %for.cond
  %call79 = call %struct.rtx_def* @get_insns(), !dbg !9416
  store %struct.rtx_def* %call79, %struct.rtx_def** %insns, align 8, !dbg !9417
  call void @end_sequence(), !dbg !9418
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !9419
  %call80 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %57), !dbg !9420
  br label %if.end94, !dbg !9421

if.else81:                                        ; preds = %if.end55
  %58 = load i32, i32* %imode, align 4, !dbg !9422
  %59 = load i32, i32* %code.addr, align 4, !dbg !9424
  %cmp82 = icmp eq i32 %59, 111, !dbg !9425
  %60 = zext i1 %cmp82 to i64, !dbg !9424
  %cond84 = select i1 %cmp82, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), !dbg !9424
  %61 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !9426
  %62 = load i32, i32* %imode, align 4, !dbg !9427
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9428
  %call85 = call %struct.rtx_def* %61(i32 %62, %struct.rtx_def* %63), !dbg !9426
  %64 = load i64, i64* %lo, align 8, !dbg !9429
  %65 = load i64, i64* %hi, align 8, !dbg !9430
  %66 = load i32, i32* %imode, align 4, !dbg !9431
  %call86 = call %struct.rtx_def* @immed_double_const(i64 %64, i64 %65, i32 %66), !dbg !9432
  %67 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !9433
  %68 = load i32, i32* %imode, align 4, !dbg !9434
  %69 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9435
  %call87 = call %struct.rtx_def* %67(i32 %68, %struct.rtx_def* %69), !dbg !9433
  %call88 = call %struct.rtx_def* @expand_binop(i32 %58, %struct.optab_d* %cond84, %struct.rtx_def* %call85, %struct.rtx_def* %call86, %struct.rtx_def* %call87, i32 1, i32 3), !dbg !9436
  store %struct.rtx_def* %call88, %struct.rtx_def** %temp, align 8, !dbg !9437
  %70 = load i32, i32* %mode.addr, align 4, !dbg !9438
  %71 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9439
  %72 = load i32, i32* %imode, align 4, !dbg !9440
  %call89 = call %struct.rtx_def* @lowpart_subreg_maybe_copy(i32 %70, %struct.rtx_def* %71, i32 %72), !dbg !9441
  store %struct.rtx_def* %call89, %struct.rtx_def** %target.addr, align 8, !dbg !9442
  %call90 = call %struct.rtx_def* @get_last_insn(), !dbg !9443
  %73 = load i32, i32* %code.addr, align 4, !dbg !9444
  %74 = load i32, i32* %mode.addr, align 4, !dbg !9444
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9444
  %call91 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %75), !dbg !9444
  %call92 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %73, i32 %74, %struct.rtx_def* %call91), !dbg !9444
  %call93 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %call90, i32 4, %struct.rtx_def* %call92), !dbg !9445
  br label %if.end94

if.end94:                                         ; preds = %if.else81, %for.end
  %76 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9446
  store %struct.rtx_def* %76, %struct.rtx_def** %retval, align 8, !dbg !9447
  br label %return, !dbg !9447

return:                                           ; preds = %if.end94, %if.then24, %if.then13, %if.then9, %if.then
  %77 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9448
  ret %struct.rtx_def* %77, !dbg !9448
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_parity(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !9449 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mclass = alloca i32, align 4
  %wider_mode = alloca i32, align 4
  %xop0 = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9450, metadata !DIExpression()), !dbg !9451
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9452, metadata !DIExpression()), !dbg !9453
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9454, metadata !DIExpression()), !dbg !9455
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !9456, metadata !DIExpression()), !dbg !9457
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9458
  %idxprom = zext i32 %0 to i64, !dbg !9458
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9458
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9458
  %conv = zext i8 %1 to i32, !dbg !9458
  store i32 %conv, i32* %mclass, align 4, !dbg !9457
  %2 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp = icmp eq i32 %2, 2, !dbg !9459
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9459

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp2 = icmp eq i32 %3, 8, !dbg !9459
  br i1 %cmp2, label %if.then, label %lor.lhs.false4, !dbg !9459

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp5 = icmp eq i32 %4, 9, !dbg !9459
  br i1 %cmp5, label %if.then, label %lor.lhs.false7, !dbg !9459

lor.lhs.false7:                                   ; preds = %lor.lhs.false4
  %5 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp8 = icmp eq i32 %5, 11, !dbg !9459
  br i1 %cmp8, label %if.then, label %lor.lhs.false10, !dbg !9459

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp11 = icmp eq i32 %6, 4, !dbg !9459
  br i1 %cmp11, label %if.then, label %lor.lhs.false13, !dbg !9459

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %7 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp14 = icmp eq i32 %7, 5, !dbg !9459
  br i1 %cmp14, label %if.then, label %lor.lhs.false16, !dbg !9459

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %8 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp17 = icmp eq i32 %8, 6, !dbg !9459
  br i1 %cmp17, label %if.then, label %lor.lhs.false19, !dbg !9459

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %9 = load i32, i32* %mclass, align 4, !dbg !9459
  %cmp20 = icmp eq i32 %9, 7, !dbg !9459
  br i1 %cmp20, label %if.then, label %if.end48, !dbg !9461

if.then:                                          ; preds = %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false4, %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i32* %wider_mode, metadata !9462, metadata !DIExpression()), !dbg !9464
  %10 = load i32, i32* %mode.addr, align 4, !dbg !9465
  store i32 %10, i32* %wider_mode, align 4, !dbg !9467
  br label %for.cond, !dbg !9468

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = load i32, i32* %wider_mode, align 4, !dbg !9469
  %cmp22 = icmp ne i32 %11, 0, !dbg !9471
  br i1 %cmp22, label %for.body, label %for.end, !dbg !9472

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %wider_mode, align 4, !dbg !9473
  %idxprom24 = sext i32 %12 to i64, !dbg !9473
  %arrayidx25 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73, i32 4), i64 0, i64 %idxprom24, !dbg !9473
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx25, i32 0, i32 0, !dbg !9476
  %13 = load i32, i32* %insn_code, align 4, !dbg !9476
  %cmp26 = icmp ne i32 %13, 2956, !dbg !9477
  br i1 %cmp26, label %if.then28, label %if.end44, !dbg !9478

if.then28:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xop0, metadata !9479, metadata !DIExpression()), !dbg !9481
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9482, metadata !DIExpression()), !dbg !9483
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9484, metadata !DIExpression()), !dbg !9485
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !9486
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9487
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9488
  %cmp29 = icmp eq %struct.rtx_def* %14, null, !dbg !9490
  br i1 %cmp29, label %if.then31, label %if.end, !dbg !9491

if.then31:                                        ; preds = %if.then28
  %15 = load i32, i32* %mode.addr, align 4, !dbg !9492
  %call32 = call %struct.rtx_def* @gen_reg_rtx(i32 %15), !dbg !9493
  store %struct.rtx_def* %call32, %struct.rtx_def** %target.addr, align 8, !dbg !9494
  br label %if.end, !dbg !9495

if.end:                                           ; preds = %if.then31, %if.then28
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9496
  %17 = load i32, i32* %wider_mode, align 4, !dbg !9497
  %18 = load i32, i32* %mode.addr, align 4, !dbg !9498
  %call33 = call %struct.rtx_def* @widen_operand(%struct.rtx_def* %16, i32 %17, i32 %18, i32 1, i32 0), !dbg !9499
  store %struct.rtx_def* %call33, %struct.rtx_def** %xop0, align 8, !dbg !9500
  %19 = load i32, i32* %wider_mode, align 4, !dbg !9501
  %20 = load %struct.rtx_def*, %struct.rtx_def** %xop0, align 8, !dbg !9502
  %call34 = call %struct.rtx_def* @expand_unop(i32 %19, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73), %struct.rtx_def* %20, %struct.rtx_def* null, i32 1), !dbg !9503
  store %struct.rtx_def* %call34, %struct.rtx_def** %temp, align 8, !dbg !9504
  %21 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9505
  %cmp35 = icmp ne %struct.rtx_def* %21, null, !dbg !9507
  br i1 %cmp35, label %if.then37, label %if.end39, !dbg !9508

if.then37:                                        ; preds = %if.end
  %22 = load i32, i32* %wider_mode, align 4, !dbg !9509
  %23 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9510
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !9511
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9512
  %call38 = call %struct.rtx_def* @expand_binop(i32 %22, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* %25, i32 1, i32 0), !dbg !9513
  store %struct.rtx_def* %call38, %struct.rtx_def** %temp, align 8, !dbg !9514
  br label %if.end39, !dbg !9515

if.end39:                                         ; preds = %if.then37, %if.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9516
  %cmp40 = icmp eq %struct.rtx_def* %26, null, !dbg !9518
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !9519

if.then42:                                        ; preds = %if.end39
  %27 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9520
  call void @delete_insns_since(%struct.rtx_def* %27), !dbg !9521
  br label %if.end43, !dbg !9521

if.end43:                                         ; preds = %if.then42, %if.end39
  %28 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9522
  store %struct.rtx_def* %28, %struct.rtx_def** %retval, align 8, !dbg !9523
  br label %return, !dbg !9523

if.end44:                                         ; preds = %for.body
  br label %for.inc, !dbg !9524

for.inc:                                          ; preds = %if.end44
  %29 = load i32, i32* %wider_mode, align 4, !dbg !9525
  %idxprom45 = zext i32 %29 to i64, !dbg !9525
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom45, !dbg !9525
  %30 = load i8, i8* %arrayidx46, align 1, !dbg !9525
  %conv47 = zext i8 %30 to i32, !dbg !9525
  store i32 %conv47, i32* %wider_mode, align 4, !dbg !9526
  br label %for.cond, !dbg !9527, !llvm.loop !9528

for.end:                                          ; preds = %for.cond
  br label %if.end48, !dbg !9530

if.end48:                                         ; preds = %for.end, %lor.lhs.false19
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9531
  br label %return, !dbg !9531

return:                                           ; preds = %if.end48, %if.end43
  %31 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9532
  ret %struct.rtx_def* %31, !dbg !9532
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_ffs(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !9533 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %val = alloca i64, align 8
  %defined_at_zero = alloca i8, align 1
  %temp = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %nonzero_label = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9534, metadata !DIExpression()), !dbg !9535
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9536, metadata !DIExpression()), !dbg !9537
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9538, metadata !DIExpression()), !dbg !9539
  call void @llvm.dbg.declare(metadata i64* %val, metadata !9540, metadata !DIExpression()), !dbg !9541
  store i64 0, i64* %val, align 8, !dbg !9541
  call void @llvm.dbg.declare(metadata i8* %defined_at_zero, metadata !9542, metadata !DIExpression()), !dbg !9543
  store i8 0, i8* %defined_at_zero, align 1, !dbg !9543
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9544, metadata !DIExpression()), !dbg !9545
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !9546, metadata !DIExpression()), !dbg !9547
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9548
  %idxprom = sext i32 %0 to i64, !dbg !9548
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72, i32 4), i64 0, i64 %idxprom, !dbg !9548
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !9550
  %1 = load i32, i32* %insn_code, align 4, !dbg !9550
  %cmp = icmp ne i32 %1, 2956, !dbg !9551
  br i1 %cmp, label %if.then, label %if.else, !dbg !9552

if.then:                                          ; preds = %entry
  call void @start_sequence(), !dbg !9553
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9555
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9556
  %call = call %struct.rtx_def* @expand_unop_direct(i32 %2, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72), %struct.rtx_def* %3, %struct.rtx_def* null, i32 1), !dbg !9557
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !9558
  %4 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9559
  %tobool = icmp ne %struct.rtx_def* %4, null, !dbg !9559
  br i1 %tobool, label %if.end, label %if.then1, !dbg !9561

if.then1:                                         ; preds = %if.then
  br label %fail, !dbg !9562

if.end:                                           ; preds = %if.then
  store i8 0, i8* %defined_at_zero, align 1, !dbg !9563
  br label %if.end13, !dbg !9564

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %mode.addr, align 4, !dbg !9565
  %idxprom2 = sext i32 %5 to i64, !dbg !9565
  %arrayidx3 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71, i32 4), i64 0, i64 %idxprom2, !dbg !9565
  %insn_code4 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx3, i32 0, i32 0, !dbg !9567
  %6 = load i32, i32* %insn_code4, align 4, !dbg !9567
  %cmp5 = icmp ne i32 %6, 2956, !dbg !9568
  br i1 %cmp5, label %if.then6, label %if.else11, !dbg !9569

if.then6:                                         ; preds = %if.else
  call void @start_sequence(), !dbg !9570
  %7 = load i32, i32* %mode.addr, align 4, !dbg !9572
  %8 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9573
  %call7 = call %struct.rtx_def* @expand_ctz(i32 %7, %struct.rtx_def* %8, %struct.rtx_def* null), !dbg !9574
  store %struct.rtx_def* %call7, %struct.rtx_def** %temp, align 8, !dbg !9575
  %9 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9576
  %tobool8 = icmp ne %struct.rtx_def* %9, null, !dbg !9576
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !9578

if.then9:                                         ; preds = %if.then6
  br label %fail, !dbg !9579

if.end10:                                         ; preds = %if.then6
  br label %if.end12, !dbg !9580

if.else11:                                        ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9581
  br label %return, !dbg !9581

if.end12:                                         ; preds = %if.end10
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  %10 = load i8, i8* %defined_at_zero, align 1, !dbg !9582
  %conv = zext i8 %10 to i32, !dbg !9582
  %tobool14 = icmp ne i32 %conv, 0, !dbg !9582
  br i1 %tobool14, label %land.lhs.true, label %if.else18, !dbg !9584

land.lhs.true:                                    ; preds = %if.end13
  %11 = load i64, i64* %val, align 8, !dbg !9585
  %cmp15 = icmp eq i64 %11, -1, !dbg !9586
  br i1 %cmp15, label %if.then17, label %if.else18, !dbg !9587

if.then17:                                        ; preds = %land.lhs.true
  br label %if.end24, !dbg !9587

if.else18:                                        ; preds = %land.lhs.true, %if.end13
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %nonzero_label, metadata !9588, metadata !DIExpression()), !dbg !9590
  %call19 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9591
  store %struct.rtx_def* %call19, %struct.rtx_def** %nonzero_label, align 8, !dbg !9590
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9592
  %13 = load i32, i32* %mode.addr, align 4, !dbg !9593
  %idxprom20 = sext i32 %13 to i64, !dbg !9593
  %arrayidx21 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom20, !dbg !9593
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8, !dbg !9593
  %15 = load i32, i32* %mode.addr, align 4, !dbg !9594
  %16 = load %struct.rtx_def*, %struct.rtx_def** %nonzero_label, align 8, !dbg !9595
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %12, %struct.rtx_def* %14, i32 80, %struct.rtx_def* null, i32 %15, i32 1, %struct.rtx_def* %16), !dbg !9596
  %17 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9597
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 -1), !dbg !9598
  call void @convert_move(%struct.rtx_def* %17, %struct.rtx_def* %call22, i32 0), !dbg !9599
  %18 = load %struct.rtx_def*, %struct.rtx_def** %nonzero_label, align 8, !dbg !9600
  %call23 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %18), !dbg !9601
  br label %if.end24

if.end24:                                         ; preds = %if.else18, %if.then17
  %19 = load i32, i32* %mode.addr, align 4, !dbg !9602
  %20 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9603
  %call25 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 1), !dbg !9604
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9605
  %call26 = call %struct.rtx_def* @expand_binop(i32 %19, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %20, %struct.rtx_def* %call25, %struct.rtx_def* %21, i32 0, i32 0), !dbg !9606
  store %struct.rtx_def* %call26, %struct.rtx_def** %temp, align 8, !dbg !9607
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9608
  %tobool27 = icmp ne %struct.rtx_def* %22, null, !dbg !9608
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !9610

if.then28:                                        ; preds = %if.end24
  br label %fail, !dbg !9611

if.end29:                                         ; preds = %if.end24
  %call30 = call %struct.rtx_def* @get_insns(), !dbg !9612
  store %struct.rtx_def* %call30, %struct.rtx_def** %seq, align 8, !dbg !9613
  call void @end_sequence(), !dbg !9614
  %23 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9615
  %24 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9616
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9617
  %call31 = call i32 @add_equal_note(%struct.rtx_def* %23, %struct.rtx_def* %24, i32 114, %struct.rtx_def* %25, %struct.rtx_def* null), !dbg !9618
  %26 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9619
  %call32 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %26), !dbg !9620
  %27 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9621
  store %struct.rtx_def* %27, %struct.rtx_def** %retval, align 8, !dbg !9622
  br label %return, !dbg !9622

fail:                                             ; preds = %if.then28, %if.then9, %if.then1
  call void @llvm.dbg.label(metadata !9623), !dbg !9624
  call void @end_sequence(), !dbg !9625
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9626
  br label %return, !dbg !9626

return:                                           ; preds = %fail, %if.end29, %if.else11
  %28 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9627
  ret %struct.rtx_def* %28, !dbg !9627
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_ctz(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !9628 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9629, metadata !DIExpression()), !dbg !9630
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9631, metadata !DIExpression()), !dbg !9632
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9633, metadata !DIExpression()), !dbg !9634
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !9635, metadata !DIExpression()), !dbg !9636
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9637, metadata !DIExpression()), !dbg !9638
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9639
  %idxprom = sext i32 %0 to i64, !dbg !9639
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71, i32 4), i64 0, i64 %idxprom, !dbg !9639
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !9641
  %1 = load i32, i32* %insn_code, align 4, !dbg !9641
  %cmp = icmp eq i32 %1, 2956, !dbg !9642
  br i1 %cmp, label %if.then, label %if.end, !dbg !9643

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9644
  br label %return, !dbg !9644

if.end:                                           ; preds = %entry
  call void @start_sequence(), !dbg !9645
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9646
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9647
  %call = call %struct.rtx_def* @expand_unop_direct(i32 %2, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %3, %struct.rtx_def* null, i32 1), !dbg !9648
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !9649
  %4 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9650
  %tobool = icmp ne %struct.rtx_def* %4, null, !dbg !9650
  br i1 %tobool, label %if.then1, label %if.end3, !dbg !9652

if.then1:                                         ; preds = %if.end
  %5 = load i32, i32* %mode.addr, align 4, !dbg !9653
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9654
  %7 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9655
  %call2 = call %struct.rtx_def* @expand_binop(i32 %5, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* null, i32 1, i32 0), !dbg !9656
  store %struct.rtx_def* %call2, %struct.rtx_def** %temp, align 8, !dbg !9657
  br label %if.end3, !dbg !9658

if.end3:                                          ; preds = %if.then1, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9659
  %tobool4 = icmp ne %struct.rtx_def* %8, null, !dbg !9659
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !9661

if.then5:                                         ; preds = %if.end3
  %9 = load i32, i32* %mode.addr, align 4, !dbg !9662
  %10 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9663
  %call6 = call %struct.rtx_def* @expand_unop_direct(i32 %9, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), %struct.rtx_def* %10, %struct.rtx_def* null, i32 1), !dbg !9664
  store %struct.rtx_def* %call6, %struct.rtx_def** %temp, align 8, !dbg !9665
  br label %if.end7, !dbg !9666

if.end7:                                          ; preds = %if.then5, %if.end3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9667
  %tobool8 = icmp ne %struct.rtx_def* %11, null, !dbg !9667
  br i1 %tobool8, label %if.then9, label %if.end18, !dbg !9669

if.then9:                                         ; preds = %if.end7
  %12 = load i32, i32* %mode.addr, align 4, !dbg !9670
  %13 = load i32, i32* %mode.addr, align 4, !dbg !9671
  %idxprom10 = zext i32 %13 to i64, !dbg !9671
  %arrayidx11 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom10, !dbg !9671
  %14 = load i8, i8* %arrayidx11, align 1, !dbg !9671
  %conv = zext i8 %14 to i16, !dbg !9671
  %conv12 = zext i16 %conv to i32, !dbg !9671
  %mul = mul nsw i32 %conv12, 8, !dbg !9671
  %conv13 = trunc i32 %mul to i16, !dbg !9671
  %conv14 = zext i16 %conv13 to i32, !dbg !9671
  %sub = sub nsw i32 %conv14, 1, !dbg !9671
  %conv15 = sext i32 %sub to i64, !dbg !9671
  %call16 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv15), !dbg !9671
  %15 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9672
  %16 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9673
  %call17 = call %struct.rtx_def* @expand_binop(i32 %12, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %call16, %struct.rtx_def* %15, %struct.rtx_def* %16, i32 1, i32 0), !dbg !9674
  store %struct.rtx_def* %call17, %struct.rtx_def** %temp, align 8, !dbg !9675
  br label %if.end18, !dbg !9676

if.end18:                                         ; preds = %if.then9, %if.end7
  %17 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9677
  %cmp19 = icmp eq %struct.rtx_def* %17, null, !dbg !9679
  br i1 %cmp19, label %if.then21, label %if.end22, !dbg !9680

if.then21:                                        ; preds = %if.end18
  call void @end_sequence(), !dbg !9681
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9683
  br label %return, !dbg !9683

if.end22:                                         ; preds = %if.end18
  %call23 = call %struct.rtx_def* @get_insns(), !dbg !9684
  store %struct.rtx_def* %call23, %struct.rtx_def** %seq, align 8, !dbg !9685
  call void @end_sequence(), !dbg !9686
  %18 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9687
  %19 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9688
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9689
  %call24 = call i32 @add_equal_note(%struct.rtx_def* %18, %struct.rtx_def* %19, i32 116, %struct.rtx_def* %20, %struct.rtx_def* null), !dbg !9690
  %21 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !9691
  %call25 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %21), !dbg !9692
  %22 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9693
  store %struct.rtx_def* %22, %struct.rtx_def** %retval, align 8, !dbg !9694
  br label %return, !dbg !9694

return:                                           ; preds = %if.end22, %if.then21, %if.then
  %23 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9695
  ret %struct.rtx_def* %23, !dbg !9695
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %struct.rtx_def* @hard_libcall_value(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_gen_unary(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_abs_nojump(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target, i32 %result_unsignedp) #0 !dbg !9696 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %result_unsignedp.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %extended = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9699, metadata !DIExpression()), !dbg !9700
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9701, metadata !DIExpression()), !dbg !9702
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9703, metadata !DIExpression()), !dbg !9704
  store i32 %result_unsignedp, i32* %result_unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %result_unsignedp.addr, metadata !9705, metadata !DIExpression()), !dbg !9706
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9707, metadata !DIExpression()), !dbg !9708
  %0 = load i32, i32* @flag_trapv, align 4, !dbg !9709
  %tobool = icmp ne i32 %0, 0, !dbg !9709
  br i1 %tobool, label %if.end, label %if.then, !dbg !9711

if.then:                                          ; preds = %entry
  store i32 1, i32* %result_unsignedp.addr, align 4, !dbg !9712
  br label %if.end, !dbg !9713

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !9714
  %2 = load i32, i32* %result_unsignedp.addr, align 4, !dbg !9715
  %tobool1 = icmp ne i32 %2, 0, !dbg !9715
  %3 = zext i1 %tobool1 to i64, !dbg !9715
  %cond = select i1 %tobool1, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 67), !dbg !9715
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9716
  %5 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9717
  %call = call %struct.rtx_def* @expand_unop(i32 %1, %struct.optab_d* %cond, %struct.rtx_def* %4, %struct.rtx_def* %5, i32 0), !dbg !9718
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !9719
  %6 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9720
  %cmp = icmp ne %struct.rtx_def* %6, null, !dbg !9722
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !9723

if.then2:                                         ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9724
  store %struct.rtx_def* %7, %struct.rtx_def** %retval, align 8, !dbg !9725
  br label %return, !dbg !9725

if.end3:                                          ; preds = %if.end
  %8 = load i32, i32* %mode.addr, align 4, !dbg !9726
  %idxprom = zext i32 %8 to i64, !dbg !9726
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9726
  %9 = load i8, i8* %arrayidx, align 1, !dbg !9726
  %conv = zext i8 %9 to i32, !dbg !9726
  %cmp4 = icmp eq i32 %conv, 8, !dbg !9726
  br i1 %cmp4, label %if.then11, label %lor.lhs.false, !dbg !9726

lor.lhs.false:                                    ; preds = %if.end3
  %10 = load i32, i32* %mode.addr, align 4, !dbg !9726
  %idxprom6 = zext i32 %10 to i64, !dbg !9726
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom6, !dbg !9726
  %11 = load i8, i8* %arrayidx7, align 1, !dbg !9726
  %conv8 = zext i8 %11 to i32, !dbg !9726
  %cmp9 = icmp eq i32 %conv8, 9, !dbg !9726
  br i1 %cmp9, label %if.then11, label %if.end16, !dbg !9728

if.then11:                                        ; preds = %lor.lhs.false, %if.end3
  %12 = load i32, i32* %mode.addr, align 4, !dbg !9729
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9731
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9732
  %call12 = call %struct.rtx_def* @expand_absneg_bit(i32 111, i32 %12, %struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !9733
  store %struct.rtx_def* %call12, %struct.rtx_def** %temp, align 8, !dbg !9734
  %15 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9735
  %tobool13 = icmp ne %struct.rtx_def* %15, null, !dbg !9735
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !9737

if.then14:                                        ; preds = %if.then11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9738
  store %struct.rtx_def* %16, %struct.rtx_def** %retval, align 8, !dbg !9739
  br label %return, !dbg !9739

if.end15:                                         ; preds = %if.then11
  br label %if.end16, !dbg !9740

if.end16:                                         ; preds = %if.end15, %lor.lhs.false
  %17 = load i32, i32* %mode.addr, align 4, !dbg !9741
  %idxprom17 = sext i32 %17 to i64, !dbg !9741
  %arrayidx18 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55, i32 4), i64 0, i64 %idxprom17, !dbg !9741
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx18, i32 0, i32 0, !dbg !9743
  %18 = load i32, i32* %insn_code, align 4, !dbg !9743
  %cmp19 = icmp ne i32 %18, 2956, !dbg !9744
  br i1 %cmp19, label %land.lhs.true, label %if.end124, !dbg !9745

land.lhs.true:                                    ; preds = %if.end16
  %19 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom21 = zext i32 %19 to i64, !dbg !9746
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom21, !dbg !9746
  %20 = load i8, i8* %arrayidx22, align 1, !dbg !9746
  %conv23 = zext i8 %20 to i32, !dbg !9746
  %cmp24 = icmp eq i32 %conv23, 8, !dbg !9746
  br i1 %cmp24, label %land.lhs.true44, label %lor.lhs.false26, !dbg !9746

lor.lhs.false26:                                  ; preds = %land.lhs.true
  %21 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom27 = zext i32 %21 to i64, !dbg !9746
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom27, !dbg !9746
  %22 = load i8, i8* %arrayidx28, align 1, !dbg !9746
  %conv29 = zext i8 %22 to i32, !dbg !9746
  %cmp30 = icmp eq i32 %conv29, 9, !dbg !9746
  br i1 %cmp30, label %land.lhs.true44, label %lor.lhs.false32, !dbg !9746

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %23 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom33 = zext i32 %23 to i64, !dbg !9746
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !9746
  %24 = load i8, i8* %arrayidx34, align 1, !dbg !9746
  %conv35 = zext i8 %24 to i32, !dbg !9746
  %cmp36 = icmp eq i32 %conv35, 11, !dbg !9746
  br i1 %cmp36, label %land.lhs.true44, label %lor.lhs.false38, !dbg !9746

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %25 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom39 = zext i32 %25 to i64, !dbg !9746
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !9746
  %26 = load i8, i8* %arrayidx40, align 1, !dbg !9746
  %conv41 = zext i8 %26 to i32, !dbg !9746
  %cmp42 = icmp eq i32 %conv41, 17, !dbg !9746
  br i1 %cmp42, label %land.lhs.true44, label %if.then112, !dbg !9746

land.lhs.true44:                                  ; preds = %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false26, %land.lhs.true
  %27 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom45 = zext i32 %27 to i64, !dbg !9746
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !9746
  %28 = load i8, i8* %arrayidx46, align 1, !dbg !9746
  %conv47 = zext i8 %28 to i32, !dbg !9746
  %cmp48 = icmp eq i32 %conv47, 8, !dbg !9746
  br i1 %cmp48, label %cond.true, label %lor.lhs.false50, !dbg !9746

lor.lhs.false50:                                  ; preds = %land.lhs.true44
  %29 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom51 = zext i32 %29 to i64, !dbg !9746
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !9746
  %30 = load i8, i8* %arrayidx52, align 1, !dbg !9746
  %conv53 = zext i8 %30 to i32, !dbg !9746
  %cmp54 = icmp eq i32 %conv53, 9, !dbg !9746
  br i1 %cmp54, label %cond.true, label %cond.false, !dbg !9746

cond.true:                                        ; preds = %lor.lhs.false50, %land.lhs.true44
  %31 = load i32, i32* %mode.addr, align 4, !dbg !9746
  br label %cond.end, !dbg !9746

cond.false:                                       ; preds = %lor.lhs.false50
  %32 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom56 = zext i32 %32 to i64, !dbg !9746
  %arrayidx57 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom56, !dbg !9746
  %33 = load i8, i8* %arrayidx57, align 1, !dbg !9746
  %conv58 = zext i8 %33 to i32, !dbg !9746
  br label %cond.end, !dbg !9746

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond59 = phi i32 [ %31, %cond.true ], [ %conv58, %cond.false ], !dbg !9746
  %idxprom60 = zext i32 %cond59 to i64, !dbg !9746
  %arrayidx61 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom60, !dbg !9746
  %34 = load i8, i8* %arrayidx61, align 1, !dbg !9746
  %conv62 = zext i8 %34 to i32, !dbg !9746
  %cmp63 = icmp eq i32 %conv62, 9, !dbg !9746
  br i1 %cmp63, label %cond.true65, label %cond.false84, !dbg !9746

cond.true65:                                      ; preds = %cond.end
  %35 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom66 = zext i32 %35 to i64, !dbg !9746
  %arrayidx67 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom66, !dbg !9746
  %36 = load i8, i8* %arrayidx67, align 1, !dbg !9746
  %conv68 = zext i8 %36 to i32, !dbg !9746
  %cmp69 = icmp eq i32 %conv68, 8, !dbg !9746
  br i1 %cmp69, label %cond.true77, label %lor.lhs.false71, !dbg !9746

lor.lhs.false71:                                  ; preds = %cond.true65
  %37 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom72 = zext i32 %37 to i64, !dbg !9746
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !9746
  %38 = load i8, i8* %arrayidx73, align 1, !dbg !9746
  %conv74 = zext i8 %38 to i32, !dbg !9746
  %cmp75 = icmp eq i32 %conv74, 9, !dbg !9746
  br i1 %cmp75, label %cond.true77, label %cond.false78, !dbg !9746

cond.true77:                                      ; preds = %lor.lhs.false71, %cond.true65
  %39 = load i32, i32* %mode.addr, align 4, !dbg !9746
  br label %cond.end82, !dbg !9746

cond.false78:                                     ; preds = %lor.lhs.false71
  %40 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom79 = zext i32 %40 to i64, !dbg !9746
  %arrayidx80 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom79, !dbg !9746
  %41 = load i8, i8* %arrayidx80, align 1, !dbg !9746
  %conv81 = zext i8 %41 to i32, !dbg !9746
  br label %cond.end82, !dbg !9746

cond.end82:                                       ; preds = %cond.false78, %cond.true77
  %cond83 = phi i32 [ %39, %cond.true77 ], [ %conv81, %cond.false78 ], !dbg !9746
  %sub = sub i32 %cond83, 42, !dbg !9746
  %add = add i32 %sub, 4, !dbg !9746
  br label %cond.end104, !dbg !9746

cond.false84:                                     ; preds = %cond.end
  %42 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom85 = zext i32 %42 to i64, !dbg !9746
  %arrayidx86 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom85, !dbg !9746
  %43 = load i8, i8* %arrayidx86, align 1, !dbg !9746
  %conv87 = zext i8 %43 to i32, !dbg !9746
  %cmp88 = icmp eq i32 %conv87, 8, !dbg !9746
  br i1 %cmp88, label %cond.true96, label %lor.lhs.false90, !dbg !9746

lor.lhs.false90:                                  ; preds = %cond.false84
  %44 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom91 = zext i32 %44 to i64, !dbg !9746
  %arrayidx92 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom91, !dbg !9746
  %45 = load i8, i8* %arrayidx92, align 1, !dbg !9746
  %conv93 = zext i8 %45 to i32, !dbg !9746
  %cmp94 = icmp eq i32 %conv93, 9, !dbg !9746
  br i1 %cmp94, label %cond.true96, label %cond.false97, !dbg !9746

cond.true96:                                      ; preds = %lor.lhs.false90, %cond.false84
  %46 = load i32, i32* %mode.addr, align 4, !dbg !9746
  br label %cond.end101, !dbg !9746

cond.false97:                                     ; preds = %lor.lhs.false90
  %47 = load i32, i32* %mode.addr, align 4, !dbg !9746
  %idxprom98 = zext i32 %47 to i64, !dbg !9746
  %arrayidx99 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom98, !dbg !9746
  %48 = load i8, i8* %arrayidx99, align 1, !dbg !9746
  %conv100 = zext i8 %48 to i32, !dbg !9746
  br label %cond.end101, !dbg !9746

cond.end101:                                      ; preds = %cond.false97, %cond.true96
  %cond102 = phi i32 [ %46, %cond.true96 ], [ %conv100, %cond.false97 ], !dbg !9746
  %sub103 = sub i32 %cond102, 38, !dbg !9746
  br label %cond.end104, !dbg !9746

cond.end104:                                      ; preds = %cond.end101, %cond.end82
  %cond105 = phi i32 [ %add, %cond.end82 ], [ %sub103, %cond.end101 ], !dbg !9746
  %idxprom106 = zext i32 %cond105 to i64, !dbg !9746
  %arrayidx107 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom106, !dbg !9746
  %49 = load %struct.real_format*, %struct.real_format** %arrayidx107, align 8, !dbg !9746
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %49, i32 0, i32 14, !dbg !9746
  %50 = load i8, i8* %has_signed_zero, align 1, !dbg !9746
  %conv108 = zext i8 %50 to i32, !dbg !9746
  %tobool109 = icmp ne i32 %conv108, 0, !dbg !9746
  br i1 %tobool109, label %land.lhs.true110, label %if.then112, !dbg !9746

land.lhs.true110:                                 ; preds = %cond.end104
  %51 = load i32, i32* @flag_signed_zeros, align 4, !dbg !9746
  %tobool111 = icmp ne i32 %51, 0, !dbg !9746
  br i1 %tobool111, label %if.end124, label %if.then112, !dbg !9747

if.then112:                                       ; preds = %land.lhs.true110, %cond.end104, %lor.lhs.false38
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9748, metadata !DIExpression()), !dbg !9750
  %call113 = call %struct.rtx_def* @get_last_insn(), !dbg !9751
  store %struct.rtx_def* %call113, %struct.rtx_def** %last, align 8, !dbg !9750
  %52 = load i32, i32* %mode.addr, align 4, !dbg !9752
  %53 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9753
  %call114 = call %struct.rtx_def* @expand_unop(i32 %52, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %53, %struct.rtx_def* null, i32 0), !dbg !9754
  store %struct.rtx_def* %call114, %struct.rtx_def** %temp, align 8, !dbg !9755
  %54 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9756
  %cmp115 = icmp ne %struct.rtx_def* %54, null, !dbg !9758
  br i1 %cmp115, label %if.then117, label %if.end119, !dbg !9759

if.then117:                                       ; preds = %if.then112
  %55 = load i32, i32* %mode.addr, align 4, !dbg !9760
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9761
  %57 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9762
  %58 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9763
  %call118 = call %struct.rtx_def* @expand_binop(i32 %55, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55), %struct.rtx_def* %56, %struct.rtx_def* %57, %struct.rtx_def* %58, i32 0, i32 2), !dbg !9764
  store %struct.rtx_def* %call118, %struct.rtx_def** %temp, align 8, !dbg !9765
  br label %if.end119, !dbg !9766

if.end119:                                        ; preds = %if.then117, %if.then112
  %59 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9767
  %cmp120 = icmp ne %struct.rtx_def* %59, null, !dbg !9769
  br i1 %cmp120, label %if.then122, label %if.end123, !dbg !9770

if.then122:                                       ; preds = %if.end119
  %60 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9771
  store %struct.rtx_def* %60, %struct.rtx_def** %retval, align 8, !dbg !9772
  br label %return, !dbg !9772

if.end123:                                        ; preds = %if.end119
  %61 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9773
  call void @delete_insns_since(%struct.rtx_def* %61), !dbg !9774
  br label %if.end124, !dbg !9775

if.end124:                                        ; preds = %if.end123, %land.lhs.true110, %if.end16
  %62 = load i32, i32* %mode.addr, align 4, !dbg !9776
  %idxprom125 = zext i32 %62 to i64, !dbg !9776
  %arrayidx126 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom125, !dbg !9776
  %63 = load i8, i8* %arrayidx126, align 1, !dbg !9776
  %conv127 = zext i8 %63 to i32, !dbg !9776
  %cmp128 = icmp eq i32 %conv127, 2, !dbg !9778
  br i1 %cmp128, label %land.lhs.true130, label %if.end162, !dbg !9779

land.lhs.true130:                                 ; preds = %if.end124
  %call131 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !9780
  %tobool132 = icmp ne i8 %call131, 0, !dbg !9780
  br i1 %tobool132, label %cond.false134, label %cond.true133, !dbg !9780

cond.true133:                                     ; preds = %land.lhs.true130
  br label %cond.end135, !dbg !9780

cond.false134:                                    ; preds = %land.lhs.true130
  %64 = load i32, i32* @ix86_branch_cost, align 4, !dbg !9780
  br label %cond.end135, !dbg !9780

cond.end135:                                      ; preds = %cond.false134, %cond.true133
  %cond136 = phi i32 [ 2, %cond.true133 ], [ %64, %cond.false134 ], !dbg !9780
  %cmp137 = icmp sge i32 %cond136, 2, !dbg !9781
  br i1 %cmp137, label %if.then139, label %if.end162, !dbg !9782

if.then139:                                       ; preds = %cond.end135
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %extended, metadata !9783, metadata !DIExpression()), !dbg !9785
  %65 = load i32, i32* %mode.addr, align 4, !dbg !9786
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9787
  %67 = load i32, i32* %mode.addr, align 4, !dbg !9788
  %idxprom140 = zext i32 %67 to i64, !dbg !9788
  %arrayidx141 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom140, !dbg !9788
  %68 = load i8, i8* %arrayidx141, align 1, !dbg !9788
  %conv142 = zext i8 %68 to i16, !dbg !9788
  %conv143 = zext i16 %conv142 to i32, !dbg !9788
  %mul = mul nsw i32 %conv143, 8, !dbg !9788
  %conv144 = trunc i32 %mul to i16, !dbg !9788
  %conv145 = zext i16 %conv144 to i32, !dbg !9788
  %sub146 = sub nsw i32 %conv145, 1, !dbg !9788
  %conv147 = sext i32 %sub146 to i64, !dbg !9788
  %call148 = call %union.tree_node* @size_int_kind(i64 %conv147, i32 0), !dbg !9788
  %call149 = call %struct.rtx_def* @expand_shift(i32 84, i32 %65, %struct.rtx_def* %66, %union.tree_node* %call148, %struct.rtx_def* null, i32 0), !dbg !9789
  store %struct.rtx_def* %call149, %struct.rtx_def** %extended, align 8, !dbg !9785
  %69 = load i32, i32* %mode.addr, align 4, !dbg !9790
  %70 = load %struct.rtx_def*, %struct.rtx_def** %extended, align 8, !dbg !9791
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9792
  %72 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9793
  %call150 = call %struct.rtx_def* @expand_binop(i32 %69, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72, i32 0, i32 3), !dbg !9794
  store %struct.rtx_def* %call150, %struct.rtx_def** %temp, align 8, !dbg !9795
  %73 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9796
  %cmp151 = icmp ne %struct.rtx_def* %73, null, !dbg !9798
  br i1 %cmp151, label %if.then153, label %if.end157, !dbg !9799

if.then153:                                       ; preds = %if.then139
  %74 = load i32, i32* %mode.addr, align 4, !dbg !9800
  %75 = load i32, i32* %result_unsignedp.addr, align 4, !dbg !9801
  %tobool154 = icmp ne i32 %75, 0, !dbg !9801
  %76 = zext i1 %tobool154 to i64, !dbg !9801
  %cond155 = select i1 %tobool154, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15), !dbg !9801
  %77 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9802
  %78 = load %struct.rtx_def*, %struct.rtx_def** %extended, align 8, !dbg !9803
  %79 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9804
  %call156 = call %struct.rtx_def* @expand_binop(i32 %74, %struct.optab_d* %cond155, %struct.rtx_def* %77, %struct.rtx_def* %78, %struct.rtx_def* %79, i32 0, i32 3), !dbg !9805
  store %struct.rtx_def* %call156, %struct.rtx_def** %temp, align 8, !dbg !9806
  br label %if.end157, !dbg !9807

if.end157:                                        ; preds = %if.then153, %if.then139
  %80 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9808
  %cmp158 = icmp ne %struct.rtx_def* %80, null, !dbg !9810
  br i1 %cmp158, label %if.then160, label %if.end161, !dbg !9811

if.then160:                                       ; preds = %if.end157
  %81 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9812
  store %struct.rtx_def* %81, %struct.rtx_def** %retval, align 8, !dbg !9813
  br label %return, !dbg !9813

if.end161:                                        ; preds = %if.end157
  br label %if.end162, !dbg !9814

if.end162:                                        ; preds = %if.end161, %cond.end135, %if.end124
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9815
  br label %return, !dbg !9815

return:                                           ; preds = %if.end162, %if.then160, %if.then122, %if.then14, %if.then2
  %82 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9816
  ret %struct.rtx_def* %82, !dbg !9816
}

declare dso_local %struct.rtx_def* @expand_shift(i32, i32, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, i32) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_abs(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target, i32 %result_unsignedp, i32 %safe) #0 !dbg !9817 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %result_unsignedp.addr = alloca i32, align 4
  %safe.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9820, metadata !DIExpression()), !dbg !9821
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9822, metadata !DIExpression()), !dbg !9823
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9824, metadata !DIExpression()), !dbg !9825
  store i32 %result_unsignedp, i32* %result_unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %result_unsignedp.addr, metadata !9826, metadata !DIExpression()), !dbg !9827
  store i32 %safe, i32* %safe.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %safe.addr, metadata !9828, metadata !DIExpression()), !dbg !9829
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9830, metadata !DIExpression()), !dbg !9831
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !9832, metadata !DIExpression()), !dbg !9833
  %0 = load i32, i32* @flag_trapv, align 4, !dbg !9834
  %tobool = icmp ne i32 %0, 0, !dbg !9834
  br i1 %tobool, label %if.end, label %if.then, !dbg !9836

if.then:                                          ; preds = %entry
  store i32 1, i32* %result_unsignedp.addr, align 4, !dbg !9837
  br label %if.end, !dbg !9838

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !9839
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9840
  %3 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9841
  %4 = load i32, i32* %result_unsignedp.addr, align 4, !dbg !9842
  %call = call %struct.rtx_def* @expand_abs_nojump(i32 %1, %struct.rtx_def* %2, %struct.rtx_def* %3, i32 %4), !dbg !9843
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !9844
  %5 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9845
  %cmp = icmp ne %struct.rtx_def* %5, null, !dbg !9847
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !9848

if.then1:                                         ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9849
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !9850
  br label %return, !dbg !9850

if.end2:                                          ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9851
  %8 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9853
  %cmp3 = icmp eq %struct.rtx_def* %7, %8, !dbg !9854
  br i1 %cmp3, label %land.lhs.true, label %if.end9, !dbg !9855

land.lhs.true:                                    ; preds = %if.end2
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9856
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !9856
  %bf.load = load i32, i32* %10, align 8, !dbg !9856
  %bf.clear = and i32 %bf.load, 65535, !dbg !9856
  %cmp4 = icmp eq i32 %bf.clear, 37, !dbg !9856
  br i1 %cmp4, label %land.lhs.true5, label %if.end9, !dbg !9857

land.lhs.true5:                                   ; preds = %land.lhs.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9858
  %call6 = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !9858
  %cmp7 = icmp uge i32 %call6, 53, !dbg !9859
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !9860

if.then8:                                         ; preds = %land.lhs.true5
  store i32 1, i32* %safe.addr, align 4, !dbg !9861
  br label %if.end9, !dbg !9862

if.end9:                                          ; preds = %if.then8, %land.lhs.true5, %land.lhs.true, %if.end2
  %call10 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9863
  store %struct.rtx_def* %call10, %struct.rtx_def** %op1, align 8, !dbg !9864
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9865
  %cmp11 = icmp eq %struct.rtx_def* %12, null, !dbg !9867
  br i1 %cmp11, label %if.then33, label %lor.lhs.false, !dbg !9868

lor.lhs.false:                                    ; preds = %if.end9
  %13 = load i32, i32* %safe.addr, align 4, !dbg !9869
  %tobool12 = icmp ne i32 %13, 0, !dbg !9869
  br i1 %tobool12, label %lor.lhs.false13, label %if.then33, !dbg !9870

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9871
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9871
  %bf.load14 = load i32, i32* %15, align 8, !dbg !9871
  %bf.lshr = lshr i32 %bf.load14, 16, !dbg !9871
  %bf.clear15 = and i32 %bf.lshr, 255, !dbg !9871
  %16 = load i32, i32* %mode.addr, align 4, !dbg !9872
  %cmp16 = icmp ne i32 %bf.clear15, %16, !dbg !9873
  br i1 %cmp16, label %if.then33, label %lor.lhs.false17, !dbg !9874

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %17 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9875
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !9875
  %bf.load18 = load i32, i32* %18, align 8, !dbg !9875
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !9875
  %cmp20 = icmp eq i32 %bf.clear19, 43, !dbg !9875
  br i1 %cmp20, label %land.lhs.true21, label %lor.lhs.false26, !dbg !9876

land.lhs.true21:                                  ; preds = %lor.lhs.false17
  %19 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9877
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !9877
  %bf.load22 = load i32, i32* %20, align 8, !dbg !9877
  %bf.lshr23 = lshr i32 %bf.load22, 27, !dbg !9877
  %bf.clear24 = and i32 %bf.lshr23, 1, !dbg !9877
  %tobool25 = icmp ne i32 %bf.clear24, 0, !dbg !9877
  br i1 %tobool25, label %if.then33, label %lor.lhs.false26, !dbg !9878

lor.lhs.false26:                                  ; preds = %land.lhs.true21, %lor.lhs.false17
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9879
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !9879
  %bf.load27 = load i32, i32* %22, align 8, !dbg !9879
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !9879
  %cmp29 = icmp eq i32 %bf.clear28, 37, !dbg !9879
  br i1 %cmp29, label %land.lhs.true30, label %if.end35, !dbg !9880

land.lhs.true30:                                  ; preds = %lor.lhs.false26
  %23 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9881
  %call31 = call i32 @rhs_regno(%struct.rtx_def* %23), !dbg !9881
  %cmp32 = icmp ult i32 %call31, 53, !dbg !9882
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !9883

if.then33:                                        ; preds = %land.lhs.true30, %land.lhs.true21, %lor.lhs.false13, %lor.lhs.false, %if.end9
  %24 = load i32, i32* %mode.addr, align 4, !dbg !9884
  %call34 = call %struct.rtx_def* @gen_reg_rtx(i32 %24), !dbg !9885
  store %struct.rtx_def* %call34, %struct.rtx_def** %target.addr, align 8, !dbg !9886
  br label %if.end35, !dbg !9887

if.end35:                                         ; preds = %if.then33, %land.lhs.true30, %lor.lhs.false26
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9888
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9889
  %call36 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %25, %struct.rtx_def* %26), !dbg !9890
  %27 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9891
  %add = add nsw i32 %27, 1, !dbg !9891
  store i32 %add, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9891
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9892
  %29 = load i32, i32* %mode.addr, align 4, !dbg !9893
  %idxprom = sext i32 %29 to i64, !dbg !9893
  %arrayidx = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom, !dbg !9893
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !9893
  %31 = load i32, i32* %mode.addr, align 4, !dbg !9894
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !9895
  call void @do_compare_rtx_and_jump(%struct.rtx_def* %28, %struct.rtx_def* %30, i32 82, i32 0, i32 %31, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* %32, i32 -1), !dbg !9896
  %33 = load i32, i32* %mode.addr, align 4, !dbg !9897
  %34 = load i32, i32* %result_unsignedp.addr, align 4, !dbg !9898
  %tobool37 = icmp ne i32 %34, 0, !dbg !9898
  %35 = zext i1 %tobool37 to i64, !dbg !9898
  %cond = select i1 %tobool37, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), !dbg !9898
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9899
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9900
  %call38 = call %struct.rtx_def* @expand_unop(i32 %33, %struct.optab_d* %cond, %struct.rtx_def* %36, %struct.rtx_def* %37, i32 0), !dbg !9901
  store %struct.rtx_def* %call38, %struct.rtx_def** %op0.addr, align 8, !dbg !9902
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9903
  %39 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9905
  %cmp39 = icmp ne %struct.rtx_def* %38, %39, !dbg !9906
  br i1 %cmp39, label %if.then40, label %if.end42, !dbg !9907

if.then40:                                        ; preds = %if.end35
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9908
  %41 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9909
  %call41 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %40, %struct.rtx_def* %41), !dbg !9910
  br label %if.end42, !dbg !9910

if.end42:                                         ; preds = %if.then40, %if.end35
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !9911
  %call43 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %42), !dbg !9912
  %43 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9913
  %sub = sub nsw i32 %43, 1, !dbg !9913
  store i32 %sub, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9913
  %44 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9914
  store %struct.rtx_def* %44, %struct.rtx_def** %retval, align 8, !dbg !9915
  br label %return, !dbg !9915

return:                                           ; preds = %if.end42, %if.then1
  %45 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9916
  ret %struct.rtx_def* %45, !dbg !9916
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !9917 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9923, metadata !DIExpression()), !dbg !9924
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9925
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9925
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9925
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9925
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9925
  %1 = load i32, i32* %rt_uint, align 8, !dbg !9925
  ret i32 %1, !dbg !9926
}

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

declare dso_local void @do_compare_rtx_and_jump(%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_one_cmpl_abs_nojump(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %target) #0 !dbg !9927 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %extended = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9928, metadata !DIExpression()), !dbg !9929
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !9930, metadata !DIExpression()), !dbg !9931
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9932, metadata !DIExpression()), !dbg !9933
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9934, metadata !DIExpression()), !dbg !9935
  %0 = load i32, i32* %mode.addr, align 4, !dbg !9936
  %idxprom = zext i32 %0 to i64, !dbg !9936
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !9936
  %1 = load i8, i8* %arrayidx, align 1, !dbg !9936
  %conv = zext i8 %1 to i32, !dbg !9936
  %cmp = icmp eq i32 %conv, 8, !dbg !9936
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9936

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9936
  %idxprom2 = zext i32 %2 to i64, !dbg !9936
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !9936
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !9936
  %conv4 = zext i8 %3 to i32, !dbg !9936
  %cmp5 = icmp eq i32 %conv4, 9, !dbg !9936
  br i1 %cmp5, label %if.then, label %lor.lhs.false7, !dbg !9936

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !9936
  %idxprom8 = zext i32 %4 to i64, !dbg !9936
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !9936
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !9936
  %conv10 = zext i8 %5 to i32, !dbg !9936
  %cmp11 = icmp eq i32 %conv10, 11, !dbg !9936
  br i1 %cmp11, label %if.then, label %lor.lhs.false13, !dbg !9936

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !9936
  %idxprom14 = zext i32 %6 to i64, !dbg !9936
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !9936
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !9936
  %conv16 = zext i8 %7 to i32, !dbg !9936
  %cmp17 = icmp eq i32 %conv16, 17, !dbg !9936
  br i1 %cmp17, label %if.then, label %if.end, !dbg !9938

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9939
  br label %return, !dbg !9939

if.end:                                           ; preds = %lor.lhs.false13
  %8 = load i32, i32* %mode.addr, align 4, !dbg !9940
  %idxprom19 = sext i32 %8 to i64, !dbg !9940
  %arrayidx20 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55, i32 4), i64 0, i64 %idxprom19, !dbg !9940
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx20, i32 0, i32 0, !dbg !9942
  %9 = load i32, i32* %insn_code, align 4, !dbg !9942
  %cmp21 = icmp ne i32 %9, 2956, !dbg !9943
  br i1 %cmp21, label %if.then23, label %if.end34, !dbg !9944

if.then23:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9945, metadata !DIExpression()), !dbg !9947
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !9948
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9947
  %10 = load i32, i32* %mode.addr, align 4, !dbg !9949
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9950
  %call24 = call %struct.rtx_def* @expand_unop(i32 %10, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), %struct.rtx_def* %11, %struct.rtx_def* null, i32 0), !dbg !9951
  store %struct.rtx_def* %call24, %struct.rtx_def** %temp, align 8, !dbg !9952
  %12 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9953
  %cmp25 = icmp ne %struct.rtx_def* %12, null, !dbg !9955
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !9956

if.then27:                                        ; preds = %if.then23
  %13 = load i32, i32* %mode.addr, align 4, !dbg !9957
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9958
  %15 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9959
  %16 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9960
  %call28 = call %struct.rtx_def* @expand_binop(i32 %13, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55), %struct.rtx_def* %14, %struct.rtx_def* %15, %struct.rtx_def* %16, i32 0, i32 2), !dbg !9961
  store %struct.rtx_def* %call28, %struct.rtx_def** %temp, align 8, !dbg !9962
  br label %if.end29, !dbg !9963

if.end29:                                         ; preds = %if.then27, %if.then23
  %17 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9964
  %cmp30 = icmp ne %struct.rtx_def* %17, null, !dbg !9966
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !9967

if.then32:                                        ; preds = %if.end29
  %18 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9968
  store %struct.rtx_def* %18, %struct.rtx_def** %retval, align 8, !dbg !9969
  br label %return, !dbg !9969

if.end33:                                         ; preds = %if.end29
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9970
  call void @delete_insns_since(%struct.rtx_def* %19), !dbg !9971
  br label %if.end34, !dbg !9972

if.end34:                                         ; preds = %if.end33, %if.end
  %20 = load i32, i32* %mode.addr, align 4, !dbg !9973
  %idxprom35 = zext i32 %20 to i64, !dbg !9973
  %arrayidx36 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom35, !dbg !9973
  %21 = load i8, i8* %arrayidx36, align 1, !dbg !9973
  %conv37 = zext i8 %21 to i32, !dbg !9973
  %cmp38 = icmp eq i32 %conv37, 2, !dbg !9975
  br i1 %cmp38, label %land.lhs.true, label %if.end58, !dbg !9976

land.lhs.true:                                    ; preds = %if.end34
  %call40 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !9977
  %tobool = icmp ne i8 %call40, 0, !dbg !9977
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9977

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end, !dbg !9977

cond.false:                                       ; preds = %land.lhs.true
  %22 = load i32, i32* @ix86_branch_cost, align 4, !dbg !9977
  br label %cond.end, !dbg !9977

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %22, %cond.false ], !dbg !9977
  %cmp41 = icmp sge i32 %cond, 2, !dbg !9978
  br i1 %cmp41, label %if.then43, label %if.end58, !dbg !9979

if.then43:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %extended, metadata !9980, metadata !DIExpression()), !dbg !9982
  %23 = load i32, i32* %mode.addr, align 4, !dbg !9983
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9984
  %25 = load i32, i32* %mode.addr, align 4, !dbg !9985
  %idxprom44 = zext i32 %25 to i64, !dbg !9985
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom44, !dbg !9985
  %26 = load i8, i8* %arrayidx45, align 1, !dbg !9985
  %conv46 = zext i8 %26 to i16, !dbg !9985
  %conv47 = zext i16 %conv46 to i32, !dbg !9985
  %mul = mul nsw i32 %conv47, 8, !dbg !9985
  %conv48 = trunc i32 %mul to i16, !dbg !9985
  %conv49 = zext i16 %conv48 to i32, !dbg !9985
  %sub = sub nsw i32 %conv49, 1, !dbg !9985
  %conv50 = sext i32 %sub to i64, !dbg !9985
  %call51 = call %union.tree_node* @size_int_kind(i64 %conv50, i32 0), !dbg !9985
  %call52 = call %struct.rtx_def* @expand_shift(i32 84, i32 %23, %struct.rtx_def* %24, %union.tree_node* %call51, %struct.rtx_def* null, i32 0), !dbg !9986
  store %struct.rtx_def* %call52, %struct.rtx_def** %extended, align 8, !dbg !9982
  %27 = load i32, i32* %mode.addr, align 4, !dbg !9987
  %28 = load %struct.rtx_def*, %struct.rtx_def** %extended, align 8, !dbg !9988
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !9989
  %30 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9990
  %call53 = call %struct.rtx_def* @expand_binop(i32 %27, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %30, i32 0, i32 3), !dbg !9991
  store %struct.rtx_def* %call53, %struct.rtx_def** %temp, align 8, !dbg !9992
  %31 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9993
  %cmp54 = icmp ne %struct.rtx_def* %31, null, !dbg !9995
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !9996

if.then56:                                        ; preds = %if.then43
  %32 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9997
  store %struct.rtx_def* %32, %struct.rtx_def** %retval, align 8, !dbg !9998
  br label %return, !dbg !9998

if.end57:                                         ; preds = %if.then43
  br label %if.end58, !dbg !9999

if.end58:                                         ; preds = %if.end57, %cond.end, %if.end34
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10000
  br label %return, !dbg !10000

return:                                           ; preds = %if.end58, %if.then56, %if.then32, %if.then
  %33 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10001
  ret %struct.rtx_def* %33, !dbg !10001
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_copysign(%struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target) #0 !dbg !10002 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %fmt = alloca %struct.real_format*, align 8
  %op0_is_abs = alloca i8, align 1
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10005, metadata !DIExpression()), !dbg !10006
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !10007, metadata !DIExpression()), !dbg !10008
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !10009, metadata !DIExpression()), !dbg !10010
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !10011, metadata !DIExpression()), !dbg !10012
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10013
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !10013
  %bf.load = load i32, i32* %1, align 8, !dbg !10013
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10013
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10013
  store i32 %bf.clear, i32* %mode, align 4, !dbg !10012
  call void @llvm.dbg.declare(metadata %struct.real_format** %fmt, metadata !10014, metadata !DIExpression()), !dbg !10015
  call void @llvm.dbg.declare(metadata i8* %op0_is_abs, metadata !10016, metadata !DIExpression()), !dbg !10017
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !10018, metadata !DIExpression()), !dbg !10019
  %2 = load i32, i32* %mode, align 4, !dbg !10020
  %idxprom = zext i32 %2 to i64, !dbg !10020
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !10020
  %3 = load i8, i8* %arrayidx, align 1, !dbg !10020
  %conv = zext i8 %3 to i32, !dbg !10020
  %cmp = icmp eq i32 %conv, 8, !dbg !10020
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !10020

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %mode, align 4, !dbg !10020
  %idxprom2 = zext i32 %4 to i64, !dbg !10020
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !10020
  %5 = load i8, i8* %arrayidx3, align 1, !dbg !10020
  %conv4 = zext i8 %5 to i32, !dbg !10020
  %cmp5 = icmp eq i32 %conv4, 9, !dbg !10020
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !10020

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3749, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10020
  br label %cond.end, !dbg !10020

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !10020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10020
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10021
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !10021
  %bf.load7 = load i32, i32* %7, align 8, !dbg !10021
  %bf.lshr8 = lshr i32 %bf.load7, 16, !dbg !10021
  %bf.clear9 = and i32 %bf.lshr8, 255, !dbg !10021
  %8 = load i32, i32* %mode, align 4, !dbg !10021
  %cmp10 = icmp eq i32 %bf.clear9, %8, !dbg !10021
  br i1 %cmp10, label %cond.false13, label %cond.true12, !dbg !10021

cond.true12:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3750, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10021
  br label %cond.end14, !dbg !10021

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !10021

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !10021
  %9 = load i32, i32* %mode, align 4, !dbg !10022
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10023
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10024
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10025
  %call = call %struct.rtx_def* @expand_binop(i32 %9, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 102), %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.rtx_def* %12, i32 0, i32 0), !dbg !10026
  store %struct.rtx_def* %call, %struct.rtx_def** %temp, align 8, !dbg !10027
  %13 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10028
  %tobool = icmp ne %struct.rtx_def* %13, null, !dbg !10028
  br i1 %tobool, label %if.then, label %if.end, !dbg !10030

if.then:                                          ; preds = %cond.end14
  %14 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10031
  store %struct.rtx_def* %14, %struct.rtx_def** %retval, align 8, !dbg !10032
  br label %return, !dbg !10032

if.end:                                           ; preds = %cond.end14
  %15 = load i32, i32* %mode, align 4, !dbg !10033
  %idxprom16 = zext i32 %15 to i64, !dbg !10033
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom16, !dbg !10033
  %16 = load i8, i8* %arrayidx17, align 1, !dbg !10033
  %conv18 = zext i8 %16 to i32, !dbg !10033
  %cmp19 = icmp eq i32 %conv18, 9, !dbg !10033
  br i1 %cmp19, label %cond.true21, label %cond.false22, !dbg !10033

cond.true21:                                      ; preds = %if.end
  %17 = load i32, i32* %mode, align 4, !dbg !10033
  %sub = sub i32 %17, 42, !dbg !10033
  %add = add i32 %sub, 4, !dbg !10033
  br label %cond.end24, !dbg !10033

cond.false22:                                     ; preds = %if.end
  %18 = load i32, i32* %mode, align 4, !dbg !10033
  %sub23 = sub i32 %18, 38, !dbg !10033
  br label %cond.end24, !dbg !10033

cond.end24:                                       ; preds = %cond.false22, %cond.true21
  %cond25 = phi i32 [ %add, %cond.true21 ], [ %sub23, %cond.false22 ], !dbg !10033
  %idxprom26 = zext i32 %cond25 to i64, !dbg !10033
  %arrayidx27 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom26, !dbg !10033
  %19 = load %struct.real_format*, %struct.real_format** %arrayidx27, align 8, !dbg !10033
  store %struct.real_format* %19, %struct.real_format** %fmt, align 8, !dbg !10034
  %20 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !10035
  %cmp28 = icmp eq %struct.real_format* %20, null, !dbg !10037
  br i1 %cmp28, label %if.then32, label %lor.lhs.false30, !dbg !10038

lor.lhs.false30:                                  ; preds = %cond.end24
  %21 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !10039
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %21, i32 0, i32 14, !dbg !10040
  %22 = load i8, i8* %has_signed_zero, align 1, !dbg !10040
  %tobool31 = icmp ne i8 %22, 0, !dbg !10039
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !10041

if.then32:                                        ; preds = %lor.lhs.false30, %cond.end24
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10042
  br label %return, !dbg !10042

if.end33:                                         ; preds = %lor.lhs.false30
  store i8 0, i8* %op0_is_abs, align 1, !dbg !10043
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10044
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !10044
  %bf.load34 = load i32, i32* %24, align 8, !dbg !10044
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !10044
  %cmp36 = icmp eq i32 %bf.clear35, 32, !dbg !10046
  br i1 %cmp36, label %if.then38, label %if.end44, !dbg !10047

if.then38:                                        ; preds = %if.end33
  %25 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10048
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !10048
  %rv = bitcast %union.u* %u to %struct.real_value*, !dbg !10048
  %call39 = call zeroext i8 @real_isneg(%struct.real_value* %rv), !dbg !10051
  %tobool40 = icmp ne i8 %call39, 0, !dbg !10051
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !10052

if.then41:                                        ; preds = %if.then38
  %26 = load i32, i32* %mode, align 4, !dbg !10053
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10054
  %28 = load i32, i32* %mode, align 4, !dbg !10055
  %call42 = call %struct.rtx_def* @simplify_unary_operation(i32 111, i32 %26, %struct.rtx_def* %27, i32 %28), !dbg !10056
  store %struct.rtx_def* %call42, %struct.rtx_def** %op0.addr, align 8, !dbg !10057
  br label %if.end43, !dbg !10058

if.end43:                                         ; preds = %if.then41, %if.then38
  store i8 1, i8* %op0_is_abs, align 1, !dbg !10059
  br label %if.end44, !dbg !10060

if.end44:                                         ; preds = %if.end43, %if.end33
  %29 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !10061
  %signbit_ro = getelementptr inbounds %struct.real_format, %struct.real_format* %29, i32 0, i32 7, !dbg !10063
  %30 = load i32, i32* %signbit_ro, align 4, !dbg !10063
  %cmp45 = icmp sge i32 %30, 0, !dbg !10064
  br i1 %cmp45, label %land.lhs.true, label %if.end68, !dbg !10065

land.lhs.true:                                    ; preds = %if.end44
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10066
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !10066
  %bf.load47 = load i32, i32* %32, align 8, !dbg !10066
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !10066
  %cmp49 = icmp eq i32 %bf.clear48, 32, !dbg !10067
  br i1 %cmp49, label %if.then62, label %lor.lhs.false51, !dbg !10068

lor.lhs.false51:                                  ; preds = %land.lhs.true
  %33 = load i32, i32* %mode, align 4, !dbg !10069
  %idxprom52 = sext i32 %33 to i64, !dbg !10069
  %arrayidx53 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64, i32 4), i64 0, i64 %idxprom52, !dbg !10069
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx53, i32 0, i32 0, !dbg !10070
  %34 = load i32, i32* %insn_code, align 4, !dbg !10070
  %cmp54 = icmp ne i32 %34, 2956, !dbg !10071
  br i1 %cmp54, label %land.lhs.true56, label %if.end68, !dbg !10072

land.lhs.true56:                                  ; preds = %lor.lhs.false51
  %35 = load i32, i32* %mode, align 4, !dbg !10073
  %idxprom57 = sext i32 %35 to i64, !dbg !10073
  %arrayidx58 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66, i32 4), i64 0, i64 %idxprom57, !dbg !10073
  %insn_code59 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx58, i32 0, i32 0, !dbg !10074
  %36 = load i32, i32* %insn_code59, align 4, !dbg !10074
  %cmp60 = icmp ne i32 %36, 2956, !dbg !10075
  br i1 %cmp60, label %if.then62, label %if.end68, !dbg !10076

if.then62:                                        ; preds = %land.lhs.true56, %land.lhs.true
  %37 = load i32, i32* %mode, align 4, !dbg !10077
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10079
  %39 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10080
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10081
  %41 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !10082
  %signbit_ro63 = getelementptr inbounds %struct.real_format, %struct.real_format* %41, i32 0, i32 7, !dbg !10083
  %42 = load i32, i32* %signbit_ro63, align 4, !dbg !10083
  %43 = load i8, i8* %op0_is_abs, align 1, !dbg !10084
  %call64 = call %struct.rtx_def* @expand_copysign_absneg(i32 %37, %struct.rtx_def* %38, %struct.rtx_def* %39, %struct.rtx_def* %40, i32 %42, i8 zeroext %43), !dbg !10085
  store %struct.rtx_def* %call64, %struct.rtx_def** %temp, align 8, !dbg !10086
  %44 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10087
  %tobool65 = icmp ne %struct.rtx_def* %44, null, !dbg !10087
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !10089

if.then66:                                        ; preds = %if.then62
  %45 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10090
  store %struct.rtx_def* %45, %struct.rtx_def** %retval, align 8, !dbg !10091
  br label %return, !dbg !10091

if.end67:                                         ; preds = %if.then62
  br label %if.end68, !dbg !10092

if.end68:                                         ; preds = %if.end67, %land.lhs.true56, %lor.lhs.false51, %if.end44
  %46 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !10093
  %signbit_rw = getelementptr inbounds %struct.real_format, %struct.real_format* %46, i32 0, i32 8, !dbg !10095
  %47 = load i32, i32* %signbit_rw, align 8, !dbg !10095
  %cmp69 = icmp slt i32 %47, 0, !dbg !10096
  br i1 %cmp69, label %if.then71, label %if.end72, !dbg !10097

if.then71:                                        ; preds = %if.end68
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10098
  br label %return, !dbg !10098

if.end72:                                         ; preds = %if.end68
  %48 = load i32, i32* %mode, align 4, !dbg !10099
  %49 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10100
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10101
  %51 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10102
  %52 = load %struct.real_format*, %struct.real_format** %fmt, align 8, !dbg !10103
  %signbit_rw73 = getelementptr inbounds %struct.real_format, %struct.real_format* %52, i32 0, i32 8, !dbg !10104
  %53 = load i32, i32* %signbit_rw73, align 8, !dbg !10104
  %54 = load i8, i8* %op0_is_abs, align 1, !dbg !10105
  %call74 = call %struct.rtx_def* @expand_copysign_bit(i32 %48, %struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51, i32 %53, i8 zeroext %54), !dbg !10106
  store %struct.rtx_def* %call74, %struct.rtx_def** %retval, align 8, !dbg !10107
  br label %return, !dbg !10107

return:                                           ; preds = %if.end72, %if.then71, %if.then66, %if.then32, %if.then
  %55 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10108
  ret %struct.rtx_def* %55, !dbg !10108
}

declare dso_local zeroext i8 @real_isneg(%struct.real_value*) #2

declare dso_local %struct.rtx_def* @simplify_unary_operation(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_copysign_absneg(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %bitpos, i8 zeroext %op0_is_abs) #0 !dbg !10109 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %bitpos.addr = alloca i32, align 4
  %op0_is_abs.addr = alloca i8, align 1
  %imode = alloca i32, align 4
  %icode = alloca i32, align 4
  %sign = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  %word = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10112, metadata !DIExpression()), !dbg !10113
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10114, metadata !DIExpression()), !dbg !10115
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !10116, metadata !DIExpression()), !dbg !10117
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !10118, metadata !DIExpression()), !dbg !10119
  store i32 %bitpos, i32* %bitpos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.addr, metadata !10120, metadata !DIExpression()), !dbg !10121
  store i8 %op0_is_abs, i8* %op0_is_abs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %op0_is_abs.addr, metadata !10122, metadata !DIExpression()), !dbg !10123
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !10124, metadata !DIExpression()), !dbg !10125
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !10126, metadata !DIExpression()), !dbg !10127
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sign, metadata !10128, metadata !DIExpression()), !dbg !10129
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !10130, metadata !DIExpression()), !dbg !10131
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10132
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10134
  %cmp = icmp eq %struct.rtx_def* %0, %1, !dbg !10135
  br i1 %cmp, label %if.then, label %if.end, !dbg !10136

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !10137
  br label %if.end, !dbg !10138

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !10139
  %idxprom = sext i32 %2 to i64, !dbg !10140
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 103, i32 4), i64 0, i64 %idxprom, !dbg !10140
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !10141
  %3 = load i32, i32* %insn_code, align 4, !dbg !10141
  store i32 %3, i32* %icode, align 4, !dbg !10142
  %4 = load i32, i32* %icode, align 4, !dbg !10143
  %cmp1 = icmp ne i32 %4, 2956, !dbg !10145
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !10146

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %icode, align 4, !dbg !10147
  %idxprom3 = sext i32 %5 to i64, !dbg !10149
  %arrayidx4 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom3, !dbg !10149
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx4, i32 0, i32 3, !dbg !10150
  %6 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !10150
  %arrayidx5 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %6, i64 0, !dbg !10149
  %mode6 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx5, i32 0, i32 2, !dbg !10151
  %bf.load = load i16, i16* %mode6, align 8, !dbg !10151
  %bf.cast = zext i16 %bf.load to i32, !dbg !10151
  store i32 %bf.cast, i32* %imode, align 4, !dbg !10152
  %7 = load i32, i32* %imode, align 4, !dbg !10153
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %7), !dbg !10154
  store %struct.rtx_def* %call, %struct.rtx_def** %sign, align 8, !dbg !10155
  %8 = load i32, i32* %icode, align 4, !dbg !10156
  %9 = load %struct.rtx_def*, %struct.rtx_def** %sign, align 8, !dbg !10157
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10158
  call void @emit_unop_insn(i32 %8, %struct.rtx_def* %9, %struct.rtx_def* %10, i32 0), !dbg !10159
  br label %if.end32, !dbg !10160

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !10161, metadata !DIExpression()), !dbg !10163
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !10164, metadata !DIExpression()), !dbg !10165
  %11 = load i32, i32* %mode.addr, align 4, !dbg !10166
  %idxprom7 = zext i32 %11 to i64, !dbg !10166
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom7, !dbg !10166
  %12 = load i8, i8* %arrayidx8, align 1, !dbg !10166
  %conv = zext i8 %12 to i16, !dbg !10166
  %conv9 = zext i16 %conv to i32, !dbg !10166
  %cmp10 = icmp sle i32 %conv9, 4, !dbg !10168
  br i1 %cmp10, label %if.then12, label %if.else19, !dbg !10169

if.then12:                                        ; preds = %if.else
  %13 = load i32, i32* %mode.addr, align 4, !dbg !10170
  %call13 = call i32 @int_mode_for_mode(i32 %13), !dbg !10172
  store i32 %call13, i32* %imode, align 4, !dbg !10173
  %14 = load i32, i32* %imode, align 4, !dbg !10174
  %cmp14 = icmp eq i32 %14, 1, !dbg !10176
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !10177

if.then16:                                        ; preds = %if.then12
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10178
  br label %return, !dbg !10178

if.end17:                                         ; preds = %if.then12
  %15 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !10179
  %16 = load i32, i32* %imode, align 4, !dbg !10180
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10181
  %call18 = call %struct.rtx_def* %15(i32 %16, %struct.rtx_def* %17), !dbg !10179
  store %struct.rtx_def* %call18, %struct.rtx_def** %op1.addr, align 8, !dbg !10182
  br label %if.end21, !dbg !10183

if.else19:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %word, metadata !10184, metadata !DIExpression()), !dbg !10186
  %18 = load i32, i32* @word_mode, align 4, !dbg !10187
  store i32 %18, i32* %imode, align 4, !dbg !10188
  %19 = load i32, i32* %bitpos.addr, align 4, !dbg !10189
  %div = sdiv i32 %19, 32, !dbg !10191
  store i32 %div, i32* %word, align 4, !dbg !10192
  %20 = load i32, i32* %bitpos.addr, align 4, !dbg !10193
  %rem = srem i32 %20, 32, !dbg !10194
  store i32 %rem, i32* %bitpos.addr, align 4, !dbg !10195
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10196
  %22 = load i32, i32* %word, align 4, !dbg !10197
  %23 = load i32, i32* %mode.addr, align 4, !dbg !10198
  %call20 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %21, i32 %22, i32 %23), !dbg !10199
  store %struct.rtx_def* %call20, %struct.rtx_def** %op1.addr, align 8, !dbg !10200
  br label %if.end21

if.end21:                                         ; preds = %if.else19, %if.end17
  %24 = load i32, i32* %bitpos.addr, align 4, !dbg !10201
  %cmp22 = icmp slt i32 %24, 64, !dbg !10203
  br i1 %cmp22, label %if.then24, label %if.else25, !dbg !10204

if.then24:                                        ; preds = %if.end21
  store i64 0, i64* %hi, align 8, !dbg !10205
  %25 = load i32, i32* %bitpos.addr, align 4, !dbg !10207
  %sh_prom = zext i32 %25 to i64, !dbg !10208
  %shl = shl i64 1, %sh_prom, !dbg !10208
  store i64 %shl, i64* %lo, align 8, !dbg !10209
  br label %if.end28, !dbg !10210

if.else25:                                        ; preds = %if.end21
  %26 = load i32, i32* %bitpos.addr, align 4, !dbg !10211
  %sub = sub nsw i32 %26, 64, !dbg !10213
  %sh_prom26 = zext i32 %sub to i64, !dbg !10214
  %shl27 = shl i64 1, %sh_prom26, !dbg !10214
  store i64 %shl27, i64* %hi, align 8, !dbg !10215
  store i64 0, i64* %lo, align 8, !dbg !10216
  br label %if.end28

if.end28:                                         ; preds = %if.else25, %if.then24
  %27 = load i32, i32* %imode, align 4, !dbg !10217
  %call29 = call %struct.rtx_def* @gen_reg_rtx(i32 %27), !dbg !10218
  store %struct.rtx_def* %call29, %struct.rtx_def** %sign, align 8, !dbg !10219
  %28 = load i32, i32* %imode, align 4, !dbg !10220
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10221
  %30 = load i64, i64* %lo, align 8, !dbg !10222
  %31 = load i64, i64* %hi, align 8, !dbg !10223
  %32 = load i32, i32* %imode, align 4, !dbg !10224
  %call30 = call %struct.rtx_def* @immed_double_const(i64 %30, i64 %31, i32 %32), !dbg !10225
  %call31 = call %struct.rtx_def* @expand_binop(i32 %28, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %29, %struct.rtx_def* %call30, %struct.rtx_def* null, i32 1, i32 3), !dbg !10226
  store %struct.rtx_def* %call31, %struct.rtx_def** %sign, align 8, !dbg !10227
  br label %if.end32

if.end32:                                         ; preds = %if.end28, %if.then2
  %33 = load i8, i8* %op0_is_abs.addr, align 1, !dbg !10228
  %tobool = icmp ne i8 %33, 0, !dbg !10228
  br i1 %tobool, label %if.else39, label %if.then33, !dbg !10230

if.then33:                                        ; preds = %if.end32
  %34 = load i32, i32* %mode.addr, align 4, !dbg !10231
  %35 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10233
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10234
  %call34 = call %struct.rtx_def* @expand_unop(i32 %34, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66), %struct.rtx_def* %35, %struct.rtx_def* %36, i32 0), !dbg !10235
  store %struct.rtx_def* %call34, %struct.rtx_def** %op0.addr, align 8, !dbg !10236
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10237
  %cmp35 = icmp eq %struct.rtx_def* %37, null, !dbg !10239
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !10240

if.then37:                                        ; preds = %if.then33
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10241
  br label %return, !dbg !10241

if.end38:                                         ; preds = %if.then33
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10242
  store %struct.rtx_def* %38, %struct.rtx_def** %target.addr, align 8, !dbg !10243
  br label %if.end47, !dbg !10244

if.else39:                                        ; preds = %if.end32
  %39 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10245
  %cmp40 = icmp eq %struct.rtx_def* %39, null, !dbg !10248
  br i1 %cmp40, label %if.then42, label %if.else44, !dbg !10249

if.then42:                                        ; preds = %if.else39
  %40 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10250
  %call43 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %40), !dbg !10251
  store %struct.rtx_def* %call43, %struct.rtx_def** %target.addr, align 8, !dbg !10252
  br label %if.end46, !dbg !10253

if.else44:                                        ; preds = %if.else39
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10254
  %42 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10255
  %call45 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %41, %struct.rtx_def* %42), !dbg !10256
  br label %if.end46

if.end46:                                         ; preds = %if.else44, %if.then42
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.end38
  %call48 = call %struct.rtx_def* @gen_label_rtx(), !dbg !10257
  store %struct.rtx_def* %call48, %struct.rtx_def** %label, align 8, !dbg !10258
  %43 = load %struct.rtx_def*, %struct.rtx_def** %sign, align 8, !dbg !10259
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10260
  %45 = load i32, i32* %imode, align 4, !dbg !10261
  %46 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10262
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %43, %struct.rtx_def* %44, i32 81, %struct.rtx_def* null, i32 %45, i32 1, %struct.rtx_def* %46), !dbg !10263
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10264
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !10264
  %bf.load49 = load i32, i32* %48, align 8, !dbg !10264
  %bf.clear = and i32 %bf.load49, 65535, !dbg !10264
  %cmp50 = icmp eq i32 %bf.clear, 32, !dbg !10266
  br i1 %cmp50, label %if.then52, label %if.else54, !dbg !10267

if.then52:                                        ; preds = %if.end47
  %49 = load i32, i32* %mode.addr, align 4, !dbg !10268
  %50 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10269
  %51 = load i32, i32* %mode.addr, align 4, !dbg !10270
  %call53 = call %struct.rtx_def* @simplify_unary_operation(i32 51, i32 %49, %struct.rtx_def* %50, i32 %51), !dbg !10271
  store %struct.rtx_def* %call53, %struct.rtx_def** %op0.addr, align 8, !dbg !10272
  br label %if.end56, !dbg !10273

if.else54:                                        ; preds = %if.end47
  %52 = load i32, i32* %mode.addr, align 4, !dbg !10274
  %53 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10275
  %54 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10276
  %call55 = call %struct.rtx_def* @expand_unop(i32 %52, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), %struct.rtx_def* %53, %struct.rtx_def* %54, i32 0), !dbg !10277
  store %struct.rtx_def* %call55, %struct.rtx_def** %op0.addr, align 8, !dbg !10278
  br label %if.end56

if.end56:                                         ; preds = %if.else54, %if.then52
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10279
  %56 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10281
  %cmp57 = icmp ne %struct.rtx_def* %55, %56, !dbg !10282
  br i1 %cmp57, label %if.then59, label %if.end61, !dbg !10283

if.then59:                                        ; preds = %if.end56
  %57 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10284
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10285
  %call60 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %57, %struct.rtx_def* %58), !dbg !10286
  br label %if.end61, !dbg !10286

if.end61:                                         ; preds = %if.then59, %if.end56
  %59 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !10287
  %call62 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %59), !dbg !10288
  %60 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10289
  store %struct.rtx_def* %60, %struct.rtx_def** %retval, align 8, !dbg !10290
  br label %return, !dbg !10290

return:                                           ; preds = %if.end61, %if.then37, %if.then16
  %61 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10291
  ret %struct.rtx_def* %61, !dbg !10291
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_copysign_bit(i32 %mode, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %target, i32 %bitpos, i8 zeroext %op0_is_abs) #0 !dbg !10292 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %bitpos.addr = alloca i32, align 4
  %op0_is_abs.addr = alloca i8, align 1
  %imode = alloca i32, align 4
  %hi = alloca i64, align 8
  %lo = alloca i64, align 8
  %word = alloca i32, align 4
  %nwords = alloca i32, align 4
  %i = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %targ_piece = alloca %struct.rtx_def*, align 8
  %op0_piece = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10293, metadata !DIExpression()), !dbg !10294
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10295, metadata !DIExpression()), !dbg !10296
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !10297, metadata !DIExpression()), !dbg !10298
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !10299, metadata !DIExpression()), !dbg !10300
  store i32 %bitpos, i32* %bitpos.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.addr, metadata !10301, metadata !DIExpression()), !dbg !10302
  store i8 %op0_is_abs, i8* %op0_is_abs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %op0_is_abs.addr, metadata !10303, metadata !DIExpression()), !dbg !10304
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !10305, metadata !DIExpression()), !dbg !10306
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !10307, metadata !DIExpression()), !dbg !10308
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !10309, metadata !DIExpression()), !dbg !10310
  call void @llvm.dbg.declare(metadata i32* %word, metadata !10311, metadata !DIExpression()), !dbg !10312
  call void @llvm.dbg.declare(metadata i32* %nwords, metadata !10313, metadata !DIExpression()), !dbg !10314
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10315, metadata !DIExpression()), !dbg !10316
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !10317, metadata !DIExpression()), !dbg !10318
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !10319, metadata !DIExpression()), !dbg !10320
  %0 = load i32, i32* %mode.addr, align 4, !dbg !10321
  %idxprom = zext i32 %0 to i64, !dbg !10321
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !10321
  %1 = load i8, i8* %arrayidx, align 1, !dbg !10321
  %conv = zext i8 %1 to i16, !dbg !10321
  %conv1 = zext i16 %conv to i32, !dbg !10321
  %cmp = icmp sle i32 %conv1, 4, !dbg !10323
  br i1 %cmp, label %if.then, label %if.else, !dbg !10324

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !10325
  %call = call i32 @int_mode_for_mode(i32 %2), !dbg !10327
  store i32 %call, i32* %imode, align 4, !dbg !10328
  %3 = load i32, i32* %imode, align 4, !dbg !10329
  %cmp3 = icmp eq i32 %3, 1, !dbg !10331
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !10332

if.then5:                                         ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10333
  br label %return, !dbg !10333

if.end:                                           ; preds = %if.then
  store i32 0, i32* %word, align 4, !dbg !10334
  store i32 1, i32* %nwords, align 4, !dbg !10335
  br label %if.end13, !dbg !10336

if.else:                                          ; preds = %entry
  %4 = load i32, i32* @word_mode, align 4, !dbg !10337
  store i32 %4, i32* %imode, align 4, !dbg !10339
  %5 = load i32, i32* %bitpos.addr, align 4, !dbg !10340
  %div = sdiv i32 %5, 32, !dbg !10342
  store i32 %div, i32* %word, align 4, !dbg !10343
  %6 = load i32, i32* %bitpos.addr, align 4, !dbg !10344
  %rem = srem i32 %6, 32, !dbg !10345
  store i32 %rem, i32* %bitpos.addr, align 4, !dbg !10346
  %7 = load i32, i32* %mode.addr, align 4, !dbg !10347
  %idxprom6 = zext i32 %7 to i64, !dbg !10347
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom6, !dbg !10347
  %8 = load i8, i8* %arrayidx7, align 1, !dbg !10347
  %conv8 = zext i8 %8 to i16, !dbg !10347
  %conv9 = zext i16 %conv8 to i32, !dbg !10347
  %mul = mul nsw i32 %conv9, 8, !dbg !10347
  %conv10 = trunc i32 %mul to i16, !dbg !10347
  %conv11 = zext i16 %conv10 to i32, !dbg !10347
  %add = add nsw i32 %conv11, 32, !dbg !10348
  %sub = sub nsw i32 %add, 1, !dbg !10349
  %div12 = sdiv i32 %sub, 32, !dbg !10350
  store i32 %div12, i32* %nwords, align 4, !dbg !10351
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end
  %9 = load i32, i32* %bitpos.addr, align 4, !dbg !10352
  %cmp14 = icmp slt i32 %9, 64, !dbg !10354
  br i1 %cmp14, label %if.then16, label %if.else17, !dbg !10355

if.then16:                                        ; preds = %if.end13
  store i64 0, i64* %hi, align 8, !dbg !10356
  %10 = load i32, i32* %bitpos.addr, align 4, !dbg !10358
  %sh_prom = zext i32 %10 to i64, !dbg !10359
  %shl = shl i64 1, %sh_prom, !dbg !10359
  store i64 %shl, i64* %lo, align 8, !dbg !10360
  br label %if.end21, !dbg !10361

if.else17:                                        ; preds = %if.end13
  %11 = load i32, i32* %bitpos.addr, align 4, !dbg !10362
  %sub18 = sub nsw i32 %11, 64, !dbg !10364
  %sh_prom19 = zext i32 %sub18 to i64, !dbg !10365
  %shl20 = shl i64 1, %sh_prom19, !dbg !10365
  store i64 %shl20, i64* %hi, align 8, !dbg !10366
  store i64 0, i64* %lo, align 8, !dbg !10367
  br label %if.end21

if.end21:                                         ; preds = %if.else17, %if.then16
  %12 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10368
  %cmp22 = icmp eq %struct.rtx_def* %12, null, !dbg !10370
  br i1 %cmp22, label %if.then29, label %lor.lhs.false, !dbg !10371

lor.lhs.false:                                    ; preds = %if.end21
  %13 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10372
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10373
  %cmp24 = icmp eq %struct.rtx_def* %13, %14, !dbg !10374
  br i1 %cmp24, label %if.then29, label %lor.lhs.false26, !dbg !10375

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10376
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10377
  %cmp27 = icmp eq %struct.rtx_def* %15, %16, !dbg !10378
  br i1 %cmp27, label %if.then29, label %if.end31, !dbg !10379

if.then29:                                        ; preds = %lor.lhs.false26, %lor.lhs.false, %if.end21
  %17 = load i32, i32* %mode.addr, align 4, !dbg !10380
  %call30 = call %struct.rtx_def* @gen_reg_rtx(i32 %17), !dbg !10381
  store %struct.rtx_def* %call30, %struct.rtx_def** %target.addr, align 8, !dbg !10382
  br label %if.end31, !dbg !10383

if.end31:                                         ; preds = %if.then29, %lor.lhs.false26
  %18 = load i32, i32* %nwords, align 4, !dbg !10384
  %cmp32 = icmp sgt i32 %18, 1, !dbg !10386
  br i1 %cmp32, label %if.then34, label %if.else61, !dbg !10387

if.then34:                                        ; preds = %if.end31
  call void @start_sequence(), !dbg !10388
  store i32 0, i32* %i, align 4, !dbg !10390
  br label %for.cond, !dbg !10392

for.cond:                                         ; preds = %for.inc, %if.then34
  %19 = load i32, i32* %i, align 4, !dbg !10393
  %20 = load i32, i32* %nwords, align 4, !dbg !10395
  %cmp35 = icmp slt i32 %19, %20, !dbg !10396
  br i1 %cmp35, label %for.body, label %for.end, !dbg !10397

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %targ_piece, metadata !10398, metadata !DIExpression()), !dbg !10400
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10401
  %22 = load i32, i32* %i, align 4, !dbg !10402
  %23 = load i32, i32* %mode.addr, align 4, !dbg !10403
  %call37 = call %struct.rtx_def* @operand_subword(%struct.rtx_def* %21, i32 %22, i32 1, i32 %23), !dbg !10404
  store %struct.rtx_def* %call37, %struct.rtx_def** %targ_piece, align 8, !dbg !10400
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0_piece, metadata !10405, metadata !DIExpression()), !dbg !10406
  %24 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10407
  %25 = load i32, i32* %i, align 4, !dbg !10408
  %26 = load i32, i32* %mode.addr, align 4, !dbg !10409
  %call38 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %24, i32 %25, i32 %26), !dbg !10410
  store %struct.rtx_def* %call38, %struct.rtx_def** %op0_piece, align 8, !dbg !10406
  %27 = load i32, i32* %i, align 4, !dbg !10411
  %28 = load i32, i32* %word, align 4, !dbg !10413
  %cmp39 = icmp eq i32 %27, %28, !dbg !10414
  br i1 %cmp39, label %if.then41, label %if.else56, !dbg !10415

if.then41:                                        ; preds = %for.body
  %29 = load i8, i8* %op0_is_abs.addr, align 1, !dbg !10416
  %tobool = icmp ne i8 %29, 0, !dbg !10416
  br i1 %tobool, label %if.end46, label %if.then42, !dbg !10419

if.then42:                                        ; preds = %if.then41
  %30 = load i32, i32* %imode, align 4, !dbg !10420
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !10421
  %32 = load i64, i64* %lo, align 8, !dbg !10422
  %neg = xor i64 %32, -1, !dbg !10423
  %33 = load i64, i64* %hi, align 8, !dbg !10424
  %neg43 = xor i64 %33, -1, !dbg !10425
  %34 = load i32, i32* %imode, align 4, !dbg !10426
  %call44 = call %struct.rtx_def* @immed_double_const(i64 %neg, i64 %neg43, i32 %34), !dbg !10427
  %call45 = call %struct.rtx_def* @expand_binop(i32 %30, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %31, %struct.rtx_def* %call44, %struct.rtx_def* null, i32 1, i32 3), !dbg !10428
  store %struct.rtx_def* %call45, %struct.rtx_def** %op0_piece, align 8, !dbg !10429
  br label %if.end46, !dbg !10430

if.end46:                                         ; preds = %if.then42, %if.then41
  %35 = load i32, i32* %imode, align 4, !dbg !10431
  %36 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10432
  %37 = load i32, i32* %i, align 4, !dbg !10433
  %38 = load i32, i32* %mode.addr, align 4, !dbg !10434
  %call47 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %36, i32 %37, i32 %38), !dbg !10435
  %39 = load i64, i64* %lo, align 8, !dbg !10436
  %40 = load i64, i64* %hi, align 8, !dbg !10437
  %41 = load i32, i32* %imode, align 4, !dbg !10438
  %call48 = call %struct.rtx_def* @immed_double_const(i64 %39, i64 %40, i32 %41), !dbg !10439
  %call49 = call %struct.rtx_def* @expand_binop(i32 %35, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %call47, %struct.rtx_def* %call48, %struct.rtx_def* null, i32 1, i32 3), !dbg !10440
  store %struct.rtx_def* %call49, %struct.rtx_def** %op1.addr, align 8, !dbg !10441
  %42 = load i32, i32* %imode, align 4, !dbg !10442
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !10443
  %44 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10444
  %45 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !10445
  %call50 = call %struct.rtx_def* @expand_binop(i32 %42, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %45, i32 1, i32 3), !dbg !10446
  store %struct.rtx_def* %call50, %struct.rtx_def** %temp, align 8, !dbg !10447
  %46 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10448
  %47 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !10450
  %cmp51 = icmp ne %struct.rtx_def* %46, %47, !dbg !10451
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !10452

if.then53:                                        ; preds = %if.end46
  %48 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !10453
  %49 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10454
  %call54 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !10455
  br label %if.end55, !dbg !10455

if.end55:                                         ; preds = %if.then53, %if.end46
  br label %if.end58, !dbg !10456

if.else56:                                        ; preds = %for.body
  %50 = load %struct.rtx_def*, %struct.rtx_def** %targ_piece, align 8, !dbg !10457
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op0_piece, align 8, !dbg !10458
  %call57 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %50, %struct.rtx_def* %51), !dbg !10459
  br label %if.end58

if.end58:                                         ; preds = %if.else56, %if.end55
  br label %for.inc, !dbg !10460

for.inc:                                          ; preds = %if.end58
  %52 = load i32, i32* %i, align 4, !dbg !10461
  %inc = add nsw i32 %52, 1, !dbg !10461
  store i32 %inc, i32* %i, align 4, !dbg !10461
  br label %for.cond, !dbg !10462, !llvm.loop !10463

for.end:                                          ; preds = %for.cond
  %call59 = call %struct.rtx_def* @get_insns(), !dbg !10465
  store %struct.rtx_def* %call59, %struct.rtx_def** %insns, align 8, !dbg !10466
  call void @end_sequence(), !dbg !10467
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !10468
  %call60 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %53), !dbg !10469
  br label %if.end76, !dbg !10470

if.else61:                                        ; preds = %if.end31
  %54 = load i32, i32* %imode, align 4, !dbg !10471
  %55 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !10473
  %56 = load i32, i32* %imode, align 4, !dbg !10474
  %57 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10475
  %call62 = call %struct.rtx_def* %55(i32 %56, %struct.rtx_def* %57), !dbg !10473
  %58 = load i64, i64* %lo, align 8, !dbg !10476
  %59 = load i64, i64* %hi, align 8, !dbg !10477
  %60 = load i32, i32* %imode, align 4, !dbg !10478
  %call63 = call %struct.rtx_def* @immed_double_const(i64 %58, i64 %59, i32 %60), !dbg !10479
  %call64 = call %struct.rtx_def* @expand_binop(i32 %54, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %call62, %struct.rtx_def* %call63, %struct.rtx_def* null, i32 1, i32 3), !dbg !10480
  store %struct.rtx_def* %call64, %struct.rtx_def** %op1.addr, align 8, !dbg !10481
  %61 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !10482
  %62 = load i32, i32* %imode, align 4, !dbg !10483
  %63 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10484
  %call65 = call %struct.rtx_def* %61(i32 %62, %struct.rtx_def* %63), !dbg !10482
  store %struct.rtx_def* %call65, %struct.rtx_def** %op0.addr, align 8, !dbg !10485
  %64 = load i8, i8* %op0_is_abs.addr, align 1, !dbg !10486
  %tobool66 = icmp ne i8 %64, 0, !dbg !10486
  br i1 %tobool66, label %if.end72, label %if.then67, !dbg !10488

if.then67:                                        ; preds = %if.else61
  %65 = load i32, i32* %imode, align 4, !dbg !10489
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10490
  %67 = load i64, i64* %lo, align 8, !dbg !10491
  %neg68 = xor i64 %67, -1, !dbg !10492
  %68 = load i64, i64* %hi, align 8, !dbg !10493
  %neg69 = xor i64 %68, -1, !dbg !10494
  %69 = load i32, i32* %imode, align 4, !dbg !10495
  %call70 = call %struct.rtx_def* @immed_double_const(i64 %neg68, i64 %neg69, i32 %69), !dbg !10496
  %call71 = call %struct.rtx_def* @expand_binop(i32 %65, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %66, %struct.rtx_def* %call70, %struct.rtx_def* null, i32 1, i32 3), !dbg !10497
  store %struct.rtx_def* %call71, %struct.rtx_def** %op0.addr, align 8, !dbg !10498
  br label %if.end72, !dbg !10499

if.end72:                                         ; preds = %if.then67, %if.else61
  %70 = load i32, i32* %imode, align 4, !dbg !10500
  %71 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10501
  %72 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10502
  %73 = load %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.rtl_hooks, %struct.rtl_hooks* @rtl_hooks, i32 0, i32 0), align 8, !dbg !10503
  %74 = load i32, i32* %imode, align 4, !dbg !10504
  %75 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10505
  %call73 = call %struct.rtx_def* %73(i32 %74, %struct.rtx_def* %75), !dbg !10503
  %call74 = call %struct.rtx_def* @expand_binop(i32 %70, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %71, %struct.rtx_def* %72, %struct.rtx_def* %call73, i32 1, i32 3), !dbg !10506
  store %struct.rtx_def* %call74, %struct.rtx_def** %temp, align 8, !dbg !10507
  %76 = load i32, i32* %mode.addr, align 4, !dbg !10508
  %77 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10509
  %78 = load i32, i32* %imode, align 4, !dbg !10510
  %call75 = call %struct.rtx_def* @lowpart_subreg_maybe_copy(i32 %76, %struct.rtx_def* %77, i32 %78), !dbg !10511
  store %struct.rtx_def* %call75, %struct.rtx_def** %target.addr, align 8, !dbg !10512
  br label %if.end76

if.end76:                                         ; preds = %if.end72, %for.end
  %79 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10513
  store %struct.rtx_def* %79, %struct.rtx_def** %retval, align 8, !dbg !10514
  br label %return, !dbg !10514

return:                                           ; preds = %if.end76, %if.then5
  %80 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10515
  ret %struct.rtx_def* %80, !dbg !10515
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_emit_unop_insn(i32 %icode, %struct.rtx_def* %target, %struct.rtx_def* %op0, i32 %code) #0 !dbg !10516 {
entry:
  %retval = alloca i8, align 1
  %icode.addr = alloca i32, align 4
  %target.addr = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %temp = alloca %struct.rtx_def*, align 8
  %mode0 = alloca i32, align 4
  %pat = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !10519, metadata !DIExpression()), !dbg !10520
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !10521, metadata !DIExpression()), !dbg !10522
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10523, metadata !DIExpression()), !dbg !10524
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10525, metadata !DIExpression()), !dbg !10526
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !10527, metadata !DIExpression()), !dbg !10528
  call void @llvm.dbg.declare(metadata i32* %mode0, metadata !10529, metadata !DIExpression()), !dbg !10530
  %0 = load i32, i32* %icode.addr, align 4, !dbg !10531
  %idxprom = sext i32 %0 to i64, !dbg !10532
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !10532
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !10533
  %1 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !10533
  %arrayidx1 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %1, i64 1, !dbg !10532
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx1, i32 0, i32 2, !dbg !10534
  %bf.load = load i16, i16* %mode, align 8, !dbg !10534
  %bf.cast = zext i16 %bf.load to i32, !dbg !10534
  store i32 %bf.cast, i32* %mode0, align 4, !dbg !10530
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !10535, metadata !DIExpression()), !dbg !10536
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !10537, metadata !DIExpression()), !dbg !10538
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !10539
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !10538
  %2 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10540
  store %struct.rtx_def* %2, %struct.rtx_def** %temp, align 8, !dbg !10541
  %3 = load i32, i32* %icode.addr, align 4, !dbg !10542
  %idxprom2 = sext i32 %3 to i64, !dbg !10544
  %arrayidx3 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom2, !dbg !10544
  %operand4 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx3, i32 0, i32 3, !dbg !10545
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand4, align 8, !dbg !10545
  %arrayidx5 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 1, !dbg !10544
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx5, i32 0, i32 0, !dbg !10546
  %5 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !10546
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10547
  %7 = load i32, i32* %mode0, align 4, !dbg !10548
  %call6 = call i32 %5(%struct.rtx_def* %6, i32 %7), !dbg !10544
  %tobool = icmp ne i32 %call6, 0, !dbg !10544
  br i1 %tobool, label %if.end, label %if.then, !dbg !10549

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %mode0, align 4, !dbg !10550
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10551
  %call7 = call %struct.rtx_def* @copy_to_mode_reg(i32 %8, %struct.rtx_def* %9), !dbg !10552
  store %struct.rtx_def* %call7, %struct.rtx_def** %op0.addr, align 8, !dbg !10553
  br label %if.end, !dbg !10554

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %icode.addr, align 4, !dbg !10555
  %idxprom8 = sext i32 %10 to i64, !dbg !10557
  %arrayidx9 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom8, !dbg !10557
  %operand10 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx9, i32 0, i32 3, !dbg !10558
  %11 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand10, align 8, !dbg !10558
  %arrayidx11 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %11, i64 0, !dbg !10557
  %predicate12 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx11, i32 0, i32 0, !dbg !10559
  %12 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate12, align 8, !dbg !10559
  %13 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10560
  %14 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10561
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !10561
  %bf.load13 = load i32, i32* %15, align 8, !dbg !10561
  %bf.lshr = lshr i32 %bf.load13, 16, !dbg !10561
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10561
  %call14 = call i32 %12(%struct.rtx_def* %13, i32 %bf.clear), !dbg !10557
  %tobool15 = icmp ne i32 %call14, 0, !dbg !10557
  br i1 %tobool15, label %if.end21, label %if.then16, !dbg !10562

if.then16:                                        ; preds = %if.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10563
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !10563
  %bf.load17 = load i32, i32* %17, align 8, !dbg !10563
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !10563
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !10563
  %call20 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear19), !dbg !10564
  store %struct.rtx_def* %call20, %struct.rtx_def** %temp, align 8, !dbg !10565
  br label %if.end21, !dbg !10566

if.end21:                                         ; preds = %if.then16, %if.end
  %18 = load i32, i32* %icode.addr, align 4, !dbg !10567
  %idxprom22 = sext i32 %18 to i64, !dbg !10567
  %arrayidx23 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom22, !dbg !10567
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx23, i32 0, i32 2, !dbg !10567
  %19 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !10567
  %20 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10568
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10569
  %call24 = call %struct.rtx_def* (%struct.rtx_def*, ...) %19(%struct.rtx_def* %20, %struct.rtx_def* %21), !dbg !10567
  store %struct.rtx_def* %call24, %struct.rtx_def** %pat, align 8, !dbg !10570
  %22 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10571
  %tobool25 = icmp ne %struct.rtx_def* %22, null, !dbg !10571
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !10573

if.then26:                                        ; preds = %if.end21
  %23 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10574
  call void @delete_insns_since(%struct.rtx_def* %23), !dbg !10576
  store i8 0, i8* %retval, align 1, !dbg !10577
  br label %return, !dbg !10577

if.end27:                                         ; preds = %if.end21
  %24 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10578
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !10578
  %bf.load28 = load i32, i32* %25, align 8, !dbg !10578
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !10578
  %cmp = icmp eq i32 %bf.clear29, 8, !dbg !10578
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10578

lor.lhs.false:                                    ; preds = %if.end27
  %26 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10578
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !10578
  %bf.load30 = load i32, i32* %27, align 8, !dbg !10578
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !10578
  %cmp32 = icmp eq i32 %bf.clear31, 7, !dbg !10578
  br i1 %cmp32, label %land.lhs.true, label %lor.lhs.false33, !dbg !10578

lor.lhs.false33:                                  ; preds = %lor.lhs.false
  %28 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10578
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !10578
  %bf.load34 = load i32, i32* %29, align 8, !dbg !10578
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !10578
  %cmp36 = icmp eq i32 %bf.clear35, 9, !dbg !10578
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false37, !dbg !10578

lor.lhs.false37:                                  ; preds = %lor.lhs.false33
  %30 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10578
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !10578
  %bf.load38 = load i32, i32* %31, align 8, !dbg !10578
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !10578
  %cmp40 = icmp eq i32 %bf.clear39, 10, !dbg !10578
  br i1 %cmp40, label %land.lhs.true, label %if.end47, !dbg !10580

land.lhs.true:                                    ; preds = %lor.lhs.false37, %lor.lhs.false33, %lor.lhs.false, %if.end27
  %32 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10581
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !10581
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10581
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !10581
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !10581
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10581
  %cmp42 = icmp ne %struct.rtx_def* %33, null, !dbg !10582
  br i1 %cmp42, label %land.lhs.true43, label %if.end47, !dbg !10583

land.lhs.true43:                                  ; preds = %land.lhs.true
  %34 = load i32, i32* %code.addr, align 4, !dbg !10584
  %cmp44 = icmp ne i32 %34, 0, !dbg !10585
  br i1 %cmp44, label %if.then45, label %if.end47, !dbg !10586

if.then45:                                        ; preds = %land.lhs.true43
  %35 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10587
  %36 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10588
  %37 = load i32, i32* %code.addr, align 4, !dbg !10589
  %38 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10590
  %call46 = call i32 @add_equal_note(%struct.rtx_def* %35, %struct.rtx_def* %36, i32 %37, %struct.rtx_def* %38, %struct.rtx_def* null), !dbg !10591
  br label %if.end47, !dbg !10591

if.end47:                                         ; preds = %if.then45, %land.lhs.true43, %land.lhs.true, %lor.lhs.false37
  %39 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !10592
  %call48 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %39), !dbg !10593
  %40 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10594
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10596
  %cmp49 = icmp ne %struct.rtx_def* %40, %41, !dbg !10597
  br i1 %cmp49, label %if.then50, label %if.end52, !dbg !10598

if.then50:                                        ; preds = %if.end47
  %42 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10599
  %43 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !10600
  %call51 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %42, %struct.rtx_def* %43), !dbg !10601
  br label %if.end52, !dbg !10601

if.end52:                                         ; preds = %if.then50, %if.end47
  store i8 1, i8* %retval, align 1, !dbg !10602
  br label %return, !dbg !10602

return:                                           ; preds = %if.end52, %if.then26
  %44 = load i8, i8* %retval, align 1, !dbg !10603
  ret i8 %44, !dbg !10603
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_equal_note(%struct.rtx_def* %insns, %struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1) #0 !dbg !10604 {
entry:
  %retval = alloca i32, align 4
  %insns.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns.addr, metadata !10607, metadata !DIExpression()), !dbg !10608
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !10609, metadata !DIExpression()), !dbg !10610
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10611, metadata !DIExpression()), !dbg !10612
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10613, metadata !DIExpression()), !dbg !10614
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !10615, metadata !DIExpression()), !dbg !10616
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_insn, metadata !10617, metadata !DIExpression()), !dbg !10618
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !10619, metadata !DIExpression()), !dbg !10620
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !10621, metadata !DIExpression()), !dbg !10622
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !10623, metadata !DIExpression()), !dbg !10624
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10625
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !10625
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !10625

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10625
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !10625
  %bf.load = load i32, i32* %2, align 8, !dbg !10625
  %bf.clear = and i32 %bf.load, 65535, !dbg !10625
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !10625
  br i1 %cmp, label %land.lhs.true12, label %lor.lhs.false, !dbg !10625

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10625
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !10625
  %bf.load1 = load i32, i32* %4, align 8, !dbg !10625
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !10625
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !10625
  br i1 %cmp3, label %land.lhs.true12, label %lor.lhs.false4, !dbg !10625

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10625
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !10625
  %bf.load5 = load i32, i32* %6, align 8, !dbg !10625
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !10625
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !10625
  br i1 %cmp7, label %land.lhs.true12, label %lor.lhs.false8, !dbg !10625

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10625
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !10625
  %bf.load9 = load i32, i32* %8, align 8, !dbg !10625
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !10625
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !10625
  br i1 %cmp11, label %land.lhs.true12, label %cond.true, !dbg !10625

land.lhs.true12:                                  ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10625
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !10625
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10625
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !10625
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10625
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10625
  %tobool13 = icmp ne %struct.rtx_def* %10, null, !dbg !10625
  br i1 %tobool13, label %cond.false, label %cond.true, !dbg !10625

cond.true:                                        ; preds = %land.lhs.true12, %lor.lhs.false8, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10625
  br label %cond.end, !dbg !10625

cond.false:                                       ; preds = %land.lhs.true12
  br label %cond.end, !dbg !10625

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10625
  %11 = load i32, i32* %code.addr, align 4, !dbg !10626
  %idxprom = sext i32 %11 to i64, !dbg !10626
  %arrayidx14 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !10626
  %12 = load i32, i32* %arrayidx14, align 4, !dbg !10626
  %cmp15 = icmp ne i32 %12, 3, !dbg !10628
  br i1 %cmp15, label %land.lhs.true16, label %if.end, !dbg !10629

land.lhs.true16:                                  ; preds = %cond.end
  %13 = load i32, i32* %code.addr, align 4, !dbg !10630
  %idxprom17 = sext i32 %13 to i64, !dbg !10630
  %arrayidx18 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom17, !dbg !10630
  %14 = load i32, i32* %arrayidx18, align 4, !dbg !10630
  %cmp19 = icmp ne i32 %14, 2, !dbg !10631
  br i1 %cmp19, label %land.lhs.true20, label %if.end, !dbg !10632

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %15 = load i32, i32* %code.addr, align 4, !dbg !10633
  %idxprom21 = sext i32 %15 to i64, !dbg !10633
  %arrayidx22 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom21, !dbg !10633
  %16 = load i32, i32* %arrayidx22, align 4, !dbg !10633
  %cmp23 = icmp ne i32 %16, 1, !dbg !10634
  br i1 %cmp23, label %land.lhs.true24, label %if.end, !dbg !10635

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %17 = load i32, i32* %code.addr, align 4, !dbg !10636
  %idxprom25 = sext i32 %17 to i64, !dbg !10636
  %arrayidx26 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom25, !dbg !10636
  %18 = load i32, i32* %arrayidx26, align 4, !dbg !10636
  %cmp27 = icmp ne i32 %18, 0, !dbg !10637
  br i1 %cmp27, label %land.lhs.true28, label %if.end, !dbg !10638

land.lhs.true28:                                  ; preds = %land.lhs.true24
  %19 = load i32, i32* %code.addr, align 4, !dbg !10639
  %idxprom29 = sext i32 %19 to i64, !dbg !10639
  %arrayidx30 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom29, !dbg !10639
  %20 = load i32, i32* %arrayidx30, align 4, !dbg !10639
  %cmp31 = icmp ne i32 %20, 4, !dbg !10640
  br i1 %cmp31, label %if.then, label %if.end, !dbg !10641

if.then:                                          ; preds = %land.lhs.true28
  store i32 1, i32* %retval, align 4, !dbg !10642
  br label %return, !dbg !10642

if.end:                                           ; preds = %land.lhs.true28, %land.lhs.true24, %land.lhs.true20, %land.lhs.true16, %cond.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10643
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !10643
  %bf.load32 = load i32, i32* %22, align 8, !dbg !10643
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !10643
  %cmp34 = icmp eq i32 %bf.clear33, 120, !dbg !10645
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !10646

if.then35:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !10647
  br label %return, !dbg !10647

if.end36:                                         ; preds = %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !10648
  store %struct.rtx_def* %23, %struct.rtx_def** %last_insn, align 8, !dbg !10650
  br label %for.cond, !dbg !10651

for.cond:                                         ; preds = %for.inc, %if.end36
  %24 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10652
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !10652
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !10652
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 2, !dbg !10652
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !10652
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !10652
  %cmp41 = icmp ne %struct.rtx_def* %25, null, !dbg !10654
  br i1 %cmp41, label %for.body, label %for.end, !dbg !10655

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !10655

for.inc:                                          ; preds = %for.body
  %26 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10656
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !10656
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !10656
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 2, !dbg !10656
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !10656
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !10656
  store %struct.rtx_def* %27, %struct.rtx_def** %last_insn, align 8, !dbg !10657
  br label %for.cond, !dbg !10658, !llvm.loop !10659

for.end:                                          ; preds = %for.cond
  %28 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !10661
  %bf.load46 = load i32, i32* %29, align 8, !dbg !10661
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !10661
  %cmp48 = icmp eq i32 %bf.clear47, 8, !dbg !10661
  br i1 %cmp48, label %cond.true61, label %lor.lhs.false49, !dbg !10661

lor.lhs.false49:                                  ; preds = %for.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !10661
  %bf.load50 = load i32, i32* %31, align 8, !dbg !10661
  %bf.clear51 = and i32 %bf.load50, 65535, !dbg !10661
  %cmp52 = icmp eq i32 %bf.clear51, 7, !dbg !10661
  br i1 %cmp52, label %cond.true61, label %lor.lhs.false53, !dbg !10661

lor.lhs.false53:                                  ; preds = %lor.lhs.false49
  %32 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !10661
  %bf.load54 = load i32, i32* %33, align 8, !dbg !10661
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !10661
  %cmp56 = icmp eq i32 %bf.clear55, 9, !dbg !10661
  br i1 %cmp56, label %cond.true61, label %lor.lhs.false57, !dbg !10661

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %34 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !10661
  %bf.load58 = load i32, i32* %35, align 8, !dbg !10661
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !10661
  %cmp60 = icmp eq i32 %bf.clear59, 10, !dbg !10661
  br i1 %cmp60, label %cond.true61, label %cond.false81, !dbg !10661

cond.true61:                                      ; preds = %lor.lhs.false57, %lor.lhs.false53, %lor.lhs.false49, %for.end
  %36 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !10661
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !10661
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 5, !dbg !10661
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !10661
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !10661
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !10661
  %bf.load66 = load i32, i32* %38, align 8, !dbg !10661
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !10661
  %cmp68 = icmp eq i32 %bf.clear67, 23, !dbg !10661
  br i1 %cmp68, label %cond.true69, label %cond.false74, !dbg !10661

cond.true69:                                      ; preds = %cond.true61
  %39 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !10661
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !10661
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 5, !dbg !10661
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !10661
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !10661
  br label %cond.end79, !dbg !10661

cond.false74:                                     ; preds = %cond.true61
  %41 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %42 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10661
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !10661
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !10661
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 5, !dbg !10661
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !10661
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !10661
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %41, %struct.rtx_def* %43), !dbg !10661
  br label %cond.end79, !dbg !10661

cond.end79:                                       ; preds = %cond.false74, %cond.true69
  %cond80 = phi %struct.rtx_def* [ %40, %cond.true69 ], [ %call, %cond.false74 ], !dbg !10661
  br label %cond.end82, !dbg !10661

cond.false81:                                     ; preds = %lor.lhs.false57
  br label %cond.end82, !dbg !10661

cond.end82:                                       ; preds = %cond.false81, %cond.end79
  %cond83 = phi %struct.rtx_def* [ %cond80, %cond.end79 ], [ null, %cond.false81 ], !dbg !10661
  store %struct.rtx_def* %cond83, %struct.rtx_def** %set, align 8, !dbg !10662
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10663
  %cmp84 = icmp eq %struct.rtx_def* %44, null, !dbg !10665
  br i1 %cmp84, label %if.then85, label %if.end86, !dbg !10666

if.then85:                                        ; preds = %cond.end82
  store i32 1, i32* %retval, align 4, !dbg !10667
  br label %return, !dbg !10667

if.end86:                                         ; preds = %cond.end82
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10668
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !10668
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !10668
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !10668
  %rt_rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**, !dbg !10668
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx90, align 8, !dbg !10668
  %47 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10670
  %call91 = call i32 @rtx_equal_p(%struct.rtx_def* %46, %struct.rtx_def* %47), !dbg !10671
  %tobool92 = icmp ne i32 %call91, 0, !dbg !10671
  br i1 %tobool92, label %if.end113, label %land.lhs.true93, !dbg !10672

land.lhs.true93:                                  ; preds = %if.end86
  %48 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10673
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !10673
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !10673
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 0, !dbg !10673
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !10673
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !10673
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !10673
  %bf.load98 = load i32, i32* %50, align 8, !dbg !10673
  %bf.clear99 = and i32 %bf.load98, 65535, !dbg !10673
  %cmp100 = icmp ne i32 %bf.clear99, 40, !dbg !10674
  br i1 %cmp100, label %if.then112, label %lor.lhs.false101, !dbg !10675

lor.lhs.false101:                                 ; preds = %land.lhs.true93
  %51 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10676
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !10676
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !10676
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 0, !dbg !10676
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !10676
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !10676
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !10676
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !10676
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 0, !dbg !10676
  %rt_rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**, !dbg !10676
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx109, align 8, !dbg !10676
  %54 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10677
  %call110 = call i32 @rtx_equal_p(%struct.rtx_def* %53, %struct.rtx_def* %54), !dbg !10678
  %tobool111 = icmp ne i32 %call110, 0, !dbg !10678
  br i1 %tobool111, label %if.end113, label %if.then112, !dbg !10679

if.then112:                                       ; preds = %lor.lhs.false101, %land.lhs.true93
  store i32 1, i32* %retval, align 4, !dbg !10680
  br label %return, !dbg !10680

if.end113:                                        ; preds = %lor.lhs.false101, %if.end86
  %55 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10681
  %56 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10683
  %call114 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %55, %struct.rtx_def* %56), !dbg !10684
  %tobool115 = icmp ne i32 %call114, 0, !dbg !10684
  br i1 %tobool115, label %if.then121, label %lor.lhs.false116, !dbg !10685

lor.lhs.false116:                                 ; preds = %if.end113
  %57 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10686
  %tobool117 = icmp ne %struct.rtx_def* %57, null, !dbg !10686
  br i1 %tobool117, label %land.lhs.true118, label %if.end135, !dbg !10687

land.lhs.true118:                                 ; preds = %lor.lhs.false116
  %58 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10688
  %59 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10689
  %call119 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %58, %struct.rtx_def* %59), !dbg !10690
  %tobool120 = icmp ne i32 %call119, 0, !dbg !10690
  br i1 %tobool120, label %if.then121, label %if.end135, !dbg !10691

if.then121:                                       ; preds = %land.lhs.true118, %if.end113
  %60 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10692
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !10692
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !10692
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 1, !dbg !10692
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !10692
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !10692
  store %struct.rtx_def* %61, %struct.rtx_def** %insn, align 8, !dbg !10694
  br label %while.cond, !dbg !10695

while.cond:                                       ; preds = %if.end130, %if.then121
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10696
  %cmp126 = icmp ne %struct.rtx_def* %62, null, !dbg !10697
  br i1 %cmp126, label %while.body, label %while.end, !dbg !10695

while.body:                                       ; preds = %while.cond
  %63 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10698
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10701
  %call127 = call i32 @reg_set_p(%struct.rtx_def* %63, %struct.rtx_def* %64), !dbg !10702
  %tobool128 = icmp ne i32 %call127, 0, !dbg !10702
  br i1 %tobool128, label %if.then129, label %if.end130, !dbg !10703

if.then129:                                       ; preds = %while.body
  store i32 0, i32* %retval, align 4, !dbg !10704
  br label %return, !dbg !10704

if.end130:                                        ; preds = %while.body
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10705
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !10705
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !10705
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 1, !dbg !10705
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !10705
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx134, align 8, !dbg !10705
  store %struct.rtx_def* %66, %struct.rtx_def** %insn, align 8, !dbg !10706
  br label %while.cond, !dbg !10695, !llvm.loop !10707

while.end:                                        ; preds = %while.cond
  br label %if.end135, !dbg !10709

if.end135:                                        ; preds = %while.end, %land.lhs.true118, %lor.lhs.false116
  %67 = load i32, i32* %code.addr, align 4, !dbg !10710
  %idxprom136 = sext i32 %67 to i64, !dbg !10710
  %arrayidx137 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom136, !dbg !10710
  %68 = load i32, i32* %arrayidx137, align 4, !dbg !10710
  %cmp138 = icmp eq i32 %68, 4, !dbg !10712
  br i1 %cmp138, label %if.then139, label %if.else, !dbg !10713

if.then139:                                       ; preds = %if.end135
  %69 = load i32, i32* %code.addr, align 4, !dbg !10714
  %70 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10714
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !10714
  %bf.load140 = load i32, i32* %71, align 8, !dbg !10714
  %bf.lshr = lshr i32 %bf.load140, 16, !dbg !10714
  %bf.clear141 = and i32 %bf.lshr, 255, !dbg !10714
  %72 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10714
  %call142 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %72), !dbg !10714
  %call143 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %69, i32 %bf.clear141, %struct.rtx_def* %call142), !dbg !10714
  store %struct.rtx_def* %call143, %struct.rtx_def** %note, align 8, !dbg !10715
  br label %if.end150, !dbg !10716

if.else:                                          ; preds = %if.end135
  %73 = load i32, i32* %code.addr, align 4, !dbg !10717
  %74 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10717
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !10717
  %bf.load144 = load i32, i32* %75, align 8, !dbg !10717
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !10717
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !10717
  %76 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10717
  %call147 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %76), !dbg !10717
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !10717
  %call148 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %77), !dbg !10717
  %call149 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %73, i32 %bf.clear146, %struct.rtx_def* %call147, %struct.rtx_def* %call148), !dbg !10717
  store %struct.rtx_def* %call149, %struct.rtx_def** %note, align 8, !dbg !10718
  br label %if.end150

if.end150:                                        ; preds = %if.else, %if.then139
  %78 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !10719
  %79 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !10720
  %call151 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %78, i32 4, %struct.rtx_def* %79), !dbg !10721
  store i32 1, i32* %retval, align 4, !dbg !10722
  br label %return, !dbg !10722

return:                                           ; preds = %if.end150, %if.then129, %if.then112, %if.then85, %if.then35, %if.then
  %80 = load i32, i32* %retval, align 4, !dbg !10723
  ret i32 %80, !dbg !10723
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @emit_unop_insn(i32 %icode, %struct.rtx_def* %target, %struct.rtx_def* %op0, i32 %code) #0 !dbg !10724 {
entry:
  %icode.addr = alloca i32, align 4
  %target.addr = alloca %struct.rtx_def*, align 8
  %op0.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %ok = alloca i8, align 1
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !10727, metadata !DIExpression()), !dbg !10728
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !10729, metadata !DIExpression()), !dbg !10730
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !10731, metadata !DIExpression()), !dbg !10732
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10733, metadata !DIExpression()), !dbg !10734
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !10735, metadata !DIExpression()), !dbg !10736
  %0 = load i32, i32* %icode.addr, align 4, !dbg !10737
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !10738
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !10739
  %3 = load i32, i32* %code.addr, align 4, !dbg !10740
  %call = call zeroext i8 @maybe_emit_unop_insn(i32 %0, %struct.rtx_def* %1, %struct.rtx_def* %2, i32 %3), !dbg !10741
  store i8 %call, i8* %ok, align 1, !dbg !10736
  %4 = load i8, i8* %ok, align 1, !dbg !10742
  %tobool = icmp ne i8 %4, 0, !dbg !10742
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10742

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 3839, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10742
  br label %cond.end, !dbg !10742

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10742
  ret void, !dbg !10743
}

declare dso_local i32 @may_trap_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @make_reg_eh_region_note_nothrow_nononlocal(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @no_conflict_move_test(%struct.rtx_def* %dest, %struct.rtx_def* %set, i8* %p0) #0 !dbg !10744 {
entry:
  %dest.addr = alloca %struct.rtx_def*, align 8
  %set.addr = alloca %struct.rtx_def*, align 8
  %p0.addr = alloca i8*, align 8
  %p = alloca %struct.no_conflict_data*, align 8
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !10747, metadata !DIExpression()), !dbg !10748
  store %struct.rtx_def* %set, %struct.rtx_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set.addr, metadata !10749, metadata !DIExpression()), !dbg !10750
  store i8* %p0, i8** %p0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p0.addr, metadata !10751, metadata !DIExpression()), !dbg !10752
  call void @llvm.dbg.declare(metadata %struct.no_conflict_data** %p, metadata !10753, metadata !DIExpression()), !dbg !10754
  %0 = load i8*, i8** %p0.addr, align 8, !dbg !10755
  %1 = bitcast i8* %0 to %struct.no_conflict_data*, !dbg !10756
  store %struct.no_conflict_data* %1, %struct.no_conflict_data** %p, align 8, !dbg !10754
  %2 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10757
  %target = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %2, i32 0, i32 0, !dbg !10759
  %3 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !10759
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !10760
  %call = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !10761
  %tobool = icmp ne i32 %call, 0, !dbg !10761
  br i1 %tobool, label %if.then, label %if.else, !dbg !10762

if.then:                                          ; preds = %entry
  %5 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10763
  %must_stay = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %5, i32 0, i32 3, !dbg !10764
  store i8 1, i8* %must_stay, align 8, !dbg !10765
  br label %if.end57, !dbg !10763

if.else:                                          ; preds = %entry
  %6 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10766
  %insn = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %6, i32 0, i32 2, !dbg !10768
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10768
  %8 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10769
  %first = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %8, i32 0, i32 1, !dbg !10770
  %9 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !10770
  %cmp = icmp eq %struct.rtx_def* %7, %9, !dbg !10771
  br i1 %cmp, label %if.then1, label %if.else2, !dbg !10772

if.then1:                                         ; preds = %if.else
  br label %if.end57, !dbg !10773

if.else2:                                         ; preds = %if.else
  %10 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !10774
  %11 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10776
  %first3 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %11, i32 0, i32 1, !dbg !10776
  %12 = load %struct.rtx_def*, %struct.rtx_def** %first3, align 8, !dbg !10776
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !10776
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10776
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10776
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10776
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10776
  %call4 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %10, %struct.rtx_def* %13), !dbg !10777
  %tobool5 = icmp ne i32 %call4, 0, !dbg !10777
  br i1 %tobool5, label %if.then54, label %lor.lhs.false, !dbg !10778

lor.lhs.false:                                    ; preds = %if.else2
  %14 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10779
  %first6 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %14, i32 0, i32 1, !dbg !10779
  %15 = load %struct.rtx_def*, %struct.rtx_def** %first6, align 8, !dbg !10779
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !10779
  %bf.load = load i32, i32* %16, align 8, !dbg !10779
  %bf.clear = and i32 %bf.load, 65535, !dbg !10779
  %cmp7 = icmp eq i32 %bf.clear, 10, !dbg !10779
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false11, !dbg !10780

land.lhs.true:                                    ; preds = %lor.lhs.false
  %17 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10781
  %first8 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %17, i32 0, i32 1, !dbg !10782
  %18 = load %struct.rtx_def*, %struct.rtx_def** %first8, align 8, !dbg !10782
  %19 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !10783
  %call9 = call i32 @find_reg_fusage(%struct.rtx_def* %18, i32 24, %struct.rtx_def* %19), !dbg !10784
  %tobool10 = icmp ne i32 %call9, 0, !dbg !10784
  br i1 %tobool10, label %if.then54, label %lor.lhs.false11, !dbg !10785

lor.lhs.false11:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !10786
  %21 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10787
  %first12 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %21, i32 0, i32 1, !dbg !10788
  %22 = load %struct.rtx_def*, %struct.rtx_def** %first12, align 8, !dbg !10788
  %23 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10789
  %insn13 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %23, i32 0, i32 2, !dbg !10790
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn13, align 8, !dbg !10790
  %call14 = call i32 @reg_used_between_p(%struct.rtx_def* %20, %struct.rtx_def* %22, %struct.rtx_def* %24), !dbg !10791
  %tobool15 = icmp ne i32 %call14, 0, !dbg !10791
  br i1 %tobool15, label %if.then54, label %lor.lhs.false16, !dbg !10792

lor.lhs.false16:                                  ; preds = %lor.lhs.false11
  %25 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !10793
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !10793
  %bf.load17 = load i32, i32* %26, align 8, !dbg !10793
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !10793
  %cmp19 = icmp eq i32 %bf.clear18, 23, !dbg !10794
  br i1 %cmp19, label %land.lhs.true20, label %if.end, !dbg !10795

land.lhs.true20:                                  ; preds = %lor.lhs.false16
  %27 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !10796
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !10796
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !10796
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 1, !dbg !10796
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !10796
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !10796
  %29 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10797
  %first25 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %29, i32 0, i32 1, !dbg !10798
  %30 = load %struct.rtx_def*, %struct.rtx_def** %first25, align 8, !dbg !10798
  %call26 = call i32 @modified_in_p(%struct.rtx_def* %28, %struct.rtx_def* %30), !dbg !10799
  %tobool27 = icmp ne i32 %call26, 0, !dbg !10799
  br i1 %tobool27, label %if.then54, label %lor.lhs.false28, !dbg !10800

lor.lhs.false28:                                  ; preds = %land.lhs.true20
  %31 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !10801
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !10801
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !10801
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !10801
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !10801
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !10801
  %33 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10802
  %first33 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %33, i32 0, i32 1, !dbg !10803
  %34 = load %struct.rtx_def*, %struct.rtx_def** %first33, align 8, !dbg !10803
  %call34 = call i32 @modified_in_p(%struct.rtx_def* %32, %struct.rtx_def* %34), !dbg !10804
  %tobool35 = icmp ne i32 %call34, 0, !dbg !10804
  br i1 %tobool35, label %if.then54, label %lor.lhs.false36, !dbg !10805

lor.lhs.false36:                                  ; preds = %lor.lhs.false28
  %35 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !10806
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !10806
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !10806
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !10806
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !10806
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !10806
  %37 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10807
  %first41 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %37, i32 0, i32 1, !dbg !10808
  %38 = load %struct.rtx_def*, %struct.rtx_def** %first41, align 8, !dbg !10808
  %39 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10809
  %insn42 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %39, i32 0, i32 2, !dbg !10810
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn42, align 8, !dbg !10810
  %call43 = call i32 @modified_between_p(%struct.rtx_def* %36, %struct.rtx_def* %38, %struct.rtx_def* %40), !dbg !10811
  %tobool44 = icmp ne i32 %call43, 0, !dbg !10811
  br i1 %tobool44, label %if.then54, label %lor.lhs.false45, !dbg !10812

lor.lhs.false45:                                  ; preds = %lor.lhs.false36
  %41 = load %struct.rtx_def*, %struct.rtx_def** %set.addr, align 8, !dbg !10813
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !10813
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !10813
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !10813
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !10813
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !10813
  %43 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10814
  %first50 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %43, i32 0, i32 1, !dbg !10815
  %44 = load %struct.rtx_def*, %struct.rtx_def** %first50, align 8, !dbg !10815
  %45 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10816
  %insn51 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %45, i32 0, i32 2, !dbg !10817
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn51, align 8, !dbg !10817
  %call52 = call i32 @modified_between_p(%struct.rtx_def* %42, %struct.rtx_def* %44, %struct.rtx_def* %46), !dbg !10818
  %tobool53 = icmp ne i32 %call52, 0, !dbg !10818
  br i1 %tobool53, label %if.then54, label %if.end, !dbg !10819

if.then54:                                        ; preds = %lor.lhs.false45, %lor.lhs.false36, %lor.lhs.false28, %land.lhs.true20, %lor.lhs.false11, %land.lhs.true, %if.else2
  %47 = load %struct.no_conflict_data*, %struct.no_conflict_data** %p, align 8, !dbg !10820
  %must_stay55 = getelementptr inbounds %struct.no_conflict_data, %struct.no_conflict_data* %47, i32 0, i32 3, !dbg !10821
  store i8 1, i8* %must_stay55, align 8, !dbg !10822
  br label %if.end, !dbg !10820

if.end:                                           ; preds = %if.then54, %lor.lhs.false45, %lor.lhs.false16
  br label %if.end56

if.end56:                                         ; preds = %if.end
  br label %if.end57

if.end57:                                         ; preds = %if.then1, %if.end56, %if.then
  ret void, !dbg !10823
}

declare dso_local void @add_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @can_compare_p(i32 %code, i32 %mode, i32 %purpose) #0 !dbg !10824 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %purpose.addr = alloca i32, align 4
  %test = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10827, metadata !DIExpression()), !dbg !10828
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10829, metadata !DIExpression()), !dbg !10830
  store i32 %purpose, i32* %purpose.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %purpose.addr, metadata !10831, metadata !DIExpression()), !dbg !10832
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test, metadata !10833, metadata !DIExpression()), !dbg !10834
  %0 = load i32, i32* %code.addr, align 4, !dbg !10835
  %1 = load i32, i32* %mode.addr, align 4, !dbg !10835
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10835
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !10835
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %0, i32 %1, %struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !10835
  store %struct.rtx_def* %call, %struct.rtx_def** %test, align 8, !dbg !10836
  br label %do.body, !dbg !10837

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !10838, metadata !DIExpression()), !dbg !10840
  %4 = load i32, i32* %purpose.addr, align 4, !dbg !10841
  %cmp = icmp eq i32 %4, 0, !dbg !10843
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10844

land.lhs.true:                                    ; preds = %do.body
  %5 = load i32, i32* %mode.addr, align 4, !dbg !10845
  %idxprom = sext i32 %5 to i64, !dbg !10845
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 115, i32 4), i64 0, i64 %idxprom, !dbg !10845
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !10846
  %6 = load i32, i32* %insn_code, align 4, !dbg !10846
  store i32 %6, i32* %icode, align 4, !dbg !10847
  %cmp1 = icmp ne i32 %6, 2956, !dbg !10848
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !10849

land.lhs.true2:                                   ; preds = %land.lhs.true
  %7 = load i32, i32* %icode, align 4, !dbg !10850
  %idxprom3 = sext i32 %7 to i64, !dbg !10851
  %arrayidx4 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom3, !dbg !10851
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx4, i32 0, i32 3, !dbg !10852
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !10852
  %arrayidx5 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 0, !dbg !10851
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx5, i32 0, i32 0, !dbg !10853
  %9 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !10853
  %10 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !10854
  %11 = load i32, i32* %mode.addr, align 4, !dbg !10855
  %call6 = call i32 %9(%struct.rtx_def* %10, i32 %11), !dbg !10851
  %tobool = icmp ne i32 %call6, 0, !dbg !10851
  br i1 %tobool, label %if.then, label %if.end, !dbg !10856

if.then:                                          ; preds = %land.lhs.true2
  store i32 1, i32* %retval, align 4, !dbg !10857
  br label %return, !dbg !10857

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true, %do.body
  %12 = load i32, i32* %purpose.addr, align 4, !dbg !10858
  %cmp7 = icmp eq i32 %12, 2, !dbg !10860
  br i1 %cmp7, label %land.lhs.true8, label %if.end22, !dbg !10861

land.lhs.true8:                                   ; preds = %if.end
  %13 = load i32, i32* %mode.addr, align 4, !dbg !10862
  %idxprom9 = sext i32 %13 to i64, !dbg !10862
  %arrayidx10 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 117, i32 4), i64 0, i64 %idxprom9, !dbg !10862
  %insn_code11 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx10, i32 0, i32 0, !dbg !10863
  %14 = load i32, i32* %insn_code11, align 4, !dbg !10863
  store i32 %14, i32* %icode, align 4, !dbg !10864
  %cmp12 = icmp ne i32 %14, 2956, !dbg !10865
  br i1 %cmp12, label %land.lhs.true13, label %if.end22, !dbg !10866

land.lhs.true13:                                  ; preds = %land.lhs.true8
  %15 = load i32, i32* %icode, align 4, !dbg !10867
  %idxprom14 = sext i32 %15 to i64, !dbg !10868
  %arrayidx15 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom14, !dbg !10868
  %operand16 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx15, i32 0, i32 3, !dbg !10869
  %16 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand16, align 8, !dbg !10869
  %arrayidx17 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %16, i64 1, !dbg !10868
  %predicate18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx17, i32 0, i32 0, !dbg !10870
  %17 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate18, align 8, !dbg !10870
  %18 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !10871
  %19 = load i32, i32* %mode.addr, align 4, !dbg !10872
  %call19 = call i32 %17(%struct.rtx_def* %18, i32 %19), !dbg !10868
  %tobool20 = icmp ne i32 %call19, 0, !dbg !10868
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !10873

if.then21:                                        ; preds = %land.lhs.true13
  store i32 1, i32* %retval, align 4, !dbg !10874
  br label %return, !dbg !10874

if.end22:                                         ; preds = %land.lhs.true13, %land.lhs.true8, %if.end
  %20 = load i32, i32* %purpose.addr, align 4, !dbg !10875
  %cmp23 = icmp eq i32 %20, 1, !dbg !10877
  br i1 %cmp23, label %land.lhs.true24, label %if.end30, !dbg !10878

land.lhs.true24:                                  ; preds = %if.end22
  %21 = load i32, i32* %mode.addr, align 4, !dbg !10879
  %idxprom25 = sext i32 %21 to i64, !dbg !10879
  %arrayidx26 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 116, i32 4), i64 0, i64 %idxprom25, !dbg !10879
  %insn_code27 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx26, i32 0, i32 0, !dbg !10880
  %22 = load i32, i32* %insn_code27, align 4, !dbg !10880
  %cmp28 = icmp ne i32 %22, 2956, !dbg !10881
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !10882

if.then29:                                        ; preds = %land.lhs.true24
  store i32 1, i32* %retval, align 4, !dbg !10883
  br label %return, !dbg !10883

if.end30:                                         ; preds = %land.lhs.true24, %if.end22
  %23 = load i32, i32* %mode.addr, align 4, !dbg !10884
  %idxprom31 = zext i32 %23 to i64, !dbg !10884
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom31, !dbg !10884
  %24 = load i8, i8* %arrayidx32, align 1, !dbg !10884
  %conv = zext i8 %24 to i32, !dbg !10884
  store i32 %conv, i32* %mode.addr, align 4, !dbg !10885
  %25 = load i32, i32* %mode.addr, align 4, !dbg !10886
  %26 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !10886
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !10886
  %bf.load = load i32, i32* %27, align 8, !dbg !10886
  %bf.value = and i32 %25, 255, !dbg !10886
  %bf.shl = shl i32 %bf.value, 16, !dbg !10886
  %bf.clear = and i32 %bf.load, -16711681, !dbg !10886
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !10886
  store i32 %bf.set, i32* %27, align 8, !dbg !10886
  br label %do.cond, !dbg !10887

do.cond:                                          ; preds = %if.end30
  %28 = load i32, i32* %mode.addr, align 4, !dbg !10888
  %cmp33 = icmp ne i32 %28, 0, !dbg !10889
  br i1 %cmp33, label %do.body, label %do.end, !dbg !10887, !llvm.loop !10890

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, align 4, !dbg !10892
  br label %return, !dbg !10892

return:                                           ; preds = %do.end, %if.then29, %if.then21, %if.then
  %29 = load i32, i32* %retval, align 4, !dbg !10893
  ret i32 %29, !dbg !10893
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prepare_operand(i32 %icode, %struct.rtx_def* %x, i32 %opnum, i32 %mode, i32 %wider_mode, i32 %unsignedp) #0 !dbg !10894 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %opnum.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %wider_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !10897, metadata !DIExpression()), !dbg !10898
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !10899, metadata !DIExpression()), !dbg !10900
  store i32 %opnum, i32* %opnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opnum.addr, metadata !10901, metadata !DIExpression()), !dbg !10902
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10903, metadata !DIExpression()), !dbg !10904
  store i32 %wider_mode, i32* %wider_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %wider_mode.addr, metadata !10905, metadata !DIExpression()), !dbg !10906
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !10907, metadata !DIExpression()), !dbg !10908
  %0 = load i32, i32* %mode.addr, align 4, !dbg !10909
  %1 = load i32, i32* %wider_mode.addr, align 4, !dbg !10911
  %cmp = icmp ne i32 %0, %1, !dbg !10912
  br i1 %cmp, label %if.then, label %if.end, !dbg !10913

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %wider_mode.addr, align 4, !dbg !10914
  %3 = load i32, i32* %mode.addr, align 4, !dbg !10915
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10916
  %5 = load i32, i32* %unsignedp.addr, align 4, !dbg !10917
  %call = call %struct.rtx_def* @convert_modes(i32 %2, i32 %3, %struct.rtx_def* %4, i32 %5), !dbg !10918
  store %struct.rtx_def* %call, %struct.rtx_def** %x.addr, align 8, !dbg !10919
  br label %if.end, !dbg !10920

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %icode.addr, align 4, !dbg !10921
  %idxprom = sext i32 %6 to i64, !dbg !10923
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !10923
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !10924
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !10924
  %8 = load i32, i32* %opnum.addr, align 4, !dbg !10925
  %idxprom1 = sext i32 %8 to i64, !dbg !10923
  %arrayidx2 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 %idxprom1, !dbg !10923
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx2, i32 0, i32 0, !dbg !10926
  %9 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !10926
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10927
  %11 = load i32, i32* %icode.addr, align 4, !dbg !10928
  %idxprom3 = sext i32 %11 to i64, !dbg !10929
  %arrayidx4 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom3, !dbg !10929
  %operand5 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx4, i32 0, i32 3, !dbg !10930
  %12 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand5, align 8, !dbg !10930
  %13 = load i32, i32* %opnum.addr, align 4, !dbg !10931
  %idxprom6 = sext i32 %13 to i64, !dbg !10929
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %12, i64 %idxprom6, !dbg !10929
  %mode8 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 2, !dbg !10932
  %bf.load = load i16, i16* %mode8, align 8, !dbg !10932
  %bf.cast = zext i16 %bf.load to i32, !dbg !10932
  %call9 = call i32 %9(%struct.rtx_def* %10, i32 %bf.cast), !dbg !10923
  %tobool = icmp ne i32 %call9, 0, !dbg !10923
  br i1 %tobool, label %if.end23, label %if.then10, !dbg !10933

if.then10:                                        ; preds = %if.end
  %14 = load i32, i32* @reload_completed, align 4, !dbg !10934
  %tobool11 = icmp ne i32 %14, 0, !dbg !10934
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !10937

if.then12:                                        ; preds = %if.then10
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10938
  br label %return, !dbg !10938

if.end13:                                         ; preds = %if.then10
  %15 = load i32, i32* %icode.addr, align 4, !dbg !10939
  %idxprom14 = sext i32 %15 to i64, !dbg !10940
  %arrayidx15 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom14, !dbg !10940
  %operand16 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx15, i32 0, i32 3, !dbg !10941
  %16 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand16, align 8, !dbg !10941
  %17 = load i32, i32* %opnum.addr, align 4, !dbg !10942
  %idxprom17 = sext i32 %17 to i64, !dbg !10940
  %arrayidx18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %16, i64 %idxprom17, !dbg !10940
  %mode19 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx18, i32 0, i32 2, !dbg !10943
  %bf.load20 = load i16, i16* %mode19, align 8, !dbg !10943
  %bf.cast21 = zext i16 %bf.load20 to i32, !dbg !10943
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10944
  %call22 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast21, %struct.rtx_def* %18), !dbg !10945
  store %struct.rtx_def* %call22, %struct.rtx_def** %x.addr, align 8, !dbg !10946
  br label %if.end23, !dbg !10947

if.end23:                                         ; preds = %if.end13, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10948
  store %struct.rtx_def* %19, %struct.rtx_def** %retval, align 8, !dbg !10949
  br label %return, !dbg !10949

return:                                           ; preds = %if.end23, %if.then12
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10950
  ret %struct.rtx_def* %20, !dbg !10950
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @emit_cmp_and_jump_insns(%struct.rtx_def* %x, %struct.rtx_def* %y, i32 %comparison, %struct.rtx_def* %size, i32 %mode, i32 %unsignedp, %struct.rtx_def* %label) #0 !dbg !10951 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %comparison.addr = alloca i32, align 4
  %size.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %label.addr = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %test = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !10954, metadata !DIExpression()), !dbg !10955
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !10956, metadata !DIExpression()), !dbg !10957
  store i32 %comparison, i32* %comparison.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comparison.addr, metadata !10958, metadata !DIExpression()), !dbg !10959
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size.addr, metadata !10960, metadata !DIExpression()), !dbg !10961
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10962, metadata !DIExpression()), !dbg !10963
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !10964, metadata !DIExpression()), !dbg !10965
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !10966, metadata !DIExpression()), !dbg !10967
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !10968, metadata !DIExpression()), !dbg !10969
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10970
  store %struct.rtx_def* %0, %struct.rtx_def** %op0, align 8, !dbg !10969
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !10971, metadata !DIExpression()), !dbg !10972
  %1 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !10973
  store %struct.rtx_def* %1, %struct.rtx_def** %op1, align 8, !dbg !10972
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test, metadata !10974, metadata !DIExpression()), !dbg !10975
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10976
  %3 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !10978
  %call = call zeroext i8 @swap_commutative_operands_p(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !10979
  %conv = zext i8 %call to i32, !dbg !10979
  %tobool = icmp ne i32 %conv, 0, !dbg !10979
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10980

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* %comparison.addr, align 4, !dbg !10981
  %call1 = call i32 @swap_condition(i32 %4), !dbg !10982
  %5 = load i32, i32* %mode.addr, align 4, !dbg !10983
  %call2 = call i32 @can_compare_p(i32 %call1, i32 %5, i32 0), !dbg !10984
  %tobool3 = icmp ne i32 %call2, 0, !dbg !10984
  br i1 %tobool3, label %if.then, label %if.end, !dbg !10985

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !10986
  store %struct.rtx_def* %6, %struct.rtx_def** %op0, align 8, !dbg !10988
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10989
  store %struct.rtx_def* %7, %struct.rtx_def** %op1, align 8, !dbg !10990
  %8 = load i32, i32* %comparison.addr, align 4, !dbg !10991
  %call4 = call i32 @swap_condition(i32 %8), !dbg !10992
  store i32 %call4, i32* %comparison.addr, align 4, !dbg !10993
  br label %if.end, !dbg !10994

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10995
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !10995
  %bf.load = load i32, i32* %10, align 8, !dbg !10995
  %bf.clear = and i32 %bf.load, 65535, !dbg !10995
  %idxprom = sext i32 %bf.clear to i64, !dbg !10995
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !10995
  %11 = load i32, i32* %arrayidx, align 4, !dbg !10995
  %cmp = icmp eq i32 %11, 9, !dbg !10995
  br i1 %cmp, label %if.then6, label %if.end8, !dbg !10997

if.then6:                                         ; preds = %if.end
  %12 = load i32, i32* %mode.addr, align 4, !dbg !10998
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10999
  %call7 = call %struct.rtx_def* @force_reg(i32 %12, %struct.rtx_def* %13), !dbg !11000
  store %struct.rtx_def* %call7, %struct.rtx_def** %op0, align 8, !dbg !11001
  br label %if.end8, !dbg !11002

if.end8:                                          ; preds = %if.then6, %if.end
  %14 = load i32, i32* %unsignedp.addr, align 4, !dbg !11003
  %tobool9 = icmp ne i32 %14, 0, !dbg !11003
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !11005

if.then10:                                        ; preds = %if.end8
  %15 = load i32, i32* %comparison.addr, align 4, !dbg !11006
  %call11 = call i32 @unsigned_condition(i32 %15), !dbg !11007
  store i32 %call11, i32* %comparison.addr, align 4, !dbg !11008
  br label %if.end12, !dbg !11009

if.end12:                                         ; preds = %if.then10, %if.end8
  %16 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11010
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11011
  %18 = load i32, i32* %comparison.addr, align 4, !dbg !11012
  %19 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11013
  %20 = load i32, i32* %unsignedp.addr, align 4, !dbg !11014
  call void @prepare_cmp_insn(%struct.rtx_def* %16, %struct.rtx_def* %17, i32 %18, %struct.rtx_def* %19, i32 %20, i32 3, %struct.rtx_def** %test, i32* %mode.addr), !dbg !11015
  %21 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !11016
  %22 = load i32, i32* %mode.addr, align 4, !dbg !11017
  %23 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !11018
  call void @emit_cmp_and_jump_insn_1(%struct.rtx_def* %21, i32 %22, %struct.rtx_def* %23), !dbg !11019
  ret void, !dbg !11020
}

declare dso_local zeroext i8 @swap_commutative_operands_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @swap_condition(i32) #2

declare dso_local i32 @unsigned_condition(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_cmp_insn(%struct.rtx_def* %x, %struct.rtx_def* %y, i32 %comparison, %struct.rtx_def* %size, i32 %unsignedp, i32 %methods, %struct.rtx_def** %ptest, i32* %pmode) #0 !dbg !11021 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %comparison.addr = alloca i32, align 4
  %size.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %ptest.addr = alloca %struct.rtx_def**, align 8
  %pmode.addr = alloca i32*, align 8
  %mode = alloca i32, align 4
  %libfunc = alloca %struct.rtx_def*, align 8
  %test = alloca %struct.rtx_def*, align 8
  %cmp_mode = alloca i32, align 4
  %mclass = alloca i32, align 4
  %result_mode = alloca i32, align 4
  %cmp_code = alloca i32, align 4
  %length_type = alloca %union.tree_node*, align 8
  %libfunc53 = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %opalign = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %result399 = alloca %struct.rtx_def*, align 8
  %ulibfunc = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11025, metadata !DIExpression()), !dbg !11026
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !11027, metadata !DIExpression()), !dbg !11028
  store i32 %comparison, i32* %comparison.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comparison.addr, metadata !11029, metadata !DIExpression()), !dbg !11030
  store %struct.rtx_def* %size, %struct.rtx_def** %size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size.addr, metadata !11031, metadata !DIExpression()), !dbg !11032
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !11033, metadata !DIExpression()), !dbg !11034
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !11035, metadata !DIExpression()), !dbg !11036
  store %struct.rtx_def** %ptest, %struct.rtx_def*** %ptest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ptest.addr, metadata !11037, metadata !DIExpression()), !dbg !11038
  store i32* %pmode, i32** %pmode.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pmode.addr, metadata !11039, metadata !DIExpression()), !dbg !11040
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11041, metadata !DIExpression()), !dbg !11042
  %0 = load i32*, i32** %pmode.addr, align 8, !dbg !11043
  %1 = load i32, i32* %0, align 4, !dbg !11044
  store i32 %1, i32* %mode, align 4, !dbg !11042
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !11045, metadata !DIExpression()), !dbg !11046
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test, metadata !11047, metadata !DIExpression()), !dbg !11048
  call void @llvm.dbg.declare(metadata i32* %cmp_mode, metadata !11049, metadata !DIExpression()), !dbg !11050
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !11051, metadata !DIExpression()), !dbg !11052
  %2 = load i32, i32* %methods.addr, align 4, !dbg !11053
  %cmp = icmp eq i32 %2, 0, !dbg !11053
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !11053

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %methods.addr, align 4, !dbg !11053
  %cmp1 = icmp eq i32 %3, 2, !dbg !11053
  br i1 %cmp1, label %cond.false, label %lor.lhs.false2, !dbg !11053

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %methods.addr, align 4, !dbg !11053
  %cmp3 = icmp eq i32 %4, 3, !dbg !11053
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !11053

cond.true:                                        ; preds = %lor.lhs.false2
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4060, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11053
  br label %cond.end, !dbg !11053

cond.false:                                       ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  br label %cond.end, !dbg !11053

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11053
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11054
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !11054
  %bf.load = load i32, i32* %6, align 8, !dbg !11054
  %bf.clear = and i32 %bf.load, 65535, !dbg !11054
  %idxprom = sext i32 %bf.clear to i64, !dbg !11054
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !11054
  %7 = load i32, i32* %arrayidx, align 4, !dbg !11054
  %cmp4 = icmp eq i32 %7, 9, !dbg !11054
  br i1 %cmp4, label %land.lhs.true, label %if.end, !dbg !11056

land.lhs.true:                                    ; preds = %cond.end
  %8 = load i32, i32* @optimize, align 4, !dbg !11057
  %tobool = icmp ne i32 %8, 0, !dbg !11057
  br i1 %tobool, label %land.lhs.true5, label %if.end, !dbg !11058

land.lhs.true5:                                   ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11059
  %call = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !11060
  %call6 = call i32 @rtx_cost(%struct.rtx_def* %9, i32 48, i8 zeroext %call), !dbg !11061
  %cmp7 = icmp sgt i32 %call6, 4, !dbg !11062
  br i1 %cmp7, label %if.then, label %if.end, !dbg !11063

if.then:                                          ; preds = %land.lhs.true5
  %10 = load i32, i32* %mode, align 4, !dbg !11064
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11065
  %call8 = call %struct.rtx_def* @force_reg(i32 %10, %struct.rtx_def* %11), !dbg !11066
  store %struct.rtx_def* %call8, %struct.rtx_def** %x.addr, align 8, !dbg !11067
  br label %if.end, !dbg !11068

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11069
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !11069
  %bf.load9 = load i32, i32* %13, align 8, !dbg !11069
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !11069
  %idxprom11 = sext i32 %bf.clear10 to i64, !dbg !11069
  %arrayidx12 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom11, !dbg !11069
  %14 = load i32, i32* %arrayidx12, align 4, !dbg !11069
  %cmp13 = icmp eq i32 %14, 9, !dbg !11069
  br i1 %cmp13, label %land.lhs.true14, label %if.end22, !dbg !11071

land.lhs.true14:                                  ; preds = %if.end
  %15 = load i32, i32* @optimize, align 4, !dbg !11072
  %tobool15 = icmp ne i32 %15, 0, !dbg !11072
  br i1 %tobool15, label %land.lhs.true16, label %if.end22, !dbg !11073

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %16 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11074
  %call17 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !11075
  %call18 = call i32 @rtx_cost(%struct.rtx_def* %16, i32 48, i8 zeroext %call17), !dbg !11076
  %cmp19 = icmp sgt i32 %call18, 4, !dbg !11077
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !11078

if.then20:                                        ; preds = %land.lhs.true16
  %17 = load i32, i32* %mode, align 4, !dbg !11079
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11080
  %call21 = call %struct.rtx_def* @force_reg(i32 %17, %struct.rtx_def* %18), !dbg !11081
  store %struct.rtx_def* %call21, %struct.rtx_def** %y.addr, align 8, !dbg !11082
  br label %if.end22, !dbg !11083

if.end22:                                         ; preds = %if.then20, %land.lhs.true16, %land.lhs.true14, %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11084
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !11084
  %bf.load23 = load i32, i32* %20, align 8, !dbg !11084
  %bf.lshr = lshr i32 %bf.load23, 16, !dbg !11084
  %bf.clear24 = and i32 %bf.lshr, 255, !dbg !11084
  %cmp25 = icmp eq i32 %bf.clear24, 0, !dbg !11086
  br i1 %cmp25, label %land.lhs.true26, label %if.end33, !dbg !11087

land.lhs.true26:                                  ; preds = %if.end22
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11088
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !11088
  %bf.load27 = load i32, i32* %22, align 8, !dbg !11088
  %bf.lshr28 = lshr i32 %bf.load27, 16, !dbg !11088
  %bf.clear29 = and i32 %bf.lshr28, 255, !dbg !11088
  %cmp30 = icmp eq i32 %bf.clear29, 0, !dbg !11089
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !11090

if.then31:                                        ; preds = %land.lhs.true26
  %23 = load i32, i32* %mode, align 4, !dbg !11091
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11092
  %call32 = call %struct.rtx_def* @force_reg(i32 %23, %struct.rtx_def* %24), !dbg !11093
  store %struct.rtx_def* %call32, %struct.rtx_def** %x.addr, align 8, !dbg !11094
  br label %if.end33, !dbg !11095

if.end33:                                         ; preds = %if.then31, %land.lhs.true26, %if.end22
  %25 = load i32, i32* %mode, align 4, !dbg !11096
  %cmp34 = icmp eq i32 %25, 0, !dbg !11098
  br i1 %cmp34, label %if.then35, label %if.end50, !dbg !11099

if.then35:                                        ; preds = %if.end33
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11100
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !11100
  %bf.load36 = load i32, i32* %27, align 8, !dbg !11100
  %bf.lshr37 = lshr i32 %bf.load36, 16, !dbg !11100
  %bf.clear38 = and i32 %bf.lshr37, 255, !dbg !11100
  %cmp39 = icmp ne i32 %bf.clear38, 0, !dbg !11101
  br i1 %cmp39, label %cond.true40, label %cond.false44, !dbg !11100

cond.true40:                                      ; preds = %if.then35
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11102
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !11102
  %bf.load41 = load i32, i32* %29, align 8, !dbg !11102
  %bf.lshr42 = lshr i32 %bf.load41, 16, !dbg !11102
  %bf.clear43 = and i32 %bf.lshr42, 255, !dbg !11102
  br label %cond.end48, !dbg !11100

cond.false44:                                     ; preds = %if.then35
  %30 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11103
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !11103
  %bf.load45 = load i32, i32* %31, align 8, !dbg !11103
  %bf.lshr46 = lshr i32 %bf.load45, 16, !dbg !11103
  %bf.clear47 = and i32 %bf.lshr46, 255, !dbg !11103
  br label %cond.end48, !dbg !11100

cond.end48:                                       ; preds = %cond.false44, %cond.true40
  %cond49 = phi i32 [ %bf.clear43, %cond.true40 ], [ %bf.clear47, %cond.false44 ], !dbg !11100
  store i32 %cond49, i32* %mode, align 4, !dbg !11104
  br label %if.end50, !dbg !11105

if.end50:                                         ; preds = %cond.end48, %if.end33
  %32 = load i32, i32* %mode, align 4, !dbg !11106
  %cmp51 = icmp eq i32 %32, 1, !dbg !11108
  br i1 %cmp51, label %if.then52, label %if.end259, !dbg !11109

if.then52:                                        ; preds = %if.end50
  call void @llvm.dbg.declare(metadata i32* %result_mode, metadata !11110, metadata !DIExpression()), !dbg !11112
  call void @llvm.dbg.declare(metadata i32* %cmp_code, metadata !11113, metadata !DIExpression()), !dbg !11114
  call void @llvm.dbg.declare(metadata %union.tree_node** %length_type, metadata !11115, metadata !DIExpression()), !dbg !11116
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc53, metadata !11117, metadata !DIExpression()), !dbg !11118
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !11119, metadata !DIExpression()), !dbg !11120
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %opalign, metadata !11121, metadata !DIExpression()), !dbg !11122
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11123
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !11123
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !11123
  %rt_mem = bitcast %union.rtunion_def* %arrayidx54 to %struct.mem_attrs**, !dbg !11123
  %34 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !11123
  %cmp55 = icmp ne %struct.mem_attrs* %34, null, !dbg !11123
  br i1 %cmp55, label %cond.true56, label %cond.false61, !dbg !11123

cond.true56:                                      ; preds = %if.then52
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11123
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !11123
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 1, !dbg !11123
  %rt_mem60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.mem_attrs**, !dbg !11123
  %36 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem60, align 8, !dbg !11123
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %36, i32 0, i32 4, !dbg !11123
  %37 = load i32, i32* %align, align 4, !dbg !11123
  br label %cond.end62, !dbg !11123

cond.false61:                                     ; preds = %if.then52
  br label %cond.end62, !dbg !11123

cond.end62:                                       ; preds = %cond.false61, %cond.true56
  %cond63 = phi i32 [ %37, %cond.true56 ], [ 8, %cond.false61 ], !dbg !11123
  %38 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11123
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !11123
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 1, !dbg !11123
  %rt_mem67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.mem_attrs**, !dbg !11123
  %39 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem67, align 8, !dbg !11123
  %cmp68 = icmp ne %struct.mem_attrs* %39, null, !dbg !11123
  br i1 %cmp68, label %cond.true69, label %cond.false75, !dbg !11123

cond.true69:                                      ; preds = %cond.end62
  %40 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11123
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !11123
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 1, !dbg !11123
  %rt_mem73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.mem_attrs**, !dbg !11123
  %41 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem73, align 8, !dbg !11123
  %align74 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %41, i32 0, i32 4, !dbg !11123
  %42 = load i32, i32* %align74, align 4, !dbg !11123
  br label %cond.end76, !dbg !11123

cond.false75:                                     ; preds = %cond.end62
  br label %cond.end76, !dbg !11123

cond.end76:                                       ; preds = %cond.false75, %cond.true69
  %cond77 = phi i32 [ %42, %cond.true69 ], [ 8, %cond.false75 ], !dbg !11123
  %cmp78 = icmp ult i32 %cond63, %cond77, !dbg !11123
  br i1 %cmp78, label %cond.true79, label %cond.false94, !dbg !11123

cond.true79:                                      ; preds = %cond.end76
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11123
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !11123
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 1, !dbg !11123
  %rt_mem83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.mem_attrs**, !dbg !11123
  %44 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem83, align 8, !dbg !11123
  %cmp84 = icmp ne %struct.mem_attrs* %44, null, !dbg !11123
  br i1 %cmp84, label %cond.true85, label %cond.false91, !dbg !11123

cond.true85:                                      ; preds = %cond.true79
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11123
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !11123
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 1, !dbg !11123
  %rt_mem89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.mem_attrs**, !dbg !11123
  %46 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem89, align 8, !dbg !11123
  %align90 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %46, i32 0, i32 4, !dbg !11123
  %47 = load i32, i32* %align90, align 4, !dbg !11123
  br label %cond.end92, !dbg !11123

cond.false91:                                     ; preds = %cond.true79
  br label %cond.end92, !dbg !11123

cond.end92:                                       ; preds = %cond.false91, %cond.true85
  %cond93 = phi i32 [ %47, %cond.true85 ], [ 8, %cond.false91 ], !dbg !11123
  br label %cond.end109, !dbg !11123

cond.false94:                                     ; preds = %cond.end76
  %48 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11123
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !11123
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 1, !dbg !11123
  %rt_mem98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.mem_attrs**, !dbg !11123
  %49 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem98, align 8, !dbg !11123
  %cmp99 = icmp ne %struct.mem_attrs* %49, null, !dbg !11123
  br i1 %cmp99, label %cond.true100, label %cond.false106, !dbg !11123

cond.true100:                                     ; preds = %cond.false94
  %50 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11123
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !11123
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !11123
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 1, !dbg !11123
  %rt_mem104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.mem_attrs**, !dbg !11123
  %51 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem104, align 8, !dbg !11123
  %align105 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %51, i32 0, i32 4, !dbg !11123
  %52 = load i32, i32* %align105, align 4, !dbg !11123
  br label %cond.end107, !dbg !11123

cond.false106:                                    ; preds = %cond.false94
  br label %cond.end107, !dbg !11123

cond.end107:                                      ; preds = %cond.false106, %cond.true100
  %cond108 = phi i32 [ %52, %cond.true100 ], [ 8, %cond.false106 ], !dbg !11123
  br label %cond.end109, !dbg !11123

cond.end109:                                      ; preds = %cond.end107, %cond.end92
  %cond110 = phi i32 [ %cond93, %cond.end92 ], [ %cond108, %cond.end107 ], !dbg !11123
  %div = udiv i32 %cond110, 8, !dbg !11123
  %conv = zext i32 %div to i64, !dbg !11123
  %call111 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !11123
  store %struct.rtx_def* %call111, %struct.rtx_def** %opalign, align 8, !dbg !11122
  %53 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11124
  %tobool112 = icmp ne %struct.rtx_def* %53, null, !dbg !11124
  br i1 %tobool112, label %cond.false114, label %cond.true113, !dbg !11124

cond.true113:                                     ; preds = %cond.end109
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4098, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11124
  br label %cond.end115, !dbg !11124

cond.false114:                                    ; preds = %cond.end109
  br label %cond.end115, !dbg !11124

cond.end115:                                      ; preds = %cond.false114, %cond.true113
  %cond116 = phi i32 [ 0, %cond.true113 ], [ 0, %cond.false114 ], !dbg !11124
  %54 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 2), align 2, !dbg !11125
  %conv117 = zext i8 %54 to i32, !dbg !11125
  store i32 %conv117, i32* %cmp_mode, align 4, !dbg !11127
  br label %for.cond, !dbg !11128

for.cond:                                         ; preds = %for.inc, %cond.end115
  %55 = load i32, i32* %cmp_mode, align 4, !dbg !11129
  %cmp118 = icmp ne i32 %55, 0, !dbg !11131
  br i1 %cmp118, label %for.body, label %for.end, !dbg !11132

for.body:                                         ; preds = %for.cond
  %56 = load i32, i32* %cmp_mode, align 4, !dbg !11133
  %idxprom120 = zext i32 %56 to i64, !dbg !11135
  %arrayidx121 = getelementptr inbounds [87 x i32], [87 x i32]* @cmpmem_optab, i64 0, i64 %idxprom120, !dbg !11135
  %57 = load i32, i32* %arrayidx121, align 4, !dbg !11135
  store i32 %57, i32* %cmp_code, align 4, !dbg !11136
  %58 = load i32, i32* %cmp_code, align 4, !dbg !11137
  %cmp122 = icmp eq i32 %58, 2956, !dbg !11139
  br i1 %cmp122, label %if.then124, label %if.end127, !dbg !11140

if.then124:                                       ; preds = %for.body
  %59 = load i32, i32* %cmp_mode, align 4, !dbg !11141
  %idxprom125 = zext i32 %59 to i64, !dbg !11142
  %arrayidx126 = getelementptr inbounds [87 x i32], [87 x i32]* @cmpstr_optab, i64 0, i64 %idxprom125, !dbg !11142
  %60 = load i32, i32* %arrayidx126, align 4, !dbg !11142
  store i32 %60, i32* %cmp_code, align 4, !dbg !11143
  br label %if.end127, !dbg !11144

if.end127:                                        ; preds = %if.then124, %for.body
  %61 = load i32, i32* %cmp_code, align 4, !dbg !11145
  %cmp128 = icmp eq i32 %61, 2956, !dbg !11147
  br i1 %cmp128, label %if.then130, label %if.end133, !dbg !11148

if.then130:                                       ; preds = %if.end127
  %62 = load i32, i32* %cmp_mode, align 4, !dbg !11149
  %idxprom131 = zext i32 %62 to i64, !dbg !11150
  %arrayidx132 = getelementptr inbounds [87 x i32], [87 x i32]* @cmpstrn_optab, i64 0, i64 %idxprom131, !dbg !11150
  %63 = load i32, i32* %arrayidx132, align 4, !dbg !11150
  store i32 %63, i32* %cmp_code, align 4, !dbg !11151
  br label %if.end133, !dbg !11152

if.end133:                                        ; preds = %if.then130, %if.end127
  %64 = load i32, i32* %cmp_code, align 4, !dbg !11153
  %cmp134 = icmp eq i32 %64, 2956, !dbg !11155
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !11156

if.then136:                                       ; preds = %if.end133
  br label %for.inc, !dbg !11157

if.end137:                                        ; preds = %if.end133
  %65 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11158
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !11158
  %bf.load138 = load i32, i32* %66, align 8, !dbg !11158
  %bf.clear139 = and i32 %bf.load138, 65535, !dbg !11158
  %cmp140 = icmp eq i32 %bf.clear139, 30, !dbg !11158
  br i1 %cmp140, label %land.lhs.true142, label %lor.lhs.false154, !dbg !11160

land.lhs.true142:                                 ; preds = %if.end137
  %67 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11161
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !11161
  %hwint = bitcast %union.u* %u143 to [1 x i64]*, !dbg !11161
  %arrayidx144 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !11161
  %68 = load i64, i64* %arrayidx144, align 8, !dbg !11161
  %69 = load i32, i32* %cmp_mode, align 4, !dbg !11162
  %idxprom145 = zext i32 %69 to i64, !dbg !11162
  %arrayidx146 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom145, !dbg !11162
  %70 = load i8, i8* %arrayidx146, align 1, !dbg !11162
  %conv147 = zext i8 %70 to i16, !dbg !11162
  %conv148 = zext i16 %conv147 to i32, !dbg !11162
  %mul = mul nsw i32 %conv148, 8, !dbg !11162
  %conv149 = trunc i32 %mul to i16, !dbg !11162
  %conv150 = zext i16 %conv149 to i32, !dbg !11162
  %shl = shl i32 1, %conv150, !dbg !11163
  %conv151 = sext i32 %shl to i64, !dbg !11164
  %cmp152 = icmp sge i64 %68, %conv151, !dbg !11165
  br i1 %cmp152, label %if.then174, label %lor.lhs.false154, !dbg !11166

lor.lhs.false154:                                 ; preds = %land.lhs.true142, %if.end137
  %71 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11167
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !11167
  %bf.load155 = load i32, i32* %72, align 8, !dbg !11167
  %bf.lshr156 = lshr i32 %bf.load155, 16, !dbg !11167
  %bf.clear157 = and i32 %bf.lshr156, 255, !dbg !11167
  %idxprom158 = zext i32 %bf.clear157 to i64, !dbg !11167
  %arrayidx159 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom158, !dbg !11167
  %73 = load i8, i8* %arrayidx159, align 1, !dbg !11167
  %conv160 = zext i8 %73 to i16, !dbg !11167
  %conv161 = zext i16 %conv160 to i32, !dbg !11167
  %mul162 = mul nsw i32 %conv161, 8, !dbg !11167
  %conv163 = trunc i32 %mul162 to i16, !dbg !11167
  %conv164 = zext i16 %conv163 to i32, !dbg !11167
  %74 = load i32, i32* %cmp_mode, align 4, !dbg !11168
  %idxprom165 = zext i32 %74 to i64, !dbg !11168
  %arrayidx166 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom165, !dbg !11168
  %75 = load i8, i8* %arrayidx166, align 1, !dbg !11168
  %conv167 = zext i8 %75 to i16, !dbg !11168
  %conv168 = zext i16 %conv167 to i32, !dbg !11168
  %mul169 = mul nsw i32 %conv168, 8, !dbg !11168
  %conv170 = trunc i32 %mul169 to i16, !dbg !11168
  %conv171 = zext i16 %conv170 to i32, !dbg !11168
  %cmp172 = icmp sgt i32 %conv164, %conv171, !dbg !11169
  br i1 %cmp172, label %if.then174, label %if.end175, !dbg !11170

if.then174:                                       ; preds = %lor.lhs.false154, %land.lhs.true142
  br label %for.inc, !dbg !11171

if.end175:                                        ; preds = %lor.lhs.false154
  %76 = load i32, i32* %cmp_code, align 4, !dbg !11172
  %idxprom176 = zext i32 %76 to i64, !dbg !11173
  %arrayidx177 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom176, !dbg !11173
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx177, i32 0, i32 3, !dbg !11174
  %77 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !11174
  %arrayidx178 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %77, i64 0, !dbg !11173
  %mode179 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx178, i32 0, i32 2, !dbg !11175
  %bf.load180 = load i16, i16* %mode179, align 8, !dbg !11175
  %bf.cast = zext i16 %bf.load180 to i32, !dbg !11175
  store i32 %bf.cast, i32* %result_mode, align 4, !dbg !11176
  %78 = load i32, i32* %result_mode, align 4, !dbg !11177
  %call181 = call %struct.rtx_def* @gen_reg_rtx(i32 %78), !dbg !11178
  store %struct.rtx_def* %call181, %struct.rtx_def** %result, align 8, !dbg !11179
  %79 = load i32, i32* %cmp_mode, align 4, !dbg !11180
  %80 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11181
  %call182 = call %struct.rtx_def* @convert_to_mode(i32 %79, %struct.rtx_def* %80, i32 1), !dbg !11182
  store %struct.rtx_def* %call182, %struct.rtx_def** %size.addr, align 8, !dbg !11183
  %81 = load i32, i32* %cmp_code, align 4, !dbg !11184
  %idxprom183 = zext i32 %81 to i64, !dbg !11184
  %arrayidx184 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom183, !dbg !11184
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx184, i32 0, i32 2, !dbg !11184
  %82 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !11184
  %83 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !11185
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11186
  %85 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11187
  %86 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11188
  %87 = load %struct.rtx_def*, %struct.rtx_def** %opalign, align 8, !dbg !11189
  %call185 = call %struct.rtx_def* (%struct.rtx_def*, ...) %82(%struct.rtx_def* %83, %struct.rtx_def* %84, %struct.rtx_def* %85, %struct.rtx_def* %86, %struct.rtx_def* %87), !dbg !11184
  %call186 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call185), !dbg !11190
  %88 = load i32, i32* %comparison.addr, align 4, !dbg !11191
  %89 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !11191
  %90 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11191
  %call187 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %88, i32 0, %struct.rtx_def* %89, %struct.rtx_def* %90), !dbg !11191
  %91 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11192
  store %struct.rtx_def* %call187, %struct.rtx_def** %91, align 8, !dbg !11193
  %92 = load i32, i32* %result_mode, align 4, !dbg !11194
  %93 = load i32*, i32** %pmode.addr, align 8, !dbg !11195
  store i32 %92, i32* %93, align 4, !dbg !11196
  br label %return, !dbg !11197

for.inc:                                          ; preds = %if.then174, %if.then136
  %94 = load i32, i32* %cmp_mode, align 4, !dbg !11198
  %idxprom188 = zext i32 %94 to i64, !dbg !11198
  %arrayidx189 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom188, !dbg !11198
  %95 = load i8, i8* %arrayidx189, align 1, !dbg !11198
  %conv190 = zext i8 %95 to i32, !dbg !11198
  store i32 %conv190, i32* %cmp_mode, align 4, !dbg !11199
  br label %for.cond, !dbg !11200, !llvm.loop !11201

for.end:                                          ; preds = %for.cond
  %96 = load i32, i32* %methods.addr, align 4, !dbg !11203
  %cmp191 = icmp ne i32 %96, 1, !dbg !11205
  br i1 %cmp191, label %land.lhs.true193, label %if.end197, !dbg !11206

land.lhs.true193:                                 ; preds = %for.end
  %97 = load i32, i32* %methods.addr, align 4, !dbg !11207
  %cmp194 = icmp ne i32 %97, 3, !dbg !11208
  br i1 %cmp194, label %if.then196, label %if.end197, !dbg !11209

if.then196:                                       ; preds = %land.lhs.true193
  br label %fail, !dbg !11210

if.end197:                                        ; preds = %land.lhs.true193, %for.end
  %98 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 3), align 8, !dbg !11211
  store %struct.rtx_def* %98, %struct.rtx_def** %libfunc53, align 8, !dbg !11212
  %99 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !11213
  store %union.tree_node* %99, %union.tree_node** %length_type, align 8, !dbg !11214
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !11215
  %base = bitcast %union.tree_node* %100 to %struct.tree_base*, !dbg !11215
  %101 = bitcast %struct.tree_base* %base to i64*, !dbg !11215
  %bf.load198 = load i64, i64* %101, align 8, !dbg !11215
  %bf.clear199 = and i64 %bf.load198, 65535, !dbg !11215
  %bf.cast200 = trunc i64 %bf.clear199 to i32, !dbg !11215
  %cmp201 = icmp eq i32 %bf.cast200, 14, !dbg !11215
  br i1 %cmp201, label %cond.true203, label %cond.false205, !dbg !11215

cond.true203:                                     ; preds = %if.end197
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !11215
  %call204 = call i32 @vector_type_mode(%union.tree_node* %102), !dbg !11215
  br label %cond.end210, !dbg !11215

cond.false205:                                    ; preds = %if.end197
  %103 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !11215
  %type = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !11215
  %mode206 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !11215
  %bf.load207 = load i32, i32* %mode206, align 4, !dbg !11215
  %bf.lshr208 = lshr i32 %bf.load207, 16, !dbg !11215
  %bf.clear209 = and i32 %bf.lshr208, 255, !dbg !11215
  br label %cond.end210, !dbg !11215

cond.end210:                                      ; preds = %cond.false205, %cond.true203
  %cond211 = phi i32 [ %call204, %cond.true203 ], [ %bf.clear209, %cond.false205 ], !dbg !11215
  store i32 %cond211, i32* %result_mode, align 4, !dbg !11216
  %104 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11217
  %base212 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !11217
  %105 = bitcast %struct.tree_base* %base212 to i64*, !dbg !11217
  %bf.load213 = load i64, i64* %105, align 8, !dbg !11217
  %bf.clear214 = and i64 %bf.load213, 65535, !dbg !11217
  %bf.cast215 = trunc i64 %bf.clear214 to i32, !dbg !11217
  %cmp216 = icmp eq i32 %bf.cast215, 14, !dbg !11217
  br i1 %cmp216, label %cond.true218, label %cond.false220, !dbg !11217

cond.true218:                                     ; preds = %cond.end210
  %106 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11217
  %call219 = call i32 @vector_type_mode(%union.tree_node* %106), !dbg !11217
  br label %cond.end226, !dbg !11217

cond.false220:                                    ; preds = %cond.end210
  %107 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11217
  %type221 = bitcast %union.tree_node* %107 to %struct.tree_type*, !dbg !11217
  %mode222 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type221, i32 0, i32 6, !dbg !11217
  %bf.load223 = load i32, i32* %mode222, align 4, !dbg !11217
  %bf.lshr224 = lshr i32 %bf.load223, 16, !dbg !11217
  %bf.clear225 = and i32 %bf.lshr224, 255, !dbg !11217
  br label %cond.end226, !dbg !11217

cond.end226:                                      ; preds = %cond.false220, %cond.true218
  %cond227 = phi i32 [ %call219, %cond.true218 ], [ %bf.clear225, %cond.false220 ], !dbg !11217
  store i32 %cond227, i32* %cmp_mode, align 4, !dbg !11218
  %108 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11219
  %base228 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !11219
  %109 = bitcast %struct.tree_base* %base228 to i64*, !dbg !11219
  %bf.load229 = load i64, i64* %109, align 8, !dbg !11219
  %bf.clear230 = and i64 %bf.load229, 65535, !dbg !11219
  %bf.cast231 = trunc i64 %bf.clear230 to i32, !dbg !11219
  %cmp232 = icmp eq i32 %bf.cast231, 14, !dbg !11219
  br i1 %cmp232, label %cond.true234, label %cond.false236, !dbg !11219

cond.true234:                                     ; preds = %cond.end226
  %110 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11219
  %call235 = call i32 @vector_type_mode(%union.tree_node* %110), !dbg !11219
  br label %cond.end242, !dbg !11219

cond.false236:                                    ; preds = %cond.end226
  %111 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11219
  %type237 = bitcast %union.tree_node* %111 to %struct.tree_type*, !dbg !11219
  %mode238 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type237, i32 0, i32 6, !dbg !11219
  %bf.load239 = load i32, i32* %mode238, align 4, !dbg !11219
  %bf.lshr240 = lshr i32 %bf.load239, 16, !dbg !11219
  %bf.clear241 = and i32 %bf.lshr240, 255, !dbg !11219
  br label %cond.end242, !dbg !11219

cond.end242:                                      ; preds = %cond.false236, %cond.true234
  %cond243 = phi i32 [ %call235, %cond.true234 ], [ %bf.clear241, %cond.false236 ], !dbg !11219
  %112 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11220
  %113 = load %union.tree_node*, %union.tree_node** %length_type, align 8, !dbg !11221
  %base244 = bitcast %union.tree_node* %113 to %struct.tree_base*, !dbg !11221
  %114 = bitcast %struct.tree_base* %base244 to i64*, !dbg !11221
  %bf.load245 = load i64, i64* %114, align 8, !dbg !11221
  %bf.lshr246 = lshr i64 %bf.load245, 21, !dbg !11221
  %bf.clear247 = and i64 %bf.lshr246, 1, !dbg !11221
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !11221
  %call249 = call %struct.rtx_def* @convert_to_mode(i32 %cond243, %struct.rtx_def* %112, i32 %bf.cast248), !dbg !11222
  store %struct.rtx_def* %call249, %struct.rtx_def** %size.addr, align 8, !dbg !11223
  %115 = load %struct.rtx_def*, %struct.rtx_def** %libfunc53, align 8, !dbg !11224
  %116 = load i32, i32* %result_mode, align 4, !dbg !11225
  %117 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11226
  %u250 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !11226
  %fld251 = bitcast %union.u* %u250 to [1 x %union.rtunion_def]*, !dbg !11226
  %arrayidx252 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld251, i64 0, i64 0, !dbg !11226
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx252 to %struct.rtx_def**, !dbg !11226
  %118 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11226
  %119 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11227
  %u253 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !11227
  %fld254 = bitcast %union.u* %u253 to [1 x %union.rtunion_def]*, !dbg !11227
  %arrayidx255 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld254, i64 0, i64 0, !dbg !11227
  %rt_rtx256 = bitcast %union.rtunion_def* %arrayidx255 to %struct.rtx_def**, !dbg !11227
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx256, align 8, !dbg !11227
  %121 = load %struct.rtx_def*, %struct.rtx_def** %size.addr, align 8, !dbg !11228
  %122 = load i32, i32* %cmp_mode, align 4, !dbg !11229
  %call257 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %115, %struct.rtx_def* null, i32 2, i32 %116, i32 3, %struct.rtx_def* %118, i32 16, %struct.rtx_def* %120, i32 16, %struct.rtx_def* %121, i32 %122), !dbg !11230
  store %struct.rtx_def* %call257, %struct.rtx_def** %result, align 8, !dbg !11231
  %123 = load i32, i32* %comparison.addr, align 4, !dbg !11232
  %124 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !11232
  %125 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11232
  %call258 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %123, i32 0, %struct.rtx_def* %124, %struct.rtx_def* %125), !dbg !11232
  %126 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11233
  store %struct.rtx_def* %call258, %struct.rtx_def** %126, align 8, !dbg !11234
  %127 = load i32, i32* %result_mode, align 4, !dbg !11235
  %128 = load i32*, i32** %pmode.addr, align 8, !dbg !11236
  store i32 %127, i32* %128, align 4, !dbg !11237
  br label %return, !dbg !11238

if.end259:                                        ; preds = %if.end50
  %129 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !11239
  %tobool260 = icmp ne i32 %129, 0, !dbg !11239
  br i1 %tobool260, label %if.then261, label %if.end272, !dbg !11241

if.then261:                                       ; preds = %if.end259
  %130 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11242
  %call262 = call i32 @may_trap_p(%struct.rtx_def* %130), !dbg !11245
  %tobool263 = icmp ne i32 %call262, 0, !dbg !11245
  br i1 %tobool263, label %if.then264, label %if.end266, !dbg !11246

if.then264:                                       ; preds = %if.then261
  %131 = load i32, i32* %mode, align 4, !dbg !11247
  %132 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11248
  %call265 = call %struct.rtx_def* @force_reg(i32 %131, %struct.rtx_def* %132), !dbg !11249
  store %struct.rtx_def* %call265, %struct.rtx_def** %x.addr, align 8, !dbg !11250
  br label %if.end266, !dbg !11251

if.end266:                                        ; preds = %if.then264, %if.then261
  %133 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11252
  %call267 = call i32 @may_trap_p(%struct.rtx_def* %133), !dbg !11254
  %tobool268 = icmp ne i32 %call267, 0, !dbg !11254
  br i1 %tobool268, label %if.then269, label %if.end271, !dbg !11255

if.then269:                                       ; preds = %if.end266
  %134 = load i32, i32* %mode, align 4, !dbg !11256
  %135 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11257
  %call270 = call %struct.rtx_def* @force_reg(i32 %134, %struct.rtx_def* %135), !dbg !11258
  store %struct.rtx_def* %call270, %struct.rtx_def** %y.addr, align 8, !dbg !11259
  br label %if.end271, !dbg !11260

if.end271:                                        ; preds = %if.then269, %if.end266
  br label %if.end272, !dbg !11261

if.end272:                                        ; preds = %if.end271, %if.end259
  %136 = load i32, i32* %mode, align 4, !dbg !11262
  %idxprom273 = zext i32 %136 to i64, !dbg !11262
  %arrayidx274 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom273, !dbg !11262
  %137 = load i8, i8* %arrayidx274, align 1, !dbg !11262
  %conv275 = zext i8 %137 to i32, !dbg !11262
  %cmp276 = icmp eq i32 %conv275, 1, !dbg !11264
  br i1 %cmp276, label %if.then278, label %if.end286, !dbg !11265

if.then278:                                       ; preds = %if.end272
  %138 = load i32, i32* %comparison.addr, align 4, !dbg !11266
  %call279 = call i32 @can_compare_p(i32 %138, i32 2, i32 0), !dbg !11266
  %tobool280 = icmp ne i32 %call279, 0, !dbg !11266
  br i1 %tobool280, label %cond.false282, label %cond.true281, !dbg !11266

cond.true281:                                     ; preds = %if.then278
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4165, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11266
  br label %cond.end283, !dbg !11266

cond.false282:                                    ; preds = %if.then278
  br label %cond.end283, !dbg !11266

cond.end283:                                      ; preds = %cond.false282, %cond.true281
  %cond284 = phi i32 [ 0, %cond.true281 ], [ 0, %cond.false282 ], !dbg !11266
  %139 = load i32, i32* %comparison.addr, align 4, !dbg !11268
  %140 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11268
  %141 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11268
  %call285 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %139, i32 0, %struct.rtx_def* %140, %struct.rtx_def* %141), !dbg !11268
  %142 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11269
  store %struct.rtx_def* %call285, %struct.rtx_def** %142, align 8, !dbg !11270
  br label %return, !dbg !11271

if.end286:                                        ; preds = %if.end272
  %143 = load i32, i32* %mode, align 4, !dbg !11272
  %idxprom287 = zext i32 %143 to i64, !dbg !11272
  %arrayidx288 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom287, !dbg !11272
  %144 = load i8, i8* %arrayidx288, align 1, !dbg !11272
  %conv289 = zext i8 %144 to i32, !dbg !11272
  store i32 %conv289, i32* %mclass, align 4, !dbg !11273
  %145 = load i32, i32* %comparison.addr, align 4, !dbg !11274
  %146 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11274
  %147 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11274
  %call290 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %145, i32 0, %struct.rtx_def* %146, %struct.rtx_def* %147), !dbg !11274
  store %struct.rtx_def* %call290, %struct.rtx_def** %test, align 8, !dbg !11275
  %148 = load i32, i32* %mode, align 4, !dbg !11276
  store i32 %148, i32* %cmp_mode, align 4, !dbg !11277
  br label %do.body, !dbg !11278

do.body:                                          ; preds = %do.cond, %if.end286
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !11279, metadata !DIExpression()), !dbg !11281
  %149 = load i32, i32* %cmp_mode, align 4, !dbg !11282
  %idxprom291 = sext i32 %149 to i64, !dbg !11282
  %arrayidx292 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 115, i32 4), i64 0, i64 %idxprom291, !dbg !11282
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx292, i32 0, i32 0, !dbg !11283
  %150 = load i32, i32* %insn_code, align 4, !dbg !11283
  store i32 %150, i32* %icode, align 4, !dbg !11284
  %151 = load i32, i32* %icode, align 4, !dbg !11285
  %cmp293 = icmp ne i32 %151, 2956, !dbg !11287
  br i1 %cmp293, label %land.lhs.true295, label %if.end349, !dbg !11288

land.lhs.true295:                                 ; preds = %do.body
  %152 = load i32, i32* %icode, align 4, !dbg !11289
  %idxprom296 = zext i32 %152 to i64, !dbg !11290
  %arrayidx297 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom296, !dbg !11290
  %operand298 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx297, i32 0, i32 3, !dbg !11291
  %153 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand298, align 8, !dbg !11291
  %arrayidx299 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %153, i64 0, !dbg !11290
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx299, i32 0, i32 0, !dbg !11292
  %154 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11292
  %155 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !11293
  %call300 = call i32 %154(%struct.rtx_def* %155, i32 0), !dbg !11290
  %tobool301 = icmp ne i32 %call300, 0, !dbg !11290
  br i1 %tobool301, label %if.then302, label %if.end349, !dbg !11294

if.then302:                                       ; preds = %land.lhs.true295
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !11295, metadata !DIExpression()), !dbg !11297
  %call303 = call %struct.rtx_def* @get_last_insn(), !dbg !11298
  store %struct.rtx_def* %call303, %struct.rtx_def** %last, align 8, !dbg !11297
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !11299, metadata !DIExpression()), !dbg !11300
  %156 = load i32, i32* %icode, align 4, !dbg !11301
  %157 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11302
  %158 = load i32, i32* %mode, align 4, !dbg !11303
  %159 = load i32, i32* %cmp_mode, align 4, !dbg !11304
  %160 = load i32, i32* %unsignedp.addr, align 4, !dbg !11305
  %call304 = call %struct.rtx_def* @prepare_operand(i32 %156, %struct.rtx_def* %157, i32 1, i32 %158, i32 %159, i32 %160), !dbg !11306
  store %struct.rtx_def* %call304, %struct.rtx_def** %op0, align 8, !dbg !11300
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !11307, metadata !DIExpression()), !dbg !11308
  %161 = load i32, i32* %icode, align 4, !dbg !11309
  %162 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11310
  %163 = load i32, i32* %mode, align 4, !dbg !11311
  %164 = load i32, i32* %cmp_mode, align 4, !dbg !11312
  %165 = load i32, i32* %unsignedp.addr, align 4, !dbg !11313
  %call305 = call %struct.rtx_def* @prepare_operand(i32 %161, %struct.rtx_def* %162, i32 2, i32 %163, i32 %164, i32 %165), !dbg !11314
  store %struct.rtx_def* %call305, %struct.rtx_def** %op1, align 8, !dbg !11308
  %166 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11315
  %tobool306 = icmp ne %struct.rtx_def* %166, null, !dbg !11315
  br i1 %tobool306, label %land.lhs.true307, label %if.end348, !dbg !11317

land.lhs.true307:                                 ; preds = %if.then302
  %167 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11318
  %tobool308 = icmp ne %struct.rtx_def* %167, null, !dbg !11318
  br i1 %tobool308, label %land.lhs.true309, label %if.end348, !dbg !11319

land.lhs.true309:                                 ; preds = %land.lhs.true307
  %168 = load i32, i32* %icode, align 4, !dbg !11320
  %idxprom310 = zext i32 %168 to i64, !dbg !11321
  %arrayidx311 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom310, !dbg !11321
  %operand312 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx311, i32 0, i32 3, !dbg !11322
  %169 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand312, align 8, !dbg !11322
  %arrayidx313 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %169, i64 1, !dbg !11321
  %predicate314 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx313, i32 0, i32 0, !dbg !11323
  %170 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate314, align 8, !dbg !11323
  %171 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11324
  %172 = load i32, i32* %icode, align 4, !dbg !11325
  %idxprom315 = zext i32 %172 to i64, !dbg !11326
  %arrayidx316 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom315, !dbg !11326
  %operand317 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx316, i32 0, i32 3, !dbg !11327
  %173 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand317, align 8, !dbg !11327
  %arrayidx318 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %173, i64 1, !dbg !11326
  %mode319 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx318, i32 0, i32 2, !dbg !11328
  %bf.load320 = load i16, i16* %mode319, align 8, !dbg !11328
  %bf.cast321 = zext i16 %bf.load320 to i32, !dbg !11328
  %call322 = call i32 %170(%struct.rtx_def* %171, i32 %bf.cast321), !dbg !11321
  %tobool323 = icmp ne i32 %call322, 0, !dbg !11321
  br i1 %tobool323, label %land.lhs.true324, label %if.end348, !dbg !11329

land.lhs.true324:                                 ; preds = %land.lhs.true309
  %174 = load i32, i32* %icode, align 4, !dbg !11330
  %idxprom325 = zext i32 %174 to i64, !dbg !11331
  %arrayidx326 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom325, !dbg !11331
  %operand327 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx326, i32 0, i32 3, !dbg !11332
  %175 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand327, align 8, !dbg !11332
  %arrayidx328 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %175, i64 2, !dbg !11331
  %predicate329 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx328, i32 0, i32 0, !dbg !11333
  %176 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate329, align 8, !dbg !11333
  %177 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11334
  %178 = load i32, i32* %icode, align 4, !dbg !11335
  %idxprom330 = zext i32 %178 to i64, !dbg !11336
  %arrayidx331 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom330, !dbg !11336
  %operand332 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx331, i32 0, i32 3, !dbg !11337
  %179 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand332, align 8, !dbg !11337
  %arrayidx333 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %179, i64 2, !dbg !11336
  %mode334 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx333, i32 0, i32 2, !dbg !11338
  %bf.load335 = load i16, i16* %mode334, align 8, !dbg !11338
  %bf.cast336 = zext i16 %bf.load335 to i32, !dbg !11338
  %call337 = call i32 %176(%struct.rtx_def* %177, i32 %bf.cast336), !dbg !11331
  %tobool338 = icmp ne i32 %call337, 0, !dbg !11331
  br i1 %tobool338, label %if.then339, label %if.end348, !dbg !11339

if.then339:                                       ; preds = %land.lhs.true324
  %180 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11340
  %181 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !11342
  %u340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !11342
  %fld341 = bitcast %union.u* %u340 to [1 x %union.rtunion_def]*, !dbg !11342
  %arrayidx342 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld341, i64 0, i64 0, !dbg !11342
  %rt_rtx343 = bitcast %union.rtunion_def* %arrayidx342 to %struct.rtx_def**, !dbg !11342
  store %struct.rtx_def* %180, %struct.rtx_def** %rt_rtx343, align 8, !dbg !11343
  %182 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11344
  %183 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !11345
  %u344 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1, !dbg !11345
  %fld345 = bitcast %union.u* %u344 to [1 x %union.rtunion_def]*, !dbg !11345
  %arrayidx346 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld345, i64 0, i64 1, !dbg !11345
  %rt_rtx347 = bitcast %union.rtunion_def* %arrayidx346 to %struct.rtx_def**, !dbg !11345
  store %struct.rtx_def* %182, %struct.rtx_def** %rt_rtx347, align 8, !dbg !11346
  %184 = load %struct.rtx_def*, %struct.rtx_def** %test, align 8, !dbg !11347
  %185 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11348
  store %struct.rtx_def* %184, %struct.rtx_def** %185, align 8, !dbg !11349
  %186 = load i32, i32* %cmp_mode, align 4, !dbg !11350
  %187 = load i32*, i32** %pmode.addr, align 8, !dbg !11351
  store i32 %186, i32* %187, align 4, !dbg !11352
  br label %return, !dbg !11353

if.end348:                                        ; preds = %land.lhs.true324, %land.lhs.true309, %land.lhs.true307, %if.then302
  %188 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !11354
  call void @delete_insns_since(%struct.rtx_def* %188), !dbg !11355
  br label %if.end349, !dbg !11356

if.end349:                                        ; preds = %if.end348, %land.lhs.true295, %do.body
  %189 = load i32, i32* %methods.addr, align 4, !dbg !11357
  %cmp350 = icmp eq i32 %189, 0, !dbg !11359
  br i1 %cmp350, label %if.then376, label %lor.lhs.false352, !dbg !11360

lor.lhs.false352:                                 ; preds = %if.end349
  %190 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp353 = icmp eq i32 %190, 2, !dbg !11361
  br i1 %cmp353, label %if.end377, label %lor.lhs.false355, !dbg !11361

lor.lhs.false355:                                 ; preds = %lor.lhs.false352
  %191 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp356 = icmp eq i32 %191, 8, !dbg !11361
  br i1 %cmp356, label %if.end377, label %lor.lhs.false358, !dbg !11361

lor.lhs.false358:                                 ; preds = %lor.lhs.false355
  %192 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp359 = icmp eq i32 %192, 9, !dbg !11361
  br i1 %cmp359, label %if.end377, label %lor.lhs.false361, !dbg !11361

lor.lhs.false361:                                 ; preds = %lor.lhs.false358
  %193 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp362 = icmp eq i32 %193, 11, !dbg !11361
  br i1 %cmp362, label %if.end377, label %lor.lhs.false364, !dbg !11361

lor.lhs.false364:                                 ; preds = %lor.lhs.false361
  %194 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp365 = icmp eq i32 %194, 4, !dbg !11361
  br i1 %cmp365, label %if.end377, label %lor.lhs.false367, !dbg !11361

lor.lhs.false367:                                 ; preds = %lor.lhs.false364
  %195 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp368 = icmp eq i32 %195, 5, !dbg !11361
  br i1 %cmp368, label %if.end377, label %lor.lhs.false370, !dbg !11361

lor.lhs.false370:                                 ; preds = %lor.lhs.false367
  %196 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp371 = icmp eq i32 %196, 6, !dbg !11361
  br i1 %cmp371, label %if.end377, label %lor.lhs.false373, !dbg !11361

lor.lhs.false373:                                 ; preds = %lor.lhs.false370
  %197 = load i32, i32* %mclass, align 4, !dbg !11361
  %cmp374 = icmp eq i32 %197, 7, !dbg !11361
  br i1 %cmp374, label %if.end377, label %if.then376, !dbg !11362

if.then376:                                       ; preds = %lor.lhs.false373, %if.end349
  br label %do.end, !dbg !11363

if.end377:                                        ; preds = %lor.lhs.false373, %lor.lhs.false370, %lor.lhs.false367, %lor.lhs.false364, %lor.lhs.false361, %lor.lhs.false358, %lor.lhs.false355, %lor.lhs.false352
  %198 = load i32, i32* %cmp_mode, align 4, !dbg !11364
  %idxprom378 = zext i32 %198 to i64, !dbg !11364
  %arrayidx379 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom378, !dbg !11364
  %199 = load i8, i8* %arrayidx379, align 1, !dbg !11364
  %conv380 = zext i8 %199 to i32, !dbg !11364
  store i32 %conv380, i32* %cmp_mode, align 4, !dbg !11365
  br label %do.cond, !dbg !11366

do.cond:                                          ; preds = %if.end377
  %200 = load i32, i32* %cmp_mode, align 4, !dbg !11367
  %cmp381 = icmp ne i32 %200, 0, !dbg !11368
  br i1 %cmp381, label %do.body, label %do.end, !dbg !11366, !llvm.loop !11369

do.end:                                           ; preds = %do.cond, %if.then376
  %201 = load i32, i32* %methods.addr, align 4, !dbg !11371
  %cmp383 = icmp ne i32 %201, 3, !dbg !11373
  br i1 %cmp383, label %if.then385, label %if.end386, !dbg !11374

if.then385:                                       ; preds = %do.end
  br label %fail, !dbg !11375

if.end386:                                        ; preds = %do.end
  %202 = load i32, i32* %mode, align 4, !dbg !11376
  %idxprom387 = zext i32 %202 to i64, !dbg !11376
  %arrayidx388 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom387, !dbg !11376
  %203 = load i8, i8* %arrayidx388, align 1, !dbg !11376
  %conv389 = zext i8 %203 to i32, !dbg !11376
  %cmp390 = icmp eq i32 %conv389, 8, !dbg !11376
  br i1 %cmp390, label %if.else, label %lor.lhs.false392, !dbg !11376

lor.lhs.false392:                                 ; preds = %if.end386
  %204 = load i32, i32* %mode, align 4, !dbg !11376
  %idxprom393 = zext i32 %204 to i64, !dbg !11376
  %arrayidx394 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom393, !dbg !11376
  %205 = load i8, i8* %arrayidx394, align 1, !dbg !11376
  %conv395 = zext i8 %205 to i32, !dbg !11376
  %cmp396 = icmp eq i32 %conv395, 9, !dbg !11376
  br i1 %cmp396, label %if.else, label %if.then398, !dbg !11378

if.then398:                                       ; preds = %lor.lhs.false392
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result399, metadata !11379, metadata !DIExpression()), !dbg !11381
  %206 = load i32, i32* %mode, align 4, !dbg !11382
  %call400 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 105), i32 %206), !dbg !11383
  store %struct.rtx_def* %call400, %struct.rtx_def** %libfunc, align 8, !dbg !11384
  %207 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !11385
  %tobool401 = icmp ne %struct.rtx_def* %207, null, !dbg !11385
  br i1 %tobool401, label %cond.false403, label %cond.true402, !dbg !11385

cond.true402:                                     ; preds = %if.then398
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4213, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11385
  br label %cond.end404, !dbg !11385

cond.false403:                                    ; preds = %if.then398
  br label %cond.end404, !dbg !11385

cond.end404:                                      ; preds = %cond.false403, %cond.true402
  %cond405 = phi i32 [ 0, %cond.true402 ], [ 0, %cond.false403 ], !dbg !11385
  %208 = load i32, i32* %unsignedp.addr, align 4, !dbg !11386
  %tobool406 = icmp ne i32 %208, 0, !dbg !11386
  br i1 %tobool406, label %if.then407, label %if.end412, !dbg !11388

if.then407:                                       ; preds = %cond.end404
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ulibfunc, metadata !11389, metadata !DIExpression()), !dbg !11391
  %209 = load i32, i32* %mode, align 4, !dbg !11392
  %call408 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 106), i32 %209), !dbg !11393
  store %struct.rtx_def* %call408, %struct.rtx_def** %ulibfunc, align 8, !dbg !11391
  %210 = load %struct.rtx_def*, %struct.rtx_def** %ulibfunc, align 8, !dbg !11394
  %tobool409 = icmp ne %struct.rtx_def* %210, null, !dbg !11394
  br i1 %tobool409, label %if.then410, label %if.end411, !dbg !11396

if.then410:                                       ; preds = %if.then407
  %211 = load %struct.rtx_def*, %struct.rtx_def** %ulibfunc, align 8, !dbg !11397
  store %struct.rtx_def* %211, %struct.rtx_def** %libfunc, align 8, !dbg !11398
  br label %if.end411, !dbg !11399

if.end411:                                        ; preds = %if.then410, %if.then407
  br label %if.end412, !dbg !11400

if.end412:                                        ; preds = %if.end411, %cond.end404
  %212 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !11401
  %213 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 8), align 8, !dbg !11402
  %call413 = call i32 %213(), !dbg !11403
  %214 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11404
  %215 = load i32, i32* %mode, align 4, !dbg !11405
  %216 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11406
  %217 = load i32, i32* %mode, align 4, !dbg !11407
  %call414 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %212, %struct.rtx_def* null, i32 1, i32 %call413, i32 2, %struct.rtx_def* %214, i32 %215, %struct.rtx_def* %216, i32 %217), !dbg !11408
  store %struct.rtx_def* %call414, %struct.rtx_def** %result399, align 8, !dbg !11409
  %218 = load %struct.rtx_def*, %struct.rtx_def** %result399, align 8, !dbg !11410
  store %struct.rtx_def* %218, %struct.rtx_def** %x.addr, align 8, !dbg !11411
  %219 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11412
  store %struct.rtx_def* %219, %struct.rtx_def** %y.addr, align 8, !dbg !11413
  %220 = load i32, i32* @word_mode, align 4, !dbg !11414
  %221 = load i32*, i32** %pmode.addr, align 8, !dbg !11415
  store i32 %220, i32* %221, align 4, !dbg !11416
  %222 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11417
  %223 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11418
  %224 = load i32, i32* %comparison.addr, align 4, !dbg !11419
  %225 = load i32, i32* %unsignedp.addr, align 4, !dbg !11420
  %226 = load i32, i32* %methods.addr, align 4, !dbg !11421
  %227 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11422
  %228 = load i32*, i32** %pmode.addr, align 8, !dbg !11423
  call void @prepare_cmp_insn(%struct.rtx_def* %222, %struct.rtx_def* %223, i32 %224, %struct.rtx_def* null, i32 %225, i32 %226, %struct.rtx_def** %227, i32* %228), !dbg !11424
  br label %if.end415, !dbg !11425

if.else:                                          ; preds = %lor.lhs.false392, %if.end386
  %229 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11426
  %230 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11427
  %231 = load i32, i32* %comparison.addr, align 4, !dbg !11428
  %232 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11429
  %233 = load i32*, i32** %pmode.addr, align 8, !dbg !11430
  call void @prepare_float_lib_cmp(%struct.rtx_def* %229, %struct.rtx_def* %230, i32 %231, %struct.rtx_def** %232, i32* %233), !dbg !11431
  br label %if.end415

if.end415:                                        ; preds = %if.else, %if.end412
  br label %return, !dbg !11432

fail:                                             ; preds = %if.then385, %if.then196
  call void @llvm.dbg.label(metadata !11433), !dbg !11434
  %234 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !11435
  store %struct.rtx_def* null, %struct.rtx_def** %234, align 8, !dbg !11436
  br label %return, !dbg !11437

return:                                           ; preds = %fail, %if.end415, %if.then339, %cond.end283, %cond.end242, %if.end175
  ret void, !dbg !11437
}

; Function Attrs: noinline nounwind uwtable
define internal void @emit_cmp_and_jump_insn_1(%struct.rtx_def* %test, i32 %mode, %struct.rtx_def* %label) #0 !dbg !11438 {
entry:
  %test.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %label.addr = alloca %struct.rtx_def*, align 8
  %optab_mode = alloca i32, align 4
  %mclass = alloca i32, align 4
  %icode = alloca i32, align 4
  store %struct.rtx_def* %test, %struct.rtx_def** %test.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test.addr, metadata !11441, metadata !DIExpression()), !dbg !11442
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11443, metadata !DIExpression()), !dbg !11444
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !11445, metadata !DIExpression()), !dbg !11446
  call void @llvm.dbg.declare(metadata i32* %optab_mode, metadata !11447, metadata !DIExpression()), !dbg !11448
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !11449, metadata !DIExpression()), !dbg !11450
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !11451, metadata !DIExpression()), !dbg !11452
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11453
  %idxprom = zext i32 %0 to i64, !dbg !11453
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !11453
  %1 = load i8, i8* %arrayidx, align 1, !dbg !11453
  %conv = zext i8 %1 to i32, !dbg !11453
  store i32 %conv, i32* %mclass, align 4, !dbg !11454
  %2 = load i32, i32* %mclass, align 4, !dbg !11455
  %cmp = icmp eq i32 %2, 1, !dbg !11456
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11457

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !11457

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !11458
  br label %cond.end, !dbg !11457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %3, %cond.false ], !dbg !11457
  store i32 %cond, i32* %optab_mode, align 4, !dbg !11459
  %4 = load i32, i32* %optab_mode, align 4, !dbg !11460
  %idxprom2 = sext i32 %4 to i64, !dbg !11460
  %arrayidx3 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 115, i32 4), i64 0, i64 %idxprom2, !dbg !11460
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx3, i32 0, i32 0, !dbg !11461
  %5 = load i32, i32* %insn_code, align 4, !dbg !11461
  store i32 %5, i32* %icode, align 4, !dbg !11462
  %6 = load i32, i32* %icode, align 4, !dbg !11463
  %cmp4 = icmp ne i32 %6, 2956, !dbg !11463
  br i1 %cmp4, label %cond.false7, label %cond.true6, !dbg !11463

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4297, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11463
  br label %cond.end8, !dbg !11463

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !11463

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !11463
  %7 = load i32, i32* %icode, align 4, !dbg !11464
  %idxprom10 = zext i32 %7 to i64, !dbg !11464
  %arrayidx11 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom10, !dbg !11464
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx11, i32 0, i32 3, !dbg !11464
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !11464
  %arrayidx12 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 0, !dbg !11464
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx12, i32 0, i32 0, !dbg !11464
  %9 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11464
  %10 = load %struct.rtx_def*, %struct.rtx_def** %test.addr, align 8, !dbg !11464
  %call = call i32 %9(%struct.rtx_def* %10, i32 0), !dbg !11464
  %tobool = icmp ne i32 %call, 0, !dbg !11464
  br i1 %tobool, label %cond.false14, label %cond.true13, !dbg !11464

cond.true13:                                      ; preds = %cond.end8
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4298, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11464
  br label %cond.end15, !dbg !11464

cond.false14:                                     ; preds = %cond.end8
  br label %cond.end15, !dbg !11464

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !11464
  %11 = load i32, i32* %icode, align 4, !dbg !11465
  %idxprom17 = zext i32 %11 to i64, !dbg !11465
  %arrayidx18 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom17, !dbg !11465
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx18, i32 0, i32 2, !dbg !11465
  %12 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !11465
  %13 = load %struct.rtx_def*, %struct.rtx_def** %test.addr, align 8, !dbg !11466
  %14 = load %struct.rtx_def*, %struct.rtx_def** %test.addr, align 8, !dbg !11467
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !11467
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11467
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11467
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !11467
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11467
  %16 = load %struct.rtx_def*, %struct.rtx_def** %test.addr, align 8, !dbg !11468
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !11468
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !11468
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !11468
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !11468
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !11468
  %18 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !11469
  %call24 = call %struct.rtx_def* (%struct.rtx_def*, ...) %12(%struct.rtx_def* %13, %struct.rtx_def* %15, %struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !11465
  %call25 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call24), !dbg !11470
  ret void, !dbg !11471
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @emit_indirect_jump(%struct.rtx_def* %loc) #0 !dbg !11472 {
entry:
  %loc.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %loc, %struct.rtx_def** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %loc.addr, metadata !11475, metadata !DIExpression()), !dbg !11476
  %0 = load %struct.insn_operand_data*, %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 2200, i32 3), align 8, !dbg !11477
  %arrayidx = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %0, i64 0, !dbg !11479
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx, i32 0, i32 0, !dbg !11480
  %1 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11480
  %2 = load %struct.rtx_def*, %struct.rtx_def** %loc.addr, align 8, !dbg !11481
  %call = call i32 %1(%struct.rtx_def* %2, i32 16), !dbg !11479
  %tobool = icmp ne i32 %call, 0, !dbg !11479
  br i1 %tobool, label %if.end, label %if.then, !dbg !11482

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %loc.addr, align 8, !dbg !11483
  %call1 = call %struct.rtx_def* @copy_to_mode_reg(i32 16, %struct.rtx_def* %3), !dbg !11484
  store %struct.rtx_def* %call1, %struct.rtx_def** %loc.addr, align 8, !dbg !11485
  br label %if.end, !dbg !11486

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %loc.addr, align 8, !dbg !11487
  %call2 = call %struct.rtx_def* @gen_indirect_jump(%struct.rtx_def* %4), !dbg !11488
  %call3 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call2), !dbg !11489
  %call4 = call %struct.rtx_def* @emit_barrier(), !dbg !11490
  ret void, !dbg !11491
}

declare dso_local %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_indirect_jump(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_barrier() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %cmode, %struct.rtx_def* %op2, %struct.rtx_def* %op3, i32 %mode, i32 %unsignedp) #0 !dbg !11492 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %cmode.addr = alloca i32, align 4
  %op2.addr = alloca %struct.rtx_def*, align 8
  %op3.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %comparison = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %reversed = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !11495, metadata !DIExpression()), !dbg !11496
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !11497, metadata !DIExpression()), !dbg !11498
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !11499, metadata !DIExpression()), !dbg !11500
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11501, metadata !DIExpression()), !dbg !11502
  store i32 %cmode, i32* %cmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cmode.addr, metadata !11503, metadata !DIExpression()), !dbg !11504
  store %struct.rtx_def* %op2, %struct.rtx_def** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op2.addr, metadata !11505, metadata !DIExpression()), !dbg !11506
  store %struct.rtx_def* %op3, %struct.rtx_def** %op3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op3.addr, metadata !11507, metadata !DIExpression()), !dbg !11508
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11509, metadata !DIExpression()), !dbg !11510
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !11511, metadata !DIExpression()), !dbg !11512
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !11513, metadata !DIExpression()), !dbg !11514
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !11515, metadata !DIExpression()), !dbg !11516
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %comparison, metadata !11517, metadata !DIExpression()), !dbg !11518
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !11519, metadata !DIExpression()), !dbg !11520
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !11521, metadata !DIExpression()), !dbg !11522
  call void @llvm.dbg.declare(metadata i32* %reversed, metadata !11523, metadata !DIExpression()), !dbg !11524
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11525
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11527
  %call = call zeroext i8 @swap_commutative_operands_p(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !11528
  %tobool = icmp ne i8 %call, 0, !dbg !11528
  br i1 %tobool, label %if.then, label %if.end, !dbg !11529

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11530
  store %struct.rtx_def* %2, %struct.rtx_def** %tem, align 8, !dbg !11532
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11533
  store %struct.rtx_def* %3, %struct.rtx_def** %op0.addr, align 8, !dbg !11534
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11535
  store %struct.rtx_def* %4, %struct.rtx_def** %op1.addr, align 8, !dbg !11536
  %5 = load i32, i32* %code.addr, align 4, !dbg !11537
  %call1 = call i32 @swap_condition(i32 %5), !dbg !11538
  store i32 %call1, i32* %code.addr, align 4, !dbg !11539
  br label %if.end, !dbg !11540

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %code.addr, align 4, !dbg !11541
  %cmp = icmp eq i32 %6, 85, !dbg !11543
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !11544

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11545
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11546
  %cmp2 = icmp eq %struct.rtx_def* %7, %8, !dbg !11547
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !11548

if.then3:                                         ; preds = %land.lhs.true
  store i32 84, i32* %code.addr, align 4, !dbg !11549
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11550
  store %struct.rtx_def* %9, %struct.rtx_def** %op1.addr, align 8, !dbg !11551
  br label %if.end9, !dbg !11552

if.else:                                          ; preds = %land.lhs.true, %if.end
  %10 = load i32, i32* %code.addr, align 4, !dbg !11553
  %cmp4 = icmp eq i32 %10, 83, !dbg !11555
  br i1 %cmp4, label %land.lhs.true5, label %if.end8, !dbg !11556

land.lhs.true5:                                   ; preds = %if.else
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11557
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11558
  %cmp6 = icmp eq %struct.rtx_def* %11, %12, !dbg !11559
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !11560

if.then7:                                         ; preds = %land.lhs.true5
  store i32 82, i32* %code.addr, align 4, !dbg !11561
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11562
  store %struct.rtx_def* %13, %struct.rtx_def** %op1.addr, align 8, !dbg !11563
  br label %if.end8, !dbg !11564

if.end8:                                          ; preds = %if.then7, %land.lhs.true5, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  %14 = load i32, i32* %cmode.addr, align 4, !dbg !11565
  %cmp10 = icmp eq i32 %14, 0, !dbg !11567
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !11568

if.then11:                                        ; preds = %if.end9
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11569
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !11569
  %bf.load = load i32, i32* %16, align 8, !dbg !11569
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11569
  %bf.clear = and i32 %bf.lshr, 255, !dbg !11569
  store i32 %bf.clear, i32* %cmode.addr, align 4, !dbg !11570
  br label %if.end12, !dbg !11571

if.end12:                                         ; preds = %if.then11, %if.end9
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11572
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11574
  %call13 = call zeroext i8 @swap_commutative_operands_p(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !11575
  %conv = zext i8 %call13 to i32, !dbg !11575
  %tobool14 = icmp ne i32 %conv, 0, !dbg !11575
  br i1 %tobool14, label %land.lhs.true15, label %if.end20, !dbg !11576

land.lhs.true15:                                  ; preds = %if.end12
  %19 = load i32, i32* %code.addr, align 4, !dbg !11577
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11578
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11579
  %call16 = call i32 @reversed_comparison_code_parts(i32 %19, %struct.rtx_def* %20, %struct.rtx_def* %21, %struct.rtx_def* null), !dbg !11580
  store i32 %call16, i32* %reversed, align 4, !dbg !11581
  %cmp17 = icmp ne i32 %call16, 0, !dbg !11582
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !11583

if.then19:                                        ; preds = %land.lhs.true15
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11584
  store %struct.rtx_def* %22, %struct.rtx_def** %tem, align 8, !dbg !11586
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11587
  store %struct.rtx_def* %23, %struct.rtx_def** %op2.addr, align 8, !dbg !11588
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11589
  store %struct.rtx_def* %24, %struct.rtx_def** %op3.addr, align 8, !dbg !11590
  %25 = load i32, i32* %reversed, align 4, !dbg !11591
  store i32 %25, i32* %code.addr, align 4, !dbg !11592
  br label %if.end20, !dbg !11593

if.end20:                                         ; preds = %if.then19, %land.lhs.true15, %if.end12
  %26 = load i32, i32* %mode.addr, align 4, !dbg !11594
  %cmp21 = icmp eq i32 %26, 0, !dbg !11596
  br i1 %cmp21, label %if.then23, label %if.end27, !dbg !11597

if.then23:                                        ; preds = %if.end20
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11598
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !11598
  %bf.load24 = load i32, i32* %28, align 8, !dbg !11598
  %bf.lshr25 = lshr i32 %bf.load24, 16, !dbg !11598
  %bf.clear26 = and i32 %bf.lshr25, 255, !dbg !11598
  store i32 %bf.clear26, i32* %mode.addr, align 4, !dbg !11599
  br label %if.end27, !dbg !11600

if.end27:                                         ; preds = %if.then23, %if.end20
  %29 = load i32, i32* %mode.addr, align 4, !dbg !11601
  %idxprom = zext i32 %29 to i64, !dbg !11602
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @movcc_gen_code, i64 0, i64 %idxprom, !dbg !11602
  %30 = load i32, i32* %arrayidx, align 4, !dbg !11602
  store i32 %30, i32* %icode, align 4, !dbg !11603
  %31 = load i32, i32* %icode, align 4, !dbg !11604
  %cmp28 = icmp eq i32 %31, 2956, !dbg !11606
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !11607

if.then30:                                        ; preds = %if.end27
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11608
  br label %return, !dbg !11608

if.end31:                                         ; preds = %if.end27
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11609
  %tobool32 = icmp ne %struct.rtx_def* %32, null, !dbg !11609
  br i1 %tobool32, label %if.end35, label %if.then33, !dbg !11611

if.then33:                                        ; preds = %if.end31
  %33 = load i32, i32* %mode.addr, align 4, !dbg !11612
  %call34 = call %struct.rtx_def* @gen_reg_rtx(i32 %33), !dbg !11613
  store %struct.rtx_def* %call34, %struct.rtx_def** %target.addr, align 8, !dbg !11614
  br label %if.end35, !dbg !11615

if.end35:                                         ; preds = %if.then33, %if.end31
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11616
  store %struct.rtx_def* %34, %struct.rtx_def** %subtarget, align 8, !dbg !11617
  %35 = load i32, i32* %icode, align 4, !dbg !11618
  %idxprom36 = zext i32 %35 to i64, !dbg !11620
  %arrayidx37 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom36, !dbg !11620
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx37, i32 0, i32 3, !dbg !11621
  %36 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !11621
  %arrayidx38 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %36, i64 0, !dbg !11620
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx38, i32 0, i32 0, !dbg !11622
  %37 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11622
  %38 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11623
  %39 = load i32, i32* %icode, align 4, !dbg !11624
  %idxprom39 = zext i32 %39 to i64, !dbg !11625
  %arrayidx40 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom39, !dbg !11625
  %operand41 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx40, i32 0, i32 3, !dbg !11626
  %40 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand41, align 8, !dbg !11626
  %arrayidx42 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %40, i64 0, !dbg !11625
  %mode43 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx42, i32 0, i32 2, !dbg !11627
  %bf.load44 = load i16, i16* %mode43, align 8, !dbg !11627
  %bf.cast = zext i16 %bf.load44 to i32, !dbg !11627
  %call45 = call i32 %37(%struct.rtx_def* %38, i32 %bf.cast), !dbg !11620
  %tobool46 = icmp ne i32 %call45, 0, !dbg !11620
  br i1 %tobool46, label %if.end56, label %if.then47, !dbg !11628

if.then47:                                        ; preds = %if.end35
  %41 = load i32, i32* %icode, align 4, !dbg !11629
  %idxprom48 = zext i32 %41 to i64, !dbg !11630
  %arrayidx49 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom48, !dbg !11630
  %operand50 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx49, i32 0, i32 3, !dbg !11631
  %42 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand50, align 8, !dbg !11631
  %arrayidx51 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %42, i64 0, !dbg !11630
  %mode52 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx51, i32 0, i32 2, !dbg !11632
  %bf.load53 = load i16, i16* %mode52, align 8, !dbg !11632
  %bf.cast54 = zext i16 %bf.load53 to i32, !dbg !11632
  %call55 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.cast54), !dbg !11633
  store %struct.rtx_def* %call55, %struct.rtx_def** %subtarget, align 8, !dbg !11634
  br label %if.end56, !dbg !11635

if.end56:                                         ; preds = %if.then47, %if.end35
  %43 = load i32, i32* %icode, align 4, !dbg !11636
  %idxprom57 = zext i32 %43 to i64, !dbg !11638
  %arrayidx58 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom57, !dbg !11638
  %operand59 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx58, i32 0, i32 3, !dbg !11639
  %44 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand59, align 8, !dbg !11639
  %arrayidx60 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %44, i64 2, !dbg !11638
  %predicate61 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx60, i32 0, i32 0, !dbg !11640
  %45 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate61, align 8, !dbg !11640
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11641
  %47 = load i32, i32* %icode, align 4, !dbg !11642
  %idxprom62 = zext i32 %47 to i64, !dbg !11643
  %arrayidx63 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom62, !dbg !11643
  %operand64 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx63, i32 0, i32 3, !dbg !11644
  %48 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand64, align 8, !dbg !11644
  %arrayidx65 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %48, i64 2, !dbg !11643
  %mode66 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx65, i32 0, i32 2, !dbg !11645
  %bf.load67 = load i16, i16* %mode66, align 8, !dbg !11645
  %bf.cast68 = zext i16 %bf.load67 to i32, !dbg !11645
  %call69 = call i32 %45(%struct.rtx_def* %46, i32 %bf.cast68), !dbg !11638
  %tobool70 = icmp ne i32 %call69, 0, !dbg !11638
  br i1 %tobool70, label %if.end80, label %if.then71, !dbg !11646

if.then71:                                        ; preds = %if.end56
  %49 = load i32, i32* %icode, align 4, !dbg !11647
  %idxprom72 = zext i32 %49 to i64, !dbg !11648
  %arrayidx73 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom72, !dbg !11648
  %operand74 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx73, i32 0, i32 3, !dbg !11649
  %50 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand74, align 8, !dbg !11649
  %arrayidx75 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %50, i64 2, !dbg !11648
  %mode76 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx75, i32 0, i32 2, !dbg !11650
  %bf.load77 = load i16, i16* %mode76, align 8, !dbg !11650
  %bf.cast78 = zext i16 %bf.load77 to i32, !dbg !11650
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11651
  %call79 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast78, %struct.rtx_def* %51), !dbg !11652
  store %struct.rtx_def* %call79, %struct.rtx_def** %op2.addr, align 8, !dbg !11653
  br label %if.end80, !dbg !11654

if.end80:                                         ; preds = %if.then71, %if.end56
  %52 = load i32, i32* %icode, align 4, !dbg !11655
  %idxprom81 = zext i32 %52 to i64, !dbg !11657
  %arrayidx82 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom81, !dbg !11657
  %operand83 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx82, i32 0, i32 3, !dbg !11658
  %53 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand83, align 8, !dbg !11658
  %arrayidx84 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %53, i64 3, !dbg !11657
  %predicate85 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx84, i32 0, i32 0, !dbg !11659
  %54 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate85, align 8, !dbg !11659
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11660
  %56 = load i32, i32* %icode, align 4, !dbg !11661
  %idxprom86 = zext i32 %56 to i64, !dbg !11662
  %arrayidx87 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom86, !dbg !11662
  %operand88 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx87, i32 0, i32 3, !dbg !11663
  %57 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand88, align 8, !dbg !11663
  %arrayidx89 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %57, i64 3, !dbg !11662
  %mode90 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx89, i32 0, i32 2, !dbg !11664
  %bf.load91 = load i16, i16* %mode90, align 8, !dbg !11664
  %bf.cast92 = zext i16 %bf.load91 to i32, !dbg !11664
  %call93 = call i32 %54(%struct.rtx_def* %55, i32 %bf.cast92), !dbg !11657
  %tobool94 = icmp ne i32 %call93, 0, !dbg !11657
  br i1 %tobool94, label %if.end104, label %if.then95, !dbg !11665

if.then95:                                        ; preds = %if.end80
  %58 = load i32, i32* %icode, align 4, !dbg !11666
  %idxprom96 = zext i32 %58 to i64, !dbg !11667
  %arrayidx97 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom96, !dbg !11667
  %operand98 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx97, i32 0, i32 3, !dbg !11668
  %59 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand98, align 8, !dbg !11668
  %arrayidx99 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %59, i64 3, !dbg !11667
  %mode100 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx99, i32 0, i32 2, !dbg !11669
  %bf.load101 = load i16, i16* %mode100, align 8, !dbg !11669
  %bf.cast102 = zext i16 %bf.load101 to i32, !dbg !11669
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11670
  %call103 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast102, %struct.rtx_def* %60), !dbg !11671
  store %struct.rtx_def* %call103, %struct.rtx_def** %op3.addr, align 8, !dbg !11672
  br label %if.end104, !dbg !11673

if.end104:                                        ; preds = %if.then95, %if.end80
  %61 = load i32, i32* %unsignedp.addr, align 4, !dbg !11674
  %tobool105 = icmp ne i32 %61, 0, !dbg !11674
  br i1 %tobool105, label %cond.true, label %cond.false, !dbg !11674

cond.true:                                        ; preds = %if.end104
  %62 = load i32, i32* %code.addr, align 4, !dbg !11675
  %call106 = call i32 @unsigned_condition(i32 %62), !dbg !11676
  br label %cond.end, !dbg !11674

cond.false:                                       ; preds = %if.end104
  %63 = load i32, i32* %code.addr, align 4, !dbg !11677
  br label %cond.end, !dbg !11674

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call106, %cond.true ], [ %63, %cond.false ], !dbg !11674
  store i32 %cond, i32* %code.addr, align 4, !dbg !11678
  %64 = load i32, i32* %code.addr, align 4, !dbg !11679
  %65 = load i32, i32* %cmode.addr, align 4, !dbg !11680
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11681
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11682
  %call107 = call %struct.rtx_def* @simplify_gen_relational(i32 %64, i32 0, i32 %65, %struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !11683
  store %struct.rtx_def* %call107, %struct.rtx_def** %comparison, align 8, !dbg !11684
  %68 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11685
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !11685
  %bf.load108 = load i32, i32* %69, align 8, !dbg !11685
  %bf.clear109 = and i32 %bf.load108, 65535, !dbg !11685
  %idxprom110 = sext i32 %bf.clear109 to i64, !dbg !11685
  %arrayidx111 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom110, !dbg !11685
  %70 = load i32, i32* %arrayidx111, align 4, !dbg !11685
  %and = and i32 %70, -2, !dbg !11685
  %cmp112 = icmp eq i32 %and, 0, !dbg !11685
  br i1 %cmp112, label %if.end115, label %if.then114, !dbg !11687

if.then114:                                       ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11688
  br label %return, !dbg !11688

if.end115:                                        ; preds = %cond.end
  call void @do_pending_stack_adjust(), !dbg !11689
  call void @start_sequence(), !dbg !11690
  %71 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11691
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !11691
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11691
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11691
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !11691
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11691
  %73 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11692
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !11692
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !11692
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 1, !dbg !11692
  %rt_rtx120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.rtx_def**, !dbg !11692
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx120, align 8, !dbg !11692
  %75 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11693
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !11693
  %bf.load121 = load i32, i32* %76, align 8, !dbg !11693
  %bf.clear122 = and i32 %bf.load121, 65535, !dbg !11693
  %77 = load i32, i32* %unsignedp.addr, align 4, !dbg !11694
  call void @prepare_cmp_insn(%struct.rtx_def* %72, %struct.rtx_def* %74, i32 %bf.clear122, %struct.rtx_def* null, i32 %77, i32 2, %struct.rtx_def** %comparison, i32* %cmode.addr), !dbg !11695
  %78 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11696
  %tobool123 = icmp ne %struct.rtx_def* %78, null, !dbg !11696
  br i1 %tobool123, label %if.else125, label %if.then124, !dbg !11698

if.then124:                                       ; preds = %if.end115
  store %struct.rtx_def* null, %struct.rtx_def** %insn, align 8, !dbg !11699
  br label %if.end129, !dbg !11700

if.else125:                                       ; preds = %if.end115
  %79 = load i32, i32* %icode, align 4, !dbg !11701
  %idxprom126 = zext i32 %79 to i64, !dbg !11701
  %arrayidx127 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom126, !dbg !11701
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx127, i32 0, i32 2, !dbg !11701
  %80 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !11701
  %81 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11702
  %82 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11703
  %83 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11704
  %84 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11705
  %call128 = call %struct.rtx_def* (%struct.rtx_def*, ...) %80(%struct.rtx_def* %81, %struct.rtx_def* %82, %struct.rtx_def* %83, %struct.rtx_def* %84), !dbg !11701
  store %struct.rtx_def* %call128, %struct.rtx_def** %insn, align 8, !dbg !11706
  br label %if.end129

if.end129:                                        ; preds = %if.else125, %if.then124
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !11707
  %cmp130 = icmp eq %struct.rtx_def* %85, null, !dbg !11709
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !11710

if.then132:                                       ; preds = %if.end129
  call void @end_sequence(), !dbg !11711
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11713
  br label %return, !dbg !11713

if.end133:                                        ; preds = %if.end129
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !11714
  %call134 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %86), !dbg !11715
  %call135 = call %struct.rtx_def* @get_insns(), !dbg !11716
  store %struct.rtx_def* %call135, %struct.rtx_def** %insn, align 8, !dbg !11717
  call void @end_sequence(), !dbg !11718
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !11719
  %call136 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %87), !dbg !11720
  %88 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11721
  %89 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11723
  %cmp137 = icmp ne %struct.rtx_def* %88, %89, !dbg !11724
  br i1 %cmp137, label %if.then139, label %if.end140, !dbg !11725

if.then139:                                       ; preds = %if.end133
  %90 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11726
  %91 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11727
  call void @convert_move(%struct.rtx_def* %90, %struct.rtx_def* %91, i32 0), !dbg !11728
  br label %if.end140, !dbg !11728

if.end140:                                        ; preds = %if.then139, %if.end133
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11729
  store %struct.rtx_def* %92, %struct.rtx_def** %retval, align 8, !dbg !11730
  br label %return, !dbg !11730

return:                                           ; preds = %if.end140, %if.then132, %if.then114, %if.then30
  %93 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !11731
  ret %struct.rtx_def* %93, !dbg !11731
}

declare dso_local i32 @reversed_comparison_code_parts(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_gen_relational(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @do_pending_stack_adjust() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @can_conditionally_move_p(i32 %mode) #0 !dbg !11732 {
entry:
  %retval = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11735, metadata !DIExpression()), !dbg !11736
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11737
  %idxprom = zext i32 %0 to i64, !dbg !11739
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @movcc_gen_code, i64 0, i64 %idxprom, !dbg !11739
  %1 = load i32, i32* %arrayidx, align 4, !dbg !11739
  %cmp = icmp ne i32 %1, 2956, !dbg !11740
  br i1 %cmp, label %if.then, label %if.end, !dbg !11741

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !11742
  br label %return, !dbg !11742

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11743
  br label %return, !dbg !11743

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !11744
  ret i32 %2, !dbg !11744
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_conditional_add(%struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %cmode, %struct.rtx_def* %op2, %struct.rtx_def* %op3, i32 %mode, i32 %unsignedp) #0 !dbg !11745 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %cmode.addr = alloca i32, align 4
  %op2.addr = alloca %struct.rtx_def*, align 8
  %op3.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %tem = alloca %struct.rtx_def*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %comparison = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %reversed = alloca i32, align 4
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !11746, metadata !DIExpression()), !dbg !11747
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !11748, metadata !DIExpression()), !dbg !11749
  store %struct.rtx_def* %op0, %struct.rtx_def** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0.addr, metadata !11750, metadata !DIExpression()), !dbg !11751
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11752, metadata !DIExpression()), !dbg !11753
  store i32 %cmode, i32* %cmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cmode.addr, metadata !11754, metadata !DIExpression()), !dbg !11755
  store %struct.rtx_def* %op2, %struct.rtx_def** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op2.addr, metadata !11756, metadata !DIExpression()), !dbg !11757
  store %struct.rtx_def* %op3, %struct.rtx_def** %op3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op3.addr, metadata !11758, metadata !DIExpression()), !dbg !11759
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11760, metadata !DIExpression()), !dbg !11761
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !11762, metadata !DIExpression()), !dbg !11763
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !11764, metadata !DIExpression()), !dbg !11765
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !11766, metadata !DIExpression()), !dbg !11767
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %comparison, metadata !11768, metadata !DIExpression()), !dbg !11769
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !11770, metadata !DIExpression()), !dbg !11771
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !11772, metadata !DIExpression()), !dbg !11773
  call void @llvm.dbg.declare(metadata i32* %reversed, metadata !11774, metadata !DIExpression()), !dbg !11775
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11776
  %1 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11778
  %call = call zeroext i8 @swap_commutative_operands_p(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !11779
  %tobool = icmp ne i8 %call, 0, !dbg !11779
  br i1 %tobool, label %if.then, label %if.end, !dbg !11780

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11781
  store %struct.rtx_def* %2, %struct.rtx_def** %tem, align 8, !dbg !11783
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11784
  store %struct.rtx_def* %3, %struct.rtx_def** %op0.addr, align 8, !dbg !11785
  %4 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11786
  store %struct.rtx_def* %4, %struct.rtx_def** %op1.addr, align 8, !dbg !11787
  %5 = load i32, i32* %code.addr, align 4, !dbg !11788
  %call1 = call i32 @swap_condition(i32 %5), !dbg !11789
  store i32 %call1, i32* %code.addr, align 4, !dbg !11790
  br label %if.end, !dbg !11791

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %code.addr, align 4, !dbg !11792
  %cmp = icmp eq i32 %6, 85, !dbg !11794
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !11795

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11796
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11797
  %cmp2 = icmp eq %struct.rtx_def* %7, %8, !dbg !11798
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !11799

if.then3:                                         ; preds = %land.lhs.true
  store i32 84, i32* %code.addr, align 4, !dbg !11800
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11801
  store %struct.rtx_def* %9, %struct.rtx_def** %op1.addr, align 8, !dbg !11802
  br label %if.end9, !dbg !11803

if.else:                                          ; preds = %land.lhs.true, %if.end
  %10 = load i32, i32* %code.addr, align 4, !dbg !11804
  %cmp4 = icmp eq i32 %10, 83, !dbg !11806
  br i1 %cmp4, label %land.lhs.true5, label %if.end8, !dbg !11807

land.lhs.true5:                                   ; preds = %if.else
  %11 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11808
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11809
  %cmp6 = icmp eq %struct.rtx_def* %11, %12, !dbg !11810
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !11811

if.then7:                                         ; preds = %land.lhs.true5
  store i32 82, i32* %code.addr, align 4, !dbg !11812
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11813
  store %struct.rtx_def* %13, %struct.rtx_def** %op1.addr, align 8, !dbg !11814
  br label %if.end8, !dbg !11815

if.end8:                                          ; preds = %if.then7, %land.lhs.true5, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  %14 = load i32, i32* %cmode.addr, align 4, !dbg !11816
  %cmp10 = icmp eq i32 %14, 0, !dbg !11818
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !11819

if.then11:                                        ; preds = %if.end9
  %15 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11820
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !11820
  %bf.load = load i32, i32* %16, align 8, !dbg !11820
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11820
  %bf.clear = and i32 %bf.lshr, 255, !dbg !11820
  store i32 %bf.clear, i32* %cmode.addr, align 4, !dbg !11821
  br label %if.end12, !dbg !11822

if.end12:                                         ; preds = %if.then11, %if.end9
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11823
  %18 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11825
  %call13 = call zeroext i8 @swap_commutative_operands_p(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !11826
  %conv = zext i8 %call13 to i32, !dbg !11826
  %tobool14 = icmp ne i32 %conv, 0, !dbg !11826
  br i1 %tobool14, label %land.lhs.true15, label %if.end20, !dbg !11827

land.lhs.true15:                                  ; preds = %if.end12
  %19 = load i32, i32* %code.addr, align 4, !dbg !11828
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11829
  %21 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11830
  %call16 = call i32 @reversed_comparison_code_parts(i32 %19, %struct.rtx_def* %20, %struct.rtx_def* %21, %struct.rtx_def* null), !dbg !11831
  store i32 %call16, i32* %reversed, align 4, !dbg !11832
  %cmp17 = icmp ne i32 %call16, 0, !dbg !11833
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !11834

if.then19:                                        ; preds = %land.lhs.true15
  %22 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11835
  store %struct.rtx_def* %22, %struct.rtx_def** %tem, align 8, !dbg !11837
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11838
  store %struct.rtx_def* %23, %struct.rtx_def** %op2.addr, align 8, !dbg !11839
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11840
  store %struct.rtx_def* %24, %struct.rtx_def** %op3.addr, align 8, !dbg !11841
  %25 = load i32, i32* %reversed, align 4, !dbg !11842
  store i32 %25, i32* %code.addr, align 4, !dbg !11843
  br label %if.end20, !dbg !11844

if.end20:                                         ; preds = %if.then19, %land.lhs.true15, %if.end12
  %26 = load i32, i32* %mode.addr, align 4, !dbg !11845
  %cmp21 = icmp eq i32 %26, 0, !dbg !11847
  br i1 %cmp21, label %if.then23, label %if.end27, !dbg !11848

if.then23:                                        ; preds = %if.end20
  %27 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11849
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !11849
  %bf.load24 = load i32, i32* %28, align 8, !dbg !11849
  %bf.lshr25 = lshr i32 %bf.load24, 16, !dbg !11849
  %bf.clear26 = and i32 %bf.lshr25, 255, !dbg !11849
  store i32 %bf.clear26, i32* %mode.addr, align 4, !dbg !11850
  br label %if.end27, !dbg !11851

if.end27:                                         ; preds = %if.then23, %if.end20
  %29 = load i32, i32* %mode.addr, align 4, !dbg !11852
  %idxprom = sext i32 %29 to i64, !dbg !11852
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 120, i32 4), i64 0, i64 %idxprom, !dbg !11852
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !11853
  %30 = load i32, i32* %insn_code, align 4, !dbg !11853
  store i32 %30, i32* %icode, align 4, !dbg !11854
  %31 = load i32, i32* %icode, align 4, !dbg !11855
  %cmp28 = icmp eq i32 %31, 2956, !dbg !11857
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !11858

if.then30:                                        ; preds = %if.end27
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11859
  br label %return, !dbg !11859

if.end31:                                         ; preds = %if.end27
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11860
  %tobool32 = icmp ne %struct.rtx_def* %32, null, !dbg !11860
  br i1 %tobool32, label %if.end35, label %if.then33, !dbg !11862

if.then33:                                        ; preds = %if.end31
  %33 = load i32, i32* %mode.addr, align 4, !dbg !11863
  %call34 = call %struct.rtx_def* @gen_reg_rtx(i32 %33), !dbg !11864
  store %struct.rtx_def* %call34, %struct.rtx_def** %target.addr, align 8, !dbg !11865
  br label %if.end35, !dbg !11866

if.end35:                                         ; preds = %if.then33, %if.end31
  %34 = load i32, i32* %icode, align 4, !dbg !11867
  %idxprom36 = zext i32 %34 to i64, !dbg !11869
  %arrayidx37 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom36, !dbg !11869
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx37, i32 0, i32 3, !dbg !11870
  %35 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !11870
  %arrayidx38 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %35, i64 0, !dbg !11869
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx38, i32 0, i32 0, !dbg !11871
  %36 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11871
  %37 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11872
  %38 = load i32, i32* %icode, align 4, !dbg !11873
  %idxprom39 = zext i32 %38 to i64, !dbg !11874
  %arrayidx40 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom39, !dbg !11874
  %operand41 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx40, i32 0, i32 3, !dbg !11875
  %39 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand41, align 8, !dbg !11875
  %arrayidx42 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %39, i64 0, !dbg !11874
  %mode43 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx42, i32 0, i32 2, !dbg !11876
  %bf.load44 = load i16, i16* %mode43, align 8, !dbg !11876
  %bf.cast = zext i16 %bf.load44 to i32, !dbg !11876
  %call45 = call i32 %36(%struct.rtx_def* %37, i32 %bf.cast), !dbg !11869
  %tobool46 = icmp ne i32 %call45, 0, !dbg !11869
  br i1 %tobool46, label %if.else56, label %if.then47, !dbg !11877

if.then47:                                        ; preds = %if.end35
  %40 = load i32, i32* %icode, align 4, !dbg !11878
  %idxprom48 = zext i32 %40 to i64, !dbg !11879
  %arrayidx49 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom48, !dbg !11879
  %operand50 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx49, i32 0, i32 3, !dbg !11880
  %41 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand50, align 8, !dbg !11880
  %arrayidx51 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %41, i64 0, !dbg !11879
  %mode52 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx51, i32 0, i32 2, !dbg !11881
  %bf.load53 = load i16, i16* %mode52, align 8, !dbg !11881
  %bf.cast54 = zext i16 %bf.load53 to i32, !dbg !11881
  %call55 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.cast54), !dbg !11882
  store %struct.rtx_def* %call55, %struct.rtx_def** %subtarget, align 8, !dbg !11883
  br label %if.end57, !dbg !11884

if.else56:                                        ; preds = %if.end35
  %42 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11885
  store %struct.rtx_def* %42, %struct.rtx_def** %subtarget, align 8, !dbg !11886
  br label %if.end57

if.end57:                                         ; preds = %if.else56, %if.then47
  %43 = load i32, i32* %icode, align 4, !dbg !11887
  %idxprom58 = zext i32 %43 to i64, !dbg !11889
  %arrayidx59 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom58, !dbg !11889
  %operand60 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx59, i32 0, i32 3, !dbg !11890
  %44 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand60, align 8, !dbg !11890
  %arrayidx61 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %44, i64 2, !dbg !11889
  %predicate62 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx61, i32 0, i32 0, !dbg !11891
  %45 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate62, align 8, !dbg !11891
  %46 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11892
  %47 = load i32, i32* %icode, align 4, !dbg !11893
  %idxprom63 = zext i32 %47 to i64, !dbg !11894
  %arrayidx64 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom63, !dbg !11894
  %operand65 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx64, i32 0, i32 3, !dbg !11895
  %48 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand65, align 8, !dbg !11895
  %arrayidx66 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %48, i64 2, !dbg !11894
  %mode67 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx66, i32 0, i32 2, !dbg !11896
  %bf.load68 = load i16, i16* %mode67, align 8, !dbg !11896
  %bf.cast69 = zext i16 %bf.load68 to i32, !dbg !11896
  %call70 = call i32 %45(%struct.rtx_def* %46, i32 %bf.cast69), !dbg !11889
  %tobool71 = icmp ne i32 %call70, 0, !dbg !11889
  br i1 %tobool71, label %if.end81, label %if.then72, !dbg !11897

if.then72:                                        ; preds = %if.end57
  %49 = load i32, i32* %icode, align 4, !dbg !11898
  %idxprom73 = zext i32 %49 to i64, !dbg !11899
  %arrayidx74 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom73, !dbg !11899
  %operand75 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx74, i32 0, i32 3, !dbg !11900
  %50 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand75, align 8, !dbg !11900
  %arrayidx76 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %50, i64 2, !dbg !11899
  %mode77 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx76, i32 0, i32 2, !dbg !11901
  %bf.load78 = load i16, i16* %mode77, align 8, !dbg !11901
  %bf.cast79 = zext i16 %bf.load78 to i32, !dbg !11901
  %51 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11902
  %call80 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast79, %struct.rtx_def* %51), !dbg !11903
  store %struct.rtx_def* %call80, %struct.rtx_def** %op2.addr, align 8, !dbg !11904
  br label %if.end81, !dbg !11905

if.end81:                                         ; preds = %if.then72, %if.end57
  %52 = load i32, i32* %icode, align 4, !dbg !11906
  %idxprom82 = zext i32 %52 to i64, !dbg !11908
  %arrayidx83 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom82, !dbg !11908
  %operand84 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx83, i32 0, i32 3, !dbg !11909
  %53 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand84, align 8, !dbg !11909
  %arrayidx85 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %53, i64 3, !dbg !11908
  %predicate86 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx85, i32 0, i32 0, !dbg !11910
  %54 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate86, align 8, !dbg !11910
  %55 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11911
  %56 = load i32, i32* %icode, align 4, !dbg !11912
  %idxprom87 = zext i32 %56 to i64, !dbg !11913
  %arrayidx88 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom87, !dbg !11913
  %operand89 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx88, i32 0, i32 3, !dbg !11914
  %57 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand89, align 8, !dbg !11914
  %arrayidx90 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %57, i64 3, !dbg !11913
  %mode91 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx90, i32 0, i32 2, !dbg !11915
  %bf.load92 = load i16, i16* %mode91, align 8, !dbg !11915
  %bf.cast93 = zext i16 %bf.load92 to i32, !dbg !11915
  %call94 = call i32 %54(%struct.rtx_def* %55, i32 %bf.cast93), !dbg !11908
  %tobool95 = icmp ne i32 %call94, 0, !dbg !11908
  br i1 %tobool95, label %if.end105, label %if.then96, !dbg !11916

if.then96:                                        ; preds = %if.end81
  %58 = load i32, i32* %icode, align 4, !dbg !11917
  %idxprom97 = zext i32 %58 to i64, !dbg !11918
  %arrayidx98 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom97, !dbg !11918
  %operand99 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx98, i32 0, i32 3, !dbg !11919
  %59 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand99, align 8, !dbg !11919
  %arrayidx100 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %59, i64 3, !dbg !11918
  %mode101 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx100, i32 0, i32 2, !dbg !11920
  %bf.load102 = load i16, i16* %mode101, align 8, !dbg !11920
  %bf.cast103 = zext i16 %bf.load102 to i32, !dbg !11920
  %60 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11921
  %call104 = call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast103, %struct.rtx_def* %60), !dbg !11922
  store %struct.rtx_def* %call104, %struct.rtx_def** %op3.addr, align 8, !dbg !11923
  br label %if.end105, !dbg !11924

if.end105:                                        ; preds = %if.then96, %if.end81
  %61 = load i32, i32* %unsignedp.addr, align 4, !dbg !11925
  %tobool106 = icmp ne i32 %61, 0, !dbg !11925
  br i1 %tobool106, label %cond.true, label %cond.false, !dbg !11925

cond.true:                                        ; preds = %if.end105
  %62 = load i32, i32* %code.addr, align 4, !dbg !11926
  %call107 = call i32 @unsigned_condition(i32 %62), !dbg !11927
  br label %cond.end, !dbg !11925

cond.false:                                       ; preds = %if.end105
  %63 = load i32, i32* %code.addr, align 4, !dbg !11928
  br label %cond.end, !dbg !11925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call107, %cond.true ], [ %63, %cond.false ], !dbg !11925
  store i32 %cond, i32* %code.addr, align 4, !dbg !11929
  %64 = load i32, i32* %code.addr, align 4, !dbg !11930
  %65 = load i32, i32* %cmode.addr, align 4, !dbg !11931
  %66 = load %struct.rtx_def*, %struct.rtx_def** %op0.addr, align 8, !dbg !11932
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11933
  %call108 = call %struct.rtx_def* @simplify_gen_relational(i32 %64, i32 0, i32 %65, %struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !11934
  store %struct.rtx_def* %call108, %struct.rtx_def** %comparison, align 8, !dbg !11935
  %68 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11936
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !11936
  %bf.load109 = load i32, i32* %69, align 8, !dbg !11936
  %bf.clear110 = and i32 %bf.load109, 65535, !dbg !11936
  %idxprom111 = sext i32 %bf.clear110 to i64, !dbg !11936
  %arrayidx112 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom111, !dbg !11936
  %70 = load i32, i32* %arrayidx112, align 4, !dbg !11936
  %and = and i32 %70, -2, !dbg !11936
  %cmp113 = icmp eq i32 %and, 0, !dbg !11936
  br i1 %cmp113, label %if.end116, label %if.then115, !dbg !11938

if.then115:                                       ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11939
  br label %return, !dbg !11939

if.end116:                                        ; preds = %cond.end
  call void @do_pending_stack_adjust(), !dbg !11940
  call void @start_sequence(), !dbg !11941
  %71 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11942
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !11942
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11942
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11942
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !11942
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11942
  %73 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11943
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !11943
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !11943
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 1, !dbg !11943
  %rt_rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**, !dbg !11943
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx121, align 8, !dbg !11943
  %75 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11944
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !11944
  %bf.load122 = load i32, i32* %76, align 8, !dbg !11944
  %bf.clear123 = and i32 %bf.load122, 65535, !dbg !11944
  %77 = load i32, i32* %unsignedp.addr, align 4, !dbg !11945
  call void @prepare_cmp_insn(%struct.rtx_def* %72, %struct.rtx_def* %74, i32 %bf.clear123, %struct.rtx_def* null, i32 %77, i32 2, %struct.rtx_def** %comparison, i32* %cmode.addr), !dbg !11946
  %78 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11947
  %tobool124 = icmp ne %struct.rtx_def* %78, null, !dbg !11947
  br i1 %tobool124, label %if.else126, label %if.then125, !dbg !11949

if.then125:                                       ; preds = %if.end116
  store %struct.rtx_def* null, %struct.rtx_def** %insn, align 8, !dbg !11950
  br label %if.end130, !dbg !11951

if.else126:                                       ; preds = %if.end116
  %79 = load i32, i32* %icode, align 4, !dbg !11952
  %idxprom127 = zext i32 %79 to i64, !dbg !11952
  %arrayidx128 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom127, !dbg !11952
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx128, i32 0, i32 2, !dbg !11952
  %80 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !11952
  %81 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11953
  %82 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !11954
  %83 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !11955
  %84 = load %struct.rtx_def*, %struct.rtx_def** %op3.addr, align 8, !dbg !11956
  %call129 = call %struct.rtx_def* (%struct.rtx_def*, ...) %80(%struct.rtx_def* %81, %struct.rtx_def* %82, %struct.rtx_def* %83, %struct.rtx_def* %84), !dbg !11952
  store %struct.rtx_def* %call129, %struct.rtx_def** %insn, align 8, !dbg !11957
  br label %if.end130

if.end130:                                        ; preds = %if.else126, %if.then125
  %85 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !11958
  %cmp131 = icmp eq %struct.rtx_def* %85, null, !dbg !11960
  br i1 %cmp131, label %if.then133, label %if.end134, !dbg !11961

if.then133:                                       ; preds = %if.end130
  call void @end_sequence(), !dbg !11962
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11964
  br label %return, !dbg !11964

if.end134:                                        ; preds = %if.end130
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !11965
  %call135 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %86), !dbg !11966
  %call136 = call %struct.rtx_def* @get_insns(), !dbg !11967
  store %struct.rtx_def* %call136, %struct.rtx_def** %insn, align 8, !dbg !11968
  call void @end_sequence(), !dbg !11969
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !11970
  %call137 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %87), !dbg !11971
  %88 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11972
  %89 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11974
  %cmp138 = icmp ne %struct.rtx_def* %88, %89, !dbg !11975
  br i1 %cmp138, label %if.then140, label %if.end141, !dbg !11976

if.then140:                                       ; preds = %if.end134
  %90 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11977
  %91 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !11978
  call void @convert_move(%struct.rtx_def* %90, %struct.rtx_def* %91, i32 0), !dbg !11979
  br label %if.end141, !dbg !11979

if.end141:                                        ; preds = %if.then140, %if.end134
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !11980
  store %struct.rtx_def* %92, %struct.rtx_def** %retval, align 8, !dbg !11981
  br label %return, !dbg !11981

return:                                           ; preds = %if.end141, %if.then133, %if.then115, %if.then30
  %93 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !11982
  ret %struct.rtx_def* %93, !dbg !11982
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_add2_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !11983 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11986, metadata !DIExpression()), !dbg !11987
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !11988, metadata !DIExpression()), !dbg !11989
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !11990, metadata !DIExpression()), !dbg !11991
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11992
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !11992
  %bf.load = load i32, i32* %1, align 8, !dbg !11992
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11992
  %bf.clear = and i32 %bf.lshr, 255, !dbg !11992
  %idxprom = sext i32 %bf.clear to i64, !dbg !11992
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 4), i64 0, i64 %idxprom, !dbg !11992
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !11993
  %2 = load i32, i32* %insn_code, align 4, !dbg !11993
  store i32 %2, i32* %icode, align 4, !dbg !11991
  %3 = load i32, i32* %icode, align 4, !dbg !11994
  %idxprom1 = sext i32 %3 to i64, !dbg !11994
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !11994
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !11994
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !11994
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 0, !dbg !11994
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 0, !dbg !11994
  %5 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !11994
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11994
  %7 = load i32, i32* %icode, align 4, !dbg !11994
  %idxprom4 = sext i32 %7 to i64, !dbg !11994
  %arrayidx5 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom4, !dbg !11994
  %operand6 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx5, i32 0, i32 3, !dbg !11994
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand6, align 8, !dbg !11994
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 0, !dbg !11994
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 2, !dbg !11994
  %bf.load8 = load i16, i16* %mode, align 8, !dbg !11994
  %bf.cast = zext i16 %bf.load8 to i32, !dbg !11994
  %call = call i32 %5(%struct.rtx_def* %6, i32 %bf.cast), !dbg !11994
  %tobool = icmp ne i32 %call, 0, !dbg !11994
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11994

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11994
  br label %cond.end, !dbg !11994

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11994

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11994
  %9 = load i32, i32* %icode, align 4, !dbg !11995
  %idxprom9 = sext i32 %9 to i64, !dbg !11995
  %arrayidx10 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom9, !dbg !11995
  %operand11 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx10, i32 0, i32 3, !dbg !11995
  %10 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand11, align 8, !dbg !11995
  %arrayidx12 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %10, i64 1, !dbg !11995
  %predicate13 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx12, i32 0, i32 0, !dbg !11995
  %11 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate13, align 8, !dbg !11995
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11995
  %13 = load i32, i32* %icode, align 4, !dbg !11995
  %idxprom14 = sext i32 %13 to i64, !dbg !11995
  %arrayidx15 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom14, !dbg !11995
  %operand16 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx15, i32 0, i32 3, !dbg !11995
  %14 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand16, align 8, !dbg !11995
  %arrayidx17 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %14, i64 1, !dbg !11995
  %mode18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx17, i32 0, i32 2, !dbg !11995
  %bf.load19 = load i16, i16* %mode18, align 8, !dbg !11995
  %bf.cast20 = zext i16 %bf.load19 to i32, !dbg !11995
  %call21 = call i32 %11(%struct.rtx_def* %12, i32 %bf.cast20), !dbg !11995
  %tobool22 = icmp ne i32 %call21, 0, !dbg !11995
  br i1 %tobool22, label %cond.false24, label %cond.true23, !dbg !11995

cond.true23:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4762, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11995
  br label %cond.end25, !dbg !11995

cond.false24:                                     ; preds = %cond.end
  br label %cond.end25, !dbg !11995

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !11995
  %15 = load i32, i32* %icode, align 4, !dbg !11996
  %idxprom27 = sext i32 %15 to i64, !dbg !11996
  %arrayidx28 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom27, !dbg !11996
  %operand29 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx28, i32 0, i32 3, !dbg !11996
  %16 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand29, align 8, !dbg !11996
  %arrayidx30 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %16, i64 2, !dbg !11996
  %predicate31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx30, i32 0, i32 0, !dbg !11996
  %17 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate31, align 8, !dbg !11996
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !11996
  %19 = load i32, i32* %icode, align 4, !dbg !11996
  %idxprom32 = sext i32 %19 to i64, !dbg !11996
  %arrayidx33 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom32, !dbg !11996
  %operand34 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx33, i32 0, i32 3, !dbg !11996
  %20 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand34, align 8, !dbg !11996
  %arrayidx35 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %20, i64 2, !dbg !11996
  %mode36 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx35, i32 0, i32 2, !dbg !11996
  %bf.load37 = load i16, i16* %mode36, align 8, !dbg !11996
  %bf.cast38 = zext i16 %bf.load37 to i32, !dbg !11996
  %call39 = call i32 %17(%struct.rtx_def* %18, i32 %bf.cast38), !dbg !11996
  %tobool40 = icmp ne i32 %call39, 0, !dbg !11996
  br i1 %tobool40, label %cond.false42, label %cond.true41, !dbg !11996

cond.true41:                                      ; preds = %cond.end25
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4764, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11996
  br label %cond.end43, !dbg !11996

cond.false42:                                     ; preds = %cond.end25
  br label %cond.end43, !dbg !11996

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i32 [ 0, %cond.true41 ], [ 0, %cond.false42 ], !dbg !11996
  %21 = load i32, i32* %icode, align 4, !dbg !11997
  %idxprom45 = sext i32 %21 to i64, !dbg !11997
  %arrayidx46 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom45, !dbg !11997
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx46, i32 0, i32 2, !dbg !11997
  %22 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !11997
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11998
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11999
  %25 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12000
  %call47 = call %struct.rtx_def* (%struct.rtx_def*, ...) %22(%struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* %25), !dbg !11997
  ret %struct.rtx_def* %call47, !dbg !12001
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_add3_insn(%struct.rtx_def* %r0, %struct.rtx_def* %r1, %struct.rtx_def* %c) #0 !dbg !12002 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %r0.addr = alloca %struct.rtx_def*, align 8
  %r1.addr = alloca %struct.rtx_def*, align 8
  %c.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store %struct.rtx_def* %r0, %struct.rtx_def** %r0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %r0.addr, metadata !12003, metadata !DIExpression()), !dbg !12004
  store %struct.rtx_def* %r1, %struct.rtx_def** %r1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %r1.addr, metadata !12005, metadata !DIExpression()), !dbg !12006
  store %struct.rtx_def* %c, %struct.rtx_def** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %c.addr, metadata !12007, metadata !DIExpression()), !dbg !12008
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12009, metadata !DIExpression()), !dbg !12010
  %0 = load %struct.rtx_def*, %struct.rtx_def** %r0.addr, align 8, !dbg !12011
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12011
  %bf.load = load i32, i32* %1, align 8, !dbg !12011
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12011
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12011
  %idxprom = sext i32 %bf.clear to i64, !dbg !12011
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 4), i64 0, i64 %idxprom, !dbg !12011
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !12012
  %2 = load i32, i32* %insn_code, align 4, !dbg !12012
  store i32 %2, i32* %icode, align 4, !dbg !12010
  %3 = load i32, i32* %icode, align 4, !dbg !12013
  %cmp = icmp eq i32 %3, 2956, !dbg !12015
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12016

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %icode, align 4, !dbg !12017
  %idxprom1 = sext i32 %4 to i64, !dbg !12018
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !12018
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !12019
  %5 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !12019
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %5, i64 0, !dbg !12018
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 0, !dbg !12020
  %6 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !12020
  %7 = load %struct.rtx_def*, %struct.rtx_def** %r0.addr, align 8, !dbg !12021
  %8 = load i32, i32* %icode, align 4, !dbg !12022
  %idxprom4 = sext i32 %8 to i64, !dbg !12023
  %arrayidx5 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom4, !dbg !12023
  %operand6 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx5, i32 0, i32 3, !dbg !12024
  %9 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand6, align 8, !dbg !12024
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %9, i64 0, !dbg !12023
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 2, !dbg !12025
  %bf.load8 = load i16, i16* %mode, align 8, !dbg !12025
  %bf.cast = zext i16 %bf.load8 to i32, !dbg !12025
  %call = call i32 %6(%struct.rtx_def* %7, i32 %bf.cast), !dbg !12018
  %tobool = icmp ne i32 %call, 0, !dbg !12018
  br i1 %tobool, label %lor.lhs.false9, label %if.then, !dbg !12026

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %10 = load i32, i32* %icode, align 4, !dbg !12027
  %idxprom10 = sext i32 %10 to i64, !dbg !12028
  %arrayidx11 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom10, !dbg !12028
  %operand12 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx11, i32 0, i32 3, !dbg !12029
  %11 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand12, align 8, !dbg !12029
  %arrayidx13 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %11, i64 1, !dbg !12028
  %predicate14 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx13, i32 0, i32 0, !dbg !12030
  %12 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate14, align 8, !dbg !12030
  %13 = load %struct.rtx_def*, %struct.rtx_def** %r1.addr, align 8, !dbg !12031
  %14 = load i32, i32* %icode, align 4, !dbg !12032
  %idxprom15 = sext i32 %14 to i64, !dbg !12033
  %arrayidx16 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom15, !dbg !12033
  %operand17 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx16, i32 0, i32 3, !dbg !12034
  %15 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand17, align 8, !dbg !12034
  %arrayidx18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %15, i64 1, !dbg !12033
  %mode19 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx18, i32 0, i32 2, !dbg !12035
  %bf.load20 = load i16, i16* %mode19, align 8, !dbg !12035
  %bf.cast21 = zext i16 %bf.load20 to i32, !dbg !12035
  %call22 = call i32 %12(%struct.rtx_def* %13, i32 %bf.cast21), !dbg !12028
  %tobool23 = icmp ne i32 %call22, 0, !dbg !12028
  br i1 %tobool23, label %lor.lhs.false24, label %if.then, !dbg !12036

lor.lhs.false24:                                  ; preds = %lor.lhs.false9
  %16 = load i32, i32* %icode, align 4, !dbg !12037
  %idxprom25 = sext i32 %16 to i64, !dbg !12038
  %arrayidx26 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom25, !dbg !12038
  %operand27 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx26, i32 0, i32 3, !dbg !12039
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand27, align 8, !dbg !12039
  %arrayidx28 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 2, !dbg !12038
  %predicate29 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx28, i32 0, i32 0, !dbg !12040
  %18 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate29, align 8, !dbg !12040
  %19 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8, !dbg !12041
  %20 = load i32, i32* %icode, align 4, !dbg !12042
  %idxprom30 = sext i32 %20 to i64, !dbg !12043
  %arrayidx31 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom30, !dbg !12043
  %operand32 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx31, i32 0, i32 3, !dbg !12044
  %21 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand32, align 8, !dbg !12044
  %arrayidx33 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %21, i64 2, !dbg !12043
  %mode34 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx33, i32 0, i32 2, !dbg !12045
  %bf.load35 = load i16, i16* %mode34, align 8, !dbg !12045
  %bf.cast36 = zext i16 %bf.load35 to i32, !dbg !12045
  %call37 = call i32 %18(%struct.rtx_def* %19, i32 %bf.cast36), !dbg !12038
  %tobool38 = icmp ne i32 %call37, 0, !dbg !12038
  br i1 %tobool38, label %if.end, label %if.then, !dbg !12046

if.then:                                          ; preds = %lor.lhs.false24, %lor.lhs.false9, %lor.lhs.false, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !12047
  br label %return, !dbg !12047

if.end:                                           ; preds = %lor.lhs.false24
  %22 = load i32, i32* %icode, align 4, !dbg !12048
  %idxprom39 = sext i32 %22 to i64, !dbg !12048
  %arrayidx40 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom39, !dbg !12048
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx40, i32 0, i32 2, !dbg !12048
  %23 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !12048
  %24 = load %struct.rtx_def*, %struct.rtx_def** %r0.addr, align 8, !dbg !12049
  %25 = load %struct.rtx_def*, %struct.rtx_def** %r1.addr, align 8, !dbg !12050
  %26 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8, !dbg !12051
  %call41 = call %struct.rtx_def* (%struct.rtx_def*, ...) %23(%struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %26), !dbg !12048
  store %struct.rtx_def* %call41, %struct.rtx_def** %retval, align 8, !dbg !12052
  br label %return, !dbg !12052

return:                                           ; preds = %if.end, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12053
  ret %struct.rtx_def* %27, !dbg !12053
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @have_add2_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !12054 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12057, metadata !DIExpression()), !dbg !12058
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !12059, metadata !DIExpression()), !dbg !12060
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12061, metadata !DIExpression()), !dbg !12062
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12063
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12063
  %bf.load = load i32, i32* %1, align 8, !dbg !12063
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12063
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12063
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !12063
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12063

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4794, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12063
  br label %cond.end, !dbg !12063

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12063

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12063
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12064
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12064
  %bf.load1 = load i32, i32* %3, align 8, !dbg !12064
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !12064
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !12064
  %idxprom = sext i32 %bf.clear3 to i64, !dbg !12064
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 4), i64 0, i64 %idxprom, !dbg !12064
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !12065
  %4 = load i32, i32* %insn_code, align 4, !dbg !12065
  store i32 %4, i32* %icode, align 4, !dbg !12066
  %5 = load i32, i32* %icode, align 4, !dbg !12067
  %cmp4 = icmp eq i32 %5, 2956, !dbg !12069
  br i1 %cmp4, label %if.then, label %if.end, !dbg !12070

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !12071
  br label %return, !dbg !12071

if.end:                                           ; preds = %cond.end
  %6 = load i32, i32* %icode, align 4, !dbg !12072
  %idxprom5 = sext i32 %6 to i64, !dbg !12074
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom5, !dbg !12074
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3, !dbg !12075
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !12075
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 0, !dbg !12074
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 0, !dbg !12076
  %8 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !12076
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12077
  %10 = load i32, i32* %icode, align 4, !dbg !12078
  %idxprom8 = sext i32 %10 to i64, !dbg !12079
  %arrayidx9 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom8, !dbg !12079
  %operand10 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx9, i32 0, i32 3, !dbg !12080
  %11 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand10, align 8, !dbg !12080
  %arrayidx11 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %11, i64 0, !dbg !12079
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx11, i32 0, i32 2, !dbg !12081
  %bf.load12 = load i16, i16* %mode, align 8, !dbg !12081
  %bf.cast = zext i16 %bf.load12 to i32, !dbg !12081
  %call = call i32 %8(%struct.rtx_def* %9, i32 %bf.cast), !dbg !12074
  %tobool = icmp ne i32 %call, 0, !dbg !12074
  br i1 %tobool, label %lor.lhs.false, label %if.then42, !dbg !12082

lor.lhs.false:                                    ; preds = %if.end
  %12 = load i32, i32* %icode, align 4, !dbg !12083
  %idxprom13 = sext i32 %12 to i64, !dbg !12084
  %arrayidx14 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom13, !dbg !12084
  %operand15 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx14, i32 0, i32 3, !dbg !12085
  %13 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand15, align 8, !dbg !12085
  %arrayidx16 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %13, i64 1, !dbg !12084
  %predicate17 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx16, i32 0, i32 0, !dbg !12086
  %14 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate17, align 8, !dbg !12086
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12087
  %16 = load i32, i32* %icode, align 4, !dbg !12088
  %idxprom18 = sext i32 %16 to i64, !dbg !12089
  %arrayidx19 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom18, !dbg !12089
  %operand20 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx19, i32 0, i32 3, !dbg !12090
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand20, align 8, !dbg !12090
  %arrayidx21 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 1, !dbg !12089
  %mode22 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx21, i32 0, i32 2, !dbg !12091
  %bf.load23 = load i16, i16* %mode22, align 8, !dbg !12091
  %bf.cast24 = zext i16 %bf.load23 to i32, !dbg !12091
  %call25 = call i32 %14(%struct.rtx_def* %15, i32 %bf.cast24), !dbg !12084
  %tobool26 = icmp ne i32 %call25, 0, !dbg !12084
  br i1 %tobool26, label %lor.lhs.false27, label %if.then42, !dbg !12092

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %icode, align 4, !dbg !12093
  %idxprom28 = sext i32 %18 to i64, !dbg !12094
  %arrayidx29 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom28, !dbg !12094
  %operand30 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx29, i32 0, i32 3, !dbg !12095
  %19 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand30, align 8, !dbg !12095
  %arrayidx31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %19, i64 2, !dbg !12094
  %predicate32 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx31, i32 0, i32 0, !dbg !12096
  %20 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate32, align 8, !dbg !12096
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12097
  %22 = load i32, i32* %icode, align 4, !dbg !12098
  %idxprom33 = sext i32 %22 to i64, !dbg !12099
  %arrayidx34 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom33, !dbg !12099
  %operand35 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx34, i32 0, i32 3, !dbg !12100
  %23 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand35, align 8, !dbg !12100
  %arrayidx36 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %23, i64 2, !dbg !12099
  %mode37 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx36, i32 0, i32 2, !dbg !12101
  %bf.load38 = load i16, i16* %mode37, align 8, !dbg !12101
  %bf.cast39 = zext i16 %bf.load38 to i32, !dbg !12101
  %call40 = call i32 %20(%struct.rtx_def* %21, i32 %bf.cast39), !dbg !12094
  %tobool41 = icmp ne i32 %call40, 0, !dbg !12094
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !12102

if.then42:                                        ; preds = %lor.lhs.false27, %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !12103
  br label %return, !dbg !12103

if.end43:                                         ; preds = %lor.lhs.false27
  store i32 1, i32* %retval, align 4, !dbg !12104
  br label %return, !dbg !12104

return:                                           ; preds = %if.end43, %if.then42, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !12105
  ret i32 %24, !dbg !12105
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_sub2_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !12106 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12107, metadata !DIExpression()), !dbg !12108
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !12109, metadata !DIExpression()), !dbg !12110
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12111, metadata !DIExpression()), !dbg !12112
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12113
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12113
  %bf.load = load i32, i32* %1, align 8, !dbg !12113
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12113
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12113
  %idxprom = sext i32 %bf.clear to i64, !dbg !12113
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14, i32 4), i64 0, i64 %idxprom, !dbg !12113
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !12114
  %2 = load i32, i32* %insn_code, align 4, !dbg !12114
  store i32 %2, i32* %icode, align 4, !dbg !12112
  %3 = load i32, i32* %icode, align 4, !dbg !12115
  %idxprom1 = sext i32 %3 to i64, !dbg !12115
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !12115
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !12115
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !12115
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 0, !dbg !12115
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 0, !dbg !12115
  %5 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !12115
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12115
  %7 = load i32, i32* %icode, align 4, !dbg !12115
  %idxprom4 = sext i32 %7 to i64, !dbg !12115
  %arrayidx5 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom4, !dbg !12115
  %operand6 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx5, i32 0, i32 3, !dbg !12115
  %8 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand6, align 8, !dbg !12115
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %8, i64 0, !dbg !12115
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 2, !dbg !12115
  %bf.load8 = load i16, i16* %mode, align 8, !dbg !12115
  %bf.cast = zext i16 %bf.load8 to i32, !dbg !12115
  %call = call i32 %5(%struct.rtx_def* %6, i32 %bf.cast), !dbg !12115
  %tobool = icmp ne i32 %call, 0, !dbg !12115
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12115

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4820, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12115
  br label %cond.end, !dbg !12115

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12115
  %9 = load i32, i32* %icode, align 4, !dbg !12116
  %idxprom9 = sext i32 %9 to i64, !dbg !12116
  %arrayidx10 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom9, !dbg !12116
  %operand11 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx10, i32 0, i32 3, !dbg !12116
  %10 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand11, align 8, !dbg !12116
  %arrayidx12 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %10, i64 1, !dbg !12116
  %predicate13 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx12, i32 0, i32 0, !dbg !12116
  %11 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate13, align 8, !dbg !12116
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12116
  %13 = load i32, i32* %icode, align 4, !dbg !12116
  %idxprom14 = sext i32 %13 to i64, !dbg !12116
  %arrayidx15 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom14, !dbg !12116
  %operand16 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx15, i32 0, i32 3, !dbg !12116
  %14 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand16, align 8, !dbg !12116
  %arrayidx17 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %14, i64 1, !dbg !12116
  %mode18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx17, i32 0, i32 2, !dbg !12116
  %bf.load19 = load i16, i16* %mode18, align 8, !dbg !12116
  %bf.cast20 = zext i16 %bf.load19 to i32, !dbg !12116
  %call21 = call i32 %11(%struct.rtx_def* %12, i32 %bf.cast20), !dbg !12116
  %tobool22 = icmp ne i32 %call21, 0, !dbg !12116
  br i1 %tobool22, label %cond.false24, label %cond.true23, !dbg !12116

cond.true23:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4822, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12116
  br label %cond.end25, !dbg !12116

cond.false24:                                     ; preds = %cond.end
  br label %cond.end25, !dbg !12116

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !12116
  %15 = load i32, i32* %icode, align 4, !dbg !12117
  %idxprom27 = sext i32 %15 to i64, !dbg !12117
  %arrayidx28 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom27, !dbg !12117
  %operand29 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx28, i32 0, i32 3, !dbg !12117
  %16 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand29, align 8, !dbg !12117
  %arrayidx30 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %16, i64 2, !dbg !12117
  %predicate31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx30, i32 0, i32 0, !dbg !12117
  %17 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate31, align 8, !dbg !12117
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12117
  %19 = load i32, i32* %icode, align 4, !dbg !12117
  %idxprom32 = sext i32 %19 to i64, !dbg !12117
  %arrayidx33 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom32, !dbg !12117
  %operand34 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx33, i32 0, i32 3, !dbg !12117
  %20 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand34, align 8, !dbg !12117
  %arrayidx35 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %20, i64 2, !dbg !12117
  %mode36 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx35, i32 0, i32 2, !dbg !12117
  %bf.load37 = load i16, i16* %mode36, align 8, !dbg !12117
  %bf.cast38 = zext i16 %bf.load37 to i32, !dbg !12117
  %call39 = call i32 %17(%struct.rtx_def* %18, i32 %bf.cast38), !dbg !12117
  %tobool40 = icmp ne i32 %call39, 0, !dbg !12117
  br i1 %tobool40, label %cond.false42, label %cond.true41, !dbg !12117

cond.true41:                                      ; preds = %cond.end25
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4824, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12117
  br label %cond.end43, !dbg !12117

cond.false42:                                     ; preds = %cond.end25
  br label %cond.end43, !dbg !12117

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi i32 [ 0, %cond.true41 ], [ 0, %cond.false42 ], !dbg !12117
  %21 = load i32, i32* %icode, align 4, !dbg !12118
  %idxprom45 = sext i32 %21 to i64, !dbg !12118
  %arrayidx46 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom45, !dbg !12118
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx46, i32 0, i32 2, !dbg !12118
  %22 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !12118
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12119
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12120
  %25 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12121
  %call47 = call %struct.rtx_def* (%struct.rtx_def*, ...) %22(%struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* %25), !dbg !12118
  ret %struct.rtx_def* %call47, !dbg !12122
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_sub3_insn(%struct.rtx_def* %r0, %struct.rtx_def* %r1, %struct.rtx_def* %c) #0 !dbg !12123 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %r0.addr = alloca %struct.rtx_def*, align 8
  %r1.addr = alloca %struct.rtx_def*, align 8
  %c.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store %struct.rtx_def* %r0, %struct.rtx_def** %r0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %r0.addr, metadata !12124, metadata !DIExpression()), !dbg !12125
  store %struct.rtx_def* %r1, %struct.rtx_def** %r1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %r1.addr, metadata !12126, metadata !DIExpression()), !dbg !12127
  store %struct.rtx_def* %c, %struct.rtx_def** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %c.addr, metadata !12128, metadata !DIExpression()), !dbg !12129
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12130, metadata !DIExpression()), !dbg !12131
  %0 = load %struct.rtx_def*, %struct.rtx_def** %r0.addr, align 8, !dbg !12132
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12132
  %bf.load = load i32, i32* %1, align 8, !dbg !12132
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12132
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12132
  %idxprom = sext i32 %bf.clear to i64, !dbg !12132
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14, i32 4), i64 0, i64 %idxprom, !dbg !12132
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !12133
  %2 = load i32, i32* %insn_code, align 4, !dbg !12133
  store i32 %2, i32* %icode, align 4, !dbg !12131
  %3 = load i32, i32* %icode, align 4, !dbg !12134
  %cmp = icmp eq i32 %3, 2956, !dbg !12136
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12137

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %icode, align 4, !dbg !12138
  %idxprom1 = sext i32 %4 to i64, !dbg !12139
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !12139
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !12140
  %5 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !12140
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %5, i64 0, !dbg !12139
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 0, !dbg !12141
  %6 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !12141
  %7 = load %struct.rtx_def*, %struct.rtx_def** %r0.addr, align 8, !dbg !12142
  %8 = load i32, i32* %icode, align 4, !dbg !12143
  %idxprom4 = sext i32 %8 to i64, !dbg !12144
  %arrayidx5 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom4, !dbg !12144
  %operand6 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx5, i32 0, i32 3, !dbg !12145
  %9 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand6, align 8, !dbg !12145
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %9, i64 0, !dbg !12144
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 2, !dbg !12146
  %bf.load8 = load i16, i16* %mode, align 8, !dbg !12146
  %bf.cast = zext i16 %bf.load8 to i32, !dbg !12146
  %call = call i32 %6(%struct.rtx_def* %7, i32 %bf.cast), !dbg !12139
  %tobool = icmp ne i32 %call, 0, !dbg !12139
  br i1 %tobool, label %lor.lhs.false9, label %if.then, !dbg !12147

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %10 = load i32, i32* %icode, align 4, !dbg !12148
  %idxprom10 = sext i32 %10 to i64, !dbg !12149
  %arrayidx11 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom10, !dbg !12149
  %operand12 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx11, i32 0, i32 3, !dbg !12150
  %11 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand12, align 8, !dbg !12150
  %arrayidx13 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %11, i64 1, !dbg !12149
  %predicate14 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx13, i32 0, i32 0, !dbg !12151
  %12 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate14, align 8, !dbg !12151
  %13 = load %struct.rtx_def*, %struct.rtx_def** %r1.addr, align 8, !dbg !12152
  %14 = load i32, i32* %icode, align 4, !dbg !12153
  %idxprom15 = sext i32 %14 to i64, !dbg !12154
  %arrayidx16 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom15, !dbg !12154
  %operand17 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx16, i32 0, i32 3, !dbg !12155
  %15 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand17, align 8, !dbg !12155
  %arrayidx18 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %15, i64 1, !dbg !12154
  %mode19 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx18, i32 0, i32 2, !dbg !12156
  %bf.load20 = load i16, i16* %mode19, align 8, !dbg !12156
  %bf.cast21 = zext i16 %bf.load20 to i32, !dbg !12156
  %call22 = call i32 %12(%struct.rtx_def* %13, i32 %bf.cast21), !dbg !12149
  %tobool23 = icmp ne i32 %call22, 0, !dbg !12149
  br i1 %tobool23, label %lor.lhs.false24, label %if.then, !dbg !12157

lor.lhs.false24:                                  ; preds = %lor.lhs.false9
  %16 = load i32, i32* %icode, align 4, !dbg !12158
  %idxprom25 = sext i32 %16 to i64, !dbg !12159
  %arrayidx26 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom25, !dbg !12159
  %operand27 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx26, i32 0, i32 3, !dbg !12160
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand27, align 8, !dbg !12160
  %arrayidx28 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 2, !dbg !12159
  %predicate29 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx28, i32 0, i32 0, !dbg !12161
  %18 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate29, align 8, !dbg !12161
  %19 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8, !dbg !12162
  %20 = load i32, i32* %icode, align 4, !dbg !12163
  %idxprom30 = sext i32 %20 to i64, !dbg !12164
  %arrayidx31 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom30, !dbg !12164
  %operand32 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx31, i32 0, i32 3, !dbg !12165
  %21 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand32, align 8, !dbg !12165
  %arrayidx33 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %21, i64 2, !dbg !12164
  %mode34 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx33, i32 0, i32 2, !dbg !12166
  %bf.load35 = load i16, i16* %mode34, align 8, !dbg !12166
  %bf.cast36 = zext i16 %bf.load35 to i32, !dbg !12166
  %call37 = call i32 %18(%struct.rtx_def* %19, i32 %bf.cast36), !dbg !12159
  %tobool38 = icmp ne i32 %call37, 0, !dbg !12159
  br i1 %tobool38, label %if.end, label %if.then, !dbg !12167

if.then:                                          ; preds = %lor.lhs.false24, %lor.lhs.false9, %lor.lhs.false, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !12168
  br label %return, !dbg !12168

if.end:                                           ; preds = %lor.lhs.false24
  %22 = load i32, i32* %icode, align 4, !dbg !12169
  %idxprom39 = sext i32 %22 to i64, !dbg !12169
  %arrayidx40 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom39, !dbg !12169
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx40, i32 0, i32 2, !dbg !12169
  %23 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !12169
  %24 = load %struct.rtx_def*, %struct.rtx_def** %r0.addr, align 8, !dbg !12170
  %25 = load %struct.rtx_def*, %struct.rtx_def** %r1.addr, align 8, !dbg !12171
  %26 = load %struct.rtx_def*, %struct.rtx_def** %c.addr, align 8, !dbg !12172
  %call41 = call %struct.rtx_def* (%struct.rtx_def*, ...) %23(%struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %26), !dbg !12169
  store %struct.rtx_def* %call41, %struct.rtx_def** %retval, align 8, !dbg !12173
  br label %return, !dbg !12173

return:                                           ; preds = %if.end, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12174
  ret %struct.rtx_def* %27, !dbg !12174
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @have_sub2_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !12175 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12176, metadata !DIExpression()), !dbg !12177
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !12178, metadata !DIExpression()), !dbg !12179
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12180, metadata !DIExpression()), !dbg !12181
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12182
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12182
  %bf.load = load i32, i32* %1, align 8, !dbg !12182
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12182
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12182
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !12182
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12182

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4854, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12182
  br label %cond.end, !dbg !12182

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12182
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12183
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12183
  %bf.load1 = load i32, i32* %3, align 8, !dbg !12183
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !12183
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !12183
  %idxprom = sext i32 %bf.clear3 to i64, !dbg !12183
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14, i32 4), i64 0, i64 %idxprom, !dbg !12183
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !12184
  %4 = load i32, i32* %insn_code, align 4, !dbg !12184
  store i32 %4, i32* %icode, align 4, !dbg !12185
  %5 = load i32, i32* %icode, align 4, !dbg !12186
  %cmp4 = icmp eq i32 %5, 2956, !dbg !12188
  br i1 %cmp4, label %if.then, label %if.end, !dbg !12189

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !12190
  br label %return, !dbg !12190

if.end:                                           ; preds = %cond.end
  %6 = load i32, i32* %icode, align 4, !dbg !12191
  %idxprom5 = sext i32 %6 to i64, !dbg !12193
  %arrayidx6 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom5, !dbg !12193
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx6, i32 0, i32 3, !dbg !12194
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !12194
  %arrayidx7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 0, !dbg !12193
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx7, i32 0, i32 0, !dbg !12195
  %8 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !12195
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12196
  %10 = load i32, i32* %icode, align 4, !dbg !12197
  %idxprom8 = sext i32 %10 to i64, !dbg !12198
  %arrayidx9 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom8, !dbg !12198
  %operand10 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx9, i32 0, i32 3, !dbg !12199
  %11 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand10, align 8, !dbg !12199
  %arrayidx11 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %11, i64 0, !dbg !12198
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx11, i32 0, i32 2, !dbg !12200
  %bf.load12 = load i16, i16* %mode, align 8, !dbg !12200
  %bf.cast = zext i16 %bf.load12 to i32, !dbg !12200
  %call = call i32 %8(%struct.rtx_def* %9, i32 %bf.cast), !dbg !12193
  %tobool = icmp ne i32 %call, 0, !dbg !12193
  br i1 %tobool, label %lor.lhs.false, label %if.then42, !dbg !12201

lor.lhs.false:                                    ; preds = %if.end
  %12 = load i32, i32* %icode, align 4, !dbg !12202
  %idxprom13 = sext i32 %12 to i64, !dbg !12203
  %arrayidx14 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom13, !dbg !12203
  %operand15 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx14, i32 0, i32 3, !dbg !12204
  %13 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand15, align 8, !dbg !12204
  %arrayidx16 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %13, i64 1, !dbg !12203
  %predicate17 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx16, i32 0, i32 0, !dbg !12205
  %14 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate17, align 8, !dbg !12205
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12206
  %16 = load i32, i32* %icode, align 4, !dbg !12207
  %idxprom18 = sext i32 %16 to i64, !dbg !12208
  %arrayidx19 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom18, !dbg !12208
  %operand20 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx19, i32 0, i32 3, !dbg !12209
  %17 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand20, align 8, !dbg !12209
  %arrayidx21 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %17, i64 1, !dbg !12208
  %mode22 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx21, i32 0, i32 2, !dbg !12210
  %bf.load23 = load i16, i16* %mode22, align 8, !dbg !12210
  %bf.cast24 = zext i16 %bf.load23 to i32, !dbg !12210
  %call25 = call i32 %14(%struct.rtx_def* %15, i32 %bf.cast24), !dbg !12203
  %tobool26 = icmp ne i32 %call25, 0, !dbg !12203
  br i1 %tobool26, label %lor.lhs.false27, label %if.then42, !dbg !12211

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %18 = load i32, i32* %icode, align 4, !dbg !12212
  %idxprom28 = sext i32 %18 to i64, !dbg !12213
  %arrayidx29 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom28, !dbg !12213
  %operand30 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx29, i32 0, i32 3, !dbg !12214
  %19 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand30, align 8, !dbg !12214
  %arrayidx31 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %19, i64 2, !dbg !12213
  %predicate32 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx31, i32 0, i32 0, !dbg !12215
  %20 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate32, align 8, !dbg !12215
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12216
  %22 = load i32, i32* %icode, align 4, !dbg !12217
  %idxprom33 = sext i32 %22 to i64, !dbg !12218
  %arrayidx34 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom33, !dbg !12218
  %operand35 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx34, i32 0, i32 3, !dbg !12219
  %23 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand35, align 8, !dbg !12219
  %arrayidx36 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %23, i64 2, !dbg !12218
  %mode37 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx36, i32 0, i32 2, !dbg !12220
  %bf.load38 = load i16, i16* %mode37, align 8, !dbg !12220
  %bf.cast39 = zext i16 %bf.load38 to i32, !dbg !12220
  %call40 = call i32 %20(%struct.rtx_def* %21, i32 %bf.cast39), !dbg !12213
  %tobool41 = icmp ne i32 %call40, 0, !dbg !12213
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !12221

if.then42:                                        ; preds = %lor.lhs.false27, %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !12222
  br label %return, !dbg !12222

if.end43:                                         ; preds = %lor.lhs.false27
  store i32 1, i32* %retval, align 4, !dbg !12223
  br label %return, !dbg !12223

return:                                           ; preds = %if.end43, %if.then42, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !12224
  ret i32 %24, !dbg !12224
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !12225 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12226, metadata !DIExpression()), !dbg !12227
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !12228, metadata !DIExpression()), !dbg !12229
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !12230, metadata !DIExpression()), !dbg !12231
  call void @start_sequence(), !dbg !12232
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12233
  %1 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12234
  %call = call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !12235
  %call1 = call %struct.rtx_def* @get_insns(), !dbg !12236
  store %struct.rtx_def* %call1, %struct.rtx_def** %seq, align 8, !dbg !12237
  call void @end_sequence(), !dbg !12238
  %2 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12239
  ret %struct.rtx_def* %2, !dbg !12240
}

declare dso_local %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @can_extend_p(i32 %to_mode, i32 %from_mode, i32 %unsignedp) #0 !dbg !12241 {
entry:
  %to_mode.addr = alloca i32, align 4
  %from_mode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %tab = alloca %struct.convert_optab_d*, align 8
  store i32 %to_mode, i32* %to_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to_mode.addr, metadata !12244, metadata !DIExpression()), !dbg !12245
  store i32 %from_mode, i32* %from_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from_mode.addr, metadata !12246, metadata !DIExpression()), !dbg !12247
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12248, metadata !DIExpression()), !dbg !12249
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab, metadata !12250, metadata !DIExpression()), !dbg !12251
  %0 = load i32, i32* %unsignedp.addr, align 4, !dbg !12252
  %tobool = icmp ne i32 %0, 0, !dbg !12252
  %1 = zext i1 %tobool to i64, !dbg !12252
  %cond = select i1 %tobool, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 1), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 0), !dbg !12252
  store %struct.convert_optab_d* %cond, %struct.convert_optab_d** %tab, align 8, !dbg !12253
  %2 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !12254
  %handlers = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %2, i32 0, i32 3, !dbg !12254
  %3 = load i32, i32* %to_mode.addr, align 4, !dbg !12254
  %idxprom = sext i32 %3 to i64, !dbg !12254
  %arrayidx = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers, i64 0, i64 %idxprom, !dbg !12254
  %4 = load i32, i32* %from_mode.addr, align 4, !dbg !12254
  %idxprom1 = sext i32 %4 to i64, !dbg !12254
  %arrayidx2 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx, i64 0, i64 %idxprom1, !dbg !12254
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx2, i32 0, i32 0, !dbg !12255
  %5 = load i32, i32* %insn_code, align 4, !dbg !12255
  ret i32 %5, !dbg !12256
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_extend_insn(%struct.rtx_def* %x, %struct.rtx_def* %y, i32 %mto, i32 %mfrom, i32 %unsignedp) #0 !dbg !12257 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %mto.addr = alloca i32, align 4
  %mfrom.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %icode = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12260, metadata !DIExpression()), !dbg !12261
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !12262, metadata !DIExpression()), !dbg !12263
  store i32 %mto, i32* %mto.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mto.addr, metadata !12264, metadata !DIExpression()), !dbg !12265
  store i32 %mfrom, i32* %mfrom.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mfrom.addr, metadata !12266, metadata !DIExpression()), !dbg !12267
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12268, metadata !DIExpression()), !dbg !12269
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12270, metadata !DIExpression()), !dbg !12271
  %0 = load i32, i32* %mto.addr, align 4, !dbg !12272
  %1 = load i32, i32* %mfrom.addr, align 4, !dbg !12273
  %2 = load i32, i32* %unsignedp.addr, align 4, !dbg !12274
  %call = call i32 @can_extend_p(i32 %0, i32 %1, i32 %2), !dbg !12275
  store i32 %call, i32* %icode, align 4, !dbg !12271
  %3 = load i32, i32* %icode, align 4, !dbg !12276
  %idxprom = zext i32 %3 to i64, !dbg !12276
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !12276
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 2, !dbg !12276
  %4 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !12276
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12277
  %6 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !12278
  %call1 = call %struct.rtx_def* (%struct.rtx_def*, ...) %4(%struct.rtx_def* %5, %struct.rtx_def* %6), !dbg !12276
  ret %struct.rtx_def* %call1, !dbg !12279
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_float(%struct.rtx_def* %to, %struct.rtx_def* %from, i32 %unsignedp) #0 !dbg !12280 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %icode = alloca i32, align 4
  %target = alloca %struct.rtx_def*, align 8
  %fmode = alloca i32, align 4
  %imode = alloca i32, align 4
  %can_do_signed = alloca i8, align 1
  %doing_unsigned = alloca i32, align 4
  %scode = alloca i32, align 4
  %label = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %offset = alloca %struct.real_value, align 8
  %temp1 = alloca %struct.rtx_def*, align 8
  %neglabel = alloca %struct.rtx_def*, align 8
  %libfunc = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %tab = alloca %struct.convert_optab_d*, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !12283, metadata !DIExpression()), !dbg !12284
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !12285, metadata !DIExpression()), !dbg !12286
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12287, metadata !DIExpression()), !dbg !12288
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12289, metadata !DIExpression()), !dbg !12290
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !12291, metadata !DIExpression()), !dbg !12292
  %0 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12293
  store %struct.rtx_def* %0, %struct.rtx_def** %target, align 8, !dbg !12292
  call void @llvm.dbg.declare(metadata i32* %fmode, metadata !12294, metadata !DIExpression()), !dbg !12295
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !12296, metadata !DIExpression()), !dbg !12297
  call void @llvm.dbg.declare(metadata i8* %can_do_signed, metadata !12298, metadata !DIExpression()), !dbg !12299
  store i8 0, i8* %can_do_signed, align 1, !dbg !12299
  %1 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12300
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !12300
  %bf.load = load i32, i32* %2, align 8, !dbg !12300
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12300
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12300
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !12300
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12300

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4981, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12300
  br label %cond.end, !dbg !12300

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12300
  %3 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12301
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !12301
  %bf.load1 = load i32, i32* %4, align 8, !dbg !12301
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !12301
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !12301
  store i32 %bf.clear3, i32* %fmode, align 4, !dbg !12303
  br label %for.cond, !dbg !12304

for.cond:                                         ; preds = %for.inc70, %cond.end
  %5 = load i32, i32* %fmode, align 4, !dbg !12305
  %cmp4 = icmp ne i32 %5, 0, !dbg !12307
  br i1 %cmp4, label %for.body, label %for.end74, !dbg !12308

for.body:                                         ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12309
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !12309
  %bf.load5 = load i32, i32* %7, align 8, !dbg !12309
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !12309
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !12309
  store i32 %bf.clear7, i32* %imode, align 4, !dbg !12311
  br label %for.cond8, !dbg !12312

for.cond8:                                        ; preds = %for.inc, %for.body
  %8 = load i32, i32* %imode, align 4, !dbg !12313
  %cmp9 = icmp ne i32 %8, 0, !dbg !12315
  br i1 %cmp9, label %for.body10, label %for.end, !dbg !12316

for.body10:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata i32* %doing_unsigned, metadata !12317, metadata !DIExpression()), !dbg !12319
  %9 = load i32, i32* %unsignedp.addr, align 4, !dbg !12320
  store i32 %9, i32* %doing_unsigned, align 4, !dbg !12319
  %10 = load i32, i32* %fmode, align 4, !dbg !12321
  %11 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12323
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !12323
  %bf.load11 = load i32, i32* %12, align 8, !dbg !12323
  %bf.lshr12 = lshr i32 %bf.load11, 16, !dbg !12323
  %bf.clear13 = and i32 %bf.lshr12, 255, !dbg !12323
  %cmp14 = icmp ne i32 %10, %bf.clear13, !dbg !12324
  br i1 %cmp14, label %land.lhs.true, label %if.end, !dbg !12325

land.lhs.true:                                    ; preds = %for.body10
  %13 = load i32, i32* %fmode, align 4, !dbg !12326
  %call = call i32 @significand_size(i32 %13), !dbg !12327
  %14 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12328
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !12328
  %bf.load15 = load i32, i32* %15, align 8, !dbg !12328
  %bf.lshr16 = lshr i32 %bf.load15, 16, !dbg !12328
  %bf.clear17 = and i32 %bf.lshr16, 255, !dbg !12328
  %idxprom = zext i32 %bf.clear17 to i64, !dbg !12328
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !12328
  %16 = load i8, i8* %arrayidx, align 1, !dbg !12328
  %conv = zext i8 %16 to i16, !dbg !12328
  %conv18 = zext i16 %conv to i32, !dbg !12328
  %mul = mul nsw i32 %conv18, 8, !dbg !12328
  %conv19 = trunc i32 %mul to i16, !dbg !12328
  %conv20 = zext i16 %conv19 to i32, !dbg !12328
  %cmp21 = icmp slt i32 %call, %conv20, !dbg !12329
  br i1 %cmp21, label %if.then, label %if.end, !dbg !12330

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc, !dbg !12331

if.end:                                           ; preds = %land.lhs.true, %for.body10
  %17 = load i32, i32* %fmode, align 4, !dbg !12332
  %18 = load i32, i32* %imode, align 4, !dbg !12333
  %19 = load i32, i32* %unsignedp.addr, align 4, !dbg !12334
  %call23 = call i32 @can_float_p(i32 %17, i32 %18, i32 %19), !dbg !12335
  store i32 %call23, i32* %icode, align 4, !dbg !12336
  %20 = load i32, i32* %icode, align 4, !dbg !12337
  %cmp24 = icmp eq i32 %20, 2956, !dbg !12339
  br i1 %cmp24, label %land.lhs.true26, label %if.end40, !dbg !12340

land.lhs.true26:                                  ; preds = %if.end
  %21 = load i32, i32* %unsignedp.addr, align 4, !dbg !12341
  %tobool = icmp ne i32 %21, 0, !dbg !12341
  br i1 %tobool, label %if.then27, label %if.end40, !dbg !12342

if.then27:                                        ; preds = %land.lhs.true26
  call void @llvm.dbg.declare(metadata i32* %scode, metadata !12343, metadata !DIExpression()), !dbg !12345
  %22 = load i32, i32* %fmode, align 4, !dbg !12346
  %23 = load i32, i32* %imode, align 4, !dbg !12347
  %call28 = call i32 @can_float_p(i32 %22, i32 %23, i32 0), !dbg !12348
  store i32 %call28, i32* %scode, align 4, !dbg !12345
  %24 = load i32, i32* %scode, align 4, !dbg !12349
  %cmp29 = icmp ne i32 %24, 2956, !dbg !12351
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !12352

if.then31:                                        ; preds = %if.then27
  store i8 1, i8* %can_do_signed, align 1, !dbg !12353
  br label %if.end32, !dbg !12354

if.end32:                                         ; preds = %if.then31, %if.then27
  %25 = load i32, i32* %imode, align 4, !dbg !12355
  %26 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12357
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !12357
  %bf.load33 = load i32, i32* %27, align 8, !dbg !12357
  %bf.lshr34 = lshr i32 %bf.load33, 16, !dbg !12357
  %bf.clear35 = and i32 %bf.lshr34, 255, !dbg !12357
  %cmp36 = icmp ne i32 %25, %bf.clear35, !dbg !12358
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !12359

if.then38:                                        ; preds = %if.end32
  %28 = load i32, i32* %scode, align 4, !dbg !12360
  store i32 %28, i32* %icode, align 4, !dbg !12361
  store i32 0, i32* %doing_unsigned, align 4, !dbg !12362
  br label %if.end39, !dbg !12363

if.end39:                                         ; preds = %if.then38, %if.end32
  br label %if.end40, !dbg !12364

if.end40:                                         ; preds = %if.end39, %land.lhs.true26, %if.end
  %29 = load i32, i32* %icode, align 4, !dbg !12365
  %cmp41 = icmp ne i32 %29, 2956, !dbg !12367
  br i1 %cmp41, label %if.then43, label %if.end66, !dbg !12368

if.then43:                                        ; preds = %if.end40
  %30 = load i32, i32* %imode, align 4, !dbg !12369
  %31 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12372
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !12372
  %bf.load44 = load i32, i32* %32, align 8, !dbg !12372
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !12372
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !12372
  %cmp47 = icmp ne i32 %30, %bf.clear46, !dbg !12373
  br i1 %cmp47, label %if.then49, label %if.end51, !dbg !12374

if.then49:                                        ; preds = %if.then43
  %33 = load i32, i32* %imode, align 4, !dbg !12375
  %34 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12376
  %35 = load i32, i32* %unsignedp.addr, align 4, !dbg !12377
  %call50 = call %struct.rtx_def* @convert_to_mode(i32 %33, %struct.rtx_def* %34, i32 %35), !dbg !12378
  store %struct.rtx_def* %call50, %struct.rtx_def** %from.addr, align 8, !dbg !12379
  br label %if.end51, !dbg !12380

if.end51:                                         ; preds = %if.then49, %if.then43
  %36 = load i32, i32* %fmode, align 4, !dbg !12381
  %37 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12383
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !12383
  %bf.load52 = load i32, i32* %38, align 8, !dbg !12383
  %bf.lshr53 = lshr i32 %bf.load52, 16, !dbg !12383
  %bf.clear54 = and i32 %bf.lshr53, 255, !dbg !12383
  %cmp55 = icmp ne i32 %36, %bf.clear54, !dbg !12384
  br i1 %cmp55, label %if.then57, label %if.end59, !dbg !12385

if.then57:                                        ; preds = %if.end51
  %39 = load i32, i32* %fmode, align 4, !dbg !12386
  %call58 = call %struct.rtx_def* @gen_reg_rtx(i32 %39), !dbg !12387
  store %struct.rtx_def* %call58, %struct.rtx_def** %target, align 8, !dbg !12388
  br label %if.end59, !dbg !12389

if.end59:                                         ; preds = %if.then57, %if.end51
  %40 = load i32, i32* %icode, align 4, !dbg !12390
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12391
  %42 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12392
  %43 = load i32, i32* %doing_unsigned, align 4, !dbg !12393
  %tobool60 = icmp ne i32 %43, 0, !dbg !12393
  %44 = zext i1 %tobool60 to i64, !dbg !12393
  %cond61 = select i1 %tobool60, i32 105, i32 103, !dbg !12393
  call void @emit_unop_insn(i32 %40, %struct.rtx_def* %41, %struct.rtx_def* %42, i32 %cond61), !dbg !12394
  %45 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12395
  %46 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12397
  %cmp62 = icmp ne %struct.rtx_def* %45, %46, !dbg !12398
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !12399

if.then64:                                        ; preds = %if.end59
  %47 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12400
  %48 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12401
  call void @convert_move(%struct.rtx_def* %47, %struct.rtx_def* %48, i32 0), !dbg !12402
  br label %if.end65, !dbg !12402

if.end65:                                         ; preds = %if.then64, %if.end59
  br label %if.end272, !dbg !12403

if.end66:                                         ; preds = %if.end40
  br label %for.inc, !dbg !12404

for.inc:                                          ; preds = %if.end66, %if.then
  %49 = load i32, i32* %imode, align 4, !dbg !12405
  %idxprom67 = zext i32 %49 to i64, !dbg !12405
  %arrayidx68 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom67, !dbg !12405
  %50 = load i8, i8* %arrayidx68, align 1, !dbg !12405
  %conv69 = zext i8 %50 to i32, !dbg !12405
  store i32 %conv69, i32* %imode, align 4, !dbg !12406
  br label %for.cond8, !dbg !12407, !llvm.loop !12408

for.end:                                          ; preds = %for.cond8
  br label %for.inc70, !dbg !12409

for.inc70:                                        ; preds = %for.end
  %51 = load i32, i32* %fmode, align 4, !dbg !12410
  %idxprom71 = zext i32 %51 to i64, !dbg !12410
  %arrayidx72 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom71, !dbg !12410
  %52 = load i8, i8* %arrayidx72, align 1, !dbg !12410
  %conv73 = zext i8 %52 to i32, !dbg !12410
  store i32 %conv73, i32* %fmode, align 4, !dbg !12411
  br label %for.cond, !dbg !12412, !llvm.loop !12413

for.end74:                                        ; preds = %for.cond
  %53 = load i32, i32* %unsignedp.addr, align 4, !dbg !12415
  %tobool75 = icmp ne i32 %53, 0, !dbg !12415
  br i1 %tobool75, label %land.lhs.true76, label %if.end215, !dbg !12417

land.lhs.true76:                                  ; preds = %for.end74
  %54 = load i8, i8* %can_do_signed, align 1, !dbg !12418
  %conv77 = zext i8 %54 to i32, !dbg !12418
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !12418
  br i1 %tobool78, label %if.then79, label %if.end215, !dbg !12419

if.then79:                                        ; preds = %land.lhs.true76
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !12420, metadata !DIExpression()), !dbg !12422
  %call80 = call %struct.rtx_def* @gen_label_rtx(), !dbg !12423
  store %struct.rtx_def* %call80, %struct.rtx_def** %label, align 8, !dbg !12422
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !12424, metadata !DIExpression()), !dbg !12425
  call void @llvm.dbg.declare(metadata %struct.real_value* %offset, metadata !12426, metadata !DIExpression()), !dbg !12427
  %55 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12428
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !12428
  %bf.load81 = load i32, i32* %56, align 8, !dbg !12428
  %bf.lshr82 = lshr i32 %bf.load81, 16, !dbg !12428
  %bf.clear83 = and i32 %bf.lshr82, 255, !dbg !12428
  store i32 %bf.clear83, i32* %fmode, align 4, !dbg !12430
  br label %for.cond84, !dbg !12431

for.cond84:                                       ; preds = %for.inc116, %if.then79
  %57 = load i32, i32* %fmode, align 4, !dbg !12432
  %cmp85 = icmp ne i32 %57, 0, !dbg !12434
  br i1 %cmp85, label %for.body87, label %for.end120, !dbg !12435

for.body87:                                       ; preds = %for.cond84
  %58 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12436
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !12436
  %bf.load88 = load i32, i32* %59, align 8, !dbg !12436
  %bf.lshr89 = lshr i32 %bf.load88, 16, !dbg !12436
  %bf.clear90 = and i32 %bf.lshr89, 255, !dbg !12436
  %idxprom91 = zext i32 %bf.clear90 to i64, !dbg !12436
  %arrayidx92 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom91, !dbg !12436
  %60 = load i8, i8* %arrayidx92, align 1, !dbg !12436
  %conv93 = zext i8 %60 to i16, !dbg !12436
  %conv94 = zext i16 %conv93 to i32, !dbg !12436
  %mul95 = mul nsw i32 %conv94, 8, !dbg !12436
  %conv96 = trunc i32 %mul95 to i16, !dbg !12436
  %conv97 = zext i16 %conv96 to i32, !dbg !12436
  %61 = load i32, i32* %fmode, align 4, !dbg !12438
  %idxprom98 = zext i32 %61 to i64, !dbg !12438
  %arrayidx99 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom98, !dbg !12438
  %62 = load i8, i8* %arrayidx99, align 1, !dbg !12438
  %conv100 = zext i8 %62 to i16, !dbg !12438
  %conv101 = zext i16 %conv100 to i32, !dbg !12438
  %mul102 = mul nsw i32 %conv101, 8, !dbg !12438
  %conv103 = trunc i32 %mul102 to i16, !dbg !12438
  %conv104 = zext i16 %conv103 to i32, !dbg !12438
  %cmp105 = icmp slt i32 %conv97, %conv104, !dbg !12439
  br i1 %cmp105, label %land.lhs.true107, label %if.end115, !dbg !12440

land.lhs.true107:                                 ; preds = %for.body87
  %63 = load i32, i32* %fmode, align 4, !dbg !12441
  %64 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12442
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !12442
  %bf.load108 = load i32, i32* %65, align 8, !dbg !12442
  %bf.lshr109 = lshr i32 %bf.load108, 16, !dbg !12442
  %bf.clear110 = and i32 %bf.lshr109, 255, !dbg !12442
  %call111 = call i32 @can_float_p(i32 %63, i32 %bf.clear110, i32 0), !dbg !12443
  %cmp112 = icmp ne i32 %call111, 2956, !dbg !12444
  br i1 %cmp112, label %if.then114, label %if.end115, !dbg !12445

if.then114:                                       ; preds = %land.lhs.true107
  br label %for.end120, !dbg !12446

if.end115:                                        ; preds = %land.lhs.true107, %for.body87
  br label %for.inc116, !dbg !12447

for.inc116:                                       ; preds = %if.end115
  %66 = load i32, i32* %fmode, align 4, !dbg !12448
  %idxprom117 = zext i32 %66 to i64, !dbg !12448
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom117, !dbg !12448
  %67 = load i8, i8* %arrayidx118, align 1, !dbg !12448
  %conv119 = zext i8 %67 to i32, !dbg !12448
  store i32 %conv119, i32* %fmode, align 4, !dbg !12449
  br label %for.cond84, !dbg !12450, !llvm.loop !12451

for.end120:                                       ; preds = %if.then114, %for.cond84
  %68 = load i32, i32* %fmode, align 4, !dbg !12453
  %cmp121 = icmp eq i32 %68, 0, !dbg !12455
  br i1 %cmp121, label %if.then123, label %if.end176, !dbg !12456

if.then123:                                       ; preds = %for.end120
  %69 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12457
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !12457
  %bf.load124 = load i32, i32* %70, align 8, !dbg !12457
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !12457
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !12457
  store i32 %bf.clear126, i32* %fmode, align 4, !dbg !12459
  %71 = load i32, i32* %fmode, align 4, !dbg !12460
  %call127 = call i32 @significand_size(i32 %71), !dbg !12462
  %add = add nsw i32 %call127, 1, !dbg !12463
  %72 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12464
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !12464
  %bf.load128 = load i32, i32* %73, align 8, !dbg !12464
  %bf.lshr129 = lshr i32 %bf.load128, 16, !dbg !12464
  %bf.clear130 = and i32 %bf.lshr129, 255, !dbg !12464
  %idxprom131 = zext i32 %bf.clear130 to i64, !dbg !12464
  %arrayidx132 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom131, !dbg !12464
  %74 = load i8, i8* %arrayidx132, align 1, !dbg !12464
  %conv133 = zext i8 %74 to i16, !dbg !12464
  %conv134 = zext i16 %conv133 to i32, !dbg !12464
  %mul135 = mul nsw i32 %conv134, 8, !dbg !12464
  %conv136 = trunc i32 %mul135 to i16, !dbg !12464
  %conv137 = zext i16 %conv136 to i32, !dbg !12464
  %cmp138 = icmp slt i32 %add, %conv137, !dbg !12465
  br i1 %cmp138, label %if.then140, label %if.end175, !dbg !12466

if.then140:                                       ; preds = %if.then123
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp1, metadata !12467, metadata !DIExpression()), !dbg !12469
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %neglabel, metadata !12470, metadata !DIExpression()), !dbg !12471
  %call141 = call %struct.rtx_def* @gen_label_rtx(), !dbg !12472
  store %struct.rtx_def* %call141, %struct.rtx_def** %neglabel, align 8, !dbg !12471
  %75 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12473
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !12473
  %bf.load142 = load i32, i32* %76, align 8, !dbg !12473
  %bf.clear143 = and i32 %bf.load142, 65535, !dbg !12473
  %cmp144 = icmp eq i32 %bf.clear143, 37, !dbg !12473
  br i1 %cmp144, label %lor.lhs.false, label %if.then155, !dbg !12475

lor.lhs.false:                                    ; preds = %if.then140
  %77 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12476
  %call146 = call i32 @rhs_regno(%struct.rtx_def* %77), !dbg !12476
  %cmp147 = icmp ult i32 %call146, 53, !dbg !12477
  br i1 %cmp147, label %if.then155, label %lor.lhs.false149, !dbg !12478

lor.lhs.false149:                                 ; preds = %lor.lhs.false
  %78 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12479
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !12479
  %bf.load150 = load i32, i32* %79, align 8, !dbg !12479
  %bf.lshr151 = lshr i32 %bf.load150, 16, !dbg !12479
  %bf.clear152 = and i32 %bf.lshr151, 255, !dbg !12479
  %80 = load i32, i32* %fmode, align 4, !dbg !12480
  %cmp153 = icmp ne i32 %bf.clear152, %80, !dbg !12481
  br i1 %cmp153, label %if.then155, label %if.end157, !dbg !12482

if.then155:                                       ; preds = %lor.lhs.false149, %lor.lhs.false, %if.then140
  %81 = load i32, i32* %fmode, align 4, !dbg !12483
  %call156 = call %struct.rtx_def* @gen_reg_rtx(i32 %81), !dbg !12484
  store %struct.rtx_def* %call156, %struct.rtx_def** %target, align 8, !dbg !12485
  br label %if.end157, !dbg !12486

if.end157:                                        ; preds = %if.then155, %lor.lhs.false149
  %82 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12487
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !12487
  %bf.load158 = load i32, i32* %83, align 8, !dbg !12487
  %bf.lshr159 = lshr i32 %bf.load158, 16, !dbg !12487
  %bf.clear160 = and i32 %bf.lshr159, 255, !dbg !12487
  store i32 %bf.clear160, i32* %imode, align 4, !dbg !12488
  call void @do_pending_stack_adjust(), !dbg !12489
  %84 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12490
  %85 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !12491
  %86 = load i32, i32* %imode, align 4, !dbg !12492
  %87 = load %struct.rtx_def*, %struct.rtx_def** %neglabel, align 8, !dbg !12493
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %84, %struct.rtx_def* %85, i32 85, %struct.rtx_def* null, i32 %86, i32 0, %struct.rtx_def* %87), !dbg !12494
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12495
  %89 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12496
  call void @expand_float(%struct.rtx_def* %88, %struct.rtx_def* %89, i32 0), !dbg !12497
  %90 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12498
  %call161 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %90), !dbg !12499
  %call162 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call161), !dbg !12500
  %call163 = call %struct.rtx_def* @emit_barrier(), !dbg !12501
  %91 = load %struct.rtx_def*, %struct.rtx_def** %neglabel, align 8, !dbg !12502
  %call164 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %91), !dbg !12503
  %92 = load i32, i32* %imode, align 4, !dbg !12504
  %93 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12505
  %94 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !12506
  %call165 = call %struct.rtx_def* @expand_binop(i32 %92, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %93, %struct.rtx_def* %94, %struct.rtx_def* null, i32 1, i32 3), !dbg !12507
  store %struct.rtx_def* %call165, %struct.rtx_def** %temp, align 8, !dbg !12508
  %95 = load i32, i32* %imode, align 4, !dbg !12509
  %96 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12510
  %97 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !12511
  %call166 = call %struct.rtx_def* @expand_shift(i32 84, i32 %95, %struct.rtx_def* %96, %union.tree_node* %97, %struct.rtx_def* null, i32 1), !dbg !12512
  store %struct.rtx_def* %call166, %struct.rtx_def** %temp1, align 8, !dbg !12513
  %98 = load i32, i32* %imode, align 4, !dbg !12514
  %99 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12515
  %100 = load %struct.rtx_def*, %struct.rtx_def** %temp1, align 8, !dbg !12516
  %101 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12517
  %call167 = call %struct.rtx_def* @expand_binop(i32 %98, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %99, %struct.rtx_def* %100, %struct.rtx_def* %101, i32 1, i32 3), !dbg !12518
  store %struct.rtx_def* %call167, %struct.rtx_def** %temp, align 8, !dbg !12519
  %102 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12520
  %103 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12521
  call void @expand_float(%struct.rtx_def* %102, %struct.rtx_def* %103, i32 0), !dbg !12522
  %104 = load i32, i32* %fmode, align 4, !dbg !12523
  %105 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12524
  %106 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12525
  %107 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12526
  %call168 = call %struct.rtx_def* @expand_binop(i32 %104, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %105, %struct.rtx_def* %106, %struct.rtx_def* %107, i32 0, i32 3), !dbg !12527
  store %struct.rtx_def* %call168, %struct.rtx_def** %temp, align 8, !dbg !12528
  %108 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12529
  %109 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12531
  %cmp169 = icmp ne %struct.rtx_def* %108, %109, !dbg !12532
  br i1 %cmp169, label %if.then171, label %if.end173, !dbg !12533

if.then171:                                       ; preds = %if.end157
  %110 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12534
  %111 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12535
  %call172 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %110, %struct.rtx_def* %111), !dbg !12536
  br label %if.end173, !dbg !12536

if.end173:                                        ; preds = %if.then171, %if.end157
  call void @do_pending_stack_adjust(), !dbg !12537
  %112 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12538
  %call174 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %112), !dbg !12539
  br label %done, !dbg !12540

if.end175:                                        ; preds = %if.then123
  br label %if.end176, !dbg !12541

if.end176:                                        ; preds = %if.end175, %for.end120
  %113 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12542
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !12542
  %bf.load177 = load i32, i32* %114, align 8, !dbg !12542
  %bf.lshr178 = lshr i32 %bf.load177, 16, !dbg !12542
  %bf.clear179 = and i32 %bf.lshr178, 255, !dbg !12542
  %115 = load i32, i32* %fmode, align 4, !dbg !12544
  %cmp180 = icmp ne i32 %bf.clear179, %115, !dbg !12545
  br i1 %cmp180, label %if.then191, label %lor.lhs.false182, !dbg !12546

lor.lhs.false182:                                 ; preds = %if.end176
  %116 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12547
  %117 = bitcast %struct.rtx_def* %116 to i32*, !dbg !12547
  %bf.load183 = load i32, i32* %117, align 8, !dbg !12547
  %bf.clear184 = and i32 %bf.load183, 65535, !dbg !12547
  %cmp185 = icmp eq i32 %bf.clear184, 37, !dbg !12547
  br i1 %cmp185, label %lor.lhs.false187, label %if.then191, !dbg !12548

lor.lhs.false187:                                 ; preds = %lor.lhs.false182
  %118 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12549
  %call188 = call i32 @rhs_regno(%struct.rtx_def* %118), !dbg !12549
  %cmp189 = icmp ult i32 %call188, 53, !dbg !12550
  br i1 %cmp189, label %if.then191, label %if.end193, !dbg !12551

if.then191:                                       ; preds = %lor.lhs.false187, %lor.lhs.false182, %if.end176
  %119 = load i32, i32* %fmode, align 4, !dbg !12552
  %call192 = call %struct.rtx_def* @gen_reg_rtx(i32 %119), !dbg !12553
  store %struct.rtx_def* %call192, %struct.rtx_def** %target, align 8, !dbg !12554
  br label %if.end193, !dbg !12555

if.end193:                                        ; preds = %if.then191, %lor.lhs.false187
  %120 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12556
  %121 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12557
  call void @expand_float(%struct.rtx_def* %120, %struct.rtx_def* %121, i32 0), !dbg !12558
  call void @do_pending_stack_adjust(), !dbg !12559
  %122 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12560
  %123 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !12561
  %124 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12562
  %125 = bitcast %struct.rtx_def* %124 to i32*, !dbg !12562
  %bf.load194 = load i32, i32* %125, align 8, !dbg !12562
  %bf.lshr195 = lshr i32 %bf.load194, 16, !dbg !12562
  %bf.clear196 = and i32 %bf.lshr195, 255, !dbg !12562
  %126 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12563
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %122, %struct.rtx_def* %123, i32 82, %struct.rtx_def* null, i32 %bf.clear196, i32 0, %struct.rtx_def* %126), !dbg !12564
  %127 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12565
  %128 = bitcast %struct.rtx_def* %127 to i32*, !dbg !12565
  %bf.load197 = load i32, i32* %128, align 8, !dbg !12565
  %bf.lshr198 = lshr i32 %bf.load197, 16, !dbg !12565
  %bf.clear199 = and i32 %bf.lshr198, 255, !dbg !12565
  %idxprom200 = zext i32 %bf.clear199 to i64, !dbg !12565
  %arrayidx201 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom200, !dbg !12565
  %129 = load i8, i8* %arrayidx201, align 1, !dbg !12565
  %conv202 = zext i8 %129 to i16, !dbg !12565
  %conv203 = zext i16 %conv202 to i32, !dbg !12565
  %mul204 = mul nsw i32 %conv203, 8, !dbg !12565
  %conv205 = trunc i32 %mul204 to i16, !dbg !12565
  %conv206 = zext i16 %conv205 to i32, !dbg !12565
  %130 = load i32, i32* %fmode, align 4, !dbg !12566
  call void @real_2expN(%struct.real_value* %offset, i32 %conv206, i32 %130), !dbg !12567
  %131 = load i32, i32* %fmode, align 4, !dbg !12568
  %132 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12569
  %133 = load i32, i32* %fmode, align 4, !dbg !12570
  %call207 = call %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8 %offset, i32 %133), !dbg !12570
  %134 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12571
  %call208 = call %struct.rtx_def* @expand_binop(i32 %131, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), %struct.rtx_def* %132, %struct.rtx_def* %call207, %struct.rtx_def* %134, i32 0, i32 3), !dbg !12572
  store %struct.rtx_def* %call208, %struct.rtx_def** %temp, align 8, !dbg !12573
  %135 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12574
  %136 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12576
  %cmp209 = icmp ne %struct.rtx_def* %135, %136, !dbg !12577
  br i1 %cmp209, label %if.then211, label %if.end213, !dbg !12578

if.then211:                                       ; preds = %if.end193
  %137 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12579
  %138 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12580
  %call212 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %137, %struct.rtx_def* %138), !dbg !12581
  br label %if.end213, !dbg !12581

if.end213:                                        ; preds = %if.then211, %if.end193
  call void @do_pending_stack_adjust(), !dbg !12582
  %139 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12583
  %call214 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %139), !dbg !12584
  br label %done, !dbg !12585

if.end215:                                        ; preds = %land.lhs.true76, %for.end74
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !12586, metadata !DIExpression()), !dbg !12588
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !12589, metadata !DIExpression()), !dbg !12590
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !12591, metadata !DIExpression()), !dbg !12592
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab, metadata !12593, metadata !DIExpression()), !dbg !12594
  %140 = load i32, i32* %unsignedp.addr, align 4, !dbg !12595
  %tobool216 = icmp ne i32 %140, 0, !dbg !12595
  %141 = zext i1 %tobool216 to i64, !dbg !12595
  %cond217 = select i1 %tobool216, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 8), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 7), !dbg !12595
  store %struct.convert_optab_d* %cond217, %struct.convert_optab_d** %tab, align 8, !dbg !12594
  %142 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12596
  %143 = bitcast %struct.rtx_def* %142 to i32*, !dbg !12596
  %bf.load218 = load i32, i32* %143, align 8, !dbg !12596
  %bf.lshr219 = lshr i32 %bf.load218, 16, !dbg !12596
  %bf.clear220 = and i32 %bf.lshr219, 255, !dbg !12596
  %idxprom221 = zext i32 %bf.clear220 to i64, !dbg !12596
  %arrayidx222 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom221, !dbg !12596
  %144 = load i8, i8* %arrayidx222, align 1, !dbg !12596
  %conv223 = zext i8 %144 to i16, !dbg !12596
  %conv224 = zext i16 %conv223 to i32, !dbg !12596
  %145 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !12598
  %conv225 = zext i8 %145 to i16, !dbg !12598
  %conv226 = zext i16 %conv225 to i32, !dbg !12598
  %cmp227 = icmp slt i32 %conv224, %conv226, !dbg !12599
  br i1 %cmp227, label %if.then229, label %if.end231, !dbg !12600

if.then229:                                       ; preds = %if.end215
  %146 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12601
  %147 = load i32, i32* %unsignedp.addr, align 4, !dbg !12602
  %call230 = call %struct.rtx_def* @convert_to_mode(i32 16, %struct.rtx_def* %146, i32 %147), !dbg !12603
  store %struct.rtx_def* %call230, %struct.rtx_def** %from.addr, align 8, !dbg !12604
  br label %if.end231, !dbg !12605

if.end231:                                        ; preds = %if.then229, %if.end215
  %148 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !12606
  %149 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12607
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !12607
  %bf.load232 = load i32, i32* %150, align 8, !dbg !12607
  %bf.lshr233 = lshr i32 %bf.load232, 16, !dbg !12607
  %bf.clear234 = and i32 %bf.lshr233, 255, !dbg !12607
  %151 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12608
  %152 = bitcast %struct.rtx_def* %151 to i32*, !dbg !12608
  %bf.load235 = load i32, i32* %152, align 8, !dbg !12608
  %bf.lshr236 = lshr i32 %bf.load235, 16, !dbg !12608
  %bf.clear237 = and i32 %bf.lshr236, 255, !dbg !12608
  %call238 = call %struct.rtx_def* @convert_optab_libfunc(%struct.convert_optab_d* %148, i32 %bf.clear234, i32 %bf.clear237), !dbg !12609
  store %struct.rtx_def* %call238, %struct.rtx_def** %libfunc, align 8, !dbg !12610
  %153 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !12611
  %tobool239 = icmp ne %struct.rtx_def* %153, null, !dbg !12611
  br i1 %tobool239, label %cond.false241, label %cond.true240, !dbg !12611

cond.true240:                                     ; preds = %if.end231
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 5142, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12611
  br label %cond.end242, !dbg !12611

cond.false241:                                    ; preds = %if.end231
  br label %cond.end242, !dbg !12611

cond.end242:                                      ; preds = %cond.false241, %cond.true240
  %cond243 = phi i32 [ 0, %cond.true240 ], [ 0, %cond.false241 ], !dbg !12611
  call void @start_sequence(), !dbg !12612
  %154 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !12613
  %155 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12614
  %156 = bitcast %struct.rtx_def* %155 to i32*, !dbg !12614
  %bf.load244 = load i32, i32* %156, align 8, !dbg !12614
  %bf.lshr245 = lshr i32 %bf.load244, 16, !dbg !12614
  %bf.clear246 = and i32 %bf.lshr245, 255, !dbg !12614
  %157 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12615
  %158 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12616
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !12616
  %bf.load247 = load i32, i32* %159, align 8, !dbg !12616
  %bf.lshr248 = lshr i32 %bf.load247, 16, !dbg !12616
  %bf.clear249 = and i32 %bf.lshr248, 255, !dbg !12616
  %call250 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %154, %struct.rtx_def* null, i32 1, i32 %bf.clear246, i32 1, %struct.rtx_def* %157, i32 %bf.clear249), !dbg !12617
  store %struct.rtx_def* %call250, %struct.rtx_def** %value, align 8, !dbg !12618
  %call251 = call %struct.rtx_def* @get_insns(), !dbg !12619
  store %struct.rtx_def* %call251, %struct.rtx_def** %insns, align 8, !dbg !12620
  call void @end_sequence(), !dbg !12621
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !12622
  %161 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12623
  %162 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !12624
  %163 = load i32, i32* %unsignedp.addr, align 4, !dbg !12625
  %tobool252 = icmp ne i32 %163, 0, !dbg !12625
  %164 = zext i1 %tobool252 to i64, !dbg !12625
  %cond253 = select i1 %tobool252, i32 105, i32 103, !dbg !12625
  %165 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12625
  %166 = bitcast %struct.rtx_def* %165 to i32*, !dbg !12625
  %bf.load254 = load i32, i32* %166, align 8, !dbg !12625
  %bf.lshr255 = lshr i32 %bf.load254, 16, !dbg !12625
  %bf.clear256 = and i32 %bf.lshr255, 255, !dbg !12625
  %167 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12625
  %call257 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %cond253, i32 %bf.clear256, %struct.rtx_def* %167), !dbg !12625
  call void @emit_libcall_block(%struct.rtx_def* %160, %struct.rtx_def* %161, %struct.rtx_def* %162, %struct.rtx_def* %call257), !dbg !12626
  br label %done, !dbg !12627

done:                                             ; preds = %cond.end242, %if.end213, %if.end173
  call void @llvm.dbg.label(metadata !12628), !dbg !12629
  %168 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12630
  %169 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12632
  %cmp258 = icmp ne %struct.rtx_def* %168, %169, !dbg !12633
  br i1 %cmp258, label %if.then260, label %if.end272, !dbg !12634

if.then260:                                       ; preds = %done
  %170 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12635
  %171 = bitcast %struct.rtx_def* %170 to i32*, !dbg !12635
  %bf.load261 = load i32, i32* %171, align 8, !dbg !12635
  %bf.lshr262 = lshr i32 %bf.load261, 16, !dbg !12635
  %bf.clear263 = and i32 %bf.lshr262, 255, !dbg !12635
  %172 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12638
  %173 = bitcast %struct.rtx_def* %172 to i32*, !dbg !12638
  %bf.load264 = load i32, i32* %173, align 8, !dbg !12638
  %bf.lshr265 = lshr i32 %bf.load264, 16, !dbg !12638
  %bf.clear266 = and i32 %bf.lshr265, 255, !dbg !12638
  %cmp267 = icmp eq i32 %bf.clear263, %bf.clear266, !dbg !12639
  br i1 %cmp267, label %if.then269, label %if.else, !dbg !12640

if.then269:                                       ; preds = %if.then260
  %174 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12641
  %175 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12642
  %call270 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %174, %struct.rtx_def* %175), !dbg !12643
  br label %if.end271, !dbg !12643

if.else:                                          ; preds = %if.then260
  %176 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12644
  %177 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12645
  call void @convert_move(%struct.rtx_def* %176, %struct.rtx_def* %177, i32 0), !dbg !12646
  br label %if.end271

if.end271:                                        ; preds = %if.else, %if.then269
  br label %if.end272, !dbg !12647

if.end272:                                        ; preds = %if.end65, %if.end271, %done
  ret void, !dbg !12648
}

declare dso_local i32 @significand_size(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @can_float_p(i32 %fltmode, i32 %fixmode, i32 %unsignedp) #0 !dbg !12649 {
entry:
  %fltmode.addr = alloca i32, align 4
  %fixmode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %tab = alloca %struct.convert_optab_d*, align 8
  store i32 %fltmode, i32* %fltmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fltmode.addr, metadata !12650, metadata !DIExpression()), !dbg !12651
  store i32 %fixmode, i32* %fixmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fixmode.addr, metadata !12652, metadata !DIExpression()), !dbg !12653
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12654, metadata !DIExpression()), !dbg !12655
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab, metadata !12656, metadata !DIExpression()), !dbg !12657
  %0 = load i32, i32* %unsignedp.addr, align 4, !dbg !12658
  %tobool = icmp ne i32 %0, 0, !dbg !12658
  %1 = zext i1 %tobool to i64, !dbg !12658
  %cond = select i1 %tobool, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 8), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 7), !dbg !12658
  store %struct.convert_optab_d* %cond, %struct.convert_optab_d** %tab, align 8, !dbg !12659
  %2 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !12660
  %handlers = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %2, i32 0, i32 3, !dbg !12660
  %3 = load i32, i32* %fltmode.addr, align 4, !dbg !12660
  %idxprom = sext i32 %3 to i64, !dbg !12660
  %arrayidx = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers, i64 0, i64 %idxprom, !dbg !12660
  %4 = load i32, i32* %fixmode.addr, align 4, !dbg !12660
  %idxprom1 = sext i32 %4 to i64, !dbg !12660
  %arrayidx2 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx, i64 0, i64 %idxprom1, !dbg !12660
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx2, i32 0, i32 0, !dbg !12661
  %5 = load i32, i32* %insn_code, align 4, !dbg !12661
  ret i32 %5, !dbg !12662
}

declare dso_local %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare dso_local void @real_2expN(%struct.real_value*, i32, i32) #2

declare dso_local %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_fix(%struct.rtx_def* %to, %struct.rtx_def* %from, i32 %unsignedp) #0 !dbg !12663 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %icode = alloca i32, align 4
  %target = alloca %struct.rtx_def*, align 8
  %fmode = alloca i32, align 4
  %imode = alloca i32, align 4
  %must_trunc = alloca i32, align 4
  %doing_unsigned = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %bitsize = alloca i32, align 4
  %offset = alloca %struct.real_value, align 8
  %limit = alloca %struct.rtx_def*, align 8
  %lab1 = alloca %struct.rtx_def*, align 8
  %lab2 = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %libfunc = alloca %struct.rtx_def*, align 8
  %tab = alloca %struct.convert_optab_d*, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !12664, metadata !DIExpression()), !dbg !12665
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !12666, metadata !DIExpression()), !dbg !12667
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12668, metadata !DIExpression()), !dbg !12669
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12670, metadata !DIExpression()), !dbg !12671
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !12672, metadata !DIExpression()), !dbg !12673
  %0 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12674
  store %struct.rtx_def* %0, %struct.rtx_def** %target, align 8, !dbg !12673
  call void @llvm.dbg.declare(metadata i32* %fmode, metadata !12675, metadata !DIExpression()), !dbg !12676
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !12677, metadata !DIExpression()), !dbg !12678
  call void @llvm.dbg.declare(metadata i32* %must_trunc, metadata !12679, metadata !DIExpression()), !dbg !12680
  store i32 0, i32* %must_trunc, align 4, !dbg !12680
  %1 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12681
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !12681
  %bf.load = load i32, i32* %2, align 8, !dbg !12681
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12681
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12681
  store i32 %bf.clear, i32* %fmode, align 4, !dbg !12683
  br label %for.cond, !dbg !12684

for.cond:                                         ; preds = %for.inc51, %entry
  %3 = load i32, i32* %fmode, align 4, !dbg !12685
  %cmp = icmp ne i32 %3, 0, !dbg !12687
  br i1 %cmp, label %for.body, label %for.end55, !dbg !12688

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12689
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !12689
  %bf.load1 = load i32, i32* %5, align 8, !dbg !12689
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !12689
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !12689
  store i32 %bf.clear3, i32* %imode, align 4, !dbg !12691
  br label %for.cond4, !dbg !12692

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %imode, align 4, !dbg !12693
  %cmp5 = icmp ne i32 %6, 0, !dbg !12695
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !12696

for.body6:                                        ; preds = %for.cond4
  call void @llvm.dbg.declare(metadata i32* %doing_unsigned, metadata !12697, metadata !DIExpression()), !dbg !12699
  %7 = load i32, i32* %unsignedp.addr, align 4, !dbg !12700
  store i32 %7, i32* %doing_unsigned, align 4, !dbg !12699
  %8 = load i32, i32* %imode, align 4, !dbg !12701
  %9 = load i32, i32* %fmode, align 4, !dbg !12702
  %10 = load i32, i32* %unsignedp.addr, align 4, !dbg !12703
  %call = call i32 @can_fix_p(i32 %8, i32 %9, i32 %10, i32* %must_trunc), !dbg !12704
  store i32 %call, i32* %icode, align 4, !dbg !12705
  %11 = load i32, i32* %icode, align 4, !dbg !12706
  %cmp7 = icmp eq i32 %11, 2956, !dbg !12708
  br i1 %cmp7, label %land.lhs.true, label %if.end, !dbg !12709

land.lhs.true:                                    ; preds = %for.body6
  %12 = load i32, i32* %imode, align 4, !dbg !12710
  %13 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12711
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !12711
  %bf.load8 = load i32, i32* %14, align 8, !dbg !12711
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !12711
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !12711
  %cmp11 = icmp ne i32 %12, %bf.clear10, !dbg !12712
  br i1 %cmp11, label %land.lhs.true12, label %if.end, !dbg !12713

land.lhs.true12:                                  ; preds = %land.lhs.true
  %15 = load i32, i32* %unsignedp.addr, align 4, !dbg !12714
  %tobool = icmp ne i32 %15, 0, !dbg !12714
  br i1 %tobool, label %if.then, label %if.end, !dbg !12715

if.then:                                          ; preds = %land.lhs.true12
  %16 = load i32, i32* %imode, align 4, !dbg !12716
  %17 = load i32, i32* %fmode, align 4, !dbg !12717
  %call13 = call i32 @can_fix_p(i32 %16, i32 %17, i32 0, i32* %must_trunc), !dbg !12718
  store i32 %call13, i32* %icode, align 4, !dbg !12719
  store i32 0, i32* %doing_unsigned, align 4, !dbg !12720
  br label %if.end, !dbg !12721

if.end:                                           ; preds = %if.then, %land.lhs.true12, %land.lhs.true, %for.body6
  %18 = load i32, i32* %icode, align 4, !dbg !12722
  %cmp14 = icmp ne i32 %18, 2956, !dbg !12724
  br i1 %cmp14, label %if.then15, label %if.end50, !dbg !12725

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !12726, metadata !DIExpression()), !dbg !12728
  %call16 = call %struct.rtx_def* @get_last_insn(), !dbg !12729
  store %struct.rtx_def* %call16, %struct.rtx_def** %last, align 8, !dbg !12728
  %19 = load i32, i32* %fmode, align 4, !dbg !12730
  %20 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12732
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !12732
  %bf.load17 = load i32, i32* %21, align 8, !dbg !12732
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !12732
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !12732
  %cmp20 = icmp ne i32 %19, %bf.clear19, !dbg !12733
  br i1 %cmp20, label %if.then21, label %if.end23, !dbg !12734

if.then21:                                        ; preds = %if.then15
  %22 = load i32, i32* %fmode, align 4, !dbg !12735
  %23 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12736
  %call22 = call %struct.rtx_def* @convert_to_mode(i32 %22, %struct.rtx_def* %23, i32 0), !dbg !12737
  store %struct.rtx_def* %call22, %struct.rtx_def** %from.addr, align 8, !dbg !12738
  br label %if.end23, !dbg !12739

if.end23:                                         ; preds = %if.then21, %if.then15
  %24 = load i32, i32* %must_trunc, align 4, !dbg !12740
  %tobool24 = icmp ne i32 %24, 0, !dbg !12740
  br i1 %tobool24, label %if.then25, label %if.end34, !dbg !12742

if.then25:                                        ; preds = %if.end23
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !12743, metadata !DIExpression()), !dbg !12745
  %25 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12746
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !12746
  %bf.load26 = load i32, i32* %26, align 8, !dbg !12746
  %bf.lshr27 = lshr i32 %bf.load26, 16, !dbg !12746
  %bf.clear28 = and i32 %bf.lshr27, 255, !dbg !12746
  %call29 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear28), !dbg !12747
  store %struct.rtx_def* %call29, %struct.rtx_def** %temp, align 8, !dbg !12745
  %27 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12748
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !12748
  %bf.load30 = load i32, i32* %28, align 8, !dbg !12748
  %bf.lshr31 = lshr i32 %bf.load30, 16, !dbg !12748
  %bf.clear32 = and i32 %bf.lshr31, 255, !dbg !12748
  %29 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12749
  %30 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !12750
  %call33 = call %struct.rtx_def* @expand_unop(i32 %bf.clear32, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 40), %struct.rtx_def* %29, %struct.rtx_def* %30, i32 0), !dbg !12751
  store %struct.rtx_def* %call33, %struct.rtx_def** %from.addr, align 8, !dbg !12752
  br label %if.end34, !dbg !12753

if.end34:                                         ; preds = %if.then25, %if.end23
  %31 = load i32, i32* %imode, align 4, !dbg !12754
  %32 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12756
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !12756
  %bf.load35 = load i32, i32* %33, align 8, !dbg !12756
  %bf.lshr36 = lshr i32 %bf.load35, 16, !dbg !12756
  %bf.clear37 = and i32 %bf.lshr36, 255, !dbg !12756
  %cmp38 = icmp ne i32 %31, %bf.clear37, !dbg !12757
  br i1 %cmp38, label %if.then39, label %if.end41, !dbg !12758

if.then39:                                        ; preds = %if.end34
  %34 = load i32, i32* %imode, align 4, !dbg !12759
  %call40 = call %struct.rtx_def* @gen_reg_rtx(i32 %34), !dbg !12760
  store %struct.rtx_def* %call40, %struct.rtx_def** %target, align 8, !dbg !12761
  br label %if.end41, !dbg !12762

if.end41:                                         ; preds = %if.then39, %if.end34
  %35 = load i32, i32* %icode, align 4, !dbg !12763
  %36 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12765
  %37 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12766
  %38 = load i32, i32* %doing_unsigned, align 4, !dbg !12767
  %tobool42 = icmp ne i32 %38, 0, !dbg !12767
  %39 = zext i1 %tobool42 to i64, !dbg !12767
  %cond = select i1 %tobool42, i32 106, i32 104, !dbg !12767
  %call43 = call zeroext i8 @maybe_emit_unop_insn(i32 %35, %struct.rtx_def* %36, %struct.rtx_def* %37, i32 %cond), !dbg !12768
  %tobool44 = icmp ne i8 %call43, 0, !dbg !12768
  br i1 %tobool44, label %if.then45, label %if.end49, !dbg !12769

if.then45:                                        ; preds = %if.end41
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12770
  %41 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12773
  %cmp46 = icmp ne %struct.rtx_def* %40, %41, !dbg !12774
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !12775

if.then47:                                        ; preds = %if.then45
  %42 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12776
  %43 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12777
  %44 = load i32, i32* %unsignedp.addr, align 4, !dbg !12778
  call void @convert_move(%struct.rtx_def* %42, %struct.rtx_def* %43, i32 %44), !dbg !12779
  br label %if.end48, !dbg !12779

if.end48:                                         ; preds = %if.then47, %if.then45
  br label %if.end233, !dbg !12780

if.end49:                                         ; preds = %if.end41
  %45 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !12781
  call void @delete_insns_since(%struct.rtx_def* %45), !dbg !12782
  br label %if.end50, !dbg !12783

if.end50:                                         ; preds = %if.end49, %if.end
  br label %for.inc, !dbg !12784

for.inc:                                          ; preds = %if.end50
  %46 = load i32, i32* %imode, align 4, !dbg !12785
  %idxprom = zext i32 %46 to i64, !dbg !12785
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom, !dbg !12785
  %47 = load i8, i8* %arrayidx, align 1, !dbg !12785
  %conv = zext i8 %47 to i32, !dbg !12785
  store i32 %conv, i32* %imode, align 4, !dbg !12786
  br label %for.cond4, !dbg !12787, !llvm.loop !12788

for.end:                                          ; preds = %for.cond4
  br label %for.inc51, !dbg !12789

for.inc51:                                        ; preds = %for.end
  %48 = load i32, i32* %fmode, align 4, !dbg !12790
  %idxprom52 = zext i32 %48 to i64, !dbg !12790
  %arrayidx53 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom52, !dbg !12790
  %49 = load i8, i8* %arrayidx53, align 1, !dbg !12790
  %conv54 = zext i8 %49 to i32, !dbg !12790
  store i32 %conv54, i32* %fmode, align 4, !dbg !12791
  br label %for.cond, !dbg !12792, !llvm.loop !12793

for.end55:                                        ; preds = %for.cond
  %50 = load i32, i32* %unsignedp.addr, align 4, !dbg !12795
  %tobool56 = icmp ne i32 %50, 0, !dbg !12795
  br i1 %tobool56, label %land.lhs.true57, label %if.end178, !dbg !12797

land.lhs.true57:                                  ; preds = %for.end55
  %51 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12798
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !12798
  %bf.load58 = load i32, i32* %52, align 8, !dbg !12798
  %bf.lshr59 = lshr i32 %bf.load58, 16, !dbg !12798
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !12798
  %idxprom61 = zext i32 %bf.clear60 to i64, !dbg !12798
  %arrayidx62 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom61, !dbg !12798
  %53 = load i8, i8* %arrayidx62, align 1, !dbg !12798
  %conv63 = zext i8 %53 to i16, !dbg !12798
  %conv64 = zext i16 %conv63 to i32, !dbg !12798
  %mul = mul nsw i32 %conv64, 8, !dbg !12798
  %conv65 = trunc i32 %mul to i16, !dbg !12798
  %conv66 = zext i16 %conv65 to i32, !dbg !12798
  %cmp67 = icmp sle i32 %conv66, 64, !dbg !12799
  br i1 %cmp67, label %if.then69, label %if.end178, !dbg !12800

if.then69:                                        ; preds = %land.lhs.true57
  %54 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12801
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !12801
  %bf.load70 = load i32, i32* %55, align 8, !dbg !12801
  %bf.lshr71 = lshr i32 %bf.load70, 16, !dbg !12801
  %bf.clear72 = and i32 %bf.lshr71, 255, !dbg !12801
  store i32 %bf.clear72, i32* %fmode, align 4, !dbg !12803
  br label %for.cond73, !dbg !12804

for.cond73:                                       ; preds = %for.inc173, %if.then69
  %56 = load i32, i32* %fmode, align 4, !dbg !12805
  %cmp74 = icmp ne i32 %56, 0, !dbg !12807
  br i1 %cmp74, label %for.body76, label %for.end177, !dbg !12808

for.body76:                                       ; preds = %for.cond73
  %57 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12809
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !12809
  %bf.load77 = load i32, i32* %58, align 8, !dbg !12809
  %bf.lshr78 = lshr i32 %bf.load77, 16, !dbg !12809
  %bf.clear79 = and i32 %bf.lshr78, 255, !dbg !12809
  %59 = load i32, i32* %fmode, align 4, !dbg !12811
  %call80 = call i32 @can_fix_p(i32 %bf.clear79, i32 %59, i32 0, i32* %must_trunc), !dbg !12812
  %cmp81 = icmp ne i32 2956, %call80, !dbg !12813
  br i1 %cmp81, label %land.lhs.true83, label %if.end172, !dbg !12814

land.lhs.true83:                                  ; preds = %for.body76
  %60 = load i32, i32* %fmode, align 4, !dbg !12815
  %idxprom84 = zext i32 %60 to i64, !dbg !12815
  %arrayidx85 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom84, !dbg !12815
  %61 = load i8, i8* %arrayidx85, align 1, !dbg !12815
  %conv86 = zext i8 %61 to i32, !dbg !12815
  %cmp87 = icmp eq i32 %conv86, 9, !dbg !12815
  br i1 %cmp87, label %lor.lhs.false, label %if.then108, !dbg !12816

lor.lhs.false:                                    ; preds = %land.lhs.true83
  %62 = load i32, i32* %fmode, align 4, !dbg !12817
  %idxprom89 = zext i32 %62 to i64, !dbg !12817
  %arrayidx90 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom89, !dbg !12817
  %63 = load i8, i8* %arrayidx90, align 1, !dbg !12817
  %conv91 = zext i8 %63 to i16, !dbg !12817
  %conv92 = zext i16 %conv91 to i32, !dbg !12817
  %mul93 = mul nsw i32 %conv92, 8, !dbg !12817
  %conv94 = trunc i32 %mul93 to i16, !dbg !12817
  %conv95 = zext i16 %conv94 to i32, !dbg !12817
  %64 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12818
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !12818
  %bf.load96 = load i32, i32* %65, align 8, !dbg !12818
  %bf.lshr97 = lshr i32 %bf.load96, 16, !dbg !12818
  %bf.clear98 = and i32 %bf.lshr97, 255, !dbg !12818
  %idxprom99 = zext i32 %bf.clear98 to i64, !dbg !12818
  %arrayidx100 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom99, !dbg !12818
  %66 = load i8, i8* %arrayidx100, align 1, !dbg !12818
  %conv101 = zext i8 %66 to i16, !dbg !12818
  %conv102 = zext i16 %conv101 to i32, !dbg !12818
  %mul103 = mul nsw i32 %conv102, 8, !dbg !12818
  %conv104 = trunc i32 %mul103 to i16, !dbg !12818
  %conv105 = zext i16 %conv104 to i32, !dbg !12818
  %cmp106 = icmp sgt i32 %conv95, %conv105, !dbg !12819
  br i1 %cmp106, label %if.then108, label %if.end172, !dbg !12820

if.then108:                                       ; preds = %lor.lhs.false, %land.lhs.true83
  call void @llvm.dbg.declare(metadata i32* %bitsize, metadata !12821, metadata !DIExpression()), !dbg !12823
  call void @llvm.dbg.declare(metadata %struct.real_value* %offset, metadata !12824, metadata !DIExpression()), !dbg !12825
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %limit, metadata !12826, metadata !DIExpression()), !dbg !12827
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab1, metadata !12828, metadata !DIExpression()), !dbg !12829
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab2, metadata !12830, metadata !DIExpression()), !dbg !12831
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !12832, metadata !DIExpression()), !dbg !12833
  %67 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12834
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !12834
  %bf.load109 = load i32, i32* %68, align 8, !dbg !12834
  %bf.lshr110 = lshr i32 %bf.load109, 16, !dbg !12834
  %bf.clear111 = and i32 %bf.lshr110, 255, !dbg !12834
  %idxprom112 = zext i32 %bf.clear111 to i64, !dbg !12834
  %arrayidx113 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom112, !dbg !12834
  %69 = load i8, i8* %arrayidx113, align 1, !dbg !12834
  %conv114 = zext i8 %69 to i16, !dbg !12834
  %conv115 = zext i16 %conv114 to i32, !dbg !12834
  %mul116 = mul nsw i32 %conv115, 8, !dbg !12834
  %conv117 = trunc i32 %mul116 to i16, !dbg !12834
  %conv118 = zext i16 %conv117 to i32, !dbg !12834
  store i32 %conv118, i32* %bitsize, align 4, !dbg !12835
  %70 = load i32, i32* %bitsize, align 4, !dbg !12836
  %sub = sub nsw i32 %70, 1, !dbg !12837
  %71 = load i32, i32* %fmode, align 4, !dbg !12838
  call void @real_2expN(%struct.real_value* %offset, i32 %sub, i32 %71), !dbg !12839
  %72 = load i32, i32* %fmode, align 4, !dbg !12840
  %call119 = call %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8 %offset, i32 %72), !dbg !12840
  store %struct.rtx_def* %call119, %struct.rtx_def** %limit, align 8, !dbg !12841
  %call120 = call %struct.rtx_def* @gen_label_rtx(), !dbg !12842
  store %struct.rtx_def* %call120, %struct.rtx_def** %lab1, align 8, !dbg !12843
  %call121 = call %struct.rtx_def* @gen_label_rtx(), !dbg !12844
  store %struct.rtx_def* %call121, %struct.rtx_def** %lab2, align 8, !dbg !12845
  %73 = load i32, i32* %fmode, align 4, !dbg !12846
  %74 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12848
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !12848
  %bf.load122 = load i32, i32* %75, align 8, !dbg !12848
  %bf.lshr123 = lshr i32 %bf.load122, 16, !dbg !12848
  %bf.clear124 = and i32 %bf.lshr123, 255, !dbg !12848
  %cmp125 = icmp ne i32 %73, %bf.clear124, !dbg !12849
  br i1 %cmp125, label %if.then127, label %if.end129, !dbg !12850

if.then127:                                       ; preds = %if.then108
  %76 = load i32, i32* %fmode, align 4, !dbg !12851
  %77 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12852
  %call128 = call %struct.rtx_def* @convert_to_mode(i32 %76, %struct.rtx_def* %77, i32 0), !dbg !12853
  store %struct.rtx_def* %call128, %struct.rtx_def** %from.addr, align 8, !dbg !12854
  br label %if.end129, !dbg !12855

if.end129:                                        ; preds = %if.then127, %if.then108
  call void @do_pending_stack_adjust(), !dbg !12856
  %78 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12857
  %79 = load %struct.rtx_def*, %struct.rtx_def** %limit, align 8, !dbg !12858
  %80 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12859
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !12859
  %bf.load130 = load i32, i32* %81, align 8, !dbg !12859
  %bf.lshr131 = lshr i32 %bf.load130, 16, !dbg !12859
  %bf.clear132 = and i32 %bf.lshr131, 255, !dbg !12859
  %82 = load %struct.rtx_def*, %struct.rtx_def** %lab1, align 8, !dbg !12860
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %78, %struct.rtx_def* %79, i32 82, %struct.rtx_def* null, i32 %bf.clear132, i32 0, %struct.rtx_def* %82), !dbg !12861
  %83 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12862
  %84 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12863
  call void @expand_fix(%struct.rtx_def* %83, %struct.rtx_def* %84, i32 0), !dbg !12864
  %85 = load %struct.rtx_def*, %struct.rtx_def** %lab2, align 8, !dbg !12865
  %call133 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %85), !dbg !12866
  %call134 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call133), !dbg !12867
  %call135 = call %struct.rtx_def* @emit_barrier(), !dbg !12868
  %86 = load %struct.rtx_def*, %struct.rtx_def** %lab1, align 8, !dbg !12869
  %call136 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %86), !dbg !12870
  %87 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12871
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !12871
  %bf.load137 = load i32, i32* %88, align 8, !dbg !12871
  %bf.lshr138 = lshr i32 %bf.load137, 16, !dbg !12871
  %bf.clear139 = and i32 %bf.lshr138, 255, !dbg !12871
  %89 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12872
  %90 = load %struct.rtx_def*, %struct.rtx_def** %limit, align 8, !dbg !12873
  %call140 = call %struct.rtx_def* @expand_binop(i32 %bf.clear139, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %89, %struct.rtx_def* %90, %struct.rtx_def* null, i32 0, i32 3), !dbg !12874
  store %struct.rtx_def* %call140, %struct.rtx_def** %target, align 8, !dbg !12875
  %91 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12876
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12877
  call void @expand_fix(%struct.rtx_def* %91, %struct.rtx_def* %92, i32 0), !dbg !12878
  %93 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12879
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !12879
  %bf.load141 = load i32, i32* %94, align 8, !dbg !12879
  %bf.lshr142 = lshr i32 %bf.load141, 16, !dbg !12879
  %bf.clear143 = and i32 %bf.lshr142, 255, !dbg !12879
  %95 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12880
  %96 = load i32, i32* %bitsize, align 4, !dbg !12881
  %sub144 = sub nsw i32 %96, 1, !dbg !12882
  %sh_prom = zext i32 %sub144 to i64, !dbg !12883
  %shl = shl i64 1, %sh_prom, !dbg !12883
  %97 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12884
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !12884
  %bf.load145 = load i32, i32* %98, align 8, !dbg !12884
  %bf.lshr146 = lshr i32 %bf.load145, 16, !dbg !12884
  %bf.clear147 = and i32 %bf.lshr146, 255, !dbg !12884
  %call148 = call %struct.rtx_def* @gen_int_mode(i64 %shl, i32 %bf.clear147), !dbg !12885
  %99 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12886
  %call149 = call %struct.rtx_def* @expand_binop(i32 %bf.clear143, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %95, %struct.rtx_def* %call148, %struct.rtx_def* %99, i32 1, i32 3), !dbg !12887
  store %struct.rtx_def* %call149, %struct.rtx_def** %target, align 8, !dbg !12888
  %100 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12889
  %101 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12891
  %cmp150 = icmp ne %struct.rtx_def* %100, %101, !dbg !12892
  br i1 %cmp150, label %if.then152, label %if.end154, !dbg !12893

if.then152:                                       ; preds = %if.end129
  %102 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12894
  %103 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12895
  %call153 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %102, %struct.rtx_def* %103), !dbg !12896
  br label %if.end154, !dbg !12896

if.end154:                                        ; preds = %if.then152, %if.end129
  %104 = load %struct.rtx_def*, %struct.rtx_def** %lab2, align 8, !dbg !12897
  %call155 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %104), !dbg !12898
  %105 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12899
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !12899
  %bf.load156 = load i32, i32* %106, align 8, !dbg !12899
  %bf.lshr157 = lshr i32 %bf.load156, 16, !dbg !12899
  %bf.clear158 = and i32 %bf.lshr157, 255, !dbg !12899
  %idxprom159 = sext i32 %bf.clear158 to i64, !dbg !12899
  %arrayidx160 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 60, i32 4), i64 0, i64 %idxprom159, !dbg !12899
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx160, i32 0, i32 0, !dbg !12901
  %107 = load i32, i32* %insn_code, align 4, !dbg !12901
  %cmp161 = icmp ne i32 %107, 2956, !dbg !12902
  br i1 %cmp161, label %if.then163, label %if.end171, !dbg !12903

if.then163:                                       ; preds = %if.end154
  %108 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12904
  %109 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12906
  %call164 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %108, %struct.rtx_def* %109), !dbg !12907
  store %struct.rtx_def* %call164, %struct.rtx_def** %insn, align 8, !dbg !12908
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !12909
  %111 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12910
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !12910
  %bf.load165 = load i32, i32* %112, align 8, !dbg !12910
  %bf.lshr166 = lshr i32 %bf.load165, 16, !dbg !12910
  %bf.clear167 = and i32 %bf.lshr166, 255, !dbg !12910
  %113 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12910
  %call168 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %113), !dbg !12910
  %call169 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 106, i32 %bf.clear167, %struct.rtx_def* %call168), !dbg !12910
  %call170 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %110, i32 4, %struct.rtx_def* %call169), !dbg !12911
  br label %if.end171, !dbg !12912

if.end171:                                        ; preds = %if.then163, %if.end154
  br label %if.end233, !dbg !12913

if.end172:                                        ; preds = %lor.lhs.false, %for.body76
  br label %for.inc173, !dbg !12914

for.inc173:                                       ; preds = %if.end172
  %114 = load i32, i32* %fmode, align 4, !dbg !12915
  %idxprom174 = zext i32 %114 to i64, !dbg !12915
  %arrayidx175 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom174, !dbg !12915
  %115 = load i8, i8* %arrayidx175, align 1, !dbg !12915
  %conv176 = zext i8 %115 to i32, !dbg !12915
  store i32 %conv176, i32* %fmode, align 4, !dbg !12916
  br label %for.cond73, !dbg !12917, !llvm.loop !12918

for.end177:                                       ; preds = %for.cond73
  br label %if.end178, !dbg !12919

if.end178:                                        ; preds = %for.end177, %land.lhs.true57, %for.end55
  %116 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12920
  %117 = bitcast %struct.rtx_def* %116 to i32*, !dbg !12920
  %bf.load179 = load i32, i32* %117, align 8, !dbg !12920
  %bf.lshr180 = lshr i32 %bf.load179, 16, !dbg !12920
  %bf.clear181 = and i32 %bf.lshr180, 255, !dbg !12920
  %idxprom182 = zext i32 %bf.clear181 to i64, !dbg !12920
  %arrayidx183 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom182, !dbg !12920
  %118 = load i8, i8* %arrayidx183, align 1, !dbg !12920
  %conv184 = zext i8 %118 to i16, !dbg !12920
  %conv185 = zext i16 %conv184 to i32, !dbg !12920
  %119 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !12922
  %conv186 = zext i8 %119 to i16, !dbg !12922
  %conv187 = zext i16 %conv186 to i32, !dbg !12922
  %cmp188 = icmp slt i32 %conv185, %conv187, !dbg !12923
  br i1 %cmp188, label %if.then190, label %if.else, !dbg !12924

if.then190:                                       ; preds = %if.end178
  %call191 = call %struct.rtx_def* @gen_reg_rtx(i32 16), !dbg !12925
  store %struct.rtx_def* %call191, %struct.rtx_def** %target, align 8, !dbg !12927
  %120 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12928
  %121 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12929
  %122 = load i32, i32* %unsignedp.addr, align 4, !dbg !12930
  call void @expand_fix(%struct.rtx_def* %120, %struct.rtx_def* %121, i32 %122), !dbg !12931
  br label %if.end217, !dbg !12932

if.else:                                          ; preds = %if.end178
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !12933, metadata !DIExpression()), !dbg !12935
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !12936, metadata !DIExpression()), !dbg !12937
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !12938, metadata !DIExpression()), !dbg !12939
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab, metadata !12940, metadata !DIExpression()), !dbg !12941
  %123 = load i32, i32* %unsignedp.addr, align 4, !dbg !12942
  %tobool192 = icmp ne i32 %123, 0, !dbg !12942
  %124 = zext i1 %tobool192 to i64, !dbg !12942
  %cond193 = select i1 %tobool192, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 4), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 3), !dbg !12942
  store %struct.convert_optab_d* %cond193, %struct.convert_optab_d** %tab, align 8, !dbg !12941
  %125 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !12943
  %126 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12944
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !12944
  %bf.load194 = load i32, i32* %127, align 8, !dbg !12944
  %bf.lshr195 = lshr i32 %bf.load194, 16, !dbg !12944
  %bf.clear196 = and i32 %bf.lshr195, 255, !dbg !12944
  %128 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12945
  %129 = bitcast %struct.rtx_def* %128 to i32*, !dbg !12945
  %bf.load197 = load i32, i32* %129, align 8, !dbg !12945
  %bf.lshr198 = lshr i32 %bf.load197, 16, !dbg !12945
  %bf.clear199 = and i32 %bf.lshr198, 255, !dbg !12945
  %call200 = call %struct.rtx_def* @convert_optab_libfunc(%struct.convert_optab_d* %125, i32 %bf.clear196, i32 %bf.clear199), !dbg !12946
  store %struct.rtx_def* %call200, %struct.rtx_def** %libfunc, align 8, !dbg !12947
  %130 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !12948
  %tobool201 = icmp ne %struct.rtx_def* %130, null, !dbg !12948
  br i1 %tobool201, label %cond.false, label %cond.true, !dbg !12948

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 5330, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12948
  br label %cond.end, !dbg !12948

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !12948

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond202 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12948
  call void @start_sequence(), !dbg !12949
  %131 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !12950
  %132 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12951
  %133 = bitcast %struct.rtx_def* %132 to i32*, !dbg !12951
  %bf.load203 = load i32, i32* %133, align 8, !dbg !12951
  %bf.lshr204 = lshr i32 %bf.load203, 16, !dbg !12951
  %bf.clear205 = and i32 %bf.lshr204, 255, !dbg !12951
  %134 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12952
  %135 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12953
  %136 = bitcast %struct.rtx_def* %135 to i32*, !dbg !12953
  %bf.load206 = load i32, i32* %136, align 8, !dbg !12953
  %bf.lshr207 = lshr i32 %bf.load206, 16, !dbg !12953
  %bf.clear208 = and i32 %bf.lshr207, 255, !dbg !12953
  %call209 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %131, %struct.rtx_def* null, i32 1, i32 %bf.clear205, i32 1, %struct.rtx_def* %134, i32 %bf.clear208), !dbg !12954
  store %struct.rtx_def* %call209, %struct.rtx_def** %value, align 8, !dbg !12955
  %call210 = call %struct.rtx_def* @get_insns(), !dbg !12956
  store %struct.rtx_def* %call210, %struct.rtx_def** %insns, align 8, !dbg !12957
  call void @end_sequence(), !dbg !12958
  %137 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !12959
  %138 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12960
  %139 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !12961
  %140 = load i32, i32* %unsignedp.addr, align 4, !dbg !12962
  %tobool211 = icmp ne i32 %140, 0, !dbg !12962
  %141 = zext i1 %tobool211 to i64, !dbg !12962
  %cond212 = select i1 %tobool211, i32 106, i32 104, !dbg !12962
  %142 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12962
  %143 = bitcast %struct.rtx_def* %142 to i32*, !dbg !12962
  %bf.load213 = load i32, i32* %143, align 8, !dbg !12962
  %bf.lshr214 = lshr i32 %bf.load213, 16, !dbg !12962
  %bf.clear215 = and i32 %bf.lshr214, 255, !dbg !12962
  %144 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !12962
  %call216 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %cond212, i32 %bf.clear215, %struct.rtx_def* %144), !dbg !12962
  call void @emit_libcall_block(%struct.rtx_def* %137, %struct.rtx_def* %138, %struct.rtx_def* %139, %struct.rtx_def* %call216), !dbg !12963
  br label %if.end217

if.end217:                                        ; preds = %cond.end, %if.then190
  %145 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12964
  %146 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12966
  %cmp218 = icmp ne %struct.rtx_def* %145, %146, !dbg !12967
  br i1 %cmp218, label %if.then220, label %if.end233, !dbg !12968

if.then220:                                       ; preds = %if.end217
  %147 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12969
  %148 = bitcast %struct.rtx_def* %147 to i32*, !dbg !12969
  %bf.load221 = load i32, i32* %148, align 8, !dbg !12969
  %bf.lshr222 = lshr i32 %bf.load221, 16, !dbg !12969
  %bf.clear223 = and i32 %bf.lshr222, 255, !dbg !12969
  %149 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12972
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !12972
  %bf.load224 = load i32, i32* %150, align 8, !dbg !12972
  %bf.lshr225 = lshr i32 %bf.load224, 16, !dbg !12972
  %bf.clear226 = and i32 %bf.lshr225, 255, !dbg !12972
  %cmp227 = icmp eq i32 %bf.clear223, %bf.clear226, !dbg !12973
  br i1 %cmp227, label %if.then229, label %if.else231, !dbg !12974

if.then229:                                       ; preds = %if.then220
  %151 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12975
  %152 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12976
  %call230 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %151, %struct.rtx_def* %152), !dbg !12977
  br label %if.end232, !dbg !12977

if.else231:                                       ; preds = %if.then220
  %153 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !12978
  %154 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !12979
  call void @convert_move(%struct.rtx_def* %153, %struct.rtx_def* %154, i32 0), !dbg !12980
  br label %if.end232

if.end232:                                        ; preds = %if.else231, %if.then229
  br label %if.end233, !dbg !12981

if.end233:                                        ; preds = %if.end48, %if.end171, %if.end232, %if.end217
  ret void, !dbg !12982
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @can_fix_p(i32 %fixmode, i32 %fltmode, i32 %unsignedp, i32* %truncp_ptr) #0 !dbg !12983 {
entry:
  %retval = alloca i32, align 4
  %fixmode.addr = alloca i32, align 4
  %fltmode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i32, align 4
  %truncp_ptr.addr = alloca i32*, align 8
  %tab = alloca %struct.convert_optab_d*, align 8
  %icode = alloca i32, align 4
  store i32 %fixmode, i32* %fixmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fixmode.addr, metadata !12987, metadata !DIExpression()), !dbg !12988
  store i32 %fltmode, i32* %fltmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fltmode.addr, metadata !12989, metadata !DIExpression()), !dbg !12990
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !12991, metadata !DIExpression()), !dbg !12992
  store i32* %truncp_ptr, i32** %truncp_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %truncp_ptr.addr, metadata !12993, metadata !DIExpression()), !dbg !12994
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab, metadata !12995, metadata !DIExpression()), !dbg !12996
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !12997, metadata !DIExpression()), !dbg !12998
  %0 = load i32, i32* %unsignedp.addr, align 4, !dbg !12999
  %tobool = icmp ne i32 %0, 0, !dbg !12999
  %1 = zext i1 %tobool to i64, !dbg !12999
  %cond = select i1 %tobool, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 6), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 5), !dbg !12999
  store %struct.convert_optab_d* %cond, %struct.convert_optab_d** %tab, align 8, !dbg !13000
  %2 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !13001
  %handlers = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %2, i32 0, i32 3, !dbg !13001
  %3 = load i32, i32* %fixmode.addr, align 4, !dbg !13001
  %idxprom = sext i32 %3 to i64, !dbg !13001
  %arrayidx = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers, i64 0, i64 %idxprom, !dbg !13001
  %4 = load i32, i32* %fltmode.addr, align 4, !dbg !13001
  %idxprom1 = sext i32 %4 to i64, !dbg !13001
  %arrayidx2 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx, i64 0, i64 %idxprom1, !dbg !13001
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx2, i32 0, i32 0, !dbg !13002
  %5 = load i32, i32* %insn_code, align 4, !dbg !13002
  store i32 %5, i32* %icode, align 4, !dbg !13003
  %6 = load i32, i32* %icode, align 4, !dbg !13004
  %cmp = icmp ne i32 %6, 2956, !dbg !13006
  br i1 %cmp, label %if.then, label %if.end, !dbg !13007

if.then:                                          ; preds = %entry
  %7 = load i32*, i32** %truncp_ptr.addr, align 8, !dbg !13008
  store i32 0, i32* %7, align 4, !dbg !13010
  %8 = load i32, i32* %icode, align 4, !dbg !13011
  store i32 %8, i32* %retval, align 4, !dbg !13012
  br label %return, !dbg !13012

if.end:                                           ; preds = %entry
  %9 = load i32, i32* %unsignedp.addr, align 4, !dbg !13013
  %tobool3 = icmp ne i32 %9, 0, !dbg !13013
  %10 = zext i1 %tobool3 to i64, !dbg !13013
  %cond4 = select i1 %tobool3, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 4), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 3), !dbg !13013
  store %struct.convert_optab_d* %cond4, %struct.convert_optab_d** %tab, align 8, !dbg !13014
  %11 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !13015
  %handlers5 = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %11, i32 0, i32 3, !dbg !13015
  %12 = load i32, i32* %fixmode.addr, align 4, !dbg !13015
  %idxprom6 = sext i32 %12 to i64, !dbg !13015
  %arrayidx7 = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers5, i64 0, i64 %idxprom6, !dbg !13015
  %13 = load i32, i32* %fltmode.addr, align 4, !dbg !13015
  %idxprom8 = sext i32 %13 to i64, !dbg !13015
  %arrayidx9 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx7, i64 0, i64 %idxprom8, !dbg !13015
  %insn_code10 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx9, i32 0, i32 0, !dbg !13016
  %14 = load i32, i32* %insn_code10, align 4, !dbg !13016
  store i32 %14, i32* %icode, align 4, !dbg !13017
  %15 = load i32, i32* %icode, align 4, !dbg !13018
  %cmp11 = icmp ne i32 %15, 2956, !dbg !13020
  br i1 %cmp11, label %land.lhs.true, label %if.end17, !dbg !13021

land.lhs.true:                                    ; preds = %if.end
  %16 = load i32, i32* %fltmode.addr, align 4, !dbg !13022
  %idxprom12 = sext i32 %16 to i64, !dbg !13022
  %arrayidx13 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 40, i32 4), i64 0, i64 %idxprom12, !dbg !13022
  %insn_code14 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx13, i32 0, i32 0, !dbg !13023
  %17 = load i32, i32* %insn_code14, align 4, !dbg !13023
  %cmp15 = icmp ne i32 %17, 2956, !dbg !13024
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !13025

if.then16:                                        ; preds = %land.lhs.true
  %18 = load i32*, i32** %truncp_ptr.addr, align 8, !dbg !13026
  store i32 1, i32* %18, align 4, !dbg !13028
  %19 = load i32, i32* %icode, align 4, !dbg !13029
  store i32 %19, i32* %retval, align 4, !dbg !13030
  br label %return, !dbg !13030

if.end17:                                         ; preds = %land.lhs.true, %if.end
  %20 = load i32*, i32** %truncp_ptr.addr, align 8, !dbg !13031
  store i32 0, i32* %20, align 4, !dbg !13032
  store i32 2956, i32* %retval, align 4, !dbg !13033
  br label %return, !dbg !13033

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !13034
  ret i32 %21, !dbg !13034
}

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_fixed_convert(%struct.rtx_def* %to, %struct.rtx_def* %from, i32 %uintp, i32 %satp) #0 !dbg !13035 {
entry:
  %to.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %uintp.addr = alloca i32, align 4
  %satp.addr = alloca i32, align 4
  %to_mode = alloca i32, align 4
  %from_mode = alloca i32, align 4
  %tab = alloca %struct.convert_optab_d*, align 8
  %this_code = alloca i32, align 4
  %code = alloca i32, align 4
  %insns = alloca %struct.rtx_def*, align 8
  %value = alloca %struct.rtx_def*, align 8
  %libfunc = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !13038, metadata !DIExpression()), !dbg !13039
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !13040, metadata !DIExpression()), !dbg !13041
  store i32 %uintp, i32* %uintp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uintp.addr, metadata !13042, metadata !DIExpression()), !dbg !13043
  store i32 %satp, i32* %satp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %satp.addr, metadata !13044, metadata !DIExpression()), !dbg !13045
  call void @llvm.dbg.declare(metadata i32* %to_mode, metadata !13046, metadata !DIExpression()), !dbg !13047
  %0 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13048
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !13048
  %bf.load = load i32, i32* %1, align 8, !dbg !13048
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !13048
  %bf.clear = and i32 %bf.lshr, 255, !dbg !13048
  store i32 %bf.clear, i32* %to_mode, align 4, !dbg !13047
  call void @llvm.dbg.declare(metadata i32* %from_mode, metadata !13049, metadata !DIExpression()), !dbg !13050
  %2 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13051
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !13051
  %bf.load1 = load i32, i32* %3, align 8, !dbg !13051
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !13051
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !13051
  store i32 %bf.clear3, i32* %from_mode, align 4, !dbg !13050
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab, metadata !13052, metadata !DIExpression()), !dbg !13053
  call void @llvm.dbg.declare(metadata i32* %this_code, metadata !13054, metadata !DIExpression()), !dbg !13055
  call void @llvm.dbg.declare(metadata i32* %code, metadata !13056, metadata !DIExpression()), !dbg !13057
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !13058, metadata !DIExpression()), !dbg !13059
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !13060, metadata !DIExpression()), !dbg !13061
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !13062, metadata !DIExpression()), !dbg !13063
  %4 = load i32, i32* %to_mode, align 4, !dbg !13064
  %5 = load i32, i32* %from_mode, align 4, !dbg !13066
  %cmp = icmp eq i32 %4, %5, !dbg !13067
  br i1 %cmp, label %if.then, label %if.end, !dbg !13068

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13069
  %7 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13071
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %7), !dbg !13072
  br label %return, !dbg !13073

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %uintp.addr, align 4, !dbg !13074
  %tobool = icmp ne i32 %8, 0, !dbg !13074
  br i1 %tobool, label %if.then4, label %if.else, !dbg !13076

if.then4:                                         ; preds = %if.end
  %9 = load i32, i32* %satp.addr, align 4, !dbg !13077
  %tobool5 = icmp ne i32 %9, 0, !dbg !13077
  %10 = zext i1 %tobool5 to i64, !dbg !13077
  %cond = select i1 %tobool5, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 16), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 14), !dbg !13077
  store %struct.convert_optab_d* %cond, %struct.convert_optab_d** %tab, align 8, !dbg !13079
  %11 = load i32, i32* %satp.addr, align 4, !dbg !13080
  %tobool6 = icmp ne i32 %11, 0, !dbg !13080
  %12 = zext i1 %tobool6 to i64, !dbg !13080
  %cond7 = select i1 %tobool6, i32 110, i32 108, !dbg !13080
  store i32 %cond7, i32* %this_code, align 4, !dbg !13081
  br label %if.end12, !dbg !13082

if.else:                                          ; preds = %if.end
  %13 = load i32, i32* %satp.addr, align 4, !dbg !13083
  %tobool8 = icmp ne i32 %13, 0, !dbg !13083
  %14 = zext i1 %tobool8 to i64, !dbg !13083
  %cond9 = select i1 %tobool8, %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 15), %struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 13), !dbg !13083
  store %struct.convert_optab_d* %cond9, %struct.convert_optab_d** %tab, align 8, !dbg !13085
  %15 = load i32, i32* %satp.addr, align 4, !dbg !13086
  %tobool10 = icmp ne i32 %15, 0, !dbg !13086
  %16 = zext i1 %tobool10 to i64, !dbg !13086
  %cond11 = select i1 %tobool10, i32 109, i32 107, !dbg !13086
  store i32 %cond11, i32* %this_code, align 4, !dbg !13087
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then4
  %17 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !13088
  %handlers = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %17, i32 0, i32 3, !dbg !13089
  %18 = load i32, i32* %to_mode, align 4, !dbg !13090
  %idxprom = zext i32 %18 to i64, !dbg !13088
  %arrayidx = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers, i64 0, i64 %idxprom, !dbg !13088
  %19 = load i32, i32* %from_mode, align 4, !dbg !13091
  %idxprom13 = zext i32 %19 to i64, !dbg !13088
  %arrayidx14 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx, i64 0, i64 %idxprom13, !dbg !13088
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx14, i32 0, i32 0, !dbg !13092
  %20 = load i32, i32* %insn_code, align 4, !dbg !13092
  store i32 %20, i32* %code, align 4, !dbg !13093
  %21 = load i32, i32* %code, align 4, !dbg !13094
  %cmp15 = icmp ne i32 %21, 2956, !dbg !13096
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !13097

if.then16:                                        ; preds = %if.end12
  %22 = load i32, i32* %code, align 4, !dbg !13098
  %23 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13100
  %24 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13101
  %25 = load i32, i32* %this_code, align 4, !dbg !13102
  call void @emit_unop_insn(i32 %22, %struct.rtx_def* %23, %struct.rtx_def* %24, i32 %25), !dbg !13103
  br label %return, !dbg !13104

if.end17:                                         ; preds = %if.end12
  %26 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !13105
  %27 = load i32, i32* %to_mode, align 4, !dbg !13106
  %28 = load i32, i32* %from_mode, align 4, !dbg !13107
  %call18 = call %struct.rtx_def* @convert_optab_libfunc(%struct.convert_optab_d* %26, i32 %27, i32 %28), !dbg !13108
  store %struct.rtx_def* %call18, %struct.rtx_def** %libfunc, align 8, !dbg !13109
  %29 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !13110
  %tobool19 = icmp ne %struct.rtx_def* %29, null, !dbg !13110
  br i1 %tobool19, label %cond.false, label %cond.true, !dbg !13110

cond.true:                                        ; preds = %if.end17
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 5393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13110
  br label %cond.end, !dbg !13110

cond.false:                                       ; preds = %if.end17
  br label %cond.end, !dbg !13110

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond20 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13110
  call void @start_sequence(), !dbg !13111
  %30 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !13112
  %31 = load i32, i32* %to_mode, align 4, !dbg !13113
  %32 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13114
  %33 = load i32, i32* %from_mode, align 4, !dbg !13115
  %call21 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %30, %struct.rtx_def* null, i32 1, i32 %31, i32 1, %struct.rtx_def* %32, i32 %33), !dbg !13116
  store %struct.rtx_def* %call21, %struct.rtx_def** %value, align 8, !dbg !13117
  %call22 = call %struct.rtx_def* @get_insns(), !dbg !13118
  store %struct.rtx_def* %call22, %struct.rtx_def** %insns, align 8, !dbg !13119
  call void @end_sequence(), !dbg !13120
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !13121
  %35 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13122
  %36 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !13123
  %37 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab, align 8, !dbg !13124
  %code23 = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %37, i32 0, i32 0, !dbg !13124
  %38 = load i32, i32* %code23, align 8, !dbg !13124
  %39 = load i32, i32* %to_mode, align 4, !dbg !13124
  %40 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13124
  %call24 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 %38, i32 %39, %struct.rtx_def* %40), !dbg !13124
  call void @emit_libcall_block(%struct.rtx_def* %34, %struct.rtx_def* %35, %struct.rtx_def* %36, %struct.rtx_def* %call24), !dbg !13125
  br label %return, !dbg !13126

return:                                           ; preds = %cond.end, %if.then16, %if.then
  ret void, !dbg !13126
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expand_sfix_optab(%struct.rtx_def* %to, %struct.rtx_def* %from, %struct.convert_optab_d* %tab) #0 !dbg !13127 {
entry:
  %retval = alloca i8, align 1
  %to.addr = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.rtx_def*, align 8
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %icode = alloca i32, align 4
  %target = alloca %struct.rtx_def*, align 8
  %fmode = alloca i32, align 4
  %imode = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !13130, metadata !DIExpression()), !dbg !13131
  store %struct.rtx_def* %from, %struct.rtx_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %from.addr, metadata !13132, metadata !DIExpression()), !dbg !13133
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !13134, metadata !DIExpression()), !dbg !13135
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !13136, metadata !DIExpression()), !dbg !13137
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !13138, metadata !DIExpression()), !dbg !13139
  %0 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13140
  store %struct.rtx_def* %0, %struct.rtx_def** %target, align 8, !dbg !13139
  call void @llvm.dbg.declare(metadata i32* %fmode, metadata !13141, metadata !DIExpression()), !dbg !13142
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !13143, metadata !DIExpression()), !dbg !13144
  %1 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13145
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !13145
  %bf.load = load i32, i32* %2, align 8, !dbg !13145
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !13145
  %bf.clear = and i32 %bf.lshr, 255, !dbg !13145
  store i32 %bf.clear, i32* %fmode, align 4, !dbg !13147
  br label %for.cond, !dbg !13148

for.cond:                                         ; preds = %for.inc32, %entry
  %3 = load i32, i32* %fmode, align 4, !dbg !13149
  %cmp = icmp ne i32 %3, 0, !dbg !13151
  br i1 %cmp, label %for.body, label %for.end36, !dbg !13152

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13153
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !13153
  %bf.load1 = load i32, i32* %5, align 8, !dbg !13153
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !13153
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !13153
  store i32 %bf.clear3, i32* %imode, align 4, !dbg !13155
  br label %for.cond4, !dbg !13156

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %imode, align 4, !dbg !13157
  %cmp5 = icmp ne i32 %6, 0, !dbg !13159
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !13160

for.body6:                                        ; preds = %for.cond4
  %7 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !13161
  %handlers = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %7, i32 0, i32 3, !dbg !13161
  %8 = load i32, i32* %imode, align 4, !dbg !13161
  %idxprom = sext i32 %8 to i64, !dbg !13161
  %arrayidx = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers, i64 0, i64 %idxprom, !dbg !13161
  %9 = load i32, i32* %fmode, align 4, !dbg !13161
  %idxprom7 = sext i32 %9 to i64, !dbg !13161
  %arrayidx8 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx, i64 0, i64 %idxprom7, !dbg !13161
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx8, i32 0, i32 0, !dbg !13163
  %10 = load i32, i32* %insn_code, align 4, !dbg !13163
  store i32 %10, i32* %icode, align 4, !dbg !13164
  %11 = load i32, i32* %icode, align 4, !dbg !13165
  %cmp9 = icmp ne i32 %11, 2956, !dbg !13167
  br i1 %cmp9, label %if.then, label %if.end29, !dbg !13168

if.then:                                          ; preds = %for.body6
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !13169, metadata !DIExpression()), !dbg !13171
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !13172
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !13171
  %12 = load i32, i32* %fmode, align 4, !dbg !13173
  %13 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13175
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !13175
  %bf.load10 = load i32, i32* %14, align 8, !dbg !13175
  %bf.lshr11 = lshr i32 %bf.load10, 16, !dbg !13175
  %bf.clear12 = and i32 %bf.lshr11, 255, !dbg !13175
  %cmp13 = icmp ne i32 %12, %bf.clear12, !dbg !13176
  br i1 %cmp13, label %if.then14, label %if.end, !dbg !13177

if.then14:                                        ; preds = %if.then
  %15 = load i32, i32* %fmode, align 4, !dbg !13178
  %16 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13179
  %call15 = call %struct.rtx_def* @convert_to_mode(i32 %15, %struct.rtx_def* %16, i32 0), !dbg !13180
  store %struct.rtx_def* %call15, %struct.rtx_def** %from.addr, align 8, !dbg !13181
  br label %if.end, !dbg !13182

if.end:                                           ; preds = %if.then14, %if.then
  %17 = load i32, i32* %imode, align 4, !dbg !13183
  %18 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13185
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !13185
  %bf.load16 = load i32, i32* %19, align 8, !dbg !13185
  %bf.lshr17 = lshr i32 %bf.load16, 16, !dbg !13185
  %bf.clear18 = and i32 %bf.lshr17, 255, !dbg !13185
  %cmp19 = icmp ne i32 %17, %bf.clear18, !dbg !13186
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !13187

if.then20:                                        ; preds = %if.end
  %20 = load i32, i32* %imode, align 4, !dbg !13188
  %call21 = call %struct.rtx_def* @gen_reg_rtx(i32 %20), !dbg !13189
  store %struct.rtx_def* %call21, %struct.rtx_def** %target, align 8, !dbg !13190
  br label %if.end22, !dbg !13191

if.end22:                                         ; preds = %if.then20, %if.end
  %21 = load i32, i32* %icode, align 4, !dbg !13192
  %22 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !13194
  %23 = load %struct.rtx_def*, %struct.rtx_def** %from.addr, align 8, !dbg !13195
  %call23 = call zeroext i8 @maybe_emit_unop_insn(i32 %21, %struct.rtx_def* %22, %struct.rtx_def* %23, i32 0), !dbg !13196
  %tobool = icmp ne i8 %call23, 0, !dbg !13196
  br i1 %tobool, label %if.end25, label %if.then24, !dbg !13197

if.then24:                                        ; preds = %if.end22
  %24 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !13198
  call void @delete_insns_since(%struct.rtx_def* %24), !dbg !13200
  br label %for.inc, !dbg !13201

if.end25:                                         ; preds = %if.end22
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !13202
  %26 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13204
  %cmp26 = icmp ne %struct.rtx_def* %25, %26, !dbg !13205
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !13206

if.then27:                                        ; preds = %if.end25
  %27 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !13207
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !13208
  call void @convert_move(%struct.rtx_def* %27, %struct.rtx_def* %28, i32 0), !dbg !13209
  br label %if.end28, !dbg !13209

if.end28:                                         ; preds = %if.then27, %if.end25
  store i8 1, i8* %retval, align 1, !dbg !13210
  br label %return, !dbg !13210

if.end29:                                         ; preds = %for.body6
  br label %for.inc, !dbg !13211

for.inc:                                          ; preds = %if.end29, %if.then24
  %29 = load i32, i32* %imode, align 4, !dbg !13212
  %idxprom30 = zext i32 %29 to i64, !dbg !13212
  %arrayidx31 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom30, !dbg !13212
  %30 = load i8, i8* %arrayidx31, align 1, !dbg !13212
  %conv = zext i8 %30 to i32, !dbg !13212
  store i32 %conv, i32* %imode, align 4, !dbg !13213
  br label %for.cond4, !dbg !13214, !llvm.loop !13215

for.end:                                          ; preds = %for.cond4
  br label %for.inc32, !dbg !13216

for.inc32:                                        ; preds = %for.end
  %31 = load i32, i32* %fmode, align 4, !dbg !13217
  %idxprom33 = zext i32 %31 to i64, !dbg !13217
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom33, !dbg !13217
  %32 = load i8, i8* %arrayidx34, align 1, !dbg !13217
  %conv35 = zext i8 %32 to i32, !dbg !13217
  store i32 %conv35, i32* %fmode, align 4, !dbg !13218
  br label %for.cond, !dbg !13219, !llvm.loop !13220

for.end36:                                        ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !13222
  br label %return, !dbg !13222

return:                                           ; preds = %for.end36, %if.end28
  %33 = load i8, i8* %retval, align 1, !dbg !13223
  ret i8 %33, !dbg !13223
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @have_insn_for(i32 %code, i32 %mode) #0 !dbg !13224 {
entry:
  %code.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !13227, metadata !DIExpression()), !dbg !13228
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !13229, metadata !DIExpression()), !dbg !13230
  %0 = load i32, i32* %code.addr, align 4, !dbg !13231
  %idxprom = sext i32 %0 to i64, !dbg !13232
  %arrayidx = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom, !dbg !13232
  %1 = load %struct.optab_d*, %struct.optab_d** %arrayidx, align 8, !dbg !13232
  %cmp = icmp ne %struct.optab_d* %1, null, !dbg !13233
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !13234

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %code.addr, align 4, !dbg !13235
  %idxprom1 = sext i32 %2 to i64, !dbg !13235
  %arrayidx2 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom1, !dbg !13235
  %3 = load %struct.optab_d*, %struct.optab_d** %arrayidx2, align 8, !dbg !13235
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %3, i32 0, i32 4, !dbg !13235
  %4 = load i32, i32* %mode.addr, align 4, !dbg !13235
  %idxprom3 = sext i32 %4 to i64, !dbg !13235
  %arrayidx4 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom3, !dbg !13235
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx4, i32 0, i32 0, !dbg !13236
  %5 = load i32, i32* %insn_code, align 4, !dbg !13236
  %cmp5 = icmp ne i32 %5, 2956, !dbg !13237
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !13238
  %land.ext = zext i1 %6 to i32, !dbg !13234
  ret i32 %land.ext, !dbg !13239
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_libfunc_function(i8* %name) #0 !dbg !13240 {
entry:
  %name.addr = alloca i8*, align 8
  %decl = alloca %union.tree_node*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !13243, metadata !DIExpression()), !dbg !13244
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !13245, metadata !DIExpression()), !dbg !13246
  %0 = load i8*, i8** %name.addr, align 8, !dbg !13247
  %call = call %union.tree_node* @get_identifier(i8* %0), !dbg !13247
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !13247
  %call1 = call %union.tree_node* @build_function_type(%union.tree_node* %1, %union.tree_node* null), !dbg !13247
  %call2 = call %union.tree_node* @build_decl_stat(i32 0, i32 29, %union.tree_node* %call, %union.tree_node* %call1), !dbg !13247
  store %union.tree_node* %call2, %union.tree_node** %decl, align 8, !dbg !13246
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13248
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !13248
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !13248
  %3 = bitcast i40* %artificial_flag to i64*, !dbg !13248
  %bf.load = load i64, i64* %3, align 8, !dbg !13249
  %bf.clear = and i64 %bf.load, -4097, !dbg !13249
  %bf.set = or i64 %bf.clear, 4096, !dbg !13249
  store i64 %bf.set, i64* %3, align 8, !dbg !13249
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13250
  %decl_common3 = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !13250
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common3, i32 0, i32 2, !dbg !13250
  %5 = bitcast i40* %decl_flag_1 to i64*, !dbg !13250
  %bf.load4 = load i64, i64* %5, align 8, !dbg !13251
  %bf.clear5 = and i64 %bf.load4, -33554433, !dbg !13251
  %bf.set6 = or i64 %bf.clear5, 33554432, !dbg !13251
  store i64 %bf.set6, i64* %5, align 8, !dbg !13251
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13252
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !13252
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !13252
  %bf.load7 = load i64, i64* %7, align 8, !dbg !13253
  %bf.clear8 = and i64 %bf.load7, -134217729, !dbg !13253
  %bf.set9 = or i64 %bf.clear8, 134217728, !dbg !13253
  store i64 %bf.set9, i64* %7, align 8, !dbg !13253
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13254
  %call10 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %8), !dbg !13254
  %tobool = icmp ne %union.tree_node* %call10, null, !dbg !13254
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !13254

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6082, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13254
  br label %cond.end, !dbg !13254

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13254

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13254
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  %decl_with_rtl = bitcast %union.tree_node* %9 to %struct.tree_decl_with_rtl*, !dbg !13255
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !13255
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !13255
  %tobool11 = icmp ne %struct.rtx_def* %10, null, !dbg !13255
  br i1 %tobool11, label %cond.true12, label %cond.false15, !dbg !13255

cond.true12:                                      ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  %decl_with_rtl13 = bitcast %union.tree_node* %11 to %struct.tree_decl_with_rtl*, !dbg !13255
  %rtl14 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl13, i32 0, i32 1, !dbg !13255
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl14, align 8, !dbg !13255
  br label %cond.end18, !dbg !13255

cond.false15:                                     ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  call void @make_decl_rtl(%union.tree_node* %13), !dbg !13255
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  %decl_with_rtl16 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_rtl*, !dbg !13255
  %rtl17 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl16, i32 0, i32 1, !dbg !13255
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl17, align 8, !dbg !13255
  br label %cond.end18, !dbg !13255

cond.end18:                                       ; preds = %cond.false15, %cond.true12
  %cond19 = phi %struct.rtx_def* [ %12, %cond.true12 ], [ %15, %cond.false15 ], !dbg !13255
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond19, i32 0, i32 1, !dbg !13255
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13255
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13255
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !13255
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13255
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !13255
  %bf.load20 = load i32, i32* %17, align 8, !dbg !13255
  %bf.lshr = lshr i32 %bf.load20, 26, !dbg !13255
  %bf.clear21 = and i32 %bf.lshr, 1, !dbg !13255
  %tobool22 = icmp ne i32 %bf.clear21, 0, !dbg !13255
  br i1 %tobool22, label %cond.true23, label %cond.false24, !dbg !13255

cond.true23:                                      ; preds = %cond.end18
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6086, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13255
  br label %cond.end25, !dbg !13255

cond.false24:                                     ; preds = %cond.end18
  br label %cond.end25, !dbg !13255

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !13255
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  %decl_with_rtl27 = bitcast %union.tree_node* %18 to %struct.tree_decl_with_rtl*, !dbg !13255
  %rtl28 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl27, i32 0, i32 1, !dbg !13255
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl28, align 8, !dbg !13255
  %tobool29 = icmp ne %struct.rtx_def* %19, null, !dbg !13255
  br i1 %tobool29, label %cond.true30, label %cond.false33, !dbg !13255

cond.true30:                                      ; preds = %cond.end25
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  %decl_with_rtl31 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_rtl*, !dbg !13255
  %rtl32 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl31, i32 0, i32 1, !dbg !13255
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl32, align 8, !dbg !13255
  br label %cond.end36, !dbg !13255

cond.false33:                                     ; preds = %cond.end25
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  call void @make_decl_rtl(%union.tree_node* %22), !dbg !13255
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13255
  %decl_with_rtl34 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !13255
  %rtl35 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl34, i32 0, i32 1, !dbg !13255
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl35, align 8, !dbg !13255
  br label %cond.end36, !dbg !13255

cond.end36:                                       ; preds = %cond.false33, %cond.true30
  %cond37 = phi %struct.rtx_def* [ %21, %cond.true30 ], [ %24, %cond.false33 ], !dbg !13255
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond37, i32 0, i32 1, !dbg !13255
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !13255
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 0, !dbg !13255
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !13255
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !13255
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !13255
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !13255
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 2, !dbg !13255
  %rt_tree = bitcast %union.rtunion_def* %arrayidx44 to %union.tree_node**, !dbg !13255
  store %union.tree_node* null, %union.tree_node** %rt_tree, align 8, !dbg !13255
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13256
  ret %union.tree_node* %26, !dbg !13257
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @init_one_libfunc(i8* %name) #0 !dbg !13258 {
entry:
  %name.addr = alloca i8*, align 8
  %id = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %hash = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !13261, metadata !DIExpression()), !dbg !13262
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !13263, metadata !DIExpression()), !dbg !13264
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !13265, metadata !DIExpression()), !dbg !13266
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !13267, metadata !DIExpression()), !dbg !13268
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !13269, metadata !DIExpression()), !dbg !13270
  %0 = load %struct.htab*, %struct.htab** @libfunc_decls, align 8, !dbg !13271
  %cmp = icmp eq %struct.htab* %0, null, !dbg !13273
  br i1 %cmp, label %if.then, label %if.end, !dbg !13274

if.then:                                          ; preds = %entry
  %call = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @libfunc_decl_hash, i32 (i8*, i8*)* @libfunc_decl_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !13275
  store %struct.htab* %call, %struct.htab** @libfunc_decls, align 8, !dbg !13276
  br label %if.end, !dbg !13277

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !13278
  %call1 = call %union.tree_node* @get_identifier(i8* %1), !dbg !13279
  store %union.tree_node* %call1, %union.tree_node** %id, align 8, !dbg !13280
  %2 = load i8*, i8** %name.addr, align 8, !dbg !13281
  %call2 = call i32 @htab_hash_string(i8* %2), !dbg !13282
  store i32 %call2, i32* %hash, align 4, !dbg !13283
  %3 = load %struct.htab*, %struct.htab** @libfunc_decls, align 8, !dbg !13284
  %4 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !13285
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !13285
  %6 = load i32, i32* %hash, align 4, !dbg !13286
  %call3 = call i8** @htab_find_slot_with_hash(%struct.htab* %3, i8* %5, i32 %6, i32 1), !dbg !13287
  store i8** %call3, i8*** %slot, align 8, !dbg !13288
  %7 = load i8**, i8*** %slot, align 8, !dbg !13289
  %8 = load i8*, i8** %7, align 8, !dbg !13290
  %9 = bitcast i8* %8 to %union.tree_node*, !dbg !13291
  store %union.tree_node* %9, %union.tree_node** %decl, align 8, !dbg !13292
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13293
  %cmp4 = icmp eq %union.tree_node* %10, null, !dbg !13295
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !13296

if.then5:                                         ; preds = %if.end
  %11 = load i8*, i8** %name.addr, align 8, !dbg !13297
  %call6 = call %union.tree_node* @build_libfunc_function(i8* %11), !dbg !13299
  store %union.tree_node* %call6, %union.tree_node** %decl, align 8, !dbg !13300
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13301
  %13 = bitcast %union.tree_node* %12 to i8*, !dbg !13301
  %14 = load i8**, i8*** %slot, align 8, !dbg !13302
  store i8* %13, i8** %14, align 8, !dbg !13303
  br label %if.end7, !dbg !13304

if.end7:                                          ; preds = %if.then5, %if.end
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13305
  %decl_with_rtl = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !13305
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !13305
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !13305
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !13305
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13305

cond.true:                                        ; preds = %if.end7
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13305
  %decl_with_rtl8 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_rtl*, !dbg !13305
  %rtl9 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl8, i32 0, i32 1, !dbg !13305
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8, !dbg !13305
  br label %cond.end, !dbg !13305

cond.false:                                       ; preds = %if.end7
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13305
  call void @make_decl_rtl(%union.tree_node* %19), !dbg !13305
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13305
  %decl_with_rtl10 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_rtl*, !dbg !13305
  %rtl11 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl10, i32 0, i32 1, !dbg !13305
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8, !dbg !13305
  br label %cond.end, !dbg !13305

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %18, %cond.true ], [ %21, %cond.false ], !dbg !13305
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1, !dbg !13305
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13305
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13305
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !13305
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13305
  ret %struct.rtx_def* %22, !dbg !13306
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @libfunc_decl_hash(i8* %entry1) #0 !dbg !13307 {
entry:
  %entry.addr = alloca i8*, align 8
  store i8* %entry1, i8** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry.addr, metadata !13308, metadata !DIExpression()), !dbg !13309
  %0 = load i8*, i8** %entry.addr, align 8, !dbg !13310
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !13310
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !13310
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !13310
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !13310
  %identifier = bitcast %union.tree_node* %2 to %struct.tree_identifier*, !dbg !13310
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !13310
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !13310
  %3 = load i8*, i8** %str, align 8, !dbg !13310
  %call = call i32 @htab_hash_string(i8* %3), !dbg !13311
  ret i32 %call, !dbg !13312
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @libfunc_decl_eq(i8* %entry1, i8* %entry2) #0 !dbg !13313 {
entry:
  %entry1.addr = alloca i8*, align 8
  %entry2.addr = alloca i8*, align 8
  store i8* %entry1, i8** %entry1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry1.addr, metadata !13314, metadata !DIExpression()), !dbg !13315
  store i8* %entry2, i8** %entry2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %entry2.addr, metadata !13316, metadata !DIExpression()), !dbg !13317
  %0 = load i8*, i8** %entry1.addr, align 8, !dbg !13318
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !13318
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !13318
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !13318
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !13318
  %3 = load i8*, i8** %entry2.addr, align 8, !dbg !13319
  %4 = bitcast i8* %3 to %union.tree_node*, !dbg !13320
  %cmp = icmp eq %union.tree_node* %2, %4, !dbg !13321
  %conv = zext i1 %cmp to i32, !dbg !13321
  ret i32 %conv, !dbg !13322
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

declare dso_local i32 @htab_hash_string(i8*) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @set_user_assembler_libfunc(i8* %name, i8* %asmspec) #0 !dbg !13323 {
entry:
  %name.addr = alloca i8*, align 8
  %asmspec.addr = alloca i8*, align 8
  %id = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %hash = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !13326, metadata !DIExpression()), !dbg !13327
  store i8* %asmspec, i8** %asmspec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %asmspec.addr, metadata !13328, metadata !DIExpression()), !dbg !13329
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !13330, metadata !DIExpression()), !dbg !13331
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !13332, metadata !DIExpression()), !dbg !13333
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !13334, metadata !DIExpression()), !dbg !13335
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !13336, metadata !DIExpression()), !dbg !13337
  %0 = load i8*, i8** %name.addr, align 8, !dbg !13338
  %call = call %union.tree_node* @get_identifier(i8* %0), !dbg !13339
  store %union.tree_node* %call, %union.tree_node** %id, align 8, !dbg !13340
  %1 = load i8*, i8** %name.addr, align 8, !dbg !13341
  %call1 = call i32 @htab_hash_string(i8* %1), !dbg !13342
  store i32 %call1, i32* %hash, align 4, !dbg !13343
  %2 = load %struct.htab*, %struct.htab** @libfunc_decls, align 8, !dbg !13344
  %3 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !13345
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !13345
  %5 = load i32, i32* %hash, align 4, !dbg !13346
  %call2 = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %4, i32 %5, i32 0), !dbg !13347
  store i8** %call2, i8*** %slot, align 8, !dbg !13348
  %6 = load i8**, i8*** %slot, align 8, !dbg !13349
  %tobool = icmp ne i8** %6, null, !dbg !13349
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !13349

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6129, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13349
  br label %cond.end, !dbg !13349

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13349

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13349
  %7 = load i8**, i8*** %slot, align 8, !dbg !13350
  %8 = load i8*, i8** %7, align 8, !dbg !13351
  %9 = bitcast i8* %8 to %union.tree_node*, !dbg !13352
  store %union.tree_node* %9, %union.tree_node** %decl, align 8, !dbg !13353
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13354
  %11 = load i8*, i8** %asmspec.addr, align 8, !dbg !13355
  call void @set_user_assembler_name(%union.tree_node* %10, i8* %11), !dbg !13356
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13357
  %decl_with_rtl = bitcast %union.tree_node* %12 to %struct.tree_decl_with_rtl*, !dbg !13357
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !13357
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !13357
  %tobool3 = icmp ne %struct.rtx_def* %13, null, !dbg !13357
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !13357

cond.true4:                                       ; preds = %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13357
  %decl_with_rtl5 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_rtl*, !dbg !13357
  %rtl6 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl5, i32 0, i32 1, !dbg !13357
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl6, align 8, !dbg !13357
  br label %cond.end10, !dbg !13357

cond.false7:                                      ; preds = %cond.end
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13357
  call void @make_decl_rtl(%union.tree_node* %16), !dbg !13357
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13357
  %decl_with_rtl8 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_rtl*, !dbg !13357
  %rtl9 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl8, i32 0, i32 1, !dbg !13357
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl9, align 8, !dbg !13357
  br label %cond.end10, !dbg !13357

cond.end10:                                       ; preds = %cond.false7, %cond.true4
  %cond11 = phi %struct.rtx_def* [ %15, %cond.true4 ], [ %18, %cond.false7 ], !dbg !13357
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond11, i32 0, i32 1, !dbg !13357
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13357
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13357
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !13357
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13357
  ret %struct.rtx_def* %19, !dbg !13358
}

declare dso_local void @set_user_assembler_name(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_optab_libfunc(%struct.optab_d* %optable, i32 %mode, i8* %name) #0 !dbg !13359 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %mode.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.libfunc_entry, align 8
  %slot = alloca %struct.libfunc_entry**, align 8
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !13362, metadata !DIExpression()), !dbg !13363
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !13364, metadata !DIExpression()), !dbg !13365
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !13366, metadata !DIExpression()), !dbg !13367
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !13368, metadata !DIExpression()), !dbg !13369
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry* %e, metadata !13370, metadata !DIExpression()), !dbg !13371
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry*** %slot, metadata !13372, metadata !DIExpression()), !dbg !13373
  %0 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !13374
  %sub.ptr.lhs.cast = ptrtoint %struct.optab_d* %0 to i64, !dbg !13375
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([159 x %struct.optab_d]* @optab_table to i64), !dbg !13375
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 384, !dbg !13375
  %optab = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 0, !dbg !13376
  store i64 %sub.ptr.div, i64* %optab, align 8, !dbg !13377
  %1 = load i32, i32* %mode.addr, align 4, !dbg !13378
  %mode1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 1, !dbg !13379
  store i32 %1, i32* %mode1, align 8, !dbg !13380
  %mode2 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 2, !dbg !13381
  store i32 0, i32* %mode2, align 4, !dbg !13382
  %2 = load i8*, i8** %name.addr, align 8, !dbg !13383
  %tobool = icmp ne i8* %2, null, !dbg !13383
  br i1 %tobool, label %if.then, label %if.else, !dbg !13385

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %name.addr, align 8, !dbg !13386
  %call = call %struct.rtx_def* @init_one_libfunc(i8* %3), !dbg !13387
  store %struct.rtx_def* %call, %struct.rtx_def** %val, align 8, !dbg !13388
  br label %if.end, !dbg !13389

if.else:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %val, align 8, !dbg !13390
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.htab*, %struct.htab** @libfunc_hash, align 8, !dbg !13391
  %5 = bitcast %struct.libfunc_entry* %e to i8*, !dbg !13392
  %call1 = call i8** @htab_find_slot(%struct.htab* %4, i8* %5, i32 1), !dbg !13393
  %6 = bitcast i8** %call1 to %struct.libfunc_entry**, !dbg !13394
  store %struct.libfunc_entry** %6, %struct.libfunc_entry*** %slot, align 8, !dbg !13395
  %7 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13396
  %8 = load %struct.libfunc_entry*, %struct.libfunc_entry** %7, align 8, !dbg !13398
  %cmp = icmp eq %struct.libfunc_entry* %8, null, !dbg !13399
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !13400

if.then2:                                         ; preds = %if.end
  %call3 = call i8* @ggc_alloc_stat(i64 24), !dbg !13401
  %9 = bitcast i8* %call3 to %struct.libfunc_entry*, !dbg !13401
  %10 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13402
  store %struct.libfunc_entry* %9, %struct.libfunc_entry** %10, align 8, !dbg !13403
  br label %if.end4, !dbg !13404

if.end4:                                          ; preds = %if.then2, %if.end
  %11 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !13405
  %sub.ptr.lhs.cast5 = ptrtoint %struct.optab_d* %11 to i64, !dbg !13406
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast5, ptrtoint ([159 x %struct.optab_d]* @optab_table to i64), !dbg !13406
  %sub.ptr.div7 = sdiv exact i64 %sub.ptr.sub6, 384, !dbg !13406
  %12 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13407
  %13 = load %struct.libfunc_entry*, %struct.libfunc_entry** %12, align 8, !dbg !13408
  %optab8 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %13, i32 0, i32 0, !dbg !13409
  store i64 %sub.ptr.div7, i64* %optab8, align 8, !dbg !13410
  %14 = load i32, i32* %mode.addr, align 4, !dbg !13411
  %15 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13412
  %16 = load %struct.libfunc_entry*, %struct.libfunc_entry** %15, align 8, !dbg !13413
  %mode19 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %16, i32 0, i32 1, !dbg !13414
  store i32 %14, i32* %mode19, align 8, !dbg !13415
  %17 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13416
  %18 = load %struct.libfunc_entry*, %struct.libfunc_entry** %17, align 8, !dbg !13417
  %mode210 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %18, i32 0, i32 2, !dbg !13418
  store i32 0, i32* %mode210, align 4, !dbg !13419
  %19 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !13420
  %20 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13421
  %21 = load %struct.libfunc_entry*, %struct.libfunc_entry** %20, align 8, !dbg !13422
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %21, i32 0, i32 3, !dbg !13423
  store %struct.rtx_def* %19, %struct.rtx_def** %libfunc, align 8, !dbg !13424
  ret void, !dbg !13425
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_conv_libfunc(%struct.convert_optab_d* %optable, i32 %tmode, i32 %fmode, i8* %name) #0 !dbg !13426 {
entry:
  %optable.addr = alloca %struct.convert_optab_d*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.libfunc_entry, align 8
  %slot = alloca %struct.libfunc_entry**, align 8
  store %struct.convert_optab_d* %optable, %struct.convert_optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %optable.addr, metadata !13429, metadata !DIExpression()), !dbg !13430
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !13431, metadata !DIExpression()), !dbg !13432
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !13433, metadata !DIExpression()), !dbg !13434
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !13435, metadata !DIExpression()), !dbg !13436
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !13437, metadata !DIExpression()), !dbg !13438
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry* %e, metadata !13439, metadata !DIExpression()), !dbg !13440
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry*** %slot, metadata !13441, metadata !DIExpression()), !dbg !13442
  %0 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optable.addr, align 8, !dbg !13443
  %sub.ptr.lhs.cast = ptrtoint %struct.convert_optab_d* %0 to i64, !dbg !13444
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, ptrtoint ([17 x %struct.convert_optab_d]* @convert_optab_table to i64), !dbg !13444
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 30304, !dbg !13444
  %optab = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 0, !dbg !13445
  store i64 %sub.ptr.div, i64* %optab, align 8, !dbg !13446
  %1 = load i32, i32* %tmode.addr, align 4, !dbg !13447
  %mode1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 1, !dbg !13448
  store i32 %1, i32* %mode1, align 8, !dbg !13449
  %2 = load i32, i32* %fmode.addr, align 4, !dbg !13450
  %mode2 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %e, i32 0, i32 2, !dbg !13451
  store i32 %2, i32* %mode2, align 4, !dbg !13452
  %3 = load i8*, i8** %name.addr, align 8, !dbg !13453
  %tobool = icmp ne i8* %3, null, !dbg !13453
  br i1 %tobool, label %if.then, label %if.else, !dbg !13455

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !13456
  %call = call %struct.rtx_def* @init_one_libfunc(i8* %4), !dbg !13457
  store %struct.rtx_def* %call, %struct.rtx_def** %val, align 8, !dbg !13458
  br label %if.end, !dbg !13459

if.else:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %val, align 8, !dbg !13460
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %struct.htab*, %struct.htab** @libfunc_hash, align 8, !dbg !13461
  %6 = bitcast %struct.libfunc_entry* %e to i8*, !dbg !13462
  %call1 = call i8** @htab_find_slot(%struct.htab* %5, i8* %6, i32 1), !dbg !13463
  %7 = bitcast i8** %call1 to %struct.libfunc_entry**, !dbg !13464
  store %struct.libfunc_entry** %7, %struct.libfunc_entry*** %slot, align 8, !dbg !13465
  %8 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13466
  %9 = load %struct.libfunc_entry*, %struct.libfunc_entry** %8, align 8, !dbg !13468
  %cmp = icmp eq %struct.libfunc_entry* %9, null, !dbg !13469
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !13470

if.then2:                                         ; preds = %if.end
  %call3 = call i8* @ggc_alloc_stat(i64 24), !dbg !13471
  %10 = bitcast i8* %call3 to %struct.libfunc_entry*, !dbg !13471
  %11 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13472
  store %struct.libfunc_entry* %10, %struct.libfunc_entry** %11, align 8, !dbg !13473
  br label %if.end4, !dbg !13474

if.end4:                                          ; preds = %if.then2, %if.end
  %12 = load %struct.convert_optab_d*, %struct.convert_optab_d** %optable.addr, align 8, !dbg !13475
  %sub.ptr.lhs.cast5 = ptrtoint %struct.convert_optab_d* %12 to i64, !dbg !13476
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast5, ptrtoint ([17 x %struct.convert_optab_d]* @convert_optab_table to i64), !dbg !13476
  %sub.ptr.div7 = sdiv exact i64 %sub.ptr.sub6, 30304, !dbg !13476
  %13 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13477
  %14 = load %struct.libfunc_entry*, %struct.libfunc_entry** %13, align 8, !dbg !13478
  %optab8 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %14, i32 0, i32 0, !dbg !13479
  store i64 %sub.ptr.div7, i64* %optab8, align 8, !dbg !13480
  %15 = load i32, i32* %tmode.addr, align 4, !dbg !13481
  %16 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13482
  %17 = load %struct.libfunc_entry*, %struct.libfunc_entry** %16, align 8, !dbg !13483
  %mode19 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %17, i32 0, i32 1, !dbg !13484
  store i32 %15, i32* %mode19, align 8, !dbg !13485
  %18 = load i32, i32* %fmode.addr, align 4, !dbg !13486
  %19 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13487
  %20 = load %struct.libfunc_entry*, %struct.libfunc_entry** %19, align 8, !dbg !13488
  %mode210 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %20, i32 0, i32 2, !dbg !13489
  store i32 %18, i32* %mode210, align 4, !dbg !13490
  %21 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !13491
  %22 = load %struct.libfunc_entry**, %struct.libfunc_entry*** %slot, align 8, !dbg !13492
  %23 = load %struct.libfunc_entry*, %struct.libfunc_entry** %22, align 8, !dbg !13493
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %23, i32 0, i32 3, !dbg !13494
  store %struct.rtx_def* %21, %struct.rtx_def** %libfunc, align 8, !dbg !13495
  ret void, !dbg !13496
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_optabs() #0 !dbg !3890 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13497, metadata !DIExpression()), !dbg !13498
  %call = call %struct.htab* @htab_create_alloc(i64 10, i32 (i8*)* @hash_libfunc, i32 (i8*, i8*)* @eq_libfunc, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !13499
  store %struct.htab* %call, %struct.htab** @libfunc_hash, align 8, !dbg !13500
  store i32 0, i32* %i, align 4, !dbg !13501
  br label %for.cond, !dbg !13503

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !13504
  %cmp = icmp ult i32 %0, 87, !dbg !13506
  br i1 %cmp, label %for.body, label %for.end, !dbg !13507

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !13508
  %idxprom = zext i32 %1 to i64, !dbg !13509
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @movcc_gen_code, i64 0, i64 %idxprom, !dbg !13509
  store i32 2956, i32* %arrayidx, align 4, !dbg !13510
  br label %for.inc, !dbg !13509

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !13511
  %inc = add i32 %2, 1, !dbg !13511
  store i32 %inc, i32* %i, align 4, !dbg !13511
  br label %for.cond, !dbg !13512, !llvm.loop !13513

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !13515
  br label %for.cond1, !dbg !13517

for.cond1:                                        ; preds = %for.inc8, %for.end
  %3 = load i32, i32* %i, align 4, !dbg !13518
  %cmp2 = icmp ult i32 %3, 87, !dbg !13520
  br i1 %cmp2, label %for.body3, label %for.end10, !dbg !13521

for.body3:                                        ; preds = %for.cond1
  %4 = load i32, i32* %i, align 4, !dbg !13522
  %idxprom4 = zext i32 %4 to i64, !dbg !13524
  %arrayidx5 = getelementptr inbounds [87 x i32], [87 x i32]* @vcond_gen_code, i64 0, i64 %idxprom4, !dbg !13524
  store i32 2956, i32* %arrayidx5, align 4, !dbg !13525
  %5 = load i32, i32* %i, align 4, !dbg !13526
  %idxprom6 = zext i32 %5 to i64, !dbg !13527
  %arrayidx7 = getelementptr inbounds [87 x i32], [87 x i32]* @vcondu_gen_code, i64 0, i64 %idxprom6, !dbg !13527
  store i32 2956, i32* %arrayidx7, align 4, !dbg !13528
  br label %for.inc8, !dbg !13529

for.inc8:                                         ; preds = %for.body3
  %6 = load i32, i32* %i, align 4, !dbg !13530
  %inc9 = add i32 %6, 1, !dbg !13530
  store i32 %inc9, i32* %i, align 4, !dbg !13530
  br label %for.cond1, !dbg !13531, !llvm.loop !13532

for.end10:                                        ; preds = %for.cond1
  call void @init_insn_codes(), !dbg !13534
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12), i32 49), !dbg !13535
  call void @init_optabv(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 13), i32 49), !dbg !13536
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), i32 50), !dbg !13537
  call void @init_optabv(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15), i32 50), !dbg !13538
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 0), i32 127), !dbg !13539
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 1), i32 128), !dbg !13540
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 2), i32 129), !dbg !13541
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 3), i32 135), !dbg !13542
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16), i32 52), !dbg !13543
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 4), i32 53), !dbg !13544
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 5), i32 54), !dbg !13545
  call void @init_optabv(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 17), i32 52), !dbg !13546
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 18), i32 0), !dbg !13547
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 19), i32 0), !dbg !13548
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 20), i32 0), !dbg !13549
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 21), i32 0), !dbg !13550
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 22), i32 0), !dbg !13551
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 23), i32 0), !dbg !13552
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 24), i32 0), !dbg !13553
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 25), i32 0), !dbg !13554
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 26), i32 0), !dbg !13555
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 27), i32 0), !dbg !13556
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 28), i32 0), !dbg !13557
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 29), i32 0), !dbg !13558
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 30), i32 0), !dbg !13559
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31), i32 55), !dbg !13560
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 6), i32 56), !dbg !13561
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 7), i32 57), !dbg !13562
  call void @init_optabv(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 32), i32 55), !dbg !13563
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33), i32 0), !dbg !13564
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34), i32 59), !dbg !13565
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35), i32 0), !dbg !13566
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36), i32 58), !dbg !13567
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37), i32 60), !dbg !13568
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 38), i32 0), !dbg !13569
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 39), i32 0), !dbg !13570
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 40), i32 0), !dbg !13571
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), i32 61), !dbg !13572
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), i32 62), !dbg !13573
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), i32 63), !dbg !13574
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), i32 65), !dbg !13575
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 10), i32 133), !dbg !13576
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 11), i32 134), !dbg !13577
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), i32 67), !dbg !13578
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), i32 68), !dbg !13579
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 47), i32 66), !dbg !13580
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 48), i32 69), !dbg !13581
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 54), i32 70), !dbg !13582
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55), i32 71), !dbg !13583
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 56), i32 72), !dbg !13584
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 57), i32 73), !dbg !13585
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 58), i32 0), !dbg !13586
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 59), i32 0), !dbg !13587
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 60), i32 23), !dbg !13588
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 61), i32 40), !dbg !13589
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 115), i32 48), !dbg !13590
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 116), i32 0), !dbg !13591
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 117), i32 0), !dbg !13592
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 118), i32 0), !dbg !13593
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 63), i32 0), !dbg !13594
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 105), i32 0), !dbg !13595
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 106), i32 0), !dbg !13596
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 107), i32 81), !dbg !13597
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 108), i32 80), !dbg !13598
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 109), i32 83), !dbg !13599
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 110), i32 82), !dbg !13600
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 111), i32 85), !dbg !13601
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 112), i32 84), !dbg !13602
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 113), i32 90), !dbg !13603
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64), i32 51), !dbg !13604
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 8), i32 130), !dbg !13605
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 9), i32 131), !dbg !13606
  call void @init_optabv(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65), i32 51), !dbg !13607
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66), i32 111), !dbg !13608
  call void @init_optabv(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 67), i32 111), !dbg !13609
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 120), i32 0), !dbg !13610
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69), i32 64), !dbg !13611
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), i32 113), !dbg !13612
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70), i32 114), !dbg !13613
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71), i32 115), !dbg !13614
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72), i32 116), !dbg !13615
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73), i32 117), !dbg !13616
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 74), i32 118), !dbg !13617
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 75), i32 112), !dbg !13618
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 94), i32 0), !dbg !13619
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 95), i32 0), !dbg !13620
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 97), i32 0), !dbg !13621
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 96), i32 0), !dbg !13622
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 98), i32 0), !dbg !13623
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 99), i32 0), !dbg !13624
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 76), i32 0), !dbg !13625
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 77), i32 0), !dbg !13626
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 78), i32 0), !dbg !13627
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 79), i32 0), !dbg !13628
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 80), i32 0), !dbg !13629
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 81), i32 0), !dbg !13630
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 82), i32 0), !dbg !13631
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 83), i32 0), !dbg !13632
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 84), i32 0), !dbg !13633
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 85), i32 0), !dbg !13634
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 86), i32 0), !dbg !13635
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 87), i32 0), !dbg !13636
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 88), i32 0), !dbg !13637
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 89), i32 0), !dbg !13638
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 90), i32 0), !dbg !13639
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 91), i32 0), !dbg !13640
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 92), i32 0), !dbg !13641
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 93), i32 0), !dbg !13642
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 100), i32 0), !dbg !13643
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 101), i32 0), !dbg !13644
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 102), i32 0), !dbg !13645
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 103), i32 0), !dbg !13646
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 104), i32 0), !dbg !13647
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 114), i32 0), !dbg !13648
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 119), i32 0), !dbg !13649
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 121), i32 0), !dbg !13650
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 122), i32 0), !dbg !13651
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 123), i32 0), !dbg !13652
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 124), i32 0), !dbg !13653
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 125), i32 0), !dbg !13654
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 126), i32 0), !dbg !13655
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 127), i32 0), !dbg !13656
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 128), i32 0), !dbg !13657
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 129), i32 0), !dbg !13658
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 130), i32 0), !dbg !13659
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 132), i32 0), !dbg !13660
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 133), i32 0), !dbg !13661
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 134), i32 0), !dbg !13662
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 135), i32 0), !dbg !13663
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 136), i32 0), !dbg !13664
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 131), i32 0), !dbg !13665
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 137), i32 0), !dbg !13666
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 138), i32 0), !dbg !13667
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 139), i32 0), !dbg !13668
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 140), i32 0), !dbg !13669
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 62), i32 0), !dbg !13670
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 141), i32 0), !dbg !13671
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 142), i32 0), !dbg !13672
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 143), i32 0), !dbg !13673
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 144), i32 0), !dbg !13674
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 145), i32 0), !dbg !13675
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 146), i32 0), !dbg !13676
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 147), i32 0), !dbg !13677
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 148), i32 0), !dbg !13678
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 149), i32 0), !dbg !13679
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 150), i32 0), !dbg !13680
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 151), i32 0), !dbg !13681
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 152), i32 0), !dbg !13682
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 153), i32 0), !dbg !13683
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 154), i32 0), !dbg !13684
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 155), i32 0), !dbg !13685
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 157), i32 0), !dbg !13686
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 156), i32 0), !dbg !13687
  call void @init_optab(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 158), i32 0), !dbg !13688
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 0), i32 98), !dbg !13689
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 1), i32 99), !dbg !13690
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 2), i32 100), !dbg !13691
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 3), i32 104), !dbg !13692
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 4), i32 106), !dbg !13693
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 5), i32 0), !dbg !13694
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 6), i32 0), !dbg !13695
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 7), i32 103), !dbg !13696
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 8), i32 105), !dbg !13697
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 9), i32 0), !dbg !13698
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 10), i32 0), !dbg !13699
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 11), i32 0), !dbg !13700
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 12), i32 0), !dbg !13701
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 13), i32 107), !dbg !13702
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 14), i32 108), !dbg !13703
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 15), i32 109), !dbg !13704
  call void @init_convert_optab(%struct.convert_optab_d* getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 16), i32 110), !dbg !13705
  store i32 0, i32* %i, align 4, !dbg !13706
  br label %for.cond11, !dbg !13708

for.cond11:                                       ; preds = %for.inc70, %for.end10
  %7 = load i32, i32* %i, align 4, !dbg !13709
  %cmp12 = icmp ult i32 %7, 87, !dbg !13711
  br i1 %cmp12, label %for.body13, label %for.end72, !dbg !13712

for.body13:                                       ; preds = %for.cond11
  %8 = load i32, i32* %i, align 4, !dbg !13713
  %idxprom14 = zext i32 %8 to i64, !dbg !13715
  %arrayidx15 = getelementptr inbounds [87 x i32], [87 x i32]* @movmem_optab, i64 0, i64 %idxprom14, !dbg !13715
  store i32 2956, i32* %arrayidx15, align 4, !dbg !13716
  %9 = load i32, i32* %i, align 4, !dbg !13717
  %idxprom16 = zext i32 %9 to i64, !dbg !13718
  %arrayidx17 = getelementptr inbounds [87 x i32], [87 x i32]* @cmpstr_optab, i64 0, i64 %idxprom16, !dbg !13718
  store i32 2956, i32* %arrayidx17, align 4, !dbg !13719
  %10 = load i32, i32* %i, align 4, !dbg !13720
  %idxprom18 = zext i32 %10 to i64, !dbg !13721
  %arrayidx19 = getelementptr inbounds [87 x i32], [87 x i32]* @cmpstrn_optab, i64 0, i64 %idxprom18, !dbg !13721
  store i32 2956, i32* %arrayidx19, align 4, !dbg !13722
  %11 = load i32, i32* %i, align 4, !dbg !13723
  %idxprom20 = zext i32 %11 to i64, !dbg !13724
  %arrayidx21 = getelementptr inbounds [87 x i32], [87 x i32]* @cmpmem_optab, i64 0, i64 %idxprom20, !dbg !13724
  store i32 2956, i32* %arrayidx21, align 4, !dbg !13725
  %12 = load i32, i32* %i, align 4, !dbg !13726
  %idxprom22 = zext i32 %12 to i64, !dbg !13727
  %arrayidx23 = getelementptr inbounds [87 x i32], [87 x i32]* @setmem_optab, i64 0, i64 %idxprom22, !dbg !13727
  store i32 2956, i32* %arrayidx23, align 4, !dbg !13728
  %13 = load i32, i32* %i, align 4, !dbg !13729
  %idxprom24 = zext i32 %13 to i64, !dbg !13730
  %arrayidx25 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_add_optab, i64 0, i64 %idxprom24, !dbg !13730
  store i32 2956, i32* %arrayidx25, align 4, !dbg !13731
  %14 = load i32, i32* %i, align 4, !dbg !13732
  %idxprom26 = zext i32 %14 to i64, !dbg !13733
  %arrayidx27 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_sub_optab, i64 0, i64 %idxprom26, !dbg !13733
  store i32 2956, i32* %arrayidx27, align 4, !dbg !13734
  %15 = load i32, i32* %i, align 4, !dbg !13735
  %idxprom28 = zext i32 %15 to i64, !dbg !13736
  %arrayidx29 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_ior_optab, i64 0, i64 %idxprom28, !dbg !13736
  store i32 2956, i32* %arrayidx29, align 4, !dbg !13737
  %16 = load i32, i32* %i, align 4, !dbg !13738
  %idxprom30 = zext i32 %16 to i64, !dbg !13739
  %arrayidx31 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_and_optab, i64 0, i64 %idxprom30, !dbg !13739
  store i32 2956, i32* %arrayidx31, align 4, !dbg !13740
  %17 = load i32, i32* %i, align 4, !dbg !13741
  %idxprom32 = zext i32 %17 to i64, !dbg !13742
  %arrayidx33 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_xor_optab, i64 0, i64 %idxprom32, !dbg !13742
  store i32 2956, i32* %arrayidx33, align 4, !dbg !13743
  %18 = load i32, i32* %i, align 4, !dbg !13744
  %idxprom34 = zext i32 %18 to i64, !dbg !13745
  %arrayidx35 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_nand_optab, i64 0, i64 %idxprom34, !dbg !13745
  store i32 2956, i32* %arrayidx35, align 4, !dbg !13746
  %19 = load i32, i32* %i, align 4, !dbg !13747
  %idxprom36 = zext i32 %19 to i64, !dbg !13748
  %arrayidx37 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_add_optab, i64 0, i64 %idxprom36, !dbg !13748
  store i32 2956, i32* %arrayidx37, align 4, !dbg !13749
  %20 = load i32, i32* %i, align 4, !dbg !13750
  %idxprom38 = zext i32 %20 to i64, !dbg !13751
  %arrayidx39 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_sub_optab, i64 0, i64 %idxprom38, !dbg !13751
  store i32 2956, i32* %arrayidx39, align 4, !dbg !13752
  %21 = load i32, i32* %i, align 4, !dbg !13753
  %idxprom40 = zext i32 %21 to i64, !dbg !13754
  %arrayidx41 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_ior_optab, i64 0, i64 %idxprom40, !dbg !13754
  store i32 2956, i32* %arrayidx41, align 4, !dbg !13755
  %22 = load i32, i32* %i, align 4, !dbg !13756
  %idxprom42 = zext i32 %22 to i64, !dbg !13757
  %arrayidx43 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_and_optab, i64 0, i64 %idxprom42, !dbg !13757
  store i32 2956, i32* %arrayidx43, align 4, !dbg !13758
  %23 = load i32, i32* %i, align 4, !dbg !13759
  %idxprom44 = zext i32 %23 to i64, !dbg !13760
  %arrayidx45 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_xor_optab, i64 0, i64 %idxprom44, !dbg !13760
  store i32 2956, i32* %arrayidx45, align 4, !dbg !13761
  %24 = load i32, i32* %i, align 4, !dbg !13762
  %idxprom46 = zext i32 %24 to i64, !dbg !13763
  %arrayidx47 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_nand_optab, i64 0, i64 %idxprom46, !dbg !13763
  store i32 2956, i32* %arrayidx47, align 4, !dbg !13764
  %25 = load i32, i32* %i, align 4, !dbg !13765
  %idxprom48 = zext i32 %25 to i64, !dbg !13766
  %arrayidx49 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_add_optab, i64 0, i64 %idxprom48, !dbg !13766
  store i32 2956, i32* %arrayidx49, align 4, !dbg !13767
  %26 = load i32, i32* %i, align 4, !dbg !13768
  %idxprom50 = zext i32 %26 to i64, !dbg !13769
  %arrayidx51 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_sub_optab, i64 0, i64 %idxprom50, !dbg !13769
  store i32 2956, i32* %arrayidx51, align 4, !dbg !13770
  %27 = load i32, i32* %i, align 4, !dbg !13771
  %idxprom52 = zext i32 %27 to i64, !dbg !13772
  %arrayidx53 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_ior_optab, i64 0, i64 %idxprom52, !dbg !13772
  store i32 2956, i32* %arrayidx53, align 4, !dbg !13773
  %28 = load i32, i32* %i, align 4, !dbg !13774
  %idxprom54 = zext i32 %28 to i64, !dbg !13775
  %arrayidx55 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_and_optab, i64 0, i64 %idxprom54, !dbg !13775
  store i32 2956, i32* %arrayidx55, align 4, !dbg !13776
  %29 = load i32, i32* %i, align 4, !dbg !13777
  %idxprom56 = zext i32 %29 to i64, !dbg !13778
  %arrayidx57 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_xor_optab, i64 0, i64 %idxprom56, !dbg !13778
  store i32 2956, i32* %arrayidx57, align 4, !dbg !13779
  %30 = load i32, i32* %i, align 4, !dbg !13780
  %idxprom58 = zext i32 %30 to i64, !dbg !13781
  %arrayidx59 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_nand_optab, i64 0, i64 %idxprom58, !dbg !13781
  store i32 2956, i32* %arrayidx59, align 4, !dbg !13782
  %31 = load i32, i32* %i, align 4, !dbg !13783
  %idxprom60 = zext i32 %31 to i64, !dbg !13784
  %arrayidx61 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom60, !dbg !13784
  store i32 2956, i32* %arrayidx61, align 4, !dbg !13785
  %32 = load i32, i32* %i, align 4, !dbg !13786
  %idxprom62 = zext i32 %32 to i64, !dbg !13787
  %arrayidx63 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_lock_test_and_set, i64 0, i64 %idxprom62, !dbg !13787
  store i32 2956, i32* %arrayidx63, align 4, !dbg !13788
  %33 = load i32, i32* %i, align 4, !dbg !13789
  %idxprom64 = zext i32 %33 to i64, !dbg !13790
  %arrayidx65 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_lock_release, i64 0, i64 %idxprom64, !dbg !13790
  store i32 2956, i32* %arrayidx65, align 4, !dbg !13791
  %34 = load i32, i32* %i, align 4, !dbg !13792
  %idxprom66 = zext i32 %34 to i64, !dbg !13793
  %arrayidx67 = getelementptr inbounds [87 x i32], [87 x i32]* @reload_out_optab, i64 0, i64 %idxprom66, !dbg !13793
  store i32 2956, i32* %arrayidx67, align 4, !dbg !13794
  %35 = load i32, i32* %i, align 4, !dbg !13795
  %idxprom68 = zext i32 %35 to i64, !dbg !13796
  %arrayidx69 = getelementptr inbounds [87 x i32], [87 x i32]* @reload_in_optab, i64 0, i64 %idxprom68, !dbg !13796
  store i32 2956, i32* %arrayidx69, align 4, !dbg !13797
  br label %for.inc70, !dbg !13798

for.inc70:                                        ; preds = %for.body13
  %36 = load i32, i32* %i, align 4, !dbg !13799
  %inc71 = add i32 %36, 1, !dbg !13799
  store i32 %inc71, i32* %i, align 4, !dbg !13799
  br label %for.cond11, !dbg !13800, !llvm.loop !13801

for.end72:                                        ; preds = %for.cond11
  call void @init_all_optabs(), !dbg !13803
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 1), align 8, !dbg !13804
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 2), align 16, !dbg !13805
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 12, i32 3), align 8, !dbg !13806
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 13, i32 1), align 8, !dbg !13807
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 13, i32 2), align 16, !dbg !13808
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_intv_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 13, i32 3), align 8, !dbg !13809
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 0, i32 1), align 8, !dbg !13810
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 0, i32 2), align 16, !dbg !13811
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 0, i32 3), align 8, !dbg !13812
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 1, i32 1), align 8, !dbg !13813
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 1, i32 2), align 16, !dbg !13814
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 1, i32 3), align 8, !dbg !13815
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14, i32 1), align 8, !dbg !13816
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14, i32 2), align 16, !dbg !13817
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14, i32 3), align 8, !dbg !13818
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15, i32 1), align 8, !dbg !13819
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15, i32 2), align 16, !dbg !13820
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_intv_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 15, i32 3), align 8, !dbg !13821
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 2, i32 1), align 8, !dbg !13822
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 2, i32 2), align 16, !dbg !13823
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 2, i32 3), align 8, !dbg !13824
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 3, i32 1), align 8, !dbg !13825
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 3, i32 2), align 16, !dbg !13826
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 3, i32 3), align 8, !dbg !13827
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16, i32 1), align 8, !dbg !13828
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16, i32 2), align 16, !dbg !13829
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 16, i32 3), align 8, !dbg !13830
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 17, i32 1), align 8, !dbg !13831
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 17, i32 2), align 16, !dbg !13832
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_intv_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 17, i32 3), align 8, !dbg !13833
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 4, i32 1), align 8, !dbg !13834
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 4, i32 2), align 16, !dbg !13835
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 4, i32 3), align 8, !dbg !13836
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 5, i32 1), align 8, !dbg !13837
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 5, i32 2), align 16, !dbg !13838
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 5, i32 3), align 8, !dbg !13839
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31, i32 1), align 8, !dbg !13840
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31, i32 2), align 16, !dbg !13841
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 31, i32 3), align 8, !dbg !13842
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 32, i32 1), align 8, !dbg !13843
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 32, i32 2), align 16, !dbg !13844
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 32, i32 3), align 8, !dbg !13845
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 6, i32 1), align 8, !dbg !13846
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 6, i32 2), align 16, !dbg !13847
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 6, i32 3), align 8, !dbg !13848
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34, i32 1), align 8, !dbg !13849
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34, i32 2), align 16, !dbg !13850
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 34, i32 3), align 8, !dbg !13851
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 7, i32 1), align 8, !dbg !13852
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 7, i32 2), align 16, !dbg !13853
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 7, i32 3), align 8, !dbg !13854
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33, i32 1), align 8, !dbg !13855
  store i8 52, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33, i32 2), align 16, !dbg !13856
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 33, i32 3), align 8, !dbg !13857
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35, i32 1), align 8, !dbg !13858
  store i8 52, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35, i32 2), align 16, !dbg !13859
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 35, i32 3), align 8, !dbg !13860
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36, i32 1), align 8, !dbg !13861
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36, i32 2), align 16, !dbg !13862
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 36, i32 3), align 8, !dbg !13863
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37, i32 1), align 8, !dbg !13864
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37, i32 2), align 16, !dbg !13865
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 37, i32 3), align 8, !dbg !13866
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 40, i32 1), align 8, !dbg !13867
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 40, i32 2), align 16, !dbg !13868
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 40, i32 3), align 8, !dbg !13869
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41, i32 1), align 8, !dbg !13870
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41, i32 2), align 16, !dbg !13871
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41, i32 3), align 8, !dbg !13872
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42, i32 1), align 8, !dbg !13873
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42, i32 2), align 16, !dbg !13874
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42, i32 3), align 8, !dbg !13875
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43, i32 1), align 8, !dbg !13876
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43, i32 2), align 16, !dbg !13877
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43, i32 3), align 8, !dbg !13878
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44, i32 1), align 8, !dbg !13879
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44, i32 2), align 16, !dbg !13880
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44, i32 3), align 8, !dbg !13881
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 10, i32 1), align 8, !dbg !13882
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 10, i32 2), align 16, !dbg !13883
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 10, i32 3), align 8, !dbg !13884
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 11, i32 1), align 8, !dbg !13885
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 11, i32 2), align 16, !dbg !13886
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 11, i32 3), align 8, !dbg !13887
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46, i32 1), align 8, !dbg !13888
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46, i32 2), align 16, !dbg !13889
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46, i32 3), align 8, !dbg !13890
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45, i32 1), align 8, !dbg !13891
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45, i32 2), align 16, !dbg !13892
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45, i32 3), align 8, !dbg !13893
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 54, i32 1), align 8, !dbg !13894
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 54, i32 2), align 16, !dbg !13895
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 54, i32 3), align 8, !dbg !13896
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55, i32 1), align 8, !dbg !13897
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55, i32 2), align 16, !dbg !13898
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 55, i32 3), align 8, !dbg !13899
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 56, i32 1), align 8, !dbg !13900
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 56, i32 2), align 16, !dbg !13901
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 56, i32 3), align 8, !dbg !13902
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 57, i32 1), align 8, !dbg !13903
  store i8 51, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 57, i32 2), align 16, !dbg !13904
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 57, i32 3), align 8, !dbg !13905
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64, i32 1), align 8, !dbg !13906
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64, i32 2), align 16, !dbg !13907
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 64, i32 3), align 8, !dbg !13908
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 8, i32 1), align 8, !dbg !13909
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 8, i32 2), align 16, !dbg !13910
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_signed_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 8, i32 3), align 8, !dbg !13911
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 9, i32 1), align 8, !dbg !13912
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 9, i32 2), align 16, !dbg !13913
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_unsigned_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 9, i32 3), align 8, !dbg !13914
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65, i32 1), align 8, !dbg !13915
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65, i32 2), align 16, !dbg !13916
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_intv_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 65, i32 3), align 8, !dbg !13917
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69, i32 1), align 8, !dbg !13918
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69, i32 2), align 16, !dbg !13919
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 69, i32 3), align 8, !dbg !13920
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70, i32 1), align 8, !dbg !13921
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70, i32 2), align 16, !dbg !13922
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 70, i32 3), align 8, !dbg !13923
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71, i32 1), align 8, !dbg !13924
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71, i32 2), align 16, !dbg !13925
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 71, i32 3), align 8, !dbg !13926
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72, i32 1), align 8, !dbg !13927
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72, i32 2), align 16, !dbg !13928
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 72, i32 3), align 8, !dbg !13929
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73, i32 1), align 8, !dbg !13930
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73, i32 2), align 16, !dbg !13931
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 73, i32 3), align 8, !dbg !13932
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 74, i32 1), align 8, !dbg !13933
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 74, i32 2), align 16, !dbg !13934
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 74, i32 3), align 8, !dbg !13935
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 105, i32 1), align 8, !dbg !13936
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 105, i32 2), align 16, !dbg !13937
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_fp_fixed_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 105, i32 3), align 8, !dbg !13938
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 106, i32 1), align 8, !dbg !13939
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 106, i32 2), align 16, !dbg !13940
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_int_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 106, i32 3), align 8, !dbg !13941
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 107, i32 1), align 8, !dbg !13942
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 107, i32 2), align 16, !dbg !13943
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 107, i32 3), align 8, !dbg !13944
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 108, i32 1), align 8, !dbg !13945
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 108, i32 2), align 16, !dbg !13946
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 108, i32 3), align 8, !dbg !13947
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 109, i32 1), align 8, !dbg !13948
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 109, i32 2), align 16, !dbg !13949
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 109, i32 3), align 8, !dbg !13950
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 110, i32 1), align 8, !dbg !13951
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 110, i32 2), align 16, !dbg !13952
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 110, i32 3), align 8, !dbg !13953
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 111, i32 1), align 8, !dbg !13954
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 111, i32 2), align 16, !dbg !13955
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 111, i32 3), align 8, !dbg !13956
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 112, i32 1), align 8, !dbg !13957
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 112, i32 2), align 16, !dbg !13958
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 112, i32 3), align 8, !dbg !13959
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 113, i32 1), align 8, !dbg !13960
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 113, i32 2), align 16, !dbg !13961
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 113, i32 3), align 8, !dbg !13962
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0), i8** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 158, i32 1), align 8, !dbg !13963
  store i8 50, i8* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 158, i32 2), align 16, !dbg !13964
  store void (%struct.optab_d*, i8*, i8, i32)* @gen_fp_libfunc, void (%struct.optab_d*, i8*, i8, i32)** getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 158, i32 3), align 8, !dbg !13965
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 7, i32 1), align 8, !dbg !13966
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_int_to_fp_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 7, i32 2), align 16, !dbg !13967
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_ufloat_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 8, i32 2), align 16, !dbg !13968
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.53, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 3, i32 1), align 8, !dbg !13969
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_fp_to_int_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 3, i32 2), align 16, !dbg !13970
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 4, i32 1), align 8, !dbg !13971
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_fp_to_int_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 4, i32 2), align 16, !dbg !13972
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 9, i32 1), align 8, !dbg !13973
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_int_to_fp_nondecimal_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 9, i32 2), align 16, !dbg !13974
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.56, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 10, i32 1), align 8, !dbg !13975
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_int_to_fp_nondecimal_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 10, i32 2), align 16, !dbg !13976
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 11, i32 1), align 8, !dbg !13977
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_int_to_fp_nondecimal_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 11, i32 2), align 16, !dbg !13978
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 12, i32 1), align 8, !dbg !13979
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_int_to_fp_nondecimal_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 12, i32 2), align 16, !dbg !13980
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 0, i32 1), align 8, !dbg !13981
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_extend_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 0, i32 2), align 16, !dbg !13982
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 2, i32 1), align 8, !dbg !13983
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_trunc_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 2, i32 2), align 16, !dbg !13984
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 13, i32 1), align 8, !dbg !13985
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_fract_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 13, i32 2), align 16, !dbg !13986
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 15, i32 1), align 8, !dbg !13987
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_satfract_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 15, i32 2), align 16, !dbg !13988
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 14, i32 1), align 8, !dbg !13989
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_fractuns_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 14, i32 2), align 16, !dbg !13990
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i64 0, i64 0), i8** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 16, i32 1), align 8, !dbg !13991
  store void (%struct.convert_optab_d*, i8*, i32, i32)* @gen_satfractuns_conv_libfunc, void (%struct.convert_optab_d*, i8*, i32, i32)** getelementptr inbounds ([17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 16, i32 2), align 16, !dbg !13992
  call void @set_optab_libfunc(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), i32 16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0)), !dbg !13993
  call void @set_optab_libfunc(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 68), i32 17, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.66, i64 0, i64 0)), !dbg !13994
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 29), align 8, !dbg !13995
  %tobool = icmp ne %union.tree_node* %37, null, !dbg !13995
  br i1 %tobool, label %if.then, label %if.end, !dbg !13997

if.then:                                          ; preds = %for.end72
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 29), align 8, !dbg !13998
  %base = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !13998
  %39 = bitcast %struct.tree_base* %base to i64*, !dbg !13998
  %bf.load = load i64, i64* %39, align 8, !dbg !13998
  %bf.clear = and i64 %bf.load, 65535, !dbg !13998
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13998
  %cmp73 = icmp eq i32 %bf.cast, 14, !dbg !13998
  br i1 %cmp73, label %cond.true, label %cond.false, !dbg !13998

cond.true:                                        ; preds = %if.then
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 29), align 8, !dbg !13998
  %call74 = call i32 @vector_type_mode(%union.tree_node* %40), !dbg !13998
  br label %cond.end, !dbg !13998

cond.false:                                       ; preds = %if.then
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 29), align 8, !dbg !13998
  %type = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !13998
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !13998
  %bf.load75 = load i32, i32* %mode, align 4, !dbg !13998
  %bf.lshr = lshr i32 %bf.load75, 16, !dbg !13998
  %bf.clear76 = and i32 %bf.lshr, 255, !dbg !13998
  br label %cond.end, !dbg !13998

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call74, %cond.true ], [ %bf.clear76, %cond.false ], !dbg !13998
  call void @set_optab_libfunc(%struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 66), i32 %cond, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i64 0, i64 0)), !dbg !13999
  br label %if.end, !dbg !13999

if.end:                                           ; preds = %cond.end, %for.end72
  %call77 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0)), !dbg !14000
  store %struct.rtx_def* %call77, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 0), align 16, !dbg !14001
  %call78 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.69, i64 0, i64 0)), !dbg !14002
  store %struct.rtx_def* %call78, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 1), align 8, !dbg !14003
  %call79 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i64 0, i64 0)), !dbg !14004
  store %struct.rtx_def* %call79, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 2), align 16, !dbg !14005
  %call80 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0)), !dbg !14006
  store %struct.rtx_def* %call80, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 3), align 8, !dbg !14007
  %call81 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72, i64 0, i64 0)), !dbg !14008
  store %struct.rtx_def* %call81, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 4), align 16, !dbg !14009
  %call82 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.73, i64 0, i64 0)), !dbg !14010
  store %struct.rtx_def* %call82, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 5), align 8, !dbg !14011
  %call83 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.74, i64 0, i64 0)), !dbg !14012
  store %struct.rtx_def* %call83, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 6), align 16, !dbg !14013
  %call84 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.75, i64 0, i64 0)), !dbg !14014
  store %struct.rtx_def* %call84, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 7), align 8, !dbg !14015
  %call85 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.76, i64 0, i64 0)), !dbg !14016
  store %struct.rtx_def* %call85, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 8), align 16, !dbg !14017
  %call86 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.77, i64 0, i64 0)), !dbg !14018
  store %struct.rtx_def* %call86, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 9), align 8, !dbg !14019
  %call87 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.78, i64 0, i64 0)), !dbg !14020
  store %struct.rtx_def* %call87, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 10), align 16, !dbg !14021
  %call88 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.79, i64 0, i64 0)), !dbg !14022
  store %struct.rtx_def* %call88, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 11), align 8, !dbg !14023
  %call89 = call %struct.rtx_def* @init_one_libfunc(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.80, i64 0, i64 0)), !dbg !14024
  store %struct.rtx_def* %call89, %struct.rtx_def** getelementptr inbounds ([14 x %struct.rtx_def*], [14 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 13), align 8, !dbg !14025
  %42 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 30), align 8, !dbg !14026
  call void %42(), !dbg !14027
  store i8 1, i8* @init_optabs.reinit, align 1, !dbg !14028
  ret void, !dbg !14029
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_libfunc(i8* %p) #0 !dbg !14030 {
entry:
  %p.addr = alloca i8*, align 8
  %e = alloca %struct.libfunc_entry*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !14031, metadata !DIExpression()), !dbg !14032
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry** %e, metadata !14033, metadata !DIExpression()), !dbg !14035
  %0 = load i8*, i8** %p.addr, align 8, !dbg !14036
  %1 = bitcast i8* %0 to %struct.libfunc_entry*, !dbg !14037
  store %struct.libfunc_entry* %1, %struct.libfunc_entry** %e, align 8, !dbg !14035
  %2 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e, align 8, !dbg !14038
  %mode1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %2, i32 0, i32 1, !dbg !14039
  %3 = load i32, i32* %mode1, align 8, !dbg !14039
  %4 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e, align 8, !dbg !14040
  %mode2 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %4, i32 0, i32 2, !dbg !14041
  %5 = load i32, i32* %mode2, align 4, !dbg !14041
  %mul = mul nsw i32 %5, 87, !dbg !14042
  %add = add nsw i32 %3, %mul, !dbg !14043
  %conv = sext i32 %add to i64, !dbg !14044
  %6 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e, align 8, !dbg !14045
  %optab = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %6, i32 0, i32 0, !dbg !14046
  %7 = load i64, i64* %optab, align 8, !dbg !14046
  %xor = xor i64 %conv, %7, !dbg !14047
  %conv1 = trunc i64 %xor to i32, !dbg !14048
  ret i32 %conv1, !dbg !14049
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_libfunc(i8* %p, i8* %q) #0 !dbg !14050 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  %e1 = alloca %struct.libfunc_entry*, align 8
  %e2 = alloca %struct.libfunc_entry*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !14051, metadata !DIExpression()), !dbg !14052
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !14053, metadata !DIExpression()), !dbg !14054
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry** %e1, metadata !14055, metadata !DIExpression()), !dbg !14056
  %0 = load i8*, i8** %p.addr, align 8, !dbg !14057
  %1 = bitcast i8* %0 to %struct.libfunc_entry*, !dbg !14058
  store %struct.libfunc_entry* %1, %struct.libfunc_entry** %e1, align 8, !dbg !14056
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry** %e2, metadata !14059, metadata !DIExpression()), !dbg !14060
  %2 = load i8*, i8** %q.addr, align 8, !dbg !14061
  %3 = bitcast i8* %2 to %struct.libfunc_entry*, !dbg !14062
  store %struct.libfunc_entry* %3, %struct.libfunc_entry** %e2, align 8, !dbg !14060
  %4 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e1, align 8, !dbg !14063
  %optab = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %4, i32 0, i32 0, !dbg !14064
  %5 = load i64, i64* %optab, align 8, !dbg !14064
  %6 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e2, align 8, !dbg !14065
  %optab1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %6, i32 0, i32 0, !dbg !14066
  %7 = load i64, i64* %optab1, align 8, !dbg !14066
  %cmp = icmp eq i64 %5, %7, !dbg !14067
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !14068

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e1, align 8, !dbg !14069
  %mode1 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %8, i32 0, i32 1, !dbg !14070
  %9 = load i32, i32* %mode1, align 8, !dbg !14070
  %10 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e2, align 8, !dbg !14071
  %mode12 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %10, i32 0, i32 1, !dbg !14072
  %11 = load i32, i32* %mode12, align 8, !dbg !14072
  %cmp3 = icmp eq i32 %9, %11, !dbg !14073
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !14074

land.rhs:                                         ; preds = %land.lhs.true
  %12 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e1, align 8, !dbg !14075
  %mode2 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %12, i32 0, i32 2, !dbg !14076
  %13 = load i32, i32* %mode2, align 4, !dbg !14076
  %14 = load %struct.libfunc_entry*, %struct.libfunc_entry** %e2, align 8, !dbg !14077
  %mode24 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %14, i32 0, i32 2, !dbg !14078
  %15 = load i32, i32* %mode24, align 4, !dbg !14078
  %cmp5 = icmp eq i32 %13, %15, !dbg !14079
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %16 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp5, %land.rhs ], !dbg !14080
  %land.ext = zext i1 %16 to i32, !dbg !14074
  ret i32 %land.ext, !dbg !14081
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_insn_codes() #0 !dbg !14082 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %op = alloca %struct.optab_d*, align 8
  %j12 = alloca i32, align 4
  %k = alloca i32, align 4
  %op13 = alloca %struct.convert_optab_d*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14083, metadata !DIExpression()), !dbg !14084
  store i32 0, i32* %i, align 4, !dbg !14085
  br label %for.cond, !dbg !14087

for.cond:                                         ; preds = %for.inc6, %entry
  %0 = load i32, i32* %i, align 4, !dbg !14088
  %cmp = icmp ult i32 %0, 159, !dbg !14090
  br i1 %cmp, label %for.body, label %for.end8, !dbg !14091

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %j, metadata !14092, metadata !DIExpression()), !dbg !14094
  call void @llvm.dbg.declare(metadata %struct.optab_d** %op, metadata !14095, metadata !DIExpression()), !dbg !14096
  %1 = load i32, i32* %i, align 4, !dbg !14097
  %idxprom = zext i32 %1 to i64, !dbg !14098
  %arrayidx = getelementptr inbounds [159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 %idxprom, !dbg !14098
  store %struct.optab_d* %arrayidx, %struct.optab_d** %op, align 8, !dbg !14099
  store i32 0, i32* %j, align 4, !dbg !14100
  br label %for.cond1, !dbg !14102

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !14103
  %cmp2 = icmp ult i32 %2, 87, !dbg !14105
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !14106

for.body3:                                        ; preds = %for.cond1
  %3 = load %struct.optab_d*, %struct.optab_d** %op, align 8, !dbg !14107
  %handlers = getelementptr inbounds %struct.optab_d, %struct.optab_d* %3, i32 0, i32 4, !dbg !14107
  %4 = load i32, i32* %j, align 4, !dbg !14107
  %idxprom4 = sext i32 %4 to i64, !dbg !14107
  %arrayidx5 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %handlers, i64 0, i64 %idxprom4, !dbg !14107
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx5, i32 0, i32 0, !dbg !14108
  store i32 2956, i32* %insn_code, align 4, !dbg !14109
  br label %for.inc, !dbg !14107

for.inc:                                          ; preds = %for.body3
  %5 = load i32, i32* %j, align 4, !dbg !14110
  %inc = add i32 %5, 1, !dbg !14110
  store i32 %inc, i32* %j, align 4, !dbg !14110
  br label %for.cond1, !dbg !14111, !llvm.loop !14112

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !14114

for.inc6:                                         ; preds = %for.end
  %6 = load i32, i32* %i, align 4, !dbg !14115
  %inc7 = add i32 %6, 1, !dbg !14115
  store i32 %inc7, i32* %i, align 4, !dbg !14115
  br label %for.cond, !dbg !14116, !llvm.loop !14117

for.end8:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !14119
  br label %for.cond9, !dbg !14121

for.cond9:                                        ; preds = %for.inc34, %for.end8
  %7 = load i32, i32* %i, align 4, !dbg !14122
  %cmp10 = icmp ult i32 %7, 17, !dbg !14124
  br i1 %cmp10, label %for.body11, label %for.end36, !dbg !14125

for.body11:                                       ; preds = %for.cond9
  call void @llvm.dbg.declare(metadata i32* %j12, metadata !14126, metadata !DIExpression()), !dbg !14128
  call void @llvm.dbg.declare(metadata i32* %k, metadata !14129, metadata !DIExpression()), !dbg !14130
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %op13, metadata !14131, metadata !DIExpression()), !dbg !14132
  %8 = load i32, i32* %i, align 4, !dbg !14133
  %idxprom14 = zext i32 %8 to i64, !dbg !14134
  %arrayidx15 = getelementptr inbounds [17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 %idxprom14, !dbg !14134
  store %struct.convert_optab_d* %arrayidx15, %struct.convert_optab_d** %op13, align 8, !dbg !14135
  store i32 0, i32* %j12, align 4, !dbg !14136
  br label %for.cond16, !dbg !14138

for.cond16:                                       ; preds = %for.inc31, %for.body11
  %9 = load i32, i32* %j12, align 4, !dbg !14139
  %cmp17 = icmp ult i32 %9, 87, !dbg !14141
  br i1 %cmp17, label %for.body18, label %for.end33, !dbg !14142

for.body18:                                       ; preds = %for.cond16
  store i32 0, i32* %k, align 4, !dbg !14143
  br label %for.cond19, !dbg !14145

for.cond19:                                       ; preds = %for.inc28, %for.body18
  %10 = load i32, i32* %k, align 4, !dbg !14146
  %cmp20 = icmp ult i32 %10, 87, !dbg !14148
  br i1 %cmp20, label %for.body21, label %for.end30, !dbg !14149

for.body21:                                       ; preds = %for.cond19
  %11 = load %struct.convert_optab_d*, %struct.convert_optab_d** %op13, align 8, !dbg !14150
  %handlers22 = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %11, i32 0, i32 3, !dbg !14150
  %12 = load i32, i32* %j12, align 4, !dbg !14150
  %idxprom23 = sext i32 %12 to i64, !dbg !14150
  %arrayidx24 = getelementptr inbounds [87 x [87 x %struct.optab_handlers]], [87 x [87 x %struct.optab_handlers]]* %handlers22, i64 0, i64 %idxprom23, !dbg !14150
  %13 = load i32, i32* %k, align 4, !dbg !14150
  %idxprom25 = sext i32 %13 to i64, !dbg !14150
  %arrayidx26 = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* %arrayidx24, i64 0, i64 %idxprom25, !dbg !14150
  %insn_code27 = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx26, i32 0, i32 0, !dbg !14151
  store i32 2956, i32* %insn_code27, align 4, !dbg !14152
  br label %for.inc28, !dbg !14150

for.inc28:                                        ; preds = %for.body21
  %14 = load i32, i32* %k, align 4, !dbg !14153
  %inc29 = add i32 %14, 1, !dbg !14153
  store i32 %inc29, i32* %k, align 4, !dbg !14153
  br label %for.cond19, !dbg !14154, !llvm.loop !14155

for.end30:                                        ; preds = %for.cond19
  br label %for.inc31, !dbg !14156

for.inc31:                                        ; preds = %for.end30
  %15 = load i32, i32* %j12, align 4, !dbg !14157
  %inc32 = add i32 %15, 1, !dbg !14157
  store i32 %inc32, i32* %j12, align 4, !dbg !14157
  br label %for.cond16, !dbg !14158, !llvm.loop !14159

for.end33:                                        ; preds = %for.cond16
  br label %for.inc34, !dbg !14161

for.inc34:                                        ; preds = %for.end33
  %16 = load i32, i32* %i, align 4, !dbg !14162
  %inc35 = add i32 %16, 1, !dbg !14162
  store i32 %inc35, i32* %i, align 4, !dbg !14162
  br label %for.cond9, !dbg !14163, !llvm.loop !14164

for.end36:                                        ; preds = %for.cond9
  ret void, !dbg !14166
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_optab(%struct.optab_d* %op, i32 %code) #0 !dbg !14167 {
entry:
  %op.addr = alloca %struct.optab_d*, align 8
  %code.addr = alloca i32, align 4
  store %struct.optab_d* %op, %struct.optab_d** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %op.addr, metadata !14170, metadata !DIExpression()), !dbg !14171
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !14172, metadata !DIExpression()), !dbg !14173
  %0 = load i32, i32* %code.addr, align 4, !dbg !14174
  %1 = load %struct.optab_d*, %struct.optab_d** %op.addr, align 8, !dbg !14175
  %code1 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %1, i32 0, i32 0, !dbg !14176
  store i32 %0, i32* %code1, align 8, !dbg !14177
  %2 = load %struct.optab_d*, %struct.optab_d** %op.addr, align 8, !dbg !14178
  %3 = load i32, i32* %code.addr, align 4, !dbg !14179
  %idxprom = sext i32 %3 to i64, !dbg !14180
  %arrayidx = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom, !dbg !14180
  store %struct.optab_d* %2, %struct.optab_d** %arrayidx, align 8, !dbg !14181
  ret void, !dbg !14182
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_optabv(%struct.optab_d* %op, i32 %code) #0 !dbg !14183 {
entry:
  %op.addr = alloca %struct.optab_d*, align 8
  %code.addr = alloca i32, align 4
  store %struct.optab_d* %op, %struct.optab_d** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %op.addr, metadata !14184, metadata !DIExpression()), !dbg !14185
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !14186, metadata !DIExpression()), !dbg !14187
  %0 = load i32, i32* %code.addr, align 4, !dbg !14188
  %1 = load %struct.optab_d*, %struct.optab_d** %op.addr, align 8, !dbg !14189
  %code1 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %1, i32 0, i32 0, !dbg !14190
  store i32 %0, i32* %code1, align 8, !dbg !14191
  ret void, !dbg !14192
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_convert_optab(%struct.convert_optab_d* %op, i32 %code) #0 !dbg !14193 {
entry:
  %op.addr = alloca %struct.convert_optab_d*, align 8
  %code.addr = alloca i32, align 4
  store %struct.convert_optab_d* %op, %struct.convert_optab_d** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %op.addr, metadata !14196, metadata !DIExpression()), !dbg !14197
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !14198, metadata !DIExpression()), !dbg !14199
  %0 = load i32, i32* %code.addr, align 4, !dbg !14200
  %1 = load %struct.convert_optab_d*, %struct.convert_optab_d** %op.addr, align 8, !dbg !14201
  %code1 = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %1, i32 0, i32 0, !dbg !14202
  store i32 %0, i32* %code1, align 8, !dbg !14203
  ret void, !dbg !14204
}

declare dso_local void @init_all_optabs() #2

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_fp_fixed_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14205 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14208, metadata !DIExpression()), !dbg !14209
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14210, metadata !DIExpression()), !dbg !14211
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14212, metadata !DIExpression()), !dbg !14213
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14214, metadata !DIExpression()), !dbg !14215
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14216
  %idxprom = zext i32 %0 to i64, !dbg !14216
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14216
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14216
  %conv = zext i8 %1 to i32, !dbg !14216
  %cmp = icmp eq i32 %conv, 9, !dbg !14216
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14218

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14219
  %idxprom2 = zext i32 %2 to i64, !dbg !14219
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14219
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14219
  %conv4 = zext i8 %3 to i32, !dbg !14219
  %cmp5 = icmp eq i32 %conv4, 8, !dbg !14220
  br i1 %cmp5, label %if.then, label %if.end, !dbg !14221

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14222
  %5 = load i8*, i8** %name.addr, align 8, !dbg !14223
  %6 = load i8, i8* %suffix.addr, align 1, !dbg !14224
  %7 = load i32, i32* %mode.addr, align 4, !dbg !14225
  call void @gen_fp_libfunc(%struct.optab_d* %4, i8* %5, i8 signext %6, i32 %7), !dbg !14226
  br label %if.end, !dbg !14226

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %8 = load i32, i32* %mode.addr, align 4, !dbg !14227
  %idxprom7 = zext i32 %8 to i64, !dbg !14227
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14227
  %9 = load i8, i8* %arrayidx8, align 1, !dbg !14227
  %conv9 = zext i8 %9 to i32, !dbg !14227
  %cmp10 = icmp eq i32 %conv9, 2, !dbg !14227
  br i1 %cmp10, label %if.then30, label %lor.lhs.false12, !dbg !14227

lor.lhs.false12:                                  ; preds = %if.end
  %10 = load i32, i32* %mode.addr, align 4, !dbg !14227
  %idxprom13 = zext i32 %10 to i64, !dbg !14227
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom13, !dbg !14227
  %11 = load i8, i8* %arrayidx14, align 1, !dbg !14227
  %conv15 = zext i8 %11 to i32, !dbg !14227
  %cmp16 = icmp eq i32 %conv15, 3, !dbg !14227
  br i1 %cmp16, label %if.then30, label %lor.lhs.false18, !dbg !14227

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %12 = load i32, i32* %mode.addr, align 4, !dbg !14227
  %idxprom19 = zext i32 %12 to i64, !dbg !14227
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !14227
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !14227
  %conv21 = zext i8 %13 to i32, !dbg !14227
  %cmp22 = icmp eq i32 %conv21, 10, !dbg !14227
  br i1 %cmp22, label %if.then30, label %lor.lhs.false24, !dbg !14227

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %14 = load i32, i32* %mode.addr, align 4, !dbg !14227
  %idxprom25 = zext i32 %14 to i64, !dbg !14227
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !14227
  %15 = load i8, i8* %arrayidx26, align 1, !dbg !14227
  %conv27 = zext i8 %15 to i32, !dbg !14227
  %cmp28 = icmp eq i32 %conv27, 12, !dbg !14227
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !14229

if.then30:                                        ; preds = %lor.lhs.false24, %lor.lhs.false18, %lor.lhs.false12, %if.end
  %16 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14230
  %17 = load i8*, i8** %name.addr, align 8, !dbg !14231
  %18 = load i8, i8* %suffix.addr, align 1, !dbg !14232
  %19 = load i32, i32* %mode.addr, align 4, !dbg !14233
  call void @gen_int_libfunc(%struct.optab_d* %16, i8* %17, i8 signext %18, i32 %19), !dbg !14234
  br label %if.end31, !dbg !14234

if.end31:                                         ; preds = %if.then30, %lor.lhs.false24
  %20 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom32 = zext i32 %20 to i64, !dbg !14235
  %arrayidx33 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom32, !dbg !14235
  %21 = load i8, i8* %arrayidx33, align 1, !dbg !14235
  %conv34 = zext i8 %21 to i32, !dbg !14235
  %cmp35 = icmp eq i32 %conv34, 4, !dbg !14235
  br i1 %cmp35, label %if.then79, label %lor.lhs.false37, !dbg !14235

lor.lhs.false37:                                  ; preds = %if.end31
  %22 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom38 = zext i32 %22 to i64, !dbg !14235
  %arrayidx39 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom38, !dbg !14235
  %23 = load i8, i8* %arrayidx39, align 1, !dbg !14235
  %conv40 = zext i8 %23 to i32, !dbg !14235
  %cmp41 = icmp eq i32 %conv40, 13, !dbg !14235
  br i1 %cmp41, label %if.then79, label %lor.lhs.false43, !dbg !14235

lor.lhs.false43:                                  ; preds = %lor.lhs.false37
  %24 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom44 = zext i32 %24 to i64, !dbg !14235
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom44, !dbg !14235
  %25 = load i8, i8* %arrayidx45, align 1, !dbg !14235
  %conv46 = zext i8 %25 to i32, !dbg !14235
  %cmp47 = icmp eq i32 %conv46, 6, !dbg !14235
  br i1 %cmp47, label %if.then79, label %lor.lhs.false49, !dbg !14235

lor.lhs.false49:                                  ; preds = %lor.lhs.false43
  %26 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom50 = zext i32 %26 to i64, !dbg !14235
  %arrayidx51 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom50, !dbg !14235
  %27 = load i8, i8* %arrayidx51, align 1, !dbg !14235
  %conv52 = zext i8 %27 to i32, !dbg !14235
  %cmp53 = icmp eq i32 %conv52, 15, !dbg !14235
  br i1 %cmp53, label %if.then79, label %lor.lhs.false55, !dbg !14235

lor.lhs.false55:                                  ; preds = %lor.lhs.false49
  %28 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom56 = zext i32 %28 to i64, !dbg !14235
  %arrayidx57 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom56, !dbg !14235
  %29 = load i8, i8* %arrayidx57, align 1, !dbg !14235
  %conv58 = zext i8 %29 to i32, !dbg !14235
  %cmp59 = icmp eq i32 %conv58, 5, !dbg !14235
  br i1 %cmp59, label %if.then79, label %lor.lhs.false61, !dbg !14235

lor.lhs.false61:                                  ; preds = %lor.lhs.false55
  %30 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom62 = zext i32 %30 to i64, !dbg !14235
  %arrayidx63 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom62, !dbg !14235
  %31 = load i8, i8* %arrayidx63, align 1, !dbg !14235
  %conv64 = zext i8 %31 to i32, !dbg !14235
  %cmp65 = icmp eq i32 %conv64, 14, !dbg !14235
  br i1 %cmp65, label %if.then79, label %lor.lhs.false67, !dbg !14235

lor.lhs.false67:                                  ; preds = %lor.lhs.false61
  %32 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom68 = zext i32 %32 to i64, !dbg !14235
  %arrayidx69 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom68, !dbg !14235
  %33 = load i8, i8* %arrayidx69, align 1, !dbg !14235
  %conv70 = zext i8 %33 to i32, !dbg !14235
  %cmp71 = icmp eq i32 %conv70, 7, !dbg !14235
  br i1 %cmp71, label %if.then79, label %lor.lhs.false73, !dbg !14235

lor.lhs.false73:                                  ; preds = %lor.lhs.false67
  %34 = load i32, i32* %mode.addr, align 4, !dbg !14235
  %idxprom74 = zext i32 %34 to i64, !dbg !14235
  %arrayidx75 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom74, !dbg !14235
  %35 = load i8, i8* %arrayidx75, align 1, !dbg !14235
  %conv76 = zext i8 %35 to i32, !dbg !14235
  %cmp77 = icmp eq i32 %conv76, 16, !dbg !14235
  br i1 %cmp77, label %if.then79, label %if.end80, !dbg !14237

if.then79:                                        ; preds = %lor.lhs.false73, %lor.lhs.false67, %lor.lhs.false61, %lor.lhs.false55, %lor.lhs.false49, %lor.lhs.false43, %lor.lhs.false37, %if.end31
  %36 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14238
  %37 = load i8*, i8** %name.addr, align 8, !dbg !14239
  %38 = load i8, i8* %suffix.addr, align 1, !dbg !14240
  %39 = load i32, i32* %mode.addr, align 4, !dbg !14241
  call void @gen_fixed_libfunc(%struct.optab_d* %36, i8* %37, i8 signext %38, i32 %39), !dbg !14242
  br label %if.end80, !dbg !14242

if.end80:                                         ; preds = %if.then79, %lor.lhs.false73
  ret void, !dbg !14243
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_intv_fp_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14244 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %v_name = alloca i8*, align 8
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14245, metadata !DIExpression()), !dbg !14246
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14247, metadata !DIExpression()), !dbg !14248
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14249, metadata !DIExpression()), !dbg !14250
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14251, metadata !DIExpression()), !dbg !14252
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14253
  %idxprom = zext i32 %0 to i64, !dbg !14253
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14253
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14253
  %conv = zext i8 %1 to i32, !dbg !14253
  %cmp = icmp eq i32 %conv, 9, !dbg !14253
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14255

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14256
  %idxprom2 = zext i32 %2 to i64, !dbg !14256
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14256
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14256
  %conv4 = zext i8 %3 to i32, !dbg !14256
  %cmp5 = icmp eq i32 %conv4, 8, !dbg !14257
  br i1 %cmp5, label %if.then, label %if.end, !dbg !14258

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14259
  %5 = load i8*, i8** %name.addr, align 8, !dbg !14260
  %6 = load i8, i8* %suffix.addr, align 1, !dbg !14261
  %7 = load i32, i32* %mode.addr, align 4, !dbg !14262
  call void @gen_fp_libfunc(%struct.optab_d* %4, i8* %5, i8 signext %6, i32 %7), !dbg !14263
  br label %if.end, !dbg !14263

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %8 = load i32, i32* %mode.addr, align 4, !dbg !14264
  %idxprom7 = zext i32 %8 to i64, !dbg !14264
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14264
  %9 = load i8, i8* %arrayidx8, align 1, !dbg !14264
  %conv9 = zext i8 %9 to i32, !dbg !14264
  %cmp10 = icmp eq i32 %conv9, 2, !dbg !14266
  br i1 %cmp10, label %if.then12, label %if.end21, !dbg !14267

if.then12:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %len, metadata !14268, metadata !DIExpression()), !dbg !14270
  %10 = load i8*, i8** %name.addr, align 8, !dbg !14271
  %call = call i64 @strlen(i8* %10), !dbg !14272
  %conv13 = trunc i64 %call to i32, !dbg !14272
  store i32 %conv13, i32* %len, align 4, !dbg !14270
  call void @llvm.dbg.declare(metadata i8** %v_name, metadata !14273, metadata !DIExpression()), !dbg !14274
  %11 = load i32, i32* %len, align 4, !dbg !14275
  %add = add nsw i32 %11, 2, !dbg !14275
  %conv14 = sext i32 %add to i64, !dbg !14275
  %mul = mul i64 1, %conv14, !dbg !14275
  %12 = alloca i8, i64 %mul, align 16, !dbg !14275
  store i8* %12, i8** %v_name, align 8, !dbg !14274
  %13 = load i8*, i8** %v_name, align 8, !dbg !14276
  %14 = load i8*, i8** %name.addr, align 8, !dbg !14277
  %call15 = call i8* @strcpy(i8* %13, i8* %14), !dbg !14278
  %15 = load i8*, i8** %v_name, align 8, !dbg !14279
  %16 = load i32, i32* %len, align 4, !dbg !14280
  %idxprom16 = sext i32 %16 to i64, !dbg !14279
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i64 %idxprom16, !dbg !14279
  store i8 118, i8* %arrayidx17, align 1, !dbg !14281
  %17 = load i8*, i8** %v_name, align 8, !dbg !14282
  %18 = load i32, i32* %len, align 4, !dbg !14283
  %add18 = add nsw i32 %18, 1, !dbg !14284
  %idxprom19 = sext i32 %add18 to i64, !dbg !14282
  %arrayidx20 = getelementptr inbounds i8, i8* %17, i64 %idxprom19, !dbg !14282
  store i8 0, i8* %arrayidx20, align 1, !dbg !14285
  %19 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14286
  %20 = load i8*, i8** %v_name, align 8, !dbg !14287
  %21 = load i8, i8* %suffix.addr, align 1, !dbg !14288
  %22 = load i32, i32* %mode.addr, align 4, !dbg !14289
  call void @gen_int_libfunc(%struct.optab_d* %19, i8* %20, i8 signext %21, i32 %22), !dbg !14290
  br label %if.end21, !dbg !14291

if.end21:                                         ; preds = %if.then12, %if.end
  ret void, !dbg !14292
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_signed_fixed_libfunc(%struct.optab_d* %optable, i8* %opname, i8 signext %suffix, i32 %mode) #0 !dbg !14293 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14294, metadata !DIExpression()), !dbg !14295
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14296, metadata !DIExpression()), !dbg !14297
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14298, metadata !DIExpression()), !dbg !14299
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14300, metadata !DIExpression()), !dbg !14301
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14302
  %idxprom = zext i32 %0 to i64, !dbg !14302
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14302
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14302
  %conv = zext i8 %1 to i32, !dbg !14302
  %cmp = icmp eq i32 %conv, 4, !dbg !14302
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !14302

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14302
  %idxprom2 = zext i32 %2 to i64, !dbg !14302
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14302
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14302
  %conv4 = zext i8 %3 to i32, !dbg !14302
  %cmp5 = icmp eq i32 %conv4, 13, !dbg !14302
  br i1 %cmp5, label %if.end, label %lor.lhs.false7, !dbg !14302

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !14302
  %idxprom8 = zext i32 %4 to i64, !dbg !14302
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !14302
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !14302
  %conv10 = zext i8 %5 to i32, !dbg !14302
  %cmp11 = icmp eq i32 %conv10, 6, !dbg !14302
  br i1 %cmp11, label %if.end, label %lor.lhs.false13, !dbg !14302

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !14302
  %idxprom14 = zext i32 %6 to i64, !dbg !14302
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !14302
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !14302
  %conv16 = zext i8 %7 to i32, !dbg !14302
  %cmp17 = icmp eq i32 %conv16, 15, !dbg !14302
  br i1 %cmp17, label %if.end, label %if.then, !dbg !14304

if.then:                                          ; preds = %lor.lhs.false13
  br label %return, !dbg !14305

if.end:                                           ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %8 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14306
  %9 = load i8*, i8** %opname.addr, align 8, !dbg !14307
  %10 = load i8, i8* %suffix.addr, align 1, !dbg !14308
  %conv19 = sext i8 %10 to i32, !dbg !14308
  %11 = load i32, i32* %mode.addr, align 4, !dbg !14309
  call void @gen_libfunc(%struct.optab_d* %8, i8* %9, i32 %conv19, i32 %11), !dbg !14310
  br label %return, !dbg !14311

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !14311
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_unsigned_fixed_libfunc(%struct.optab_d* %optable, i8* %opname, i8 signext %suffix, i32 %mode) #0 !dbg !14312 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14313, metadata !DIExpression()), !dbg !14314
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14315, metadata !DIExpression()), !dbg !14316
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14317, metadata !DIExpression()), !dbg !14318
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14319, metadata !DIExpression()), !dbg !14320
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14321
  %idxprom = zext i32 %0 to i64, !dbg !14321
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14321
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14321
  %conv = zext i8 %1 to i32, !dbg !14321
  %cmp = icmp eq i32 %conv, 5, !dbg !14321
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !14321

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14321
  %idxprom2 = zext i32 %2 to i64, !dbg !14321
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14321
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14321
  %conv4 = zext i8 %3 to i32, !dbg !14321
  %cmp5 = icmp eq i32 %conv4, 14, !dbg !14321
  br i1 %cmp5, label %if.end, label %lor.lhs.false7, !dbg !14321

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !14321
  %idxprom8 = zext i32 %4 to i64, !dbg !14321
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !14321
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !14321
  %conv10 = zext i8 %5 to i32, !dbg !14321
  %cmp11 = icmp eq i32 %conv10, 7, !dbg !14321
  br i1 %cmp11, label %if.end, label %lor.lhs.false13, !dbg !14321

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !14321
  %idxprom14 = zext i32 %6 to i64, !dbg !14321
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !14321
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !14321
  %conv16 = zext i8 %7 to i32, !dbg !14321
  %cmp17 = icmp eq i32 %conv16, 16, !dbg !14321
  br i1 %cmp17, label %if.end, label %if.then, !dbg !14323

if.then:                                          ; preds = %lor.lhs.false13
  br label %return, !dbg !14324

if.end:                                           ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %8 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14325
  %9 = load i8*, i8** %opname.addr, align 8, !dbg !14326
  %10 = load i8, i8* %suffix.addr, align 1, !dbg !14327
  %conv19 = sext i8 %10 to i32, !dbg !14327
  %11 = load i32, i32* %mode.addr, align 4, !dbg !14328
  call void @gen_libfunc(%struct.optab_d* %8, i8* %9, i32 %conv19, i32 %11), !dbg !14329
  br label %return, !dbg !14330

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !14330
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_fp_signed_fixed_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14331 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14332, metadata !DIExpression()), !dbg !14333
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14334, metadata !DIExpression()), !dbg !14335
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14336, metadata !DIExpression()), !dbg !14337
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14338, metadata !DIExpression()), !dbg !14339
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14340
  %idxprom = zext i32 %0 to i64, !dbg !14340
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14340
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14340
  %conv = zext i8 %1 to i32, !dbg !14340
  %cmp = icmp eq i32 %conv, 9, !dbg !14340
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14342

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14343
  %idxprom2 = zext i32 %2 to i64, !dbg !14343
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14343
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14343
  %conv4 = zext i8 %3 to i32, !dbg !14343
  %cmp5 = icmp eq i32 %conv4, 8, !dbg !14344
  br i1 %cmp5, label %if.then, label %if.end, !dbg !14345

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14346
  %5 = load i8*, i8** %name.addr, align 8, !dbg !14347
  %6 = load i8, i8* %suffix.addr, align 1, !dbg !14348
  %7 = load i32, i32* %mode.addr, align 4, !dbg !14349
  call void @gen_fp_libfunc(%struct.optab_d* %4, i8* %5, i8 signext %6, i32 %7), !dbg !14350
  br label %if.end, !dbg !14350

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %8 = load i32, i32* %mode.addr, align 4, !dbg !14351
  %idxprom7 = zext i32 %8 to i64, !dbg !14351
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14351
  %9 = load i8, i8* %arrayidx8, align 1, !dbg !14351
  %conv9 = zext i8 %9 to i32, !dbg !14351
  %cmp10 = icmp eq i32 %conv9, 2, !dbg !14351
  br i1 %cmp10, label %if.then30, label %lor.lhs.false12, !dbg !14351

lor.lhs.false12:                                  ; preds = %if.end
  %10 = load i32, i32* %mode.addr, align 4, !dbg !14351
  %idxprom13 = zext i32 %10 to i64, !dbg !14351
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom13, !dbg !14351
  %11 = load i8, i8* %arrayidx14, align 1, !dbg !14351
  %conv15 = zext i8 %11 to i32, !dbg !14351
  %cmp16 = icmp eq i32 %conv15, 3, !dbg !14351
  br i1 %cmp16, label %if.then30, label %lor.lhs.false18, !dbg !14351

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %12 = load i32, i32* %mode.addr, align 4, !dbg !14351
  %idxprom19 = zext i32 %12 to i64, !dbg !14351
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !14351
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !14351
  %conv21 = zext i8 %13 to i32, !dbg !14351
  %cmp22 = icmp eq i32 %conv21, 10, !dbg !14351
  br i1 %cmp22, label %if.then30, label %lor.lhs.false24, !dbg !14351

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %14 = load i32, i32* %mode.addr, align 4, !dbg !14351
  %idxprom25 = zext i32 %14 to i64, !dbg !14351
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !14351
  %15 = load i8, i8* %arrayidx26, align 1, !dbg !14351
  %conv27 = zext i8 %15 to i32, !dbg !14351
  %cmp28 = icmp eq i32 %conv27, 12, !dbg !14351
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !14353

if.then30:                                        ; preds = %lor.lhs.false24, %lor.lhs.false18, %lor.lhs.false12, %if.end
  %16 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14354
  %17 = load i8*, i8** %name.addr, align 8, !dbg !14355
  %18 = load i8, i8* %suffix.addr, align 1, !dbg !14356
  %19 = load i32, i32* %mode.addr, align 4, !dbg !14357
  call void @gen_int_libfunc(%struct.optab_d* %16, i8* %17, i8 signext %18, i32 %19), !dbg !14358
  br label %if.end31, !dbg !14358

if.end31:                                         ; preds = %if.then30, %lor.lhs.false24
  %20 = load i32, i32* %mode.addr, align 4, !dbg !14359
  %idxprom32 = zext i32 %20 to i64, !dbg !14359
  %arrayidx33 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom32, !dbg !14359
  %21 = load i8, i8* %arrayidx33, align 1, !dbg !14359
  %conv34 = zext i8 %21 to i32, !dbg !14359
  %cmp35 = icmp eq i32 %conv34, 4, !dbg !14359
  br i1 %cmp35, label %if.then55, label %lor.lhs.false37, !dbg !14359

lor.lhs.false37:                                  ; preds = %if.end31
  %22 = load i32, i32* %mode.addr, align 4, !dbg !14359
  %idxprom38 = zext i32 %22 to i64, !dbg !14359
  %arrayidx39 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom38, !dbg !14359
  %23 = load i8, i8* %arrayidx39, align 1, !dbg !14359
  %conv40 = zext i8 %23 to i32, !dbg !14359
  %cmp41 = icmp eq i32 %conv40, 13, !dbg !14359
  br i1 %cmp41, label %if.then55, label %lor.lhs.false43, !dbg !14359

lor.lhs.false43:                                  ; preds = %lor.lhs.false37
  %24 = load i32, i32* %mode.addr, align 4, !dbg !14359
  %idxprom44 = zext i32 %24 to i64, !dbg !14359
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom44, !dbg !14359
  %25 = load i8, i8* %arrayidx45, align 1, !dbg !14359
  %conv46 = zext i8 %25 to i32, !dbg !14359
  %cmp47 = icmp eq i32 %conv46, 6, !dbg !14359
  br i1 %cmp47, label %if.then55, label %lor.lhs.false49, !dbg !14359

lor.lhs.false49:                                  ; preds = %lor.lhs.false43
  %26 = load i32, i32* %mode.addr, align 4, !dbg !14359
  %idxprom50 = zext i32 %26 to i64, !dbg !14359
  %arrayidx51 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom50, !dbg !14359
  %27 = load i8, i8* %arrayidx51, align 1, !dbg !14359
  %conv52 = zext i8 %27 to i32, !dbg !14359
  %cmp53 = icmp eq i32 %conv52, 15, !dbg !14359
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !14361

if.then55:                                        ; preds = %lor.lhs.false49, %lor.lhs.false43, %lor.lhs.false37, %if.end31
  %28 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14362
  %29 = load i8*, i8** %name.addr, align 8, !dbg !14363
  %30 = load i8, i8* %suffix.addr, align 1, !dbg !14364
  %31 = load i32, i32* %mode.addr, align 4, !dbg !14365
  call void @gen_signed_fixed_libfunc(%struct.optab_d* %28, i8* %29, i8 signext %30, i32 %31), !dbg !14366
  br label %if.end56, !dbg !14366

if.end56:                                         ; preds = %if.then55, %lor.lhs.false49
  ret void, !dbg !14367
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_libfunc(%struct.optab_d* %optable, i8* %opname, i8 signext %suffix, i32 %mode) #0 !dbg !14368 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %maxsize = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14369, metadata !DIExpression()), !dbg !14370
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14371, metadata !DIExpression()), !dbg !14372
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14373, metadata !DIExpression()), !dbg !14374
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14375, metadata !DIExpression()), !dbg !14376
  call void @llvm.dbg.declare(metadata i32* %maxsize, metadata !14377, metadata !DIExpression()), !dbg !14378
  store i32 64, i32* %maxsize, align 4, !dbg !14378
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14379
  %idxprom = zext i32 %0 to i64, !dbg !14379
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14379
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14379
  %conv = zext i8 %1 to i32, !dbg !14379
  %cmp = icmp ne i32 %conv, 2, !dbg !14381
  br i1 %cmp, label %if.then, label %if.end, !dbg !14382

if.then:                                          ; preds = %entry
  br label %return, !dbg !14383

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %maxsize, align 4, !dbg !14384
  %cmp2 = icmp slt i32 %2, 64, !dbg !14386
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !14387

if.then4:                                         ; preds = %if.end
  store i32 64, i32* %maxsize, align 4, !dbg !14388
  br label %if.end5, !dbg !14389

if.end5:                                          ; preds = %if.then4, %if.end
  %3 = load i32, i32* %mode.addr, align 4, !dbg !14390
  %idxprom6 = zext i32 %3 to i64, !dbg !14390
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom6, !dbg !14390
  %4 = load i8, i8* %arrayidx7, align 1, !dbg !14390
  %conv8 = zext i8 %4 to i32, !dbg !14390
  %cmp9 = icmp ne i32 %conv8, 2, !dbg !14392
  br i1 %cmp9, label %if.then22, label %lor.lhs.false, !dbg !14393

lor.lhs.false:                                    ; preds = %if.end5
  %5 = load i32, i32* %mode.addr, align 4, !dbg !14394
  %6 = load i32, i32* @word_mode, align 4, !dbg !14395
  %cmp11 = icmp ult i32 %5, %6, !dbg !14396
  br i1 %cmp11, label %if.then22, label %lor.lhs.false13, !dbg !14397

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %7 = load i32, i32* %mode.addr, align 4, !dbg !14398
  %idxprom14 = zext i32 %7 to i64, !dbg !14398
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !14398
  %8 = load i8, i8* %arrayidx15, align 1, !dbg !14398
  %conv16 = zext i8 %8 to i16, !dbg !14398
  %conv17 = zext i16 %conv16 to i32, !dbg !14398
  %mul = mul nsw i32 %conv17, 8, !dbg !14398
  %conv18 = trunc i32 %mul to i16, !dbg !14398
  %conv19 = zext i16 %conv18 to i32, !dbg !14398
  %9 = load i32, i32* %maxsize, align 4, !dbg !14399
  %cmp20 = icmp sgt i32 %conv19, %9, !dbg !14400
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !14401

if.then22:                                        ; preds = %lor.lhs.false13, %lor.lhs.false, %if.end5
  br label %return, !dbg !14402

if.end23:                                         ; preds = %lor.lhs.false13
  %10 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14403
  %11 = load i8*, i8** %opname.addr, align 8, !dbg !14404
  %12 = load i8, i8* %suffix.addr, align 1, !dbg !14405
  %conv24 = sext i8 %12 to i32, !dbg !14405
  %13 = load i32, i32* %mode.addr, align 4, !dbg !14406
  call void @gen_libfunc(%struct.optab_d* %10, i8* %11, i32 %conv24, i32 %13), !dbg !14407
  br label %return, !dbg !14408

return:                                           ; preds = %if.end23, %if.then22, %if.then
  ret void, !dbg !14408
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_unsigned_fixed_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14409 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14410, metadata !DIExpression()), !dbg !14411
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14412, metadata !DIExpression()), !dbg !14413
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14414, metadata !DIExpression()), !dbg !14415
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14416, metadata !DIExpression()), !dbg !14417
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14418
  %idxprom = zext i32 %0 to i64, !dbg !14418
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14418
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14418
  %conv = zext i8 %1 to i32, !dbg !14418
  %cmp = icmp eq i32 %conv, 2, !dbg !14418
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14418

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14418
  %idxprom2 = zext i32 %2 to i64, !dbg !14418
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14418
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14418
  %conv4 = zext i8 %3 to i32, !dbg !14418
  %cmp5 = icmp eq i32 %conv4, 3, !dbg !14418
  br i1 %cmp5, label %if.then, label %lor.lhs.false7, !dbg !14418

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !14418
  %idxprom8 = zext i32 %4 to i64, !dbg !14418
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !14418
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !14418
  %conv10 = zext i8 %5 to i32, !dbg !14418
  %cmp11 = icmp eq i32 %conv10, 10, !dbg !14418
  br i1 %cmp11, label %if.then, label %lor.lhs.false13, !dbg !14418

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !14418
  %idxprom14 = zext i32 %6 to i64, !dbg !14418
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !14418
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !14418
  %conv16 = zext i8 %7 to i32, !dbg !14418
  %cmp17 = icmp eq i32 %conv16, 12, !dbg !14418
  br i1 %cmp17, label %if.then, label %if.end, !dbg !14420

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %8 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14421
  %9 = load i8*, i8** %name.addr, align 8, !dbg !14422
  %10 = load i8, i8* %suffix.addr, align 1, !dbg !14423
  %11 = load i32, i32* %mode.addr, align 4, !dbg !14424
  call void @gen_int_libfunc(%struct.optab_d* %8, i8* %9, i8 signext %10, i32 %11), !dbg !14425
  br label %if.end, !dbg !14425

if.end:                                           ; preds = %if.then, %lor.lhs.false13
  %12 = load i32, i32* %mode.addr, align 4, !dbg !14426
  %idxprom19 = zext i32 %12 to i64, !dbg !14426
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !14426
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !14426
  %conv21 = zext i8 %13 to i32, !dbg !14426
  %cmp22 = icmp eq i32 %conv21, 5, !dbg !14426
  br i1 %cmp22, label %if.then42, label %lor.lhs.false24, !dbg !14426

lor.lhs.false24:                                  ; preds = %if.end
  %14 = load i32, i32* %mode.addr, align 4, !dbg !14426
  %idxprom25 = zext i32 %14 to i64, !dbg !14426
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !14426
  %15 = load i8, i8* %arrayidx26, align 1, !dbg !14426
  %conv27 = zext i8 %15 to i32, !dbg !14426
  %cmp28 = icmp eq i32 %conv27, 14, !dbg !14426
  br i1 %cmp28, label %if.then42, label %lor.lhs.false30, !dbg !14426

lor.lhs.false30:                                  ; preds = %lor.lhs.false24
  %16 = load i32, i32* %mode.addr, align 4, !dbg !14426
  %idxprom31 = zext i32 %16 to i64, !dbg !14426
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom31, !dbg !14426
  %17 = load i8, i8* %arrayidx32, align 1, !dbg !14426
  %conv33 = zext i8 %17 to i32, !dbg !14426
  %cmp34 = icmp eq i32 %conv33, 7, !dbg !14426
  br i1 %cmp34, label %if.then42, label %lor.lhs.false36, !dbg !14426

lor.lhs.false36:                                  ; preds = %lor.lhs.false30
  %18 = load i32, i32* %mode.addr, align 4, !dbg !14426
  %idxprom37 = zext i32 %18 to i64, !dbg !14426
  %arrayidx38 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom37, !dbg !14426
  %19 = load i8, i8* %arrayidx38, align 1, !dbg !14426
  %conv39 = zext i8 %19 to i32, !dbg !14426
  %cmp40 = icmp eq i32 %conv39, 16, !dbg !14426
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !14428

if.then42:                                        ; preds = %lor.lhs.false36, %lor.lhs.false30, %lor.lhs.false24, %if.end
  %20 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14429
  %21 = load i8*, i8** %name.addr, align 8, !dbg !14430
  %22 = load i8, i8* %suffix.addr, align 1, !dbg !14431
  %23 = load i32, i32* %mode.addr, align 4, !dbg !14432
  call void @gen_unsigned_fixed_libfunc(%struct.optab_d* %20, i8* %21, i8 signext %22, i32 %23), !dbg !14433
  br label %if.end43, !dbg !14433

if.end43:                                         ; preds = %if.then42, %lor.lhs.false36
  ret void, !dbg !14434
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_fp_libfunc(%struct.optab_d* %optable, i8* %opname, i8 signext %suffix, i32 %mode) #0 !dbg !14435 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %dec_opname = alloca i8*, align 8
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14436, metadata !DIExpression()), !dbg !14437
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14438, metadata !DIExpression()), !dbg !14439
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14440, metadata !DIExpression()), !dbg !14441
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14442, metadata !DIExpression()), !dbg !14443
  call void @llvm.dbg.declare(metadata i8** %dec_opname, metadata !14444, metadata !DIExpression()), !dbg !14445
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14446
  %idxprom = zext i32 %0 to i64, !dbg !14446
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14446
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14446
  %conv = zext i8 %1 to i32, !dbg !14446
  %cmp = icmp eq i32 %conv, 8, !dbg !14448
  br i1 %cmp, label %if.then, label %if.end, !dbg !14449

if.then:                                          ; preds = %entry
  %2 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14450
  %3 = load i8*, i8** %opname.addr, align 8, !dbg !14451
  %4 = load i8, i8* %suffix.addr, align 1, !dbg !14452
  %conv2 = sext i8 %4 to i32, !dbg !14452
  %5 = load i32, i32* %mode.addr, align 4, !dbg !14453
  call void @gen_libfunc(%struct.optab_d* %2, i8* %3, i32 %conv2, i32 %5), !dbg !14454
  br label %if.end, !dbg !14454

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %mode.addr, align 4, !dbg !14455
  %idxprom3 = zext i32 %6 to i64, !dbg !14455
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !14455
  %7 = load i8, i8* %arrayidx4, align 1, !dbg !14455
  %conv5 = zext i8 %7 to i32, !dbg !14455
  %cmp6 = icmp eq i32 %conv5, 9, !dbg !14455
  br i1 %cmp6, label %if.then8, label %if.end12, !dbg !14457

if.then8:                                         ; preds = %if.end
  %8 = load i8*, i8** %opname.addr, align 8, !dbg !14458
  %call = call i64 @strlen(i8* %8), !dbg !14458
  %add = add i64 5, %call, !dbg !14458
  %mul = mul i64 1, %add, !dbg !14458
  %9 = alloca i8, i64 %mul, align 16, !dbg !14458
  store i8* %9, i8** %dec_opname, align 8, !dbg !14460
  %10 = load i8*, i8** %dec_opname, align 8, !dbg !14461
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i64 0, i64 0), i64 4, i1 false), !dbg !14462
  %11 = load i8*, i8** %dec_opname, align 8, !dbg !14463
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 5, !dbg !14464
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr, i64 -1, !dbg !14465
  %12 = load i8*, i8** %opname.addr, align 8, !dbg !14466
  %call10 = call i8* @strcpy(i8* %add.ptr9, i8* %12), !dbg !14467
  %13 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14468
  %14 = load i8*, i8** %dec_opname, align 8, !dbg !14469
  %15 = load i8, i8* %suffix.addr, align 1, !dbg !14470
  %conv11 = sext i8 %15 to i32, !dbg !14470
  %16 = load i32, i32* %mode.addr, align 4, !dbg !14471
  call void @gen_libfunc(%struct.optab_d* %13, i8* %14, i32 %conv11, i32 %16), !dbg !14472
  br label %if.end12, !dbg !14473

if.end12:                                         ; preds = %if.then8, %if.end
  ret void, !dbg !14474
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_fixed_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14475 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14476, metadata !DIExpression()), !dbg !14477
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14478, metadata !DIExpression()), !dbg !14479
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14480, metadata !DIExpression()), !dbg !14481
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14482, metadata !DIExpression()), !dbg !14483
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14484
  %idxprom = zext i32 %0 to i64, !dbg !14484
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14484
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14484
  %conv = zext i8 %1 to i32, !dbg !14484
  %cmp = icmp eq i32 %conv, 2, !dbg !14484
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14484

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14484
  %idxprom2 = zext i32 %2 to i64, !dbg !14484
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14484
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14484
  %conv4 = zext i8 %3 to i32, !dbg !14484
  %cmp5 = icmp eq i32 %conv4, 3, !dbg !14484
  br i1 %cmp5, label %if.then, label %lor.lhs.false7, !dbg !14484

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !14484
  %idxprom8 = zext i32 %4 to i64, !dbg !14484
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !14484
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !14484
  %conv10 = zext i8 %5 to i32, !dbg !14484
  %cmp11 = icmp eq i32 %conv10, 10, !dbg !14484
  br i1 %cmp11, label %if.then, label %lor.lhs.false13, !dbg !14484

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !14484
  %idxprom14 = zext i32 %6 to i64, !dbg !14484
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !14484
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !14484
  %conv16 = zext i8 %7 to i32, !dbg !14484
  %cmp17 = icmp eq i32 %conv16, 12, !dbg !14484
  br i1 %cmp17, label %if.then, label %if.end, !dbg !14486

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %8 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14487
  %9 = load i8*, i8** %name.addr, align 8, !dbg !14488
  %10 = load i8, i8* %suffix.addr, align 1, !dbg !14489
  %11 = load i32, i32* %mode.addr, align 4, !dbg !14490
  call void @gen_int_libfunc(%struct.optab_d* %8, i8* %9, i8 signext %10, i32 %11), !dbg !14491
  br label %if.end, !dbg !14491

if.end:                                           ; preds = %if.then, %lor.lhs.false13
  %12 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom19 = zext i32 %12 to i64, !dbg !14492
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !14492
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !14492
  %conv21 = zext i8 %13 to i32, !dbg !14492
  %cmp22 = icmp eq i32 %conv21, 4, !dbg !14492
  br i1 %cmp22, label %if.then66, label %lor.lhs.false24, !dbg !14492

lor.lhs.false24:                                  ; preds = %if.end
  %14 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom25 = zext i32 %14 to i64, !dbg !14492
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !14492
  %15 = load i8, i8* %arrayidx26, align 1, !dbg !14492
  %conv27 = zext i8 %15 to i32, !dbg !14492
  %cmp28 = icmp eq i32 %conv27, 13, !dbg !14492
  br i1 %cmp28, label %if.then66, label %lor.lhs.false30, !dbg !14492

lor.lhs.false30:                                  ; preds = %lor.lhs.false24
  %16 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom31 = zext i32 %16 to i64, !dbg !14492
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom31, !dbg !14492
  %17 = load i8, i8* %arrayidx32, align 1, !dbg !14492
  %conv33 = zext i8 %17 to i32, !dbg !14492
  %cmp34 = icmp eq i32 %conv33, 6, !dbg !14492
  br i1 %cmp34, label %if.then66, label %lor.lhs.false36, !dbg !14492

lor.lhs.false36:                                  ; preds = %lor.lhs.false30
  %18 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom37 = zext i32 %18 to i64, !dbg !14492
  %arrayidx38 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom37, !dbg !14492
  %19 = load i8, i8* %arrayidx38, align 1, !dbg !14492
  %conv39 = zext i8 %19 to i32, !dbg !14492
  %cmp40 = icmp eq i32 %conv39, 15, !dbg !14492
  br i1 %cmp40, label %if.then66, label %lor.lhs.false42, !dbg !14492

lor.lhs.false42:                                  ; preds = %lor.lhs.false36
  %20 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom43 = zext i32 %20 to i64, !dbg !14492
  %arrayidx44 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom43, !dbg !14492
  %21 = load i8, i8* %arrayidx44, align 1, !dbg !14492
  %conv45 = zext i8 %21 to i32, !dbg !14492
  %cmp46 = icmp eq i32 %conv45, 5, !dbg !14492
  br i1 %cmp46, label %if.then66, label %lor.lhs.false48, !dbg !14492

lor.lhs.false48:                                  ; preds = %lor.lhs.false42
  %22 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom49 = zext i32 %22 to i64, !dbg !14492
  %arrayidx50 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom49, !dbg !14492
  %23 = load i8, i8* %arrayidx50, align 1, !dbg !14492
  %conv51 = zext i8 %23 to i32, !dbg !14492
  %cmp52 = icmp eq i32 %conv51, 14, !dbg !14492
  br i1 %cmp52, label %if.then66, label %lor.lhs.false54, !dbg !14492

lor.lhs.false54:                                  ; preds = %lor.lhs.false48
  %24 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom55 = zext i32 %24 to i64, !dbg !14492
  %arrayidx56 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom55, !dbg !14492
  %25 = load i8, i8* %arrayidx56, align 1, !dbg !14492
  %conv57 = zext i8 %25 to i32, !dbg !14492
  %cmp58 = icmp eq i32 %conv57, 7, !dbg !14492
  br i1 %cmp58, label %if.then66, label %lor.lhs.false60, !dbg !14492

lor.lhs.false60:                                  ; preds = %lor.lhs.false54
  %26 = load i32, i32* %mode.addr, align 4, !dbg !14492
  %idxprom61 = zext i32 %26 to i64, !dbg !14492
  %arrayidx62 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom61, !dbg !14492
  %27 = load i8, i8* %arrayidx62, align 1, !dbg !14492
  %conv63 = zext i8 %27 to i32, !dbg !14492
  %cmp64 = icmp eq i32 %conv63, 16, !dbg !14492
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !14494

if.then66:                                        ; preds = %lor.lhs.false60, %lor.lhs.false54, %lor.lhs.false48, %lor.lhs.false42, %lor.lhs.false36, %lor.lhs.false30, %lor.lhs.false24, %if.end
  %28 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14495
  %29 = load i8*, i8** %name.addr, align 8, !dbg !14496
  %30 = load i8, i8* %suffix.addr, align 1, !dbg !14497
  %31 = load i32, i32* %mode.addr, align 4, !dbg !14498
  call void @gen_fixed_libfunc(%struct.optab_d* %28, i8* %29, i8 signext %30, i32 %31), !dbg !14499
  br label %if.end67, !dbg !14499

if.end67:                                         ; preds = %if.then66, %lor.lhs.false60
  ret void, !dbg !14500
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_signed_fixed_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14501 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14502, metadata !DIExpression()), !dbg !14503
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14504, metadata !DIExpression()), !dbg !14505
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14506, metadata !DIExpression()), !dbg !14507
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14508, metadata !DIExpression()), !dbg !14509
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14510
  %idxprom = zext i32 %0 to i64, !dbg !14510
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14510
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14510
  %conv = zext i8 %1 to i32, !dbg !14510
  %cmp = icmp eq i32 %conv, 2, !dbg !14510
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14510

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14510
  %idxprom2 = zext i32 %2 to i64, !dbg !14510
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14510
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14510
  %conv4 = zext i8 %3 to i32, !dbg !14510
  %cmp5 = icmp eq i32 %conv4, 3, !dbg !14510
  br i1 %cmp5, label %if.then, label %lor.lhs.false7, !dbg !14510

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !14510
  %idxprom8 = zext i32 %4 to i64, !dbg !14510
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !14510
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !14510
  %conv10 = zext i8 %5 to i32, !dbg !14510
  %cmp11 = icmp eq i32 %conv10, 10, !dbg !14510
  br i1 %cmp11, label %if.then, label %lor.lhs.false13, !dbg !14510

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !14510
  %idxprom14 = zext i32 %6 to i64, !dbg !14510
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !14510
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !14510
  %conv16 = zext i8 %7 to i32, !dbg !14510
  %cmp17 = icmp eq i32 %conv16, 12, !dbg !14510
  br i1 %cmp17, label %if.then, label %if.end, !dbg !14512

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %8 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14513
  %9 = load i8*, i8** %name.addr, align 8, !dbg !14514
  %10 = load i8, i8* %suffix.addr, align 1, !dbg !14515
  %11 = load i32, i32* %mode.addr, align 4, !dbg !14516
  call void @gen_int_libfunc(%struct.optab_d* %8, i8* %9, i8 signext %10, i32 %11), !dbg !14517
  br label %if.end, !dbg !14517

if.end:                                           ; preds = %if.then, %lor.lhs.false13
  %12 = load i32, i32* %mode.addr, align 4, !dbg !14518
  %idxprom19 = zext i32 %12 to i64, !dbg !14518
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !14518
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !14518
  %conv21 = zext i8 %13 to i32, !dbg !14518
  %cmp22 = icmp eq i32 %conv21, 4, !dbg !14518
  br i1 %cmp22, label %if.then42, label %lor.lhs.false24, !dbg !14518

lor.lhs.false24:                                  ; preds = %if.end
  %14 = load i32, i32* %mode.addr, align 4, !dbg !14518
  %idxprom25 = zext i32 %14 to i64, !dbg !14518
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !14518
  %15 = load i8, i8* %arrayidx26, align 1, !dbg !14518
  %conv27 = zext i8 %15 to i32, !dbg !14518
  %cmp28 = icmp eq i32 %conv27, 13, !dbg !14518
  br i1 %cmp28, label %if.then42, label %lor.lhs.false30, !dbg !14518

lor.lhs.false30:                                  ; preds = %lor.lhs.false24
  %16 = load i32, i32* %mode.addr, align 4, !dbg !14518
  %idxprom31 = zext i32 %16 to i64, !dbg !14518
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom31, !dbg !14518
  %17 = load i8, i8* %arrayidx32, align 1, !dbg !14518
  %conv33 = zext i8 %17 to i32, !dbg !14518
  %cmp34 = icmp eq i32 %conv33, 6, !dbg !14518
  br i1 %cmp34, label %if.then42, label %lor.lhs.false36, !dbg !14518

lor.lhs.false36:                                  ; preds = %lor.lhs.false30
  %18 = load i32, i32* %mode.addr, align 4, !dbg !14518
  %idxprom37 = zext i32 %18 to i64, !dbg !14518
  %arrayidx38 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom37, !dbg !14518
  %19 = load i8, i8* %arrayidx38, align 1, !dbg !14518
  %conv39 = zext i8 %19 to i32, !dbg !14518
  %cmp40 = icmp eq i32 %conv39, 15, !dbg !14518
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !14520

if.then42:                                        ; preds = %lor.lhs.false36, %lor.lhs.false30, %lor.lhs.false24, %if.end
  %20 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14521
  %21 = load i8*, i8** %name.addr, align 8, !dbg !14522
  %22 = load i8, i8* %suffix.addr, align 1, !dbg !14523
  %23 = load i32, i32* %mode.addr, align 4, !dbg !14524
  call void @gen_signed_fixed_libfunc(%struct.optab_d* %20, i8* %21, i8 signext %22, i32 %23), !dbg !14525
  br label %if.end43, !dbg !14525

if.end43:                                         ; preds = %if.then42, %lor.lhs.false36
  ret void, !dbg !14526
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_fp_libfunc(%struct.optab_d* %optable, i8* %name, i8 signext %suffix, i32 %mode) #0 !dbg !14527 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %name.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !14528, metadata !DIExpression()), !dbg !14529
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14530, metadata !DIExpression()), !dbg !14531
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !14532, metadata !DIExpression()), !dbg !14533
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !14534, metadata !DIExpression()), !dbg !14535
  %0 = load i32, i32* %mode.addr, align 4, !dbg !14536
  %idxprom = zext i32 %0 to i64, !dbg !14536
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14536
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14536
  %conv = zext i8 %1 to i32, !dbg !14536
  %cmp = icmp eq i32 %conv, 9, !dbg !14536
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14538

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !14539
  %idxprom2 = zext i32 %2 to i64, !dbg !14539
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14539
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14539
  %conv4 = zext i8 %3 to i32, !dbg !14539
  %cmp5 = icmp eq i32 %conv4, 8, !dbg !14540
  br i1 %cmp5, label %if.then, label %if.end, !dbg !14541

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14542
  %5 = load i8*, i8** %name.addr, align 8, !dbg !14543
  %6 = load i8, i8* %suffix.addr, align 1, !dbg !14544
  %7 = load i32, i32* %mode.addr, align 4, !dbg !14545
  call void @gen_fp_libfunc(%struct.optab_d* %4, i8* %5, i8 signext %6, i32 %7), !dbg !14546
  br label %if.end, !dbg !14546

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %8 = load i32, i32* %mode.addr, align 4, !dbg !14547
  %idxprom7 = zext i32 %8 to i64, !dbg !14547
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14547
  %9 = load i8, i8* %arrayidx8, align 1, !dbg !14547
  %conv9 = zext i8 %9 to i32, !dbg !14547
  %cmp10 = icmp eq i32 %conv9, 2, !dbg !14547
  br i1 %cmp10, label %if.then30, label %lor.lhs.false12, !dbg !14547

lor.lhs.false12:                                  ; preds = %if.end
  %10 = load i32, i32* %mode.addr, align 4, !dbg !14547
  %idxprom13 = zext i32 %10 to i64, !dbg !14547
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom13, !dbg !14547
  %11 = load i8, i8* %arrayidx14, align 1, !dbg !14547
  %conv15 = zext i8 %11 to i32, !dbg !14547
  %cmp16 = icmp eq i32 %conv15, 3, !dbg !14547
  br i1 %cmp16, label %if.then30, label %lor.lhs.false18, !dbg !14547

lor.lhs.false18:                                  ; preds = %lor.lhs.false12
  %12 = load i32, i32* %mode.addr, align 4, !dbg !14547
  %idxprom19 = zext i32 %12 to i64, !dbg !14547
  %arrayidx20 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom19, !dbg !14547
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !14547
  %conv21 = zext i8 %13 to i32, !dbg !14547
  %cmp22 = icmp eq i32 %conv21, 10, !dbg !14547
  br i1 %cmp22, label %if.then30, label %lor.lhs.false24, !dbg !14547

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %14 = load i32, i32* %mode.addr, align 4, !dbg !14547
  %idxprom25 = zext i32 %14 to i64, !dbg !14547
  %arrayidx26 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom25, !dbg !14547
  %15 = load i8, i8* %arrayidx26, align 1, !dbg !14547
  %conv27 = zext i8 %15 to i32, !dbg !14547
  %cmp28 = icmp eq i32 %conv27, 12, !dbg !14547
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !14549

if.then30:                                        ; preds = %lor.lhs.false24, %lor.lhs.false18, %lor.lhs.false12, %if.end
  %16 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !14550
  %17 = load i8*, i8** %name.addr, align 8, !dbg !14551
  %18 = load i8, i8* %suffix.addr, align 1, !dbg !14552
  %19 = load i32, i32* %mode.addr, align 4, !dbg !14553
  call void @gen_int_libfunc(%struct.optab_d* %16, i8* %17, i8 signext %18, i32 %19), !dbg !14554
  br label %if.end31, !dbg !14554

if.end31:                                         ; preds = %if.then30, %lor.lhs.false24
  ret void, !dbg !14555
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_to_fp_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14556 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14559, metadata !DIExpression()), !dbg !14560
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14561, metadata !DIExpression()), !dbg !14562
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14563, metadata !DIExpression()), !dbg !14564
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14565, metadata !DIExpression()), !dbg !14566
  %0 = load i32, i32* %fmode.addr, align 4, !dbg !14567
  %idxprom = zext i32 %0 to i64, !dbg !14567
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14567
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14567
  %conv = zext i8 %1 to i32, !dbg !14567
  %cmp = icmp ne i32 %conv, 2, !dbg !14569
  br i1 %cmp, label %if.then, label %if.end, !dbg !14570

if.then:                                          ; preds = %entry
  br label %return, !dbg !14571

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14572
  %idxprom2 = zext i32 %2 to i64, !dbg !14572
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14572
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14572
  %conv4 = zext i8 %3 to i32, !dbg !14572
  %cmp5 = icmp ne i32 %conv4, 8, !dbg !14574
  br i1 %cmp5, label %land.lhs.true, label %if.end13, !dbg !14575

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !14576
  %idxprom7 = zext i32 %4 to i64, !dbg !14576
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14576
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !14576
  %conv9 = zext i8 %5 to i32, !dbg !14576
  %cmp10 = icmp eq i32 %conv9, 9, !dbg !14576
  br i1 %cmp10, label %if.end13, label %if.then12, !dbg !14577

if.then12:                                        ; preds = %land.lhs.true
  br label %return, !dbg !14578

if.end13:                                         ; preds = %land.lhs.true, %if.end
  %6 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14579
  %7 = load i8*, i8** %opname.addr, align 8, !dbg !14580
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14581
  %9 = load i32, i32* %fmode.addr, align 4, !dbg !14582
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %6, i8* %7, i32 %8, i32 %9), !dbg !14583
  br label %return, !dbg !14584

return:                                           ; preds = %if.end13, %if.then12, %if.then
  ret void, !dbg !14584
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_ufloat_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14585 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14586, metadata !DIExpression()), !dbg !14587
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14588, metadata !DIExpression()), !dbg !14589
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14590, metadata !DIExpression()), !dbg !14591
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14592, metadata !DIExpression()), !dbg !14593
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14594
  %idxprom = zext i32 %0 to i64, !dbg !14594
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14594
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14594
  %conv = zext i8 %1 to i32, !dbg !14594
  %cmp = icmp eq i32 %conv, 9, !dbg !14594
  br i1 %cmp, label %if.then, label %if.else, !dbg !14596

if.then:                                          ; preds = %entry
  %2 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14597
  %3 = load i32, i32* %tmode.addr, align 4, !dbg !14598
  %4 = load i32, i32* %fmode.addr, align 4, !dbg !14599
  call void @gen_int_to_fp_conv_libfunc(%struct.convert_optab_d* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.84, i64 0, i64 0), i32 %3, i32 %4), !dbg !14600
  br label %if.end, !dbg !14600

if.else:                                          ; preds = %entry
  %5 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14601
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !14602
  %7 = load i32, i32* %fmode.addr, align 4, !dbg !14603
  call void @gen_int_to_fp_conv_libfunc(%struct.convert_optab_d* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.85, i64 0, i64 0), i32 %6, i32 %7), !dbg !14604
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !14605
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_fp_to_int_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14606 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14607, metadata !DIExpression()), !dbg !14608
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14609, metadata !DIExpression()), !dbg !14610
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14611, metadata !DIExpression()), !dbg !14612
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14613, metadata !DIExpression()), !dbg !14614
  %0 = load i32, i32* %fmode.addr, align 4, !dbg !14615
  %idxprom = zext i32 %0 to i64, !dbg !14615
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14615
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14615
  %conv = zext i8 %1 to i32, !dbg !14615
  %cmp = icmp ne i32 %conv, 8, !dbg !14617
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !14618

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %fmode.addr, align 4, !dbg !14619
  %idxprom2 = zext i32 %2 to i64, !dbg !14619
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14619
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14619
  %conv4 = zext i8 %3 to i32, !dbg !14619
  %cmp5 = icmp eq i32 %conv4, 9, !dbg !14619
  br i1 %cmp5, label %if.end, label %if.then, !dbg !14620

if.then:                                          ; preds = %land.lhs.true
  br label %return, !dbg !14621

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !14622
  %idxprom7 = zext i32 %4 to i64, !dbg !14622
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14622
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !14622
  %conv9 = zext i8 %5 to i32, !dbg !14622
  %cmp10 = icmp ne i32 %conv9, 2, !dbg !14624
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !14625

if.then12:                                        ; preds = %if.end
  br label %return, !dbg !14626

if.end13:                                         ; preds = %if.end
  %6 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14627
  %7 = load i8*, i8** %opname.addr, align 8, !dbg !14628
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14629
  %9 = load i32, i32* %fmode.addr, align 4, !dbg !14630
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %6, i8* %7, i32 %8, i32 %9), !dbg !14631
  br label %return, !dbg !14632

return:                                           ; preds = %if.end13, %if.then12, %if.then
  ret void, !dbg !14632
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_int_to_fp_nondecimal_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14633 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14634, metadata !DIExpression()), !dbg !14635
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14636, metadata !DIExpression()), !dbg !14637
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14638, metadata !DIExpression()), !dbg !14639
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14640, metadata !DIExpression()), !dbg !14641
  %0 = load i32, i32* %fmode.addr, align 4, !dbg !14642
  %idxprom = zext i32 %0 to i64, !dbg !14642
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14642
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14642
  %conv = zext i8 %1 to i32, !dbg !14642
  %cmp = icmp ne i32 %conv, 2, !dbg !14644
  br i1 %cmp, label %if.then, label %if.end, !dbg !14645

if.then:                                          ; preds = %entry
  br label %return, !dbg !14646

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14647
  %idxprom2 = zext i32 %2 to i64, !dbg !14647
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14647
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14647
  %conv4 = zext i8 %3 to i32, !dbg !14647
  %cmp5 = icmp ne i32 %conv4, 8, !dbg !14649
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !14650

if.then7:                                         ; preds = %if.end
  br label %return, !dbg !14651

if.end8:                                          ; preds = %if.end
  %4 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14652
  %5 = load i8*, i8** %opname.addr, align 8, !dbg !14653
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !14654
  %7 = load i32, i32* %fmode.addr, align 4, !dbg !14655
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %4, i8* %5, i32 %6, i32 %7), !dbg !14656
  br label %return, !dbg !14657

return:                                           ; preds = %if.end8, %if.then7, %if.then
  ret void, !dbg !14657
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_extend_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14658 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14659, metadata !DIExpression()), !dbg !14660
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14661, metadata !DIExpression()), !dbg !14662
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14663, metadata !DIExpression()), !dbg !14664
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14665, metadata !DIExpression()), !dbg !14666
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14667
  %idxprom = zext i32 %0 to i64, !dbg !14667
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14667
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14667
  %conv = zext i8 %1 to i32, !dbg !14667
  %cmp = icmp ne i32 %conv, 8, !dbg !14669
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !14670

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14671
  %idxprom2 = zext i32 %2 to i64, !dbg !14671
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14671
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14671
  %conv4 = zext i8 %3 to i32, !dbg !14671
  %cmp5 = icmp eq i32 %conv4, 9, !dbg !14671
  br i1 %cmp5, label %if.end, label %if.then, !dbg !14672

if.then:                                          ; preds = %land.lhs.true
  br label %if.end82, !dbg !14673

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %fmode.addr, align 4, !dbg !14674
  %idxprom7 = zext i32 %4 to i64, !dbg !14674
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14674
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !14674
  %conv9 = zext i8 %5 to i32, !dbg !14674
  %cmp10 = icmp ne i32 %conv9, 8, !dbg !14676
  br i1 %cmp10, label %land.lhs.true12, label %if.end19, !dbg !14677

land.lhs.true12:                                  ; preds = %if.end
  %6 = load i32, i32* %fmode.addr, align 4, !dbg !14678
  %idxprom13 = zext i32 %6 to i64, !dbg !14678
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom13, !dbg !14678
  %7 = load i8, i8* %arrayidx14, align 1, !dbg !14678
  %conv15 = zext i8 %7 to i32, !dbg !14678
  %cmp16 = icmp eq i32 %conv15, 9, !dbg !14678
  br i1 %cmp16, label %if.end19, label %if.then18, !dbg !14679

if.then18:                                        ; preds = %land.lhs.true12
  br label %if.end82, !dbg !14680

if.end19:                                         ; preds = %land.lhs.true12, %if.end
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14681
  %9 = load i32, i32* %fmode.addr, align 4, !dbg !14683
  %cmp20 = icmp eq i32 %8, %9, !dbg !14684
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !14685

if.then22:                                        ; preds = %if.end19
  br label %if.end82, !dbg !14686

if.end23:                                         ; preds = %if.end19
  %10 = load i32, i32* %tmode.addr, align 4, !dbg !14687
  %idxprom24 = zext i32 %10 to i64, !dbg !14687
  %arrayidx25 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom24, !dbg !14687
  %11 = load i8, i8* %arrayidx25, align 1, !dbg !14687
  %conv26 = zext i8 %11 to i32, !dbg !14687
  %cmp27 = icmp eq i32 %conv26, 8, !dbg !14689
  br i1 %cmp27, label %land.lhs.true29, label %lor.lhs.false, !dbg !14690

land.lhs.true29:                                  ; preds = %if.end23
  %12 = load i32, i32* %fmode.addr, align 4, !dbg !14691
  %idxprom30 = zext i32 %12 to i64, !dbg !14691
  %arrayidx31 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom30, !dbg !14691
  %13 = load i8, i8* %arrayidx31, align 1, !dbg !14691
  %conv32 = zext i8 %13 to i32, !dbg !14691
  %cmp33 = icmp eq i32 %conv32, 9, !dbg !14691
  br i1 %cmp33, label %if.then46, label %lor.lhs.false, !dbg !14692

lor.lhs.false:                                    ; preds = %land.lhs.true29, %if.end23
  %14 = load i32, i32* %fmode.addr, align 4, !dbg !14693
  %idxprom35 = zext i32 %14 to i64, !dbg !14693
  %arrayidx36 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom35, !dbg !14693
  %15 = load i8, i8* %arrayidx36, align 1, !dbg !14693
  %conv37 = zext i8 %15 to i32, !dbg !14693
  %cmp38 = icmp eq i32 %conv37, 8, !dbg !14694
  br i1 %cmp38, label %land.lhs.true40, label %if.end47, !dbg !14695

land.lhs.true40:                                  ; preds = %lor.lhs.false
  %16 = load i32, i32* %tmode.addr, align 4, !dbg !14696
  %idxprom41 = zext i32 %16 to i64, !dbg !14696
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom41, !dbg !14696
  %17 = load i8, i8* %arrayidx42, align 1, !dbg !14696
  %conv43 = zext i8 %17 to i32, !dbg !14696
  %cmp44 = icmp eq i32 %conv43, 9, !dbg !14696
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !14697

if.then46:                                        ; preds = %land.lhs.true40, %land.lhs.true29
  %18 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14698
  %19 = load i8*, i8** %opname.addr, align 8, !dbg !14699
  %20 = load i32, i32* %tmode.addr, align 4, !dbg !14700
  %21 = load i32, i32* %fmode.addr, align 4, !dbg !14701
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %18, i8* %19, i32 %20, i32 %21), !dbg !14702
  br label %if.end47, !dbg !14702

if.end47:                                         ; preds = %if.then46, %land.lhs.true40, %lor.lhs.false
  %22 = load i32, i32* %fmode.addr, align 4, !dbg !14703
  %idxprom48 = zext i32 %22 to i64, !dbg !14703
  %arrayidx49 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom48, !dbg !14703
  %23 = load i16, i16* %arrayidx49, align 2, !dbg !14703
  %conv50 = zext i16 %23 to i32, !dbg !14703
  %24 = load i32, i32* %tmode.addr, align 4, !dbg !14705
  %idxprom51 = zext i32 %24 to i64, !dbg !14705
  %arrayidx52 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom51, !dbg !14705
  %25 = load i16, i16* %arrayidx52, align 2, !dbg !14705
  %conv53 = zext i16 %25 to i32, !dbg !14705
  %cmp54 = icmp sgt i32 %conv50, %conv53, !dbg !14706
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !14707

if.then56:                                        ; preds = %if.end47
  br label %if.end82, !dbg !14708

if.end57:                                         ; preds = %if.end47
  %26 = load i32, i32* %tmode.addr, align 4, !dbg !14709
  %idxprom58 = zext i32 %26 to i64, !dbg !14709
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom58, !dbg !14709
  %27 = load i8, i8* %arrayidx59, align 1, !dbg !14709
  %conv60 = zext i8 %27 to i32, !dbg !14709
  %cmp61 = icmp eq i32 %conv60, 8, !dbg !14711
  br i1 %cmp61, label %land.lhs.true63, label %lor.lhs.false69, !dbg !14712

land.lhs.true63:                                  ; preds = %if.end57
  %28 = load i32, i32* %fmode.addr, align 4, !dbg !14713
  %idxprom64 = zext i32 %28 to i64, !dbg !14713
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom64, !dbg !14713
  %29 = load i8, i8* %arrayidx65, align 1, !dbg !14713
  %conv66 = zext i8 %29 to i32, !dbg !14713
  %cmp67 = icmp eq i32 %conv66, 8, !dbg !14714
  br i1 %cmp67, label %if.then81, label %lor.lhs.false69, !dbg !14715

lor.lhs.false69:                                  ; preds = %land.lhs.true63, %if.end57
  %30 = load i32, i32* %fmode.addr, align 4, !dbg !14716
  %idxprom70 = zext i32 %30 to i64, !dbg !14716
  %arrayidx71 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom70, !dbg !14716
  %31 = load i8, i8* %arrayidx71, align 1, !dbg !14716
  %conv72 = zext i8 %31 to i32, !dbg !14716
  %cmp73 = icmp eq i32 %conv72, 9, !dbg !14716
  br i1 %cmp73, label %land.lhs.true75, label %if.end82, !dbg !14717

land.lhs.true75:                                  ; preds = %lor.lhs.false69
  %32 = load i32, i32* %tmode.addr, align 4, !dbg !14718
  %idxprom76 = zext i32 %32 to i64, !dbg !14718
  %arrayidx77 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom76, !dbg !14718
  %33 = load i8, i8* %arrayidx77, align 1, !dbg !14718
  %conv78 = zext i8 %33 to i32, !dbg !14718
  %cmp79 = icmp eq i32 %conv78, 9, !dbg !14718
  br i1 %cmp79, label %if.then81, label %if.end82, !dbg !14719

if.then81:                                        ; preds = %land.lhs.true75, %land.lhs.true63
  %34 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14720
  %35 = load i8*, i8** %opname.addr, align 8, !dbg !14721
  %36 = load i32, i32* %tmode.addr, align 4, !dbg !14722
  %37 = load i32, i32* %fmode.addr, align 4, !dbg !14723
  call void @gen_intraclass_conv_libfunc(%struct.convert_optab_d* %34, i8* %35, i32 %36, i32 %37), !dbg !14724
  br label %if.end82, !dbg !14724

if.end82:                                         ; preds = %if.then, %if.then18, %if.then22, %if.then56, %if.then81, %land.lhs.true75, %lor.lhs.false69
  ret void, !dbg !14725
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_trunc_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14726 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14727, metadata !DIExpression()), !dbg !14728
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14729, metadata !DIExpression()), !dbg !14730
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14731, metadata !DIExpression()), !dbg !14732
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14733, metadata !DIExpression()), !dbg !14734
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14735
  %idxprom = zext i32 %0 to i64, !dbg !14735
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14735
  %1 = load i8, i8* %arrayidx, align 1, !dbg !14735
  %conv = zext i8 %1 to i32, !dbg !14735
  %cmp = icmp ne i32 %conv, 8, !dbg !14737
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !14738

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14739
  %idxprom2 = zext i32 %2 to i64, !dbg !14739
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !14739
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !14739
  %conv4 = zext i8 %3 to i32, !dbg !14739
  %cmp5 = icmp eq i32 %conv4, 9, !dbg !14739
  br i1 %cmp5, label %if.end, label %if.then, !dbg !14740

if.then:                                          ; preds = %land.lhs.true
  br label %if.end82, !dbg !14741

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %fmode.addr, align 4, !dbg !14742
  %idxprom7 = zext i32 %4 to i64, !dbg !14742
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom7, !dbg !14742
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !14742
  %conv9 = zext i8 %5 to i32, !dbg !14742
  %cmp10 = icmp ne i32 %conv9, 8, !dbg !14744
  br i1 %cmp10, label %land.lhs.true12, label %if.end19, !dbg !14745

land.lhs.true12:                                  ; preds = %if.end
  %6 = load i32, i32* %fmode.addr, align 4, !dbg !14746
  %idxprom13 = zext i32 %6 to i64, !dbg !14746
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom13, !dbg !14746
  %7 = load i8, i8* %arrayidx14, align 1, !dbg !14746
  %conv15 = zext i8 %7 to i32, !dbg !14746
  %cmp16 = icmp eq i32 %conv15, 9, !dbg !14746
  br i1 %cmp16, label %if.end19, label %if.then18, !dbg !14747

if.then18:                                        ; preds = %land.lhs.true12
  br label %if.end82, !dbg !14748

if.end19:                                         ; preds = %land.lhs.true12, %if.end
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14749
  %9 = load i32, i32* %fmode.addr, align 4, !dbg !14751
  %cmp20 = icmp eq i32 %8, %9, !dbg !14752
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !14753

if.then22:                                        ; preds = %if.end19
  br label %if.end82, !dbg !14754

if.end23:                                         ; preds = %if.end19
  %10 = load i32, i32* %tmode.addr, align 4, !dbg !14755
  %idxprom24 = zext i32 %10 to i64, !dbg !14755
  %arrayidx25 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom24, !dbg !14755
  %11 = load i8, i8* %arrayidx25, align 1, !dbg !14755
  %conv26 = zext i8 %11 to i32, !dbg !14755
  %cmp27 = icmp eq i32 %conv26, 8, !dbg !14757
  br i1 %cmp27, label %land.lhs.true29, label %lor.lhs.false, !dbg !14758

land.lhs.true29:                                  ; preds = %if.end23
  %12 = load i32, i32* %fmode.addr, align 4, !dbg !14759
  %idxprom30 = zext i32 %12 to i64, !dbg !14759
  %arrayidx31 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom30, !dbg !14759
  %13 = load i8, i8* %arrayidx31, align 1, !dbg !14759
  %conv32 = zext i8 %13 to i32, !dbg !14759
  %cmp33 = icmp eq i32 %conv32, 9, !dbg !14759
  br i1 %cmp33, label %if.then46, label %lor.lhs.false, !dbg !14760

lor.lhs.false:                                    ; preds = %land.lhs.true29, %if.end23
  %14 = load i32, i32* %fmode.addr, align 4, !dbg !14761
  %idxprom35 = zext i32 %14 to i64, !dbg !14761
  %arrayidx36 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom35, !dbg !14761
  %15 = load i8, i8* %arrayidx36, align 1, !dbg !14761
  %conv37 = zext i8 %15 to i32, !dbg !14761
  %cmp38 = icmp eq i32 %conv37, 8, !dbg !14762
  br i1 %cmp38, label %land.lhs.true40, label %if.end47, !dbg !14763

land.lhs.true40:                                  ; preds = %lor.lhs.false
  %16 = load i32, i32* %tmode.addr, align 4, !dbg !14764
  %idxprom41 = zext i32 %16 to i64, !dbg !14764
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom41, !dbg !14764
  %17 = load i8, i8* %arrayidx42, align 1, !dbg !14764
  %conv43 = zext i8 %17 to i32, !dbg !14764
  %cmp44 = icmp eq i32 %conv43, 9, !dbg !14764
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !14765

if.then46:                                        ; preds = %land.lhs.true40, %land.lhs.true29
  %18 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14766
  %19 = load i8*, i8** %opname.addr, align 8, !dbg !14767
  %20 = load i32, i32* %tmode.addr, align 4, !dbg !14768
  %21 = load i32, i32* %fmode.addr, align 4, !dbg !14769
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %18, i8* %19, i32 %20, i32 %21), !dbg !14770
  br label %if.end47, !dbg !14770

if.end47:                                         ; preds = %if.then46, %land.lhs.true40, %lor.lhs.false
  %22 = load i32, i32* %fmode.addr, align 4, !dbg !14771
  %idxprom48 = zext i32 %22 to i64, !dbg !14771
  %arrayidx49 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom48, !dbg !14771
  %23 = load i16, i16* %arrayidx49, align 2, !dbg !14771
  %conv50 = zext i16 %23 to i32, !dbg !14771
  %24 = load i32, i32* %tmode.addr, align 4, !dbg !14773
  %idxprom51 = zext i32 %24 to i64, !dbg !14773
  %arrayidx52 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom51, !dbg !14773
  %25 = load i16, i16* %arrayidx52, align 2, !dbg !14773
  %conv53 = zext i16 %25 to i32, !dbg !14773
  %cmp54 = icmp sle i32 %conv50, %conv53, !dbg !14774
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !14775

if.then56:                                        ; preds = %if.end47
  br label %if.end82, !dbg !14776

if.end57:                                         ; preds = %if.end47
  %26 = load i32, i32* %tmode.addr, align 4, !dbg !14777
  %idxprom58 = zext i32 %26 to i64, !dbg !14777
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom58, !dbg !14777
  %27 = load i8, i8* %arrayidx59, align 1, !dbg !14777
  %conv60 = zext i8 %27 to i32, !dbg !14777
  %cmp61 = icmp eq i32 %conv60, 8, !dbg !14779
  br i1 %cmp61, label %land.lhs.true63, label %lor.lhs.false69, !dbg !14780

land.lhs.true63:                                  ; preds = %if.end57
  %28 = load i32, i32* %fmode.addr, align 4, !dbg !14781
  %idxprom64 = zext i32 %28 to i64, !dbg !14781
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom64, !dbg !14781
  %29 = load i8, i8* %arrayidx65, align 1, !dbg !14781
  %conv66 = zext i8 %29 to i32, !dbg !14781
  %cmp67 = icmp eq i32 %conv66, 8, !dbg !14782
  br i1 %cmp67, label %if.then81, label %lor.lhs.false69, !dbg !14783

lor.lhs.false69:                                  ; preds = %land.lhs.true63, %if.end57
  %30 = load i32, i32* %fmode.addr, align 4, !dbg !14784
  %idxprom70 = zext i32 %30 to i64, !dbg !14784
  %arrayidx71 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom70, !dbg !14784
  %31 = load i8, i8* %arrayidx71, align 1, !dbg !14784
  %conv72 = zext i8 %31 to i32, !dbg !14784
  %cmp73 = icmp eq i32 %conv72, 9, !dbg !14784
  br i1 %cmp73, label %land.lhs.true75, label %if.end82, !dbg !14785

land.lhs.true75:                                  ; preds = %lor.lhs.false69
  %32 = load i32, i32* %tmode.addr, align 4, !dbg !14786
  %idxprom76 = zext i32 %32 to i64, !dbg !14786
  %arrayidx77 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom76, !dbg !14786
  %33 = load i8, i8* %arrayidx77, align 1, !dbg !14786
  %conv78 = zext i8 %33 to i32, !dbg !14786
  %cmp79 = icmp eq i32 %conv78, 9, !dbg !14786
  br i1 %cmp79, label %if.then81, label %if.end82, !dbg !14787

if.then81:                                        ; preds = %land.lhs.true75, %land.lhs.true63
  %34 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14788
  %35 = load i8*, i8** %opname.addr, align 8, !dbg !14789
  %36 = load i32, i32* %tmode.addr, align 4, !dbg !14790
  %37 = load i32, i32* %fmode.addr, align 4, !dbg !14791
  call void @gen_intraclass_conv_libfunc(%struct.convert_optab_d* %34, i8* %35, i32 %36, i32 %37), !dbg !14792
  br label %if.end82, !dbg !14792

if.end82:                                         ; preds = %if.then, %if.then18, %if.then22, %if.then56, %if.then81, %land.lhs.true75, %lor.lhs.false69
  ret void, !dbg !14793
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_fract_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14794 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14795, metadata !DIExpression()), !dbg !14796
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14797, metadata !DIExpression()), !dbg !14798
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14799, metadata !DIExpression()), !dbg !14800
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14801, metadata !DIExpression()), !dbg !14802
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14803
  %1 = load i32, i32* %fmode.addr, align 4, !dbg !14805
  %cmp = icmp eq i32 %0, %1, !dbg !14806
  br i1 %cmp, label %if.then, label %if.end, !dbg !14807

if.then:                                          ; preds = %entry
  br label %if.end103, !dbg !14808

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom = zext i32 %2 to i64, !dbg !14809
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14809
  %3 = load i8, i8* %arrayidx, align 1, !dbg !14809
  %conv = zext i8 %3 to i32, !dbg !14809
  %cmp1 = icmp eq i32 %conv, 4, !dbg !14809
  br i1 %cmp1, label %if.end93, label %lor.lhs.false, !dbg !14809

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom3 = zext i32 %4 to i64, !dbg !14809
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !14809
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !14809
  %conv5 = zext i8 %5 to i32, !dbg !14809
  %cmp6 = icmp eq i32 %conv5, 13, !dbg !14809
  br i1 %cmp6, label %if.end93, label %lor.lhs.false8, !dbg !14809

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom9 = zext i32 %6 to i64, !dbg !14809
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom9, !dbg !14809
  %7 = load i8, i8* %arrayidx10, align 1, !dbg !14809
  %conv11 = zext i8 %7 to i32, !dbg !14809
  %cmp12 = icmp eq i32 %conv11, 6, !dbg !14809
  br i1 %cmp12, label %if.end93, label %lor.lhs.false14, !dbg !14809

lor.lhs.false14:                                  ; preds = %lor.lhs.false8
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom15 = zext i32 %8 to i64, !dbg !14809
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom15, !dbg !14809
  %9 = load i8, i8* %arrayidx16, align 1, !dbg !14809
  %conv17 = zext i8 %9 to i32, !dbg !14809
  %cmp18 = icmp eq i32 %conv17, 15, !dbg !14809
  br i1 %cmp18, label %if.end93, label %lor.lhs.false20, !dbg !14809

lor.lhs.false20:                                  ; preds = %lor.lhs.false14
  %10 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom21 = zext i32 %10 to i64, !dbg !14809
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom21, !dbg !14809
  %11 = load i8, i8* %arrayidx22, align 1, !dbg !14809
  %conv23 = zext i8 %11 to i32, !dbg !14809
  %cmp24 = icmp eq i32 %conv23, 5, !dbg !14809
  br i1 %cmp24, label %if.end93, label %lor.lhs.false26, !dbg !14809

lor.lhs.false26:                                  ; preds = %lor.lhs.false20
  %12 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom27 = zext i32 %12 to i64, !dbg !14809
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom27, !dbg !14809
  %13 = load i8, i8* %arrayidx28, align 1, !dbg !14809
  %conv29 = zext i8 %13 to i32, !dbg !14809
  %cmp30 = icmp eq i32 %conv29, 14, !dbg !14809
  br i1 %cmp30, label %if.end93, label %lor.lhs.false32, !dbg !14809

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %14 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom33 = zext i32 %14 to i64, !dbg !14809
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !14809
  %15 = load i8, i8* %arrayidx34, align 1, !dbg !14809
  %conv35 = zext i8 %15 to i32, !dbg !14809
  %cmp36 = icmp eq i32 %conv35, 7, !dbg !14809
  br i1 %cmp36, label %if.end93, label %lor.lhs.false38, !dbg !14809

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %16 = load i32, i32* %tmode.addr, align 4, !dbg !14809
  %idxprom39 = zext i32 %16 to i64, !dbg !14809
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !14809
  %17 = load i8, i8* %arrayidx40, align 1, !dbg !14809
  %conv41 = zext i8 %17 to i32, !dbg !14809
  %cmp42 = icmp eq i32 %conv41, 16, !dbg !14809
  br i1 %cmp42, label %if.end93, label %lor.lhs.false44, !dbg !14811

lor.lhs.false44:                                  ; preds = %lor.lhs.false38
  %18 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom45 = zext i32 %18 to i64, !dbg !14812
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !14812
  %19 = load i8, i8* %arrayidx46, align 1, !dbg !14812
  %conv47 = zext i8 %19 to i32, !dbg !14812
  %cmp48 = icmp eq i32 %conv47, 4, !dbg !14812
  br i1 %cmp48, label %if.end93, label %lor.lhs.false50, !dbg !14812

lor.lhs.false50:                                  ; preds = %lor.lhs.false44
  %20 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom51 = zext i32 %20 to i64, !dbg !14812
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !14812
  %21 = load i8, i8* %arrayidx52, align 1, !dbg !14812
  %conv53 = zext i8 %21 to i32, !dbg !14812
  %cmp54 = icmp eq i32 %conv53, 13, !dbg !14812
  br i1 %cmp54, label %if.end93, label %lor.lhs.false56, !dbg !14812

lor.lhs.false56:                                  ; preds = %lor.lhs.false50
  %22 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom57 = zext i32 %22 to i64, !dbg !14812
  %arrayidx58 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom57, !dbg !14812
  %23 = load i8, i8* %arrayidx58, align 1, !dbg !14812
  %conv59 = zext i8 %23 to i32, !dbg !14812
  %cmp60 = icmp eq i32 %conv59, 6, !dbg !14812
  br i1 %cmp60, label %if.end93, label %lor.lhs.false62, !dbg !14812

lor.lhs.false62:                                  ; preds = %lor.lhs.false56
  %24 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom63 = zext i32 %24 to i64, !dbg !14812
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom63, !dbg !14812
  %25 = load i8, i8* %arrayidx64, align 1, !dbg !14812
  %conv65 = zext i8 %25 to i32, !dbg !14812
  %cmp66 = icmp eq i32 %conv65, 15, !dbg !14812
  br i1 %cmp66, label %if.end93, label %lor.lhs.false68, !dbg !14812

lor.lhs.false68:                                  ; preds = %lor.lhs.false62
  %26 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom69 = zext i32 %26 to i64, !dbg !14812
  %arrayidx70 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom69, !dbg !14812
  %27 = load i8, i8* %arrayidx70, align 1, !dbg !14812
  %conv71 = zext i8 %27 to i32, !dbg !14812
  %cmp72 = icmp eq i32 %conv71, 5, !dbg !14812
  br i1 %cmp72, label %if.end93, label %lor.lhs.false74, !dbg !14812

lor.lhs.false74:                                  ; preds = %lor.lhs.false68
  %28 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom75 = zext i32 %28 to i64, !dbg !14812
  %arrayidx76 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom75, !dbg !14812
  %29 = load i8, i8* %arrayidx76, align 1, !dbg !14812
  %conv77 = zext i8 %29 to i32, !dbg !14812
  %cmp78 = icmp eq i32 %conv77, 14, !dbg !14812
  br i1 %cmp78, label %if.end93, label %lor.lhs.false80, !dbg !14812

lor.lhs.false80:                                  ; preds = %lor.lhs.false74
  %30 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom81 = zext i32 %30 to i64, !dbg !14812
  %arrayidx82 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom81, !dbg !14812
  %31 = load i8, i8* %arrayidx82, align 1, !dbg !14812
  %conv83 = zext i8 %31 to i32, !dbg !14812
  %cmp84 = icmp eq i32 %conv83, 7, !dbg !14812
  br i1 %cmp84, label %if.end93, label %lor.lhs.false86, !dbg !14812

lor.lhs.false86:                                  ; preds = %lor.lhs.false80
  %32 = load i32, i32* %fmode.addr, align 4, !dbg !14812
  %idxprom87 = zext i32 %32 to i64, !dbg !14812
  %arrayidx88 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom87, !dbg !14812
  %33 = load i8, i8* %arrayidx88, align 1, !dbg !14812
  %conv89 = zext i8 %33 to i32, !dbg !14812
  %cmp90 = icmp eq i32 %conv89, 16, !dbg !14812
  br i1 %cmp90, label %if.end93, label %if.then92, !dbg !14813

if.then92:                                        ; preds = %lor.lhs.false86
  br label %if.end103, !dbg !14814

if.end93:                                         ; preds = %lor.lhs.false86, %lor.lhs.false80, %lor.lhs.false74, %lor.lhs.false68, %lor.lhs.false62, %lor.lhs.false56, %lor.lhs.false50, %lor.lhs.false44, %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false26, %lor.lhs.false20, %lor.lhs.false14, %lor.lhs.false8, %lor.lhs.false, %if.end
  %34 = load i32, i32* %tmode.addr, align 4, !dbg !14815
  %idxprom94 = zext i32 %34 to i64, !dbg !14815
  %arrayidx95 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom94, !dbg !14815
  %35 = load i8, i8* %arrayidx95, align 1, !dbg !14815
  %conv96 = zext i8 %35 to i32, !dbg !14815
  %36 = load i32, i32* %fmode.addr, align 4, !dbg !14817
  %idxprom97 = zext i32 %36 to i64, !dbg !14817
  %arrayidx98 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom97, !dbg !14817
  %37 = load i8, i8* %arrayidx98, align 1, !dbg !14817
  %conv99 = zext i8 %37 to i32, !dbg !14817
  %cmp100 = icmp eq i32 %conv96, %conv99, !dbg !14818
  br i1 %cmp100, label %if.then102, label %if.else, !dbg !14819

if.then102:                                       ; preds = %if.end93
  %38 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14820
  %39 = load i8*, i8** %opname.addr, align 8, !dbg !14821
  %40 = load i32, i32* %tmode.addr, align 4, !dbg !14822
  %41 = load i32, i32* %fmode.addr, align 4, !dbg !14823
  call void @gen_intraclass_conv_libfunc(%struct.convert_optab_d* %38, i8* %39, i32 %40, i32 %41), !dbg !14824
  br label %if.end103, !dbg !14824

if.else:                                          ; preds = %if.end93
  %42 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14825
  %43 = load i8*, i8** %opname.addr, align 8, !dbg !14826
  %44 = load i32, i32* %tmode.addr, align 4, !dbg !14827
  %45 = load i32, i32* %fmode.addr, align 4, !dbg !14828
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %42, i8* %43, i32 %44, i32 %45), !dbg !14829
  br label %if.end103

if.end103:                                        ; preds = %if.then, %if.then92, %if.else, %if.then102
  ret void, !dbg !14830
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_satfract_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14831 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14832, metadata !DIExpression()), !dbg !14833
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14834, metadata !DIExpression()), !dbg !14835
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14836, metadata !DIExpression()), !dbg !14837
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14838, metadata !DIExpression()), !dbg !14839
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14840
  %1 = load i32, i32* %fmode.addr, align 4, !dbg !14842
  %cmp = icmp eq i32 %0, %1, !dbg !14843
  br i1 %cmp, label %if.then, label %if.end, !dbg !14844

if.then:                                          ; preds = %entry
  br label %if.end55, !dbg !14845

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom = zext i32 %2 to i64, !dbg !14846
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14846
  %3 = load i8, i8* %arrayidx, align 1, !dbg !14846
  %conv = zext i8 %3 to i32, !dbg !14846
  %cmp1 = icmp eq i32 %conv, 4, !dbg !14846
  br i1 %cmp1, label %if.end45, label %lor.lhs.false, !dbg !14846

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom3 = zext i32 %4 to i64, !dbg !14846
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !14846
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !14846
  %conv5 = zext i8 %5 to i32, !dbg !14846
  %cmp6 = icmp eq i32 %conv5, 13, !dbg !14846
  br i1 %cmp6, label %if.end45, label %lor.lhs.false8, !dbg !14846

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom9 = zext i32 %6 to i64, !dbg !14846
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom9, !dbg !14846
  %7 = load i8, i8* %arrayidx10, align 1, !dbg !14846
  %conv11 = zext i8 %7 to i32, !dbg !14846
  %cmp12 = icmp eq i32 %conv11, 6, !dbg !14846
  br i1 %cmp12, label %if.end45, label %lor.lhs.false14, !dbg !14846

lor.lhs.false14:                                  ; preds = %lor.lhs.false8
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom15 = zext i32 %8 to i64, !dbg !14846
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom15, !dbg !14846
  %9 = load i8, i8* %arrayidx16, align 1, !dbg !14846
  %conv17 = zext i8 %9 to i32, !dbg !14846
  %cmp18 = icmp eq i32 %conv17, 15, !dbg !14846
  br i1 %cmp18, label %if.end45, label %lor.lhs.false20, !dbg !14846

lor.lhs.false20:                                  ; preds = %lor.lhs.false14
  %10 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom21 = zext i32 %10 to i64, !dbg !14846
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom21, !dbg !14846
  %11 = load i8, i8* %arrayidx22, align 1, !dbg !14846
  %conv23 = zext i8 %11 to i32, !dbg !14846
  %cmp24 = icmp eq i32 %conv23, 5, !dbg !14846
  br i1 %cmp24, label %if.end45, label %lor.lhs.false26, !dbg !14846

lor.lhs.false26:                                  ; preds = %lor.lhs.false20
  %12 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom27 = zext i32 %12 to i64, !dbg !14846
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom27, !dbg !14846
  %13 = load i8, i8* %arrayidx28, align 1, !dbg !14846
  %conv29 = zext i8 %13 to i32, !dbg !14846
  %cmp30 = icmp eq i32 %conv29, 14, !dbg !14846
  br i1 %cmp30, label %if.end45, label %lor.lhs.false32, !dbg !14846

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %14 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom33 = zext i32 %14 to i64, !dbg !14846
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !14846
  %15 = load i8, i8* %arrayidx34, align 1, !dbg !14846
  %conv35 = zext i8 %15 to i32, !dbg !14846
  %cmp36 = icmp eq i32 %conv35, 7, !dbg !14846
  br i1 %cmp36, label %if.end45, label %lor.lhs.false38, !dbg !14846

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %16 = load i32, i32* %tmode.addr, align 4, !dbg !14846
  %idxprom39 = zext i32 %16 to i64, !dbg !14846
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !14846
  %17 = load i8, i8* %arrayidx40, align 1, !dbg !14846
  %conv41 = zext i8 %17 to i32, !dbg !14846
  %cmp42 = icmp eq i32 %conv41, 16, !dbg !14846
  br i1 %cmp42, label %if.end45, label %if.then44, !dbg !14848

if.then44:                                        ; preds = %lor.lhs.false38
  br label %if.end55, !dbg !14849

if.end45:                                         ; preds = %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false26, %lor.lhs.false20, %lor.lhs.false14, %lor.lhs.false8, %lor.lhs.false, %if.end
  %18 = load i32, i32* %tmode.addr, align 4, !dbg !14850
  %idxprom46 = zext i32 %18 to i64, !dbg !14850
  %arrayidx47 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom46, !dbg !14850
  %19 = load i8, i8* %arrayidx47, align 1, !dbg !14850
  %conv48 = zext i8 %19 to i32, !dbg !14850
  %20 = load i32, i32* %fmode.addr, align 4, !dbg !14852
  %idxprom49 = zext i32 %20 to i64, !dbg !14852
  %arrayidx50 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom49, !dbg !14852
  %21 = load i8, i8* %arrayidx50, align 1, !dbg !14852
  %conv51 = zext i8 %21 to i32, !dbg !14852
  %cmp52 = icmp eq i32 %conv48, %conv51, !dbg !14853
  br i1 %cmp52, label %if.then54, label %if.else, !dbg !14854

if.then54:                                        ; preds = %if.end45
  %22 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14855
  %23 = load i8*, i8** %opname.addr, align 8, !dbg !14856
  %24 = load i32, i32* %tmode.addr, align 4, !dbg !14857
  %25 = load i32, i32* %fmode.addr, align 4, !dbg !14858
  call void @gen_intraclass_conv_libfunc(%struct.convert_optab_d* %22, i8* %23, i32 %24, i32 %25), !dbg !14859
  br label %if.end55, !dbg !14859

if.else:                                          ; preds = %if.end45
  %26 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14860
  %27 = load i8*, i8** %opname.addr, align 8, !dbg !14861
  %28 = load i32, i32* %tmode.addr, align 4, !dbg !14862
  %29 = load i32, i32* %fmode.addr, align 4, !dbg !14863
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %26, i8* %27, i32 %28, i32 %29), !dbg !14864
  br label %if.end55

if.end55:                                         ; preds = %if.then, %if.then44, %if.else, %if.then54
  ret void, !dbg !14865
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_fractuns_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14866 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14867, metadata !DIExpression()), !dbg !14868
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14869, metadata !DIExpression()), !dbg !14870
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14871, metadata !DIExpression()), !dbg !14872
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14873, metadata !DIExpression()), !dbg !14874
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14875
  %1 = load i32, i32* %fmode.addr, align 4, !dbg !14877
  %cmp = icmp eq i32 %0, %1, !dbg !14878
  br i1 %cmp, label %if.then, label %if.end, !dbg !14879

if.then:                                          ; preds = %entry
  br label %return, !dbg !14880

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom = zext i32 %2 to i64, !dbg !14881
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14881
  %3 = load i8, i8* %arrayidx, align 1, !dbg !14881
  %conv = zext i8 %3 to i32, !dbg !14881
  %cmp1 = icmp eq i32 %conv, 4, !dbg !14881
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !14881

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom3 = zext i32 %4 to i64, !dbg !14881
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !14881
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !14881
  %conv5 = zext i8 %5 to i32, !dbg !14881
  %cmp6 = icmp eq i32 %conv5, 13, !dbg !14881
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false8, !dbg !14881

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom9 = zext i32 %6 to i64, !dbg !14881
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom9, !dbg !14881
  %7 = load i8, i8* %arrayidx10, align 1, !dbg !14881
  %conv11 = zext i8 %7 to i32, !dbg !14881
  %cmp12 = icmp eq i32 %conv11, 6, !dbg !14881
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false14, !dbg !14881

lor.lhs.false14:                                  ; preds = %lor.lhs.false8
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom15 = zext i32 %8 to i64, !dbg !14881
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom15, !dbg !14881
  %9 = load i8, i8* %arrayidx16, align 1, !dbg !14881
  %conv17 = zext i8 %9 to i32, !dbg !14881
  %cmp18 = icmp eq i32 %conv17, 15, !dbg !14881
  br i1 %cmp18, label %land.lhs.true, label %lor.lhs.false20, !dbg !14881

lor.lhs.false20:                                  ; preds = %lor.lhs.false14
  %10 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom21 = zext i32 %10 to i64, !dbg !14881
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom21, !dbg !14881
  %11 = load i8, i8* %arrayidx22, align 1, !dbg !14881
  %conv23 = zext i8 %11 to i32, !dbg !14881
  %cmp24 = icmp eq i32 %conv23, 5, !dbg !14881
  br i1 %cmp24, label %land.lhs.true, label %lor.lhs.false26, !dbg !14881

lor.lhs.false26:                                  ; preds = %lor.lhs.false20
  %12 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom27 = zext i32 %12 to i64, !dbg !14881
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom27, !dbg !14881
  %13 = load i8, i8* %arrayidx28, align 1, !dbg !14881
  %conv29 = zext i8 %13 to i32, !dbg !14881
  %cmp30 = icmp eq i32 %conv29, 14, !dbg !14881
  br i1 %cmp30, label %land.lhs.true, label %lor.lhs.false32, !dbg !14881

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %14 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom33 = zext i32 %14 to i64, !dbg !14881
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !14881
  %15 = load i8, i8* %arrayidx34, align 1, !dbg !14881
  %conv35 = zext i8 %15 to i32, !dbg !14881
  %cmp36 = icmp eq i32 %conv35, 7, !dbg !14881
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false38, !dbg !14881

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %16 = load i32, i32* %tmode.addr, align 4, !dbg !14881
  %idxprom39 = zext i32 %16 to i64, !dbg !14881
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !14881
  %17 = load i8, i8* %arrayidx40, align 1, !dbg !14881
  %conv41 = zext i8 %17 to i32, !dbg !14881
  %cmp42 = icmp eq i32 %conv41, 16, !dbg !14881
  br i1 %cmp42, label %land.lhs.true, label %lor.lhs.false49, !dbg !14883

land.lhs.true:                                    ; preds = %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false26, %lor.lhs.false20, %lor.lhs.false14, %lor.lhs.false8, %lor.lhs.false, %if.end
  %18 = load i32, i32* %fmode.addr, align 4, !dbg !14884
  %idxprom44 = zext i32 %18 to i64, !dbg !14884
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom44, !dbg !14884
  %19 = load i8, i8* %arrayidx45, align 1, !dbg !14884
  %conv46 = zext i8 %19 to i32, !dbg !14884
  %cmp47 = icmp eq i32 %conv46, 2, !dbg !14885
  br i1 %cmp47, label %if.end104, label %lor.lhs.false49, !dbg !14886

lor.lhs.false49:                                  ; preds = %land.lhs.true, %lor.lhs.false38
  %20 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom50 = zext i32 %20 to i64, !dbg !14887
  %arrayidx51 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom50, !dbg !14887
  %21 = load i8, i8* %arrayidx51, align 1, !dbg !14887
  %conv52 = zext i8 %21 to i32, !dbg !14887
  %cmp53 = icmp eq i32 %conv52, 4, !dbg !14887
  br i1 %cmp53, label %land.lhs.true97, label %lor.lhs.false55, !dbg !14887

lor.lhs.false55:                                  ; preds = %lor.lhs.false49
  %22 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom56 = zext i32 %22 to i64, !dbg !14887
  %arrayidx57 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom56, !dbg !14887
  %23 = load i8, i8* %arrayidx57, align 1, !dbg !14887
  %conv58 = zext i8 %23 to i32, !dbg !14887
  %cmp59 = icmp eq i32 %conv58, 13, !dbg !14887
  br i1 %cmp59, label %land.lhs.true97, label %lor.lhs.false61, !dbg !14887

lor.lhs.false61:                                  ; preds = %lor.lhs.false55
  %24 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom62 = zext i32 %24 to i64, !dbg !14887
  %arrayidx63 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom62, !dbg !14887
  %25 = load i8, i8* %arrayidx63, align 1, !dbg !14887
  %conv64 = zext i8 %25 to i32, !dbg !14887
  %cmp65 = icmp eq i32 %conv64, 6, !dbg !14887
  br i1 %cmp65, label %land.lhs.true97, label %lor.lhs.false67, !dbg !14887

lor.lhs.false67:                                  ; preds = %lor.lhs.false61
  %26 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom68 = zext i32 %26 to i64, !dbg !14887
  %arrayidx69 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom68, !dbg !14887
  %27 = load i8, i8* %arrayidx69, align 1, !dbg !14887
  %conv70 = zext i8 %27 to i32, !dbg !14887
  %cmp71 = icmp eq i32 %conv70, 15, !dbg !14887
  br i1 %cmp71, label %land.lhs.true97, label %lor.lhs.false73, !dbg !14887

lor.lhs.false73:                                  ; preds = %lor.lhs.false67
  %28 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom74 = zext i32 %28 to i64, !dbg !14887
  %arrayidx75 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom74, !dbg !14887
  %29 = load i8, i8* %arrayidx75, align 1, !dbg !14887
  %conv76 = zext i8 %29 to i32, !dbg !14887
  %cmp77 = icmp eq i32 %conv76, 5, !dbg !14887
  br i1 %cmp77, label %land.lhs.true97, label %lor.lhs.false79, !dbg !14887

lor.lhs.false79:                                  ; preds = %lor.lhs.false73
  %30 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom80 = zext i32 %30 to i64, !dbg !14887
  %arrayidx81 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom80, !dbg !14887
  %31 = load i8, i8* %arrayidx81, align 1, !dbg !14887
  %conv82 = zext i8 %31 to i32, !dbg !14887
  %cmp83 = icmp eq i32 %conv82, 14, !dbg !14887
  br i1 %cmp83, label %land.lhs.true97, label %lor.lhs.false85, !dbg !14887

lor.lhs.false85:                                  ; preds = %lor.lhs.false79
  %32 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom86 = zext i32 %32 to i64, !dbg !14887
  %arrayidx87 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom86, !dbg !14887
  %33 = load i8, i8* %arrayidx87, align 1, !dbg !14887
  %conv88 = zext i8 %33 to i32, !dbg !14887
  %cmp89 = icmp eq i32 %conv88, 7, !dbg !14887
  br i1 %cmp89, label %land.lhs.true97, label %lor.lhs.false91, !dbg !14887

lor.lhs.false91:                                  ; preds = %lor.lhs.false85
  %34 = load i32, i32* %fmode.addr, align 4, !dbg !14887
  %idxprom92 = zext i32 %34 to i64, !dbg !14887
  %arrayidx93 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom92, !dbg !14887
  %35 = load i8, i8* %arrayidx93, align 1, !dbg !14887
  %conv94 = zext i8 %35 to i32, !dbg !14887
  %cmp95 = icmp eq i32 %conv94, 16, !dbg !14887
  br i1 %cmp95, label %land.lhs.true97, label %if.then103, !dbg !14888

land.lhs.true97:                                  ; preds = %lor.lhs.false91, %lor.lhs.false85, %lor.lhs.false79, %lor.lhs.false73, %lor.lhs.false67, %lor.lhs.false61, %lor.lhs.false55, %lor.lhs.false49
  %36 = load i32, i32* %tmode.addr, align 4, !dbg !14889
  %idxprom98 = zext i32 %36 to i64, !dbg !14889
  %arrayidx99 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom98, !dbg !14889
  %37 = load i8, i8* %arrayidx99, align 1, !dbg !14889
  %conv100 = zext i8 %37 to i32, !dbg !14889
  %cmp101 = icmp eq i32 %conv100, 2, !dbg !14890
  br i1 %cmp101, label %if.end104, label %if.then103, !dbg !14891

if.then103:                                       ; preds = %land.lhs.true97, %lor.lhs.false91
  br label %return, !dbg !14892

if.end104:                                        ; preds = %land.lhs.true97, %land.lhs.true
  %38 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14893
  %39 = load i8*, i8** %opname.addr, align 8, !dbg !14894
  %40 = load i32, i32* %tmode.addr, align 4, !dbg !14895
  %41 = load i32, i32* %fmode.addr, align 4, !dbg !14896
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %38, i8* %39, i32 %40, i32 %41), !dbg !14897
  br label %return, !dbg !14898

return:                                           ; preds = %if.end104, %if.then103, %if.then
  ret void, !dbg !14898
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_satfractuns_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !14899 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !14900, metadata !DIExpression()), !dbg !14901
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !14902, metadata !DIExpression()), !dbg !14903
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !14904, metadata !DIExpression()), !dbg !14905
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !14906, metadata !DIExpression()), !dbg !14907
  %0 = load i32, i32* %tmode.addr, align 4, !dbg !14908
  %1 = load i32, i32* %fmode.addr, align 4, !dbg !14910
  %cmp = icmp eq i32 %0, %1, !dbg !14911
  br i1 %cmp, label %if.then, label %if.end, !dbg !14912

if.then:                                          ; preds = %entry
  br label %return, !dbg !14913

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom = zext i32 %2 to i64, !dbg !14914
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !14914
  %3 = load i8, i8* %arrayidx, align 1, !dbg !14914
  %conv = zext i8 %3 to i32, !dbg !14914
  %cmp1 = icmp eq i32 %conv, 4, !dbg !14914
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !14914

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom3 = zext i32 %4 to i64, !dbg !14914
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom3, !dbg !14914
  %5 = load i8, i8* %arrayidx4, align 1, !dbg !14914
  %conv5 = zext i8 %5 to i32, !dbg !14914
  %cmp6 = icmp eq i32 %conv5, 13, !dbg !14914
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false8, !dbg !14914

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom9 = zext i32 %6 to i64, !dbg !14914
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom9, !dbg !14914
  %7 = load i8, i8* %arrayidx10, align 1, !dbg !14914
  %conv11 = zext i8 %7 to i32, !dbg !14914
  %cmp12 = icmp eq i32 %conv11, 6, !dbg !14914
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false14, !dbg !14914

lor.lhs.false14:                                  ; preds = %lor.lhs.false8
  %8 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom15 = zext i32 %8 to i64, !dbg !14914
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom15, !dbg !14914
  %9 = load i8, i8* %arrayidx16, align 1, !dbg !14914
  %conv17 = zext i8 %9 to i32, !dbg !14914
  %cmp18 = icmp eq i32 %conv17, 15, !dbg !14914
  br i1 %cmp18, label %land.lhs.true, label %lor.lhs.false20, !dbg !14914

lor.lhs.false20:                                  ; preds = %lor.lhs.false14
  %10 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom21 = zext i32 %10 to i64, !dbg !14914
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom21, !dbg !14914
  %11 = load i8, i8* %arrayidx22, align 1, !dbg !14914
  %conv23 = zext i8 %11 to i32, !dbg !14914
  %cmp24 = icmp eq i32 %conv23, 5, !dbg !14914
  br i1 %cmp24, label %land.lhs.true, label %lor.lhs.false26, !dbg !14914

lor.lhs.false26:                                  ; preds = %lor.lhs.false20
  %12 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom27 = zext i32 %12 to i64, !dbg !14914
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom27, !dbg !14914
  %13 = load i8, i8* %arrayidx28, align 1, !dbg !14914
  %conv29 = zext i8 %13 to i32, !dbg !14914
  %cmp30 = icmp eq i32 %conv29, 14, !dbg !14914
  br i1 %cmp30, label %land.lhs.true, label %lor.lhs.false32, !dbg !14914

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %14 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom33 = zext i32 %14 to i64, !dbg !14914
  %arrayidx34 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom33, !dbg !14914
  %15 = load i8, i8* %arrayidx34, align 1, !dbg !14914
  %conv35 = zext i8 %15 to i32, !dbg !14914
  %cmp36 = icmp eq i32 %conv35, 7, !dbg !14914
  br i1 %cmp36, label %land.lhs.true, label %lor.lhs.false38, !dbg !14914

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %16 = load i32, i32* %tmode.addr, align 4, !dbg !14914
  %idxprom39 = zext i32 %16 to i64, !dbg !14914
  %arrayidx40 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom39, !dbg !14914
  %17 = load i8, i8* %arrayidx40, align 1, !dbg !14914
  %conv41 = zext i8 %17 to i32, !dbg !14914
  %cmp42 = icmp eq i32 %conv41, 16, !dbg !14914
  br i1 %cmp42, label %land.lhs.true, label %if.then49, !dbg !14916

land.lhs.true:                                    ; preds = %lor.lhs.false38, %lor.lhs.false32, %lor.lhs.false26, %lor.lhs.false20, %lor.lhs.false14, %lor.lhs.false8, %lor.lhs.false, %if.end
  %18 = load i32, i32* %fmode.addr, align 4, !dbg !14917
  %idxprom44 = zext i32 %18 to i64, !dbg !14917
  %arrayidx45 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom44, !dbg !14917
  %19 = load i8, i8* %arrayidx45, align 1, !dbg !14917
  %conv46 = zext i8 %19 to i32, !dbg !14917
  %cmp47 = icmp eq i32 %conv46, 2, !dbg !14918
  br i1 %cmp47, label %if.end50, label %if.then49, !dbg !14919

if.then49:                                        ; preds = %land.lhs.true, %lor.lhs.false38
  br label %return, !dbg !14920

if.end50:                                         ; preds = %land.lhs.true
  %20 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !14921
  %21 = load i8*, i8** %opname.addr, align 8, !dbg !14922
  %22 = load i32, i32* %tmode.addr, align 4, !dbg !14923
  %23 = load i32, i32* %fmode.addr, align 4, !dbg !14924
  call void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %20, i8* %21, i32 %22, i32 %23), !dbg !14925
  br label %return, !dbg !14926

return:                                           ; preds = %if.end50, %if.then49, %if.then
  ret void, !dbg !14926
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_optab_libfuncs() #0 !dbg !14927 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %o = alloca %struct.optab_d*, align 8
  %l = alloca %struct.rtx_def*, align 8
  %o23 = alloca %struct.convert_optab_d*, align 8
  %l24 = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14928, metadata !DIExpression()), !dbg !14929
  call void @llvm.dbg.declare(metadata i32* %j, metadata !14930, metadata !DIExpression()), !dbg !14931
  call void @llvm.dbg.declare(metadata i32* %k, metadata !14932, metadata !DIExpression()), !dbg !14933
  store i32 0, i32* %i, align 4, !dbg !14934
  br label %for.cond, !dbg !14936

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %i, align 4, !dbg !14937
  %cmp = icmp ne i32 %0, 159, !dbg !14939
  br i1 %cmp, label %for.body, label %for.end13, !dbg !14940

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !14941
  br label %for.cond1, !dbg !14943

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4, !dbg !14944
  %cmp2 = icmp slt i32 %1, 87, !dbg !14946
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !14947

for.body3:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata %struct.optab_d** %o, metadata !14948, metadata !DIExpression()), !dbg !14950
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %l, metadata !14951, metadata !DIExpression()), !dbg !14952
  %2 = load i32, i32* %i, align 4, !dbg !14953
  %idxprom = sext i32 %2 to i64, !dbg !14954
  %arrayidx = getelementptr inbounds [159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 %idxprom, !dbg !14954
  store %struct.optab_d* %arrayidx, %struct.optab_d** %o, align 8, !dbg !14955
  %3 = load %struct.optab_d*, %struct.optab_d** %o, align 8, !dbg !14956
  %4 = load i32, i32* %j, align 4, !dbg !14957
  %call = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %3, i32 %4), !dbg !14958
  store %struct.rtx_def* %call, %struct.rtx_def** %l, align 8, !dbg !14959
  %5 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8, !dbg !14960
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !14960
  br i1 %tobool, label %if.then, label %if.end, !dbg !14962

if.then:                                          ; preds = %for.body3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8, !dbg !14963
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !14963
  %bf.load = load i32, i32* %7, align 8, !dbg !14963
  %bf.clear = and i32 %bf.load, 65535, !dbg !14963
  %cmp4 = icmp eq i32 %bf.clear, 45, !dbg !14963
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !14963

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6715, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14963
  br label %cond.end, !dbg !14963

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !14963

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14963
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !14965
  %9 = load %struct.optab_d*, %struct.optab_d** %o, align 8, !dbg !14966
  %code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %9, i32 0, i32 0, !dbg !14966
  %10 = load i32, i32* %code, align 8, !dbg !14966
  %idxprom5 = sext i32 %10 to i64, !dbg !14966
  %arrayidx6 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_name, i64 0, i64 %idxprom5, !dbg !14966
  %11 = load i8*, i8** %arrayidx6, align 8, !dbg !14966
  %12 = load i32, i32* %j, align 4, !dbg !14967
  %idxprom7 = sext i32 %12 to i64, !dbg !14967
  %arrayidx8 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom7, !dbg !14967
  %13 = load i8*, i8** %arrayidx8, align 8, !dbg !14967
  %14 = load %struct.rtx_def*, %struct.rtx_def** %l, align 8, !dbg !14968
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !14968
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !14968
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !14968
  %rt_str = bitcast %union.rtunion_def* %arrayidx9 to i8**, !dbg !14968
  %15 = load i8*, i8** %rt_str, align 8, !dbg !14968
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i64 0, i64 0), i8* %11, i8* %13, i8* %15), !dbg !14969
  br label %if.end, !dbg !14970

if.end:                                           ; preds = %cond.end, %for.body3
  br label %for.inc, !dbg !14971

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %j, align 4, !dbg !14972
  %inc = add nsw i32 %16, 1, !dbg !14972
  store i32 %inc, i32* %j, align 4, !dbg !14972
  br label %for.cond1, !dbg !14973, !llvm.loop !14974

for.end:                                          ; preds = %for.cond1
  br label %for.inc11, !dbg !14975

for.inc11:                                        ; preds = %for.end
  %17 = load i32, i32* %i, align 4, !dbg !14976
  %inc12 = add nsw i32 %17, 1, !dbg !14976
  store i32 %inc12, i32* %i, align 4, !dbg !14976
  br label %for.cond, !dbg !14977, !llvm.loop !14978

for.end13:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !14980
  br label %for.cond14, !dbg !14982

for.cond14:                                       ; preds = %for.inc56, %for.end13
  %18 = load i32, i32* %i, align 4, !dbg !14983
  %cmp15 = icmp slt i32 %18, 17, !dbg !14985
  br i1 %cmp15, label %for.body16, label %for.end58, !dbg !14986

for.body16:                                       ; preds = %for.cond14
  store i32 0, i32* %j, align 4, !dbg !14987
  br label %for.cond17, !dbg !14989

for.cond17:                                       ; preds = %for.inc53, %for.body16
  %19 = load i32, i32* %j, align 4, !dbg !14990
  %cmp18 = icmp slt i32 %19, 87, !dbg !14992
  br i1 %cmp18, label %for.body19, label %for.end55, !dbg !14993

for.body19:                                       ; preds = %for.cond17
  store i32 0, i32* %k, align 4, !dbg !14994
  br label %for.cond20, !dbg !14996

for.cond20:                                       ; preds = %for.inc50, %for.body19
  %20 = load i32, i32* %k, align 4, !dbg !14997
  %cmp21 = icmp slt i32 %20, 87, !dbg !14999
  br i1 %cmp21, label %for.body22, label %for.end52, !dbg !15000

for.body22:                                       ; preds = %for.cond20
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %o23, metadata !15001, metadata !DIExpression()), !dbg !15003
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %l24, metadata !15004, metadata !DIExpression()), !dbg !15005
  %21 = load i32, i32* %i, align 4, !dbg !15006
  %idxprom25 = sext i32 %21 to i64, !dbg !15007
  %arrayidx26 = getelementptr inbounds [17 x %struct.convert_optab_d], [17 x %struct.convert_optab_d]* @convert_optab_table, i64 0, i64 %idxprom25, !dbg !15007
  store %struct.convert_optab_d* %arrayidx26, %struct.convert_optab_d** %o23, align 8, !dbg !15008
  %22 = load %struct.convert_optab_d*, %struct.convert_optab_d** %o23, align 8, !dbg !15009
  %23 = load i32, i32* %j, align 4, !dbg !15010
  %24 = load i32, i32* %k, align 4, !dbg !15011
  %call27 = call %struct.rtx_def* @convert_optab_libfunc(%struct.convert_optab_d* %22, i32 %23, i32 %24), !dbg !15012
  store %struct.rtx_def* %call27, %struct.rtx_def** %l24, align 8, !dbg !15013
  %25 = load %struct.rtx_def*, %struct.rtx_def** %l24, align 8, !dbg !15014
  %tobool28 = icmp ne %struct.rtx_def* %25, null, !dbg !15014
  br i1 %tobool28, label %if.then29, label %if.end49, !dbg !15016

if.then29:                                        ; preds = %for.body22
  %26 = load %struct.rtx_def*, %struct.rtx_def** %l24, align 8, !dbg !15017
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !15017
  %bf.load30 = load i32, i32* %27, align 8, !dbg !15017
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !15017
  %cmp32 = icmp eq i32 %bf.clear31, 45, !dbg !15017
  br i1 %cmp32, label %cond.false34, label %cond.true33, !dbg !15017

cond.true33:                                      ; preds = %if.then29
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6736, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15017
  br label %cond.end35, !dbg !15017

cond.false34:                                     ; preds = %if.then29
  br label %cond.end35, !dbg !15017

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !15017
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !15019
  %29 = load %struct.convert_optab_d*, %struct.convert_optab_d** %o23, align 8, !dbg !15020
  %code37 = getelementptr inbounds %struct.convert_optab_d, %struct.convert_optab_d* %29, i32 0, i32 0, !dbg !15020
  %30 = load i32, i32* %code37, align 8, !dbg !15020
  %idxprom38 = sext i32 %30 to i64, !dbg !15020
  %arrayidx39 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_name, i64 0, i64 %idxprom38, !dbg !15020
  %31 = load i8*, i8** %arrayidx39, align 8, !dbg !15020
  %32 = load i32, i32* %j, align 4, !dbg !15021
  %idxprom40 = sext i32 %32 to i64, !dbg !15021
  %arrayidx41 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom40, !dbg !15021
  %33 = load i8*, i8** %arrayidx41, align 8, !dbg !15021
  %34 = load i32, i32* %k, align 4, !dbg !15022
  %idxprom42 = sext i32 %34 to i64, !dbg !15022
  %arrayidx43 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom42, !dbg !15022
  %35 = load i8*, i8** %arrayidx43, align 8, !dbg !15022
  %36 = load %struct.rtx_def*, %struct.rtx_def** %l24, align 8, !dbg !15023
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !15023
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !15023
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 0, !dbg !15023
  %rt_str47 = bitcast %union.rtunion_def* %arrayidx46 to i8**, !dbg !15023
  %37 = load i8*, i8** %rt_str47, align 8, !dbg !15023
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.82, i64 0, i64 0), i8* %31, i8* %33, i8* %35, i8* %37), !dbg !15024
  br label %if.end49, !dbg !15025

if.end49:                                         ; preds = %cond.end35, %for.body22
  br label %for.inc50, !dbg !15026

for.inc50:                                        ; preds = %if.end49
  %38 = load i32, i32* %k, align 4, !dbg !15027
  %inc51 = add nsw i32 %38, 1, !dbg !15027
  store i32 %inc51, i32* %k, align 4, !dbg !15027
  br label %for.cond20, !dbg !15028, !llvm.loop !15029

for.end52:                                        ; preds = %for.cond20
  br label %for.inc53, !dbg !15030

for.inc53:                                        ; preds = %for.end52
  %39 = load i32, i32* %j, align 4, !dbg !15031
  %inc54 = add nsw i32 %39, 1, !dbg !15031
  store i32 %inc54, i32* %j, align 4, !dbg !15031
  br label %for.cond17, !dbg !15032, !llvm.loop !15033

for.end55:                                        ; preds = %for.cond17
  br label %for.inc56, !dbg !15034

for.inc56:                                        ; preds = %for.end55
  %40 = load i32, i32* %i, align 4, !dbg !15035
  %inc57 = add nsw i32 %40, 1, !dbg !15035
  store i32 %inc57, i32* %i, align 4, !dbg !15035
  br label %for.cond14, !dbg !15036, !llvm.loop !15037

for.end58:                                        ; preds = %for.cond14
  ret void, !dbg !15039
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @gen_cond_trap(i32 %code, %struct.rtx_def* %op1, %struct.rtx_def* %op2, %struct.rtx_def* %tcode) #0 !dbg !15040 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %struct.rtx_def*, align 8
  %op2.addr = alloca %struct.rtx_def*, align 8
  %tcode.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %icode = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %trap_rtx = alloca %struct.rtx_def*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !15043, metadata !DIExpression()), !dbg !15044
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !15045, metadata !DIExpression()), !dbg !15046
  store %struct.rtx_def* %op2, %struct.rtx_def** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op2.addr, metadata !15047, metadata !DIExpression()), !dbg !15048
  store %struct.rtx_def* %tcode, %struct.rtx_def** %tcode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tcode.addr, metadata !15049, metadata !DIExpression()), !dbg !15050
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15051, metadata !DIExpression()), !dbg !15052
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !15053
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15053
  %bf.load = load i32, i32* %1, align 8, !dbg !15053
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15053
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15053
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15052
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15054, metadata !DIExpression()), !dbg !15055
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !15056, metadata !DIExpression()), !dbg !15057
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trap_rtx, metadata !15058, metadata !DIExpression()), !dbg !15059
  %2 = load i32, i32* %mode, align 4, !dbg !15060
  %cmp = icmp eq i32 %2, 0, !dbg !15062
  br i1 %cmp, label %if.then, label %if.end, !dbg !15063

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15064
  br label %return, !dbg !15064

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %mode, align 4, !dbg !15065
  %idxprom = sext i32 %3 to i64, !dbg !15065
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 118, i32 4), i64 0, i64 %idxprom, !dbg !15065
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !15066
  %4 = load i32, i32* %insn_code, align 4, !dbg !15066
  store i32 %4, i32* %icode, align 4, !dbg !15067
  %5 = load i32, i32* %icode, align 4, !dbg !15068
  %cmp1 = icmp eq i32 %5, 2956, !dbg !15070
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !15071

if.then2:                                         ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15072
  br label %return, !dbg !15072

if.end3:                                          ; preds = %if.end
  %6 = load i32, i32* %icode, align 4, !dbg !15073
  %idxprom4 = zext i32 %6 to i64, !dbg !15075
  %arrayidx5 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom4, !dbg !15075
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx5, i32 0, i32 3, !dbg !15076
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !15076
  %arrayidx6 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 3, !dbg !15075
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx6, i32 0, i32 0, !dbg !15077
  %8 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !15077
  %tobool = icmp ne i32 (%struct.rtx_def*, i32)* %8, null, !dbg !15075
  br i1 %tobool, label %land.lhs.true, label %if.end14, !dbg !15078

land.lhs.true:                                    ; preds = %if.end3
  %9 = load i32, i32* %icode, align 4, !dbg !15079
  %idxprom7 = zext i32 %9 to i64, !dbg !15080
  %arrayidx8 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom7, !dbg !15080
  %operand9 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx8, i32 0, i32 3, !dbg !15081
  %10 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand9, align 8, !dbg !15081
  %arrayidx10 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %10, i64 3, !dbg !15080
  %predicate11 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx10, i32 0, i32 0, !dbg !15082
  %11 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate11, align 8, !dbg !15082
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tcode.addr, align 8, !dbg !15083
  %call = call i32 %11(%struct.rtx_def* %12, i32 0), !dbg !15080
  %tobool12 = icmp ne i32 %call, 0, !dbg !15080
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !15084

if.then13:                                        ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15085
  br label %return, !dbg !15085

if.end14:                                         ; preds = %land.lhs.true, %if.end3
  call void @do_pending_stack_adjust(), !dbg !15086
  call void @start_sequence(), !dbg !15087
  %13 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !15088
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op2.addr, align 8, !dbg !15089
  %15 = load i32, i32* %code.addr, align 4, !dbg !15090
  call void @prepare_cmp_insn(%struct.rtx_def* %13, %struct.rtx_def* %14, i32 %15, %struct.rtx_def* null, i32 0, i32 0, %struct.rtx_def** %trap_rtx, i32* %mode), !dbg !15091
  %16 = load %struct.rtx_def*, %struct.rtx_def** %trap_rtx, align 8, !dbg !15092
  %tobool15 = icmp ne %struct.rtx_def* %16, null, !dbg !15092
  br i1 %tobool15, label %if.else, label %if.then16, !dbg !15094

if.then16:                                        ; preds = %if.end14
  store %struct.rtx_def* null, %struct.rtx_def** %insn, align 8, !dbg !15095
  br label %if.end25, !dbg !15096

if.else:                                          ; preds = %if.end14
  %17 = load i32, i32* %icode, align 4, !dbg !15097
  %idxprom17 = zext i32 %17 to i64, !dbg !15097
  %arrayidx18 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom17, !dbg !15097
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx18, i32 0, i32 2, !dbg !15097
  %18 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !15097
  %19 = load %struct.rtx_def*, %struct.rtx_def** %trap_rtx, align 8, !dbg !15098
  %20 = load %struct.rtx_def*, %struct.rtx_def** %trap_rtx, align 8, !dbg !15099
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !15099
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !15099
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !15099
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !15099
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !15099
  %22 = load %struct.rtx_def*, %struct.rtx_def** %trap_rtx, align 8, !dbg !15100
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !15100
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !15100
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !15100
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !15100
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !15100
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tcode.addr, align 8, !dbg !15101
  %call24 = call %struct.rtx_def* (%struct.rtx_def*, ...) %18(%struct.rtx_def* %19, %struct.rtx_def* %21, %struct.rtx_def* %23, %struct.rtx_def* %24), !dbg !15097
  store %struct.rtx_def* %call24, %struct.rtx_def** %insn, align 8, !dbg !15102
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15103
  %cmp26 = icmp eq %struct.rtx_def* %25, null, !dbg !15105
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !15106

if.then27:                                        ; preds = %if.end25
  call void @end_sequence(), !dbg !15107
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15109
  br label %return, !dbg !15109

if.end28:                                         ; preds = %if.end25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15110
  %call29 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %26), !dbg !15111
  %call30 = call %struct.rtx_def* @get_insns(), !dbg !15112
  store %struct.rtx_def* %call30, %struct.rtx_def** %insn, align 8, !dbg !15113
  call void @end_sequence(), !dbg !15114
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15115
  store %struct.rtx_def* %27, %struct.rtx_def** %retval, align 8, !dbg !15116
  br label %return, !dbg !15116

return:                                           ; preds = %if.end28, %if.then27, %if.then13, %if.then2, %if.then
  %28 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !15117
  ret %struct.rtx_def* %28, !dbg !15117
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expand_vec_cond_expr_p(%union.tree_node* %type, i32 %vmode) #0 !dbg !15118 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %vmode.addr = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !15121, metadata !DIExpression()), !dbg !15122
  store i32 %vmode, i32* %vmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vmode.addr, metadata !15123, metadata !DIExpression()), !dbg !15124
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !15125
  %1 = load i32, i32* %vmode.addr, align 4, !dbg !15127
  %call = call i32 @get_vcond_icode(%union.tree_node* %0, i32 %1), !dbg !15128
  %cmp = icmp eq i32 %call, 2956, !dbg !15129
  br i1 %cmp, label %if.then, label %if.end, !dbg !15130

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !15131
  br label %return, !dbg !15131

if.end:                                           ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !15132
  br label %return, !dbg !15132

return:                                           ; preds = %if.end, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !15133
  ret i8 %2, !dbg !15133
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_vcond_icode(%union.tree_node* %type, i32 %mode) #0 !dbg !15134 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %mode.addr = alloca i32, align 4
  %icode = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !15137, metadata !DIExpression()), !dbg !15138
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !15139, metadata !DIExpression()), !dbg !15140
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15141, metadata !DIExpression()), !dbg !15142
  store i32 2956, i32* %icode, align 4, !dbg !15142
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !15143
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !15143
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !15143
  %bf.load = load i64, i64* %1, align 8, !dbg !15143
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !15143
  %bf.clear = and i64 %bf.lshr, 1, !dbg !15143
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15143
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !15143
  br i1 %tobool, label %if.then, label %if.else, !dbg !15145

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !15146
  %idxprom = zext i32 %2 to i64, !dbg !15147
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @vcondu_gen_code, i64 0, i64 %idxprom, !dbg !15147
  %3 = load i32, i32* %arrayidx, align 4, !dbg !15147
  store i32 %3, i32* %icode, align 4, !dbg !15148
  br label %if.end, !dbg !15149

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !15150
  %idxprom1 = zext i32 %4 to i64, !dbg !15151
  %arrayidx2 = getelementptr inbounds [87 x i32], [87 x i32]* @vcond_gen_code, i64 0, i64 %idxprom1, !dbg !15151
  %5 = load i32, i32* %arrayidx2, align 4, !dbg !15151
  store i32 %5, i32* %icode, align 4, !dbg !15152
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %icode, align 4, !dbg !15153
  ret i32 %6, !dbg !15154
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_vec_cond_expr(%union.tree_node* %vec_cond_type, %union.tree_node* %op0, %union.tree_node* %op1, %union.tree_node* %op2, %struct.rtx_def* %target) #0 !dbg !15155 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %vec_cond_type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %icode = alloca i32, align 4
  %comparison = alloca %struct.rtx_def*, align 8
  %rtx_op1 = alloca %struct.rtx_def*, align 8
  %rtx_op2 = alloca %struct.rtx_def*, align 8
  %cc_op0 = alloca %struct.rtx_def*, align 8
  %cc_op1 = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i8, align 1
  store %union.tree_node* %vec_cond_type, %union.tree_node** %vec_cond_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vec_cond_type.addr, metadata !15158, metadata !DIExpression()), !dbg !15159
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !15160, metadata !DIExpression()), !dbg !15161
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !15162, metadata !DIExpression()), !dbg !15163
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !15164, metadata !DIExpression()), !dbg !15165
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !15166, metadata !DIExpression()), !dbg !15167
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15168, metadata !DIExpression()), !dbg !15169
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %comparison, metadata !15170, metadata !DIExpression()), !dbg !15171
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_op1, metadata !15172, metadata !DIExpression()), !dbg !15173
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_op2, metadata !15174, metadata !DIExpression()), !dbg !15175
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cc_op0, metadata !15176, metadata !DIExpression()), !dbg !15177
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cc_op1, metadata !15178, metadata !DIExpression()), !dbg !15179
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15180, metadata !DIExpression()), !dbg !15181
  %0 = load %union.tree_node*, %union.tree_node** %vec_cond_type.addr, align 8, !dbg !15182
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !15182
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !15182
  %bf.load = load i64, i64* %1, align 8, !dbg !15182
  %bf.clear = and i64 %bf.load, 65535, !dbg !15182
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15182
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !15182
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !15182

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %vec_cond_type.addr, align 8, !dbg !15182
  %call = call i32 @vector_type_mode(%union.tree_node* %2), !dbg !15182
  br label %cond.end, !dbg !15182

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %vec_cond_type.addr, align 8, !dbg !15182
  %type = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !15182
  %mode1 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 6, !dbg !15182
  %bf.load2 = load i32, i32* %mode1, align 4, !dbg !15182
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !15182
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !15182
  br label %cond.end, !dbg !15182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear3, %cond.false ], !dbg !15182
  store i32 %cond, i32* %mode, align 4, !dbg !15181
  call void @llvm.dbg.declare(metadata i8* %unsignedp, metadata !15183, metadata !DIExpression()), !dbg !15184
  %4 = load %union.tree_node*, %union.tree_node** %vec_cond_type.addr, align 8, !dbg !15185
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !15185
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !15185
  %bf.load5 = load i64, i64* %5, align 8, !dbg !15185
  %bf.lshr6 = lshr i64 %bf.load5, 21, !dbg !15185
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !15185
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !15185
  %conv = trunc i32 %bf.cast8 to i8, !dbg !15185
  store i8 %conv, i8* %unsignedp, align 1, !dbg !15184
  %6 = load %union.tree_node*, %union.tree_node** %vec_cond_type.addr, align 8, !dbg !15186
  %7 = load i32, i32* %mode, align 4, !dbg !15187
  %call9 = call i32 @get_vcond_icode(%union.tree_node* %6, i32 %7), !dbg !15188
  store i32 %call9, i32* %icode, align 4, !dbg !15189
  %8 = load i32, i32* %icode, align 4, !dbg !15190
  %cmp10 = icmp eq i32 %8, 2956, !dbg !15192
  br i1 %cmp10, label %if.then, label %if.end, !dbg !15193

if.then:                                          ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15194
  br label %return, !dbg !15194

if.end:                                           ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15195
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !15195
  br i1 %tobool, label %lor.lhs.false, label %if.then15, !dbg !15197

lor.lhs.false:                                    ; preds = %if.end
  %10 = load i32, i32* %icode, align 4, !dbg !15198
  %idxprom = zext i32 %10 to i64, !dbg !15199
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !15199
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !15200
  %11 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !15200
  %arrayidx12 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %11, i64 0, !dbg !15199
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx12, i32 0, i32 0, !dbg !15201
  %12 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !15201
  %13 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15202
  %14 = load i32, i32* %mode, align 4, !dbg !15203
  %call13 = call i32 %12(%struct.rtx_def* %13, i32 %14), !dbg !15199
  %tobool14 = icmp ne i32 %call13, 0, !dbg !15199
  br i1 %tobool14, label %if.end17, label %if.then15, !dbg !15204

if.then15:                                        ; preds = %lor.lhs.false, %if.end
  %15 = load i32, i32* %mode, align 4, !dbg !15205
  %call16 = call %struct.rtx_def* @gen_reg_rtx(i32 %15), !dbg !15206
  store %struct.rtx_def* %call16, %struct.rtx_def** %target.addr, align 8, !dbg !15207
  br label %if.end17, !dbg !15208

if.end17:                                         ; preds = %if.then15, %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15209
  %17 = load i8, i8* %unsignedp, align 1, !dbg !15210
  %18 = load i32, i32* %icode, align 4, !dbg !15211
  %call18 = call %struct.rtx_def* @vector_compare_rtx(%union.tree_node* %16, i8 zeroext %17, i32 %18), !dbg !15212
  store %struct.rtx_def* %call18, %struct.rtx_def** %comparison, align 8, !dbg !15213
  %19 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !15214
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !15214
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !15214
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !15214
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !15214
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !15214
  store %struct.rtx_def* %20, %struct.rtx_def** %cc_op0, align 8, !dbg !15215
  %21 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !15216
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !15216
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !15216
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !15216
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !15216
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !15216
  store %struct.rtx_def* %22, %struct.rtx_def** %cc_op1, align 8, !dbg !15217
  %23 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15218
  %call24 = call %struct.rtx_def* @expand_normal(%union.tree_node* %23), !dbg !15219
  store %struct.rtx_def* %call24, %struct.rtx_def** %rtx_op1, align 8, !dbg !15220
  %24 = load i32, i32* %icode, align 4, !dbg !15221
  %idxprom25 = zext i32 %24 to i64, !dbg !15223
  %arrayidx26 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom25, !dbg !15223
  %operand27 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx26, i32 0, i32 3, !dbg !15224
  %25 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand27, align 8, !dbg !15224
  %arrayidx28 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %25, i64 1, !dbg !15223
  %predicate29 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx28, i32 0, i32 0, !dbg !15225
  %26 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate29, align 8, !dbg !15225
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15226
  %28 = load i32, i32* %mode, align 4, !dbg !15227
  %call30 = call i32 %26(%struct.rtx_def* %27, i32 %28), !dbg !15223
  %tobool31 = icmp ne i32 %call30, 0, !dbg !15223
  br i1 %tobool31, label %if.end36, label %land.lhs.true, !dbg !15228

land.lhs.true:                                    ; preds = %if.end17
  %29 = load i32, i32* %mode, align 4, !dbg !15229
  %cmp32 = icmp ne i32 %29, 0, !dbg !15230
  br i1 %cmp32, label %if.then34, label %if.end36, !dbg !15231

if.then34:                                        ; preds = %land.lhs.true
  %30 = load i32, i32* %mode, align 4, !dbg !15232
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15233
  %call35 = call %struct.rtx_def* @force_reg(i32 %30, %struct.rtx_def* %31), !dbg !15234
  store %struct.rtx_def* %call35, %struct.rtx_def** %rtx_op1, align 8, !dbg !15235
  br label %if.end36, !dbg !15236

if.end36:                                         ; preds = %if.then34, %land.lhs.true, %if.end17
  %32 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !15237
  %call37 = call %struct.rtx_def* @expand_normal(%union.tree_node* %32), !dbg !15238
  store %struct.rtx_def* %call37, %struct.rtx_def** %rtx_op2, align 8, !dbg !15239
  %33 = load i32, i32* %icode, align 4, !dbg !15240
  %idxprom38 = zext i32 %33 to i64, !dbg !15242
  %arrayidx39 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom38, !dbg !15242
  %operand40 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx39, i32 0, i32 3, !dbg !15243
  %34 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand40, align 8, !dbg !15243
  %arrayidx41 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %34, i64 2, !dbg !15242
  %predicate42 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx41, i32 0, i32 0, !dbg !15244
  %35 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate42, align 8, !dbg !15244
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op2, align 8, !dbg !15245
  %37 = load i32, i32* %mode, align 4, !dbg !15246
  %call43 = call i32 %35(%struct.rtx_def* %36, i32 %37), !dbg !15242
  %tobool44 = icmp ne i32 %call43, 0, !dbg !15242
  br i1 %tobool44, label %if.end50, label %land.lhs.true45, !dbg !15247

land.lhs.true45:                                  ; preds = %if.end36
  %38 = load i32, i32* %mode, align 4, !dbg !15248
  %cmp46 = icmp ne i32 %38, 0, !dbg !15249
  br i1 %cmp46, label %if.then48, label %if.end50, !dbg !15250

if.then48:                                        ; preds = %land.lhs.true45
  %39 = load i32, i32* %mode, align 4, !dbg !15251
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op2, align 8, !dbg !15252
  %call49 = call %struct.rtx_def* @force_reg(i32 %39, %struct.rtx_def* %40), !dbg !15253
  store %struct.rtx_def* %call49, %struct.rtx_def** %rtx_op2, align 8, !dbg !15254
  br label %if.end50, !dbg !15255

if.end50:                                         ; preds = %if.then48, %land.lhs.true45, %if.end36
  %41 = load i32, i32* %icode, align 4, !dbg !15256
  %idxprom51 = zext i32 %41 to i64, !dbg !15256
  %arrayidx52 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom51, !dbg !15256
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx52, i32 0, i32 2, !dbg !15256
  %42 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !15256
  %43 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15257
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15258
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op2, align 8, !dbg !15259
  %46 = load %struct.rtx_def*, %struct.rtx_def** %comparison, align 8, !dbg !15260
  %47 = load %struct.rtx_def*, %struct.rtx_def** %cc_op0, align 8, !dbg !15261
  %48 = load %struct.rtx_def*, %struct.rtx_def** %cc_op1, align 8, !dbg !15262
  %call53 = call %struct.rtx_def* (%struct.rtx_def*, ...) %42(%struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %45, %struct.rtx_def* %46, %struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !15256
  %call54 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call53), !dbg !15263
  %49 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15264
  store %struct.rtx_def* %49, %struct.rtx_def** %retval, align 8, !dbg !15265
  br label %return, !dbg !15265

return:                                           ; preds = %if.end50, %if.then
  %50 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !15266
  ret %struct.rtx_def* %50, !dbg !15266
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @vector_compare_rtx(%union.tree_node* %cond, i8 zeroext %unsignedp, i32 %icode) #0 !dbg !15267 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %unsignedp.addr = alloca i8, align 1
  %icode.addr = alloca i32, align 4
  %rcode = alloca i32, align 4
  %t_op0 = alloca %union.tree_node*, align 8
  %t_op1 = alloca %union.tree_node*, align 8
  %rtx_op0 = alloca %struct.rtx_def*, align 8
  %rtx_op1 = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !15270, metadata !DIExpression()), !dbg !15271
  store i8 %unsignedp, i8* %unsignedp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unsignedp.addr, metadata !15272, metadata !DIExpression()), !dbg !15273
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !15274, metadata !DIExpression()), !dbg !15275
  call void @llvm.dbg.declare(metadata i32* %rcode, metadata !15276, metadata !DIExpression()), !dbg !15277
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_op0, metadata !15278, metadata !DIExpression()), !dbg !15279
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_op1, metadata !15280, metadata !DIExpression()), !dbg !15281
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_op0, metadata !15282, metadata !DIExpression()), !dbg !15283
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtx_op1, metadata !15284, metadata !DIExpression()), !dbg !15285
  %0 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !15286
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !15286
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !15286
  %bf.load = load i64, i64* %1, align 8, !dbg !15286
  %bf.clear = and i64 %bf.load, 65535, !dbg !15286
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15286
  %idxprom = sext i32 %bf.cast to i64, !dbg !15286
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !15286
  %2 = load i32, i32* %arrayidx, align 4, !dbg !15286
  %cmp = icmp eq i32 %2, 5, !dbg !15286
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15286

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6864, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15286
  br label %cond.end, !dbg !15286

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15286

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15286
  %3 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !15287
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !15287
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !15287
  %bf.load3 = load i64, i64* %4, align 8, !dbg !15287
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !15287
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !15287
  %5 = load i8, i8* %unsignedp.addr, align 1, !dbg !15288
  %call = call i32 @get_rtx_code(i32 %bf.cast5, i8 zeroext %5), !dbg !15289
  store i32 %call, i32* %rcode, align 4, !dbg !15290
  %6 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !15291
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !15291
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !15291
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !15291
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !15291
  store %union.tree_node* %7, %union.tree_node** %t_op0, align 8, !dbg !15292
  %8 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !15293
  %exp7 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !15293
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !15293
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 1, !dbg !15293
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !15293
  store %union.tree_node* %9, %union.tree_node** %t_op1, align 8, !dbg !15294
  %10 = load %union.tree_node*, %union.tree_node** %t_op0, align 8, !dbg !15295
  %11 = load %union.tree_node*, %union.tree_node** %t_op0, align 8, !dbg !15296
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !15296
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15296
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15296
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !15296
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !15296
  %bf.load11 = load i64, i64* %13, align 8, !dbg !15296
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !15296
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !15296
  %cmp14 = icmp eq i32 %bf.cast13, 14, !dbg !15296
  br i1 %cmp14, label %cond.true15, label %cond.false19, !dbg !15296

cond.true15:                                      ; preds = %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %t_op0, align 8, !dbg !15296
  %common16 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !15296
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !15296
  %15 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !15296
  %call18 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !15296
  br label %cond.end25, !dbg !15296

cond.false19:                                     ; preds = %cond.end
  %16 = load %union.tree_node*, %union.tree_node** %t_op0, align 8, !dbg !15296
  %common20 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !15296
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !15296
  %17 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !15296
  %type22 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !15296
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6, !dbg !15296
  %bf.load23 = load i32, i32* %mode, align 4, !dbg !15296
  %bf.lshr = lshr i32 %bf.load23, 16, !dbg !15296
  %bf.clear24 = and i32 %bf.lshr, 255, !dbg !15296
  br label %cond.end25, !dbg !15296

cond.end25:                                       ; preds = %cond.false19, %cond.true15
  %cond26 = phi i32 [ %call18, %cond.true15 ], [ %bf.clear24, %cond.false19 ], !dbg !15296
  %call27 = call %struct.rtx_def* @expand_expr(%union.tree_node* %10, %struct.rtx_def* null, i32 %cond26, i32 1), !dbg !15297
  store %struct.rtx_def* %call27, %struct.rtx_def** %rtx_op0, align 8, !dbg !15298
  %18 = load %union.tree_node*, %union.tree_node** %t_op1, align 8, !dbg !15299
  %19 = load %union.tree_node*, %union.tree_node** %t_op1, align 8, !dbg !15300
  %common28 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !15300
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !15300
  %20 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !15300
  %base30 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !15300
  %21 = bitcast %struct.tree_base* %base30 to i64*, !dbg !15300
  %bf.load31 = load i64, i64* %21, align 8, !dbg !15300
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !15300
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !15300
  %cmp34 = icmp eq i32 %bf.cast33, 14, !dbg !15300
  br i1 %cmp34, label %cond.true35, label %cond.false39, !dbg !15300

cond.true35:                                      ; preds = %cond.end25
  %22 = load %union.tree_node*, %union.tree_node** %t_op1, align 8, !dbg !15300
  %common36 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !15300
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !15300
  %23 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !15300
  %call38 = call i32 @vector_type_mode(%union.tree_node* %23), !dbg !15300
  br label %cond.end47, !dbg !15300

cond.false39:                                     ; preds = %cond.end25
  %24 = load %union.tree_node*, %union.tree_node** %t_op1, align 8, !dbg !15300
  %common40 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !15300
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !15300
  %25 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !15300
  %type42 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !15300
  %mode43 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type42, i32 0, i32 6, !dbg !15300
  %bf.load44 = load i32, i32* %mode43, align 4, !dbg !15300
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !15300
  %bf.clear46 = and i32 %bf.lshr45, 255, !dbg !15300
  br label %cond.end47, !dbg !15300

cond.end47:                                       ; preds = %cond.false39, %cond.true35
  %cond48 = phi i32 [ %call38, %cond.true35 ], [ %bf.clear46, %cond.false39 ], !dbg !15300
  %call49 = call %struct.rtx_def* @expand_expr(%union.tree_node* %18, %struct.rtx_def* null, i32 %cond48, i32 1), !dbg !15301
  store %struct.rtx_def* %call49, %struct.rtx_def** %rtx_op1, align 8, !dbg !15302
  %26 = load i32, i32* %icode.addr, align 4, !dbg !15303
  %idxprom50 = zext i32 %26 to i64, !dbg !15305
  %arrayidx51 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom50, !dbg !15305
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx51, i32 0, i32 3, !dbg !15306
  %27 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !15306
  %arrayidx52 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %27, i64 4, !dbg !15305
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx52, i32 0, i32 0, !dbg !15307
  %28 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !15307
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op0, align 8, !dbg !15308
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op0, align 8, !dbg !15309
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !15309
  %bf.load53 = load i32, i32* %31, align 8, !dbg !15309
  %bf.lshr54 = lshr i32 %bf.load53, 16, !dbg !15309
  %bf.clear55 = and i32 %bf.lshr54, 255, !dbg !15309
  %call56 = call i32 %28(%struct.rtx_def* %29, i32 %bf.clear55), !dbg !15305
  %tobool = icmp ne i32 %call56, 0, !dbg !15305
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !15310

land.lhs.true:                                    ; preds = %cond.end47
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op0, align 8, !dbg !15311
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !15311
  %bf.load57 = load i32, i32* %33, align 8, !dbg !15311
  %bf.lshr58 = lshr i32 %bf.load57, 16, !dbg !15311
  %bf.clear59 = and i32 %bf.lshr58, 255, !dbg !15311
  %cmp60 = icmp ne i32 %bf.clear59, 0, !dbg !15312
  br i1 %cmp60, label %if.then, label %if.end, !dbg !15313

if.then:                                          ; preds = %land.lhs.true
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op0, align 8, !dbg !15314
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !15314
  %bf.load61 = load i32, i32* %35, align 8, !dbg !15314
  %bf.lshr62 = lshr i32 %bf.load61, 16, !dbg !15314
  %bf.clear63 = and i32 %bf.lshr62, 255, !dbg !15314
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op0, align 8, !dbg !15315
  %call64 = call %struct.rtx_def* @force_reg(i32 %bf.clear63, %struct.rtx_def* %36), !dbg !15316
  store %struct.rtx_def* %call64, %struct.rtx_def** %rtx_op0, align 8, !dbg !15317
  br label %if.end, !dbg !15318

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end47
  %37 = load i32, i32* %icode.addr, align 4, !dbg !15319
  %idxprom65 = zext i32 %37 to i64, !dbg !15321
  %arrayidx66 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom65, !dbg !15321
  %operand67 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx66, i32 0, i32 3, !dbg !15322
  %38 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand67, align 8, !dbg !15322
  %arrayidx68 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %38, i64 5, !dbg !15321
  %predicate69 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx68, i32 0, i32 0, !dbg !15323
  %39 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate69, align 8, !dbg !15323
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15324
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15325
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !15325
  %bf.load70 = load i32, i32* %42, align 8, !dbg !15325
  %bf.lshr71 = lshr i32 %bf.load70, 16, !dbg !15325
  %bf.clear72 = and i32 %bf.lshr71, 255, !dbg !15325
  %call73 = call i32 %39(%struct.rtx_def* %40, i32 %bf.clear72), !dbg !15321
  %tobool74 = icmp ne i32 %call73, 0, !dbg !15321
  br i1 %tobool74, label %if.end85, label %land.lhs.true75, !dbg !15326

land.lhs.true75:                                  ; preds = %if.end
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15327
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !15327
  %bf.load76 = load i32, i32* %44, align 8, !dbg !15327
  %bf.lshr77 = lshr i32 %bf.load76, 16, !dbg !15327
  %bf.clear78 = and i32 %bf.lshr77, 255, !dbg !15327
  %cmp79 = icmp ne i32 %bf.clear78, 0, !dbg !15328
  br i1 %cmp79, label %if.then80, label %if.end85, !dbg !15329

if.then80:                                        ; preds = %land.lhs.true75
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15330
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !15330
  %bf.load81 = load i32, i32* %46, align 8, !dbg !15330
  %bf.lshr82 = lshr i32 %bf.load81, 16, !dbg !15330
  %bf.clear83 = and i32 %bf.lshr82, 255, !dbg !15330
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15331
  %call84 = call %struct.rtx_def* @force_reg(i32 %bf.clear83, %struct.rtx_def* %47), !dbg !15332
  store %struct.rtx_def* %call84, %struct.rtx_def** %rtx_op1, align 8, !dbg !15333
  br label %if.end85, !dbg !15334

if.end85:                                         ; preds = %if.then80, %land.lhs.true75, %if.end
  %48 = load i32, i32* %rcode, align 4, !dbg !15335
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op0, align 8, !dbg !15335
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtx_op1, align 8, !dbg !15335
  %call86 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %48, i32 0, %struct.rtx_def* %49, %struct.rtx_def* %50), !dbg !15335
  ret %struct.rtx_def* %call86, !dbg !15336
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_val_compare_and_swap(%struct.rtx_def* %mem, %struct.rtx_def* %old_val, %struct.rtx_def* %new_val, %struct.rtx_def* %target) #0 !dbg !15337 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %old_val.addr = alloca %struct.rtx_def*, align 8
  %new_val.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %icode = alloca i32, align 4
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !15340, metadata !DIExpression()), !dbg !15341
  store %struct.rtx_def* %old_val, %struct.rtx_def** %old_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_val.addr, metadata !15342, metadata !DIExpression()), !dbg !15343
  store %struct.rtx_def* %new_val, %struct.rtx_def** %new_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_val.addr, metadata !15344, metadata !DIExpression()), !dbg !15345
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !15346, metadata !DIExpression()), !dbg !15347
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15348, metadata !DIExpression()), !dbg !15349
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15350
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15350
  %bf.load = load i32, i32* %1, align 8, !dbg !15350
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15350
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15350
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15349
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15351, metadata !DIExpression()), !dbg !15352
  %2 = load i32, i32* %mode, align 4, !dbg !15353
  %idxprom = zext i32 %2 to i64, !dbg !15354
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom, !dbg !15354
  %3 = load i32, i32* %arrayidx, align 4, !dbg !15354
  store i32 %3, i32* %icode, align 4, !dbg !15352
  %4 = load i32, i32* %icode, align 4, !dbg !15355
  %cmp = icmp eq i32 %4, 2956, !dbg !15357
  br i1 %cmp, label %if.then, label %if.end, !dbg !15358

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15359
  br label %return, !dbg !15359

if.end:                                           ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15360
  %6 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15361
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15362
  %8 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15363
  %9 = load i32, i32* %icode, align 4, !dbg !15364
  %call = call %struct.rtx_def* @expand_val_compare_and_swap_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* %8, i32 %9), !dbg !15365
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !15366
  br label %return, !dbg !15366

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !15367
  ret %struct.rtx_def* %10, !dbg !15367
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_val_compare_and_swap_1(%struct.rtx_def* %mem, %struct.rtx_def* %old_val, %struct.rtx_def* %new_val, %struct.rtx_def* %target, i32 %icode) #0 !dbg !15368 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %old_val.addr = alloca %struct.rtx_def*, align 8
  %new_val.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %icode.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !15371, metadata !DIExpression()), !dbg !15372
  store %struct.rtx_def* %old_val, %struct.rtx_def** %old_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_val.addr, metadata !15373, metadata !DIExpression()), !dbg !15374
  store %struct.rtx_def* %new_val, %struct.rtx_def** %new_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_val.addr, metadata !15375, metadata !DIExpression()), !dbg !15376
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !15377, metadata !DIExpression()), !dbg !15378
  store i32 %icode, i32* %icode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %icode.addr, metadata !15379, metadata !DIExpression()), !dbg !15380
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15381, metadata !DIExpression()), !dbg !15382
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15383
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15383
  %bf.load = load i32, i32* %1, align 8, !dbg !15383
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15383
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15383
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15382
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !15384, metadata !DIExpression()), !dbg !15385
  %2 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15386
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !15386
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !15388

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %icode.addr, align 4, !dbg !15389
  %idxprom = zext i32 %3 to i64, !dbg !15390
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !15390
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !15391
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !15391
  %arrayidx1 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i64 0, !dbg !15390
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx1, i32 0, i32 0, !dbg !15392
  %5 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !15392
  %6 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15393
  %7 = load i32, i32* %mode, align 4, !dbg !15394
  %call = call i32 %5(%struct.rtx_def* %6, i32 %7), !dbg !15390
  %tobool2 = icmp ne i32 %call, 0, !dbg !15390
  br i1 %tobool2, label %if.end, label %if.then, !dbg !15395

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load i32, i32* %mode, align 4, !dbg !15396
  %call3 = call %struct.rtx_def* @gen_reg_rtx(i32 %8), !dbg !15397
  store %struct.rtx_def* %call3, %struct.rtx_def** %target.addr, align 8, !dbg !15398
  br label %if.end, !dbg !15399

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15400
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !15400
  %bf.load4 = load i32, i32* %10, align 8, !dbg !15400
  %bf.lshr5 = lshr i32 %bf.load4, 16, !dbg !15400
  %bf.clear6 = and i32 %bf.lshr5, 255, !dbg !15400
  %cmp = icmp ne i32 %bf.clear6, 0, !dbg !15402
  br i1 %cmp, label %land.lhs.true, label %if.end16, !dbg !15403

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15404
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !15404
  %bf.load7 = load i32, i32* %12, align 8, !dbg !15404
  %bf.lshr8 = lshr i32 %bf.load7, 16, !dbg !15404
  %bf.clear9 = and i32 %bf.lshr8, 255, !dbg !15404
  %13 = load i32, i32* %mode, align 4, !dbg !15405
  %cmp10 = icmp ne i32 %bf.clear9, %13, !dbg !15406
  br i1 %cmp10, label %if.then11, label %if.end16, !dbg !15407

if.then11:                                        ; preds = %land.lhs.true
  %14 = load i32, i32* %mode, align 4, !dbg !15408
  %15 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15409
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !15409
  %bf.load12 = load i32, i32* %16, align 8, !dbg !15409
  %bf.lshr13 = lshr i32 %bf.load12, 16, !dbg !15409
  %bf.clear14 = and i32 %bf.lshr13, 255, !dbg !15409
  %17 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15410
  %call15 = call %struct.rtx_def* @convert_modes(i32 %14, i32 %bf.clear14, %struct.rtx_def* %17, i32 1), !dbg !15411
  store %struct.rtx_def* %call15, %struct.rtx_def** %old_val.addr, align 8, !dbg !15412
  br label %if.end16, !dbg !15413

if.end16:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %18 = load i32, i32* %icode.addr, align 4, !dbg !15414
  %idxprom17 = zext i32 %18 to i64, !dbg !15416
  %arrayidx18 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom17, !dbg !15416
  %operand19 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx18, i32 0, i32 3, !dbg !15417
  %19 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand19, align 8, !dbg !15417
  %arrayidx20 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %19, i64 2, !dbg !15416
  %predicate21 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx20, i32 0, i32 0, !dbg !15418
  %20 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate21, align 8, !dbg !15418
  %21 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15419
  %22 = load i32, i32* %mode, align 4, !dbg !15420
  %call22 = call i32 %20(%struct.rtx_def* %21, i32 %22), !dbg !15416
  %tobool23 = icmp ne i32 %call22, 0, !dbg !15416
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !15421

if.then24:                                        ; preds = %if.end16
  %23 = load i32, i32* %mode, align 4, !dbg !15422
  %24 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15423
  %call25 = call %struct.rtx_def* @force_reg(i32 %23, %struct.rtx_def* %24), !dbg !15424
  store %struct.rtx_def* %call25, %struct.rtx_def** %old_val.addr, align 8, !dbg !15425
  br label %if.end26, !dbg !15426

if.end26:                                         ; preds = %if.then24, %if.end16
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15427
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !15427
  %bf.load27 = load i32, i32* %26, align 8, !dbg !15427
  %bf.lshr28 = lshr i32 %bf.load27, 16, !dbg !15427
  %bf.clear29 = and i32 %bf.lshr28, 255, !dbg !15427
  %cmp30 = icmp ne i32 %bf.clear29, 0, !dbg !15429
  br i1 %cmp30, label %land.lhs.true31, label %if.end41, !dbg !15430

land.lhs.true31:                                  ; preds = %if.end26
  %27 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15431
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !15431
  %bf.load32 = load i32, i32* %28, align 8, !dbg !15431
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !15431
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !15431
  %29 = load i32, i32* %mode, align 4, !dbg !15432
  %cmp35 = icmp ne i32 %bf.clear34, %29, !dbg !15433
  br i1 %cmp35, label %if.then36, label %if.end41, !dbg !15434

if.then36:                                        ; preds = %land.lhs.true31
  %30 = load i32, i32* %mode, align 4, !dbg !15435
  %31 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15436
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !15436
  %bf.load37 = load i32, i32* %32, align 8, !dbg !15436
  %bf.lshr38 = lshr i32 %bf.load37, 16, !dbg !15436
  %bf.clear39 = and i32 %bf.lshr38, 255, !dbg !15436
  %33 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15437
  %call40 = call %struct.rtx_def* @convert_modes(i32 %30, i32 %bf.clear39, %struct.rtx_def* %33, i32 1), !dbg !15438
  store %struct.rtx_def* %call40, %struct.rtx_def** %new_val.addr, align 8, !dbg !15439
  br label %if.end41, !dbg !15440

if.end41:                                         ; preds = %if.then36, %land.lhs.true31, %if.end26
  %34 = load i32, i32* %icode.addr, align 4, !dbg !15441
  %idxprom42 = zext i32 %34 to i64, !dbg !15443
  %arrayidx43 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom42, !dbg !15443
  %operand44 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx43, i32 0, i32 3, !dbg !15444
  %35 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand44, align 8, !dbg !15444
  %arrayidx45 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %35, i64 3, !dbg !15443
  %predicate46 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx45, i32 0, i32 0, !dbg !15445
  %36 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate46, align 8, !dbg !15445
  %37 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15446
  %38 = load i32, i32* %mode, align 4, !dbg !15447
  %call47 = call i32 %36(%struct.rtx_def* %37, i32 %38), !dbg !15443
  %tobool48 = icmp ne i32 %call47, 0, !dbg !15443
  br i1 %tobool48, label %if.end51, label %if.then49, !dbg !15448

if.then49:                                        ; preds = %if.end41
  %39 = load i32, i32* %mode, align 4, !dbg !15449
  %40 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15450
  %call50 = call %struct.rtx_def* @force_reg(i32 %39, %struct.rtx_def* %40), !dbg !15451
  store %struct.rtx_def* %call50, %struct.rtx_def** %new_val.addr, align 8, !dbg !15452
  br label %if.end51, !dbg !15453

if.end51:                                         ; preds = %if.then49, %if.end41
  %41 = load i32, i32* %icode.addr, align 4, !dbg !15454
  %idxprom52 = zext i32 %41 to i64, !dbg !15454
  %arrayidx53 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom52, !dbg !15454
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx53, i32 0, i32 2, !dbg !15454
  %42 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !15454
  %43 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15455
  %44 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15456
  %45 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15457
  %46 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15458
  %call54 = call %struct.rtx_def* (%struct.rtx_def*, ...) %42(%struct.rtx_def* %43, %struct.rtx_def* %44, %struct.rtx_def* %45, %struct.rtx_def* %46), !dbg !15454
  store %struct.rtx_def* %call54, %struct.rtx_def** %insn, align 8, !dbg !15459
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15460
  %cmp55 = icmp eq %struct.rtx_def* %47, null, !dbg !15462
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !15463

if.then56:                                        ; preds = %if.end51
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15464
  br label %return, !dbg !15464

if.end57:                                         ; preds = %if.end51
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15465
  %call58 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %48), !dbg !15466
  %49 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15467
  store %struct.rtx_def* %49, %struct.rtx_def** %retval, align 8, !dbg !15468
  br label %return, !dbg !15468

return:                                           ; preds = %if.end57, %if.then56
  %50 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !15469
  ret %struct.rtx_def* %50, !dbg !15469
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_bool_compare_and_swap(%struct.rtx_def* %mem, %struct.rtx_def* %old_val, %struct.rtx_def* %new_val, %struct.rtx_def* %target) #0 !dbg !15470 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %old_val.addr = alloca %struct.rtx_def*, align 8
  %new_val.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %icode = alloca i32, align 4
  %subtarget = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %cc_reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !15471, metadata !DIExpression()), !dbg !15472
  store %struct.rtx_def* %old_val, %struct.rtx_def** %old_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_val.addr, metadata !15473, metadata !DIExpression()), !dbg !15474
  store %struct.rtx_def* %new_val, %struct.rtx_def** %new_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_val.addr, metadata !15475, metadata !DIExpression()), !dbg !15476
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !15477, metadata !DIExpression()), !dbg !15478
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15479, metadata !DIExpression()), !dbg !15480
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15481
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15481
  %bf.load = load i32, i32* %1, align 8, !dbg !15481
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15481
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15481
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15480
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15482, metadata !DIExpression()), !dbg !15483
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !15484, metadata !DIExpression()), !dbg !15485
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !15486, metadata !DIExpression()), !dbg !15487
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cc_reg, metadata !15488, metadata !DIExpression()), !dbg !15489
  %2 = load i32, i32* %mode, align 4, !dbg !15490
  %idxprom = zext i32 %2 to i64, !dbg !15491
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom, !dbg !15491
  %3 = load i32, i32* %arrayidx, align 4, !dbg !15491
  store i32 %3, i32* %icode, align 4, !dbg !15492
  %4 = load i32, i32* %icode, align 4, !dbg !15493
  %cmp = icmp eq i32 %4, 2956, !dbg !15495
  br i1 %cmp, label %if.then, label %if.end, !dbg !15496

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15497
  br label %return, !dbg !15497

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !15498

do.body:                                          ; preds = %do.cond, %if.end
  call void @start_sequence(), !dbg !15499
  %5 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15501
  %6 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15502
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_val.addr, align 8, !dbg !15503
  %8 = load i32, i32* %icode, align 4, !dbg !15504
  %call = call %struct.rtx_def* @expand_val_compare_and_swap_1(%struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, %struct.rtx_def* null, i32 %8), !dbg !15505
  store %struct.rtx_def* %call, %struct.rtx_def** %subtarget, align 8, !dbg !15506
  store %struct.rtx_def* null, %struct.rtx_def** %cc_reg, align 8, !dbg !15507
  %9 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !15508
  %cmp1 = icmp eq %struct.rtx_def* %9, null, !dbg !15510
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !15511

if.then2:                                         ; preds = %do.body
  call void @end_sequence(), !dbg !15512
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15514
  br label %return, !dbg !15514

if.end3:                                          ; preds = %do.body
  %call4 = call i32 @have_insn_for(i32 48, i32 2), !dbg !15515
  %tobool = icmp ne i32 %call4, 0, !dbg !15515
  br i1 %tobool, label %if.then5, label %if.end8, !dbg !15517

if.then5:                                         ; preds = %if.end3
  %call6 = call %struct.rtx_def* @get_last_insn(), !dbg !15518
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call6, i32 0, i32 1, !dbg !15518
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !15518
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !15518
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !15518
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !15518
  %11 = bitcast %struct.rtx_def** %cc_reg to i8*, !dbg !15519
  call void @note_stores(%struct.rtx_def* %10, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @find_cc_set, i8* %11), !dbg !15520
  br label %if.end8, !dbg !15520

if.end8:                                          ; preds = %if.then5, %if.end3
  %call9 = call %struct.rtx_def* @get_insns(), !dbg !15521
  store %struct.rtx_def* %call9, %struct.rtx_def** %seq, align 8, !dbg !15522
  call void @end_sequence(), !dbg !15523
  %12 = load %struct.rtx_def*, %struct.rtx_def** %cc_reg, align 8, !dbg !15524
  %tobool10 = icmp ne %struct.rtx_def* %12, null, !dbg !15524
  br i1 %tobool10, label %if.end16, label %land.lhs.true, !dbg !15526

land.lhs.true:                                    ; preds = %if.end8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15527
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !15527
  %bf.load11 = load i32, i32* %14, align 8, !dbg !15527
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !15527
  %cmp13 = icmp eq i32 %bf.clear12, 43, !dbg !15527
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !15528

if.then14:                                        ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %seq, align 8, !dbg !15529
  %15 = load i32, i32* %mode, align 4, !dbg !15531
  %16 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15532
  %call15 = call %struct.rtx_def* @force_reg(i32 %15, %struct.rtx_def* %16), !dbg !15533
  store %struct.rtx_def* %call15, %struct.rtx_def** %old_val.addr, align 8, !dbg !15534
  br label %if.end16, !dbg !15535

if.end16:                                         ; preds = %if.then14, %land.lhs.true, %if.end8
  br label %do.cond, !dbg !15536

do.cond:                                          ; preds = %if.end16
  %17 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !15537
  %tobool17 = icmp ne %struct.rtx_def* %17, null, !dbg !15538
  %lnot = xor i1 %tobool17, true, !dbg !15538
  br i1 %lnot, label %do.body, label %do.end, !dbg !15536, !llvm.loop !15539

do.end:                                           ; preds = %do.cond
  %18 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !15541
  %call18 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %18), !dbg !15542
  %19 = load %struct.rtx_def*, %struct.rtx_def** %cc_reg, align 8, !dbg !15543
  %tobool19 = icmp ne %struct.rtx_def* %19, null, !dbg !15543
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !15545

if.then20:                                        ; preds = %do.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15546
  %21 = load %struct.rtx_def*, %struct.rtx_def** %cc_reg, align 8, !dbg !15547
  %22 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !15548
  %call21 = call %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def* %20, i32 81, %struct.rtx_def* %21, %struct.rtx_def* %22, i32 0, i32 0, i32 1), !dbg !15549
  store %struct.rtx_def* %call21, %struct.rtx_def** %retval, align 8, !dbg !15550
  br label %return, !dbg !15550

if.else:                                          ; preds = %do.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !15551
  %24 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !15552
  %25 = load %struct.rtx_def*, %struct.rtx_def** %old_val.addr, align 8, !dbg !15553
  %call22 = call %struct.rtx_def* @emit_store_flag_force(%struct.rtx_def* %23, i32 81, %struct.rtx_def* %24, %struct.rtx_def* %25, i32 0, i32 1, i32 1), !dbg !15554
  store %struct.rtx_def* %call22, %struct.rtx_def** %retval, align 8, !dbg !15555
  br label %return, !dbg !15555

return:                                           ; preds = %if.else, %if.then20, %if.then2, %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !15556
  ret %struct.rtx_def* %26, !dbg !15556
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_cc_set(%struct.rtx_def* %x, %struct.rtx_def* %pat, i8* %data) #0 !dbg !15557 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %p_cc_reg = alloca %struct.rtx_def**, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !15558, metadata !DIExpression()), !dbg !15559
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !15560, metadata !DIExpression()), !dbg !15561
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !15562, metadata !DIExpression()), !dbg !15563
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !15564
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15564
  %bf.load = load i32, i32* %1, align 8, !dbg !15564
  %bf.clear = and i32 %bf.load, 65535, !dbg !15564
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !15564
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !15566

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !15567
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !15567
  %bf.load1 = load i32, i32* %3, align 8, !dbg !15567
  %bf.lshr = lshr i32 %bf.load1, 16, !dbg !15567
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !15567
  %idxprom = zext i32 %bf.clear2 to i64, !dbg !15567
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !15567
  %4 = load i8, i8* %arrayidx, align 1, !dbg !15567
  %conv = zext i8 %4 to i32, !dbg !15567
  %cmp3 = icmp eq i32 %conv, 1, !dbg !15568
  br i1 %cmp3, label %land.lhs.true5, label %if.end, !dbg !15569

land.lhs.true5:                                   ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !15570
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !15570
  %bf.load6 = load i32, i32* %6, align 8, !dbg !15570
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !15570
  %cmp8 = icmp eq i32 %bf.clear7, 23, !dbg !15571
  br i1 %cmp8, label %if.then, label %if.end, !dbg !15572

if.then:                                          ; preds = %land.lhs.true5
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %p_cc_reg, metadata !15573, metadata !DIExpression()), !dbg !15575
  %7 = load i8*, i8** %data.addr, align 8, !dbg !15576
  %8 = bitcast i8* %7 to %struct.rtx_def**, !dbg !15577
  store %struct.rtx_def** %8, %struct.rtx_def*** %p_cc_reg, align 8, !dbg !15575
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %p_cc_reg, align 8, !dbg !15578
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8, !dbg !15578
  %tobool = icmp ne %struct.rtx_def* %10, null, !dbg !15578
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15578

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 7013, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15578
  br label %cond.end, !dbg !15578

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !15578

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15578
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !15579
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %p_cc_reg, align 8, !dbg !15580
  store %struct.rtx_def* %11, %struct.rtx_def** %12, align 8, !dbg !15581
  br label %if.end, !dbg !15582

if.end:                                           ; preds = %cond.end, %land.lhs.true5, %land.lhs.true, %entry
  ret void, !dbg !15583
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_sync_operation(%struct.rtx_def* %mem, %struct.rtx_def* %val, i32 %code) #0 !dbg !15584 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %val.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %mode = alloca i32, align 4
  %icode = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %t0 = alloca %struct.rtx_def*, align 8
  %t1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !15587, metadata !DIExpression()), !dbg !15588
  store %struct.rtx_def* %val, %struct.rtx_def** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val.addr, metadata !15589, metadata !DIExpression()), !dbg !15590
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !15591, metadata !DIExpression()), !dbg !15592
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15593, metadata !DIExpression()), !dbg !15594
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15595
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15595
  %bf.load = load i32, i32* %1, align 8, !dbg !15595
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15595
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15595
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15594
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15596, metadata !DIExpression()), !dbg !15597
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !15598, metadata !DIExpression()), !dbg !15599
  %2 = load i32, i32* %code.addr, align 4, !dbg !15600
  switch i32 %2, label %sw.default [
    i32 49, label %sw.bb
    i32 62, label %sw.bb1
    i32 63, label %sw.bb4
    i32 61, label %sw.bb7
    i32 64, label %sw.bb10
    i32 50, label %sw.bb13
  ], !dbg !15601

sw.bb:                                            ; preds = %entry
  %3 = load i32, i32* %mode, align 4, !dbg !15602
  %idxprom = zext i32 %3 to i64, !dbg !15604
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @sync_add_optab, i64 0, i64 %idxprom, !dbg !15604
  %4 = load i32, i32* %arrayidx, align 4, !dbg !15604
  store i32 %4, i32* %icode, align 4, !dbg !15605
  br label %sw.epilog, !dbg !15606

sw.bb1:                                           ; preds = %entry
  %5 = load i32, i32* %mode, align 4, !dbg !15607
  %idxprom2 = zext i32 %5 to i64, !dbg !15608
  %arrayidx3 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_ior_optab, i64 0, i64 %idxprom2, !dbg !15608
  %6 = load i32, i32* %arrayidx3, align 4, !dbg !15608
  store i32 %6, i32* %icode, align 4, !dbg !15609
  br label %sw.epilog, !dbg !15610

sw.bb4:                                           ; preds = %entry
  %7 = load i32, i32* %mode, align 4, !dbg !15611
  %idxprom5 = zext i32 %7 to i64, !dbg !15612
  %arrayidx6 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_xor_optab, i64 0, i64 %idxprom5, !dbg !15612
  %8 = load i32, i32* %arrayidx6, align 4, !dbg !15612
  store i32 %8, i32* %icode, align 4, !dbg !15613
  br label %sw.epilog, !dbg !15614

sw.bb7:                                           ; preds = %entry
  %9 = load i32, i32* %mode, align 4, !dbg !15615
  %idxprom8 = zext i32 %9 to i64, !dbg !15616
  %arrayidx9 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_and_optab, i64 0, i64 %idxprom8, !dbg !15616
  %10 = load i32, i32* %arrayidx9, align 4, !dbg !15616
  store i32 %10, i32* %icode, align 4, !dbg !15617
  br label %sw.epilog, !dbg !15618

sw.bb10:                                          ; preds = %entry
  %11 = load i32, i32* %mode, align 4, !dbg !15619
  %idxprom11 = zext i32 %11 to i64, !dbg !15620
  %arrayidx12 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_nand_optab, i64 0, i64 %idxprom11, !dbg !15620
  %12 = load i32, i32* %arrayidx12, align 4, !dbg !15620
  store i32 %12, i32* %icode, align 4, !dbg !15621
  br label %sw.epilog, !dbg !15622

sw.bb13:                                          ; preds = %entry
  %13 = load i32, i32* %mode, align 4, !dbg !15623
  %idxprom14 = zext i32 %13 to i64, !dbg !15624
  %arrayidx15 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_sub_optab, i64 0, i64 %idxprom14, !dbg !15624
  %14 = load i32, i32* %arrayidx15, align 4, !dbg !15624
  store i32 %14, i32* %icode, align 4, !dbg !15625
  %15 = load i32, i32* %icode, align 4, !dbg !15626
  %cmp = icmp eq i32 %15, 2956, !dbg !15628
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !15629

lor.lhs.false:                                    ; preds = %sw.bb13
  %16 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15630
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !15630
  %bf.load16 = load i32, i32* %17, align 8, !dbg !15630
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !15630
  %cmp18 = icmp eq i32 %bf.clear17, 30, !dbg !15630
  br i1 %cmp18, label %if.then, label %if.end23, !dbg !15631

if.then:                                          ; preds = %lor.lhs.false, %sw.bb13
  %18 = load i32, i32* %mode, align 4, !dbg !15632
  %idxprom19 = zext i32 %18 to i64, !dbg !15634
  %arrayidx20 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_add_optab, i64 0, i64 %idxprom19, !dbg !15634
  %19 = load i32, i32* %arrayidx20, align 4, !dbg !15634
  store i32 %19, i32* %icode, align 4, !dbg !15635
  %20 = load i32, i32* %icode, align 4, !dbg !15636
  %cmp21 = icmp ne i32 %20, 2956, !dbg !15638
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !15639

if.then22:                                        ; preds = %if.then
  %21 = load i32, i32* %mode, align 4, !dbg !15640
  %22 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15642
  %call = call %struct.rtx_def* @expand_simple_unop(i32 %21, i32 51, %struct.rtx_def* %22, %struct.rtx_def* null, i32 1), !dbg !15643
  store %struct.rtx_def* %call, %struct.rtx_def** %val.addr, align 8, !dbg !15644
  store i32 49, i32* %code.addr, align 4, !dbg !15645
  br label %if.end, !dbg !15646

if.end:                                           ; preds = %if.then22, %if.then
  br label %if.end23, !dbg !15647

if.end23:                                         ; preds = %if.end, %lor.lhs.false
  br label %sw.epilog, !dbg !15648

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 7183, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15649
  br label %sw.epilog, !dbg !15650

sw.epilog:                                        ; preds = %sw.default, %if.end23, %sw.bb10, %sw.bb7, %sw.bb4, %sw.bb1, %sw.bb
  %23 = load i32, i32* %icode, align 4, !dbg !15651
  %cmp24 = icmp ne i32 %23, 2956, !dbg !15653
  br i1 %cmp24, label %if.then25, label %if.end54, !dbg !15654

if.then25:                                        ; preds = %sw.epilog
  %24 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15655
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !15655
  %bf.load26 = load i32, i32* %25, align 8, !dbg !15655
  %bf.lshr27 = lshr i32 %bf.load26, 16, !dbg !15655
  %bf.clear28 = and i32 %bf.lshr27, 255, !dbg !15655
  %cmp29 = icmp ne i32 %bf.clear28, 0, !dbg !15658
  br i1 %cmp29, label %land.lhs.true, label %if.end39, !dbg !15659

land.lhs.true:                                    ; preds = %if.then25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15660
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !15660
  %bf.load30 = load i32, i32* %27, align 8, !dbg !15660
  %bf.lshr31 = lshr i32 %bf.load30, 16, !dbg !15660
  %bf.clear32 = and i32 %bf.lshr31, 255, !dbg !15660
  %28 = load i32, i32* %mode, align 4, !dbg !15661
  %cmp33 = icmp ne i32 %bf.clear32, %28, !dbg !15662
  br i1 %cmp33, label %if.then34, label %if.end39, !dbg !15663

if.then34:                                        ; preds = %land.lhs.true
  %29 = load i32, i32* %mode, align 4, !dbg !15664
  %30 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15665
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !15665
  %bf.load35 = load i32, i32* %31, align 8, !dbg !15665
  %bf.lshr36 = lshr i32 %bf.load35, 16, !dbg !15665
  %bf.clear37 = and i32 %bf.lshr36, 255, !dbg !15665
  %32 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15666
  %call38 = call %struct.rtx_def* @convert_modes(i32 %29, i32 %bf.clear37, %struct.rtx_def* %32, i32 1), !dbg !15667
  store %struct.rtx_def* %call38, %struct.rtx_def** %val.addr, align 8, !dbg !15668
  br label %if.end39, !dbg !15669

if.end39:                                         ; preds = %if.then34, %land.lhs.true, %if.then25
  %33 = load i32, i32* %icode, align 4, !dbg !15670
  %idxprom40 = zext i32 %33 to i64, !dbg !15672
  %arrayidx41 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom40, !dbg !15672
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx41, i32 0, i32 3, !dbg !15673
  %34 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !15673
  %arrayidx42 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %34, i64 1, !dbg !15672
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx42, i32 0, i32 0, !dbg !15674
  %35 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !15674
  %36 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15675
  %37 = load i32, i32* %mode, align 4, !dbg !15676
  %call43 = call i32 %35(%struct.rtx_def* %36, i32 %37), !dbg !15672
  %tobool = icmp ne i32 %call43, 0, !dbg !15672
  br i1 %tobool, label %if.end46, label %if.then44, !dbg !15677

if.then44:                                        ; preds = %if.end39
  %38 = load i32, i32* %mode, align 4, !dbg !15678
  %39 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15679
  %call45 = call %struct.rtx_def* @force_reg(i32 %38, %struct.rtx_def* %39), !dbg !15680
  store %struct.rtx_def* %call45, %struct.rtx_def** %val.addr, align 8, !dbg !15681
  br label %if.end46, !dbg !15682

if.end46:                                         ; preds = %if.then44, %if.end39
  %40 = load i32, i32* %icode, align 4, !dbg !15683
  %idxprom47 = zext i32 %40 to i64, !dbg !15683
  %arrayidx48 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom47, !dbg !15683
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx48, i32 0, i32 2, !dbg !15683
  %41 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !15683
  %42 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15684
  %43 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15685
  %call49 = call %struct.rtx_def* (%struct.rtx_def*, ...) %41(%struct.rtx_def* %42, %struct.rtx_def* %43), !dbg !15683
  store %struct.rtx_def* %call49, %struct.rtx_def** %insn, align 8, !dbg !15686
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15687
  %tobool50 = icmp ne %struct.rtx_def* %44, null, !dbg !15687
  br i1 %tobool50, label %if.then51, label %if.end53, !dbg !15689

if.then51:                                        ; preds = %if.end46
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15690
  %call52 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %45), !dbg !15692
  %46 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !15693
  store %struct.rtx_def* %46, %struct.rtx_def** %retval, align 8, !dbg !15694
  br label %return, !dbg !15694

if.end53:                                         ; preds = %if.end46
  br label %if.end54, !dbg !15695

if.end54:                                         ; preds = %if.end53, %sw.epilog
  %47 = load i32, i32* %mode, align 4, !dbg !15696
  %idxprom55 = zext i32 %47 to i64, !dbg !15698
  %arrayidx56 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom55, !dbg !15698
  %48 = load i32, i32* %arrayidx56, align 4, !dbg !15698
  %cmp57 = icmp ne i32 %48, 2956, !dbg !15699
  br i1 %cmp57, label %if.then58, label %if.end73, !dbg !15700

if.then58:                                        ; preds = %if.end54
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t0, metadata !15701, metadata !DIExpression()), !dbg !15703
  %49 = load i32, i32* %mode, align 4, !dbg !15704
  %call59 = call %struct.rtx_def* @gen_reg_rtx(i32 %49), !dbg !15705
  store %struct.rtx_def* %call59, %struct.rtx_def** %t0, align 8, !dbg !15703
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1, metadata !15706, metadata !DIExpression()), !dbg !15707
  call void @start_sequence(), !dbg !15708
  %50 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !15709
  store %struct.rtx_def* %50, %struct.rtx_def** %t1, align 8, !dbg !15710
  %51 = load i32, i32* %code.addr, align 4, !dbg !15711
  %cmp60 = icmp eq i32 %51, 64, !dbg !15713
  br i1 %cmp60, label %if.then61, label %if.else, !dbg !15714

if.then61:                                        ; preds = %if.then58
  %52 = load i32, i32* %mode, align 4, !dbg !15715
  %53 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !15717
  %54 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15718
  %call62 = call %struct.rtx_def* @expand_simple_binop(i32 %52, i32 61, %struct.rtx_def* %53, %struct.rtx_def* %54, %struct.rtx_def* null, i32 1, i32 3), !dbg !15719
  store %struct.rtx_def* %call62, %struct.rtx_def** %t1, align 8, !dbg !15720
  %55 = load i32, i32* %mode, align 4, !dbg !15721
  %56 = load i32, i32* %code.addr, align 4, !dbg !15722
  %57 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !15723
  %call63 = call %struct.rtx_def* @expand_simple_unop(i32 %55, i32 %56, %struct.rtx_def* %57, %struct.rtx_def* null, i32 1), !dbg !15724
  store %struct.rtx_def* %call63, %struct.rtx_def** %t1, align 8, !dbg !15725
  br label %if.end65, !dbg !15726

if.else:                                          ; preds = %if.then58
  %58 = load i32, i32* %mode, align 4, !dbg !15727
  %59 = load i32, i32* %code.addr, align 4, !dbg !15728
  %60 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !15729
  %61 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15730
  %call64 = call %struct.rtx_def* @expand_simple_binop(i32 %58, i32 %59, %struct.rtx_def* %60, %struct.rtx_def* %61, %struct.rtx_def* null, i32 1, i32 3), !dbg !15731
  store %struct.rtx_def* %call64, %struct.rtx_def** %t1, align 8, !dbg !15732
  br label %if.end65

if.end65:                                         ; preds = %if.else, %if.then61
  %call66 = call %struct.rtx_def* @get_insns(), !dbg !15733
  store %struct.rtx_def* %call66, %struct.rtx_def** %insn, align 8, !dbg !15734
  call void @end_sequence(), !dbg !15735
  %62 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !15736
  %cmp67 = icmp ne %struct.rtx_def* %62, null, !dbg !15738
  br i1 %cmp67, label %land.lhs.true68, label %if.end72, !dbg !15739

land.lhs.true68:                                  ; preds = %if.end65
  %63 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15740
  %64 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !15741
  %65 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !15742
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !15743
  %call69 = call zeroext i8 @expand_compare_and_swap_loop(%struct.rtx_def* %63, %struct.rtx_def* %64, %struct.rtx_def* %65, %struct.rtx_def* %66), !dbg !15744
  %conv = zext i8 %call69 to i32, !dbg !15744
  %tobool70 = icmp ne i32 %conv, 0, !dbg !15744
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !15745

if.then71:                                        ; preds = %land.lhs.true68
  %67 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !15746
  store %struct.rtx_def* %67, %struct.rtx_def** %retval, align 8, !dbg !15747
  br label %return, !dbg !15747

if.end72:                                         ; preds = %land.lhs.true68, %if.end65
  br label %if.end73, !dbg !15748

if.end73:                                         ; preds = %if.end72, %if.end54
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !15749
  br label %return, !dbg !15749

return:                                           ; preds = %if.end73, %if.then71, %if.then51
  %68 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !15750
  ret %struct.rtx_def* %68, !dbg !15750
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expand_compare_and_swap_loop(%struct.rtx_def* %mem, %struct.rtx_def* %old_reg, %struct.rtx_def* %new_reg, %struct.rtx_def* %seq) #0 !dbg !15751 {
entry:
  %retval = alloca i8, align 1
  %mem.addr = alloca %struct.rtx_def*, align 8
  %old_reg.addr = alloca %struct.rtx_def*, align 8
  %new_reg.addr = alloca %struct.rtx_def*, align 8
  %seq.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %icode = alloca i32, align 4
  %label = alloca %struct.rtx_def*, align 8
  %cmp_reg = alloca %struct.rtx_def*, align 8
  %subtarget = alloca %struct.rtx_def*, align 8
  %cc_reg = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !15754, metadata !DIExpression()), !dbg !15755
  store %struct.rtx_def* %old_reg, %struct.rtx_def** %old_reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_reg.addr, metadata !15756, metadata !DIExpression()), !dbg !15757
  store %struct.rtx_def* %new_reg, %struct.rtx_def** %new_reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_reg.addr, metadata !15758, metadata !DIExpression()), !dbg !15759
  store %struct.rtx_def* %seq, %struct.rtx_def** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq.addr, metadata !15760, metadata !DIExpression()), !dbg !15761
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15762, metadata !DIExpression()), !dbg !15763
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15764
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15764
  %bf.load = load i32, i32* %1, align 8, !dbg !15764
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15764
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15764
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15763
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15765, metadata !DIExpression()), !dbg !15766
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !15767, metadata !DIExpression()), !dbg !15768
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp_reg, metadata !15769, metadata !DIExpression()), !dbg !15770
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subtarget, metadata !15771, metadata !DIExpression()), !dbg !15772
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cc_reg, metadata !15773, metadata !DIExpression()), !dbg !15774
  %call = call %struct.rtx_def* @gen_label_rtx(), !dbg !15775
  store %struct.rtx_def* %call, %struct.rtx_def** %label, align 8, !dbg !15776
  %2 = load i32, i32* %mode, align 4, !dbg !15777
  %call1 = call %struct.rtx_def* @gen_reg_rtx(i32 %2), !dbg !15778
  store %struct.rtx_def* %call1, %struct.rtx_def** %cmp_reg, align 8, !dbg !15779
  %3 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15780
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15781
  %call2 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !15782
  %5 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !15783
  %call3 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %5), !dbg !15784
  %6 = load %struct.rtx_def*, %struct.rtx_def** %old_reg.addr, align 8, !dbg !15785
  %7 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15786
  %call4 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %6, %struct.rtx_def* %7), !dbg !15787
  %8 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !15788
  %tobool = icmp ne %struct.rtx_def* %8, null, !dbg !15788
  br i1 %tobool, label %if.then, label %if.end, !dbg !15790

if.then:                                          ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %seq.addr, align 8, !dbg !15791
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %9), !dbg !15792
  br label %if.end, !dbg !15792

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %mode, align 4, !dbg !15793
  %idxprom = zext i32 %10 to i64, !dbg !15794
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom, !dbg !15794
  %11 = load i32, i32* %arrayidx, align 4, !dbg !15794
  store i32 %11, i32* %icode, align 4, !dbg !15795
  %12 = load i32, i32* %icode, align 4, !dbg !15796
  %cmp = icmp eq i32 %12, 2956, !dbg !15798
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !15799

if.then6:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !15800
  br label %return, !dbg !15800

if.end7:                                          ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15801
  %14 = load %struct.rtx_def*, %struct.rtx_def** %old_reg.addr, align 8, !dbg !15802
  %15 = load %struct.rtx_def*, %struct.rtx_def** %new_reg.addr, align 8, !dbg !15803
  %16 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15804
  %17 = load i32, i32* %icode, align 4, !dbg !15805
  %call8 = call %struct.rtx_def* @expand_val_compare_and_swap_1(%struct.rtx_def* %13, %struct.rtx_def* %14, %struct.rtx_def* %15, %struct.rtx_def* %16, i32 %17), !dbg !15806
  store %struct.rtx_def* %call8, %struct.rtx_def** %subtarget, align 8, !dbg !15807
  %18 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !15808
  %cmp9 = icmp eq %struct.rtx_def* %18, null, !dbg !15810
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !15811

if.then10:                                        ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !15812
  br label %return, !dbg !15812

if.end11:                                         ; preds = %if.end7
  store %struct.rtx_def* null, %struct.rtx_def** %cc_reg, align 8, !dbg !15813
  %call12 = call i32 @have_insn_for(i32 48, i32 2), !dbg !15814
  %tobool13 = icmp ne i32 %call12, 0, !dbg !15814
  br i1 %tobool13, label %if.then14, label %if.end17, !dbg !15816

if.then14:                                        ; preds = %if.end11
  %call15 = call %struct.rtx_def* @get_last_insn(), !dbg !15817
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call15, i32 0, i32 1, !dbg !15817
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !15817
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !15817
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !15817
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !15817
  %20 = bitcast %struct.rtx_def** %cc_reg to i8*, !dbg !15818
  call void @note_stores(%struct.rtx_def* %19, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @find_cc_set, i8* %20), !dbg !15819
  br label %if.end17, !dbg !15819

if.end17:                                         ; preds = %if.then14, %if.end11
  %21 = load %struct.rtx_def*, %struct.rtx_def** %cc_reg, align 8, !dbg !15820
  %tobool18 = icmp ne %struct.rtx_def* %21, null, !dbg !15820
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !15822

if.then19:                                        ; preds = %if.end17
  %22 = load %struct.rtx_def*, %struct.rtx_def** %cc_reg, align 8, !dbg !15823
  store %struct.rtx_def* %22, %struct.rtx_def** %cmp_reg, align 8, !dbg !15825
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !15826
  store %struct.rtx_def* %23, %struct.rtx_def** %old_reg.addr, align 8, !dbg !15827
  br label %if.end24, !dbg !15828

if.else:                                          ; preds = %if.end17
  %24 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !15829
  %25 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15832
  %cmp20 = icmp ne %struct.rtx_def* %24, %25, !dbg !15833
  br i1 %cmp20, label %if.then21, label %if.end23, !dbg !15834

if.then21:                                        ; preds = %if.else
  %26 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15835
  %27 = load %struct.rtx_def*, %struct.rtx_def** %subtarget, align 8, !dbg !15836
  %call22 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %26, %struct.rtx_def* %27), !dbg !15837
  br label %if.end23, !dbg !15837

if.end23:                                         ; preds = %if.then21, %if.else
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then19
  %28 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15838
  %29 = load %struct.rtx_def*, %struct.rtx_def** %old_reg.addr, align 8, !dbg !15839
  %30 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !15840
  %31 = load %struct.rtx_def*, %struct.rtx_def** %cmp_reg, align 8, !dbg !15841
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !15841
  %bf.load25 = load i32, i32* %32, align 8, !dbg !15841
  %bf.lshr26 = lshr i32 %bf.load25, 16, !dbg !15841
  %bf.clear27 = and i32 %bf.lshr26, 255, !dbg !15841
  %33 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !15842
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %28, %struct.rtx_def* %29, i32 80, %struct.rtx_def* %30, i32 %bf.clear27, i32 1, %struct.rtx_def* %33), !dbg !15843
  store i8 1, i8* %retval, align 1, !dbg !15844
  br label %return, !dbg !15844

return:                                           ; preds = %if.end24, %if.then10, %if.then6
  %34 = load i8, i8* %retval, align 1, !dbg !15845
  ret i8 %34, !dbg !15845
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_sync_fetch_operation(%struct.rtx_def* %mem, %struct.rtx_def* %val, i32 %code, i8 zeroext %after, %struct.rtx_def* %target) #0 !dbg !15846 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %val.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %after.addr = alloca i8, align 1
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %old_code = alloca i32, align 4
  %new_code = alloca i32, align 4
  %icode = alloca i32, align 4
  %compensate = alloca i8, align 1
  %insn = alloca %struct.rtx_def*, align 8
  %t0 = alloca %struct.rtx_def*, align 8
  %t1 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !15849, metadata !DIExpression()), !dbg !15850
  store %struct.rtx_def* %val, %struct.rtx_def** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val.addr, metadata !15851, metadata !DIExpression()), !dbg !15852
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !15853, metadata !DIExpression()), !dbg !15854
  store i8 %after, i8* %after.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %after.addr, metadata !15855, metadata !DIExpression()), !dbg !15856
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !15857, metadata !DIExpression()), !dbg !15858
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !15859, metadata !DIExpression()), !dbg !15860
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !15861
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !15861
  %bf.load = load i32, i32* %1, align 8, !dbg !15861
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !15861
  %bf.clear = and i32 %bf.lshr, 255, !dbg !15861
  store i32 %bf.clear, i32* %mode, align 4, !dbg !15860
  call void @llvm.dbg.declare(metadata i32* %old_code, metadata !15862, metadata !DIExpression()), !dbg !15863
  call void @llvm.dbg.declare(metadata i32* %new_code, metadata !15864, metadata !DIExpression()), !dbg !15865
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !15866, metadata !DIExpression()), !dbg !15867
  call void @llvm.dbg.declare(metadata i8* %compensate, metadata !15868, metadata !DIExpression()), !dbg !15869
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !15870, metadata !DIExpression()), !dbg !15871
  %2 = load i32, i32* %code.addr, align 4, !dbg !15872
  switch i32 %2, label %sw.default [
    i32 49, label %sw.bb
    i32 62, label %sw.bb3
    i32 63, label %sw.bb8
    i32 61, label %sw.bb13
    i32 64, label %sw.bb18
    i32 50, label %sw.bb23
  ], !dbg !15873

sw.bb:                                            ; preds = %entry
  %3 = load i32, i32* %mode, align 4, !dbg !15874
  %idxprom = zext i32 %3 to i64, !dbg !15876
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_add_optab, i64 0, i64 %idxprom, !dbg !15876
  %4 = load i32, i32* %arrayidx, align 4, !dbg !15876
  store i32 %4, i32* %old_code, align 4, !dbg !15877
  %5 = load i32, i32* %mode, align 4, !dbg !15878
  %idxprom1 = zext i32 %5 to i64, !dbg !15879
  %arrayidx2 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_add_optab, i64 0, i64 %idxprom1, !dbg !15879
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !15879
  store i32 %6, i32* %new_code, align 4, !dbg !15880
  br label %sw.epilog, !dbg !15881

sw.bb3:                                           ; preds = %entry
  %7 = load i32, i32* %mode, align 4, !dbg !15882
  %idxprom4 = zext i32 %7 to i64, !dbg !15883
  %arrayidx5 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_ior_optab, i64 0, i64 %idxprom4, !dbg !15883
  %8 = load i32, i32* %arrayidx5, align 4, !dbg !15883
  store i32 %8, i32* %old_code, align 4, !dbg !15884
  %9 = load i32, i32* %mode, align 4, !dbg !15885
  %idxprom6 = zext i32 %9 to i64, !dbg !15886
  %arrayidx7 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_ior_optab, i64 0, i64 %idxprom6, !dbg !15886
  %10 = load i32, i32* %arrayidx7, align 4, !dbg !15886
  store i32 %10, i32* %new_code, align 4, !dbg !15887
  br label %sw.epilog, !dbg !15888

sw.bb8:                                           ; preds = %entry
  %11 = load i32, i32* %mode, align 4, !dbg !15889
  %idxprom9 = zext i32 %11 to i64, !dbg !15890
  %arrayidx10 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_xor_optab, i64 0, i64 %idxprom9, !dbg !15890
  %12 = load i32, i32* %arrayidx10, align 4, !dbg !15890
  store i32 %12, i32* %old_code, align 4, !dbg !15891
  %13 = load i32, i32* %mode, align 4, !dbg !15892
  %idxprom11 = zext i32 %13 to i64, !dbg !15893
  %arrayidx12 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_xor_optab, i64 0, i64 %idxprom11, !dbg !15893
  %14 = load i32, i32* %arrayidx12, align 4, !dbg !15893
  store i32 %14, i32* %new_code, align 4, !dbg !15894
  br label %sw.epilog, !dbg !15895

sw.bb13:                                          ; preds = %entry
  %15 = load i32, i32* %mode, align 4, !dbg !15896
  %idxprom14 = zext i32 %15 to i64, !dbg !15897
  %arrayidx15 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_and_optab, i64 0, i64 %idxprom14, !dbg !15897
  %16 = load i32, i32* %arrayidx15, align 4, !dbg !15897
  store i32 %16, i32* %old_code, align 4, !dbg !15898
  %17 = load i32, i32* %mode, align 4, !dbg !15899
  %idxprom16 = zext i32 %17 to i64, !dbg !15900
  %arrayidx17 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_and_optab, i64 0, i64 %idxprom16, !dbg !15900
  %18 = load i32, i32* %arrayidx17, align 4, !dbg !15900
  store i32 %18, i32* %new_code, align 4, !dbg !15901
  br label %sw.epilog, !dbg !15902

sw.bb18:                                          ; preds = %entry
  %19 = load i32, i32* %mode, align 4, !dbg !15903
  %idxprom19 = zext i32 %19 to i64, !dbg !15904
  %arrayidx20 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_nand_optab, i64 0, i64 %idxprom19, !dbg !15904
  %20 = load i32, i32* %arrayidx20, align 4, !dbg !15904
  store i32 %20, i32* %old_code, align 4, !dbg !15905
  %21 = load i32, i32* %mode, align 4, !dbg !15906
  %idxprom21 = zext i32 %21 to i64, !dbg !15907
  %arrayidx22 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_nand_optab, i64 0, i64 %idxprom21, !dbg !15907
  %22 = load i32, i32* %arrayidx22, align 4, !dbg !15907
  store i32 %22, i32* %new_code, align 4, !dbg !15908
  br label %sw.epilog, !dbg !15909

sw.bb23:                                          ; preds = %entry
  %23 = load i32, i32* %mode, align 4, !dbg !15910
  %idxprom24 = zext i32 %23 to i64, !dbg !15911
  %arrayidx25 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_sub_optab, i64 0, i64 %idxprom24, !dbg !15911
  %24 = load i32, i32* %arrayidx25, align 4, !dbg !15911
  store i32 %24, i32* %old_code, align 4, !dbg !15912
  %25 = load i32, i32* %mode, align 4, !dbg !15913
  %idxprom26 = zext i32 %25 to i64, !dbg !15914
  %arrayidx27 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_sub_optab, i64 0, i64 %idxprom26, !dbg !15914
  %26 = load i32, i32* %arrayidx27, align 4, !dbg !15914
  store i32 %26, i32* %new_code, align 4, !dbg !15915
  %27 = load i32, i32* %old_code, align 4, !dbg !15916
  %cmp = icmp eq i32 %27, 2956, !dbg !15918
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !15919

land.lhs.true:                                    ; preds = %sw.bb23
  %28 = load i32, i32* %new_code, align 4, !dbg !15920
  %cmp28 = icmp eq i32 %28, 2956, !dbg !15921
  br i1 %cmp28, label %if.then, label %lor.lhs.false, !dbg !15922

lor.lhs.false:                                    ; preds = %land.lhs.true, %sw.bb23
  %29 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15923
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !15923
  %bf.load29 = load i32, i32* %30, align 8, !dbg !15923
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !15923
  %cmp31 = icmp eq i32 %bf.clear30, 30, !dbg !15923
  br i1 %cmp31, label %if.then, label %if.end40, !dbg !15924

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %31 = load i32, i32* %mode, align 4, !dbg !15925
  %idxprom32 = zext i32 %31 to i64, !dbg !15927
  %arrayidx33 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_old_add_optab, i64 0, i64 %idxprom32, !dbg !15927
  %32 = load i32, i32* %arrayidx33, align 4, !dbg !15927
  store i32 %32, i32* %old_code, align 4, !dbg !15928
  %33 = load i32, i32* %mode, align 4, !dbg !15929
  %idxprom34 = zext i32 %33 to i64, !dbg !15930
  %arrayidx35 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_new_add_optab, i64 0, i64 %idxprom34, !dbg !15930
  %34 = load i32, i32* %arrayidx35, align 4, !dbg !15930
  store i32 %34, i32* %new_code, align 4, !dbg !15931
  %35 = load i32, i32* %old_code, align 4, !dbg !15932
  %cmp36 = icmp ne i32 %35, 2956, !dbg !15934
  br i1 %cmp36, label %if.then39, label %lor.lhs.false37, !dbg !15935

lor.lhs.false37:                                  ; preds = %if.then
  %36 = load i32, i32* %new_code, align 4, !dbg !15936
  %cmp38 = icmp ne i32 %36, 2956, !dbg !15937
  br i1 %cmp38, label %if.then39, label %if.end, !dbg !15938

if.then39:                                        ; preds = %lor.lhs.false37, %if.then
  %37 = load i32, i32* %mode, align 4, !dbg !15939
  %38 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !15941
  %call = call %struct.rtx_def* @expand_simple_unop(i32 %37, i32 51, %struct.rtx_def* %38, %struct.rtx_def* null, i32 1), !dbg !15942
  store %struct.rtx_def* %call, %struct.rtx_def** %val.addr, align 8, !dbg !15943
  store i32 49, i32* %code.addr, align 4, !dbg !15944
  br label %if.end, !dbg !15945

if.end:                                           ; preds = %if.then39, %lor.lhs.false37
  br label %if.end40, !dbg !15946

if.end40:                                         ; preds = %if.end, %lor.lhs.false
  br label %sw.epilog, !dbg !15947

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 7286, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !15948
  br label %sw.epilog, !dbg !15949

sw.epilog:                                        ; preds = %sw.default, %if.end40, %sw.bb18, %sw.bb13, %sw.bb8, %sw.bb3, %sw.bb
  store i8 0, i8* %compensate, align 1, !dbg !15950
  %39 = load i8, i8* %after.addr, align 1, !dbg !15951
  %tobool = icmp ne i8 %39, 0, !dbg !15951
  br i1 %tobool, label %if.then41, label %if.else, !dbg !15953

if.then41:                                        ; preds = %sw.epilog
  %40 = load i32, i32* %new_code, align 4, !dbg !15954
  store i32 %40, i32* %icode, align 4, !dbg !15956
  %41 = load i32, i32* %icode, align 4, !dbg !15957
  %cmp42 = icmp eq i32 %41, 2956, !dbg !15959
  br i1 %cmp42, label %if.then43, label %if.end47, !dbg !15960

if.then43:                                        ; preds = %if.then41
  %42 = load i32, i32* %old_code, align 4, !dbg !15961
  store i32 %42, i32* %icode, align 4, !dbg !15963
  %43 = load i32, i32* %icode, align 4, !dbg !15964
  %cmp44 = icmp ne i32 %43, 2956, !dbg !15966
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !15967

if.then45:                                        ; preds = %if.then43
  store i8 1, i8* %compensate, align 1, !dbg !15968
  br label %if.end46, !dbg !15969

if.end46:                                         ; preds = %if.then45, %if.then43
  br label %if.end47, !dbg !15970

if.end47:                                         ; preds = %if.end46, %if.then41
  br label %if.end60, !dbg !15971

if.else:                                          ; preds = %sw.epilog
  %44 = load i32, i32* %old_code, align 4, !dbg !15972
  store i32 %44, i32* %icode, align 4, !dbg !15974
  %45 = load i32, i32* %icode, align 4, !dbg !15975
  %cmp48 = icmp eq i32 %45, 2956, !dbg !15977
  br i1 %cmp48, label %land.lhs.true49, label %if.end59, !dbg !15978

land.lhs.true49:                                  ; preds = %if.else
  %46 = load i32, i32* %code.addr, align 4, !dbg !15979
  %cmp50 = icmp eq i32 %46, 49, !dbg !15980
  br i1 %cmp50, label %if.then55, label %lor.lhs.false51, !dbg !15981

lor.lhs.false51:                                  ; preds = %land.lhs.true49
  %47 = load i32, i32* %code.addr, align 4, !dbg !15982
  %cmp52 = icmp eq i32 %47, 50, !dbg !15983
  br i1 %cmp52, label %if.then55, label %lor.lhs.false53, !dbg !15984

lor.lhs.false53:                                  ; preds = %lor.lhs.false51
  %48 = load i32, i32* %code.addr, align 4, !dbg !15985
  %cmp54 = icmp eq i32 %48, 63, !dbg !15986
  br i1 %cmp54, label %if.then55, label %if.end59, !dbg !15987

if.then55:                                        ; preds = %lor.lhs.false53, %lor.lhs.false51, %land.lhs.true49
  %49 = load i32, i32* %new_code, align 4, !dbg !15988
  store i32 %49, i32* %icode, align 4, !dbg !15990
  %50 = load i32, i32* %icode, align 4, !dbg !15991
  %cmp56 = icmp ne i32 %50, 2956, !dbg !15993
  br i1 %cmp56, label %if.then57, label %if.end58, !dbg !15994

if.then57:                                        ; preds = %if.then55
  store i8 1, i8* %compensate, align 1, !dbg !15995
  br label %if.end58, !dbg !15996

if.end58:                                         ; preds = %if.then57, %if.then55
  br label %if.end59, !dbg !15997

if.end59:                                         ; preds = %if.end58, %lor.lhs.false53, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end47
  %51 = load i32, i32* %icode, align 4, !dbg !15998
  %cmp61 = icmp ne i32 %51, 2956, !dbg !16000
  br i1 %cmp61, label %if.then62, label %if.end125, !dbg !16001

if.then62:                                        ; preds = %if.end60
  %52 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16002
  %tobool63 = icmp ne %struct.rtx_def* %52, null, !dbg !16002
  br i1 %tobool63, label %lor.lhs.false64, label %if.then70, !dbg !16005

lor.lhs.false64:                                  ; preds = %if.then62
  %53 = load i32, i32* %icode, align 4, !dbg !16006
  %idxprom65 = zext i32 %53 to i64, !dbg !16007
  %arrayidx66 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom65, !dbg !16007
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx66, i32 0, i32 3, !dbg !16008
  %54 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !16008
  %arrayidx67 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %54, i64 0, !dbg !16007
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx67, i32 0, i32 0, !dbg !16009
  %55 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !16009
  %56 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16010
  %57 = load i32, i32* %mode, align 4, !dbg !16011
  %call68 = call i32 %55(%struct.rtx_def* %56, i32 %57), !dbg !16007
  %tobool69 = icmp ne i32 %call68, 0, !dbg !16007
  br i1 %tobool69, label %if.end72, label %if.then70, !dbg !16012

if.then70:                                        ; preds = %lor.lhs.false64, %if.then62
  %58 = load i32, i32* %mode, align 4, !dbg !16013
  %call71 = call %struct.rtx_def* @gen_reg_rtx(i32 %58), !dbg !16014
  store %struct.rtx_def* %call71, %struct.rtx_def** %target.addr, align 8, !dbg !16015
  br label %if.end72, !dbg !16016

if.end72:                                         ; preds = %if.then70, %lor.lhs.false64
  %59 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16017
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !16017
  %bf.load73 = load i32, i32* %60, align 8, !dbg !16017
  %bf.lshr74 = lshr i32 %bf.load73, 16, !dbg !16017
  %bf.clear75 = and i32 %bf.lshr74, 255, !dbg !16017
  %cmp76 = icmp ne i32 %bf.clear75, 0, !dbg !16019
  br i1 %cmp76, label %land.lhs.true77, label %if.end87, !dbg !16020

land.lhs.true77:                                  ; preds = %if.end72
  %61 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16021
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !16021
  %bf.load78 = load i32, i32* %62, align 8, !dbg !16021
  %bf.lshr79 = lshr i32 %bf.load78, 16, !dbg !16021
  %bf.clear80 = and i32 %bf.lshr79, 255, !dbg !16021
  %63 = load i32, i32* %mode, align 4, !dbg !16022
  %cmp81 = icmp ne i32 %bf.clear80, %63, !dbg !16023
  br i1 %cmp81, label %if.then82, label %if.end87, !dbg !16024

if.then82:                                        ; preds = %land.lhs.true77
  %64 = load i32, i32* %mode, align 4, !dbg !16025
  %65 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16026
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !16026
  %bf.load83 = load i32, i32* %66, align 8, !dbg !16026
  %bf.lshr84 = lshr i32 %bf.load83, 16, !dbg !16026
  %bf.clear85 = and i32 %bf.lshr84, 255, !dbg !16026
  %67 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16027
  %call86 = call %struct.rtx_def* @convert_modes(i32 %64, i32 %bf.clear85, %struct.rtx_def* %67, i32 1), !dbg !16028
  store %struct.rtx_def* %call86, %struct.rtx_def** %val.addr, align 8, !dbg !16029
  br label %if.end87, !dbg !16030

if.end87:                                         ; preds = %if.then82, %land.lhs.true77, %if.end72
  %68 = load i32, i32* %icode, align 4, !dbg !16031
  %idxprom88 = zext i32 %68 to i64, !dbg !16033
  %arrayidx89 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom88, !dbg !16033
  %operand90 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx89, i32 0, i32 3, !dbg !16034
  %69 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand90, align 8, !dbg !16034
  %arrayidx91 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %69, i64 2, !dbg !16033
  %predicate92 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx91, i32 0, i32 0, !dbg !16035
  %70 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate92, align 8, !dbg !16035
  %71 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16036
  %72 = load i32, i32* %mode, align 4, !dbg !16037
  %call93 = call i32 %70(%struct.rtx_def* %71, i32 %72), !dbg !16033
  %tobool94 = icmp ne i32 %call93, 0, !dbg !16033
  br i1 %tobool94, label %if.end97, label %if.then95, !dbg !16038

if.then95:                                        ; preds = %if.end87
  %73 = load i32, i32* %mode, align 4, !dbg !16039
  %74 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16040
  %call96 = call %struct.rtx_def* @force_reg(i32 %73, %struct.rtx_def* %74), !dbg !16041
  store %struct.rtx_def* %call96, %struct.rtx_def** %val.addr, align 8, !dbg !16042
  br label %if.end97, !dbg !16043

if.end97:                                         ; preds = %if.then95, %if.end87
  %75 = load i32, i32* %icode, align 4, !dbg !16044
  %idxprom98 = zext i32 %75 to i64, !dbg !16044
  %arrayidx99 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom98, !dbg !16044
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx99, i32 0, i32 2, !dbg !16044
  %76 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !16044
  %77 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16045
  %78 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !16046
  %79 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16047
  %call100 = call %struct.rtx_def* (%struct.rtx_def*, ...) %76(%struct.rtx_def* %77, %struct.rtx_def* %78, %struct.rtx_def* %79), !dbg !16044
  store %struct.rtx_def* %call100, %struct.rtx_def** %insn, align 8, !dbg !16048
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !16049
  %tobool101 = icmp ne %struct.rtx_def* %80, null, !dbg !16049
  br i1 %tobool101, label %if.then102, label %if.end124, !dbg !16051

if.then102:                                       ; preds = %if.end97
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !16052
  %call103 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %81), !dbg !16054
  %82 = load i8, i8* %compensate, align 1, !dbg !16055
  %tobool104 = icmp ne i8 %82, 0, !dbg !16055
  br i1 %tobool104, label %if.then105, label %if.end123, !dbg !16057

if.then105:                                       ; preds = %if.then102
  %83 = load i8, i8* %after.addr, align 1, !dbg !16058
  %tobool106 = icmp ne i8 %83, 0, !dbg !16058
  br i1 %tobool106, label %if.end115, label %if.then107, !dbg !16061

if.then107:                                       ; preds = %if.then105
  %84 = load i32, i32* %code.addr, align 4, !dbg !16062
  %cmp108 = icmp eq i32 %84, 49, !dbg !16065
  br i1 %cmp108, label %if.then109, label %if.else110, !dbg !16066

if.then109:                                       ; preds = %if.then107
  store i32 50, i32* %code.addr, align 4, !dbg !16067
  br label %if.end114, !dbg !16068

if.else110:                                       ; preds = %if.then107
  %85 = load i32, i32* %code.addr, align 4, !dbg !16069
  %cmp111 = icmp eq i32 %85, 50, !dbg !16071
  br i1 %cmp111, label %if.then112, label %if.end113, !dbg !16072

if.then112:                                       ; preds = %if.else110
  store i32 49, i32* %code.addr, align 4, !dbg !16073
  br label %if.end113, !dbg !16074

if.end113:                                        ; preds = %if.then112, %if.else110
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then109
  br label %if.end115, !dbg !16075

if.end115:                                        ; preds = %if.end114, %if.then105
  %86 = load i32, i32* %code.addr, align 4, !dbg !16076
  %cmp116 = icmp eq i32 %86, 64, !dbg !16078
  br i1 %cmp116, label %if.then117, label %if.else120, !dbg !16079

if.then117:                                       ; preds = %if.end115
  %87 = load i32, i32* %mode, align 4, !dbg !16080
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16082
  %89 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16083
  %call118 = call %struct.rtx_def* @expand_simple_binop(i32 %87, i32 61, %struct.rtx_def* %88, %struct.rtx_def* %89, %struct.rtx_def* null, i32 1, i32 3), !dbg !16084
  store %struct.rtx_def* %call118, %struct.rtx_def** %target.addr, align 8, !dbg !16085
  %90 = load i32, i32* %mode, align 4, !dbg !16086
  %91 = load i32, i32* %code.addr, align 4, !dbg !16087
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16088
  %call119 = call %struct.rtx_def* @expand_simple_unop(i32 %90, i32 %91, %struct.rtx_def* %92, %struct.rtx_def* null, i32 1), !dbg !16089
  store %struct.rtx_def* %call119, %struct.rtx_def** %target.addr, align 8, !dbg !16090
  br label %if.end122, !dbg !16091

if.else120:                                       ; preds = %if.end115
  %93 = load i32, i32* %mode, align 4, !dbg !16092
  %94 = load i32, i32* %code.addr, align 4, !dbg !16093
  %95 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16094
  %96 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16095
  %call121 = call %struct.rtx_def* @expand_simple_binop(i32 %93, i32 %94, %struct.rtx_def* %95, %struct.rtx_def* %96, %struct.rtx_def* null, i32 1, i32 3), !dbg !16096
  store %struct.rtx_def* %call121, %struct.rtx_def** %target.addr, align 8, !dbg !16097
  br label %if.end122

if.end122:                                        ; preds = %if.else120, %if.then117
  br label %if.end123, !dbg !16098

if.end123:                                        ; preds = %if.end122, %if.then102
  %97 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16099
  store %struct.rtx_def* %97, %struct.rtx_def** %retval, align 8, !dbg !16100
  br label %return, !dbg !16100

if.end124:                                        ; preds = %if.end97
  br label %if.end125, !dbg !16101

if.end125:                                        ; preds = %if.end124, %if.end60
  %98 = load i32, i32* %mode, align 4, !dbg !16102
  %idxprom126 = zext i32 %98 to i64, !dbg !16104
  %arrayidx127 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom126, !dbg !16104
  %99 = load i32, i32* %arrayidx127, align 4, !dbg !16104
  %cmp128 = icmp ne i32 %99, 2956, !dbg !16105
  br i1 %cmp128, label %if.then129, label %if.end160, !dbg !16106

if.then129:                                       ; preds = %if.end125
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t0, metadata !16107, metadata !DIExpression()), !dbg !16109
  %100 = load i32, i32* %mode, align 4, !dbg !16110
  %call130 = call %struct.rtx_def* @gen_reg_rtx(i32 %100), !dbg !16111
  store %struct.rtx_def* %call130, %struct.rtx_def** %t0, align 8, !dbg !16109
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t1, metadata !16112, metadata !DIExpression()), !dbg !16113
  %101 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16114
  %tobool131 = icmp ne %struct.rtx_def* %101, null, !dbg !16114
  br i1 %tobool131, label %lor.lhs.false132, label %if.then135, !dbg !16116

lor.lhs.false132:                                 ; preds = %if.then129
  %102 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16117
  %103 = load i32, i32* %mode, align 4, !dbg !16118
  %call133 = call i32 @register_operand(%struct.rtx_def* %102, i32 %103), !dbg !16119
  %tobool134 = icmp ne i32 %call133, 0, !dbg !16119
  br i1 %tobool134, label %if.end137, label %if.then135, !dbg !16120

if.then135:                                       ; preds = %lor.lhs.false132, %if.then129
  %104 = load i32, i32* %mode, align 4, !dbg !16121
  %call136 = call %struct.rtx_def* @gen_reg_rtx(i32 %104), !dbg !16122
  store %struct.rtx_def* %call136, %struct.rtx_def** %target.addr, align 8, !dbg !16123
  br label %if.end137, !dbg !16124

if.end137:                                        ; preds = %if.then135, %lor.lhs.false132
  call void @start_sequence(), !dbg !16125
  %105 = load i8, i8* %after.addr, align 1, !dbg !16126
  %tobool138 = icmp ne i8 %105, 0, !dbg !16126
  br i1 %tobool138, label %if.end141, label %if.then139, !dbg !16128

if.then139:                                       ; preds = %if.end137
  %106 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16129
  %107 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !16130
  %call140 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %106, %struct.rtx_def* %107), !dbg !16131
  br label %if.end141, !dbg !16131

if.end141:                                        ; preds = %if.then139, %if.end137
  %108 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !16132
  store %struct.rtx_def* %108, %struct.rtx_def** %t1, align 8, !dbg !16133
  %109 = load i32, i32* %code.addr, align 4, !dbg !16134
  %cmp142 = icmp eq i32 %109, 64, !dbg !16136
  br i1 %cmp142, label %if.then143, label %if.else146, !dbg !16137

if.then143:                                       ; preds = %if.end141
  %110 = load i32, i32* %mode, align 4, !dbg !16138
  %111 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !16140
  %112 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16141
  %call144 = call %struct.rtx_def* @expand_simple_binop(i32 %110, i32 61, %struct.rtx_def* %111, %struct.rtx_def* %112, %struct.rtx_def* null, i32 1, i32 3), !dbg !16142
  store %struct.rtx_def* %call144, %struct.rtx_def** %t1, align 8, !dbg !16143
  %113 = load i32, i32* %mode, align 4, !dbg !16144
  %114 = load i32, i32* %code.addr, align 4, !dbg !16145
  %115 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !16146
  %call145 = call %struct.rtx_def* @expand_simple_unop(i32 %113, i32 %114, %struct.rtx_def* %115, %struct.rtx_def* null, i32 1), !dbg !16147
  store %struct.rtx_def* %call145, %struct.rtx_def** %t1, align 8, !dbg !16148
  br label %if.end148, !dbg !16149

if.else146:                                       ; preds = %if.end141
  %116 = load i32, i32* %mode, align 4, !dbg !16150
  %117 = load i32, i32* %code.addr, align 4, !dbg !16151
  %118 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !16152
  %119 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16153
  %call147 = call %struct.rtx_def* @expand_simple_binop(i32 %116, i32 %117, %struct.rtx_def* %118, %struct.rtx_def* %119, %struct.rtx_def* null, i32 1, i32 3), !dbg !16154
  store %struct.rtx_def* %call147, %struct.rtx_def** %t1, align 8, !dbg !16155
  br label %if.end148

if.end148:                                        ; preds = %if.else146, %if.then143
  %120 = load i8, i8* %after.addr, align 1, !dbg !16156
  %tobool149 = icmp ne i8 %120, 0, !dbg !16156
  br i1 %tobool149, label %if.then150, label %if.end152, !dbg !16158

if.then150:                                       ; preds = %if.end148
  %121 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16159
  %122 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !16160
  %call151 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %121, %struct.rtx_def* %122), !dbg !16161
  br label %if.end152, !dbg !16161

if.end152:                                        ; preds = %if.then150, %if.end148
  %call153 = call %struct.rtx_def* @get_insns(), !dbg !16162
  store %struct.rtx_def* %call153, %struct.rtx_def** %insn, align 8, !dbg !16163
  call void @end_sequence(), !dbg !16164
  %123 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !16165
  %cmp154 = icmp ne %struct.rtx_def* %123, null, !dbg !16167
  br i1 %cmp154, label %land.lhs.true155, label %if.end159, !dbg !16168

land.lhs.true155:                                 ; preds = %if.end152
  %124 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !16169
  %125 = load %struct.rtx_def*, %struct.rtx_def** %t0, align 8, !dbg !16170
  %126 = load %struct.rtx_def*, %struct.rtx_def** %t1, align 8, !dbg !16171
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !16172
  %call156 = call zeroext i8 @expand_compare_and_swap_loop(%struct.rtx_def* %124, %struct.rtx_def* %125, %struct.rtx_def* %126, %struct.rtx_def* %127), !dbg !16173
  %conv = zext i8 %call156 to i32, !dbg !16173
  %tobool157 = icmp ne i32 %conv, 0, !dbg !16173
  br i1 %tobool157, label %if.then158, label %if.end159, !dbg !16174

if.then158:                                       ; preds = %land.lhs.true155
  %128 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16175
  store %struct.rtx_def* %128, %struct.rtx_def** %retval, align 8, !dbg !16176
  br label %return, !dbg !16176

if.end159:                                        ; preds = %land.lhs.true155, %if.end152
  br label %if.end160, !dbg !16177

if.end160:                                        ; preds = %if.end159, %if.end125
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !16178
  br label %return, !dbg !16178

return:                                           ; preds = %if.end160, %if.then158, %if.end123
  %129 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !16179
  ret %struct.rtx_def* %129, !dbg !16179
}

declare dso_local i32 @register_operand(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_sync_lock_test_and_set(%struct.rtx_def* %mem, %struct.rtx_def* %val, %struct.rtx_def* %target) #0 !dbg !16180 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %val.addr = alloca %struct.rtx_def*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %icode = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !16181, metadata !DIExpression()), !dbg !16182
  store %struct.rtx_def* %val, %struct.rtx_def** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val.addr, metadata !16183, metadata !DIExpression()), !dbg !16184
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !16185, metadata !DIExpression()), !dbg !16186
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !16187, metadata !DIExpression()), !dbg !16188
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !16189
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !16189
  %bf.load = load i32, i32* %1, align 8, !dbg !16189
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !16189
  %bf.clear = and i32 %bf.lshr, 255, !dbg !16189
  store i32 %bf.clear, i32* %mode, align 4, !dbg !16188
  call void @llvm.dbg.declare(metadata i32* %icode, metadata !16190, metadata !DIExpression()), !dbg !16191
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !16192, metadata !DIExpression()), !dbg !16193
  %2 = load i32, i32* %mode, align 4, !dbg !16194
  %idxprom = zext i32 %2 to i64, !dbg !16195
  %arrayidx = getelementptr inbounds [87 x i32], [87 x i32]* @sync_lock_test_and_set, i64 0, i64 %idxprom, !dbg !16195
  %3 = load i32, i32* %arrayidx, align 4, !dbg !16195
  store i32 %3, i32* %icode, align 4, !dbg !16196
  %4 = load i32, i32* %icode, align 4, !dbg !16197
  %cmp = icmp ne i32 %4, 2956, !dbg !16199
  br i1 %cmp, label %if.then, label %if.end38, !dbg !16200

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16201
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !16201
  br i1 %tobool, label %lor.lhs.false, label %if.then5, !dbg !16204

lor.lhs.false:                                    ; preds = %if.then
  %6 = load i32, i32* %icode, align 4, !dbg !16205
  %idxprom1 = zext i32 %6 to i64, !dbg !16206
  %arrayidx2 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom1, !dbg !16206
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx2, i32 0, i32 3, !dbg !16207
  %7 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !16207
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %7, i64 0, !dbg !16206
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx3, i32 0, i32 0, !dbg !16208
  %8 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !16208
  %9 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16209
  %10 = load i32, i32* %mode, align 4, !dbg !16210
  %call = call i32 %8(%struct.rtx_def* %9, i32 %10), !dbg !16206
  %tobool4 = icmp ne i32 %call, 0, !dbg !16206
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !16211

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %11 = load i32, i32* %mode, align 4, !dbg !16212
  %call6 = call %struct.rtx_def* @gen_reg_rtx(i32 %11), !dbg !16213
  store %struct.rtx_def* %call6, %struct.rtx_def** %target.addr, align 8, !dbg !16214
  br label %if.end, !dbg !16215

if.end:                                           ; preds = %if.then5, %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16216
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !16216
  %bf.load7 = load i32, i32* %13, align 8, !dbg !16216
  %bf.lshr8 = lshr i32 %bf.load7, 16, !dbg !16216
  %bf.clear9 = and i32 %bf.lshr8, 255, !dbg !16216
  %cmp10 = icmp ne i32 %bf.clear9, 0, !dbg !16218
  br i1 %cmp10, label %land.lhs.true, label %if.end20, !dbg !16219

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16220
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !16220
  %bf.load11 = load i32, i32* %15, align 8, !dbg !16220
  %bf.lshr12 = lshr i32 %bf.load11, 16, !dbg !16220
  %bf.clear13 = and i32 %bf.lshr12, 255, !dbg !16220
  %16 = load i32, i32* %mode, align 4, !dbg !16221
  %cmp14 = icmp ne i32 %bf.clear13, %16, !dbg !16222
  br i1 %cmp14, label %if.then15, label %if.end20, !dbg !16223

if.then15:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %mode, align 4, !dbg !16224
  %18 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16225
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !16225
  %bf.load16 = load i32, i32* %19, align 8, !dbg !16225
  %bf.lshr17 = lshr i32 %bf.load16, 16, !dbg !16225
  %bf.clear18 = and i32 %bf.lshr17, 255, !dbg !16225
  %20 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16226
  %call19 = call %struct.rtx_def* @convert_modes(i32 %17, i32 %bf.clear18, %struct.rtx_def* %20, i32 1), !dbg !16227
  store %struct.rtx_def* %call19, %struct.rtx_def** %val.addr, align 8, !dbg !16228
  br label %if.end20, !dbg !16229

if.end20:                                         ; preds = %if.then15, %land.lhs.true, %if.end
  %21 = load i32, i32* %icode, align 4, !dbg !16230
  %idxprom21 = zext i32 %21 to i64, !dbg !16232
  %arrayidx22 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom21, !dbg !16232
  %operand23 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx22, i32 0, i32 3, !dbg !16233
  %22 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand23, align 8, !dbg !16233
  %arrayidx24 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %22, i64 2, !dbg !16232
  %predicate25 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx24, i32 0, i32 0, !dbg !16234
  %23 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate25, align 8, !dbg !16234
  %24 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16235
  %25 = load i32, i32* %mode, align 4, !dbg !16236
  %call26 = call i32 %23(%struct.rtx_def* %24, i32 %25), !dbg !16232
  %tobool27 = icmp ne i32 %call26, 0, !dbg !16232
  br i1 %tobool27, label %if.end30, label %if.then28, !dbg !16237

if.then28:                                        ; preds = %if.end20
  %26 = load i32, i32* %mode, align 4, !dbg !16238
  %27 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16239
  %call29 = call %struct.rtx_def* @force_reg(i32 %26, %struct.rtx_def* %27), !dbg !16240
  store %struct.rtx_def* %call29, %struct.rtx_def** %val.addr, align 8, !dbg !16241
  br label %if.end30, !dbg !16242

if.end30:                                         ; preds = %if.then28, %if.end20
  %28 = load i32, i32* %icode, align 4, !dbg !16243
  %idxprom31 = zext i32 %28 to i64, !dbg !16243
  %arrayidx32 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom31, !dbg !16243
  %genfun = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx32, i32 0, i32 2, !dbg !16243
  %29 = load %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !dbg !16243
  %30 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16244
  %31 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !16245
  %32 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16246
  %call33 = call %struct.rtx_def* (%struct.rtx_def*, ...) %29(%struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !16243
  store %struct.rtx_def* %call33, %struct.rtx_def** %insn, align 8, !dbg !16247
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !16248
  %tobool34 = icmp ne %struct.rtx_def* %33, null, !dbg !16248
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !16250

if.then35:                                        ; preds = %if.end30
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !16251
  %call36 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %34), !dbg !16253
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16254
  store %struct.rtx_def* %35, %struct.rtx_def** %retval, align 8, !dbg !16255
  br label %return, !dbg !16255

if.end37:                                         ; preds = %if.end30
  br label %if.end38, !dbg !16256

if.end38:                                         ; preds = %if.end37, %entry
  %36 = load i32, i32* %mode, align 4, !dbg !16257
  %idxprom39 = zext i32 %36 to i64, !dbg !16259
  %arrayidx40 = getelementptr inbounds [87 x i32], [87 x i32]* @sync_compare_and_swap, i64 0, i64 %idxprom39, !dbg !16259
  %37 = load i32, i32* %arrayidx40, align 4, !dbg !16259
  %cmp41 = icmp ne i32 %37, 2956, !dbg !16260
  br i1 %cmp41, label %if.then42, label %if.end69, !dbg !16261

if.then42:                                        ; preds = %if.end38
  %38 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16262
  %tobool43 = icmp ne %struct.rtx_def* %38, null, !dbg !16262
  br i1 %tobool43, label %lor.lhs.false44, label %if.then47, !dbg !16265

lor.lhs.false44:                                  ; preds = %if.then42
  %39 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16266
  %40 = load i32, i32* %mode, align 4, !dbg !16267
  %call45 = call i32 @register_operand(%struct.rtx_def* %39, i32 %40), !dbg !16268
  %tobool46 = icmp ne i32 %call45, 0, !dbg !16268
  br i1 %tobool46, label %if.end49, label %if.then47, !dbg !16269

if.then47:                                        ; preds = %lor.lhs.false44, %if.then42
  %41 = load i32, i32* %mode, align 4, !dbg !16270
  %call48 = call %struct.rtx_def* @gen_reg_rtx(i32 %41), !dbg !16271
  store %struct.rtx_def* %call48, %struct.rtx_def** %target.addr, align 8, !dbg !16272
  br label %if.end49, !dbg !16273

if.end49:                                         ; preds = %if.then47, %lor.lhs.false44
  %42 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16274
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !16274
  %bf.load50 = load i32, i32* %43, align 8, !dbg !16274
  %bf.lshr51 = lshr i32 %bf.load50, 16, !dbg !16274
  %bf.clear52 = and i32 %bf.lshr51, 255, !dbg !16274
  %cmp53 = icmp ne i32 %bf.clear52, 0, !dbg !16276
  br i1 %cmp53, label %land.lhs.true54, label %if.end64, !dbg !16277

land.lhs.true54:                                  ; preds = %if.end49
  %44 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16278
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !16278
  %bf.load55 = load i32, i32* %45, align 8, !dbg !16278
  %bf.lshr56 = lshr i32 %bf.load55, 16, !dbg !16278
  %bf.clear57 = and i32 %bf.lshr56, 255, !dbg !16278
  %46 = load i32, i32* %mode, align 4, !dbg !16279
  %cmp58 = icmp ne i32 %bf.clear57, %46, !dbg !16280
  br i1 %cmp58, label %if.then59, label %if.end64, !dbg !16281

if.then59:                                        ; preds = %land.lhs.true54
  %47 = load i32, i32* %mode, align 4, !dbg !16282
  %48 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16283
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !16283
  %bf.load60 = load i32, i32* %49, align 8, !dbg !16283
  %bf.lshr61 = lshr i32 %bf.load60, 16, !dbg !16283
  %bf.clear62 = and i32 %bf.lshr61, 255, !dbg !16283
  %50 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16284
  %call63 = call %struct.rtx_def* @convert_modes(i32 %47, i32 %bf.clear62, %struct.rtx_def* %50, i32 1), !dbg !16285
  store %struct.rtx_def* %call63, %struct.rtx_def** %val.addr, align 8, !dbg !16286
  br label %if.end64, !dbg !16287

if.end64:                                         ; preds = %if.then59, %land.lhs.true54, %if.end49
  %51 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !16288
  %52 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16290
  %53 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16291
  %call65 = call zeroext i8 @expand_compare_and_swap_loop(%struct.rtx_def* %51, %struct.rtx_def* %52, %struct.rtx_def* %53, %struct.rtx_def* null), !dbg !16292
  %tobool66 = icmp ne i8 %call65, 0, !dbg !16292
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !16293

if.then67:                                        ; preds = %if.end64
  %54 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !16294
  store %struct.rtx_def* %54, %struct.rtx_def** %retval, align 8, !dbg !16295
  br label %return, !dbg !16295

if.end68:                                         ; preds = %if.end64
  br label %if.end69, !dbg !16296

if.end69:                                         ; preds = %if.end68, %if.end38
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !16297
  br label %return, !dbg !16297

return:                                           ; preds = %if.end69, %if.then67, %if.then35
  %55 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !16298
  ret %struct.rtx_def* %55, !dbg !16298
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_libfunc_entry(i8* %x_p) #0 !dbg !16299 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.libfunc_entry*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !16300, metadata !DIExpression()), !dbg !16301
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry** %x, metadata !16302, metadata !DIExpression()), !dbg !16304
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !16305
  %1 = bitcast i8* %0 to %struct.libfunc_entry*, !dbg !16306
  store %struct.libfunc_entry* %1, %struct.libfunc_entry** %x, align 8, !dbg !16304
  %2 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16307
  %cmp = icmp ne %struct.libfunc_entry* %2, null, !dbg !16307
  br i1 %cmp, label %land.lhs.true, label %if.end6, !dbg !16307

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16307
  %4 = bitcast %struct.libfunc_entry* %3 to i8*, !dbg !16307
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !16307
  br i1 %cmp1, label %land.lhs.true2, label %if.end6, !dbg !16307

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16307
  %6 = bitcast %struct.libfunc_entry* %5 to i8*, !dbg !16307
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !16307
  %tobool = icmp ne i32 %call, 0, !dbg !16307
  br i1 %tobool, label %if.end6, label %if.then, !dbg !16309

if.then:                                          ; preds = %land.lhs.true2
  br label %do.body, !dbg !16310

do.body:                                          ; preds = %if.then
  %7 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16312
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %7, i32 0, i32 3, !dbg !16312
  %8 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !16312
  %cmp3 = icmp ne %struct.rtx_def* %8, null, !dbg !16312
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !16315

if.then4:                                         ; preds = %do.body
  %9 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16312
  %libfunc5 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %9, i32 0, i32 3, !dbg !16312
  %10 = load %struct.rtx_def*, %struct.rtx_def** %libfunc5, align 8, !dbg !16312
  %11 = bitcast %struct.rtx_def* %10 to i8*, !dbg !16312
  call void @gt_ggc_mx_rtx_def(i8* %11), !dbg !16312
  br label %if.end, !dbg !16312

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end, !dbg !16315

do.end:                                           ; preds = %if.end
  br label %if.end6, !dbg !16316

if.end6:                                          ; preds = %do.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !16317
}

declare dso_local i32 @ggc_set_mark(i8*) #2

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_m_P13libfunc_entry4htab(i8* %x_p) #0 !dbg !16318 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !16319, metadata !DIExpression()), !dbg !16320
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !16321, metadata !DIExpression()), !dbg !16323
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !16324
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !16325
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !16323
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16326
  %cmp = icmp ne %struct.htab* %2, null, !dbg !16326
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !16326

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16326
  %4 = bitcast %struct.htab* %3 to i8*, !dbg !16326
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !16326
  br i1 %cmp1, label %land.lhs.true2, label %if.end21, !dbg !16326

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16326
  %6 = bitcast %struct.htab* %5 to i8*, !dbg !16326
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !16326
  %tobool = icmp ne i32 %call, 0, !dbg !16326
  br i1 %tobool, label %if.end21, label %if.then, !dbg !16328

if.then:                                          ; preds = %land.lhs.true2
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16329
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !16332
  %8 = load i8**, i8*** %entries, align 8, !dbg !16332
  %cmp3 = icmp ne i8** %8, null, !dbg !16333
  br i1 %cmp3, label %if.then4, label %if.end20, !dbg !16334

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !16335, metadata !DIExpression()), !dbg !16337
  store i64 0, i64* %i0, align 8, !dbg !16338
  br label %for.cond, !dbg !16340

for.cond:                                         ; preds = %for.inc, %if.then4
  %9 = load i64, i64* %i0, align 8, !dbg !16341
  %10 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16343
  %size = getelementptr inbounds %struct.htab, %struct.htab* %10, i32 0, i32 4, !dbg !16344
  %11 = load i64, i64* %size, align 8, !dbg !16344
  %cmp5 = icmp ne i64 %9, %11, !dbg !16345
  br i1 %cmp5, label %for.body, label %for.end, !dbg !16346

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !16347

do.body:                                          ; preds = %for.body
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16349
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !16349
  %13 = load i8**, i8*** %entries6, align 8, !dbg !16349
  %14 = load i64, i64* %i0, align 8, !dbg !16349
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !16349
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !16349
  %cmp7 = icmp ne i8* %15, null, !dbg !16349
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !16352

if.then8:                                         ; preds = %do.body
  %16 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16349
  %entries9 = getelementptr inbounds %struct.htab, %struct.htab* %16, i32 0, i32 3, !dbg !16349
  %17 = load i8**, i8*** %entries9, align 8, !dbg !16349
  %18 = load i64, i64* %i0, align 8, !dbg !16349
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i64 %18, !dbg !16349
  %19 = load i8*, i8** %arrayidx10, align 8, !dbg !16349
  call void @gt_ggc_mx_libfunc_entry(i8* %19), !dbg !16349
  br label %if.end, !dbg !16349

if.end:                                           ; preds = %if.then8, %do.body
  br label %do.end, !dbg !16352

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !16353

for.inc:                                          ; preds = %do.end
  %20 = load i64, i64* %i0, align 8, !dbg !16354
  %inc = add i64 %20, 1, !dbg !16354
  store i64 %inc, i64* %i0, align 8, !dbg !16354
  br label %for.cond, !dbg !16355, !llvm.loop !16356

for.end:                                          ; preds = %for.cond
  br label %do.body11, !dbg !16358

do.body11:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !16359, metadata !DIExpression()), !dbg !16362
  %21 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16362
  %entries12 = getelementptr inbounds %struct.htab, %struct.htab* %21, i32 0, i32 3, !dbg !16362
  %22 = load i8**, i8*** %entries12, align 8, !dbg !16362
  %23 = bitcast i8** %22 to i8*, !dbg !16362
  store i8* %23, i8** %a__, align 8, !dbg !16362
  %24 = load i8*, i8** %a__, align 8, !dbg !16363
  %cmp13 = icmp ne i8* %24, null, !dbg !16363
  br i1 %cmp13, label %land.lhs.true14, label %if.end18, !dbg !16363

land.lhs.true14:                                  ; preds = %do.body11
  %25 = load i8*, i8** %a__, align 8, !dbg !16363
  %cmp15 = icmp ne i8* %25, inttoptr (i64 1 to i8*), !dbg !16363
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !16362

if.then16:                                        ; preds = %land.lhs.true14
  %26 = load i8*, i8** %a__, align 8, !dbg !16363
  %call17 = call i32 @ggc_set_mark(i8* %26), !dbg !16363
  br label %if.end18, !dbg !16363

if.end18:                                         ; preds = %if.then16, %land.lhs.true14, %do.body11
  br label %do.end19, !dbg !16362

do.end19:                                         ; preds = %if.end18
  br label %if.end20, !dbg !16365

if.end20:                                         ; preds = %do.end19, %if.then
  br label %if.end21, !dbg !16366

if.end21:                                         ; preds = %if.end20, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !16367
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_libfunc_entry(i8* %x_p) #0 !dbg !16368 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.libfunc_entry*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !16369, metadata !DIExpression()), !dbg !16370
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry** %x, metadata !16371, metadata !DIExpression()), !dbg !16372
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !16373
  %1 = bitcast i8* %0 to %struct.libfunc_entry*, !dbg !16374
  store %struct.libfunc_entry* %1, %struct.libfunc_entry** %x, align 8, !dbg !16372
  %2 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16375
  %3 = bitcast %struct.libfunc_entry* %2 to i8*, !dbg !16375
  %4 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16377
  %5 = bitcast %struct.libfunc_entry* %4 to i8*, !dbg !16377
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_13libfunc_entry, i32 62), !dbg !16378
  %tobool = icmp ne i32 %call, 0, !dbg !16378
  br i1 %tobool, label %if.then, label %if.end3, !dbg !16379

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !16380

do.body:                                          ; preds = %if.then
  %6 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16382
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %6, i32 0, i32 3, !dbg !16382
  %7 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !16382
  %cmp = icmp ne %struct.rtx_def* %7, null, !dbg !16382
  br i1 %cmp, label %if.then1, label %if.end, !dbg !16385

if.then1:                                         ; preds = %do.body
  %8 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16382
  %libfunc2 = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %8, i32 0, i32 3, !dbg !16382
  %9 = load %struct.rtx_def*, %struct.rtx_def** %libfunc2, align 8, !dbg !16382
  %10 = bitcast %struct.rtx_def* %9 to i8*, !dbg !16382
  call void @gt_pch_nx_rtx_def(i8* %10), !dbg !16382
  br label %if.end, !dbg !16382

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end, !dbg !16385

do.end:                                           ; preds = %if.end
  br label %if.end3, !dbg !16386

if.end3:                                          ; preds = %do.end, %entry
  ret void, !dbg !16387
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_13libfunc_entry(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !16388 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.libfunc_entry*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !16392, metadata !DIExpression()), !dbg !16393
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !16394, metadata !DIExpression()), !dbg !16395
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !16396, metadata !DIExpression()), !dbg !16397
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !16398, metadata !DIExpression()), !dbg !16399
  call void @llvm.dbg.declare(metadata %struct.libfunc_entry** %x, metadata !16400, metadata !DIExpression()), !dbg !16401
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !16402
  %1 = bitcast i8* %0 to %struct.libfunc_entry*, !dbg !16403
  store %struct.libfunc_entry* %1, %struct.libfunc_entry** %x, align 8, !dbg !16401
  %2 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16404
  %3 = bitcast %struct.libfunc_entry* %2 to i8*, !dbg !16406
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !16407
  %cmp = icmp eq i8* %3, %4, !dbg !16408
  br i1 %cmp, label %if.then, label %if.end, !dbg !16409

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !16410
  %6 = load %struct.libfunc_entry*, %struct.libfunc_entry** %x, align 8, !dbg !16411
  %libfunc = getelementptr inbounds %struct.libfunc_entry, %struct.libfunc_entry* %6, i32 0, i32 3, !dbg !16412
  %7 = bitcast %struct.rtx_def** %libfunc to i8*, !dbg !16413
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !16414
  call void %5(i8* %7, i8* %8), !dbg !16410
  br label %if.end, !dbg !16410

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !16415
}

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_n_P13libfunc_entry4htab(i8* %x_p) #0 !dbg !16416 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !16417, metadata !DIExpression()), !dbg !16418
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !16419, metadata !DIExpression()), !dbg !16420
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !16421
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !16422
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !16420
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16423
  %3 = bitcast %struct.htab* %2 to i8*, !dbg !16423
  %4 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16425
  %5 = bitcast %struct.htab* %4 to i8*, !dbg !16425
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P13libfunc_entry4htab, i32 198), !dbg !16426
  %tobool = icmp ne i32 %call, 0, !dbg !16426
  br i1 %tobool, label %if.then, label %if.end11, !dbg !16427

if.then:                                          ; preds = %entry
  %6 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16428
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %6, i32 0, i32 3, !dbg !16431
  %7 = load i8**, i8*** %entries, align 8, !dbg !16431
  %cmp = icmp ne i8** %7, null, !dbg !16432
  br i1 %cmp, label %if.then1, label %if.end10, !dbg !16433

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !16434, metadata !DIExpression()), !dbg !16436
  store i64 0, i64* %i0, align 8, !dbg !16437
  br label %for.cond, !dbg !16439

for.cond:                                         ; preds = %for.inc, %if.then1
  %8 = load i64, i64* %i0, align 8, !dbg !16440
  %9 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16442
  %size = getelementptr inbounds %struct.htab, %struct.htab* %9, i32 0, i32 4, !dbg !16443
  %10 = load i64, i64* %size, align 8, !dbg !16443
  %cmp2 = icmp ne i64 %8, %10, !dbg !16444
  br i1 %cmp2, label %for.body, label %for.end, !dbg !16445

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !16446

do.body:                                          ; preds = %for.body
  %11 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16448
  %entries3 = getelementptr inbounds %struct.htab, %struct.htab* %11, i32 0, i32 3, !dbg !16448
  %12 = load i8**, i8*** %entries3, align 8, !dbg !16448
  %13 = load i64, i64* %i0, align 8, !dbg !16448
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %13, !dbg !16448
  %14 = load i8*, i8** %arrayidx, align 8, !dbg !16448
  %cmp4 = icmp ne i8* %14, null, !dbg !16448
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !16451

if.then5:                                         ; preds = %do.body
  %15 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16448
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %15, i32 0, i32 3, !dbg !16448
  %16 = load i8**, i8*** %entries6, align 8, !dbg !16448
  %17 = load i64, i64* %i0, align 8, !dbg !16448
  %arrayidx7 = getelementptr inbounds i8*, i8** %16, i64 %17, !dbg !16448
  %18 = load i8*, i8** %arrayidx7, align 8, !dbg !16448
  call void @gt_pch_nx_libfunc_entry(i8* %18), !dbg !16448
  br label %if.end, !dbg !16448

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !16451

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !16452

for.inc:                                          ; preds = %do.end
  %19 = load i64, i64* %i0, align 8, !dbg !16453
  %inc = add i64 %19, 1, !dbg !16453
  store i64 %inc, i64* %i0, align 8, !dbg !16453
  br label %for.cond, !dbg !16454, !llvm.loop !16455

for.end:                                          ; preds = %for.cond
  %20 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16457
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %20, i32 0, i32 3, !dbg !16458
  %21 = load i8**, i8*** %entries8, align 8, !dbg !16458
  %22 = bitcast i8** %21 to i8*, !dbg !16459
  %23 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16460
  %24 = bitcast %struct.htab* %23 to i8*, !dbg !16460
  %call9 = call i32 @gt_pch_note_object(i8* %22, i8* %24, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P13libfunc_entry4htab, i32 217), !dbg !16461
  br label %if.end10, !dbg !16462

if.end10:                                         ; preds = %for.end, %if.then
  br label %if.end11, !dbg !16463

if.end11:                                         ; preds = %if.end10, %entry
  ret void, !dbg !16464
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_P13libfunc_entry4htab(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !16465 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !16466, metadata !DIExpression()), !dbg !16467
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !16468, metadata !DIExpression()), !dbg !16469
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !16470, metadata !DIExpression()), !dbg !16471
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !16472, metadata !DIExpression()), !dbg !16473
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !16474, metadata !DIExpression()), !dbg !16475
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !16476
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !16477
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !16475
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16478
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !16480
  %3 = load i8**, i8*** %entries, align 8, !dbg !16480
  %cmp = icmp ne i8** %3, null, !dbg !16481
  br i1 %cmp, label %if.then, label %if.end10, !dbg !16482

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !16483, metadata !DIExpression()), !dbg !16485
  store i64 0, i64* %i0, align 8, !dbg !16486
  br label %for.cond, !dbg !16488

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i64, i64* %i0, align 8, !dbg !16489
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16491
  %size = getelementptr inbounds %struct.htab, %struct.htab* %5, i32 0, i32 4, !dbg !16492
  %6 = load i64, i64* %size, align 8, !dbg !16492
  %cmp1 = icmp ne i64 %4, %6, !dbg !16493
  br i1 %cmp1, label %for.body, label %for.end, !dbg !16494

for.body:                                         ; preds = %for.cond
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16495
  %entries2 = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !16498
  %8 = load i8**, i8*** %entries2, align 8, !dbg !16498
  %9 = bitcast i8** %8 to i8*, !dbg !16499
  %10 = load i8*, i8** %this_obj.addr, align 8, !dbg !16500
  %cmp3 = icmp eq i8* %9, %10, !dbg !16501
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !16502

if.then4:                                         ; preds = %for.body
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !16503
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16504
  %entries5 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !16505
  %13 = load i8**, i8*** %entries5, align 8, !dbg !16505
  %14 = load i64, i64* %i0, align 8, !dbg !16506
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !16507
  %15 = bitcast i8** %arrayidx to i8*, !dbg !16508
  %16 = load i8*, i8** %cookie.addr, align 8, !dbg !16509
  call void %11(i8* %15, i8* %16), !dbg !16503
  br label %if.end, !dbg !16503

if.end:                                           ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !16510

for.inc:                                          ; preds = %if.end
  %17 = load i64, i64* %i0, align 8, !dbg !16511
  %inc = add i64 %17, 1, !dbg !16511
  store i64 %inc, i64* %i0, align 8, !dbg !16511
  br label %for.cond, !dbg !16512, !llvm.loop !16513

for.end:                                          ; preds = %for.cond
  %18 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16515
  %19 = bitcast %struct.htab* %18 to i8*, !dbg !16517
  %20 = load i8*, i8** %this_obj.addr, align 8, !dbg !16518
  %cmp6 = icmp eq i8* %19, %20, !dbg !16519
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !16520

if.then7:                                         ; preds = %for.end
  %21 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !16521
  %22 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !16522
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %22, i32 0, i32 3, !dbg !16523
  %23 = bitcast i8*** %entries8 to i8*, !dbg !16524
  %24 = load i8*, i8** %cookie.addr, align 8, !dbg !16525
  call void %21(i8* %23, i8* %24), !dbg !16521
  br label %if.end9, !dbg !16521

if.end9:                                          ; preds = %if.then7, %for.end
  br label %if.end10, !dbg !16526

if.end10:                                         ; preds = %if.end9, %entry
  ret void, !dbg !16527
}

declare dso_local void @gt_ggc_m_P9tree_node4htab(i8*) #2

declare dso_local void @gt_pch_n_P9tree_node4htab(i8*) #2

declare dso_local %struct.rtx_def* @simplify_binary_operation(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

declare dso_local i32 @rtx_cost(%struct.rtx_def*, i32, i8 zeroext) #2

declare dso_local i64 @trunc_int_for_mode(i64, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #2

declare dso_local i32 @commutative_operand_precedence(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @immed_double_const(i64, i64, i32) #2

declare dso_local %struct.rtx_def* @simplify_relational_operation(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expand_superword_shift(%struct.optab_d* %binoptab, %struct.rtx_def* %outof_input, %struct.rtx_def* %superword_op1, %struct.rtx_def* %outof_target, %struct.rtx_def* %into_target, i32 %unsignedp, i32 %methods) #0 !dbg !16528 {
entry:
  %retval = alloca i8, align 1
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %outof_input.addr = alloca %struct.rtx_def*, align 8
  %superword_op1.addr = alloca %struct.rtx_def*, align 8
  %outof_target.addr = alloca %struct.rtx_def*, align 8
  %into_target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !16531, metadata !DIExpression()), !dbg !16532
  store %struct.rtx_def* %outof_input, %struct.rtx_def** %outof_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_input.addr, metadata !16533, metadata !DIExpression()), !dbg !16534
  store %struct.rtx_def* %superword_op1, %struct.rtx_def** %superword_op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %superword_op1.addr, metadata !16535, metadata !DIExpression()), !dbg !16536
  store %struct.rtx_def* %outof_target, %struct.rtx_def** %outof_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_target.addr, metadata !16537, metadata !DIExpression()), !dbg !16538
  store %struct.rtx_def* %into_target, %struct.rtx_def** %into_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_target.addr, metadata !16539, metadata !DIExpression()), !dbg !16540
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !16541, metadata !DIExpression()), !dbg !16542
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !16543, metadata !DIExpression()), !dbg !16544
  %0 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16545
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !16547
  br i1 %cmp, label %if.then, label %if.end2, !dbg !16548

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @word_mode, align 4, !dbg !16549
  %2 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16551
  %3 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16552
  %4 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1.addr, align 8, !dbg !16553
  %5 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16554
  %6 = load i32, i32* %unsignedp.addr, align 4, !dbg !16555
  %7 = load i32, i32* %methods.addr, align 4, !dbg !16556
  %call = call zeroext i8 @force_expand_binop(i32 %1, %struct.optab_d* %2, %struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5, i32 %6, i32 %7), !dbg !16557
  %tobool = icmp ne i8 %call, 0, !dbg !16557
  br i1 %tobool, label %if.end, label %if.then1, !dbg !16558

if.then1:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !16559
  br label %return, !dbg !16559

if.end:                                           ; preds = %if.then
  br label %if.end2, !dbg !16560

if.end2:                                          ; preds = %if.end, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16561
  %cmp3 = icmp ne %struct.rtx_def* %8, null, !dbg !16563
  br i1 %cmp3, label %if.then4, label %if.end14, !dbg !16564

if.then4:                                         ; preds = %if.end2
  %9 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16565
  %cmp5 = icmp ne %struct.optab_d* %9, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), !dbg !16568
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !16569

if.then6:                                         ; preds = %if.then4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16570
  %11 = load i32, i32* @word_mode, align 4, !dbg !16571
  %idxprom = sext i32 %11 to i64, !dbg !16571
  %arrayidx = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom, !dbg !16571
  %12 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !16571
  %call7 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %12), !dbg !16572
  br label %if.end13, !dbg !16572

if.else:                                          ; preds = %if.then4
  %13 = load i32, i32* @word_mode, align 4, !dbg !16573
  %14 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16575
  %15 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16576
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 31), !dbg !16577
  %16 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16578
  %17 = load i32, i32* %unsignedp.addr, align 4, !dbg !16579
  %18 = load i32, i32* %methods.addr, align 4, !dbg !16580
  %call9 = call zeroext i8 @force_expand_binop(i32 %13, %struct.optab_d* %14, %struct.rtx_def* %15, %struct.rtx_def* %call8, %struct.rtx_def* %16, i32 %17, i32 %18), !dbg !16581
  %tobool10 = icmp ne i8 %call9, 0, !dbg !16581
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !16582

if.then11:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !16583
  br label %return, !dbg !16583

if.end12:                                         ; preds = %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then6
  br label %if.end14, !dbg !16584

if.end14:                                         ; preds = %if.end13, %if.end2
  store i8 1, i8* %retval, align 1, !dbg !16585
  br label %return, !dbg !16585

return:                                           ; preds = %if.end14, %if.then11, %if.then1
  %19 = load i8, i8* %retval, align 1, !dbg !16586
  ret i8 %19, !dbg !16586
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expand_subword_shift(i32 %op1_mode, %struct.optab_d* %binoptab, %struct.rtx_def* %outof_input, %struct.rtx_def* %into_input, %struct.rtx_def* %op1, %struct.rtx_def* %outof_target, %struct.rtx_def* %into_target, i32 %unsignedp, i32 %methods, i64 %shift_mask) #0 !dbg !16587 {
entry:
  %retval = alloca i8, align 1
  %op1_mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %outof_input.addr = alloca %struct.rtx_def*, align 8
  %into_input.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  %outof_target.addr = alloca %struct.rtx_def*, align 8
  %into_target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %shift_mask.addr = alloca i64, align 8
  %reverse_unsigned_shift = alloca %struct.optab_d*, align 8
  %unsigned_shift = alloca %struct.optab_d*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %carries = alloca %struct.rtx_def*, align 8
  store i32 %op1_mode, i32* %op1_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1_mode.addr, metadata !16588, metadata !DIExpression()), !dbg !16589
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !16590, metadata !DIExpression()), !dbg !16591
  store %struct.rtx_def* %outof_input, %struct.rtx_def** %outof_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_input.addr, metadata !16592, metadata !DIExpression()), !dbg !16593
  store %struct.rtx_def* %into_input, %struct.rtx_def** %into_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_input.addr, metadata !16594, metadata !DIExpression()), !dbg !16595
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !16596, metadata !DIExpression()), !dbg !16597
  store %struct.rtx_def* %outof_target, %struct.rtx_def** %outof_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_target.addr, metadata !16598, metadata !DIExpression()), !dbg !16599
  store %struct.rtx_def* %into_target, %struct.rtx_def** %into_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_target.addr, metadata !16600, metadata !DIExpression()), !dbg !16601
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !16602, metadata !DIExpression()), !dbg !16603
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !16604, metadata !DIExpression()), !dbg !16605
  store i64 %shift_mask, i64* %shift_mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %shift_mask.addr, metadata !16606, metadata !DIExpression()), !dbg !16607
  call void @llvm.dbg.declare(metadata %struct.optab_d** %reverse_unsigned_shift, metadata !16608, metadata !DIExpression()), !dbg !16609
  call void @llvm.dbg.declare(metadata %struct.optab_d** %unsigned_shift, metadata !16610, metadata !DIExpression()), !dbg !16611
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !16612, metadata !DIExpression()), !dbg !16613
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %carries, metadata !16614, metadata !DIExpression()), !dbg !16615
  %0 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16616
  %cmp = icmp eq %struct.optab_d* %0, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !16617
  %1 = zext i1 %cmp to i64, !dbg !16616
  %cond = select i1 %cmp, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !16616
  store %struct.optab_d* %cond, %struct.optab_d** %reverse_unsigned_shift, align 8, !dbg !16618
  %2 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16619
  %cmp1 = icmp eq %struct.optab_d* %2, getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), !dbg !16620
  %3 = zext i1 %cmp1 to i64, !dbg !16619
  %cond2 = select i1 %cmp1, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 45), !dbg !16619
  store %struct.optab_d* %cond2, %struct.optab_d** %unsigned_shift, align 8, !dbg !16621
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !16622
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !16622
  %bf.load = load i32, i32* %5, align 8, !dbg !16622
  %bf.clear = and i32 %bf.load, 65535, !dbg !16622
  %idxprom = sext i32 %bf.clear to i64, !dbg !16622
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !16622
  %6 = load i32, i32* %arrayidx, align 4, !dbg !16622
  %cmp3 = icmp eq i32 %6, 9, !dbg !16622
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !16624

lor.lhs.false:                                    ; preds = %entry
  %7 = load i64, i64* %shift_mask.addr, align 8, !dbg !16625
  %cmp4 = icmp uge i64 %7, 32, !dbg !16626
  br i1 %cmp4, label %if.then, label %if.else, !dbg !16627

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16628
  store %struct.rtx_def* %8, %struct.rtx_def** %carries, align 8, !dbg !16630
  %9 = load i32, i32* %op1_mode.addr, align 4, !dbg !16631
  %call = call %struct.rtx_def* @immed_double_const(i64 32, i64 0, i32 %9), !dbg !16632
  store %struct.rtx_def* %call, %struct.rtx_def** %tmp, align 8, !dbg !16633
  %10 = load i32, i32* %op1_mode.addr, align 4, !dbg !16634
  %11 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16635
  %12 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !16636
  %13 = load i32, i32* %methods.addr, align 4, !dbg !16637
  %call5 = call %struct.rtx_def* @simplify_expand_binop(i32 %10, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %11, %struct.rtx_def* %12, %struct.rtx_def* null, i32 1, i32 %13), !dbg !16638
  store %struct.rtx_def* %call5, %struct.rtx_def** %tmp, align 8, !dbg !16639
  br label %if.end14, !dbg !16640

if.else:                                          ; preds = %lor.lhs.false
  %14 = load i32, i32* @word_mode, align 4, !dbg !16641
  %15 = load %struct.optab_d*, %struct.optab_d** %reverse_unsigned_shift, align 8, !dbg !16643
  %16 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16644
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !16645
  %18 = load i32, i32* %unsignedp.addr, align 4, !dbg !16646
  %19 = load i32, i32* %methods.addr, align 4, !dbg !16647
  %call6 = call %struct.rtx_def* @expand_binop(i32 %14, %struct.optab_d* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* null, i32 %18, i32 %19), !dbg !16648
  store %struct.rtx_def* %call6, %struct.rtx_def** %carries, align 8, !dbg !16649
  %20 = load i64, i64* %shift_mask.addr, align 8, !dbg !16650
  %cmp7 = icmp eq i64 %20, 31, !dbg !16652
  br i1 %cmp7, label %if.then8, label %if.else11, !dbg !16653

if.then8:                                         ; preds = %if.else
  %21 = load i32, i32* %op1_mode.addr, align 4, !dbg !16654
  %call9 = call %struct.rtx_def* @immed_double_const(i64 -1, i64 -1, i32 %21), !dbg !16656
  store %struct.rtx_def* %call9, %struct.rtx_def** %tmp, align 8, !dbg !16657
  %22 = load i32, i32* %op1_mode.addr, align 4, !dbg !16658
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !16659
  %24 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16660
  %25 = load i32, i32* %methods.addr, align 4, !dbg !16661
  %call10 = call %struct.rtx_def* @simplify_expand_binop(i32 %22, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 43), %struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* null, i32 1, i32 %25), !dbg !16662
  store %struct.rtx_def* %call10, %struct.rtx_def** %tmp, align 8, !dbg !16663
  br label %if.end, !dbg !16664

if.else11:                                        ; preds = %if.else
  %26 = load i32, i32* %op1_mode.addr, align 4, !dbg !16665
  %call12 = call %struct.rtx_def* @immed_double_const(i64 31, i64 0, i32 %26), !dbg !16667
  store %struct.rtx_def* %call12, %struct.rtx_def** %tmp, align 8, !dbg !16668
  %27 = load i32, i32* %op1_mode.addr, align 4, !dbg !16669
  %28 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16670
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !16671
  %30 = load i32, i32* %methods.addr, align 4, !dbg !16672
  %call13 = call %struct.rtx_def* @simplify_expand_binop(i32 %27, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 14), %struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* null, i32 1, i32 %30), !dbg !16673
  store %struct.rtx_def* %call13, %struct.rtx_def** %tmp, align 8, !dbg !16674
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then8
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then
  %31 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16675
  %cmp15 = icmp eq %struct.rtx_def* %31, null, !dbg !16677
  br i1 %cmp15, label %if.then18, label %lor.lhs.false16, !dbg !16678

lor.lhs.false16:                                  ; preds = %if.end14
  %32 = load %struct.rtx_def*, %struct.rtx_def** %carries, align 8, !dbg !16679
  %cmp17 = icmp eq %struct.rtx_def* %32, null, !dbg !16680
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !16681

if.then18:                                        ; preds = %lor.lhs.false16, %if.end14
  store i8 0, i8* %retval, align 1, !dbg !16682
  br label %return, !dbg !16682

if.end19:                                         ; preds = %lor.lhs.false16
  %33 = load i32, i32* @word_mode, align 4, !dbg !16683
  %34 = load %struct.optab_d*, %struct.optab_d** %reverse_unsigned_shift, align 8, !dbg !16684
  %35 = load %struct.rtx_def*, %struct.rtx_def** %carries, align 8, !dbg !16685
  %36 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16686
  %37 = load i32, i32* %unsignedp.addr, align 4, !dbg !16687
  %38 = load i32, i32* %methods.addr, align 4, !dbg !16688
  %call20 = call %struct.rtx_def* @expand_binop(i32 %33, %struct.optab_d* %34, %struct.rtx_def* %35, %struct.rtx_def* %36, %struct.rtx_def* null, i32 %37, i32 %38), !dbg !16689
  store %struct.rtx_def* %call20, %struct.rtx_def** %carries, align 8, !dbg !16690
  %39 = load %struct.rtx_def*, %struct.rtx_def** %carries, align 8, !dbg !16691
  %cmp21 = icmp eq %struct.rtx_def* %39, null, !dbg !16693
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !16694

if.then22:                                        ; preds = %if.end19
  store i8 0, i8* %retval, align 1, !dbg !16695
  br label %return, !dbg !16695

if.end23:                                         ; preds = %if.end19
  %40 = load i32, i32* @word_mode, align 4, !dbg !16696
  %41 = load %struct.optab_d*, %struct.optab_d** %unsigned_shift, align 8, !dbg !16697
  %42 = load %struct.rtx_def*, %struct.rtx_def** %into_input.addr, align 8, !dbg !16698
  %43 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !16699
  %44 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16700
  %45 = load i32, i32* %unsignedp.addr, align 4, !dbg !16701
  %46 = load i32, i32* %methods.addr, align 4, !dbg !16702
  %call24 = call %struct.rtx_def* @expand_binop(i32 %40, %struct.optab_d* %41, %struct.rtx_def* %42, %struct.rtx_def* %43, %struct.rtx_def* %44, i32 %45, i32 %46), !dbg !16703
  store %struct.rtx_def* %call24, %struct.rtx_def** %tmp, align 8, !dbg !16704
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16705
  %cmp25 = icmp eq %struct.rtx_def* %47, null, !dbg !16707
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !16708

if.then26:                                        ; preds = %if.end23
  store i8 0, i8* %retval, align 1, !dbg !16709
  br label %return, !dbg !16709

if.end27:                                         ; preds = %if.end23
  %48 = load i32, i32* @word_mode, align 4, !dbg !16710
  %49 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16712
  %50 = load %struct.rtx_def*, %struct.rtx_def** %carries, align 8, !dbg !16713
  %51 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16714
  %52 = load i32, i32* %unsignedp.addr, align 4, !dbg !16715
  %53 = load i32, i32* %methods.addr, align 4, !dbg !16716
  %call28 = call zeroext i8 @force_expand_binop(i32 %48, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 42), %struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51, i32 %52, i32 %53), !dbg !16717
  %tobool = icmp ne i8 %call28, 0, !dbg !16717
  br i1 %tobool, label %if.end30, label %if.then29, !dbg !16718

if.then29:                                        ; preds = %if.end27
  store i8 0, i8* %retval, align 1, !dbg !16719
  br label %return, !dbg !16719

if.end30:                                         ; preds = %if.end27
  %54 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16720
  %cmp31 = icmp ne %struct.rtx_def* %54, null, !dbg !16722
  br i1 %cmp31, label %if.then32, label %if.end37, !dbg !16723

if.then32:                                        ; preds = %if.end30
  %55 = load i32, i32* @word_mode, align 4, !dbg !16724
  %56 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16726
  %57 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16727
  %58 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !16728
  %59 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16729
  %60 = load i32, i32* %unsignedp.addr, align 4, !dbg !16730
  %61 = load i32, i32* %methods.addr, align 4, !dbg !16731
  %call33 = call zeroext i8 @force_expand_binop(i32 %55, %struct.optab_d* %56, %struct.rtx_def* %57, %struct.rtx_def* %58, %struct.rtx_def* %59, i32 %60, i32 %61), !dbg !16732
  %tobool34 = icmp ne i8 %call33, 0, !dbg !16732
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !16733

if.then35:                                        ; preds = %if.then32
  store i8 0, i8* %retval, align 1, !dbg !16734
  br label %return, !dbg !16734

if.end36:                                         ; preds = %if.then32
  br label %if.end37, !dbg !16735

if.end37:                                         ; preds = %if.end36, %if.end30
  store i8 1, i8* %retval, align 1, !dbg !16736
  br label %return, !dbg !16736

return:                                           ; preds = %if.end37, %if.then35, %if.then29, %if.then26, %if.then22, %if.then18
  %62 = load i8, i8* %retval, align 1, !dbg !16737
  ret i8 %62, !dbg !16737
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expand_doubleword_shift_condmove(i32 %op1_mode, %struct.optab_d* %binoptab, i32 %cmp_code, %struct.rtx_def* %cmp1, %struct.rtx_def* %cmp2, %struct.rtx_def* %outof_input, %struct.rtx_def* %into_input, %struct.rtx_def* %subword_op1, %struct.rtx_def* %superword_op1, %struct.rtx_def* %outof_target, %struct.rtx_def* %into_target, i32 %unsignedp, i32 %methods, i64 %shift_mask) #0 !dbg !16738 {
entry:
  %retval = alloca i8, align 1
  %op1_mode.addr = alloca i32, align 4
  %binoptab.addr = alloca %struct.optab_d*, align 8
  %cmp_code.addr = alloca i32, align 4
  %cmp1.addr = alloca %struct.rtx_def*, align 8
  %cmp2.addr = alloca %struct.rtx_def*, align 8
  %outof_input.addr = alloca %struct.rtx_def*, align 8
  %into_input.addr = alloca %struct.rtx_def*, align 8
  %subword_op1.addr = alloca %struct.rtx_def*, align 8
  %superword_op1.addr = alloca %struct.rtx_def*, align 8
  %outof_target.addr = alloca %struct.rtx_def*, align 8
  %into_target.addr = alloca %struct.rtx_def*, align 8
  %unsignedp.addr = alloca i32, align 4
  %methods.addr = alloca i32, align 4
  %shift_mask.addr = alloca i64, align 8
  %outof_superword = alloca %struct.rtx_def*, align 8
  %into_superword = alloca %struct.rtx_def*, align 8
  store i32 %op1_mode, i32* %op1_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op1_mode.addr, metadata !16741, metadata !DIExpression()), !dbg !16742
  store %struct.optab_d* %binoptab, %struct.optab_d** %binoptab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %binoptab.addr, metadata !16743, metadata !DIExpression()), !dbg !16744
  store i32 %cmp_code, i32* %cmp_code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cmp_code.addr, metadata !16745, metadata !DIExpression()), !dbg !16746
  store %struct.rtx_def* %cmp1, %struct.rtx_def** %cmp1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp1.addr, metadata !16747, metadata !DIExpression()), !dbg !16748
  store %struct.rtx_def* %cmp2, %struct.rtx_def** %cmp2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp2.addr, metadata !16749, metadata !DIExpression()), !dbg !16750
  store %struct.rtx_def* %outof_input, %struct.rtx_def** %outof_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_input.addr, metadata !16751, metadata !DIExpression()), !dbg !16752
  store %struct.rtx_def* %into_input, %struct.rtx_def** %into_input.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_input.addr, metadata !16753, metadata !DIExpression()), !dbg !16754
  store %struct.rtx_def* %subword_op1, %struct.rtx_def** %subword_op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subword_op1.addr, metadata !16755, metadata !DIExpression()), !dbg !16756
  store %struct.rtx_def* %superword_op1, %struct.rtx_def** %superword_op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %superword_op1.addr, metadata !16757, metadata !DIExpression()), !dbg !16758
  store %struct.rtx_def* %outof_target, %struct.rtx_def** %outof_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_target.addr, metadata !16759, metadata !DIExpression()), !dbg !16760
  store %struct.rtx_def* %into_target, %struct.rtx_def** %into_target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_target.addr, metadata !16761, metadata !DIExpression()), !dbg !16762
  store i32 %unsignedp, i32* %unsignedp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unsignedp.addr, metadata !16763, metadata !DIExpression()), !dbg !16764
  store i32 %methods, i32* %methods.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %methods.addr, metadata !16765, metadata !DIExpression()), !dbg !16766
  store i64 %shift_mask, i64* %shift_mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %shift_mask.addr, metadata !16767, metadata !DIExpression()), !dbg !16768
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outof_superword, metadata !16769, metadata !DIExpression()), !dbg !16770
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %into_superword, metadata !16771, metadata !DIExpression()), !dbg !16772
  %0 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16773
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !16774
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !16773

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* @word_mode, align 4, !dbg !16775
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %1), !dbg !16776
  br label %cond.end, !dbg !16773

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16773

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %call, %cond.true ], [ null, %cond.false ], !dbg !16773
  store %struct.rtx_def* %cond, %struct.rtx_def** %outof_superword, align 8, !dbg !16777
  %2 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16778
  %cmp3 = icmp ne %struct.rtx_def* %2, null, !dbg !16780
  br i1 %cmp3, label %land.lhs.true, label %if.else, !dbg !16781

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %subword_op1.addr, align 8, !dbg !16782
  %4 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1.addr, align 8, !dbg !16783
  %cmp4 = icmp eq %struct.rtx_def* %3, %4, !dbg !16784
  br i1 %cmp4, label %if.then, label %if.else, !dbg !16785

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16786
  store %struct.rtx_def* %5, %struct.rtx_def** %into_superword, align 8, !dbg !16788
  %6 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16789
  %7 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16791
  %8 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1.addr, align 8, !dbg !16792
  %9 = load %struct.rtx_def*, %struct.rtx_def** %outof_superword, align 8, !dbg !16793
  %10 = load i32, i32* %unsignedp.addr, align 4, !dbg !16794
  %11 = load i32, i32* %methods.addr, align 4, !dbg !16795
  %call5 = call zeroext i8 @expand_superword_shift(%struct.optab_d* %6, %struct.rtx_def* %7, %struct.rtx_def* %8, %struct.rtx_def* %9, %struct.rtx_def* null, i32 %10, i32 %11), !dbg !16796
  %tobool = icmp ne i8 %call5, 0, !dbg !16796
  br i1 %tobool, label %if.end, label %if.then6, !dbg !16797

if.then6:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !16798
  br label %return, !dbg !16798

if.end:                                           ; preds = %if.then
  br label %if.end12, !dbg !16799

if.else:                                          ; preds = %land.lhs.true, %cond.end
  %12 = load i32, i32* @word_mode, align 4, !dbg !16800
  %call7 = call %struct.rtx_def* @gen_reg_rtx(i32 %12), !dbg !16802
  store %struct.rtx_def* %call7, %struct.rtx_def** %into_superword, align 8, !dbg !16803
  %13 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16804
  %14 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16806
  %15 = load %struct.rtx_def*, %struct.rtx_def** %superword_op1.addr, align 8, !dbg !16807
  %16 = load %struct.rtx_def*, %struct.rtx_def** %outof_superword, align 8, !dbg !16808
  %17 = load %struct.rtx_def*, %struct.rtx_def** %into_superword, align 8, !dbg !16809
  %18 = load i32, i32* %unsignedp.addr, align 4, !dbg !16810
  %19 = load i32, i32* %methods.addr, align 4, !dbg !16811
  %call8 = call zeroext i8 @expand_superword_shift(%struct.optab_d* %13, %struct.rtx_def* %14, %struct.rtx_def* %15, %struct.rtx_def* %16, %struct.rtx_def* %17, i32 %18, i32 %19), !dbg !16812
  %tobool9 = icmp ne i8 %call8, 0, !dbg !16812
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !16813

if.then10:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !16814
  br label %return, !dbg !16814

if.end11:                                         ; preds = %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.end
  %20 = load i32, i32* %op1_mode.addr, align 4, !dbg !16815
  %21 = load %struct.optab_d*, %struct.optab_d** %binoptab.addr, align 8, !dbg !16817
  %22 = load %struct.rtx_def*, %struct.rtx_def** %outof_input.addr, align 8, !dbg !16818
  %23 = load %struct.rtx_def*, %struct.rtx_def** %into_input.addr, align 8, !dbg !16819
  %24 = load %struct.rtx_def*, %struct.rtx_def** %subword_op1.addr, align 8, !dbg !16820
  %25 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16821
  %26 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16822
  %27 = load i32, i32* %unsignedp.addr, align 4, !dbg !16823
  %28 = load i32, i32* %methods.addr, align 4, !dbg !16824
  %29 = load i64, i64* %shift_mask.addr, align 8, !dbg !16825
  %call13 = call zeroext i8 @expand_subword_shift(i32 %20, %struct.optab_d* %21, %struct.rtx_def* %22, %struct.rtx_def* %23, %struct.rtx_def* %24, %struct.rtx_def* %25, %struct.rtx_def* %26, i32 %27, i32 %28, i64 %29), !dbg !16826
  %tobool14 = icmp ne i8 %call13, 0, !dbg !16826
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !16827

if.then15:                                        ; preds = %if.end12
  store i8 0, i8* %retval, align 1, !dbg !16828
  br label %return, !dbg !16828

if.end16:                                         ; preds = %if.end12
  %30 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16829
  %31 = load i32, i32* %cmp_code.addr, align 4, !dbg !16831
  %32 = load %struct.rtx_def*, %struct.rtx_def** %cmp1.addr, align 8, !dbg !16832
  %33 = load %struct.rtx_def*, %struct.rtx_def** %cmp2.addr, align 8, !dbg !16833
  %34 = load i32, i32* %op1_mode.addr, align 4, !dbg !16834
  %35 = load %struct.rtx_def*, %struct.rtx_def** %into_target.addr, align 8, !dbg !16835
  %36 = load %struct.rtx_def*, %struct.rtx_def** %into_superword, align 8, !dbg !16836
  %37 = load i32, i32* @word_mode, align 4, !dbg !16837
  %call17 = call %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %30, i32 %31, %struct.rtx_def* %32, %struct.rtx_def* %33, i32 %34, %struct.rtx_def* %35, %struct.rtx_def* %36, i32 %37, i32 0), !dbg !16838
  %tobool18 = icmp ne %struct.rtx_def* %call17, null, !dbg !16838
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !16839

if.then19:                                        ; preds = %if.end16
  store i8 0, i8* %retval, align 1, !dbg !16840
  br label %return, !dbg !16840

if.end20:                                         ; preds = %if.end16
  %38 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16841
  %cmp21 = icmp ne %struct.rtx_def* %38, null, !dbg !16843
  br i1 %cmp21, label %if.then22, label %if.end27, !dbg !16844

if.then22:                                        ; preds = %if.end20
  %39 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16845
  %40 = load i32, i32* %cmp_code.addr, align 4, !dbg !16847
  %41 = load %struct.rtx_def*, %struct.rtx_def** %cmp1.addr, align 8, !dbg !16848
  %42 = load %struct.rtx_def*, %struct.rtx_def** %cmp2.addr, align 8, !dbg !16849
  %43 = load i32, i32* %op1_mode.addr, align 4, !dbg !16850
  %44 = load %struct.rtx_def*, %struct.rtx_def** %outof_target.addr, align 8, !dbg !16851
  %45 = load %struct.rtx_def*, %struct.rtx_def** %outof_superword, align 8, !dbg !16852
  %46 = load i32, i32* @word_mode, align 4, !dbg !16853
  %call23 = call %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %39, i32 %40, %struct.rtx_def* %41, %struct.rtx_def* %42, i32 %43, %struct.rtx_def* %44, %struct.rtx_def* %45, i32 %46, i32 0), !dbg !16854
  %tobool24 = icmp ne %struct.rtx_def* %call23, null, !dbg !16854
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !16855

if.then25:                                        ; preds = %if.then22
  store i8 0, i8* %retval, align 1, !dbg !16856
  br label %return, !dbg !16856

if.end26:                                         ; preds = %if.then22
  br label %if.end27, !dbg !16857

if.end27:                                         ; preds = %if.end26, %if.end20
  store i8 1, i8* %retval, align 1, !dbg !16858
  br label %return, !dbg !16858

return:                                           ; preds = %if.end27, %if.then25, %if.then19, %if.then15, %if.then10, %if.then6
  %47 = load i8, i8* %retval, align 1, !dbg !16859
  ret i8 %47, !dbg !16859
}

declare dso_local %struct.rtx_def* @gen_highpart(i32, %struct.rtx_def*) #2

declare dso_local i32 @int_mode_for_mode(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @lowpart_subreg_maybe_copy(i32 %omode, %struct.rtx_def* %val, i32 %imode) #0 !dbg !16860 {
entry:
  %omode.addr = alloca i32, align 4
  %val.addr = alloca %struct.rtx_def*, align 8
  %imode.addr = alloca i32, align 4
  %ret = alloca %struct.rtx_def*, align 8
  store i32 %omode, i32* %omode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %omode.addr, metadata !16863, metadata !DIExpression()), !dbg !16864
  store %struct.rtx_def* %val, %struct.rtx_def** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val.addr, metadata !16865, metadata !DIExpression()), !dbg !16866
  store i32 %imode, i32* %imode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %imode.addr, metadata !16867, metadata !DIExpression()), !dbg !16868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ret, metadata !16869, metadata !DIExpression()), !dbg !16870
  %0 = load i32, i32* %omode.addr, align 4, !dbg !16871
  %1 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16872
  %2 = load i32, i32* %imode.addr, align 4, !dbg !16873
  %call = call %struct.rtx_def* @lowpart_subreg(i32 %0, %struct.rtx_def* %1, i32 %2), !dbg !16874
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8, !dbg !16875
  %3 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !16876
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !16878
  br i1 %cmp, label %if.then, label %if.end, !dbg !16879

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %imode.addr, align 4, !dbg !16880
  %5 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16882
  %call1 = call %struct.rtx_def* @force_reg(i32 %4, %struct.rtx_def* %5), !dbg !16883
  store %struct.rtx_def* %call1, %struct.rtx_def** %val.addr, align 8, !dbg !16884
  %6 = load i32, i32* %omode.addr, align 4, !dbg !16885
  %7 = load %struct.rtx_def*, %struct.rtx_def** %val.addr, align 8, !dbg !16886
  %8 = load i32, i32* %imode.addr, align 4, !dbg !16887
  %call2 = call %struct.rtx_def* @lowpart_subreg(i32 %6, %struct.rtx_def* %7, i32 %8), !dbg !16888
  store %struct.rtx_def* %call2, %struct.rtx_def** %ret, align 8, !dbg !16889
  %9 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !16890
  %cmp3 = icmp ne %struct.rtx_def* %9, null, !dbg !16890
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !16890

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2916, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !16890
  br label %cond.end, !dbg !16890

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !16890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !16890
  br label %if.end, !dbg !16891

if.end:                                           ; preds = %cond.end, %entry
  %10 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !16892
  ret %struct.rtx_def* %10, !dbg !16893
}

declare dso_local %struct.rtx_def* @lowpart_subreg(i32, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare dso_local i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @reg_set_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @find_reg_fusage(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local i32 @reg_used_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @modified_in_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @modified_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_float_lib_cmp(%struct.rtx_def* %x, %struct.rtx_def* %y, i32 %comparison, %struct.rtx_def** %ptest, i32* %pmode) #0 !dbg !16894 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %comparison.addr = alloca i32, align 4
  %ptest.addr = alloca %struct.rtx_def**, align 8
  %pmode.addr = alloca i32*, align 8
  %swapped = alloca i32, align 4
  %reversed = alloca i32, align 4
  %orig_mode = alloca i32, align 4
  %mode = alloca i32, align 4
  %cmp_mode = alloca i32, align 4
  %value = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %equiv = alloca %struct.rtx_def*, align 8
  %libfunc = alloca %struct.rtx_def*, align 8
  %reversed_p = alloca i8, align 1
  %tmp = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %true_rtx = alloca %struct.rtx_def*, align 8
  %false_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !16897, metadata !DIExpression()), !dbg !16898
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !16899, metadata !DIExpression()), !dbg !16900
  store i32 %comparison, i32* %comparison.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %comparison.addr, metadata !16901, metadata !DIExpression()), !dbg !16902
  store %struct.rtx_def** %ptest, %struct.rtx_def*** %ptest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ptest.addr, metadata !16903, metadata !DIExpression()), !dbg !16904
  store i32* %pmode, i32** %pmode.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pmode.addr, metadata !16905, metadata !DIExpression()), !dbg !16906
  call void @llvm.dbg.declare(metadata i32* %swapped, metadata !16907, metadata !DIExpression()), !dbg !16908
  %0 = load i32, i32* %comparison.addr, align 4, !dbg !16909
  %call = call i32 @swap_condition(i32 %0), !dbg !16910
  store i32 %call, i32* %swapped, align 4, !dbg !16908
  call void @llvm.dbg.declare(metadata i32* %reversed, metadata !16911, metadata !DIExpression()), !dbg !16912
  %1 = load i32, i32* %comparison.addr, align 4, !dbg !16913
  %call1 = call i32 @reverse_condition_maybe_unordered(i32 %1), !dbg !16914
  store i32 %call1, i32* %reversed, align 4, !dbg !16912
  call void @llvm.dbg.declare(metadata i32* %orig_mode, metadata !16915, metadata !DIExpression()), !dbg !16916
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !16917
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !16917
  %bf.load = load i32, i32* %3, align 8, !dbg !16917
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !16917
  %bf.clear = and i32 %bf.lshr, 255, !dbg !16917
  store i32 %bf.clear, i32* %orig_mode, align 4, !dbg !16916
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !16918, metadata !DIExpression()), !dbg !16919
  call void @llvm.dbg.declare(metadata i32* %cmp_mode, metadata !16920, metadata !DIExpression()), !dbg !16921
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value, metadata !16922, metadata !DIExpression()), !dbg !16923
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !16924, metadata !DIExpression()), !dbg !16925
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !16926, metadata !DIExpression()), !dbg !16927
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %equiv, metadata !16928, metadata !DIExpression()), !dbg !16929
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %libfunc, metadata !16930, metadata !DIExpression()), !dbg !16931
  store %struct.rtx_def* null, %struct.rtx_def** %libfunc, align 8, !dbg !16931
  call void @llvm.dbg.declare(metadata i8* %reversed_p, metadata !16932, metadata !DIExpression()), !dbg !16933
  store i8 0, i8* %reversed_p, align 1, !dbg !16933
  %4 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 8), align 8, !dbg !16934
  %call2 = call i32 %4(), !dbg !16935
  store i32 %call2, i32* %cmp_mode, align 4, !dbg !16936
  %5 = load i32, i32* %orig_mode, align 4, !dbg !16937
  store i32 %5, i32* %mode, align 4, !dbg !16939
  br label %for.cond, !dbg !16940

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %mode, align 4, !dbg !16941
  %cmp = icmp ne i32 %6, 0, !dbg !16943
  br i1 %cmp, label %for.body, label %for.end, !dbg !16944

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %comparison.addr, align 4, !dbg !16945
  %idxprom = zext i32 %7 to i64, !dbg !16948
  %arrayidx = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom, !dbg !16948
  %8 = load %struct.optab_d*, %struct.optab_d** %arrayidx, align 8, !dbg !16948
  %tobool = icmp ne %struct.optab_d* %8, null, !dbg !16948
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !16949

land.lhs.true:                                    ; preds = %for.body
  %9 = load i32, i32* %comparison.addr, align 4, !dbg !16950
  %idxprom3 = zext i32 %9 to i64, !dbg !16951
  %arrayidx4 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom3, !dbg !16951
  %10 = load %struct.optab_d*, %struct.optab_d** %arrayidx4, align 8, !dbg !16951
  %11 = load i32, i32* %mode, align 4, !dbg !16952
  %call5 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %10, i32 %11), !dbg !16953
  store %struct.rtx_def* %call5, %struct.rtx_def** %libfunc, align 8, !dbg !16954
  %tobool6 = icmp ne %struct.rtx_def* %call5, null, !dbg !16954
  br i1 %tobool6, label %if.then, label %if.end, !dbg !16955

if.then:                                          ; preds = %land.lhs.true
  br label %for.end, !dbg !16956

if.end:                                           ; preds = %land.lhs.true, %for.body
  %12 = load i32, i32* %swapped, align 4, !dbg !16957
  %idxprom7 = zext i32 %12 to i64, !dbg !16959
  %arrayidx8 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom7, !dbg !16959
  %13 = load %struct.optab_d*, %struct.optab_d** %arrayidx8, align 8, !dbg !16959
  %tobool9 = icmp ne %struct.optab_d* %13, null, !dbg !16959
  br i1 %tobool9, label %land.lhs.true10, label %if.end16, !dbg !16960

land.lhs.true10:                                  ; preds = %if.end
  %14 = load i32, i32* %swapped, align 4, !dbg !16961
  %idxprom11 = zext i32 %14 to i64, !dbg !16962
  %arrayidx12 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom11, !dbg !16962
  %15 = load %struct.optab_d*, %struct.optab_d** %arrayidx12, align 8, !dbg !16962
  %16 = load i32, i32* %mode, align 4, !dbg !16963
  %call13 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %15, i32 %16), !dbg !16964
  store %struct.rtx_def* %call13, %struct.rtx_def** %libfunc, align 8, !dbg !16965
  %tobool14 = icmp ne %struct.rtx_def* %call13, null, !dbg !16965
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !16966

if.then15:                                        ; preds = %land.lhs.true10
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !16967, metadata !DIExpression()), !dbg !16969
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !16970
  store %struct.rtx_def* %17, %struct.rtx_def** %tmp, align 8, !dbg !16971
  %18 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !16972
  store %struct.rtx_def* %18, %struct.rtx_def** %x.addr, align 8, !dbg !16973
  %19 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !16974
  store %struct.rtx_def* %19, %struct.rtx_def** %y.addr, align 8, !dbg !16975
  %20 = load i32, i32* %swapped, align 4, !dbg !16976
  store i32 %20, i32* %comparison.addr, align 4, !dbg !16977
  br label %for.end, !dbg !16978

if.end16:                                         ; preds = %land.lhs.true10, %if.end
  %21 = load i32, i32* %reversed, align 4, !dbg !16979
  %idxprom17 = zext i32 %21 to i64, !dbg !16981
  %arrayidx18 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom17, !dbg !16981
  %22 = load %struct.optab_d*, %struct.optab_d** %arrayidx18, align 8, !dbg !16981
  %tobool19 = icmp ne %struct.optab_d* %22, null, !dbg !16981
  br i1 %tobool19, label %land.lhs.true20, label %if.end27, !dbg !16982

land.lhs.true20:                                  ; preds = %if.end16
  %23 = load i32, i32* %reversed, align 4, !dbg !16983
  %idxprom21 = zext i32 %23 to i64, !dbg !16984
  %arrayidx22 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom21, !dbg !16984
  %24 = load %struct.optab_d*, %struct.optab_d** %arrayidx22, align 8, !dbg !16984
  %25 = load i32, i32* %mode, align 4, !dbg !16985
  %call23 = call %struct.rtx_def* @optab_libfunc(%struct.optab_d* %24, i32 %25), !dbg !16986
  store %struct.rtx_def* %call23, %struct.rtx_def** %libfunc, align 8, !dbg !16987
  %tobool24 = icmp ne %struct.rtx_def* %call23, null, !dbg !16987
  br i1 %tobool24, label %land.lhs.true25, label %if.end27, !dbg !16988

land.lhs.true25:                                  ; preds = %land.lhs.true20
  br i1 false, label %if.then26, label %if.end27, !dbg !16989

if.then26:                                        ; preds = %land.lhs.true25
  %26 = load i32, i32* %reversed, align 4, !dbg !16990
  store i32 %26, i32* %comparison.addr, align 4, !dbg !16992
  store i8 1, i8* %reversed_p, align 1, !dbg !16993
  br label %for.end, !dbg !16994

if.end27:                                         ; preds = %land.lhs.true25, %land.lhs.true20, %if.end16
  br label %for.inc, !dbg !16995

for.inc:                                          ; preds = %if.end27
  %27 = load i32, i32* %mode, align 4, !dbg !16996
  %idxprom28 = zext i32 %27 to i64, !dbg !16996
  %arrayidx29 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom28, !dbg !16996
  %28 = load i8, i8* %arrayidx29, align 1, !dbg !16996
  %conv = zext i8 %28 to i32, !dbg !16996
  store i32 %conv, i32* %mode, align 4, !dbg !16997
  br label %for.cond, !dbg !16998, !llvm.loop !16999

for.end:                                          ; preds = %if.then26, %if.then15, %if.then, %for.cond
  %29 = load i32, i32* %mode, align 4, !dbg !17001
  %cmp30 = icmp ne i32 %29, 0, !dbg !17001
  br i1 %cmp30, label %cond.false, label %cond.true, !dbg !17001

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4392, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !17001
  br label %cond.end, !dbg !17001

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !17001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17001
  %30 = load i32, i32* %mode, align 4, !dbg !17002
  %31 = load i32, i32* %orig_mode, align 4, !dbg !17004
  %cmp32 = icmp ne i32 %30, %31, !dbg !17005
  br i1 %cmp32, label %if.then34, label %if.end37, !dbg !17006

if.then34:                                        ; preds = %cond.end
  %32 = load i32, i32* %mode, align 4, !dbg !17007
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !17009
  %call35 = call %struct.rtx_def* @convert_to_mode(i32 %32, %struct.rtx_def* %33, i32 0), !dbg !17010
  store %struct.rtx_def* %call35, %struct.rtx_def** %x.addr, align 8, !dbg !17011
  %34 = load i32, i32* %mode, align 4, !dbg !17012
  %35 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !17013
  %call36 = call %struct.rtx_def* @convert_to_mode(i32 %34, %struct.rtx_def* %35, i32 0), !dbg !17014
  store %struct.rtx_def* %call36, %struct.rtx_def** %y.addr, align 8, !dbg !17015
  br label %if.end37, !dbg !17016

if.end37:                                         ; preds = %if.then34, %cond.end
  %36 = load i32, i32* %comparison.addr, align 4, !dbg !17017
  %cmp38 = icmp eq i32 %36, 90, !dbg !17019
  br i1 %cmp38, label %if.then40, label %if.else, !dbg !17020

if.then40:                                        ; preds = %if.end37
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !17021, metadata !DIExpression()), !dbg !17023
  %37 = load i32, i32* %cmp_mode, align 4, !dbg !17024
  %38 = load i32, i32* %mode, align 4, !dbg !17025
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !17026
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !17027
  %call41 = call %struct.rtx_def* @simplify_gen_relational(i32 80, i32 %37, i32 %38, %struct.rtx_def* %39, %struct.rtx_def* %40), !dbg !17028
  store %struct.rtx_def* %call41, %struct.rtx_def** %temp, align 8, !dbg !17023
  %41 = load i32, i32* %cmp_mode, align 4, !dbg !17029
  %42 = load i32, i32* %mode, align 4, !dbg !17030
  %43 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !17031
  %44 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !17032
  %call42 = call %struct.rtx_def* @simplify_gen_relational(i32 80, i32 %41, i32 %42, %struct.rtx_def* %43, %struct.rtx_def* %44), !dbg !17033
  store %struct.rtx_def* %call42, %struct.rtx_def** %equiv, align 8, !dbg !17034
  %45 = load i32, i32* %cmp_mode, align 4, !dbg !17035
  %46 = load i32, i32* %cmp_mode, align 4, !dbg !17036
  %47 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !17037
  %48 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8, !dbg !17038
  %49 = load %struct.rtx_def*, %struct.rtx_def** %equiv, align 8, !dbg !17039
  %call43 = call %struct.rtx_def* @simplify_gen_ternary(i32 47, i32 %45, i32 %46, %struct.rtx_def* %47, %struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !17040
  store %struct.rtx_def* %call43, %struct.rtx_def** %equiv, align 8, !dbg !17041
  br label %if.end51, !dbg !17042

if.else:                                          ; preds = %if.end37
  %50 = load i32, i32* %comparison.addr, align 4, !dbg !17043
  %51 = load i32, i32* %cmp_mode, align 4, !dbg !17045
  %52 = load i32, i32* %mode, align 4, !dbg !17046
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !17047
  %54 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !17048
  %call44 = call %struct.rtx_def* @simplify_gen_relational(i32 %50, i32 %51, i32 %52, %struct.rtx_def* %53, %struct.rtx_def* %54), !dbg !17049
  store %struct.rtx_def* %call44, %struct.rtx_def** %equiv, align 8, !dbg !17050
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %true_rtx, metadata !17051, metadata !DIExpression()), !dbg !17054
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %false_rtx, metadata !17055, metadata !DIExpression()), !dbg !17056
  %55 = load i32, i32* %comparison.addr, align 4, !dbg !17057
  switch i32 %55, label %sw.default [
    i32 81, label %sw.bb
    i32 80, label %sw.bb45
    i32 83, label %sw.bb46
    i32 82, label %sw.bb47
    i32 85, label %sw.bb48
    i32 84, label %sw.bb49
  ], !dbg !17058

sw.bb:                                            ; preds = %if.else
  %56 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17059
  store %struct.rtx_def* %56, %struct.rtx_def** %true_rtx, align 8, !dbg !17061
  %57 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8, !dbg !17062
  store %struct.rtx_def* %57, %struct.rtx_def** %false_rtx, align 8, !dbg !17063
  br label %sw.epilog, !dbg !17064

sw.bb45:                                          ; preds = %if.else
  %58 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8, !dbg !17065
  store %struct.rtx_def* %58, %struct.rtx_def** %true_rtx, align 8, !dbg !17066
  %59 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17067
  store %struct.rtx_def* %59, %struct.rtx_def** %false_rtx, align 8, !dbg !17068
  br label %sw.epilog, !dbg !17069

sw.bb46:                                          ; preds = %if.else
  %60 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !17070
  store %struct.rtx_def* %60, %struct.rtx_def** %true_rtx, align 8, !dbg !17071
  %61 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17072
  store %struct.rtx_def* %61, %struct.rtx_def** %false_rtx, align 8, !dbg !17073
  br label %sw.epilog, !dbg !17074

sw.bb47:                                          ; preds = %if.else
  %62 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17075
  store %struct.rtx_def* %62, %struct.rtx_def** %true_rtx, align 8, !dbg !17076
  %63 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !17077
  store %struct.rtx_def* %63, %struct.rtx_def** %false_rtx, align 8, !dbg !17078
  br label %sw.epilog, !dbg !17079

sw.bb48:                                          ; preds = %if.else
  %64 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !17080
  store %struct.rtx_def* %64, %struct.rtx_def** %true_rtx, align 8, !dbg !17081
  %65 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17082
  store %struct.rtx_def* %65, %struct.rtx_def** %false_rtx, align 8, !dbg !17083
  br label %sw.epilog, !dbg !17084

sw.bb49:                                          ; preds = %if.else
  %66 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17085
  store %struct.rtx_def* %66, %struct.rtx_def** %true_rtx, align 8, !dbg !17086
  %67 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !17087
  store %struct.rtx_def* %67, %struct.rtx_def** %false_rtx, align 8, !dbg !17088
  br label %sw.epilog, !dbg !17089

sw.default:                                       ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 4450, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !17090
  br label %sw.epilog, !dbg !17091

sw.epilog:                                        ; preds = %sw.default, %sw.bb49, %sw.bb48, %sw.bb47, %sw.bb46, %sw.bb45, %sw.bb
  %68 = load i32, i32* %cmp_mode, align 4, !dbg !17092
  %69 = load i32, i32* %cmp_mode, align 4, !dbg !17093
  %70 = load %struct.rtx_def*, %struct.rtx_def** %equiv, align 8, !dbg !17094
  %71 = load %struct.rtx_def*, %struct.rtx_def** %true_rtx, align 8, !dbg !17095
  %72 = load %struct.rtx_def*, %struct.rtx_def** %false_rtx, align 8, !dbg !17096
  %call50 = call %struct.rtx_def* @simplify_gen_ternary(i32 47, i32 %68, i32 %69, %struct.rtx_def* %70, %struct.rtx_def* %71, %struct.rtx_def* %72), !dbg !17097
  store %struct.rtx_def* %call50, %struct.rtx_def** %equiv, align 8, !dbg !17098
  br label %if.end51

if.end51:                                         ; preds = %sw.epilog, %if.then40
  call void @start_sequence(), !dbg !17099
  %73 = load %struct.rtx_def*, %struct.rtx_def** %libfunc, align 8, !dbg !17100
  %74 = load i32, i32* %cmp_mode, align 4, !dbg !17101
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !17102
  %76 = load i32, i32* %mode, align 4, !dbg !17103
  %77 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !17104
  %78 = load i32, i32* %mode, align 4, !dbg !17105
  %call52 = call %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, ...) @emit_library_call_value(%struct.rtx_def* %73, %struct.rtx_def* null, i32 1, i32 %74, i32 2, %struct.rtx_def* %75, i32 %76, %struct.rtx_def* %77, i32 %78), !dbg !17106
  store %struct.rtx_def* %call52, %struct.rtx_def** %value, align 8, !dbg !17107
  %call53 = call %struct.rtx_def* @get_insns(), !dbg !17108
  store %struct.rtx_def* %call53, %struct.rtx_def** %insns, align 8, !dbg !17109
  call void @end_sequence(), !dbg !17110
  %79 = load i32, i32* %cmp_mode, align 4, !dbg !17111
  %call54 = call %struct.rtx_def* @gen_reg_rtx(i32 %79), !dbg !17112
  store %struct.rtx_def* %call54, %struct.rtx_def** %target, align 8, !dbg !17113
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !17114
  %81 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !17115
  %82 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !17116
  %83 = load %struct.rtx_def*, %struct.rtx_def** %equiv, align 8, !dbg !17117
  call void @emit_libcall_block(%struct.rtx_def* %80, %struct.rtx_def* %81, %struct.rtx_def* %82, %struct.rtx_def* %83), !dbg !17118
  %84 = load i32, i32* %comparison.addr, align 4, !dbg !17119
  %cmp55 = icmp eq i32 %84, 90, !dbg !17121
  br i1 %cmp55, label %if.then57, label %if.end61, !dbg !17122

if.then57:                                        ; preds = %if.end51
  %85 = load i8, i8* %reversed_p, align 1, !dbg !17123
  %conv58 = zext i8 %85 to i32, !dbg !17123
  %tobool59 = icmp ne i32 %conv58, 0, !dbg !17123
  %86 = zext i1 %tobool59 to i64, !dbg !17123
  %cond60 = select i1 %tobool59, i32 81, i32 80, !dbg !17123
  store i32 %cond60, i32* %comparison.addr, align 4, !dbg !17124
  br label %if.end61, !dbg !17125

if.end61:                                         ; preds = %if.then57, %if.end51
  %87 = load i32, i32* %comparison.addr, align 4, !dbg !17126
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !17126
  %89 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !17126
  %call62 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %87, i32 0, %struct.rtx_def* %88, %struct.rtx_def* %89), !dbg !17126
  %90 = load %struct.rtx_def**, %struct.rtx_def*** %ptest.addr, align 8, !dbg !17127
  store %struct.rtx_def* %call62, %struct.rtx_def** %90, align 8, !dbg !17128
  %91 = load i32, i32* %cmp_mode, align 4, !dbg !17129
  %92 = load i32*, i32** %pmode.addr, align 8, !dbg !17130
  store i32 %91, i32* %92, align 4, !dbg !17131
  ret void, !dbg !17132
}

declare dso_local i32 @reverse_condition_maybe_unordered(i32) #2

declare dso_local %struct.rtx_def* @simplify_gen_ternary(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gen_fixed_libfunc(%struct.optab_d* %optable, i8* %opname, i8 signext %suffix, i32 %mode) #0 !dbg !17133 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %suffix.addr = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !17134, metadata !DIExpression()), !dbg !17135
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !17136, metadata !DIExpression()), !dbg !17137
  store i8 %suffix, i8* %suffix.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %suffix.addr, metadata !17138, metadata !DIExpression()), !dbg !17139
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !17140, metadata !DIExpression()), !dbg !17141
  %0 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom = zext i32 %0 to i64, !dbg !17142
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !17142
  %1 = load i8, i8* %arrayidx, align 1, !dbg !17142
  %conv = zext i8 %1 to i32, !dbg !17142
  %cmp = icmp eq i32 %conv, 4, !dbg !17142
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !17142

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom2 = zext i32 %2 to i64, !dbg !17142
  %arrayidx3 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom2, !dbg !17142
  %3 = load i8, i8* %arrayidx3, align 1, !dbg !17142
  %conv4 = zext i8 %3 to i32, !dbg !17142
  %cmp5 = icmp eq i32 %conv4, 13, !dbg !17142
  br i1 %cmp5, label %if.end, label %lor.lhs.false7, !dbg !17142

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom8 = zext i32 %4 to i64, !dbg !17142
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom8, !dbg !17142
  %5 = load i8, i8* %arrayidx9, align 1, !dbg !17142
  %conv10 = zext i8 %5 to i32, !dbg !17142
  %cmp11 = icmp eq i32 %conv10, 6, !dbg !17142
  br i1 %cmp11, label %if.end, label %lor.lhs.false13, !dbg !17142

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %6 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom14 = zext i32 %6 to i64, !dbg !17142
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom14, !dbg !17142
  %7 = load i8, i8* %arrayidx15, align 1, !dbg !17142
  %conv16 = zext i8 %7 to i32, !dbg !17142
  %cmp17 = icmp eq i32 %conv16, 15, !dbg !17142
  br i1 %cmp17, label %if.end, label %lor.lhs.false19, !dbg !17142

lor.lhs.false19:                                  ; preds = %lor.lhs.false13
  %8 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom20 = zext i32 %8 to i64, !dbg !17142
  %arrayidx21 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom20, !dbg !17142
  %9 = load i8, i8* %arrayidx21, align 1, !dbg !17142
  %conv22 = zext i8 %9 to i32, !dbg !17142
  %cmp23 = icmp eq i32 %conv22, 5, !dbg !17142
  br i1 %cmp23, label %if.end, label %lor.lhs.false25, !dbg !17142

lor.lhs.false25:                                  ; preds = %lor.lhs.false19
  %10 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom26 = zext i32 %10 to i64, !dbg !17142
  %arrayidx27 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom26, !dbg !17142
  %11 = load i8, i8* %arrayidx27, align 1, !dbg !17142
  %conv28 = zext i8 %11 to i32, !dbg !17142
  %cmp29 = icmp eq i32 %conv28, 14, !dbg !17142
  br i1 %cmp29, label %if.end, label %lor.lhs.false31, !dbg !17142

lor.lhs.false31:                                  ; preds = %lor.lhs.false25
  %12 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom32 = zext i32 %12 to i64, !dbg !17142
  %arrayidx33 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom32, !dbg !17142
  %13 = load i8, i8* %arrayidx33, align 1, !dbg !17142
  %conv34 = zext i8 %13 to i32, !dbg !17142
  %cmp35 = icmp eq i32 %conv34, 7, !dbg !17142
  br i1 %cmp35, label %if.end, label %lor.lhs.false37, !dbg !17142

lor.lhs.false37:                                  ; preds = %lor.lhs.false31
  %14 = load i32, i32* %mode.addr, align 4, !dbg !17142
  %idxprom38 = zext i32 %14 to i64, !dbg !17142
  %arrayidx39 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom38, !dbg !17142
  %15 = load i8, i8* %arrayidx39, align 1, !dbg !17142
  %conv40 = zext i8 %15 to i32, !dbg !17142
  %cmp41 = icmp eq i32 %conv40, 16, !dbg !17142
  br i1 %cmp41, label %if.end, label %if.then, !dbg !17144

if.then:                                          ; preds = %lor.lhs.false37
  br label %return, !dbg !17145

if.end:                                           ; preds = %lor.lhs.false37, %lor.lhs.false31, %lor.lhs.false25, %lor.lhs.false19, %lor.lhs.false13, %lor.lhs.false7, %lor.lhs.false, %entry
  %16 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !17146
  %17 = load i8*, i8** %opname.addr, align 8, !dbg !17147
  %18 = load i8, i8* %suffix.addr, align 1, !dbg !17148
  %conv43 = sext i8 %18 to i32, !dbg !17148
  %19 = load i32, i32* %mode.addr, align 4, !dbg !17149
  call void @gen_libfunc(%struct.optab_d* %16, i8* %17, i32 %conv43, i32 %19), !dbg !17150
  br label %return, !dbg !17151

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !17151
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_libfunc(%struct.optab_d* %optable, i8* %opname, i32 %suffix, i32 %mode) #0 !dbg !17152 {
entry:
  %optable.addr = alloca %struct.optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %suffix.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %opname_len = alloca i32, align 4
  %mname = alloca i8*, align 8
  %mname_len = alloca i32, align 4
  %libfunc_name = alloca i8*, align 8
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  store %struct.optab_d* %optable, %struct.optab_d** %optable.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.optab_d** %optable.addr, metadata !17155, metadata !DIExpression()), !dbg !17156
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !17157, metadata !DIExpression()), !dbg !17158
  store i32 %suffix, i32* %suffix.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %suffix.addr, metadata !17159, metadata !DIExpression()), !dbg !17160
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !17161, metadata !DIExpression()), !dbg !17162
  call void @llvm.dbg.declare(metadata i32* %opname_len, metadata !17163, metadata !DIExpression()), !dbg !17164
  %0 = load i8*, i8** %opname.addr, align 8, !dbg !17165
  %call = call i64 @strlen(i8* %0), !dbg !17166
  %conv = trunc i64 %call to i32, !dbg !17166
  store i32 %conv, i32* %opname_len, align 4, !dbg !17164
  call void @llvm.dbg.declare(metadata i8** %mname, metadata !17167, metadata !DIExpression()), !dbg !17168
  %1 = load i32, i32* %mode.addr, align 4, !dbg !17169
  %idxprom = zext i32 %1 to i64, !dbg !17169
  %arrayidx = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom, !dbg !17169
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !17169
  store i8* %2, i8** %mname, align 8, !dbg !17168
  call void @llvm.dbg.declare(metadata i32* %mname_len, metadata !17170, metadata !DIExpression()), !dbg !17171
  %3 = load i8*, i8** %mname, align 8, !dbg !17172
  %call1 = call i64 @strlen(i8* %3), !dbg !17173
  %conv2 = trunc i64 %call1 to i32, !dbg !17173
  store i32 %conv2, i32* %mname_len, align 4, !dbg !17171
  call void @llvm.dbg.declare(metadata i8** %libfunc_name, metadata !17174, metadata !DIExpression()), !dbg !17175
  %4 = load i32, i32* %opname_len, align 4, !dbg !17176
  %add = add i32 2, %4, !dbg !17176
  %5 = load i32, i32* %mname_len, align 4, !dbg !17176
  %add3 = add i32 %add, %5, !dbg !17176
  %add4 = add i32 %add3, 1, !dbg !17176
  %add5 = add i32 %add4, 1, !dbg !17176
  %conv6 = zext i32 %add5 to i64, !dbg !17176
  %mul = mul i64 1, %conv6, !dbg !17176
  %6 = alloca i8, i64 %mul, align 16, !dbg !17176
  store i8* %6, i8** %libfunc_name, align 8, !dbg !17175
  call void @llvm.dbg.declare(metadata i8** %p, metadata !17177, metadata !DIExpression()), !dbg !17178
  call void @llvm.dbg.declare(metadata i8** %q, metadata !17179, metadata !DIExpression()), !dbg !17180
  %7 = load i8*, i8** %libfunc_name, align 8, !dbg !17181
  store i8* %7, i8** %p, align 8, !dbg !17182
  %8 = load i8*, i8** %p, align 8, !dbg !17183
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1, !dbg !17183
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !17183
  store i8 95, i8* %8, align 1, !dbg !17184
  %9 = load i8*, i8** %p, align 8, !dbg !17185
  %incdec.ptr7 = getelementptr inbounds i8, i8* %9, i32 1, !dbg !17185
  store i8* %incdec.ptr7, i8** %p, align 8, !dbg !17185
  store i8 95, i8* %9, align 1, !dbg !17186
  %10 = load i8*, i8** %opname.addr, align 8, !dbg !17187
  store i8* %10, i8** %q, align 8, !dbg !17189
  br label %for.cond, !dbg !17190

for.cond:                                         ; preds = %for.body, %entry
  %11 = load i8*, i8** %q, align 8, !dbg !17191
  %12 = load i8, i8* %11, align 1, !dbg !17193
  %tobool = icmp ne i8 %12, 0, !dbg !17194
  br i1 %tobool, label %for.body, label %for.end, !dbg !17194

for.body:                                         ; preds = %for.cond
  %13 = load i8*, i8** %q, align 8, !dbg !17195
  %incdec.ptr8 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !17195
  store i8* %incdec.ptr8, i8** %q, align 8, !dbg !17195
  %14 = load i8, i8* %13, align 1, !dbg !17196
  %15 = load i8*, i8** %p, align 8, !dbg !17197
  %incdec.ptr9 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !17197
  store i8* %incdec.ptr9, i8** %p, align 8, !dbg !17197
  store i8 %14, i8* %15, align 1, !dbg !17198
  br label %for.cond, !dbg !17199, !llvm.loop !17200

for.end:                                          ; preds = %for.cond
  %16 = load i8*, i8** %mname, align 8, !dbg !17202
  store i8* %16, i8** %q, align 8, !dbg !17204
  br label %for.cond10, !dbg !17205

for.cond10:                                       ; preds = %for.inc, %for.end
  %17 = load i8*, i8** %q, align 8, !dbg !17206
  %18 = load i8, i8* %17, align 1, !dbg !17208
  %tobool11 = icmp ne i8 %18, 0, !dbg !17209
  br i1 %tobool11, label %for.body12, label %for.end18, !dbg !17209

for.body12:                                       ; preds = %for.cond10
  %19 = load i8*, i8** %q, align 8, !dbg !17210
  %20 = load i8, i8* %19, align 1, !dbg !17210
  %conv13 = sext i8 %20 to i32, !dbg !17210
  %and = and i32 %conv13, 255, !dbg !17210
  %idxprom14 = sext i32 %and to i64, !dbg !17210
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* @_sch_tolower, i64 0, i64 %idxprom14, !dbg !17210
  %21 = load i8, i8* %arrayidx15, align 1, !dbg !17210
  %22 = load i8*, i8** %p, align 8, !dbg !17211
  %incdec.ptr16 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !17211
  store i8* %incdec.ptr16, i8** %p, align 8, !dbg !17211
  store i8 %21, i8* %22, align 1, !dbg !17212
  br label %for.inc, !dbg !17213

for.inc:                                          ; preds = %for.body12
  %23 = load i8*, i8** %q, align 8, !dbg !17214
  %incdec.ptr17 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !17214
  store i8* %incdec.ptr17, i8** %q, align 8, !dbg !17214
  br label %for.cond10, !dbg !17215, !llvm.loop !17216

for.end18:                                        ; preds = %for.cond10
  %24 = load i32, i32* %suffix.addr, align 4, !dbg !17218
  %conv19 = trunc i32 %24 to i8, !dbg !17218
  %25 = load i8*, i8** %p, align 8, !dbg !17219
  %incdec.ptr20 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !17219
  store i8* %incdec.ptr20, i8** %p, align 8, !dbg !17219
  store i8 %conv19, i8* %25, align 1, !dbg !17220
  %26 = load i8*, i8** %p, align 8, !dbg !17221
  store i8 0, i8* %26, align 1, !dbg !17222
  %27 = load %struct.optab_d*, %struct.optab_d** %optable.addr, align 8, !dbg !17223
  %28 = load i32, i32* %mode.addr, align 4, !dbg !17224
  %29 = load i8*, i8** %libfunc_name, align 8, !dbg !17225
  %30 = load i8*, i8** %p, align 8, !dbg !17226
  %31 = load i8*, i8** %libfunc_name, align 8, !dbg !17227
  %sub.ptr.lhs.cast = ptrtoint i8* %30 to i64, !dbg !17228
  %sub.ptr.rhs.cast = ptrtoint i8* %31 to i64, !dbg !17228
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !17228
  %conv21 = trunc i64 %sub.ptr.sub to i32, !dbg !17226
  %call22 = call i8* @ggc_alloc_string(i8* %29, i32 %conv21), !dbg !17229
  call void @set_optab_libfunc(%struct.optab_d* %27, i32 %28, i8* %call22), !dbg !17230
  ret void, !dbg !17231
}

declare dso_local i64 @strlen(i8*) #2

declare dso_local i8* @ggc_alloc_string(i8*, i32) #2

declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gen_interclass_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !17232 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  %opname_len = alloca i64, align 8
  %mname_len = alloca i64, align 8
  %fname = alloca i8*, align 8
  %tname = alloca i8*, align 8
  %q = alloca i8*, align 8
  %libfunc_name = alloca i8*, align 8
  %suffix = alloca i8*, align 8
  %nondec_name = alloca i8*, align 8
  %dec_name = alloca i8*, align 8
  %nondec_suffix = alloca i8*, align 8
  %dec_suffix = alloca i8*, align 8
  %p = alloca i8*, align 8
  %dec_len = alloca i64, align 8
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !17233, metadata !DIExpression()), !dbg !17234
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !17235, metadata !DIExpression()), !dbg !17236
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !17237, metadata !DIExpression()), !dbg !17238
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !17239, metadata !DIExpression()), !dbg !17240
  call void @llvm.dbg.declare(metadata i64* %opname_len, metadata !17241, metadata !DIExpression()), !dbg !17242
  %0 = load i8*, i8** %opname.addr, align 8, !dbg !17243
  %call = call i64 @strlen(i8* %0), !dbg !17244
  store i64 %call, i64* %opname_len, align 8, !dbg !17242
  call void @llvm.dbg.declare(metadata i64* %mname_len, metadata !17245, metadata !DIExpression()), !dbg !17246
  store i64 0, i64* %mname_len, align 8, !dbg !17246
  call void @llvm.dbg.declare(metadata i8** %fname, metadata !17247, metadata !DIExpression()), !dbg !17248
  call void @llvm.dbg.declare(metadata i8** %tname, metadata !17249, metadata !DIExpression()), !dbg !17250
  call void @llvm.dbg.declare(metadata i8** %q, metadata !17251, metadata !DIExpression()), !dbg !17252
  call void @llvm.dbg.declare(metadata i8** %libfunc_name, metadata !17253, metadata !DIExpression()), !dbg !17254
  call void @llvm.dbg.declare(metadata i8** %suffix, metadata !17255, metadata !DIExpression()), !dbg !17256
  call void @llvm.dbg.declare(metadata i8** %nondec_name, metadata !17257, metadata !DIExpression()), !dbg !17258
  call void @llvm.dbg.declare(metadata i8** %dec_name, metadata !17259, metadata !DIExpression()), !dbg !17260
  call void @llvm.dbg.declare(metadata i8** %nondec_suffix, metadata !17261, metadata !DIExpression()), !dbg !17262
  call void @llvm.dbg.declare(metadata i8** %dec_suffix, metadata !17263, metadata !DIExpression()), !dbg !17264
  call void @llvm.dbg.declare(metadata i8** %p, metadata !17265, metadata !DIExpression()), !dbg !17266
  call void @llvm.dbg.declare(metadata i64* %dec_len, metadata !17267, metadata !DIExpression()), !dbg !17269
  store i64 4, i64* %dec_len, align 8, !dbg !17269
  %1 = load i32, i32* %tmode.addr, align 4, !dbg !17270
  %idxprom = zext i32 %1 to i64, !dbg !17270
  %arrayidx = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom, !dbg !17270
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !17270
  %call1 = call i64 @strlen(i8* %2), !dbg !17271
  %3 = load i32, i32* %fmode.addr, align 4, !dbg !17272
  %idxprom2 = zext i32 %3 to i64, !dbg !17272
  %arrayidx3 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom2, !dbg !17272
  %4 = load i8*, i8** %arrayidx3, align 8, !dbg !17272
  %call4 = call i64 @strlen(i8* %4), !dbg !17273
  %add = add i64 %call1, %call4, !dbg !17274
  store i64 %add, i64* %mname_len, align 8, !dbg !17275
  %5 = load i64, i64* %opname_len, align 8, !dbg !17276
  %add5 = add i64 2, %5, !dbg !17276
  %6 = load i64, i64* %mname_len, align 8, !dbg !17276
  %add6 = add i64 %add5, %6, !dbg !17276
  %add7 = add i64 %add6, 1, !dbg !17276
  %add8 = add i64 %add7, 1, !dbg !17276
  %mul = mul i64 1, %add8, !dbg !17276
  %7 = alloca i8, i64 %mul, align 16, !dbg !17276
  store i8* %7, i8** %nondec_name, align 8, !dbg !17277
  %8 = load i8*, i8** %nondec_name, align 8, !dbg !17278
  %arrayidx9 = getelementptr inbounds i8, i8* %8, i64 0, !dbg !17278
  store i8 95, i8* %arrayidx9, align 1, !dbg !17279
  %9 = load i8*, i8** %nondec_name, align 8, !dbg !17280
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 1, !dbg !17280
  store i8 95, i8* %arrayidx10, align 1, !dbg !17281
  %10 = load i8*, i8** %nondec_name, align 8, !dbg !17282
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 2, !dbg !17282
  %11 = load i8*, i8** %opname.addr, align 8, !dbg !17283
  %12 = load i64, i64* %opname_len, align 8, !dbg !17284
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx11, i8* align 1 %11, i64 %12, i1 false), !dbg !17285
  %13 = load i8*, i8** %nondec_name, align 8, !dbg !17286
  %14 = load i64, i64* %opname_len, align 8, !dbg !17287
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %14, !dbg !17288
  %add.ptr12 = getelementptr inbounds i8, i8* %add.ptr, i64 2, !dbg !17289
  store i8* %add.ptr12, i8** %nondec_suffix, align 8, !dbg !17290
  %15 = load i64, i64* %opname_len, align 8, !dbg !17291
  %add13 = add i64 6, %15, !dbg !17291
  %16 = load i64, i64* %mname_len, align 8, !dbg !17291
  %add14 = add i64 %add13, %16, !dbg !17291
  %add15 = add i64 %add14, 1, !dbg !17291
  %add16 = add i64 %add15, 1, !dbg !17291
  %mul17 = mul i64 1, %add16, !dbg !17291
  %17 = alloca i8, i64 %mul17, align 16, !dbg !17291
  store i8* %17, i8** %dec_name, align 8, !dbg !17292
  %18 = load i8*, i8** %dec_name, align 8, !dbg !17293
  %arrayidx18 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !17293
  store i8 95, i8* %arrayidx18, align 1, !dbg !17294
  %19 = load i8*, i8** %dec_name, align 8, !dbg !17295
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 1, !dbg !17295
  store i8 95, i8* %arrayidx19, align 1, !dbg !17296
  %20 = load i8*, i8** %dec_name, align 8, !dbg !17297
  %arrayidx20 = getelementptr inbounds i8, i8* %20, i64 2, !dbg !17297
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx20, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i64 0, i64 0), i64 4, i1 false), !dbg !17298
  %21 = load i8*, i8** %dec_name, align 8, !dbg !17299
  %arrayidx21 = getelementptr inbounds i8, i8* %21, i64 6, !dbg !17299
  %22 = load i8*, i8** %opname.addr, align 8, !dbg !17300
  %23 = load i64, i64* %opname_len, align 8, !dbg !17301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx21, i8* align 1 %22, i64 %23, i1 false), !dbg !17302
  %24 = load i8*, i8** %dec_name, align 8, !dbg !17303
  %add.ptr22 = getelementptr inbounds i8, i8* %24, i64 4, !dbg !17304
  %25 = load i64, i64* %opname_len, align 8, !dbg !17305
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %25, !dbg !17306
  %add.ptr24 = getelementptr inbounds i8, i8* %add.ptr23, i64 2, !dbg !17307
  store i8* %add.ptr24, i8** %dec_suffix, align 8, !dbg !17308
  %26 = load i32, i32* %fmode.addr, align 4, !dbg !17309
  %idxprom25 = zext i32 %26 to i64, !dbg !17309
  %arrayidx26 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom25, !dbg !17309
  %27 = load i8*, i8** %arrayidx26, align 8, !dbg !17309
  store i8* %27, i8** %fname, align 8, !dbg !17310
  %28 = load i32, i32* %tmode.addr, align 4, !dbg !17311
  %idxprom27 = zext i32 %28 to i64, !dbg !17311
  %arrayidx28 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom27, !dbg !17311
  %29 = load i8*, i8** %arrayidx28, align 8, !dbg !17311
  store i8* %29, i8** %tname, align 8, !dbg !17312
  %30 = load i32, i32* %fmode.addr, align 4, !dbg !17313
  %idxprom29 = zext i32 %30 to i64, !dbg !17313
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom29, !dbg !17313
  %31 = load i8, i8* %arrayidx30, align 1, !dbg !17313
  %conv = zext i8 %31 to i32, !dbg !17313
  %cmp = icmp eq i32 %conv, 9, !dbg !17313
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !17315

lor.lhs.false:                                    ; preds = %entry
  %32 = load i32, i32* %tmode.addr, align 4, !dbg !17316
  %idxprom32 = zext i32 %32 to i64, !dbg !17316
  %arrayidx33 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom32, !dbg !17316
  %33 = load i8, i8* %arrayidx33, align 1, !dbg !17316
  %conv34 = zext i8 %33 to i32, !dbg !17316
  %cmp35 = icmp eq i32 %conv34, 9, !dbg !17316
  br i1 %cmp35, label %if.then, label %if.else, !dbg !17317

if.then:                                          ; preds = %lor.lhs.false, %entry
  %34 = load i8*, i8** %dec_name, align 8, !dbg !17318
  store i8* %34, i8** %libfunc_name, align 8, !dbg !17320
  %35 = load i8*, i8** %dec_suffix, align 8, !dbg !17321
  store i8* %35, i8** %suffix, align 8, !dbg !17322
  br label %if.end, !dbg !17323

if.else:                                          ; preds = %lor.lhs.false
  %36 = load i8*, i8** %nondec_name, align 8, !dbg !17324
  store i8* %36, i8** %libfunc_name, align 8, !dbg !17326
  %37 = load i8*, i8** %nondec_suffix, align 8, !dbg !17327
  store i8* %37, i8** %suffix, align 8, !dbg !17328
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %38 = load i8*, i8** %suffix, align 8, !dbg !17329
  store i8* %38, i8** %p, align 8, !dbg !17330
  %39 = load i8*, i8** %fname, align 8, !dbg !17331
  store i8* %39, i8** %q, align 8, !dbg !17333
  br label %for.cond, !dbg !17334

for.cond:                                         ; preds = %for.inc, %if.end
  %40 = load i8*, i8** %q, align 8, !dbg !17335
  %41 = load i8, i8* %40, align 1, !dbg !17337
  %tobool = icmp ne i8 %41, 0, !dbg !17338
  br i1 %tobool, label %for.body, label %for.end, !dbg !17338

for.body:                                         ; preds = %for.cond
  %42 = load i8*, i8** %q, align 8, !dbg !17339
  %43 = load i8, i8* %42, align 1, !dbg !17339
  %conv37 = sext i8 %43 to i32, !dbg !17339
  %and = and i32 %conv37, 255, !dbg !17339
  %idxprom38 = sext i32 %and to i64, !dbg !17339
  %arrayidx39 = getelementptr inbounds [256 x i8], [256 x i8]* @_sch_tolower, i64 0, i64 %idxprom38, !dbg !17339
  %44 = load i8, i8* %arrayidx39, align 1, !dbg !17339
  %45 = load i8*, i8** %p, align 8, !dbg !17340
  store i8 %44, i8* %45, align 1, !dbg !17341
  br label %for.inc, !dbg !17342

for.inc:                                          ; preds = %for.body
  %46 = load i8*, i8** %p, align 8, !dbg !17343
  %incdec.ptr = getelementptr inbounds i8, i8* %46, i32 1, !dbg !17343
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !17343
  %47 = load i8*, i8** %q, align 8, !dbg !17344
  %incdec.ptr40 = getelementptr inbounds i8, i8* %47, i32 1, !dbg !17344
  store i8* %incdec.ptr40, i8** %q, align 8, !dbg !17344
  br label %for.cond, !dbg !17345, !llvm.loop !17346

for.end:                                          ; preds = %for.cond
  %48 = load i8*, i8** %tname, align 8, !dbg !17348
  store i8* %48, i8** %q, align 8, !dbg !17350
  br label %for.cond41, !dbg !17351

for.cond41:                                       ; preds = %for.inc48, %for.end
  %49 = load i8*, i8** %q, align 8, !dbg !17352
  %50 = load i8, i8* %49, align 1, !dbg !17354
  %tobool42 = icmp ne i8 %50, 0, !dbg !17355
  br i1 %tobool42, label %for.body43, label %for.end51, !dbg !17355

for.body43:                                       ; preds = %for.cond41
  %51 = load i8*, i8** %q, align 8, !dbg !17356
  %52 = load i8, i8* %51, align 1, !dbg !17356
  %conv44 = sext i8 %52 to i32, !dbg !17356
  %and45 = and i32 %conv44, 255, !dbg !17356
  %idxprom46 = sext i32 %and45 to i64, !dbg !17356
  %arrayidx47 = getelementptr inbounds [256 x i8], [256 x i8]* @_sch_tolower, i64 0, i64 %idxprom46, !dbg !17356
  %53 = load i8, i8* %arrayidx47, align 1, !dbg !17356
  %54 = load i8*, i8** %p, align 8, !dbg !17357
  store i8 %53, i8* %54, align 1, !dbg !17358
  br label %for.inc48, !dbg !17359

for.inc48:                                        ; preds = %for.body43
  %55 = load i8*, i8** %p, align 8, !dbg !17360
  %incdec.ptr49 = getelementptr inbounds i8, i8* %55, i32 1, !dbg !17360
  store i8* %incdec.ptr49, i8** %p, align 8, !dbg !17360
  %56 = load i8*, i8** %q, align 8, !dbg !17361
  %incdec.ptr50 = getelementptr inbounds i8, i8* %56, i32 1, !dbg !17361
  store i8* %incdec.ptr50, i8** %q, align 8, !dbg !17361
  br label %for.cond41, !dbg !17362, !llvm.loop !17363

for.end51:                                        ; preds = %for.cond41
  %57 = load i8*, i8** %p, align 8, !dbg !17365
  store i8 0, i8* %57, align 1, !dbg !17366
  %58 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !17367
  %59 = load i32, i32* %tmode.addr, align 4, !dbg !17368
  %60 = load i32, i32* %fmode.addr, align 4, !dbg !17369
  %61 = load i8*, i8** %libfunc_name, align 8, !dbg !17370
  %62 = load i8*, i8** %p, align 8, !dbg !17371
  %63 = load i8*, i8** %libfunc_name, align 8, !dbg !17372
  %sub.ptr.lhs.cast = ptrtoint i8* %62 to i64, !dbg !17373
  %sub.ptr.rhs.cast = ptrtoint i8* %63 to i64, !dbg !17373
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !17373
  %conv52 = trunc i64 %sub.ptr.sub to i32, !dbg !17371
  %call53 = call i8* @ggc_alloc_string(i8* %61, i32 %conv52), !dbg !17374
  call void @set_conv_libfunc(%struct.convert_optab_d* %58, i32 %59, i32 %60, i8* %call53), !dbg !17375
  ret void, !dbg !17376
}

; Function Attrs: noinline nounwind uwtable
define internal void @gen_intraclass_conv_libfunc(%struct.convert_optab_d* %tab, i8* %opname, i32 %tmode, i32 %fmode) #0 !dbg !17377 {
entry:
  %tab.addr = alloca %struct.convert_optab_d*, align 8
  %opname.addr = alloca i8*, align 8
  %tmode.addr = alloca i32, align 4
  %fmode.addr = alloca i32, align 4
  %opname_len = alloca i64, align 8
  %mname_len = alloca i64, align 8
  %fname = alloca i8*, align 8
  %tname = alloca i8*, align 8
  %q = alloca i8*, align 8
  %nondec_name = alloca i8*, align 8
  %dec_name = alloca i8*, align 8
  %nondec_suffix = alloca i8*, align 8
  %dec_suffix = alloca i8*, align 8
  %libfunc_name = alloca i8*, align 8
  %suffix = alloca i8*, align 8
  %p = alloca i8*, align 8
  %dec_len = alloca i64, align 8
  store %struct.convert_optab_d* %tab, %struct.convert_optab_d** %tab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.convert_optab_d** %tab.addr, metadata !17378, metadata !DIExpression()), !dbg !17379
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !17380, metadata !DIExpression()), !dbg !17381
  store i32 %tmode, i32* %tmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tmode.addr, metadata !17382, metadata !DIExpression()), !dbg !17383
  store i32 %fmode, i32* %fmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fmode.addr, metadata !17384, metadata !DIExpression()), !dbg !17385
  call void @llvm.dbg.declare(metadata i64* %opname_len, metadata !17386, metadata !DIExpression()), !dbg !17387
  %0 = load i8*, i8** %opname.addr, align 8, !dbg !17388
  %call = call i64 @strlen(i8* %0), !dbg !17389
  store i64 %call, i64* %opname_len, align 8, !dbg !17387
  call void @llvm.dbg.declare(metadata i64* %mname_len, metadata !17390, metadata !DIExpression()), !dbg !17391
  store i64 0, i64* %mname_len, align 8, !dbg !17391
  call void @llvm.dbg.declare(metadata i8** %fname, metadata !17392, metadata !DIExpression()), !dbg !17393
  call void @llvm.dbg.declare(metadata i8** %tname, metadata !17394, metadata !DIExpression()), !dbg !17395
  call void @llvm.dbg.declare(metadata i8** %q, metadata !17396, metadata !DIExpression()), !dbg !17397
  call void @llvm.dbg.declare(metadata i8** %nondec_name, metadata !17398, metadata !DIExpression()), !dbg !17399
  call void @llvm.dbg.declare(metadata i8** %dec_name, metadata !17400, metadata !DIExpression()), !dbg !17401
  call void @llvm.dbg.declare(metadata i8** %nondec_suffix, metadata !17402, metadata !DIExpression()), !dbg !17403
  call void @llvm.dbg.declare(metadata i8** %dec_suffix, metadata !17404, metadata !DIExpression()), !dbg !17405
  call void @llvm.dbg.declare(metadata i8** %libfunc_name, metadata !17406, metadata !DIExpression()), !dbg !17407
  call void @llvm.dbg.declare(metadata i8** %suffix, metadata !17408, metadata !DIExpression()), !dbg !17409
  call void @llvm.dbg.declare(metadata i8** %p, metadata !17410, metadata !DIExpression()), !dbg !17411
  call void @llvm.dbg.declare(metadata i64* %dec_len, metadata !17412, metadata !DIExpression()), !dbg !17413
  store i64 4, i64* %dec_len, align 8, !dbg !17413
  %1 = load i32, i32* %tmode.addr, align 4, !dbg !17414
  %idxprom = zext i32 %1 to i64, !dbg !17414
  %arrayidx = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom, !dbg !17414
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !17414
  %call1 = call i64 @strlen(i8* %2), !dbg !17415
  %3 = load i32, i32* %fmode.addr, align 4, !dbg !17416
  %idxprom2 = zext i32 %3 to i64, !dbg !17416
  %arrayidx3 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom2, !dbg !17416
  %4 = load i8*, i8** %arrayidx3, align 8, !dbg !17416
  %call4 = call i64 @strlen(i8* %4), !dbg !17417
  %add = add i64 %call1, %call4, !dbg !17418
  store i64 %add, i64* %mname_len, align 8, !dbg !17419
  %5 = load i64, i64* %opname_len, align 8, !dbg !17420
  %add5 = add i64 2, %5, !dbg !17420
  %6 = load i64, i64* %mname_len, align 8, !dbg !17420
  %add6 = add i64 %add5, %6, !dbg !17420
  %add7 = add i64 %add6, 1, !dbg !17420
  %add8 = add i64 %add7, 1, !dbg !17420
  %mul = mul i64 1, %add8, !dbg !17420
  %7 = alloca i8, i64 %mul, align 16, !dbg !17420
  store i8* %7, i8** %nondec_name, align 8, !dbg !17421
  %8 = load i8*, i8** %nondec_name, align 8, !dbg !17422
  %arrayidx9 = getelementptr inbounds i8, i8* %8, i64 0, !dbg !17422
  store i8 95, i8* %arrayidx9, align 1, !dbg !17423
  %9 = load i8*, i8** %nondec_name, align 8, !dbg !17424
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 1, !dbg !17424
  store i8 95, i8* %arrayidx10, align 1, !dbg !17425
  %10 = load i8*, i8** %nondec_name, align 8, !dbg !17426
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 2, !dbg !17426
  %11 = load i8*, i8** %opname.addr, align 8, !dbg !17427
  %12 = load i64, i64* %opname_len, align 8, !dbg !17428
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx11, i8* align 1 %11, i64 %12, i1 false), !dbg !17429
  %13 = load i8*, i8** %nondec_name, align 8, !dbg !17430
  %14 = load i64, i64* %opname_len, align 8, !dbg !17431
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %14, !dbg !17432
  %add.ptr12 = getelementptr inbounds i8, i8* %add.ptr, i64 2, !dbg !17433
  store i8* %add.ptr12, i8** %nondec_suffix, align 8, !dbg !17434
  %15 = load i64, i64* %opname_len, align 8, !dbg !17435
  %add13 = add i64 6, %15, !dbg !17435
  %16 = load i64, i64* %mname_len, align 8, !dbg !17435
  %add14 = add i64 %add13, %16, !dbg !17435
  %add15 = add i64 %add14, 1, !dbg !17435
  %add16 = add i64 %add15, 1, !dbg !17435
  %mul17 = mul i64 1, %add16, !dbg !17435
  %17 = alloca i8, i64 %mul17, align 16, !dbg !17435
  store i8* %17, i8** %dec_name, align 8, !dbg !17436
  %18 = load i8*, i8** %dec_name, align 8, !dbg !17437
  %arrayidx18 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !17437
  store i8 95, i8* %arrayidx18, align 1, !dbg !17438
  %19 = load i8*, i8** %dec_name, align 8, !dbg !17439
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 1, !dbg !17439
  store i8 95, i8* %arrayidx19, align 1, !dbg !17440
  %20 = load i8*, i8** %dec_name, align 8, !dbg !17441
  %arrayidx20 = getelementptr inbounds i8, i8* %20, i64 2, !dbg !17441
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx20, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i64 0, i64 0), i64 4, i1 false), !dbg !17442
  %21 = load i8*, i8** %dec_name, align 8, !dbg !17443
  %arrayidx21 = getelementptr inbounds i8, i8* %21, i64 6, !dbg !17443
  %22 = load i8*, i8** %opname.addr, align 8, !dbg !17444
  %23 = load i64, i64* %opname_len, align 8, !dbg !17445
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx21, i8* align 1 %22, i64 %23, i1 false), !dbg !17446
  %24 = load i8*, i8** %dec_name, align 8, !dbg !17447
  %add.ptr22 = getelementptr inbounds i8, i8* %24, i64 4, !dbg !17448
  %25 = load i64, i64* %opname_len, align 8, !dbg !17449
  %add.ptr23 = getelementptr inbounds i8, i8* %add.ptr22, i64 %25, !dbg !17450
  %add.ptr24 = getelementptr inbounds i8, i8* %add.ptr23, i64 2, !dbg !17451
  store i8* %add.ptr24, i8** %dec_suffix, align 8, !dbg !17452
  %26 = load i32, i32* %fmode.addr, align 4, !dbg !17453
  %idxprom25 = zext i32 %26 to i64, !dbg !17453
  %arrayidx26 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom25, !dbg !17453
  %27 = load i8*, i8** %arrayidx26, align 8, !dbg !17453
  store i8* %27, i8** %fname, align 8, !dbg !17454
  %28 = load i32, i32* %tmode.addr, align 4, !dbg !17455
  %idxprom27 = zext i32 %28 to i64, !dbg !17455
  %arrayidx28 = getelementptr inbounds [87 x i8*], [87 x i8*]* @mode_name, i64 0, i64 %idxprom27, !dbg !17455
  %29 = load i8*, i8** %arrayidx28, align 8, !dbg !17455
  store i8* %29, i8** %tname, align 8, !dbg !17456
  %30 = load i32, i32* %fmode.addr, align 4, !dbg !17457
  %idxprom29 = zext i32 %30 to i64, !dbg !17457
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom29, !dbg !17457
  %31 = load i8, i8* %arrayidx30, align 1, !dbg !17457
  %conv = zext i8 %31 to i32, !dbg !17457
  %cmp = icmp eq i32 %conv, 9, !dbg !17457
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !17459

lor.lhs.false:                                    ; preds = %entry
  %32 = load i32, i32* %tmode.addr, align 4, !dbg !17460
  %idxprom32 = zext i32 %32 to i64, !dbg !17460
  %arrayidx33 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom32, !dbg !17460
  %33 = load i8, i8* %arrayidx33, align 1, !dbg !17460
  %conv34 = zext i8 %33 to i32, !dbg !17460
  %cmp35 = icmp eq i32 %conv34, 9, !dbg !17460
  br i1 %cmp35, label %if.then, label %if.else, !dbg !17461

if.then:                                          ; preds = %lor.lhs.false, %entry
  %34 = load i8*, i8** %dec_name, align 8, !dbg !17462
  store i8* %34, i8** %libfunc_name, align 8, !dbg !17464
  %35 = load i8*, i8** %dec_suffix, align 8, !dbg !17465
  store i8* %35, i8** %suffix, align 8, !dbg !17466
  br label %if.end, !dbg !17467

if.else:                                          ; preds = %lor.lhs.false
  %36 = load i8*, i8** %nondec_name, align 8, !dbg !17468
  store i8* %36, i8** %libfunc_name, align 8, !dbg !17470
  %37 = load i8*, i8** %nondec_suffix, align 8, !dbg !17471
  store i8* %37, i8** %suffix, align 8, !dbg !17472
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %38 = load i8*, i8** %suffix, align 8, !dbg !17473
  store i8* %38, i8** %p, align 8, !dbg !17474
  %39 = load i8*, i8** %fname, align 8, !dbg !17475
  store i8* %39, i8** %q, align 8, !dbg !17477
  br label %for.cond, !dbg !17478

for.cond:                                         ; preds = %for.inc, %if.end
  %40 = load i8*, i8** %q, align 8, !dbg !17479
  %41 = load i8, i8* %40, align 1, !dbg !17481
  %tobool = icmp ne i8 %41, 0, !dbg !17482
  br i1 %tobool, label %for.body, label %for.end, !dbg !17482

for.body:                                         ; preds = %for.cond
  %42 = load i8*, i8** %q, align 8, !dbg !17483
  %43 = load i8, i8* %42, align 1, !dbg !17483
  %conv37 = sext i8 %43 to i32, !dbg !17483
  %and = and i32 %conv37, 255, !dbg !17483
  %idxprom38 = sext i32 %and to i64, !dbg !17483
  %arrayidx39 = getelementptr inbounds [256 x i8], [256 x i8]* @_sch_tolower, i64 0, i64 %idxprom38, !dbg !17483
  %44 = load i8, i8* %arrayidx39, align 1, !dbg !17483
  %45 = load i8*, i8** %p, align 8, !dbg !17484
  store i8 %44, i8* %45, align 1, !dbg !17485
  br label %for.inc, !dbg !17486

for.inc:                                          ; preds = %for.body
  %46 = load i8*, i8** %p, align 8, !dbg !17487
  %incdec.ptr = getelementptr inbounds i8, i8* %46, i32 1, !dbg !17487
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !17487
  %47 = load i8*, i8** %q, align 8, !dbg !17488
  %incdec.ptr40 = getelementptr inbounds i8, i8* %47, i32 1, !dbg !17488
  store i8* %incdec.ptr40, i8** %q, align 8, !dbg !17488
  br label %for.cond, !dbg !17489, !llvm.loop !17490

for.end:                                          ; preds = %for.cond
  %48 = load i8*, i8** %tname, align 8, !dbg !17492
  store i8* %48, i8** %q, align 8, !dbg !17494
  br label %for.cond41, !dbg !17495

for.cond41:                                       ; preds = %for.inc48, %for.end
  %49 = load i8*, i8** %q, align 8, !dbg !17496
  %50 = load i8, i8* %49, align 1, !dbg !17498
  %tobool42 = icmp ne i8 %50, 0, !dbg !17499
  br i1 %tobool42, label %for.body43, label %for.end51, !dbg !17499

for.body43:                                       ; preds = %for.cond41
  %51 = load i8*, i8** %q, align 8, !dbg !17500
  %52 = load i8, i8* %51, align 1, !dbg !17500
  %conv44 = sext i8 %52 to i32, !dbg !17500
  %and45 = and i32 %conv44, 255, !dbg !17500
  %idxprom46 = sext i32 %and45 to i64, !dbg !17500
  %arrayidx47 = getelementptr inbounds [256 x i8], [256 x i8]* @_sch_tolower, i64 0, i64 %idxprom46, !dbg !17500
  %53 = load i8, i8* %arrayidx47, align 1, !dbg !17500
  %54 = load i8*, i8** %p, align 8, !dbg !17501
  store i8 %53, i8* %54, align 1, !dbg !17502
  br label %for.inc48, !dbg !17503

for.inc48:                                        ; preds = %for.body43
  %55 = load i8*, i8** %p, align 8, !dbg !17504
  %incdec.ptr49 = getelementptr inbounds i8, i8* %55, i32 1, !dbg !17504
  store i8* %incdec.ptr49, i8** %p, align 8, !dbg !17504
  %56 = load i8*, i8** %q, align 8, !dbg !17505
  %incdec.ptr50 = getelementptr inbounds i8, i8* %56, i32 1, !dbg !17505
  store i8* %incdec.ptr50, i8** %q, align 8, !dbg !17505
  br label %for.cond41, !dbg !17506, !llvm.loop !17507

for.end51:                                        ; preds = %for.cond41
  %57 = load i8*, i8** %p, align 8, !dbg !17509
  %incdec.ptr52 = getelementptr inbounds i8, i8* %57, i32 1, !dbg !17509
  store i8* %incdec.ptr52, i8** %p, align 8, !dbg !17509
  store i8 50, i8* %57, align 1, !dbg !17510
  %58 = load i8*, i8** %p, align 8, !dbg !17511
  store i8 0, i8* %58, align 1, !dbg !17512
  %59 = load %struct.convert_optab_d*, %struct.convert_optab_d** %tab.addr, align 8, !dbg !17513
  %60 = load i32, i32* %tmode.addr, align 4, !dbg !17514
  %61 = load i32, i32* %fmode.addr, align 4, !dbg !17515
  %62 = load i8*, i8** %libfunc_name, align 8, !dbg !17516
  %63 = load i8*, i8** %p, align 8, !dbg !17517
  %64 = load i8*, i8** %libfunc_name, align 8, !dbg !17518
  %sub.ptr.lhs.cast = ptrtoint i8* %63 to i64, !dbg !17519
  %sub.ptr.rhs.cast = ptrtoint i8* %64 to i64, !dbg !17519
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !17519
  %conv53 = trunc i64 %sub.ptr.sub to i32, !dbg !17517
  %call54 = call i8* @ggc_alloc_string(i8* %62, i32 %conv53), !dbg !17520
  call void @set_conv_libfunc(%struct.convert_optab_d* %59, i32 %60, i32 %61, i8* %call54), !dbg !17521
  ret void, !dbg !17522
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_rtx_code(i32 %tcode, i8 zeroext %unsignedp) #0 !dbg !17523 {
entry:
  %tcode.addr = alloca i32, align 4
  %unsignedp.addr = alloca i8, align 1
  %code = alloca i32, align 4
  store i32 %tcode, i32* %tcode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tcode.addr, metadata !17526, metadata !DIExpression()), !dbg !17527
  store i8 %unsignedp, i8* %unsignedp.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %unsignedp.addr, metadata !17528, metadata !DIExpression()), !dbg !17529
  call void @llvm.dbg.declare(metadata i32* %code, metadata !17530, metadata !DIExpression()), !dbg !17531
  %0 = load i32, i32* %tcode.addr, align 4, !dbg !17532
  switch i32 %0, label %sw.default [
    i32 101, label %sw.bb
    i32 102, label %sw.bb1
    i32 97, label %sw.bb2
    i32 98, label %sw.bb3
    i32 99, label %sw.bb7
    i32 100, label %sw.bb11
    i32 103, label %sw.bb15
    i32 104, label %sw.bb16
    i32 105, label %sw.bb17
    i32 106, label %sw.bb18
    i32 107, label %sw.bb19
    i32 108, label %sw.bb20
    i32 109, label %sw.bb21
    i32 110, label %sw.bb22
  ], !dbg !17533

sw.bb:                                            ; preds = %entry
  store i32 81, i32* %code, align 4, !dbg !17534
  br label %sw.epilog, !dbg !17536

sw.bb1:                                           ; preds = %entry
  store i32 80, i32* %code, align 4, !dbg !17537
  br label %sw.epilog, !dbg !17538

sw.bb2:                                           ; preds = %entry
  %1 = load i8, i8* %unsignedp.addr, align 1, !dbg !17539
  %conv = zext i8 %1 to i32, !dbg !17539
  %tobool = icmp ne i32 %conv, 0, !dbg !17539
  %2 = zext i1 %tobool to i64, !dbg !17539
  %cond = select i1 %tobool, i32 89, i32 85, !dbg !17539
  store i32 %cond, i32* %code, align 4, !dbg !17540
  br label %sw.epilog, !dbg !17541

sw.bb3:                                           ; preds = %entry
  %3 = load i8, i8* %unsignedp.addr, align 1, !dbg !17542
  %conv4 = zext i8 %3 to i32, !dbg !17542
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !17542
  %4 = zext i1 %tobool5 to i64, !dbg !17542
  %cond6 = select i1 %tobool5, i32 88, i32 84, !dbg !17542
  store i32 %cond6, i32* %code, align 4, !dbg !17543
  br label %sw.epilog, !dbg !17544

sw.bb7:                                           ; preds = %entry
  %5 = load i8, i8* %unsignedp.addr, align 1, !dbg !17545
  %conv8 = zext i8 %5 to i32, !dbg !17545
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !17545
  %6 = zext i1 %tobool9 to i64, !dbg !17545
  %cond10 = select i1 %tobool9, i32 87, i32 83, !dbg !17545
  store i32 %cond10, i32* %code, align 4, !dbg !17546
  br label %sw.epilog, !dbg !17547

sw.bb11:                                          ; preds = %entry
  %7 = load i8, i8* %unsignedp.addr, align 1, !dbg !17548
  %conv12 = zext i8 %7 to i32, !dbg !17548
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !17548
  %8 = zext i1 %tobool13 to i64, !dbg !17548
  %cond14 = select i1 %tobool13, i32 86, i32 82, !dbg !17548
  store i32 %cond14, i32* %code, align 4, !dbg !17549
  br label %sw.epilog, !dbg !17550

sw.bb15:                                          ; preds = %entry
  store i32 90, i32* %code, align 4, !dbg !17551
  br label %sw.epilog, !dbg !17552

sw.bb16:                                          ; preds = %entry
  store i32 91, i32* %code, align 4, !dbg !17553
  br label %sw.epilog, !dbg !17554

sw.bb17:                                          ; preds = %entry
  store i32 96, i32* %code, align 4, !dbg !17555
  br label %sw.epilog, !dbg !17556

sw.bb18:                                          ; preds = %entry
  store i32 95, i32* %code, align 4, !dbg !17557
  br label %sw.epilog, !dbg !17558

sw.bb19:                                          ; preds = %entry
  store i32 94, i32* %code, align 4, !dbg !17559
  br label %sw.epilog, !dbg !17560

sw.bb20:                                          ; preds = %entry
  store i32 93, i32* %code, align 4, !dbg !17561
  br label %sw.epilog, !dbg !17562

sw.bb21:                                          ; preds = %entry
  store i32 92, i32* %code, align 4, !dbg !17563
  br label %sw.epilog, !dbg !17564

sw.bb22:                                          ; preds = %entry
  store i32 97, i32* %code, align 4, !dbg !17565
  br label %sw.epilog, !dbg !17566

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 6847, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !17567
  br label %sw.epilog, !dbg !17568

sw.epilog:                                        ; preds = %sw.default, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb11, %sw.bb7, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %9 = load i32, i32* %code, align 4, !dbg !17569
  ret i32 %9, !dbg !17570
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !17571 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !17574, metadata !DIExpression()), !dbg !17575
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !17576, metadata !DIExpression()), !dbg !17577
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !17578, metadata !DIExpression()), !dbg !17579
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !17580, metadata !DIExpression()), !dbg !17581
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !17582
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !17583
  %2 = load i32, i32* %mode.addr, align 4, !dbg !17584
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !17585
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !17586
  ret %struct.rtx_def* %call, !dbg !17587
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3967, !3968, !3969}
!llvm.ident = !{!3970}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "convert_optab_table", scope: !2, file: !3, line: 76, type: !3952, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2720, globals: !3887, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "optabs.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !147, !152, !157, !176, !183, !190, !384, !527, !2019, !2024, !2030, !2192, !2214, !2222, !2256, !2264, !2278, !2285, !2290, !2305, !2325, !2459, !2477, !2698, !2707}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !142, line: 363, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146}
!144 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !142, line: 355, baseType: !7, size: 32, elements: !148)
!148 = !{!149, !150, !151}
!149 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!150 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!151 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!152 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !153, line: 474, baseType: !7, size: 32, elements: !154)
!153 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!154 = !{!155, !156}
!155 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!156 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!157 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !158, line: 280, baseType: !7, size: 32, elements: !159)
!158 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!159 = !{!160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175}
!160 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !158, line: 1817, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !158, line: 1805, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189}
!185 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!190 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !158, line: 39, baseType: !7, size: 32, elements: !191)
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383}
!192 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!281 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!282 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!283 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!284 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!285 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!286 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!287 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!288 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!289 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!290 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!291 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!292 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!293 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!294 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!295 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!296 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!297 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!298 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!299 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!300 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!301 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!302 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!303 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!304 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!305 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!307 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!308 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!309 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!310 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!311 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!312 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!313 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!314 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!315 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!316 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!317 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!318 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!319 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!320 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!321 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!322 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!323 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!324 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!325 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!326 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!327 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!328 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!329 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!330 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!331 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!332 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!333 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!334 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!335 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!336 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!337 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!338 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!339 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!340 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!341 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!342 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!343 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!344 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!356 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!357 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!358 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!359 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!360 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!361 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!377 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!378 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!379 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!380 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!381 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!382 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!383 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !385, line: 45, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526}
!387 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!399 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!400 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!401 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!402 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!403 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!404 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!405 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!406 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!407 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!408 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!409 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!410 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!411 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!412 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!413 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!414 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!415 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!416 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!417 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!418 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!419 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!420 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!421 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!422 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!423 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!424 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!425 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!426 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!427 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!428 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!429 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!430 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!431 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!432 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!433 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!434 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!435 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!436 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!437 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!438 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!439 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!440 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!441 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!442 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!443 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!444 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!445 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!446 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!447 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!448 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!449 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!450 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!451 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!452 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!453 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!454 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!455 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!456 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!457 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!458 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!459 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!460 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!461 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!462 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!463 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!464 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!465 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!466 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!467 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!468 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!469 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!470 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!471 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!472 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!473 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!474 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!475 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!476 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!477 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!478 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!479 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!480 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!481 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!482 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!483 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!484 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!485 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!486 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!487 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!488 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!489 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!490 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!491 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!492 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!493 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!494 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!495 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!496 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!497 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!498 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!499 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!500 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!501 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!502 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!503 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!504 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!505 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!506 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!507 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!508 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!509 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!510 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!511 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!512 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!513 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!514 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!515 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!516 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!517 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!518 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!519 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!520 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!521 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!522 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!523 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!524 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!525 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!526 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!527 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !528, line: 7, baseType: !7, size: 32, elements: !529)
!528 = !DIFile(filename: "./insn-codes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!529 = !{!530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018}
!530 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!531 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!532 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!533 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!534 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!535 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!536 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!537 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!538 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!539 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!540 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!541 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!542 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!543 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!544 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!545 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!546 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!547 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!548 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!549 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!550 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!551 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!552 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!553 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!554 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!555 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!556 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!557 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!558 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!559 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!560 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!561 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!562 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!563 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!564 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!565 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!566 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!567 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!568 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!569 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!570 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!571 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!572 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!573 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!574 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!575 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!576 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!577 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!578 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!579 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!580 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!581 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!582 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!583 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!584 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!585 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!586 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!587 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!588 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!589 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!590 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!591 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!592 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!593 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!594 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!595 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!596 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!597 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!598 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!599 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!600 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!601 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!602 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!603 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!604 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!605 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!606 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!607 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!608 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!609 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!610 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!611 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!612 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!613 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!614 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!615 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!616 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!617 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!618 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!619 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!620 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!621 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!622 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!623 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!624 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!625 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!626 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!627 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!628 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!629 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!630 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!631 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!632 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!633 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!634 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!635 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!636 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!637 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!638 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!639 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!640 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!641 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!642 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!643 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!644 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!645 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!646 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!647 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!648 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!649 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!650 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!651 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!652 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!653 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!654 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!655 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!656 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!657 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!658 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!659 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!660 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!661 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!662 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!663 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!664 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!665 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!666 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!667 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!668 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!669 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!670 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!671 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!672 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!673 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!674 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!675 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!676 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!677 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!678 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!679 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!680 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!681 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!682 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!683 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!684 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!685 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!686 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!687 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!688 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!689 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!690 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!691 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!692 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!693 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!694 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!695 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!696 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!697 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!698 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!699 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!700 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!701 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!702 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!703 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!704 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!705 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!706 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!707 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!708 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!709 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!710 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!711 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!712 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!713 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!714 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!715 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!716 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!717 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!718 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!719 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!720 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!721 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!722 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!723 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!724 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!725 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!726 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!727 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!728 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!729 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!730 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!731 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!732 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!733 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!734 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!735 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!736 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!737 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!738 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!739 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!740 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!741 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!742 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!743 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!744 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!745 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!746 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!747 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!748 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!749 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!750 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!751 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!752 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!753 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!754 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!755 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!756 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!757 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!758 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!759 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!760 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!761 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!762 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!763 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!764 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!765 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!766 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!767 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!768 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!769 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!770 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!771 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!772 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!773 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!774 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!775 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!776 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!777 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!778 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!779 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!780 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!781 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!782 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!783 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!784 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!785 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!786 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!787 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!788 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!789 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!790 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!791 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!792 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!793 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!794 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!795 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!796 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!797 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!798 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!799 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!800 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!801 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!802 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!803 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!804 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!805 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!806 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!807 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!808 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!809 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!810 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!811 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!812 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!813 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!814 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!815 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!816 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!817 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!818 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!819 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!820 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!821 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!822 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!823 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!824 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!825 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!826 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!827 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!828 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!829 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!830 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!831 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!832 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!833 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!834 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!835 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!836 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!837 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!838 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!839 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!840 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!841 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!842 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!843 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!844 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!845 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!846 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!847 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!848 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!849 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!850 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!851 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!852 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!853 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!854 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!855 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!856 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!857 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!858 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!859 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!860 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!861 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!862 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!863 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!864 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!865 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!866 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!867 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!868 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!869 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!870 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!871 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!872 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!873 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!874 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!875 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!876 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!877 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!878 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!879 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!880 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!881 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!882 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!883 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!884 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!885 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!886 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!887 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!888 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!889 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!890 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!891 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!892 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!893 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!894 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!895 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!896 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!897 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!898 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!899 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!900 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!901 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!902 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!903 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!904 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!905 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!906 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!907 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!908 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!909 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!910 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!911 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!912 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!913 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!914 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!915 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!916 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!917 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!918 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!919 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!920 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!921 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!922 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!923 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!924 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!925 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!926 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!927 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!928 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!929 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!930 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!931 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!932 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!933 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!934 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!935 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!936 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!937 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!938 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!939 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!940 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!941 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!942 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!943 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!944 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!945 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!946 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!947 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!948 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!949 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!950 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!951 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!952 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!953 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!954 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!955 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!956 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!957 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!958 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!959 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!960 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!961 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!962 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!963 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!964 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!965 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!966 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!967 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!968 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!969 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!970 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!971 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!972 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!973 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!974 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!975 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!976 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!977 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!978 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!979 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!980 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!981 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!982 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!983 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!984 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!985 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!986 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!987 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!988 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!989 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!990 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!991 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!992 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!993 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!994 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!995 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!996 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!997 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!998 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!999 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!1000 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!1001 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!1002 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!1003 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!1004 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!1005 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!1006 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!1007 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!1008 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!1009 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!1010 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!1011 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!1012 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!1013 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!1014 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!1015 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!1016 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!1017 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!1018 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!1019 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!1020 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!1021 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!1022 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!1023 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!1024 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!1025 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!1026 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!1027 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!1028 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!1029 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!1030 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!1031 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!1032 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!1033 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!1034 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!1035 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!1036 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!1037 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!1038 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!1039 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!1040 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!1041 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!1042 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!1043 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!1044 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!1045 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!1046 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!1047 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!1048 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!1049 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!1050 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!1051 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!1052 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!1053 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!1054 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!1055 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!1056 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!1057 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!1058 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!1059 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!1060 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!1061 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!1062 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!1063 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!1064 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!1065 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!1066 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!1067 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!1068 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!1069 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!1070 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!1071 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!1072 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!1073 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!1074 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!1075 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!1076 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!1077 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!1078 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!1079 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!1080 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!1081 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!1082 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!1083 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!1084 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!1085 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!1086 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!1087 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!1088 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!1089 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!1090 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!1091 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!1092 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!1093 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!1094 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!1095 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!1096 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!1097 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!1098 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!1099 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!1100 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!1101 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!1102 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!1103 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!1104 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!1105 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!1106 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!1107 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!1108 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!1109 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!1110 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!1111 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!1112 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!1113 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!1114 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!1115 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!1116 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!1117 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!1118 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!1119 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!1120 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!1121 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!1122 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!1123 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!1124 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!1125 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!1126 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!1127 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!1128 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!1129 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!1130 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!1131 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!1132 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!1133 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!1134 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!1135 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!1136 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!1137 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!1138 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!1139 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!1140 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!1141 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!1142 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!1143 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!1144 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!1145 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!1146 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!1147 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!1148 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!1149 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!1150 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!1151 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!1152 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!1153 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!1154 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!1155 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!1156 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!1157 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!1158 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!1159 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!1160 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!1161 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!1162 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!1163 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!1164 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!1165 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!1166 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!1167 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!1168 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!1169 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!1170 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!1171 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!1172 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!1173 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!1174 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!1175 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!1176 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!1177 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!1178 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!1179 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!1180 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!1181 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!1182 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!1183 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!1184 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!1185 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!1186 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!1187 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!1188 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!1189 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!1190 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!1191 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!1192 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!1193 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!1194 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!1195 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!1196 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!1197 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!1198 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!1199 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!1200 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!1201 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!1202 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!1203 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!1204 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!1205 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!1206 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!1207 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!1208 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!1209 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!1210 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!1211 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!1212 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!1213 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!1214 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!1215 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!1216 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!1217 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!1218 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!1219 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!1220 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!1221 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!1222 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!1223 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!1224 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!1225 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!1226 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!1227 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!1228 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!1229 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!1230 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!1231 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!1232 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!1233 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!1234 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!1235 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!1236 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!1237 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!1238 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!1239 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!1240 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!1241 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!1242 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!1243 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!1244 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!1245 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!1246 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!1247 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!1248 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!1249 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!1250 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!1251 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!1252 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!1253 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!1254 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!1255 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!1256 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!1257 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!1258 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!1259 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!1260 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!1261 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!1262 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!1263 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!1264 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!1265 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!1266 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!1267 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!1268 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!1269 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!1270 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!1271 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!1272 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!1273 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!1274 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!1275 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!1276 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!1277 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!1278 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!1279 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!1280 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!1281 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!1282 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!1283 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!1284 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!1285 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!1286 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!1287 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!1288 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!1289 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!1290 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!1291 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!1292 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!1293 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!1294 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!1295 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!1296 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!1297 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!1298 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!1299 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!1300 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!1301 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!1302 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!1303 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!1304 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!1305 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!1306 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!1307 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!1308 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!1309 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!1310 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!1311 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!1312 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!1313 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!1314 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!1315 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!1316 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!1317 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!1318 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!1319 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!1320 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!1321 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!1322 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!1323 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!1324 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!1325 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!1326 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!1327 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!1328 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!1329 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!1330 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!1331 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!1332 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!1333 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!1334 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!1335 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!1336 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!1337 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!1338 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!1339 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!1340 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!1341 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!1342 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!1343 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!1344 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!1345 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!1346 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!1347 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!1348 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!1349 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!1350 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!1351 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!1352 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!1353 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!1354 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!1355 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!1356 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!1357 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!1358 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!1359 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!1360 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!1361 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!1362 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!1363 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!1364 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!1365 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!1366 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!1367 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!1368 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!1369 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!1370 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!1371 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!1372 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!1373 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!1374 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!1375 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!1376 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!1377 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!1378 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!1379 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!1380 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!1381 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!1382 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!1383 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!1384 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!1385 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!1386 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!1387 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!1388 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!1389 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!1390 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!1391 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!1392 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!1393 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!1394 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!1395 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!1396 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!1397 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!1398 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!1399 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!1400 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!1401 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!1402 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!1403 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!1404 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!1405 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!1406 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!1407 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!1408 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!1409 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!1410 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!1411 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!1412 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!1413 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!1414 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!1415 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!1416 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!1417 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!1418 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!1419 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!1420 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!1421 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!1422 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!1423 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!1424 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!1425 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!1426 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!1427 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!1428 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!1429 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!1430 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!1431 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!1432 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!1433 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!1434 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!1435 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!1436 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!1437 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!1438 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!1439 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!1440 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!1441 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!1442 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!1443 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!1444 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!1445 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!1446 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!1447 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!1448 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!1449 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!1450 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!1451 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!1452 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!1453 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!1454 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!1455 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!1456 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!1457 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!1458 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!1459 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!1460 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!1461 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!1462 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!1463 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!1464 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!1465 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!1466 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!1467 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!1468 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!1469 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!1470 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!1471 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!1472 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!1473 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!1474 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!1475 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!1476 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!1477 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!1478 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!1479 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!1480 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!1481 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!1482 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!1483 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!1484 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!1485 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!1486 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!1487 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!1488 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!1489 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!1490 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!1491 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!1492 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!1493 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!1494 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!1495 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!1496 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!1497 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!1498 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!1499 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!1500 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!1501 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!1502 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!1503 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!1504 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!1505 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!1506 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!1507 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!1508 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!1509 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!1510 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!1511 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!1512 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!1513 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!1514 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!1515 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!1516 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!1517 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!1518 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!1519 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!1520 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!1521 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!1522 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!1523 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!1524 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!1525 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!1526 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!1527 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!1528 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!1529 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!1530 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!1531 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!1532 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!1533 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!1534 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!1535 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!1536 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!1537 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!1538 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!1539 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!1540 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!1541 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!1542 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!1543 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!1544 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!1545 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!1546 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!1547 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!1548 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!1549 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!1550 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!1551 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!1552 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!1553 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!1554 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!1555 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!1556 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!1557 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!1558 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!1559 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!1560 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!1561 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!1562 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!1563 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!1564 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!1565 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!1566 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!1567 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!1568 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!1569 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!1570 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!1571 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!1572 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!1573 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!1574 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!1575 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!1576 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!1577 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!1578 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!1579 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!1580 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!1581 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!1582 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!1583 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!1584 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!1585 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!1586 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!1587 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!1588 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!1589 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!1590 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!1591 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!1592 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!1593 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!1594 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!1595 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!1596 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!1597 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!1598 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!1599 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!1600 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!1601 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!1602 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!1603 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!1604 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!1605 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!1606 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!1607 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!1608 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!1609 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!1610 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!1611 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!1612 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!1613 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!1614 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!1615 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!1616 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!1617 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!1618 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!1619 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!1620 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!1621 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!1622 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!1623 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!1624 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!1625 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!1626 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!1627 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!1628 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!1629 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!1630 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!1631 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!1632 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!1633 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!1634 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!1635 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!1636 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!1637 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!1638 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!1639 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!1640 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!1641 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!1642 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!1643 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!1644 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!1645 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!1646 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!1647 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!1648 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!1649 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!1650 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!1651 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!1652 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!1653 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!1654 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!1655 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!1656 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!1657 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!1658 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!1659 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!1660 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!1661 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!1662 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!1663 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!1664 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!1665 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!1666 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!1667 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!1668 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!1669 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!1670 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!1671 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!1672 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!1673 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!1674 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!1675 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!1676 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!1677 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!1678 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!1679 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!1680 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!1681 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!1682 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!1683 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!1684 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!1685 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!1686 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!1687 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!1688 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!1689 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!1690 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!1691 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!1692 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!1693 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!1694 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!1695 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!1696 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!1697 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!1698 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!1699 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!1700 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!1701 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!1702 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!1703 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!1704 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!1705 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!1706 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!1707 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!1708 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!1709 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!1710 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!1711 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!1712 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!1713 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!1714 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!1715 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!1716 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!1717 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!1718 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!1719 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!1720 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!1721 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!1722 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!1723 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!1724 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!1725 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!1726 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!1727 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!1728 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!1729 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!1730 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!1731 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!1732 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!1733 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!1734 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!1735 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!1736 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!1737 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!1738 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!1739 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!1740 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!1741 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!1742 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!1743 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!1744 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!1745 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!1746 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!1747 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!1748 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!1749 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!1750 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!1751 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!1752 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!1753 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!1754 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!1755 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!1756 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!1757 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!1758 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!1759 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!1760 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!1761 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!1762 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!1763 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!1764 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!1765 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!1766 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!1767 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!1768 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!1769 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!1770 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!1771 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!1772 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!1773 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!1774 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!1775 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!1776 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!1777 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!1778 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!1779 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!1780 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!1781 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!1782 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!1783 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!1784 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!1785 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!1786 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!1787 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!1788 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!1789 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!1790 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!1791 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!1792 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!1793 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!1794 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!1795 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!1796 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!1797 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!1798 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!1799 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!1800 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!1801 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!1802 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!1803 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!1804 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!1805 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!1806 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!1807 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!1808 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!1809 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!1810 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!1811 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!1812 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!1813 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!1814 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!1815 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!1816 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!1817 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!1818 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!1819 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!1820 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!1821 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!1822 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!1823 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!1824 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!1825 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!1826 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!1827 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!1828 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!1829 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!1830 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!1831 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!1832 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!1833 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!1834 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!1835 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!1836 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!1837 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!1838 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!1839 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!1840 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!1841 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!1842 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!1843 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!1844 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!1845 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!1846 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!1847 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!1848 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!1849 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!1850 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!1851 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!1852 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!1853 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!1854 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!1855 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!1856 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!1857 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!1858 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!1859 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!1860 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!1861 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!1862 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!1863 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!1864 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!1865 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!1866 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!1867 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!1868 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!1869 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!1870 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!1871 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!1872 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!1873 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!1874 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!1875 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!1876 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!1877 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!1878 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!1879 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!1880 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!1881 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!1882 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!1883 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!1884 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!1885 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!1886 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!1887 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!1888 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!1889 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!1890 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!1891 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!1892 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!1893 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!1894 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!1895 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!1896 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!1897 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!1898 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!1899 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!1900 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!1901 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!1902 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!1903 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!1904 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!1905 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!1906 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!1907 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!1908 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!1909 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!1910 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!1911 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!1912 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!1913 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!1914 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!1915 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!1916 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!1917 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!1918 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!1919 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!1920 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!1921 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!1922 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!1923 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!1924 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!1925 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!1926 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!1927 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!1928 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!1929 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!1930 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!1931 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!1932 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!1933 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!1934 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!1935 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!1936 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!1937 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!1938 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!1939 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!1940 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!1941 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!1942 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!1943 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!1944 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!1945 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!1946 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!1947 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!1948 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!1949 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!1950 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!1951 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!1952 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!1953 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!1954 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!1955 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!1956 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!1957 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!1958 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!1959 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!1960 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!1961 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!1962 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!1963 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!1964 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!1965 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!1966 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!1967 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!1968 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!1969 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!1970 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!1971 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!1972 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!1973 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!1974 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!1975 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!1976 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!1977 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!1978 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!1979 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!1980 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!1981 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!1982 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!1983 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!1984 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!1985 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!1986 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!1987 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!1988 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!1989 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!1990 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!1991 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!1992 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!1993 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!1994 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!1995 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!1996 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!1997 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!1998 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!1999 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!2000 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!2001 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!2002 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!2004 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!2005 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!2006 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!2007 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!2008 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!2009 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!2010 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!2011 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!2012 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!2013 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!2014 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!2015 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!2016 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!2017 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!2018 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!2019 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !2020, line: 147, baseType: !7, size: 32, elements: !2021)
!2020 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2021 = !{!2022, !2023}
!2022 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!2023 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!2024 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_subtype", file: !2025, line: 723, baseType: !7, size: 32, elements: !2026)
!2025 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2026 = !{!2027, !2028, !2029}
!2027 = !DIEnumerator(name: "optab_default", value: 0, isUnsigned: true)
!2028 = !DIEnumerator(name: "optab_scalar", value: 1, isUnsigned: true)
!2029 = !DIEnumerator(name: "optab_vector", value: 2, isUnsigned: true)
!2030 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_index", file: !2025, line: 76, baseType: !7, size: 32, elements: !2031)
!2031 = !{!2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191}
!2032 = !DIEnumerator(name: "OTI_ssadd", value: 0, isUnsigned: true)
!2033 = !DIEnumerator(name: "OTI_usadd", value: 1, isUnsigned: true)
!2034 = !DIEnumerator(name: "OTI_sssub", value: 2, isUnsigned: true)
!2035 = !DIEnumerator(name: "OTI_ussub", value: 3, isUnsigned: true)
!2036 = !DIEnumerator(name: "OTI_ssmul", value: 4, isUnsigned: true)
!2037 = !DIEnumerator(name: "OTI_usmul", value: 5, isUnsigned: true)
!2038 = !DIEnumerator(name: "OTI_ssdiv", value: 6, isUnsigned: true)
!2039 = !DIEnumerator(name: "OTI_usdiv", value: 7, isUnsigned: true)
!2040 = !DIEnumerator(name: "OTI_ssneg", value: 8, isUnsigned: true)
!2041 = !DIEnumerator(name: "OTI_usneg", value: 9, isUnsigned: true)
!2042 = !DIEnumerator(name: "OTI_ssashl", value: 10, isUnsigned: true)
!2043 = !DIEnumerator(name: "OTI_usashl", value: 11, isUnsigned: true)
!2044 = !DIEnumerator(name: "OTI_add", value: 12, isUnsigned: true)
!2045 = !DIEnumerator(name: "OTI_addv", value: 13, isUnsigned: true)
!2046 = !DIEnumerator(name: "OTI_sub", value: 14, isUnsigned: true)
!2047 = !DIEnumerator(name: "OTI_subv", value: 15, isUnsigned: true)
!2048 = !DIEnumerator(name: "OTI_smul", value: 16, isUnsigned: true)
!2049 = !DIEnumerator(name: "OTI_smulv", value: 17, isUnsigned: true)
!2050 = !DIEnumerator(name: "OTI_smul_highpart", value: 18, isUnsigned: true)
!2051 = !DIEnumerator(name: "OTI_umul_highpart", value: 19, isUnsigned: true)
!2052 = !DIEnumerator(name: "OTI_smul_widen", value: 20, isUnsigned: true)
!2053 = !DIEnumerator(name: "OTI_umul_widen", value: 21, isUnsigned: true)
!2054 = !DIEnumerator(name: "OTI_usmul_widen", value: 22, isUnsigned: true)
!2055 = !DIEnumerator(name: "OTI_smadd_widen", value: 23, isUnsigned: true)
!2056 = !DIEnumerator(name: "OTI_umadd_widen", value: 24, isUnsigned: true)
!2057 = !DIEnumerator(name: "OTI_ssmadd_widen", value: 25, isUnsigned: true)
!2058 = !DIEnumerator(name: "OTI_usmadd_widen", value: 26, isUnsigned: true)
!2059 = !DIEnumerator(name: "OTI_smsub_widen", value: 27, isUnsigned: true)
!2060 = !DIEnumerator(name: "OTI_umsub_widen", value: 28, isUnsigned: true)
!2061 = !DIEnumerator(name: "OTI_ssmsub_widen", value: 29, isUnsigned: true)
!2062 = !DIEnumerator(name: "OTI_usmsub_widen", value: 30, isUnsigned: true)
!2063 = !DIEnumerator(name: "OTI_sdiv", value: 31, isUnsigned: true)
!2064 = !DIEnumerator(name: "OTI_sdivv", value: 32, isUnsigned: true)
!2065 = !DIEnumerator(name: "OTI_sdivmod", value: 33, isUnsigned: true)
!2066 = !DIEnumerator(name: "OTI_udiv", value: 34, isUnsigned: true)
!2067 = !DIEnumerator(name: "OTI_udivmod", value: 35, isUnsigned: true)
!2068 = !DIEnumerator(name: "OTI_smod", value: 36, isUnsigned: true)
!2069 = !DIEnumerator(name: "OTI_umod", value: 37, isUnsigned: true)
!2070 = !DIEnumerator(name: "OTI_fmod", value: 38, isUnsigned: true)
!2071 = !DIEnumerator(name: "OTI_remainder", value: 39, isUnsigned: true)
!2072 = !DIEnumerator(name: "OTI_ftrunc", value: 40, isUnsigned: true)
!2073 = !DIEnumerator(name: "OTI_and", value: 41, isUnsigned: true)
!2074 = !DIEnumerator(name: "OTI_ior", value: 42, isUnsigned: true)
!2075 = !DIEnumerator(name: "OTI_xor", value: 43, isUnsigned: true)
!2076 = !DIEnumerator(name: "OTI_ashl", value: 44, isUnsigned: true)
!2077 = !DIEnumerator(name: "OTI_lshr", value: 45, isUnsigned: true)
!2078 = !DIEnumerator(name: "OTI_ashr", value: 46, isUnsigned: true)
!2079 = !DIEnumerator(name: "OTI_rotl", value: 47, isUnsigned: true)
!2080 = !DIEnumerator(name: "OTI_rotr", value: 48, isUnsigned: true)
!2081 = !DIEnumerator(name: "OTI_vashl", value: 49, isUnsigned: true)
!2082 = !DIEnumerator(name: "OTI_vlshr", value: 50, isUnsigned: true)
!2083 = !DIEnumerator(name: "OTI_vashr", value: 51, isUnsigned: true)
!2084 = !DIEnumerator(name: "OTI_vrotl", value: 52, isUnsigned: true)
!2085 = !DIEnumerator(name: "OTI_vrotr", value: 53, isUnsigned: true)
!2086 = !DIEnumerator(name: "OTI_smin", value: 54, isUnsigned: true)
!2087 = !DIEnumerator(name: "OTI_smax", value: 55, isUnsigned: true)
!2088 = !DIEnumerator(name: "OTI_umin", value: 56, isUnsigned: true)
!2089 = !DIEnumerator(name: "OTI_umax", value: 57, isUnsigned: true)
!2090 = !DIEnumerator(name: "OTI_pow", value: 58, isUnsigned: true)
!2091 = !DIEnumerator(name: "OTI_atan2", value: 59, isUnsigned: true)
!2092 = !DIEnumerator(name: "OTI_mov", value: 60, isUnsigned: true)
!2093 = !DIEnumerator(name: "OTI_movstrict", value: 61, isUnsigned: true)
!2094 = !DIEnumerator(name: "OTI_movmisalign", value: 62, isUnsigned: true)
!2095 = !DIEnumerator(name: "OTI_storent", value: 63, isUnsigned: true)
!2096 = !DIEnumerator(name: "OTI_neg", value: 64, isUnsigned: true)
!2097 = !DIEnumerator(name: "OTI_negv", value: 65, isUnsigned: true)
!2098 = !DIEnumerator(name: "OTI_abs", value: 66, isUnsigned: true)
!2099 = !DIEnumerator(name: "OTI_absv", value: 67, isUnsigned: true)
!2100 = !DIEnumerator(name: "OTI_bswap", value: 68, isUnsigned: true)
!2101 = !DIEnumerator(name: "OTI_one_cmpl", value: 69, isUnsigned: true)
!2102 = !DIEnumerator(name: "OTI_ffs", value: 70, isUnsigned: true)
!2103 = !DIEnumerator(name: "OTI_clz", value: 71, isUnsigned: true)
!2104 = !DIEnumerator(name: "OTI_ctz", value: 72, isUnsigned: true)
!2105 = !DIEnumerator(name: "OTI_popcount", value: 73, isUnsigned: true)
!2106 = !DIEnumerator(name: "OTI_parity", value: 74, isUnsigned: true)
!2107 = !DIEnumerator(name: "OTI_sqrt", value: 75, isUnsigned: true)
!2108 = !DIEnumerator(name: "OTI_sincos", value: 76, isUnsigned: true)
!2109 = !DIEnumerator(name: "OTI_sin", value: 77, isUnsigned: true)
!2110 = !DIEnumerator(name: "OTI_asin", value: 78, isUnsigned: true)
!2111 = !DIEnumerator(name: "OTI_cos", value: 79, isUnsigned: true)
!2112 = !DIEnumerator(name: "OTI_acos", value: 80, isUnsigned: true)
!2113 = !DIEnumerator(name: "OTI_exp", value: 81, isUnsigned: true)
!2114 = !DIEnumerator(name: "OTI_exp10", value: 82, isUnsigned: true)
!2115 = !DIEnumerator(name: "OTI_exp2", value: 83, isUnsigned: true)
!2116 = !DIEnumerator(name: "OTI_expm1", value: 84, isUnsigned: true)
!2117 = !DIEnumerator(name: "OTI_ldexp", value: 85, isUnsigned: true)
!2118 = !DIEnumerator(name: "OTI_scalb", value: 86, isUnsigned: true)
!2119 = !DIEnumerator(name: "OTI_significand", value: 87, isUnsigned: true)
!2120 = !DIEnumerator(name: "OTI_logb", value: 88, isUnsigned: true)
!2121 = !DIEnumerator(name: "OTI_ilogb", value: 89, isUnsigned: true)
!2122 = !DIEnumerator(name: "OTI_log", value: 90, isUnsigned: true)
!2123 = !DIEnumerator(name: "OTI_log10", value: 91, isUnsigned: true)
!2124 = !DIEnumerator(name: "OTI_log2", value: 92, isUnsigned: true)
!2125 = !DIEnumerator(name: "OTI_log1p", value: 93, isUnsigned: true)
!2126 = !DIEnumerator(name: "OTI_floor", value: 94, isUnsigned: true)
!2127 = !DIEnumerator(name: "OTI_ceil", value: 95, isUnsigned: true)
!2128 = !DIEnumerator(name: "OTI_btrunc", value: 96, isUnsigned: true)
!2129 = !DIEnumerator(name: "OTI_round", value: 97, isUnsigned: true)
!2130 = !DIEnumerator(name: "OTI_nearbyint", value: 98, isUnsigned: true)
!2131 = !DIEnumerator(name: "OTI_rint", value: 99, isUnsigned: true)
!2132 = !DIEnumerator(name: "OTI_tan", value: 100, isUnsigned: true)
!2133 = !DIEnumerator(name: "OTI_atan", value: 101, isUnsigned: true)
!2134 = !DIEnumerator(name: "OTI_copysign", value: 102, isUnsigned: true)
!2135 = !DIEnumerator(name: "OTI_signbit", value: 103, isUnsigned: true)
!2136 = !DIEnumerator(name: "OTI_isinf", value: 104, isUnsigned: true)
!2137 = !DIEnumerator(name: "OTI_cmp", value: 105, isUnsigned: true)
!2138 = !DIEnumerator(name: "OTI_ucmp", value: 106, isUnsigned: true)
!2139 = !DIEnumerator(name: "OTI_eq", value: 107, isUnsigned: true)
!2140 = !DIEnumerator(name: "OTI_ne", value: 108, isUnsigned: true)
!2141 = !DIEnumerator(name: "OTI_gt", value: 109, isUnsigned: true)
!2142 = !DIEnumerator(name: "OTI_ge", value: 110, isUnsigned: true)
!2143 = !DIEnumerator(name: "OTI_lt", value: 111, isUnsigned: true)
!2144 = !DIEnumerator(name: "OTI_le", value: 112, isUnsigned: true)
!2145 = !DIEnumerator(name: "OTI_unord", value: 113, isUnsigned: true)
!2146 = !DIEnumerator(name: "OTI_strlen", value: 114, isUnsigned: true)
!2147 = !DIEnumerator(name: "OTI_cbranch", value: 115, isUnsigned: true)
!2148 = !DIEnumerator(name: "OTI_cmov", value: 116, isUnsigned: true)
!2149 = !DIEnumerator(name: "OTI_cstore", value: 117, isUnsigned: true)
!2150 = !DIEnumerator(name: "OTI_ctrap", value: 118, isUnsigned: true)
!2151 = !DIEnumerator(name: "OTI_push", value: 119, isUnsigned: true)
!2152 = !DIEnumerator(name: "OTI_addcc", value: 120, isUnsigned: true)
!2153 = !DIEnumerator(name: "OTI_reduc_smax", value: 121, isUnsigned: true)
!2154 = !DIEnumerator(name: "OTI_reduc_umax", value: 122, isUnsigned: true)
!2155 = !DIEnumerator(name: "OTI_reduc_smin", value: 123, isUnsigned: true)
!2156 = !DIEnumerator(name: "OTI_reduc_umin", value: 124, isUnsigned: true)
!2157 = !DIEnumerator(name: "OTI_reduc_splus", value: 125, isUnsigned: true)
!2158 = !DIEnumerator(name: "OTI_reduc_uplus", value: 126, isUnsigned: true)
!2159 = !DIEnumerator(name: "OTI_ssum_widen", value: 127, isUnsigned: true)
!2160 = !DIEnumerator(name: "OTI_usum_widen", value: 128, isUnsigned: true)
!2161 = !DIEnumerator(name: "OTI_sdot_prod", value: 129, isUnsigned: true)
!2162 = !DIEnumerator(name: "OTI_udot_prod", value: 130, isUnsigned: true)
!2163 = !DIEnumerator(name: "OTI_vec_set", value: 131, isUnsigned: true)
!2164 = !DIEnumerator(name: "OTI_vec_extract", value: 132, isUnsigned: true)
!2165 = !DIEnumerator(name: "OTI_vec_extract_even", value: 133, isUnsigned: true)
!2166 = !DIEnumerator(name: "OTI_vec_extract_odd", value: 134, isUnsigned: true)
!2167 = !DIEnumerator(name: "OTI_vec_interleave_high", value: 135, isUnsigned: true)
!2168 = !DIEnumerator(name: "OTI_vec_interleave_low", value: 136, isUnsigned: true)
!2169 = !DIEnumerator(name: "OTI_vec_init", value: 137, isUnsigned: true)
!2170 = !DIEnumerator(name: "OTI_vec_shl", value: 138, isUnsigned: true)
!2171 = !DIEnumerator(name: "OTI_vec_shr", value: 139, isUnsigned: true)
!2172 = !DIEnumerator(name: "OTI_vec_realign_load", value: 140, isUnsigned: true)
!2173 = !DIEnumerator(name: "OTI_vec_widen_umult_hi", value: 141, isUnsigned: true)
!2174 = !DIEnumerator(name: "OTI_vec_widen_umult_lo", value: 142, isUnsigned: true)
!2175 = !DIEnumerator(name: "OTI_vec_widen_smult_hi", value: 143, isUnsigned: true)
!2176 = !DIEnumerator(name: "OTI_vec_widen_smult_lo", value: 144, isUnsigned: true)
!2177 = !DIEnumerator(name: "OTI_vec_unpacks_hi", value: 145, isUnsigned: true)
!2178 = !DIEnumerator(name: "OTI_vec_unpacks_lo", value: 146, isUnsigned: true)
!2179 = !DIEnumerator(name: "OTI_vec_unpacku_hi", value: 147, isUnsigned: true)
!2180 = !DIEnumerator(name: "OTI_vec_unpacku_lo", value: 148, isUnsigned: true)
!2181 = !DIEnumerator(name: "OTI_vec_unpacks_float_hi", value: 149, isUnsigned: true)
!2182 = !DIEnumerator(name: "OTI_vec_unpacks_float_lo", value: 150, isUnsigned: true)
!2183 = !DIEnumerator(name: "OTI_vec_unpacku_float_hi", value: 151, isUnsigned: true)
!2184 = !DIEnumerator(name: "OTI_vec_unpacku_float_lo", value: 152, isUnsigned: true)
!2185 = !DIEnumerator(name: "OTI_vec_pack_trunc", value: 153, isUnsigned: true)
!2186 = !DIEnumerator(name: "OTI_vec_pack_usat", value: 154, isUnsigned: true)
!2187 = !DIEnumerator(name: "OTI_vec_pack_ssat", value: 155, isUnsigned: true)
!2188 = !DIEnumerator(name: "OTI_vec_pack_sfix_trunc", value: 156, isUnsigned: true)
!2189 = !DIEnumerator(name: "OTI_vec_pack_ufix_trunc", value: 157, isUnsigned: true)
!2190 = !DIEnumerator(name: "OTI_powi", value: 158, isUnsigned: true)
!2191 = !DIEnumerator(name: "OTI_MAX", value: 159, isUnsigned: true)
!2192 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !2193, line: 36, baseType: !7, size: 32, elements: !2194)
!2193 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2194 = !{!2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213}
!2195 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!2196 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!2197 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!2198 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!2199 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!2200 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!2201 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!2202 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!2203 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!2204 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!2205 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!2206 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!2207 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!2208 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!2209 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!2210 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!2211 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!2212 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!2213 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!2214 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !2215, line: 291, baseType: !7, size: 32, elements: !2216)
!2215 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2216 = !{!2217, !2218, !2219, !2220, !2221}
!2217 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!2218 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!2219 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!2220 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!2221 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!2222 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !385, line: 836, baseType: !7, size: 32, elements: !2223)
!2223 = !{!2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255}
!2224 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!2225 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!2226 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!2227 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!2228 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!2229 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!2230 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!2231 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!2232 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!2233 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!2234 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!2235 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!2236 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!2237 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!2238 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!2239 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!2240 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!2241 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!2242 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!2243 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!2244 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!2245 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!2246 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!2247 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!2248 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!2249 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!2250 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!2251 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!2252 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!2253 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!2254 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!2255 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!2256 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "libcall_type", file: !385, line: 2360, baseType: !7, size: 32, elements: !2257)
!2257 = !{!2258, !2259, !2260, !2261, !2262, !2263}
!2258 = !DIEnumerator(name: "LCT_NORMAL", value: 0, isUnsigned: true)
!2259 = !DIEnumerator(name: "LCT_CONST", value: 1, isUnsigned: true)
!2260 = !DIEnumerator(name: "LCT_PURE", value: 2, isUnsigned: true)
!2261 = !DIEnumerator(name: "LCT_NORETURN", value: 3, isUnsigned: true)
!2262 = !DIEnumerator(name: "LCT_THROW", value: 4, isUnsigned: true)
!2263 = !DIEnumerator(name: "LCT_RETURNS_TWICE", value: 5, isUnsigned: true)
!2264 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !158, line: 3745, baseType: !7, size: 32, elements: !2265)
!2265 = !{!2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277}
!2266 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!2267 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!2268 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!2269 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!2270 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!2271 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!2272 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!2273 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!2274 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!2275 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!2276 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!2277 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!2278 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !158, line: 4288, baseType: !7, size: 32, elements: !2279)
!2279 = !{!2280, !2281, !2282, !2283, !2284}
!2280 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!2281 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!2282 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!2283 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!2284 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!2285 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "can_compare_purpose", file: !2025, line: 737, baseType: !7, size: 32, elements: !2286)
!2286 = !{!2287, !2288, !2289}
!2287 = !DIEnumerator(name: "ccp_jump", value: 0, isUnsigned: true)
!2288 = !DIEnumerator(name: "ccp_cmov", value: 1, isUnsigned: true)
!2289 = !DIEnumerator(name: "ccp_store_flag", value: 2, isUnsigned: true)
!2290 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !385, line: 60, baseType: !7, size: 32, elements: !2291)
!2291 = !{!2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304}
!2292 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!2293 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!2294 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!2295 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!2296 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!2297 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!2298 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!2299 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!2300 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!2301 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!2302 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!2303 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!2304 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!2305 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "convert_optab_index", file: !2025, line: 550, baseType: !7, size: 32, elements: !2306)
!2306 = !{!2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324}
!2307 = !DIEnumerator(name: "COI_sext", value: 0, isUnsigned: true)
!2308 = !DIEnumerator(name: "COI_zext", value: 1, isUnsigned: true)
!2309 = !DIEnumerator(name: "COI_trunc", value: 2, isUnsigned: true)
!2310 = !DIEnumerator(name: "COI_sfix", value: 3, isUnsigned: true)
!2311 = !DIEnumerator(name: "COI_ufix", value: 4, isUnsigned: true)
!2312 = !DIEnumerator(name: "COI_sfixtrunc", value: 5, isUnsigned: true)
!2313 = !DIEnumerator(name: "COI_ufixtrunc", value: 6, isUnsigned: true)
!2314 = !DIEnumerator(name: "COI_sfloat", value: 7, isUnsigned: true)
!2315 = !DIEnumerator(name: "COI_ufloat", value: 8, isUnsigned: true)
!2316 = !DIEnumerator(name: "COI_lrint", value: 9, isUnsigned: true)
!2317 = !DIEnumerator(name: "COI_lround", value: 10, isUnsigned: true)
!2318 = !DIEnumerator(name: "COI_lfloor", value: 11, isUnsigned: true)
!2319 = !DIEnumerator(name: "COI_lceil", value: 12, isUnsigned: true)
!2320 = !DIEnumerator(name: "COI_fract", value: 13, isUnsigned: true)
!2321 = !DIEnumerator(name: "COI_fractuns", value: 14, isUnsigned: true)
!2322 = !DIEnumerator(name: "COI_satfract", value: 15, isUnsigned: true)
!2323 = !DIEnumerator(name: "COI_satfractuns", value: 16, isUnsigned: true)
!2324 = !DIEnumerator(name: "COI_MAX", value: 17, isUnsigned: true)
!2325 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !158, line: 3410, baseType: !7, size: 32, elements: !2326)
!2326 = !{!2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458}
!2327 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!2328 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!2329 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!2330 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!2331 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!2332 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!2333 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!2334 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!2335 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!2336 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!2337 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!2338 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!2339 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!2340 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!2341 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!2342 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!2343 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!2344 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!2345 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!2346 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!2347 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!2348 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!2349 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!2350 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!2351 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!2352 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!2353 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!2354 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!2355 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!2356 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!2357 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!2358 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!2359 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!2360 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!2361 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!2362 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!2363 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!2364 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!2365 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!2366 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!2367 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!2368 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!2369 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!2370 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!2371 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!2372 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!2373 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!2374 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!2375 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!2376 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!2377 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!2378 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!2379 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!2380 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!2381 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!2382 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!2383 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!2384 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!2385 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!2386 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!2387 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!2388 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!2389 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!2390 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!2391 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!2392 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!2393 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!2394 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!2395 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!2396 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!2397 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!2398 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!2399 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!2400 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!2401 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!2402 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!2403 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!2404 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!2405 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!2406 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!2407 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!2408 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!2409 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!2410 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!2411 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!2412 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!2413 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!2414 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!2415 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!2416 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!2417 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!2418 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!2419 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!2420 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!2421 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!2422 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!2423 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!2424 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!2425 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!2426 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!2427 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!2428 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!2429 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!2430 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!2431 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!2432 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!2433 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!2434 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!2435 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!2436 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!2437 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!2438 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!2439 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!2440 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!2441 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!2442 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!2443 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!2444 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!2445 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!2446 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!2447 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!2448 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!2449 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!2450 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!2451 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!2452 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!2453 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!2454 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!2455 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!2456 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!2457 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!2458 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!2459 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "libfunc_index", file: !2460, line: 24, baseType: !7, size: 32, elements: !2461)
!2460 = !DIFile(filename: "./libfuncs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2461 = !{!2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476}
!2462 = !DIEnumerator(name: "LTI_abort", value: 0, isUnsigned: true)
!2463 = !DIEnumerator(name: "LTI_memcpy", value: 1, isUnsigned: true)
!2464 = !DIEnumerator(name: "LTI_memmove", value: 2, isUnsigned: true)
!2465 = !DIEnumerator(name: "LTI_memcmp", value: 3, isUnsigned: true)
!2466 = !DIEnumerator(name: "LTI_memset", value: 4, isUnsigned: true)
!2467 = !DIEnumerator(name: "LTI_setbits", value: 5, isUnsigned: true)
!2468 = !DIEnumerator(name: "LTI_setjmp", value: 6, isUnsigned: true)
!2469 = !DIEnumerator(name: "LTI_longjmp", value: 7, isUnsigned: true)
!2470 = !DIEnumerator(name: "LTI_unwind_sjlj_register", value: 8, isUnsigned: true)
!2471 = !DIEnumerator(name: "LTI_unwind_sjlj_unregister", value: 9, isUnsigned: true)
!2472 = !DIEnumerator(name: "LTI_profile_function_entry", value: 10, isUnsigned: true)
!2473 = !DIEnumerator(name: "LTI_profile_function_exit", value: 11, isUnsigned: true)
!2474 = !DIEnumerator(name: "LTI_synchronize", value: 12, isUnsigned: true)
!2475 = !DIEnumerator(name: "LTI_gcov_flush", value: 13, isUnsigned: true)
!2476 = !DIEnumerator(name: "LTI_MAX", value: 14, isUnsigned: true)
!2477 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !2478, line: 23, baseType: !7, size: 32, elements: !2479)
!2478 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2479 = !{!2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697}
!2480 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!2481 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!2482 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!2483 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!2484 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!2485 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!2486 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!2487 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!2488 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!2489 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!2490 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!2491 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!2492 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!2493 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!2494 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!2495 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!2496 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!2497 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!2498 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!2499 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!2500 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!2501 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!2502 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!2503 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!2504 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!2505 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!2506 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!2507 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!2508 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!2509 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!2510 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!2511 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!2512 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!2513 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!2514 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!2515 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!2516 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!2517 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!2518 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!2519 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!2520 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!2521 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!2522 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!2523 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!2524 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!2525 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!2526 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!2527 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!2528 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!2529 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!2530 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!2531 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!2532 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!2533 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!2534 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!2535 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!2536 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!2537 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!2538 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!2539 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!2540 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!2541 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!2542 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!2543 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!2544 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!2545 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!2546 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!2547 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!2548 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!2549 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!2550 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!2551 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!2552 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!2553 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!2554 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!2555 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!2556 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!2557 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!2558 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!2559 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!2560 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!2561 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!2562 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!2563 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!2564 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!2565 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!2566 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!2567 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!2568 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!2569 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!2570 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!2571 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!2572 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!2573 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!2574 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!2575 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!2576 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!2577 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!2578 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!2579 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!2580 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!2581 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!2582 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!2583 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!2584 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!2585 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!2586 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!2587 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!2588 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!2589 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!2590 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!2591 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!2592 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!2593 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!2594 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!2595 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!2596 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!2597 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!2598 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!2599 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!2600 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!2601 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!2602 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!2603 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!2604 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!2605 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!2606 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!2607 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!2608 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!2609 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!2610 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!2611 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!2612 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!2613 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!2614 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!2615 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!2616 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!2617 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!2618 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!2619 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!2620 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!2621 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!2622 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!2623 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!2624 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!2625 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!2626 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!2627 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!2628 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!2629 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!2630 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!2631 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!2632 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!2633 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!2634 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!2635 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!2636 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!2637 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!2638 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!2639 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!2640 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!2641 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!2642 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!2643 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!2644 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!2645 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!2646 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!2647 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!2648 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!2649 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!2650 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!2651 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!2652 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!2653 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!2654 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!2655 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!2656 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!2657 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!2658 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!2659 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!2660 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!2661 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!2662 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!2663 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!2664 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!2665 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!2666 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!2667 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!2668 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!2669 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!2670 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!2671 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!2672 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!2673 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!2674 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!2675 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!2676 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!2677 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!2678 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!2679 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!2680 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!2681 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!2682 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!2683 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!2684 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!2685 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!2686 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!2687 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!2688 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!2689 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!2690 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!2691 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!2692 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!2693 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!2694 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!2695 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!2696 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!2697 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!2698 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !2215, line: 52, baseType: !7, size: 32, elements: !2699)
!2699 = !{!2700, !2701, !2702, !2703, !2704, !2705, !2706}
!2700 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!2701 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!2702 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!2703 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!2704 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!2705 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!2706 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!2707 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !158, line: 58, baseType: !7, size: 32, elements: !2708)
!2708 = !{!2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719}
!2709 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!2710 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!2711 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!2712 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!2713 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!2714 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!2715 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!2716 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!2717 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!2718 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!2719 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!2720 = !{!2721, !2724, !2192, !190, !2756, !5, !384, !3871, !2732, !7, !2843, !3872, !2822, !2976, !2853, !2725, !3185, !3874, !2759, !3881, !3884, !2828, !3886}
!2721 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2722, line: 46, baseType: !2723)
!2722 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2723 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2725, size: 64)
!2725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2726, size: 64)
!2726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "libfunc_entry", file: !3, line: 114, size: 192, elements: !2727)
!2727 = !{!2728, !2729, !2730, !2731}
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "optab", scope: !2726, file: !3, line: 115, baseType: !2721, size: 64)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "mode1", scope: !2726, file: !3, line: 116, baseType: !5, size: 32, offset: 64)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "mode2", scope: !2726, file: !3, line: 116, baseType: !5, size: 32, offset: 96)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "libfunc", scope: !2726, file: !3, line: 117, baseType: !2732, size: 64, offset: 128)
!2732 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2733, line: 50, baseType: !2734)
!2733 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2735, size: 64)
!2735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !385, line: 240, size: 384, elements: !2736)
!2736 = !{!2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747}
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2735, file: !385, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2735, file: !385, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2735, file: !385, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2735, file: !385, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2735, file: !385, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2735, file: !385, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2735, file: !385, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2735, file: !385, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2735, file: !385, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2735, file: !385, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2735, file: !385, line: 321, baseType: !2748, size: 320, offset: 64)
!2748 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !385, line: 315, size: 320, elements: !2749)
!2749 = !{!2750, !3838, !3840, !3869, !3870}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2748, file: !385, line: 316, baseType: !2751, size: 64)
!2751 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2752, size: 64, elements: !2771)
!2752 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !385, line: 183, baseType: !2753)
!2753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !385, line: 166, size: 64, elements: !2754)
!2754 = !{!2755, !2757, !2758, !2762, !2763, !2773, !2774, !2786, !2789, !2852, !3816, !3817, !3828, !3835}
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2753, file: !385, line: 168, baseType: !2756, size: 32)
!2756 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2753, file: !385, line: 169, baseType: !7, size: 32)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2753, file: !385, line: 170, baseType: !2759, size: 64)
!2759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2760, size: 64)
!2760 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2761)
!2761 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2753, file: !385, line: 171, baseType: !2732, size: 64)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2753, file: !385, line: 172, baseType: !2764, size: 64)
!2764 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2733, line: 53, baseType: !2765)
!2765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2766, size: 64)
!2766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !385, line: 359, size: 128, elements: !2767)
!2767 = !{!2768, !2769}
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2766, file: !385, line: 360, baseType: !2756, size: 32)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2766, file: !385, line: 361, baseType: !2770, size: 64, offset: 64)
!2770 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2732, size: 64, elements: !2771)
!2771 = !{!2772}
!2772 = !DISubrange(count: 1)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2753, file: !385, line: 173, baseType: !5, size: 32)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2753, file: !385, line: 174, baseType: !2775, size: 32)
!2775 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !385, line: 133, baseType: !2776)
!2776 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !385, line: 115, size: 32, elements: !2777)
!2777 = !{!2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2776, file: !385, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2776, file: !385, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2776, file: !385, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2776, file: !385, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2776, file: !385, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2776, file: !385, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2776, file: !385, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2776, file: !385, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2753, file: !385, line: 175, baseType: !2787, size: 64)
!2787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2788, size: 64)
!2788 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !385, line: 175, flags: DIFlagFwdDecl)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2753, file: !385, line: 176, baseType: !2790, size: 64)
!2790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2791, size: 64)
!2791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2792, line: 75, size: 256, elements: !2793)
!2792 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2793 = !{!2794, !2808, !2809, !2810}
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2791, file: !2792, line: 76, baseType: !2795, size: 64)
!2795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2796, size: 64)
!2796 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2792, line: 68, baseType: !2797)
!2797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2792, line: 63, size: 320, elements: !2798)
!2798 = !{!2799, !2801, !2802, !2803}
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2797, file: !2792, line: 64, baseType: !2800, size: 64)
!2800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2797, size: 64)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2797, file: !2792, line: 65, baseType: !2800, size: 64, offset: 64)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2797, file: !2792, line: 66, baseType: !7, size: 32, offset: 128)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2797, file: !2792, line: 67, baseType: !2804, size: 128, offset: 192)
!2804 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2805, size: 128, elements: !2806)
!2805 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2792, line: 29, baseType: !2723)
!2806 = !{!2807}
!2807 = !DISubrange(count: 2)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2791, file: !2792, line: 77, baseType: !2795, size: 64, offset: 64)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2791, file: !2792, line: 78, baseType: !7, size: 32, offset: 128)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2791, file: !2792, line: 79, baseType: !2811, size: 64, offset: 192)
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2812, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2792, line: 49, baseType: !2813)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2792, line: 45, size: 832, elements: !2814)
!2814 = !{!2815, !2816, !2817}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2813, file: !2792, line: 46, baseType: !2800, size: 64)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2813, file: !2792, line: 47, baseType: !2790, size: 64, offset: 64)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2813, file: !2792, line: 48, baseType: !2818, size: 704, offset: 128)
!2818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2819, line: 164, size: 704, elements: !2820)
!2819 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2820 = !{!2821, !2823, !2834, !2835, !2836, !2837, !2838, !2839, !2844, !2848, !2849, !2850, !2851}
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2818, file: !2819, line: 166, baseType: !2822, size: 64)
!2822 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2818, file: !2819, line: 167, baseType: !2824, size: 64, offset: 64)
!2824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2825, size: 64)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2819, line: 157, size: 192, elements: !2826)
!2826 = !{!2827, !2829, !2830}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2825, file: !2819, line: 159, baseType: !2828, size: 64)
!2828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2761, size: 64)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2825, file: !2819, line: 160, baseType: !2824, size: 64, offset: 64)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2825, file: !2819, line: 161, baseType: !2831, size: 32, offset: 128)
!2831 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2761, size: 32, elements: !2832)
!2832 = !{!2833}
!2833 = !DISubrange(count: 4)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2818, file: !2819, line: 168, baseType: !2828, size: 64, offset: 128)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2818, file: !2819, line: 169, baseType: !2828, size: 64, offset: 192)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2818, file: !2819, line: 170, baseType: !2828, size: 64, offset: 256)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2818, file: !2819, line: 171, baseType: !2822, size: 64, offset: 320)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2818, file: !2819, line: 172, baseType: !2756, size: 32, offset: 384)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2818, file: !2819, line: 176, baseType: !2840, size: 64, offset: 448)
!2840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2841, size: 64)
!2841 = !DISubroutineType(types: !2842)
!2842 = !{!2824, !2843, !2822}
!2843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2818, file: !2819, line: 177, baseType: !2845, size: 64, offset: 512)
!2845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2846, size: 64)
!2846 = !DISubroutineType(types: !2847)
!2847 = !{null, !2843, !2824}
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2818, file: !2819, line: 178, baseType: !2843, size: 64, offset: 576)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2818, file: !2819, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2818, file: !2819, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2818, file: !2819, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2753, file: !385, line: 177, baseType: !2853, size: 64)
!2853 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2733, line: 56, baseType: !2854)
!2854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2855, size: 64)
!2855 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !158, line: 3371, size: 1792, elements: !2856)
!2856 = !{!2857, !2890, !2896, !2907, !2926, !2937, !2942, !2949, !2955, !2969, !2981, !3019, !3024, !3052, !3060, !3061, !3066, !3075, !3081, !3086, !3090, !3094, !3452, !3501, !3507, !3513, !3520, !3546, !3560, !3577, !3589, !3611, !3626, !3798}
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2855, file: !158, line: 3372, baseType: !2858, size: 64)
!2858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !158, line: 360, size: 64, elements: !2859)
!2859 = !{!2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889}
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2858, file: !158, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2858, file: !158, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2858, file: !158, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2858, file: !158, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2858, file: !158, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2858, file: !158, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2858, file: !158, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2858, file: !158, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2858, file: !158, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2858, file: !158, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2858, file: !158, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2858, file: !158, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2858, file: !158, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2858, file: !158, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2858, file: !158, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2858, file: !158, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2858, file: !158, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2858, file: !158, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2858, file: !158, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2858, file: !158, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2858, file: !158, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2858, file: !158, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2858, file: !158, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2858, file: !158, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2858, file: !158, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2858, file: !158, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2858, file: !158, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2858, file: !158, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2858, file: !158, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2858, file: !158, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2855, file: !158, line: 3373, baseType: !2891, size: 192)
!2891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !158, line: 402, size: 192, elements: !2892)
!2892 = !{!2893, !2894, !2895}
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2891, file: !158, line: 403, baseType: !2858, size: 64)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2891, file: !158, line: 404, baseType: !2853, size: 64, offset: 64)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2891, file: !158, line: 405, baseType: !2853, size: 64, offset: 128)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2855, file: !158, line: 3374, baseType: !2897, size: 320)
!2897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !158, line: 1384, size: 320, elements: !2898)
!2898 = !{!2899, !2900}
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2897, file: !158, line: 1385, baseType: !2891, size: 192)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2897, file: !158, line: 1386, baseType: !2901, size: 128, offset: 192)
!2901 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2902, line: 58, baseType: !2903)
!2902 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2903 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2902, line: 54, size: 128, elements: !2904)
!2904 = !{!2905, !2906}
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2903, file: !2902, line: 56, baseType: !2723, size: 64)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2903, file: !2902, line: 57, baseType: !2822, size: 64, offset: 64)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2855, file: !158, line: 3375, baseType: !2908, size: 256)
!2908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !158, line: 1397, size: 256, elements: !2909)
!2909 = !{!2910, !2911}
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2908, file: !158, line: 1398, baseType: !2891, size: 192)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2908, file: !158, line: 1399, baseType: !2912, size: 64, offset: 192)
!2912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2913, size: 64)
!2913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2914, line: 52, size: 256, elements: !2915)
!2914 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2915 = !{!2916, !2917, !2918, !2919, !2920, !2921, !2922}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2913, file: !2914, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2913, file: !2914, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2913, file: !2914, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2913, file: !2914, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2913, file: !2914, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2913, file: !2914, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2913, file: !2914, line: 62, baseType: !2923, size: 192, offset: 64)
!2923 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2723, size: 192, elements: !2924)
!2924 = !{!2925}
!2925 = !DISubrange(count: 3)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2855, file: !158, line: 3376, baseType: !2927, size: 256)
!2927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !158, line: 1408, size: 256, elements: !2928)
!2928 = !{!2929, !2930}
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2927, file: !158, line: 1409, baseType: !2891, size: 192)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2927, file: !158, line: 1410, baseType: !2931, size: 64, offset: 192)
!2931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2932, size: 64)
!2932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2933, line: 27, size: 192, elements: !2934)
!2933 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2934 = !{!2935, !2936}
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2932, file: !2933, line: 29, baseType: !2901, size: 128)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2932, file: !2933, line: 30, baseType: !5, size: 32, offset: 128)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2855, file: !158, line: 3377, baseType: !2938, size: 256)
!2938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !158, line: 1437, size: 256, elements: !2939)
!2939 = !{!2940, !2941}
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2938, file: !158, line: 1438, baseType: !2891, size: 192)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2938, file: !158, line: 1439, baseType: !2853, size: 64, offset: 192)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2855, file: !158, line: 3378, baseType: !2943, size: 256)
!2943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !158, line: 1418, size: 256, elements: !2944)
!2944 = !{!2945, !2946, !2947}
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2943, file: !158, line: 1419, baseType: !2891, size: 192)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2943, file: !158, line: 1420, baseType: !2756, size: 32, offset: 192)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2943, file: !158, line: 1421, baseType: !2948, size: 8, offset: 224)
!2948 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2761, size: 8, elements: !2771)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2855, file: !158, line: 3379, baseType: !2950, size: 320)
!2950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !158, line: 1428, size: 320, elements: !2951)
!2951 = !{!2952, !2953, !2954}
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2950, file: !158, line: 1429, baseType: !2891, size: 192)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2950, file: !158, line: 1430, baseType: !2853, size: 64, offset: 192)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2950, file: !158, line: 1431, baseType: !2853, size: 64, offset: 256)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2855, file: !158, line: 3380, baseType: !2956, size: 320)
!2956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !158, line: 1460, size: 320, elements: !2957)
!2957 = !{!2958, !2959}
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2956, file: !158, line: 1461, baseType: !2891, size: 192)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2956, file: !158, line: 1462, baseType: !2960, size: 128, offset: 192)
!2960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2961, line: 31, size: 128, elements: !2962)
!2961 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2962 = !{!2963, !2967, !2968}
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2960, file: !2961, line: 32, baseType: !2964, size: 64)
!2964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2965, size: 64)
!2965 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2966)
!2966 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2960, file: !2961, line: 33, baseType: !7, size: 32, offset: 64)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2960, file: !2961, line: 34, baseType: !7, size: 32, offset: 96)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2855, file: !158, line: 3381, baseType: !2970, size: 384)
!2970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !158, line: 2507, size: 384, elements: !2971)
!2971 = !{!2972, !2973, !2978, !2979, !2980}
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2970, file: !158, line: 2508, baseType: !2891, size: 192)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2970, file: !158, line: 2509, baseType: !2974, size: 32, offset: 192)
!2974 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2975, line: 58, baseType: !2976)
!2975 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2976 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2977, line: 44, baseType: !7)
!2977 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2970, file: !158, line: 2510, baseType: !7, size: 32, offset: 224)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2970, file: !158, line: 2511, baseType: !2853, size: 64, offset: 256)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2970, file: !158, line: 2512, baseType: !2853, size: 64, offset: 320)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2855, file: !158, line: 3382, baseType: !2982, size: 896)
!2982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !158, line: 2652, size: 896, elements: !2983)
!2983 = !{!2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2982, file: !158, line: 2653, baseType: !2970, size: 384)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2982, file: !158, line: 2654, baseType: !2853, size: 64, offset: 384)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2982, file: !158, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2982, file: !158, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2982, file: !158, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2982, file: !158, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2982, file: !158, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2982, file: !158, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2982, file: !158, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2982, file: !158, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2982, file: !158, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2982, file: !158, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2982, file: !158, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2982, file: !158, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2982, file: !158, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2982, file: !158, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2982, file: !158, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2982, file: !158, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2982, file: !158, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2982, file: !158, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2982, file: !158, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2982, file: !158, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2982, file: !158, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2982, file: !158, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2982, file: !158, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2982, file: !158, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2982, file: !158, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2982, file: !158, line: 2703, baseType: !7, size: 32, offset: 512)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2982, file: !158, line: 2705, baseType: !2853, size: 64, offset: 576)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2982, file: !158, line: 2706, baseType: !2853, size: 64, offset: 640)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2982, file: !158, line: 2707, baseType: !2853, size: 64, offset: 704)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2982, file: !158, line: 2708, baseType: !2853, size: 64, offset: 768)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2982, file: !158, line: 2711, baseType: !3017, size: 64, offset: 832)
!3017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3018, size: 64)
!3018 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !158, line: 2711, flags: DIFlagFwdDecl)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2855, file: !158, line: 3383, baseType: !3020, size: 960)
!3020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !158, line: 2756, size: 960, elements: !3021)
!3021 = !{!3022, !3023}
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3020, file: !158, line: 2757, baseType: !2982, size: 896)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3020, file: !158, line: 2758, baseType: !2732, size: 64, offset: 896)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2855, file: !158, line: 3384, baseType: !3025, size: 1472)
!3025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !158, line: 3114, size: 1472, elements: !3026)
!3026 = !{!3027, !3048, !3049, !3050, !3051}
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3025, file: !158, line: 3115, baseType: !3028, size: 1216)
!3028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !158, line: 2984, size: 1216, elements: !3029)
!3029 = !{!3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047}
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3028, file: !158, line: 2985, baseType: !3020, size: 960)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3028, file: !158, line: 2986, baseType: !2853, size: 64, offset: 960)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3028, file: !158, line: 2987, baseType: !2853, size: 64, offset: 1024)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3028, file: !158, line: 2988, baseType: !2853, size: 64, offset: 1088)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3028, file: !158, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3028, file: !158, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3028, file: !158, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3028, file: !158, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3028, file: !158, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3028, file: !158, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3028, file: !158, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3028, file: !158, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3028, file: !158, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3028, file: !158, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3028, file: !158, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3028, file: !158, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3028, file: !158, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3028, file: !158, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3025, file: !158, line: 3117, baseType: !2853, size: 64, offset: 1216)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3025, file: !158, line: 3119, baseType: !2853, size: 64, offset: 1280)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3025, file: !158, line: 3121, baseType: !2853, size: 64, offset: 1344)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3025, file: !158, line: 3123, baseType: !2853, size: 64, offset: 1408)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2855, file: !158, line: 3385, baseType: !3053, size: 1088)
!3053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !158, line: 2874, size: 1088, elements: !3054)
!3054 = !{!3055, !3056, !3057}
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3053, file: !158, line: 2875, baseType: !3020, size: 960)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3053, file: !158, line: 2876, baseType: !2732, size: 64, offset: 960)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3053, file: !158, line: 2877, baseType: !3058, size: 64, offset: 1024)
!3058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3059, size: 64)
!3059 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !158, line: 2856, flags: DIFlagFwdDecl)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2855, file: !158, line: 3386, baseType: !3028, size: 1216)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2855, file: !158, line: 3387, baseType: !3062, size: 1280)
!3062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !158, line: 3093, size: 1280, elements: !3063)
!3063 = !{!3064, !3065}
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3062, file: !158, line: 3094, baseType: !3028, size: 1216)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3062, file: !158, line: 3095, baseType: !3058, size: 64, offset: 1216)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2855, file: !158, line: 3388, baseType: !3067, size: 1216)
!3067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !158, line: 2824, size: 1216, elements: !3068)
!3068 = !{!3069, !3070, !3071, !3072, !3073, !3074}
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3067, file: !158, line: 2825, baseType: !2982, size: 896)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3067, file: !158, line: 2827, baseType: !2853, size: 64, offset: 896)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !3067, file: !158, line: 2828, baseType: !2853, size: 64, offset: 960)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !3067, file: !158, line: 2829, baseType: !2853, size: 64, offset: 1024)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !3067, file: !158, line: 2830, baseType: !2853, size: 64, offset: 1088)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !3067, file: !158, line: 2831, baseType: !2853, size: 64, offset: 1152)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2855, file: !158, line: 3389, baseType: !3076, size: 1024)
!3076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !158, line: 2850, size: 1024, elements: !3077)
!3077 = !{!3078, !3079, !3080}
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3076, file: !158, line: 2851, baseType: !3020, size: 960)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !3076, file: !158, line: 2852, baseType: !2756, size: 32, offset: 960)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !3076, file: !158, line: 2853, baseType: !2756, size: 32, offset: 992)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2855, file: !158, line: 3390, baseType: !3082, size: 1024)
!3082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !158, line: 2857, size: 1024, elements: !3083)
!3083 = !{!3084, !3085}
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3082, file: !158, line: 2858, baseType: !3020, size: 960)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3082, file: !158, line: 2859, baseType: !3058, size: 64, offset: 960)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2855, file: !158, line: 3391, baseType: !3087, size: 960)
!3087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !158, line: 2862, size: 960, elements: !3088)
!3088 = !{!3089}
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3087, file: !158, line: 2863, baseType: !3020, size: 960)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2855, file: !158, line: 3392, baseType: !3091, size: 1472)
!3091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !158, line: 3304, size: 1472, elements: !3092)
!3092 = !{!3093}
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3091, file: !158, line: 3305, baseType: !3025, size: 1472)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2855, file: !158, line: 3393, baseType: !3095, size: 1792)
!3095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !158, line: 3248, size: 1792, elements: !3096)
!3096 = !{!3097, !3098, !3431, !3432, !3433, !3434, !3435, !3436, !3437, !3438, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451}
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3095, file: !158, line: 3249, baseType: !3025, size: 1472)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3095, file: !158, line: 3251, baseType: !3099, size: 64, offset: 1472)
!3099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3100, size: 64)
!3100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !3101, line: 463, size: 1152, elements: !3102)
!3101 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3102 = !{!3103, !3264, !3368, !3369, !3372, !3375, !3376, !3377, !3378, !3379, !3380, !3404, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430}
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !3100, file: !3101, line: 464, baseType: !3104, size: 64)
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3105, size: 64)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !3106)
!3106 = !{!3107, !3156, !3169, !3183, !3232, !3245}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !3105, file: !135, line: 197, baseType: !3108, size: 64)
!3108 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !3109)
!3109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3110, size: 64)
!3110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !3111)
!3111 = !{!3112, !3113, !3114, !3115, !3116, !3117, !3144, !3153, !3154, !3155}
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !3110, file: !135, line: 119, baseType: !3109, size: 64)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !3110, file: !135, line: 122, baseType: !3109, size: 64, offset: 64)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !3110, file: !135, line: 123, baseType: !3109, size: 64, offset: 128)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3110, file: !135, line: 126, baseType: !2756, size: 32, offset: 192)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3110, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3110, file: !135, line: 165, baseType: !3118, size: 192, offset: 256)
!3118 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !3119)
!3119 = !{!3120, !3133, !3139}
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !3118, file: !135, line: 137, baseType: !3121, size: 128)
!3121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !3122)
!3122 = !{!3123, !3132}
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !3121, file: !135, line: 135, baseType: !3124, size: 64)
!3124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3125, size: 64)
!3125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !3126)
!3126 = !{!3127, !3128, !3129, !3130, !3131}
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !3125, file: !135, line: 96, baseType: !3124, size: 64)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !3125, file: !135, line: 97, baseType: !3124, size: 64, offset: 64)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3125, file: !135, line: 101, baseType: !2853, size: 64, offset: 128)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !3125, file: !135, line: 106, baseType: !2853, size: 64, offset: 192)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3125, file: !135, line: 111, baseType: !2853, size: 64, offset: 256)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !3121, file: !135, line: 136, baseType: !3124, size: 64, offset: 64)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !3118, file: !135, line: 151, baseType: !3134, size: 192)
!3134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !3135)
!3135 = !{!3136, !3137, !3138}
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3134, file: !135, line: 141, baseType: !2853, size: 64)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3134, file: !135, line: 145, baseType: !2853, size: 64, offset: 64)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !3134, file: !135, line: 150, baseType: !2756, size: 32, offset: 128)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !3118, file: !135, line: 164, baseType: !3140, size: 128)
!3140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !3141)
!3141 = !{!3142, !3143}
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !3140, file: !135, line: 161, baseType: !2853, size: 64)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !3140, file: !135, line: 163, baseType: !2974, size: 32, offset: 64)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !3110, file: !135, line: 168, baseType: !3145, size: 64, offset: 448)
!3145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3146, size: 64)
!3146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !3147)
!3147 = !{!3148, !3149, !3150, !3151, !3152}
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !3146, file: !135, line: 70, baseType: !3145, size: 64)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3146, file: !135, line: 73, baseType: !3109, size: 64, offset: 64)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !3146, file: !135, line: 78, baseType: !2853, size: 64, offset: 128)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !3146, file: !135, line: 85, baseType: !2732, size: 64, offset: 192)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3146, file: !135, line: 88, baseType: !2756, size: 32, offset: 256)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !3110, file: !135, line: 173, baseType: !2732, size: 64, offset: 512)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !3110, file: !135, line: 173, baseType: !2732, size: 64, offset: 576)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !3110, file: !135, line: 177, baseType: !2966, size: 8, offset: 640)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !3105, file: !135, line: 200, baseType: !3157, size: 64, offset: 64)
!3157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!3158 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !3159)
!3159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !3160)
!3160 = !{!3161}
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3159, file: !135, line: 185, baseType: !3162, size: 128)
!3162 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !3163)
!3163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !3164)
!3164 = !{!3165, !3166, !3167}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3163, file: !135, line: 184, baseType: !7, size: 32)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3163, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3163, file: !135, line: 184, baseType: !3168, size: 64, offset: 64)
!3168 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3108, size: 64, elements: !2771)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !3105, file: !135, line: 203, baseType: !3170, size: 64, offset: 128)
!3170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3171, size: 64)
!3171 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !3172)
!3172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !3173)
!3173 = !{!3174}
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3172, file: !135, line: 189, baseType: !3175, size: 128)
!3175 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !3176)
!3176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !3177)
!3177 = !{!3178, !3179, !3180}
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3176, file: !135, line: 188, baseType: !7, size: 32)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3176, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3176, file: !135, line: 188, baseType: !3181, size: 64, offset: 64)
!3181 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3182, size: 64, elements: !2771)
!3182 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !3145)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !3105, file: !135, line: 207, baseType: !3184, size: 64, offset: 192)
!3184 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2020, line: 144, baseType: !3185)
!3185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3186, size: 64)
!3186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2020, line: 100, size: 896, elements: !3187)
!3187 = !{!3188, !3196, !3201, !3206, !3208, !3209, !3210, !3211, !3212, !3213, !3218, !3220, !3221, !3226, !3231}
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3186, file: !2020, line: 102, baseType: !3189, size: 64)
!3189 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2020, line: 52, baseType: !3190)
!3190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3191, size: 64)
!3191 = !DISubroutineType(types: !3192)
!3192 = !{!3193, !3194}
!3193 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2020, line: 47, baseType: !7)
!3194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3195, size: 64)
!3195 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3186, file: !2020, line: 105, baseType: !3197, size: 64, offset: 64)
!3197 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2020, line: 59, baseType: !3198)
!3198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3199, size: 64)
!3199 = !DISubroutineType(types: !3200)
!3200 = !{!2756, !3194, !3194}
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3186, file: !2020, line: 108, baseType: !3202, size: 64, offset: 128)
!3202 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2020, line: 63, baseType: !3203)
!3203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3204, size: 64)
!3204 = !DISubroutineType(types: !3205)
!3205 = !{null, !2843}
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3186, file: !2020, line: 111, baseType: !3207, size: 64, offset: 192)
!3207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2843, size: 64)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3186, file: !2020, line: 114, baseType: !2721, size: 64, offset: 256)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3186, file: !2020, line: 117, baseType: !2721, size: 64, offset: 320)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3186, file: !2020, line: 120, baseType: !2721, size: 64, offset: 384)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3186, file: !2020, line: 124, baseType: !7, size: 32, offset: 448)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3186, file: !2020, line: 128, baseType: !7, size: 32, offset: 480)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3186, file: !2020, line: 131, baseType: !3214, size: 64, offset: 512)
!3214 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2020, line: 75, baseType: !3215)
!3215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3216, size: 64)
!3216 = !DISubroutineType(types: !3217)
!3217 = !{!2843, !2721, !2721}
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3186, file: !2020, line: 132, baseType: !3219, size: 64, offset: 576)
!3219 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2020, line: 78, baseType: !3203)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3186, file: !2020, line: 135, baseType: !2843, size: 64, offset: 640)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3186, file: !2020, line: 136, baseType: !3222, size: 64, offset: 704)
!3222 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2020, line: 82, baseType: !3223)
!3223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3224, size: 64)
!3224 = !DISubroutineType(types: !3225)
!3225 = !{!2843, !2843, !2721, !2721}
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3186, file: !2020, line: 137, baseType: !3227, size: 64, offset: 768)
!3227 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2020, line: 83, baseType: !3228)
!3228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3229, size: 64)
!3229 = !DISubroutineType(types: !3230)
!3230 = !{null, !2843, !2843}
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3186, file: !2020, line: 141, baseType: !7, size: 32, offset: 832)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !3105, file: !135, line: 211, baseType: !3233, size: 64, offset: 256)
!3233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3234, size: 64)
!3234 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !158, line: 183, baseType: !3235)
!3235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !158, line: 183, size: 128, elements: !3236)
!3236 = !{!3237}
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3235, file: !158, line: 183, baseType: !3238, size: 128)
!3238 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !158, line: 182, baseType: !3239)
!3239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !158, line: 182, size: 128, elements: !3240)
!3240 = !{!3241, !3242, !3243}
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3239, file: !158, line: 182, baseType: !7, size: 32)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3239, file: !158, line: 182, baseType: !7, size: 32, offset: 32)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3239, file: !158, line: 182, baseType: !3244, size: 64, offset: 64)
!3244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2853, size: 64, elements: !2771)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !3105, file: !135, line: 220, baseType: !3246, size: 64, offset: 320)
!3246 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !3247)
!3247 = !{!3248, !3249}
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !3246, file: !135, line: 218, baseType: !3233, size: 64)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !3246, file: !135, line: 219, baseType: !3250, size: 64)
!3250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3251, size: 64)
!3251 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !3252, line: 29, baseType: !3253)
!3252 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !3252, line: 29, size: 96, elements: !3254)
!3254 = !{!3255}
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3253, file: !3252, line: 29, baseType: !3256, size: 96)
!3256 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !3252, line: 27, baseType: !3257)
!3257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !3252, line: 27, size: 96, elements: !3258)
!3258 = !{!3259, !3260, !3261}
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3257, file: !3252, line: 27, baseType: !7, size: 32)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3257, file: !3252, line: 27, baseType: !7, size: 32, offset: 32)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3257, file: !3252, line: 27, baseType: !3262, size: 8, offset: 64)
!3262 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3263, size: 8, elements: !2771)
!3263 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !3252, line: 26, baseType: !2966)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !3100, file: !3101, line: 467, baseType: !3265, size: 64, offset: 64)
!3265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3266, size: 64)
!3266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !142, line: 374, size: 640, elements: !3267)
!3267 = !{!3268, !3343, !3344, !3357, !3358, !3359, !3360, !3361, !3362, !3364, !3366, !3367}
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3266, file: !142, line: 377, baseType: !3269, size: 64)
!3269 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2733, line: 111, baseType: !3270)
!3270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3271, size: 64)
!3271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !142, line: 217, size: 832, elements: !3272)
!3272 = !{!3273, !3308, !3309, !3310, !3313, !3317, !3318, !3319, !3337, !3338, !3339, !3340, !3341, !3342}
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !3271, file: !142, line: 219, baseType: !3274, size: 64)
!3274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3275, size: 64)
!3275 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !142, line: 151, baseType: !3276)
!3276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !142, line: 151, size: 128, elements: !3277)
!3277 = !{!3278}
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3276, file: !142, line: 151, baseType: !3279, size: 128)
!3279 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !142, line: 150, baseType: !3280)
!3280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !142, line: 150, size: 128, elements: !3281)
!3281 = !{!3282, !3283, !3284}
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3280, file: !142, line: 150, baseType: !7, size: 32)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3280, file: !142, line: 150, baseType: !7, size: 32, offset: 32)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3280, file: !142, line: 150, baseType: !3285, size: 64, offset: 64)
!3285 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3286, size: 64, elements: !2771)
!3286 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2733, line: 108, baseType: !3287)
!3287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3288, size: 64)
!3288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !142, line: 122, size: 512, elements: !3289)
!3289 = !{!3290, !3291, !3292, !3300, !3301, !3302, !3303, !3304, !3305, !3306}
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !3288, file: !142, line: 124, baseType: !3270, size: 64)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !3288, file: !142, line: 125, baseType: !3270, size: 64, offset: 64)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !3288, file: !142, line: 131, baseType: !3293, size: 64, offset: 128)
!3293 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !142, line: 128, size: 64, elements: !3294)
!3294 = !{!3295, !3299}
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !3293, file: !142, line: 129, baseType: !3296, size: 64)
!3296 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2733, line: 66, baseType: !3297)
!3297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3298, size: 64)
!3298 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !2733, line: 65, flags: DIFlagFwdDecl)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3293, file: !142, line: 130, baseType: !2732, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3288, file: !142, line: 134, baseType: !2843, size: 64, offset: 192)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !3288, file: !142, line: 137, baseType: !2853, size: 64, offset: 256)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !3288, file: !142, line: 138, baseType: !2974, size: 32, offset: 320)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !3288, file: !142, line: 142, baseType: !7, size: 32, offset: 352)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3288, file: !142, line: 144, baseType: !2756, size: 32, offset: 384)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !3288, file: !142, line: 145, baseType: !2756, size: 32, offset: 416)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3288, file: !142, line: 146, baseType: !3307, size: 64, offset: 448)
!3307 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !142, line: 119, baseType: !2822)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !3271, file: !142, line: 220, baseType: !3274, size: 64, offset: 64)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3271, file: !142, line: 223, baseType: !2843, size: 64, offset: 128)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !3271, file: !142, line: 226, baseType: !3311, size: 64, offset: 192)
!3311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3312, size: 64)
!3312 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 185, flags: DIFlagFwdDecl)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !3271, file: !142, line: 229, baseType: !3314, size: 128, offset: 256)
!3314 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3315, size: 128, elements: !2806)
!3315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3316, size: 64)
!3316 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !142, line: 229, flags: DIFlagFwdDecl)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !3271, file: !142, line: 232, baseType: !3270, size: 64, offset: 384)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !3271, file: !142, line: 233, baseType: !3270, size: 64, offset: 448)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !3271, file: !142, line: 238, baseType: !3320, size: 64, offset: 512)
!3320 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !142, line: 235, size: 64, elements: !3321)
!3321 = !{!3322, !3328}
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3320, file: !142, line: 236, baseType: !3323, size: 64)
!3323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3324, size: 64)
!3324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !142, line: 273, size: 128, elements: !3325)
!3325 = !{!3326, !3327}
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3324, file: !142, line: 275, baseType: !3296, size: 64)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3324, file: !142, line: 278, baseType: !3296, size: 64, offset: 64)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3320, file: !142, line: 237, baseType: !3329, size: 64)
!3329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3330, size: 64)
!3330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !142, line: 259, size: 320, elements: !3331)
!3331 = !{!3332, !3333, !3334, !3335, !3336}
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3330, file: !142, line: 261, baseType: !2732, size: 64)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3330, file: !142, line: 262, baseType: !2732, size: 64, offset: 64)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3330, file: !142, line: 266, baseType: !2732, size: 64, offset: 128)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3330, file: !142, line: 267, baseType: !2732, size: 64, offset: 192)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3330, file: !142, line: 270, baseType: !2756, size: 32, offset: 256)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3271, file: !142, line: 241, baseType: !3307, size: 64, offset: 576)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3271, file: !142, line: 244, baseType: !2756, size: 32, offset: 640)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !3271, file: !142, line: 247, baseType: !2756, size: 32, offset: 672)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3271, file: !142, line: 250, baseType: !2756, size: 32, offset: 704)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !3271, file: !142, line: 253, baseType: !2756, size: 32, offset: 736)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3271, file: !142, line: 256, baseType: !2756, size: 32, offset: 768)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3266, file: !142, line: 378, baseType: !3269, size: 64, offset: 64)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3266, file: !142, line: 381, baseType: !3345, size: 64, offset: 128)
!3345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3346, size: 64)
!3346 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !142, line: 282, baseType: !3347)
!3347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !142, line: 282, size: 128, elements: !3348)
!3348 = !{!3349}
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3347, file: !142, line: 282, baseType: !3350, size: 128)
!3350 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !142, line: 281, baseType: !3351)
!3351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !142, line: 281, size: 128, elements: !3352)
!3352 = !{!3353, !3354, !3355}
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3351, file: !142, line: 281, baseType: !7, size: 32)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3351, file: !142, line: 281, baseType: !7, size: 32, offset: 32)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3351, file: !142, line: 281, baseType: !3356, size: 64, offset: 64)
!3356 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3269, size: 64, elements: !2771)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3266, file: !142, line: 384, baseType: !2756, size: 32, offset: 192)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3266, file: !142, line: 387, baseType: !2756, size: 32, offset: 224)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3266, file: !142, line: 390, baseType: !2756, size: 32, offset: 256)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3266, file: !142, line: 394, baseType: !3345, size: 64, offset: 320)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3266, file: !142, line: 396, baseType: !141, size: 32, offset: 384)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3266, file: !142, line: 399, baseType: !3363, size: 64, offset: 416)
!3363 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 64, elements: !2806)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3266, file: !142, line: 402, baseType: !3365, size: 64, offset: 480)
!3365 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2806)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3266, file: !142, line: 406, baseType: !2756, size: 32, offset: 544)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3266, file: !142, line: 409, baseType: !2756, size: 32, offset: 576)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !3100, file: !3101, line: 470, baseType: !3297, size: 64, offset: 128)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !3100, file: !3101, line: 473, baseType: !3370, size: 64, offset: 192)
!3370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3371, size: 64)
!3371 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !3101, line: 166, flags: DIFlagFwdDecl)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !3100, file: !3101, line: 476, baseType: !3373, size: 64, offset: 256)
!3373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3374, size: 64)
!3374 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !3101, line: 476, flags: DIFlagFwdDecl)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !3100, file: !3101, line: 479, baseType: !3184, size: 64, offset: 320)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3100, file: !3101, line: 484, baseType: !2853, size: 64, offset: 384)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !3100, file: !3101, line: 488, baseType: !2853, size: 64, offset: 448)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !3100, file: !3101, line: 493, baseType: !2853, size: 64, offset: 512)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !3100, file: !3101, line: 496, baseType: !2853, size: 64, offset: 576)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !3100, file: !3101, line: 501, baseType: !3381, size: 64, offset: 640)
!3381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3382, size: 64)
!3382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !153, line: 2355, size: 576, elements: !3383)
!3383 = !{!3384, !3387, !3388, !3389, !3390, !3392, !3393, !3398, !3399, !3400, !3401, !3402, !3403}
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3382, file: !153, line: 2356, baseType: !3385, size: 64)
!3385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3386 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !153, line: 2356, flags: DIFlagFwdDecl)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3382, file: !153, line: 2357, baseType: !2759, size: 64, offset: 64)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3382, file: !153, line: 2358, baseType: !2756, size: 32, offset: 128)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3382, file: !153, line: 2359, baseType: !2756, size: 32, offset: 160)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3382, file: !153, line: 2360, baseType: !3391, size: 128, offset: 192)
!3391 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2756, size: 128, elements: !2832)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3382, file: !153, line: 2364, baseType: !2756, size: 32, offset: 320)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3382, file: !153, line: 2367, baseType: !3394, size: 128, offset: 384)
!3394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !153, line: 2349, size: 128, elements: !3395)
!3395 = !{!3396, !3397}
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3394, file: !153, line: 2351, baseType: !2732, size: 64)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3394, file: !153, line: 2352, baseType: !2822, size: 64, offset: 64)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3382, file: !153, line: 2371, baseType: !152, size: 32, offset: 512)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3382, file: !153, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3382, file: !153, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3382, file: !153, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3382, file: !153, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3382, file: !153, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !3100, file: !3101, line: 504, baseType: !3405, size: 64, offset: 704)
!3405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3406, size: 64)
!3406 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !3101, line: 504, flags: DIFlagFwdDecl)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !3100, file: !3101, line: 507, baseType: !3184, size: 64, offset: 768)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !3100, file: !3101, line: 510, baseType: !2756, size: 32, offset: 832)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !3100, file: !3101, line: 513, baseType: !2756, size: 32, offset: 864)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !3100, file: !3101, line: 516, baseType: !2974, size: 32, offset: 896)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !3100, file: !3101, line: 519, baseType: !2974, size: 32, offset: 928)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !3100, file: !3101, line: 522, baseType: !7, size: 32, offset: 960)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !3100, file: !3101, line: 523, baseType: !7, size: 32, offset: 992)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !3100, file: !3101, line: 528, baseType: !2759, size: 64, offset: 1024)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !3100, file: !3101, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !3100, file: !3101, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !3100, file: !3101, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !3100, file: !3101, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !3100, file: !3101, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !3100, file: !3101, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !3100, file: !3101, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !3100, file: !3101, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !3100, file: !3101, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !3100, file: !3101, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !3100, file: !3101, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !3100, file: !3101, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !3100, file: !3101, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !3100, file: !3101, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !3100, file: !3101, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !3100, file: !3101, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !3095, file: !158, line: 3254, baseType: !2853, size: 64, offset: 1536)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !3095, file: !158, line: 3257, baseType: !2853, size: 64, offset: 1600)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !3095, file: !158, line: 3258, baseType: !2853, size: 64, offset: 1664)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !3095, file: !158, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !3095, file: !158, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !3095, file: !158, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !3095, file: !158, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !3095, file: !158, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !3095, file: !158, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !3095, file: !158, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !3095, file: !158, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !3095, file: !158, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !3095, file: !158, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !3095, file: !158, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !3095, file: !158, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !3095, file: !158, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !3095, file: !158, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !3095, file: !158, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3095, file: !158, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !3095, file: !158, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !3095, file: !158, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2855, file: !158, line: 3394, baseType: !3453, size: 1344)
!3453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !158, line: 2279, size: 1344, elements: !3454)
!3454 = !{!3455, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3474, !3475, !3476, !3477, !3480, !3481, !3482, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3498}
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3453, file: !158, line: 2280, baseType: !2891, size: 192)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3453, file: !158, line: 2281, baseType: !2853, size: 64, offset: 192)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3453, file: !158, line: 2282, baseType: !2853, size: 64, offset: 256)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3453, file: !158, line: 2283, baseType: !2853, size: 64, offset: 320)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3453, file: !158, line: 2284, baseType: !2853, size: 64, offset: 384)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3453, file: !158, line: 2285, baseType: !7, size: 32, offset: 448)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3453, file: !158, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3453, file: !158, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3453, file: !158, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3453, file: !158, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3453, file: !158, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3453, file: !158, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3453, file: !158, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3453, file: !158, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3453, file: !158, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3453, file: !158, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3453, file: !158, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3453, file: !158, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3453, file: !158, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3453, file: !158, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3453, file: !158, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3453, file: !158, line: 2305, baseType: !7, size: 32, offset: 512)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3453, file: !158, line: 2306, baseType: !3478, size: 32, offset: 544)
!3478 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3479, line: 31, baseType: !2756)
!3479 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3453, file: !158, line: 2307, baseType: !2853, size: 64, offset: 576)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3453, file: !158, line: 2308, baseType: !2853, size: 64, offset: 640)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3453, file: !158, line: 2314, baseType: !3483, size: 64, offset: 704)
!3483 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !158, line: 2309, size: 64, elements: !3484)
!3484 = !{!3485, !3486, !3487}
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3483, file: !158, line: 2310, baseType: !2756, size: 32)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3483, file: !158, line: 2311, baseType: !2759, size: 64)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3483, file: !158, line: 2312, baseType: !3488, size: 64)
!3488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3489, size: 64)
!3489 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !158, line: 2277, flags: DIFlagFwdDecl)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3453, file: !158, line: 2315, baseType: !2853, size: 64, offset: 768)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3453, file: !158, line: 2316, baseType: !2853, size: 64, offset: 832)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3453, file: !158, line: 2317, baseType: !2853, size: 64, offset: 896)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3453, file: !158, line: 2318, baseType: !2853, size: 64, offset: 960)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3453, file: !158, line: 2319, baseType: !2853, size: 64, offset: 1024)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3453, file: !158, line: 2320, baseType: !2853, size: 64, offset: 1088)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3453, file: !158, line: 2321, baseType: !2853, size: 64, offset: 1152)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3453, file: !158, line: 2322, baseType: !2853, size: 64, offset: 1216)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3453, file: !158, line: 2324, baseType: !3499, size: 64, offset: 1280)
!3499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3500, size: 64)
!3500 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !158, line: 2324, flags: DIFlagFwdDecl)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2855, file: !158, line: 3395, baseType: !3502, size: 320)
!3502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !158, line: 1469, size: 320, elements: !3503)
!3503 = !{!3504, !3505, !3506}
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3502, file: !158, line: 1470, baseType: !2891, size: 192)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3502, file: !158, line: 1471, baseType: !2853, size: 64, offset: 192)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3502, file: !158, line: 1472, baseType: !2853, size: 64, offset: 256)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2855, file: !158, line: 3396, baseType: !3508, size: 320)
!3508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !158, line: 1482, size: 320, elements: !3509)
!3509 = !{!3510, !3511, !3512}
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3508, file: !158, line: 1483, baseType: !2891, size: 192)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3508, file: !158, line: 1484, baseType: !2756, size: 32, offset: 192)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3508, file: !158, line: 1485, baseType: !3244, size: 64, offset: 256)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2855, file: !158, line: 3397, baseType: !3514, size: 384)
!3514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !158, line: 1829, size: 384, elements: !3515)
!3515 = !{!3516, !3517, !3518, !3519}
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3514, file: !158, line: 1830, baseType: !2891, size: 192)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3514, file: !158, line: 1831, baseType: !2974, size: 32, offset: 192)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3514, file: !158, line: 1832, baseType: !2853, size: 64, offset: 256)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3514, file: !158, line: 1835, baseType: !3244, size: 64, offset: 320)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2855, file: !158, line: 3398, baseType: !3521, size: 704)
!3521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !158, line: 1898, size: 704, elements: !3522)
!3522 = !{!3523, !3524, !3525, !3529, !3530, !3533}
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3521, file: !158, line: 1899, baseType: !2891, size: 192)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3521, file: !158, line: 1902, baseType: !2853, size: 64, offset: 192)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3521, file: !158, line: 1905, baseType: !3526, size: 64, offset: 256)
!3526 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2733, line: 58, baseType: !3527)
!3527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3528, size: 64)
!3528 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !2733, line: 57, flags: DIFlagFwdDecl)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3521, file: !158, line: 1908, baseType: !7, size: 32, offset: 320)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3521, file: !158, line: 1911, baseType: !3531, size: 64, offset: 384)
!3531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3532, size: 64)
!3532 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !158, line: 1876, flags: DIFlagFwdDecl)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3521, file: !158, line: 1914, baseType: !3534, size: 256, offset: 448)
!3534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !158, line: 1883, size: 256, elements: !3535)
!3535 = !{!3536, !3538, !3539, !3544}
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3534, file: !158, line: 1884, baseType: !3537, size: 64)
!3537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3534, size: 64)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3534, file: !158, line: 1885, baseType: !3537, size: 64, offset: 64)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3534, file: !158, line: 1891, baseType: !3540, size: 64, offset: 128)
!3540 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3534, file: !158, line: 1891, size: 64, elements: !3541)
!3541 = !{!3542, !3543}
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3540, file: !158, line: 1891, baseType: !3526, size: 64)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3540, file: !158, line: 1891, baseType: !2853, size: 64)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3534, file: !158, line: 1892, baseType: !3545, size: 64, offset: 192)
!3545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2853, size: 64)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2855, file: !158, line: 3399, baseType: !3547, size: 704)
!3547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !158, line: 2008, size: 704, elements: !3548)
!3548 = !{!3549, !3550, !3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559}
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3547, file: !158, line: 2009, baseType: !2891, size: 192)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3547, file: !158, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3547, file: !158, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3547, file: !158, line: 2014, baseType: !2974, size: 32, offset: 224)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3547, file: !158, line: 2016, baseType: !2853, size: 64, offset: 256)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3547, file: !158, line: 2017, baseType: !3233, size: 64, offset: 320)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3547, file: !158, line: 2019, baseType: !2853, size: 64, offset: 384)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3547, file: !158, line: 2020, baseType: !2853, size: 64, offset: 448)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3547, file: !158, line: 2021, baseType: !2853, size: 64, offset: 512)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3547, file: !158, line: 2022, baseType: !2853, size: 64, offset: 576)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3547, file: !158, line: 2023, baseType: !2853, size: 64, offset: 640)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2855, file: !158, line: 3400, baseType: !3561, size: 832)
!3561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !158, line: 2430, size: 832, elements: !3562)
!3562 = !{!3563, !3564, !3565, !3566, !3567, !3568, !3569, !3570, !3571, !3572}
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3561, file: !158, line: 2431, baseType: !2891, size: 192)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3561, file: !158, line: 2433, baseType: !2853, size: 64, offset: 192)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3561, file: !158, line: 2434, baseType: !2853, size: 64, offset: 256)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3561, file: !158, line: 2435, baseType: !2853, size: 64, offset: 320)
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3561, file: !158, line: 2436, baseType: !2853, size: 64, offset: 384)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3561, file: !158, line: 2437, baseType: !3233, size: 64, offset: 448)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3561, file: !158, line: 2438, baseType: !2853, size: 64, offset: 512)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3561, file: !158, line: 2440, baseType: !2853, size: 64, offset: 576)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3561, file: !158, line: 2441, baseType: !2853, size: 64, offset: 640)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3561, file: !158, line: 2443, baseType: !3573, size: 128, offset: 704)
!3573 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !158, line: 182, baseType: !3574)
!3574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !158, line: 182, size: 128, elements: !3575)
!3575 = !{!3576}
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3574, file: !158, line: 182, baseType: !3238, size: 128)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2855, file: !158, line: 3401, baseType: !3578, size: 320)
!3578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !158, line: 3327, size: 320, elements: !3579)
!3579 = !{!3580, !3581, !3588}
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3578, file: !158, line: 3329, baseType: !2891, size: 192)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3578, file: !158, line: 3330, baseType: !3582, size: 64, offset: 192)
!3582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3583, size: 64)
!3583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !158, line: 3320, size: 192, elements: !3584)
!3584 = !{!3585, !3586, !3587}
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3583, file: !158, line: 3322, baseType: !3582, size: 64)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3583, file: !158, line: 3323, baseType: !3582, size: 64, offset: 64)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3583, file: !158, line: 3324, baseType: !2853, size: 64, offset: 128)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3578, file: !158, line: 3331, baseType: !3582, size: 64, offset: 256)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2855, file: !158, line: 3402, baseType: !3590, size: 256)
!3590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !158, line: 1540, size: 256, elements: !3591)
!3591 = !{!3592, !3593}
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3590, file: !158, line: 1541, baseType: !2891, size: 192)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3590, file: !158, line: 1542, baseType: !3594, size: 64, offset: 192)
!3594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3595, size: 64)
!3595 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !158, line: 1538, baseType: !3596)
!3596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !158, line: 1538, size: 192, elements: !3597)
!3597 = !{!3598}
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3596, file: !158, line: 1538, baseType: !3599, size: 192)
!3599 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !158, line: 1537, baseType: !3600)
!3600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !158, line: 1537, size: 192, elements: !3601)
!3601 = !{!3602, !3603, !3604}
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3600, file: !158, line: 1537, baseType: !7, size: 32)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3600, file: !158, line: 1537, baseType: !7, size: 32, offset: 32)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3600, file: !158, line: 1537, baseType: !3605, size: 128, offset: 64)
!3605 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3606, size: 128, elements: !2771)
!3606 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !158, line: 1535, baseType: !3607)
!3607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !158, line: 1532, size: 128, elements: !3608)
!3608 = !{!3609, !3610}
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3607, file: !158, line: 1533, baseType: !2853, size: 64)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3607, file: !158, line: 1534, baseType: !2853, size: 64, offset: 64)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2855, file: !158, line: 3403, baseType: !3612, size: 512)
!3612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !158, line: 1938, size: 512, elements: !3613)
!3613 = !{!3614, !3615, !3616, !3617, !3623, !3624, !3625}
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3612, file: !158, line: 1939, baseType: !2891, size: 192)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3612, file: !158, line: 1940, baseType: !2974, size: 32, offset: 192)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3612, file: !158, line: 1941, baseType: !157, size: 32, offset: 224)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3612, file: !158, line: 1946, baseType: !3618, size: 32, offset: 256)
!3618 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !158, line: 1942, size: 32, elements: !3619)
!3619 = !{!3620, !3621, !3622}
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3618, file: !158, line: 1943, baseType: !176, size: 32)
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3618, file: !158, line: 1944, baseType: !183, size: 32)
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3618, file: !158, line: 1945, baseType: !190, size: 32)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3612, file: !158, line: 1950, baseType: !3296, size: 64, offset: 320)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3612, file: !158, line: 1951, baseType: !3296, size: 64, offset: 384)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3612, file: !158, line: 1953, baseType: !3244, size: 64, offset: 448)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2855, file: !158, line: 3404, baseType: !3627, size: 1664)
!3627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !158, line: 3337, size: 1664, elements: !3628)
!3628 = !{!3629, !3630}
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3627, file: !158, line: 3338, baseType: !2891, size: 192)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3627, file: !158, line: 3341, baseType: !3631, size: 1472, offset: 192)
!3631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !3632, line: 410, size: 1472, elements: !3633)
!3632 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3633 = !{!3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3642, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663, !3664, !3665, !3666, !3667, !3668, !3669, !3670, !3671, !3672, !3673, !3674, !3675, !3676, !3677, !3678, !3679, !3680, !3681, !3682, !3683, !3684, !3685, !3686, !3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694, !3695, !3696, !3697, !3698, !3699, !3700, !3701, !3702, !3703, !3704, !3705, !3706, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714, !3715, !3716, !3717, !3718, !3719, !3720, !3721, !3722, !3723, !3724, !3725, !3726, !3727, !3728, !3729, !3730, !3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742, !3743, !3744, !3745, !3746, !3747, !3748, !3749, !3750, !3751, !3752, !3753, !3754, !3755, !3756, !3757, !3758, !3759, !3760, !3761, !3762, !3763, !3764, !3765, !3766, !3767, !3768, !3769, !3770, !3771, !3772, !3773, !3774, !3775, !3776, !3777, !3778, !3779, !3780, !3781, !3782, !3783, !3784, !3785, !3786, !3787, !3788, !3789, !3790, !3791, !3792, !3793, !3794, !3795, !3796, !3797}
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3631, file: !3632, line: 412, baseType: !2756, size: 32)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3631, file: !3632, line: 413, baseType: !2756, size: 32, offset: 32)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3631, file: !3632, line: 414, baseType: !2756, size: 32, offset: 64)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3631, file: !3632, line: 415, baseType: !2756, size: 32, offset: 96)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3631, file: !3632, line: 416, baseType: !2756, size: 32, offset: 128)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3631, file: !3632, line: 417, baseType: !2756, size: 32, offset: 160)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3631, file: !3632, line: 418, baseType: !2966, size: 8, offset: 192)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3631, file: !3632, line: 419, baseType: !2966, size: 8, offset: 200)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3631, file: !3632, line: 420, baseType: !3643, size: 8, offset: 208)
!3643 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3631, file: !3632, line: 421, baseType: !3643, size: 8, offset: 216)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3631, file: !3632, line: 422, baseType: !3643, size: 8, offset: 224)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3631, file: !3632, line: 423, baseType: !3643, size: 8, offset: 232)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3631, file: !3632, line: 424, baseType: !3643, size: 8, offset: 240)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3631, file: !3632, line: 425, baseType: !3643, size: 8, offset: 248)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3631, file: !3632, line: 426, baseType: !3643, size: 8, offset: 256)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3631, file: !3632, line: 427, baseType: !3643, size: 8, offset: 264)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3631, file: !3632, line: 428, baseType: !3643, size: 8, offset: 272)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3631, file: !3632, line: 429, baseType: !3643, size: 8, offset: 280)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3631, file: !3632, line: 430, baseType: !3643, size: 8, offset: 288)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3631, file: !3632, line: 431, baseType: !3643, size: 8, offset: 296)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3631, file: !3632, line: 432, baseType: !3643, size: 8, offset: 304)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3631, file: !3632, line: 433, baseType: !3643, size: 8, offset: 312)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3631, file: !3632, line: 434, baseType: !3643, size: 8, offset: 320)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3631, file: !3632, line: 435, baseType: !3643, size: 8, offset: 328)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3631, file: !3632, line: 436, baseType: !3643, size: 8, offset: 336)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3631, file: !3632, line: 437, baseType: !3643, size: 8, offset: 344)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3631, file: !3632, line: 438, baseType: !3643, size: 8, offset: 352)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3631, file: !3632, line: 439, baseType: !3643, size: 8, offset: 360)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3631, file: !3632, line: 440, baseType: !3643, size: 8, offset: 368)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3631, file: !3632, line: 441, baseType: !3643, size: 8, offset: 376)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3631, file: !3632, line: 442, baseType: !3643, size: 8, offset: 384)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3631, file: !3632, line: 443, baseType: !3643, size: 8, offset: 392)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3631, file: !3632, line: 444, baseType: !3643, size: 8, offset: 400)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3631, file: !3632, line: 445, baseType: !3643, size: 8, offset: 408)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3631, file: !3632, line: 446, baseType: !3643, size: 8, offset: 416)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3631, file: !3632, line: 447, baseType: !3643, size: 8, offset: 424)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3631, file: !3632, line: 448, baseType: !3643, size: 8, offset: 432)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3631, file: !3632, line: 449, baseType: !3643, size: 8, offset: 440)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3631, file: !3632, line: 450, baseType: !3643, size: 8, offset: 448)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3631, file: !3632, line: 451, baseType: !3643, size: 8, offset: 456)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3631, file: !3632, line: 452, baseType: !3643, size: 8, offset: 464)
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3631, file: !3632, line: 453, baseType: !3643, size: 8, offset: 472)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3631, file: !3632, line: 454, baseType: !3643, size: 8, offset: 480)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3631, file: !3632, line: 455, baseType: !3643, size: 8, offset: 488)
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3631, file: !3632, line: 456, baseType: !3643, size: 8, offset: 496)
!3680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3631, file: !3632, line: 457, baseType: !3643, size: 8, offset: 504)
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3631, file: !3632, line: 458, baseType: !3643, size: 8, offset: 512)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3631, file: !3632, line: 459, baseType: !3643, size: 8, offset: 520)
!3683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3631, file: !3632, line: 460, baseType: !3643, size: 8, offset: 528)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3631, file: !3632, line: 461, baseType: !3643, size: 8, offset: 536)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3631, file: !3632, line: 462, baseType: !3643, size: 8, offset: 544)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3631, file: !3632, line: 463, baseType: !3643, size: 8, offset: 552)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3631, file: !3632, line: 464, baseType: !3643, size: 8, offset: 560)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3631, file: !3632, line: 465, baseType: !3643, size: 8, offset: 568)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3631, file: !3632, line: 466, baseType: !3643, size: 8, offset: 576)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3631, file: !3632, line: 467, baseType: !3643, size: 8, offset: 584)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3631, file: !3632, line: 468, baseType: !3643, size: 8, offset: 592)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3631, file: !3632, line: 469, baseType: !3643, size: 8, offset: 600)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3631, file: !3632, line: 470, baseType: !3643, size: 8, offset: 608)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3631, file: !3632, line: 471, baseType: !3643, size: 8, offset: 616)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3631, file: !3632, line: 472, baseType: !3643, size: 8, offset: 624)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3631, file: !3632, line: 473, baseType: !3643, size: 8, offset: 632)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3631, file: !3632, line: 474, baseType: !3643, size: 8, offset: 640)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3631, file: !3632, line: 475, baseType: !3643, size: 8, offset: 648)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3631, file: !3632, line: 476, baseType: !3643, size: 8, offset: 656)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3631, file: !3632, line: 477, baseType: !3643, size: 8, offset: 664)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3631, file: !3632, line: 478, baseType: !3643, size: 8, offset: 672)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3631, file: !3632, line: 479, baseType: !3643, size: 8, offset: 680)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3631, file: !3632, line: 480, baseType: !3643, size: 8, offset: 688)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3631, file: !3632, line: 481, baseType: !3643, size: 8, offset: 696)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3631, file: !3632, line: 482, baseType: !3643, size: 8, offset: 704)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3631, file: !3632, line: 483, baseType: !3643, size: 8, offset: 712)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3631, file: !3632, line: 484, baseType: !3643, size: 8, offset: 720)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3631, file: !3632, line: 485, baseType: !3643, size: 8, offset: 728)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3631, file: !3632, line: 486, baseType: !3643, size: 8, offset: 736)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3631, file: !3632, line: 487, baseType: !3643, size: 8, offset: 744)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3631, file: !3632, line: 488, baseType: !3643, size: 8, offset: 752)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3631, file: !3632, line: 489, baseType: !3643, size: 8, offset: 760)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3631, file: !3632, line: 490, baseType: !3643, size: 8, offset: 768)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3631, file: !3632, line: 491, baseType: !3643, size: 8, offset: 776)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3631, file: !3632, line: 492, baseType: !3643, size: 8, offset: 784)
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3631, file: !3632, line: 493, baseType: !3643, size: 8, offset: 792)
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3631, file: !3632, line: 494, baseType: !3643, size: 8, offset: 800)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3631, file: !3632, line: 495, baseType: !3643, size: 8, offset: 808)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3631, file: !3632, line: 496, baseType: !3643, size: 8, offset: 816)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3631, file: !3632, line: 497, baseType: !3643, size: 8, offset: 824)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3631, file: !3632, line: 498, baseType: !3643, size: 8, offset: 832)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3631, file: !3632, line: 499, baseType: !3643, size: 8, offset: 840)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3631, file: !3632, line: 500, baseType: !3643, size: 8, offset: 848)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3631, file: !3632, line: 501, baseType: !3643, size: 8, offset: 856)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3631, file: !3632, line: 502, baseType: !3643, size: 8, offset: 864)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3631, file: !3632, line: 503, baseType: !3643, size: 8, offset: 872)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3631, file: !3632, line: 504, baseType: !3643, size: 8, offset: 880)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3631, file: !3632, line: 505, baseType: !3643, size: 8, offset: 888)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3631, file: !3632, line: 506, baseType: !3643, size: 8, offset: 896)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3631, file: !3632, line: 507, baseType: !3643, size: 8, offset: 904)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3631, file: !3632, line: 508, baseType: !3643, size: 8, offset: 912)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3631, file: !3632, line: 509, baseType: !3643, size: 8, offset: 920)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3631, file: !3632, line: 510, baseType: !3643, size: 8, offset: 928)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3631, file: !3632, line: 511, baseType: !3643, size: 8, offset: 936)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3631, file: !3632, line: 512, baseType: !3643, size: 8, offset: 944)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3631, file: !3632, line: 513, baseType: !3643, size: 8, offset: 952)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3631, file: !3632, line: 514, baseType: !3643, size: 8, offset: 960)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3631, file: !3632, line: 515, baseType: !3643, size: 8, offset: 968)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3631, file: !3632, line: 516, baseType: !3643, size: 8, offset: 976)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3631, file: !3632, line: 517, baseType: !3643, size: 8, offset: 984)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3631, file: !3632, line: 518, baseType: !3643, size: 8, offset: 992)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3631, file: !3632, line: 519, baseType: !3643, size: 8, offset: 1000)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3631, file: !3632, line: 520, baseType: !3643, size: 8, offset: 1008)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3631, file: !3632, line: 521, baseType: !3643, size: 8, offset: 1016)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3631, file: !3632, line: 522, baseType: !3643, size: 8, offset: 1024)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3631, file: !3632, line: 523, baseType: !3643, size: 8, offset: 1032)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3631, file: !3632, line: 524, baseType: !3643, size: 8, offset: 1040)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3631, file: !3632, line: 525, baseType: !3643, size: 8, offset: 1048)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3631, file: !3632, line: 526, baseType: !3643, size: 8, offset: 1056)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3631, file: !3632, line: 527, baseType: !3643, size: 8, offset: 1064)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3631, file: !3632, line: 528, baseType: !3643, size: 8, offset: 1072)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3631, file: !3632, line: 529, baseType: !3643, size: 8, offset: 1080)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3631, file: !3632, line: 530, baseType: !3643, size: 8, offset: 1088)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3631, file: !3632, line: 531, baseType: !3643, size: 8, offset: 1096)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3631, file: !3632, line: 532, baseType: !3643, size: 8, offset: 1104)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3631, file: !3632, line: 533, baseType: !3643, size: 8, offset: 1112)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3631, file: !3632, line: 534, baseType: !3643, size: 8, offset: 1120)
!3758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3631, file: !3632, line: 535, baseType: !3643, size: 8, offset: 1128)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3631, file: !3632, line: 536, baseType: !3643, size: 8, offset: 1136)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3631, file: !3632, line: 537, baseType: !3643, size: 8, offset: 1144)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3631, file: !3632, line: 538, baseType: !3643, size: 8, offset: 1152)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3631, file: !3632, line: 539, baseType: !3643, size: 8, offset: 1160)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3631, file: !3632, line: 540, baseType: !3643, size: 8, offset: 1168)
!3764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3631, file: !3632, line: 541, baseType: !3643, size: 8, offset: 1176)
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3631, file: !3632, line: 542, baseType: !3643, size: 8, offset: 1184)
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3631, file: !3632, line: 543, baseType: !3643, size: 8, offset: 1192)
!3767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3631, file: !3632, line: 544, baseType: !3643, size: 8, offset: 1200)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3631, file: !3632, line: 545, baseType: !3643, size: 8, offset: 1208)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3631, file: !3632, line: 546, baseType: !3643, size: 8, offset: 1216)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3631, file: !3632, line: 547, baseType: !3643, size: 8, offset: 1224)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3631, file: !3632, line: 548, baseType: !3643, size: 8, offset: 1232)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3631, file: !3632, line: 549, baseType: !3643, size: 8, offset: 1240)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3631, file: !3632, line: 550, baseType: !3643, size: 8, offset: 1248)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3631, file: !3632, line: 551, baseType: !3643, size: 8, offset: 1256)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3631, file: !3632, line: 552, baseType: !3643, size: 8, offset: 1264)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3631, file: !3632, line: 553, baseType: !3643, size: 8, offset: 1272)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3631, file: !3632, line: 554, baseType: !3643, size: 8, offset: 1280)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3631, file: !3632, line: 555, baseType: !3643, size: 8, offset: 1288)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3631, file: !3632, line: 556, baseType: !3643, size: 8, offset: 1296)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3631, file: !3632, line: 557, baseType: !3643, size: 8, offset: 1304)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3631, file: !3632, line: 558, baseType: !3643, size: 8, offset: 1312)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3631, file: !3632, line: 559, baseType: !3643, size: 8, offset: 1320)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3631, file: !3632, line: 560, baseType: !3643, size: 8, offset: 1328)
!3784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3631, file: !3632, line: 561, baseType: !3643, size: 8, offset: 1336)
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3631, file: !3632, line: 562, baseType: !3643, size: 8, offset: 1344)
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3631, file: !3632, line: 563, baseType: !3643, size: 8, offset: 1352)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3631, file: !3632, line: 564, baseType: !3643, size: 8, offset: 1360)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3631, file: !3632, line: 565, baseType: !3643, size: 8, offset: 1368)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3631, file: !3632, line: 566, baseType: !3643, size: 8, offset: 1376)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3631, file: !3632, line: 567, baseType: !3643, size: 8, offset: 1384)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3631, file: !3632, line: 568, baseType: !3643, size: 8, offset: 1392)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3631, file: !3632, line: 569, baseType: !3643, size: 8, offset: 1400)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3631, file: !3632, line: 570, baseType: !3643, size: 8, offset: 1408)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3631, file: !3632, line: 571, baseType: !3643, size: 8, offset: 1416)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3631, file: !3632, line: 572, baseType: !3643, size: 8, offset: 1424)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3631, file: !3632, line: 573, baseType: !3643, size: 8, offset: 1432)
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3631, file: !3632, line: 574, baseType: !3643, size: 8, offset: 1440)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2855, file: !158, line: 3405, baseType: !3799, size: 384)
!3799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !158, line: 3352, size: 384, elements: !3800)
!3800 = !{!3801, !3802}
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3799, file: !158, line: 3353, baseType: !2891, size: 192)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3799, file: !158, line: 3356, baseType: !3803, size: 192, offset: 192)
!3803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !3632, line: 578, size: 192, elements: !3804)
!3804 = !{!3805, !3806, !3807, !3808, !3809, !3810, !3811, !3812, !3813, !3814, !3815}
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3803, file: !3632, line: 580, baseType: !2756, size: 32)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3803, file: !3632, line: 581, baseType: !2756, size: 32, offset: 32)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3803, file: !3632, line: 582, baseType: !2756, size: 32, offset: 64)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3803, file: !3632, line: 583, baseType: !2756, size: 32, offset: 96)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3803, file: !3632, line: 584, baseType: !2966, size: 8, offset: 128)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3803, file: !3632, line: 585, baseType: !2966, size: 8, offset: 136)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3803, file: !3632, line: 586, baseType: !2966, size: 8, offset: 144)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3803, file: !3632, line: 587, baseType: !2966, size: 8, offset: 152)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3803, file: !3632, line: 588, baseType: !2966, size: 8, offset: 160)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3803, file: !3632, line: 589, baseType: !2966, size: 8, offset: 168)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3803, file: !3632, line: 590, baseType: !2966, size: 8, offset: 176)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2753, file: !385, line: 178, baseType: !3270, size: 64)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2753, file: !385, line: 179, baseType: !3818, size: 64)
!3818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3819, size: 64)
!3819 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !385, line: 150, baseType: !3820)
!3820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !385, line: 142, size: 320, elements: !3821)
!3821 = !{!3822, !3823, !3824, !3825, !3826, !3827}
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3820, file: !385, line: 144, baseType: !2853, size: 64)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3820, file: !385, line: 145, baseType: !2732, size: 64, offset: 64)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3820, file: !385, line: 146, baseType: !2732, size: 64, offset: 128)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3820, file: !385, line: 147, baseType: !3478, size: 32, offset: 192)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3820, file: !385, line: 148, baseType: !7, size: 32, offset: 224)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3820, file: !385, line: 149, baseType: !2966, size: 8, offset: 256)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2753, file: !385, line: 180, baseType: !3829, size: 64)
!3829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3830, size: 64)
!3830 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !385, line: 162, baseType: !3831)
!3831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !385, line: 159, size: 128, elements: !3832)
!3832 = !{!3833, !3834}
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3831, file: !385, line: 160, baseType: !2853, size: 64)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3831, file: !385, line: 161, baseType: !2822, size: 64, offset: 64)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2753, file: !385, line: 181, baseType: !3836, size: 64)
!3836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3837, size: 64)
!3837 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !385, line: 181, flags: DIFlagFwdDecl)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2748, file: !385, line: 317, baseType: !3839, size: 64)
!3839 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2822, size: 64, elements: !2771)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2748, file: !385, line: 318, baseType: !3841, size: 320)
!3841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !385, line: 188, size: 320, elements: !3842)
!3842 = !{!3843, !3845, !3868}
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3841, file: !385, line: 190, baseType: !3844, size: 192)
!3844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2752, size: 192, elements: !2924)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3841, file: !385, line: 193, baseType: !3846, size: 64, offset: 192)
!3846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3847, size: 64)
!3847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !385, line: 206, size: 320, elements: !3848)
!3848 = !{!3849, !3853, !3854, !3855, !3867}
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3847, file: !385, line: 208, baseType: !3850, size: 64)
!3850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3851, size: 64)
!3851 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2733, line: 62, baseType: !3852)
!3852 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2733, line: 61, flags: DIFlagFwdDecl)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3847, file: !385, line: 211, baseType: !7, size: 32, offset: 64)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3847, file: !385, line: 214, baseType: !2822, size: 64, offset: 128)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3847, file: !385, line: 224, baseType: !3856, size: 64, offset: 192)
!3856 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3857, size: 64)
!3857 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !385, line: 202, baseType: !3858)
!3858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !385, line: 202, size: 128, elements: !3859)
!3859 = !{!3860}
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3858, file: !385, line: 202, baseType: !3861, size: 128)
!3861 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !385, line: 200, baseType: !3862)
!3862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !385, line: 200, size: 128, elements: !3863)
!3863 = !{!3864, !3865, !3866}
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3862, file: !385, line: 200, baseType: !7, size: 32)
!3865 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3862, file: !385, line: 200, baseType: !7, size: 32, offset: 32)
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3862, file: !385, line: 200, baseType: !2770, size: 64, offset: 64)
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3847, file: !385, line: 234, baseType: !3856, size: 64, offset: 256)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3841, file: !385, line: 197, baseType: !2822, size: 64, offset: 256)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2748, file: !385, line: 319, baseType: !2913, size: 256)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2748, file: !385, line: 320, baseType: !2932, size: 192)
!3871 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3873, size: 64)
!3873 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2913)
!3874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3875, size: 64)
!3875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "no_conflict_data", file: !3, line: 3842, size: 256, elements: !3876)
!3876 = !{!3877, !3878, !3879, !3880}
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "target", scope: !3875, file: !3, line: 3844, baseType: !2732, size: 64)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3875, file: !3, line: 3844, baseType: !2732, size: 64, offset: 64)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !3875, file: !3, line: 3844, baseType: !2732, size: 64, offset: 128)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "must_stay", scope: !3875, file: !3, line: 3845, baseType: !2966, size: 8, offset: 192)
!3881 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !2733, line: 59, baseType: !3882)
!3882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3883, size: 64)
!3883 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2855)
!3884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3885, size: 64)
!3885 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2726)
!3886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2732, size: 64)
!3887 = !{!3888, !3894, !3908, !3930, !0, !3935, !3941, !3944, !3946, !3948, !3950}
!3888 = !DIGlobalVariableExpression(var: !3889, expr: !DIExpression())
!3889 = distinct !DIGlobalVariable(name: "reinit", scope: !3890, file: !3, line: 6194, type: !2966, isLocal: true, isDefinition: true)
!3890 = distinct !DISubprogram(name: "init_optabs", scope: !3, file: !3, line: 6191, type: !3891, scopeLine: 6192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!3891 = !DISubroutineType(types: !3892)
!3892 = !{null}
!3893 = !{}
!3894 = !DIGlobalVariableExpression(var: !3895, expr: !DIExpression())
!3895 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_optabs_h", scope: !2, file: !3896, line: 105, type: !3897, isLocal: false, isDefinition: true)
!3896 = !DIFile(filename: "./gt-optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3897 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3898, size: 960, elements: !2924)
!3898 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3899)
!3899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3900, line: 69, size: 320, elements: !3901)
!3900 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3901 = !{!3902, !3903, !3904, !3905, !3907}
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3899, file: !3900, line: 70, baseType: !2843, size: 64)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3899, file: !3900, line: 71, baseType: !2721, size: 64, offset: 64)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3899, file: !3900, line: 72, baseType: !2721, size: 64, offset: 128)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3899, file: !3900, line: 73, baseType: !3906, size: 64, offset: 192)
!3906 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3900, line: 65, baseType: !3203)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3899, file: !3900, line: 74, baseType: !3906, size: 64, offset: 256)
!3908 = !DIGlobalVariableExpression(var: !3909, expr: !DIExpression())
!3909 = distinct !DIGlobalVariable(name: "optab_table", scope: !2, file: !3, line: 63, type: !3910, isLocal: false, isDefinition: true)
!3910 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3911, size: 488448, elements: !3928)
!3911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_d", file: !2025, line: 46, size: 3072, elements: !3912)
!3912 = !{!3913, !3914, !3915, !3916, !3921}
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3911, file: !2025, line: 48, baseType: !384, size: 32)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !3911, file: !2025, line: 49, baseType: !2759, size: 64, offset: 64)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_suffix", scope: !3911, file: !2025, line: 50, baseType: !2761, size: 8, offset: 128)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !3911, file: !2025, line: 51, baseType: !3917, size: 64, offset: 192)
!3917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3918, size: 64)
!3918 = !DISubroutineType(types: !3919)
!3919 = !{null, !3920, !2759, !2761, !5}
!3920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3911, size: 64)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !3911, file: !2025, line: 53, baseType: !3922, size: 2784, offset: 256)
!3922 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3923, size: 2784, elements: !3926)
!3923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_handlers", file: !2025, line: 41, size: 32, elements: !3924)
!3924 = !{!3925}
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "insn_code", scope: !3923, file: !2025, line: 43, baseType: !527, size: 32)
!3926 = !{!3927}
!3927 = !DISubrange(count: 87)
!3928 = !{!3929}
!3929 = !DISubrange(count: 159)
!3930 = !DIGlobalVariableExpression(var: !3931, expr: !DIExpression())
!3931 = distinct !DIGlobalVariable(name: "libfunc_table", scope: !2, file: !3, line: 66, type: !3932, isLocal: false, isDefinition: true)
!3932 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2732, size: 896, elements: !3933)
!3933 = !{!3934}
!3934 = !DISubrange(count: 14)
!3935 = !DIGlobalVariableExpression(var: !3936, expr: !DIExpression())
!3936 = distinct !DIGlobalVariable(name: "code_to_optab", scope: !2, file: !3, line: 80, type: !3937, isLocal: false, isDefinition: true)
!3937 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3938, size: 8960, elements: !3939)
!3938 = !DIDerivedType(tag: DW_TAG_typedef, name: "optab", file: !2025, line: 55, baseType: !3920)
!3939 = !{!3940}
!3940 = !DISubrange(count: 140)
!3941 = !DIGlobalVariableExpression(var: !3942, expr: !DIExpression())
!3942 = distinct !DIGlobalVariable(name: "movcc_gen_code", scope: !2, file: !3, line: 88, type: !3943, isLocal: false, isDefinition: true)
!3943 = !DICompositeType(tag: DW_TAG_array_type, baseType: !527, size: 2784, elements: !3926)
!3944 = !DIGlobalVariableExpression(var: !3945, expr: !DIExpression())
!3945 = distinct !DIGlobalVariable(name: "vcond_gen_code", scope: !2, file: !3, line: 94, type: !3943, isLocal: false, isDefinition: true)
!3946 = !DIGlobalVariableExpression(var: !3947, expr: !DIExpression())
!3947 = distinct !DIGlobalVariable(name: "vcondu_gen_code", scope: !2, file: !3, line: 95, type: !3943, isLocal: false, isDefinition: true)
!3948 = !DIGlobalVariableExpression(var: !3949, expr: !DIExpression())
!3949 = distinct !DIGlobalVariable(name: "libfunc_hash", scope: !2, file: !3, line: 121, type: !3184, isLocal: true, isDefinition: true)
!3950 = !DIGlobalVariableExpression(var: !3951, expr: !DIExpression())
!3951 = distinct !DIGlobalVariable(name: "libfunc_decls", scope: !2, file: !3, line: 6053, type: !3184, isLocal: true, isDefinition: true)
!3952 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3953, size: 4121344, elements: !3965)
!3953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "convert_optab_d", file: !2025, line: 60, size: 242432, elements: !3954)
!3954 = !{!3955, !3956, !3957, !3962}
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3953, file: !2025, line: 62, baseType: !384, size: 32)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !3953, file: !2025, line: 63, baseType: !2759, size: 64, offset: 64)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !3953, file: !2025, line: 64, baseType: !3958, size: 64, offset: 128)
!3958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3959, size: 64)
!3959 = !DISubroutineType(types: !3960)
!3960 = !{null, !3961, !2759, !5, !5}
!3961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3953, size: 64)
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !3953, file: !2025, line: 67, baseType: !3963, size: 242208, offset: 192)
!3963 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3923, size: 242208, elements: !3964)
!3964 = !{!3927, !3927}
!3965 = !{!3966}
!3966 = !DISubrange(count: 17)
!3967 = !{i32 7, !"Dwarf Version", i32 4}
!3968 = !{i32 2, !"Debug Info Version", i32 3}
!3969 = !{i32 1, !"wchar_size", i32 4}
!3970 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3971 = distinct !DISubprogram(name: "convert_optab_libfunc", scope: !3, file: !3, line: 151, type: !3972, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!3972 = !DISubroutineType(types: !3973)
!3973 = !{!2732, !3974, !5, !5}
!3974 = !DIDerivedType(tag: DW_TAG_typedef, name: "convert_optab", file: !2025, line: 69, baseType: !3961)
!3975 = !DILocalVariable(name: "optab", arg: 1, scope: !3971, file: !3, line: 151, type: !3974)
!3976 = !DILocation(line: 151, column: 38, scope: !3971)
!3977 = !DILocalVariable(name: "mode1", arg: 2, scope: !3971, file: !3, line: 151, type: !5)
!3978 = !DILocation(line: 151, column: 63, scope: !3971)
!3979 = !DILocalVariable(name: "mode2", arg: 3, scope: !3971, file: !3, line: 152, type: !5)
!3980 = !DILocation(line: 152, column: 28, scope: !3971)
!3981 = !DILocalVariable(name: "e", scope: !3971, file: !3, line: 154, type: !2726)
!3982 = !DILocation(line: 154, column: 24, scope: !3971)
!3983 = !DILocalVariable(name: "slot", scope: !3971, file: !3, line: 155, type: !2724)
!3984 = !DILocation(line: 155, column: 26, scope: !3971)
!3985 = !DILocation(line: 157, column: 23, scope: !3971)
!3986 = !DILocation(line: 157, column: 29, scope: !3971)
!3987 = !DILocation(line: 157, column: 5, scope: !3971)
!3988 = !DILocation(line: 157, column: 11, scope: !3971)
!3989 = !DILocation(line: 158, column: 13, scope: !3971)
!3990 = !DILocation(line: 158, column: 5, scope: !3971)
!3991 = !DILocation(line: 158, column: 11, scope: !3971)
!3992 = !DILocation(line: 159, column: 13, scope: !3971)
!3993 = !DILocation(line: 159, column: 5, scope: !3971)
!3994 = !DILocation(line: 159, column: 11, scope: !3971)
!3995 = !DILocation(line: 160, column: 52, scope: !3971)
!3996 = !DILocation(line: 160, column: 66, scope: !3971)
!3997 = !DILocation(line: 160, column: 36, scope: !3971)
!3998 = !DILocation(line: 160, column: 10, scope: !3971)
!3999 = !DILocation(line: 160, column: 8, scope: !3971)
!4000 = !DILocation(line: 161, column: 8, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3971, file: !3, line: 161, column: 7)
!4002 = !DILocation(line: 161, column: 7, scope: !3971)
!4003 = !DILocation(line: 163, column: 11, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 163, column: 11)
!4005 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 162, column: 5)
!4006 = !DILocation(line: 163, column: 18, scope: !4004)
!4007 = !DILocation(line: 163, column: 11, scope: !4005)
!4008 = !DILocation(line: 165, column: 4, scope: !4009)
!4009 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 164, column: 2)
!4010 = !DILocation(line: 165, column: 11, scope: !4009)
!4011 = !DILocation(line: 165, column: 24, scope: !4009)
!4012 = !DILocation(line: 165, column: 31, scope: !4009)
!4013 = !DILocation(line: 165, column: 38, scope: !4009)
!4014 = !DILocation(line: 165, column: 56, scope: !4009)
!4015 = !DILocation(line: 165, column: 63, scope: !4009)
!4016 = !DILocation(line: 166, column: 60, scope: !4009)
!4017 = !DILocation(line: 166, column: 74, scope: !4009)
!4018 = !DILocation(line: 166, column: 44, scope: !4009)
!4019 = !DILocation(line: 166, column: 18, scope: !4009)
!4020 = !DILocation(line: 166, column: 16, scope: !4009)
!4021 = !DILocation(line: 167, column: 8, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4009, file: !3, line: 167, column: 8)
!4023 = !DILocation(line: 167, column: 8, scope: !4009)
!4024 = !DILocation(line: 168, column: 15, scope: !4022)
!4025 = !DILocation(line: 168, column: 14, scope: !4022)
!4026 = !DILocation(line: 168, column: 22, scope: !4022)
!4027 = !DILocation(line: 168, column: 6, scope: !4022)
!4028 = !DILocation(line: 170, column: 6, scope: !4022)
!4029 = !DILocation(line: 172, column: 7, scope: !4005)
!4030 = !DILocation(line: 174, column: 12, scope: !3971)
!4031 = !DILocation(line: 174, column: 11, scope: !3971)
!4032 = !DILocation(line: 174, column: 19, scope: !3971)
!4033 = !DILocation(line: 174, column: 3, scope: !3971)
!4034 = !DILocation(line: 175, column: 1, scope: !3971)
!4035 = distinct !DISubprogram(name: "optab_libfunc", scope: !3, file: !3, line: 181, type: !4036, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4036 = !DISubroutineType(types: !4037)
!4037 = !{!2732, !3938, !5}
!4038 = !DILocalVariable(name: "optab", arg: 1, scope: !4035, file: !3, line: 181, type: !3938)
!4039 = !DILocation(line: 181, column: 22, scope: !4035)
!4040 = !DILocalVariable(name: "mode", arg: 2, scope: !4035, file: !3, line: 181, type: !5)
!4041 = !DILocation(line: 181, column: 47, scope: !4035)
!4042 = !DILocalVariable(name: "e", scope: !4035, file: !3, line: 183, type: !2726)
!4043 = !DILocation(line: 183, column: 24, scope: !4035)
!4044 = !DILocalVariable(name: "slot", scope: !4035, file: !3, line: 184, type: !2724)
!4045 = !DILocation(line: 184, column: 26, scope: !4035)
!4046 = !DILocation(line: 186, column: 23, scope: !4035)
!4047 = !DILocation(line: 186, column: 29, scope: !4035)
!4048 = !DILocation(line: 186, column: 5, scope: !4035)
!4049 = !DILocation(line: 186, column: 11, scope: !4035)
!4050 = !DILocation(line: 187, column: 13, scope: !4035)
!4051 = !DILocation(line: 187, column: 5, scope: !4035)
!4052 = !DILocation(line: 187, column: 11, scope: !4035)
!4053 = !DILocation(line: 188, column: 5, scope: !4035)
!4054 = !DILocation(line: 188, column: 11, scope: !4035)
!4055 = !DILocation(line: 189, column: 52, scope: !4035)
!4056 = !DILocation(line: 189, column: 66, scope: !4035)
!4057 = !DILocation(line: 189, column: 36, scope: !4035)
!4058 = !DILocation(line: 189, column: 10, scope: !4035)
!4059 = !DILocation(line: 189, column: 8, scope: !4035)
!4060 = !DILocation(line: 190, column: 8, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 190, column: 7)
!4062 = !DILocation(line: 190, column: 7, scope: !4035)
!4063 = !DILocation(line: 192, column: 11, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4065, file: !3, line: 192, column: 11)
!4065 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 191, column: 5)
!4066 = !DILocation(line: 192, column: 18, scope: !4064)
!4067 = !DILocation(line: 192, column: 11, scope: !4065)
!4068 = !DILocation(line: 194, column: 4, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 193, column: 2)
!4070 = !DILocation(line: 194, column: 11, scope: !4069)
!4071 = !DILocation(line: 194, column: 24, scope: !4069)
!4072 = !DILocation(line: 194, column: 31, scope: !4069)
!4073 = !DILocation(line: 194, column: 38, scope: !4069)
!4074 = !DILocation(line: 195, column: 10, scope: !4069)
!4075 = !DILocation(line: 195, column: 17, scope: !4069)
!4076 = !DILocation(line: 195, column: 33, scope: !4069)
!4077 = !DILocation(line: 196, column: 60, scope: !4069)
!4078 = !DILocation(line: 197, column: 11, scope: !4069)
!4079 = !DILocation(line: 196, column: 44, scope: !4069)
!4080 = !DILocation(line: 196, column: 18, scope: !4069)
!4081 = !DILocation(line: 196, column: 16, scope: !4069)
!4082 = !DILocation(line: 198, column: 8, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 198, column: 8)
!4084 = !DILocation(line: 198, column: 8, scope: !4069)
!4085 = !DILocation(line: 199, column: 15, scope: !4083)
!4086 = !DILocation(line: 199, column: 14, scope: !4083)
!4087 = !DILocation(line: 199, column: 22, scope: !4083)
!4088 = !DILocation(line: 199, column: 6, scope: !4083)
!4089 = !DILocation(line: 201, column: 6, scope: !4083)
!4090 = !DILocation(line: 203, column: 7, scope: !4065)
!4091 = !DILocation(line: 205, column: 12, scope: !4035)
!4092 = !DILocation(line: 205, column: 11, scope: !4035)
!4093 = !DILocation(line: 205, column: 19, scope: !4035)
!4094 = !DILocation(line: 205, column: 3, scope: !4035)
!4095 = !DILocation(line: 206, column: 1, scope: !4035)
!4096 = distinct !DISubprogram(name: "optab_for_tree_code", scope: !3, file: !3, line: 320, type: !4097, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4097 = !DISubroutineType(types: !4098)
!4098 = !{!3938, !190, !3881, !2024}
!4099 = !DILocalVariable(name: "code", arg: 1, scope: !4096, file: !3, line: 320, type: !190)
!4100 = !DILocation(line: 320, column: 37, scope: !4096)
!4101 = !DILocalVariable(name: "type", arg: 2, scope: !4096, file: !3, line: 320, type: !3881)
!4102 = !DILocation(line: 320, column: 54, scope: !4096)
!4103 = !DILocalVariable(name: "subtype", arg: 3, scope: !4096, file: !3, line: 321, type: !2024)
!4104 = !DILocation(line: 321, column: 27, scope: !4096)
!4105 = !DILocalVariable(name: "trapv", scope: !4096, file: !3, line: 323, type: !2966)
!4106 = !DILocation(line: 323, column: 8, scope: !4096)
!4107 = !DILocation(line: 324, column: 11, scope: !4096)
!4108 = !DILocation(line: 324, column: 3, scope: !4096)
!4109 = !DILocation(line: 327, column: 7, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 325, column: 5)
!4111 = !DILocation(line: 330, column: 7, scope: !4110)
!4112 = !DILocation(line: 333, column: 7, scope: !4110)
!4113 = !DILocation(line: 336, column: 7, scope: !4110)
!4114 = !DILocation(line: 342, column: 14, scope: !4110)
!4115 = !DILocation(line: 342, column: 7, scope: !4110)
!4116 = !DILocation(line: 350, column: 11, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 350, column: 11)
!4118 = !DILocation(line: 350, column: 11, scope: !4110)
!4119 = !DILocation(line: 351, column: 9, scope: !4117)
!4120 = !DILocation(line: 351, column: 2, scope: !4117)
!4121 = !DILocation(line: 352, column: 14, scope: !4110)
!4122 = !DILocation(line: 352, column: 7, scope: !4110)
!4123 = !DILocation(line: 355, column: 11, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 355, column: 11)
!4125 = !DILocation(line: 355, column: 11, scope: !4110)
!4126 = !DILocation(line: 357, column: 8, scope: !4127)
!4127 = distinct !DILexicalBlock(scope: !4128, file: !3, line: 357, column: 8)
!4128 = distinct !DILexicalBlock(scope: !4124, file: !3, line: 356, column: 2)
!4129 = !DILocation(line: 357, column: 16, scope: !4127)
!4130 = !DILocation(line: 357, column: 8, scope: !4128)
!4131 = !DILocation(line: 358, column: 13, scope: !4127)
!4132 = !DILocation(line: 358, column: 6, scope: !4127)
!4133 = !DILocation(line: 360, column: 4, scope: !4128)
!4134 = !DILocation(line: 361, column: 2, scope: !4128)
!4135 = !DILocation(line: 362, column: 11, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 362, column: 11)
!4137 = !DILocation(line: 362, column: 11, scope: !4110)
!4138 = !DILocation(line: 363, column: 9, scope: !4136)
!4139 = !DILocation(line: 363, column: 2, scope: !4136)
!4140 = !DILocation(line: 364, column: 7, scope: !4110)
!4141 = !DILocation(line: 367, column: 11, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 367, column: 11)
!4143 = !DILocation(line: 367, column: 11, scope: !4110)
!4144 = !DILocation(line: 369, column: 8, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4146, file: !3, line: 369, column: 8)
!4146 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 368, column: 2)
!4147 = !DILocation(line: 369, column: 16, scope: !4145)
!4148 = !DILocation(line: 369, column: 8, scope: !4146)
!4149 = !DILocation(line: 370, column: 13, scope: !4145)
!4150 = !DILocation(line: 370, column: 6, scope: !4145)
!4151 = !DILocation(line: 372, column: 4, scope: !4146)
!4152 = !DILocation(line: 373, column: 2, scope: !4146)
!4153 = !DILocation(line: 374, column: 14, scope: !4110)
!4154 = !DILocation(line: 374, column: 7, scope: !4110)
!4155 = !DILocation(line: 377, column: 11, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 377, column: 11)
!4157 = !DILocation(line: 377, column: 11, scope: !4110)
!4158 = !DILocation(line: 379, column: 8, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 379, column: 8)
!4160 = distinct !DILexicalBlock(scope: !4156, file: !3, line: 378, column: 2)
!4161 = !DILocation(line: 379, column: 16, scope: !4159)
!4162 = !DILocation(line: 379, column: 8, scope: !4160)
!4163 = !DILocation(line: 380, column: 6, scope: !4159)
!4164 = !DILocation(line: 382, column: 4, scope: !4160)
!4165 = !DILocation(line: 383, column: 2, scope: !4160)
!4166 = !DILocation(line: 384, column: 7, scope: !4110)
!4167 = !DILocation(line: 387, column: 11, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4110, file: !3, line: 387, column: 11)
!4169 = !DILocation(line: 387, column: 11, scope: !4110)
!4170 = !DILocation(line: 389, column: 8, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 389, column: 8)
!4172 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 388, column: 2)
!4173 = !DILocation(line: 389, column: 16, scope: !4171)
!4174 = !DILocation(line: 389, column: 8, scope: !4172)
!4175 = !DILocation(line: 390, column: 6, scope: !4171)
!4176 = !DILocation(line: 392, column: 4, scope: !4172)
!4177 = !DILocation(line: 393, column: 2, scope: !4172)
!4178 = !DILocation(line: 394, column: 7, scope: !4110)
!4179 = !DILocation(line: 397, column: 14, scope: !4110)
!4180 = !DILocation(line: 397, column: 7, scope: !4110)
!4181 = !DILocation(line: 400, column: 14, scope: !4110)
!4182 = !DILocation(line: 400, column: 7, scope: !4110)
!4183 = !DILocation(line: 403, column: 7, scope: !4110)
!4184 = !DILocation(line: 406, column: 14, scope: !4110)
!4185 = !DILocation(line: 406, column: 7, scope: !4110)
!4186 = !DILocation(line: 409, column: 14, scope: !4110)
!4187 = !DILocation(line: 409, column: 7, scope: !4110)
!4188 = !DILocation(line: 412, column: 14, scope: !4110)
!4189 = !DILocation(line: 412, column: 7, scope: !4110)
!4190 = !DILocation(line: 415, column: 14, scope: !4110)
!4191 = !DILocation(line: 415, column: 7, scope: !4110)
!4192 = !DILocation(line: 418, column: 14, scope: !4110)
!4193 = !DILocation(line: 418, column: 7, scope: !4110)
!4194 = !DILocation(line: 421, column: 7, scope: !4110)
!4195 = !DILocation(line: 424, column: 7, scope: !4110)
!4196 = !DILocation(line: 427, column: 14, scope: !4110)
!4197 = !DILocation(line: 427, column: 7, scope: !4110)
!4198 = !DILocation(line: 431, column: 14, scope: !4110)
!4199 = !DILocation(line: 431, column: 7, scope: !4110)
!4200 = !DILocation(line: 435, column: 14, scope: !4110)
!4201 = !DILocation(line: 435, column: 7, scope: !4110)
!4202 = !DILocation(line: 439, column: 14, scope: !4110)
!4203 = !DILocation(line: 439, column: 7, scope: !4110)
!4204 = !DILocation(line: 444, column: 14, scope: !4110)
!4205 = !DILocation(line: 444, column: 7, scope: !4110)
!4206 = !DILocation(line: 449, column: 14, scope: !4110)
!4207 = !DILocation(line: 449, column: 7, scope: !4110)
!4208 = !DILocation(line: 453, column: 7, scope: !4110)
!4209 = !DILocation(line: 456, column: 14, scope: !4110)
!4210 = !DILocation(line: 456, column: 7, scope: !4110)
!4211 = !DILocation(line: 460, column: 14, scope: !4110)
!4212 = !DILocation(line: 460, column: 7, scope: !4110)
!4213 = !DILocation(line: 464, column: 7, scope: !4110)
!4214 = !DILocation(line: 467, column: 11, scope: !4096)
!4215 = !DILocation(line: 467, column: 34, scope: !4096)
!4216 = !DILocation(line: 467, column: 37, scope: !4096)
!4217 = !DILocation(line: 0, scope: !4096)
!4218 = !DILocation(line: 467, column: 9, scope: !4096)
!4219 = !DILocation(line: 468, column: 11, scope: !4096)
!4220 = !DILocation(line: 468, column: 3, scope: !4096)
!4221 = !DILocation(line: 472, column: 11, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 472, column: 11)
!4223 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 469, column: 5)
!4224 = !DILocation(line: 472, column: 11, scope: !4223)
!4225 = !DILocation(line: 473, column: 9, scope: !4222)
!4226 = !DILocation(line: 473, column: 2, scope: !4222)
!4227 = !DILocation(line: 474, column: 14, scope: !4223)
!4228 = !DILocation(line: 474, column: 7, scope: !4223)
!4229 = !DILocation(line: 477, column: 11, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 477, column: 11)
!4231 = !DILocation(line: 477, column: 11, scope: !4223)
!4232 = !DILocation(line: 478, column: 9, scope: !4230)
!4233 = !DILocation(line: 478, column: 2, scope: !4230)
!4234 = !DILocation(line: 479, column: 14, scope: !4223)
!4235 = !DILocation(line: 479, column: 7, scope: !4223)
!4236 = !DILocation(line: 482, column: 11, scope: !4237)
!4237 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 482, column: 11)
!4238 = !DILocation(line: 482, column: 11, scope: !4223)
!4239 = !DILocation(line: 483, column: 9, scope: !4237)
!4240 = !DILocation(line: 483, column: 2, scope: !4237)
!4241 = !DILocation(line: 484, column: 14, scope: !4223)
!4242 = !DILocation(line: 484, column: 7, scope: !4223)
!4243 = !DILocation(line: 487, column: 11, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 487, column: 11)
!4245 = !DILocation(line: 487, column: 11, scope: !4223)
!4246 = !DILocation(line: 488, column: 9, scope: !4244)
!4247 = !DILocation(line: 488, column: 2, scope: !4244)
!4248 = !DILocation(line: 489, column: 14, scope: !4223)
!4249 = !DILocation(line: 489, column: 7, scope: !4223)
!4250 = !DILocation(line: 492, column: 14, scope: !4223)
!4251 = !DILocation(line: 492, column: 7, scope: !4223)
!4252 = !DILocation(line: 495, column: 7, scope: !4223)
!4253 = !DILocation(line: 498, column: 7, scope: !4223)
!4254 = !DILocation(line: 501, column: 7, scope: !4223)
!4255 = !DILocation(line: 504, column: 7, scope: !4223)
!4256 = !DILocation(line: 507, column: 7, scope: !4223)
!4257 = !DILocation(line: 509, column: 1, scope: !4096)
!4258 = distinct !DISubprogram(name: "expand_widen_pattern_expr", scope: !3, file: !3, line: 533, type: !4259, scopeLine: 535, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4259 = !DISubroutineType(types: !4260)
!4260 = !{!2732, !4261, !2732, !2732, !2732, !2732, !2756}
!4261 = !DIDerivedType(tag: DW_TAG_typedef, name: "sepops", file: !2215, line: 279, baseType: !4262)
!4262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4263, size: 64)
!4263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "separate_ops", file: !2215, line: 273, size: 384, elements: !4264)
!4264 = !{!4265, !4266, !4267, !4268, !4269, !4270}
!4265 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !4263, file: !2215, line: 275, baseType: !190, size: 32)
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4263, file: !2215, line: 276, baseType: !2853, size: 64, offset: 64)
!4267 = !DIDerivedType(tag: DW_TAG_member, name: "op0", scope: !4263, file: !2215, line: 277, baseType: !2853, size: 64, offset: 128)
!4268 = !DIDerivedType(tag: DW_TAG_member, name: "op1", scope: !4263, file: !2215, line: 277, baseType: !2853, size: 64, offset: 192)
!4269 = !DIDerivedType(tag: DW_TAG_member, name: "op2", scope: !4263, file: !2215, line: 277, baseType: !2853, size: 64, offset: 256)
!4270 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !4263, file: !2215, line: 278, baseType: !2974, size: 32, offset: 320)
!4271 = !DILocalVariable(name: "ops", arg: 1, scope: !4258, file: !3, line: 533, type: !4261)
!4272 = !DILocation(line: 533, column: 35, scope: !4258)
!4273 = !DILocalVariable(name: "op0", arg: 2, scope: !4258, file: !3, line: 533, type: !2732)
!4274 = !DILocation(line: 533, column: 44, scope: !4258)
!4275 = !DILocalVariable(name: "op1", arg: 3, scope: !4258, file: !3, line: 533, type: !2732)
!4276 = !DILocation(line: 533, column: 53, scope: !4258)
!4277 = !DILocalVariable(name: "wide_op", arg: 4, scope: !4258, file: !3, line: 533, type: !2732)
!4278 = !DILocation(line: 533, column: 62, scope: !4258)
!4279 = !DILocalVariable(name: "target", arg: 5, scope: !4258, file: !3, line: 534, type: !2732)
!4280 = !DILocation(line: 534, column: 11, scope: !4258)
!4281 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !4258, file: !3, line: 534, type: !2756)
!4282 = !DILocation(line: 534, column: 23, scope: !4258)
!4283 = !DILocalVariable(name: "oprnd0", scope: !4258, file: !3, line: 536, type: !2853)
!4284 = !DILocation(line: 536, column: 8, scope: !4258)
!4285 = !DILocalVariable(name: "oprnd1", scope: !4258, file: !3, line: 536, type: !2853)
!4286 = !DILocation(line: 536, column: 16, scope: !4258)
!4287 = !DILocalVariable(name: "oprnd2", scope: !4258, file: !3, line: 536, type: !2853)
!4288 = !DILocation(line: 536, column: 24, scope: !4258)
!4289 = !DILocalVariable(name: "wmode", scope: !4258, file: !3, line: 537, type: !5)
!4290 = !DILocation(line: 537, column: 21, scope: !4258)
!4291 = !DILocalVariable(name: "tmode0", scope: !4258, file: !3, line: 537, type: !5)
!4292 = !DILocation(line: 537, column: 39, scope: !4258)
!4293 = !DILocalVariable(name: "tmode1", scope: !4258, file: !3, line: 537, type: !5)
!4294 = !DILocation(line: 537, column: 47, scope: !4258)
!4295 = !DILocalVariable(name: "widen_pattern_optab", scope: !4258, file: !3, line: 538, type: !3938)
!4296 = !DILocation(line: 538, column: 9, scope: !4258)
!4297 = !DILocalVariable(name: "icode", scope: !4258, file: !3, line: 539, type: !2756)
!4298 = !DILocation(line: 539, column: 7, scope: !4258)
!4299 = !DILocalVariable(name: "xmode0", scope: !4258, file: !3, line: 540, type: !5)
!4300 = !DILocation(line: 540, column: 21, scope: !4258)
!4301 = !DILocalVariable(name: "xmode1", scope: !4258, file: !3, line: 540, type: !5)
!4302 = !DILocation(line: 540, column: 29, scope: !4258)
!4303 = !DILocalVariable(name: "wxmode", scope: !4258, file: !3, line: 540, type: !5)
!4304 = !DILocation(line: 540, column: 48, scope: !4258)
!4305 = !DILocalVariable(name: "temp", scope: !4258, file: !3, line: 541, type: !2732)
!4306 = !DILocation(line: 541, column: 7, scope: !4258)
!4307 = !DILocalVariable(name: "pat", scope: !4258, file: !3, line: 542, type: !2732)
!4308 = !DILocation(line: 542, column: 7, scope: !4258)
!4309 = !DILocalVariable(name: "xop0", scope: !4258, file: !3, line: 543, type: !2732)
!4310 = !DILocation(line: 543, column: 7, scope: !4258)
!4311 = !DILocalVariable(name: "xop1", scope: !4258, file: !3, line: 543, type: !2732)
!4312 = !DILocation(line: 543, column: 13, scope: !4258)
!4313 = !DILocalVariable(name: "wxop", scope: !4258, file: !3, line: 543, type: !2732)
!4314 = !DILocation(line: 543, column: 19, scope: !4258)
!4315 = !DILocalVariable(name: "nops", scope: !4258, file: !3, line: 544, type: !2756)
!4316 = !DILocation(line: 544, column: 7, scope: !4258)
!4317 = !DILocation(line: 544, column: 14, scope: !4258)
!4318 = !DILocation(line: 546, column: 12, scope: !4258)
!4319 = !DILocation(line: 546, column: 17, scope: !4258)
!4320 = !DILocation(line: 546, column: 10, scope: !4258)
!4321 = !DILocation(line: 547, column: 12, scope: !4258)
!4322 = !DILocation(line: 547, column: 10, scope: !4258)
!4323 = !DILocation(line: 549, column: 26, scope: !4258)
!4324 = !DILocation(line: 549, column: 31, scope: !4258)
!4325 = !DILocation(line: 549, column: 37, scope: !4258)
!4326 = !DILocation(line: 549, column: 5, scope: !4258)
!4327 = !DILocation(line: 548, column: 23, scope: !4258)
!4328 = !DILocation(line: 550, column: 17, scope: !4258)
!4329 = !DILocation(line: 550, column: 62, scope: !4258)
!4330 = !DILocation(line: 550, column: 9, scope: !4258)
!4331 = !DILocation(line: 551, column: 3, scope: !4258)
!4332 = !DILocation(line: 552, column: 22, scope: !4258)
!4333 = !DILocation(line: 552, column: 12, scope: !4258)
!4334 = !DILocation(line: 552, column: 29, scope: !4258)
!4335 = !DILocation(line: 552, column: 40, scope: !4258)
!4336 = !DILocation(line: 552, column: 10, scope: !4258)
!4337 = !DILocation(line: 554, column: 7, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 554, column: 7)
!4339 = !DILocation(line: 554, column: 12, scope: !4338)
!4340 = !DILocation(line: 554, column: 7, scope: !4258)
!4341 = !DILocation(line: 556, column: 16, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 555, column: 5)
!4343 = !DILocation(line: 556, column: 21, scope: !4342)
!4344 = !DILocation(line: 556, column: 14, scope: !4342)
!4345 = !DILocation(line: 557, column: 16, scope: !4342)
!4346 = !DILocation(line: 557, column: 14, scope: !4342)
!4347 = !DILocation(line: 558, column: 26, scope: !4342)
!4348 = !DILocation(line: 558, column: 16, scope: !4342)
!4349 = !DILocation(line: 558, column: 33, scope: !4342)
!4350 = !DILocation(line: 558, column: 44, scope: !4342)
!4351 = !DILocation(line: 558, column: 14, scope: !4342)
!4352 = !DILocation(line: 559, column: 5, scope: !4342)
!4353 = !DILocation(line: 562, column: 7, scope: !4354)
!4354 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 562, column: 7)
!4355 = !DILocation(line: 562, column: 12, scope: !4354)
!4356 = !DILocation(line: 562, column: 7, scope: !4258)
!4357 = !DILocation(line: 564, column: 15, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4354, file: !3, line: 563, column: 5)
!4359 = !DILocation(line: 564, column: 13, scope: !4358)
!4360 = !DILocation(line: 565, column: 16, scope: !4358)
!4361 = !DILocation(line: 565, column: 14, scope: !4358)
!4362 = !DILocation(line: 566, column: 5, scope: !4358)
!4363 = !DILocation(line: 567, column: 12, scope: !4364)
!4364 = distinct !DILexicalBlock(scope: !4354, file: !3, line: 567, column: 12)
!4365 = !DILocation(line: 567, column: 17, scope: !4364)
!4366 = !DILocation(line: 567, column: 12, scope: !4354)
!4367 = !DILocation(line: 569, column: 7, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 568, column: 5)
!4369 = !DILocation(line: 570, column: 7, scope: !4368)
!4370 = !DILocation(line: 571, column: 16, scope: !4368)
!4371 = !DILocation(line: 571, column: 21, scope: !4368)
!4372 = !DILocation(line: 571, column: 14, scope: !4368)
!4373 = !DILocation(line: 572, column: 15, scope: !4368)
!4374 = !DILocation(line: 572, column: 13, scope: !4368)
!4375 = !DILocation(line: 573, column: 26, scope: !4368)
!4376 = !DILocation(line: 573, column: 16, scope: !4368)
!4377 = !DILocation(line: 573, column: 33, scope: !4368)
!4378 = !DILocation(line: 573, column: 44, scope: !4368)
!4379 = !DILocation(line: 573, column: 14, scope: !4368)
!4380 = !DILocation(line: 574, column: 5, scope: !4368)
!4381 = !DILocation(line: 576, column: 8, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 576, column: 7)
!4383 = !DILocation(line: 576, column: 7, scope: !4258)
!4384 = !DILocation(line: 577, column: 32, scope: !4382)
!4385 = !DILocation(line: 577, column: 22, scope: !4382)
!4386 = !DILocation(line: 577, column: 39, scope: !4382)
!4387 = !DILocation(line: 577, column: 50, scope: !4382)
!4388 = !DILocation(line: 577, column: 20, scope: !4382)
!4389 = !DILocation(line: 577, column: 11, scope: !4382)
!4390 = !DILocation(line: 577, column: 5, scope: !4382)
!4391 = !DILocation(line: 579, column: 8, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 579, column: 7)
!4393 = !DILocation(line: 580, column: 7, scope: !4392)
!4394 = !DILocation(line: 580, column: 24, scope: !4392)
!4395 = !DILocation(line: 580, column: 14, scope: !4392)
!4396 = !DILocation(line: 580, column: 31, scope: !4392)
!4397 = !DILocation(line: 580, column: 42, scope: !4392)
!4398 = !DILocation(line: 580, column: 54, scope: !4392)
!4399 = !DILocation(line: 580, column: 62, scope: !4392)
!4400 = !DILocation(line: 580, column: 12, scope: !4392)
!4401 = !DILocation(line: 579, column: 7, scope: !4258)
!4402 = !DILocation(line: 581, column: 25, scope: !4392)
!4403 = !DILocation(line: 581, column: 12, scope: !4392)
!4404 = !DILocation(line: 581, column: 10, scope: !4392)
!4405 = !DILocation(line: 581, column: 5, scope: !4392)
!4406 = !DILocation(line: 583, column: 12, scope: !4392)
!4407 = !DILocation(line: 583, column: 10, scope: !4392)
!4408 = !DILocation(line: 585, column: 10, scope: !4258)
!4409 = !DILocation(line: 585, column: 8, scope: !4258)
!4410 = !DILocation(line: 586, column: 10, scope: !4258)
!4411 = !DILocation(line: 586, column: 8, scope: !4258)
!4412 = !DILocation(line: 587, column: 10, scope: !4258)
!4413 = !DILocation(line: 587, column: 8, scope: !4258)
!4414 = !DILocation(line: 595, column: 7, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 595, column: 7)
!4416 = !DILocation(line: 595, column: 25, scope: !4415)
!4417 = !DILocation(line: 595, column: 22, scope: !4415)
!4418 = !DILocation(line: 595, column: 32, scope: !4415)
!4419 = !DILocation(line: 595, column: 35, scope: !4415)
!4420 = !DILocation(line: 595, column: 42, scope: !4415)
!4421 = !DILocation(line: 595, column: 7, scope: !4258)
!4422 = !DILocation(line: 596, column: 27, scope: !4415)
!4423 = !DILocation(line: 597, column: 27, scope: !4415)
!4424 = !DILocation(line: 597, column: 42, scope: !4415)
!4425 = !DILocation(line: 598, column: 29, scope: !4415)
!4426 = !DILocation(line: 599, column: 29, scope: !4415)
!4427 = !DILocation(line: 600, column: 27, scope: !4415)
!4428 = !DILocation(line: 600, column: 33, scope: !4415)
!4429 = !DILocation(line: 596, column: 12, scope: !4415)
!4430 = !DILocation(line: 596, column: 10, scope: !4415)
!4431 = !DILocation(line: 596, column: 5, scope: !4415)
!4432 = !DILocation(line: 602, column: 7, scope: !4433)
!4433 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 602, column: 7)
!4434 = !DILocation(line: 602, column: 7, scope: !4258)
!4435 = !DILocation(line: 603, column: 9, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4433, file: !3, line: 603, column: 9)
!4437 = !DILocation(line: 603, column: 27, scope: !4436)
!4438 = !DILocation(line: 603, column: 24, scope: !4436)
!4439 = !DILocation(line: 603, column: 34, scope: !4436)
!4440 = !DILocation(line: 603, column: 37, scope: !4436)
!4441 = !DILocation(line: 603, column: 44, scope: !4436)
!4442 = !DILocation(line: 603, column: 9, scope: !4433)
!4443 = !DILocation(line: 604, column: 29, scope: !4436)
!4444 = !DILocation(line: 605, column: 29, scope: !4436)
!4445 = !DILocation(line: 605, column: 44, scope: !4436)
!4446 = !DILocation(line: 606, column: 31, scope: !4436)
!4447 = !DILocation(line: 607, column: 31, scope: !4436)
!4448 = !DILocation(line: 608, column: 29, scope: !4436)
!4449 = !DILocation(line: 608, column: 35, scope: !4436)
!4450 = !DILocation(line: 604, column: 14, scope: !4436)
!4451 = !DILocation(line: 604, column: 12, scope: !4436)
!4452 = !DILocation(line: 604, column: 7, scope: !4436)
!4453 = !DILocation(line: 603, column: 47, scope: !4436)
!4454 = !DILocation(line: 610, column: 7, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 610, column: 7)
!4456 = !DILocation(line: 610, column: 7, scope: !4258)
!4457 = !DILocation(line: 611, column: 9, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4455, file: !3, line: 611, column: 9)
!4459 = !DILocation(line: 611, column: 31, scope: !4458)
!4460 = !DILocation(line: 611, column: 28, scope: !4458)
!4461 = !DILocation(line: 611, column: 38, scope: !4458)
!4462 = !DILocation(line: 611, column: 41, scope: !4458)
!4463 = !DILocation(line: 611, column: 48, scope: !4458)
!4464 = !DILocation(line: 611, column: 9, scope: !4455)
!4465 = !DILocation(line: 612, column: 29, scope: !4458)
!4466 = !DILocation(line: 613, column: 29, scope: !4458)
!4467 = !DILocation(line: 613, column: 48, scope: !4458)
!4468 = !DILocation(line: 614, column: 31, scope: !4458)
!4469 = !DILocation(line: 615, column: 31, scope: !4458)
!4470 = !DILocation(line: 616, column: 29, scope: !4458)
!4471 = !DILocation(line: 616, column: 35, scope: !4458)
!4472 = !DILocation(line: 612, column: 14, scope: !4458)
!4473 = !DILocation(line: 612, column: 12, scope: !4458)
!4474 = !DILocation(line: 612, column: 7, scope: !4458)
!4475 = !DILocation(line: 611, column: 51, scope: !4458)
!4476 = !DILocation(line: 621, column: 21, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 621, column: 7)
!4478 = !DILocation(line: 621, column: 11, scope: !4477)
!4479 = !DILocation(line: 621, column: 28, scope: !4477)
!4480 = !DILocation(line: 621, column: 39, scope: !4477)
!4481 = !DILocation(line: 621, column: 51, scope: !4477)
!4482 = !DILocation(line: 621, column: 57, scope: !4477)
!4483 = !DILocation(line: 621, column: 9, scope: !4477)
!4484 = !DILocation(line: 622, column: 7, scope: !4477)
!4485 = !DILocation(line: 622, column: 10, scope: !4477)
!4486 = !DILocation(line: 622, column: 17, scope: !4477)
!4487 = !DILocation(line: 621, column: 7, scope: !4258)
!4488 = !DILocation(line: 623, column: 30, scope: !4477)
!4489 = !DILocation(line: 623, column: 38, scope: !4477)
!4490 = !DILocation(line: 623, column: 12, scope: !4477)
!4491 = !DILocation(line: 623, column: 10, scope: !4477)
!4492 = !DILocation(line: 623, column: 5, scope: !4477)
!4493 = !DILocation(line: 625, column: 7, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 625, column: 7)
!4495 = !DILocation(line: 625, column: 7, scope: !4258)
!4496 = !DILocation(line: 627, column: 25, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 627, column: 11)
!4498 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 626, column: 5)
!4499 = !DILocation(line: 627, column: 15, scope: !4497)
!4500 = !DILocation(line: 627, column: 32, scope: !4497)
!4501 = !DILocation(line: 627, column: 43, scope: !4497)
!4502 = !DILocation(line: 627, column: 55, scope: !4497)
!4503 = !DILocation(line: 627, column: 61, scope: !4497)
!4504 = !DILocation(line: 627, column: 13, scope: !4497)
!4505 = !DILocation(line: 628, column: 11, scope: !4497)
!4506 = !DILocation(line: 628, column: 14, scope: !4497)
!4507 = !DILocation(line: 628, column: 21, scope: !4497)
!4508 = !DILocation(line: 627, column: 11, scope: !4498)
!4509 = !DILocation(line: 629, column: 34, scope: !4497)
!4510 = !DILocation(line: 629, column: 42, scope: !4497)
!4511 = !DILocation(line: 629, column: 16, scope: !4497)
!4512 = !DILocation(line: 629, column: 14, scope: !4497)
!4513 = !DILocation(line: 629, column: 9, scope: !4497)
!4514 = !DILocation(line: 631, column: 11, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 631, column: 11)
!4516 = !DILocation(line: 631, column: 11, scope: !4498)
!4517 = !DILocation(line: 633, column: 29, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 633, column: 15)
!4519 = distinct !DILexicalBlock(scope: !4515, file: !3, line: 632, column: 9)
!4520 = !DILocation(line: 633, column: 19, scope: !4518)
!4521 = !DILocation(line: 633, column: 36, scope: !4518)
!4522 = !DILocation(line: 633, column: 47, scope: !4518)
!4523 = !DILocation(line: 633, column: 59, scope: !4518)
!4524 = !DILocation(line: 633, column: 65, scope: !4518)
!4525 = !DILocation(line: 633, column: 17, scope: !4518)
!4526 = !DILocation(line: 634, column: 15, scope: !4518)
!4527 = !DILocation(line: 634, column: 18, scope: !4518)
!4528 = !DILocation(line: 634, column: 25, scope: !4518)
!4529 = !DILocation(line: 633, column: 15, scope: !4519)
!4530 = !DILocation(line: 635, column: 38, scope: !4518)
!4531 = !DILocation(line: 635, column: 46, scope: !4518)
!4532 = !DILocation(line: 635, column: 20, scope: !4518)
!4533 = !DILocation(line: 635, column: 18, scope: !4518)
!4534 = !DILocation(line: 635, column: 13, scope: !4518)
!4535 = !DILocation(line: 637, column: 17, scope: !4519)
!4536 = !DILocation(line: 637, column: 34, scope: !4519)
!4537 = !DILocation(line: 637, column: 40, scope: !4519)
!4538 = !DILocation(line: 637, column: 46, scope: !4519)
!4539 = !DILocation(line: 637, column: 52, scope: !4519)
!4540 = !DILocation(line: 637, column: 15, scope: !4519)
!4541 = !DILocation(line: 638, column: 9, scope: !4519)
!4542 = !DILocation(line: 640, column: 15, scope: !4515)
!4543 = !DILocation(line: 640, column: 32, scope: !4515)
!4544 = !DILocation(line: 640, column: 38, scope: !4515)
!4545 = !DILocation(line: 640, column: 44, scope: !4515)
!4546 = !DILocation(line: 640, column: 13, scope: !4515)
!4547 = !DILocation(line: 641, column: 5, scope: !4498)
!4548 = !DILocation(line: 644, column: 11, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 644, column: 11)
!4550 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 643, column: 5)
!4551 = !DILocation(line: 644, column: 11, scope: !4550)
!4552 = !DILocation(line: 646, column: 29, scope: !4553)
!4553 = distinct !DILexicalBlock(scope: !4554, file: !3, line: 646, column: 15)
!4554 = distinct !DILexicalBlock(scope: !4549, file: !3, line: 645, column: 9)
!4555 = !DILocation(line: 646, column: 19, scope: !4553)
!4556 = !DILocation(line: 646, column: 36, scope: !4553)
!4557 = !DILocation(line: 646, column: 47, scope: !4553)
!4558 = !DILocation(line: 646, column: 59, scope: !4553)
!4559 = !DILocation(line: 646, column: 65, scope: !4553)
!4560 = !DILocation(line: 646, column: 17, scope: !4553)
!4561 = !DILocation(line: 647, column: 15, scope: !4553)
!4562 = !DILocation(line: 647, column: 18, scope: !4553)
!4563 = !DILocation(line: 647, column: 25, scope: !4553)
!4564 = !DILocation(line: 646, column: 15, scope: !4554)
!4565 = !DILocation(line: 648, column: 38, scope: !4553)
!4566 = !DILocation(line: 648, column: 46, scope: !4553)
!4567 = !DILocation(line: 648, column: 20, scope: !4553)
!4568 = !DILocation(line: 648, column: 18, scope: !4553)
!4569 = !DILocation(line: 648, column: 13, scope: !4553)
!4570 = !DILocation(line: 650, column: 17, scope: !4554)
!4571 = !DILocation(line: 650, column: 34, scope: !4554)
!4572 = !DILocation(line: 650, column: 40, scope: !4554)
!4573 = !DILocation(line: 650, column: 46, scope: !4554)
!4574 = !DILocation(line: 650, column: 15, scope: !4554)
!4575 = !DILocation(line: 651, column: 9, scope: !4554)
!4576 = !DILocation(line: 653, column: 15, scope: !4549)
!4577 = !DILocation(line: 653, column: 32, scope: !4549)
!4578 = !DILocation(line: 653, column: 38, scope: !4549)
!4579 = !DILocation(line: 653, column: 13, scope: !4549)
!4580 = !DILocation(line: 656, column: 14, scope: !4258)
!4581 = !DILocation(line: 656, column: 3, scope: !4258)
!4582 = !DILocation(line: 657, column: 10, scope: !4258)
!4583 = !DILocation(line: 657, column: 3, scope: !4258)
!4584 = distinct !DISubprogram(name: "expand_ternary_op", scope: !3, file: !3, line: 672, type: !4585, scopeLine: 674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4585 = !DISubroutineType(types: !4586)
!4586 = !{!2732, !5, !3938, !2732, !2732, !2732, !2732, !2756}
!4587 = !DILocalVariable(name: "mode", arg: 1, scope: !4584, file: !3, line: 672, type: !5)
!4588 = !DILocation(line: 672, column: 38, scope: !4584)
!4589 = !DILocalVariable(name: "ternary_optab", arg: 2, scope: !4584, file: !3, line: 672, type: !3938)
!4590 = !DILocation(line: 672, column: 50, scope: !4584)
!4591 = !DILocalVariable(name: "op0", arg: 3, scope: !4584, file: !3, line: 672, type: !2732)
!4592 = !DILocation(line: 672, column: 69, scope: !4584)
!4593 = !DILocalVariable(name: "op1", arg: 4, scope: !4584, file: !3, line: 673, type: !2732)
!4594 = !DILocation(line: 673, column: 10, scope: !4584)
!4595 = !DILocalVariable(name: "op2", arg: 5, scope: !4584, file: !3, line: 673, type: !2732)
!4596 = !DILocation(line: 673, column: 19, scope: !4584)
!4597 = !DILocalVariable(name: "target", arg: 6, scope: !4584, file: !3, line: 673, type: !2732)
!4598 = !DILocation(line: 673, column: 28, scope: !4584)
!4599 = !DILocalVariable(name: "unsignedp", arg: 7, scope: !4584, file: !3, line: 673, type: !2756)
!4600 = !DILocation(line: 673, column: 40, scope: !4584)
!4601 = !DILocalVariable(name: "icode", scope: !4584, file: !3, line: 675, type: !2756)
!4602 = !DILocation(line: 675, column: 7, scope: !4584)
!4603 = !DILocation(line: 675, column: 21, scope: !4584)
!4604 = !DILocation(line: 675, column: 58, scope: !4584)
!4605 = !DILocalVariable(name: "mode0", scope: !4584, file: !3, line: 676, type: !5)
!4606 = !DILocation(line: 676, column: 21, scope: !4584)
!4607 = !DILocation(line: 676, column: 39, scope: !4584)
!4608 = !DILocation(line: 676, column: 29, scope: !4584)
!4609 = !DILocation(line: 676, column: 46, scope: !4584)
!4610 = !DILocation(line: 676, column: 57, scope: !4584)
!4611 = !DILocalVariable(name: "mode1", scope: !4584, file: !3, line: 677, type: !5)
!4612 = !DILocation(line: 677, column: 21, scope: !4584)
!4613 = !DILocation(line: 677, column: 39, scope: !4584)
!4614 = !DILocation(line: 677, column: 29, scope: !4584)
!4615 = !DILocation(line: 677, column: 46, scope: !4584)
!4616 = !DILocation(line: 677, column: 57, scope: !4584)
!4617 = !DILocalVariable(name: "mode2", scope: !4584, file: !3, line: 678, type: !5)
!4618 = !DILocation(line: 678, column: 21, scope: !4584)
!4619 = !DILocation(line: 678, column: 39, scope: !4584)
!4620 = !DILocation(line: 678, column: 29, scope: !4584)
!4621 = !DILocation(line: 678, column: 46, scope: !4584)
!4622 = !DILocation(line: 678, column: 57, scope: !4584)
!4623 = !DILocalVariable(name: "temp", scope: !4584, file: !3, line: 679, type: !2732)
!4624 = !DILocation(line: 679, column: 7, scope: !4584)
!4625 = !DILocalVariable(name: "pat", scope: !4584, file: !3, line: 680, type: !2732)
!4626 = !DILocation(line: 680, column: 7, scope: !4584)
!4627 = !DILocalVariable(name: "xop0", scope: !4584, file: !3, line: 681, type: !2732)
!4628 = !DILocation(line: 681, column: 7, scope: !4584)
!4629 = !DILocation(line: 681, column: 14, scope: !4584)
!4630 = !DILocalVariable(name: "xop1", scope: !4584, file: !3, line: 681, type: !2732)
!4631 = !DILocation(line: 681, column: 19, scope: !4584)
!4632 = !DILocation(line: 681, column: 26, scope: !4584)
!4633 = !DILocalVariable(name: "xop2", scope: !4584, file: !3, line: 681, type: !2732)
!4634 = !DILocation(line: 681, column: 31, scope: !4584)
!4635 = !DILocation(line: 681, column: 38, scope: !4584)
!4636 = !DILocation(line: 683, column: 3, scope: !4584)
!4637 = !DILocation(line: 686, column: 8, scope: !4638)
!4638 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 686, column: 7)
!4639 = !DILocation(line: 686, column: 15, scope: !4638)
!4640 = !DILocation(line: 686, column: 29, scope: !4638)
!4641 = !DILocation(line: 686, column: 19, scope: !4638)
!4642 = !DILocation(line: 686, column: 36, scope: !4638)
!4643 = !DILocation(line: 686, column: 47, scope: !4638)
!4644 = !DILocation(line: 686, column: 58, scope: !4638)
!4645 = !DILocation(line: 686, column: 66, scope: !4638)
!4646 = !DILocation(line: 686, column: 7, scope: !4584)
!4647 = !DILocation(line: 687, column: 25, scope: !4638)
!4648 = !DILocation(line: 687, column: 12, scope: !4638)
!4649 = !DILocation(line: 687, column: 10, scope: !4638)
!4650 = !DILocation(line: 687, column: 5, scope: !4638)
!4651 = !DILocation(line: 689, column: 12, scope: !4638)
!4652 = !DILocation(line: 689, column: 10, scope: !4638)
!4653 = !DILocation(line: 697, column: 7, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 697, column: 7)
!4655 = !DILocation(line: 697, column: 25, scope: !4654)
!4656 = !DILocation(line: 697, column: 22, scope: !4654)
!4657 = !DILocation(line: 697, column: 31, scope: !4654)
!4658 = !DILocation(line: 697, column: 34, scope: !4654)
!4659 = !DILocation(line: 697, column: 40, scope: !4654)
!4660 = !DILocation(line: 697, column: 7, scope: !4584)
!4661 = !DILocation(line: 698, column: 27, scope: !4654)
!4662 = !DILocation(line: 699, column: 27, scope: !4654)
!4663 = !DILocation(line: 699, column: 42, scope: !4654)
!4664 = !DILocation(line: 700, column: 29, scope: !4654)
!4665 = !DILocation(line: 701, column: 29, scope: !4654)
!4666 = !DILocation(line: 702, column: 27, scope: !4654)
!4667 = !DILocation(line: 702, column: 33, scope: !4654)
!4668 = !DILocation(line: 698, column: 12, scope: !4654)
!4669 = !DILocation(line: 698, column: 10, scope: !4654)
!4670 = !DILocation(line: 698, column: 5, scope: !4654)
!4671 = !DILocation(line: 704, column: 7, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 704, column: 7)
!4673 = !DILocation(line: 704, column: 25, scope: !4672)
!4674 = !DILocation(line: 704, column: 22, scope: !4672)
!4675 = !DILocation(line: 704, column: 31, scope: !4672)
!4676 = !DILocation(line: 704, column: 34, scope: !4672)
!4677 = !DILocation(line: 704, column: 40, scope: !4672)
!4678 = !DILocation(line: 704, column: 7, scope: !4584)
!4679 = !DILocation(line: 705, column: 27, scope: !4672)
!4680 = !DILocation(line: 706, column: 27, scope: !4672)
!4681 = !DILocation(line: 706, column: 42, scope: !4672)
!4682 = !DILocation(line: 707, column: 29, scope: !4672)
!4683 = !DILocation(line: 708, column: 29, scope: !4672)
!4684 = !DILocation(line: 709, column: 27, scope: !4672)
!4685 = !DILocation(line: 709, column: 33, scope: !4672)
!4686 = !DILocation(line: 705, column: 12, scope: !4672)
!4687 = !DILocation(line: 705, column: 10, scope: !4672)
!4688 = !DILocation(line: 705, column: 5, scope: !4672)
!4689 = !DILocation(line: 711, column: 7, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 711, column: 7)
!4691 = !DILocation(line: 711, column: 25, scope: !4690)
!4692 = !DILocation(line: 711, column: 22, scope: !4690)
!4693 = !DILocation(line: 711, column: 31, scope: !4690)
!4694 = !DILocation(line: 711, column: 34, scope: !4690)
!4695 = !DILocation(line: 711, column: 40, scope: !4690)
!4696 = !DILocation(line: 711, column: 7, scope: !4584)
!4697 = !DILocation(line: 712, column: 27, scope: !4690)
!4698 = !DILocation(line: 713, column: 27, scope: !4690)
!4699 = !DILocation(line: 713, column: 42, scope: !4690)
!4700 = !DILocation(line: 714, column: 29, scope: !4690)
!4701 = !DILocation(line: 715, column: 29, scope: !4690)
!4702 = !DILocation(line: 716, column: 27, scope: !4690)
!4703 = !DILocation(line: 716, column: 33, scope: !4690)
!4704 = !DILocation(line: 712, column: 12, scope: !4690)
!4705 = !DILocation(line: 712, column: 10, scope: !4690)
!4706 = !DILocation(line: 712, column: 5, scope: !4690)
!4707 = !DILocation(line: 721, column: 18, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 721, column: 7)
!4709 = !DILocation(line: 721, column: 8, scope: !4708)
!4710 = !DILocation(line: 721, column: 25, scope: !4708)
!4711 = !DILocation(line: 721, column: 36, scope: !4708)
!4712 = !DILocation(line: 721, column: 47, scope: !4708)
!4713 = !DILocation(line: 721, column: 53, scope: !4708)
!4714 = !DILocation(line: 722, column: 7, scope: !4708)
!4715 = !DILocation(line: 722, column: 10, scope: !4708)
!4716 = !DILocation(line: 722, column: 16, scope: !4708)
!4717 = !DILocation(line: 721, column: 7, scope: !4584)
!4718 = !DILocation(line: 723, column: 30, scope: !4708)
!4719 = !DILocation(line: 723, column: 37, scope: !4708)
!4720 = !DILocation(line: 723, column: 12, scope: !4708)
!4721 = !DILocation(line: 723, column: 10, scope: !4708)
!4722 = !DILocation(line: 723, column: 5, scope: !4708)
!4723 = !DILocation(line: 725, column: 18, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 725, column: 7)
!4725 = !DILocation(line: 725, column: 8, scope: !4724)
!4726 = !DILocation(line: 725, column: 25, scope: !4724)
!4727 = !DILocation(line: 725, column: 36, scope: !4724)
!4728 = !DILocation(line: 725, column: 47, scope: !4724)
!4729 = !DILocation(line: 725, column: 53, scope: !4724)
!4730 = !DILocation(line: 726, column: 7, scope: !4724)
!4731 = !DILocation(line: 726, column: 10, scope: !4724)
!4732 = !DILocation(line: 726, column: 16, scope: !4724)
!4733 = !DILocation(line: 725, column: 7, scope: !4584)
!4734 = !DILocation(line: 727, column: 30, scope: !4724)
!4735 = !DILocation(line: 727, column: 37, scope: !4724)
!4736 = !DILocation(line: 727, column: 12, scope: !4724)
!4737 = !DILocation(line: 727, column: 10, scope: !4724)
!4738 = !DILocation(line: 727, column: 5, scope: !4724)
!4739 = !DILocation(line: 729, column: 18, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 729, column: 7)
!4741 = !DILocation(line: 729, column: 8, scope: !4740)
!4742 = !DILocation(line: 729, column: 25, scope: !4740)
!4743 = !DILocation(line: 729, column: 36, scope: !4740)
!4744 = !DILocation(line: 729, column: 47, scope: !4740)
!4745 = !DILocation(line: 729, column: 53, scope: !4740)
!4746 = !DILocation(line: 730, column: 7, scope: !4740)
!4747 = !DILocation(line: 730, column: 10, scope: !4740)
!4748 = !DILocation(line: 730, column: 16, scope: !4740)
!4749 = !DILocation(line: 729, column: 7, scope: !4584)
!4750 = !DILocation(line: 731, column: 30, scope: !4740)
!4751 = !DILocation(line: 731, column: 37, scope: !4740)
!4752 = !DILocation(line: 731, column: 12, scope: !4740)
!4753 = !DILocation(line: 731, column: 10, scope: !4740)
!4754 = !DILocation(line: 731, column: 5, scope: !4740)
!4755 = !DILocation(line: 733, column: 9, scope: !4584)
!4756 = !DILocation(line: 733, column: 26, scope: !4584)
!4757 = !DILocation(line: 733, column: 32, scope: !4584)
!4758 = !DILocation(line: 733, column: 38, scope: !4584)
!4759 = !DILocation(line: 733, column: 44, scope: !4584)
!4760 = !DILocation(line: 733, column: 7, scope: !4584)
!4761 = !DILocation(line: 735, column: 14, scope: !4584)
!4762 = !DILocation(line: 735, column: 3, scope: !4584)
!4763 = !DILocation(line: 736, column: 10, scope: !4584)
!4764 = !DILocation(line: 736, column: 3, scope: !4584)
!4765 = distinct !DISubprogram(name: "force_expand_binop", scope: !3, file: !3, line: 764, type: !4766, scopeLine: 767, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4766 = !DISubroutineType(types: !4767)
!4767 = !{!2966, !5, !3938, !2732, !2732, !2732, !2756, !2214}
!4768 = !DILocalVariable(name: "mode", arg: 1, scope: !4765, file: !3, line: 764, type: !5)
!4769 = !DILocation(line: 764, column: 39, scope: !4765)
!4770 = !DILocalVariable(name: "binoptab", arg: 2, scope: !4765, file: !3, line: 764, type: !3938)
!4771 = !DILocation(line: 764, column: 51, scope: !4765)
!4772 = !DILocalVariable(name: "op0", arg: 3, scope: !4765, file: !3, line: 765, type: !2732)
!4773 = !DILocation(line: 765, column: 11, scope: !4765)
!4774 = !DILocalVariable(name: "op1", arg: 4, scope: !4765, file: !3, line: 765, type: !2732)
!4775 = !DILocation(line: 765, column: 20, scope: !4765)
!4776 = !DILocalVariable(name: "target", arg: 5, scope: !4765, file: !3, line: 765, type: !2732)
!4777 = !DILocation(line: 765, column: 29, scope: !4765)
!4778 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !4765, file: !3, line: 765, type: !2756)
!4779 = !DILocation(line: 765, column: 41, scope: !4765)
!4780 = !DILocalVariable(name: "methods", arg: 7, scope: !4765, file: !3, line: 766, type: !2214)
!4781 = !DILocation(line: 766, column: 26, scope: !4765)
!4782 = !DILocalVariable(name: "x", scope: !4765, file: !3, line: 768, type: !2732)
!4783 = !DILocation(line: 768, column: 7, scope: !4765)
!4784 = !DILocation(line: 768, column: 34, scope: !4765)
!4785 = !DILocation(line: 768, column: 40, scope: !4765)
!4786 = !DILocation(line: 768, column: 50, scope: !4765)
!4787 = !DILocation(line: 768, column: 55, scope: !4765)
!4788 = !DILocation(line: 769, column: 6, scope: !4765)
!4789 = !DILocation(line: 769, column: 14, scope: !4765)
!4790 = !DILocation(line: 769, column: 25, scope: !4765)
!4791 = !DILocation(line: 768, column: 11, scope: !4765)
!4792 = !DILocation(line: 770, column: 7, scope: !4793)
!4793 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 770, column: 7)
!4794 = !DILocation(line: 770, column: 9, scope: !4793)
!4795 = !DILocation(line: 770, column: 7, scope: !4765)
!4796 = !DILocation(line: 771, column: 5, scope: !4793)
!4797 = !DILocation(line: 772, column: 7, scope: !4798)
!4798 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 772, column: 7)
!4799 = !DILocation(line: 772, column: 12, scope: !4798)
!4800 = !DILocation(line: 772, column: 9, scope: !4798)
!4801 = !DILocation(line: 772, column: 7, scope: !4765)
!4802 = !DILocation(line: 773, column: 21, scope: !4798)
!4803 = !DILocation(line: 773, column: 29, scope: !4798)
!4804 = !DILocation(line: 773, column: 5, scope: !4798)
!4805 = !DILocation(line: 774, column: 3, scope: !4765)
!4806 = !DILocation(line: 775, column: 1, scope: !4765)
!4807 = distinct !DISubprogram(name: "simplify_expand_binop", scope: !3, file: !3, line: 745, type: !4808, scopeLine: 748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4808 = !DISubroutineType(types: !4809)
!4809 = !{!2732, !5, !3938, !2732, !2732, !2732, !2756, !2214}
!4810 = !DILocalVariable(name: "mode", arg: 1, scope: !4807, file: !3, line: 745, type: !5)
!4811 = !DILocation(line: 745, column: 42, scope: !4807)
!4812 = !DILocalVariable(name: "binoptab", arg: 2, scope: !4807, file: !3, line: 745, type: !3938)
!4813 = !DILocation(line: 745, column: 54, scope: !4807)
!4814 = !DILocalVariable(name: "op0", arg: 3, scope: !4807, file: !3, line: 746, type: !2732)
!4815 = !DILocation(line: 746, column: 14, scope: !4807)
!4816 = !DILocalVariable(name: "op1", arg: 4, scope: !4807, file: !3, line: 746, type: !2732)
!4817 = !DILocation(line: 746, column: 23, scope: !4807)
!4818 = !DILocalVariable(name: "target", arg: 5, scope: !4807, file: !3, line: 746, type: !2732)
!4819 = !DILocation(line: 746, column: 32, scope: !4807)
!4820 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !4807, file: !3, line: 746, type: !2756)
!4821 = !DILocation(line: 746, column: 44, scope: !4807)
!4822 = !DILocalVariable(name: "methods", arg: 7, scope: !4807, file: !3, line: 747, type: !2214)
!4823 = !DILocation(line: 747, column: 29, scope: !4807)
!4824 = !DILocation(line: 749, column: 7, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 749, column: 7)
!4826 = !DILocation(line: 749, column: 24, scope: !4825)
!4827 = !DILocation(line: 749, column: 27, scope: !4825)
!4828 = !DILocation(line: 749, column: 7, scope: !4807)
!4829 = !DILocalVariable(name: "x", scope: !4830, file: !3, line: 751, type: !2732)
!4830 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 750, column: 5)
!4831 = !DILocation(line: 751, column: 11, scope: !4830)
!4832 = !DILocation(line: 751, column: 42, scope: !4830)
!4833 = !DILocation(line: 751, column: 52, scope: !4830)
!4834 = !DILocation(line: 751, column: 58, scope: !4830)
!4835 = !DILocation(line: 751, column: 64, scope: !4830)
!4836 = !DILocation(line: 751, column: 69, scope: !4830)
!4837 = !DILocation(line: 751, column: 15, scope: !4830)
!4838 = !DILocation(line: 753, column: 11, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !4830, file: !3, line: 753, column: 11)
!4840 = !DILocation(line: 753, column: 11, scope: !4830)
!4841 = !DILocation(line: 754, column: 9, scope: !4839)
!4842 = !DILocation(line: 754, column: 2, scope: !4839)
!4843 = !DILocation(line: 755, column: 5, scope: !4830)
!4844 = !DILocation(line: 757, column: 24, scope: !4807)
!4845 = !DILocation(line: 757, column: 30, scope: !4807)
!4846 = !DILocation(line: 757, column: 40, scope: !4807)
!4847 = !DILocation(line: 757, column: 45, scope: !4807)
!4848 = !DILocation(line: 757, column: 50, scope: !4807)
!4849 = !DILocation(line: 757, column: 58, scope: !4807)
!4850 = !DILocation(line: 757, column: 69, scope: !4807)
!4851 = !DILocation(line: 757, column: 10, scope: !4807)
!4852 = !DILocation(line: 757, column: 3, scope: !4807)
!4853 = !DILocation(line: 758, column: 1, scope: !4807)
!4854 = distinct !DISubprogram(name: "expand_vec_shift_expr", scope: !3, file: !3, line: 780, type: !4855, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4855 = !DISubroutineType(types: !4856)
!4856 = !{!2732, !4261, !2732}
!4857 = !DILocalVariable(name: "ops", arg: 1, scope: !4854, file: !3, line: 780, type: !4261)
!4858 = !DILocation(line: 780, column: 31, scope: !4854)
!4859 = !DILocalVariable(name: "target", arg: 2, scope: !4854, file: !3, line: 780, type: !2732)
!4860 = !DILocation(line: 780, column: 40, scope: !4854)
!4861 = !DILocalVariable(name: "icode", scope: !4854, file: !3, line: 782, type: !527)
!4862 = !DILocation(line: 782, column: 18, scope: !4854)
!4863 = !DILocalVariable(name: "rtx_op1", scope: !4854, file: !3, line: 783, type: !2732)
!4864 = !DILocation(line: 783, column: 7, scope: !4854)
!4865 = !DILocalVariable(name: "rtx_op2", scope: !4854, file: !3, line: 783, type: !2732)
!4866 = !DILocation(line: 783, column: 16, scope: !4854)
!4867 = !DILocalVariable(name: "mode1", scope: !4854, file: !3, line: 784, type: !5)
!4868 = !DILocation(line: 784, column: 21, scope: !4854)
!4869 = !DILocalVariable(name: "mode2", scope: !4854, file: !3, line: 785, type: !5)
!4870 = !DILocation(line: 785, column: 21, scope: !4854)
!4871 = !DILocalVariable(name: "mode", scope: !4854, file: !3, line: 786, type: !5)
!4872 = !DILocation(line: 786, column: 21, scope: !4854)
!4873 = !DILocation(line: 786, column: 28, scope: !4854)
!4874 = !DILocalVariable(name: "vec_oprnd", scope: !4854, file: !3, line: 787, type: !2853)
!4875 = !DILocation(line: 787, column: 8, scope: !4854)
!4876 = !DILocation(line: 787, column: 20, scope: !4854)
!4877 = !DILocation(line: 787, column: 25, scope: !4854)
!4878 = !DILocalVariable(name: "shift_oprnd", scope: !4854, file: !3, line: 788, type: !2853)
!4879 = !DILocation(line: 788, column: 8, scope: !4854)
!4880 = !DILocation(line: 788, column: 22, scope: !4854)
!4881 = !DILocation(line: 788, column: 27, scope: !4854)
!4882 = !DILocalVariable(name: "shift_optab", scope: !4854, file: !3, line: 789, type: !3938)
!4883 = !DILocation(line: 789, column: 9, scope: !4854)
!4884 = !DILocalVariable(name: "pat", scope: !4854, file: !3, line: 790, type: !2732)
!4885 = !DILocation(line: 790, column: 7, scope: !4854)
!4886 = !DILocation(line: 792, column: 11, scope: !4854)
!4887 = !DILocation(line: 792, column: 16, scope: !4854)
!4888 = !DILocation(line: 792, column: 3, scope: !4854)
!4889 = !DILocation(line: 795, column: 14, scope: !4890)
!4890 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 793, column: 5)
!4891 = !DILocation(line: 796, column: 2, scope: !4890)
!4892 = !DILocation(line: 798, column: 14, scope: !4890)
!4893 = !DILocation(line: 799, column: 2, scope: !4890)
!4894 = !DILocation(line: 801, column: 2, scope: !4890)
!4895 = !DILocation(line: 802, column: 5, scope: !4890)
!4896 = !DILocation(line: 804, column: 11, scope: !4854)
!4897 = !DILocation(line: 804, column: 46, scope: !4854)
!4898 = !DILocation(line: 804, column: 9, scope: !4854)
!4899 = !DILocation(line: 805, column: 3, scope: !4854)
!4900 = !DILocation(line: 807, column: 21, scope: !4854)
!4901 = !DILocation(line: 807, column: 11, scope: !4854)
!4902 = !DILocation(line: 807, column: 28, scope: !4854)
!4903 = !DILocation(line: 807, column: 39, scope: !4854)
!4904 = !DILocation(line: 807, column: 9, scope: !4854)
!4905 = !DILocation(line: 808, column: 21, scope: !4854)
!4906 = !DILocation(line: 808, column: 11, scope: !4854)
!4907 = !DILocation(line: 808, column: 28, scope: !4854)
!4908 = !DILocation(line: 808, column: 39, scope: !4854)
!4909 = !DILocation(line: 808, column: 9, scope: !4854)
!4910 = !DILocation(line: 810, column: 28, scope: !4854)
!4911 = !DILocation(line: 810, column: 13, scope: !4854)
!4912 = !DILocation(line: 810, column: 11, scope: !4854)
!4913 = !DILocation(line: 811, column: 20, scope: !4914)
!4914 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 811, column: 7)
!4915 = !DILocation(line: 811, column: 10, scope: !4914)
!4916 = !DILocation(line: 811, column: 27, scope: !4914)
!4917 = !DILocation(line: 811, column: 38, scope: !4914)
!4918 = !DILocation(line: 811, column: 50, scope: !4914)
!4919 = !DILocation(line: 811, column: 59, scope: !4914)
!4920 = !DILocation(line: 811, column: 8, scope: !4914)
!4921 = !DILocation(line: 812, column: 7, scope: !4914)
!4922 = !DILocation(line: 812, column: 10, scope: !4914)
!4923 = !DILocation(line: 812, column: 16, scope: !4914)
!4924 = !DILocation(line: 811, column: 7, scope: !4854)
!4925 = !DILocation(line: 813, column: 26, scope: !4914)
!4926 = !DILocation(line: 813, column: 33, scope: !4914)
!4927 = !DILocation(line: 813, column: 15, scope: !4914)
!4928 = !DILocation(line: 813, column: 13, scope: !4914)
!4929 = !DILocation(line: 813, column: 5, scope: !4914)
!4930 = !DILocation(line: 815, column: 28, scope: !4854)
!4931 = !DILocation(line: 815, column: 13, scope: !4854)
!4932 = !DILocation(line: 815, column: 11, scope: !4854)
!4933 = !DILocation(line: 816, column: 20, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 816, column: 7)
!4935 = !DILocation(line: 816, column: 10, scope: !4934)
!4936 = !DILocation(line: 816, column: 27, scope: !4934)
!4937 = !DILocation(line: 816, column: 38, scope: !4934)
!4938 = !DILocation(line: 816, column: 50, scope: !4934)
!4939 = !DILocation(line: 816, column: 59, scope: !4934)
!4940 = !DILocation(line: 816, column: 8, scope: !4934)
!4941 = !DILocation(line: 817, column: 7, scope: !4934)
!4942 = !DILocation(line: 817, column: 10, scope: !4934)
!4943 = !DILocation(line: 817, column: 16, scope: !4934)
!4944 = !DILocation(line: 816, column: 7, scope: !4854)
!4945 = !DILocation(line: 818, column: 26, scope: !4934)
!4946 = !DILocation(line: 818, column: 33, scope: !4934)
!4947 = !DILocation(line: 818, column: 15, scope: !4934)
!4948 = !DILocation(line: 818, column: 13, scope: !4934)
!4949 = !DILocation(line: 818, column: 5, scope: !4934)
!4950 = !DILocation(line: 820, column: 8, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 820, column: 7)
!4952 = !DILocation(line: 821, column: 7, scope: !4951)
!4953 = !DILocation(line: 821, column: 24, scope: !4951)
!4954 = !DILocation(line: 821, column: 14, scope: !4951)
!4955 = !DILocation(line: 821, column: 31, scope: !4951)
!4956 = !DILocation(line: 821, column: 42, scope: !4951)
!4957 = !DILocation(line: 821, column: 54, scope: !4951)
!4958 = !DILocation(line: 821, column: 62, scope: !4951)
!4959 = !DILocation(line: 821, column: 12, scope: !4951)
!4960 = !DILocation(line: 820, column: 7, scope: !4854)
!4961 = !DILocation(line: 822, column: 27, scope: !4951)
!4962 = !DILocation(line: 822, column: 14, scope: !4951)
!4963 = !DILocation(line: 822, column: 12, scope: !4951)
!4964 = !DILocation(line: 822, column: 5, scope: !4951)
!4965 = !DILocation(line: 825, column: 9, scope: !4854)
!4966 = !DILocation(line: 825, column: 26, scope: !4854)
!4967 = !DILocation(line: 825, column: 34, scope: !4854)
!4968 = !DILocation(line: 825, column: 43, scope: !4854)
!4969 = !DILocation(line: 825, column: 7, scope: !4854)
!4970 = !DILocation(line: 826, column: 3, scope: !4854)
!4971 = !DILocation(line: 827, column: 14, scope: !4854)
!4972 = !DILocation(line: 827, column: 3, scope: !4854)
!4973 = !DILocation(line: 829, column: 10, scope: !4854)
!4974 = !DILocation(line: 829, column: 3, scope: !4854)
!4975 = distinct !DISubprogram(name: "expand_normal", scope: !2215, file: !2215, line: 562, type: !4976, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4976 = !DISubroutineType(types: !4977)
!4977 = !{!2732, !2853}
!4978 = !DILocalVariable(name: "exp", arg: 1, scope: !4975, file: !2215, line: 562, type: !2853)
!4979 = !DILocation(line: 562, column: 21, scope: !4975)
!4980 = !DILocation(line: 564, column: 28, scope: !4975)
!4981 = !DILocation(line: 564, column: 10, scope: !4975)
!4982 = !DILocation(line: 564, column: 3, scope: !4975)
!4983 = distinct !DISubprogram(name: "expand_simple_binop", scope: !3, file: !3, line: 1317, type: !4984, scopeLine: 1320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!4984 = !DISubroutineType(types: !4985)
!4985 = !{!2732, !5, !384, !2732, !2732, !2732, !2756, !2214}
!4986 = !DILocalVariable(name: "mode", arg: 1, scope: !4983, file: !3, line: 1317, type: !5)
!4987 = !DILocation(line: 1317, column: 40, scope: !4983)
!4988 = !DILocalVariable(name: "code", arg: 2, scope: !4983, file: !3, line: 1317, type: !384)
!4989 = !DILocation(line: 1317, column: 60, scope: !4983)
!4990 = !DILocalVariable(name: "op0", arg: 3, scope: !4983, file: !3, line: 1317, type: !2732)
!4991 = !DILocation(line: 1317, column: 70, scope: !4983)
!4992 = !DILocalVariable(name: "op1", arg: 4, scope: !4983, file: !3, line: 1318, type: !2732)
!4993 = !DILocation(line: 1318, column: 12, scope: !4983)
!4994 = !DILocalVariable(name: "target", arg: 5, scope: !4983, file: !3, line: 1318, type: !2732)
!4995 = !DILocation(line: 1318, column: 21, scope: !4983)
!4996 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !4983, file: !3, line: 1318, type: !2756)
!4997 = !DILocation(line: 1318, column: 33, scope: !4983)
!4998 = !DILocalVariable(name: "methods", arg: 7, scope: !4983, file: !3, line: 1319, type: !2214)
!4999 = !DILocation(line: 1319, column: 27, scope: !4983)
!5000 = !DILocalVariable(name: "binop", scope: !4983, file: !3, line: 1321, type: !3938)
!5001 = !DILocation(line: 1321, column: 9, scope: !4983)
!5002 = !DILocation(line: 1321, column: 37, scope: !4983)
!5003 = !DILocation(line: 1321, column: 17, scope: !4983)
!5004 = !DILocation(line: 1322, column: 3, scope: !4983)
!5005 = !DILocation(line: 1324, column: 24, scope: !4983)
!5006 = !DILocation(line: 1324, column: 30, scope: !4983)
!5007 = !DILocation(line: 1324, column: 37, scope: !4983)
!5008 = !DILocation(line: 1324, column: 42, scope: !4983)
!5009 = !DILocation(line: 1324, column: 47, scope: !4983)
!5010 = !DILocation(line: 1324, column: 55, scope: !4983)
!5011 = !DILocation(line: 1324, column: 66, scope: !4983)
!5012 = !DILocation(line: 1324, column: 10, scope: !4983)
!5013 = !DILocation(line: 1324, column: 3, scope: !4983)
!5014 = distinct !DISubprogram(name: "expand_binop", scope: !3, file: !3, line: 1548, type: !4808, scopeLine: 1550, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!5015 = !DILocalVariable(name: "mode", arg: 1, scope: !5014, file: !3, line: 1548, type: !5)
!5016 = !DILocation(line: 1548, column: 33, scope: !5014)
!5017 = !DILocalVariable(name: "binoptab", arg: 2, scope: !5014, file: !3, line: 1548, type: !3938)
!5018 = !DILocation(line: 1548, column: 45, scope: !5014)
!5019 = !DILocalVariable(name: "op0", arg: 3, scope: !5014, file: !3, line: 1548, type: !2732)
!5020 = !DILocation(line: 1548, column: 59, scope: !5014)
!5021 = !DILocalVariable(name: "op1", arg: 4, scope: !5014, file: !3, line: 1548, type: !2732)
!5022 = !DILocation(line: 1548, column: 68, scope: !5014)
!5023 = !DILocalVariable(name: "target", arg: 5, scope: !5014, file: !3, line: 1549, type: !2732)
!5024 = !DILocation(line: 1549, column: 12, scope: !5014)
!5025 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !5014, file: !3, line: 1549, type: !2756)
!5026 = !DILocation(line: 1549, column: 24, scope: !5014)
!5027 = !DILocalVariable(name: "methods", arg: 7, scope: !5014, file: !3, line: 1549, type: !2214)
!5028 = !DILocation(line: 1549, column: 54, scope: !5014)
!5029 = !DILocalVariable(name: "next_methods", scope: !5014, file: !3, line: 1551, type: !2214)
!5030 = !DILocation(line: 1551, column: 22, scope: !5014)
!5031 = !DILocation(line: 1552, column: 8, scope: !5014)
!5032 = !DILocation(line: 1552, column: 16, scope: !5014)
!5033 = !DILocation(line: 1552, column: 29, scope: !5014)
!5034 = !DILocation(line: 1552, column: 32, scope: !5014)
!5035 = !DILocation(line: 1552, column: 40, scope: !5014)
!5036 = !DILocation(line: 1553, column: 24, scope: !5014)
!5037 = !DILocalVariable(name: "mclass", scope: !5014, file: !3, line: 1554, type: !2192)
!5038 = !DILocation(line: 1554, column: 19, scope: !5014)
!5039 = !DILocalVariable(name: "wider_mode", scope: !5014, file: !3, line: 1555, type: !5)
!5040 = !DILocation(line: 1555, column: 21, scope: !5014)
!5041 = !DILocalVariable(name: "libfunc", scope: !5014, file: !3, line: 1556, type: !2732)
!5042 = !DILocation(line: 1556, column: 7, scope: !5014)
!5043 = !DILocalVariable(name: "temp", scope: !5014, file: !3, line: 1557, type: !2732)
!5044 = !DILocation(line: 1557, column: 7, scope: !5014)
!5045 = !DILocalVariable(name: "entry_last", scope: !5014, file: !3, line: 1558, type: !2732)
!5046 = !DILocation(line: 1558, column: 7, scope: !5014)
!5047 = !DILocation(line: 1558, column: 20, scope: !5014)
!5048 = !DILocalVariable(name: "last", scope: !5014, file: !3, line: 1559, type: !2732)
!5049 = !DILocation(line: 1559, column: 7, scope: !5014)
!5050 = !DILocation(line: 1561, column: 12, scope: !5014)
!5051 = !DILocation(line: 1561, column: 10, scope: !5014)
!5052 = !DILocation(line: 1566, column: 7, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1566, column: 7)
!5054 = !DILocation(line: 1566, column: 16, scope: !5053)
!5055 = !DILocation(line: 1566, column: 29, scope: !5053)
!5056 = !DILocation(line: 1566, column: 32, scope: !5053)
!5057 = !DILocation(line: 1566, column: 7, scope: !5014)
!5058 = !DILocation(line: 1568, column: 25, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5053, file: !3, line: 1567, column: 5)
!5060 = !DILocation(line: 1568, column: 31, scope: !5059)
!5061 = !DILocation(line: 1568, column: 13, scope: !5059)
!5062 = !DILocation(line: 1568, column: 11, scope: !5059)
!5063 = !DILocation(line: 1569, column: 16, scope: !5059)
!5064 = !DILocation(line: 1570, column: 5, scope: !5059)
!5065 = !DILocation(line: 1573, column: 10, scope: !5014)
!5066 = !DILocation(line: 1573, column: 8, scope: !5014)
!5067 = !DILocation(line: 1577, column: 7, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1577, column: 7)
!5069 = !DILocation(line: 1577, column: 15, scope: !5068)
!5070 = !DILocation(line: 1578, column: 7, scope: !5068)
!5071 = !DILocation(line: 1578, column: 10, scope: !5068)
!5072 = !DILocation(line: 1578, column: 42, scope: !5068)
!5073 = !DILocation(line: 1578, column: 52, scope: !5068)
!5074 = !DILocation(line: 1577, column: 7, scope: !5014)
!5075 = !DILocation(line: 1580, column: 37, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1579, column: 5)
!5077 = !DILocation(line: 1580, column: 43, scope: !5076)
!5078 = !DILocation(line: 1580, column: 53, scope: !5076)
!5079 = !DILocation(line: 1580, column: 58, scope: !5076)
!5080 = !DILocation(line: 1580, column: 63, scope: !5076)
!5081 = !DILocation(line: 1581, column: 9, scope: !5076)
!5082 = !DILocation(line: 1581, column: 20, scope: !5076)
!5083 = !DILocation(line: 1581, column: 29, scope: !5076)
!5084 = !DILocation(line: 1580, column: 14, scope: !5076)
!5085 = !DILocation(line: 1580, column: 12, scope: !5076)
!5086 = !DILocation(line: 1582, column: 11, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 1582, column: 11)
!5088 = !DILocation(line: 1582, column: 11, scope: !5076)
!5089 = !DILocation(line: 1583, column: 9, scope: !5087)
!5090 = !DILocation(line: 1583, column: 2, scope: !5087)
!5091 = !DILocation(line: 1584, column: 5, scope: !5076)
!5092 = !DILocation(line: 1588, column: 9, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1588, column: 7)
!5094 = !DILocation(line: 1588, column: 18, scope: !5093)
!5095 = !DILocation(line: 1589, column: 2, scope: !5093)
!5096 = !DILocation(line: 1589, column: 5, scope: !5093)
!5097 = !DILocation(line: 1589, column: 39, scope: !5093)
!5098 = !DILocation(line: 1589, column: 49, scope: !5093)
!5099 = !DILocation(line: 1590, column: 8, scope: !5093)
!5100 = !DILocation(line: 1590, column: 12, scope: !5093)
!5101 = !DILocation(line: 1590, column: 21, scope: !5093)
!5102 = !DILocation(line: 1591, column: 5, scope: !5093)
!5103 = !DILocation(line: 1591, column: 8, scope: !5093)
!5104 = !DILocation(line: 1591, column: 42, scope: !5093)
!5105 = !DILocation(line: 1591, column: 52, scope: !5093)
!5106 = !DILocation(line: 1592, column: 7, scope: !5093)
!5107 = !DILocation(line: 1592, column: 10, scope: !5093)
!5108 = !DILocation(line: 1592, column: 17, scope: !5093)
!5109 = !DILocation(line: 1588, column: 7, scope: !5014)
!5110 = !DILocalVariable(name: "otheroptab", scope: !5111, file: !3, line: 1594, type: !3938)
!5111 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 1593, column: 5)
!5112 = !DILocation(line: 1594, column: 13, scope: !5111)
!5113 = !DILocation(line: 1594, column: 27, scope: !5111)
!5114 = !DILocation(line: 1594, column: 36, scope: !5111)
!5115 = !DILocalVariable(name: "newop1", scope: !5111, file: !3, line: 1595, type: !2732)
!5116 = !DILocation(line: 1595, column: 11, scope: !5111)
!5117 = !DILocalVariable(name: "bits", scope: !5111, file: !3, line: 1596, type: !7)
!5118 = !DILocation(line: 1596, column: 20, scope: !5111)
!5119 = !DILocation(line: 1596, column: 27, scope: !5111)
!5120 = !DILocation(line: 1598, column: 11, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5111, file: !3, line: 1598, column: 11)
!5122 = !DILocation(line: 1598, column: 11, scope: !5111)
!5123 = !DILocation(line: 1599, column: 18, scope: !5121)
!5124 = !DILocation(line: 1599, column: 16, scope: !5121)
!5125 = !DILocation(line: 1599, column: 9, scope: !5121)
!5126 = !DILocation(line: 1600, column: 24, scope: !5127)
!5127 = distinct !DILexicalBlock(scope: !5121, file: !3, line: 1600, column: 16)
!5128 = !DILocation(line: 1600, column: 47, scope: !5127)
!5129 = !DILocation(line: 1600, column: 16, scope: !5127)
!5130 = !DILocation(line: 1600, column: 56, scope: !5127)
!5131 = !DILocation(line: 1600, column: 61, scope: !5127)
!5132 = !DILocation(line: 1600, column: 53, scope: !5127)
!5133 = !DILocation(line: 1600, column: 16, scope: !5121)
!5134 = !DILocation(line: 1601, column: 30, scope: !5127)
!5135 = !DILocation(line: 1601, column: 46, scope: !5127)
!5136 = !DILocation(line: 1601, column: 18, scope: !5127)
!5137 = !DILocation(line: 1601, column: 16, scope: !5127)
!5138 = !DILocation(line: 1601, column: 9, scope: !5127)
!5139 = !DILocation(line: 1603, column: 32, scope: !5127)
!5140 = !DILocation(line: 1604, column: 11, scope: !5127)
!5141 = !DILocation(line: 1604, column: 27, scope: !5127)
!5142 = !DILocation(line: 1605, column: 21, scope: !5127)
!5143 = !DILocation(line: 1603, column: 18, scope: !5127)
!5144 = !DILocation(line: 1603, column: 16, scope: !5127)
!5145 = !DILocation(line: 1607, column: 37, scope: !5111)
!5146 = !DILocation(line: 1607, column: 43, scope: !5111)
!5147 = !DILocation(line: 1607, column: 55, scope: !5111)
!5148 = !DILocation(line: 1607, column: 60, scope: !5111)
!5149 = !DILocation(line: 1608, column: 9, scope: !5111)
!5150 = !DILocation(line: 1608, column: 17, scope: !5111)
!5151 = !DILocation(line: 1608, column: 28, scope: !5111)
!5152 = !DILocation(line: 1608, column: 37, scope: !5111)
!5153 = !DILocation(line: 1607, column: 14, scope: !5111)
!5154 = !DILocation(line: 1607, column: 12, scope: !5111)
!5155 = !DILocation(line: 1609, column: 11, scope: !5156)
!5156 = distinct !DILexicalBlock(scope: !5111, file: !3, line: 1609, column: 11)
!5157 = !DILocation(line: 1609, column: 11, scope: !5111)
!5158 = !DILocation(line: 1610, column: 9, scope: !5156)
!5159 = !DILocation(line: 1610, column: 2, scope: !5156)
!5160 = !DILocation(line: 1611, column: 5, scope: !5111)
!5161 = !DILocation(line: 1616, column: 7, scope: !5162)
!5162 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1616, column: 7)
!5163 = !DILocation(line: 1616, column: 16, scope: !5162)
!5164 = !DILocation(line: 1617, column: 7, scope: !5162)
!5165 = !DILocation(line: 1617, column: 10, scope: !5162)
!5166 = !DILocation(line: 1617, column: 37, scope: !5162)
!5167 = !DILocation(line: 1618, column: 7, scope: !5162)
!5168 = !DILocation(line: 1618, column: 12, scope: !5162)
!5169 = !DILocation(line: 1619, column: 35, scope: !5162)
!5170 = !DILocation(line: 1620, column: 4, scope: !5162)
!5171 = !DILocation(line: 1616, column: 7, scope: !5014)
!5172 = !DILocation(line: 1622, column: 28, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5162, file: !3, line: 1621, column: 5)
!5174 = !DILocation(line: 1623, column: 7, scope: !5173)
!5175 = !DILocation(line: 1624, column: 7, scope: !5173)
!5176 = !DILocation(line: 1624, column: 12, scope: !5173)
!5177 = !DILocation(line: 1624, column: 27, scope: !5173)
!5178 = !DILocation(line: 1622, column: 14, scope: !5173)
!5179 = !DILocation(line: 1622, column: 12, scope: !5173)
!5180 = !DILocation(line: 1626, column: 11, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5173, file: !3, line: 1626, column: 11)
!5182 = !DILocation(line: 1626, column: 16, scope: !5181)
!5183 = !DILocation(line: 1626, column: 11, scope: !5173)
!5184 = !DILocation(line: 1628, column: 8, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5186, file: !3, line: 1628, column: 8)
!5186 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 1627, column: 2)
!5187 = !DILocation(line: 1628, column: 30, scope: !5185)
!5188 = !DILocation(line: 1628, column: 8, scope: !5186)
!5189 = !DILocation(line: 1631, column: 13, scope: !5185)
!5190 = !DILocation(line: 1631, column: 26, scope: !5185)
!5191 = !DILocation(line: 1631, column: 32, scope: !5185)
!5192 = !DILocation(line: 1631, column: 6, scope: !5185)
!5193 = !DILocation(line: 1633, column: 30, scope: !5185)
!5194 = !DILocation(line: 1633, column: 36, scope: !5185)
!5195 = !DILocation(line: 1633, column: 42, scope: !5185)
!5196 = !DILocation(line: 1633, column: 13, scope: !5185)
!5197 = !DILocation(line: 1633, column: 6, scope: !5185)
!5198 = !DILocation(line: 1635, column: 5, scope: !5173)
!5199 = !DILocation(line: 1641, column: 7, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1641, column: 7)
!5201 = !DILocation(line: 1642, column: 7, scope: !5200)
!5202 = !DILocation(line: 1642, column: 10, scope: !5200)
!5203 = !DILocation(line: 1642, column: 18, scope: !5200)
!5204 = !DILocation(line: 1642, column: 34, scope: !5200)
!5205 = !DILocation(line: 1642, column: 37, scope: !5200)
!5206 = !DILocation(line: 1642, column: 45, scope: !5200)
!5207 = !DILocation(line: 1641, column: 7, scope: !5014)
!5208 = !DILocation(line: 1643, column: 23, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1643, column: 5)
!5210 = !DILocation(line: 1643, column: 21, scope: !5209)
!5211 = !DILocation(line: 1643, column: 10, scope: !5209)
!5212 = !DILocation(line: 1644, column: 3, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 1643, column: 5)
!5214 = !DILocation(line: 1644, column: 14, scope: !5213)
!5215 = !DILocation(line: 1643, column: 5, scope: !5209)
!5216 = !DILocation(line: 1647, column: 6, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5218, file: !3, line: 1647, column: 6)
!5218 = distinct !DILexicalBlock(scope: !5213, file: !3, line: 1646, column: 7)
!5219 = !DILocation(line: 1647, column: 44, scope: !5217)
!5220 = !DILocation(line: 1647, column: 54, scope: !5217)
!5221 = !DILocation(line: 1648, column: 6, scope: !5217)
!5222 = !DILocation(line: 1648, column: 10, scope: !5217)
!5223 = !DILocation(line: 1648, column: 19, scope: !5217)
!5224 = !DILocation(line: 1649, column: 3, scope: !5217)
!5225 = !DILocation(line: 1649, column: 6, scope: !5217)
!5226 = !DILocation(line: 1649, column: 39, scope: !5217)
!5227 = !DILocation(line: 1650, column: 3, scope: !5217)
!5228 = !DILocation(line: 1650, column: 8, scope: !5217)
!5229 = !DILocation(line: 1652, column: 45, scope: !5217)
!5230 = !DILocation(line: 1653, column: 7, scope: !5217)
!5231 = !DILocation(line: 1647, column: 6, scope: !5218)
!5232 = !DILocalVariable(name: "xop0", scope: !5233, file: !3, line: 1655, type: !2732)
!5233 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 1654, column: 4)
!5234 = !DILocation(line: 1655, column: 10, scope: !5233)
!5235 = !DILocation(line: 1655, column: 17, scope: !5233)
!5236 = !DILocalVariable(name: "xop1", scope: !5233, file: !3, line: 1655, type: !2732)
!5237 = !DILocation(line: 1655, column: 22, scope: !5233)
!5238 = !DILocation(line: 1655, column: 29, scope: !5233)
!5239 = !DILocalVariable(name: "no_extend", scope: !5233, file: !3, line: 1656, type: !2756)
!5240 = !DILocation(line: 1656, column: 10, scope: !5233)
!5241 = !DILocation(line: 1662, column: 11, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1662, column: 10)
!5243 = !DILocation(line: 1662, column: 20, scope: !5242)
!5244 = !DILocation(line: 1662, column: 33, scope: !5242)
!5245 = !DILocation(line: 1662, column: 36, scope: !5242)
!5246 = !DILocation(line: 1662, column: 45, scope: !5242)
!5247 = !DILocation(line: 1663, column: 4, scope: !5242)
!5248 = !DILocation(line: 1663, column: 7, scope: !5242)
!5249 = !DILocation(line: 1663, column: 16, scope: !5242)
!5250 = !DILocation(line: 1664, column: 4, scope: !5242)
!5251 = !DILocation(line: 1664, column: 7, scope: !5242)
!5252 = !DILocation(line: 1664, column: 16, scope: !5242)
!5253 = !DILocation(line: 1664, column: 29, scope: !5242)
!5254 = !DILocation(line: 1664, column: 32, scope: !5242)
!5255 = !DILocation(line: 1664, column: 41, scope: !5242)
!5256 = !DILocation(line: 1665, column: 4, scope: !5242)
!5257 = !DILocation(line: 1665, column: 7, scope: !5242)
!5258 = !DILocation(line: 1665, column: 16, scope: !5242)
!5259 = !DILocation(line: 1665, column: 30, scope: !5242)
!5260 = !DILocation(line: 1665, column: 33, scope: !5242)
!5261 = !DILocation(line: 1665, column: 42, scope: !5242)
!5262 = !DILocation(line: 1666, column: 3, scope: !5242)
!5263 = !DILocation(line: 1666, column: 6, scope: !5242)
!5264 = !DILocation(line: 1666, column: 13, scope: !5242)
!5265 = !DILocation(line: 1662, column: 10, scope: !5233)
!5266 = !DILocation(line: 1668, column: 13, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 1667, column: 8)
!5268 = !DILocation(line: 1669, column: 36, scope: !5267)
!5269 = !DILocation(line: 1669, column: 42, scope: !5267)
!5270 = !DILocation(line: 1670, column: 8, scope: !5267)
!5271 = !DILocation(line: 1670, column: 14, scope: !5267)
!5272 = !DILocation(line: 1669, column: 10, scope: !5267)
!5273 = !DILocation(line: 1669, column: 8, scope: !5267)
!5274 = !DILocation(line: 1671, column: 7, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 1671, column: 7)
!5276 = !DILocation(line: 1671, column: 16, scope: !5275)
!5277 = !DILocation(line: 1671, column: 7, scope: !5267)
!5278 = !DILocation(line: 1672, column: 38, scope: !5275)
!5279 = !DILocation(line: 1672, column: 44, scope: !5275)
!5280 = !DILocation(line: 1673, column: 10, scope: !5275)
!5281 = !DILocation(line: 1673, column: 16, scope: !5275)
!5282 = !DILocation(line: 1672, column: 12, scope: !5275)
!5283 = !DILocation(line: 1672, column: 10, scope: !5275)
!5284 = !DILocation(line: 1672, column: 5, scope: !5275)
!5285 = !DILocation(line: 1674, column: 8, scope: !5267)
!5286 = !DILocation(line: 1676, column: 28, scope: !5233)
!5287 = !DILocation(line: 1676, column: 34, scope: !5233)
!5288 = !DILocation(line: 1676, column: 46, scope: !5233)
!5289 = !DILocation(line: 1676, column: 52, scope: !5233)
!5290 = !DILocation(line: 1676, column: 63, scope: !5233)
!5291 = !DILocation(line: 1676, column: 13, scope: !5233)
!5292 = !DILocation(line: 1676, column: 11, scope: !5233)
!5293 = !DILocation(line: 1679, column: 28, scope: !5233)
!5294 = !DILocation(line: 1679, column: 34, scope: !5233)
!5295 = !DILocation(line: 1679, column: 46, scope: !5233)
!5296 = !DILocation(line: 1679, column: 52, scope: !5233)
!5297 = !DILocation(line: 1680, column: 7, scope: !5233)
!5298 = !DILocation(line: 1680, column: 17, scope: !5233)
!5299 = !DILocation(line: 1680, column: 20, scope: !5233)
!5300 = !DILocation(line: 1680, column: 29, scope: !5233)
!5301 = !DILocation(line: 0, scope: !5233)
!5302 = !DILocation(line: 1679, column: 13, scope: !5233)
!5303 = !DILocation(line: 1679, column: 11, scope: !5233)
!5304 = !DILocation(line: 1682, column: 27, scope: !5233)
!5305 = !DILocation(line: 1682, column: 39, scope: !5233)
!5306 = !DILocation(line: 1682, column: 49, scope: !5233)
!5307 = !DILocation(line: 1682, column: 55, scope: !5233)
!5308 = !DILocation(line: 1683, column: 6, scope: !5233)
!5309 = !DILocation(line: 1682, column: 13, scope: !5233)
!5310 = !DILocation(line: 1682, column: 11, scope: !5233)
!5311 = !DILocation(line: 1684, column: 10, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1684, column: 10)
!5313 = !DILocation(line: 1684, column: 10, scope: !5233)
!5314 = !DILocation(line: 1686, column: 7, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 1686, column: 7)
!5316 = distinct !DILexicalBlock(scope: !5312, file: !3, line: 1685, column: 8)
!5317 = !DILocation(line: 1686, column: 14, scope: !5315)
!5318 = !DILocation(line: 1686, column: 7, scope: !5316)
!5319 = !DILocation(line: 1690, column: 11, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 1690, column: 11)
!5321 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 1689, column: 5)
!5322 = !DILocation(line: 1690, column: 18, scope: !5320)
!5323 = !DILocation(line: 1690, column: 11, scope: !5321)
!5324 = !DILocation(line: 1691, column: 31, scope: !5320)
!5325 = !DILocation(line: 1691, column: 18, scope: !5320)
!5326 = !DILocation(line: 1691, column: 16, scope: !5320)
!5327 = !DILocation(line: 1691, column: 9, scope: !5320)
!5328 = !DILocation(line: 1692, column: 21, scope: !5321)
!5329 = !DILocation(line: 1692, column: 29, scope: !5321)
!5330 = !DILocation(line: 1692, column: 7, scope: !5321)
!5331 = !DILocation(line: 1693, column: 14, scope: !5321)
!5332 = !DILocation(line: 1693, column: 7, scope: !5321)
!5333 = !DILocation(line: 1696, column: 12, scope: !5315)
!5334 = !DILocation(line: 1696, column: 25, scope: !5315)
!5335 = !DILocation(line: 1696, column: 31, scope: !5315)
!5336 = !DILocation(line: 1696, column: 5, scope: !5315)
!5337 = !DILocation(line: 1699, column: 28, scope: !5312)
!5338 = !DILocation(line: 1699, column: 8, scope: !5312)
!5339 = !DILocation(line: 1700, column: 4, scope: !5233)
!5340 = !DILocation(line: 1701, column: 7, scope: !5218)
!5341 = !DILocation(line: 1645, column: 16, scope: !5213)
!5342 = !DILocation(line: 1645, column: 14, scope: !5213)
!5343 = !DILocation(line: 1643, column: 5, scope: !5213)
!5344 = distinct !{!5344, !5215, !5345}
!5345 = !DILocation(line: 1701, column: 7, scope: !5209)
!5346 = !DILocation(line: 1707, column: 28, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1707, column: 7)
!5348 = !DILocation(line: 1707, column: 7, scope: !5347)
!5349 = !DILocation(line: 1708, column: 7, scope: !5347)
!5350 = !DILocation(line: 1708, column: 49, scope: !5347)
!5351 = !DILocation(line: 1708, column: 57, scope: !5347)
!5352 = !DILocation(line: 1708, column: 62, scope: !5347)
!5353 = !DILocation(line: 1708, column: 10, scope: !5347)
!5354 = !DILocation(line: 1707, column: 7, scope: !5014)
!5355 = !DILocation(line: 1710, column: 14, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5347, file: !3, line: 1709, column: 5)
!5357 = !DILocation(line: 1710, column: 12, scope: !5356)
!5358 = !DILocation(line: 1711, column: 13, scope: !5356)
!5359 = !DILocation(line: 1711, column: 11, scope: !5356)
!5360 = !DILocation(line: 1712, column: 13, scope: !5356)
!5361 = !DILocation(line: 1712, column: 11, scope: !5356)
!5362 = !DILocation(line: 1713, column: 5, scope: !5356)
!5363 = !DILocation(line: 1716, column: 8, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1716, column: 7)
!5365 = !DILocation(line: 1716, column: 17, scope: !5364)
!5366 = !DILocation(line: 1716, column: 30, scope: !5364)
!5367 = !DILocation(line: 1716, column: 33, scope: !5364)
!5368 = !DILocation(line: 1716, column: 42, scope: !5364)
!5369 = !DILocation(line: 1716, column: 55, scope: !5364)
!5370 = !DILocation(line: 1716, column: 58, scope: !5364)
!5371 = !DILocation(line: 1716, column: 67, scope: !5364)
!5372 = !DILocation(line: 1717, column: 7, scope: !5364)
!5373 = !DILocation(line: 1717, column: 10, scope: !5364)
!5374 = !DILocation(line: 1717, column: 17, scope: !5364)
!5375 = !DILocation(line: 1718, column: 7, scope: !5364)
!5376 = !DILocation(line: 1718, column: 10, scope: !5364)
!5377 = !DILocation(line: 1718, column: 31, scope: !5364)
!5378 = !DILocation(line: 1719, column: 7, scope: !5364)
!5379 = !DILocation(line: 1719, column: 10, scope: !5364)
!5380 = !DILocation(line: 1719, column: 47, scope: !5364)
!5381 = !DILocation(line: 1719, column: 57, scope: !5364)
!5382 = !DILocation(line: 1716, column: 7, scope: !5014)
!5383 = !DILocalVariable(name: "i", scope: !5384, file: !3, line: 1721, type: !2756)
!5384 = distinct !DILexicalBlock(scope: !5364, file: !3, line: 1720, column: 5)
!5385 = !DILocation(line: 1721, column: 11, scope: !5384)
!5386 = !DILocalVariable(name: "insns", scope: !5384, file: !3, line: 1722, type: !2732)
!5387 = !DILocation(line: 1722, column: 11, scope: !5384)
!5388 = !DILocation(line: 1726, column: 11, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5384, file: !3, line: 1726, column: 11)
!5390 = !DILocation(line: 1726, column: 18, scope: !5389)
!5391 = !DILocation(line: 1726, column: 23, scope: !5389)
!5392 = !DILocation(line: 1726, column: 26, scope: !5389)
!5393 = !DILocation(line: 1726, column: 36, scope: !5389)
!5394 = !DILocation(line: 1726, column: 33, scope: !5389)
!5395 = !DILocation(line: 1726, column: 40, scope: !5389)
!5396 = !DILocation(line: 1726, column: 43, scope: !5389)
!5397 = !DILocation(line: 1726, column: 53, scope: !5389)
!5398 = !DILocation(line: 1726, column: 50, scope: !5389)
!5399 = !DILocation(line: 1726, column: 11, scope: !5384)
!5400 = !DILocation(line: 1727, column: 24, scope: !5389)
!5401 = !DILocation(line: 1727, column: 11, scope: !5389)
!5402 = !DILocation(line: 1727, column: 9, scope: !5389)
!5403 = !DILocation(line: 1727, column: 2, scope: !5389)
!5404 = !DILocation(line: 1729, column: 7, scope: !5384)
!5405 = !DILocation(line: 1732, column: 14, scope: !5406)
!5406 = distinct !DILexicalBlock(scope: !5384, file: !3, line: 1732, column: 7)
!5407 = !DILocation(line: 1732, column: 12, scope: !5406)
!5408 = !DILocation(line: 1732, column: 19, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 1732, column: 7)
!5410 = !DILocation(line: 1732, column: 23, scope: !5409)
!5411 = !DILocation(line: 1732, column: 47, scope: !5409)
!5412 = !DILocation(line: 1732, column: 21, scope: !5409)
!5413 = !DILocation(line: 1732, column: 7, scope: !5406)
!5414 = !DILocalVariable(name: "target_piece", scope: !5415, file: !3, line: 1734, type: !2732)
!5415 = distinct !DILexicalBlock(scope: !5409, file: !3, line: 1733, column: 2)
!5416 = !DILocation(line: 1734, column: 8, scope: !5415)
!5417 = !DILocation(line: 1734, column: 40, scope: !5415)
!5418 = !DILocation(line: 1734, column: 48, scope: !5415)
!5419 = !DILocation(line: 1734, column: 54, scope: !5415)
!5420 = !DILocation(line: 1734, column: 23, scope: !5415)
!5421 = !DILocalVariable(name: "x", scope: !5415, file: !3, line: 1735, type: !2732)
!5422 = !DILocation(line: 1735, column: 8, scope: !5415)
!5423 = !DILocation(line: 1735, column: 26, scope: !5415)
!5424 = !DILocation(line: 1735, column: 37, scope: !5415)
!5425 = !DILocation(line: 1736, column: 28, scope: !5415)
!5426 = !DILocation(line: 1736, column: 33, scope: !5415)
!5427 = !DILocation(line: 1736, column: 36, scope: !5415)
!5428 = !DILocation(line: 1736, column: 5, scope: !5415)
!5429 = !DILocation(line: 1737, column: 28, scope: !5415)
!5430 = !DILocation(line: 1737, column: 33, scope: !5415)
!5431 = !DILocation(line: 1737, column: 36, scope: !5415)
!5432 = !DILocation(line: 1737, column: 5, scope: !5415)
!5433 = !DILocation(line: 1738, column: 5, scope: !5415)
!5434 = !DILocation(line: 1738, column: 19, scope: !5415)
!5435 = !DILocation(line: 1738, column: 30, scope: !5415)
!5436 = !DILocation(line: 1735, column: 12, scope: !5415)
!5437 = !DILocation(line: 1740, column: 8, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5415, file: !3, line: 1740, column: 8)
!5439 = !DILocation(line: 1740, column: 10, scope: !5438)
!5440 = !DILocation(line: 1740, column: 8, scope: !5415)
!5441 = !DILocation(line: 1741, column: 6, scope: !5438)
!5442 = !DILocation(line: 1743, column: 8, scope: !5443)
!5443 = distinct !DILexicalBlock(scope: !5415, file: !3, line: 1743, column: 8)
!5444 = !DILocation(line: 1743, column: 24, scope: !5443)
!5445 = !DILocation(line: 1743, column: 21, scope: !5443)
!5446 = !DILocation(line: 1743, column: 8, scope: !5415)
!5447 = !DILocation(line: 1744, column: 22, scope: !5443)
!5448 = !DILocation(line: 1744, column: 36, scope: !5443)
!5449 = !DILocation(line: 1744, column: 6, scope: !5443)
!5450 = !DILocation(line: 1745, column: 2, scope: !5415)
!5451 = !DILocation(line: 1732, column: 65, scope: !5409)
!5452 = !DILocation(line: 1732, column: 7, scope: !5409)
!5453 = distinct !{!5453, !5413, !5454}
!5454 = !DILocation(line: 1745, column: 2, scope: !5406)
!5455 = !DILocation(line: 1747, column: 15, scope: !5384)
!5456 = !DILocation(line: 1747, column: 13, scope: !5384)
!5457 = !DILocation(line: 1748, column: 7, scope: !5384)
!5458 = !DILocation(line: 1750, column: 11, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5384, file: !3, line: 1750, column: 11)
!5460 = !DILocation(line: 1750, column: 16, scope: !5459)
!5461 = !DILocation(line: 1750, column: 40, scope: !5459)
!5462 = !DILocation(line: 1750, column: 13, scope: !5459)
!5463 = !DILocation(line: 1750, column: 11, scope: !5384)
!5464 = !DILocation(line: 1752, column: 15, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 1751, column: 2)
!5466 = !DILocation(line: 1752, column: 4, scope: !5465)
!5467 = !DILocation(line: 1753, column: 11, scope: !5465)
!5468 = !DILocation(line: 1753, column: 4, scope: !5465)
!5469 = !DILocation(line: 1755, column: 5, scope: !5384)
!5470 = !DILocation(line: 1758, column: 8, scope: !5471)
!5471 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1758, column: 7)
!5472 = !DILocation(line: 1758, column: 17, scope: !5471)
!5473 = !DILocation(line: 1758, column: 31, scope: !5471)
!5474 = !DILocation(line: 1758, column: 34, scope: !5471)
!5475 = !DILocation(line: 1758, column: 43, scope: !5471)
!5476 = !DILocation(line: 1759, column: 8, scope: !5471)
!5477 = !DILocation(line: 1759, column: 11, scope: !5471)
!5478 = !DILocation(line: 1759, column: 20, scope: !5471)
!5479 = !DILocation(line: 1760, column: 7, scope: !5471)
!5480 = !DILocation(line: 1760, column: 10, scope: !5471)
!5481 = !DILocation(line: 1760, column: 17, scope: !5471)
!5482 = !DILocation(line: 1761, column: 7, scope: !5471)
!5483 = !DILocation(line: 1761, column: 11, scope: !5471)
!5484 = !DILocation(line: 1761, column: 29, scope: !5471)
!5485 = !DILocation(line: 1761, column: 32, scope: !5471)
!5486 = !DILocation(line: 1762, column: 7, scope: !5471)
!5487 = !DILocation(line: 1762, column: 10, scope: !5471)
!5488 = !DILocation(line: 1762, column: 31, scope: !5471)
!5489 = !DILocation(line: 1763, column: 7, scope: !5471)
!5490 = !DILocation(line: 1763, column: 10, scope: !5471)
!5491 = !DILocation(line: 1763, column: 47, scope: !5471)
!5492 = !DILocation(line: 1763, column: 57, scope: !5471)
!5493 = !DILocation(line: 1764, column: 7, scope: !5471)
!5494 = !DILocation(line: 1764, column: 10, scope: !5471)
!5495 = !DILocation(line: 1764, column: 49, scope: !5471)
!5496 = !DILocation(line: 1764, column: 59, scope: !5471)
!5497 = !DILocation(line: 1765, column: 7, scope: !5471)
!5498 = !DILocation(line: 1765, column: 10, scope: !5471)
!5499 = !DILocation(line: 1765, column: 49, scope: !5471)
!5500 = !DILocation(line: 1765, column: 59, scope: !5471)
!5501 = !DILocation(line: 1758, column: 7, scope: !5014)
!5502 = !DILocalVariable(name: "shift_mask", scope: !5503, file: !3, line: 1767, type: !2723)
!5503 = distinct !DILexicalBlock(scope: !5471, file: !3, line: 1766, column: 5)
!5504 = !DILocation(line: 1767, column: 30, scope: !5503)
!5505 = !DILocalVariable(name: "double_shift_mask", scope: !5503, file: !3, line: 1767, type: !2723)
!5506 = !DILocation(line: 1767, column: 42, scope: !5503)
!5507 = !DILocalVariable(name: "op1_mode", scope: !5503, file: !3, line: 1768, type: !5)
!5508 = !DILocation(line: 1768, column: 25, scope: !5503)
!5509 = !DILocation(line: 1770, column: 35, scope: !5503)
!5510 = !DILocation(line: 1770, column: 58, scope: !5503)
!5511 = !DILocation(line: 1770, column: 27, scope: !5503)
!5512 = !DILocation(line: 1770, column: 25, scope: !5503)
!5513 = !DILocation(line: 1771, column: 28, scope: !5503)
!5514 = !DILocation(line: 1771, column: 51, scope: !5503)
!5515 = !DILocation(line: 1771, column: 20, scope: !5503)
!5516 = !DILocation(line: 1771, column: 18, scope: !5503)
!5517 = !DILocation(line: 1772, column: 18, scope: !5503)
!5518 = !DILocation(line: 1772, column: 33, scope: !5503)
!5519 = !DILocation(line: 1772, column: 47, scope: !5503)
!5520 = !DILocation(line: 1772, column: 64, scope: !5503)
!5521 = !DILocation(line: 1772, column: 16, scope: !5503)
!5522 = !DILocation(line: 1775, column: 11, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 1775, column: 11)
!5524 = !DILocation(line: 1775, column: 29, scope: !5523)
!5525 = !DILocation(line: 1775, column: 33, scope: !5523)
!5526 = !DILocation(line: 1775, column: 36, scope: !5523)
!5527 = !DILocation(line: 1775, column: 11, scope: !5503)
!5528 = !DILocation(line: 1776, column: 8, scope: !5523)
!5529 = !DILocation(line: 1776, column: 6, scope: !5523)
!5530 = !DILocation(line: 1776, column: 2, scope: !5523)
!5531 = !DILocation(line: 1778, column: 11, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 1778, column: 11)
!5533 = !DILocation(line: 1778, column: 18, scope: !5532)
!5534 = !DILocation(line: 1778, column: 15, scope: !5532)
!5535 = !DILocation(line: 1778, column: 11, scope: !5503)
!5536 = !DILocation(line: 1779, column: 9, scope: !5532)
!5537 = !DILocation(line: 1779, column: 2, scope: !5532)
!5538 = !DILocation(line: 1783, column: 11, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 1783, column: 11)
!5540 = !DILocation(line: 1783, column: 29, scope: !5539)
!5541 = !DILocation(line: 1784, column: 4, scope: !5539)
!5542 = !DILocation(line: 1784, column: 8, scope: !5539)
!5543 = !DILocation(line: 1784, column: 19, scope: !5539)
!5544 = !DILocation(line: 1785, column: 8, scope: !5539)
!5545 = !DILocation(line: 1785, column: 11, scope: !5539)
!5546 = !DILocation(line: 1785, column: 29, scope: !5539)
!5547 = !DILocation(line: 1783, column: 11, scope: !5503)
!5548 = !DILocalVariable(name: "insns", scope: !5549, file: !3, line: 1787, type: !2732)
!5549 = distinct !DILexicalBlock(scope: !5539, file: !3, line: 1786, column: 2)
!5550 = !DILocation(line: 1787, column: 8, scope: !5549)
!5551 = !DILocalVariable(name: "into_target", scope: !5549, file: !3, line: 1788, type: !2732)
!5552 = !DILocation(line: 1788, column: 8, scope: !5549)
!5553 = !DILocalVariable(name: "outof_target", scope: !5549, file: !3, line: 1788, type: !2732)
!5554 = !DILocation(line: 1788, column: 21, scope: !5549)
!5555 = !DILocalVariable(name: "into_input", scope: !5549, file: !3, line: 1789, type: !2732)
!5556 = !DILocation(line: 1789, column: 8, scope: !5549)
!5557 = !DILocalVariable(name: "outof_input", scope: !5549, file: !3, line: 1789, type: !2732)
!5558 = !DILocation(line: 1789, column: 20, scope: !5549)
!5559 = !DILocalVariable(name: "left_shift", scope: !5549, file: !3, line: 1790, type: !2756)
!5560 = !DILocation(line: 1790, column: 8, scope: !5549)
!5561 = !DILocalVariable(name: "outof_word", scope: !5549, file: !3, line: 1790, type: !2756)
!5562 = !DILocation(line: 1790, column: 20, scope: !5549)
!5563 = !DILocation(line: 1794, column: 8, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1794, column: 8)
!5565 = !DILocation(line: 1794, column: 15, scope: !5564)
!5566 = !DILocation(line: 1794, column: 20, scope: !5564)
!5567 = !DILocation(line: 1794, column: 23, scope: !5564)
!5568 = !DILocation(line: 1794, column: 33, scope: !5564)
!5569 = !DILocation(line: 1794, column: 30, scope: !5564)
!5570 = !DILocation(line: 1794, column: 37, scope: !5564)
!5571 = !DILocation(line: 1794, column: 40, scope: !5564)
!5572 = !DILocation(line: 1794, column: 50, scope: !5564)
!5573 = !DILocation(line: 1794, column: 47, scope: !5564)
!5574 = !DILocation(line: 1794, column: 8, scope: !5549)
!5575 = !DILocation(line: 1795, column: 28, scope: !5564)
!5576 = !DILocation(line: 1795, column: 15, scope: !5564)
!5577 = !DILocation(line: 1795, column: 13, scope: !5564)
!5578 = !DILocation(line: 1795, column: 6, scope: !5564)
!5579 = !DILocation(line: 1797, column: 4, scope: !5549)
!5580 = !DILocation(line: 1804, column: 17, scope: !5549)
!5581 = !DILocation(line: 1804, column: 26, scope: !5549)
!5582 = !DILocation(line: 1804, column: 15, scope: !5549)
!5583 = !DILocation(line: 1805, column: 17, scope: !5549)
!5584 = !DILocation(line: 1805, column: 28, scope: !5549)
!5585 = !DILocation(line: 1805, column: 15, scope: !5549)
!5586 = !DILocation(line: 1807, column: 36, scope: !5549)
!5587 = !DILocation(line: 1807, column: 44, scope: !5549)
!5588 = !DILocation(line: 1807, column: 59, scope: !5549)
!5589 = !DILocation(line: 1807, column: 19, scope: !5549)
!5590 = !DILocation(line: 1807, column: 17, scope: !5549)
!5591 = !DILocation(line: 1808, column: 35, scope: !5549)
!5592 = !DILocation(line: 1808, column: 47, scope: !5549)
!5593 = !DILocation(line: 1808, column: 45, scope: !5549)
!5594 = !DILocation(line: 1808, column: 62, scope: !5549)
!5595 = !DILocation(line: 1808, column: 18, scope: !5549)
!5596 = !DILocation(line: 1808, column: 16, scope: !5549)
!5597 = !DILocation(line: 1810, column: 41, scope: !5549)
!5598 = !DILocation(line: 1810, column: 46, scope: !5549)
!5599 = !DILocation(line: 1810, column: 58, scope: !5549)
!5600 = !DILocation(line: 1810, column: 18, scope: !5549)
!5601 = !DILocation(line: 1810, column: 16, scope: !5549)
!5602 = !DILocation(line: 1811, column: 40, scope: !5549)
!5603 = !DILocation(line: 1811, column: 49, scope: !5549)
!5604 = !DILocation(line: 1811, column: 47, scope: !5549)
!5605 = !DILocation(line: 1811, column: 61, scope: !5549)
!5606 = !DILocation(line: 1811, column: 17, scope: !5549)
!5607 = !DILocation(line: 1811, column: 15, scope: !5549)
!5608 = !DILocation(line: 1813, column: 33, scope: !5609)
!5609 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1813, column: 8)
!5610 = !DILocation(line: 1813, column: 43, scope: !5609)
!5611 = !DILocation(line: 1814, column: 12, scope: !5609)
!5612 = !DILocation(line: 1814, column: 25, scope: !5609)
!5613 = !DILocation(line: 1814, column: 37, scope: !5609)
!5614 = !DILocation(line: 1815, column: 12, scope: !5609)
!5615 = !DILocation(line: 1815, column: 26, scope: !5609)
!5616 = !DILocation(line: 1816, column: 12, scope: !5609)
!5617 = !DILocation(line: 1816, column: 23, scope: !5609)
!5618 = !DILocation(line: 1816, column: 37, scope: !5609)
!5619 = !DILocation(line: 1813, column: 8, scope: !5609)
!5620 = !DILocation(line: 1813, column: 8, scope: !5549)
!5621 = !DILocation(line: 1818, column: 16, scope: !5622)
!5622 = distinct !DILexicalBlock(scope: !5609, file: !3, line: 1817, column: 6)
!5623 = !DILocation(line: 1818, column: 14, scope: !5622)
!5624 = !DILocation(line: 1819, column: 8, scope: !5622)
!5625 = !DILocation(line: 1821, column: 19, scope: !5622)
!5626 = !DILocation(line: 1821, column: 8, scope: !5622)
!5627 = !DILocation(line: 1822, column: 15, scope: !5622)
!5628 = !DILocation(line: 1822, column: 8, scope: !5622)
!5629 = !DILocation(line: 1824, column: 4, scope: !5549)
!5630 = !DILocation(line: 1825, column: 2, scope: !5549)
!5631 = !DILocation(line: 1826, column: 5, scope: !5503)
!5632 = !DILocation(line: 1829, column: 8, scope: !5633)
!5633 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1829, column: 7)
!5634 = !DILocation(line: 1829, column: 17, scope: !5633)
!5635 = !DILocation(line: 1829, column: 31, scope: !5633)
!5636 = !DILocation(line: 1829, column: 34, scope: !5633)
!5637 = !DILocation(line: 1829, column: 43, scope: !5633)
!5638 = !DILocation(line: 1830, column: 7, scope: !5633)
!5639 = !DILocation(line: 1830, column: 10, scope: !5633)
!5640 = !DILocation(line: 1830, column: 17, scope: !5633)
!5641 = !DILocation(line: 1831, column: 7, scope: !5633)
!5642 = !DILocation(line: 1831, column: 10, scope: !5633)
!5643 = !DILocation(line: 1832, column: 7, scope: !5633)
!5644 = !DILocation(line: 1832, column: 10, scope: !5633)
!5645 = !DILocation(line: 1832, column: 31, scope: !5633)
!5646 = !DILocation(line: 1833, column: 7, scope: !5633)
!5647 = !DILocation(line: 1833, column: 10, scope: !5633)
!5648 = !DILocation(line: 1833, column: 49, scope: !5633)
!5649 = !DILocation(line: 1833, column: 59, scope: !5633)
!5650 = !DILocation(line: 1834, column: 7, scope: !5633)
!5651 = !DILocation(line: 1834, column: 10, scope: !5633)
!5652 = !DILocation(line: 1834, column: 49, scope: !5633)
!5653 = !DILocation(line: 1834, column: 59, scope: !5633)
!5654 = !DILocation(line: 1829, column: 7, scope: !5014)
!5655 = !DILocalVariable(name: "insns", scope: !5656, file: !3, line: 1836, type: !2732)
!5656 = distinct !DILexicalBlock(scope: !5633, file: !3, line: 1835, column: 5)
!5657 = !DILocation(line: 1836, column: 11, scope: !5656)
!5658 = !DILocalVariable(name: "into_target", scope: !5656, file: !3, line: 1837, type: !2732)
!5659 = !DILocation(line: 1837, column: 11, scope: !5656)
!5660 = !DILocalVariable(name: "outof_target", scope: !5656, file: !3, line: 1837, type: !2732)
!5661 = !DILocation(line: 1837, column: 24, scope: !5656)
!5662 = !DILocalVariable(name: "into_input", scope: !5656, file: !3, line: 1838, type: !2732)
!5663 = !DILocation(line: 1838, column: 11, scope: !5656)
!5664 = !DILocalVariable(name: "outof_input", scope: !5656, file: !3, line: 1838, type: !2732)
!5665 = !DILocation(line: 1838, column: 23, scope: !5656)
!5666 = !DILocalVariable(name: "inter", scope: !5656, file: !3, line: 1839, type: !2732)
!5667 = !DILocation(line: 1839, column: 11, scope: !5656)
!5668 = !DILocalVariable(name: "shift_count", scope: !5656, file: !3, line: 1840, type: !2756)
!5669 = !DILocation(line: 1840, column: 11, scope: !5656)
!5670 = !DILocalVariable(name: "left_shift", scope: !5656, file: !3, line: 1840, type: !2756)
!5671 = !DILocation(line: 1840, column: 24, scope: !5656)
!5672 = !DILocalVariable(name: "outof_word", scope: !5656, file: !3, line: 1840, type: !2756)
!5673 = !DILocation(line: 1840, column: 36, scope: !5656)
!5674 = !DILocation(line: 1848, column: 11, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1848, column: 11)
!5676 = !DILocation(line: 1848, column: 18, scope: !5675)
!5677 = !DILocation(line: 1848, column: 23, scope: !5675)
!5678 = !DILocation(line: 1848, column: 26, scope: !5675)
!5679 = !DILocation(line: 1848, column: 36, scope: !5675)
!5680 = !DILocation(line: 1848, column: 33, scope: !5675)
!5681 = !DILocation(line: 1848, column: 40, scope: !5675)
!5682 = !DILocation(line: 1848, column: 43, scope: !5675)
!5683 = !DILocation(line: 1848, column: 53, scope: !5675)
!5684 = !DILocation(line: 1848, column: 50, scope: !5675)
!5685 = !DILocation(line: 1848, column: 57, scope: !5675)
!5686 = !DILocation(line: 1848, column: 62, scope: !5675)
!5687 = !DILocation(line: 1848, column: 11, scope: !5656)
!5688 = !DILocation(line: 1849, column: 24, scope: !5675)
!5689 = !DILocation(line: 1849, column: 11, scope: !5675)
!5690 = !DILocation(line: 1849, column: 9, scope: !5675)
!5691 = !DILocation(line: 1849, column: 2, scope: !5675)
!5692 = !DILocation(line: 1851, column: 7, scope: !5656)
!5693 = !DILocation(line: 1853, column: 21, scope: !5656)
!5694 = !DILocation(line: 1853, column: 19, scope: !5656)
!5695 = !DILocation(line: 1860, column: 21, scope: !5656)
!5696 = !DILocation(line: 1860, column: 30, scope: !5656)
!5697 = !DILocation(line: 1860, column: 18, scope: !5656)
!5698 = !DILocation(line: 1861, column: 20, scope: !5656)
!5699 = !DILocation(line: 1861, column: 31, scope: !5656)
!5700 = !DILocation(line: 1861, column: 18, scope: !5656)
!5701 = !DILocation(line: 1863, column: 39, scope: !5656)
!5702 = !DILocation(line: 1863, column: 47, scope: !5656)
!5703 = !DILocation(line: 1863, column: 62, scope: !5656)
!5704 = !DILocation(line: 1863, column: 22, scope: !5656)
!5705 = !DILocation(line: 1863, column: 20, scope: !5656)
!5706 = !DILocation(line: 1864, column: 38, scope: !5656)
!5707 = !DILocation(line: 1864, column: 50, scope: !5656)
!5708 = !DILocation(line: 1864, column: 48, scope: !5656)
!5709 = !DILocation(line: 1864, column: 65, scope: !5656)
!5710 = !DILocation(line: 1864, column: 21, scope: !5656)
!5711 = !DILocation(line: 1864, column: 19, scope: !5656)
!5712 = !DILocation(line: 1866, column: 44, scope: !5656)
!5713 = !DILocation(line: 1866, column: 49, scope: !5656)
!5714 = !DILocation(line: 1866, column: 61, scope: !5656)
!5715 = !DILocation(line: 1866, column: 21, scope: !5656)
!5716 = !DILocation(line: 1866, column: 19, scope: !5656)
!5717 = !DILocation(line: 1867, column: 43, scope: !5656)
!5718 = !DILocation(line: 1867, column: 52, scope: !5656)
!5719 = !DILocation(line: 1867, column: 50, scope: !5656)
!5720 = !DILocation(line: 1867, column: 64, scope: !5656)
!5721 = !DILocation(line: 1867, column: 20, scope: !5656)
!5722 = !DILocation(line: 1867, column: 18, scope: !5656)
!5723 = !DILocation(line: 1869, column: 11, scope: !5724)
!5724 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1869, column: 11)
!5725 = !DILocation(line: 1869, column: 23, scope: !5724)
!5726 = !DILocation(line: 1869, column: 11, scope: !5656)
!5727 = !DILocation(line: 1872, column: 20, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5724, file: !3, line: 1870, column: 2)
!5729 = !DILocation(line: 1872, column: 34, scope: !5728)
!5730 = !DILocation(line: 1872, column: 4, scope: !5728)
!5731 = !DILocation(line: 1873, column: 20, scope: !5728)
!5732 = !DILocation(line: 1873, column: 33, scope: !5728)
!5733 = !DILocation(line: 1873, column: 4, scope: !5728)
!5734 = !DILocation(line: 1874, column: 12, scope: !5728)
!5735 = !DILocation(line: 1874, column: 10, scope: !5728)
!5736 = !DILocation(line: 1875, column: 2, scope: !5728)
!5737 = !DILocalVariable(name: "into_temp1", scope: !5738, file: !3, line: 1878, type: !2732)
!5738 = distinct !DILexicalBlock(scope: !5724, file: !3, line: 1877, column: 2)
!5739 = !DILocation(line: 1878, column: 8, scope: !5738)
!5740 = !DILocalVariable(name: "into_temp2", scope: !5738, file: !3, line: 1878, type: !2732)
!5741 = !DILocation(line: 1878, column: 20, scope: !5738)
!5742 = !DILocalVariable(name: "outof_temp1", scope: !5738, file: !3, line: 1878, type: !2732)
!5743 = !DILocation(line: 1878, column: 32, scope: !5738)
!5744 = !DILocalVariable(name: "outof_temp2", scope: !5738, file: !3, line: 1878, type: !2732)
!5745 = !DILocation(line: 1878, column: 45, scope: !5738)
!5746 = !DILocalVariable(name: "first_shift_count", scope: !5738, file: !3, line: 1879, type: !2732)
!5747 = !DILocation(line: 1879, column: 8, scope: !5738)
!5748 = !DILocalVariable(name: "second_shift_count", scope: !5738, file: !3, line: 1879, type: !2732)
!5749 = !DILocation(line: 1879, column: 27, scope: !5738)
!5750 = !DILocalVariable(name: "reverse_unsigned_shift", scope: !5738, file: !3, line: 1880, type: !3938)
!5751 = !DILocation(line: 1880, column: 10, scope: !5738)
!5752 = !DILocalVariable(name: "unsigned_shift", scope: !5738, file: !3, line: 1880, type: !3938)
!5753 = !DILocation(line: 1880, column: 34, scope: !5738)
!5754 = !DILocation(line: 1882, column: 30, scope: !5738)
!5755 = !DILocation(line: 1882, column: 44, scope: !5738)
!5756 = !DILocation(line: 1882, column: 56, scope: !5738)
!5757 = !DILocation(line: 1882, column: 41, scope: !5738)
!5758 = !DILocation(line: 1882, column: 27, scope: !5738)
!5759 = !DILocation(line: 1885, column: 22, scope: !5738)
!5760 = !DILocation(line: 1885, column: 36, scope: !5738)
!5761 = !DILocation(line: 1885, column: 48, scope: !5738)
!5762 = !DILocation(line: 1885, column: 33, scope: !5738)
!5763 = !DILocation(line: 1885, column: 19, scope: !5738)
!5764 = !DILocation(line: 1888, column: 8, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 1888, column: 8)
!5766 = !DILocation(line: 1888, column: 20, scope: !5765)
!5767 = !DILocation(line: 1888, column: 8, scope: !5738)
!5768 = !DILocation(line: 1890, column: 28, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 1889, column: 6)
!5770 = !DILocation(line: 1890, column: 26, scope: !5769)
!5771 = !DILocation(line: 1891, column: 29, scope: !5769)
!5772 = !DILocation(line: 1891, column: 27, scope: !5769)
!5773 = !DILocation(line: 1892, column: 6, scope: !5769)
!5774 = !DILocation(line: 1895, column: 28, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 1894, column: 6)
!5776 = !DILocation(line: 1895, column: 26, scope: !5775)
!5777 = !DILocation(line: 1896, column: 29, scope: !5775)
!5778 = !DILocation(line: 1896, column: 27, scope: !5775)
!5779 = !DILocation(line: 1899, column: 31, scope: !5738)
!5780 = !DILocation(line: 1899, column: 42, scope: !5738)
!5781 = !DILocation(line: 1900, column: 10, scope: !5738)
!5782 = !DILocation(line: 1900, column: 23, scope: !5738)
!5783 = !DILocation(line: 1901, column: 20, scope: !5738)
!5784 = !DILocation(line: 1901, column: 31, scope: !5738)
!5785 = !DILocation(line: 1899, column: 17, scope: !5738)
!5786 = !DILocation(line: 1899, column: 15, scope: !5738)
!5787 = !DILocation(line: 1902, column: 31, scope: !5738)
!5788 = !DILocation(line: 1902, column: 42, scope: !5738)
!5789 = !DILocation(line: 1903, column: 10, scope: !5738)
!5790 = !DILocation(line: 1903, column: 22, scope: !5738)
!5791 = !DILocation(line: 1904, column: 20, scope: !5738)
!5792 = !DILocation(line: 1904, column: 31, scope: !5738)
!5793 = !DILocation(line: 1902, column: 17, scope: !5738)
!5794 = !DILocation(line: 1902, column: 15, scope: !5738)
!5795 = !DILocation(line: 1906, column: 8, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 1906, column: 8)
!5797 = !DILocation(line: 1906, column: 19, scope: !5796)
!5798 = !DILocation(line: 1906, column: 24, scope: !5796)
!5799 = !DILocation(line: 1906, column: 27, scope: !5796)
!5800 = !DILocation(line: 1906, column: 38, scope: !5796)
!5801 = !DILocation(line: 1906, column: 8, scope: !5738)
!5802 = !DILocation(line: 1907, column: 28, scope: !5796)
!5803 = !DILocation(line: 1907, column: 50, scope: !5796)
!5804 = !DILocation(line: 1907, column: 62, scope: !5796)
!5805 = !DILocation(line: 1908, column: 7, scope: !5796)
!5806 = !DILocation(line: 1908, column: 20, scope: !5796)
!5807 = !DILocation(line: 1908, column: 31, scope: !5796)
!5808 = !DILocation(line: 1907, column: 14, scope: !5796)
!5809 = !DILocation(line: 1907, column: 12, scope: !5796)
!5810 = !DILocation(line: 1907, column: 6, scope: !5796)
!5811 = !DILocation(line: 1910, column: 12, scope: !5796)
!5812 = !DILocation(line: 1912, column: 8, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 1912, column: 8)
!5814 = !DILocation(line: 1912, column: 14, scope: !5813)
!5815 = !DILocation(line: 1912, column: 19, scope: !5813)
!5816 = !DILocation(line: 1912, column: 22, scope: !5813)
!5817 = !DILocation(line: 1912, column: 31, scope: !5813)
!5818 = !DILocation(line: 1912, column: 28, scope: !5813)
!5819 = !DILocation(line: 1912, column: 8, scope: !5738)
!5820 = !DILocation(line: 1913, column: 22, scope: !5813)
!5821 = !DILocation(line: 1913, column: 35, scope: !5813)
!5822 = !DILocation(line: 1913, column: 6, scope: !5813)
!5823 = !DILocation(line: 1915, column: 32, scope: !5738)
!5824 = !DILocation(line: 1915, column: 43, scope: !5738)
!5825 = !DILocation(line: 1916, column: 11, scope: !5738)
!5826 = !DILocation(line: 1916, column: 23, scope: !5738)
!5827 = !DILocation(line: 1917, column: 21, scope: !5738)
!5828 = !DILocation(line: 1917, column: 32, scope: !5738)
!5829 = !DILocation(line: 1915, column: 18, scope: !5738)
!5830 = !DILocation(line: 1915, column: 16, scope: !5738)
!5831 = !DILocation(line: 1918, column: 32, scope: !5738)
!5832 = !DILocation(line: 1918, column: 43, scope: !5738)
!5833 = !DILocation(line: 1919, column: 11, scope: !5738)
!5834 = !DILocation(line: 1919, column: 24, scope: !5738)
!5835 = !DILocation(line: 1920, column: 21, scope: !5738)
!5836 = !DILocation(line: 1920, column: 32, scope: !5738)
!5837 = !DILocation(line: 1918, column: 18, scope: !5738)
!5838 = !DILocation(line: 1918, column: 16, scope: !5738)
!5839 = !DILocation(line: 1922, column: 8, scope: !5840)
!5840 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 1922, column: 8)
!5841 = !DILocation(line: 1922, column: 14, scope: !5840)
!5842 = !DILocation(line: 1922, column: 19, scope: !5840)
!5843 = !DILocation(line: 1922, column: 22, scope: !5840)
!5844 = !DILocation(line: 1922, column: 34, scope: !5840)
!5845 = !DILocation(line: 1922, column: 39, scope: !5840)
!5846 = !DILocation(line: 1922, column: 42, scope: !5840)
!5847 = !DILocation(line: 1922, column: 54, scope: !5840)
!5848 = !DILocation(line: 1922, column: 8, scope: !5738)
!5849 = !DILocation(line: 1923, column: 28, scope: !5840)
!5850 = !DILocation(line: 1924, column: 7, scope: !5840)
!5851 = !DILocation(line: 1924, column: 20, scope: !5840)
!5852 = !DILocation(line: 1925, column: 7, scope: !5840)
!5853 = !DILocation(line: 1925, column: 21, scope: !5840)
!5854 = !DILocation(line: 1925, column: 32, scope: !5840)
!5855 = !DILocation(line: 1923, column: 14, scope: !5840)
!5856 = !DILocation(line: 1923, column: 12, scope: !5840)
!5857 = !DILocation(line: 1923, column: 6, scope: !5840)
!5858 = !DILocation(line: 1927, column: 8, scope: !5859)
!5859 = distinct !DILexicalBlock(scope: !5738, file: !3, line: 1927, column: 8)
!5860 = !DILocation(line: 1927, column: 14, scope: !5859)
!5861 = !DILocation(line: 1927, column: 19, scope: !5859)
!5862 = !DILocation(line: 1927, column: 22, scope: !5859)
!5863 = !DILocation(line: 1927, column: 31, scope: !5859)
!5864 = !DILocation(line: 1927, column: 28, scope: !5859)
!5865 = !DILocation(line: 1927, column: 8, scope: !5738)
!5866 = !DILocation(line: 1928, column: 22, scope: !5859)
!5867 = !DILocation(line: 1928, column: 36, scope: !5859)
!5868 = !DILocation(line: 1928, column: 6, scope: !5859)
!5869 = !DILocation(line: 1931, column: 15, scope: !5656)
!5870 = !DILocation(line: 1931, column: 13, scope: !5656)
!5871 = !DILocation(line: 1932, column: 7, scope: !5656)
!5872 = !DILocation(line: 1934, column: 11, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1934, column: 11)
!5874 = !DILocation(line: 1934, column: 17, scope: !5873)
!5875 = !DILocation(line: 1934, column: 11, scope: !5656)
!5876 = !DILocation(line: 1936, column: 15, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 1935, column: 2)
!5878 = !DILocation(line: 1936, column: 4, scope: !5877)
!5879 = !DILocation(line: 1937, column: 11, scope: !5877)
!5880 = !DILocation(line: 1937, column: 4, scope: !5877)
!5881 = !DILocation(line: 1939, column: 5, scope: !5656)
!5882 = !DILocation(line: 1942, column: 8, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1942, column: 7)
!5884 = !DILocation(line: 1942, column: 17, scope: !5883)
!5885 = !DILocation(line: 1942, column: 30, scope: !5883)
!5886 = !DILocation(line: 1942, column: 33, scope: !5883)
!5887 = !DILocation(line: 1942, column: 42, scope: !5883)
!5888 = !DILocation(line: 1943, column: 7, scope: !5883)
!5889 = !DILocation(line: 1943, column: 10, scope: !5883)
!5890 = !DILocation(line: 1943, column: 17, scope: !5883)
!5891 = !DILocation(line: 1944, column: 7, scope: !5883)
!5892 = !DILocation(line: 1944, column: 10, scope: !5883)
!5893 = !DILocation(line: 1944, column: 31, scope: !5883)
!5894 = !DILocation(line: 1945, column: 7, scope: !5883)
!5895 = !DILocation(line: 1945, column: 10, scope: !5883)
!5896 = !DILocation(line: 1945, column: 47, scope: !5883)
!5897 = !DILocation(line: 1945, column: 57, scope: !5883)
!5898 = !DILocation(line: 1942, column: 7, scope: !5014)
!5899 = !DILocalVariable(name: "i", scope: !5900, file: !3, line: 1947, type: !7)
!5900 = distinct !DILexicalBlock(scope: !5883, file: !3, line: 1946, column: 5)
!5901 = !DILocation(line: 1947, column: 20, scope: !5900)
!5902 = !DILocalVariable(name: "otheroptab", scope: !5900, file: !3, line: 1948, type: !3938)
!5903 = !DILocation(line: 1948, column: 13, scope: !5900)
!5904 = !DILocation(line: 1948, column: 26, scope: !5900)
!5905 = !DILocation(line: 1948, column: 35, scope: !5900)
!5906 = !DILocalVariable(name: "nwords", scope: !5900, file: !3, line: 1949, type: !5907)
!5907 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!5908 = !DILocation(line: 1949, column: 26, scope: !5900)
!5909 = !DILocation(line: 1949, column: 35, scope: !5900)
!5910 = !DILocation(line: 1949, column: 59, scope: !5900)
!5911 = !DILocalVariable(name: "carry_in", scope: !5900, file: !3, line: 1950, type: !2732)
!5912 = !DILocation(line: 1950, column: 11, scope: !5900)
!5913 = !DILocalVariable(name: "carry_out", scope: !5900, file: !3, line: 1950, type: !2732)
!5914 = !DILocation(line: 1950, column: 32, scope: !5900)
!5915 = !DILocalVariable(name: "xop0", scope: !5900, file: !3, line: 1951, type: !2732)
!5916 = !DILocation(line: 1951, column: 11, scope: !5900)
!5917 = !DILocalVariable(name: "xop1", scope: !5900, file: !3, line: 1951, type: !2732)
!5918 = !DILocation(line: 1951, column: 17, scope: !5900)
!5919 = !DILocalVariable(name: "xtarget", scope: !5900, file: !3, line: 1951, type: !2732)
!5920 = !DILocation(line: 1951, column: 23, scope: !5900)
!5921 = !DILocalVariable(name: "normalizep", scope: !5900, file: !3, line: 1957, type: !2756)
!5922 = !DILocation(line: 1957, column: 11, scope: !5900)
!5923 = !DILocation(line: 1963, column: 25, scope: !5900)
!5924 = !DILocation(line: 1963, column: 31, scope: !5900)
!5925 = !DILocation(line: 1963, column: 14, scope: !5900)
!5926 = !DILocation(line: 1963, column: 12, scope: !5900)
!5927 = !DILocation(line: 1964, column: 25, scope: !5900)
!5928 = !DILocation(line: 1964, column: 31, scope: !5900)
!5929 = !DILocation(line: 1964, column: 14, scope: !5900)
!5930 = !DILocation(line: 1964, column: 12, scope: !5900)
!5931 = !DILocation(line: 1966, column: 30, scope: !5900)
!5932 = !DILocation(line: 1966, column: 17, scope: !5900)
!5933 = !DILocation(line: 1966, column: 15, scope: !5900)
!5934 = !DILocation(line: 1968, column: 11, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 1968, column: 11)
!5936 = !DILocation(line: 1968, column: 18, scope: !5935)
!5937 = !DILocation(line: 1968, column: 23, scope: !5935)
!5938 = !DILocation(line: 1968, column: 27, scope: !5935)
!5939 = !DILocation(line: 1968, column: 11, scope: !5900)
!5940 = !DILocation(line: 1969, column: 11, scope: !5935)
!5941 = !DILocation(line: 1969, column: 9, scope: !5935)
!5942 = !DILocation(line: 1969, column: 2, scope: !5935)
!5943 = !DILocation(line: 1972, column: 11, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 1972, column: 11)
!5945 = !DILocation(line: 1972, column: 11, scope: !5900)
!5946 = !DILocation(line: 1973, column: 16, scope: !5944)
!5947 = !DILocation(line: 1973, column: 2, scope: !5944)
!5948 = !DILocation(line: 1976, column: 14, scope: !5949)
!5949 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 1976, column: 7)
!5950 = !DILocation(line: 1976, column: 12, scope: !5949)
!5951 = !DILocation(line: 1976, column: 19, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !5949, file: !3, line: 1976, column: 7)
!5953 = !DILocation(line: 1976, column: 23, scope: !5952)
!5954 = !DILocation(line: 1976, column: 21, scope: !5952)
!5955 = !DILocation(line: 1976, column: 7, scope: !5949)
!5956 = !DILocalVariable(name: "index", scope: !5957, file: !3, line: 1978, type: !2756)
!5957 = distinct !DILexicalBlock(scope: !5952, file: !3, line: 1977, column: 2)
!5958 = !DILocation(line: 1978, column: 8, scope: !5957)
!5959 = !DILocation(line: 1978, column: 53, scope: !5957)
!5960 = !DILocalVariable(name: "target_piece", scope: !5957, file: !3, line: 1979, type: !2732)
!5961 = !DILocation(line: 1979, column: 8, scope: !5957)
!5962 = !DILocation(line: 1979, column: 40, scope: !5957)
!5963 = !DILocation(line: 1979, column: 49, scope: !5957)
!5964 = !DILocation(line: 1979, column: 59, scope: !5957)
!5965 = !DILocation(line: 1979, column: 23, scope: !5957)
!5966 = !DILocalVariable(name: "op0_piece", scope: !5957, file: !3, line: 1980, type: !2732)
!5967 = !DILocation(line: 1980, column: 8, scope: !5957)
!5968 = !DILocation(line: 1980, column: 43, scope: !5957)
!5969 = !DILocation(line: 1980, column: 49, scope: !5957)
!5970 = !DILocation(line: 1980, column: 56, scope: !5957)
!5971 = !DILocation(line: 1980, column: 20, scope: !5957)
!5972 = !DILocalVariable(name: "op1_piece", scope: !5957, file: !3, line: 1981, type: !2732)
!5973 = !DILocation(line: 1981, column: 8, scope: !5957)
!5974 = !DILocation(line: 1981, column: 43, scope: !5957)
!5975 = !DILocation(line: 1981, column: 49, scope: !5957)
!5976 = !DILocation(line: 1981, column: 56, scope: !5957)
!5977 = !DILocation(line: 1981, column: 20, scope: !5957)
!5978 = !DILocalVariable(name: "x", scope: !5957, file: !3, line: 1982, type: !2732)
!5979 = !DILocation(line: 1982, column: 8, scope: !5957)
!5980 = !DILocation(line: 1985, column: 22, scope: !5957)
!5981 = !DILocation(line: 1985, column: 33, scope: !5957)
!5982 = !DILocation(line: 1986, column: 8, scope: !5957)
!5983 = !DILocation(line: 1986, column: 19, scope: !5957)
!5984 = !DILocation(line: 1987, column: 8, scope: !5957)
!5985 = !DILocation(line: 1987, column: 22, scope: !5957)
!5986 = !DILocation(line: 1987, column: 33, scope: !5957)
!5987 = !DILocation(line: 1985, column: 8, scope: !5957)
!5988 = !DILocation(line: 1985, column: 6, scope: !5957)
!5989 = !DILocation(line: 1988, column: 8, scope: !5990)
!5990 = distinct !DILexicalBlock(scope: !5957, file: !3, line: 1988, column: 8)
!5991 = !DILocation(line: 1988, column: 10, scope: !5990)
!5992 = !DILocation(line: 1988, column: 8, scope: !5957)
!5993 = !DILocation(line: 1989, column: 6, scope: !5990)
!5994 = !DILocation(line: 1991, column: 8, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5957, file: !3, line: 1991, column: 8)
!5996 = !DILocation(line: 1991, column: 10, scope: !5995)
!5997 = !DILocation(line: 1991, column: 16, scope: !5995)
!5998 = !DILocation(line: 1991, column: 14, scope: !5995)
!5999 = !DILocation(line: 1991, column: 8, scope: !5957)
!6000 = !DILocation(line: 1994, column: 33, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5995, file: !3, line: 1992, column: 6)
!6002 = !DILocation(line: 1994, column: 20, scope: !6001)
!6003 = !DILocation(line: 1994, column: 18, scope: !6001)
!6004 = !DILocation(line: 1995, column: 43, scope: !6001)
!6005 = !DILocation(line: 1996, column: 9, scope: !6001)
!6006 = !DILocation(line: 1996, column: 18, scope: !6001)
!6007 = !DILocation(line: 1998, column: 8, scope: !6001)
!6008 = !DILocation(line: 1998, column: 11, scope: !6001)
!6009 = !DILocation(line: 1999, column: 8, scope: !6001)
!6010 = !DILocation(line: 1999, column: 22, scope: !6001)
!6011 = !DILocation(line: 1995, column: 20, scope: !6001)
!6012 = !DILocation(line: 1995, column: 18, scope: !6001)
!6013 = !DILocation(line: 2000, column: 6, scope: !6001)
!6014 = !DILocation(line: 2002, column: 8, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !5957, file: !3, line: 2002, column: 8)
!6016 = !DILocation(line: 2002, column: 10, scope: !6015)
!6017 = !DILocation(line: 2002, column: 8, scope: !5957)
!6018 = !DILocalVariable(name: "newx", scope: !6019, file: !3, line: 2004, type: !2732)
!6019 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 2003, column: 6)
!6020 = !DILocation(line: 2004, column: 12, scope: !6019)
!6021 = !DILocation(line: 2007, column: 29, scope: !6019)
!6022 = !DILocation(line: 2008, column: 8, scope: !6019)
!6023 = !DILocation(line: 2008, column: 19, scope: !6019)
!6024 = !DILocation(line: 2008, column: 26, scope: !6019)
!6025 = !DILocation(line: 2008, column: 37, scope: !6019)
!6026 = !DILocation(line: 2009, column: 8, scope: !6019)
!6027 = !DILocation(line: 2009, column: 11, scope: !6019)
!6028 = !DILocation(line: 2010, column: 21, scope: !6019)
!6029 = !DILocation(line: 2007, column: 15, scope: !6019)
!6030 = !DILocation(line: 2007, column: 13, scope: !6019)
!6031 = !DILocation(line: 2012, column: 12, scope: !6032)
!6032 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 2012, column: 12)
!6033 = !DILocation(line: 2012, column: 14, scope: !6032)
!6034 = !DILocation(line: 2012, column: 20, scope: !6032)
!6035 = !DILocation(line: 2012, column: 18, scope: !6032)
!6036 = !DILocation(line: 2012, column: 12, scope: !6019)
!6037 = !DILocalVariable(name: "carry_tmp", scope: !6038, file: !3, line: 2015, type: !2732)
!6038 = distinct !DILexicalBlock(scope: !6032, file: !3, line: 2013, column: 3)
!6039 = !DILocation(line: 2015, column: 9, scope: !6038)
!6040 = !DILocation(line: 2015, column: 34, scope: !6038)
!6041 = !DILocation(line: 2015, column: 21, scope: !6038)
!6042 = !DILocation(line: 2016, column: 40, scope: !6038)
!6043 = !DILocation(line: 2017, column: 13, scope: !6038)
!6044 = !DILocation(line: 2017, column: 22, scope: !6038)
!6045 = !DILocation(line: 2019, column: 12, scope: !6038)
!6046 = !DILocation(line: 2019, column: 18, scope: !6038)
!6047 = !DILocation(line: 2020, column: 12, scope: !6038)
!6048 = !DILocation(line: 2020, column: 26, scope: !6038)
!6049 = !DILocation(line: 2016, column: 17, scope: !6038)
!6050 = !DILocation(line: 2016, column: 15, scope: !6038)
!6051 = !DILocation(line: 2023, column: 31, scope: !6038)
!6052 = !DILocation(line: 2024, column: 10, scope: !6038)
!6053 = !DILocation(line: 2024, column: 21, scope: !6038)
!6054 = !DILocation(line: 2025, column: 10, scope: !6038)
!6055 = !DILocation(line: 2025, column: 24, scope: !6038)
!6056 = !DILocation(line: 2023, column: 17, scope: !6038)
!6057 = !DILocation(line: 2023, column: 15, scope: !6038)
!6058 = !DILocation(line: 2026, column: 9, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6038, file: !3, line: 2026, column: 9)
!6060 = !DILocation(line: 2026, column: 19, scope: !6059)
!6061 = !DILocation(line: 2026, column: 9, scope: !6038)
!6062 = !DILocation(line: 2027, column: 7, scope: !6059)
!6063 = !DILocation(line: 2028, column: 3, scope: !6038)
!6064 = !DILocation(line: 2029, column: 24, scope: !6019)
!6065 = !DILocation(line: 2029, column: 38, scope: !6019)
!6066 = !DILocation(line: 2029, column: 8, scope: !6019)
!6067 = !DILocation(line: 2030, column: 6, scope: !6019)
!6068 = !DILocation(line: 2033, column: 12, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6070, file: !3, line: 2033, column: 12)
!6070 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 2032, column: 6)
!6071 = !DILocation(line: 2033, column: 17, scope: !6069)
!6072 = !DILocation(line: 2033, column: 14, scope: !6069)
!6073 = !DILocation(line: 2033, column: 12, scope: !6070)
!6074 = !DILocation(line: 2034, column: 19, scope: !6069)
!6075 = !DILocation(line: 2034, column: 33, scope: !6069)
!6076 = !DILocation(line: 2034, column: 3, scope: !6069)
!6077 = !DILocation(line: 2037, column: 15, scope: !5957)
!6078 = !DILocation(line: 2037, column: 13, scope: !5957)
!6079 = !DILocation(line: 2038, column: 2, scope: !5957)
!6080 = !DILocation(line: 1976, column: 32, scope: !5952)
!6081 = !DILocation(line: 1976, column: 7, scope: !5952)
!6082 = distinct !{!6082, !5955, !6083}
!6083 = !DILocation(line: 2038, column: 2, scope: !5949)
!6084 = !DILocation(line: 2040, column: 11, scope: !6085)
!6085 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 2040, column: 11)
!6086 = !DILocation(line: 2040, column: 16, scope: !6085)
!6087 = !DILocation(line: 2040, column: 40, scope: !6085)
!6088 = !DILocation(line: 2040, column: 13, scope: !6085)
!6089 = !DILocation(line: 2040, column: 11, scope: !5900)
!6090 = !DILocation(line: 2042, column: 8, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2042, column: 8)
!6092 = distinct !DILexicalBlock(scope: !6085, file: !3, line: 2041, column: 2)
!6093 = !DILocation(line: 2042, column: 41, scope: !6091)
!6094 = !DILocation(line: 2042, column: 51, scope: !6091)
!6095 = !DILocation(line: 2043, column: 8, scope: !6091)
!6096 = !DILocation(line: 2043, column: 26, scope: !6091)
!6097 = !DILocation(line: 2043, column: 34, scope: !6091)
!6098 = !DILocation(line: 2043, column: 13, scope: !6091)
!6099 = !DILocation(line: 2042, column: 8, scope: !6092)
!6100 = !DILocalVariable(name: "temp", scope: !6101, file: !3, line: 2045, type: !2732)
!6101 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 2044, column: 6)
!6102 = !DILocation(line: 2045, column: 12, scope: !6101)
!6103 = !DILocation(line: 2045, column: 35, scope: !6101)
!6104 = !DILocation(line: 2045, column: 43, scope: !6101)
!6105 = !DILocation(line: 2045, column: 19, scope: !6101)
!6106 = !DILocation(line: 2047, column: 29, scope: !6101)
!6107 = !DILocation(line: 2049, column: 8, scope: !6101)
!6108 = !DILocation(line: 2047, column: 8, scope: !6101)
!6109 = !DILocation(line: 2052, column: 6, scope: !6101)
!6110 = !DILocation(line: 2054, column: 15, scope: !6091)
!6111 = !DILocation(line: 2054, column: 13, scope: !6091)
!6112 = !DILocation(line: 2056, column: 11, scope: !6092)
!6113 = !DILocation(line: 2056, column: 4, scope: !6092)
!6114 = !DILocation(line: 2060, column: 22, scope: !6085)
!6115 = !DILocation(line: 2060, column: 2, scope: !6085)
!6116 = !DILocation(line: 2061, column: 5, scope: !5900)
!6117 = !DILocation(line: 2068, column: 7, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 2068, column: 7)
!6119 = !DILocation(line: 2068, column: 16, scope: !6118)
!6120 = !DILocation(line: 2069, column: 7, scope: !6118)
!6121 = !DILocation(line: 2069, column: 10, scope: !6118)
!6122 = !DILocation(line: 2069, column: 17, scope: !6118)
!6123 = !DILocation(line: 2070, column: 7, scope: !6118)
!6124 = !DILocation(line: 2070, column: 10, scope: !6118)
!6125 = !DILocation(line: 2070, column: 31, scope: !6118)
!6126 = !DILocation(line: 2071, column: 7, scope: !6118)
!6127 = !DILocation(line: 2071, column: 10, scope: !6118)
!6128 = !DILocation(line: 2071, column: 49, scope: !6118)
!6129 = !DILocation(line: 2071, column: 59, scope: !6118)
!6130 = !DILocation(line: 2072, column: 7, scope: !6118)
!6131 = !DILocation(line: 2072, column: 10, scope: !6118)
!6132 = !DILocation(line: 2072, column: 48, scope: !6118)
!6133 = !DILocation(line: 2072, column: 58, scope: !6118)
!6134 = !DILocation(line: 2068, column: 7, scope: !5014)
!6135 = !DILocalVariable(name: "product", scope: !6136, file: !3, line: 2074, type: !2732)
!6136 = distinct !DILexicalBlock(scope: !6118, file: !3, line: 2073, column: 5)
!6137 = !DILocation(line: 2074, column: 11, scope: !6136)
!6138 = !DILocation(line: 2076, column: 11, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6136, file: !3, line: 2076, column: 11)
!6140 = !DILocation(line: 2076, column: 51, scope: !6139)
!6141 = !DILocation(line: 2077, column: 4, scope: !6139)
!6142 = !DILocation(line: 2076, column: 11, scope: !6136)
!6143 = !DILocation(line: 2079, column: 38, scope: !6144)
!6144 = distinct !DILexicalBlock(scope: !6139, file: !3, line: 2078, column: 2)
!6145 = !DILocation(line: 2079, column: 44, scope: !6144)
!6146 = !DILocation(line: 2079, column: 49, scope: !6144)
!6147 = !DILocation(line: 2079, column: 54, scope: !6144)
!6148 = !DILocation(line: 2080, column: 16, scope: !6144)
!6149 = !DILocation(line: 2079, column: 14, scope: !6144)
!6150 = !DILocation(line: 2079, column: 12, scope: !6144)
!6151 = !DILocation(line: 2081, column: 9, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6144, file: !3, line: 2081, column: 8)
!6153 = !DILocation(line: 2081, column: 8, scope: !6144)
!6154 = !DILocation(line: 2082, column: 26, scope: !6152)
!6155 = !DILocation(line: 2082, column: 6, scope: !6152)
!6156 = !DILocation(line: 2083, column: 2, scope: !6144)
!6157 = !DILocation(line: 2085, column: 11, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6136, file: !3, line: 2085, column: 11)
!6159 = !DILocation(line: 2085, column: 19, scope: !6158)
!6160 = !DILocation(line: 2086, column: 4, scope: !6158)
!6161 = !DILocation(line: 2086, column: 7, scope: !6158)
!6162 = !DILocation(line: 2086, column: 47, scope: !6158)
!6163 = !DILocation(line: 2087, column: 7, scope: !6158)
!6164 = !DILocation(line: 2085, column: 11, scope: !6136)
!6165 = !DILocation(line: 2089, column: 38, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 2088, column: 2)
!6167 = !DILocation(line: 2089, column: 44, scope: !6166)
!6168 = !DILocation(line: 2089, column: 49, scope: !6166)
!6169 = !DILocation(line: 2089, column: 54, scope: !6166)
!6170 = !DILocation(line: 2090, column: 17, scope: !6166)
!6171 = !DILocation(line: 2089, column: 14, scope: !6166)
!6172 = !DILocation(line: 2089, column: 12, scope: !6166)
!6173 = !DILocation(line: 2091, column: 9, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 2091, column: 8)
!6175 = !DILocation(line: 2091, column: 8, scope: !6166)
!6176 = !DILocation(line: 2092, column: 26, scope: !6174)
!6177 = !DILocation(line: 2092, column: 6, scope: !6174)
!6178 = !DILocation(line: 2093, column: 2, scope: !6166)
!6179 = !DILocation(line: 2095, column: 11, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6136, file: !3, line: 2095, column: 11)
!6181 = !DILocation(line: 2095, column: 19, scope: !6180)
!6182 = !DILocation(line: 2095, column: 11, scope: !6136)
!6183 = !DILocation(line: 2097, column: 8, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6185, file: !3, line: 2097, column: 8)
!6185 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 2096, column: 2)
!6186 = !DILocation(line: 2097, column: 41, scope: !6184)
!6187 = !DILocation(line: 2097, column: 51, scope: !6184)
!6188 = !DILocation(line: 2097, column: 8, scope: !6185)
!6189 = !DILocation(line: 2099, column: 31, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 2098, column: 6)
!6191 = !DILocation(line: 2099, column: 40, scope: !6190)
!6192 = !DILocation(line: 2099, column: 49, scope: !6190)
!6193 = !DILocation(line: 2099, column: 58, scope: !6190)
!6194 = !DILocation(line: 2099, column: 15, scope: !6190)
!6195 = !DILocation(line: 2099, column: 13, scope: !6190)
!6196 = !DILocation(line: 2100, column: 29, scope: !6190)
!6197 = !DILocation(line: 2102, column: 8, scope: !6190)
!6198 = !DILocation(line: 2100, column: 8, scope: !6190)
!6199 = !DILocation(line: 2105, column: 6, scope: !6190)
!6200 = !DILocation(line: 2106, column: 11, scope: !6185)
!6201 = !DILocation(line: 2106, column: 4, scope: !6185)
!6202 = !DILocation(line: 2108, column: 5, scope: !6136)
!6203 = !DILocation(line: 2113, column: 28, scope: !5014)
!6204 = !DILocation(line: 2113, column: 38, scope: !5014)
!6205 = !DILocation(line: 2113, column: 13, scope: !5014)
!6206 = !DILocation(line: 2113, column: 11, scope: !5014)
!6207 = !DILocation(line: 2114, column: 7, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 2114, column: 7)
!6209 = !DILocation(line: 2115, column: 7, scope: !6208)
!6210 = !DILocation(line: 2115, column: 11, scope: !6208)
!6211 = !DILocation(line: 2115, column: 19, scope: !6208)
!6212 = !DILocation(line: 2115, column: 32, scope: !6208)
!6213 = !DILocation(line: 2115, column: 35, scope: !6208)
!6214 = !DILocation(line: 2115, column: 43, scope: !6208)
!6215 = !DILocation(line: 2114, column: 7, scope: !5014)
!6216 = !DILocalVariable(name: "insns", scope: !6217, file: !3, line: 2117, type: !2732)
!6217 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 2116, column: 5)
!6218 = !DILocation(line: 2117, column: 11, scope: !6217)
!6219 = !DILocalVariable(name: "op1x", scope: !6217, file: !3, line: 2118, type: !2732)
!6220 = !DILocation(line: 2118, column: 11, scope: !6217)
!6221 = !DILocation(line: 2118, column: 18, scope: !6217)
!6222 = !DILocalVariable(name: "op1_mode", scope: !6217, file: !3, line: 2119, type: !5)
!6223 = !DILocation(line: 2119, column: 25, scope: !6217)
!6224 = !DILocation(line: 2119, column: 36, scope: !6217)
!6225 = !DILocalVariable(name: "value", scope: !6217, file: !3, line: 2120, type: !2732)
!6226 = !DILocation(line: 2120, column: 11, scope: !6217)
!6227 = !DILocation(line: 2122, column: 7, scope: !6217)
!6228 = !DILocation(line: 2124, column: 26, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 2124, column: 11)
!6230 = !DILocation(line: 2124, column: 11, scope: !6229)
!6231 = !DILocation(line: 2124, column: 11, scope: !6217)
!6232 = !DILocation(line: 2126, column: 23, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 2125, column: 2)
!6234 = !DILocation(line: 2126, column: 15, scope: !6233)
!6235 = !DILocation(line: 2126, column: 13, scope: !6233)
!6236 = !DILocation(line: 2129, column: 28, scope: !6233)
!6237 = !DILocation(line: 2129, column: 38, scope: !6233)
!6238 = !DILocation(line: 2129, column: 11, scope: !6233)
!6239 = !DILocation(line: 2129, column: 9, scope: !6233)
!6240 = !DILocation(line: 2130, column: 2, scope: !6233)
!6241 = !DILocation(line: 2132, column: 11, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 2132, column: 11)
!6243 = !DILocation(line: 2132, column: 26, scope: !6242)
!6244 = !DILocation(line: 2133, column: 4, scope: !6242)
!6245 = !DILocation(line: 2133, column: 7, scope: !6242)
!6246 = !DILocation(line: 2133, column: 25, scope: !6242)
!6247 = !DILocation(line: 2133, column: 22, scope: !6242)
!6248 = !DILocation(line: 2132, column: 11, scope: !6217)
!6249 = !DILocation(line: 2134, column: 25, scope: !6242)
!6250 = !DILocation(line: 2134, column: 31, scope: !6242)
!6251 = !DILocation(line: 2134, column: 36, scope: !6242)
!6252 = !DILocation(line: 2134, column: 8, scope: !6242)
!6253 = !DILocation(line: 2134, column: 6, scope: !6242)
!6254 = !DILocation(line: 2134, column: 2, scope: !6242)
!6255 = !DILocation(line: 2138, column: 40, scope: !6217)
!6256 = !DILocation(line: 2139, column: 33, scope: !6217)
!6257 = !DILocation(line: 2140, column: 12, scope: !6217)
!6258 = !DILocation(line: 2140, column: 17, scope: !6217)
!6259 = !DILocation(line: 2140, column: 23, scope: !6217)
!6260 = !DILocation(line: 2140, column: 29, scope: !6217)
!6261 = !DILocation(line: 2138, column: 15, scope: !6217)
!6262 = !DILocation(line: 2138, column: 13, scope: !6217)
!6263 = !DILocation(line: 2142, column: 15, scope: !6217)
!6264 = !DILocation(line: 2142, column: 13, scope: !6217)
!6265 = !DILocation(line: 2143, column: 7, scope: !6217)
!6266 = !DILocation(line: 2145, column: 29, scope: !6217)
!6267 = !DILocation(line: 2145, column: 16, scope: !6217)
!6268 = !DILocation(line: 2145, column: 14, scope: !6217)
!6269 = !DILocation(line: 2146, column: 27, scope: !6217)
!6270 = !DILocation(line: 2146, column: 34, scope: !6217)
!6271 = !DILocation(line: 2146, column: 42, scope: !6217)
!6272 = !DILocation(line: 2147, column: 6, scope: !6217)
!6273 = !DILocation(line: 2146, column: 7, scope: !6217)
!6274 = !DILocation(line: 2149, column: 14, scope: !6217)
!6275 = !DILocation(line: 2149, column: 7, scope: !6217)
!6276 = !DILocation(line: 2152, column: 23, scope: !5014)
!6277 = !DILocation(line: 2152, column: 3, scope: !5014)
!6278 = !DILocation(line: 2156, column: 10, scope: !6279)
!6279 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 2156, column: 7)
!6280 = !DILocation(line: 2156, column: 18, scope: !6279)
!6281 = !DILocation(line: 2156, column: 33, scope: !6279)
!6282 = !DILocation(line: 2156, column: 36, scope: !6279)
!6283 = !DILocation(line: 2156, column: 44, scope: !6279)
!6284 = !DILocation(line: 2157, column: 3, scope: !6279)
!6285 = !DILocation(line: 2157, column: 6, scope: !6279)
!6286 = !DILocation(line: 2157, column: 14, scope: !6279)
!6287 = !DILocation(line: 2156, column: 7, scope: !5014)
!6288 = !DILocation(line: 2160, column: 27, scope: !6289)
!6289 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 2158, column: 5)
!6290 = !DILocation(line: 2160, column: 7, scope: !6289)
!6291 = !DILocation(line: 2161, column: 7, scope: !6289)
!6292 = !DILocation(line: 2167, column: 14, scope: !5014)
!6293 = !DILocation(line: 2167, column: 22, scope: !5014)
!6294 = !DILocation(line: 2167, column: 11, scope: !5014)
!6295 = !DILocation(line: 2172, column: 7, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 2172, column: 7)
!6297 = !DILocation(line: 2172, column: 7, scope: !5014)
!6298 = !DILocation(line: 2174, column: 25, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6300, file: !3, line: 2174, column: 7)
!6300 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 2173, column: 5)
!6301 = !DILocation(line: 2174, column: 23, scope: !6299)
!6302 = !DILocation(line: 2174, column: 12, scope: !6299)
!6303 = !DILocation(line: 2175, column: 5, scope: !6304)
!6304 = distinct !DILexicalBlock(scope: !6299, file: !3, line: 2174, column: 7)
!6305 = !DILocation(line: 2175, column: 16, scope: !6304)
!6306 = !DILocation(line: 2174, column: 7, scope: !6299)
!6307 = !DILocation(line: 2178, column: 9, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6309, file: !3, line: 2178, column: 8)
!6309 = distinct !DILexicalBlock(scope: !6304, file: !3, line: 2177, column: 2)
!6310 = !DILocation(line: 2178, column: 47, scope: !6308)
!6311 = !DILocation(line: 2179, column: 9, scope: !6308)
!6312 = !DILocation(line: 2180, column: 8, scope: !6308)
!6313 = !DILocation(line: 2180, column: 12, scope: !6308)
!6314 = !DILocation(line: 2180, column: 20, scope: !6308)
!6315 = !DILocation(line: 2181, column: 5, scope: !6308)
!6316 = !DILocation(line: 2181, column: 23, scope: !6308)
!6317 = !DILocation(line: 2181, column: 33, scope: !6308)
!6318 = !DILocation(line: 2181, column: 8, scope: !6308)
!6319 = !DILocation(line: 2178, column: 8, scope: !6309)
!6320 = !DILocalVariable(name: "xop0", scope: !6321, file: !3, line: 2183, type: !2732)
!6321 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 2182, column: 6)
!6322 = !DILocation(line: 2183, column: 12, scope: !6321)
!6323 = !DILocation(line: 2183, column: 19, scope: !6321)
!6324 = !DILocalVariable(name: "xop1", scope: !6321, file: !3, line: 2183, type: !2732)
!6325 = !DILocation(line: 2183, column: 24, scope: !6321)
!6326 = !DILocation(line: 2183, column: 31, scope: !6321)
!6327 = !DILocalVariable(name: "no_extend", scope: !6321, file: !3, line: 2184, type: !2756)
!6328 = !DILocation(line: 2184, column: 12, scope: !6321)
!6329 = !DILocation(line: 2190, column: 13, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 2190, column: 12)
!6331 = !DILocation(line: 2190, column: 22, scope: !6330)
!6332 = !DILocation(line: 2190, column: 35, scope: !6330)
!6333 = !DILocation(line: 2190, column: 38, scope: !6330)
!6334 = !DILocation(line: 2190, column: 47, scope: !6330)
!6335 = !DILocation(line: 2191, column: 6, scope: !6330)
!6336 = !DILocation(line: 2191, column: 9, scope: !6330)
!6337 = !DILocation(line: 2191, column: 18, scope: !6330)
!6338 = !DILocation(line: 2192, column: 6, scope: !6330)
!6339 = !DILocation(line: 2192, column: 9, scope: !6330)
!6340 = !DILocation(line: 2192, column: 18, scope: !6330)
!6341 = !DILocation(line: 2192, column: 31, scope: !6330)
!6342 = !DILocation(line: 2192, column: 34, scope: !6330)
!6343 = !DILocation(line: 2192, column: 43, scope: !6330)
!6344 = !DILocation(line: 2193, column: 6, scope: !6330)
!6345 = !DILocation(line: 2193, column: 9, scope: !6330)
!6346 = !DILocation(line: 2193, column: 18, scope: !6330)
!6347 = !DILocation(line: 2193, column: 32, scope: !6330)
!6348 = !DILocation(line: 2193, column: 35, scope: !6330)
!6349 = !DILocation(line: 2193, column: 44, scope: !6330)
!6350 = !DILocation(line: 2194, column: 5, scope: !6330)
!6351 = !DILocation(line: 2194, column: 8, scope: !6330)
!6352 = !DILocation(line: 2194, column: 15, scope: !6330)
!6353 = !DILocation(line: 2190, column: 12, scope: !6321)
!6354 = !DILocation(line: 2195, column: 13, scope: !6330)
!6355 = !DILocation(line: 2195, column: 3, scope: !6330)
!6356 = !DILocation(line: 2197, column: 30, scope: !6321)
!6357 = !DILocation(line: 2197, column: 36, scope: !6321)
!6358 = !DILocation(line: 2197, column: 48, scope: !6321)
!6359 = !DILocation(line: 2198, column: 9, scope: !6321)
!6360 = !DILocation(line: 2198, column: 20, scope: !6321)
!6361 = !DILocation(line: 2197, column: 15, scope: !6321)
!6362 = !DILocation(line: 2197, column: 13, scope: !6321)
!6363 = !DILocation(line: 2201, column: 30, scope: !6321)
!6364 = !DILocation(line: 2201, column: 36, scope: !6321)
!6365 = !DILocation(line: 2201, column: 48, scope: !6321)
!6366 = !DILocation(line: 2201, column: 54, scope: !6321)
!6367 = !DILocation(line: 2202, column: 9, scope: !6321)
!6368 = !DILocation(line: 2202, column: 19, scope: !6321)
!6369 = !DILocation(line: 2202, column: 22, scope: !6321)
!6370 = !DILocation(line: 2202, column: 31, scope: !6321)
!6371 = !DILocation(line: 0, scope: !6321)
!6372 = !DILocation(line: 2201, column: 15, scope: !6321)
!6373 = !DILocation(line: 2201, column: 13, scope: !6321)
!6374 = !DILocation(line: 2204, column: 29, scope: !6321)
!6375 = !DILocation(line: 2204, column: 41, scope: !6321)
!6376 = !DILocation(line: 2204, column: 51, scope: !6321)
!6377 = !DILocation(line: 2204, column: 57, scope: !6321)
!6378 = !DILocation(line: 2205, column: 8, scope: !6321)
!6379 = !DILocation(line: 2205, column: 19, scope: !6321)
!6380 = !DILocation(line: 2204, column: 15, scope: !6321)
!6381 = !DILocation(line: 2204, column: 13, scope: !6321)
!6382 = !DILocation(line: 2206, column: 12, scope: !6383)
!6383 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 2206, column: 12)
!6384 = !DILocation(line: 2206, column: 12, scope: !6321)
!6385 = !DILocation(line: 2208, column: 9, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6387, file: !3, line: 2208, column: 9)
!6387 = distinct !DILexicalBlock(scope: !6383, file: !3, line: 2207, column: 3)
!6388 = !DILocation(line: 2208, column: 16, scope: !6386)
!6389 = !DILocation(line: 2208, column: 9, scope: !6387)
!6390 = !DILocation(line: 2212, column: 13, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 2212, column: 13)
!6392 = distinct !DILexicalBlock(scope: !6386, file: !3, line: 2211, column: 7)
!6393 = !DILocation(line: 2212, column: 20, scope: !6391)
!6394 = !DILocation(line: 2212, column: 13, scope: !6392)
!6395 = !DILocation(line: 2213, column: 26, scope: !6391)
!6396 = !DILocation(line: 2213, column: 13, scope: !6391)
!6397 = !DILocation(line: 2213, column: 11, scope: !6391)
!6398 = !DILocation(line: 2213, column: 4, scope: !6391)
!6399 = !DILocation(line: 2214, column: 23, scope: !6392)
!6400 = !DILocation(line: 2214, column: 31, scope: !6392)
!6401 = !DILocation(line: 2214, column: 9, scope: !6392)
!6402 = !DILocation(line: 2215, column: 16, scope: !6392)
!6403 = !DILocation(line: 2215, column: 9, scope: !6392)
!6404 = !DILocation(line: 2218, column: 14, scope: !6386)
!6405 = !DILocation(line: 2218, column: 27, scope: !6386)
!6406 = !DILocation(line: 2218, column: 33, scope: !6386)
!6407 = !DILocation(line: 2218, column: 7, scope: !6386)
!6408 = !DILocation(line: 2221, column: 23, scope: !6383)
!6409 = !DILocation(line: 2221, column: 3, scope: !6383)
!6410 = !DILocation(line: 2222, column: 6, scope: !6321)
!6411 = !DILocation(line: 2223, column: 2, scope: !6309)
!6412 = !DILocation(line: 2176, column: 18, scope: !6304)
!6413 = !DILocation(line: 2176, column: 16, scope: !6304)
!6414 = !DILocation(line: 2174, column: 7, scope: !6304)
!6415 = distinct !{!6415, !6306, !6416}
!6416 = !DILocation(line: 2223, column: 2, scope: !6299)
!6417 = !DILocation(line: 2224, column: 5, scope: !6300)
!6418 = !DILocation(line: 2226, column: 23, scope: !5014)
!6419 = !DILocation(line: 2226, column: 3, scope: !5014)
!6420 = !DILocation(line: 2227, column: 3, scope: !5014)
!6421 = !DILocation(line: 2228, column: 1, scope: !5014)
!6422 = distinct !DISubprogram(name: "expand_binop_directly", scope: !3, file: !3, line: 1416, type: !6423, scopeLine: 1420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!6423 = !DISubroutineType(types: !6424)
!6424 = !{!2732, !5, !3938, !2732, !2732, !2732, !2756, !2214, !2732}
!6425 = !DILocalVariable(name: "mode", arg: 1, scope: !6422, file: !3, line: 1416, type: !5)
!6426 = !DILocation(line: 1416, column: 42, scope: !6422)
!6427 = !DILocalVariable(name: "binoptab", arg: 2, scope: !6422, file: !3, line: 1416, type: !3938)
!6428 = !DILocation(line: 1416, column: 54, scope: !6422)
!6429 = !DILocalVariable(name: "op0", arg: 3, scope: !6422, file: !3, line: 1417, type: !2732)
!6430 = !DILocation(line: 1417, column: 14, scope: !6422)
!6431 = !DILocalVariable(name: "op1", arg: 4, scope: !6422, file: !3, line: 1417, type: !2732)
!6432 = !DILocation(line: 1417, column: 23, scope: !6422)
!6433 = !DILocalVariable(name: "target", arg: 5, scope: !6422, file: !3, line: 1418, type: !2732)
!6434 = !DILocation(line: 1418, column: 14, scope: !6422)
!6435 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !6422, file: !3, line: 1418, type: !2756)
!6436 = !DILocation(line: 1418, column: 26, scope: !6422)
!6437 = !DILocalVariable(name: "methods", arg: 7, scope: !6422, file: !3, line: 1418, type: !2214)
!6438 = !DILocation(line: 1418, column: 56, scope: !6422)
!6439 = !DILocalVariable(name: "last", arg: 8, scope: !6422, file: !3, line: 1419, type: !2732)
!6440 = !DILocation(line: 1419, column: 14, scope: !6422)
!6441 = !DILocalVariable(name: "icode", scope: !6422, file: !3, line: 1421, type: !2756)
!6442 = !DILocation(line: 1421, column: 7, scope: !6422)
!6443 = !DILocation(line: 1421, column: 21, scope: !6422)
!6444 = !DILocation(line: 1421, column: 53, scope: !6422)
!6445 = !DILocalVariable(name: "mode0", scope: !6422, file: !3, line: 1422, type: !5)
!6446 = !DILocation(line: 1422, column: 21, scope: !6422)
!6447 = !DILocation(line: 1422, column: 39, scope: !6422)
!6448 = !DILocation(line: 1422, column: 29, scope: !6422)
!6449 = !DILocation(line: 1422, column: 46, scope: !6422)
!6450 = !DILocation(line: 1422, column: 57, scope: !6422)
!6451 = !DILocalVariable(name: "mode1", scope: !6422, file: !3, line: 1423, type: !5)
!6452 = !DILocation(line: 1423, column: 21, scope: !6422)
!6453 = !DILocation(line: 1423, column: 39, scope: !6422)
!6454 = !DILocation(line: 1423, column: 29, scope: !6422)
!6455 = !DILocation(line: 1423, column: 46, scope: !6422)
!6456 = !DILocation(line: 1423, column: 57, scope: !6422)
!6457 = !DILocalVariable(name: "tmp_mode", scope: !6422, file: !3, line: 1424, type: !5)
!6458 = !DILocation(line: 1424, column: 21, scope: !6422)
!6459 = !DILocalVariable(name: "commutative_p", scope: !6422, file: !3, line: 1425, type: !2966)
!6460 = !DILocation(line: 1425, column: 8, scope: !6422)
!6461 = !DILocalVariable(name: "pat", scope: !6422, file: !3, line: 1426, type: !2732)
!6462 = !DILocation(line: 1426, column: 7, scope: !6422)
!6463 = !DILocalVariable(name: "xop0", scope: !6422, file: !3, line: 1427, type: !2732)
!6464 = !DILocation(line: 1427, column: 7, scope: !6422)
!6465 = !DILocation(line: 1427, column: 14, scope: !6422)
!6466 = !DILocalVariable(name: "xop1", scope: !6422, file: !3, line: 1427, type: !2732)
!6467 = !DILocation(line: 1427, column: 19, scope: !6422)
!6468 = !DILocation(line: 1427, column: 26, scope: !6422)
!6469 = !DILocalVariable(name: "temp", scope: !6422, file: !3, line: 1428, type: !2732)
!6470 = !DILocation(line: 1428, column: 7, scope: !6422)
!6471 = !DILocalVariable(name: "swap", scope: !6422, file: !3, line: 1429, type: !2732)
!6472 = !DILocation(line: 1429, column: 7, scope: !6422)
!6473 = !DILocation(line: 1431, column: 7, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1431, column: 7)
!6475 = !DILocation(line: 1431, column: 7, scope: !6422)
!6476 = !DILocation(line: 1432, column: 12, scope: !6474)
!6477 = !DILocation(line: 1432, column: 10, scope: !6474)
!6478 = !DILocation(line: 1432, column: 5, scope: !6474)
!6479 = !DILocation(line: 1434, column: 25, scope: !6474)
!6480 = !DILocation(line: 1434, column: 12, scope: !6474)
!6481 = !DILocation(line: 1434, column: 10, scope: !6474)
!6482 = !DILocation(line: 1438, column: 40, scope: !6422)
!6483 = !DILocation(line: 1438, column: 19, scope: !6422)
!6484 = !DILocation(line: 1438, column: 17, scope: !6422)
!6485 = !DILocation(line: 1439, column: 7, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1439, column: 7)
!6487 = !DILocation(line: 1440, column: 7, scope: !6486)
!6488 = !DILocation(line: 1440, column: 10, scope: !6486)
!6489 = !DILocation(line: 1440, column: 29, scope: !6486)
!6490 = !DILocation(line: 1440, column: 26, scope: !6486)
!6491 = !DILocation(line: 1440, column: 35, scope: !6486)
!6492 = !DILocation(line: 1440, column: 38, scope: !6486)
!6493 = !DILocation(line: 1440, column: 57, scope: !6486)
!6494 = !DILocation(line: 1440, column: 54, scope: !6486)
!6495 = !DILocation(line: 1441, column: 7, scope: !6486)
!6496 = !DILocation(line: 1441, column: 10, scope: !6486)
!6497 = !DILocation(line: 1441, column: 29, scope: !6486)
!6498 = !DILocation(line: 1441, column: 26, scope: !6486)
!6499 = !DILocation(line: 1441, column: 35, scope: !6486)
!6500 = !DILocation(line: 1441, column: 38, scope: !6486)
!6501 = !DILocation(line: 1441, column: 57, scope: !6486)
!6502 = !DILocation(line: 1441, column: 54, scope: !6486)
!6503 = !DILocation(line: 1439, column: 7, scope: !6422)
!6504 = !DILocation(line: 1443, column: 14, scope: !6505)
!6505 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 1442, column: 5)
!6506 = !DILocation(line: 1443, column: 12, scope: !6505)
!6507 = !DILocation(line: 1444, column: 14, scope: !6505)
!6508 = !DILocation(line: 1444, column: 12, scope: !6505)
!6509 = !DILocation(line: 1445, column: 14, scope: !6505)
!6510 = !DILocation(line: 1445, column: 12, scope: !6505)
!6511 = !DILocation(line: 1446, column: 5, scope: !6505)
!6512 = !DILocation(line: 1449, column: 36, scope: !6422)
!6513 = !DILocation(line: 1449, column: 43, scope: !6422)
!6514 = !DILocation(line: 1449, column: 53, scope: !6422)
!6515 = !DILocation(line: 1449, column: 59, scope: !6422)
!6516 = !DILocation(line: 1449, column: 10, scope: !6422)
!6517 = !DILocation(line: 1449, column: 8, scope: !6422)
!6518 = !DILocation(line: 1450, column: 23, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1450, column: 7)
!6520 = !DILocation(line: 1450, column: 8, scope: !6519)
!6521 = !DILocation(line: 1450, column: 7, scope: !6422)
!6522 = !DILocation(line: 1451, column: 38, scope: !6519)
!6523 = !DILocation(line: 1451, column: 45, scope: !6519)
!6524 = !DILocation(line: 1451, column: 55, scope: !6519)
!6525 = !DILocation(line: 1451, column: 61, scope: !6519)
!6526 = !DILocation(line: 1451, column: 12, scope: !6519)
!6527 = !DILocation(line: 1451, column: 10, scope: !6519)
!6528 = !DILocation(line: 1451, column: 5, scope: !6519)
!6529 = !DILocation(line: 1459, column: 7, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1459, column: 7)
!6531 = !DILocation(line: 1459, column: 26, scope: !6530)
!6532 = !DILocation(line: 1459, column: 23, scope: !6530)
!6533 = !DILocation(line: 1459, column: 32, scope: !6530)
!6534 = !DILocation(line: 1459, column: 35, scope: !6530)
!6535 = !DILocation(line: 1459, column: 41, scope: !6530)
!6536 = !DILocation(line: 1459, column: 7, scope: !6422)
!6537 = !DILocation(line: 1460, column: 27, scope: !6530)
!6538 = !DILocation(line: 1461, column: 6, scope: !6530)
!6539 = !DILocation(line: 1461, column: 22, scope: !6530)
!6540 = !DILocation(line: 1462, column: 8, scope: !6530)
!6541 = !DILocation(line: 1463, column: 8, scope: !6530)
!6542 = !DILocation(line: 1464, column: 6, scope: !6530)
!6543 = !DILocation(line: 1464, column: 12, scope: !6530)
!6544 = !DILocation(line: 1460, column: 12, scope: !6530)
!6545 = !DILocation(line: 1460, column: 10, scope: !6530)
!6546 = !DILocation(line: 1460, column: 5, scope: !6530)
!6547 = !DILocation(line: 1466, column: 7, scope: !6548)
!6548 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1466, column: 7)
!6549 = !DILocation(line: 1466, column: 26, scope: !6548)
!6550 = !DILocation(line: 1466, column: 23, scope: !6548)
!6551 = !DILocation(line: 1466, column: 32, scope: !6548)
!6552 = !DILocation(line: 1466, column: 35, scope: !6548)
!6553 = !DILocation(line: 1466, column: 41, scope: !6548)
!6554 = !DILocation(line: 1466, column: 7, scope: !6422)
!6555 = !DILocation(line: 1467, column: 27, scope: !6548)
!6556 = !DILocation(line: 1468, column: 6, scope: !6548)
!6557 = !DILocation(line: 1468, column: 22, scope: !6548)
!6558 = !DILocation(line: 1469, column: 8, scope: !6548)
!6559 = !DILocation(line: 1470, column: 8, scope: !6548)
!6560 = !DILocation(line: 1471, column: 6, scope: !6548)
!6561 = !DILocation(line: 1471, column: 12, scope: !6548)
!6562 = !DILocation(line: 1467, column: 12, scope: !6548)
!6563 = !DILocation(line: 1467, column: 10, scope: !6548)
!6564 = !DILocation(line: 1467, column: 5, scope: !6548)
!6565 = !DILocation(line: 1477, column: 7, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1477, column: 7)
!6567 = !DILocation(line: 1478, column: 7, scope: !6566)
!6568 = !DILocation(line: 1478, column: 49, scope: !6566)
!6569 = !DILocation(line: 1478, column: 57, scope: !6566)
!6570 = !DILocation(line: 1478, column: 63, scope: !6566)
!6571 = !DILocation(line: 1478, column: 10, scope: !6566)
!6572 = !DILocation(line: 1477, column: 7, scope: !6422)
!6573 = !DILocation(line: 1480, column: 14, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6566, file: !3, line: 1479, column: 5)
!6575 = !DILocation(line: 1480, column: 12, scope: !6574)
!6576 = !DILocation(line: 1481, column: 14, scope: !6574)
!6577 = !DILocation(line: 1481, column: 12, scope: !6574)
!6578 = !DILocation(line: 1482, column: 14, scope: !6574)
!6579 = !DILocation(line: 1482, column: 12, scope: !6574)
!6580 = !DILocation(line: 1483, column: 5, scope: !6574)
!6581 = !DILocation(line: 1488, column: 18, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1488, column: 7)
!6583 = !DILocation(line: 1488, column: 8, scope: !6582)
!6584 = !DILocation(line: 1488, column: 25, scope: !6582)
!6585 = !DILocation(line: 1488, column: 36, scope: !6582)
!6586 = !DILocation(line: 1488, column: 47, scope: !6582)
!6587 = !DILocation(line: 1488, column: 53, scope: !6582)
!6588 = !DILocation(line: 1489, column: 7, scope: !6582)
!6589 = !DILocation(line: 1489, column: 10, scope: !6582)
!6590 = !DILocation(line: 1489, column: 16, scope: !6582)
!6591 = !DILocation(line: 1488, column: 7, scope: !6422)
!6592 = !DILocation(line: 1490, column: 30, scope: !6582)
!6593 = !DILocation(line: 1490, column: 37, scope: !6582)
!6594 = !DILocation(line: 1490, column: 12, scope: !6582)
!6595 = !DILocation(line: 1490, column: 10, scope: !6582)
!6596 = !DILocation(line: 1490, column: 5, scope: !6582)
!6597 = !DILocation(line: 1492, column: 18, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1492, column: 7)
!6599 = !DILocation(line: 1492, column: 8, scope: !6598)
!6600 = !DILocation(line: 1492, column: 25, scope: !6598)
!6601 = !DILocation(line: 1492, column: 36, scope: !6598)
!6602 = !DILocation(line: 1492, column: 47, scope: !6598)
!6603 = !DILocation(line: 1492, column: 53, scope: !6598)
!6604 = !DILocation(line: 1493, column: 7, scope: !6598)
!6605 = !DILocation(line: 1493, column: 10, scope: !6598)
!6606 = !DILocation(line: 1493, column: 16, scope: !6598)
!6607 = !DILocation(line: 1492, column: 7, scope: !6422)
!6608 = !DILocation(line: 1494, column: 30, scope: !6598)
!6609 = !DILocation(line: 1494, column: 37, scope: !6598)
!6610 = !DILocation(line: 1494, column: 12, scope: !6598)
!6611 = !DILocation(line: 1494, column: 10, scope: !6598)
!6612 = !DILocation(line: 1494, column: 5, scope: !6598)
!6613 = !DILocation(line: 1496, column: 7, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1496, column: 7)
!6615 = !DILocation(line: 1496, column: 16, scope: !6614)
!6616 = !DILocation(line: 1497, column: 7, scope: !6614)
!6617 = !DILocation(line: 1497, column: 10, scope: !6614)
!6618 = !DILocation(line: 1497, column: 19, scope: !6614)
!6619 = !DILocation(line: 1498, column: 7, scope: !6614)
!6620 = !DILocation(line: 1498, column: 10, scope: !6614)
!6621 = !DILocation(line: 1498, column: 19, scope: !6614)
!6622 = !DILocation(line: 1499, column: 7, scope: !6614)
!6623 = !DILocation(line: 1499, column: 10, scope: !6614)
!6624 = !DILocation(line: 1499, column: 19, scope: !6614)
!6625 = !DILocation(line: 1500, column: 7, scope: !6614)
!6626 = !DILocation(line: 1500, column: 10, scope: !6614)
!6627 = !DILocation(line: 1500, column: 19, scope: !6614)
!6628 = !DILocation(line: 1496, column: 7, scope: !6422)
!6629 = !DILocation(line: 1504, column: 28, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 1501, column: 5)
!6631 = !DILocation(line: 1504, column: 18, scope: !6630)
!6632 = !DILocation(line: 1504, column: 35, scope: !6630)
!6633 = !DILocation(line: 1504, column: 46, scope: !6630)
!6634 = !DILocation(line: 1504, column: 16, scope: !6630)
!6635 = !DILocation(line: 1505, column: 11, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 1505, column: 11)
!6637 = !DILocation(line: 1505, column: 45, scope: !6636)
!6638 = !DILocation(line: 1505, column: 43, scope: !6636)
!6639 = !DILocation(line: 1505, column: 38, scope: !6636)
!6640 = !DILocation(line: 1505, column: 11, scope: !6630)
!6641 = !DILocation(line: 1506, column: 2, scope: !6636)
!6642 = !DILocation(line: 1507, column: 5, scope: !6630)
!6643 = !DILocation(line: 1509, column: 16, scope: !6614)
!6644 = !DILocation(line: 1509, column: 14, scope: !6614)
!6645 = !DILocation(line: 1511, column: 18, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1511, column: 7)
!6647 = !DILocation(line: 1511, column: 8, scope: !6646)
!6648 = !DILocation(line: 1511, column: 25, scope: !6646)
!6649 = !DILocation(line: 1511, column: 36, scope: !6646)
!6650 = !DILocation(line: 1511, column: 47, scope: !6646)
!6651 = !DILocation(line: 1511, column: 53, scope: !6646)
!6652 = !DILocation(line: 1511, column: 7, scope: !6422)
!6653 = !DILocation(line: 1512, column: 25, scope: !6646)
!6654 = !DILocation(line: 1512, column: 12, scope: !6646)
!6655 = !DILocation(line: 1512, column: 10, scope: !6646)
!6656 = !DILocation(line: 1512, column: 5, scope: !6646)
!6657 = !DILocation(line: 1514, column: 9, scope: !6422)
!6658 = !DILocation(line: 1514, column: 26, scope: !6422)
!6659 = !DILocation(line: 1514, column: 32, scope: !6422)
!6660 = !DILocation(line: 1514, column: 38, scope: !6422)
!6661 = !DILocation(line: 1514, column: 7, scope: !6422)
!6662 = !DILocation(line: 1515, column: 7, scope: !6663)
!6663 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 1515, column: 7)
!6664 = !DILocation(line: 1515, column: 7, scope: !6422)
!6665 = !DILocation(line: 1520, column: 11, scope: !6666)
!6666 = distinct !DILexicalBlock(scope: !6667, file: !3, line: 1520, column: 11)
!6667 = distinct !DILexicalBlock(scope: !6663, file: !3, line: 1516, column: 5)
!6668 = !DILocation(line: 1520, column: 24, scope: !6666)
!6669 = !DILocation(line: 1520, column: 27, scope: !6666)
!6670 = !DILocation(line: 1520, column: 43, scope: !6666)
!6671 = !DILocation(line: 1521, column: 4, scope: !6666)
!6672 = !DILocation(line: 1521, column: 25, scope: !6666)
!6673 = !DILocation(line: 1521, column: 30, scope: !6666)
!6674 = !DILocation(line: 1521, column: 36, scope: !6666)
!6675 = !DILocation(line: 1521, column: 46, scope: !6666)
!6676 = !DILocation(line: 1521, column: 52, scope: !6666)
!6677 = !DILocation(line: 1521, column: 58, scope: !6666)
!6678 = !DILocation(line: 1521, column: 9, scope: !6666)
!6679 = !DILocation(line: 1520, column: 11, scope: !6667)
!6680 = !DILocation(line: 1523, column: 24, scope: !6681)
!6681 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1522, column: 2)
!6682 = !DILocation(line: 1523, column: 4, scope: !6681)
!6683 = !DILocation(line: 1524, column: 25, scope: !6681)
!6684 = !DILocation(line: 1524, column: 31, scope: !6681)
!6685 = !DILocation(line: 1524, column: 41, scope: !6681)
!6686 = !DILocation(line: 1524, column: 46, scope: !6681)
!6687 = !DILocation(line: 1525, column: 11, scope: !6681)
!6688 = !DILocation(line: 1525, column: 22, scope: !6681)
!6689 = !DILocation(line: 1524, column: 11, scope: !6681)
!6690 = !DILocation(line: 1524, column: 4, scope: !6681)
!6691 = !DILocation(line: 1528, column: 18, scope: !6667)
!6692 = !DILocation(line: 1528, column: 7, scope: !6667)
!6693 = !DILocation(line: 1529, column: 14, scope: !6667)
!6694 = !DILocation(line: 1529, column: 7, scope: !6667)
!6695 = !DILocation(line: 1532, column: 23, scope: !6422)
!6696 = !DILocation(line: 1532, column: 3, scope: !6422)
!6697 = !DILocation(line: 1533, column: 3, scope: !6422)
!6698 = !DILocation(line: 1534, column: 1, scope: !6422)
!6699 = distinct !DISubprogram(name: "avoid_expensive_constant", scope: !3, file: !3, line: 1389, type: !6700, scopeLine: 1391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!6700 = !DISubroutineType(types: !6701)
!6701 = !{!2732, !5, !3938, !2732, !2966}
!6702 = !DILocalVariable(name: "mode", arg: 1, scope: !6699, file: !3, line: 1389, type: !5)
!6703 = !DILocation(line: 1389, column: 45, scope: !6699)
!6704 = !DILocalVariable(name: "binoptab", arg: 2, scope: !6699, file: !3, line: 1389, type: !3938)
!6705 = !DILocation(line: 1389, column: 57, scope: !6699)
!6706 = !DILocalVariable(name: "x", arg: 3, scope: !6699, file: !3, line: 1390, type: !2732)
!6707 = !DILocation(line: 1390, column: 10, scope: !6699)
!6708 = !DILocalVariable(name: "unsignedp", arg: 4, scope: !6699, file: !3, line: 1390, type: !2966)
!6709 = !DILocation(line: 1390, column: 18, scope: !6699)
!6710 = !DILocalVariable(name: "speed", scope: !6699, file: !3, line: 1392, type: !2966)
!6711 = !DILocation(line: 1392, column: 8, scope: !6699)
!6712 = !DILocation(line: 1392, column: 16, scope: !6699)
!6713 = !DILocation(line: 1394, column: 7, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6699, file: !3, line: 1394, column: 7)
!6715 = !DILocation(line: 1394, column: 12, scope: !6714)
!6716 = !DILocation(line: 1395, column: 7, scope: !6714)
!6717 = !DILocation(line: 1395, column: 10, scope: !6714)
!6718 = !DILocation(line: 1396, column: 7, scope: !6714)
!6719 = !DILocation(line: 1396, column: 10, scope: !6714)
!6720 = !DILocation(line: 1397, column: 7, scope: !6714)
!6721 = !DILocation(line: 1397, column: 20, scope: !6714)
!6722 = !DILocation(line: 1397, column: 23, scope: !6714)
!6723 = !DILocation(line: 1397, column: 33, scope: !6714)
!6724 = !DILocation(line: 1397, column: 39, scope: !6714)
!6725 = !DILocation(line: 1397, column: 10, scope: !6714)
!6726 = !DILocation(line: 1397, column: 58, scope: !6714)
!6727 = !DILocation(line: 1397, column: 66, scope: !6714)
!6728 = !DILocation(line: 1397, column: 48, scope: !6714)
!6729 = !DILocation(line: 1397, column: 46, scope: !6714)
!6730 = !DILocation(line: 1394, column: 7, scope: !6699)
!6731 = !DILocation(line: 1399, column: 11, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6733, file: !3, line: 1399, column: 11)
!6733 = distinct !DILexicalBlock(scope: !6714, file: !3, line: 1398, column: 5)
!6734 = !DILocation(line: 1399, column: 11, scope: !6733)
!6735 = !DILocalVariable(name: "intval", scope: !6736, file: !3, line: 1401, type: !2822)
!6736 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 1400, column: 2)
!6737 = !DILocation(line: 1401, column: 18, scope: !6736)
!6738 = !DILocation(line: 1401, column: 47, scope: !6736)
!6739 = !DILocation(line: 1401, column: 59, scope: !6736)
!6740 = !DILocation(line: 1401, column: 27, scope: !6736)
!6741 = !DILocation(line: 1402, column: 8, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 1402, column: 8)
!6743 = !DILocation(line: 1402, column: 18, scope: !6742)
!6744 = !DILocation(line: 1402, column: 15, scope: !6742)
!6745 = !DILocation(line: 1402, column: 8, scope: !6736)
!6746 = !DILocation(line: 1403, column: 10, scope: !6742)
!6747 = !DILocation(line: 1403, column: 8, scope: !6742)
!6748 = !DILocation(line: 1403, column: 6, scope: !6742)
!6749 = !DILocation(line: 1404, column: 2, scope: !6736)
!6750 = !DILocation(line: 1406, column: 21, scope: !6732)
!6751 = !DILocation(line: 1406, column: 37, scope: !6732)
!6752 = !DILocation(line: 1406, column: 40, scope: !6732)
!6753 = !DILocation(line: 1406, column: 6, scope: !6732)
!6754 = !DILocation(line: 1406, column: 4, scope: !6732)
!6755 = !DILocation(line: 1407, column: 22, scope: !6733)
!6756 = !DILocation(line: 1407, column: 28, scope: !6733)
!6757 = !DILocation(line: 1407, column: 11, scope: !6733)
!6758 = !DILocation(line: 1407, column: 9, scope: !6733)
!6759 = !DILocation(line: 1408, column: 5, scope: !6733)
!6760 = !DILocation(line: 1409, column: 10, scope: !6699)
!6761 = !DILocation(line: 1409, column: 3, scope: !6699)
!6762 = distinct !DISubprogram(name: "widen_operand", scope: !3, file: !3, line: 284, type: !6763, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!6763 = !DISubroutineType(types: !6764)
!6764 = !{!2732, !2732, !5, !5, !2756, !2756}
!6765 = !DILocalVariable(name: "op", arg: 1, scope: !6762, file: !3, line: 284, type: !2732)
!6766 = !DILocation(line: 284, column: 20, scope: !6762)
!6767 = !DILocalVariable(name: "mode", arg: 2, scope: !6762, file: !3, line: 284, type: !5)
!6768 = !DILocation(line: 284, column: 42, scope: !6762)
!6769 = !DILocalVariable(name: "oldmode", arg: 3, scope: !6762, file: !3, line: 284, type: !5)
!6770 = !DILocation(line: 284, column: 66, scope: !6762)
!6771 = !DILocalVariable(name: "unsignedp", arg: 4, scope: !6762, file: !3, line: 285, type: !2756)
!6772 = !DILocation(line: 285, column: 13, scope: !6762)
!6773 = !DILocalVariable(name: "no_extend", arg: 5, scope: !6762, file: !3, line: 285, type: !2756)
!6774 = !DILocation(line: 285, column: 28, scope: !6762)
!6775 = !DILocalVariable(name: "result", scope: !6762, file: !3, line: 287, type: !2732)
!6776 = !DILocation(line: 287, column: 7, scope: !6762)
!6777 = !DILocation(line: 290, column: 7, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6762, file: !3, line: 290, column: 7)
!6779 = !DILocation(line: 290, column: 17, scope: !6778)
!6780 = !DILocation(line: 290, column: 20, scope: !6778)
!6781 = !DILocation(line: 290, column: 34, scope: !6778)
!6782 = !DILocation(line: 290, column: 7, scope: !6762)
!6783 = !DILocation(line: 291, column: 12, scope: !6778)
!6784 = !DILocation(line: 291, column: 5, scope: !6778)
!6785 = !DILocation(line: 296, column: 9, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6762, file: !3, line: 296, column: 7)
!6787 = !DILocation(line: 297, column: 7, scope: !6786)
!6788 = !DILocation(line: 297, column: 11, scope: !6786)
!6789 = !DILocation(line: 297, column: 25, scope: !6786)
!6790 = !DILocation(line: 297, column: 35, scope: !6786)
!6791 = !DILocation(line: 297, column: 38, scope: !6786)
!6792 = !DILocation(line: 298, column: 4, scope: !6786)
!6793 = !DILocation(line: 298, column: 7, scope: !6786)
!6794 = !DILocation(line: 298, column: 42, scope: !6786)
!6795 = !DILocation(line: 298, column: 39, scope: !6786)
!6796 = !DILocation(line: 296, column: 7, scope: !6762)
!6797 = !DILocation(line: 299, column: 27, scope: !6786)
!6798 = !DILocation(line: 299, column: 33, scope: !6786)
!6799 = !DILocation(line: 299, column: 42, scope: !6786)
!6800 = !DILocation(line: 299, column: 46, scope: !6786)
!6801 = !DILocation(line: 299, column: 12, scope: !6786)
!6802 = !DILocation(line: 299, column: 5, scope: !6786)
!6803 = !DILocation(line: 303, column: 7, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6762, file: !3, line: 303, column: 7)
!6805 = !DILocation(line: 303, column: 28, scope: !6804)
!6806 = !DILocation(line: 303, column: 7, scope: !6762)
!6807 = !DILocation(line: 304, column: 28, scope: !6804)
!6808 = !DILocation(line: 304, column: 45, scope: !6804)
!6809 = !DILocation(line: 304, column: 60, scope: !6804)
!6810 = !DILocation(line: 304, column: 34, scope: !6804)
!6811 = !DILocation(line: 304, column: 12, scope: !6804)
!6812 = !DILocation(line: 304, column: 5, scope: !6804)
!6813 = !DILocation(line: 309, column: 25, scope: !6762)
!6814 = !DILocation(line: 309, column: 12, scope: !6762)
!6815 = !DILocation(line: 309, column: 10, scope: !6762)
!6816 = !DILocation(line: 310, column: 17, scope: !6762)
!6817 = !DILocation(line: 310, column: 3, scope: !6762)
!6818 = !DILocation(line: 311, column: 19, scope: !6762)
!6819 = !DILocation(line: 311, column: 32, scope: !6762)
!6820 = !DILocation(line: 311, column: 47, scope: !6762)
!6821 = !DILocation(line: 311, column: 56, scope: !6762)
!6822 = !DILocation(line: 311, column: 3, scope: !6762)
!6823 = !DILocation(line: 312, column: 10, scope: !6762)
!6824 = !DILocation(line: 312, column: 3, scope: !6762)
!6825 = !DILocation(line: 313, column: 1, scope: !6762)
!6826 = distinct !DISubprogram(name: "commutative_optab_p", scope: !3, file: !3, line: 1374, type: !6827, scopeLine: 1375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!6827 = !DISubroutineType(types: !6828)
!6828 = !{!2966, !3938}
!6829 = !DILocalVariable(name: "binoptab", arg: 1, scope: !6826, file: !3, line: 1374, type: !3938)
!6830 = !DILocation(line: 1374, column: 28, scope: !6826)
!6831 = !DILocation(line: 1376, column: 11, scope: !6826)
!6832 = !DILocation(line: 1376, column: 42, scope: !6826)
!6833 = !DILocation(line: 1377, column: 4, scope: !6826)
!6834 = !DILocation(line: 1377, column: 7, scope: !6826)
!6835 = !DILocation(line: 1377, column: 16, scope: !6826)
!6836 = !DILocation(line: 1378, column: 4, scope: !6826)
!6837 = !DILocation(line: 1378, column: 7, scope: !6826)
!6838 = !DILocation(line: 1378, column: 16, scope: !6826)
!6839 = !DILocation(line: 1379, column: 4, scope: !6826)
!6840 = !DILocation(line: 1379, column: 7, scope: !6826)
!6841 = !DILocation(line: 1379, column: 16, scope: !6826)
!6842 = !DILocation(line: 1380, column: 4, scope: !6826)
!6843 = !DILocation(line: 1380, column: 7, scope: !6826)
!6844 = !DILocation(line: 1380, column: 16, scope: !6826)
!6845 = !DILocation(line: 1376, column: 10, scope: !6826)
!6846 = !DILocation(line: 1376, column: 3, scope: !6826)
!6847 = distinct !DISubprogram(name: "swap_commutative_operands_with_target", scope: !3, file: !3, line: 1331, type: !6848, scopeLine: 1332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!6848 = !DISubroutineType(types: !6849)
!6849 = !{!2966, !2732, !2732, !2732}
!6850 = !DILocalVariable(name: "target", arg: 1, scope: !6847, file: !3, line: 1331, type: !2732)
!6851 = !DILocation(line: 1331, column: 44, scope: !6847)
!6852 = !DILocalVariable(name: "op0", arg: 2, scope: !6847, file: !3, line: 1331, type: !2732)
!6853 = !DILocation(line: 1331, column: 56, scope: !6847)
!6854 = !DILocalVariable(name: "op1", arg: 3, scope: !6847, file: !3, line: 1331, type: !2732)
!6855 = !DILocation(line: 1331, column: 65, scope: !6847)
!6856 = !DILocalVariable(name: "op0_prec", scope: !6847, file: !3, line: 1333, type: !2756)
!6857 = !DILocation(line: 1333, column: 7, scope: !6847)
!6858 = !DILocation(line: 1333, column: 50, scope: !6847)
!6859 = !DILocation(line: 1333, column: 18, scope: !6847)
!6860 = !DILocalVariable(name: "op1_prec", scope: !6847, file: !3, line: 1334, type: !2756)
!6861 = !DILocation(line: 1334, column: 7, scope: !6847)
!6862 = !DILocation(line: 1334, column: 50, scope: !6847)
!6863 = !DILocation(line: 1334, column: 18, scope: !6847)
!6864 = !DILocation(line: 1336, column: 7, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 1336, column: 7)
!6866 = !DILocation(line: 1336, column: 18, scope: !6865)
!6867 = !DILocation(line: 1336, column: 16, scope: !6865)
!6868 = !DILocation(line: 1336, column: 7, scope: !6847)
!6869 = !DILocation(line: 1337, column: 5, scope: !6865)
!6870 = !DILocation(line: 1339, column: 7, scope: !6871)
!6871 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 1339, column: 7)
!6872 = !DILocation(line: 1339, column: 18, scope: !6871)
!6873 = !DILocation(line: 1339, column: 16, scope: !6871)
!6874 = !DILocation(line: 1339, column: 7, scope: !6847)
!6875 = !DILocation(line: 1340, column: 5, scope: !6871)
!6876 = !DILocation(line: 1344, column: 7, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 1344, column: 7)
!6878 = !DILocation(line: 1344, column: 14, scope: !6877)
!6879 = !DILocation(line: 1344, column: 19, scope: !6877)
!6880 = !DILocation(line: 1344, column: 22, scope: !6877)
!6881 = !DILocation(line: 1344, column: 7, scope: !6847)
!6882 = !DILocation(line: 1345, column: 13, scope: !6877)
!6883 = !DILocation(line: 1345, column: 25, scope: !6877)
!6884 = !DILocation(line: 1345, column: 29, scope: !6877)
!6885 = !DILocation(line: 1345, column: 42, scope: !6877)
!6886 = !DILocation(line: 1345, column: 45, scope: !6877)
!6887 = !DILocation(line: 1345, column: 55, scope: !6877)
!6888 = !DILocation(line: 1345, column: 52, scope: !6877)
!6889 = !DILocation(line: 1345, column: 12, scope: !6877)
!6890 = !DILocation(line: 1345, column: 5, scope: !6877)
!6891 = !DILocation(line: 1347, column: 25, scope: !6877)
!6892 = !DILocation(line: 1347, column: 30, scope: !6877)
!6893 = !DILocation(line: 1347, column: 12, scope: !6877)
!6894 = !DILocation(line: 1347, column: 5, scope: !6877)
!6895 = !DILocation(line: 1348, column: 1, scope: !6847)
!6896 = distinct !DISubprogram(name: "expand_doubleword_shift", scope: !3, file: !3, line: 1033, type: !6897, scopeLine: 1038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!6897 = !DISubroutineType(types: !6898)
!6898 = !{!2966, !5, !3938, !2732, !2732, !2732, !2732, !2732, !2756, !2214, !2723}
!6899 = !DILocalVariable(name: "op1_mode", arg: 1, scope: !6896, file: !3, line: 1033, type: !5)
!6900 = !DILocation(line: 1033, column: 44, scope: !6896)
!6901 = !DILocalVariable(name: "binoptab", arg: 2, scope: !6896, file: !3, line: 1033, type: !3938)
!6902 = !DILocation(line: 1033, column: 60, scope: !6896)
!6903 = !DILocalVariable(name: "outof_input", arg: 3, scope: !6896, file: !3, line: 1034, type: !2732)
!6904 = !DILocation(line: 1034, column: 9, scope: !6896)
!6905 = !DILocalVariable(name: "into_input", arg: 4, scope: !6896, file: !3, line: 1034, type: !2732)
!6906 = !DILocation(line: 1034, column: 26, scope: !6896)
!6907 = !DILocalVariable(name: "op1", arg: 5, scope: !6896, file: !3, line: 1034, type: !2732)
!6908 = !DILocation(line: 1034, column: 42, scope: !6896)
!6909 = !DILocalVariable(name: "outof_target", arg: 6, scope: !6896, file: !3, line: 1035, type: !2732)
!6910 = !DILocation(line: 1035, column: 9, scope: !6896)
!6911 = !DILocalVariable(name: "into_target", arg: 7, scope: !6896, file: !3, line: 1035, type: !2732)
!6912 = !DILocation(line: 1035, column: 27, scope: !6896)
!6913 = !DILocalVariable(name: "unsignedp", arg: 8, scope: !6896, file: !3, line: 1036, type: !2756)
!6914 = !DILocation(line: 1036, column: 9, scope: !6896)
!6915 = !DILocalVariable(name: "methods", arg: 9, scope: !6896, file: !3, line: 1036, type: !2214)
!6916 = !DILocation(line: 1036, column: 39, scope: !6896)
!6917 = !DILocalVariable(name: "shift_mask", arg: 10, scope: !6896, file: !3, line: 1037, type: !2723)
!6918 = !DILocation(line: 1037, column: 28, scope: !6896)
!6919 = !DILocalVariable(name: "superword_op1", scope: !6896, file: !3, line: 1039, type: !2732)
!6920 = !DILocation(line: 1039, column: 7, scope: !6896)
!6921 = !DILocalVariable(name: "tmp", scope: !6896, file: !3, line: 1039, type: !2732)
!6922 = !DILocation(line: 1039, column: 22, scope: !6896)
!6923 = !DILocalVariable(name: "cmp1", scope: !6896, file: !3, line: 1039, type: !2732)
!6924 = !DILocation(line: 1039, column: 27, scope: !6896)
!6925 = !DILocalVariable(name: "cmp2", scope: !6896, file: !3, line: 1039, type: !2732)
!6926 = !DILocation(line: 1039, column: 33, scope: !6896)
!6927 = !DILocalVariable(name: "subword_label", scope: !6896, file: !3, line: 1040, type: !2732)
!6928 = !DILocation(line: 1040, column: 7, scope: !6896)
!6929 = !DILocalVariable(name: "done_label", scope: !6896, file: !3, line: 1040, type: !2732)
!6930 = !DILocation(line: 1040, column: 22, scope: !6896)
!6931 = !DILocalVariable(name: "cmp_code", scope: !6896, file: !3, line: 1041, type: !384)
!6932 = !DILocation(line: 1041, column: 17, scope: !6896)
!6933 = !DILocation(line: 1051, column: 7, scope: !6934)
!6934 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1051, column: 7)
!6935 = !DILocation(line: 1051, column: 18, scope: !6934)
!6936 = !DILocation(line: 1052, column: 7, scope: !6934)
!6937 = !DILocation(line: 1052, column: 10, scope: !6934)
!6938 = !DILocation(line: 1052, column: 23, scope: !6934)
!6939 = !DILocation(line: 1053, column: 7, scope: !6934)
!6940 = !DILocation(line: 1053, column: 11, scope: !6934)
!6941 = !DILocation(line: 1051, column: 7, scope: !6896)
!6942 = !DILocation(line: 1055, column: 37, scope: !6943)
!6943 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 1055, column: 11)
!6944 = distinct !DILexicalBlock(scope: !6934, file: !3, line: 1054, column: 5)
!6945 = !DILocation(line: 1055, column: 47, scope: !6943)
!6946 = !DILocation(line: 1056, column: 9, scope: !6943)
!6947 = !DILocation(line: 1056, column: 22, scope: !6943)
!6948 = !DILocation(line: 1056, column: 34, scope: !6943)
!6949 = !DILocation(line: 1057, column: 12, scope: !6943)
!6950 = !DILocation(line: 1058, column: 9, scope: !6943)
!6951 = !DILocation(line: 1058, column: 20, scope: !6943)
!6952 = !DILocation(line: 1058, column: 29, scope: !6943)
!6953 = !DILocation(line: 1055, column: 12, scope: !6943)
!6954 = !DILocation(line: 1055, column: 11, scope: !6944)
!6955 = !DILocation(line: 1059, column: 2, scope: !6943)
!6956 = !DILocation(line: 1060, column: 32, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 1060, column: 11)
!6958 = !DILocation(line: 1060, column: 43, scope: !6957)
!6959 = !DILocation(line: 1060, column: 53, scope: !6957)
!6960 = !DILocation(line: 1060, column: 66, scope: !6957)
!6961 = !DILocation(line: 1061, column: 11, scope: !6957)
!6962 = !DILocation(line: 1061, column: 25, scope: !6957)
!6963 = !DILocation(line: 1061, column: 36, scope: !6957)
!6964 = !DILocation(line: 1060, column: 12, scope: !6957)
!6965 = !DILocation(line: 1060, column: 11, scope: !6944)
!6966 = !DILocation(line: 1062, column: 2, scope: !6957)
!6967 = !DILocation(line: 1063, column: 7, scope: !6944)
!6968 = !DILocation(line: 1070, column: 47, scope: !6896)
!6969 = !DILocation(line: 1070, column: 9, scope: !6896)
!6970 = !DILocation(line: 1070, column: 7, scope: !6896)
!6971 = !DILocation(line: 1071, column: 8, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1071, column: 7)
!6973 = !DILocation(line: 1071, column: 25, scope: !6972)
!6974 = !DILocation(line: 1071, column: 28, scope: !6972)
!6975 = !DILocation(line: 1071, column: 39, scope: !6972)
!6976 = !DILocation(line: 1071, column: 7, scope: !6896)
!6977 = !DILocation(line: 1075, column: 37, scope: !6978)
!6978 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 1072, column: 5)
!6979 = !DILocation(line: 1075, column: 58, scope: !6978)
!6980 = !DILocation(line: 1075, column: 63, scope: !6978)
!6981 = !DILocation(line: 1076, column: 18, scope: !6978)
!6982 = !DILocation(line: 1075, column: 14, scope: !6978)
!6983 = !DILocation(line: 1075, column: 12, scope: !6978)
!6984 = !DILocation(line: 1077, column: 14, scope: !6978)
!6985 = !DILocation(line: 1077, column: 12, scope: !6978)
!6986 = !DILocation(line: 1078, column: 16, scope: !6978)
!6987 = !DILocation(line: 1079, column: 23, scope: !6978)
!6988 = !DILocation(line: 1079, column: 21, scope: !6978)
!6989 = !DILocation(line: 1080, column: 5, scope: !6978)
!6990 = !DILocation(line: 1084, column: 37, scope: !6991)
!6991 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 1082, column: 5)
!6992 = !DILocation(line: 1084, column: 58, scope: !6991)
!6993 = !DILocation(line: 1084, column: 63, scope: !6991)
!6994 = !DILocation(line: 1085, column: 18, scope: !6991)
!6995 = !DILocation(line: 1084, column: 14, scope: !6991)
!6996 = !DILocation(line: 1084, column: 12, scope: !6991)
!6997 = !DILocation(line: 1086, column: 14, scope: !6991)
!6998 = !DILocation(line: 1086, column: 12, scope: !6991)
!6999 = !DILocation(line: 1087, column: 16, scope: !6991)
!7000 = !DILocation(line: 1088, column: 23, scope: !6991)
!7001 = !DILocation(line: 1088, column: 21, scope: !6991)
!7002 = !DILocation(line: 1090, column: 7, scope: !7003)
!7003 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1090, column: 7)
!7004 = !DILocation(line: 1090, column: 12, scope: !7003)
!7005 = !DILocation(line: 1090, column: 7, scope: !6896)
!7006 = !DILocation(line: 1091, column: 5, scope: !7003)
!7007 = !DILocation(line: 1095, column: 40, scope: !6896)
!7008 = !DILocation(line: 1095, column: 58, scope: !6896)
!7009 = !DILocation(line: 1095, column: 68, scope: !6896)
!7010 = !DILocation(line: 1095, column: 74, scope: !6896)
!7011 = !DILocation(line: 1095, column: 9, scope: !6896)
!7012 = !DILocation(line: 1095, column: 7, scope: !6896)
!7013 = !DILocation(line: 1096, column: 7, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1096, column: 7)
!7015 = !DILocation(line: 1096, column: 11, scope: !7014)
!7016 = !DILocation(line: 1096, column: 16, scope: !7014)
!7017 = !DILocation(line: 1096, column: 19, scope: !7014)
!7018 = !DILocation(line: 1096, column: 7, scope: !6896)
!7019 = !DILocation(line: 1098, column: 11, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 1098, column: 11)
!7021 = distinct !DILexicalBlock(scope: !7014, file: !3, line: 1097, column: 5)
!7022 = !DILocation(line: 1098, column: 18, scope: !7020)
!7023 = !DILocation(line: 1098, column: 15, scope: !7020)
!7024 = !DILocation(line: 1098, column: 11, scope: !7021)
!7025 = !DILocation(line: 1099, column: 33, scope: !7020)
!7026 = !DILocation(line: 1099, column: 43, scope: !7020)
!7027 = !DILocation(line: 1099, column: 56, scope: !7020)
!7028 = !DILocation(line: 1100, column: 12, scope: !7020)
!7029 = !DILocation(line: 1100, column: 26, scope: !7020)
!7030 = !DILocation(line: 1101, column: 12, scope: !7020)
!7031 = !DILocation(line: 1101, column: 23, scope: !7020)
!7032 = !DILocation(line: 1099, column: 9, scope: !7020)
!7033 = !DILocation(line: 1099, column: 2, scope: !7020)
!7034 = !DILocation(line: 1103, column: 31, scope: !7020)
!7035 = !DILocation(line: 1103, column: 41, scope: !7020)
!7036 = !DILocation(line: 1104, column: 10, scope: !7020)
!7037 = !DILocation(line: 1104, column: 23, scope: !7020)
!7038 = !DILocation(line: 1104, column: 35, scope: !7020)
!7039 = !DILocation(line: 1105, column: 10, scope: !7020)
!7040 = !DILocation(line: 1105, column: 24, scope: !7020)
!7041 = !DILocation(line: 1106, column: 10, scope: !7020)
!7042 = !DILocation(line: 1106, column: 21, scope: !7020)
!7043 = !DILocation(line: 1106, column: 30, scope: !7020)
!7044 = !DILocation(line: 1103, column: 9, scope: !7020)
!7045 = !DILocation(line: 1103, column: 2, scope: !7020)
!7046 = !DILocalVariable(name: "start", scope: !7047, file: !3, line: 1112, type: !2732)
!7047 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1111, column: 3)
!7048 = !DILocation(line: 1112, column: 9, scope: !7047)
!7049 = !DILocation(line: 1112, column: 17, scope: !7047)
!7050 = !DILocation(line: 1113, column: 43, scope: !7051)
!7051 = distinct !DILexicalBlock(scope: !7047, file: !3, line: 1113, column: 9)
!7052 = !DILocation(line: 1113, column: 53, scope: !7051)
!7053 = !DILocation(line: 1114, column: 8, scope: !7051)
!7054 = !DILocation(line: 1114, column: 18, scope: !7051)
!7055 = !DILocation(line: 1114, column: 24, scope: !7051)
!7056 = !DILocation(line: 1115, column: 8, scope: !7051)
!7057 = !DILocation(line: 1115, column: 21, scope: !7051)
!7058 = !DILocation(line: 1116, column: 8, scope: !7051)
!7059 = !DILocation(line: 1116, column: 13, scope: !7051)
!7060 = !DILocation(line: 1117, column: 8, scope: !7051)
!7061 = !DILocation(line: 1117, column: 22, scope: !7051)
!7062 = !DILocation(line: 1118, column: 8, scope: !7051)
!7063 = !DILocation(line: 1118, column: 19, scope: !7051)
!7064 = !DILocation(line: 1118, column: 28, scope: !7051)
!7065 = !DILocation(line: 1113, column: 9, scope: !7051)
!7066 = !DILocation(line: 1113, column: 9, scope: !7047)
!7067 = !DILocation(line: 1119, column: 7, scope: !7051)
!7068 = !DILocation(line: 1120, column: 25, scope: !7047)
!7069 = !DILocation(line: 1120, column: 5, scope: !7047)
!7070 = !DILocation(line: 1125, column: 19, scope: !6896)
!7071 = !DILocation(line: 1125, column: 17, scope: !6896)
!7072 = !DILocation(line: 1126, column: 16, scope: !6896)
!7073 = !DILocation(line: 1126, column: 14, scope: !6896)
!7074 = !DILocation(line: 1128, column: 3, scope: !6896)
!7075 = !DILocation(line: 1129, column: 28, scope: !6896)
!7076 = !DILocation(line: 1129, column: 34, scope: !6896)
!7077 = !DILocation(line: 1129, column: 40, scope: !6896)
!7078 = !DILocation(line: 1129, column: 57, scope: !6896)
!7079 = !DILocation(line: 1130, column: 13, scope: !6896)
!7080 = !DILocation(line: 1129, column: 3, scope: !6896)
!7081 = !DILocation(line: 1131, column: 3, scope: !6896)
!7082 = !DILocation(line: 1133, column: 32, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1133, column: 7)
!7084 = !DILocation(line: 1133, column: 42, scope: !7083)
!7085 = !DILocation(line: 1133, column: 55, scope: !7083)
!7086 = !DILocation(line: 1134, column: 11, scope: !7083)
!7087 = !DILocation(line: 1134, column: 25, scope: !7083)
!7088 = !DILocation(line: 1135, column: 11, scope: !7083)
!7089 = !DILocation(line: 1135, column: 22, scope: !7083)
!7090 = !DILocation(line: 1133, column: 8, scope: !7083)
!7091 = !DILocation(line: 1133, column: 7, scope: !6896)
!7092 = !DILocation(line: 1136, column: 5, scope: !7083)
!7093 = !DILocation(line: 1138, column: 29, scope: !6896)
!7094 = !DILocation(line: 1138, column: 19, scope: !6896)
!7095 = !DILocation(line: 1138, column: 3, scope: !6896)
!7096 = !DILocation(line: 1139, column: 3, scope: !6896)
!7097 = !DILocation(line: 1140, column: 15, scope: !6896)
!7098 = !DILocation(line: 1140, column: 3, scope: !6896)
!7099 = !DILocation(line: 1142, column: 30, scope: !7100)
!7100 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 1142, column: 7)
!7101 = !DILocation(line: 1142, column: 40, scope: !7100)
!7102 = !DILocation(line: 1143, column: 9, scope: !7100)
!7103 = !DILocation(line: 1143, column: 22, scope: !7100)
!7104 = !DILocation(line: 1143, column: 34, scope: !7100)
!7105 = !DILocation(line: 1144, column: 9, scope: !7100)
!7106 = !DILocation(line: 1144, column: 23, scope: !7100)
!7107 = !DILocation(line: 1145, column: 9, scope: !7100)
!7108 = !DILocation(line: 1145, column: 20, scope: !7100)
!7109 = !DILocation(line: 1145, column: 29, scope: !7100)
!7110 = !DILocation(line: 1142, column: 8, scope: !7100)
!7111 = !DILocation(line: 1142, column: 7, scope: !6896)
!7112 = !DILocation(line: 1146, column: 5, scope: !7100)
!7113 = !DILocation(line: 1148, column: 15, scope: !6896)
!7114 = !DILocation(line: 1148, column: 3, scope: !6896)
!7115 = !DILocation(line: 1149, column: 3, scope: !6896)
!7116 = !DILocation(line: 1150, column: 1, scope: !6896)
!7117 = distinct !DISubprogram(name: "expand_doubleword_mult", scope: !3, file: !3, line: 1208, type: !7118, scopeLine: 1210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!7118 = !DISubroutineType(types: !7119)
!7119 = !{!2732, !5, !2732, !2732, !2732, !2966, !2214}
!7120 = !DILocalVariable(name: "mode", arg: 1, scope: !7117, file: !3, line: 1208, type: !5)
!7121 = !DILocation(line: 1208, column: 43, scope: !7117)
!7122 = !DILocalVariable(name: "op0", arg: 2, scope: !7117, file: !3, line: 1208, type: !2732)
!7123 = !DILocation(line: 1208, column: 53, scope: !7117)
!7124 = !DILocalVariable(name: "op1", arg: 3, scope: !7117, file: !3, line: 1208, type: !2732)
!7125 = !DILocation(line: 1208, column: 62, scope: !7117)
!7126 = !DILocalVariable(name: "target", arg: 4, scope: !7117, file: !3, line: 1208, type: !2732)
!7127 = !DILocation(line: 1208, column: 71, scope: !7117)
!7128 = !DILocalVariable(name: "umulp", arg: 5, scope: !7117, file: !3, line: 1209, type: !2966)
!7129 = !DILocation(line: 1209, column: 15, scope: !7117)
!7130 = !DILocalVariable(name: "methods", arg: 6, scope: !7117, file: !3, line: 1209, type: !2214)
!7131 = !DILocation(line: 1209, column: 41, scope: !7117)
!7132 = !DILocalVariable(name: "low", scope: !7117, file: !3, line: 1211, type: !2756)
!7133 = !DILocation(line: 1211, column: 7, scope: !7117)
!7134 = !DILocalVariable(name: "high", scope: !7117, file: !3, line: 1212, type: !2756)
!7135 = !DILocation(line: 1212, column: 7, scope: !7117)
!7136 = !DILocalVariable(name: "wordm1", scope: !7117, file: !3, line: 1213, type: !2732)
!7137 = !DILocation(line: 1213, column: 7, scope: !7117)
!7138 = !DILocation(line: 1213, column: 16, scope: !7117)
!7139 = !DILocation(line: 1213, column: 35, scope: !7117)
!7140 = !DILocalVariable(name: "product", scope: !7117, file: !3, line: 1214, type: !2732)
!7141 = !DILocation(line: 1214, column: 7, scope: !7117)
!7142 = !DILocalVariable(name: "adjust", scope: !7117, file: !3, line: 1214, type: !2732)
!7143 = !DILocation(line: 1214, column: 16, scope: !7117)
!7144 = !DILocalVariable(name: "product_high", scope: !7117, file: !3, line: 1214, type: !2732)
!7145 = !DILocation(line: 1214, column: 24, scope: !7117)
!7146 = !DILocalVariable(name: "temp", scope: !7117, file: !3, line: 1214, type: !2732)
!7147 = !DILocation(line: 1214, column: 38, scope: !7117)
!7148 = !DILocalVariable(name: "op0_high", scope: !7117, file: !3, line: 1216, type: !2732)
!7149 = !DILocation(line: 1216, column: 7, scope: !7117)
!7150 = !DILocation(line: 1216, column: 41, scope: !7117)
!7151 = !DILocation(line: 1216, column: 46, scope: !7117)
!7152 = !DILocation(line: 1216, column: 52, scope: !7117)
!7153 = !DILocation(line: 1216, column: 18, scope: !7117)
!7154 = !DILocalVariable(name: "op0_low", scope: !7117, file: !3, line: 1217, type: !2732)
!7155 = !DILocation(line: 1217, column: 7, scope: !7117)
!7156 = !DILocation(line: 1217, column: 40, scope: !7117)
!7157 = !DILocation(line: 1217, column: 45, scope: !7117)
!7158 = !DILocation(line: 1217, column: 50, scope: !7117)
!7159 = !DILocation(line: 1217, column: 17, scope: !7117)
!7160 = !DILocalVariable(name: "op1_high", scope: !7117, file: !3, line: 1218, type: !2732)
!7161 = !DILocation(line: 1218, column: 7, scope: !7117)
!7162 = !DILocation(line: 1218, column: 41, scope: !7117)
!7163 = !DILocation(line: 1218, column: 46, scope: !7117)
!7164 = !DILocation(line: 1218, column: 52, scope: !7117)
!7165 = !DILocation(line: 1218, column: 18, scope: !7117)
!7166 = !DILocalVariable(name: "op1_low", scope: !7117, file: !3, line: 1219, type: !2732)
!7167 = !DILocation(line: 1219, column: 7, scope: !7117)
!7168 = !DILocation(line: 1219, column: 40, scope: !7117)
!7169 = !DILocation(line: 1219, column: 45, scope: !7117)
!7170 = !DILocation(line: 1219, column: 50, scope: !7117)
!7171 = !DILocation(line: 1219, column: 17, scope: !7117)
!7172 = !DILocation(line: 1231, column: 8, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1231, column: 7)
!7174 = !DILocation(line: 1231, column: 7, scope: !7117)
!7175 = !DILocation(line: 1234, column: 28, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 1232, column: 5)
!7177 = !DILocation(line: 1234, column: 51, scope: !7176)
!7178 = !DILocation(line: 1234, column: 60, scope: !7176)
!7179 = !DILocation(line: 1235, column: 20, scope: !7176)
!7180 = !DILocation(line: 1234, column: 14, scope: !7176)
!7181 = !DILocation(line: 1234, column: 12, scope: !7176)
!7182 = !DILocation(line: 1236, column: 11, scope: !7183)
!7183 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 1236, column: 11)
!7184 = !DILocation(line: 1236, column: 11, scope: !7176)
!7185 = !DILocation(line: 1237, column: 27, scope: !7183)
!7186 = !DILocation(line: 1237, column: 49, scope: !7183)
!7187 = !DILocation(line: 1237, column: 59, scope: !7183)
!7188 = !DILocation(line: 1237, column: 13, scope: !7183)
!7189 = !DILocation(line: 1237, column: 11, scope: !7183)
!7190 = !DILocation(line: 1237, column: 2, scope: !7183)
!7191 = !DILocation(line: 1241, column: 25, scope: !7192)
!7192 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 1240, column: 2)
!7193 = !DILocation(line: 1241, column: 48, scope: !7192)
!7194 = !DILocation(line: 1241, column: 57, scope: !7192)
!7195 = !DILocation(line: 1242, column: 24, scope: !7192)
!7196 = !DILocation(line: 1241, column: 11, scope: !7192)
!7197 = !DILocation(line: 1241, column: 9, scope: !7192)
!7198 = !DILocation(line: 1243, column: 9, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7192, file: !3, line: 1243, column: 8)
!7200 = !DILocation(line: 1243, column: 8, scope: !7192)
!7201 = !DILocation(line: 1244, column: 6, scope: !7199)
!7202 = !DILocation(line: 1245, column: 29, scope: !7192)
!7203 = !DILocation(line: 1245, column: 51, scope: !7192)
!7204 = !DILocation(line: 1245, column: 61, scope: !7192)
!7205 = !DILocation(line: 1245, column: 15, scope: !7192)
!7206 = !DILocation(line: 1245, column: 13, scope: !7192)
!7207 = !DILocation(line: 1249, column: 12, scope: !7208)
!7208 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 1249, column: 11)
!7209 = !DILocation(line: 1249, column: 11, scope: !7176)
!7210 = !DILocation(line: 1250, column: 2, scope: !7208)
!7211 = !DILocation(line: 1251, column: 5, scope: !7176)
!7212 = !DILocation(line: 1253, column: 26, scope: !7117)
!7213 = !DILocation(line: 1253, column: 49, scope: !7117)
!7214 = !DILocation(line: 1253, column: 59, scope: !7117)
!7215 = !DILocation(line: 1253, column: 12, scope: !7117)
!7216 = !DILocation(line: 1253, column: 10, scope: !7117)
!7217 = !DILocation(line: 1255, column: 8, scope: !7218)
!7218 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1255, column: 7)
!7219 = !DILocation(line: 1255, column: 7, scope: !7117)
!7220 = !DILocation(line: 1256, column: 5, scope: !7218)
!7221 = !DILocation(line: 1260, column: 8, scope: !7222)
!7222 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1260, column: 7)
!7223 = !DILocation(line: 1260, column: 7, scope: !7117)
!7224 = !DILocation(line: 1263, column: 28, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7222, file: !3, line: 1261, column: 5)
!7226 = !DILocation(line: 1263, column: 51, scope: !7225)
!7227 = !DILocation(line: 1263, column: 60, scope: !7225)
!7228 = !DILocation(line: 1264, column: 20, scope: !7225)
!7229 = !DILocation(line: 1263, column: 14, scope: !7225)
!7230 = !DILocation(line: 1263, column: 12, scope: !7225)
!7231 = !DILocation(line: 1265, column: 11, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 1265, column: 11)
!7233 = !DILocation(line: 1265, column: 11, scope: !7225)
!7234 = !DILocation(line: 1266, column: 27, scope: !7232)
!7235 = !DILocation(line: 1266, column: 49, scope: !7232)
!7236 = !DILocation(line: 1266, column: 59, scope: !7232)
!7237 = !DILocation(line: 1266, column: 13, scope: !7232)
!7238 = !DILocation(line: 1266, column: 11, scope: !7232)
!7239 = !DILocation(line: 1266, column: 2, scope: !7232)
!7240 = !DILocation(line: 1270, column: 25, scope: !7241)
!7241 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 1269, column: 2)
!7242 = !DILocation(line: 1270, column: 48, scope: !7241)
!7243 = !DILocation(line: 1270, column: 57, scope: !7241)
!7244 = !DILocation(line: 1271, column: 24, scope: !7241)
!7245 = !DILocation(line: 1270, column: 11, scope: !7241)
!7246 = !DILocation(line: 1270, column: 9, scope: !7241)
!7247 = !DILocation(line: 1272, column: 9, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 1272, column: 8)
!7249 = !DILocation(line: 1272, column: 8, scope: !7241)
!7250 = !DILocation(line: 1273, column: 6, scope: !7248)
!7251 = !DILocation(line: 1274, column: 29, scope: !7241)
!7252 = !DILocation(line: 1274, column: 51, scope: !7241)
!7253 = !DILocation(line: 1274, column: 61, scope: !7241)
!7254 = !DILocation(line: 1274, column: 15, scope: !7241)
!7255 = !DILocation(line: 1274, column: 13, scope: !7241)
!7256 = !DILocation(line: 1278, column: 12, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 1278, column: 11)
!7258 = !DILocation(line: 1278, column: 11, scope: !7225)
!7259 = !DILocation(line: 1279, column: 2, scope: !7257)
!7260 = !DILocation(line: 1280, column: 5, scope: !7225)
!7261 = !DILocation(line: 1282, column: 24, scope: !7117)
!7262 = !DILocation(line: 1282, column: 47, scope: !7117)
!7263 = !DILocation(line: 1282, column: 57, scope: !7117)
!7264 = !DILocation(line: 1282, column: 10, scope: !7117)
!7265 = !DILocation(line: 1282, column: 8, scope: !7117)
!7266 = !DILocation(line: 1284, column: 8, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1284, column: 7)
!7268 = !DILocation(line: 1284, column: 7, scope: !7117)
!7269 = !DILocation(line: 1285, column: 5, scope: !7267)
!7270 = !DILocation(line: 1289, column: 26, scope: !7117)
!7271 = !DILocation(line: 1289, column: 48, scope: !7117)
!7272 = !DILocation(line: 1289, column: 56, scope: !7117)
!7273 = !DILocation(line: 1290, column: 5, scope: !7117)
!7274 = !DILocation(line: 1289, column: 12, scope: !7117)
!7275 = !DILocation(line: 1289, column: 10, scope: !7117)
!7276 = !DILocation(line: 1292, column: 7, scope: !7277)
!7277 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1292, column: 7)
!7278 = !DILocation(line: 1292, column: 14, scope: !7277)
!7279 = !DILocation(line: 1292, column: 18, scope: !7277)
!7280 = !DILocation(line: 1292, column: 7, scope: !7117)
!7281 = !DILocation(line: 1293, column: 12, scope: !7277)
!7282 = !DILocation(line: 1293, column: 5, scope: !7277)
!7283 = !DILocation(line: 1295, column: 7, scope: !7284)
!7284 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1295, column: 7)
!7285 = !DILocation(line: 1295, column: 7, scope: !7117)
!7286 = !DILocation(line: 1296, column: 29, scope: !7284)
!7287 = !DILocation(line: 1296, column: 53, scope: !7284)
!7288 = !DILocation(line: 1296, column: 62, scope: !7284)
!7289 = !DILocation(line: 1297, column: 8, scope: !7284)
!7290 = !DILocation(line: 1296, column: 15, scope: !7284)
!7291 = !DILocation(line: 1296, column: 13, scope: !7284)
!7292 = !DILocation(line: 1296, column: 5, scope: !7284)
!7293 = !DILocation(line: 1299, column: 29, scope: !7284)
!7294 = !DILocation(line: 1299, column: 53, scope: !7284)
!7295 = !DILocation(line: 1299, column: 62, scope: !7284)
!7296 = !DILocation(line: 1300, column: 8, scope: !7284)
!7297 = !DILocation(line: 1299, column: 15, scope: !7284)
!7298 = !DILocation(line: 1299, column: 13, scope: !7284)
!7299 = !DILocation(line: 1302, column: 8, scope: !7300)
!7300 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1302, column: 7)
!7301 = !DILocation(line: 1302, column: 7, scope: !7117)
!7302 = !DILocation(line: 1303, column: 5, scope: !7300)
!7303 = !DILocation(line: 1305, column: 35, scope: !7117)
!7304 = !DILocation(line: 1305, column: 44, scope: !7117)
!7305 = !DILocation(line: 1305, column: 53, scope: !7117)
!7306 = !DILocation(line: 1305, column: 18, scope: !7117)
!7307 = !DILocation(line: 1305, column: 16, scope: !7117)
!7308 = !DILocation(line: 1306, column: 26, scope: !7117)
!7309 = !DILocation(line: 1306, column: 48, scope: !7117)
!7310 = !DILocation(line: 1306, column: 62, scope: !7117)
!7311 = !DILocation(line: 1307, column: 5, scope: !7117)
!7312 = !DILocation(line: 1307, column: 28, scope: !7117)
!7313 = !DILocation(line: 1307, column: 43, scope: !7117)
!7314 = !DILocation(line: 1306, column: 12, scope: !7117)
!7315 = !DILocation(line: 1306, column: 10, scope: !7117)
!7316 = !DILocation(line: 1309, column: 19, scope: !7117)
!7317 = !DILocation(line: 1309, column: 33, scope: !7117)
!7318 = !DILocation(line: 1309, column: 3, scope: !7117)
!7319 = !DILocation(line: 1310, column: 10, scope: !7117)
!7320 = !DILocation(line: 1310, column: 3, scope: !7117)
!7321 = !DILocation(line: 1311, column: 1, scope: !7117)
!7322 = distinct !DISubprogram(name: "shift_optab_p", scope: !3, file: !3, line: 1353, type: !6827, scopeLine: 1354, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!7323 = !DILocalVariable(name: "binoptab", arg: 1, scope: !7322, file: !3, line: 1353, type: !3938)
!7324 = !DILocation(line: 1353, column: 22, scope: !7322)
!7325 = !DILocation(line: 1355, column: 11, scope: !7322)
!7326 = !DILocation(line: 1355, column: 21, scope: !7322)
!7327 = !DILocation(line: 1355, column: 3, scope: !7322)
!7328 = !DILocation(line: 1364, column: 7, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7322, file: !3, line: 1356, column: 5)
!7330 = !DILocation(line: 1367, column: 7, scope: !7329)
!7331 = !DILocation(line: 1369, column: 1, scope: !7322)
!7332 = distinct !DISubprogram(name: "emit_libcall_block", scope: !3, file: !3, line: 3896, type: !7333, scopeLine: 3897, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!7333 = !DISubroutineType(types: !7334)
!7334 = !{null, !2732, !2732, !2732, !2732}
!7335 = !DILocalVariable(name: "insns", arg: 1, scope: !7332, file: !3, line: 3896, type: !2732)
!7336 = !DILocation(line: 3896, column: 25, scope: !7332)
!7337 = !DILocalVariable(name: "target", arg: 2, scope: !7332, file: !3, line: 3896, type: !2732)
!7338 = !DILocation(line: 3896, column: 36, scope: !7332)
!7339 = !DILocalVariable(name: "result", arg: 3, scope: !7332, file: !3, line: 3896, type: !2732)
!7340 = !DILocation(line: 3896, column: 48, scope: !7332)
!7341 = !DILocalVariable(name: "equiv", arg: 4, scope: !7332, file: !3, line: 3896, type: !2732)
!7342 = !DILocation(line: 3896, column: 60, scope: !7332)
!7343 = !DILocalVariable(name: "final_dest", scope: !7332, file: !3, line: 3898, type: !2732)
!7344 = !DILocation(line: 3898, column: 7, scope: !7332)
!7345 = !DILocation(line: 3898, column: 20, scope: !7332)
!7346 = !DILocalVariable(name: "next", scope: !7332, file: !3, line: 3899, type: !2732)
!7347 = !DILocation(line: 3899, column: 7, scope: !7332)
!7348 = !DILocalVariable(name: "last", scope: !7332, file: !3, line: 3899, type: !2732)
!7349 = !DILocation(line: 3899, column: 13, scope: !7332)
!7350 = !DILocalVariable(name: "insn", scope: !7332, file: !3, line: 3899, type: !2732)
!7351 = !DILocation(line: 3899, column: 19, scope: !7332)
!7352 = !DILocation(line: 3903, column: 9, scope: !7353)
!7353 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 3903, column: 7)
!7354 = !DILocation(line: 3903, column: 24, scope: !7353)
!7355 = !DILocation(line: 3903, column: 27, scope: !7353)
!7356 = !DILocation(line: 3903, column: 7, scope: !7332)
!7357 = !DILocation(line: 3904, column: 27, scope: !7353)
!7358 = !DILocation(line: 3904, column: 14, scope: !7353)
!7359 = !DILocation(line: 3904, column: 12, scope: !7353)
!7360 = !DILocation(line: 3904, column: 5, scope: !7353)
!7361 = !DILocation(line: 3909, column: 7, scope: !7362)
!7362 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 3909, column: 7)
!7363 = !DILocation(line: 3909, column: 32, scope: !7362)
!7364 = !DILocation(line: 3909, column: 47, scope: !7362)
!7365 = !DILocation(line: 3909, column: 35, scope: !7362)
!7366 = !DILocation(line: 3909, column: 7, scope: !7332)
!7367 = !DILocation(line: 3911, column: 19, scope: !7368)
!7368 = distinct !DILexicalBlock(scope: !7369, file: !3, line: 3911, column: 7)
!7369 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 3910, column: 5)
!7370 = !DILocation(line: 3911, column: 17, scope: !7368)
!7371 = !DILocation(line: 3911, column: 12, scope: !7368)
!7372 = !DILocation(line: 3911, column: 26, scope: !7373)
!7373 = distinct !DILexicalBlock(scope: !7368, file: !3, line: 3911, column: 7)
!7374 = !DILocation(line: 3911, column: 7, scope: !7368)
!7375 = !DILocation(line: 3912, column: 6, scope: !7376)
!7376 = distinct !DILexicalBlock(scope: !7373, file: !3, line: 3912, column: 6)
!7377 = !DILocation(line: 3912, column: 6, scope: !7373)
!7378 = !DILocalVariable(name: "note", scope: !7379, file: !3, line: 3914, type: !2732)
!7379 = distinct !DILexicalBlock(scope: !7376, file: !3, line: 3913, column: 4)
!7380 = !DILocation(line: 3914, column: 10, scope: !7379)
!7381 = !DILocation(line: 3914, column: 32, scope: !7379)
!7382 = !DILocation(line: 3914, column: 17, scope: !7379)
!7383 = !DILocation(line: 3915, column: 10, scope: !7384)
!7384 = distinct !DILexicalBlock(scope: !7379, file: !3, line: 3915, column: 10)
!7385 = !DILocation(line: 3915, column: 10, scope: !7379)
!7386 = !DILocalVariable(name: "lp_nr", scope: !7387, file: !3, line: 3917, type: !2756)
!7387 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 3916, column: 8)
!7388 = !DILocation(line: 3917, column: 7, scope: !7387)
!7389 = !DILocation(line: 3917, column: 15, scope: !7387)
!7390 = !DILocation(line: 3918, column: 7, scope: !7391)
!7391 = distinct !DILexicalBlock(scope: !7387, file: !3, line: 3918, column: 7)
!7392 = !DILocation(line: 3918, column: 13, scope: !7391)
!7393 = !DILocation(line: 3918, column: 18, scope: !7391)
!7394 = !DILocation(line: 3918, column: 21, scope: !7391)
!7395 = !DILocation(line: 3918, column: 27, scope: !7391)
!7396 = !DILocation(line: 3918, column: 7, scope: !7387)
!7397 = !DILocation(line: 3919, column: 18, scope: !7391)
!7398 = !DILocation(line: 3919, column: 24, scope: !7391)
!7399 = !DILocation(line: 3919, column: 5, scope: !7391)
!7400 = !DILocation(line: 3920, column: 8, scope: !7387)
!7401 = !DILocation(line: 3921, column: 4, scope: !7379)
!7402 = !DILocation(line: 3911, column: 39, scope: !7373)
!7403 = !DILocation(line: 3911, column: 37, scope: !7373)
!7404 = !DILocation(line: 3911, column: 7, scope: !7373)
!7405 = distinct !{!7405, !7374, !7406}
!7406 = !DILocation(line: 3921, column: 4, scope: !7368)
!7407 = !DILocation(line: 3922, column: 5, scope: !7369)
!7408 = !DILocation(line: 3929, column: 19, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7410, file: !3, line: 3929, column: 7)
!7410 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 3924, column: 5)
!7411 = !DILocation(line: 3929, column: 17, scope: !7409)
!7412 = !DILocation(line: 3929, column: 12, scope: !7409)
!7413 = !DILocation(line: 3929, column: 26, scope: !7414)
!7414 = distinct !DILexicalBlock(scope: !7409, file: !3, line: 3929, column: 7)
!7415 = !DILocation(line: 3929, column: 7, scope: !7409)
!7416 = !DILocation(line: 3930, column: 6, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7414, file: !3, line: 3930, column: 6)
!7418 = !DILocation(line: 3930, column: 6, scope: !7414)
!7419 = !DILocation(line: 3931, column: 48, scope: !7417)
!7420 = !DILocation(line: 3931, column: 4, scope: !7417)
!7421 = !DILocation(line: 3929, column: 39, scope: !7414)
!7422 = !DILocation(line: 3929, column: 37, scope: !7414)
!7423 = !DILocation(line: 3929, column: 7, scope: !7414)
!7424 = distinct !{!7424, !7415, !7425}
!7425 = !DILocation(line: 3931, column: 52, scope: !7409)
!7426 = !DILocation(line: 3940, column: 15, scope: !7427)
!7427 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 3940, column: 3)
!7428 = !DILocation(line: 3940, column: 13, scope: !7427)
!7429 = !DILocation(line: 3940, column: 8, scope: !7427)
!7430 = !DILocation(line: 3940, column: 22, scope: !7431)
!7431 = distinct !DILexicalBlock(scope: !7427, file: !3, line: 3940, column: 3)
!7432 = !DILocation(line: 3940, column: 3, scope: !7427)
!7433 = !DILocalVariable(name: "set", scope: !7434, file: !3, line: 3942, type: !2732)
!7434 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 3941, column: 5)
!7435 = !DILocation(line: 3942, column: 11, scope: !7434)
!7436 = !DILocation(line: 3942, column: 17, scope: !7434)
!7437 = !DILocation(line: 3944, column: 14, scope: !7434)
!7438 = !DILocation(line: 3944, column: 12, scope: !7434)
!7439 = !DILocation(line: 3946, column: 11, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7434, file: !3, line: 3946, column: 11)
!7441 = !DILocation(line: 3946, column: 15, scope: !7440)
!7442 = !DILocation(line: 3946, column: 20, scope: !7440)
!7443 = !DILocation(line: 3946, column: 23, scope: !7440)
!7444 = !DILocation(line: 3947, column: 4, scope: !7440)
!7445 = !DILocation(line: 3947, column: 7, scope: !7440)
!7446 = !DILocation(line: 3947, column: 30, scope: !7440)
!7447 = !DILocation(line: 3946, column: 11, scope: !7434)
!7448 = !DILocalVariable(name: "data", scope: !7449, file: !3, line: 3949, type: !3875)
!7449 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 3948, column: 2)
!7450 = !DILocation(line: 3949, column: 28, scope: !7449)
!7451 = !DILocation(line: 3951, column: 18, scope: !7449)
!7452 = !DILocation(line: 3951, column: 9, scope: !7449)
!7453 = !DILocation(line: 3951, column: 16, scope: !7449)
!7454 = !DILocation(line: 3952, column: 17, scope: !7449)
!7455 = !DILocation(line: 3952, column: 9, scope: !7449)
!7456 = !DILocation(line: 3952, column: 15, scope: !7449)
!7457 = !DILocation(line: 3953, column: 16, scope: !7449)
!7458 = !DILocation(line: 3953, column: 9, scope: !7449)
!7459 = !DILocation(line: 3953, column: 14, scope: !7449)
!7460 = !DILocation(line: 3954, column: 9, scope: !7449)
!7461 = !DILocation(line: 3954, column: 19, scope: !7449)
!7462 = !DILocation(line: 3955, column: 17, scope: !7449)
!7463 = !DILocation(line: 3955, column: 56, scope: !7449)
!7464 = !DILocation(line: 3955, column: 4, scope: !7449)
!7465 = !DILocation(line: 3956, column: 15, scope: !7466)
!7466 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 3956, column: 8)
!7467 = !DILocation(line: 3956, column: 10, scope: !7466)
!7468 = !DILocation(line: 3956, column: 8, scope: !7449)
!7469 = !DILocation(line: 3958, column: 12, scope: !7470)
!7470 = distinct !DILexicalBlock(scope: !7471, file: !3, line: 3958, column: 12)
!7471 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 3957, column: 6)
!7472 = !DILocation(line: 3958, column: 12, scope: !7471)
!7473 = !DILocation(line: 3959, column: 34, scope: !7470)
!7474 = !DILocation(line: 3959, column: 3, scope: !7470)
!7475 = !DILocation(line: 3959, column: 32, scope: !7470)
!7476 = !DILocation(line: 3961, column: 11, scope: !7470)
!7477 = !DILocation(line: 3961, column: 9, scope: !7470)
!7478 = !DILocation(line: 3963, column: 12, scope: !7479)
!7479 = distinct !DILexicalBlock(scope: !7471, file: !3, line: 3963, column: 12)
!7480 = !DILocation(line: 3963, column: 12, scope: !7471)
!7481 = !DILocation(line: 3964, column: 22, scope: !7479)
!7482 = !DILocation(line: 3964, column: 3, scope: !7479)
!7483 = !DILocation(line: 3964, column: 20, scope: !7479)
!7484 = !DILocation(line: 3966, column: 18, scope: !7471)
!7485 = !DILocation(line: 3966, column: 8, scope: !7471)
!7486 = !DILocation(line: 3967, column: 6, scope: !7471)
!7487 = !DILocation(line: 3968, column: 2, scope: !7449)
!7488 = !DILocation(line: 3972, column: 11, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7434, file: !3, line: 3972, column: 11)
!7490 = !DILocation(line: 3972, column: 11, scope: !7434)
!7491 = !DILocation(line: 3973, column: 2, scope: !7489)
!7492 = !DILocation(line: 3974, column: 5, scope: !7434)
!7493 = !DILocation(line: 3940, column: 35, scope: !7431)
!7494 = !DILocation(line: 3940, column: 33, scope: !7431)
!7495 = !DILocation(line: 3940, column: 3, scope: !7431)
!7496 = distinct !{!7496, !7432, !7497}
!7497 = !DILocation(line: 3974, column: 5, scope: !7427)
!7498 = !DILocation(line: 3977, column: 15, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 3977, column: 3)
!7500 = !DILocation(line: 3977, column: 13, scope: !7499)
!7501 = !DILocation(line: 3977, column: 8, scope: !7499)
!7502 = !DILocation(line: 3977, column: 22, scope: !7503)
!7503 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 3977, column: 3)
!7504 = !DILocation(line: 3977, column: 3, scope: !7499)
!7505 = !DILocation(line: 3979, column: 14, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7503, file: !3, line: 3978, column: 5)
!7507 = !DILocation(line: 3979, column: 12, scope: !7506)
!7508 = !DILocation(line: 3981, column: 17, scope: !7506)
!7509 = !DILocation(line: 3981, column: 7, scope: !7506)
!7510 = !DILocation(line: 3982, column: 5, scope: !7506)
!7511 = !DILocation(line: 3977, column: 35, scope: !7503)
!7512 = !DILocation(line: 3977, column: 33, scope: !7503)
!7513 = !DILocation(line: 3977, column: 3, scope: !7503)
!7514 = distinct !{!7514, !7504, !7515}
!7515 = !DILocation(line: 3982, column: 5, scope: !7499)
!7516 = !DILocation(line: 3984, column: 26, scope: !7332)
!7517 = !DILocation(line: 3984, column: 34, scope: !7332)
!7518 = !DILocation(line: 3984, column: 10, scope: !7332)
!7519 = !DILocation(line: 3984, column: 8, scope: !7332)
!7520 = !DILocation(line: 3985, column: 7, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 3985, column: 7)
!7522 = !DILocation(line: 3985, column: 53, scope: !7521)
!7523 = !DILocation(line: 3986, column: 7, scope: !7521)
!7524 = !DILocation(line: 3985, column: 7, scope: !7332)
!7525 = !DILocation(line: 3987, column: 26, scope: !7521)
!7526 = !DILocation(line: 3987, column: 53, scope: !7521)
!7527 = !DILocation(line: 3987, column: 43, scope: !7521)
!7528 = !DILocation(line: 3987, column: 5, scope: !7521)
!7529 = !DILocation(line: 3989, column: 7, scope: !7530)
!7530 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 3989, column: 7)
!7531 = !DILocation(line: 3989, column: 21, scope: !7530)
!7532 = !DILocation(line: 3989, column: 18, scope: !7530)
!7533 = !DILocation(line: 3989, column: 7, scope: !7332)
!7534 = !DILocation(line: 3990, column: 21, scope: !7530)
!7535 = !DILocation(line: 3990, column: 33, scope: !7530)
!7536 = !DILocation(line: 3990, column: 5, scope: !7530)
!7537 = !DILocation(line: 3991, column: 1, scope: !7332)
!7538 = distinct !DISubprogram(name: "sign_expand_binop", scope: !3, file: !3, line: 2238, type: !7539, scopeLine: 2241, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!7539 = !DISubroutineType(types: !7540)
!7540 = !{!2732, !5, !3938, !3938, !2732, !2732, !2732, !2756, !2214}
!7541 = !DILocalVariable(name: "mode", arg: 1, scope: !7538, file: !3, line: 2238, type: !5)
!7542 = !DILocation(line: 2238, column: 38, scope: !7538)
!7543 = !DILocalVariable(name: "uoptab", arg: 2, scope: !7538, file: !3, line: 2238, type: !3938)
!7544 = !DILocation(line: 2238, column: 50, scope: !7538)
!7545 = !DILocalVariable(name: "soptab", arg: 3, scope: !7538, file: !3, line: 2238, type: !3938)
!7546 = !DILocation(line: 2238, column: 64, scope: !7538)
!7547 = !DILocalVariable(name: "op0", arg: 4, scope: !7538, file: !3, line: 2239, type: !2732)
!7548 = !DILocation(line: 2239, column: 10, scope: !7538)
!7549 = !DILocalVariable(name: "op1", arg: 5, scope: !7538, file: !3, line: 2239, type: !2732)
!7550 = !DILocation(line: 2239, column: 19, scope: !7538)
!7551 = !DILocalVariable(name: "target", arg: 6, scope: !7538, file: !3, line: 2239, type: !2732)
!7552 = !DILocation(line: 2239, column: 28, scope: !7538)
!7553 = !DILocalVariable(name: "unsignedp", arg: 7, scope: !7538, file: !3, line: 2239, type: !2756)
!7554 = !DILocation(line: 2239, column: 40, scope: !7538)
!7555 = !DILocalVariable(name: "methods", arg: 8, scope: !7538, file: !3, line: 2240, type: !2214)
!7556 = !DILocation(line: 2240, column: 25, scope: !7538)
!7557 = !DILocalVariable(name: "temp", scope: !7538, file: !3, line: 2242, type: !2732)
!7558 = !DILocation(line: 2242, column: 7, scope: !7538)
!7559 = !DILocalVariable(name: "direct_optab", scope: !7538, file: !3, line: 2243, type: !3938)
!7560 = !DILocation(line: 2243, column: 9, scope: !7538)
!7561 = !DILocation(line: 2243, column: 24, scope: !7538)
!7562 = !DILocation(line: 2243, column: 36, scope: !7538)
!7563 = !DILocation(line: 2243, column: 45, scope: !7538)
!7564 = !DILocalVariable(name: "wide_soptab", scope: !7538, file: !3, line: 2244, type: !3911)
!7565 = !DILocation(line: 2244, column: 18, scope: !7538)
!7566 = !DILocation(line: 2247, column: 24, scope: !7538)
!7567 = !DILocation(line: 2247, column: 30, scope: !7538)
!7568 = !DILocation(line: 2247, column: 44, scope: !7538)
!7569 = !DILocation(line: 2247, column: 49, scope: !7538)
!7570 = !DILocation(line: 2247, column: 54, scope: !7538)
!7571 = !DILocation(line: 2248, column: 10, scope: !7538)
!7572 = !DILocation(line: 2247, column: 10, scope: !7538)
!7573 = !DILocation(line: 2247, column: 8, scope: !7538)
!7574 = !DILocation(line: 2249, column: 7, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2249, column: 7)
!7576 = !DILocation(line: 2249, column: 12, scope: !7575)
!7577 = !DILocation(line: 2249, column: 15, scope: !7575)
!7578 = !DILocation(line: 2249, column: 23, scope: !7575)
!7579 = !DILocation(line: 2249, column: 7, scope: !7538)
!7580 = !DILocation(line: 2250, column: 12, scope: !7575)
!7581 = !DILocation(line: 2250, column: 5, scope: !7575)
!7582 = !DILocation(line: 2254, column: 18, scope: !7538)
!7583 = !DILocation(line: 2254, column: 17, scope: !7538)
!7584 = !DILocation(line: 2255, column: 3, scope: !7538)
!7585 = !DILocation(line: 2255, column: 39, scope: !7538)
!7586 = !DILocation(line: 2255, column: 49, scope: !7538)
!7587 = !DILocation(line: 2258, column: 15, scope: !7538)
!7588 = !DILocation(line: 2258, column: 27, scope: !7538)
!7589 = !DILocation(line: 2260, column: 24, scope: !7538)
!7590 = !DILocation(line: 2260, column: 44, scope: !7538)
!7591 = !DILocation(line: 2260, column: 49, scope: !7538)
!7592 = !DILocation(line: 2260, column: 54, scope: !7538)
!7593 = !DILocation(line: 2261, column: 10, scope: !7538)
!7594 = !DILocation(line: 2260, column: 10, scope: !7538)
!7595 = !DILocation(line: 2260, column: 8, scope: !7538)
!7596 = !DILocation(line: 2264, column: 7, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2264, column: 7)
!7598 = !DILocation(line: 2264, column: 12, scope: !7597)
!7599 = !DILocation(line: 2264, column: 17, scope: !7597)
!7600 = !DILocation(line: 2264, column: 20, scope: !7597)
!7601 = !DILocation(line: 2264, column: 7, scope: !7538)
!7602 = !DILocation(line: 2265, column: 26, scope: !7597)
!7603 = !DILocation(line: 2265, column: 32, scope: !7597)
!7604 = !DILocation(line: 2265, column: 40, scope: !7597)
!7605 = !DILocation(line: 2265, column: 45, scope: !7597)
!7606 = !DILocation(line: 2265, column: 50, scope: !7597)
!7607 = !DILocation(line: 2266, column: 5, scope: !7597)
!7608 = !DILocation(line: 2265, column: 12, scope: !7597)
!7609 = !DILocation(line: 2265, column: 10, scope: !7597)
!7610 = !DILocation(line: 2265, column: 5, scope: !7597)
!7611 = !DILocation(line: 2267, column: 7, scope: !7612)
!7612 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2267, column: 7)
!7613 = !DILocation(line: 2267, column: 12, scope: !7612)
!7614 = !DILocation(line: 2267, column: 15, scope: !7612)
!7615 = !DILocation(line: 2267, column: 23, scope: !7612)
!7616 = !DILocation(line: 2267, column: 7, scope: !7538)
!7617 = !DILocation(line: 2268, column: 12, scope: !7612)
!7618 = !DILocation(line: 2268, column: 5, scope: !7612)
!7619 = !DILocation(line: 2271, column: 24, scope: !7538)
!7620 = !DILocation(line: 2271, column: 30, scope: !7538)
!7621 = !DILocation(line: 2271, column: 44, scope: !7538)
!7622 = !DILocation(line: 2271, column: 49, scope: !7538)
!7623 = !DILocation(line: 2271, column: 54, scope: !7538)
!7624 = !DILocation(line: 2271, column: 62, scope: !7538)
!7625 = !DILocation(line: 2271, column: 10, scope: !7538)
!7626 = !DILocation(line: 2271, column: 8, scope: !7538)
!7627 = !DILocation(line: 2272, column: 7, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2272, column: 7)
!7629 = !DILocation(line: 2272, column: 12, scope: !7628)
!7630 = !DILocation(line: 2272, column: 15, scope: !7628)
!7631 = !DILocation(line: 2272, column: 23, scope: !7628)
!7632 = !DILocation(line: 2272, column: 7, scope: !7538)
!7633 = !DILocation(line: 2273, column: 12, scope: !7628)
!7634 = !DILocation(line: 2273, column: 5, scope: !7628)
!7635 = !DILocation(line: 2276, column: 24, scope: !7538)
!7636 = !DILocation(line: 2276, column: 44, scope: !7538)
!7637 = !DILocation(line: 2276, column: 49, scope: !7538)
!7638 = !DILocation(line: 2276, column: 54, scope: !7538)
!7639 = !DILocation(line: 2277, column: 10, scope: !7538)
!7640 = !DILocation(line: 2277, column: 21, scope: !7538)
!7641 = !DILocation(line: 2276, column: 10, scope: !7538)
!7642 = !DILocation(line: 2276, column: 8, scope: !7538)
!7643 = !DILocation(line: 2278, column: 7, scope: !7644)
!7644 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2278, column: 7)
!7645 = !DILocation(line: 2278, column: 12, scope: !7644)
!7646 = !DILocation(line: 2278, column: 7, scope: !7538)
!7647 = !DILocation(line: 2279, column: 12, scope: !7644)
!7648 = !DILocation(line: 2279, column: 5, scope: !7644)
!7649 = !DILocation(line: 2280, column: 7, scope: !7650)
!7650 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2280, column: 7)
!7651 = !DILocation(line: 2280, column: 7, scope: !7538)
!7652 = !DILocation(line: 2281, column: 26, scope: !7650)
!7653 = !DILocation(line: 2281, column: 32, scope: !7650)
!7654 = !DILocation(line: 2281, column: 40, scope: !7650)
!7655 = !DILocation(line: 2281, column: 45, scope: !7650)
!7656 = !DILocation(line: 2281, column: 50, scope: !7650)
!7657 = !DILocation(line: 2282, column: 5, scope: !7650)
!7658 = !DILocation(line: 2282, column: 16, scope: !7650)
!7659 = !DILocation(line: 2281, column: 12, scope: !7650)
!7660 = !DILocation(line: 2281, column: 5, scope: !7650)
!7661 = !DILocation(line: 2283, column: 3, scope: !7538)
!7662 = !DILocation(line: 2284, column: 1, scope: !7538)
!7663 = distinct !DISubprogram(name: "expand_twoval_unop", scope: !3, file: !3, line: 2298, type: !7664, scopeLine: 2300, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!7664 = !DISubroutineType(types: !7665)
!7665 = !{!2756, !3938, !2732, !2732, !2732, !2756}
!7666 = !DILocalVariable(name: "unoptab", arg: 1, scope: !7663, file: !3, line: 2298, type: !3938)
!7667 = !DILocation(line: 2298, column: 27, scope: !7663)
!7668 = !DILocalVariable(name: "op0", arg: 2, scope: !7663, file: !3, line: 2298, type: !2732)
!7669 = !DILocation(line: 2298, column: 40, scope: !7663)
!7670 = !DILocalVariable(name: "targ0", arg: 3, scope: !7663, file: !3, line: 2298, type: !2732)
!7671 = !DILocation(line: 2298, column: 49, scope: !7663)
!7672 = !DILocalVariable(name: "targ1", arg: 4, scope: !7663, file: !3, line: 2298, type: !2732)
!7673 = !DILocation(line: 2298, column: 60, scope: !7663)
!7674 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !7663, file: !3, line: 2299, type: !2756)
!7675 = !DILocation(line: 2299, column: 11, scope: !7663)
!7676 = !DILocalVariable(name: "mode", scope: !7663, file: !3, line: 2301, type: !5)
!7677 = !DILocation(line: 2301, column: 21, scope: !7663)
!7678 = !DILocation(line: 2301, column: 28, scope: !7663)
!7679 = !DILocalVariable(name: "mclass", scope: !7663, file: !3, line: 2302, type: !2192)
!7680 = !DILocation(line: 2302, column: 19, scope: !7663)
!7681 = !DILocalVariable(name: "wider_mode", scope: !7663, file: !3, line: 2303, type: !5)
!7682 = !DILocation(line: 2303, column: 21, scope: !7663)
!7683 = !DILocalVariable(name: "entry_last", scope: !7663, file: !3, line: 2304, type: !2732)
!7684 = !DILocation(line: 2304, column: 7, scope: !7663)
!7685 = !DILocation(line: 2304, column: 20, scope: !7663)
!7686 = !DILocalVariable(name: "last", scope: !7663, file: !3, line: 2305, type: !2732)
!7687 = !DILocation(line: 2305, column: 7, scope: !7663)
!7688 = !DILocation(line: 2307, column: 12, scope: !7663)
!7689 = !DILocation(line: 2307, column: 10, scope: !7663)
!7690 = !DILocation(line: 2309, column: 8, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2309, column: 7)
!7692 = !DILocation(line: 2309, column: 7, scope: !7663)
!7693 = !DILocation(line: 2310, column: 26, scope: !7691)
!7694 = !DILocation(line: 2310, column: 13, scope: !7691)
!7695 = !DILocation(line: 2310, column: 11, scope: !7691)
!7696 = !DILocation(line: 2310, column: 5, scope: !7691)
!7697 = !DILocation(line: 2311, column: 8, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2311, column: 7)
!7699 = !DILocation(line: 2311, column: 7, scope: !7663)
!7700 = !DILocation(line: 2312, column: 26, scope: !7698)
!7701 = !DILocation(line: 2312, column: 13, scope: !7698)
!7702 = !DILocation(line: 2312, column: 11, scope: !7698)
!7703 = !DILocation(line: 2312, column: 5, scope: !7698)
!7704 = !DILocation(line: 2315, column: 10, scope: !7663)
!7705 = !DILocation(line: 2315, column: 8, scope: !7663)
!7706 = !DILocation(line: 2317, column: 7, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2317, column: 7)
!7708 = !DILocation(line: 2317, column: 38, scope: !7707)
!7709 = !DILocation(line: 2317, column: 48, scope: !7707)
!7710 = !DILocation(line: 2317, column: 7, scope: !7663)
!7711 = !DILocalVariable(name: "icode", scope: !7712, file: !3, line: 2319, type: !2756)
!7712 = distinct !DILexicalBlock(scope: !7707, file: !3, line: 2318, column: 5)
!7713 = !DILocation(line: 2319, column: 11, scope: !7712)
!7714 = !DILocation(line: 2319, column: 25, scope: !7712)
!7715 = !DILocation(line: 2319, column: 56, scope: !7712)
!7716 = !DILocalVariable(name: "mode0", scope: !7712, file: !3, line: 2320, type: !5)
!7717 = !DILocation(line: 2320, column: 25, scope: !7712)
!7718 = !DILocation(line: 2320, column: 43, scope: !7712)
!7719 = !DILocation(line: 2320, column: 33, scope: !7712)
!7720 = !DILocation(line: 2320, column: 50, scope: !7712)
!7721 = !DILocation(line: 2320, column: 61, scope: !7712)
!7722 = !DILocalVariable(name: "pat", scope: !7712, file: !3, line: 2321, type: !2732)
!7723 = !DILocation(line: 2321, column: 11, scope: !7712)
!7724 = !DILocalVariable(name: "xop0", scope: !7712, file: !3, line: 2322, type: !2732)
!7725 = !DILocation(line: 2322, column: 11, scope: !7712)
!7726 = !DILocation(line: 2322, column: 18, scope: !7712)
!7727 = !DILocation(line: 2324, column: 11, scope: !7728)
!7728 = distinct !DILexicalBlock(scope: !7712, file: !3, line: 2324, column: 11)
!7729 = !DILocation(line: 2324, column: 27, scope: !7728)
!7730 = !DILocation(line: 2325, column: 4, scope: !7728)
!7731 = !DILocation(line: 2325, column: 7, scope: !7728)
!7732 = !DILocation(line: 2325, column: 26, scope: !7728)
!7733 = !DILocation(line: 2325, column: 23, scope: !7728)
!7734 = !DILocation(line: 2324, column: 11, scope: !7712)
!7735 = !DILocation(line: 2326, column: 26, scope: !7728)
!7736 = !DILocation(line: 2326, column: 33, scope: !7728)
!7737 = !DILocation(line: 2326, column: 39, scope: !7728)
!7738 = !DILocation(line: 2326, column: 9, scope: !7728)
!7739 = !DILocation(line: 2326, column: 7, scope: !7728)
!7740 = !DILocation(line: 2326, column: 2, scope: !7728)
!7741 = !DILocation(line: 2329, column: 22, scope: !7742)
!7742 = distinct !DILexicalBlock(scope: !7712, file: !3, line: 2329, column: 11)
!7743 = !DILocation(line: 2329, column: 12, scope: !7742)
!7744 = !DILocation(line: 2329, column: 29, scope: !7742)
!7745 = !DILocation(line: 2329, column: 40, scope: !7742)
!7746 = !DILocation(line: 2329, column: 51, scope: !7742)
!7747 = !DILocation(line: 2329, column: 57, scope: !7742)
!7748 = !DILocation(line: 2329, column: 11, scope: !7712)
!7749 = !DILocation(line: 2330, column: 27, scope: !7742)
!7750 = !DILocation(line: 2330, column: 34, scope: !7742)
!7751 = !DILocation(line: 2330, column: 9, scope: !7742)
!7752 = !DILocation(line: 2330, column: 7, scope: !7742)
!7753 = !DILocation(line: 2330, column: 2, scope: !7742)
!7754 = !DILocation(line: 2334, column: 7, scope: !7712)
!7755 = !DILocation(line: 2335, column: 7, scope: !7712)
!7756 = !DILocation(line: 2337, column: 13, scope: !7712)
!7757 = !DILocation(line: 2337, column: 30, scope: !7712)
!7758 = !DILocation(line: 2337, column: 37, scope: !7712)
!7759 = !DILocation(line: 2337, column: 44, scope: !7712)
!7760 = !DILocation(line: 2337, column: 11, scope: !7712)
!7761 = !DILocation(line: 2338, column: 11, scope: !7762)
!7762 = distinct !DILexicalBlock(scope: !7712, file: !3, line: 2338, column: 11)
!7763 = !DILocation(line: 2338, column: 11, scope: !7712)
!7764 = !DILocation(line: 2340, column: 15, scope: !7765)
!7765 = distinct !DILexicalBlock(scope: !7762, file: !3, line: 2339, column: 2)
!7766 = !DILocation(line: 2340, column: 4, scope: !7765)
!7767 = !DILocation(line: 2341, column: 4, scope: !7765)
!7768 = !DILocation(line: 2344, column: 22, scope: !7762)
!7769 = !DILocation(line: 2344, column: 2, scope: !7762)
!7770 = !DILocation(line: 2345, column: 5, scope: !7712)
!7771 = !DILocation(line: 2349, column: 7, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2349, column: 7)
!7773 = !DILocation(line: 2349, column: 7, scope: !7663)
!7774 = !DILocation(line: 2351, column: 25, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7776, file: !3, line: 2351, column: 7)
!7776 = distinct !DILexicalBlock(scope: !7772, file: !3, line: 2350, column: 5)
!7777 = !DILocation(line: 2351, column: 23, scope: !7775)
!7778 = !DILocation(line: 2351, column: 12, scope: !7775)
!7779 = !DILocation(line: 2352, column: 5, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 2351, column: 7)
!7781 = !DILocation(line: 2352, column: 16, scope: !7780)
!7782 = !DILocation(line: 2351, column: 7, scope: !7775)
!7783 = !DILocation(line: 2355, column: 8, scope: !7784)
!7784 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 2355, column: 8)
!7785 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 2354, column: 2)
!7786 = !DILocation(line: 2355, column: 45, scope: !7784)
!7787 = !DILocation(line: 2356, column: 8, scope: !7784)
!7788 = !DILocation(line: 2355, column: 8, scope: !7785)
!7789 = !DILocalVariable(name: "t0", scope: !7790, file: !3, line: 2358, type: !2732)
!7790 = distinct !DILexicalBlock(scope: !7784, file: !3, line: 2357, column: 6)
!7791 = !DILocation(line: 2358, column: 12, scope: !7790)
!7792 = !DILocation(line: 2358, column: 30, scope: !7790)
!7793 = !DILocation(line: 2358, column: 17, scope: !7790)
!7794 = !DILocalVariable(name: "t1", scope: !7790, file: !3, line: 2359, type: !2732)
!7795 = !DILocation(line: 2359, column: 12, scope: !7790)
!7796 = !DILocation(line: 2359, column: 30, scope: !7790)
!7797 = !DILocation(line: 2359, column: 17, scope: !7790)
!7798 = !DILocalVariable(name: "cop0", scope: !7790, file: !3, line: 2360, type: !2732)
!7799 = !DILocation(line: 2360, column: 12, scope: !7790)
!7800 = !DILocation(line: 2360, column: 34, scope: !7790)
!7801 = !DILocation(line: 2360, column: 46, scope: !7790)
!7802 = !DILocation(line: 2360, column: 52, scope: !7790)
!7803 = !DILocation(line: 2360, column: 57, scope: !7790)
!7804 = !DILocation(line: 2360, column: 19, scope: !7790)
!7805 = !DILocation(line: 2362, column: 32, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 2362, column: 12)
!7807 = !DILocation(line: 2362, column: 41, scope: !7806)
!7808 = !DILocation(line: 2362, column: 47, scope: !7806)
!7809 = !DILocation(line: 2362, column: 51, scope: !7806)
!7810 = !DILocation(line: 2362, column: 55, scope: !7806)
!7811 = !DILocation(line: 2362, column: 12, scope: !7806)
!7812 = !DILocation(line: 2362, column: 12, scope: !7790)
!7813 = !DILocation(line: 2364, column: 19, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 2363, column: 3)
!7815 = !DILocation(line: 2364, column: 26, scope: !7814)
!7816 = !DILocation(line: 2364, column: 30, scope: !7814)
!7817 = !DILocation(line: 2364, column: 5, scope: !7814)
!7818 = !DILocation(line: 2365, column: 19, scope: !7814)
!7819 = !DILocation(line: 2365, column: 26, scope: !7814)
!7820 = !DILocation(line: 2365, column: 30, scope: !7814)
!7821 = !DILocation(line: 2365, column: 5, scope: !7814)
!7822 = !DILocation(line: 2366, column: 5, scope: !7814)
!7823 = !DILocation(line: 2369, column: 23, scope: !7806)
!7824 = !DILocation(line: 2369, column: 3, scope: !7806)
!7825 = !DILocation(line: 2370, column: 6, scope: !7790)
!7826 = !DILocation(line: 2371, column: 2, scope: !7785)
!7827 = !DILocation(line: 2353, column: 18, scope: !7780)
!7828 = !DILocation(line: 2353, column: 16, scope: !7780)
!7829 = !DILocation(line: 2351, column: 7, scope: !7780)
!7830 = distinct !{!7830, !7782, !7831}
!7831 = !DILocation(line: 2371, column: 2, scope: !7775)
!7832 = !DILocation(line: 2372, column: 5, scope: !7776)
!7833 = !DILocation(line: 2374, column: 23, scope: !7663)
!7834 = !DILocation(line: 2374, column: 3, scope: !7663)
!7835 = !DILocation(line: 2375, column: 3, scope: !7663)
!7836 = !DILocation(line: 2376, column: 1, scope: !7663)
!7837 = distinct !DISubprogram(name: "expand_twoval_binop", scope: !3, file: !3, line: 2391, type: !7838, scopeLine: 2393, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!7838 = !DISubroutineType(types: !7839)
!7839 = !{!2756, !3938, !2732, !2732, !2732, !2732, !2756}
!7840 = !DILocalVariable(name: "binoptab", arg: 1, scope: !7837, file: !3, line: 2391, type: !3938)
!7841 = !DILocation(line: 2391, column: 28, scope: !7837)
!7842 = !DILocalVariable(name: "op0", arg: 2, scope: !7837, file: !3, line: 2391, type: !2732)
!7843 = !DILocation(line: 2391, column: 42, scope: !7837)
!7844 = !DILocalVariable(name: "op1", arg: 3, scope: !7837, file: !3, line: 2391, type: !2732)
!7845 = !DILocation(line: 2391, column: 51, scope: !7837)
!7846 = !DILocalVariable(name: "targ0", arg: 4, scope: !7837, file: !3, line: 2391, type: !2732)
!7847 = !DILocation(line: 2391, column: 60, scope: !7837)
!7848 = !DILocalVariable(name: "targ1", arg: 5, scope: !7837, file: !3, line: 2391, type: !2732)
!7849 = !DILocation(line: 2391, column: 71, scope: !7837)
!7850 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !7837, file: !3, line: 2392, type: !2756)
!7851 = !DILocation(line: 2392, column: 12, scope: !7837)
!7852 = !DILocalVariable(name: "mode", scope: !7837, file: !3, line: 2394, type: !5)
!7853 = !DILocation(line: 2394, column: 21, scope: !7837)
!7854 = !DILocation(line: 2394, column: 28, scope: !7837)
!7855 = !DILocalVariable(name: "mclass", scope: !7837, file: !3, line: 2395, type: !2192)
!7856 = !DILocation(line: 2395, column: 19, scope: !7837)
!7857 = !DILocalVariable(name: "wider_mode", scope: !7837, file: !3, line: 2396, type: !5)
!7858 = !DILocation(line: 2396, column: 21, scope: !7837)
!7859 = !DILocalVariable(name: "entry_last", scope: !7837, file: !3, line: 2397, type: !2732)
!7860 = !DILocation(line: 2397, column: 7, scope: !7837)
!7861 = !DILocation(line: 2397, column: 20, scope: !7837)
!7862 = !DILocalVariable(name: "last", scope: !7837, file: !3, line: 2398, type: !2732)
!7863 = !DILocation(line: 2398, column: 7, scope: !7837)
!7864 = !DILocation(line: 2400, column: 12, scope: !7837)
!7865 = !DILocation(line: 2400, column: 10, scope: !7837)
!7866 = !DILocation(line: 2402, column: 8, scope: !7867)
!7867 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 2402, column: 7)
!7868 = !DILocation(line: 2402, column: 7, scope: !7837)
!7869 = !DILocation(line: 2403, column: 26, scope: !7867)
!7870 = !DILocation(line: 2403, column: 13, scope: !7867)
!7871 = !DILocation(line: 2403, column: 11, scope: !7867)
!7872 = !DILocation(line: 2403, column: 5, scope: !7867)
!7873 = !DILocation(line: 2404, column: 8, scope: !7874)
!7874 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 2404, column: 7)
!7875 = !DILocation(line: 2404, column: 7, scope: !7837)
!7876 = !DILocation(line: 2405, column: 26, scope: !7874)
!7877 = !DILocation(line: 2405, column: 13, scope: !7874)
!7878 = !DILocation(line: 2405, column: 11, scope: !7874)
!7879 = !DILocation(line: 2405, column: 5, scope: !7874)
!7880 = !DILocation(line: 2408, column: 10, scope: !7837)
!7881 = !DILocation(line: 2408, column: 8, scope: !7837)
!7882 = !DILocation(line: 2410, column: 7, scope: !7883)
!7883 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 2410, column: 7)
!7884 = !DILocation(line: 2410, column: 39, scope: !7883)
!7885 = !DILocation(line: 2410, column: 49, scope: !7883)
!7886 = !DILocation(line: 2410, column: 7, scope: !7837)
!7887 = !DILocalVariable(name: "icode", scope: !7888, file: !3, line: 2412, type: !2756)
!7888 = distinct !DILexicalBlock(scope: !7883, file: !3, line: 2411, column: 5)
!7889 = !DILocation(line: 2412, column: 11, scope: !7888)
!7890 = !DILocation(line: 2412, column: 25, scope: !7888)
!7891 = !DILocation(line: 2412, column: 57, scope: !7888)
!7892 = !DILocalVariable(name: "mode0", scope: !7888, file: !3, line: 2413, type: !5)
!7893 = !DILocation(line: 2413, column: 25, scope: !7888)
!7894 = !DILocation(line: 2413, column: 43, scope: !7888)
!7895 = !DILocation(line: 2413, column: 33, scope: !7888)
!7896 = !DILocation(line: 2413, column: 50, scope: !7888)
!7897 = !DILocation(line: 2413, column: 61, scope: !7888)
!7898 = !DILocalVariable(name: "mode1", scope: !7888, file: !3, line: 2414, type: !5)
!7899 = !DILocation(line: 2414, column: 25, scope: !7888)
!7900 = !DILocation(line: 2414, column: 43, scope: !7888)
!7901 = !DILocation(line: 2414, column: 33, scope: !7888)
!7902 = !DILocation(line: 2414, column: 50, scope: !7888)
!7903 = !DILocation(line: 2414, column: 61, scope: !7888)
!7904 = !DILocalVariable(name: "pat", scope: !7888, file: !3, line: 2415, type: !2732)
!7905 = !DILocation(line: 2415, column: 11, scope: !7888)
!7906 = !DILocalVariable(name: "xop0", scope: !7888, file: !3, line: 2416, type: !2732)
!7907 = !DILocation(line: 2416, column: 11, scope: !7888)
!7908 = !DILocation(line: 2416, column: 18, scope: !7888)
!7909 = !DILocalVariable(name: "xop1", scope: !7888, file: !3, line: 2416, type: !2732)
!7910 = !DILocation(line: 2416, column: 23, scope: !7888)
!7911 = !DILocation(line: 2416, column: 30, scope: !7888)
!7912 = !DILocation(line: 2419, column: 40, scope: !7888)
!7913 = !DILocation(line: 2419, column: 47, scope: !7888)
!7914 = !DILocation(line: 2419, column: 57, scope: !7888)
!7915 = !DILocation(line: 2419, column: 63, scope: !7888)
!7916 = !DILocation(line: 2419, column: 14, scope: !7888)
!7917 = !DILocation(line: 2419, column: 12, scope: !7888)
!7918 = !DILocation(line: 2420, column: 40, scope: !7888)
!7919 = !DILocation(line: 2420, column: 47, scope: !7888)
!7920 = !DILocation(line: 2420, column: 57, scope: !7888)
!7921 = !DILocation(line: 2420, column: 63, scope: !7888)
!7922 = !DILocation(line: 2420, column: 14, scope: !7888)
!7923 = !DILocation(line: 2420, column: 12, scope: !7888)
!7924 = !DILocation(line: 2428, column: 11, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7888, file: !3, line: 2428, column: 11)
!7926 = !DILocation(line: 2428, column: 29, scope: !7925)
!7927 = !DILocation(line: 2428, column: 26, scope: !7925)
!7928 = !DILocation(line: 2428, column: 35, scope: !7925)
!7929 = !DILocation(line: 2428, column: 38, scope: !7925)
!7930 = !DILocation(line: 2428, column: 44, scope: !7925)
!7931 = !DILocation(line: 2428, column: 11, scope: !7888)
!7932 = !DILocation(line: 2429, column: 24, scope: !7925)
!7933 = !DILocation(line: 2430, column: 10, scope: !7925)
!7934 = !DILocation(line: 2430, column: 25, scope: !7925)
!7935 = !DILocation(line: 2431, column: 12, scope: !7925)
!7936 = !DILocation(line: 2432, column: 12, scope: !7925)
!7937 = !DILocation(line: 2433, column: 10, scope: !7925)
!7938 = !DILocation(line: 2433, column: 16, scope: !7925)
!7939 = !DILocation(line: 2429, column: 9, scope: !7925)
!7940 = !DILocation(line: 2429, column: 7, scope: !7925)
!7941 = !DILocation(line: 2429, column: 2, scope: !7925)
!7942 = !DILocation(line: 2435, column: 11, scope: !7943)
!7943 = distinct !DILexicalBlock(scope: !7888, file: !3, line: 2435, column: 11)
!7944 = !DILocation(line: 2435, column: 29, scope: !7943)
!7945 = !DILocation(line: 2435, column: 26, scope: !7943)
!7946 = !DILocation(line: 2435, column: 35, scope: !7943)
!7947 = !DILocation(line: 2435, column: 38, scope: !7943)
!7948 = !DILocation(line: 2435, column: 44, scope: !7943)
!7949 = !DILocation(line: 2435, column: 11, scope: !7888)
!7950 = !DILocation(line: 2436, column: 24, scope: !7943)
!7951 = !DILocation(line: 2437, column: 10, scope: !7943)
!7952 = !DILocation(line: 2437, column: 25, scope: !7943)
!7953 = !DILocation(line: 2438, column: 12, scope: !7943)
!7954 = !DILocation(line: 2439, column: 12, scope: !7943)
!7955 = !DILocation(line: 2440, column: 10, scope: !7943)
!7956 = !DILocation(line: 2440, column: 16, scope: !7943)
!7957 = !DILocation(line: 2436, column: 9, scope: !7943)
!7958 = !DILocation(line: 2436, column: 7, scope: !7943)
!7959 = !DILocation(line: 2436, column: 2, scope: !7943)
!7960 = !DILocation(line: 2443, column: 22, scope: !7961)
!7961 = distinct !DILexicalBlock(scope: !7888, file: !3, line: 2443, column: 11)
!7962 = !DILocation(line: 2443, column: 12, scope: !7961)
!7963 = !DILocation(line: 2443, column: 29, scope: !7961)
!7964 = !DILocation(line: 2443, column: 40, scope: !7961)
!7965 = !DILocation(line: 2443, column: 51, scope: !7961)
!7966 = !DILocation(line: 2443, column: 57, scope: !7961)
!7967 = !DILocation(line: 2443, column: 11, scope: !7888)
!7968 = !DILocation(line: 2444, column: 27, scope: !7961)
!7969 = !DILocation(line: 2444, column: 34, scope: !7961)
!7970 = !DILocation(line: 2444, column: 9, scope: !7961)
!7971 = !DILocation(line: 2444, column: 7, scope: !7961)
!7972 = !DILocation(line: 2444, column: 2, scope: !7961)
!7973 = !DILocation(line: 2446, column: 22, scope: !7974)
!7974 = distinct !DILexicalBlock(scope: !7888, file: !3, line: 2446, column: 11)
!7975 = !DILocation(line: 2446, column: 12, scope: !7974)
!7976 = !DILocation(line: 2446, column: 29, scope: !7974)
!7977 = !DILocation(line: 2446, column: 40, scope: !7974)
!7978 = !DILocation(line: 2446, column: 51, scope: !7974)
!7979 = !DILocation(line: 2446, column: 57, scope: !7974)
!7980 = !DILocation(line: 2446, column: 11, scope: !7888)
!7981 = !DILocation(line: 2447, column: 27, scope: !7974)
!7982 = !DILocation(line: 2447, column: 34, scope: !7974)
!7983 = !DILocation(line: 2447, column: 9, scope: !7974)
!7984 = !DILocation(line: 2447, column: 7, scope: !7974)
!7985 = !DILocation(line: 2447, column: 2, scope: !7974)
!7986 = !DILocation(line: 2451, column: 7, scope: !7888)
!7987 = !DILocation(line: 2452, column: 7, scope: !7888)
!7988 = !DILocation(line: 2454, column: 13, scope: !7888)
!7989 = !DILocation(line: 2454, column: 30, scope: !7888)
!7990 = !DILocation(line: 2454, column: 37, scope: !7888)
!7991 = !DILocation(line: 2454, column: 43, scope: !7888)
!7992 = !DILocation(line: 2454, column: 49, scope: !7888)
!7993 = !DILocation(line: 2454, column: 11, scope: !7888)
!7994 = !DILocation(line: 2455, column: 11, scope: !7995)
!7995 = distinct !DILexicalBlock(scope: !7888, file: !3, line: 2455, column: 11)
!7996 = !DILocation(line: 2455, column: 11, scope: !7888)
!7997 = !DILocation(line: 2457, column: 15, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !7995, file: !3, line: 2456, column: 2)
!7999 = !DILocation(line: 2457, column: 4, scope: !7998)
!8000 = !DILocation(line: 2458, column: 4, scope: !7998)
!8001 = !DILocation(line: 2461, column: 22, scope: !7995)
!8002 = !DILocation(line: 2461, column: 2, scope: !7995)
!8003 = !DILocation(line: 2462, column: 5, scope: !7888)
!8004 = !DILocation(line: 2466, column: 7, scope: !8005)
!8005 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 2466, column: 7)
!8006 = !DILocation(line: 2466, column: 7, scope: !7837)
!8007 = !DILocation(line: 2468, column: 25, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !8009, file: !3, line: 2468, column: 7)
!8009 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 2467, column: 5)
!8010 = !DILocation(line: 2468, column: 23, scope: !8008)
!8011 = !DILocation(line: 2468, column: 12, scope: !8008)
!8012 = !DILocation(line: 2469, column: 5, scope: !8013)
!8013 = distinct !DILexicalBlock(scope: !8008, file: !3, line: 2468, column: 7)
!8014 = !DILocation(line: 2469, column: 16, scope: !8013)
!8015 = !DILocation(line: 2468, column: 7, scope: !8008)
!8016 = !DILocation(line: 2472, column: 8, scope: !8017)
!8017 = distinct !DILexicalBlock(scope: !8018, file: !3, line: 2472, column: 8)
!8018 = distinct !DILexicalBlock(scope: !8013, file: !3, line: 2471, column: 2)
!8019 = !DILocation(line: 2472, column: 46, scope: !8017)
!8020 = !DILocation(line: 2473, column: 8, scope: !8017)
!8021 = !DILocation(line: 2472, column: 8, scope: !8018)
!8022 = !DILocalVariable(name: "t0", scope: !8023, file: !3, line: 2475, type: !2732)
!8023 = distinct !DILexicalBlock(scope: !8017, file: !3, line: 2474, column: 6)
!8024 = !DILocation(line: 2475, column: 12, scope: !8023)
!8025 = !DILocation(line: 2475, column: 30, scope: !8023)
!8026 = !DILocation(line: 2475, column: 17, scope: !8023)
!8027 = !DILocalVariable(name: "t1", scope: !8023, file: !3, line: 2476, type: !2732)
!8028 = !DILocation(line: 2476, column: 12, scope: !8023)
!8029 = !DILocation(line: 2476, column: 30, scope: !8023)
!8030 = !DILocation(line: 2476, column: 17, scope: !8023)
!8031 = !DILocalVariable(name: "cop0", scope: !8023, file: !3, line: 2477, type: !2732)
!8032 = !DILocation(line: 2477, column: 12, scope: !8023)
!8033 = !DILocation(line: 2477, column: 34, scope: !8023)
!8034 = !DILocation(line: 2477, column: 46, scope: !8023)
!8035 = !DILocation(line: 2477, column: 52, scope: !8023)
!8036 = !DILocation(line: 2477, column: 57, scope: !8023)
!8037 = !DILocation(line: 2477, column: 19, scope: !8023)
!8038 = !DILocalVariable(name: "cop1", scope: !8023, file: !3, line: 2478, type: !2732)
!8039 = !DILocation(line: 2478, column: 12, scope: !8023)
!8040 = !DILocation(line: 2478, column: 34, scope: !8023)
!8041 = !DILocation(line: 2478, column: 46, scope: !8023)
!8042 = !DILocation(line: 2478, column: 52, scope: !8023)
!8043 = !DILocation(line: 2478, column: 57, scope: !8023)
!8044 = !DILocation(line: 2478, column: 19, scope: !8023)
!8045 = !DILocation(line: 2480, column: 33, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 2480, column: 12)
!8047 = !DILocation(line: 2480, column: 43, scope: !8046)
!8048 = !DILocation(line: 2480, column: 49, scope: !8046)
!8049 = !DILocation(line: 2481, column: 12, scope: !8046)
!8050 = !DILocation(line: 2481, column: 16, scope: !8046)
!8051 = !DILocation(line: 2481, column: 20, scope: !8046)
!8052 = !DILocation(line: 2480, column: 12, scope: !8046)
!8053 = !DILocation(line: 2480, column: 12, scope: !8023)
!8054 = !DILocation(line: 2483, column: 19, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !8046, file: !3, line: 2482, column: 3)
!8056 = !DILocation(line: 2483, column: 26, scope: !8055)
!8057 = !DILocation(line: 2483, column: 30, scope: !8055)
!8058 = !DILocation(line: 2483, column: 5, scope: !8055)
!8059 = !DILocation(line: 2484, column: 19, scope: !8055)
!8060 = !DILocation(line: 2484, column: 26, scope: !8055)
!8061 = !DILocation(line: 2484, column: 30, scope: !8055)
!8062 = !DILocation(line: 2484, column: 5, scope: !8055)
!8063 = !DILocation(line: 2485, column: 5, scope: !8055)
!8064 = !DILocation(line: 2488, column: 23, scope: !8046)
!8065 = !DILocation(line: 2488, column: 3, scope: !8046)
!8066 = !DILocation(line: 2489, column: 6, scope: !8023)
!8067 = !DILocation(line: 2490, column: 2, scope: !8018)
!8068 = !DILocation(line: 2470, column: 18, scope: !8013)
!8069 = !DILocation(line: 2470, column: 16, scope: !8013)
!8070 = !DILocation(line: 2468, column: 7, scope: !8013)
!8071 = distinct !{!8071, !8015, !8072}
!8072 = !DILocation(line: 2490, column: 2, scope: !8008)
!8073 = !DILocation(line: 2491, column: 5, scope: !8009)
!8074 = !DILocation(line: 2493, column: 23, scope: !7837)
!8075 = !DILocation(line: 2493, column: 3, scope: !7837)
!8076 = !DILocation(line: 2494, column: 3, scope: !7837)
!8077 = !DILocation(line: 2495, column: 1, scope: !7837)
!8078 = distinct !DISubprogram(name: "expand_twoval_binop_libfunc", scope: !3, file: !3, line: 2507, type: !8079, scopeLine: 2509, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!8079 = !DISubroutineType(types: !8080)
!8080 = !{!2966, !3938, !2732, !2732, !2732, !2732, !384}
!8081 = !DILocalVariable(name: "binoptab", arg: 1, scope: !8078, file: !3, line: 2507, type: !3938)
!8082 = !DILocation(line: 2507, column: 36, scope: !8078)
!8083 = !DILocalVariable(name: "op0", arg: 2, scope: !8078, file: !3, line: 2507, type: !2732)
!8084 = !DILocation(line: 2507, column: 50, scope: !8078)
!8085 = !DILocalVariable(name: "op1", arg: 3, scope: !8078, file: !3, line: 2507, type: !2732)
!8086 = !DILocation(line: 2507, column: 59, scope: !8078)
!8087 = !DILocalVariable(name: "targ0", arg: 4, scope: !8078, file: !3, line: 2508, type: !2732)
!8088 = !DILocation(line: 2508, column: 13, scope: !8078)
!8089 = !DILocalVariable(name: "targ1", arg: 5, scope: !8078, file: !3, line: 2508, type: !2732)
!8090 = !DILocation(line: 2508, column: 24, scope: !8078)
!8091 = !DILocalVariable(name: "code", arg: 6, scope: !8078, file: !3, line: 2508, type: !384)
!8092 = !DILocation(line: 2508, column: 45, scope: !8078)
!8093 = !DILocalVariable(name: "mode", scope: !8078, file: !3, line: 2510, type: !5)
!8094 = !DILocation(line: 2510, column: 21, scope: !8078)
!8095 = !DILocalVariable(name: "libval_mode", scope: !8078, file: !3, line: 2511, type: !5)
!8096 = !DILocation(line: 2511, column: 21, scope: !8078)
!8097 = !DILocalVariable(name: "libval", scope: !8078, file: !3, line: 2512, type: !2732)
!8098 = !DILocation(line: 2512, column: 7, scope: !8078)
!8099 = !DILocalVariable(name: "insns", scope: !8078, file: !3, line: 2513, type: !2732)
!8100 = !DILocation(line: 2513, column: 7, scope: !8078)
!8101 = !DILocalVariable(name: "libfunc", scope: !8078, file: !3, line: 2514, type: !2732)
!8102 = !DILocation(line: 2514, column: 7, scope: !8078)
!8103 = !DILocation(line: 2517, column: 3, scope: !8078)
!8104 = !DILocation(line: 2519, column: 10, scope: !8078)
!8105 = !DILocation(line: 2519, column: 8, scope: !8078)
!8106 = !DILocation(line: 2520, column: 28, scope: !8078)
!8107 = !DILocation(line: 2520, column: 38, scope: !8078)
!8108 = !DILocation(line: 2520, column: 13, scope: !8078)
!8109 = !DILocation(line: 2520, column: 11, scope: !8078)
!8110 = !DILocation(line: 2521, column: 8, scope: !8111)
!8111 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 2521, column: 7)
!8112 = !DILocation(line: 2521, column: 7, scope: !8078)
!8113 = !DILocation(line: 2522, column: 5, scope: !8111)
!8114 = !DILocation(line: 2526, column: 45, scope: !8078)
!8115 = !DILocation(line: 2526, column: 43, scope: !8078)
!8116 = !DILocation(line: 2526, column: 17, scope: !8078)
!8117 = !DILocation(line: 2526, column: 15, scope: !8078)
!8118 = !DILocation(line: 2528, column: 3, scope: !8078)
!8119 = !DILocation(line: 2529, column: 37, scope: !8078)
!8120 = !DILocation(line: 2530, column: 9, scope: !8078)
!8121 = !DILocation(line: 2531, column: 9, scope: !8078)
!8122 = !DILocation(line: 2531, column: 14, scope: !8078)
!8123 = !DILocation(line: 2532, column: 9, scope: !8078)
!8124 = !DILocation(line: 2532, column: 14, scope: !8078)
!8125 = !DILocation(line: 2529, column: 12, scope: !8078)
!8126 = !DILocation(line: 2529, column: 10, scope: !8078)
!8127 = !DILocation(line: 2534, column: 33, scope: !8078)
!8128 = !DILocation(line: 2534, column: 39, scope: !8078)
!8129 = !DILocation(line: 2534, column: 47, scope: !8078)
!8130 = !DILocation(line: 2535, column: 5, scope: !8078)
!8131 = !DILocation(line: 2535, column: 17, scope: !8078)
!8132 = !DILocation(line: 2534, column: 12, scope: !8078)
!8133 = !DILocation(line: 2534, column: 10, scope: !8078)
!8134 = !DILocation(line: 2536, column: 11, scope: !8078)
!8135 = !DILocation(line: 2536, column: 9, scope: !8078)
!8136 = !DILocation(line: 2537, column: 3, scope: !8078)
!8137 = !DILocation(line: 2539, column: 23, scope: !8078)
!8138 = !DILocation(line: 2539, column: 30, scope: !8078)
!8139 = !DILocation(line: 2539, column: 38, scope: !8078)
!8140 = !DILocation(line: 2539, column: 46, scope: !8078)
!8141 = !DILocation(line: 2539, column: 53, scope: !8078)
!8142 = !DILocation(line: 2540, column: 9, scope: !8078)
!8143 = !DILocation(line: 2539, column: 3, scope: !8078)
!8144 = !DILocation(line: 2542, column: 3, scope: !8078)
!8145 = !DILocation(line: 2543, column: 1, scope: !8078)
!8146 = distinct !DISubprogram(name: "expand_simple_unop", scope: !3, file: !3, line: 2550, type: !8147, scopeLine: 2552, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!8147 = !DISubroutineType(types: !8148)
!8148 = !{!2732, !5, !384, !2732, !2732, !2756}
!8149 = !DILocalVariable(name: "mode", arg: 1, scope: !8146, file: !3, line: 2550, type: !5)
!8150 = !DILocation(line: 2550, column: 39, scope: !8146)
!8151 = !DILocalVariable(name: "code", arg: 2, scope: !8146, file: !3, line: 2550, type: !384)
!8152 = !DILocation(line: 2550, column: 59, scope: !8146)
!8153 = !DILocalVariable(name: "op0", arg: 3, scope: !8146, file: !3, line: 2550, type: !2732)
!8154 = !DILocation(line: 2550, column: 69, scope: !8146)
!8155 = !DILocalVariable(name: "target", arg: 4, scope: !8146, file: !3, line: 2551, type: !2732)
!8156 = !DILocation(line: 2551, column: 11, scope: !8146)
!8157 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !8146, file: !3, line: 2551, type: !2756)
!8158 = !DILocation(line: 2551, column: 23, scope: !8146)
!8159 = !DILocalVariable(name: "unop", scope: !8146, file: !3, line: 2553, type: !3938)
!8160 = !DILocation(line: 2553, column: 9, scope: !8146)
!8161 = !DILocation(line: 2553, column: 36, scope: !8146)
!8162 = !DILocation(line: 2553, column: 16, scope: !8146)
!8163 = !DILocation(line: 2554, column: 3, scope: !8146)
!8164 = !DILocation(line: 2556, column: 23, scope: !8146)
!8165 = !DILocation(line: 2556, column: 29, scope: !8146)
!8166 = !DILocation(line: 2556, column: 35, scope: !8146)
!8167 = !DILocation(line: 2556, column: 40, scope: !8146)
!8168 = !DILocation(line: 2556, column: 48, scope: !8146)
!8169 = !DILocation(line: 2556, column: 10, scope: !8146)
!8170 = !DILocation(line: 2556, column: 3, scope: !8146)
!8171 = distinct !DISubprogram(name: "expand_unop", scope: !3, file: !3, line: 3088, type: !8172, scopeLine: 3090, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!8172 = !DISubroutineType(types: !8173)
!8173 = !{!2732, !5, !3938, !2732, !2732, !2756}
!8174 = !DILocalVariable(name: "mode", arg: 1, scope: !8171, file: !3, line: 3088, type: !5)
!8175 = !DILocation(line: 3088, column: 32, scope: !8171)
!8176 = !DILocalVariable(name: "unoptab", arg: 2, scope: !8171, file: !3, line: 3088, type: !3938)
!8177 = !DILocation(line: 3088, column: 44, scope: !8171)
!8178 = !DILocalVariable(name: "op0", arg: 3, scope: !8171, file: !3, line: 3088, type: !2732)
!8179 = !DILocation(line: 3088, column: 57, scope: !8171)
!8180 = !DILocalVariable(name: "target", arg: 4, scope: !8171, file: !3, line: 3088, type: !2732)
!8181 = !DILocation(line: 3088, column: 66, scope: !8171)
!8182 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !8171, file: !3, line: 3089, type: !2756)
!8183 = !DILocation(line: 3089, column: 11, scope: !8171)
!8184 = !DILocalVariable(name: "mclass", scope: !8171, file: !3, line: 3091, type: !2192)
!8185 = !DILocation(line: 3091, column: 19, scope: !8171)
!8186 = !DILocation(line: 3091, column: 28, scope: !8171)
!8187 = !DILocalVariable(name: "wider_mode", scope: !8171, file: !3, line: 3092, type: !5)
!8188 = !DILocation(line: 3092, column: 21, scope: !8171)
!8189 = !DILocalVariable(name: "temp", scope: !8171, file: !3, line: 3093, type: !2732)
!8190 = !DILocation(line: 3093, column: 7, scope: !8171)
!8191 = !DILocalVariable(name: "libfunc", scope: !8171, file: !3, line: 3094, type: !2732)
!8192 = !DILocation(line: 3094, column: 7, scope: !8171)
!8193 = !DILocation(line: 3096, column: 30, scope: !8171)
!8194 = !DILocation(line: 3096, column: 36, scope: !8171)
!8195 = !DILocation(line: 3096, column: 45, scope: !8171)
!8196 = !DILocation(line: 3096, column: 50, scope: !8171)
!8197 = !DILocation(line: 3096, column: 58, scope: !8171)
!8198 = !DILocation(line: 3096, column: 10, scope: !8171)
!8199 = !DILocation(line: 3096, column: 8, scope: !8171)
!8200 = !DILocation(line: 3097, column: 7, scope: !8201)
!8201 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3097, column: 7)
!8202 = !DILocation(line: 3097, column: 7, scope: !8171)
!8203 = !DILocation(line: 3098, column: 12, scope: !8201)
!8204 = !DILocation(line: 3098, column: 5, scope: !8201)
!8205 = !DILocation(line: 3103, column: 7, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3103, column: 7)
!8207 = !DILocation(line: 3103, column: 15, scope: !8206)
!8208 = !DILocation(line: 3103, column: 7, scope: !8171)
!8209 = !DILocation(line: 3105, column: 25, scope: !8210)
!8210 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 3104, column: 5)
!8211 = !DILocation(line: 3105, column: 31, scope: !8210)
!8212 = !DILocation(line: 3105, column: 36, scope: !8210)
!8213 = !DILocation(line: 3105, column: 14, scope: !8210)
!8214 = !DILocation(line: 3105, column: 12, scope: !8210)
!8215 = !DILocation(line: 3106, column: 11, scope: !8216)
!8216 = distinct !DILexicalBlock(scope: !8210, file: !3, line: 3106, column: 11)
!8217 = !DILocation(line: 3106, column: 11, scope: !8210)
!8218 = !DILocation(line: 3107, column: 9, scope: !8216)
!8219 = !DILocation(line: 3107, column: 2, scope: !8216)
!8220 = !DILocation(line: 3109, column: 11, scope: !8221)
!8221 = distinct !DILexicalBlock(scope: !8210, file: !3, line: 3109, column: 11)
!8222 = !DILocation(line: 3109, column: 32, scope: !8221)
!8223 = !DILocation(line: 3110, column: 4, scope: !8221)
!8224 = !DILocation(line: 3110, column: 7, scope: !8221)
!8225 = !DILocation(line: 3110, column: 43, scope: !8221)
!8226 = !DILocation(line: 3110, column: 53, scope: !8221)
!8227 = !DILocation(line: 3109, column: 11, scope: !8210)
!8228 = !DILocation(line: 3112, column: 34, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 3111, column: 2)
!8230 = !DILocation(line: 3112, column: 40, scope: !8229)
!8231 = !DILocation(line: 3112, column: 45, scope: !8229)
!8232 = !DILocation(line: 3112, column: 11, scope: !8229)
!8233 = !DILocation(line: 3112, column: 9, scope: !8229)
!8234 = !DILocation(line: 3113, column: 8, scope: !8235)
!8235 = distinct !DILexicalBlock(scope: !8229, file: !3, line: 3113, column: 8)
!8236 = !DILocation(line: 3113, column: 8, scope: !8229)
!8237 = !DILocation(line: 3114, column: 13, scope: !8235)
!8238 = !DILocation(line: 3114, column: 6, scope: !8235)
!8239 = !DILocation(line: 3115, column: 2, scope: !8229)
!8240 = !DILocation(line: 3117, column: 2, scope: !8210)
!8241 = !DILocation(line: 3121, column: 7, scope: !8242)
!8242 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3121, column: 7)
!8243 = !DILocation(line: 3121, column: 15, scope: !8242)
!8244 = !DILocation(line: 3121, column: 7, scope: !8171)
!8245 = !DILocation(line: 3123, column: 27, scope: !8246)
!8246 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 3122, column: 5)
!8247 = !DILocation(line: 3123, column: 33, scope: !8246)
!8248 = !DILocation(line: 3123, column: 38, scope: !8246)
!8249 = !DILocation(line: 3123, column: 14, scope: !8246)
!8250 = !DILocation(line: 3123, column: 12, scope: !8246)
!8251 = !DILocation(line: 3124, column: 11, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8246, file: !3, line: 3124, column: 11)
!8253 = !DILocation(line: 3124, column: 11, scope: !8246)
!8254 = !DILocation(line: 3125, column: 9, scope: !8252)
!8255 = !DILocation(line: 3125, column: 2, scope: !8252)
!8256 = !DILocation(line: 3127, column: 11, scope: !8257)
!8257 = distinct !DILexicalBlock(scope: !8246, file: !3, line: 3127, column: 11)
!8258 = !DILocation(line: 3127, column: 32, scope: !8257)
!8259 = !DILocation(line: 3128, column: 4, scope: !8257)
!8260 = !DILocation(line: 3128, column: 7, scope: !8257)
!8261 = !DILocation(line: 3128, column: 43, scope: !8257)
!8262 = !DILocation(line: 3128, column: 53, scope: !8257)
!8263 = !DILocation(line: 3127, column: 11, scope: !8246)
!8264 = !DILocation(line: 3130, column: 36, scope: !8265)
!8265 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 3129, column: 2)
!8266 = !DILocation(line: 3130, column: 42, scope: !8265)
!8267 = !DILocation(line: 3130, column: 47, scope: !8265)
!8268 = !DILocation(line: 3130, column: 11, scope: !8265)
!8269 = !DILocation(line: 3130, column: 9, scope: !8265)
!8270 = !DILocation(line: 3131, column: 8, scope: !8271)
!8271 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 3131, column: 8)
!8272 = !DILocation(line: 3131, column: 8, scope: !8265)
!8273 = !DILocation(line: 3132, column: 13, scope: !8271)
!8274 = !DILocation(line: 3132, column: 6, scope: !8271)
!8275 = !DILocation(line: 3133, column: 2, scope: !8265)
!8276 = !DILocation(line: 3135, column: 7, scope: !8246)
!8277 = !DILocation(line: 3138, column: 7, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3138, column: 7)
!8279 = !DILocation(line: 3138, column: 7, scope: !8171)
!8280 = !DILocation(line: 3139, column: 23, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 3139, column: 5)
!8282 = !DILocation(line: 3139, column: 21, scope: !8281)
!8283 = !DILocation(line: 3139, column: 10, scope: !8281)
!8284 = !DILocation(line: 3140, column: 3, scope: !8285)
!8285 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 3139, column: 5)
!8286 = !DILocation(line: 3140, column: 14, scope: !8285)
!8287 = !DILocation(line: 3139, column: 5, scope: !8281)
!8288 = !DILocation(line: 3143, column: 6, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8290, file: !3, line: 3143, column: 6)
!8290 = distinct !DILexicalBlock(scope: !8285, file: !3, line: 3142, column: 7)
!8291 = !DILocation(line: 3143, column: 43, scope: !8289)
!8292 = !DILocation(line: 3143, column: 53, scope: !8289)
!8293 = !DILocation(line: 3143, column: 6, scope: !8290)
!8294 = !DILocalVariable(name: "xop0", scope: !8295, file: !3, line: 3145, type: !2732)
!8295 = distinct !DILexicalBlock(scope: !8289, file: !3, line: 3144, column: 4)
!8296 = !DILocation(line: 3145, column: 10, scope: !8295)
!8297 = !DILocation(line: 3145, column: 17, scope: !8295)
!8298 = !DILocalVariable(name: "last", scope: !8295, file: !3, line: 3146, type: !2732)
!8299 = !DILocation(line: 3146, column: 10, scope: !8295)
!8300 = !DILocation(line: 3146, column: 17, scope: !8295)
!8301 = !DILocation(line: 3152, column: 28, scope: !8295)
!8302 = !DILocation(line: 3152, column: 34, scope: !8295)
!8303 = !DILocation(line: 3152, column: 46, scope: !8295)
!8304 = !DILocation(line: 3152, column: 52, scope: !8295)
!8305 = !DILocation(line: 3153, column: 8, scope: !8295)
!8306 = !DILocation(line: 3153, column: 16, scope: !8295)
!8307 = !DILocation(line: 3154, column: 8, scope: !8295)
!8308 = !DILocation(line: 3154, column: 11, scope: !8295)
!8309 = !DILocation(line: 3154, column: 19, scope: !8295)
!8310 = !DILocation(line: 3155, column: 7, scope: !8295)
!8311 = !DILocation(line: 3155, column: 10, scope: !8295)
!8312 = !DILocation(line: 3155, column: 17, scope: !8295)
!8313 = !DILocation(line: 0, scope: !8295)
!8314 = !DILocation(line: 3152, column: 13, scope: !8295)
!8315 = !DILocation(line: 3152, column: 11, scope: !8295)
!8316 = !DILocation(line: 3157, column: 26, scope: !8295)
!8317 = !DILocation(line: 3157, column: 38, scope: !8295)
!8318 = !DILocation(line: 3157, column: 47, scope: !8295)
!8319 = !DILocation(line: 3158, column: 5, scope: !8295)
!8320 = !DILocation(line: 3157, column: 13, scope: !8295)
!8321 = !DILocation(line: 3157, column: 11, scope: !8295)
!8322 = !DILocation(line: 3160, column: 10, scope: !8323)
!8323 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 3160, column: 10)
!8324 = !DILocation(line: 3160, column: 10, scope: !8295)
!8325 = !DILocation(line: 3162, column: 7, scope: !8326)
!8326 = distinct !DILexicalBlock(scope: !8327, file: !3, line: 3162, column: 7)
!8327 = distinct !DILexicalBlock(scope: !8323, file: !3, line: 3161, column: 8)
!8328 = !DILocation(line: 3162, column: 14, scope: !8326)
!8329 = !DILocation(line: 3162, column: 7, scope: !8327)
!8330 = !DILocation(line: 3166, column: 11, scope: !8331)
!8331 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 3166, column: 11)
!8332 = distinct !DILexicalBlock(scope: !8326, file: !3, line: 3165, column: 5)
!8333 = !DILocation(line: 3166, column: 18, scope: !8331)
!8334 = !DILocation(line: 3166, column: 11, scope: !8332)
!8335 = !DILocation(line: 3167, column: 31, scope: !8331)
!8336 = !DILocation(line: 3167, column: 18, scope: !8331)
!8337 = !DILocation(line: 3167, column: 16, scope: !8331)
!8338 = !DILocation(line: 3167, column: 9, scope: !8331)
!8339 = !DILocation(line: 3168, column: 21, scope: !8332)
!8340 = !DILocation(line: 3168, column: 29, scope: !8332)
!8341 = !DILocation(line: 3168, column: 7, scope: !8332)
!8342 = !DILocation(line: 3169, column: 14, scope: !8332)
!8343 = !DILocation(line: 3169, column: 7, scope: !8332)
!8344 = !DILocation(line: 3172, column: 12, scope: !8326)
!8345 = !DILocation(line: 3172, column: 25, scope: !8326)
!8346 = !DILocation(line: 3172, column: 31, scope: !8326)
!8347 = !DILocation(line: 3172, column: 5, scope: !8326)
!8348 = !DILocation(line: 3175, column: 28, scope: !8323)
!8349 = !DILocation(line: 3175, column: 8, scope: !8323)
!8350 = !DILocation(line: 3176, column: 4, scope: !8295)
!8351 = !DILocation(line: 3177, column: 7, scope: !8290)
!8352 = !DILocation(line: 3141, column: 16, scope: !8285)
!8353 = !DILocation(line: 3141, column: 14, scope: !8285)
!8354 = !DILocation(line: 3139, column: 5, scope: !8285)
!8355 = distinct !{!8355, !8287, !8356}
!8356 = !DILocation(line: 3177, column: 7, scope: !8281)
!8357 = !DILocation(line: 3180, column: 7, scope: !8358)
!8358 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3180, column: 7)
!8359 = !DILocation(line: 3180, column: 15, scope: !8358)
!8360 = !DILocation(line: 3181, column: 7, scope: !8358)
!8361 = !DILocation(line: 3181, column: 10, scope: !8358)
!8362 = !DILocation(line: 3181, column: 17, scope: !8358)
!8363 = !DILocation(line: 3182, column: 7, scope: !8358)
!8364 = !DILocation(line: 3182, column: 10, scope: !8358)
!8365 = !DILocation(line: 3182, column: 31, scope: !8358)
!8366 = !DILocation(line: 3183, column: 7, scope: !8358)
!8367 = !DILocation(line: 3183, column: 10, scope: !8358)
!8368 = !DILocation(line: 3183, column: 46, scope: !8358)
!8369 = !DILocation(line: 3183, column: 56, scope: !8358)
!8370 = !DILocation(line: 3180, column: 7, scope: !8171)
!8371 = !DILocalVariable(name: "i", scope: !8372, file: !3, line: 3185, type: !2756)
!8372 = distinct !DILexicalBlock(scope: !8358, file: !3, line: 3184, column: 5)
!8373 = !DILocation(line: 3185, column: 11, scope: !8372)
!8374 = !DILocalVariable(name: "insns", scope: !8372, file: !3, line: 3186, type: !2732)
!8375 = !DILocation(line: 3186, column: 11, scope: !8372)
!8376 = !DILocation(line: 3188, column: 11, scope: !8377)
!8377 = distinct !DILexicalBlock(scope: !8372, file: !3, line: 3188, column: 11)
!8378 = !DILocation(line: 3188, column: 18, scope: !8377)
!8379 = !DILocation(line: 3188, column: 23, scope: !8377)
!8380 = !DILocation(line: 3188, column: 26, scope: !8377)
!8381 = !DILocation(line: 3188, column: 36, scope: !8377)
!8382 = !DILocation(line: 3188, column: 33, scope: !8377)
!8383 = !DILocation(line: 3188, column: 11, scope: !8372)
!8384 = !DILocation(line: 3189, column: 24, scope: !8377)
!8385 = !DILocation(line: 3189, column: 11, scope: !8377)
!8386 = !DILocation(line: 3189, column: 9, scope: !8377)
!8387 = !DILocation(line: 3189, column: 2, scope: !8377)
!8388 = !DILocation(line: 3191, column: 7, scope: !8372)
!8389 = !DILocation(line: 3194, column: 14, scope: !8390)
!8390 = distinct !DILexicalBlock(scope: !8372, file: !3, line: 3194, column: 7)
!8391 = !DILocation(line: 3194, column: 12, scope: !8390)
!8392 = !DILocation(line: 3194, column: 19, scope: !8393)
!8393 = distinct !DILexicalBlock(scope: !8390, file: !3, line: 3194, column: 7)
!8394 = !DILocation(line: 3194, column: 23, scope: !8393)
!8395 = !DILocation(line: 3194, column: 47, scope: !8393)
!8396 = !DILocation(line: 3194, column: 21, scope: !8393)
!8397 = !DILocation(line: 3194, column: 7, scope: !8390)
!8398 = !DILocalVariable(name: "target_piece", scope: !8399, file: !3, line: 3196, type: !2732)
!8399 = distinct !DILexicalBlock(scope: !8393, file: !3, line: 3195, column: 2)
!8400 = !DILocation(line: 3196, column: 8, scope: !8399)
!8401 = !DILocation(line: 3196, column: 40, scope: !8399)
!8402 = !DILocation(line: 3196, column: 48, scope: !8399)
!8403 = !DILocation(line: 3196, column: 54, scope: !8399)
!8404 = !DILocation(line: 3196, column: 23, scope: !8399)
!8405 = !DILocalVariable(name: "x", scope: !8399, file: !3, line: 3197, type: !2732)
!8406 = !DILocation(line: 3197, column: 8, scope: !8399)
!8407 = !DILocation(line: 3197, column: 25, scope: !8399)
!8408 = !DILocation(line: 3197, column: 36, scope: !8399)
!8409 = !DILocation(line: 3198, column: 34, scope: !8399)
!8410 = !DILocation(line: 3198, column: 39, scope: !8399)
!8411 = !DILocation(line: 3198, column: 42, scope: !8399)
!8412 = !DILocation(line: 3198, column: 11, scope: !8399)
!8413 = !DILocation(line: 3199, column: 11, scope: !8399)
!8414 = !DILocation(line: 3199, column: 25, scope: !8399)
!8415 = !DILocation(line: 3197, column: 12, scope: !8399)
!8416 = !DILocation(line: 3201, column: 8, scope: !8417)
!8417 = distinct !DILexicalBlock(scope: !8399, file: !3, line: 3201, column: 8)
!8418 = !DILocation(line: 3201, column: 24, scope: !8417)
!8419 = !DILocation(line: 3201, column: 21, scope: !8417)
!8420 = !DILocation(line: 3201, column: 8, scope: !8399)
!8421 = !DILocation(line: 3202, column: 22, scope: !8417)
!8422 = !DILocation(line: 3202, column: 36, scope: !8417)
!8423 = !DILocation(line: 3202, column: 6, scope: !8417)
!8424 = !DILocation(line: 3203, column: 2, scope: !8399)
!8425 = !DILocation(line: 3194, column: 65, scope: !8393)
!8426 = !DILocation(line: 3194, column: 7, scope: !8393)
!8427 = distinct !{!8427, !8397, !8428}
!8428 = !DILocation(line: 3203, column: 2, scope: !8390)
!8429 = !DILocation(line: 3205, column: 15, scope: !8372)
!8430 = !DILocation(line: 3205, column: 13, scope: !8372)
!8431 = !DILocation(line: 3206, column: 7, scope: !8372)
!8432 = !DILocation(line: 3208, column: 18, scope: !8372)
!8433 = !DILocation(line: 3208, column: 7, scope: !8372)
!8434 = !DILocation(line: 3209, column: 14, scope: !8372)
!8435 = !DILocation(line: 3209, column: 7, scope: !8372)
!8436 = !DILocation(line: 3212, column: 7, scope: !8437)
!8437 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3212, column: 7)
!8438 = !DILocation(line: 3212, column: 16, scope: !8437)
!8439 = !DILocation(line: 3212, column: 21, scope: !8437)
!8440 = !DILocation(line: 3212, column: 7, scope: !8171)
!8441 = !DILocation(line: 3215, column: 11, scope: !8442)
!8442 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 3215, column: 11)
!8443 = distinct !DILexicalBlock(scope: !8437, file: !3, line: 3213, column: 5)
!8444 = !DILocation(line: 3215, column: 11, scope: !8443)
!8445 = !DILocation(line: 3217, column: 35, scope: !8446)
!8446 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 3216, column: 2)
!8447 = !DILocation(line: 3217, column: 41, scope: !8446)
!8448 = !DILocation(line: 3217, column: 46, scope: !8446)
!8449 = !DILocation(line: 3217, column: 11, scope: !8446)
!8450 = !DILocation(line: 3217, column: 9, scope: !8446)
!8451 = !DILocation(line: 3218, column: 8, scope: !8452)
!8452 = distinct !DILexicalBlock(scope: !8446, file: !3, line: 3218, column: 8)
!8453 = !DILocation(line: 3218, column: 8, scope: !8446)
!8454 = !DILocation(line: 3219, column: 13, scope: !8452)
!8455 = !DILocation(line: 3219, column: 6, scope: !8452)
!8456 = !DILocation(line: 3220, column: 2, scope: !8446)
!8457 = !DILocation(line: 3224, column: 12, scope: !8458)
!8458 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 3224, column: 11)
!8459 = !DILocation(line: 3224, column: 11, scope: !8443)
!8460 = !DILocation(line: 3226, column: 25, scope: !8461)
!8461 = distinct !DILexicalBlock(scope: !8458, file: !3, line: 3225, column: 2)
!8462 = !DILocation(line: 3226, column: 32, scope: !8461)
!8463 = !DILocation(line: 3226, column: 40, scope: !8461)
!8464 = !DILocation(line: 3228, column: 11, scope: !8461)
!8465 = !DILocation(line: 3228, column: 30, scope: !8461)
!8466 = !DILocation(line: 3228, column: 35, scope: !8461)
!8467 = !DILocation(line: 3229, column: 11, scope: !8461)
!8468 = !DILocation(line: 3226, column: 11, scope: !8461)
!8469 = !DILocation(line: 3226, column: 9, scope: !8461)
!8470 = !DILocation(line: 3230, column: 8, scope: !8471)
!8471 = distinct !DILexicalBlock(scope: !8461, file: !3, line: 3230, column: 8)
!8472 = !DILocation(line: 3230, column: 8, scope: !8461)
!8473 = !DILocation(line: 3231, column: 13, scope: !8471)
!8474 = !DILocation(line: 3231, column: 6, scope: !8471)
!8475 = !DILocation(line: 3232, column: 2, scope: !8461)
!8476 = !DILocation(line: 3233, column: 5, scope: !8443)
!8477 = !DILocation(line: 3236, column: 7, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3236, column: 7)
!8479 = !DILocation(line: 3236, column: 15, scope: !8478)
!8480 = !DILocation(line: 3236, column: 7, scope: !8171)
!8481 = !DILocation(line: 3238, column: 29, scope: !8482)
!8482 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 3237, column: 5)
!8483 = !DILocation(line: 3238, column: 35, scope: !8482)
!8484 = !DILocation(line: 3238, column: 40, scope: !8482)
!8485 = !DILocation(line: 3238, column: 14, scope: !8482)
!8486 = !DILocation(line: 3238, column: 12, scope: !8482)
!8487 = !DILocation(line: 3239, column: 11, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8482, file: !3, line: 3239, column: 11)
!8489 = !DILocation(line: 3239, column: 11, scope: !8482)
!8490 = !DILocation(line: 3240, column: 9, scope: !8488)
!8491 = !DILocation(line: 3240, column: 2, scope: !8488)
!8492 = !DILocation(line: 3241, column: 5, scope: !8482)
!8493 = !DILocation(line: 3244, column: 7, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3244, column: 7)
!8495 = !DILocation(line: 3244, column: 15, scope: !8494)
!8496 = !DILocation(line: 3244, column: 7, scope: !8171)
!8497 = !DILocation(line: 3246, column: 26, scope: !8498)
!8498 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 3245, column: 5)
!8499 = !DILocation(line: 3246, column: 32, scope: !8498)
!8500 = !DILocation(line: 3246, column: 37, scope: !8498)
!8501 = !DILocation(line: 3246, column: 14, scope: !8498)
!8502 = !DILocation(line: 3246, column: 12, scope: !8498)
!8503 = !DILocation(line: 3247, column: 11, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8498, file: !3, line: 3247, column: 11)
!8505 = !DILocation(line: 3247, column: 11, scope: !8498)
!8506 = !DILocation(line: 3248, column: 9, scope: !8504)
!8507 = !DILocation(line: 3248, column: 2, scope: !8504)
!8508 = !DILocation(line: 3249, column: 5, scope: !8498)
!8509 = !DILocation(line: 3252, column: 7, scope: !8510)
!8510 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3252, column: 7)
!8511 = !DILocation(line: 3252, column: 15, scope: !8510)
!8512 = !DILocation(line: 3252, column: 7, scope: !8171)
!8513 = !DILocation(line: 3254, column: 26, scope: !8514)
!8514 = distinct !DILexicalBlock(scope: !8510, file: !3, line: 3253, column: 5)
!8515 = !DILocation(line: 3254, column: 32, scope: !8514)
!8516 = !DILocation(line: 3254, column: 37, scope: !8514)
!8517 = !DILocation(line: 3254, column: 14, scope: !8514)
!8518 = !DILocation(line: 3254, column: 12, scope: !8514)
!8519 = !DILocation(line: 3255, column: 11, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8514, file: !3, line: 3255, column: 11)
!8521 = !DILocation(line: 3255, column: 11, scope: !8514)
!8522 = !DILocation(line: 3256, column: 9, scope: !8520)
!8523 = !DILocation(line: 3256, column: 2, scope: !8520)
!8524 = !DILocation(line: 3257, column: 5, scope: !8514)
!8525 = !DILocation(line: 3252, column: 18, scope: !8510)
!8526 = !DILabel(scope: !8171, name: "try_libcall", file: !3, line: 3259)
!8527 = !DILocation(line: 3259, column: 2, scope: !8171)
!8528 = !DILocation(line: 3261, column: 28, scope: !8171)
!8529 = !DILocation(line: 3261, column: 37, scope: !8171)
!8530 = !DILocation(line: 3261, column: 13, scope: !8171)
!8531 = !DILocation(line: 3261, column: 11, scope: !8171)
!8532 = !DILocation(line: 3262, column: 7, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3262, column: 7)
!8534 = !DILocation(line: 3262, column: 7, scope: !8171)
!8535 = !DILocalVariable(name: "insns", scope: !8536, file: !3, line: 3264, type: !2732)
!8536 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 3263, column: 5)
!8537 = !DILocation(line: 3264, column: 11, scope: !8536)
!8538 = !DILocalVariable(name: "value", scope: !8536, file: !3, line: 3265, type: !2732)
!8539 = !DILocation(line: 3265, column: 11, scope: !8536)
!8540 = !DILocalVariable(name: "eq_value", scope: !8536, file: !3, line: 3266, type: !2732)
!8541 = !DILocation(line: 3266, column: 11, scope: !8536)
!8542 = !DILocalVariable(name: "outmode", scope: !8536, file: !3, line: 3267, type: !5)
!8543 = !DILocation(line: 3267, column: 25, scope: !8536)
!8544 = !DILocation(line: 3267, column: 35, scope: !8536)
!8545 = !DILocation(line: 3271, column: 11, scope: !8546)
!8546 = distinct !DILexicalBlock(scope: !8536, file: !3, line: 3271, column: 11)
!8547 = !DILocation(line: 3271, column: 19, scope: !8546)
!8548 = !DILocation(line: 3271, column: 32, scope: !8546)
!8549 = !DILocation(line: 3271, column: 35, scope: !8546)
!8550 = !DILocation(line: 3271, column: 43, scope: !8546)
!8551 = !DILocation(line: 3271, column: 56, scope: !8546)
!8552 = !DILocation(line: 3271, column: 59, scope: !8546)
!8553 = !DILocation(line: 3271, column: 67, scope: !8546)
!8554 = !DILocation(line: 3272, column: 4, scope: !8546)
!8555 = !DILocation(line: 3272, column: 7, scope: !8546)
!8556 = !DILocation(line: 3272, column: 15, scope: !8546)
!8557 = !DILocation(line: 3272, column: 33, scope: !8546)
!8558 = !DILocation(line: 3272, column: 36, scope: !8546)
!8559 = !DILocation(line: 3272, column: 44, scope: !8546)
!8560 = !DILocation(line: 3271, column: 11, scope: !8536)
!8561 = !DILocation(line: 3274, column: 6, scope: !8546)
!8562 = !DILocation(line: 3274, column: 4, scope: !8546)
!8563 = !DILocation(line: 3273, column: 2, scope: !8546)
!8564 = !DILocation(line: 3277, column: 7, scope: !8536)
!8565 = !DILocation(line: 3281, column: 40, scope: !8536)
!8566 = !DILocation(line: 3281, column: 70, scope: !8536)
!8567 = !DILocation(line: 3282, column: 15, scope: !8536)
!8568 = !DILocation(line: 3282, column: 20, scope: !8536)
!8569 = !DILocation(line: 3281, column: 15, scope: !8536)
!8570 = !DILocation(line: 3281, column: 13, scope: !8536)
!8571 = !DILocation(line: 3283, column: 15, scope: !8536)
!8572 = !DILocation(line: 3283, column: 13, scope: !8536)
!8573 = !DILocation(line: 3284, column: 7, scope: !8536)
!8574 = !DILocation(line: 3286, column: 29, scope: !8536)
!8575 = !DILocation(line: 3286, column: 16, scope: !8536)
!8576 = !DILocation(line: 3286, column: 14, scope: !8536)
!8577 = !DILocation(line: 3287, column: 18, scope: !8536)
!8578 = !DILocation(line: 3287, column: 16, scope: !8536)
!8579 = !DILocation(line: 3288, column: 11, scope: !8580)
!8580 = distinct !DILexicalBlock(scope: !8536, file: !3, line: 3288, column: 11)
!8581 = !DILocation(line: 3288, column: 37, scope: !8580)
!8582 = !DILocation(line: 3288, column: 35, scope: !8580)
!8583 = !DILocation(line: 3288, column: 11, scope: !8536)
!8584 = !DILocation(line: 3289, column: 43, scope: !8580)
!8585 = !DILocation(line: 3289, column: 52, scope: !8580)
!8586 = !DILocation(line: 3289, column: 62, scope: !8580)
!8587 = !DILocation(line: 3289, column: 13, scope: !8580)
!8588 = !DILocation(line: 3289, column: 11, scope: !8580)
!8589 = !DILocation(line: 3289, column: 2, scope: !8580)
!8590 = !DILocation(line: 3290, column: 16, scope: !8591)
!8591 = distinct !DILexicalBlock(scope: !8580, file: !3, line: 3290, column: 16)
!8592 = !DILocation(line: 3290, column: 42, scope: !8591)
!8593 = !DILocation(line: 3290, column: 40, scope: !8591)
!8594 = !DILocation(line: 3290, column: 16, scope: !8580)
!8595 = !DILocation(line: 3291, column: 46, scope: !8591)
!8596 = !DILocation(line: 3291, column: 55, scope: !8591)
!8597 = !DILocation(line: 3291, column: 65, scope: !8591)
!8598 = !DILocation(line: 3291, column: 13, scope: !8591)
!8599 = !DILocation(line: 3291, column: 11, scope: !8591)
!8600 = !DILocation(line: 3291, column: 2, scope: !8591)
!8601 = !DILocation(line: 3292, column: 27, scope: !8536)
!8602 = !DILocation(line: 3292, column: 34, scope: !8536)
!8603 = !DILocation(line: 3292, column: 42, scope: !8536)
!8604 = !DILocation(line: 3292, column: 49, scope: !8536)
!8605 = !DILocation(line: 3292, column: 7, scope: !8536)
!8606 = !DILocation(line: 3294, column: 14, scope: !8536)
!8607 = !DILocation(line: 3294, column: 7, scope: !8536)
!8608 = !DILocation(line: 3299, column: 7, scope: !8609)
!8609 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3299, column: 7)
!8610 = !DILocation(line: 3299, column: 7, scope: !8171)
!8611 = !DILocation(line: 3301, column: 25, scope: !8612)
!8612 = distinct !DILexicalBlock(scope: !8613, file: !3, line: 3301, column: 7)
!8613 = distinct !DILexicalBlock(scope: !8609, file: !3, line: 3300, column: 5)
!8614 = !DILocation(line: 3301, column: 23, scope: !8612)
!8615 = !DILocation(line: 3301, column: 12, scope: !8612)
!8616 = !DILocation(line: 3302, column: 5, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !8612, file: !3, line: 3301, column: 7)
!8618 = !DILocation(line: 3302, column: 16, scope: !8617)
!8619 = !DILocation(line: 3301, column: 7, scope: !8612)
!8620 = !DILocation(line: 3305, column: 9, scope: !8621)
!8621 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 3305, column: 8)
!8622 = distinct !DILexicalBlock(scope: !8617, file: !3, line: 3304, column: 2)
!8623 = !DILocation(line: 3305, column: 46, scope: !8621)
!8624 = !DILocation(line: 3306, column: 9, scope: !8621)
!8625 = !DILocation(line: 3307, column: 8, scope: !8621)
!8626 = !DILocation(line: 3307, column: 26, scope: !8621)
!8627 = !DILocation(line: 3307, column: 35, scope: !8621)
!8628 = !DILocation(line: 3307, column: 11, scope: !8621)
!8629 = !DILocation(line: 3305, column: 8, scope: !8622)
!8630 = !DILocalVariable(name: "xop0", scope: !8631, file: !3, line: 3309, type: !2732)
!8631 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 3308, column: 6)
!8632 = !DILocation(line: 3309, column: 12, scope: !8631)
!8633 = !DILocation(line: 3309, column: 19, scope: !8631)
!8634 = !DILocalVariable(name: "last", scope: !8631, file: !3, line: 3310, type: !2732)
!8635 = !DILocation(line: 3310, column: 12, scope: !8631)
!8636 = !DILocation(line: 3310, column: 19, scope: !8631)
!8637 = !DILocation(line: 3316, column: 30, scope: !8631)
!8638 = !DILocation(line: 3316, column: 36, scope: !8631)
!8639 = !DILocation(line: 3316, column: 48, scope: !8631)
!8640 = !DILocation(line: 3316, column: 54, scope: !8631)
!8641 = !DILocation(line: 3317, column: 10, scope: !8631)
!8642 = !DILocation(line: 3317, column: 18, scope: !8631)
!8643 = !DILocation(line: 3318, column: 10, scope: !8631)
!8644 = !DILocation(line: 3318, column: 13, scope: !8631)
!8645 = !DILocation(line: 3318, column: 21, scope: !8631)
!8646 = !DILocation(line: 3319, column: 9, scope: !8631)
!8647 = !DILocation(line: 3319, column: 12, scope: !8631)
!8648 = !DILocation(line: 3319, column: 19, scope: !8631)
!8649 = !DILocation(line: 0, scope: !8631)
!8650 = !DILocation(line: 3316, column: 15, scope: !8631)
!8651 = !DILocation(line: 3316, column: 13, scope: !8631)
!8652 = !DILocation(line: 3321, column: 28, scope: !8631)
!8653 = !DILocation(line: 3321, column: 40, scope: !8631)
!8654 = !DILocation(line: 3321, column: 49, scope: !8631)
!8655 = !DILocation(line: 3322, column: 7, scope: !8631)
!8656 = !DILocation(line: 3321, column: 15, scope: !8631)
!8657 = !DILocation(line: 3321, column: 13, scope: !8631)
!8658 = !DILocation(line: 3326, column: 12, scope: !8659)
!8659 = distinct !DILexicalBlock(scope: !8631, file: !3, line: 3326, column: 12)
!8660 = !DILocation(line: 3326, column: 20, scope: !8659)
!8661 = !DILocation(line: 3326, column: 33, scope: !8659)
!8662 = !DILocation(line: 3326, column: 36, scope: !8659)
!8663 = !DILocation(line: 3326, column: 41, scope: !8659)
!8664 = !DILocation(line: 3326, column: 12, scope: !8631)
!8665 = !DILocation(line: 3327, column: 24, scope: !8659)
!8666 = !DILocation(line: 3327, column: 47, scope: !8659)
!8667 = !DILocation(line: 3328, column: 10, scope: !8659)
!8668 = !DILocation(line: 3330, column: 10, scope: !8659)
!8669 = !DILocation(line: 3327, column: 10, scope: !8659)
!8670 = !DILocation(line: 3327, column: 8, scope: !8659)
!8671 = !DILocation(line: 3327, column: 3, scope: !8659)
!8672 = !DILocation(line: 3332, column: 12, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8631, file: !3, line: 3332, column: 12)
!8674 = !DILocation(line: 3332, column: 12, scope: !8631)
!8675 = !DILocation(line: 3334, column: 9, scope: !8676)
!8676 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 3334, column: 9)
!8677 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 3333, column: 3)
!8678 = !DILocation(line: 3334, column: 16, scope: !8676)
!8679 = !DILocation(line: 3334, column: 9, scope: !8677)
!8680 = !DILocation(line: 3336, column: 13, scope: !8681)
!8681 = distinct !DILexicalBlock(scope: !8682, file: !3, line: 3336, column: 13)
!8682 = distinct !DILexicalBlock(scope: !8676, file: !3, line: 3335, column: 7)
!8683 = !DILocation(line: 3336, column: 20, scope: !8681)
!8684 = !DILocation(line: 3336, column: 13, scope: !8682)
!8685 = !DILocation(line: 3337, column: 26, scope: !8681)
!8686 = !DILocation(line: 3337, column: 13, scope: !8681)
!8687 = !DILocation(line: 3337, column: 11, scope: !8681)
!8688 = !DILocation(line: 3337, column: 4, scope: !8681)
!8689 = !DILocation(line: 3338, column: 23, scope: !8682)
!8690 = !DILocation(line: 3338, column: 31, scope: !8682)
!8691 = !DILocation(line: 3338, column: 9, scope: !8682)
!8692 = !DILocation(line: 3339, column: 16, scope: !8682)
!8693 = !DILocation(line: 3339, column: 9, scope: !8682)
!8694 = !DILocation(line: 3342, column: 14, scope: !8676)
!8695 = !DILocation(line: 3342, column: 27, scope: !8676)
!8696 = !DILocation(line: 3342, column: 33, scope: !8676)
!8697 = !DILocation(line: 3342, column: 7, scope: !8676)
!8698 = !DILocation(line: 3345, column: 23, scope: !8673)
!8699 = !DILocation(line: 3345, column: 3, scope: !8673)
!8700 = !DILocation(line: 3346, column: 6, scope: !8631)
!8701 = !DILocation(line: 3347, column: 2, scope: !8622)
!8702 = !DILocation(line: 3303, column: 18, scope: !8617)
!8703 = !DILocation(line: 3303, column: 16, scope: !8617)
!8704 = !DILocation(line: 3301, column: 7, scope: !8617)
!8705 = distinct !{!8705, !8619, !8706}
!8706 = !DILocation(line: 3347, column: 2, scope: !8612)
!8707 = !DILocation(line: 3348, column: 5, scope: !8613)
!8708 = !DILocation(line: 3352, column: 7, scope: !8709)
!8709 = distinct !DILexicalBlock(scope: !8171, file: !3, line: 3352, column: 7)
!8710 = !DILocation(line: 3352, column: 16, scope: !8709)
!8711 = !DILocation(line: 3352, column: 21, scope: !8709)
!8712 = !DILocation(line: 3352, column: 28, scope: !8709)
!8713 = !DILocation(line: 3352, column: 32, scope: !8709)
!8714 = !DILocation(line: 3352, column: 7, scope: !8171)
!8715 = !DILocalVariable(name: "temp", scope: !8716, file: !3, line: 3354, type: !2732)
!8716 = distinct !DILexicalBlock(scope: !8709, file: !3, line: 3353, column: 5)
!8717 = !DILocation(line: 3354, column: 11, scope: !8716)
!8718 = !DILocation(line: 3355, column: 28, scope: !8716)
!8719 = !DILocation(line: 3356, column: 28, scope: !8716)
!8720 = !DILocation(line: 3356, column: 36, scope: !8716)
!8721 = !DILocation(line: 3357, column: 28, scope: !8716)
!8722 = !DILocation(line: 3357, column: 47, scope: !8716)
!8723 = !DILocation(line: 3358, column: 28, scope: !8716)
!8724 = !DILocation(line: 3358, column: 36, scope: !8716)
!8725 = !DILocation(line: 3355, column: 14, scope: !8716)
!8726 = !DILocation(line: 3355, column: 12, scope: !8716)
!8727 = !DILocation(line: 3359, column: 11, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8716, file: !3, line: 3359, column: 11)
!8729 = !DILocation(line: 3359, column: 11, scope: !8716)
!8730 = !DILocation(line: 3360, column: 16, scope: !8728)
!8731 = !DILocation(line: 3360, column: 9, scope: !8728)
!8732 = !DILocation(line: 3361, column: 5, scope: !8716)
!8733 = !DILocation(line: 3363, column: 3, scope: !8171)
!8734 = !DILocation(line: 3364, column: 1, scope: !8171)
!8735 = distinct !DISubprogram(name: "expand_unop_direct", scope: !3, file: !3, line: 3028, type: !8172, scopeLine: 3030, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!8736 = !DILocalVariable(name: "mode", arg: 1, scope: !8735, file: !3, line: 3028, type: !5)
!8737 = !DILocation(line: 3028, column: 39, scope: !8735)
!8738 = !DILocalVariable(name: "unoptab", arg: 2, scope: !8735, file: !3, line: 3028, type: !3938)
!8739 = !DILocation(line: 3028, column: 51, scope: !8735)
!8740 = !DILocalVariable(name: "op0", arg: 3, scope: !8735, file: !3, line: 3028, type: !2732)
!8741 = !DILocation(line: 3028, column: 64, scope: !8735)
!8742 = !DILocalVariable(name: "target", arg: 4, scope: !8735, file: !3, line: 3028, type: !2732)
!8743 = !DILocation(line: 3028, column: 73, scope: !8735)
!8744 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !8735, file: !3, line: 3029, type: !2756)
!8745 = !DILocation(line: 3029, column: 11, scope: !8735)
!8746 = !DILocation(line: 3031, column: 7, scope: !8747)
!8747 = distinct !DILexicalBlock(scope: !8735, file: !3, line: 3031, column: 7)
!8748 = !DILocation(line: 3031, column: 38, scope: !8747)
!8749 = !DILocation(line: 3031, column: 48, scope: !8747)
!8750 = !DILocation(line: 3031, column: 7, scope: !8735)
!8751 = !DILocalVariable(name: "icode", scope: !8752, file: !3, line: 3033, type: !2756)
!8752 = distinct !DILexicalBlock(scope: !8747, file: !3, line: 3032, column: 5)
!8753 = !DILocation(line: 3033, column: 11, scope: !8752)
!8754 = !DILocation(line: 3033, column: 25, scope: !8752)
!8755 = !DILocation(line: 3033, column: 56, scope: !8752)
!8756 = !DILocalVariable(name: "mode0", scope: !8752, file: !3, line: 3034, type: !5)
!8757 = !DILocation(line: 3034, column: 25, scope: !8752)
!8758 = !DILocation(line: 3034, column: 43, scope: !8752)
!8759 = !DILocation(line: 3034, column: 33, scope: !8752)
!8760 = !DILocation(line: 3034, column: 50, scope: !8752)
!8761 = !DILocation(line: 3034, column: 61, scope: !8752)
!8762 = !DILocalVariable(name: "xop0", scope: !8752, file: !3, line: 3035, type: !2732)
!8763 = !DILocation(line: 3035, column: 11, scope: !8752)
!8764 = !DILocation(line: 3035, column: 18, scope: !8752)
!8765 = !DILocalVariable(name: "last", scope: !8752, file: !3, line: 3036, type: !2732)
!8766 = !DILocation(line: 3036, column: 11, scope: !8752)
!8767 = !DILocation(line: 3036, column: 18, scope: !8752)
!8768 = !DILocalVariable(name: "pat", scope: !8752, file: !3, line: 3037, type: !2732)
!8769 = !DILocation(line: 3037, column: 11, scope: !8752)
!8770 = !DILocalVariable(name: "temp", scope: !8752, file: !3, line: 3037, type: !2732)
!8771 = !DILocation(line: 3037, column: 16, scope: !8752)
!8772 = !DILocation(line: 3039, column: 11, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 3039, column: 11)
!8774 = !DILocation(line: 3039, column: 11, scope: !8752)
!8775 = !DILocation(line: 3040, column: 9, scope: !8773)
!8776 = !DILocation(line: 3040, column: 7, scope: !8773)
!8777 = !DILocation(line: 3040, column: 2, scope: !8773)
!8778 = !DILocation(line: 3042, column: 22, scope: !8773)
!8779 = !DILocation(line: 3042, column: 9, scope: !8773)
!8780 = !DILocation(line: 3042, column: 7, scope: !8773)
!8781 = !DILocation(line: 3044, column: 11, scope: !8782)
!8782 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 3044, column: 11)
!8783 = !DILocation(line: 3044, column: 27, scope: !8782)
!8784 = !DILocation(line: 3045, column: 4, scope: !8782)
!8785 = !DILocation(line: 3045, column: 7, scope: !8782)
!8786 = !DILocation(line: 3045, column: 26, scope: !8782)
!8787 = !DILocation(line: 3045, column: 23, scope: !8782)
!8788 = !DILocation(line: 3044, column: 11, scope: !8752)
!8789 = !DILocation(line: 3046, column: 26, scope: !8782)
!8790 = !DILocation(line: 3046, column: 33, scope: !8782)
!8791 = !DILocation(line: 3046, column: 39, scope: !8782)
!8792 = !DILocation(line: 3046, column: 9, scope: !8782)
!8793 = !DILocation(line: 3046, column: 7, scope: !8782)
!8794 = !DILocation(line: 3046, column: 2, scope: !8782)
!8795 = !DILocation(line: 3050, column: 22, scope: !8796)
!8796 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 3050, column: 11)
!8797 = !DILocation(line: 3050, column: 12, scope: !8796)
!8798 = !DILocation(line: 3050, column: 29, scope: !8796)
!8799 = !DILocation(line: 3050, column: 40, scope: !8796)
!8800 = !DILocation(line: 3050, column: 51, scope: !8796)
!8801 = !DILocation(line: 3050, column: 57, scope: !8796)
!8802 = !DILocation(line: 3050, column: 11, scope: !8752)
!8803 = !DILocation(line: 3051, column: 27, scope: !8796)
!8804 = !DILocation(line: 3051, column: 34, scope: !8796)
!8805 = !DILocation(line: 3051, column: 9, scope: !8796)
!8806 = !DILocation(line: 3051, column: 7, scope: !8796)
!8807 = !DILocation(line: 3051, column: 2, scope: !8796)
!8808 = !DILocation(line: 3053, column: 22, scope: !8809)
!8809 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 3053, column: 11)
!8810 = !DILocation(line: 3053, column: 12, scope: !8809)
!8811 = !DILocation(line: 3053, column: 29, scope: !8809)
!8812 = !DILocation(line: 3053, column: 40, scope: !8809)
!8813 = !DILocation(line: 3053, column: 51, scope: !8809)
!8814 = !DILocation(line: 3053, column: 57, scope: !8809)
!8815 = !DILocation(line: 3053, column: 11, scope: !8752)
!8816 = !DILocation(line: 3054, column: 22, scope: !8809)
!8817 = !DILocation(line: 3054, column: 9, scope: !8809)
!8818 = !DILocation(line: 3054, column: 7, scope: !8809)
!8819 = !DILocation(line: 3054, column: 2, scope: !8809)
!8820 = !DILocation(line: 3056, column: 13, scope: !8752)
!8821 = !DILocation(line: 3056, column: 30, scope: !8752)
!8822 = !DILocation(line: 3056, column: 36, scope: !8752)
!8823 = !DILocation(line: 3056, column: 11, scope: !8752)
!8824 = !DILocation(line: 3057, column: 11, scope: !8825)
!8825 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 3057, column: 11)
!8826 = !DILocation(line: 3057, column: 11, scope: !8752)
!8827 = !DILocation(line: 3059, column: 8, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8829, file: !3, line: 3059, column: 8)
!8829 = distinct !DILexicalBlock(scope: !8825, file: !3, line: 3058, column: 2)
!8830 = !DILocation(line: 3059, column: 21, scope: !8828)
!8831 = !DILocation(line: 3059, column: 24, scope: !8828)
!8832 = !DILocation(line: 3059, column: 40, scope: !8828)
!8833 = !DILocation(line: 3060, column: 8, scope: !8828)
!8834 = !DILocation(line: 3060, column: 29, scope: !8828)
!8835 = !DILocation(line: 3060, column: 34, scope: !8828)
!8836 = !DILocation(line: 3060, column: 40, scope: !8828)
!8837 = !DILocation(line: 3060, column: 49, scope: !8828)
!8838 = !DILocation(line: 3060, column: 55, scope: !8828)
!8839 = !DILocation(line: 3060, column: 13, scope: !8828)
!8840 = !DILocation(line: 3059, column: 8, scope: !8829)
!8841 = !DILocation(line: 3062, column: 28, scope: !8842)
!8842 = distinct !DILexicalBlock(scope: !8828, file: !3, line: 3061, column: 6)
!8843 = !DILocation(line: 3062, column: 8, scope: !8842)
!8844 = !DILocation(line: 3063, column: 28, scope: !8842)
!8845 = !DILocation(line: 3063, column: 34, scope: !8842)
!8846 = !DILocation(line: 3063, column: 43, scope: !8842)
!8847 = !DILocation(line: 3063, column: 58, scope: !8842)
!8848 = !DILocation(line: 3063, column: 15, scope: !8842)
!8849 = !DILocation(line: 3063, column: 8, scope: !8842)
!8850 = !DILocation(line: 3066, column: 15, scope: !8829)
!8851 = !DILocation(line: 3066, column: 4, scope: !8829)
!8852 = !DILocation(line: 3068, column: 11, scope: !8829)
!8853 = !DILocation(line: 3068, column: 4, scope: !8829)
!8854 = !DILocation(line: 3071, column: 22, scope: !8825)
!8855 = !DILocation(line: 3071, column: 2, scope: !8825)
!8856 = !DILocation(line: 3072, column: 5, scope: !8752)
!8857 = !DILocation(line: 3073, column: 3, scope: !8735)
!8858 = !DILocation(line: 3074, column: 1, scope: !8735)
!8859 = distinct !DISubprogram(name: "widen_clz", scope: !3, file: !3, line: 2564, type: !8860, scopeLine: 2565, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!8860 = !DISubroutineType(types: !8861)
!8861 = !{!2732, !5, !2732, !2732}
!8862 = !DILocalVariable(name: "mode", arg: 1, scope: !8859, file: !3, line: 2564, type: !5)
!8863 = !DILocation(line: 2564, column: 30, scope: !8859)
!8864 = !DILocalVariable(name: "op0", arg: 2, scope: !8859, file: !3, line: 2564, type: !2732)
!8865 = !DILocation(line: 2564, column: 40, scope: !8859)
!8866 = !DILocalVariable(name: "target", arg: 3, scope: !8859, file: !3, line: 2564, type: !2732)
!8867 = !DILocation(line: 2564, column: 49, scope: !8859)
!8868 = !DILocalVariable(name: "mclass", scope: !8859, file: !3, line: 2566, type: !2192)
!8869 = !DILocation(line: 2566, column: 19, scope: !8859)
!8870 = !DILocation(line: 2566, column: 28, scope: !8859)
!8871 = !DILocation(line: 2567, column: 7, scope: !8872)
!8872 = distinct !DILexicalBlock(scope: !8859, file: !3, line: 2567, column: 7)
!8873 = !DILocation(line: 2567, column: 7, scope: !8859)
!8874 = !DILocalVariable(name: "wider_mode", scope: !8875, file: !3, line: 2569, type: !5)
!8875 = distinct !DILexicalBlock(scope: !8872, file: !3, line: 2568, column: 5)
!8876 = !DILocation(line: 2569, column: 25, scope: !8875)
!8877 = !DILocation(line: 2570, column: 25, scope: !8878)
!8878 = distinct !DILexicalBlock(scope: !8875, file: !3, line: 2570, column: 7)
!8879 = !DILocation(line: 2570, column: 23, scope: !8878)
!8880 = !DILocation(line: 2570, column: 12, scope: !8878)
!8881 = !DILocation(line: 2571, column: 5, scope: !8882)
!8882 = distinct !DILexicalBlock(scope: !8878, file: !3, line: 2570, column: 7)
!8883 = !DILocation(line: 2571, column: 16, scope: !8882)
!8884 = !DILocation(line: 2570, column: 7, scope: !8878)
!8885 = !DILocation(line: 2574, column: 8, scope: !8886)
!8886 = distinct !DILexicalBlock(scope: !8887, file: !3, line: 2574, column: 8)
!8887 = distinct !DILexicalBlock(scope: !8882, file: !3, line: 2573, column: 2)
!8888 = !DILocation(line: 2574, column: 47, scope: !8886)
!8889 = !DILocation(line: 2575, column: 8, scope: !8886)
!8890 = !DILocation(line: 2574, column: 8, scope: !8887)
!8891 = !DILocalVariable(name: "xop0", scope: !8892, file: !3, line: 2577, type: !2732)
!8892 = distinct !DILexicalBlock(scope: !8886, file: !3, line: 2576, column: 6)
!8893 = !DILocation(line: 2577, column: 12, scope: !8892)
!8894 = !DILocalVariable(name: "temp", scope: !8892, file: !3, line: 2577, type: !2732)
!8895 = !DILocation(line: 2577, column: 18, scope: !8892)
!8896 = !DILocalVariable(name: "last", scope: !8892, file: !3, line: 2577, type: !2732)
!8897 = !DILocation(line: 2577, column: 24, scope: !8892)
!8898 = !DILocation(line: 2579, column: 15, scope: !8892)
!8899 = !DILocation(line: 2579, column: 13, scope: !8892)
!8900 = !DILocation(line: 2581, column: 12, scope: !8901)
!8901 = distinct !DILexicalBlock(scope: !8892, file: !3, line: 2581, column: 12)
!8902 = !DILocation(line: 2581, column: 19, scope: !8901)
!8903 = !DILocation(line: 2581, column: 12, scope: !8892)
!8904 = !DILocation(line: 2582, column: 25, scope: !8901)
!8905 = !DILocation(line: 2582, column: 12, scope: !8901)
!8906 = !DILocation(line: 2582, column: 10, scope: !8901)
!8907 = !DILocation(line: 2582, column: 3, scope: !8901)
!8908 = !DILocation(line: 2583, column: 30, scope: !8892)
!8909 = !DILocation(line: 2583, column: 35, scope: !8892)
!8910 = !DILocation(line: 2583, column: 47, scope: !8892)
!8911 = !DILocation(line: 2583, column: 15, scope: !8892)
!8912 = !DILocation(line: 2583, column: 13, scope: !8892)
!8913 = !DILocation(line: 2584, column: 28, scope: !8892)
!8914 = !DILocation(line: 2584, column: 51, scope: !8892)
!8915 = !DILocation(line: 2584, column: 15, scope: !8892)
!8916 = !DILocation(line: 2584, column: 13, scope: !8892)
!8917 = !DILocation(line: 2585, column: 12, scope: !8918)
!8918 = distinct !DILexicalBlock(scope: !8892, file: !3, line: 2585, column: 12)
!8919 = !DILocation(line: 2585, column: 17, scope: !8918)
!8920 = !DILocation(line: 2585, column: 12, scope: !8892)
!8921 = !DILocation(line: 2586, column: 24, scope: !8918)
!8922 = !DILocation(line: 2586, column: 47, scope: !8918)
!8923 = !DILocation(line: 2587, column: 10, scope: !8918)
!8924 = !DILocation(line: 2589, column: 10, scope: !8918)
!8925 = !DILocation(line: 2586, column: 10, scope: !8918)
!8926 = !DILocation(line: 2586, column: 8, scope: !8918)
!8927 = !DILocation(line: 2586, column: 3, scope: !8918)
!8928 = !DILocation(line: 2590, column: 12, scope: !8929)
!8929 = distinct !DILexicalBlock(scope: !8892, file: !3, line: 2590, column: 12)
!8930 = !DILocation(line: 2590, column: 17, scope: !8929)
!8931 = !DILocation(line: 2590, column: 12, scope: !8892)
!8932 = !DILocation(line: 2591, column: 23, scope: !8929)
!8933 = !DILocation(line: 2591, column: 3, scope: !8929)
!8934 = !DILocation(line: 2593, column: 15, scope: !8892)
!8935 = !DILocation(line: 2593, column: 8, scope: !8892)
!8936 = !DILocation(line: 2595, column: 2, scope: !8887)
!8937 = !DILocation(line: 2572, column: 18, scope: !8882)
!8938 = !DILocation(line: 2572, column: 16, scope: !8882)
!8939 = !DILocation(line: 2570, column: 7, scope: !8882)
!8940 = distinct !{!8940, !8884, !8941}
!8941 = !DILocation(line: 2595, column: 2, scope: !8878)
!8942 = !DILocation(line: 2596, column: 5, scope: !8875)
!8943 = !DILocation(line: 2597, column: 3, scope: !8859)
!8944 = !DILocation(line: 2598, column: 1, scope: !8859)
!8945 = distinct !DISubprogram(name: "expand_doubleword_clz", scope: !3, file: !3, line: 2603, type: !8860, scopeLine: 2604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!8946 = !DILocalVariable(name: "mode", arg: 1, scope: !8945, file: !3, line: 2603, type: !5)
!8947 = !DILocation(line: 2603, column: 42, scope: !8945)
!8948 = !DILocalVariable(name: "op0", arg: 2, scope: !8945, file: !3, line: 2603, type: !2732)
!8949 = !DILocation(line: 2603, column: 52, scope: !8945)
!8950 = !DILocalVariable(name: "target", arg: 3, scope: !8945, file: !3, line: 2603, type: !2732)
!8951 = !DILocation(line: 2603, column: 61, scope: !8945)
!8952 = !DILocalVariable(name: "xop0", scope: !8945, file: !3, line: 2605, type: !2732)
!8953 = !DILocation(line: 2605, column: 7, scope: !8945)
!8954 = !DILocation(line: 2605, column: 25, scope: !8945)
!8955 = !DILocation(line: 2605, column: 31, scope: !8945)
!8956 = !DILocation(line: 2605, column: 14, scope: !8945)
!8957 = !DILocalVariable(name: "subhi", scope: !8945, file: !3, line: 2606, type: !2732)
!8958 = !DILocation(line: 2606, column: 7, scope: !8945)
!8959 = !DILocation(line: 2606, column: 29, scope: !8945)
!8960 = !DILocation(line: 2606, column: 40, scope: !8945)
!8961 = !DILocation(line: 2606, column: 15, scope: !8945)
!8962 = !DILocalVariable(name: "sublo", scope: !8945, file: !3, line: 2607, type: !2732)
!8963 = !DILocation(line: 2607, column: 7, scope: !8945)
!8964 = !DILocation(line: 2607, column: 15, scope: !8945)
!8965 = !DILocation(line: 2607, column: 28, scope: !8945)
!8966 = !DILocation(line: 2607, column: 39, scope: !8945)
!8967 = !DILocalVariable(name: "hi0_label", scope: !8945, file: !3, line: 2608, type: !2732)
!8968 = !DILocation(line: 2608, column: 7, scope: !8945)
!8969 = !DILocation(line: 2608, column: 19, scope: !8945)
!8970 = !DILocalVariable(name: "after_label", scope: !8945, file: !3, line: 2609, type: !2732)
!8971 = !DILocation(line: 2609, column: 7, scope: !8945)
!8972 = !DILocation(line: 2609, column: 21, scope: !8945)
!8973 = !DILocalVariable(name: "seq", scope: !8945, file: !3, line: 2610, type: !2732)
!8974 = !DILocation(line: 2610, column: 7, scope: !8945)
!8975 = !DILocalVariable(name: "temp", scope: !8945, file: !3, line: 2610, type: !2732)
!8976 = !DILocation(line: 2610, column: 12, scope: !8945)
!8977 = !DILocalVariable(name: "result", scope: !8945, file: !3, line: 2610, type: !2732)
!8978 = !DILocation(line: 2610, column: 18, scope: !8945)
!8979 = !DILocation(line: 2615, column: 8, scope: !8980)
!8980 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 2615, column: 7)
!8981 = !DILocation(line: 2615, column: 7, scope: !8945)
!8982 = !DILocation(line: 2616, column: 27, scope: !8980)
!8983 = !DILocation(line: 2616, column: 14, scope: !8980)
!8984 = !DILocation(line: 2616, column: 12, scope: !8980)
!8985 = !DILocation(line: 2616, column: 5, scope: !8980)
!8986 = !DILocation(line: 2621, column: 25, scope: !8945)
!8987 = !DILocation(line: 2621, column: 12, scope: !8945)
!8988 = !DILocation(line: 2621, column: 10, scope: !8945)
!8989 = !DILocation(line: 2623, column: 3, scope: !8945)
!8990 = !DILocation(line: 2627, column: 28, scope: !8945)
!8991 = !DILocation(line: 2627, column: 35, scope: !8945)
!8992 = !DILocation(line: 2628, column: 7, scope: !8945)
!8993 = !DILocation(line: 2628, column: 24, scope: !8945)
!8994 = !DILocation(line: 2627, column: 3, scope: !8945)
!8995 = !DILocation(line: 2630, column: 30, scope: !8945)
!8996 = !DILocation(line: 2630, column: 52, scope: !8945)
!8997 = !DILocation(line: 2630, column: 59, scope: !8945)
!8998 = !DILocation(line: 2630, column: 10, scope: !8945)
!8999 = !DILocation(line: 2630, column: 8, scope: !8945)
!9000 = !DILocation(line: 2631, column: 8, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 2631, column: 7)
!9002 = !DILocation(line: 2631, column: 7, scope: !8945)
!9003 = !DILocation(line: 2632, column: 5, scope: !9001)
!9004 = !DILocation(line: 2634, column: 7, scope: !9005)
!9005 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 2634, column: 7)
!9006 = !DILocation(line: 2634, column: 15, scope: !9005)
!9007 = !DILocation(line: 2634, column: 12, scope: !9005)
!9008 = !DILocation(line: 2634, column: 7, scope: !8945)
!9009 = !DILocation(line: 2635, column: 19, scope: !9005)
!9010 = !DILocation(line: 2635, column: 27, scope: !9005)
!9011 = !DILocation(line: 2635, column: 5, scope: !9005)
!9012 = !DILocation(line: 2637, column: 29, scope: !8945)
!9013 = !DILocation(line: 2637, column: 19, scope: !8945)
!9014 = !DILocation(line: 2637, column: 3, scope: !8945)
!9015 = !DILocation(line: 2638, column: 3, scope: !8945)
!9016 = !DILocation(line: 2642, column: 15, scope: !8945)
!9017 = !DILocation(line: 2642, column: 3, scope: !8945)
!9018 = !DILocation(line: 2644, column: 30, scope: !8945)
!9019 = !DILocation(line: 2644, column: 52, scope: !8945)
!9020 = !DILocation(line: 2644, column: 10, scope: !8945)
!9021 = !DILocation(line: 2644, column: 8, scope: !8945)
!9022 = !DILocation(line: 2645, column: 8, scope: !9023)
!9023 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 2645, column: 7)
!9024 = !DILocation(line: 2645, column: 7, scope: !8945)
!9025 = !DILocation(line: 2646, column: 5, scope: !9023)
!9026 = !DILocation(line: 2647, column: 24, scope: !8945)
!9027 = !DILocation(line: 2647, column: 46, scope: !8945)
!9028 = !DILocation(line: 2648, column: 10, scope: !8945)
!9029 = !DILocation(line: 2649, column: 10, scope: !8945)
!9030 = !DILocation(line: 2647, column: 10, scope: !8945)
!9031 = !DILocation(line: 2647, column: 8, scope: !8945)
!9032 = !DILocation(line: 2650, column: 8, scope: !9033)
!9033 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 2650, column: 7)
!9034 = !DILocation(line: 2650, column: 7, scope: !8945)
!9035 = !DILocation(line: 2651, column: 5, scope: !9033)
!9036 = !DILocation(line: 2652, column: 7, scope: !9037)
!9037 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 2652, column: 7)
!9038 = !DILocation(line: 2652, column: 15, scope: !9037)
!9039 = !DILocation(line: 2652, column: 12, scope: !9037)
!9040 = !DILocation(line: 2652, column: 7, scope: !8945)
!9041 = !DILocation(line: 2653, column: 19, scope: !9037)
!9042 = !DILocation(line: 2653, column: 27, scope: !9037)
!9043 = !DILocation(line: 2653, column: 5, scope: !9037)
!9044 = !DILocation(line: 2655, column: 15, scope: !8945)
!9045 = !DILocation(line: 2655, column: 3, scope: !8945)
!9046 = !DILocation(line: 2656, column: 17, scope: !8945)
!9047 = !DILocation(line: 2656, column: 25, scope: !8945)
!9048 = !DILocation(line: 2656, column: 3, scope: !8945)
!9049 = !DILocation(line: 2658, column: 9, scope: !8945)
!9050 = !DILocation(line: 2658, column: 7, scope: !8945)
!9051 = !DILocation(line: 2659, column: 3, scope: !8945)
!9052 = !DILocation(line: 2661, column: 19, scope: !8945)
!9053 = !DILocation(line: 2661, column: 24, scope: !8945)
!9054 = !DILocation(line: 2661, column: 37, scope: !8945)
!9055 = !DILocation(line: 2661, column: 3, scope: !8945)
!9056 = !DILocation(line: 2662, column: 14, scope: !8945)
!9057 = !DILocation(line: 2662, column: 3, scope: !8945)
!9058 = !DILocation(line: 2663, column: 10, scope: !8945)
!9059 = !DILocation(line: 2663, column: 3, scope: !8945)
!9060 = !DILabel(scope: !8945, name: "fail", file: !3, line: 2665)
!9061 = !DILocation(line: 2665, column: 2, scope: !8945)
!9062 = !DILocation(line: 2666, column: 3, scope: !8945)
!9063 = !DILocation(line: 2667, column: 3, scope: !8945)
!9064 = !DILocation(line: 2668, column: 1, scope: !8945)
!9065 = distinct !DISubprogram(name: "widen_bswap", scope: !3, file: !3, line: 2675, type: !8860, scopeLine: 2676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9066 = !DILocalVariable(name: "mode", arg: 1, scope: !9065, file: !3, line: 2675, type: !5)
!9067 = !DILocation(line: 2675, column: 32, scope: !9065)
!9068 = !DILocalVariable(name: "op0", arg: 2, scope: !9065, file: !3, line: 2675, type: !2732)
!9069 = !DILocation(line: 2675, column: 42, scope: !9065)
!9070 = !DILocalVariable(name: "target", arg: 3, scope: !9065, file: !3, line: 2675, type: !2732)
!9071 = !DILocation(line: 2675, column: 51, scope: !9065)
!9072 = !DILocalVariable(name: "mclass", scope: !9065, file: !3, line: 2677, type: !2192)
!9073 = !DILocation(line: 2677, column: 19, scope: !9065)
!9074 = !DILocation(line: 2677, column: 28, scope: !9065)
!9075 = !DILocalVariable(name: "wider_mode", scope: !9065, file: !3, line: 2678, type: !5)
!9076 = !DILocation(line: 2678, column: 21, scope: !9065)
!9077 = !DILocalVariable(name: "x", scope: !9065, file: !3, line: 2679, type: !2732)
!9078 = !DILocation(line: 2679, column: 7, scope: !9065)
!9079 = !DILocalVariable(name: "last", scope: !9065, file: !3, line: 2679, type: !2732)
!9080 = !DILocation(line: 2679, column: 10, scope: !9065)
!9081 = !DILocation(line: 2681, column: 8, scope: !9082)
!9082 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 2681, column: 7)
!9083 = !DILocation(line: 2681, column: 7, scope: !9065)
!9084 = !DILocation(line: 2682, column: 5, scope: !9082)
!9085 = !DILocation(line: 2684, column: 21, scope: !9086)
!9086 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 2684, column: 3)
!9087 = !DILocation(line: 2684, column: 19, scope: !9086)
!9088 = !DILocation(line: 2684, column: 8, scope: !9086)
!9089 = !DILocation(line: 2685, column: 8, scope: !9090)
!9090 = distinct !DILexicalBlock(scope: !9086, file: !3, line: 2684, column: 3)
!9091 = !DILocation(line: 2685, column: 19, scope: !9090)
!9092 = !DILocation(line: 2684, column: 3, scope: !9086)
!9093 = !DILocation(line: 2687, column: 9, scope: !9094)
!9094 = distinct !DILexicalBlock(scope: !9090, file: !3, line: 2687, column: 9)
!9095 = !DILocation(line: 2687, column: 50, scope: !9094)
!9096 = !DILocation(line: 2687, column: 60, scope: !9094)
!9097 = !DILocation(line: 2687, column: 9, scope: !9090)
!9098 = !DILocation(line: 2688, column: 7, scope: !9094)
!9099 = !DILocation(line: 2687, column: 63, scope: !9094)
!9100 = !DILocation(line: 2686, column: 21, scope: !9090)
!9101 = !DILocation(line: 2686, column: 19, scope: !9090)
!9102 = !DILocation(line: 2684, column: 3, scope: !9090)
!9103 = distinct !{!9103, !9092, !9104}
!9104 = !DILocation(line: 2688, column: 12, scope: !9086)
!9105 = !DILocation(line: 2689, column: 3, scope: !9065)
!9106 = !DILabel(scope: !9065, name: "found", file: !3, line: 2691)
!9107 = !DILocation(line: 2691, column: 2, scope: !9065)
!9108 = !DILocation(line: 2692, column: 10, scope: !9065)
!9109 = !DILocation(line: 2692, column: 8, scope: !9065)
!9110 = !DILocation(line: 2694, column: 22, scope: !9065)
!9111 = !DILocation(line: 2694, column: 27, scope: !9065)
!9112 = !DILocation(line: 2694, column: 39, scope: !9065)
!9113 = !DILocation(line: 2694, column: 7, scope: !9065)
!9114 = !DILocation(line: 2694, column: 5, scope: !9065)
!9115 = !DILocation(line: 2695, column: 20, scope: !9065)
!9116 = !DILocation(line: 2695, column: 45, scope: !9065)
!9117 = !DILocation(line: 2695, column: 7, scope: !9065)
!9118 = !DILocation(line: 2695, column: 5, scope: !9065)
!9119 = !DILocation(line: 2697, column: 7, scope: !9120)
!9120 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 2697, column: 7)
!9121 = !DILocation(line: 2697, column: 9, scope: !9120)
!9122 = !DILocation(line: 2697, column: 7, scope: !9065)
!9123 = !DILocation(line: 2698, column: 36, scope: !9120)
!9124 = !DILocation(line: 2698, column: 48, scope: !9120)
!9125 = !DILocation(line: 2699, column: 9, scope: !9120)
!9126 = !DILocation(line: 2698, column: 9, scope: !9120)
!9127 = !DILocation(line: 2698, column: 7, scope: !9120)
!9128 = !DILocation(line: 2698, column: 5, scope: !9120)
!9129 = !DILocation(line: 2703, column: 7, scope: !9130)
!9130 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 2703, column: 7)
!9131 = !DILocation(line: 2703, column: 9, scope: !9130)
!9132 = !DILocation(line: 2703, column: 7, scope: !9065)
!9133 = !DILocation(line: 2705, column: 11, scope: !9134)
!9134 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 2705, column: 11)
!9135 = distinct !DILexicalBlock(scope: !9130, file: !3, line: 2704, column: 5)
!9136 = !DILocation(line: 2705, column: 18, scope: !9134)
!9137 = !DILocation(line: 2705, column: 11, scope: !9135)
!9138 = !DILocation(line: 2706, column: 24, scope: !9134)
!9139 = !DILocation(line: 2706, column: 11, scope: !9134)
!9140 = !DILocation(line: 2706, column: 9, scope: !9134)
!9141 = !DILocation(line: 2706, column: 2, scope: !9134)
!9142 = !DILocation(line: 2707, column: 23, scope: !9135)
!9143 = !DILocation(line: 2707, column: 31, scope: !9135)
!9144 = !DILocation(line: 2707, column: 44, scope: !9135)
!9145 = !DILocation(line: 2707, column: 50, scope: !9135)
!9146 = !DILocation(line: 2707, column: 7, scope: !9135)
!9147 = !DILocation(line: 2708, column: 5, scope: !9135)
!9148 = !DILocation(line: 2710, column: 25, scope: !9130)
!9149 = !DILocation(line: 2710, column: 5, scope: !9130)
!9150 = !DILocation(line: 2712, column: 10, scope: !9065)
!9151 = !DILocation(line: 2712, column: 3, scope: !9065)
!9152 = !DILocation(line: 2713, column: 1, scope: !9065)
!9153 = distinct !DISubprogram(name: "expand_doubleword_bswap", scope: !3, file: !3, line: 2718, type: !8860, scopeLine: 2719, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9154 = !DILocalVariable(name: "mode", arg: 1, scope: !9153, file: !3, line: 2718, type: !5)
!9155 = !DILocation(line: 2718, column: 44, scope: !9153)
!9156 = !DILocalVariable(name: "op", arg: 2, scope: !9153, file: !3, line: 2718, type: !2732)
!9157 = !DILocation(line: 2718, column: 54, scope: !9153)
!9158 = !DILocalVariable(name: "target", arg: 3, scope: !9153, file: !3, line: 2718, type: !2732)
!9159 = !DILocation(line: 2718, column: 62, scope: !9153)
!9160 = !DILocalVariable(name: "t0", scope: !9153, file: !3, line: 2720, type: !2732)
!9161 = !DILocation(line: 2720, column: 7, scope: !9153)
!9162 = !DILocalVariable(name: "t1", scope: !9153, file: !3, line: 2720, type: !2732)
!9163 = !DILocation(line: 2720, column: 11, scope: !9153)
!9164 = !DILocation(line: 2722, column: 21, scope: !9153)
!9165 = !DILocation(line: 2723, column: 30, scope: !9153)
!9166 = !DILocation(line: 2723, column: 37, scope: !9153)
!9167 = !DILocation(line: 2723, column: 7, scope: !9153)
!9168 = !DILocation(line: 2722, column: 8, scope: !9153)
!9169 = !DILocation(line: 2722, column: 6, scope: !9153)
!9170 = !DILocation(line: 2724, column: 21, scope: !9153)
!9171 = !DILocation(line: 2725, column: 30, scope: !9153)
!9172 = !DILocation(line: 2725, column: 37, scope: !9153)
!9173 = !DILocation(line: 2725, column: 7, scope: !9153)
!9174 = !DILocation(line: 2724, column: 8, scope: !9153)
!9175 = !DILocation(line: 2724, column: 6, scope: !9153)
!9176 = !DILocation(line: 2727, column: 7, scope: !9177)
!9177 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 2727, column: 7)
!9178 = !DILocation(line: 2727, column: 14, scope: !9177)
!9179 = !DILocation(line: 2727, column: 7, scope: !9153)
!9180 = !DILocation(line: 2728, column: 27, scope: !9177)
!9181 = !DILocation(line: 2728, column: 14, scope: !9177)
!9182 = !DILocation(line: 2728, column: 12, scope: !9177)
!9183 = !DILocation(line: 2728, column: 5, scope: !9177)
!9184 = !DILocation(line: 2729, column: 7, scope: !9185)
!9185 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 2729, column: 7)
!9186 = !DILocation(line: 2729, column: 7, scope: !9153)
!9187 = !DILocation(line: 2730, column: 19, scope: !9185)
!9188 = !DILocation(line: 2730, column: 5, scope: !9185)
!9189 = !DILocation(line: 2731, column: 36, scope: !9153)
!9190 = !DILocation(line: 2731, column: 50, scope: !9153)
!9191 = !DILocation(line: 2731, column: 19, scope: !9153)
!9192 = !DILocation(line: 2731, column: 57, scope: !9153)
!9193 = !DILocation(line: 2731, column: 3, scope: !9153)
!9194 = !DILocation(line: 2732, column: 36, scope: !9153)
!9195 = !DILocation(line: 2732, column: 50, scope: !9153)
!9196 = !DILocation(line: 2732, column: 19, scope: !9153)
!9197 = !DILocation(line: 2732, column: 57, scope: !9153)
!9198 = !DILocation(line: 2732, column: 3, scope: !9153)
!9199 = !DILocation(line: 2734, column: 10, scope: !9153)
!9200 = !DILocation(line: 2734, column: 3, scope: !9153)
!9201 = distinct !DISubprogram(name: "expand_absneg_bit", scope: !3, file: !3, line: 2925, type: !9202, scopeLine: 2927, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9202 = !DISubroutineType(types: !9203)
!9203 = !{!2732, !384, !5, !2732, !2732}
!9204 = !DILocalVariable(name: "code", arg: 1, scope: !9201, file: !3, line: 2925, type: !384)
!9205 = !DILocation(line: 2925, column: 34, scope: !9201)
!9206 = !DILocalVariable(name: "mode", arg: 2, scope: !9201, file: !3, line: 2925, type: !5)
!9207 = !DILocation(line: 2925, column: 58, scope: !9201)
!9208 = !DILocalVariable(name: "op0", arg: 3, scope: !9201, file: !3, line: 2926, type: !2732)
!9209 = !DILocation(line: 2926, column: 10, scope: !9201)
!9210 = !DILocalVariable(name: "target", arg: 4, scope: !9201, file: !3, line: 2926, type: !2732)
!9211 = !DILocation(line: 2926, column: 19, scope: !9201)
!9212 = !DILocalVariable(name: "fmt", scope: !9201, file: !3, line: 2928, type: !9213)
!9213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9214, size: 64)
!9214 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9215)
!9215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_format", file: !2914, line: 124, size: 448, elements: !9216)
!9216 = !{!9217, !9222, !9228, !9229, !9230, !9231, !9232, !9233, !9234, !9235, !9236, !9237, !9238, !9239, !9240, !9241, !9242}
!9217 = !DIDerivedType(tag: DW_TAG_member, name: "encode", scope: !9215, file: !2914, line: 127, baseType: !9218, size: 64)
!9218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9219, size: 64)
!9219 = !DISubroutineType(types: !9220)
!9220 = !{null, !9213, !9221, !3872}
!9221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2822, size: 64)
!9222 = !DIDerivedType(tag: DW_TAG_member, name: "decode", scope: !9215, file: !2914, line: 129, baseType: !9223, size: 64, offset: 64)
!9223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9224, size: 64)
!9224 = !DISubroutineType(types: !9225)
!9225 = !{null, !9213, !2912, !9226}
!9226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9227, size: 64)
!9227 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2822)
!9228 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !9215, file: !2914, line: 133, baseType: !2756, size: 32, offset: 128)
!9229 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !9215, file: !2914, line: 136, baseType: !2756, size: 32, offset: 160)
!9230 = !DIDerivedType(tag: DW_TAG_member, name: "pnan", scope: !9215, file: !2914, line: 139, baseType: !2756, size: 32, offset: 192)
!9231 = !DIDerivedType(tag: DW_TAG_member, name: "emin", scope: !9215, file: !2914, line: 142, baseType: !2756, size: 32, offset: 224)
!9232 = !DIDerivedType(tag: DW_TAG_member, name: "emax", scope: !9215, file: !2914, line: 145, baseType: !2756, size: 32, offset: 256)
!9233 = !DIDerivedType(tag: DW_TAG_member, name: "signbit_ro", scope: !9215, file: !2914, line: 149, baseType: !2756, size: 32, offset: 288)
!9234 = !DIDerivedType(tag: DW_TAG_member, name: "signbit_rw", scope: !9215, file: !2914, line: 153, baseType: !2756, size: 32, offset: 320)
!9235 = !DIDerivedType(tag: DW_TAG_member, name: "round_towards_zero", scope: !9215, file: !2914, line: 156, baseType: !2966, size: 8, offset: 352)
!9236 = !DIDerivedType(tag: DW_TAG_member, name: "has_sign_dependent_rounding", scope: !9215, file: !2914, line: 157, baseType: !2966, size: 8, offset: 360)
!9237 = !DIDerivedType(tag: DW_TAG_member, name: "has_nans", scope: !9215, file: !2914, line: 160, baseType: !2966, size: 8, offset: 368)
!9238 = !DIDerivedType(tag: DW_TAG_member, name: "has_inf", scope: !9215, file: !2914, line: 161, baseType: !2966, size: 8, offset: 376)
!9239 = !DIDerivedType(tag: DW_TAG_member, name: "has_denorm", scope: !9215, file: !2914, line: 162, baseType: !2966, size: 8, offset: 384)
!9240 = !DIDerivedType(tag: DW_TAG_member, name: "has_signed_zero", scope: !9215, file: !2914, line: 163, baseType: !2966, size: 8, offset: 392)
!9241 = !DIDerivedType(tag: DW_TAG_member, name: "qnan_msb_set", scope: !9215, file: !2914, line: 164, baseType: !2966, size: 8, offset: 400)
!9242 = !DIDerivedType(tag: DW_TAG_member, name: "canonical_nan_lsbs_set", scope: !9215, file: !2914, line: 165, baseType: !2966, size: 8, offset: 408)
!9243 = !DILocation(line: 2928, column: 29, scope: !9201)
!9244 = !DILocalVariable(name: "bitpos", scope: !9201, file: !3, line: 2929, type: !2756)
!9245 = !DILocation(line: 2929, column: 7, scope: !9201)
!9246 = !DILocalVariable(name: "word", scope: !9201, file: !3, line: 2929, type: !2756)
!9247 = !DILocation(line: 2929, column: 15, scope: !9201)
!9248 = !DILocalVariable(name: "nwords", scope: !9201, file: !3, line: 2929, type: !2756)
!9249 = !DILocation(line: 2929, column: 21, scope: !9201)
!9250 = !DILocalVariable(name: "i", scope: !9201, file: !3, line: 2929, type: !2756)
!9251 = !DILocation(line: 2929, column: 29, scope: !9201)
!9252 = !DILocalVariable(name: "imode", scope: !9201, file: !3, line: 2930, type: !5)
!9253 = !DILocation(line: 2930, column: 21, scope: !9201)
!9254 = !DILocalVariable(name: "hi", scope: !9201, file: !3, line: 2931, type: !2822)
!9255 = !DILocation(line: 2931, column: 17, scope: !9201)
!9256 = !DILocalVariable(name: "lo", scope: !9201, file: !3, line: 2931, type: !2822)
!9257 = !DILocation(line: 2931, column: 21, scope: !9201)
!9258 = !DILocalVariable(name: "temp", scope: !9201, file: !3, line: 2932, type: !2732)
!9259 = !DILocation(line: 2932, column: 7, scope: !9201)
!9260 = !DILocalVariable(name: "insns", scope: !9201, file: !3, line: 2932, type: !2732)
!9261 = !DILocation(line: 2932, column: 13, scope: !9201)
!9262 = !DILocation(line: 2935, column: 9, scope: !9201)
!9263 = !DILocation(line: 2935, column: 7, scope: !9201)
!9264 = !DILocation(line: 2936, column: 7, scope: !9265)
!9265 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2936, column: 7)
!9266 = !DILocation(line: 2936, column: 11, scope: !9265)
!9267 = !DILocation(line: 2936, column: 7, scope: !9201)
!9268 = !DILocation(line: 2937, column: 5, scope: !9265)
!9269 = !DILocation(line: 2939, column: 12, scope: !9201)
!9270 = !DILocation(line: 2939, column: 17, scope: !9201)
!9271 = !DILocation(line: 2939, column: 10, scope: !9201)
!9272 = !DILocation(line: 2940, column: 7, scope: !9273)
!9273 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2940, column: 7)
!9274 = !DILocation(line: 2940, column: 14, scope: !9273)
!9275 = !DILocation(line: 2940, column: 7, scope: !9201)
!9276 = !DILocation(line: 2941, column: 5, scope: !9273)
!9277 = !DILocation(line: 2944, column: 7, scope: !9278)
!9278 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2944, column: 7)
!9279 = !DILocation(line: 2944, column: 12, scope: !9278)
!9280 = !DILocation(line: 2944, column: 19, scope: !9278)
!9281 = !DILocation(line: 2944, column: 23, scope: !9278)
!9282 = !DILocation(line: 2944, column: 28, scope: !9278)
!9283 = !DILocation(line: 2944, column: 7, scope: !9201)
!9284 = !DILocation(line: 2945, column: 5, scope: !9278)
!9285 = !DILocation(line: 2947, column: 7, scope: !9286)
!9286 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2947, column: 7)
!9287 = !DILocation(line: 2947, column: 28, scope: !9286)
!9288 = !DILocation(line: 2947, column: 7, scope: !9201)
!9289 = !DILocation(line: 2949, column: 34, scope: !9290)
!9290 = distinct !DILexicalBlock(scope: !9286, file: !3, line: 2948, column: 5)
!9291 = !DILocation(line: 2949, column: 15, scope: !9290)
!9292 = !DILocation(line: 2949, column: 13, scope: !9290)
!9293 = !DILocation(line: 2950, column: 11, scope: !9294)
!9294 = distinct !DILexicalBlock(scope: !9290, file: !3, line: 2950, column: 11)
!9295 = !DILocation(line: 2950, column: 17, scope: !9294)
!9296 = !DILocation(line: 2950, column: 11, scope: !9290)
!9297 = !DILocation(line: 2951, column: 2, scope: !9294)
!9298 = !DILocation(line: 2952, column: 12, scope: !9290)
!9299 = !DILocation(line: 2953, column: 14, scope: !9290)
!9300 = !DILocation(line: 2954, column: 5, scope: !9290)
!9301 = !DILocation(line: 2957, column: 15, scope: !9302)
!9302 = distinct !DILexicalBlock(scope: !9286, file: !3, line: 2956, column: 5)
!9303 = !DILocation(line: 2957, column: 13, scope: !9302)
!9304 = !DILocation(line: 2962, column: 9, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !9302, file: !3, line: 2959, column: 11)
!9306 = !DILocation(line: 2962, column: 16, scope: !9305)
!9307 = !DILocation(line: 2962, column: 7, scope: !9305)
!9308 = !DILocation(line: 2963, column: 16, scope: !9302)
!9309 = !DILocation(line: 2963, column: 23, scope: !9302)
!9310 = !DILocation(line: 2963, column: 14, scope: !9302)
!9311 = !DILocation(line: 2964, column: 17, scope: !9302)
!9312 = !DILocation(line: 2964, column: 41, scope: !9302)
!9313 = !DILocation(line: 2964, column: 57, scope: !9302)
!9314 = !DILocation(line: 2964, column: 62, scope: !9302)
!9315 = !DILocation(line: 2964, column: 14, scope: !9302)
!9316 = !DILocation(line: 2967, column: 7, scope: !9317)
!9317 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2967, column: 7)
!9318 = !DILocation(line: 2967, column: 14, scope: !9317)
!9319 = !DILocation(line: 2967, column: 7, scope: !9201)
!9320 = !DILocation(line: 2969, column: 10, scope: !9321)
!9321 = distinct !DILexicalBlock(scope: !9317, file: !3, line: 2968, column: 5)
!9322 = !DILocation(line: 2970, column: 33, scope: !9321)
!9323 = !DILocation(line: 2970, column: 30, scope: !9321)
!9324 = !DILocation(line: 2970, column: 10, scope: !9321)
!9325 = !DILocation(line: 2971, column: 5, scope: !9321)
!9326 = !DILocation(line: 2974, column: 34, scope: !9327)
!9327 = distinct !DILexicalBlock(scope: !9317, file: !3, line: 2973, column: 5)
!9328 = !DILocation(line: 2974, column: 41, scope: !9327)
!9329 = !DILocation(line: 2974, column: 30, scope: !9327)
!9330 = !DILocation(line: 2974, column: 10, scope: !9327)
!9331 = !DILocation(line: 2975, column: 10, scope: !9327)
!9332 = !DILocation(line: 2977, column: 7, scope: !9333)
!9333 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2977, column: 7)
!9334 = !DILocation(line: 2977, column: 12, scope: !9333)
!9335 = !DILocation(line: 2977, column: 7, scope: !9201)
!9336 = !DILocation(line: 2978, column: 11, scope: !9333)
!9337 = !DILocation(line: 2978, column: 10, scope: !9333)
!9338 = !DILocation(line: 2978, column: 8, scope: !9333)
!9339 = !DILocation(line: 2978, column: 21, scope: !9333)
!9340 = !DILocation(line: 2978, column: 20, scope: !9333)
!9341 = !DILocation(line: 2978, column: 18, scope: !9333)
!9342 = !DILocation(line: 2978, column: 5, scope: !9333)
!9343 = !DILocation(line: 2980, column: 7, scope: !9344)
!9344 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2980, column: 7)
!9345 = !DILocation(line: 2980, column: 14, scope: !9344)
!9346 = !DILocation(line: 2980, column: 19, scope: !9344)
!9347 = !DILocation(line: 2980, column: 22, scope: !9344)
!9348 = !DILocation(line: 2980, column: 32, scope: !9344)
!9349 = !DILocation(line: 2980, column: 29, scope: !9344)
!9350 = !DILocation(line: 2980, column: 7, scope: !9201)
!9351 = !DILocation(line: 2981, column: 27, scope: !9344)
!9352 = !DILocation(line: 2981, column: 14, scope: !9344)
!9353 = !DILocation(line: 2981, column: 12, scope: !9344)
!9354 = !DILocation(line: 2981, column: 5, scope: !9344)
!9355 = !DILocation(line: 2983, column: 7, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 2983, column: 7)
!9357 = !DILocation(line: 2983, column: 14, scope: !9356)
!9358 = !DILocation(line: 2983, column: 7, scope: !9201)
!9359 = !DILocation(line: 2985, column: 7, scope: !9360)
!9360 = distinct !DILexicalBlock(scope: !9356, file: !3, line: 2984, column: 5)
!9361 = !DILocation(line: 2987, column: 14, scope: !9362)
!9362 = distinct !DILexicalBlock(scope: !9360, file: !3, line: 2987, column: 7)
!9363 = !DILocation(line: 2987, column: 12, scope: !9362)
!9364 = !DILocation(line: 2987, column: 19, scope: !9365)
!9365 = distinct !DILexicalBlock(scope: !9362, file: !3, line: 2987, column: 7)
!9366 = !DILocation(line: 2987, column: 23, scope: !9365)
!9367 = !DILocation(line: 2987, column: 21, scope: !9365)
!9368 = !DILocation(line: 2987, column: 7, scope: !9362)
!9369 = !DILocalVariable(name: "targ_piece", scope: !9370, file: !3, line: 2989, type: !2732)
!9370 = distinct !DILexicalBlock(scope: !9365, file: !3, line: 2988, column: 2)
!9371 = !DILocation(line: 2989, column: 8, scope: !9370)
!9372 = !DILocation(line: 2989, column: 38, scope: !9370)
!9373 = !DILocation(line: 2989, column: 46, scope: !9370)
!9374 = !DILocation(line: 2989, column: 52, scope: !9370)
!9375 = !DILocation(line: 2989, column: 21, scope: !9370)
!9376 = !DILocalVariable(name: "op0_piece", scope: !9370, file: !3, line: 2990, type: !2732)
!9377 = !DILocation(line: 2990, column: 8, scope: !9370)
!9378 = !DILocation(line: 2990, column: 43, scope: !9370)
!9379 = !DILocation(line: 2990, column: 48, scope: !9370)
!9380 = !DILocation(line: 2990, column: 51, scope: !9370)
!9381 = !DILocation(line: 2990, column: 20, scope: !9370)
!9382 = !DILocation(line: 2992, column: 8, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9370, file: !3, line: 2992, column: 8)
!9384 = !DILocation(line: 2992, column: 13, scope: !9383)
!9385 = !DILocation(line: 2992, column: 10, scope: !9383)
!9386 = !DILocation(line: 2992, column: 8, scope: !9370)
!9387 = !DILocation(line: 2994, column: 29, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9383, file: !3, line: 2993, column: 6)
!9389 = !DILocation(line: 2994, column: 36, scope: !9388)
!9390 = !DILocation(line: 2994, column: 41, scope: !9388)
!9391 = !DILocation(line: 2995, column: 8, scope: !9388)
!9392 = !DILocation(line: 2996, column: 28, scope: !9388)
!9393 = !DILocation(line: 2996, column: 32, scope: !9388)
!9394 = !DILocation(line: 2996, column: 36, scope: !9388)
!9395 = !DILocation(line: 2996, column: 8, scope: !9388)
!9396 = !DILocation(line: 2997, column: 8, scope: !9388)
!9397 = !DILocation(line: 2994, column: 15, scope: !9388)
!9398 = !DILocation(line: 2994, column: 13, scope: !9388)
!9399 = !DILocation(line: 2998, column: 12, scope: !9400)
!9400 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 2998, column: 12)
!9401 = !DILocation(line: 2998, column: 20, scope: !9400)
!9402 = !DILocation(line: 2998, column: 17, scope: !9400)
!9403 = !DILocation(line: 2998, column: 12, scope: !9388)
!9404 = !DILocation(line: 2999, column: 19, scope: !9400)
!9405 = !DILocation(line: 2999, column: 31, scope: !9400)
!9406 = !DILocation(line: 2999, column: 3, scope: !9400)
!9407 = !DILocation(line: 3000, column: 6, scope: !9388)
!9408 = !DILocation(line: 3002, column: 22, scope: !9383)
!9409 = !DILocation(line: 3002, column: 34, scope: !9383)
!9410 = !DILocation(line: 3002, column: 6, scope: !9383)
!9411 = !DILocation(line: 3003, column: 2, scope: !9370)
!9412 = !DILocation(line: 2987, column: 31, scope: !9365)
!9413 = !DILocation(line: 2987, column: 7, scope: !9365)
!9414 = distinct !{!9414, !9368, !9415}
!9415 = !DILocation(line: 3003, column: 2, scope: !9362)
!9416 = !DILocation(line: 3005, column: 15, scope: !9360)
!9417 = !DILocation(line: 3005, column: 13, scope: !9360)
!9418 = !DILocation(line: 3006, column: 7, scope: !9360)
!9419 = !DILocation(line: 3008, column: 18, scope: !9360)
!9420 = !DILocation(line: 3008, column: 7, scope: !9360)
!9421 = !DILocation(line: 3009, column: 5, scope: !9360)
!9422 = !DILocation(line: 3012, column: 28, scope: !9423)
!9423 = distinct !DILexicalBlock(scope: !9356, file: !3, line: 3011, column: 5)
!9424 = !DILocation(line: 3012, column: 35, scope: !9423)
!9425 = !DILocation(line: 3012, column: 40, scope: !9423)
!9426 = !DILocation(line: 3013, column: 7, scope: !9423)
!9427 = !DILocation(line: 3013, column: 20, scope: !9423)
!9428 = !DILocation(line: 3013, column: 27, scope: !9423)
!9429 = !DILocation(line: 3014, column: 27, scope: !9423)
!9430 = !DILocation(line: 3014, column: 31, scope: !9423)
!9431 = !DILocation(line: 3014, column: 35, scope: !9423)
!9432 = !DILocation(line: 3014, column: 7, scope: !9423)
!9433 = !DILocation(line: 3015, column: 14, scope: !9423)
!9434 = !DILocation(line: 3015, column: 27, scope: !9423)
!9435 = !DILocation(line: 3015, column: 34, scope: !9423)
!9436 = !DILocation(line: 3012, column: 14, scope: !9423)
!9437 = !DILocation(line: 3012, column: 12, scope: !9423)
!9438 = !DILocation(line: 3016, column: 43, scope: !9423)
!9439 = !DILocation(line: 3016, column: 49, scope: !9423)
!9440 = !DILocation(line: 3016, column: 55, scope: !9423)
!9441 = !DILocation(line: 3016, column: 16, scope: !9423)
!9442 = !DILocation(line: 3016, column: 14, scope: !9423)
!9443 = !DILocation(line: 3018, column: 28, scope: !9423)
!9444 = !DILocation(line: 3019, column: 7, scope: !9423)
!9445 = !DILocation(line: 3018, column: 7, scope: !9423)
!9446 = !DILocation(line: 3022, column: 10, scope: !9201)
!9447 = !DILocation(line: 3022, column: 3, scope: !9201)
!9448 = !DILocation(line: 3023, column: 1, scope: !9201)
!9449 = distinct !DISubprogram(name: "expand_parity", scope: !3, file: !3, line: 2740, type: !8860, scopeLine: 2741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9450 = !DILocalVariable(name: "mode", arg: 1, scope: !9449, file: !3, line: 2740, type: !5)
!9451 = !DILocation(line: 2740, column: 34, scope: !9449)
!9452 = !DILocalVariable(name: "op0", arg: 2, scope: !9449, file: !3, line: 2740, type: !2732)
!9453 = !DILocation(line: 2740, column: 44, scope: !9449)
!9454 = !DILocalVariable(name: "target", arg: 3, scope: !9449, file: !3, line: 2740, type: !2732)
!9455 = !DILocation(line: 2740, column: 53, scope: !9449)
!9456 = !DILocalVariable(name: "mclass", scope: !9449, file: !3, line: 2742, type: !2192)
!9457 = !DILocation(line: 2742, column: 19, scope: !9449)
!9458 = !DILocation(line: 2742, column: 28, scope: !9449)
!9459 = !DILocation(line: 2743, column: 7, scope: !9460)
!9460 = distinct !DILexicalBlock(scope: !9449, file: !3, line: 2743, column: 7)
!9461 = !DILocation(line: 2743, column: 7, scope: !9449)
!9462 = !DILocalVariable(name: "wider_mode", scope: !9463, file: !3, line: 2745, type: !5)
!9463 = distinct !DILexicalBlock(scope: !9460, file: !3, line: 2744, column: 5)
!9464 = !DILocation(line: 2745, column: 25, scope: !9463)
!9465 = !DILocation(line: 2746, column: 25, scope: !9466)
!9466 = distinct !DILexicalBlock(scope: !9463, file: !3, line: 2746, column: 7)
!9467 = !DILocation(line: 2746, column: 23, scope: !9466)
!9468 = !DILocation(line: 2746, column: 12, scope: !9466)
!9469 = !DILocation(line: 2746, column: 31, scope: !9470)
!9470 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 2746, column: 7)
!9471 = !DILocation(line: 2746, column: 42, scope: !9470)
!9472 = !DILocation(line: 2746, column: 7, scope: !9466)
!9473 = !DILocation(line: 2749, column: 8, scope: !9474)
!9474 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 2749, column: 8)
!9475 = distinct !DILexicalBlock(scope: !9470, file: !3, line: 2748, column: 2)
!9476 = !DILocation(line: 2749, column: 52, scope: !9474)
!9477 = !DILocation(line: 2750, column: 8, scope: !9474)
!9478 = !DILocation(line: 2749, column: 8, scope: !9475)
!9479 = !DILocalVariable(name: "xop0", scope: !9480, file: !3, line: 2752, type: !2732)
!9480 = distinct !DILexicalBlock(scope: !9474, file: !3, line: 2751, column: 6)
!9481 = !DILocation(line: 2752, column: 12, scope: !9480)
!9482 = !DILocalVariable(name: "temp", scope: !9480, file: !3, line: 2752, type: !2732)
!9483 = !DILocation(line: 2752, column: 18, scope: !9480)
!9484 = !DILocalVariable(name: "last", scope: !9480, file: !3, line: 2752, type: !2732)
!9485 = !DILocation(line: 2752, column: 24, scope: !9480)
!9486 = !DILocation(line: 2754, column: 15, scope: !9480)
!9487 = !DILocation(line: 2754, column: 13, scope: !9480)
!9488 = !DILocation(line: 2756, column: 12, scope: !9489)
!9489 = distinct !DILexicalBlock(scope: !9480, file: !3, line: 2756, column: 12)
!9490 = !DILocation(line: 2756, column: 19, scope: !9489)
!9491 = !DILocation(line: 2756, column: 12, scope: !9480)
!9492 = !DILocation(line: 2757, column: 25, scope: !9489)
!9493 = !DILocation(line: 2757, column: 12, scope: !9489)
!9494 = !DILocation(line: 2757, column: 10, scope: !9489)
!9495 = !DILocation(line: 2757, column: 3, scope: !9489)
!9496 = !DILocation(line: 2758, column: 30, scope: !9480)
!9497 = !DILocation(line: 2758, column: 35, scope: !9480)
!9498 = !DILocation(line: 2758, column: 47, scope: !9480)
!9499 = !DILocation(line: 2758, column: 15, scope: !9480)
!9500 = !DILocation(line: 2758, column: 13, scope: !9480)
!9501 = !DILocation(line: 2759, column: 28, scope: !9480)
!9502 = !DILocation(line: 2759, column: 56, scope: !9480)
!9503 = !DILocation(line: 2759, column: 15, scope: !9480)
!9504 = !DILocation(line: 2759, column: 13, scope: !9480)
!9505 = !DILocation(line: 2761, column: 12, scope: !9506)
!9506 = distinct !DILexicalBlock(scope: !9480, file: !3, line: 2761, column: 12)
!9507 = !DILocation(line: 2761, column: 17, scope: !9506)
!9508 = !DILocation(line: 2761, column: 12, scope: !9480)
!9509 = !DILocation(line: 2762, column: 24, scope: !9506)
!9510 = !DILocation(line: 2762, column: 47, scope: !9506)
!9511 = !DILocation(line: 2762, column: 53, scope: !9506)
!9512 = !DILocation(line: 2763, column: 10, scope: !9506)
!9513 = !DILocation(line: 2762, column: 10, scope: !9506)
!9514 = !DILocation(line: 2762, column: 8, scope: !9506)
!9515 = !DILocation(line: 2762, column: 3, scope: !9506)
!9516 = !DILocation(line: 2764, column: 12, scope: !9517)
!9517 = distinct !DILexicalBlock(scope: !9480, file: !3, line: 2764, column: 12)
!9518 = !DILocation(line: 2764, column: 17, scope: !9517)
!9519 = !DILocation(line: 2764, column: 12, scope: !9480)
!9520 = !DILocation(line: 2765, column: 23, scope: !9517)
!9521 = !DILocation(line: 2765, column: 3, scope: !9517)
!9522 = !DILocation(line: 2767, column: 15, scope: !9480)
!9523 = !DILocation(line: 2767, column: 8, scope: !9480)
!9524 = !DILocation(line: 2769, column: 2, scope: !9475)
!9525 = !DILocation(line: 2747, column: 18, scope: !9470)
!9526 = !DILocation(line: 2747, column: 16, scope: !9470)
!9527 = !DILocation(line: 2746, column: 7, scope: !9470)
!9528 = distinct !{!9528, !9472, !9529}
!9529 = !DILocation(line: 2769, column: 2, scope: !9466)
!9530 = !DILocation(line: 2770, column: 5, scope: !9463)
!9531 = !DILocation(line: 2771, column: 3, scope: !9449)
!9532 = !DILocation(line: 2772, column: 1, scope: !9449)
!9533 = distinct !DISubprogram(name: "expand_ffs", scope: !3, file: !3, line: 2828, type: !8860, scopeLine: 2829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9534 = !DILocalVariable(name: "mode", arg: 1, scope: !9533, file: !3, line: 2828, type: !5)
!9535 = !DILocation(line: 2828, column: 31, scope: !9533)
!9536 = !DILocalVariable(name: "op0", arg: 2, scope: !9533, file: !3, line: 2828, type: !2732)
!9537 = !DILocation(line: 2828, column: 41, scope: !9533)
!9538 = !DILocalVariable(name: "target", arg: 3, scope: !9533, file: !3, line: 2828, type: !2732)
!9539 = !DILocation(line: 2828, column: 50, scope: !9533)
!9540 = !DILocalVariable(name: "val", scope: !9533, file: !3, line: 2830, type: !2822)
!9541 = !DILocation(line: 2830, column: 17, scope: !9533)
!9542 = !DILocalVariable(name: "defined_at_zero", scope: !9533, file: !3, line: 2831, type: !2966)
!9543 = !DILocation(line: 2831, column: 8, scope: !9533)
!9544 = !DILocalVariable(name: "temp", scope: !9533, file: !3, line: 2832, type: !2732)
!9545 = !DILocation(line: 2832, column: 7, scope: !9533)
!9546 = !DILocalVariable(name: "seq", scope: !9533, file: !3, line: 2832, type: !2732)
!9547 = !DILocation(line: 2832, column: 13, scope: !9533)
!9548 = !DILocation(line: 2834, column: 7, scope: !9549)
!9549 = distinct !DILexicalBlock(scope: !9533, file: !3, line: 2834, column: 7)
!9550 = !DILocation(line: 2834, column: 40, scope: !9549)
!9551 = !DILocation(line: 2834, column: 50, scope: !9549)
!9552 = !DILocation(line: 2834, column: 7, scope: !9533)
!9553 = !DILocation(line: 2836, column: 7, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 2835, column: 5)
!9555 = !DILocation(line: 2838, column: 34, scope: !9554)
!9556 = !DILocation(line: 2838, column: 51, scope: !9554)
!9557 = !DILocation(line: 2838, column: 14, scope: !9554)
!9558 = !DILocation(line: 2838, column: 12, scope: !9554)
!9559 = !DILocation(line: 2839, column: 12, scope: !9560)
!9560 = distinct !DILexicalBlock(scope: !9554, file: !3, line: 2839, column: 11)
!9561 = !DILocation(line: 2839, column: 11, scope: !9554)
!9562 = !DILocation(line: 2840, column: 2, scope: !9560)
!9563 = !DILocation(line: 2842, column: 23, scope: !9554)
!9564 = !DILocation(line: 2843, column: 5, scope: !9554)
!9565 = !DILocation(line: 2844, column: 12, scope: !9566)
!9566 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 2844, column: 12)
!9567 = !DILocation(line: 2844, column: 45, scope: !9566)
!9568 = !DILocation(line: 2844, column: 55, scope: !9566)
!9569 = !DILocation(line: 2844, column: 12, scope: !9549)
!9570 = !DILocation(line: 2846, column: 7, scope: !9571)
!9571 = distinct !DILexicalBlock(scope: !9566, file: !3, line: 2845, column: 5)
!9572 = !DILocation(line: 2847, column: 26, scope: !9571)
!9573 = !DILocation(line: 2847, column: 32, scope: !9571)
!9574 = !DILocation(line: 2847, column: 14, scope: !9571)
!9575 = !DILocation(line: 2847, column: 12, scope: !9571)
!9576 = !DILocation(line: 2848, column: 12, scope: !9577)
!9577 = distinct !DILexicalBlock(scope: !9571, file: !3, line: 2848, column: 11)
!9578 = !DILocation(line: 2848, column: 11, scope: !9571)
!9579 = !DILocation(line: 2849, column: 2, scope: !9577)
!9580 = !DILocation(line: 2856, column: 5, scope: !9571)
!9581 = !DILocation(line: 2858, column: 5, scope: !9566)
!9582 = !DILocation(line: 2860, column: 7, scope: !9583)
!9583 = distinct !DILexicalBlock(scope: !9533, file: !3, line: 2860, column: 7)
!9584 = !DILocation(line: 2860, column: 23, scope: !9583)
!9585 = !DILocation(line: 2860, column: 26, scope: !9583)
!9586 = !DILocation(line: 2860, column: 30, scope: !9583)
!9587 = !DILocation(line: 2860, column: 7, scope: !9533)
!9588 = !DILocalVariable(name: "nonzero_label", scope: !9589, file: !3, line: 2874, type: !2732)
!9589 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 2863, column: 5)
!9590 = !DILocation(line: 2874, column: 11, scope: !9589)
!9591 = !DILocation(line: 2874, column: 27, scope: !9589)
!9592 = !DILocation(line: 2875, column: 32, scope: !9589)
!9593 = !DILocation(line: 2875, column: 37, scope: !9589)
!9594 = !DILocation(line: 2876, column: 11, scope: !9589)
!9595 = !DILocation(line: 2876, column: 23, scope: !9589)
!9596 = !DILocation(line: 2875, column: 7, scope: !9589)
!9597 = !DILocation(line: 2878, column: 21, scope: !9589)
!9598 = !DILocation(line: 2878, column: 27, scope: !9589)
!9599 = !DILocation(line: 2878, column: 7, scope: !9589)
!9600 = !DILocation(line: 2879, column: 19, scope: !9589)
!9601 = !DILocation(line: 2879, column: 7, scope: !9589)
!9602 = !DILocation(line: 2884, column: 24, scope: !9533)
!9603 = !DILocation(line: 2884, column: 41, scope: !9533)
!9604 = !DILocation(line: 2884, column: 47, scope: !9533)
!9605 = !DILocation(line: 2885, column: 10, scope: !9533)
!9606 = !DILocation(line: 2884, column: 10, scope: !9533)
!9607 = !DILocation(line: 2884, column: 8, scope: !9533)
!9608 = !DILocation(line: 2886, column: 8, scope: !9609)
!9609 = distinct !DILexicalBlock(scope: !9533, file: !3, line: 2886, column: 7)
!9610 = !DILocation(line: 2886, column: 7, scope: !9533)
!9611 = !DILocation(line: 2887, column: 5, scope: !9609)
!9612 = !DILocation(line: 2889, column: 9, scope: !9533)
!9613 = !DILocation(line: 2889, column: 7, scope: !9533)
!9614 = !DILocation(line: 2890, column: 3, scope: !9533)
!9615 = !DILocation(line: 2892, column: 19, scope: !9533)
!9616 = !DILocation(line: 2892, column: 24, scope: !9533)
!9617 = !DILocation(line: 2892, column: 35, scope: !9533)
!9618 = !DILocation(line: 2892, column: 3, scope: !9533)
!9619 = !DILocation(line: 2893, column: 14, scope: !9533)
!9620 = !DILocation(line: 2893, column: 3, scope: !9533)
!9621 = !DILocation(line: 2894, column: 10, scope: !9533)
!9622 = !DILocation(line: 2894, column: 3, scope: !9533)
!9623 = !DILabel(scope: !9533, name: "fail", file: !3, line: 2896)
!9624 = !DILocation(line: 2896, column: 2, scope: !9533)
!9625 = !DILocation(line: 2897, column: 3, scope: !9533)
!9626 = !DILocation(line: 2898, column: 3, scope: !9533)
!9627 = !DILocation(line: 2899, column: 1, scope: !9533)
!9628 = distinct !DISubprogram(name: "expand_ctz", scope: !3, file: !3, line: 2787, type: !8860, scopeLine: 2788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9629 = !DILocalVariable(name: "mode", arg: 1, scope: !9628, file: !3, line: 2787, type: !5)
!9630 = !DILocation(line: 2787, column: 31, scope: !9628)
!9631 = !DILocalVariable(name: "op0", arg: 2, scope: !9628, file: !3, line: 2787, type: !2732)
!9632 = !DILocation(line: 2787, column: 41, scope: !9628)
!9633 = !DILocalVariable(name: "target", arg: 3, scope: !9628, file: !3, line: 2787, type: !2732)
!9634 = !DILocation(line: 2787, column: 50, scope: !9628)
!9635 = !DILocalVariable(name: "seq", scope: !9628, file: !3, line: 2789, type: !2732)
!9636 = !DILocation(line: 2789, column: 7, scope: !9628)
!9637 = !DILocalVariable(name: "temp", scope: !9628, file: !3, line: 2789, type: !2732)
!9638 = !DILocation(line: 2789, column: 12, scope: !9628)
!9639 = !DILocation(line: 2791, column: 7, scope: !9640)
!9640 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 2791, column: 7)
!9641 = !DILocation(line: 2791, column: 40, scope: !9640)
!9642 = !DILocation(line: 2791, column: 50, scope: !9640)
!9643 = !DILocation(line: 2791, column: 7, scope: !9628)
!9644 = !DILocation(line: 2792, column: 5, scope: !9640)
!9645 = !DILocation(line: 2794, column: 3, scope: !9628)
!9646 = !DILocation(line: 2796, column: 30, scope: !9628)
!9647 = !DILocation(line: 2796, column: 47, scope: !9628)
!9648 = !DILocation(line: 2796, column: 10, scope: !9628)
!9649 = !DILocation(line: 2796, column: 8, scope: !9628)
!9650 = !DILocation(line: 2797, column: 7, scope: !9651)
!9651 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 2797, column: 7)
!9652 = !DILocation(line: 2797, column: 7, scope: !9628)
!9653 = !DILocation(line: 2798, column: 26, scope: !9651)
!9654 = !DILocation(line: 2798, column: 43, scope: !9651)
!9655 = !DILocation(line: 2798, column: 48, scope: !9651)
!9656 = !DILocation(line: 2798, column: 12, scope: !9651)
!9657 = !DILocation(line: 2798, column: 10, scope: !9651)
!9658 = !DILocation(line: 2798, column: 5, scope: !9651)
!9659 = !DILocation(line: 2800, column: 7, scope: !9660)
!9660 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 2800, column: 7)
!9661 = !DILocation(line: 2800, column: 7, scope: !9628)
!9662 = !DILocation(line: 2801, column: 32, scope: !9660)
!9663 = !DILocation(line: 2801, column: 49, scope: !9660)
!9664 = !DILocation(line: 2801, column: 12, scope: !9660)
!9665 = !DILocation(line: 2801, column: 10, scope: !9660)
!9666 = !DILocation(line: 2801, column: 5, scope: !9660)
!9667 = !DILocation(line: 2802, column: 7, scope: !9668)
!9668 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 2802, column: 7)
!9669 = !DILocation(line: 2802, column: 7, scope: !9628)
!9670 = !DILocation(line: 2803, column: 26, scope: !9668)
!9671 = !DILocation(line: 2803, column: 43, scope: !9668)
!9672 = !DILocation(line: 2804, column: 5, scope: !9668)
!9673 = !DILocation(line: 2804, column: 11, scope: !9668)
!9674 = !DILocation(line: 2803, column: 12, scope: !9668)
!9675 = !DILocation(line: 2803, column: 10, scope: !9668)
!9676 = !DILocation(line: 2803, column: 5, scope: !9668)
!9677 = !DILocation(line: 2806, column: 7, scope: !9678)
!9678 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 2806, column: 7)
!9679 = !DILocation(line: 2806, column: 12, scope: !9678)
!9680 = !DILocation(line: 2806, column: 7, scope: !9628)
!9681 = !DILocation(line: 2808, column: 7, scope: !9682)
!9682 = distinct !DILexicalBlock(scope: !9678, file: !3, line: 2807, column: 5)
!9683 = !DILocation(line: 2809, column: 7, scope: !9682)
!9684 = !DILocation(line: 2812, column: 9, scope: !9628)
!9685 = !DILocation(line: 2812, column: 7, scope: !9628)
!9686 = !DILocation(line: 2813, column: 3, scope: !9628)
!9687 = !DILocation(line: 2815, column: 19, scope: !9628)
!9688 = !DILocation(line: 2815, column: 24, scope: !9628)
!9689 = !DILocation(line: 2815, column: 35, scope: !9628)
!9690 = !DILocation(line: 2815, column: 3, scope: !9628)
!9691 = !DILocation(line: 2816, column: 14, scope: !9628)
!9692 = !DILocation(line: 2816, column: 3, scope: !9628)
!9693 = !DILocation(line: 2817, column: 10, scope: !9628)
!9694 = !DILocation(line: 2817, column: 3, scope: !9628)
!9695 = !DILocation(line: 2818, column: 1, scope: !9628)
!9696 = distinct !DISubprogram(name: "expand_abs_nojump", scope: !3, file: !3, line: 3376, type: !9697, scopeLine: 3378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9697 = !DISubroutineType(types: !9698)
!9698 = !{!2732, !5, !2732, !2732, !2756}
!9699 = !DILocalVariable(name: "mode", arg: 1, scope: !9696, file: !3, line: 3376, type: !5)
!9700 = !DILocation(line: 3376, column: 38, scope: !9696)
!9701 = !DILocalVariable(name: "op0", arg: 2, scope: !9696, file: !3, line: 3376, type: !2732)
!9702 = !DILocation(line: 3376, column: 48, scope: !9696)
!9703 = !DILocalVariable(name: "target", arg: 3, scope: !9696, file: !3, line: 3376, type: !2732)
!9704 = !DILocation(line: 3376, column: 57, scope: !9696)
!9705 = !DILocalVariable(name: "result_unsignedp", arg: 4, scope: !9696, file: !3, line: 3377, type: !2756)
!9706 = !DILocation(line: 3377, column: 10, scope: !9696)
!9707 = !DILocalVariable(name: "temp", scope: !9696, file: !3, line: 3379, type: !2732)
!9708 = !DILocation(line: 3379, column: 7, scope: !9696)
!9709 = !DILocation(line: 3381, column: 9, scope: !9710)
!9710 = distinct !DILexicalBlock(scope: !9696, file: !3, line: 3381, column: 7)
!9711 = !DILocation(line: 3381, column: 7, scope: !9696)
!9712 = !DILocation(line: 3382, column: 22, scope: !9710)
!9713 = !DILocation(line: 3382, column: 5, scope: !9710)
!9714 = !DILocation(line: 3385, column: 23, scope: !9696)
!9715 = !DILocation(line: 3385, column: 29, scope: !9696)
!9716 = !DILocation(line: 3386, column: 23, scope: !9696)
!9717 = !DILocation(line: 3386, column: 28, scope: !9696)
!9718 = !DILocation(line: 3385, column: 10, scope: !9696)
!9719 = !DILocation(line: 3385, column: 8, scope: !9696)
!9720 = !DILocation(line: 3387, column: 7, scope: !9721)
!9721 = distinct !DILexicalBlock(scope: !9696, file: !3, line: 3387, column: 7)
!9722 = !DILocation(line: 3387, column: 12, scope: !9721)
!9723 = !DILocation(line: 3387, column: 7, scope: !9696)
!9724 = !DILocation(line: 3388, column: 12, scope: !9721)
!9725 = !DILocation(line: 3388, column: 5, scope: !9721)
!9726 = !DILocation(line: 3391, column: 7, scope: !9727)
!9727 = distinct !DILexicalBlock(scope: !9696, file: !3, line: 3391, column: 7)
!9728 = !DILocation(line: 3391, column: 7, scope: !9696)
!9729 = !DILocation(line: 3393, column: 38, scope: !9730)
!9730 = distinct !DILexicalBlock(scope: !9727, file: !3, line: 3392, column: 5)
!9731 = !DILocation(line: 3393, column: 44, scope: !9730)
!9732 = !DILocation(line: 3393, column: 49, scope: !9730)
!9733 = !DILocation(line: 3393, column: 14, scope: !9730)
!9734 = !DILocation(line: 3393, column: 12, scope: !9730)
!9735 = !DILocation(line: 3394, column: 11, scope: !9736)
!9736 = distinct !DILexicalBlock(scope: !9730, file: !3, line: 3394, column: 11)
!9737 = !DILocation(line: 3394, column: 11, scope: !9730)
!9738 = !DILocation(line: 3395, column: 9, scope: !9736)
!9739 = !DILocation(line: 3395, column: 2, scope: !9736)
!9740 = !DILocation(line: 3396, column: 5, scope: !9730)
!9741 = !DILocation(line: 3399, column: 7, scope: !9742)
!9742 = distinct !DILexicalBlock(scope: !9696, file: !3, line: 3399, column: 7)
!9743 = !DILocation(line: 3399, column: 41, scope: !9742)
!9744 = !DILocation(line: 3399, column: 51, scope: !9742)
!9745 = !DILocation(line: 3400, column: 7, scope: !9742)
!9746 = !DILocation(line: 3400, column: 11, scope: !9742)
!9747 = !DILocation(line: 3399, column: 7, scope: !9696)
!9748 = !DILocalVariable(name: "last", scope: !9749, file: !3, line: 3402, type: !2732)
!9749 = distinct !DILexicalBlock(scope: !9742, file: !3, line: 3401, column: 5)
!9750 = !DILocation(line: 3402, column: 11, scope: !9749)
!9751 = !DILocation(line: 3402, column: 18, scope: !9749)
!9752 = !DILocation(line: 3404, column: 27, scope: !9749)
!9753 = !DILocation(line: 3404, column: 44, scope: !9749)
!9754 = !DILocation(line: 3404, column: 14, scope: !9749)
!9755 = !DILocation(line: 3404, column: 12, scope: !9749)
!9756 = !DILocation(line: 3405, column: 11, scope: !9757)
!9757 = distinct !DILexicalBlock(scope: !9749, file: !3, line: 3405, column: 11)
!9758 = !DILocation(line: 3405, column: 16, scope: !9757)
!9759 = !DILocation(line: 3405, column: 11, scope: !9749)
!9760 = !DILocation(line: 3406, column: 23, scope: !9757)
!9761 = !DILocation(line: 3406, column: 41, scope: !9757)
!9762 = !DILocation(line: 3406, column: 46, scope: !9757)
!9763 = !DILocation(line: 3406, column: 52, scope: !9757)
!9764 = !DILocation(line: 3406, column: 9, scope: !9757)
!9765 = !DILocation(line: 3406, column: 7, scope: !9757)
!9766 = !DILocation(line: 3406, column: 2, scope: !9757)
!9767 = !DILocation(line: 3409, column: 11, scope: !9768)
!9768 = distinct !DILexicalBlock(scope: !9749, file: !3, line: 3409, column: 11)
!9769 = !DILocation(line: 3409, column: 16, scope: !9768)
!9770 = !DILocation(line: 3409, column: 11, scope: !9749)
!9771 = !DILocation(line: 3410, column: 9, scope: !9768)
!9772 = !DILocation(line: 3410, column: 2, scope: !9768)
!9773 = !DILocation(line: 3412, column: 27, scope: !9749)
!9774 = !DILocation(line: 3412, column: 7, scope: !9749)
!9775 = !DILocation(line: 3413, column: 5, scope: !9749)
!9776 = !DILocation(line: 3419, column: 7, scope: !9777)
!9777 = distinct !DILexicalBlock(scope: !9696, file: !3, line: 3419, column: 7)
!9778 = !DILocation(line: 3419, column: 29, scope: !9777)
!9779 = !DILocation(line: 3420, column: 7, scope: !9777)
!9780 = !DILocation(line: 3420, column: 10, scope: !9777)
!9781 = !DILocation(line: 3421, column: 22, scope: !9777)
!9782 = !DILocation(line: 3419, column: 7, scope: !9696)
!9783 = !DILocalVariable(name: "extended", scope: !9784, file: !3, line: 3423, type: !2732)
!9784 = distinct !DILexicalBlock(scope: !9777, file: !3, line: 3422, column: 5)
!9785 = !DILocation(line: 3423, column: 11, scope: !9784)
!9786 = !DILocation(line: 3423, column: 49, scope: !9784)
!9787 = !DILocation(line: 3423, column: 55, scope: !9784)
!9788 = !DILocation(line: 3424, column: 8, scope: !9784)
!9789 = !DILocation(line: 3423, column: 22, scope: !9784)
!9790 = !DILocation(line: 3427, column: 28, scope: !9784)
!9791 = !DILocation(line: 3427, column: 45, scope: !9784)
!9792 = !DILocation(line: 3427, column: 55, scope: !9784)
!9793 = !DILocation(line: 3427, column: 60, scope: !9784)
!9794 = !DILocation(line: 3427, column: 14, scope: !9784)
!9795 = !DILocation(line: 3427, column: 12, scope: !9784)
!9796 = !DILocation(line: 3429, column: 11, scope: !9797)
!9797 = distinct !DILexicalBlock(scope: !9784, file: !3, line: 3429, column: 11)
!9798 = !DILocation(line: 3429, column: 16, scope: !9797)
!9799 = !DILocation(line: 3429, column: 11, scope: !9784)
!9800 = !DILocation(line: 3430, column: 23, scope: !9797)
!9801 = !DILocation(line: 3430, column: 29, scope: !9797)
!9802 = !DILocation(line: 3431, column: 30, scope: !9797)
!9803 = !DILocation(line: 3431, column: 36, scope: !9797)
!9804 = !DILocation(line: 3431, column: 46, scope: !9797)
!9805 = !DILocation(line: 3430, column: 9, scope: !9797)
!9806 = !DILocation(line: 3430, column: 7, scope: !9797)
!9807 = !DILocation(line: 3430, column: 2, scope: !9797)
!9808 = !DILocation(line: 3433, column: 11, scope: !9809)
!9809 = distinct !DILexicalBlock(scope: !9784, file: !3, line: 3433, column: 11)
!9810 = !DILocation(line: 3433, column: 16, scope: !9809)
!9811 = !DILocation(line: 3433, column: 11, scope: !9784)
!9812 = !DILocation(line: 3434, column: 9, scope: !9809)
!9813 = !DILocation(line: 3434, column: 2, scope: !9809)
!9814 = !DILocation(line: 3435, column: 5, scope: !9784)
!9815 = !DILocation(line: 3437, column: 3, scope: !9696)
!9816 = !DILocation(line: 3438, column: 1, scope: !9696)
!9817 = distinct !DISubprogram(name: "expand_abs", scope: !3, file: !3, line: 3441, type: !9818, scopeLine: 3443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9818 = !DISubroutineType(types: !9819)
!9819 = !{!2732, !5, !2732, !2732, !2756, !2756}
!9820 = !DILocalVariable(name: "mode", arg: 1, scope: !9817, file: !3, line: 3441, type: !5)
!9821 = !DILocation(line: 3441, column: 31, scope: !9817)
!9822 = !DILocalVariable(name: "op0", arg: 2, scope: !9817, file: !3, line: 3441, type: !2732)
!9823 = !DILocation(line: 3441, column: 41, scope: !9817)
!9824 = !DILocalVariable(name: "target", arg: 3, scope: !9817, file: !3, line: 3441, type: !2732)
!9825 = !DILocation(line: 3441, column: 50, scope: !9817)
!9826 = !DILocalVariable(name: "result_unsignedp", arg: 4, scope: !9817, file: !3, line: 3442, type: !2756)
!9827 = !DILocation(line: 3442, column: 10, scope: !9817)
!9828 = !DILocalVariable(name: "safe", arg: 5, scope: !9817, file: !3, line: 3442, type: !2756)
!9829 = !DILocation(line: 3442, column: 32, scope: !9817)
!9830 = !DILocalVariable(name: "temp", scope: !9817, file: !3, line: 3444, type: !2732)
!9831 = !DILocation(line: 3444, column: 7, scope: !9817)
!9832 = !DILocalVariable(name: "op1", scope: !9817, file: !3, line: 3444, type: !2732)
!9833 = !DILocation(line: 3444, column: 13, scope: !9817)
!9834 = !DILocation(line: 3446, column: 9, scope: !9835)
!9835 = distinct !DILexicalBlock(scope: !9817, file: !3, line: 3446, column: 7)
!9836 = !DILocation(line: 3446, column: 7, scope: !9817)
!9837 = !DILocation(line: 3447, column: 22, scope: !9835)
!9838 = !DILocation(line: 3447, column: 5, scope: !9835)
!9839 = !DILocation(line: 3449, column: 29, scope: !9817)
!9840 = !DILocation(line: 3449, column: 35, scope: !9817)
!9841 = !DILocation(line: 3449, column: 40, scope: !9817)
!9842 = !DILocation(line: 3449, column: 48, scope: !9817)
!9843 = !DILocation(line: 3449, column: 10, scope: !9817)
!9844 = !DILocation(line: 3449, column: 8, scope: !9817)
!9845 = !DILocation(line: 3450, column: 7, scope: !9846)
!9846 = distinct !DILexicalBlock(scope: !9817, file: !3, line: 3450, column: 7)
!9847 = !DILocation(line: 3450, column: 12, scope: !9846)
!9848 = !DILocation(line: 3450, column: 7, scope: !9817)
!9849 = !DILocation(line: 3451, column: 12, scope: !9846)
!9850 = !DILocation(line: 3451, column: 5, scope: !9846)
!9851 = !DILocation(line: 3457, column: 7, scope: !9852)
!9852 = distinct !DILexicalBlock(scope: !9817, file: !3, line: 3457, column: 7)
!9853 = !DILocation(line: 3457, column: 14, scope: !9852)
!9854 = !DILocation(line: 3457, column: 11, scope: !9852)
!9855 = !DILocation(line: 3457, column: 21, scope: !9852)
!9856 = !DILocation(line: 3457, column: 24, scope: !9852)
!9857 = !DILocation(line: 3458, column: 7, scope: !9852)
!9858 = !DILocation(line: 3458, column: 10, scope: !9852)
!9859 = !DILocation(line: 3458, column: 22, scope: !9852)
!9860 = !DILocation(line: 3457, column: 7, scope: !9817)
!9861 = !DILocation(line: 3459, column: 10, scope: !9852)
!9862 = !DILocation(line: 3459, column: 5, scope: !9852)
!9863 = !DILocation(line: 3461, column: 9, scope: !9817)
!9864 = !DILocation(line: 3461, column: 7, scope: !9817)
!9865 = !DILocation(line: 3462, column: 7, scope: !9866)
!9866 = distinct !DILexicalBlock(scope: !9817, file: !3, line: 3462, column: 7)
!9867 = !DILocation(line: 3462, column: 14, scope: !9866)
!9868 = !DILocation(line: 3462, column: 19, scope: !9866)
!9869 = !DILocation(line: 3462, column: 24, scope: !9866)
!9870 = !DILocation(line: 3463, column: 7, scope: !9866)
!9871 = !DILocation(line: 3463, column: 10, scope: !9866)
!9872 = !DILocation(line: 3463, column: 31, scope: !9866)
!9873 = !DILocation(line: 3463, column: 28, scope: !9866)
!9874 = !DILocation(line: 3464, column: 7, scope: !9866)
!9875 = !DILocation(line: 3464, column: 11, scope: !9866)
!9876 = !DILocation(line: 3464, column: 26, scope: !9866)
!9877 = !DILocation(line: 3464, column: 29, scope: !9866)
!9878 = !DILocation(line: 3465, column: 7, scope: !9866)
!9879 = !DILocation(line: 3465, column: 11, scope: !9866)
!9880 = !DILocation(line: 3466, column: 4, scope: !9866)
!9881 = !DILocation(line: 3466, column: 7, scope: !9866)
!9882 = !DILocation(line: 3466, column: 22, scope: !9866)
!9883 = !DILocation(line: 3462, column: 7, scope: !9817)
!9884 = !DILocation(line: 3467, column: 27, scope: !9866)
!9885 = !DILocation(line: 3467, column: 14, scope: !9866)
!9886 = !DILocation(line: 3467, column: 12, scope: !9866)
!9887 = !DILocation(line: 3467, column: 5, scope: !9866)
!9888 = !DILocation(line: 3469, column: 19, scope: !9817)
!9889 = !DILocation(line: 3469, column: 27, scope: !9817)
!9890 = !DILocation(line: 3469, column: 3, scope: !9817)
!9891 = !DILocation(line: 3470, column: 3, scope: !9817)
!9892 = !DILocation(line: 3472, column: 28, scope: !9817)
!9893 = !DILocation(line: 3472, column: 36, scope: !9817)
!9894 = !DILocation(line: 3472, column: 62, scope: !9817)
!9895 = !DILocation(line: 3473, column: 27, scope: !9817)
!9896 = !DILocation(line: 3472, column: 3, scope: !9817)
!9897 = !DILocation(line: 3475, column: 22, scope: !9817)
!9898 = !DILocation(line: 3475, column: 28, scope: !9817)
!9899 = !DILocation(line: 3476, column: 22, scope: !9817)
!9900 = !DILocation(line: 3476, column: 30, scope: !9817)
!9901 = !DILocation(line: 3475, column: 9, scope: !9817)
!9902 = !DILocation(line: 3475, column: 7, scope: !9817)
!9903 = !DILocation(line: 3477, column: 7, scope: !9904)
!9904 = distinct !DILexicalBlock(scope: !9817, file: !3, line: 3477, column: 7)
!9905 = !DILocation(line: 3477, column: 14, scope: !9904)
!9906 = !DILocation(line: 3477, column: 11, scope: !9904)
!9907 = !DILocation(line: 3477, column: 7, scope: !9817)
!9908 = !DILocation(line: 3478, column: 21, scope: !9904)
!9909 = !DILocation(line: 3478, column: 29, scope: !9904)
!9910 = !DILocation(line: 3478, column: 5, scope: !9904)
!9911 = !DILocation(line: 3479, column: 15, scope: !9817)
!9912 = !DILocation(line: 3479, column: 3, scope: !9817)
!9913 = !DILocation(line: 3480, column: 3, scope: !9817)
!9914 = !DILocation(line: 3481, column: 10, scope: !9817)
!9915 = !DILocation(line: 3481, column: 3, scope: !9817)
!9916 = !DILocation(line: 3482, column: 1, scope: !9817)
!9917 = distinct !DISubprogram(name: "rhs_regno", scope: !385, file: !385, line: 1051, type: !9918, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9918 = !DISubroutineType(types: !9919)
!9919 = !{!7, !9920}
!9920 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !2733, line: 51, baseType: !9921)
!9921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9922, size: 64)
!9922 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2735)
!9923 = !DILocalVariable(name: "x", arg: 1, scope: !9917, file: !385, line: 1051, type: !9920)
!9924 = !DILocation(line: 1051, column: 22, scope: !9917)
!9925 = !DILocation(line: 1053, column: 10, scope: !9917)
!9926 = !DILocation(line: 1053, column: 3, scope: !9917)
!9927 = distinct !DISubprogram(name: "expand_one_cmpl_abs_nojump", scope: !3, file: !3, line: 3493, type: !8860, scopeLine: 3494, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!9928 = !DILocalVariable(name: "mode", arg: 1, scope: !9927, file: !3, line: 3493, type: !5)
!9929 = !DILocation(line: 3493, column: 47, scope: !9927)
!9930 = !DILocalVariable(name: "op0", arg: 2, scope: !9927, file: !3, line: 3493, type: !2732)
!9931 = !DILocation(line: 3493, column: 57, scope: !9927)
!9932 = !DILocalVariable(name: "target", arg: 3, scope: !9927, file: !3, line: 3493, type: !2732)
!9933 = !DILocation(line: 3493, column: 66, scope: !9927)
!9934 = !DILocalVariable(name: "temp", scope: !9927, file: !3, line: 3495, type: !2732)
!9935 = !DILocation(line: 3495, column: 7, scope: !9927)
!9936 = !DILocation(line: 3498, column: 7, scope: !9937)
!9937 = distinct !DILexicalBlock(scope: !9927, file: !3, line: 3498, column: 7)
!9938 = !DILocation(line: 3498, column: 7, scope: !9927)
!9939 = !DILocation(line: 3499, column: 5, scope: !9937)
!9940 = !DILocation(line: 3502, column: 7, scope: !9941)
!9941 = distinct !DILexicalBlock(scope: !9927, file: !3, line: 3502, column: 7)
!9942 = !DILocation(line: 3502, column: 41, scope: !9941)
!9943 = !DILocation(line: 3502, column: 51, scope: !9941)
!9944 = !DILocation(line: 3502, column: 7, scope: !9927)
!9945 = !DILocalVariable(name: "last", scope: !9946, file: !3, line: 3504, type: !2732)
!9946 = distinct !DILexicalBlock(scope: !9941, file: !3, line: 3503, column: 5)
!9947 = !DILocation(line: 3504, column: 11, scope: !9946)
!9948 = !DILocation(line: 3504, column: 18, scope: !9946)
!9949 = !DILocation(line: 3506, column: 27, scope: !9946)
!9950 = !DILocation(line: 3506, column: 49, scope: !9946)
!9951 = !DILocation(line: 3506, column: 14, scope: !9946)
!9952 = !DILocation(line: 3506, column: 12, scope: !9946)
!9953 = !DILocation(line: 3507, column: 11, scope: !9954)
!9954 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 3507, column: 11)
!9955 = !DILocation(line: 3507, column: 16, scope: !9954)
!9956 = !DILocation(line: 3507, column: 11, scope: !9946)
!9957 = !DILocation(line: 3508, column: 23, scope: !9954)
!9958 = !DILocation(line: 3508, column: 41, scope: !9954)
!9959 = !DILocation(line: 3508, column: 46, scope: !9954)
!9960 = !DILocation(line: 3508, column: 52, scope: !9954)
!9961 = !DILocation(line: 3508, column: 9, scope: !9954)
!9962 = !DILocation(line: 3508, column: 7, scope: !9954)
!9963 = !DILocation(line: 3508, column: 2, scope: !9954)
!9964 = !DILocation(line: 3511, column: 11, scope: !9965)
!9965 = distinct !DILexicalBlock(scope: !9946, file: !3, line: 3511, column: 11)
!9966 = !DILocation(line: 3511, column: 16, scope: !9965)
!9967 = !DILocation(line: 3511, column: 11, scope: !9946)
!9968 = !DILocation(line: 3512, column: 9, scope: !9965)
!9969 = !DILocation(line: 3512, column: 2, scope: !9965)
!9970 = !DILocation(line: 3514, column: 27, scope: !9946)
!9971 = !DILocation(line: 3514, column: 7, scope: !9946)
!9972 = !DILocation(line: 3515, column: 5, scope: !9946)
!9973 = !DILocation(line: 3520, column: 7, scope: !9974)
!9974 = distinct !DILexicalBlock(scope: !9927, file: !3, line: 3520, column: 7)
!9975 = !DILocation(line: 3520, column: 29, scope: !9974)
!9976 = !DILocation(line: 3521, column: 7, scope: !9974)
!9977 = !DILocation(line: 3521, column: 10, scope: !9974)
!9978 = !DILocation(line: 3522, column: 22, scope: !9974)
!9979 = !DILocation(line: 3520, column: 7, scope: !9927)
!9980 = !DILocalVariable(name: "extended", scope: !9981, file: !3, line: 3524, type: !2732)
!9981 = distinct !DILexicalBlock(scope: !9974, file: !3, line: 3523, column: 5)
!9982 = !DILocation(line: 3524, column: 11, scope: !9981)
!9983 = !DILocation(line: 3524, column: 49, scope: !9981)
!9984 = !DILocation(line: 3524, column: 55, scope: !9981)
!9985 = !DILocation(line: 3525, column: 8, scope: !9981)
!9986 = !DILocation(line: 3524, column: 22, scope: !9981)
!9987 = !DILocation(line: 3528, column: 28, scope: !9981)
!9988 = !DILocation(line: 3528, column: 45, scope: !9981)
!9989 = !DILocation(line: 3528, column: 55, scope: !9981)
!9990 = !DILocation(line: 3528, column: 60, scope: !9981)
!9991 = !DILocation(line: 3528, column: 14, scope: !9981)
!9992 = !DILocation(line: 3528, column: 12, scope: !9981)
!9993 = !DILocation(line: 3531, column: 11, scope: !9994)
!9994 = distinct !DILexicalBlock(scope: !9981, file: !3, line: 3531, column: 11)
!9995 = !DILocation(line: 3531, column: 16, scope: !9994)
!9996 = !DILocation(line: 3531, column: 11, scope: !9981)
!9997 = !DILocation(line: 3532, column: 9, scope: !9994)
!9998 = !DILocation(line: 3532, column: 2, scope: !9994)
!9999 = !DILocation(line: 3533, column: 5, scope: !9981)
!10000 = !DILocation(line: 3535, column: 3, scope: !9927)
!10001 = !DILocation(line: 3536, column: 1, scope: !9927)
!10002 = distinct !DISubprogram(name: "expand_copysign", scope: !3, file: !3, line: 3742, type: !10003, scopeLine: 3743, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10003 = !DISubroutineType(types: !10004)
!10004 = !{!2732, !2732, !2732, !2732}
!10005 = !DILocalVariable(name: "op0", arg: 1, scope: !10002, file: !3, line: 3742, type: !2732)
!10006 = !DILocation(line: 3742, column: 22, scope: !10002)
!10007 = !DILocalVariable(name: "op1", arg: 2, scope: !10002, file: !3, line: 3742, type: !2732)
!10008 = !DILocation(line: 3742, column: 31, scope: !10002)
!10009 = !DILocalVariable(name: "target", arg: 3, scope: !10002, file: !3, line: 3742, type: !2732)
!10010 = !DILocation(line: 3742, column: 40, scope: !10002)
!10011 = !DILocalVariable(name: "mode", scope: !10002, file: !3, line: 3744, type: !5)
!10012 = !DILocation(line: 3744, column: 21, scope: !10002)
!10013 = !DILocation(line: 3744, column: 28, scope: !10002)
!10014 = !DILocalVariable(name: "fmt", scope: !10002, file: !3, line: 3745, type: !9213)
!10015 = !DILocation(line: 3745, column: 29, scope: !10002)
!10016 = !DILocalVariable(name: "op0_is_abs", scope: !10002, file: !3, line: 3746, type: !2966)
!10017 = !DILocation(line: 3746, column: 8, scope: !10002)
!10018 = !DILocalVariable(name: "temp", scope: !10002, file: !3, line: 3747, type: !2732)
!10019 = !DILocation(line: 3747, column: 7, scope: !10002)
!10020 = !DILocation(line: 3749, column: 3, scope: !10002)
!10021 = !DILocation(line: 3750, column: 3, scope: !10002)
!10022 = !DILocation(line: 3753, column: 24, scope: !10002)
!10023 = !DILocation(line: 3753, column: 46, scope: !10002)
!10024 = !DILocation(line: 3753, column: 51, scope: !10002)
!10025 = !DILocation(line: 3754, column: 10, scope: !10002)
!10026 = !DILocation(line: 3753, column: 10, scope: !10002)
!10027 = !DILocation(line: 3753, column: 8, scope: !10002)
!10028 = !DILocation(line: 3755, column: 7, scope: !10029)
!10029 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 3755, column: 7)
!10030 = !DILocation(line: 3755, column: 7, scope: !10002)
!10031 = !DILocation(line: 3756, column: 12, scope: !10029)
!10032 = !DILocation(line: 3756, column: 5, scope: !10029)
!10033 = !DILocation(line: 3758, column: 9, scope: !10002)
!10034 = !DILocation(line: 3758, column: 7, scope: !10002)
!10035 = !DILocation(line: 3759, column: 7, scope: !10036)
!10036 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 3759, column: 7)
!10037 = !DILocation(line: 3759, column: 11, scope: !10036)
!10038 = !DILocation(line: 3759, column: 19, scope: !10036)
!10039 = !DILocation(line: 3759, column: 23, scope: !10036)
!10040 = !DILocation(line: 3759, column: 28, scope: !10036)
!10041 = !DILocation(line: 3759, column: 7, scope: !10002)
!10042 = !DILocation(line: 3760, column: 5, scope: !10036)
!10043 = !DILocation(line: 3762, column: 14, scope: !10002)
!10044 = !DILocation(line: 3763, column: 7, scope: !10045)
!10045 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 3763, column: 7)
!10046 = !DILocation(line: 3763, column: 22, scope: !10045)
!10047 = !DILocation(line: 3763, column: 7, scope: !10002)
!10048 = !DILocation(line: 3765, column: 23, scope: !10049)
!10049 = distinct !DILexicalBlock(scope: !10050, file: !3, line: 3765, column: 11)
!10050 = distinct !DILexicalBlock(scope: !10045, file: !3, line: 3764, column: 5)
!10051 = !DILocation(line: 3765, column: 11, scope: !10049)
!10052 = !DILocation(line: 3765, column: 11, scope: !10050)
!10053 = !DILocation(line: 3766, column: 39, scope: !10049)
!10054 = !DILocation(line: 3766, column: 45, scope: !10049)
!10055 = !DILocation(line: 3766, column: 50, scope: !10049)
!10056 = !DILocation(line: 3766, column: 8, scope: !10049)
!10057 = !DILocation(line: 3766, column: 6, scope: !10049)
!10058 = !DILocation(line: 3766, column: 2, scope: !10049)
!10059 = !DILocation(line: 3767, column: 18, scope: !10050)
!10060 = !DILocation(line: 3768, column: 5, scope: !10050)
!10061 = !DILocation(line: 3770, column: 7, scope: !10062)
!10062 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 3770, column: 7)
!10063 = !DILocation(line: 3770, column: 12, scope: !10062)
!10064 = !DILocation(line: 3770, column: 23, scope: !10062)
!10065 = !DILocation(line: 3771, column: 7, scope: !10062)
!10066 = !DILocation(line: 3771, column: 11, scope: !10062)
!10067 = !DILocation(line: 3771, column: 26, scope: !10062)
!10068 = !DILocation(line: 3772, column: 4, scope: !10062)
!10069 = !DILocation(line: 3772, column: 8, scope: !10062)
!10070 = !DILocation(line: 3772, column: 41, scope: !10062)
!10071 = !DILocation(line: 3772, column: 51, scope: !10062)
!10072 = !DILocation(line: 3773, column: 8, scope: !10062)
!10073 = !DILocation(line: 3773, column: 11, scope: !10062)
!10074 = !DILocation(line: 3773, column: 44, scope: !10062)
!10075 = !DILocation(line: 3773, column: 54, scope: !10062)
!10076 = !DILocation(line: 3770, column: 7, scope: !10002)
!10077 = !DILocation(line: 3775, column: 38, scope: !10078)
!10078 = distinct !DILexicalBlock(scope: !10062, file: !3, line: 3774, column: 5)
!10079 = !DILocation(line: 3775, column: 44, scope: !10078)
!10080 = !DILocation(line: 3775, column: 49, scope: !10078)
!10081 = !DILocation(line: 3775, column: 54, scope: !10078)
!10082 = !DILocation(line: 3776, column: 10, scope: !10078)
!10083 = !DILocation(line: 3776, column: 15, scope: !10078)
!10084 = !DILocation(line: 3776, column: 27, scope: !10078)
!10085 = !DILocation(line: 3775, column: 14, scope: !10078)
!10086 = !DILocation(line: 3775, column: 12, scope: !10078)
!10087 = !DILocation(line: 3777, column: 11, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10078, file: !3, line: 3777, column: 11)
!10089 = !DILocation(line: 3777, column: 11, scope: !10078)
!10090 = !DILocation(line: 3778, column: 9, scope: !10088)
!10091 = !DILocation(line: 3778, column: 2, scope: !10088)
!10092 = !DILocation(line: 3779, column: 5, scope: !10078)
!10093 = !DILocation(line: 3781, column: 7, scope: !10094)
!10094 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 3781, column: 7)
!10095 = !DILocation(line: 3781, column: 12, scope: !10094)
!10096 = !DILocation(line: 3781, column: 23, scope: !10094)
!10097 = !DILocation(line: 3781, column: 7, scope: !10002)
!10098 = !DILocation(line: 3782, column: 5, scope: !10094)
!10099 = !DILocation(line: 3783, column: 31, scope: !10002)
!10100 = !DILocation(line: 3783, column: 37, scope: !10002)
!10101 = !DILocation(line: 3783, column: 42, scope: !10002)
!10102 = !DILocation(line: 3783, column: 47, scope: !10002)
!10103 = !DILocation(line: 3784, column: 10, scope: !10002)
!10104 = !DILocation(line: 3784, column: 15, scope: !10002)
!10105 = !DILocation(line: 3784, column: 27, scope: !10002)
!10106 = !DILocation(line: 3783, column: 10, scope: !10002)
!10107 = !DILocation(line: 3783, column: 3, scope: !10002)
!10108 = !DILocation(line: 3785, column: 1, scope: !10002)
!10109 = distinct !DISubprogram(name: "expand_copysign_absneg", scope: !3, file: !3, line: 3544, type: !10110, scopeLine: 3546, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10110 = !DISubroutineType(types: !10111)
!10111 = !{!2732, !5, !2732, !2732, !2732, !2756, !2966}
!10112 = !DILocalVariable(name: "mode", arg: 1, scope: !10109, file: !3, line: 3544, type: !5)
!10113 = !DILocation(line: 3544, column: 43, scope: !10109)
!10114 = !DILocalVariable(name: "op0", arg: 2, scope: !10109, file: !3, line: 3544, type: !2732)
!10115 = !DILocation(line: 3544, column: 53, scope: !10109)
!10116 = !DILocalVariable(name: "op1", arg: 3, scope: !10109, file: !3, line: 3544, type: !2732)
!10117 = !DILocation(line: 3544, column: 62, scope: !10109)
!10118 = !DILocalVariable(name: "target", arg: 4, scope: !10109, file: !3, line: 3544, type: !2732)
!10119 = !DILocation(line: 3544, column: 71, scope: !10109)
!10120 = !DILocalVariable(name: "bitpos", arg: 5, scope: !10109, file: !3, line: 3545, type: !2756)
!10121 = !DILocation(line: 3545, column: 15, scope: !10109)
!10122 = !DILocalVariable(name: "op0_is_abs", arg: 6, scope: !10109, file: !3, line: 3545, type: !2966)
!10123 = !DILocation(line: 3545, column: 28, scope: !10109)
!10124 = !DILocalVariable(name: "imode", scope: !10109, file: !3, line: 3547, type: !5)
!10125 = !DILocation(line: 3547, column: 21, scope: !10109)
!10126 = !DILocalVariable(name: "icode", scope: !10109, file: !3, line: 3548, type: !2756)
!10127 = !DILocation(line: 3548, column: 7, scope: !10109)
!10128 = !DILocalVariable(name: "sign", scope: !10109, file: !3, line: 3549, type: !2732)
!10129 = !DILocation(line: 3549, column: 7, scope: !10109)
!10130 = !DILocalVariable(name: "label", scope: !10109, file: !3, line: 3549, type: !2732)
!10131 = !DILocation(line: 3549, column: 13, scope: !10109)
!10132 = !DILocation(line: 3551, column: 7, scope: !10133)
!10133 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 3551, column: 7)
!10134 = !DILocation(line: 3551, column: 17, scope: !10133)
!10135 = !DILocation(line: 3551, column: 14, scope: !10133)
!10136 = !DILocation(line: 3551, column: 7, scope: !10109)
!10137 = !DILocation(line: 3552, column: 12, scope: !10133)
!10138 = !DILocation(line: 3552, column: 5, scope: !10133)
!10139 = !DILocation(line: 3556, column: 48, scope: !10109)
!10140 = !DILocation(line: 3556, column: 17, scope: !10109)
!10141 = !DILocation(line: 3556, column: 54, scope: !10109)
!10142 = !DILocation(line: 3556, column: 9, scope: !10109)
!10143 = !DILocation(line: 3557, column: 7, scope: !10144)
!10144 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 3557, column: 7)
!10145 = !DILocation(line: 3557, column: 13, scope: !10144)
!10146 = !DILocation(line: 3557, column: 7, scope: !10109)
!10147 = !DILocation(line: 3559, column: 25, scope: !10148)
!10148 = distinct !DILexicalBlock(scope: !10144, file: !3, line: 3558, column: 5)
!10149 = !DILocation(line: 3559, column: 15, scope: !10148)
!10150 = !DILocation(line: 3559, column: 32, scope: !10148)
!10151 = !DILocation(line: 3559, column: 43, scope: !10148)
!10152 = !DILocation(line: 3559, column: 13, scope: !10148)
!10153 = !DILocation(line: 3560, column: 27, scope: !10148)
!10154 = !DILocation(line: 3560, column: 14, scope: !10148)
!10155 = !DILocation(line: 3560, column: 12, scope: !10148)
!10156 = !DILocation(line: 3561, column: 23, scope: !10148)
!10157 = !DILocation(line: 3561, column: 30, scope: !10148)
!10158 = !DILocation(line: 3561, column: 36, scope: !10148)
!10159 = !DILocation(line: 3561, column: 7, scope: !10148)
!10160 = !DILocation(line: 3562, column: 5, scope: !10148)
!10161 = !DILocalVariable(name: "hi", scope: !10162, file: !3, line: 3565, type: !2822)
!10162 = distinct !DILexicalBlock(scope: !10144, file: !3, line: 3564, column: 5)
!10163 = !DILocation(line: 3565, column: 21, scope: !10162)
!10164 = !DILocalVariable(name: "lo", scope: !10162, file: !3, line: 3565, type: !2822)
!10165 = !DILocation(line: 3565, column: 25, scope: !10162)
!10166 = !DILocation(line: 3567, column: 11, scope: !10167)
!10167 = distinct !DILexicalBlock(scope: !10162, file: !3, line: 3567, column: 11)
!10168 = !DILocation(line: 3567, column: 32, scope: !10167)
!10169 = !DILocation(line: 3567, column: 11, scope: !10162)
!10170 = !DILocation(line: 3569, column: 31, scope: !10171)
!10171 = distinct !DILexicalBlock(scope: !10167, file: !3, line: 3568, column: 2)
!10172 = !DILocation(line: 3569, column: 12, scope: !10171)
!10173 = !DILocation(line: 3569, column: 10, scope: !10171)
!10174 = !DILocation(line: 3570, column: 8, scope: !10175)
!10175 = distinct !DILexicalBlock(scope: !10171, file: !3, line: 3570, column: 8)
!10176 = !DILocation(line: 3570, column: 14, scope: !10175)
!10177 = !DILocation(line: 3570, column: 8, scope: !10171)
!10178 = !DILocation(line: 3571, column: 6, scope: !10175)
!10179 = !DILocation(line: 3572, column: 10, scope: !10171)
!10180 = !DILocation(line: 3572, column: 23, scope: !10171)
!10181 = !DILocation(line: 3572, column: 30, scope: !10171)
!10182 = !DILocation(line: 3572, column: 8, scope: !10171)
!10183 = !DILocation(line: 3573, column: 2, scope: !10171)
!10184 = !DILocalVariable(name: "word", scope: !10185, file: !3, line: 3576, type: !2756)
!10185 = distinct !DILexicalBlock(scope: !10167, file: !3, line: 3575, column: 2)
!10186 = !DILocation(line: 3576, column: 8, scope: !10185)
!10187 = !DILocation(line: 3578, column: 12, scope: !10185)
!10188 = !DILocation(line: 3578, column: 10, scope: !10185)
!10189 = !DILocation(line: 3582, column: 13, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10185, file: !3, line: 3579, column: 8)
!10191 = !DILocation(line: 3582, column: 20, scope: !10190)
!10192 = !DILocation(line: 3582, column: 11, scope: !10190)
!10193 = !DILocation(line: 3583, column: 13, scope: !10185)
!10194 = !DILocation(line: 3583, column: 20, scope: !10185)
!10195 = !DILocation(line: 3583, column: 11, scope: !10185)
!10196 = !DILocation(line: 3584, column: 33, scope: !10185)
!10197 = !DILocation(line: 3584, column: 38, scope: !10185)
!10198 = !DILocation(line: 3584, column: 44, scope: !10185)
!10199 = !DILocation(line: 3584, column: 10, scope: !10185)
!10200 = !DILocation(line: 3584, column: 8, scope: !10185)
!10201 = !DILocation(line: 3587, column: 11, scope: !10202)
!10202 = distinct !DILexicalBlock(scope: !10162, file: !3, line: 3587, column: 11)
!10203 = !DILocation(line: 3587, column: 18, scope: !10202)
!10204 = !DILocation(line: 3587, column: 11, scope: !10162)
!10205 = !DILocation(line: 3589, column: 7, scope: !10206)
!10206 = distinct !DILexicalBlock(scope: !10202, file: !3, line: 3588, column: 2)
!10207 = !DILocation(line: 3590, column: 30, scope: !10206)
!10208 = !DILocation(line: 3590, column: 27, scope: !10206)
!10209 = !DILocation(line: 3590, column: 7, scope: !10206)
!10210 = !DILocation(line: 3591, column: 2, scope: !10206)
!10211 = !DILocation(line: 3594, column: 31, scope: !10212)
!10212 = distinct !DILexicalBlock(scope: !10202, file: !3, line: 3593, column: 2)
!10213 = !DILocation(line: 3594, column: 38, scope: !10212)
!10214 = !DILocation(line: 3594, column: 27, scope: !10212)
!10215 = !DILocation(line: 3594, column: 7, scope: !10212)
!10216 = !DILocation(line: 3595, column: 7, scope: !10212)
!10217 = !DILocation(line: 3598, column: 27, scope: !10162)
!10218 = !DILocation(line: 3598, column: 14, scope: !10162)
!10219 = !DILocation(line: 3598, column: 12, scope: !10162)
!10220 = !DILocation(line: 3599, column: 28, scope: !10162)
!10221 = !DILocation(line: 3599, column: 46, scope: !10162)
!10222 = !DILocation(line: 3600, column: 27, scope: !10162)
!10223 = !DILocation(line: 3600, column: 31, scope: !10162)
!10224 = !DILocation(line: 3600, column: 35, scope: !10162)
!10225 = !DILocation(line: 3600, column: 7, scope: !10162)
!10226 = !DILocation(line: 3599, column: 14, scope: !10162)
!10227 = !DILocation(line: 3599, column: 12, scope: !10162)
!10228 = !DILocation(line: 3604, column: 8, scope: !10229)
!10229 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 3604, column: 7)
!10230 = !DILocation(line: 3604, column: 7, scope: !10109)
!10231 = !DILocation(line: 3606, column: 26, scope: !10232)
!10232 = distinct !DILexicalBlock(scope: !10229, file: !3, line: 3605, column: 5)
!10233 = !DILocation(line: 3606, column: 43, scope: !10232)
!10234 = !DILocation(line: 3606, column: 48, scope: !10232)
!10235 = !DILocation(line: 3606, column: 13, scope: !10232)
!10236 = !DILocation(line: 3606, column: 11, scope: !10232)
!10237 = !DILocation(line: 3607, column: 11, scope: !10238)
!10238 = distinct !DILexicalBlock(scope: !10232, file: !3, line: 3607, column: 11)
!10239 = !DILocation(line: 3607, column: 15, scope: !10238)
!10240 = !DILocation(line: 3607, column: 11, scope: !10232)
!10241 = !DILocation(line: 3608, column: 2, scope: !10238)
!10242 = !DILocation(line: 3609, column: 16, scope: !10232)
!10243 = !DILocation(line: 3609, column: 14, scope: !10232)
!10244 = !DILocation(line: 3610, column: 5, scope: !10232)
!10245 = !DILocation(line: 3613, column: 11, scope: !10246)
!10246 = distinct !DILexicalBlock(scope: !10247, file: !3, line: 3613, column: 11)
!10247 = distinct !DILexicalBlock(scope: !10229, file: !3, line: 3612, column: 5)
!10248 = !DILocation(line: 3613, column: 18, scope: !10246)
!10249 = !DILocation(line: 3613, column: 11, scope: !10247)
!10250 = !DILocation(line: 3614, column: 31, scope: !10246)
!10251 = !DILocation(line: 3614, column: 18, scope: !10246)
!10252 = !DILocation(line: 3614, column: 16, scope: !10246)
!10253 = !DILocation(line: 3614, column: 9, scope: !10246)
!10254 = !DILocation(line: 3616, column: 18, scope: !10246)
!10255 = !DILocation(line: 3616, column: 26, scope: !10246)
!10256 = !DILocation(line: 3616, column: 2, scope: !10246)
!10257 = !DILocation(line: 3619, column: 11, scope: !10109)
!10258 = !DILocation(line: 3619, column: 9, scope: !10109)
!10259 = !DILocation(line: 3620, column: 28, scope: !10109)
!10260 = !DILocation(line: 3620, column: 34, scope: !10109)
!10261 = !DILocation(line: 3620, column: 60, scope: !10109)
!10262 = !DILocation(line: 3620, column: 70, scope: !10109)
!10263 = !DILocation(line: 3620, column: 3, scope: !10109)
!10264 = !DILocation(line: 3622, column: 7, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 3622, column: 7)
!10266 = !DILocation(line: 3622, column: 22, scope: !10265)
!10267 = !DILocation(line: 3622, column: 7, scope: !10109)
!10268 = !DILocation(line: 3623, column: 42, scope: !10265)
!10269 = !DILocation(line: 3623, column: 48, scope: !10265)
!10270 = !DILocation(line: 3623, column: 53, scope: !10265)
!10271 = !DILocation(line: 3623, column: 11, scope: !10265)
!10272 = !DILocation(line: 3623, column: 9, scope: !10265)
!10273 = !DILocation(line: 3623, column: 5, scope: !10265)
!10274 = !DILocation(line: 3625, column: 24, scope: !10265)
!10275 = !DILocation(line: 3625, column: 41, scope: !10265)
!10276 = !DILocation(line: 3625, column: 46, scope: !10265)
!10277 = !DILocation(line: 3625, column: 11, scope: !10265)
!10278 = !DILocation(line: 3625, column: 9, scope: !10265)
!10279 = !DILocation(line: 3626, column: 7, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 3626, column: 7)
!10281 = !DILocation(line: 3626, column: 14, scope: !10280)
!10282 = !DILocation(line: 3626, column: 11, scope: !10280)
!10283 = !DILocation(line: 3626, column: 7, scope: !10109)
!10284 = !DILocation(line: 3627, column: 21, scope: !10280)
!10285 = !DILocation(line: 3627, column: 29, scope: !10280)
!10286 = !DILocation(line: 3627, column: 5, scope: !10280)
!10287 = !DILocation(line: 3629, column: 15, scope: !10109)
!10288 = !DILocation(line: 3629, column: 3, scope: !10109)
!10289 = !DILocation(line: 3631, column: 10, scope: !10109)
!10290 = !DILocation(line: 3631, column: 3, scope: !10109)
!10291 = !DILocation(line: 3632, column: 1, scope: !10109)
!10292 = distinct !DISubprogram(name: "expand_copysign_bit", scope: !3, file: !3, line: 3640, type: !10110, scopeLine: 3642, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10293 = !DILocalVariable(name: "mode", arg: 1, scope: !10292, file: !3, line: 3640, type: !5)
!10294 = !DILocation(line: 3640, column: 40, scope: !10292)
!10295 = !DILocalVariable(name: "op0", arg: 2, scope: !10292, file: !3, line: 3640, type: !2732)
!10296 = !DILocation(line: 3640, column: 50, scope: !10292)
!10297 = !DILocalVariable(name: "op1", arg: 3, scope: !10292, file: !3, line: 3640, type: !2732)
!10298 = !DILocation(line: 3640, column: 59, scope: !10292)
!10299 = !DILocalVariable(name: "target", arg: 4, scope: !10292, file: !3, line: 3640, type: !2732)
!10300 = !DILocation(line: 3640, column: 68, scope: !10292)
!10301 = !DILocalVariable(name: "bitpos", arg: 5, scope: !10292, file: !3, line: 3641, type: !2756)
!10302 = !DILocation(line: 3641, column: 12, scope: !10292)
!10303 = !DILocalVariable(name: "op0_is_abs", arg: 6, scope: !10292, file: !3, line: 3641, type: !2966)
!10304 = !DILocation(line: 3641, column: 25, scope: !10292)
!10305 = !DILocalVariable(name: "imode", scope: !10292, file: !3, line: 3643, type: !5)
!10306 = !DILocation(line: 3643, column: 21, scope: !10292)
!10307 = !DILocalVariable(name: "hi", scope: !10292, file: !3, line: 3644, type: !2822)
!10308 = !DILocation(line: 3644, column: 17, scope: !10292)
!10309 = !DILocalVariable(name: "lo", scope: !10292, file: !3, line: 3644, type: !2822)
!10310 = !DILocation(line: 3644, column: 21, scope: !10292)
!10311 = !DILocalVariable(name: "word", scope: !10292, file: !3, line: 3645, type: !2756)
!10312 = !DILocation(line: 3645, column: 7, scope: !10292)
!10313 = !DILocalVariable(name: "nwords", scope: !10292, file: !3, line: 3645, type: !2756)
!10314 = !DILocation(line: 3645, column: 13, scope: !10292)
!10315 = !DILocalVariable(name: "i", scope: !10292, file: !3, line: 3645, type: !2756)
!10316 = !DILocation(line: 3645, column: 21, scope: !10292)
!10317 = !DILocalVariable(name: "temp", scope: !10292, file: !3, line: 3646, type: !2732)
!10318 = !DILocation(line: 3646, column: 7, scope: !10292)
!10319 = !DILocalVariable(name: "insns", scope: !10292, file: !3, line: 3646, type: !2732)
!10320 = !DILocation(line: 3646, column: 13, scope: !10292)
!10321 = !DILocation(line: 3648, column: 7, scope: !10322)
!10322 = distinct !DILexicalBlock(scope: !10292, file: !3, line: 3648, column: 7)
!10323 = !DILocation(line: 3648, column: 28, scope: !10322)
!10324 = !DILocation(line: 3648, column: 7, scope: !10292)
!10325 = !DILocation(line: 3650, column: 34, scope: !10326)
!10326 = distinct !DILexicalBlock(scope: !10322, file: !3, line: 3649, column: 5)
!10327 = !DILocation(line: 3650, column: 15, scope: !10326)
!10328 = !DILocation(line: 3650, column: 13, scope: !10326)
!10329 = !DILocation(line: 3651, column: 11, scope: !10330)
!10330 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 3651, column: 11)
!10331 = !DILocation(line: 3651, column: 17, scope: !10330)
!10332 = !DILocation(line: 3651, column: 11, scope: !10326)
!10333 = !DILocation(line: 3652, column: 2, scope: !10330)
!10334 = !DILocation(line: 3653, column: 12, scope: !10326)
!10335 = !DILocation(line: 3654, column: 14, scope: !10326)
!10336 = !DILocation(line: 3655, column: 5, scope: !10326)
!10337 = !DILocation(line: 3658, column: 15, scope: !10338)
!10338 = distinct !DILexicalBlock(scope: !10322, file: !3, line: 3657, column: 5)
!10339 = !DILocation(line: 3658, column: 13, scope: !10338)
!10340 = !DILocation(line: 3663, column: 9, scope: !10341)
!10341 = distinct !DILexicalBlock(scope: !10338, file: !3, line: 3660, column: 11)
!10342 = !DILocation(line: 3663, column: 16, scope: !10341)
!10343 = !DILocation(line: 3663, column: 7, scope: !10341)
!10344 = !DILocation(line: 3664, column: 16, scope: !10338)
!10345 = !DILocation(line: 3664, column: 23, scope: !10338)
!10346 = !DILocation(line: 3664, column: 14, scope: !10338)
!10347 = !DILocation(line: 3665, column: 17, scope: !10338)
!10348 = !DILocation(line: 3665, column: 41, scope: !10338)
!10349 = !DILocation(line: 3665, column: 57, scope: !10338)
!10350 = !DILocation(line: 3665, column: 62, scope: !10338)
!10351 = !DILocation(line: 3665, column: 14, scope: !10338)
!10352 = !DILocation(line: 3668, column: 7, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10292, file: !3, line: 3668, column: 7)
!10354 = !DILocation(line: 3668, column: 14, scope: !10353)
!10355 = !DILocation(line: 3668, column: 7, scope: !10292)
!10356 = !DILocation(line: 3670, column: 10, scope: !10357)
!10357 = distinct !DILexicalBlock(scope: !10353, file: !3, line: 3669, column: 5)
!10358 = !DILocation(line: 3671, column: 33, scope: !10357)
!10359 = !DILocation(line: 3671, column: 30, scope: !10357)
!10360 = !DILocation(line: 3671, column: 10, scope: !10357)
!10361 = !DILocation(line: 3672, column: 5, scope: !10357)
!10362 = !DILocation(line: 3675, column: 34, scope: !10363)
!10363 = distinct !DILexicalBlock(scope: !10353, file: !3, line: 3674, column: 5)
!10364 = !DILocation(line: 3675, column: 41, scope: !10363)
!10365 = !DILocation(line: 3675, column: 30, scope: !10363)
!10366 = !DILocation(line: 3675, column: 10, scope: !10363)
!10367 = !DILocation(line: 3676, column: 10, scope: !10363)
!10368 = !DILocation(line: 3679, column: 7, scope: !10369)
!10369 = distinct !DILexicalBlock(scope: !10292, file: !3, line: 3679, column: 7)
!10370 = !DILocation(line: 3679, column: 14, scope: !10369)
!10371 = !DILocation(line: 3679, column: 19, scope: !10369)
!10372 = !DILocation(line: 3679, column: 22, scope: !10369)
!10373 = !DILocation(line: 3679, column: 32, scope: !10369)
!10374 = !DILocation(line: 3679, column: 29, scope: !10369)
!10375 = !DILocation(line: 3679, column: 36, scope: !10369)
!10376 = !DILocation(line: 3679, column: 39, scope: !10369)
!10377 = !DILocation(line: 3679, column: 49, scope: !10369)
!10378 = !DILocation(line: 3679, column: 46, scope: !10369)
!10379 = !DILocation(line: 3679, column: 7, scope: !10292)
!10380 = !DILocation(line: 3680, column: 27, scope: !10369)
!10381 = !DILocation(line: 3680, column: 14, scope: !10369)
!10382 = !DILocation(line: 3680, column: 12, scope: !10369)
!10383 = !DILocation(line: 3680, column: 5, scope: !10369)
!10384 = !DILocation(line: 3682, column: 7, scope: !10385)
!10385 = distinct !DILexicalBlock(scope: !10292, file: !3, line: 3682, column: 7)
!10386 = !DILocation(line: 3682, column: 14, scope: !10385)
!10387 = !DILocation(line: 3682, column: 7, scope: !10292)
!10388 = !DILocation(line: 3684, column: 7, scope: !10389)
!10389 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3683, column: 5)
!10390 = !DILocation(line: 3686, column: 14, scope: !10391)
!10391 = distinct !DILexicalBlock(scope: !10389, file: !3, line: 3686, column: 7)
!10392 = !DILocation(line: 3686, column: 12, scope: !10391)
!10393 = !DILocation(line: 3686, column: 19, scope: !10394)
!10394 = distinct !DILexicalBlock(scope: !10391, file: !3, line: 3686, column: 7)
!10395 = !DILocation(line: 3686, column: 23, scope: !10394)
!10396 = !DILocation(line: 3686, column: 21, scope: !10394)
!10397 = !DILocation(line: 3686, column: 7, scope: !10391)
!10398 = !DILocalVariable(name: "targ_piece", scope: !10399, file: !3, line: 3688, type: !2732)
!10399 = distinct !DILexicalBlock(scope: !10394, file: !3, line: 3687, column: 2)
!10400 = !DILocation(line: 3688, column: 8, scope: !10399)
!10401 = !DILocation(line: 3688, column: 38, scope: !10399)
!10402 = !DILocation(line: 3688, column: 46, scope: !10399)
!10403 = !DILocation(line: 3688, column: 52, scope: !10399)
!10404 = !DILocation(line: 3688, column: 21, scope: !10399)
!10405 = !DILocalVariable(name: "op0_piece", scope: !10399, file: !3, line: 3689, type: !2732)
!10406 = !DILocation(line: 3689, column: 8, scope: !10399)
!10407 = !DILocation(line: 3689, column: 43, scope: !10399)
!10408 = !DILocation(line: 3689, column: 48, scope: !10399)
!10409 = !DILocation(line: 3689, column: 51, scope: !10399)
!10410 = !DILocation(line: 3689, column: 20, scope: !10399)
!10411 = !DILocation(line: 3691, column: 8, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !10399, file: !3, line: 3691, column: 8)
!10413 = !DILocation(line: 3691, column: 13, scope: !10412)
!10414 = !DILocation(line: 3691, column: 10, scope: !10412)
!10415 = !DILocation(line: 3691, column: 8, scope: !10399)
!10416 = !DILocation(line: 3693, column: 13, scope: !10417)
!10417 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 3693, column: 12)
!10418 = distinct !DILexicalBlock(scope: !10412, file: !3, line: 3692, column: 6)
!10419 = !DILocation(line: 3693, column: 12, scope: !10418)
!10420 = !DILocation(line: 3694, column: 29, scope: !10417)
!10421 = !DILocation(line: 3694, column: 47, scope: !10417)
!10422 = !DILocation(line: 3695, column: 29, scope: !10417)
!10423 = !DILocation(line: 3695, column: 28, scope: !10417)
!10424 = !DILocation(line: 3695, column: 34, scope: !10417)
!10425 = !DILocation(line: 3695, column: 33, scope: !10417)
!10426 = !DILocation(line: 3695, column: 38, scope: !10417)
!10427 = !DILocation(line: 3695, column: 8, scope: !10417)
!10428 = !DILocation(line: 3694, column: 15, scope: !10417)
!10429 = !DILocation(line: 3694, column: 13, scope: !10417)
!10430 = !DILocation(line: 3694, column: 3, scope: !10417)
!10431 = !DILocation(line: 3698, column: 28, scope: !10418)
!10432 = !DILocation(line: 3699, column: 30, scope: !10418)
!10433 = !DILocation(line: 3699, column: 35, scope: !10418)
!10434 = !DILocation(line: 3699, column: 38, scope: !10418)
!10435 = !DILocation(line: 3699, column: 7, scope: !10418)
!10436 = !DILocation(line: 3700, column: 27, scope: !10418)
!10437 = !DILocation(line: 3700, column: 31, scope: !10418)
!10438 = !DILocation(line: 3700, column: 35, scope: !10418)
!10439 = !DILocation(line: 3700, column: 7, scope: !10418)
!10440 = !DILocation(line: 3698, column: 14, scope: !10418)
!10441 = !DILocation(line: 3698, column: 12, scope: !10418)
!10442 = !DILocation(line: 3703, column: 29, scope: !10418)
!10443 = !DILocation(line: 3703, column: 47, scope: !10418)
!10444 = !DILocation(line: 3703, column: 58, scope: !10418)
!10445 = !DILocation(line: 3704, column: 8, scope: !10418)
!10446 = !DILocation(line: 3703, column: 15, scope: !10418)
!10447 = !DILocation(line: 3703, column: 13, scope: !10418)
!10448 = !DILocation(line: 3705, column: 12, scope: !10449)
!10449 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 3705, column: 12)
!10450 = !DILocation(line: 3705, column: 20, scope: !10449)
!10451 = !DILocation(line: 3705, column: 17, scope: !10449)
!10452 = !DILocation(line: 3705, column: 12, scope: !10418)
!10453 = !DILocation(line: 3706, column: 19, scope: !10449)
!10454 = !DILocation(line: 3706, column: 31, scope: !10449)
!10455 = !DILocation(line: 3706, column: 3, scope: !10449)
!10456 = !DILocation(line: 3707, column: 6, scope: !10418)
!10457 = !DILocation(line: 3709, column: 22, scope: !10412)
!10458 = !DILocation(line: 3709, column: 34, scope: !10412)
!10459 = !DILocation(line: 3709, column: 6, scope: !10412)
!10460 = !DILocation(line: 3710, column: 2, scope: !10399)
!10461 = !DILocation(line: 3686, column: 31, scope: !10394)
!10462 = !DILocation(line: 3686, column: 7, scope: !10394)
!10463 = distinct !{!10463, !10397, !10464}
!10464 = !DILocation(line: 3710, column: 2, scope: !10391)
!10465 = !DILocation(line: 3712, column: 15, scope: !10389)
!10466 = !DILocation(line: 3712, column: 13, scope: !10389)
!10467 = !DILocation(line: 3713, column: 7, scope: !10389)
!10468 = !DILocation(line: 3715, column: 18, scope: !10389)
!10469 = !DILocation(line: 3715, column: 7, scope: !10389)
!10470 = !DILocation(line: 3716, column: 5, scope: !10389)
!10471 = !DILocation(line: 3719, column: 27, scope: !10472)
!10472 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3718, column: 5)
!10473 = !DILocation(line: 3719, column: 45, scope: !10472)
!10474 = !DILocation(line: 3719, column: 58, scope: !10472)
!10475 = !DILocation(line: 3719, column: 65, scope: !10472)
!10476 = !DILocation(line: 3720, column: 33, scope: !10472)
!10477 = !DILocation(line: 3720, column: 37, scope: !10472)
!10478 = !DILocation(line: 3720, column: 41, scope: !10472)
!10479 = !DILocation(line: 3720, column: 13, scope: !10472)
!10480 = !DILocation(line: 3719, column: 13, scope: !10472)
!10481 = !DILocation(line: 3719, column: 11, scope: !10472)
!10482 = !DILocation(line: 3723, column: 13, scope: !10472)
!10483 = !DILocation(line: 3723, column: 26, scope: !10472)
!10484 = !DILocation(line: 3723, column: 33, scope: !10472)
!10485 = !DILocation(line: 3723, column: 11, scope: !10472)
!10486 = !DILocation(line: 3724, column: 12, scope: !10487)
!10487 = distinct !DILexicalBlock(scope: !10472, file: !3, line: 3724, column: 11)
!10488 = !DILocation(line: 3724, column: 11, scope: !10472)
!10489 = !DILocation(line: 3725, column: 22, scope: !10487)
!10490 = !DILocation(line: 3725, column: 40, scope: !10487)
!10491 = !DILocation(line: 3726, column: 29, scope: !10487)
!10492 = !DILocation(line: 3726, column: 28, scope: !10487)
!10493 = !DILocation(line: 3726, column: 34, scope: !10487)
!10494 = !DILocation(line: 3726, column: 33, scope: !10487)
!10495 = !DILocation(line: 3726, column: 38, scope: !10487)
!10496 = !DILocation(line: 3726, column: 8, scope: !10487)
!10497 = !DILocation(line: 3725, column: 8, scope: !10487)
!10498 = !DILocation(line: 3725, column: 6, scope: !10487)
!10499 = !DILocation(line: 3725, column: 2, scope: !10487)
!10500 = !DILocation(line: 3729, column: 28, scope: !10472)
!10501 = !DILocation(line: 3729, column: 46, scope: !10472)
!10502 = !DILocation(line: 3729, column: 51, scope: !10472)
!10503 = !DILocation(line: 3730, column: 7, scope: !10472)
!10504 = !DILocation(line: 3730, column: 20, scope: !10472)
!10505 = !DILocation(line: 3730, column: 27, scope: !10472)
!10506 = !DILocation(line: 3729, column: 14, scope: !10472)
!10507 = !DILocation(line: 3729, column: 12, scope: !10472)
!10508 = !DILocation(line: 3731, column: 43, scope: !10472)
!10509 = !DILocation(line: 3731, column: 49, scope: !10472)
!10510 = !DILocation(line: 3731, column: 55, scope: !10472)
!10511 = !DILocation(line: 3731, column: 16, scope: !10472)
!10512 = !DILocation(line: 3731, column: 14, scope: !10472)
!10513 = !DILocation(line: 3734, column: 10, scope: !10292)
!10514 = !DILocation(line: 3734, column: 3, scope: !10292)
!10515 = !DILocation(line: 3735, column: 1, scope: !10292)
!10516 = distinct !DISubprogram(name: "maybe_emit_unop_insn", scope: !3, file: !3, line: 3796, type: !10517, scopeLine: 3797, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10517 = !DISubroutineType(types: !10518)
!10518 = !{!2966, !2756, !2732, !2732, !384}
!10519 = !DILocalVariable(name: "icode", arg: 1, scope: !10516, file: !3, line: 3796, type: !2756)
!10520 = !DILocation(line: 3796, column: 27, scope: !10516)
!10521 = !DILocalVariable(name: "target", arg: 2, scope: !10516, file: !3, line: 3796, type: !2732)
!10522 = !DILocation(line: 3796, column: 38, scope: !10516)
!10523 = !DILocalVariable(name: "op0", arg: 3, scope: !10516, file: !3, line: 3796, type: !2732)
!10524 = !DILocation(line: 3796, column: 50, scope: !10516)
!10525 = !DILocalVariable(name: "code", arg: 4, scope: !10516, file: !3, line: 3796, type: !384)
!10526 = !DILocation(line: 3796, column: 69, scope: !10516)
!10527 = !DILocalVariable(name: "temp", scope: !10516, file: !3, line: 3798, type: !2732)
!10528 = !DILocation(line: 3798, column: 7, scope: !10516)
!10529 = !DILocalVariable(name: "mode0", scope: !10516, file: !3, line: 3799, type: !5)
!10530 = !DILocation(line: 3799, column: 21, scope: !10516)
!10531 = !DILocation(line: 3799, column: 39, scope: !10516)
!10532 = !DILocation(line: 3799, column: 29, scope: !10516)
!10533 = !DILocation(line: 3799, column: 46, scope: !10516)
!10534 = !DILocation(line: 3799, column: 57, scope: !10516)
!10535 = !DILocalVariable(name: "pat", scope: !10516, file: !3, line: 3800, type: !2732)
!10536 = !DILocation(line: 3800, column: 7, scope: !10516)
!10537 = !DILocalVariable(name: "last", scope: !10516, file: !3, line: 3801, type: !2732)
!10538 = !DILocation(line: 3801, column: 7, scope: !10516)
!10539 = !DILocation(line: 3801, column: 14, scope: !10516)
!10540 = !DILocation(line: 3803, column: 10, scope: !10516)
!10541 = !DILocation(line: 3803, column: 8, scope: !10516)
!10542 = !DILocation(line: 3807, column: 18, scope: !10543)
!10543 = distinct !DILexicalBlock(scope: !10516, file: !3, line: 3807, column: 7)
!10544 = !DILocation(line: 3807, column: 8, scope: !10543)
!10545 = !DILocation(line: 3807, column: 25, scope: !10543)
!10546 = !DILocation(line: 3807, column: 36, scope: !10543)
!10547 = !DILocation(line: 3807, column: 47, scope: !10543)
!10548 = !DILocation(line: 3807, column: 52, scope: !10543)
!10549 = !DILocation(line: 3807, column: 7, scope: !10516)
!10550 = !DILocation(line: 3808, column: 29, scope: !10543)
!10551 = !DILocation(line: 3808, column: 36, scope: !10543)
!10552 = !DILocation(line: 3808, column: 11, scope: !10543)
!10553 = !DILocation(line: 3808, column: 9, scope: !10543)
!10554 = !DILocation(line: 3808, column: 5, scope: !10543)
!10555 = !DILocation(line: 3810, column: 18, scope: !10556)
!10556 = distinct !DILexicalBlock(scope: !10516, file: !3, line: 3810, column: 7)
!10557 = !DILocation(line: 3810, column: 8, scope: !10556)
!10558 = !DILocation(line: 3810, column: 25, scope: !10556)
!10559 = !DILocation(line: 3810, column: 36, scope: !10556)
!10560 = !DILocation(line: 3810, column: 47, scope: !10556)
!10561 = !DILocation(line: 3810, column: 53, scope: !10556)
!10562 = !DILocation(line: 3810, column: 7, scope: !10516)
!10563 = !DILocation(line: 3811, column: 25, scope: !10556)
!10564 = !DILocation(line: 3811, column: 12, scope: !10556)
!10565 = !DILocation(line: 3811, column: 10, scope: !10556)
!10566 = !DILocation(line: 3811, column: 5, scope: !10556)
!10567 = !DILocation(line: 3813, column: 9, scope: !10516)
!10568 = !DILocation(line: 3813, column: 26, scope: !10516)
!10569 = !DILocation(line: 3813, column: 32, scope: !10516)
!10570 = !DILocation(line: 3813, column: 7, scope: !10516)
!10571 = !DILocation(line: 3814, column: 8, scope: !10572)
!10572 = distinct !DILexicalBlock(scope: !10516, file: !3, line: 3814, column: 7)
!10573 = !DILocation(line: 3814, column: 7, scope: !10516)
!10574 = !DILocation(line: 3816, column: 27, scope: !10575)
!10575 = distinct !DILexicalBlock(scope: !10572, file: !3, line: 3815, column: 5)
!10576 = !DILocation(line: 3816, column: 7, scope: !10575)
!10577 = !DILocation(line: 3817, column: 7, scope: !10575)
!10578 = !DILocation(line: 3820, column: 7, scope: !10579)
!10579 = distinct !DILexicalBlock(scope: !10516, file: !3, line: 3820, column: 7)
!10580 = !DILocation(line: 3820, column: 20, scope: !10579)
!10581 = !DILocation(line: 3820, column: 23, scope: !10579)
!10582 = !DILocation(line: 3820, column: 39, scope: !10579)
!10583 = !DILocation(line: 3820, column: 51, scope: !10579)
!10584 = !DILocation(line: 3820, column: 54, scope: !10579)
!10585 = !DILocation(line: 3820, column: 59, scope: !10579)
!10586 = !DILocation(line: 3820, column: 7, scope: !10516)
!10587 = !DILocation(line: 3821, column: 21, scope: !10579)
!10588 = !DILocation(line: 3821, column: 26, scope: !10579)
!10589 = !DILocation(line: 3821, column: 32, scope: !10579)
!10590 = !DILocation(line: 3821, column: 38, scope: !10579)
!10591 = !DILocation(line: 3821, column: 5, scope: !10579)
!10592 = !DILocation(line: 3823, column: 14, scope: !10516)
!10593 = !DILocation(line: 3823, column: 3, scope: !10516)
!10594 = !DILocation(line: 3825, column: 7, scope: !10595)
!10595 = distinct !DILexicalBlock(scope: !10516, file: !3, line: 3825, column: 7)
!10596 = !DILocation(line: 3825, column: 15, scope: !10595)
!10597 = !DILocation(line: 3825, column: 12, scope: !10595)
!10598 = !DILocation(line: 3825, column: 7, scope: !10516)
!10599 = !DILocation(line: 3826, column: 21, scope: !10595)
!10600 = !DILocation(line: 3826, column: 29, scope: !10595)
!10601 = !DILocation(line: 3826, column: 5, scope: !10595)
!10602 = !DILocation(line: 3827, column: 3, scope: !10516)
!10603 = !DILocation(line: 3828, column: 1, scope: !10516)
!10604 = distinct !DISubprogram(name: "add_equal_note", scope: !3, file: !3, line: 220, type: !10605, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10605 = !DISubroutineType(types: !10606)
!10606 = !{!2756, !2732, !2732, !384, !2732, !2732}
!10607 = !DILocalVariable(name: "insns", arg: 1, scope: !10604, file: !3, line: 220, type: !2732)
!10608 = !DILocation(line: 220, column: 21, scope: !10604)
!10609 = !DILocalVariable(name: "target", arg: 2, scope: !10604, file: !3, line: 220, type: !2732)
!10610 = !DILocation(line: 220, column: 32, scope: !10604)
!10611 = !DILocalVariable(name: "code", arg: 3, scope: !10604, file: !3, line: 220, type: !384)
!10612 = !DILocation(line: 220, column: 54, scope: !10604)
!10613 = !DILocalVariable(name: "op0", arg: 4, scope: !10604, file: !3, line: 220, type: !2732)
!10614 = !DILocation(line: 220, column: 64, scope: !10604)
!10615 = !DILocalVariable(name: "op1", arg: 5, scope: !10604, file: !3, line: 220, type: !2732)
!10616 = !DILocation(line: 220, column: 73, scope: !10604)
!10617 = !DILocalVariable(name: "last_insn", scope: !10604, file: !3, line: 222, type: !2732)
!10618 = !DILocation(line: 222, column: 7, scope: !10604)
!10619 = !DILocalVariable(name: "insn", scope: !10604, file: !3, line: 222, type: !2732)
!10620 = !DILocation(line: 222, column: 18, scope: !10604)
!10621 = !DILocalVariable(name: "set", scope: !10604, file: !3, line: 222, type: !2732)
!10622 = !DILocation(line: 222, column: 24, scope: !10604)
!10623 = !DILocalVariable(name: "note", scope: !10604, file: !3, line: 223, type: !2732)
!10624 = !DILocation(line: 223, column: 7, scope: !10604)
!10625 = !DILocation(line: 225, column: 3, scope: !10604)
!10626 = !DILocation(line: 227, column: 7, scope: !10627)
!10627 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 227, column: 7)
!10628 = !DILocation(line: 227, column: 28, scope: !10627)
!10629 = !DILocation(line: 228, column: 7, scope: !10627)
!10630 = !DILocation(line: 228, column: 10, scope: !10627)
!10631 = !DILocation(line: 228, column: 31, scope: !10627)
!10632 = !DILocation(line: 229, column: 7, scope: !10627)
!10633 = !DILocation(line: 229, column: 10, scope: !10627)
!10634 = !DILocation(line: 229, column: 31, scope: !10627)
!10635 = !DILocation(line: 230, column: 7, scope: !10627)
!10636 = !DILocation(line: 230, column: 10, scope: !10627)
!10637 = !DILocation(line: 230, column: 31, scope: !10627)
!10638 = !DILocation(line: 231, column: 7, scope: !10627)
!10639 = !DILocation(line: 231, column: 10, scope: !10627)
!10640 = !DILocation(line: 231, column: 31, scope: !10627)
!10641 = !DILocation(line: 227, column: 7, scope: !10604)
!10642 = !DILocation(line: 232, column: 5, scope: !10627)
!10643 = !DILocation(line: 234, column: 7, scope: !10644)
!10644 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 234, column: 7)
!10645 = !DILocation(line: 234, column: 25, scope: !10644)
!10646 = !DILocation(line: 234, column: 7, scope: !10604)
!10647 = !DILocation(line: 235, column: 5, scope: !10644)
!10648 = !DILocation(line: 237, column: 20, scope: !10649)
!10649 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 237, column: 3)
!10650 = !DILocation(line: 237, column: 18, scope: !10649)
!10651 = !DILocation(line: 237, column: 8, scope: !10649)
!10652 = !DILocation(line: 238, column: 8, scope: !10653)
!10653 = distinct !DILexicalBlock(scope: !10649, file: !3, line: 237, column: 3)
!10654 = !DILocation(line: 238, column: 30, scope: !10653)
!10655 = !DILocation(line: 237, column: 3, scope: !10649)
!10656 = !DILocation(line: 239, column: 20, scope: !10653)
!10657 = !DILocation(line: 239, column: 18, scope: !10653)
!10658 = !DILocation(line: 237, column: 3, scope: !10653)
!10659 = distinct !{!10659, !10655, !10660}
!10660 = !DILocation(line: 240, column: 5, scope: !10649)
!10661 = !DILocation(line: 242, column: 9, scope: !10604)
!10662 = !DILocation(line: 242, column: 7, scope: !10604)
!10663 = !DILocation(line: 243, column: 7, scope: !10664)
!10664 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 243, column: 7)
!10665 = !DILocation(line: 243, column: 11, scope: !10664)
!10666 = !DILocation(line: 243, column: 7, scope: !10604)
!10667 = !DILocation(line: 244, column: 5, scope: !10664)
!10668 = !DILocation(line: 246, column: 22, scope: !10669)
!10669 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 246, column: 7)
!10670 = !DILocation(line: 246, column: 38, scope: !10669)
!10671 = !DILocation(line: 246, column: 9, scope: !10669)
!10672 = !DILocation(line: 248, column: 7, scope: !10669)
!10673 = !DILocation(line: 248, column: 11, scope: !10669)
!10674 = !DILocation(line: 248, column: 37, scope: !10669)
!10675 = !DILocation(line: 249, column: 4, scope: !10669)
!10676 = !DILocation(line: 249, column: 22, scope: !10669)
!10677 = !DILocation(line: 249, column: 48, scope: !10669)
!10678 = !DILocation(line: 249, column: 9, scope: !10669)
!10679 = !DILocation(line: 246, column: 7, scope: !10604)
!10680 = !DILocation(line: 250, column: 5, scope: !10669)
!10681 = !DILocation(line: 254, column: 32, scope: !10682)
!10682 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 254, column: 7)
!10683 = !DILocation(line: 254, column: 40, scope: !10682)
!10684 = !DILocation(line: 254, column: 7, scope: !10682)
!10685 = !DILocation(line: 255, column: 7, scope: !10682)
!10686 = !DILocation(line: 255, column: 11, scope: !10682)
!10687 = !DILocation(line: 255, column: 15, scope: !10682)
!10688 = !DILocation(line: 255, column: 43, scope: !10682)
!10689 = !DILocation(line: 255, column: 51, scope: !10682)
!10690 = !DILocation(line: 255, column: 18, scope: !10682)
!10691 = !DILocation(line: 254, column: 7, scope: !10604)
!10692 = !DILocation(line: 257, column: 14, scope: !10693)
!10693 = distinct !DILexicalBlock(scope: !10682, file: !3, line: 256, column: 5)
!10694 = !DILocation(line: 257, column: 12, scope: !10693)
!10695 = !DILocation(line: 258, column: 7, scope: !10693)
!10696 = !DILocation(line: 258, column: 14, scope: !10693)
!10697 = !DILocation(line: 258, column: 19, scope: !10693)
!10698 = !DILocation(line: 260, column: 19, scope: !10699)
!10699 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 260, column: 8)
!10700 = distinct !DILexicalBlock(scope: !10693, file: !3, line: 259, column: 2)
!10701 = !DILocation(line: 260, column: 27, scope: !10699)
!10702 = !DILocation(line: 260, column: 8, scope: !10699)
!10703 = !DILocation(line: 260, column: 8, scope: !10700)
!10704 = !DILocation(line: 261, column: 6, scope: !10699)
!10705 = !DILocation(line: 263, column: 11, scope: !10700)
!10706 = !DILocation(line: 263, column: 9, scope: !10700)
!10707 = distinct !{!10707, !10695, !10708}
!10708 = !DILocation(line: 264, column: 2, scope: !10693)
!10709 = !DILocation(line: 265, column: 5, scope: !10693)
!10710 = !DILocation(line: 267, column: 7, scope: !10711)
!10711 = distinct !DILexicalBlock(scope: !10604, file: !3, line: 267, column: 7)
!10712 = !DILocation(line: 267, column: 28, scope: !10711)
!10713 = !DILocation(line: 267, column: 7, scope: !10604)
!10714 = !DILocation(line: 268, column: 12, scope: !10711)
!10715 = !DILocation(line: 268, column: 10, scope: !10711)
!10716 = !DILocation(line: 268, column: 5, scope: !10711)
!10717 = !DILocation(line: 270, column: 12, scope: !10711)
!10718 = !DILocation(line: 270, column: 10, scope: !10711)
!10719 = !DILocation(line: 272, column: 24, scope: !10604)
!10720 = !DILocation(line: 272, column: 46, scope: !10604)
!10721 = !DILocation(line: 272, column: 3, scope: !10604)
!10722 = !DILocation(line: 274, column: 3, scope: !10604)
!10723 = !DILocation(line: 275, column: 1, scope: !10604)
!10724 = distinct !DISubprogram(name: "emit_unop_insn", scope: !3, file: !3, line: 3836, type: !10725, scopeLine: 3837, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10725 = !DISubroutineType(types: !10726)
!10726 = !{null, !2756, !2732, !2732, !384}
!10727 = !DILocalVariable(name: "icode", arg: 1, scope: !10724, file: !3, line: 3836, type: !2756)
!10728 = !DILocation(line: 3836, column: 21, scope: !10724)
!10729 = !DILocalVariable(name: "target", arg: 2, scope: !10724, file: !3, line: 3836, type: !2732)
!10730 = !DILocation(line: 3836, column: 32, scope: !10724)
!10731 = !DILocalVariable(name: "op0", arg: 3, scope: !10724, file: !3, line: 3836, type: !2732)
!10732 = !DILocation(line: 3836, column: 44, scope: !10724)
!10733 = !DILocalVariable(name: "code", arg: 4, scope: !10724, file: !3, line: 3836, type: !384)
!10734 = !DILocation(line: 3836, column: 63, scope: !10724)
!10735 = !DILocalVariable(name: "ok", scope: !10724, file: !3, line: 3838, type: !2966)
!10736 = !DILocation(line: 3838, column: 8, scope: !10724)
!10737 = !DILocation(line: 3838, column: 35, scope: !10724)
!10738 = !DILocation(line: 3838, column: 42, scope: !10724)
!10739 = !DILocation(line: 3838, column: 50, scope: !10724)
!10740 = !DILocation(line: 3838, column: 55, scope: !10724)
!10741 = !DILocation(line: 3838, column: 13, scope: !10724)
!10742 = !DILocation(line: 3839, column: 3, scope: !10724)
!10743 = !DILocation(line: 3840, column: 1, scope: !10724)
!10744 = distinct !DISubprogram(name: "no_conflict_move_test", scope: !3, file: !3, line: 3852, type: !10745, scopeLine: 3853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10745 = !DISubroutineType(types: !10746)
!10746 = !{null, !2732, !9920, !2843}
!10747 = !DILocalVariable(name: "dest", arg: 1, scope: !10744, file: !3, line: 3852, type: !2732)
!10748 = !DILocation(line: 3852, column: 28, scope: !10744)
!10749 = !DILocalVariable(name: "set", arg: 2, scope: !10744, file: !3, line: 3852, type: !9920)
!10750 = !DILocation(line: 3852, column: 44, scope: !10744)
!10751 = !DILocalVariable(name: "p0", arg: 3, scope: !10744, file: !3, line: 3852, type: !2843)
!10752 = !DILocation(line: 3852, column: 55, scope: !10744)
!10753 = !DILocalVariable(name: "p", scope: !10744, file: !3, line: 3854, type: !3874)
!10754 = !DILocation(line: 3854, column: 28, scope: !10744)
!10755 = !DILocation(line: 3854, column: 59, scope: !10744)
!10756 = !DILocation(line: 3854, column: 31, scope: !10744)
!10757 = !DILocation(line: 3857, column: 32, scope: !10758)
!10758 = distinct !DILexicalBlock(scope: !10744, file: !3, line: 3857, column: 7)
!10759 = !DILocation(line: 3857, column: 35, scope: !10758)
!10760 = !DILocation(line: 3857, column: 43, scope: !10758)
!10761 = !DILocation(line: 3857, column: 7, scope: !10758)
!10762 = !DILocation(line: 3857, column: 7, scope: !10744)
!10763 = !DILocation(line: 3858, column: 5, scope: !10758)
!10764 = !DILocation(line: 3858, column: 8, scope: !10758)
!10765 = !DILocation(line: 3858, column: 18, scope: !10758)
!10766 = !DILocation(line: 3861, column: 12, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10758, file: !3, line: 3861, column: 12)
!10768 = !DILocation(line: 3861, column: 15, scope: !10767)
!10769 = !DILocation(line: 3861, column: 23, scope: !10767)
!10770 = !DILocation(line: 3861, column: 26, scope: !10767)
!10771 = !DILocation(line: 3861, column: 20, scope: !10767)
!10772 = !DILocation(line: 3861, column: 12, scope: !10758)
!10773 = !DILocation(line: 3862, column: 5, scope: !10767)
!10774 = !DILocation(line: 3865, column: 37, scope: !10775)
!10775 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 3865, column: 12)
!10776 = !DILocation(line: 3865, column: 43, scope: !10775)
!10777 = !DILocation(line: 3865, column: 12, scope: !10775)
!10778 = !DILocation(line: 3866, column: 5, scope: !10775)
!10779 = !DILocation(line: 3866, column: 9, scope: !10775)
!10780 = !DILocation(line: 3866, column: 27, scope: !10775)
!10781 = !DILocation(line: 3866, column: 48, scope: !10775)
!10782 = !DILocation(line: 3866, column: 51, scope: !10775)
!10783 = !DILocation(line: 3866, column: 63, scope: !10775)
!10784 = !DILocation(line: 3866, column: 31, scope: !10775)
!10785 = !DILocation(line: 3867, column: 5, scope: !10775)
!10786 = !DILocation(line: 3867, column: 28, scope: !10775)
!10787 = !DILocation(line: 3867, column: 34, scope: !10775)
!10788 = !DILocation(line: 3867, column: 37, scope: !10775)
!10789 = !DILocation(line: 3867, column: 44, scope: !10775)
!10790 = !DILocation(line: 3867, column: 47, scope: !10775)
!10791 = !DILocation(line: 3867, column: 8, scope: !10775)
!10792 = !DILocation(line: 3874, column: 5, scope: !10775)
!10793 = !DILocation(line: 3874, column: 9, scope: !10775)
!10794 = !DILocation(line: 3874, column: 24, scope: !10775)
!10795 = !DILocation(line: 3875, column: 9, scope: !10775)
!10796 = !DILocation(line: 3875, column: 28, scope: !10775)
!10797 = !DILocation(line: 3875, column: 43, scope: !10775)
!10798 = !DILocation(line: 3875, column: 46, scope: !10775)
!10799 = !DILocation(line: 3875, column: 13, scope: !10775)
!10800 = !DILocation(line: 3876, column: 6, scope: !10775)
!10801 = !DILocation(line: 3876, column: 24, scope: !10775)
!10802 = !DILocation(line: 3876, column: 40, scope: !10775)
!10803 = !DILocation(line: 3876, column: 43, scope: !10775)
!10804 = !DILocation(line: 3876, column: 9, scope: !10775)
!10805 = !DILocation(line: 3877, column: 6, scope: !10775)
!10806 = !DILocation(line: 3877, column: 29, scope: !10775)
!10807 = !DILocation(line: 3877, column: 44, scope: !10775)
!10808 = !DILocation(line: 3877, column: 47, scope: !10775)
!10809 = !DILocation(line: 3877, column: 54, scope: !10775)
!10810 = !DILocation(line: 3877, column: 57, scope: !10775)
!10811 = !DILocation(line: 3877, column: 9, scope: !10775)
!10812 = !DILocation(line: 3878, column: 6, scope: !10775)
!10813 = !DILocation(line: 3878, column: 29, scope: !10775)
!10814 = !DILocation(line: 3878, column: 45, scope: !10775)
!10815 = !DILocation(line: 3878, column: 48, scope: !10775)
!10816 = !DILocation(line: 3878, column: 55, scope: !10775)
!10817 = !DILocation(line: 3878, column: 58, scope: !10775)
!10818 = !DILocation(line: 3878, column: 9, scope: !10775)
!10819 = !DILocation(line: 3865, column: 12, scope: !10767)
!10820 = !DILocation(line: 3879, column: 5, scope: !10775)
!10821 = !DILocation(line: 3879, column: 8, scope: !10775)
!10822 = !DILocation(line: 3879, column: 18, scope: !10775)
!10823 = !DILocation(line: 3880, column: 1, scope: !10744)
!10824 = distinct !DISubprogram(name: "can_compare_p", scope: !3, file: !3, line: 4002, type: !10825, scopeLine: 4004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10825 = !DISubroutineType(types: !10826)
!10826 = !{!2756, !384, !5, !2285}
!10827 = !DILocalVariable(name: "code", arg: 1, scope: !10824, file: !3, line: 4002, type: !384)
!10828 = !DILocation(line: 4002, column: 30, scope: !10824)
!10829 = !DILocalVariable(name: "mode", arg: 2, scope: !10824, file: !3, line: 4002, type: !5)
!10830 = !DILocation(line: 4002, column: 54, scope: !10824)
!10831 = !DILocalVariable(name: "purpose", arg: 3, scope: !10824, file: !3, line: 4003, type: !2285)
!10832 = !DILocation(line: 4003, column: 34, scope: !10824)
!10833 = !DILocalVariable(name: "test", scope: !10824, file: !3, line: 4005, type: !2732)
!10834 = !DILocation(line: 4005, column: 7, scope: !10824)
!10835 = !DILocation(line: 4006, column: 10, scope: !10824)
!10836 = !DILocation(line: 4006, column: 8, scope: !10824)
!10837 = !DILocation(line: 4007, column: 3, scope: !10824)
!10838 = !DILocalVariable(name: "icode", scope: !10839, file: !3, line: 4009, type: !2756)
!10839 = distinct !DILexicalBlock(scope: !10824, file: !3, line: 4008, column: 5)
!10840 = !DILocation(line: 4009, column: 11, scope: !10839)
!10841 = !DILocation(line: 4011, column: 11, scope: !10842)
!10842 = distinct !DILexicalBlock(scope: !10839, file: !3, line: 4011, column: 11)
!10843 = !DILocation(line: 4011, column: 19, scope: !10842)
!10844 = !DILocation(line: 4012, column: 11, scope: !10842)
!10845 = !DILocation(line: 4012, column: 23, scope: !10842)
!10846 = !DILocation(line: 4012, column: 60, scope: !10842)
!10847 = !DILocation(line: 4012, column: 21, scope: !10842)
!10848 = !DILocation(line: 4012, column: 71, scope: !10842)
!10849 = !DILocation(line: 4013, column: 11, scope: !10842)
!10850 = !DILocation(line: 4013, column: 24, scope: !10842)
!10851 = !DILocation(line: 4013, column: 14, scope: !10842)
!10852 = !DILocation(line: 4013, column: 31, scope: !10842)
!10853 = !DILocation(line: 4013, column: 42, scope: !10842)
!10854 = !DILocation(line: 4013, column: 53, scope: !10842)
!10855 = !DILocation(line: 4013, column: 59, scope: !10842)
!10856 = !DILocation(line: 4011, column: 11, scope: !10839)
!10857 = !DILocation(line: 4014, column: 9, scope: !10842)
!10858 = !DILocation(line: 4015, column: 11, scope: !10859)
!10859 = distinct !DILexicalBlock(scope: !10839, file: !3, line: 4015, column: 11)
!10860 = !DILocation(line: 4015, column: 19, scope: !10859)
!10861 = !DILocation(line: 4016, column: 11, scope: !10859)
!10862 = !DILocation(line: 4016, column: 23, scope: !10859)
!10863 = !DILocation(line: 4016, column: 59, scope: !10859)
!10864 = !DILocation(line: 4016, column: 21, scope: !10859)
!10865 = !DILocation(line: 4016, column: 70, scope: !10859)
!10866 = !DILocation(line: 4017, column: 11, scope: !10859)
!10867 = !DILocation(line: 4017, column: 24, scope: !10859)
!10868 = !DILocation(line: 4017, column: 14, scope: !10859)
!10869 = !DILocation(line: 4017, column: 31, scope: !10859)
!10870 = !DILocation(line: 4017, column: 42, scope: !10859)
!10871 = !DILocation(line: 4017, column: 53, scope: !10859)
!10872 = !DILocation(line: 4017, column: 59, scope: !10859)
!10873 = !DILocation(line: 4015, column: 11, scope: !10839)
!10874 = !DILocation(line: 4018, column: 9, scope: !10859)
!10875 = !DILocation(line: 4019, column: 11, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10839, file: !3, line: 4019, column: 11)
!10877 = !DILocation(line: 4019, column: 19, scope: !10876)
!10878 = !DILocation(line: 4020, column: 4, scope: !10876)
!10879 = !DILocation(line: 4020, column: 7, scope: !10876)
!10880 = !DILocation(line: 4020, column: 41, scope: !10876)
!10881 = !DILocation(line: 4020, column: 51, scope: !10876)
!10882 = !DILocation(line: 4019, column: 11, scope: !10839)
!10883 = !DILocation(line: 4021, column: 2, scope: !10876)
!10884 = !DILocation(line: 4023, column: 14, scope: !10839)
!10885 = !DILocation(line: 4023, column: 12, scope: !10839)
!10886 = !DILocation(line: 4024, column: 7, scope: !10839)
!10887 = !DILocation(line: 4025, column: 5, scope: !10839)
!10888 = !DILocation(line: 4026, column: 10, scope: !10824)
!10889 = !DILocation(line: 4026, column: 15, scope: !10824)
!10890 = distinct !{!10890, !10837, !10891}
!10891 = !DILocation(line: 4026, column: 26, scope: !10824)
!10892 = !DILocation(line: 4028, column: 3, scope: !10824)
!10893 = !DILocation(line: 4029, column: 1, scope: !10824)
!10894 = distinct !DISubprogram(name: "prepare_operand", scope: !3, file: !3, line: 4266, type: !10895, scopeLine: 4268, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10895 = !DISubroutineType(types: !10896)
!10896 = !{!2732, !2756, !2732, !2756, !5, !5, !2756}
!10897 = !DILocalVariable(name: "icode", arg: 1, scope: !10894, file: !3, line: 4266, type: !2756)
!10898 = !DILocation(line: 4266, column: 22, scope: !10894)
!10899 = !DILocalVariable(name: "x", arg: 2, scope: !10894, file: !3, line: 4266, type: !2732)
!10900 = !DILocation(line: 4266, column: 33, scope: !10894)
!10901 = !DILocalVariable(name: "opnum", arg: 3, scope: !10894, file: !3, line: 4266, type: !2756)
!10902 = !DILocation(line: 4266, column: 40, scope: !10894)
!10903 = !DILocalVariable(name: "mode", arg: 4, scope: !10894, file: !3, line: 4266, type: !5)
!10904 = !DILocation(line: 4266, column: 65, scope: !10894)
!10905 = !DILocalVariable(name: "wider_mode", arg: 5, scope: !10894, file: !3, line: 4267, type: !5)
!10906 = !DILocation(line: 4267, column: 22, scope: !10894)
!10907 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !10894, file: !3, line: 4267, type: !2756)
!10908 = !DILocation(line: 4267, column: 38, scope: !10894)
!10909 = !DILocation(line: 4269, column: 7, scope: !10910)
!10910 = distinct !DILexicalBlock(scope: !10894, file: !3, line: 4269, column: 7)
!10911 = !DILocation(line: 4269, column: 15, scope: !10910)
!10912 = !DILocation(line: 4269, column: 12, scope: !10910)
!10913 = !DILocation(line: 4269, column: 7, scope: !10894)
!10914 = !DILocation(line: 4270, column: 24, scope: !10910)
!10915 = !DILocation(line: 4270, column: 36, scope: !10910)
!10916 = !DILocation(line: 4270, column: 42, scope: !10910)
!10917 = !DILocation(line: 4270, column: 45, scope: !10910)
!10918 = !DILocation(line: 4270, column: 9, scope: !10910)
!10919 = !DILocation(line: 4270, column: 7, scope: !10910)
!10920 = !DILocation(line: 4270, column: 5, scope: !10910)
!10921 = !DILocation(line: 4272, column: 18, scope: !10922)
!10922 = distinct !DILexicalBlock(scope: !10894, file: !3, line: 4272, column: 7)
!10923 = !DILocation(line: 4272, column: 8, scope: !10922)
!10924 = !DILocation(line: 4272, column: 25, scope: !10922)
!10925 = !DILocation(line: 4272, column: 33, scope: !10922)
!10926 = !DILocation(line: 4272, column: 40, scope: !10922)
!10927 = !DILocation(line: 4273, column: 8, scope: !10922)
!10928 = !DILocation(line: 4273, column: 21, scope: !10922)
!10929 = !DILocation(line: 4273, column: 11, scope: !10922)
!10930 = !DILocation(line: 4273, column: 28, scope: !10922)
!10931 = !DILocation(line: 4273, column: 36, scope: !10922)
!10932 = !DILocation(line: 4273, column: 43, scope: !10922)
!10933 = !DILocation(line: 4272, column: 7, scope: !10894)
!10934 = !DILocation(line: 4275, column: 11, scope: !10935)
!10935 = distinct !DILexicalBlock(scope: !10936, file: !3, line: 4275, column: 11)
!10936 = distinct !DILexicalBlock(scope: !10922, file: !3, line: 4274, column: 5)
!10937 = !DILocation(line: 4275, column: 11, scope: !10936)
!10938 = !DILocation(line: 4276, column: 2, scope: !10935)
!10939 = !DILocation(line: 4277, column: 39, scope: !10936)
!10940 = !DILocation(line: 4277, column: 29, scope: !10936)
!10941 = !DILocation(line: 4277, column: 46, scope: !10936)
!10942 = !DILocation(line: 4277, column: 54, scope: !10936)
!10943 = !DILocation(line: 4277, column: 61, scope: !10936)
!10944 = !DILocation(line: 4277, column: 67, scope: !10936)
!10945 = !DILocation(line: 4277, column: 11, scope: !10936)
!10946 = !DILocation(line: 4277, column: 9, scope: !10936)
!10947 = !DILocation(line: 4278, column: 5, scope: !10936)
!10948 = !DILocation(line: 4280, column: 10, scope: !10894)
!10949 = !DILocation(line: 4280, column: 3, scope: !10894)
!10950 = !DILocation(line: 4281, column: 1, scope: !10894)
!10951 = distinct !DISubprogram(name: "emit_cmp_and_jump_insns", scope: !3, file: !3, line: 4320, type: !10952, scopeLine: 4322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!10952 = !DISubroutineType(types: !10953)
!10953 = !{null, !2732, !2732, !384, !2732, !5, !2756, !2732}
!10954 = !DILocalVariable(name: "x", arg: 1, scope: !10951, file: !3, line: 4320, type: !2732)
!10955 = !DILocation(line: 4320, column: 30, scope: !10951)
!10956 = !DILocalVariable(name: "y", arg: 2, scope: !10951, file: !3, line: 4320, type: !2732)
!10957 = !DILocation(line: 4320, column: 37, scope: !10951)
!10958 = !DILocalVariable(name: "comparison", arg: 3, scope: !10951, file: !3, line: 4320, type: !384)
!10959 = !DILocation(line: 4320, column: 54, scope: !10951)
!10960 = !DILocalVariable(name: "size", arg: 4, scope: !10951, file: !3, line: 4320, type: !2732)
!10961 = !DILocation(line: 4320, column: 70, scope: !10951)
!10962 = !DILocalVariable(name: "mode", arg: 5, scope: !10951, file: !3, line: 4321, type: !5)
!10963 = !DILocation(line: 4321, column: 23, scope: !10951)
!10964 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !10951, file: !3, line: 4321, type: !2756)
!10965 = !DILocation(line: 4321, column: 33, scope: !10951)
!10966 = !DILocalVariable(name: "label", arg: 7, scope: !10951, file: !3, line: 4321, type: !2732)
!10967 = !DILocation(line: 4321, column: 48, scope: !10951)
!10968 = !DILocalVariable(name: "op0", scope: !10951, file: !3, line: 4323, type: !2732)
!10969 = !DILocation(line: 4323, column: 7, scope: !10951)
!10970 = !DILocation(line: 4323, column: 13, scope: !10951)
!10971 = !DILocalVariable(name: "op1", scope: !10951, file: !3, line: 4323, type: !2732)
!10972 = !DILocation(line: 4323, column: 16, scope: !10951)
!10973 = !DILocation(line: 4323, column: 22, scope: !10951)
!10974 = !DILocalVariable(name: "test", scope: !10951, file: !3, line: 4324, type: !2732)
!10975 = !DILocation(line: 4324, column: 7, scope: !10951)
!10976 = !DILocation(line: 4327, column: 36, scope: !10977)
!10977 = distinct !DILexicalBlock(scope: !10951, file: !3, line: 4327, column: 7)
!10978 = !DILocation(line: 4327, column: 39, scope: !10977)
!10979 = !DILocation(line: 4327, column: 7, scope: !10977)
!10980 = !DILocation(line: 4328, column: 7, scope: !10977)
!10981 = !DILocation(line: 4328, column: 41, scope: !10977)
!10982 = !DILocation(line: 4328, column: 25, scope: !10977)
!10983 = !DILocation(line: 4328, column: 54, scope: !10977)
!10984 = !DILocation(line: 4328, column: 10, scope: !10977)
!10985 = !DILocation(line: 4327, column: 7, scope: !10951)
!10986 = !DILocation(line: 4330, column: 13, scope: !10987)
!10987 = distinct !DILexicalBlock(scope: !10977, file: !3, line: 4329, column: 5)
!10988 = !DILocation(line: 4330, column: 11, scope: !10987)
!10989 = !DILocation(line: 4330, column: 22, scope: !10987)
!10990 = !DILocation(line: 4330, column: 20, scope: !10987)
!10991 = !DILocation(line: 4331, column: 36, scope: !10987)
!10992 = !DILocation(line: 4331, column: 20, scope: !10987)
!10993 = !DILocation(line: 4331, column: 18, scope: !10987)
!10994 = !DILocation(line: 4332, column: 5, scope: !10987)
!10995 = !DILocation(line: 4337, column: 7, scope: !10996)
!10996 = distinct !DILexicalBlock(scope: !10951, file: !3, line: 4337, column: 7)
!10997 = !DILocation(line: 4337, column: 7, scope: !10951)
!10998 = !DILocation(line: 4338, column: 22, scope: !10996)
!10999 = !DILocation(line: 4338, column: 28, scope: !10996)
!11000 = !DILocation(line: 4338, column: 11, scope: !10996)
!11001 = !DILocation(line: 4338, column: 9, scope: !10996)
!11002 = !DILocation(line: 4338, column: 5, scope: !10996)
!11003 = !DILocation(line: 4340, column: 7, scope: !11004)
!11004 = distinct !DILexicalBlock(scope: !10951, file: !3, line: 4340, column: 7)
!11005 = !DILocation(line: 4340, column: 7, scope: !10951)
!11006 = !DILocation(line: 4341, column: 38, scope: !11004)
!11007 = !DILocation(line: 4341, column: 18, scope: !11004)
!11008 = !DILocation(line: 4341, column: 16, scope: !11004)
!11009 = !DILocation(line: 4341, column: 5, scope: !11004)
!11010 = !DILocation(line: 4343, column: 21, scope: !10951)
!11011 = !DILocation(line: 4343, column: 26, scope: !10951)
!11012 = !DILocation(line: 4343, column: 31, scope: !10951)
!11013 = !DILocation(line: 4343, column: 43, scope: !10951)
!11014 = !DILocation(line: 4343, column: 49, scope: !10951)
!11015 = !DILocation(line: 4343, column: 3, scope: !10951)
!11016 = !DILocation(line: 4345, column: 29, scope: !10951)
!11017 = !DILocation(line: 4345, column: 35, scope: !10951)
!11018 = !DILocation(line: 4345, column: 41, scope: !10951)
!11019 = !DILocation(line: 4345, column: 3, scope: !10951)
!11020 = !DILocation(line: 4346, column: 1, scope: !10951)
!11021 = distinct !DISubprogram(name: "prepare_cmp_insn", scope: !3, file: !3, line: 4049, type: !11022, scopeLine: 4052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11022 = !DISubroutineType(types: !11023)
!11023 = !{null, !2732, !2732, !384, !2732, !2756, !2214, !3886, !11024}
!11024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!11025 = !DILocalVariable(name: "x", arg: 1, scope: !11021, file: !3, line: 4049, type: !2732)
!11026 = !DILocation(line: 4049, column: 23, scope: !11021)
!11027 = !DILocalVariable(name: "y", arg: 2, scope: !11021, file: !3, line: 4049, type: !2732)
!11028 = !DILocation(line: 4049, column: 30, scope: !11021)
!11029 = !DILocalVariable(name: "comparison", arg: 3, scope: !11021, file: !3, line: 4049, type: !384)
!11030 = !DILocation(line: 4049, column: 47, scope: !11021)
!11031 = !DILocalVariable(name: "size", arg: 4, scope: !11021, file: !3, line: 4049, type: !2732)
!11032 = !DILocation(line: 4049, column: 63, scope: !11021)
!11033 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !11021, file: !3, line: 4050, type: !2756)
!11034 = !DILocation(line: 4050, column: 9, scope: !11021)
!11035 = !DILocalVariable(name: "methods", arg: 6, scope: !11021, file: !3, line: 4050, type: !2214)
!11036 = !DILocation(line: 4050, column: 39, scope: !11021)
!11037 = !DILocalVariable(name: "ptest", arg: 7, scope: !11021, file: !3, line: 4051, type: !3886)
!11038 = !DILocation(line: 4051, column: 10, scope: !11021)
!11039 = !DILocalVariable(name: "pmode", arg: 8, scope: !11021, file: !3, line: 4051, type: !11024)
!11040 = !DILocation(line: 4051, column: 36, scope: !11021)
!11041 = !DILocalVariable(name: "mode", scope: !11021, file: !3, line: 4053, type: !5)
!11042 = !DILocation(line: 4053, column: 21, scope: !11021)
!11043 = !DILocation(line: 4053, column: 29, scope: !11021)
!11044 = !DILocation(line: 4053, column: 28, scope: !11021)
!11045 = !DILocalVariable(name: "libfunc", scope: !11021, file: !3, line: 4054, type: !2732)
!11046 = !DILocation(line: 4054, column: 7, scope: !11021)
!11047 = !DILocalVariable(name: "test", scope: !11021, file: !3, line: 4054, type: !2732)
!11048 = !DILocation(line: 4054, column: 16, scope: !11021)
!11049 = !DILocalVariable(name: "cmp_mode", scope: !11021, file: !3, line: 4055, type: !5)
!11050 = !DILocation(line: 4055, column: 21, scope: !11021)
!11051 = !DILocalVariable(name: "mclass", scope: !11021, file: !3, line: 4056, type: !2192)
!11052 = !DILocation(line: 4056, column: 19, scope: !11021)
!11053 = !DILocation(line: 4059, column: 3, scope: !11021)
!11054 = !DILocation(line: 4063, column: 7, scope: !11055)
!11055 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4063, column: 7)
!11056 = !DILocation(line: 4063, column: 22, scope: !11055)
!11057 = !DILocation(line: 4063, column: 25, scope: !11055)
!11058 = !DILocation(line: 4064, column: 7, scope: !11055)
!11059 = !DILocation(line: 4064, column: 21, scope: !11055)
!11060 = !DILocation(line: 4064, column: 33, scope: !11055)
!11061 = !DILocation(line: 4064, column: 11, scope: !11055)
!11062 = !DILocation(line: 4065, column: 11, scope: !11055)
!11063 = !DILocation(line: 4063, column: 7, scope: !11021)
!11064 = !DILocation(line: 4066, column: 20, scope: !11055)
!11065 = !DILocation(line: 4066, column: 26, scope: !11055)
!11066 = !DILocation(line: 4066, column: 9, scope: !11055)
!11067 = !DILocation(line: 4066, column: 7, scope: !11055)
!11068 = !DILocation(line: 4066, column: 5, scope: !11055)
!11069 = !DILocation(line: 4068, column: 7, scope: !11070)
!11070 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4068, column: 7)
!11071 = !DILocation(line: 4068, column: 22, scope: !11070)
!11072 = !DILocation(line: 4068, column: 25, scope: !11070)
!11073 = !DILocation(line: 4069, column: 7, scope: !11070)
!11074 = !DILocation(line: 4069, column: 21, scope: !11070)
!11075 = !DILocation(line: 4069, column: 33, scope: !11070)
!11076 = !DILocation(line: 4069, column: 11, scope: !11070)
!11077 = !DILocation(line: 4070, column: 11, scope: !11070)
!11078 = !DILocation(line: 4068, column: 7, scope: !11021)
!11079 = !DILocation(line: 4071, column: 20, scope: !11070)
!11080 = !DILocation(line: 4071, column: 26, scope: !11070)
!11081 = !DILocation(line: 4071, column: 9, scope: !11070)
!11082 = !DILocation(line: 4071, column: 7, scope: !11070)
!11083 = !DILocation(line: 4071, column: 5, scope: !11070)
!11084 = !DILocation(line: 4081, column: 7, scope: !11085)
!11085 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4081, column: 7)
!11086 = !DILocation(line: 4081, column: 20, scope: !11085)
!11087 = !DILocation(line: 4081, column: 32, scope: !11085)
!11088 = !DILocation(line: 4081, column: 35, scope: !11085)
!11089 = !DILocation(line: 4081, column: 48, scope: !11085)
!11090 = !DILocation(line: 4081, column: 7, scope: !11021)
!11091 = !DILocation(line: 4082, column: 20, scope: !11085)
!11092 = !DILocation(line: 4082, column: 26, scope: !11085)
!11093 = !DILocation(line: 4082, column: 9, scope: !11085)
!11094 = !DILocation(line: 4082, column: 7, scope: !11085)
!11095 = !DILocation(line: 4082, column: 5, scope: !11085)
!11096 = !DILocation(line: 4083, column: 7, scope: !11097)
!11097 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4083, column: 7)
!11098 = !DILocation(line: 4083, column: 12, scope: !11097)
!11099 = !DILocation(line: 4083, column: 7, scope: !11021)
!11100 = !DILocation(line: 4084, column: 12, scope: !11097)
!11101 = !DILocation(line: 4084, column: 25, scope: !11097)
!11102 = !DILocation(line: 4084, column: 39, scope: !11097)
!11103 = !DILocation(line: 4084, column: 54, scope: !11097)
!11104 = !DILocation(line: 4084, column: 10, scope: !11097)
!11105 = !DILocation(line: 4084, column: 5, scope: !11097)
!11106 = !DILocation(line: 4088, column: 7, scope: !11107)
!11107 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4088, column: 7)
!11108 = !DILocation(line: 4088, column: 12, scope: !11107)
!11109 = !DILocation(line: 4088, column: 7, scope: !11021)
!11110 = !DILocalVariable(name: "result_mode", scope: !11111, file: !3, line: 4090, type: !5)
!11111 = distinct !DILexicalBlock(scope: !11107, file: !3, line: 4089, column: 5)
!11112 = !DILocation(line: 4090, column: 25, scope: !11111)
!11113 = !DILocalVariable(name: "cmp_code", scope: !11111, file: !3, line: 4091, type: !527)
!11114 = !DILocation(line: 4091, column: 22, scope: !11111)
!11115 = !DILocalVariable(name: "length_type", scope: !11111, file: !3, line: 4092, type: !2853)
!11116 = !DILocation(line: 4092, column: 12, scope: !11111)
!11117 = !DILocalVariable(name: "libfunc", scope: !11111, file: !3, line: 4093, type: !2732)
!11118 = !DILocation(line: 4093, column: 11, scope: !11111)
!11119 = !DILocalVariable(name: "result", scope: !11111, file: !3, line: 4094, type: !2732)
!11120 = !DILocation(line: 4094, column: 11, scope: !11111)
!11121 = !DILocalVariable(name: "opalign", scope: !11111, file: !3, line: 4095, type: !2732)
!11122 = !DILocation(line: 4095, column: 11, scope: !11111)
!11123 = !DILocation(line: 4096, column: 4, scope: !11111)
!11124 = !DILocation(line: 4098, column: 7, scope: !11111)
!11125 = !DILocation(line: 4102, column: 23, scope: !11126)
!11126 = distinct !DILexicalBlock(scope: !11111, file: !3, line: 4102, column: 7)
!11127 = !DILocation(line: 4102, column: 21, scope: !11126)
!11128 = !DILocation(line: 4102, column: 12, scope: !11126)
!11129 = !DILocation(line: 4103, column: 5, scope: !11130)
!11130 = distinct !DILexicalBlock(scope: !11126, file: !3, line: 4102, column: 7)
!11131 = !DILocation(line: 4103, column: 14, scope: !11130)
!11132 = !DILocation(line: 4102, column: 7, scope: !11126)
!11133 = !DILocation(line: 4106, column: 28, scope: !11134)
!11134 = distinct !DILexicalBlock(scope: !11130, file: !3, line: 4105, column: 2)
!11135 = !DILocation(line: 4106, column: 15, scope: !11134)
!11136 = !DILocation(line: 4106, column: 13, scope: !11134)
!11137 = !DILocation(line: 4107, column: 8, scope: !11138)
!11138 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 4107, column: 8)
!11139 = !DILocation(line: 4107, column: 17, scope: !11138)
!11140 = !DILocation(line: 4107, column: 8, scope: !11134)
!11141 = !DILocation(line: 4108, column: 30, scope: !11138)
!11142 = !DILocation(line: 4108, column: 17, scope: !11138)
!11143 = !DILocation(line: 4108, column: 15, scope: !11138)
!11144 = !DILocation(line: 4108, column: 6, scope: !11138)
!11145 = !DILocation(line: 4109, column: 8, scope: !11146)
!11146 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 4109, column: 8)
!11147 = !DILocation(line: 4109, column: 17, scope: !11146)
!11148 = !DILocation(line: 4109, column: 8, scope: !11134)
!11149 = !DILocation(line: 4110, column: 31, scope: !11146)
!11150 = !DILocation(line: 4110, column: 17, scope: !11146)
!11151 = !DILocation(line: 4110, column: 15, scope: !11146)
!11152 = !DILocation(line: 4110, column: 6, scope: !11146)
!11153 = !DILocation(line: 4111, column: 8, scope: !11154)
!11154 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 4111, column: 8)
!11155 = !DILocation(line: 4111, column: 17, scope: !11154)
!11156 = !DILocation(line: 4111, column: 8, scope: !11134)
!11157 = !DILocation(line: 4112, column: 6, scope: !11154)
!11158 = !DILocation(line: 4115, column: 9, scope: !11159)
!11159 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 4115, column: 8)
!11160 = !DILocation(line: 4116, column: 9, scope: !11159)
!11161 = !DILocation(line: 4116, column: 12, scope: !11159)
!11162 = !DILocation(line: 4116, column: 35, scope: !11159)
!11163 = !DILocation(line: 4116, column: 32, scope: !11159)
!11164 = !DILocation(line: 4116, column: 29, scope: !11159)
!11165 = !DILocation(line: 4116, column: 26, scope: !11159)
!11166 = !DILocation(line: 4117, column: 8, scope: !11159)
!11167 = !DILocation(line: 4117, column: 12, scope: !11159)
!11168 = !DILocation(line: 4118, column: 7, scope: !11159)
!11169 = !DILocation(line: 4118, column: 5, scope: !11159)
!11170 = !DILocation(line: 4115, column: 8, scope: !11134)
!11171 = !DILocation(line: 4119, column: 6, scope: !11159)
!11172 = !DILocation(line: 4121, column: 28, scope: !11134)
!11173 = !DILocation(line: 4121, column: 18, scope: !11134)
!11174 = !DILocation(line: 4121, column: 38, scope: !11134)
!11175 = !DILocation(line: 4121, column: 49, scope: !11134)
!11176 = !DILocation(line: 4121, column: 16, scope: !11134)
!11177 = !DILocation(line: 4122, column: 26, scope: !11134)
!11178 = !DILocation(line: 4122, column: 13, scope: !11134)
!11179 = !DILocation(line: 4122, column: 11, scope: !11134)
!11180 = !DILocation(line: 4123, column: 28, scope: !11134)
!11181 = !DILocation(line: 4123, column: 38, scope: !11134)
!11182 = !DILocation(line: 4123, column: 11, scope: !11134)
!11183 = !DILocation(line: 4123, column: 9, scope: !11134)
!11184 = !DILocation(line: 4124, column: 15, scope: !11134)
!11185 = !DILocation(line: 4124, column: 35, scope: !11134)
!11186 = !DILocation(line: 4124, column: 43, scope: !11134)
!11187 = !DILocation(line: 4124, column: 46, scope: !11134)
!11188 = !DILocation(line: 4124, column: 49, scope: !11134)
!11189 = !DILocation(line: 4124, column: 55, scope: !11134)
!11190 = !DILocation(line: 4124, column: 4, scope: !11134)
!11191 = !DILocation(line: 4126, column: 20, scope: !11134)
!11192 = !DILocation(line: 4126, column: 12, scope: !11134)
!11193 = !DILocation(line: 4126, column: 18, scope: !11134)
!11194 = !DILocation(line: 4127, column: 20, scope: !11134)
!11195 = !DILocation(line: 4127, column: 12, scope: !11134)
!11196 = !DILocation(line: 4127, column: 18, scope: !11134)
!11197 = !DILocation(line: 4128, column: 4, scope: !11134)
!11198 = !DILocation(line: 4104, column: 16, scope: !11130)
!11199 = !DILocation(line: 4104, column: 14, scope: !11130)
!11200 = !DILocation(line: 4102, column: 7, scope: !11130)
!11201 = distinct !{!11201, !11132, !11202}
!11202 = !DILocation(line: 4129, column: 2, scope: !11126)
!11203 = !DILocation(line: 4131, column: 11, scope: !11204)
!11204 = distinct !DILexicalBlock(scope: !11111, file: !3, line: 4131, column: 11)
!11205 = !DILocation(line: 4131, column: 19, scope: !11204)
!11206 = !DILocation(line: 4131, column: 32, scope: !11204)
!11207 = !DILocation(line: 4131, column: 35, scope: !11204)
!11208 = !DILocation(line: 4131, column: 43, scope: !11204)
!11209 = !DILocation(line: 4131, column: 11, scope: !11111)
!11210 = !DILocation(line: 4132, column: 2, scope: !11204)
!11211 = !DILocation(line: 4135, column: 17, scope: !11111)
!11212 = !DILocation(line: 4135, column: 15, scope: !11111)
!11213 = !DILocation(line: 4136, column: 21, scope: !11111)
!11214 = !DILocation(line: 4136, column: 19, scope: !11111)
!11215 = !DILocation(line: 4137, column: 21, scope: !11111)
!11216 = !DILocation(line: 4137, column: 19, scope: !11111)
!11217 = !DILocation(line: 4138, column: 18, scope: !11111)
!11218 = !DILocation(line: 4138, column: 16, scope: !11111)
!11219 = !DILocation(line: 4139, column: 31, scope: !11111)
!11220 = !DILocation(line: 4139, column: 56, scope: !11111)
!11221 = !DILocation(line: 4140, column: 10, scope: !11111)
!11222 = !DILocation(line: 4139, column: 14, scope: !11111)
!11223 = !DILocation(line: 4139, column: 12, scope: !11111)
!11224 = !DILocation(line: 4142, column: 41, scope: !11111)
!11225 = !DILocation(line: 4143, column: 6, scope: !11111)
!11226 = !DILocation(line: 4144, column: 6, scope: !11111)
!11227 = !DILocation(line: 4145, column: 6, scope: !11111)
!11228 = !DILocation(line: 4146, column: 6, scope: !11111)
!11229 = !DILocation(line: 4146, column: 12, scope: !11111)
!11230 = !DILocation(line: 4142, column: 16, scope: !11111)
!11231 = !DILocation(line: 4142, column: 14, scope: !11111)
!11232 = !DILocation(line: 4148, column: 16, scope: !11111)
!11233 = !DILocation(line: 4148, column: 8, scope: !11111)
!11234 = !DILocation(line: 4148, column: 14, scope: !11111)
!11235 = !DILocation(line: 4149, column: 16, scope: !11111)
!11236 = !DILocation(line: 4149, column: 8, scope: !11111)
!11237 = !DILocation(line: 4149, column: 14, scope: !11111)
!11238 = !DILocation(line: 4150, column: 7, scope: !11111)
!11239 = !DILocation(line: 4155, column: 7, scope: !11240)
!11240 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4155, column: 7)
!11241 = !DILocation(line: 4155, column: 7, scope: !11021)
!11242 = !DILocation(line: 4157, column: 23, scope: !11243)
!11243 = distinct !DILexicalBlock(scope: !11244, file: !3, line: 4157, column: 11)
!11244 = distinct !DILexicalBlock(scope: !11240, file: !3, line: 4156, column: 5)
!11245 = !DILocation(line: 4157, column: 11, scope: !11243)
!11246 = !DILocation(line: 4157, column: 11, scope: !11244)
!11247 = !DILocation(line: 4158, column: 17, scope: !11243)
!11248 = !DILocation(line: 4158, column: 23, scope: !11243)
!11249 = !DILocation(line: 4158, column: 6, scope: !11243)
!11250 = !DILocation(line: 4158, column: 4, scope: !11243)
!11251 = !DILocation(line: 4158, column: 2, scope: !11243)
!11252 = !DILocation(line: 4159, column: 23, scope: !11253)
!11253 = distinct !DILexicalBlock(scope: !11244, file: !3, line: 4159, column: 11)
!11254 = !DILocation(line: 4159, column: 11, scope: !11253)
!11255 = !DILocation(line: 4159, column: 11, scope: !11244)
!11256 = !DILocation(line: 4160, column: 17, scope: !11253)
!11257 = !DILocation(line: 4160, column: 23, scope: !11253)
!11258 = !DILocation(line: 4160, column: 6, scope: !11253)
!11259 = !DILocation(line: 4160, column: 4, scope: !11253)
!11260 = !DILocation(line: 4160, column: 2, scope: !11253)
!11261 = !DILocation(line: 4161, column: 5, scope: !11244)
!11262 = !DILocation(line: 4163, column: 7, scope: !11263)
!11263 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4163, column: 7)
!11264 = !DILocation(line: 4163, column: 29, scope: !11263)
!11265 = !DILocation(line: 4163, column: 7, scope: !11021)
!11266 = !DILocation(line: 4165, column: 7, scope: !11267)
!11267 = distinct !DILexicalBlock(scope: !11263, file: !3, line: 4164, column: 5)
!11268 = !DILocation(line: 4166, column: 16, scope: !11267)
!11269 = !DILocation(line: 4166, column: 8, scope: !11267)
!11270 = !DILocation(line: 4166, column: 14, scope: !11267)
!11271 = !DILocation(line: 4167, column: 7, scope: !11267)
!11272 = !DILocation(line: 4170, column: 12, scope: !11021)
!11273 = !DILocation(line: 4170, column: 10, scope: !11021)
!11274 = !DILocation(line: 4171, column: 10, scope: !11021)
!11275 = !DILocation(line: 4171, column: 8, scope: !11021)
!11276 = !DILocation(line: 4172, column: 14, scope: !11021)
!11277 = !DILocation(line: 4172, column: 12, scope: !11021)
!11278 = !DILocation(line: 4173, column: 3, scope: !11021)
!11279 = !DILocalVariable(name: "icode", scope: !11280, file: !3, line: 4175, type: !527)
!11280 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4174, column: 4)
!11281 = !DILocation(line: 4175, column: 22, scope: !11280)
!11282 = !DILocation(line: 4176, column: 15, scope: !11280)
!11283 = !DILocation(line: 4176, column: 56, scope: !11280)
!11284 = !DILocation(line: 4176, column: 13, scope: !11280)
!11285 = !DILocation(line: 4177, column: 11, scope: !11286)
!11286 = distinct !DILexicalBlock(scope: !11280, file: !3, line: 4177, column: 11)
!11287 = !DILocation(line: 4177, column: 17, scope: !11286)
!11288 = !DILocation(line: 4178, column: 4, scope: !11286)
!11289 = !DILocation(line: 4178, column: 17, scope: !11286)
!11290 = !DILocation(line: 4178, column: 7, scope: !11286)
!11291 = !DILocation(line: 4178, column: 24, scope: !11286)
!11292 = !DILocation(line: 4178, column: 35, scope: !11286)
!11293 = !DILocation(line: 4178, column: 46, scope: !11286)
!11294 = !DILocation(line: 4177, column: 11, scope: !11280)
!11295 = !DILocalVariable(name: "last", scope: !11296, file: !3, line: 4180, type: !2732)
!11296 = distinct !DILexicalBlock(scope: !11286, file: !3, line: 4179, column: 2)
!11297 = !DILocation(line: 4180, column: 8, scope: !11296)
!11298 = !DILocation(line: 4180, column: 15, scope: !11296)
!11299 = !DILocalVariable(name: "op0", scope: !11296, file: !3, line: 4181, type: !2732)
!11300 = !DILocation(line: 4181, column: 8, scope: !11296)
!11301 = !DILocation(line: 4181, column: 31, scope: !11296)
!11302 = !DILocation(line: 4181, column: 38, scope: !11296)
!11303 = !DILocation(line: 4181, column: 44, scope: !11296)
!11304 = !DILocation(line: 4181, column: 50, scope: !11296)
!11305 = !DILocation(line: 4181, column: 60, scope: !11296)
!11306 = !DILocation(line: 4181, column: 14, scope: !11296)
!11307 = !DILocalVariable(name: "op1", scope: !11296, file: !3, line: 4182, type: !2732)
!11308 = !DILocation(line: 4182, column: 8, scope: !11296)
!11309 = !DILocation(line: 4182, column: 31, scope: !11296)
!11310 = !DILocation(line: 4182, column: 38, scope: !11296)
!11311 = !DILocation(line: 4182, column: 44, scope: !11296)
!11312 = !DILocation(line: 4182, column: 50, scope: !11296)
!11313 = !DILocation(line: 4182, column: 60, scope: !11296)
!11314 = !DILocation(line: 4182, column: 14, scope: !11296)
!11315 = !DILocation(line: 4183, column: 8, scope: !11316)
!11316 = distinct !DILexicalBlock(scope: !11296, file: !3, line: 4183, column: 8)
!11317 = !DILocation(line: 4183, column: 12, scope: !11316)
!11318 = !DILocation(line: 4183, column: 15, scope: !11316)
!11319 = !DILocation(line: 4184, column: 8, scope: !11316)
!11320 = !DILocation(line: 4184, column: 21, scope: !11316)
!11321 = !DILocation(line: 4184, column: 11, scope: !11316)
!11322 = !DILocation(line: 4184, column: 28, scope: !11316)
!11323 = !DILocation(line: 4184, column: 39, scope: !11316)
!11324 = !DILocation(line: 4185, column: 5, scope: !11316)
!11325 = !DILocation(line: 4185, column: 20, scope: !11316)
!11326 = !DILocation(line: 4185, column: 10, scope: !11316)
!11327 = !DILocation(line: 4185, column: 27, scope: !11316)
!11328 = !DILocation(line: 4185, column: 38, scope: !11316)
!11329 = !DILocation(line: 4186, column: 8, scope: !11316)
!11330 = !DILocation(line: 4186, column: 21, scope: !11316)
!11331 = !DILocation(line: 4186, column: 11, scope: !11316)
!11332 = !DILocation(line: 4186, column: 28, scope: !11316)
!11333 = !DILocation(line: 4186, column: 39, scope: !11316)
!11334 = !DILocation(line: 4187, column: 5, scope: !11316)
!11335 = !DILocation(line: 4187, column: 20, scope: !11316)
!11336 = !DILocation(line: 4187, column: 10, scope: !11316)
!11337 = !DILocation(line: 4187, column: 27, scope: !11316)
!11338 = !DILocation(line: 4187, column: 38, scope: !11316)
!11339 = !DILocation(line: 4183, column: 8, scope: !11296)
!11340 = !DILocation(line: 4189, column: 25, scope: !11341)
!11341 = distinct !DILexicalBlock(scope: !11316, file: !3, line: 4188, column: 6)
!11342 = !DILocation(line: 4189, column: 8, scope: !11341)
!11343 = !DILocation(line: 4189, column: 23, scope: !11341)
!11344 = !DILocation(line: 4190, column: 25, scope: !11341)
!11345 = !DILocation(line: 4190, column: 8, scope: !11341)
!11346 = !DILocation(line: 4190, column: 23, scope: !11341)
!11347 = !DILocation(line: 4191, column: 17, scope: !11341)
!11348 = !DILocation(line: 4191, column: 9, scope: !11341)
!11349 = !DILocation(line: 4191, column: 15, scope: !11341)
!11350 = !DILocation(line: 4192, column: 17, scope: !11341)
!11351 = !DILocation(line: 4192, column: 9, scope: !11341)
!11352 = !DILocation(line: 4192, column: 15, scope: !11341)
!11353 = !DILocation(line: 4193, column: 8, scope: !11341)
!11354 = !DILocation(line: 4195, column: 24, scope: !11296)
!11355 = !DILocation(line: 4195, column: 4, scope: !11296)
!11356 = !DILocation(line: 4196, column: 2, scope: !11296)
!11357 = !DILocation(line: 4198, column: 11, scope: !11358)
!11358 = distinct !DILexicalBlock(scope: !11280, file: !3, line: 4198, column: 11)
!11359 = !DILocation(line: 4198, column: 19, scope: !11358)
!11360 = !DILocation(line: 4198, column: 35, scope: !11358)
!11361 = !DILocation(line: 4198, column: 39, scope: !11358)
!11362 = !DILocation(line: 4198, column: 11, scope: !11280)
!11363 = !DILocation(line: 4199, column: 2, scope: !11358)
!11364 = !DILocation(line: 4200, column: 18, scope: !11280)
!11365 = !DILocation(line: 4200, column: 16, scope: !11280)
!11366 = !DILocation(line: 4201, column: 5, scope: !11280)
!11367 = !DILocation(line: 4202, column: 10, scope: !11021)
!11368 = !DILocation(line: 4202, column: 19, scope: !11021)
!11369 = distinct !{!11369, !11278, !11370}
!11370 = !DILocation(line: 4202, column: 30, scope: !11021)
!11371 = !DILocation(line: 4204, column: 7, scope: !11372)
!11372 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4204, column: 7)
!11373 = !DILocation(line: 4204, column: 15, scope: !11372)
!11374 = !DILocation(line: 4204, column: 7, scope: !11021)
!11375 = !DILocation(line: 4205, column: 5, scope: !11372)
!11376 = !DILocation(line: 4207, column: 8, scope: !11377)
!11377 = distinct !DILexicalBlock(scope: !11021, file: !3, line: 4207, column: 7)
!11378 = !DILocation(line: 4207, column: 7, scope: !11021)
!11379 = !DILocalVariable(name: "result", scope: !11380, file: !3, line: 4209, type: !2732)
!11380 = distinct !DILexicalBlock(scope: !11377, file: !3, line: 4208, column: 5)
!11381 = !DILocation(line: 4209, column: 11, scope: !11380)
!11382 = !DILocation(line: 4212, column: 43, scope: !11380)
!11383 = !DILocation(line: 4212, column: 17, scope: !11380)
!11384 = !DILocation(line: 4212, column: 15, scope: !11380)
!11385 = !DILocation(line: 4213, column: 7, scope: !11380)
!11386 = !DILocation(line: 4217, column: 11, scope: !11387)
!11387 = distinct !DILexicalBlock(scope: !11380, file: !3, line: 4217, column: 11)
!11388 = !DILocation(line: 4217, column: 11, scope: !11380)
!11389 = !DILocalVariable(name: "ulibfunc", scope: !11390, file: !3, line: 4219, type: !2732)
!11390 = distinct !DILexicalBlock(scope: !11387, file: !3, line: 4218, column: 2)
!11391 = !DILocation(line: 4219, column: 8, scope: !11390)
!11392 = !DILocation(line: 4219, column: 46, scope: !11390)
!11393 = !DILocation(line: 4219, column: 19, scope: !11390)
!11394 = !DILocation(line: 4220, column: 8, scope: !11395)
!11395 = distinct !DILexicalBlock(scope: !11390, file: !3, line: 4220, column: 8)
!11396 = !DILocation(line: 4220, column: 8, scope: !11390)
!11397 = !DILocation(line: 4221, column: 16, scope: !11395)
!11398 = !DILocation(line: 4221, column: 14, scope: !11395)
!11399 = !DILocation(line: 4221, column: 6, scope: !11395)
!11400 = !DILocation(line: 4222, column: 2, scope: !11390)
!11401 = !DILocation(line: 4224, column: 41, scope: !11380)
!11402 = !DILocation(line: 4225, column: 14, scope: !11380)
!11403 = !DILocation(line: 4225, column: 6, scope: !11380)
!11404 = !DILocation(line: 4226, column: 9, scope: !11380)
!11405 = !DILocation(line: 4226, column: 12, scope: !11380)
!11406 = !DILocation(line: 4226, column: 18, scope: !11380)
!11407 = !DILocation(line: 4226, column: 21, scope: !11380)
!11408 = !DILocation(line: 4224, column: 16, scope: !11380)
!11409 = !DILocation(line: 4224, column: 14, scope: !11380)
!11410 = !DILocation(line: 4236, column: 11, scope: !11380)
!11411 = !DILocation(line: 4236, column: 9, scope: !11380)
!11412 = !DILocation(line: 4237, column: 11, scope: !11380)
!11413 = !DILocation(line: 4237, column: 9, scope: !11380)
!11414 = !DILocation(line: 4247, column: 16, scope: !11380)
!11415 = !DILocation(line: 4247, column: 8, scope: !11380)
!11416 = !DILocation(line: 4247, column: 14, scope: !11380)
!11417 = !DILocation(line: 4248, column: 25, scope: !11380)
!11418 = !DILocation(line: 4248, column: 28, scope: !11380)
!11419 = !DILocation(line: 4248, column: 31, scope: !11380)
!11420 = !DILocation(line: 4248, column: 53, scope: !11380)
!11421 = !DILocation(line: 4248, column: 64, scope: !11380)
!11422 = !DILocation(line: 4249, column: 4, scope: !11380)
!11423 = !DILocation(line: 4249, column: 11, scope: !11380)
!11424 = !DILocation(line: 4248, column: 7, scope: !11380)
!11425 = !DILocation(line: 4250, column: 5, scope: !11380)
!11426 = !DILocation(line: 4252, column: 28, scope: !11377)
!11427 = !DILocation(line: 4252, column: 31, scope: !11377)
!11428 = !DILocation(line: 4252, column: 34, scope: !11377)
!11429 = !DILocation(line: 4252, column: 46, scope: !11377)
!11430 = !DILocation(line: 4252, column: 53, scope: !11377)
!11431 = !DILocation(line: 4252, column: 5, scope: !11377)
!11432 = !DILocation(line: 4254, column: 3, scope: !11021)
!11433 = !DILabel(scope: !11021, name: "fail", file: !3, line: 4256)
!11434 = !DILocation(line: 4256, column: 2, scope: !11021)
!11435 = !DILocation(line: 4257, column: 4, scope: !11021)
!11436 = !DILocation(line: 4257, column: 10, scope: !11021)
!11437 = !DILocation(line: 4258, column: 1, scope: !11021)
!11438 = distinct !DISubprogram(name: "emit_cmp_and_jump_insn_1", scope: !3, file: !3, line: 4287, type: !11439, scopeLine: 4288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11439 = !DISubroutineType(types: !11440)
!11440 = !{null, !2732, !5, !2732}
!11441 = !DILocalVariable(name: "test", arg: 1, scope: !11438, file: !3, line: 4287, type: !2732)
!11442 = !DILocation(line: 4287, column: 31, scope: !11438)
!11443 = !DILocalVariable(name: "mode", arg: 2, scope: !11438, file: !3, line: 4287, type: !5)
!11444 = !DILocation(line: 4287, column: 55, scope: !11438)
!11445 = !DILocalVariable(name: "label", arg: 3, scope: !11438, file: !3, line: 4287, type: !2732)
!11446 = !DILocation(line: 4287, column: 65, scope: !11438)
!11447 = !DILocalVariable(name: "optab_mode", scope: !11438, file: !3, line: 4289, type: !5)
!11448 = !DILocation(line: 4289, column: 21, scope: !11438)
!11449 = !DILocalVariable(name: "mclass", scope: !11438, file: !3, line: 4290, type: !2192)
!11450 = !DILocation(line: 4290, column: 19, scope: !11438)
!11451 = !DILocalVariable(name: "icode", scope: !11438, file: !3, line: 4291, type: !527)
!11452 = !DILocation(line: 4291, column: 18, scope: !11438)
!11453 = !DILocation(line: 4293, column: 12, scope: !11438)
!11454 = !DILocation(line: 4293, column: 10, scope: !11438)
!11455 = !DILocation(line: 4294, column: 17, scope: !11438)
!11456 = !DILocation(line: 4294, column: 24, scope: !11438)
!11457 = !DILocation(line: 4294, column: 16, scope: !11438)
!11458 = !DILocation(line: 4294, column: 47, scope: !11438)
!11459 = !DILocation(line: 4294, column: 14, scope: !11438)
!11460 = !DILocation(line: 4295, column: 11, scope: !11438)
!11461 = !DILocation(line: 4295, column: 54, scope: !11438)
!11462 = !DILocation(line: 4295, column: 9, scope: !11438)
!11463 = !DILocation(line: 4297, column: 3, scope: !11438)
!11464 = !DILocation(line: 4298, column: 3, scope: !11438)
!11465 = !DILocation(line: 4299, column: 19, scope: !11438)
!11466 = !DILocation(line: 4299, column: 36, scope: !11438)
!11467 = !DILocation(line: 4299, column: 42, scope: !11438)
!11468 = !DILocation(line: 4299, column: 58, scope: !11438)
!11469 = !DILocation(line: 4299, column: 74, scope: !11438)
!11470 = !DILocation(line: 4299, column: 3, scope: !11438)
!11471 = !DILocation(line: 4300, column: 1, scope: !11438)
!11472 = distinct !DISubprogram(name: "emit_indirect_jump", scope: !3, file: !3, line: 4477, type: !11473, scopeLine: 4478, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11473 = !DISubroutineType(types: !11474)
!11474 = !{null, !2732}
!11475 = !DILocalVariable(name: "loc", arg: 1, scope: !11472, file: !3, line: 4477, type: !2732)
!11476 = !DILocation(line: 4477, column: 25, scope: !11472)
!11477 = !DILocation(line: 4479, column: 48, scope: !11478)
!11478 = distinct !DILexicalBlock(scope: !11472, file: !3, line: 4479, column: 7)
!11479 = !DILocation(line: 4479, column: 8, scope: !11478)
!11480 = !DILocation(line: 4479, column: 59, scope: !11478)
!11481 = !DILocation(line: 4480, column: 8, scope: !11478)
!11482 = !DILocation(line: 4479, column: 7, scope: !11472)
!11483 = !DILocation(line: 4481, column: 36, scope: !11478)
!11484 = !DILocation(line: 4481, column: 11, scope: !11478)
!11485 = !DILocation(line: 4481, column: 9, scope: !11478)
!11486 = !DILocation(line: 4481, column: 5, scope: !11478)
!11487 = !DILocation(line: 4483, column: 38, scope: !11472)
!11488 = !DILocation(line: 4483, column: 19, scope: !11472)
!11489 = !DILocation(line: 4483, column: 3, scope: !11472)
!11490 = !DILocation(line: 4484, column: 3, scope: !11472)
!11491 = !DILocation(line: 4485, column: 1, scope: !11472)
!11492 = distinct !DISubprogram(name: "emit_conditional_move", scope: !3, file: !3, line: 4504, type: !11493, scopeLine: 4507, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11493 = !DISubroutineType(types: !11494)
!11494 = !{!2732, !2732, !384, !2732, !2732, !5, !2732, !2732, !5, !2756}
!11495 = !DILocalVariable(name: "target", arg: 1, scope: !11492, file: !3, line: 4504, type: !2732)
!11496 = !DILocation(line: 4504, column: 28, scope: !11492)
!11497 = !DILocalVariable(name: "code", arg: 2, scope: !11492, file: !3, line: 4504, type: !384)
!11498 = !DILocation(line: 4504, column: 50, scope: !11492)
!11499 = !DILocalVariable(name: "op0", arg: 3, scope: !11492, file: !3, line: 4504, type: !2732)
!11500 = !DILocation(line: 4504, column: 60, scope: !11492)
!11501 = !DILocalVariable(name: "op1", arg: 4, scope: !11492, file: !3, line: 4504, type: !2732)
!11502 = !DILocation(line: 4504, column: 69, scope: !11492)
!11503 = !DILocalVariable(name: "cmode", arg: 5, scope: !11492, file: !3, line: 4505, type: !5)
!11504 = !DILocation(line: 4505, column: 28, scope: !11492)
!11505 = !DILocalVariable(name: "op2", arg: 6, scope: !11492, file: !3, line: 4505, type: !2732)
!11506 = !DILocation(line: 4505, column: 39, scope: !11492)
!11507 = !DILocalVariable(name: "op3", arg: 7, scope: !11492, file: !3, line: 4505, type: !2732)
!11508 = !DILocation(line: 4505, column: 48, scope: !11492)
!11509 = !DILocalVariable(name: "mode", arg: 8, scope: !11492, file: !3, line: 4506, type: !5)
!11510 = !DILocation(line: 4506, column: 28, scope: !11492)
!11511 = !DILocalVariable(name: "unsignedp", arg: 9, scope: !11492, file: !3, line: 4506, type: !2756)
!11512 = !DILocation(line: 4506, column: 38, scope: !11492)
!11513 = !DILocalVariable(name: "tem", scope: !11492, file: !3, line: 4508, type: !2732)
!11514 = !DILocation(line: 4508, column: 7, scope: !11492)
!11515 = !DILocalVariable(name: "subtarget", scope: !11492, file: !3, line: 4508, type: !2732)
!11516 = !DILocation(line: 4508, column: 12, scope: !11492)
!11517 = !DILocalVariable(name: "comparison", scope: !11492, file: !3, line: 4508, type: !2732)
!11518 = !DILocation(line: 4508, column: 23, scope: !11492)
!11519 = !DILocalVariable(name: "insn", scope: !11492, file: !3, line: 4508, type: !2732)
!11520 = !DILocation(line: 4508, column: 35, scope: !11492)
!11521 = !DILocalVariable(name: "icode", scope: !11492, file: !3, line: 4509, type: !527)
!11522 = !DILocation(line: 4509, column: 18, scope: !11492)
!11523 = !DILocalVariable(name: "reversed", scope: !11492, file: !3, line: 4510, type: !384)
!11524 = !DILocation(line: 4510, column: 17, scope: !11492)
!11525 = !DILocation(line: 4515, column: 36, scope: !11526)
!11526 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4515, column: 7)
!11527 = !DILocation(line: 4515, column: 41, scope: !11526)
!11528 = !DILocation(line: 4515, column: 7, scope: !11526)
!11529 = !DILocation(line: 4515, column: 7, scope: !11492)
!11530 = !DILocation(line: 4517, column: 13, scope: !11531)
!11531 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 4516, column: 5)
!11532 = !DILocation(line: 4517, column: 11, scope: !11531)
!11533 = !DILocation(line: 4518, column: 13, scope: !11531)
!11534 = !DILocation(line: 4518, column: 11, scope: !11531)
!11535 = !DILocation(line: 4519, column: 13, scope: !11531)
!11536 = !DILocation(line: 4519, column: 11, scope: !11531)
!11537 = !DILocation(line: 4520, column: 30, scope: !11531)
!11538 = !DILocation(line: 4520, column: 14, scope: !11531)
!11539 = !DILocation(line: 4520, column: 12, scope: !11531)
!11540 = !DILocation(line: 4521, column: 5, scope: !11531)
!11541 = !DILocation(line: 4526, column: 7, scope: !11542)
!11542 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4526, column: 7)
!11543 = !DILocation(line: 4526, column: 12, scope: !11542)
!11544 = !DILocation(line: 4526, column: 18, scope: !11542)
!11545 = !DILocation(line: 4526, column: 21, scope: !11542)
!11546 = !DILocation(line: 4526, column: 28, scope: !11542)
!11547 = !DILocation(line: 4526, column: 25, scope: !11542)
!11548 = !DILocation(line: 4526, column: 7, scope: !11492)
!11549 = !DILocation(line: 4527, column: 10, scope: !11542)
!11550 = !DILocation(line: 4527, column: 22, scope: !11542)
!11551 = !DILocation(line: 4527, column: 20, scope: !11542)
!11552 = !DILocation(line: 4527, column: 5, scope: !11542)
!11553 = !DILocation(line: 4528, column: 12, scope: !11554)
!11554 = distinct !DILexicalBlock(scope: !11542, file: !3, line: 4528, column: 12)
!11555 = !DILocation(line: 4528, column: 17, scope: !11554)
!11556 = !DILocation(line: 4528, column: 23, scope: !11554)
!11557 = !DILocation(line: 4528, column: 26, scope: !11554)
!11558 = !DILocation(line: 4528, column: 33, scope: !11554)
!11559 = !DILocation(line: 4528, column: 30, scope: !11554)
!11560 = !DILocation(line: 4528, column: 12, scope: !11542)
!11561 = !DILocation(line: 4529, column: 10, scope: !11554)
!11562 = !DILocation(line: 4529, column: 22, scope: !11554)
!11563 = !DILocation(line: 4529, column: 20, scope: !11554)
!11564 = !DILocation(line: 4529, column: 5, scope: !11554)
!11565 = !DILocation(line: 4531, column: 7, scope: !11566)
!11566 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4531, column: 7)
!11567 = !DILocation(line: 4531, column: 13, scope: !11566)
!11568 = !DILocation(line: 4531, column: 7, scope: !11492)
!11569 = !DILocation(line: 4532, column: 13, scope: !11566)
!11570 = !DILocation(line: 4532, column: 11, scope: !11566)
!11571 = !DILocation(line: 4532, column: 5, scope: !11566)
!11572 = !DILocation(line: 4534, column: 36, scope: !11573)
!11573 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4534, column: 7)
!11574 = !DILocation(line: 4534, column: 41, scope: !11573)
!11575 = !DILocation(line: 4534, column: 7, scope: !11573)
!11576 = !DILocation(line: 4535, column: 7, scope: !11573)
!11577 = !DILocation(line: 4535, column: 55, scope: !11573)
!11578 = !DILocation(line: 4535, column: 61, scope: !11573)
!11579 = !DILocation(line: 4535, column: 66, scope: !11573)
!11580 = !DILocation(line: 4535, column: 23, scope: !11573)
!11581 = !DILocation(line: 4535, column: 21, scope: !11573)
!11582 = !DILocation(line: 4536, column: 11, scope: !11573)
!11583 = !DILocation(line: 4534, column: 7, scope: !11492)
!11584 = !DILocation(line: 4538, column: 13, scope: !11585)
!11585 = distinct !DILexicalBlock(scope: !11573, file: !3, line: 4537, column: 5)
!11586 = !DILocation(line: 4538, column: 11, scope: !11585)
!11587 = !DILocation(line: 4539, column: 13, scope: !11585)
!11588 = !DILocation(line: 4539, column: 11, scope: !11585)
!11589 = !DILocation(line: 4540, column: 13, scope: !11585)
!11590 = !DILocation(line: 4540, column: 11, scope: !11585)
!11591 = !DILocation(line: 4541, column: 14, scope: !11585)
!11592 = !DILocation(line: 4541, column: 12, scope: !11585)
!11593 = !DILocation(line: 4542, column: 5, scope: !11585)
!11594 = !DILocation(line: 4544, column: 7, scope: !11595)
!11595 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4544, column: 7)
!11596 = !DILocation(line: 4544, column: 12, scope: !11595)
!11597 = !DILocation(line: 4544, column: 7, scope: !11492)
!11598 = !DILocation(line: 4545, column: 12, scope: !11595)
!11599 = !DILocation(line: 4545, column: 10, scope: !11595)
!11600 = !DILocation(line: 4545, column: 5, scope: !11595)
!11601 = !DILocation(line: 4547, column: 26, scope: !11492)
!11602 = !DILocation(line: 4547, column: 11, scope: !11492)
!11603 = !DILocation(line: 4547, column: 9, scope: !11492)
!11604 = !DILocation(line: 4549, column: 7, scope: !11605)
!11605 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4549, column: 7)
!11606 = !DILocation(line: 4549, column: 13, scope: !11605)
!11607 = !DILocation(line: 4549, column: 7, scope: !11492)
!11608 = !DILocation(line: 4550, column: 5, scope: !11605)
!11609 = !DILocation(line: 4552, column: 8, scope: !11610)
!11610 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4552, column: 7)
!11611 = !DILocation(line: 4552, column: 7, scope: !11492)
!11612 = !DILocation(line: 4553, column: 27, scope: !11610)
!11613 = !DILocation(line: 4553, column: 14, scope: !11610)
!11614 = !DILocation(line: 4553, column: 12, scope: !11610)
!11615 = !DILocation(line: 4553, column: 5, scope: !11610)
!11616 = !DILocation(line: 4555, column: 15, scope: !11492)
!11617 = !DILocation(line: 4555, column: 13, scope: !11492)
!11618 = !DILocation(line: 4559, column: 18, scope: !11619)
!11619 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4559, column: 7)
!11620 = !DILocation(line: 4559, column: 8, scope: !11619)
!11621 = !DILocation(line: 4559, column: 25, scope: !11619)
!11622 = !DILocation(line: 4559, column: 36, scope: !11619)
!11623 = !DILocation(line: 4560, column: 8, scope: !11619)
!11624 = !DILocation(line: 4560, column: 29, scope: !11619)
!11625 = !DILocation(line: 4560, column: 19, scope: !11619)
!11626 = !DILocation(line: 4560, column: 36, scope: !11619)
!11627 = !DILocation(line: 4560, column: 47, scope: !11619)
!11628 = !DILocation(line: 4559, column: 7, scope: !11492)
!11629 = !DILocation(line: 4561, column: 40, scope: !11619)
!11630 = !DILocation(line: 4561, column: 30, scope: !11619)
!11631 = !DILocation(line: 4561, column: 47, scope: !11619)
!11632 = !DILocation(line: 4561, column: 58, scope: !11619)
!11633 = !DILocation(line: 4561, column: 17, scope: !11619)
!11634 = !DILocation(line: 4561, column: 15, scope: !11619)
!11635 = !DILocation(line: 4561, column: 5, scope: !11619)
!11636 = !DILocation(line: 4563, column: 18, scope: !11637)
!11637 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4563, column: 7)
!11638 = !DILocation(line: 4563, column: 8, scope: !11637)
!11639 = !DILocation(line: 4563, column: 25, scope: !11637)
!11640 = !DILocation(line: 4563, column: 36, scope: !11637)
!11641 = !DILocation(line: 4564, column: 8, scope: !11637)
!11642 = !DILocation(line: 4564, column: 23, scope: !11637)
!11643 = !DILocation(line: 4564, column: 13, scope: !11637)
!11644 = !DILocation(line: 4564, column: 30, scope: !11637)
!11645 = !DILocation(line: 4564, column: 41, scope: !11637)
!11646 = !DILocation(line: 4563, column: 7, scope: !11492)
!11647 = !DILocation(line: 4565, column: 39, scope: !11637)
!11648 = !DILocation(line: 4565, column: 29, scope: !11637)
!11649 = !DILocation(line: 4565, column: 46, scope: !11637)
!11650 = !DILocation(line: 4565, column: 57, scope: !11637)
!11651 = !DILocation(line: 4565, column: 63, scope: !11637)
!11652 = !DILocation(line: 4565, column: 11, scope: !11637)
!11653 = !DILocation(line: 4565, column: 9, scope: !11637)
!11654 = !DILocation(line: 4565, column: 5, scope: !11637)
!11655 = !DILocation(line: 4567, column: 18, scope: !11656)
!11656 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4567, column: 7)
!11657 = !DILocation(line: 4567, column: 8, scope: !11656)
!11658 = !DILocation(line: 4567, column: 25, scope: !11656)
!11659 = !DILocation(line: 4567, column: 36, scope: !11656)
!11660 = !DILocation(line: 4568, column: 8, scope: !11656)
!11661 = !DILocation(line: 4568, column: 23, scope: !11656)
!11662 = !DILocation(line: 4568, column: 13, scope: !11656)
!11663 = !DILocation(line: 4568, column: 30, scope: !11656)
!11664 = !DILocation(line: 4568, column: 41, scope: !11656)
!11665 = !DILocation(line: 4567, column: 7, scope: !11492)
!11666 = !DILocation(line: 4569, column: 39, scope: !11656)
!11667 = !DILocation(line: 4569, column: 29, scope: !11656)
!11668 = !DILocation(line: 4569, column: 46, scope: !11656)
!11669 = !DILocation(line: 4569, column: 57, scope: !11656)
!11670 = !DILocation(line: 4569, column: 63, scope: !11656)
!11671 = !DILocation(line: 4569, column: 11, scope: !11656)
!11672 = !DILocation(line: 4569, column: 9, scope: !11656)
!11673 = !DILocation(line: 4569, column: 5, scope: !11656)
!11674 = !DILocation(line: 4573, column: 10, scope: !11492)
!11675 = !DILocation(line: 4573, column: 42, scope: !11492)
!11676 = !DILocation(line: 4573, column: 22, scope: !11492)
!11677 = !DILocation(line: 4573, column: 50, scope: !11492)
!11678 = !DILocation(line: 4573, column: 8, scope: !11492)
!11679 = !DILocation(line: 4574, column: 41, scope: !11492)
!11680 = !DILocation(line: 4574, column: 57, scope: !11492)
!11681 = !DILocation(line: 4574, column: 64, scope: !11492)
!11682 = !DILocation(line: 4574, column: 69, scope: !11492)
!11683 = !DILocation(line: 4574, column: 16, scope: !11492)
!11684 = !DILocation(line: 4574, column: 14, scope: !11492)
!11685 = !DILocation(line: 4579, column: 8, scope: !11686)
!11686 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4579, column: 7)
!11687 = !DILocation(line: 4579, column: 7, scope: !11492)
!11688 = !DILocation(line: 4580, column: 5, scope: !11686)
!11689 = !DILocation(line: 4582, column: 3, scope: !11492)
!11690 = !DILocation(line: 4583, column: 3, scope: !11492)
!11691 = !DILocation(line: 4584, column: 21, scope: !11492)
!11692 = !DILocation(line: 4584, column: 43, scope: !11492)
!11693 = !DILocation(line: 4585, column: 7, scope: !11492)
!11694 = !DILocation(line: 4585, column: 40, scope: !11492)
!11695 = !DILocation(line: 4584, column: 3, scope: !11492)
!11696 = !DILocation(line: 4587, column: 8, scope: !11697)
!11697 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4587, column: 7)
!11698 = !DILocation(line: 4587, column: 7, scope: !11492)
!11699 = !DILocation(line: 4588, column: 10, scope: !11697)
!11700 = !DILocation(line: 4588, column: 5, scope: !11697)
!11701 = !DILocation(line: 4590, column: 12, scope: !11697)
!11702 = !DILocation(line: 4590, column: 29, scope: !11697)
!11703 = !DILocation(line: 4590, column: 40, scope: !11697)
!11704 = !DILocation(line: 4590, column: 52, scope: !11697)
!11705 = !DILocation(line: 4590, column: 57, scope: !11697)
!11706 = !DILocation(line: 4590, column: 10, scope: !11697)
!11707 = !DILocation(line: 4593, column: 7, scope: !11708)
!11708 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4593, column: 7)
!11709 = !DILocation(line: 4593, column: 12, scope: !11708)
!11710 = !DILocation(line: 4593, column: 7, scope: !11492)
!11711 = !DILocation(line: 4595, column: 7, scope: !11712)
!11712 = distinct !DILexicalBlock(scope: !11708, file: !3, line: 4594, column: 5)
!11713 = !DILocation(line: 4596, column: 7, scope: !11712)
!11714 = !DILocation(line: 4599, column: 14, scope: !11492)
!11715 = !DILocation(line: 4599, column: 3, scope: !11492)
!11716 = !DILocation(line: 4600, column: 10, scope: !11492)
!11717 = !DILocation(line: 4600, column: 8, scope: !11492)
!11718 = !DILocation(line: 4601, column: 3, scope: !11492)
!11719 = !DILocation(line: 4602, column: 14, scope: !11492)
!11720 = !DILocation(line: 4602, column: 3, scope: !11492)
!11721 = !DILocation(line: 4603, column: 7, scope: !11722)
!11722 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 4603, column: 7)
!11723 = !DILocation(line: 4603, column: 20, scope: !11722)
!11724 = !DILocation(line: 4603, column: 17, scope: !11722)
!11725 = !DILocation(line: 4603, column: 7, scope: !11492)
!11726 = !DILocation(line: 4604, column: 19, scope: !11722)
!11727 = !DILocation(line: 4604, column: 27, scope: !11722)
!11728 = !DILocation(line: 4604, column: 5, scope: !11722)
!11729 = !DILocation(line: 4606, column: 10, scope: !11492)
!11730 = !DILocation(line: 4606, column: 3, scope: !11492)
!11731 = !DILocation(line: 4607, column: 1, scope: !11492)
!11732 = distinct !DISubprogram(name: "can_conditionally_move_p", scope: !3, file: !3, line: 4618, type: !11733, scopeLine: 4619, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11733 = !DISubroutineType(types: !11734)
!11734 = !{!2756, !5}
!11735 = !DILocalVariable(name: "mode", arg: 1, scope: !11732, file: !3, line: 4618, type: !5)
!11736 = !DILocation(line: 4618, column: 45, scope: !11732)
!11737 = !DILocation(line: 4620, column: 22, scope: !11738)
!11738 = distinct !DILexicalBlock(scope: !11732, file: !3, line: 4620, column: 7)
!11739 = !DILocation(line: 4620, column: 7, scope: !11738)
!11740 = !DILocation(line: 4620, column: 28, scope: !11738)
!11741 = !DILocation(line: 4620, column: 7, scope: !11732)
!11742 = !DILocation(line: 4621, column: 5, scope: !11738)
!11743 = !DILocation(line: 4623, column: 3, scope: !11732)
!11744 = !DILocation(line: 4624, column: 1, scope: !11732)
!11745 = distinct !DISubprogram(name: "emit_conditional_add", scope: !3, file: !3, line: 4643, type: !11493, scopeLine: 4646, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11746 = !DILocalVariable(name: "target", arg: 1, scope: !11745, file: !3, line: 4643, type: !2732)
!11747 = !DILocation(line: 4643, column: 27, scope: !11745)
!11748 = !DILocalVariable(name: "code", arg: 2, scope: !11745, file: !3, line: 4643, type: !384)
!11749 = !DILocation(line: 4643, column: 49, scope: !11745)
!11750 = !DILocalVariable(name: "op0", arg: 3, scope: !11745, file: !3, line: 4643, type: !2732)
!11751 = !DILocation(line: 4643, column: 59, scope: !11745)
!11752 = !DILocalVariable(name: "op1", arg: 4, scope: !11745, file: !3, line: 4643, type: !2732)
!11753 = !DILocation(line: 4643, column: 68, scope: !11745)
!11754 = !DILocalVariable(name: "cmode", arg: 5, scope: !11745, file: !3, line: 4644, type: !5)
!11755 = !DILocation(line: 4644, column: 27, scope: !11745)
!11756 = !DILocalVariable(name: "op2", arg: 6, scope: !11745, file: !3, line: 4644, type: !2732)
!11757 = !DILocation(line: 4644, column: 38, scope: !11745)
!11758 = !DILocalVariable(name: "op3", arg: 7, scope: !11745, file: !3, line: 4644, type: !2732)
!11759 = !DILocation(line: 4644, column: 47, scope: !11745)
!11760 = !DILocalVariable(name: "mode", arg: 8, scope: !11745, file: !3, line: 4645, type: !5)
!11761 = !DILocation(line: 4645, column: 27, scope: !11745)
!11762 = !DILocalVariable(name: "unsignedp", arg: 9, scope: !11745, file: !3, line: 4645, type: !2756)
!11763 = !DILocation(line: 4645, column: 37, scope: !11745)
!11764 = !DILocalVariable(name: "tem", scope: !11745, file: !3, line: 4647, type: !2732)
!11765 = !DILocation(line: 4647, column: 7, scope: !11745)
!11766 = !DILocalVariable(name: "subtarget", scope: !11745, file: !3, line: 4647, type: !2732)
!11767 = !DILocation(line: 4647, column: 12, scope: !11745)
!11768 = !DILocalVariable(name: "comparison", scope: !11745, file: !3, line: 4647, type: !2732)
!11769 = !DILocation(line: 4647, column: 23, scope: !11745)
!11770 = !DILocalVariable(name: "insn", scope: !11745, file: !3, line: 4647, type: !2732)
!11771 = !DILocation(line: 4647, column: 35, scope: !11745)
!11772 = !DILocalVariable(name: "icode", scope: !11745, file: !3, line: 4648, type: !527)
!11773 = !DILocation(line: 4648, column: 18, scope: !11745)
!11774 = !DILocalVariable(name: "reversed", scope: !11745, file: !3, line: 4649, type: !384)
!11775 = !DILocation(line: 4649, column: 17, scope: !11745)
!11776 = !DILocation(line: 4654, column: 36, scope: !11777)
!11777 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4654, column: 7)
!11778 = !DILocation(line: 4654, column: 41, scope: !11777)
!11779 = !DILocation(line: 4654, column: 7, scope: !11777)
!11780 = !DILocation(line: 4654, column: 7, scope: !11745)
!11781 = !DILocation(line: 4656, column: 13, scope: !11782)
!11782 = distinct !DILexicalBlock(scope: !11777, file: !3, line: 4655, column: 5)
!11783 = !DILocation(line: 4656, column: 11, scope: !11782)
!11784 = !DILocation(line: 4657, column: 13, scope: !11782)
!11785 = !DILocation(line: 4657, column: 11, scope: !11782)
!11786 = !DILocation(line: 4658, column: 13, scope: !11782)
!11787 = !DILocation(line: 4658, column: 11, scope: !11782)
!11788 = !DILocation(line: 4659, column: 30, scope: !11782)
!11789 = !DILocation(line: 4659, column: 14, scope: !11782)
!11790 = !DILocation(line: 4659, column: 12, scope: !11782)
!11791 = !DILocation(line: 4660, column: 5, scope: !11782)
!11792 = !DILocation(line: 4665, column: 7, scope: !11793)
!11793 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4665, column: 7)
!11794 = !DILocation(line: 4665, column: 12, scope: !11793)
!11795 = !DILocation(line: 4665, column: 18, scope: !11793)
!11796 = !DILocation(line: 4665, column: 21, scope: !11793)
!11797 = !DILocation(line: 4665, column: 28, scope: !11793)
!11798 = !DILocation(line: 4665, column: 25, scope: !11793)
!11799 = !DILocation(line: 4665, column: 7, scope: !11745)
!11800 = !DILocation(line: 4666, column: 10, scope: !11793)
!11801 = !DILocation(line: 4666, column: 22, scope: !11793)
!11802 = !DILocation(line: 4666, column: 20, scope: !11793)
!11803 = !DILocation(line: 4666, column: 5, scope: !11793)
!11804 = !DILocation(line: 4667, column: 12, scope: !11805)
!11805 = distinct !DILexicalBlock(scope: !11793, file: !3, line: 4667, column: 12)
!11806 = !DILocation(line: 4667, column: 17, scope: !11805)
!11807 = !DILocation(line: 4667, column: 23, scope: !11805)
!11808 = !DILocation(line: 4667, column: 26, scope: !11805)
!11809 = !DILocation(line: 4667, column: 33, scope: !11805)
!11810 = !DILocation(line: 4667, column: 30, scope: !11805)
!11811 = !DILocation(line: 4667, column: 12, scope: !11793)
!11812 = !DILocation(line: 4668, column: 10, scope: !11805)
!11813 = !DILocation(line: 4668, column: 22, scope: !11805)
!11814 = !DILocation(line: 4668, column: 20, scope: !11805)
!11815 = !DILocation(line: 4668, column: 5, scope: !11805)
!11816 = !DILocation(line: 4670, column: 7, scope: !11817)
!11817 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4670, column: 7)
!11818 = !DILocation(line: 4670, column: 13, scope: !11817)
!11819 = !DILocation(line: 4670, column: 7, scope: !11745)
!11820 = !DILocation(line: 4671, column: 13, scope: !11817)
!11821 = !DILocation(line: 4671, column: 11, scope: !11817)
!11822 = !DILocation(line: 4671, column: 5, scope: !11817)
!11823 = !DILocation(line: 4673, column: 36, scope: !11824)
!11824 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4673, column: 7)
!11825 = !DILocation(line: 4673, column: 41, scope: !11824)
!11826 = !DILocation(line: 4673, column: 7, scope: !11824)
!11827 = !DILocation(line: 4674, column: 7, scope: !11824)
!11828 = !DILocation(line: 4674, column: 55, scope: !11824)
!11829 = !DILocation(line: 4674, column: 61, scope: !11824)
!11830 = !DILocation(line: 4674, column: 66, scope: !11824)
!11831 = !DILocation(line: 4674, column: 23, scope: !11824)
!11832 = !DILocation(line: 4674, column: 21, scope: !11824)
!11833 = !DILocation(line: 4675, column: 11, scope: !11824)
!11834 = !DILocation(line: 4673, column: 7, scope: !11745)
!11835 = !DILocation(line: 4677, column: 13, scope: !11836)
!11836 = distinct !DILexicalBlock(scope: !11824, file: !3, line: 4676, column: 5)
!11837 = !DILocation(line: 4677, column: 11, scope: !11836)
!11838 = !DILocation(line: 4678, column: 13, scope: !11836)
!11839 = !DILocation(line: 4678, column: 11, scope: !11836)
!11840 = !DILocation(line: 4679, column: 13, scope: !11836)
!11841 = !DILocation(line: 4679, column: 11, scope: !11836)
!11842 = !DILocation(line: 4680, column: 14, scope: !11836)
!11843 = !DILocation(line: 4680, column: 12, scope: !11836)
!11844 = !DILocation(line: 4681, column: 5, scope: !11836)
!11845 = !DILocation(line: 4683, column: 7, scope: !11846)
!11846 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4683, column: 7)
!11847 = !DILocation(line: 4683, column: 12, scope: !11846)
!11848 = !DILocation(line: 4683, column: 7, scope: !11745)
!11849 = !DILocation(line: 4684, column: 12, scope: !11846)
!11850 = !DILocation(line: 4684, column: 10, scope: !11846)
!11851 = !DILocation(line: 4684, column: 5, scope: !11846)
!11852 = !DILocation(line: 4686, column: 11, scope: !11745)
!11853 = !DILocation(line: 4686, column: 46, scope: !11745)
!11854 = !DILocation(line: 4686, column: 9, scope: !11745)
!11855 = !DILocation(line: 4688, column: 7, scope: !11856)
!11856 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4688, column: 7)
!11857 = !DILocation(line: 4688, column: 13, scope: !11856)
!11858 = !DILocation(line: 4688, column: 7, scope: !11745)
!11859 = !DILocation(line: 4689, column: 5, scope: !11856)
!11860 = !DILocation(line: 4691, column: 8, scope: !11861)
!11861 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4691, column: 7)
!11862 = !DILocation(line: 4691, column: 7, scope: !11745)
!11863 = !DILocation(line: 4692, column: 27, scope: !11861)
!11864 = !DILocation(line: 4692, column: 14, scope: !11861)
!11865 = !DILocation(line: 4692, column: 12, scope: !11861)
!11866 = !DILocation(line: 4692, column: 5, scope: !11861)
!11867 = !DILocation(line: 4696, column: 18, scope: !11868)
!11868 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4696, column: 7)
!11869 = !DILocation(line: 4696, column: 8, scope: !11868)
!11870 = !DILocation(line: 4696, column: 25, scope: !11868)
!11871 = !DILocation(line: 4696, column: 36, scope: !11868)
!11872 = !DILocation(line: 4697, column: 8, scope: !11868)
!11873 = !DILocation(line: 4697, column: 26, scope: !11868)
!11874 = !DILocation(line: 4697, column: 16, scope: !11868)
!11875 = !DILocation(line: 4697, column: 33, scope: !11868)
!11876 = !DILocation(line: 4697, column: 44, scope: !11868)
!11877 = !DILocation(line: 4696, column: 7, scope: !11745)
!11878 = !DILocation(line: 4698, column: 40, scope: !11868)
!11879 = !DILocation(line: 4698, column: 30, scope: !11868)
!11880 = !DILocation(line: 4698, column: 47, scope: !11868)
!11881 = !DILocation(line: 4698, column: 58, scope: !11868)
!11882 = !DILocation(line: 4698, column: 17, scope: !11868)
!11883 = !DILocation(line: 4698, column: 15, scope: !11868)
!11884 = !DILocation(line: 4698, column: 5, scope: !11868)
!11885 = !DILocation(line: 4700, column: 17, scope: !11868)
!11886 = !DILocation(line: 4700, column: 15, scope: !11868)
!11887 = !DILocation(line: 4702, column: 18, scope: !11888)
!11888 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4702, column: 7)
!11889 = !DILocation(line: 4702, column: 8, scope: !11888)
!11890 = !DILocation(line: 4702, column: 25, scope: !11888)
!11891 = !DILocation(line: 4702, column: 36, scope: !11888)
!11892 = !DILocation(line: 4703, column: 8, scope: !11888)
!11893 = !DILocation(line: 4703, column: 23, scope: !11888)
!11894 = !DILocation(line: 4703, column: 13, scope: !11888)
!11895 = !DILocation(line: 4703, column: 30, scope: !11888)
!11896 = !DILocation(line: 4703, column: 41, scope: !11888)
!11897 = !DILocation(line: 4702, column: 7, scope: !11745)
!11898 = !DILocation(line: 4704, column: 39, scope: !11888)
!11899 = !DILocation(line: 4704, column: 29, scope: !11888)
!11900 = !DILocation(line: 4704, column: 46, scope: !11888)
!11901 = !DILocation(line: 4704, column: 57, scope: !11888)
!11902 = !DILocation(line: 4704, column: 63, scope: !11888)
!11903 = !DILocation(line: 4704, column: 11, scope: !11888)
!11904 = !DILocation(line: 4704, column: 9, scope: !11888)
!11905 = !DILocation(line: 4704, column: 5, scope: !11888)
!11906 = !DILocation(line: 4706, column: 18, scope: !11907)
!11907 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4706, column: 7)
!11908 = !DILocation(line: 4706, column: 8, scope: !11907)
!11909 = !DILocation(line: 4706, column: 25, scope: !11907)
!11910 = !DILocation(line: 4706, column: 36, scope: !11907)
!11911 = !DILocation(line: 4707, column: 8, scope: !11907)
!11912 = !DILocation(line: 4707, column: 23, scope: !11907)
!11913 = !DILocation(line: 4707, column: 13, scope: !11907)
!11914 = !DILocation(line: 4707, column: 30, scope: !11907)
!11915 = !DILocation(line: 4707, column: 41, scope: !11907)
!11916 = !DILocation(line: 4706, column: 7, scope: !11745)
!11917 = !DILocation(line: 4708, column: 39, scope: !11907)
!11918 = !DILocation(line: 4708, column: 29, scope: !11907)
!11919 = !DILocation(line: 4708, column: 46, scope: !11907)
!11920 = !DILocation(line: 4708, column: 57, scope: !11907)
!11921 = !DILocation(line: 4708, column: 63, scope: !11907)
!11922 = !DILocation(line: 4708, column: 11, scope: !11907)
!11923 = !DILocation(line: 4708, column: 9, scope: !11907)
!11924 = !DILocation(line: 4708, column: 5, scope: !11907)
!11925 = !DILocation(line: 4712, column: 10, scope: !11745)
!11926 = !DILocation(line: 4712, column: 42, scope: !11745)
!11927 = !DILocation(line: 4712, column: 22, scope: !11745)
!11928 = !DILocation(line: 4712, column: 50, scope: !11745)
!11929 = !DILocation(line: 4712, column: 8, scope: !11745)
!11930 = !DILocation(line: 4713, column: 41, scope: !11745)
!11931 = !DILocation(line: 4713, column: 57, scope: !11745)
!11932 = !DILocation(line: 4713, column: 64, scope: !11745)
!11933 = !DILocation(line: 4713, column: 69, scope: !11745)
!11934 = !DILocation(line: 4713, column: 16, scope: !11745)
!11935 = !DILocation(line: 4713, column: 14, scope: !11745)
!11936 = !DILocation(line: 4718, column: 8, scope: !11937)
!11937 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4718, column: 7)
!11938 = !DILocation(line: 4718, column: 7, scope: !11745)
!11939 = !DILocation(line: 4719, column: 5, scope: !11937)
!11940 = !DILocation(line: 4721, column: 3, scope: !11745)
!11941 = !DILocation(line: 4722, column: 3, scope: !11745)
!11942 = !DILocation(line: 4723, column: 21, scope: !11745)
!11943 = !DILocation(line: 4723, column: 43, scope: !11745)
!11944 = !DILocation(line: 4724, column: 21, scope: !11745)
!11945 = !DILocation(line: 4724, column: 54, scope: !11745)
!11946 = !DILocation(line: 4723, column: 3, scope: !11745)
!11947 = !DILocation(line: 4726, column: 8, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4726, column: 7)
!11949 = !DILocation(line: 4726, column: 7, scope: !11745)
!11950 = !DILocation(line: 4727, column: 10, scope: !11948)
!11951 = !DILocation(line: 4727, column: 5, scope: !11948)
!11952 = !DILocation(line: 4729, column: 12, scope: !11948)
!11953 = !DILocation(line: 4729, column: 29, scope: !11948)
!11954 = !DILocation(line: 4729, column: 40, scope: !11948)
!11955 = !DILocation(line: 4729, column: 52, scope: !11948)
!11956 = !DILocation(line: 4729, column: 57, scope: !11948)
!11957 = !DILocation(line: 4729, column: 10, scope: !11948)
!11958 = !DILocation(line: 4732, column: 7, scope: !11959)
!11959 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4732, column: 7)
!11960 = !DILocation(line: 4732, column: 12, scope: !11959)
!11961 = !DILocation(line: 4732, column: 7, scope: !11745)
!11962 = !DILocation(line: 4734, column: 7, scope: !11963)
!11963 = distinct !DILexicalBlock(scope: !11959, file: !3, line: 4733, column: 5)
!11964 = !DILocation(line: 4735, column: 7, scope: !11963)
!11965 = !DILocation(line: 4738, column: 14, scope: !11745)
!11966 = !DILocation(line: 4738, column: 3, scope: !11745)
!11967 = !DILocation(line: 4739, column: 10, scope: !11745)
!11968 = !DILocation(line: 4739, column: 8, scope: !11745)
!11969 = !DILocation(line: 4740, column: 3, scope: !11745)
!11970 = !DILocation(line: 4741, column: 14, scope: !11745)
!11971 = !DILocation(line: 4741, column: 3, scope: !11745)
!11972 = !DILocation(line: 4742, column: 7, scope: !11973)
!11973 = distinct !DILexicalBlock(scope: !11745, file: !3, line: 4742, column: 7)
!11974 = !DILocation(line: 4742, column: 20, scope: !11973)
!11975 = !DILocation(line: 4742, column: 17, scope: !11973)
!11976 = !DILocation(line: 4742, column: 7, scope: !11745)
!11977 = !DILocation(line: 4743, column: 19, scope: !11973)
!11978 = !DILocation(line: 4743, column: 27, scope: !11973)
!11979 = !DILocation(line: 4743, column: 5, scope: !11973)
!11980 = !DILocation(line: 4745, column: 10, scope: !11745)
!11981 = !DILocation(line: 4745, column: 3, scope: !11745)
!11982 = !DILocation(line: 4746, column: 1, scope: !11745)
!11983 = distinct !DISubprogram(name: "gen_add2_insn", scope: !3, file: !3, line: 4755, type: !11984, scopeLine: 4756, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!11984 = !DISubroutineType(types: !11985)
!11985 = !{!2732, !2732, !2732}
!11986 = !DILocalVariable(name: "x", arg: 1, scope: !11983, file: !3, line: 4755, type: !2732)
!11987 = !DILocation(line: 4755, column: 20, scope: !11983)
!11988 = !DILocalVariable(name: "y", arg: 2, scope: !11983, file: !3, line: 4755, type: !2732)
!11989 = !DILocation(line: 4755, column: 27, scope: !11983)
!11990 = !DILocalVariable(name: "icode", scope: !11983, file: !3, line: 4757, type: !2756)
!11991 = !DILocation(line: 4757, column: 7, scope: !11983)
!11992 = !DILocation(line: 4757, column: 21, scope: !11983)
!11993 = !DILocation(line: 4757, column: 62, scope: !11983)
!11994 = !DILocation(line: 4759, column: 3, scope: !11983)
!11995 = !DILocation(line: 4761, column: 3, scope: !11983)
!11996 = !DILocation(line: 4763, column: 3, scope: !11983)
!11997 = !DILocation(line: 4766, column: 10, scope: !11983)
!11998 = !DILocation(line: 4766, column: 27, scope: !11983)
!11999 = !DILocation(line: 4766, column: 30, scope: !11983)
!12000 = !DILocation(line: 4766, column: 33, scope: !11983)
!12001 = !DILocation(line: 4766, column: 3, scope: !11983)
!12002 = distinct !DISubprogram(name: "gen_add3_insn", scope: !3, file: !3, line: 4773, type: !10003, scopeLine: 4774, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12003 = !DILocalVariable(name: "r0", arg: 1, scope: !12002, file: !3, line: 4773, type: !2732)
!12004 = !DILocation(line: 4773, column: 20, scope: !12002)
!12005 = !DILocalVariable(name: "r1", arg: 2, scope: !12002, file: !3, line: 4773, type: !2732)
!12006 = !DILocation(line: 4773, column: 28, scope: !12002)
!12007 = !DILocalVariable(name: "c", arg: 3, scope: !12002, file: !3, line: 4773, type: !2732)
!12008 = !DILocation(line: 4773, column: 36, scope: !12002)
!12009 = !DILocalVariable(name: "icode", scope: !12002, file: !3, line: 4775, type: !2756)
!12010 = !DILocation(line: 4775, column: 7, scope: !12002)
!12011 = !DILocation(line: 4775, column: 21, scope: !12002)
!12012 = !DILocation(line: 4775, column: 63, scope: !12002)
!12013 = !DILocation(line: 4777, column: 7, scope: !12014)
!12014 = distinct !DILexicalBlock(scope: !12002, file: !3, line: 4777, column: 7)
!12015 = !DILocation(line: 4777, column: 13, scope: !12014)
!12016 = !DILocation(line: 4778, column: 7, scope: !12014)
!12017 = !DILocation(line: 4778, column: 22, scope: !12014)
!12018 = !DILocation(line: 4778, column: 12, scope: !12014)
!12019 = !DILocation(line: 4778, column: 29, scope: !12014)
!12020 = !DILocation(line: 4778, column: 40, scope: !12014)
!12021 = !DILocation(line: 4779, column: 6, scope: !12014)
!12022 = !DILocation(line: 4779, column: 20, scope: !12014)
!12023 = !DILocation(line: 4779, column: 10, scope: !12014)
!12024 = !DILocation(line: 4779, column: 27, scope: !12014)
!12025 = !DILocation(line: 4779, column: 38, scope: !12014)
!12026 = !DILocation(line: 4780, column: 7, scope: !12014)
!12027 = !DILocation(line: 4780, column: 22, scope: !12014)
!12028 = !DILocation(line: 4780, column: 12, scope: !12014)
!12029 = !DILocation(line: 4780, column: 29, scope: !12014)
!12030 = !DILocation(line: 4780, column: 40, scope: !12014)
!12031 = !DILocation(line: 4781, column: 6, scope: !12014)
!12032 = !DILocation(line: 4781, column: 20, scope: !12014)
!12033 = !DILocation(line: 4781, column: 10, scope: !12014)
!12034 = !DILocation(line: 4781, column: 27, scope: !12014)
!12035 = !DILocation(line: 4781, column: 38, scope: !12014)
!12036 = !DILocation(line: 4782, column: 7, scope: !12014)
!12037 = !DILocation(line: 4782, column: 22, scope: !12014)
!12038 = !DILocation(line: 4782, column: 12, scope: !12014)
!12039 = !DILocation(line: 4782, column: 29, scope: !12014)
!12040 = !DILocation(line: 4782, column: 40, scope: !12014)
!12041 = !DILocation(line: 4783, column: 6, scope: !12014)
!12042 = !DILocation(line: 4783, column: 19, scope: !12014)
!12043 = !DILocation(line: 4783, column: 9, scope: !12014)
!12044 = !DILocation(line: 4783, column: 26, scope: !12014)
!12045 = !DILocation(line: 4783, column: 37, scope: !12014)
!12046 = !DILocation(line: 4777, column: 7, scope: !12002)
!12047 = !DILocation(line: 4784, column: 5, scope: !12014)
!12048 = !DILocation(line: 4786, column: 10, scope: !12002)
!12049 = !DILocation(line: 4786, column: 27, scope: !12002)
!12050 = !DILocation(line: 4786, column: 31, scope: !12002)
!12051 = !DILocation(line: 4786, column: 35, scope: !12002)
!12052 = !DILocation(line: 4786, column: 3, scope: !12002)
!12053 = !DILocation(line: 4787, column: 1, scope: !12002)
!12054 = distinct !DISubprogram(name: "have_add2_insn", scope: !3, file: !3, line: 4790, type: !12055, scopeLine: 4791, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12055 = !DISubroutineType(types: !12056)
!12056 = !{!2756, !2732, !2732}
!12057 = !DILocalVariable(name: "x", arg: 1, scope: !12054, file: !3, line: 4790, type: !2732)
!12058 = !DILocation(line: 4790, column: 21, scope: !12054)
!12059 = !DILocalVariable(name: "y", arg: 2, scope: !12054, file: !3, line: 4790, type: !2732)
!12060 = !DILocation(line: 4790, column: 28, scope: !12054)
!12061 = !DILocalVariable(name: "icode", scope: !12054, file: !3, line: 4792, type: !2756)
!12062 = !DILocation(line: 4792, column: 7, scope: !12054)
!12063 = !DILocation(line: 4794, column: 3, scope: !12054)
!12064 = !DILocation(line: 4796, column: 17, scope: !12054)
!12065 = !DILocation(line: 4796, column: 58, scope: !12054)
!12066 = !DILocation(line: 4796, column: 9, scope: !12054)
!12067 = !DILocation(line: 4798, column: 7, scope: !12068)
!12068 = distinct !DILexicalBlock(scope: !12054, file: !3, line: 4798, column: 7)
!12069 = !DILocation(line: 4798, column: 13, scope: !12068)
!12070 = !DILocation(line: 4798, column: 7, scope: !12054)
!12071 = !DILocation(line: 4799, column: 5, scope: !12068)
!12072 = !DILocation(line: 4801, column: 19, scope: !12073)
!12073 = distinct !DILexicalBlock(scope: !12054, file: !3, line: 4801, column: 7)
!12074 = !DILocation(line: 4801, column: 9, scope: !12073)
!12075 = !DILocation(line: 4801, column: 26, scope: !12073)
!12076 = !DILocation(line: 4801, column: 37, scope: !12073)
!12077 = !DILocation(line: 4802, column: 3, scope: !12073)
!12078 = !DILocation(line: 4802, column: 16, scope: !12073)
!12079 = !DILocation(line: 4802, column: 6, scope: !12073)
!12080 = !DILocation(line: 4802, column: 23, scope: !12073)
!12081 = !DILocation(line: 4802, column: 34, scope: !12073)
!12082 = !DILocation(line: 4803, column: 7, scope: !12073)
!12083 = !DILocation(line: 4803, column: 22, scope: !12073)
!12084 = !DILocation(line: 4803, column: 12, scope: !12073)
!12085 = !DILocation(line: 4803, column: 29, scope: !12073)
!12086 = !DILocation(line: 4803, column: 40, scope: !12073)
!12087 = !DILocation(line: 4804, column: 6, scope: !12073)
!12088 = !DILocation(line: 4804, column: 19, scope: !12073)
!12089 = !DILocation(line: 4804, column: 9, scope: !12073)
!12090 = !DILocation(line: 4804, column: 26, scope: !12073)
!12091 = !DILocation(line: 4804, column: 37, scope: !12073)
!12092 = !DILocation(line: 4805, column: 7, scope: !12073)
!12093 = !DILocation(line: 4805, column: 22, scope: !12073)
!12094 = !DILocation(line: 4805, column: 12, scope: !12073)
!12095 = !DILocation(line: 4805, column: 29, scope: !12073)
!12096 = !DILocation(line: 4805, column: 40, scope: !12073)
!12097 = !DILocation(line: 4806, column: 6, scope: !12073)
!12098 = !DILocation(line: 4806, column: 19, scope: !12073)
!12099 = !DILocation(line: 4806, column: 9, scope: !12073)
!12100 = !DILocation(line: 4806, column: 26, scope: !12073)
!12101 = !DILocation(line: 4806, column: 37, scope: !12073)
!12102 = !DILocation(line: 4801, column: 7, scope: !12054)
!12103 = !DILocation(line: 4807, column: 5, scope: !12073)
!12104 = !DILocation(line: 4809, column: 3, scope: !12054)
!12105 = !DILocation(line: 4810, column: 1, scope: !12054)
!12106 = distinct !DISubprogram(name: "gen_sub2_insn", scope: !3, file: !3, line: 4815, type: !11984, scopeLine: 4816, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12107 = !DILocalVariable(name: "x", arg: 1, scope: !12106, file: !3, line: 4815, type: !2732)
!12108 = !DILocation(line: 4815, column: 20, scope: !12106)
!12109 = !DILocalVariable(name: "y", arg: 2, scope: !12106, file: !3, line: 4815, type: !2732)
!12110 = !DILocation(line: 4815, column: 27, scope: !12106)
!12111 = !DILocalVariable(name: "icode", scope: !12106, file: !3, line: 4817, type: !2756)
!12112 = !DILocation(line: 4817, column: 7, scope: !12106)
!12113 = !DILocation(line: 4817, column: 21, scope: !12106)
!12114 = !DILocation(line: 4817, column: 62, scope: !12106)
!12115 = !DILocation(line: 4819, column: 3, scope: !12106)
!12116 = !DILocation(line: 4821, column: 3, scope: !12106)
!12117 = !DILocation(line: 4823, column: 3, scope: !12106)
!12118 = !DILocation(line: 4826, column: 10, scope: !12106)
!12119 = !DILocation(line: 4826, column: 27, scope: !12106)
!12120 = !DILocation(line: 4826, column: 30, scope: !12106)
!12121 = !DILocation(line: 4826, column: 33, scope: !12106)
!12122 = !DILocation(line: 4826, column: 3, scope: !12106)
!12123 = distinct !DISubprogram(name: "gen_sub3_insn", scope: !3, file: !3, line: 4833, type: !10003, scopeLine: 4834, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12124 = !DILocalVariable(name: "r0", arg: 1, scope: !12123, file: !3, line: 4833, type: !2732)
!12125 = !DILocation(line: 4833, column: 20, scope: !12123)
!12126 = !DILocalVariable(name: "r1", arg: 2, scope: !12123, file: !3, line: 4833, type: !2732)
!12127 = !DILocation(line: 4833, column: 28, scope: !12123)
!12128 = !DILocalVariable(name: "c", arg: 3, scope: !12123, file: !3, line: 4833, type: !2732)
!12129 = !DILocation(line: 4833, column: 36, scope: !12123)
!12130 = !DILocalVariable(name: "icode", scope: !12123, file: !3, line: 4835, type: !2756)
!12131 = !DILocation(line: 4835, column: 7, scope: !12123)
!12132 = !DILocation(line: 4835, column: 21, scope: !12123)
!12133 = !DILocation(line: 4835, column: 63, scope: !12123)
!12134 = !DILocation(line: 4837, column: 7, scope: !12135)
!12135 = distinct !DILexicalBlock(scope: !12123, file: !3, line: 4837, column: 7)
!12136 = !DILocation(line: 4837, column: 13, scope: !12135)
!12137 = !DILocation(line: 4838, column: 7, scope: !12135)
!12138 = !DILocation(line: 4838, column: 22, scope: !12135)
!12139 = !DILocation(line: 4838, column: 12, scope: !12135)
!12140 = !DILocation(line: 4838, column: 29, scope: !12135)
!12141 = !DILocation(line: 4838, column: 40, scope: !12135)
!12142 = !DILocation(line: 4839, column: 6, scope: !12135)
!12143 = !DILocation(line: 4839, column: 20, scope: !12135)
!12144 = !DILocation(line: 4839, column: 10, scope: !12135)
!12145 = !DILocation(line: 4839, column: 27, scope: !12135)
!12146 = !DILocation(line: 4839, column: 38, scope: !12135)
!12147 = !DILocation(line: 4840, column: 7, scope: !12135)
!12148 = !DILocation(line: 4840, column: 22, scope: !12135)
!12149 = !DILocation(line: 4840, column: 12, scope: !12135)
!12150 = !DILocation(line: 4840, column: 29, scope: !12135)
!12151 = !DILocation(line: 4840, column: 40, scope: !12135)
!12152 = !DILocation(line: 4841, column: 6, scope: !12135)
!12153 = !DILocation(line: 4841, column: 20, scope: !12135)
!12154 = !DILocation(line: 4841, column: 10, scope: !12135)
!12155 = !DILocation(line: 4841, column: 27, scope: !12135)
!12156 = !DILocation(line: 4841, column: 38, scope: !12135)
!12157 = !DILocation(line: 4842, column: 7, scope: !12135)
!12158 = !DILocation(line: 4842, column: 22, scope: !12135)
!12159 = !DILocation(line: 4842, column: 12, scope: !12135)
!12160 = !DILocation(line: 4842, column: 29, scope: !12135)
!12161 = !DILocation(line: 4842, column: 40, scope: !12135)
!12162 = !DILocation(line: 4843, column: 6, scope: !12135)
!12163 = !DILocation(line: 4843, column: 19, scope: !12135)
!12164 = !DILocation(line: 4843, column: 9, scope: !12135)
!12165 = !DILocation(line: 4843, column: 26, scope: !12135)
!12166 = !DILocation(line: 4843, column: 37, scope: !12135)
!12167 = !DILocation(line: 4837, column: 7, scope: !12123)
!12168 = !DILocation(line: 4844, column: 5, scope: !12135)
!12169 = !DILocation(line: 4846, column: 10, scope: !12123)
!12170 = !DILocation(line: 4846, column: 27, scope: !12123)
!12171 = !DILocation(line: 4846, column: 31, scope: !12123)
!12172 = !DILocation(line: 4846, column: 35, scope: !12123)
!12173 = !DILocation(line: 4846, column: 3, scope: !12123)
!12174 = !DILocation(line: 4847, column: 1, scope: !12123)
!12175 = distinct !DISubprogram(name: "have_sub2_insn", scope: !3, file: !3, line: 4850, type: !12055, scopeLine: 4851, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12176 = !DILocalVariable(name: "x", arg: 1, scope: !12175, file: !3, line: 4850, type: !2732)
!12177 = !DILocation(line: 4850, column: 21, scope: !12175)
!12178 = !DILocalVariable(name: "y", arg: 2, scope: !12175, file: !3, line: 4850, type: !2732)
!12179 = !DILocation(line: 4850, column: 28, scope: !12175)
!12180 = !DILocalVariable(name: "icode", scope: !12175, file: !3, line: 4852, type: !2756)
!12181 = !DILocation(line: 4852, column: 7, scope: !12175)
!12182 = !DILocation(line: 4854, column: 3, scope: !12175)
!12183 = !DILocation(line: 4856, column: 17, scope: !12175)
!12184 = !DILocation(line: 4856, column: 58, scope: !12175)
!12185 = !DILocation(line: 4856, column: 9, scope: !12175)
!12186 = !DILocation(line: 4858, column: 7, scope: !12187)
!12187 = distinct !DILexicalBlock(scope: !12175, file: !3, line: 4858, column: 7)
!12188 = !DILocation(line: 4858, column: 13, scope: !12187)
!12189 = !DILocation(line: 4858, column: 7, scope: !12175)
!12190 = !DILocation(line: 4859, column: 5, scope: !12187)
!12191 = !DILocation(line: 4861, column: 19, scope: !12192)
!12192 = distinct !DILexicalBlock(scope: !12175, file: !3, line: 4861, column: 7)
!12193 = !DILocation(line: 4861, column: 9, scope: !12192)
!12194 = !DILocation(line: 4861, column: 26, scope: !12192)
!12195 = !DILocation(line: 4861, column: 37, scope: !12192)
!12196 = !DILocation(line: 4862, column: 3, scope: !12192)
!12197 = !DILocation(line: 4862, column: 16, scope: !12192)
!12198 = !DILocation(line: 4862, column: 6, scope: !12192)
!12199 = !DILocation(line: 4862, column: 23, scope: !12192)
!12200 = !DILocation(line: 4862, column: 34, scope: !12192)
!12201 = !DILocation(line: 4863, column: 7, scope: !12192)
!12202 = !DILocation(line: 4863, column: 22, scope: !12192)
!12203 = !DILocation(line: 4863, column: 12, scope: !12192)
!12204 = !DILocation(line: 4863, column: 29, scope: !12192)
!12205 = !DILocation(line: 4863, column: 40, scope: !12192)
!12206 = !DILocation(line: 4864, column: 6, scope: !12192)
!12207 = !DILocation(line: 4864, column: 19, scope: !12192)
!12208 = !DILocation(line: 4864, column: 9, scope: !12192)
!12209 = !DILocation(line: 4864, column: 26, scope: !12192)
!12210 = !DILocation(line: 4864, column: 37, scope: !12192)
!12211 = !DILocation(line: 4865, column: 7, scope: !12192)
!12212 = !DILocation(line: 4865, column: 22, scope: !12192)
!12213 = !DILocation(line: 4865, column: 12, scope: !12192)
!12214 = !DILocation(line: 4865, column: 29, scope: !12192)
!12215 = !DILocation(line: 4865, column: 40, scope: !12192)
!12216 = !DILocation(line: 4866, column: 6, scope: !12192)
!12217 = !DILocation(line: 4866, column: 19, scope: !12192)
!12218 = !DILocation(line: 4866, column: 9, scope: !12192)
!12219 = !DILocation(line: 4866, column: 26, scope: !12192)
!12220 = !DILocation(line: 4866, column: 37, scope: !12192)
!12221 = !DILocation(line: 4861, column: 7, scope: !12175)
!12222 = !DILocation(line: 4867, column: 5, scope: !12192)
!12223 = !DILocation(line: 4869, column: 3, scope: !12175)
!12224 = !DILocation(line: 4870, column: 1, scope: !12175)
!12225 = distinct !DISubprogram(name: "gen_move_insn", scope: !3, file: !3, line: 4876, type: !11984, scopeLine: 4877, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12226 = !DILocalVariable(name: "x", arg: 1, scope: !12225, file: !3, line: 4876, type: !2732)
!12227 = !DILocation(line: 4876, column: 20, scope: !12225)
!12228 = !DILocalVariable(name: "y", arg: 2, scope: !12225, file: !3, line: 4876, type: !2732)
!12229 = !DILocation(line: 4876, column: 27, scope: !12225)
!12230 = !DILocalVariable(name: "seq", scope: !12225, file: !3, line: 4878, type: !2732)
!12231 = !DILocation(line: 4878, column: 7, scope: !12225)
!12232 = !DILocation(line: 4880, column: 3, scope: !12225)
!12233 = !DILocation(line: 4881, column: 21, scope: !12225)
!12234 = !DILocation(line: 4881, column: 24, scope: !12225)
!12235 = !DILocation(line: 4881, column: 3, scope: !12225)
!12236 = !DILocation(line: 4882, column: 9, scope: !12225)
!12237 = !DILocation(line: 4882, column: 7, scope: !12225)
!12238 = !DILocation(line: 4883, column: 3, scope: !12225)
!12239 = !DILocation(line: 4884, column: 10, scope: !12225)
!12240 = !DILocation(line: 4884, column: 3, scope: !12225)
!12241 = distinct !DISubprogram(name: "can_extend_p", scope: !3, file: !3, line: 4892, type: !12242, scopeLine: 4894, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12242 = !DISubroutineType(types: !12243)
!12243 = !{!527, !5, !5, !2756}
!12244 = !DILocalVariable(name: "to_mode", arg: 1, scope: !12241, file: !3, line: 4892, type: !5)
!12245 = !DILocation(line: 4892, column: 33, scope: !12241)
!12246 = !DILocalVariable(name: "from_mode", arg: 2, scope: !12241, file: !3, line: 4892, type: !5)
!12247 = !DILocation(line: 4892, column: 60, scope: !12241)
!12248 = !DILocalVariable(name: "unsignedp", arg: 3, scope: !12241, file: !3, line: 4893, type: !2756)
!12249 = !DILocation(line: 4893, column: 12, scope: !12241)
!12250 = !DILocalVariable(name: "tab", scope: !12241, file: !3, line: 4895, type: !3974)
!12251 = !DILocation(line: 4895, column: 17, scope: !12241)
!12252 = !DILocation(line: 4901, column: 9, scope: !12241)
!12253 = !DILocation(line: 4901, column: 7, scope: !12241)
!12254 = !DILocation(line: 4902, column: 10, scope: !12241)
!12255 = !DILocation(line: 4902, column: 59, scope: !12241)
!12256 = !DILocation(line: 4902, column: 3, scope: !12241)
!12257 = distinct !DISubprogram(name: "gen_extend_insn", scope: !3, file: !3, line: 4909, type: !12258, scopeLine: 4911, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12258 = !DISubroutineType(types: !12259)
!12259 = !{!2732, !2732, !2732, !5, !5, !2756}
!12260 = !DILocalVariable(name: "x", arg: 1, scope: !12257, file: !3, line: 4909, type: !2732)
!12261 = !DILocation(line: 4909, column: 22, scope: !12257)
!12262 = !DILocalVariable(name: "y", arg: 2, scope: !12257, file: !3, line: 4909, type: !2732)
!12263 = !DILocation(line: 4909, column: 29, scope: !12257)
!12264 = !DILocalVariable(name: "mto", arg: 3, scope: !12257, file: !3, line: 4909, type: !5)
!12265 = !DILocation(line: 4909, column: 50, scope: !12257)
!12266 = !DILocalVariable(name: "mfrom", arg: 4, scope: !12257, file: !3, line: 4910, type: !5)
!12267 = !DILocation(line: 4910, column: 22, scope: !12257)
!12268 = !DILocalVariable(name: "unsignedp", arg: 5, scope: !12257, file: !3, line: 4910, type: !2756)
!12269 = !DILocation(line: 4910, column: 33, scope: !12257)
!12270 = !DILocalVariable(name: "icode", scope: !12257, file: !3, line: 4912, type: !527)
!12271 = !DILocation(line: 4912, column: 18, scope: !12257)
!12272 = !DILocation(line: 4912, column: 40, scope: !12257)
!12273 = !DILocation(line: 4912, column: 45, scope: !12257)
!12274 = !DILocation(line: 4912, column: 52, scope: !12257)
!12275 = !DILocation(line: 4912, column: 26, scope: !12257)
!12276 = !DILocation(line: 4913, column: 10, scope: !12257)
!12277 = !DILocation(line: 4913, column: 27, scope: !12257)
!12278 = !DILocation(line: 4913, column: 30, scope: !12257)
!12279 = !DILocation(line: 4913, column: 3, scope: !12257)
!12280 = distinct !DISubprogram(name: "expand_float", scope: !3, file: !3, line: 4973, type: !12281, scopeLine: 4974, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12281 = !DISubroutineType(types: !12282)
!12282 = !{null, !2732, !2732, !2756}
!12283 = !DILocalVariable(name: "to", arg: 1, scope: !12280, file: !3, line: 4973, type: !2732)
!12284 = !DILocation(line: 4973, column: 19, scope: !12280)
!12285 = !DILocalVariable(name: "from", arg: 2, scope: !12280, file: !3, line: 4973, type: !2732)
!12286 = !DILocation(line: 4973, column: 27, scope: !12280)
!12287 = !DILocalVariable(name: "unsignedp", arg: 3, scope: !12280, file: !3, line: 4973, type: !2756)
!12288 = !DILocation(line: 4973, column: 37, scope: !12280)
!12289 = !DILocalVariable(name: "icode", scope: !12280, file: !3, line: 4975, type: !527)
!12290 = !DILocation(line: 4975, column: 18, scope: !12280)
!12291 = !DILocalVariable(name: "target", scope: !12280, file: !3, line: 4976, type: !2732)
!12292 = !DILocation(line: 4976, column: 7, scope: !12280)
!12293 = !DILocation(line: 4976, column: 16, scope: !12280)
!12294 = !DILocalVariable(name: "fmode", scope: !12280, file: !3, line: 4977, type: !5)
!12295 = !DILocation(line: 4977, column: 21, scope: !12280)
!12296 = !DILocalVariable(name: "imode", scope: !12280, file: !3, line: 4977, type: !5)
!12297 = !DILocation(line: 4977, column: 28, scope: !12280)
!12298 = !DILocalVariable(name: "can_do_signed", scope: !12280, file: !3, line: 4978, type: !2966)
!12299 = !DILocation(line: 4978, column: 8, scope: !12280)
!12300 = !DILocation(line: 4981, column: 3, scope: !12280)
!12301 = !DILocation(line: 4988, column: 16, scope: !12302)
!12302 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 4988, column: 3)
!12303 = !DILocation(line: 4988, column: 14, scope: !12302)
!12304 = !DILocation(line: 4988, column: 8, scope: !12302)
!12305 = !DILocation(line: 4988, column: 31, scope: !12306)
!12306 = distinct !DILexicalBlock(scope: !12302, file: !3, line: 4988, column: 3)
!12307 = !DILocation(line: 4988, column: 37, scope: !12306)
!12308 = !DILocation(line: 4988, column: 3, scope: !12302)
!12309 = !DILocation(line: 4990, column: 18, scope: !12310)
!12310 = distinct !DILexicalBlock(scope: !12306, file: !3, line: 4990, column: 5)
!12311 = !DILocation(line: 4990, column: 16, scope: !12310)
!12312 = !DILocation(line: 4990, column: 10, scope: !12310)
!12313 = !DILocation(line: 4990, column: 35, scope: !12314)
!12314 = distinct !DILexicalBlock(scope: !12310, file: !3, line: 4990, column: 5)
!12315 = !DILocation(line: 4990, column: 41, scope: !12314)
!12316 = !DILocation(line: 4990, column: 5, scope: !12310)
!12317 = !DILocalVariable(name: "doing_unsigned", scope: !12318, file: !3, line: 4993, type: !2756)
!12318 = distinct !DILexicalBlock(scope: !12314, file: !3, line: 4992, column: 7)
!12319 = !DILocation(line: 4993, column: 6, scope: !12318)
!12320 = !DILocation(line: 4993, column: 23, scope: !12318)
!12321 = !DILocation(line: 4995, column: 6, scope: !12322)
!12322 = distinct !DILexicalBlock(scope: !12318, file: !3, line: 4995, column: 6)
!12323 = !DILocation(line: 4995, column: 15, scope: !12322)
!12324 = !DILocation(line: 4995, column: 12, scope: !12322)
!12325 = !DILocation(line: 4996, column: 6, scope: !12322)
!12326 = !DILocation(line: 4996, column: 27, scope: !12322)
!12327 = !DILocation(line: 4996, column: 9, scope: !12322)
!12328 = !DILocation(line: 4996, column: 36, scope: !12322)
!12329 = !DILocation(line: 4996, column: 34, scope: !12322)
!12330 = !DILocation(line: 4995, column: 6, scope: !12318)
!12331 = !DILocation(line: 4997, column: 4, scope: !12322)
!12332 = !DILocation(line: 4999, column: 23, scope: !12318)
!12333 = !DILocation(line: 4999, column: 30, scope: !12318)
!12334 = !DILocation(line: 4999, column: 37, scope: !12318)
!12335 = !DILocation(line: 4999, column: 10, scope: !12318)
!12336 = !DILocation(line: 4999, column: 8, scope: !12318)
!12337 = !DILocation(line: 5000, column: 6, scope: !12338)
!12338 = distinct !DILexicalBlock(scope: !12318, file: !3, line: 5000, column: 6)
!12339 = !DILocation(line: 5000, column: 12, scope: !12338)
!12340 = !DILocation(line: 5000, column: 32, scope: !12338)
!12341 = !DILocation(line: 5000, column: 35, scope: !12338)
!12342 = !DILocation(line: 5000, column: 6, scope: !12318)
!12343 = !DILocalVariable(name: "scode", scope: !12344, file: !3, line: 5002, type: !527)
!12344 = distinct !DILexicalBlock(scope: !12338, file: !3, line: 5001, column: 4)
!12345 = !DILocation(line: 5002, column: 21, scope: !12344)
!12346 = !DILocation(line: 5002, column: 42, scope: !12344)
!12347 = !DILocation(line: 5002, column: 49, scope: !12344)
!12348 = !DILocation(line: 5002, column: 29, scope: !12344)
!12349 = !DILocation(line: 5003, column: 10, scope: !12350)
!12350 = distinct !DILexicalBlock(scope: !12344, file: !3, line: 5003, column: 10)
!12351 = !DILocation(line: 5003, column: 16, scope: !12350)
!12352 = !DILocation(line: 5003, column: 10, scope: !12344)
!12353 = !DILocation(line: 5004, column: 22, scope: !12350)
!12354 = !DILocation(line: 5004, column: 8, scope: !12350)
!12355 = !DILocation(line: 5005, column: 10, scope: !12356)
!12356 = distinct !DILexicalBlock(scope: !12344, file: !3, line: 5005, column: 10)
!12357 = !DILocation(line: 5005, column: 19, scope: !12356)
!12358 = !DILocation(line: 5005, column: 16, scope: !12356)
!12359 = !DILocation(line: 5005, column: 10, scope: !12344)
!12360 = !DILocation(line: 5006, column: 16, scope: !12356)
!12361 = !DILocation(line: 5006, column: 14, scope: !12356)
!12362 = !DILocation(line: 5006, column: 38, scope: !12356)
!12363 = !DILocation(line: 5006, column: 8, scope: !12356)
!12364 = !DILocation(line: 5007, column: 4, scope: !12344)
!12365 = !DILocation(line: 5009, column: 6, scope: !12366)
!12366 = distinct !DILexicalBlock(scope: !12318, file: !3, line: 5009, column: 6)
!12367 = !DILocation(line: 5009, column: 12, scope: !12366)
!12368 = !DILocation(line: 5009, column: 6, scope: !12318)
!12369 = !DILocation(line: 5011, column: 10, scope: !12370)
!12370 = distinct !DILexicalBlock(scope: !12371, file: !3, line: 5011, column: 10)
!12371 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 5010, column: 4)
!12372 = !DILocation(line: 5011, column: 19, scope: !12370)
!12373 = !DILocation(line: 5011, column: 16, scope: !12370)
!12374 = !DILocation(line: 5011, column: 10, scope: !12371)
!12375 = !DILocation(line: 5012, column: 32, scope: !12370)
!12376 = !DILocation(line: 5012, column: 39, scope: !12370)
!12377 = !DILocation(line: 5012, column: 45, scope: !12370)
!12378 = !DILocation(line: 5012, column: 15, scope: !12370)
!12379 = !DILocation(line: 5012, column: 13, scope: !12370)
!12380 = !DILocation(line: 5012, column: 8, scope: !12370)
!12381 = !DILocation(line: 5014, column: 10, scope: !12382)
!12382 = distinct !DILexicalBlock(scope: !12371, file: !3, line: 5014, column: 10)
!12383 = !DILocation(line: 5014, column: 19, scope: !12382)
!12384 = !DILocation(line: 5014, column: 16, scope: !12382)
!12385 = !DILocation(line: 5014, column: 10, scope: !12371)
!12386 = !DILocation(line: 5015, column: 30, scope: !12382)
!12387 = !DILocation(line: 5015, column: 17, scope: !12382)
!12388 = !DILocation(line: 5015, column: 15, scope: !12382)
!12389 = !DILocation(line: 5015, column: 8, scope: !12382)
!12390 = !DILocation(line: 5017, column: 22, scope: !12371)
!12391 = !DILocation(line: 5017, column: 29, scope: !12371)
!12392 = !DILocation(line: 5017, column: 37, scope: !12371)
!12393 = !DILocation(line: 5018, column: 8, scope: !12371)
!12394 = !DILocation(line: 5017, column: 6, scope: !12371)
!12395 = !DILocation(line: 5020, column: 10, scope: !12396)
!12396 = distinct !DILexicalBlock(scope: !12371, file: !3, line: 5020, column: 10)
!12397 = !DILocation(line: 5020, column: 20, scope: !12396)
!12398 = !DILocation(line: 5020, column: 17, scope: !12396)
!12399 = !DILocation(line: 5020, column: 10, scope: !12371)
!12400 = !DILocation(line: 5021, column: 22, scope: !12396)
!12401 = !DILocation(line: 5021, column: 26, scope: !12396)
!12402 = !DILocation(line: 5021, column: 8, scope: !12396)
!12403 = !DILocation(line: 5022, column: 6, scope: !12371)
!12404 = !DILocation(line: 5024, column: 7, scope: !12318)
!12405 = !DILocation(line: 4991, column: 11, scope: !12314)
!12406 = !DILocation(line: 4991, column: 9, scope: !12314)
!12407 = !DILocation(line: 4990, column: 5, scope: !12314)
!12408 = distinct !{!12408, !12316, !12409}
!12409 = !DILocation(line: 5024, column: 7, scope: !12310)
!12410 = !DILocation(line: 4989, column: 16, scope: !12306)
!12411 = !DILocation(line: 4989, column: 14, scope: !12306)
!12412 = !DILocation(line: 4988, column: 3, scope: !12306)
!12413 = distinct !{!12413, !12308, !12414}
!12414 = !DILocation(line: 5024, column: 7, scope: !12302)
!12415 = !DILocation(line: 5028, column: 7, scope: !12416)
!12416 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 5028, column: 7)
!12417 = !DILocation(line: 5028, column: 17, scope: !12416)
!12418 = !DILocation(line: 5028, column: 20, scope: !12416)
!12419 = !DILocation(line: 5028, column: 7, scope: !12280)
!12420 = !DILocalVariable(name: "label", scope: !12421, file: !3, line: 5030, type: !2732)
!12421 = distinct !DILexicalBlock(scope: !12416, file: !3, line: 5029, column: 5)
!12422 = !DILocation(line: 5030, column: 11, scope: !12421)
!12423 = !DILocation(line: 5030, column: 19, scope: !12421)
!12424 = !DILocalVariable(name: "temp", scope: !12421, file: !3, line: 5031, type: !2732)
!12425 = !DILocation(line: 5031, column: 11, scope: !12421)
!12426 = !DILocalVariable(name: "offset", scope: !12421, file: !3, line: 5032, type: !2913)
!12427 = !DILocation(line: 5032, column: 23, scope: !12421)
!12428 = !DILocation(line: 5038, column: 20, scope: !12429)
!12429 = distinct !DILexicalBlock(scope: !12421, file: !3, line: 5038, column: 7)
!12430 = !DILocation(line: 5038, column: 18, scope: !12429)
!12431 = !DILocation(line: 5038, column: 12, scope: !12429)
!12432 = !DILocation(line: 5038, column: 36, scope: !12433)
!12433 = distinct !DILexicalBlock(scope: !12429, file: !3, line: 5038, column: 7)
!12434 = !DILocation(line: 5038, column: 42, scope: !12433)
!12435 = !DILocation(line: 5038, column: 7, scope: !12429)
!12436 = !DILocation(line: 5040, column: 6, scope: !12437)
!12437 = distinct !DILexicalBlock(scope: !12433, file: !3, line: 5040, column: 6)
!12438 = !DILocation(line: 5040, column: 43, scope: !12437)
!12439 = !DILocation(line: 5040, column: 41, scope: !12437)
!12440 = !DILocation(line: 5041, column: 6, scope: !12437)
!12441 = !DILocation(line: 5041, column: 22, scope: !12437)
!12442 = !DILocation(line: 5041, column: 29, scope: !12437)
!12443 = !DILocation(line: 5041, column: 9, scope: !12437)
!12444 = !DILocation(line: 5041, column: 49, scope: !12437)
!12445 = !DILocation(line: 5040, column: 6, scope: !12433)
!12446 = !DILocation(line: 5042, column: 4, scope: !12437)
!12447 = !DILocation(line: 5041, column: 52, scope: !12437)
!12448 = !DILocation(line: 5039, column: 13, scope: !12433)
!12449 = !DILocation(line: 5039, column: 11, scope: !12433)
!12450 = !DILocation(line: 5038, column: 7, scope: !12433)
!12451 = distinct !{!12451, !12435, !12452}
!12452 = !DILocation(line: 5042, column: 4, scope: !12429)
!12453 = !DILocation(line: 5044, column: 11, scope: !12454)
!12454 = distinct !DILexicalBlock(scope: !12421, file: !3, line: 5044, column: 11)
!12455 = !DILocation(line: 5044, column: 17, scope: !12454)
!12456 = !DILocation(line: 5044, column: 11, scope: !12421)
!12457 = !DILocation(line: 5047, column: 12, scope: !12458)
!12458 = distinct !DILexicalBlock(scope: !12454, file: !3, line: 5045, column: 2)
!12459 = !DILocation(line: 5047, column: 10, scope: !12458)
!12460 = !DILocation(line: 5050, column: 27, scope: !12461)
!12461 = distinct !DILexicalBlock(scope: !12458, file: !3, line: 5050, column: 8)
!12462 = !DILocation(line: 5050, column: 9, scope: !12461)
!12463 = !DILocation(line: 5050, column: 34, scope: !12461)
!12464 = !DILocation(line: 5051, column: 10, scope: !12461)
!12465 = !DILocation(line: 5051, column: 8, scope: !12461)
!12466 = !DILocation(line: 5050, column: 8, scope: !12458)
!12467 = !DILocalVariable(name: "temp1", scope: !12468, file: !3, line: 5053, type: !2732)
!12468 = distinct !DILexicalBlock(scope: !12461, file: !3, line: 5052, column: 6)
!12469 = !DILocation(line: 5053, column: 12, scope: !12468)
!12470 = !DILocalVariable(name: "neglabel", scope: !12468, file: !3, line: 5054, type: !2732)
!12471 = !DILocation(line: 5054, column: 12, scope: !12468)
!12472 = !DILocation(line: 5054, column: 23, scope: !12468)
!12473 = !DILocation(line: 5058, column: 13, scope: !12474)
!12474 = distinct !DILexicalBlock(scope: !12468, file: !3, line: 5058, column: 12)
!12475 = !DILocation(line: 5059, column: 5, scope: !12474)
!12476 = !DILocation(line: 5059, column: 8, scope: !12474)
!12477 = !DILocation(line: 5059, column: 23, scope: !12474)
!12478 = !DILocation(line: 5060, column: 5, scope: !12474)
!12479 = !DILocation(line: 5060, column: 8, scope: !12474)
!12480 = !DILocation(line: 5060, column: 29, scope: !12474)
!12481 = !DILocation(line: 5060, column: 26, scope: !12474)
!12482 = !DILocation(line: 5058, column: 12, scope: !12468)
!12483 = !DILocation(line: 5061, column: 25, scope: !12474)
!12484 = !DILocation(line: 5061, column: 12, scope: !12474)
!12485 = !DILocation(line: 5061, column: 10, scope: !12474)
!12486 = !DILocation(line: 5061, column: 3, scope: !12474)
!12487 = !DILocation(line: 5063, column: 16, scope: !12468)
!12488 = !DILocation(line: 5063, column: 14, scope: !12468)
!12489 = !DILocation(line: 5064, column: 8, scope: !12468)
!12490 = !DILocation(line: 5067, column: 33, scope: !12468)
!12491 = !DILocation(line: 5067, column: 39, scope: !12468)
!12492 = !DILocation(line: 5067, column: 65, scope: !12468)
!12493 = !DILocation(line: 5068, column: 15, scope: !12468)
!12494 = !DILocation(line: 5067, column: 8, scope: !12468)
!12495 = !DILocation(line: 5071, column: 22, scope: !12468)
!12496 = !DILocation(line: 5071, column: 30, scope: !12468)
!12497 = !DILocation(line: 5071, column: 8, scope: !12468)
!12498 = !DILocation(line: 5072, column: 34, scope: !12468)
!12499 = !DILocation(line: 5072, column: 24, scope: !12468)
!12500 = !DILocation(line: 5072, column: 8, scope: !12468)
!12501 = !DILocation(line: 5073, column: 8, scope: !12468)
!12502 = !DILocation(line: 5080, column: 20, scope: !12468)
!12503 = !DILocation(line: 5080, column: 8, scope: !12468)
!12504 = !DILocation(line: 5081, column: 29, scope: !12468)
!12505 = !DILocation(line: 5081, column: 47, scope: !12468)
!12506 = !DILocation(line: 5081, column: 53, scope: !12468)
!12507 = !DILocation(line: 5081, column: 15, scope: !12468)
!12508 = !DILocation(line: 5081, column: 13, scope: !12468)
!12509 = !DILocation(line: 5083, column: 43, scope: !12468)
!12510 = !DILocation(line: 5083, column: 50, scope: !12468)
!12511 = !DILocation(line: 5083, column: 56, scope: !12468)
!12512 = !DILocation(line: 5083, column: 16, scope: !12468)
!12513 = !DILocation(line: 5083, column: 14, scope: !12468)
!12514 = !DILocation(line: 5085, column: 29, scope: !12468)
!12515 = !DILocation(line: 5085, column: 47, scope: !12468)
!12516 = !DILocation(line: 5085, column: 53, scope: !12468)
!12517 = !DILocation(line: 5085, column: 60, scope: !12468)
!12518 = !DILocation(line: 5085, column: 15, scope: !12468)
!12519 = !DILocation(line: 5085, column: 13, scope: !12468)
!12520 = !DILocation(line: 5087, column: 22, scope: !12468)
!12521 = !DILocation(line: 5087, column: 30, scope: !12468)
!12522 = !DILocation(line: 5087, column: 8, scope: !12468)
!12523 = !DILocation(line: 5090, column: 29, scope: !12468)
!12524 = !DILocation(line: 5090, column: 47, scope: !12468)
!12525 = !DILocation(line: 5090, column: 55, scope: !12468)
!12526 = !DILocation(line: 5091, column: 8, scope: !12468)
!12527 = !DILocation(line: 5090, column: 15, scope: !12468)
!12528 = !DILocation(line: 5090, column: 13, scope: !12468)
!12529 = !DILocation(line: 5092, column: 12, scope: !12530)
!12530 = distinct !DILexicalBlock(scope: !12468, file: !3, line: 5092, column: 12)
!12531 = !DILocation(line: 5092, column: 20, scope: !12530)
!12532 = !DILocation(line: 5092, column: 17, scope: !12530)
!12533 = !DILocation(line: 5092, column: 12, scope: !12468)
!12534 = !DILocation(line: 5093, column: 19, scope: !12530)
!12535 = !DILocation(line: 5093, column: 27, scope: !12530)
!12536 = !DILocation(line: 5093, column: 3, scope: !12530)
!12537 = !DILocation(line: 5095, column: 8, scope: !12468)
!12538 = !DILocation(line: 5096, column: 20, scope: !12468)
!12539 = !DILocation(line: 5096, column: 8, scope: !12468)
!12540 = !DILocation(line: 5097, column: 8, scope: !12468)
!12541 = !DILocation(line: 5099, column: 2, scope: !12458)
!12542 = !DILocation(line: 5104, column: 11, scope: !12543)
!12543 = distinct !DILexicalBlock(scope: !12421, file: !3, line: 5104, column: 11)
!12544 = !DILocation(line: 5104, column: 28, scope: !12543)
!12545 = !DILocation(line: 5104, column: 25, scope: !12543)
!12546 = !DILocation(line: 5105, column: 4, scope: !12543)
!12547 = !DILocation(line: 5105, column: 8, scope: !12543)
!12548 = !DILocation(line: 5105, column: 19, scope: !12543)
!12549 = !DILocation(line: 5105, column: 22, scope: !12543)
!12550 = !DILocation(line: 5105, column: 33, scope: !12543)
!12551 = !DILocation(line: 5104, column: 11, scope: !12421)
!12552 = !DILocation(line: 5106, column: 24, scope: !12543)
!12553 = !DILocation(line: 5106, column: 11, scope: !12543)
!12554 = !DILocation(line: 5106, column: 9, scope: !12543)
!12555 = !DILocation(line: 5106, column: 2, scope: !12543)
!12556 = !DILocation(line: 5109, column: 21, scope: !12421)
!12557 = !DILocation(line: 5109, column: 29, scope: !12421)
!12558 = !DILocation(line: 5109, column: 7, scope: !12421)
!12559 = !DILocation(line: 5114, column: 7, scope: !12421)
!12560 = !DILocation(line: 5115, column: 32, scope: !12421)
!12561 = !DILocation(line: 5115, column: 38, scope: !12421)
!12562 = !DILocation(line: 5115, column: 64, scope: !12421)
!12563 = !DILocation(line: 5116, column: 14, scope: !12421)
!12564 = !DILocation(line: 5115, column: 7, scope: !12421)
!12565 = !DILocation(line: 5119, column: 28, scope: !12421)
!12566 = !DILocation(line: 5119, column: 64, scope: !12421)
!12567 = !DILocation(line: 5119, column: 7, scope: !12421)
!12568 = !DILocation(line: 5120, column: 28, scope: !12421)
!12569 = !DILocation(line: 5120, column: 46, scope: !12421)
!12570 = !DILocation(line: 5121, column: 7, scope: !12421)
!12571 = !DILocation(line: 5122, column: 7, scope: !12421)
!12572 = !DILocation(line: 5120, column: 14, scope: !12421)
!12573 = !DILocation(line: 5120, column: 12, scope: !12421)
!12574 = !DILocation(line: 5123, column: 11, scope: !12575)
!12575 = distinct !DILexicalBlock(scope: !12421, file: !3, line: 5123, column: 11)
!12576 = !DILocation(line: 5123, column: 19, scope: !12575)
!12577 = !DILocation(line: 5123, column: 16, scope: !12575)
!12578 = !DILocation(line: 5123, column: 11, scope: !12421)
!12579 = !DILocation(line: 5124, column: 18, scope: !12575)
!12580 = !DILocation(line: 5124, column: 26, scope: !12575)
!12581 = !DILocation(line: 5124, column: 2, scope: !12575)
!12582 = !DILocation(line: 5126, column: 7, scope: !12421)
!12583 = !DILocation(line: 5127, column: 19, scope: !12421)
!12584 = !DILocation(line: 5127, column: 7, scope: !12421)
!12585 = !DILocation(line: 5128, column: 7, scope: !12421)
!12586 = !DILocalVariable(name: "libfunc", scope: !12587, file: !3, line: 5133, type: !2732)
!12587 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 5132, column: 5)
!12588 = !DILocation(line: 5133, column: 11, scope: !12587)
!12589 = !DILocalVariable(name: "insns", scope: !12587, file: !3, line: 5134, type: !2732)
!12590 = !DILocation(line: 5134, column: 11, scope: !12587)
!12591 = !DILocalVariable(name: "value", scope: !12587, file: !3, line: 5135, type: !2732)
!12592 = !DILocation(line: 5135, column: 11, scope: !12587)
!12593 = !DILocalVariable(name: "tab", scope: !12587, file: !3, line: 5136, type: !3974)
!12594 = !DILocation(line: 5136, column: 21, scope: !12587)
!12595 = !DILocation(line: 5136, column: 27, scope: !12587)
!12596 = !DILocation(line: 5138, column: 11, scope: !12597)
!12597 = distinct !DILexicalBlock(scope: !12587, file: !3, line: 5138, column: 11)
!12598 = !DILocation(line: 5138, column: 45, scope: !12597)
!12599 = !DILocation(line: 5138, column: 43, scope: !12597)
!12600 = !DILocation(line: 5138, column: 11, scope: !12587)
!12601 = !DILocation(line: 5139, column: 34, scope: !12597)
!12602 = !DILocation(line: 5139, column: 40, scope: !12597)
!12603 = !DILocation(line: 5139, column: 9, scope: !12597)
!12604 = !DILocation(line: 5139, column: 7, scope: !12597)
!12605 = !DILocation(line: 5139, column: 2, scope: !12597)
!12606 = !DILocation(line: 5141, column: 40, scope: !12587)
!12607 = !DILocation(line: 5141, column: 45, scope: !12587)
!12608 = !DILocation(line: 5141, column: 60, scope: !12587)
!12609 = !DILocation(line: 5141, column: 17, scope: !12587)
!12610 = !DILocation(line: 5141, column: 15, scope: !12587)
!12611 = !DILocation(line: 5142, column: 7, scope: !12587)
!12612 = !DILocation(line: 5144, column: 7, scope: !12587)
!12613 = !DILocation(line: 5146, column: 40, scope: !12587)
!12614 = !DILocation(line: 5147, column: 12, scope: !12587)
!12615 = !DILocation(line: 5147, column: 30, scope: !12587)
!12616 = !DILocation(line: 5148, column: 12, scope: !12587)
!12617 = !DILocation(line: 5146, column: 15, scope: !12587)
!12618 = !DILocation(line: 5146, column: 13, scope: !12587)
!12619 = !DILocation(line: 5149, column: 15, scope: !12587)
!12620 = !DILocation(line: 5149, column: 13, scope: !12587)
!12621 = !DILocation(line: 5150, column: 7, scope: !12587)
!12622 = !DILocation(line: 5152, column: 27, scope: !12587)
!12623 = !DILocation(line: 5152, column: 34, scope: !12587)
!12624 = !DILocation(line: 5152, column: 42, scope: !12587)
!12625 = !DILocation(line: 5153, column: 6, scope: !12587)
!12626 = !DILocation(line: 5152, column: 7, scope: !12587)
!12627 = !DILocation(line: 5155, column: 5, scope: !12587)
!12628 = !DILabel(scope: !12280, name: "done", file: !3, line: 5157)
!12629 = !DILocation(line: 5157, column: 2, scope: !12280)
!12630 = !DILocation(line: 5162, column: 7, scope: !12631)
!12631 = distinct !DILexicalBlock(scope: !12280, file: !3, line: 5162, column: 7)
!12632 = !DILocation(line: 5162, column: 17, scope: !12631)
!12633 = !DILocation(line: 5162, column: 14, scope: !12631)
!12634 = !DILocation(line: 5162, column: 7, scope: !12280)
!12635 = !DILocation(line: 5164, column: 11, scope: !12636)
!12636 = distinct !DILexicalBlock(scope: !12637, file: !3, line: 5164, column: 11)
!12637 = distinct !DILexicalBlock(scope: !12631, file: !3, line: 5163, column: 5)
!12638 = !DILocation(line: 5164, column: 32, scope: !12636)
!12639 = !DILocation(line: 5164, column: 29, scope: !12636)
!12640 = !DILocation(line: 5164, column: 11, scope: !12637)
!12641 = !DILocation(line: 5165, column: 18, scope: !12636)
!12642 = !DILocation(line: 5165, column: 22, scope: !12636)
!12643 = !DILocation(line: 5165, column: 2, scope: !12636)
!12644 = !DILocation(line: 5167, column: 16, scope: !12636)
!12645 = !DILocation(line: 5167, column: 20, scope: !12636)
!12646 = !DILocation(line: 5167, column: 2, scope: !12636)
!12647 = !DILocation(line: 5168, column: 5, scope: !12637)
!12648 = !DILocation(line: 5169, column: 1, scope: !12280)
!12649 = distinct !DISubprogram(name: "can_float_p", scope: !3, file: !3, line: 4957, type: !12242, scopeLine: 4959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12650 = !DILocalVariable(name: "fltmode", arg: 1, scope: !12649, file: !3, line: 4957, type: !5)
!12651 = !DILocation(line: 4957, column: 32, scope: !12649)
!12652 = !DILocalVariable(name: "fixmode", arg: 2, scope: !12649, file: !3, line: 4957, type: !5)
!12653 = !DILocation(line: 4957, column: 59, scope: !12649)
!12654 = !DILocalVariable(name: "unsignedp", arg: 3, scope: !12649, file: !3, line: 4958, type: !2756)
!12655 = !DILocation(line: 4958, column: 11, scope: !12649)
!12656 = !DILocalVariable(name: "tab", scope: !12649, file: !3, line: 4960, type: !3974)
!12657 = !DILocation(line: 4960, column: 17, scope: !12649)
!12658 = !DILocation(line: 4962, column: 9, scope: !12649)
!12659 = !DILocation(line: 4962, column: 7, scope: !12649)
!12660 = !DILocation(line: 4963, column: 10, scope: !12649)
!12661 = !DILocation(line: 4963, column: 57, scope: !12649)
!12662 = !DILocation(line: 4963, column: 3, scope: !12649)
!12663 = distinct !DISubprogram(name: "expand_fix", scope: !3, file: !3, line: 5175, type: !12281, scopeLine: 5176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12664 = !DILocalVariable(name: "to", arg: 1, scope: !12663, file: !3, line: 5175, type: !2732)
!12665 = !DILocation(line: 5175, column: 17, scope: !12663)
!12666 = !DILocalVariable(name: "from", arg: 2, scope: !12663, file: !3, line: 5175, type: !2732)
!12667 = !DILocation(line: 5175, column: 25, scope: !12663)
!12668 = !DILocalVariable(name: "unsignedp", arg: 3, scope: !12663, file: !3, line: 5175, type: !2756)
!12669 = !DILocation(line: 5175, column: 35, scope: !12663)
!12670 = !DILocalVariable(name: "icode", scope: !12663, file: !3, line: 5177, type: !527)
!12671 = !DILocation(line: 5177, column: 18, scope: !12663)
!12672 = !DILocalVariable(name: "target", scope: !12663, file: !3, line: 5178, type: !2732)
!12673 = !DILocation(line: 5178, column: 7, scope: !12663)
!12674 = !DILocation(line: 5178, column: 16, scope: !12663)
!12675 = !DILocalVariable(name: "fmode", scope: !12663, file: !3, line: 5179, type: !5)
!12676 = !DILocation(line: 5179, column: 21, scope: !12663)
!12677 = !DILocalVariable(name: "imode", scope: !12663, file: !3, line: 5179, type: !5)
!12678 = !DILocation(line: 5179, column: 28, scope: !12663)
!12679 = !DILocalVariable(name: "must_trunc", scope: !12663, file: !3, line: 5180, type: !2756)
!12680 = !DILocation(line: 5180, column: 7, scope: !12663)
!12681 = !DILocation(line: 5187, column: 16, scope: !12682)
!12682 = distinct !DILexicalBlock(scope: !12663, file: !3, line: 5187, column: 3)
!12683 = !DILocation(line: 5187, column: 14, scope: !12682)
!12684 = !DILocation(line: 5187, column: 8, scope: !12682)
!12685 = !DILocation(line: 5187, column: 33, scope: !12686)
!12686 = distinct !DILexicalBlock(scope: !12682, file: !3, line: 5187, column: 3)
!12687 = !DILocation(line: 5187, column: 39, scope: !12686)
!12688 = !DILocation(line: 5187, column: 3, scope: !12682)
!12689 = !DILocation(line: 5189, column: 18, scope: !12690)
!12690 = distinct !DILexicalBlock(scope: !12686, file: !3, line: 5189, column: 5)
!12691 = !DILocation(line: 5189, column: 16, scope: !12690)
!12692 = !DILocation(line: 5189, column: 10, scope: !12690)
!12693 = !DILocation(line: 5189, column: 33, scope: !12694)
!12694 = distinct !DILexicalBlock(scope: !12690, file: !3, line: 5189, column: 5)
!12695 = !DILocation(line: 5189, column: 39, scope: !12694)
!12696 = !DILocation(line: 5189, column: 5, scope: !12690)
!12697 = !DILocalVariable(name: "doing_unsigned", scope: !12698, file: !3, line: 5192, type: !2756)
!12698 = distinct !DILexicalBlock(scope: !12694, file: !3, line: 5191, column: 7)
!12699 = !DILocation(line: 5192, column: 6, scope: !12698)
!12700 = !DILocation(line: 5192, column: 23, scope: !12698)
!12701 = !DILocation(line: 5194, column: 21, scope: !12698)
!12702 = !DILocation(line: 5194, column: 28, scope: !12698)
!12703 = !DILocation(line: 5194, column: 35, scope: !12698)
!12704 = !DILocation(line: 5194, column: 10, scope: !12698)
!12705 = !DILocation(line: 5194, column: 8, scope: !12698)
!12706 = !DILocation(line: 5195, column: 6, scope: !12707)
!12707 = distinct !DILexicalBlock(scope: !12698, file: !3, line: 5195, column: 6)
!12708 = !DILocation(line: 5195, column: 12, scope: !12707)
!12709 = !DILocation(line: 5195, column: 32, scope: !12707)
!12710 = !DILocation(line: 5195, column: 35, scope: !12707)
!12711 = !DILocation(line: 5195, column: 44, scope: !12707)
!12712 = !DILocation(line: 5195, column: 41, scope: !12707)
!12713 = !DILocation(line: 5195, column: 58, scope: !12707)
!12714 = !DILocation(line: 5195, column: 61, scope: !12707)
!12715 = !DILocation(line: 5195, column: 6, scope: !12698)
!12716 = !DILocation(line: 5196, column: 23, scope: !12707)
!12717 = !DILocation(line: 5196, column: 30, scope: !12707)
!12718 = !DILocation(line: 5196, column: 12, scope: !12707)
!12719 = !DILocation(line: 5196, column: 10, scope: !12707)
!12720 = !DILocation(line: 5196, column: 69, scope: !12707)
!12721 = !DILocation(line: 5196, column: 4, scope: !12707)
!12722 = !DILocation(line: 5198, column: 6, scope: !12723)
!12723 = distinct !DILexicalBlock(scope: !12698, file: !3, line: 5198, column: 6)
!12724 = !DILocation(line: 5198, column: 12, scope: !12723)
!12725 = !DILocation(line: 5198, column: 6, scope: !12698)
!12726 = !DILocalVariable(name: "last", scope: !12727, file: !3, line: 5200, type: !2732)
!12727 = distinct !DILexicalBlock(scope: !12723, file: !3, line: 5199, column: 4)
!12728 = !DILocation(line: 5200, column: 10, scope: !12727)
!12729 = !DILocation(line: 5200, column: 17, scope: !12727)
!12730 = !DILocation(line: 5201, column: 10, scope: !12731)
!12731 = distinct !DILexicalBlock(scope: !12727, file: !3, line: 5201, column: 10)
!12732 = !DILocation(line: 5201, column: 19, scope: !12731)
!12733 = !DILocation(line: 5201, column: 16, scope: !12731)
!12734 = !DILocation(line: 5201, column: 10, scope: !12727)
!12735 = !DILocation(line: 5202, column: 32, scope: !12731)
!12736 = !DILocation(line: 5202, column: 39, scope: !12731)
!12737 = !DILocation(line: 5202, column: 15, scope: !12731)
!12738 = !DILocation(line: 5202, column: 13, scope: !12731)
!12739 = !DILocation(line: 5202, column: 8, scope: !12731)
!12740 = !DILocation(line: 5204, column: 10, scope: !12741)
!12741 = distinct !DILexicalBlock(scope: !12727, file: !3, line: 5204, column: 10)
!12742 = !DILocation(line: 5204, column: 10, scope: !12727)
!12743 = !DILocalVariable(name: "temp", scope: !12744, file: !3, line: 5206, type: !2732)
!12744 = distinct !DILexicalBlock(scope: !12741, file: !3, line: 5205, column: 8)
!12745 = !DILocation(line: 5206, column: 7, scope: !12744)
!12746 = !DILocation(line: 5206, column: 27, scope: !12744)
!12747 = !DILocation(line: 5206, column: 14, scope: !12744)
!12748 = !DILocation(line: 5207, column: 23, scope: !12744)
!12749 = !DILocation(line: 5207, column: 54, scope: !12744)
!12750 = !DILocation(line: 5208, column: 9, scope: !12744)
!12751 = !DILocation(line: 5207, column: 10, scope: !12744)
!12752 = !DILocation(line: 5207, column: 8, scope: !12744)
!12753 = !DILocation(line: 5209, column: 8, scope: !12744)
!12754 = !DILocation(line: 5211, column: 10, scope: !12755)
!12755 = distinct !DILexicalBlock(scope: !12727, file: !3, line: 5211, column: 10)
!12756 = !DILocation(line: 5211, column: 19, scope: !12755)
!12757 = !DILocation(line: 5211, column: 16, scope: !12755)
!12758 = !DILocation(line: 5211, column: 10, scope: !12727)
!12759 = !DILocation(line: 5212, column: 30, scope: !12755)
!12760 = !DILocation(line: 5212, column: 17, scope: !12755)
!12761 = !DILocation(line: 5212, column: 15, scope: !12755)
!12762 = !DILocation(line: 5212, column: 8, scope: !12755)
!12763 = !DILocation(line: 5214, column: 32, scope: !12764)
!12764 = distinct !DILexicalBlock(scope: !12727, file: !3, line: 5214, column: 10)
!12765 = !DILocation(line: 5214, column: 39, scope: !12764)
!12766 = !DILocation(line: 5214, column: 47, scope: !12764)
!12767 = !DILocation(line: 5215, column: 11, scope: !12764)
!12768 = !DILocation(line: 5214, column: 10, scope: !12764)
!12769 = !DILocation(line: 5214, column: 10, scope: !12727)
!12770 = !DILocation(line: 5217, column: 7, scope: !12771)
!12771 = distinct !DILexicalBlock(scope: !12772, file: !3, line: 5217, column: 7)
!12772 = distinct !DILexicalBlock(scope: !12764, file: !3, line: 5216, column: 8)
!12773 = !DILocation(line: 5217, column: 17, scope: !12771)
!12774 = !DILocation(line: 5217, column: 14, scope: !12771)
!12775 = !DILocation(line: 5217, column: 7, scope: !12772)
!12776 = !DILocation(line: 5218, column: 19, scope: !12771)
!12777 = !DILocation(line: 5218, column: 23, scope: !12771)
!12778 = !DILocation(line: 5218, column: 31, scope: !12771)
!12779 = !DILocation(line: 5218, column: 5, scope: !12771)
!12780 = !DILocation(line: 5219, column: 3, scope: !12772)
!12781 = !DILocation(line: 5221, column: 26, scope: !12727)
!12782 = !DILocation(line: 5221, column: 6, scope: !12727)
!12783 = !DILocation(line: 5222, column: 4, scope: !12727)
!12784 = !DILocation(line: 5223, column: 7, scope: !12698)
!12785 = !DILocation(line: 5190, column: 11, scope: !12694)
!12786 = !DILocation(line: 5190, column: 9, scope: !12694)
!12787 = !DILocation(line: 5189, column: 5, scope: !12694)
!12788 = distinct !{!12788, !12696, !12789}
!12789 = !DILocation(line: 5223, column: 7, scope: !12690)
!12790 = !DILocation(line: 5188, column: 16, scope: !12686)
!12791 = !DILocation(line: 5188, column: 14, scope: !12686)
!12792 = !DILocation(line: 5187, column: 3, scope: !12686)
!12793 = distinct !{!12793, !12688, !12794}
!12794 = !DILocation(line: 5223, column: 7, scope: !12682)
!12795 = !DILocation(line: 5249, column: 7, scope: !12796)
!12796 = distinct !DILexicalBlock(scope: !12663, file: !3, line: 5249, column: 7)
!12797 = !DILocation(line: 5249, column: 17, scope: !12796)
!12798 = !DILocation(line: 5249, column: 20, scope: !12796)
!12799 = !DILocation(line: 5249, column: 53, scope: !12796)
!12800 = !DILocation(line: 5249, column: 7, scope: !12663)
!12801 = !DILocation(line: 5250, column: 18, scope: !12802)
!12802 = distinct !DILexicalBlock(scope: !12796, file: !3, line: 5250, column: 5)
!12803 = !DILocation(line: 5250, column: 16, scope: !12802)
!12804 = !DILocation(line: 5250, column: 10, scope: !12802)
!12805 = !DILocation(line: 5250, column: 35, scope: !12806)
!12806 = distinct !DILexicalBlock(scope: !12802, file: !3, line: 5250, column: 5)
!12807 = !DILocation(line: 5250, column: 41, scope: !12806)
!12808 = !DILocation(line: 5250, column: 5, scope: !12802)
!12809 = !DILocation(line: 5252, column: 42, scope: !12810)
!12810 = distinct !DILexicalBlock(scope: !12806, file: !3, line: 5252, column: 11)
!12811 = !DILocation(line: 5252, column: 57, scope: !12810)
!12812 = !DILocation(line: 5252, column: 31, scope: !12810)
!12813 = !DILocation(line: 5252, column: 28, scope: !12810)
!12814 = !DILocation(line: 5253, column: 4, scope: !12810)
!12815 = !DILocation(line: 5253, column: 9, scope: !12810)
!12816 = !DILocation(line: 5254, column: 8, scope: !12810)
!12817 = !DILocation(line: 5254, column: 11, scope: !12810)
!12818 = !DILocation(line: 5254, column: 38, scope: !12810)
!12819 = !DILocation(line: 5254, column: 36, scope: !12810)
!12820 = !DILocation(line: 5252, column: 11, scope: !12806)
!12821 = !DILocalVariable(name: "bitsize", scope: !12822, file: !3, line: 5256, type: !2756)
!12822 = distinct !DILexicalBlock(scope: !12810, file: !3, line: 5255, column: 2)
!12823 = !DILocation(line: 5256, column: 8, scope: !12822)
!12824 = !DILocalVariable(name: "offset", scope: !12822, file: !3, line: 5257, type: !2913)
!12825 = !DILocation(line: 5257, column: 20, scope: !12822)
!12826 = !DILocalVariable(name: "limit", scope: !12822, file: !3, line: 5258, type: !2732)
!12827 = !DILocation(line: 5258, column: 8, scope: !12822)
!12828 = !DILocalVariable(name: "lab1", scope: !12822, file: !3, line: 5258, type: !2732)
!12829 = !DILocation(line: 5258, column: 15, scope: !12822)
!12830 = !DILocalVariable(name: "lab2", scope: !12822, file: !3, line: 5258, type: !2732)
!12831 = !DILocation(line: 5258, column: 21, scope: !12822)
!12832 = !DILocalVariable(name: "insn", scope: !12822, file: !3, line: 5258, type: !2732)
!12833 = !DILocation(line: 5258, column: 27, scope: !12822)
!12834 = !DILocation(line: 5260, column: 14, scope: !12822)
!12835 = !DILocation(line: 5260, column: 12, scope: !12822)
!12836 = !DILocation(line: 5261, column: 25, scope: !12822)
!12837 = !DILocation(line: 5261, column: 33, scope: !12822)
!12838 = !DILocation(line: 5261, column: 38, scope: !12822)
!12839 = !DILocation(line: 5261, column: 4, scope: !12822)
!12840 = !DILocation(line: 5262, column: 12, scope: !12822)
!12841 = !DILocation(line: 5262, column: 10, scope: !12822)
!12842 = !DILocation(line: 5263, column: 11, scope: !12822)
!12843 = !DILocation(line: 5263, column: 9, scope: !12822)
!12844 = !DILocation(line: 5264, column: 11, scope: !12822)
!12845 = !DILocation(line: 5264, column: 9, scope: !12822)
!12846 = !DILocation(line: 5266, column: 8, scope: !12847)
!12847 = distinct !DILexicalBlock(scope: !12822, file: !3, line: 5266, column: 8)
!12848 = !DILocation(line: 5266, column: 17, scope: !12847)
!12849 = !DILocation(line: 5266, column: 14, scope: !12847)
!12850 = !DILocation(line: 5266, column: 8, scope: !12822)
!12851 = !DILocation(line: 5267, column: 30, scope: !12847)
!12852 = !DILocation(line: 5267, column: 37, scope: !12847)
!12853 = !DILocation(line: 5267, column: 13, scope: !12847)
!12854 = !DILocation(line: 5267, column: 11, scope: !12847)
!12855 = !DILocation(line: 5267, column: 6, scope: !12847)
!12856 = !DILocation(line: 5270, column: 4, scope: !12822)
!12857 = !DILocation(line: 5271, column: 29, scope: !12822)
!12858 = !DILocation(line: 5271, column: 35, scope: !12822)
!12859 = !DILocation(line: 5271, column: 56, scope: !12822)
!12860 = !DILocation(line: 5272, column: 11, scope: !12822)
!12861 = !DILocation(line: 5271, column: 4, scope: !12822)
!12862 = !DILocation(line: 5275, column: 16, scope: !12822)
!12863 = !DILocation(line: 5275, column: 20, scope: !12822)
!12864 = !DILocation(line: 5275, column: 4, scope: !12822)
!12865 = !DILocation(line: 5276, column: 30, scope: !12822)
!12866 = !DILocation(line: 5276, column: 20, scope: !12822)
!12867 = !DILocation(line: 5276, column: 4, scope: !12822)
!12868 = !DILocation(line: 5277, column: 4, scope: !12822)
!12869 = !DILocation(line: 5282, column: 16, scope: !12822)
!12870 = !DILocation(line: 5282, column: 4, scope: !12822)
!12871 = !DILocation(line: 5283, column: 27, scope: !12822)
!12872 = !DILocation(line: 5283, column: 55, scope: !12822)
!12873 = !DILocation(line: 5283, column: 61, scope: !12822)
!12874 = !DILocation(line: 5283, column: 13, scope: !12822)
!12875 = !DILocation(line: 5283, column: 11, scope: !12822)
!12876 = !DILocation(line: 5285, column: 16, scope: !12822)
!12877 = !DILocation(line: 5285, column: 20, scope: !12822)
!12878 = !DILocation(line: 5285, column: 4, scope: !12822)
!12879 = !DILocation(line: 5286, column: 27, scope: !12822)
!12880 = !DILocation(line: 5286, column: 53, scope: !12822)
!12881 = !DILocation(line: 5288, column: 29, scope: !12822)
!12882 = !DILocation(line: 5288, column: 37, scope: !12822)
!12883 = !DILocation(line: 5288, column: 25, scope: !12822)
!12884 = !DILocation(line: 5289, column: 7, scope: !12822)
!12885 = !DILocation(line: 5287, column: 6, scope: !12822)
!12886 = !DILocation(line: 5290, column: 6, scope: !12822)
!12887 = !DILocation(line: 5286, column: 13, scope: !12822)
!12888 = !DILocation(line: 5286, column: 11, scope: !12822)
!12889 = !DILocation(line: 5292, column: 8, scope: !12890)
!12890 = distinct !DILexicalBlock(scope: !12822, file: !3, line: 5292, column: 8)
!12891 = !DILocation(line: 5292, column: 18, scope: !12890)
!12892 = !DILocation(line: 5292, column: 15, scope: !12890)
!12893 = !DILocation(line: 5292, column: 8, scope: !12822)
!12894 = !DILocation(line: 5293, column: 22, scope: !12890)
!12895 = !DILocation(line: 5293, column: 26, scope: !12890)
!12896 = !DILocation(line: 5293, column: 6, scope: !12890)
!12897 = !DILocation(line: 5295, column: 16, scope: !12822)
!12898 = !DILocation(line: 5295, column: 4, scope: !12822)
!12899 = !DILocation(line: 5297, column: 8, scope: !12900)
!12900 = distinct !DILexicalBlock(scope: !12822, file: !3, line: 5297, column: 8)
!12901 = !DILocation(line: 5297, column: 50, scope: !12900)
!12902 = !DILocation(line: 5298, column: 8, scope: !12900)
!12903 = !DILocation(line: 5297, column: 8, scope: !12822)
!12904 = !DILocation(line: 5301, column: 31, scope: !12905)
!12905 = distinct !DILexicalBlock(scope: !12900, file: !3, line: 5299, column: 6)
!12906 = !DILocation(line: 5301, column: 35, scope: !12905)
!12907 = !DILocation(line: 5301, column: 15, scope: !12905)
!12908 = !DILocation(line: 5301, column: 13, scope: !12905)
!12909 = !DILocation(line: 5302, column: 29, scope: !12905)
!12910 = !DILocation(line: 5304, column: 8, scope: !12905)
!12911 = !DILocation(line: 5302, column: 8, scope: !12905)
!12912 = !DILocation(line: 5307, column: 6, scope: !12905)
!12913 = !DILocation(line: 5309, column: 4, scope: !12822)
!12914 = !DILocation(line: 5254, column: 70, scope: !12810)
!12915 = !DILocation(line: 5251, column: 11, scope: !12806)
!12916 = !DILocation(line: 5251, column: 9, scope: !12806)
!12917 = !DILocation(line: 5250, column: 5, scope: !12806)
!12918 = distinct !{!12918, !12808, !12919}
!12919 = !DILocation(line: 5310, column: 2, scope: !12802)
!12920 = !DILocation(line: 5316, column: 7, scope: !12921)
!12921 = distinct !DILexicalBlock(scope: !12663, file: !3, line: 5316, column: 7)
!12922 = !DILocation(line: 5316, column: 39, scope: !12921)
!12923 = !DILocation(line: 5316, column: 37, scope: !12921)
!12924 = !DILocation(line: 5316, column: 7, scope: !12663)
!12925 = !DILocation(line: 5318, column: 16, scope: !12926)
!12926 = distinct !DILexicalBlock(scope: !12921, file: !3, line: 5317, column: 5)
!12927 = !DILocation(line: 5318, column: 14, scope: !12926)
!12928 = !DILocation(line: 5320, column: 19, scope: !12926)
!12929 = !DILocation(line: 5320, column: 27, scope: !12926)
!12930 = !DILocation(line: 5320, column: 33, scope: !12926)
!12931 = !DILocation(line: 5320, column: 7, scope: !12926)
!12932 = !DILocation(line: 5321, column: 5, scope: !12926)
!12933 = !DILocalVariable(name: "insns", scope: !12934, file: !3, line: 5324, type: !2732)
!12934 = distinct !DILexicalBlock(scope: !12921, file: !3, line: 5323, column: 5)
!12935 = !DILocation(line: 5324, column: 11, scope: !12934)
!12936 = !DILocalVariable(name: "value", scope: !12934, file: !3, line: 5325, type: !2732)
!12937 = !DILocation(line: 5325, column: 11, scope: !12934)
!12938 = !DILocalVariable(name: "libfunc", scope: !12934, file: !3, line: 5326, type: !2732)
!12939 = !DILocation(line: 5326, column: 11, scope: !12934)
!12940 = !DILocalVariable(name: "tab", scope: !12934, file: !3, line: 5328, type: !3974)
!12941 = !DILocation(line: 5328, column: 21, scope: !12934)
!12942 = !DILocation(line: 5328, column: 27, scope: !12934)
!12943 = !DILocation(line: 5329, column: 40, scope: !12934)
!12944 = !DILocation(line: 5329, column: 45, scope: !12934)
!12945 = !DILocation(line: 5329, column: 60, scope: !12934)
!12946 = !DILocation(line: 5329, column: 17, scope: !12934)
!12947 = !DILocation(line: 5329, column: 15, scope: !12934)
!12948 = !DILocation(line: 5330, column: 7, scope: !12934)
!12949 = !DILocation(line: 5332, column: 7, scope: !12934)
!12950 = !DILocation(line: 5334, column: 40, scope: !12934)
!12951 = !DILocation(line: 5335, column: 12, scope: !12934)
!12952 = !DILocation(line: 5335, column: 30, scope: !12934)
!12953 = !DILocation(line: 5336, column: 12, scope: !12934)
!12954 = !DILocation(line: 5334, column: 15, scope: !12934)
!12955 = !DILocation(line: 5334, column: 13, scope: !12934)
!12956 = !DILocation(line: 5337, column: 15, scope: !12934)
!12957 = !DILocation(line: 5337, column: 13, scope: !12934)
!12958 = !DILocation(line: 5338, column: 7, scope: !12934)
!12959 = !DILocation(line: 5340, column: 27, scope: !12934)
!12960 = !DILocation(line: 5340, column: 34, scope: !12934)
!12961 = !DILocation(line: 5340, column: 42, scope: !12934)
!12962 = !DILocation(line: 5341, column: 6, scope: !12934)
!12963 = !DILocation(line: 5340, column: 7, scope: !12934)
!12964 = !DILocation(line: 5345, column: 7, scope: !12965)
!12965 = distinct !DILexicalBlock(scope: !12663, file: !3, line: 5345, column: 7)
!12966 = !DILocation(line: 5345, column: 17, scope: !12965)
!12967 = !DILocation(line: 5345, column: 14, scope: !12965)
!12968 = !DILocation(line: 5345, column: 7, scope: !12663)
!12969 = !DILocation(line: 5347, column: 11, scope: !12970)
!12970 = distinct !DILexicalBlock(scope: !12971, file: !3, line: 5347, column: 11)
!12971 = distinct !DILexicalBlock(scope: !12965, file: !3, line: 5346, column: 5)
!12972 = !DILocation(line: 5347, column: 28, scope: !12970)
!12973 = !DILocation(line: 5347, column: 25, scope: !12970)
!12974 = !DILocation(line: 5347, column: 11, scope: !12971)
!12975 = !DILocation(line: 5348, column: 25, scope: !12970)
!12976 = !DILocation(line: 5348, column: 29, scope: !12970)
!12977 = !DILocation(line: 5348, column: 9, scope: !12970)
!12978 = !DILocation(line: 5350, column: 23, scope: !12970)
!12979 = !DILocation(line: 5350, column: 27, scope: !12970)
!12980 = !DILocation(line: 5350, column: 9, scope: !12970)
!12981 = !DILocation(line: 5351, column: 5, scope: !12971)
!12982 = !DILocation(line: 5352, column: 1, scope: !12663)
!12983 = distinct !DISubprogram(name: "can_fix_p", scope: !3, file: !3, line: 4926, type: !12984, scopeLine: 4928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!12984 = !DISubroutineType(types: !12985)
!12985 = !{!527, !5, !5, !2756, !12986}
!12986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2756, size: 64)
!12987 = !DILocalVariable(name: "fixmode", arg: 1, scope: !12983, file: !3, line: 4926, type: !5)
!12988 = !DILocation(line: 4926, column: 30, scope: !12983)
!12989 = !DILocalVariable(name: "fltmode", arg: 2, scope: !12983, file: !3, line: 4926, type: !5)
!12990 = !DILocation(line: 4926, column: 57, scope: !12983)
!12991 = !DILocalVariable(name: "unsignedp", arg: 3, scope: !12983, file: !3, line: 4927, type: !2756)
!12992 = !DILocation(line: 4927, column: 9, scope: !12983)
!12993 = !DILocalVariable(name: "truncp_ptr", arg: 4, scope: !12983, file: !3, line: 4927, type: !12986)
!12994 = !DILocation(line: 4927, column: 25, scope: !12983)
!12995 = !DILocalVariable(name: "tab", scope: !12983, file: !3, line: 4929, type: !3974)
!12996 = !DILocation(line: 4929, column: 17, scope: !12983)
!12997 = !DILocalVariable(name: "icode", scope: !12983, file: !3, line: 4930, type: !527)
!12998 = !DILocation(line: 4930, column: 18, scope: !12983)
!12999 = !DILocation(line: 4932, column: 9, scope: !12983)
!13000 = !DILocation(line: 4932, column: 7, scope: !12983)
!13001 = !DILocation(line: 4933, column: 11, scope: !12983)
!13002 = !DILocation(line: 4933, column: 58, scope: !12983)
!13003 = !DILocation(line: 4933, column: 9, scope: !12983)
!13004 = !DILocation(line: 4934, column: 7, scope: !13005)
!13005 = distinct !DILexicalBlock(scope: !12983, file: !3, line: 4934, column: 7)
!13006 = !DILocation(line: 4934, column: 13, scope: !13005)
!13007 = !DILocation(line: 4934, column: 7, scope: !12983)
!13008 = !DILocation(line: 4936, column: 8, scope: !13009)
!13009 = distinct !DILexicalBlock(scope: !13005, file: !3, line: 4935, column: 5)
!13010 = !DILocation(line: 4936, column: 19, scope: !13009)
!13011 = !DILocation(line: 4937, column: 14, scope: !13009)
!13012 = !DILocation(line: 4937, column: 7, scope: !13009)
!13013 = !DILocation(line: 4943, column: 9, scope: !12983)
!13014 = !DILocation(line: 4943, column: 7, scope: !12983)
!13015 = !DILocation(line: 4944, column: 11, scope: !12983)
!13016 = !DILocation(line: 4944, column: 58, scope: !12983)
!13017 = !DILocation(line: 4944, column: 9, scope: !12983)
!13018 = !DILocation(line: 4945, column: 7, scope: !13019)
!13019 = distinct !DILexicalBlock(scope: !12983, file: !3, line: 4945, column: 7)
!13020 = !DILocation(line: 4945, column: 13, scope: !13019)
!13021 = !DILocation(line: 4946, column: 7, scope: !13019)
!13022 = !DILocation(line: 4946, column: 10, scope: !13019)
!13023 = !DILocation(line: 4946, column: 49, scope: !13019)
!13024 = !DILocation(line: 4946, column: 59, scope: !13019)
!13025 = !DILocation(line: 4945, column: 7, scope: !12983)
!13026 = !DILocation(line: 4948, column: 8, scope: !13027)
!13027 = distinct !DILexicalBlock(scope: !13019, file: !3, line: 4947, column: 5)
!13028 = !DILocation(line: 4948, column: 19, scope: !13027)
!13029 = !DILocation(line: 4949, column: 14, scope: !13027)
!13030 = !DILocation(line: 4949, column: 7, scope: !13027)
!13031 = !DILocation(line: 4952, column: 4, scope: !12983)
!13032 = !DILocation(line: 4952, column: 15, scope: !12983)
!13033 = !DILocation(line: 4953, column: 3, scope: !12983)
!13034 = !DILocation(line: 4954, column: 1, scope: !12983)
!13035 = distinct !DISubprogram(name: "expand_fixed_convert", scope: !3, file: !3, line: 5359, type: !13036, scopeLine: 5360, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13036 = !DISubroutineType(types: !13037)
!13037 = !{null, !2732, !2732, !2756, !2756}
!13038 = !DILocalVariable(name: "to", arg: 1, scope: !13035, file: !3, line: 5359, type: !2732)
!13039 = !DILocation(line: 5359, column: 27, scope: !13035)
!13040 = !DILocalVariable(name: "from", arg: 2, scope: !13035, file: !3, line: 5359, type: !2732)
!13041 = !DILocation(line: 5359, column: 35, scope: !13035)
!13042 = !DILocalVariable(name: "uintp", arg: 3, scope: !13035, file: !3, line: 5359, type: !2756)
!13043 = !DILocation(line: 5359, column: 45, scope: !13035)
!13044 = !DILocalVariable(name: "satp", arg: 4, scope: !13035, file: !3, line: 5359, type: !2756)
!13045 = !DILocation(line: 5359, column: 56, scope: !13035)
!13046 = !DILocalVariable(name: "to_mode", scope: !13035, file: !3, line: 5361, type: !5)
!13047 = !DILocation(line: 5361, column: 21, scope: !13035)
!13048 = !DILocation(line: 5361, column: 31, scope: !13035)
!13049 = !DILocalVariable(name: "from_mode", scope: !13035, file: !3, line: 5362, type: !5)
!13050 = !DILocation(line: 5362, column: 21, scope: !13035)
!13051 = !DILocation(line: 5362, column: 33, scope: !13035)
!13052 = !DILocalVariable(name: "tab", scope: !13035, file: !3, line: 5363, type: !3974)
!13053 = !DILocation(line: 5363, column: 17, scope: !13035)
!13054 = !DILocalVariable(name: "this_code", scope: !13035, file: !3, line: 5364, type: !384)
!13055 = !DILocation(line: 5364, column: 17, scope: !13035)
!13056 = !DILocalVariable(name: "code", scope: !13035, file: !3, line: 5365, type: !527)
!13057 = !DILocation(line: 5365, column: 18, scope: !13035)
!13058 = !DILocalVariable(name: "insns", scope: !13035, file: !3, line: 5366, type: !2732)
!13059 = !DILocation(line: 5366, column: 7, scope: !13035)
!13060 = !DILocalVariable(name: "value", scope: !13035, file: !3, line: 5366, type: !2732)
!13061 = !DILocation(line: 5366, column: 14, scope: !13035)
!13062 = !DILocalVariable(name: "libfunc", scope: !13035, file: !3, line: 5367, type: !2732)
!13063 = !DILocation(line: 5367, column: 7, scope: !13035)
!13064 = !DILocation(line: 5369, column: 7, scope: !13065)
!13065 = distinct !DILexicalBlock(scope: !13035, file: !3, line: 5369, column: 7)
!13066 = !DILocation(line: 5369, column: 18, scope: !13065)
!13067 = !DILocation(line: 5369, column: 15, scope: !13065)
!13068 = !DILocation(line: 5369, column: 7, scope: !13035)
!13069 = !DILocation(line: 5371, column: 23, scope: !13070)
!13070 = distinct !DILexicalBlock(scope: !13065, file: !3, line: 5370, column: 5)
!13071 = !DILocation(line: 5371, column: 27, scope: !13070)
!13072 = !DILocation(line: 5371, column: 7, scope: !13070)
!13073 = !DILocation(line: 5372, column: 7, scope: !13070)
!13074 = !DILocation(line: 5375, column: 7, scope: !13075)
!13075 = distinct !DILexicalBlock(scope: !13035, file: !3, line: 5375, column: 7)
!13076 = !DILocation(line: 5375, column: 7, scope: !13035)
!13077 = !DILocation(line: 5377, column: 13, scope: !13078)
!13078 = distinct !DILexicalBlock(scope: !13075, file: !3, line: 5376, column: 5)
!13079 = !DILocation(line: 5377, column: 11, scope: !13078)
!13080 = !DILocation(line: 5378, column: 19, scope: !13078)
!13081 = !DILocation(line: 5378, column: 17, scope: !13078)
!13082 = !DILocation(line: 5379, column: 5, scope: !13078)
!13083 = !DILocation(line: 5382, column: 13, scope: !13084)
!13084 = distinct !DILexicalBlock(scope: !13075, file: !3, line: 5381, column: 5)
!13085 = !DILocation(line: 5382, column: 11, scope: !13084)
!13086 = !DILocation(line: 5383, column: 19, scope: !13084)
!13087 = !DILocation(line: 5383, column: 17, scope: !13084)
!13088 = !DILocation(line: 5385, column: 10, scope: !13035)
!13089 = !DILocation(line: 5385, column: 15, scope: !13035)
!13090 = !DILocation(line: 5385, column: 24, scope: !13035)
!13091 = !DILocation(line: 5385, column: 33, scope: !13035)
!13092 = !DILocation(line: 5385, column: 44, scope: !13035)
!13093 = !DILocation(line: 5385, column: 8, scope: !13035)
!13094 = !DILocation(line: 5386, column: 7, scope: !13095)
!13095 = distinct !DILexicalBlock(scope: !13035, file: !3, line: 5386, column: 7)
!13096 = !DILocation(line: 5386, column: 12, scope: !13095)
!13097 = !DILocation(line: 5386, column: 7, scope: !13035)
!13098 = !DILocation(line: 5388, column: 23, scope: !13099)
!13099 = distinct !DILexicalBlock(scope: !13095, file: !3, line: 5387, column: 5)
!13100 = !DILocation(line: 5388, column: 29, scope: !13099)
!13101 = !DILocation(line: 5388, column: 33, scope: !13099)
!13102 = !DILocation(line: 5388, column: 39, scope: !13099)
!13103 = !DILocation(line: 5388, column: 7, scope: !13099)
!13104 = !DILocation(line: 5389, column: 7, scope: !13099)
!13105 = !DILocation(line: 5392, column: 36, scope: !13035)
!13106 = !DILocation(line: 5392, column: 41, scope: !13035)
!13107 = !DILocation(line: 5392, column: 50, scope: !13035)
!13108 = !DILocation(line: 5392, column: 13, scope: !13035)
!13109 = !DILocation(line: 5392, column: 11, scope: !13035)
!13110 = !DILocation(line: 5393, column: 3, scope: !13035)
!13111 = !DILocation(line: 5395, column: 3, scope: !13035)
!13112 = !DILocation(line: 5396, column: 36, scope: !13035)
!13113 = !DILocation(line: 5396, column: 66, scope: !13035)
!13114 = !DILocation(line: 5397, column: 11, scope: !13035)
!13115 = !DILocation(line: 5397, column: 17, scope: !13035)
!13116 = !DILocation(line: 5396, column: 11, scope: !13035)
!13117 = !DILocation(line: 5396, column: 9, scope: !13035)
!13118 = !DILocation(line: 5398, column: 11, scope: !13035)
!13119 = !DILocation(line: 5398, column: 9, scope: !13035)
!13120 = !DILocation(line: 5399, column: 3, scope: !13035)
!13121 = !DILocation(line: 5401, column: 23, scope: !13035)
!13122 = !DILocation(line: 5401, column: 30, scope: !13035)
!13123 = !DILocation(line: 5401, column: 34, scope: !13035)
!13124 = !DILocation(line: 5402, column: 9, scope: !13035)
!13125 = !DILocation(line: 5401, column: 3, scope: !13035)
!13126 = !DILocation(line: 5403, column: 1, scope: !13035)
!13127 = distinct !DISubprogram(name: "expand_sfix_optab", scope: !3, file: !3, line: 5410, type: !13128, scopeLine: 5411, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13128 = !DISubroutineType(types: !13129)
!13129 = !{!2966, !2732, !2732, !3974}
!13130 = !DILocalVariable(name: "to", arg: 1, scope: !13127, file: !3, line: 5410, type: !2732)
!13131 = !DILocation(line: 5410, column: 24, scope: !13127)
!13132 = !DILocalVariable(name: "from", arg: 2, scope: !13127, file: !3, line: 5410, type: !2732)
!13133 = !DILocation(line: 5410, column: 32, scope: !13127)
!13134 = !DILocalVariable(name: "tab", arg: 3, scope: !13127, file: !3, line: 5410, type: !3974)
!13135 = !DILocation(line: 5410, column: 52, scope: !13127)
!13136 = !DILocalVariable(name: "icode", scope: !13127, file: !3, line: 5412, type: !527)
!13137 = !DILocation(line: 5412, column: 18, scope: !13127)
!13138 = !DILocalVariable(name: "target", scope: !13127, file: !3, line: 5413, type: !2732)
!13139 = !DILocation(line: 5413, column: 7, scope: !13127)
!13140 = !DILocation(line: 5413, column: 16, scope: !13127)
!13141 = !DILocalVariable(name: "fmode", scope: !13127, file: !3, line: 5414, type: !5)
!13142 = !DILocation(line: 5414, column: 21, scope: !13127)
!13143 = !DILocalVariable(name: "imode", scope: !13127, file: !3, line: 5414, type: !5)
!13144 = !DILocation(line: 5414, column: 28, scope: !13127)
!13145 = !DILocation(line: 5421, column: 16, scope: !13146)
!13146 = distinct !DILexicalBlock(scope: !13127, file: !3, line: 5421, column: 3)
!13147 = !DILocation(line: 5421, column: 14, scope: !13146)
!13148 = !DILocation(line: 5421, column: 8, scope: !13146)
!13149 = !DILocation(line: 5421, column: 33, scope: !13150)
!13150 = distinct !DILexicalBlock(scope: !13146, file: !3, line: 5421, column: 3)
!13151 = !DILocation(line: 5421, column: 39, scope: !13150)
!13152 = !DILocation(line: 5421, column: 3, scope: !13146)
!13153 = !DILocation(line: 5423, column: 18, scope: !13154)
!13154 = distinct !DILexicalBlock(scope: !13150, file: !3, line: 5423, column: 5)
!13155 = !DILocation(line: 5423, column: 16, scope: !13154)
!13156 = !DILocation(line: 5423, column: 10, scope: !13154)
!13157 = !DILocation(line: 5423, column: 33, scope: !13158)
!13158 = distinct !DILexicalBlock(scope: !13154, file: !3, line: 5423, column: 5)
!13159 = !DILocation(line: 5423, column: 39, scope: !13158)
!13160 = !DILocation(line: 5423, column: 5, scope: !13154)
!13161 = !DILocation(line: 5426, column: 10, scope: !13162)
!13162 = distinct !DILexicalBlock(scope: !13158, file: !3, line: 5425, column: 7)
!13163 = !DILocation(line: 5426, column: 53, scope: !13162)
!13164 = !DILocation(line: 5426, column: 8, scope: !13162)
!13165 = !DILocation(line: 5427, column: 6, scope: !13166)
!13166 = distinct !DILexicalBlock(scope: !13162, file: !3, line: 5427, column: 6)
!13167 = !DILocation(line: 5427, column: 12, scope: !13166)
!13168 = !DILocation(line: 5427, column: 6, scope: !13162)
!13169 = !DILocalVariable(name: "last", scope: !13170, file: !3, line: 5429, type: !2732)
!13170 = distinct !DILexicalBlock(scope: !13166, file: !3, line: 5428, column: 4)
!13171 = !DILocation(line: 5429, column: 10, scope: !13170)
!13172 = !DILocation(line: 5429, column: 17, scope: !13170)
!13173 = !DILocation(line: 5430, column: 10, scope: !13174)
!13174 = distinct !DILexicalBlock(scope: !13170, file: !3, line: 5430, column: 10)
!13175 = !DILocation(line: 5430, column: 19, scope: !13174)
!13176 = !DILocation(line: 5430, column: 16, scope: !13174)
!13177 = !DILocation(line: 5430, column: 10, scope: !13170)
!13178 = !DILocation(line: 5431, column: 32, scope: !13174)
!13179 = !DILocation(line: 5431, column: 39, scope: !13174)
!13180 = !DILocation(line: 5431, column: 15, scope: !13174)
!13181 = !DILocation(line: 5431, column: 13, scope: !13174)
!13182 = !DILocation(line: 5431, column: 8, scope: !13174)
!13183 = !DILocation(line: 5433, column: 10, scope: !13184)
!13184 = distinct !DILexicalBlock(scope: !13170, file: !3, line: 5433, column: 10)
!13185 = !DILocation(line: 5433, column: 19, scope: !13184)
!13186 = !DILocation(line: 5433, column: 16, scope: !13184)
!13187 = !DILocation(line: 5433, column: 10, scope: !13170)
!13188 = !DILocation(line: 5434, column: 30, scope: !13184)
!13189 = !DILocation(line: 5434, column: 17, scope: !13184)
!13190 = !DILocation(line: 5434, column: 15, scope: !13184)
!13191 = !DILocation(line: 5434, column: 8, scope: !13184)
!13192 = !DILocation(line: 5436, column: 33, scope: !13193)
!13193 = distinct !DILexicalBlock(scope: !13170, file: !3, line: 5436, column: 10)
!13194 = !DILocation(line: 5436, column: 40, scope: !13193)
!13195 = !DILocation(line: 5436, column: 48, scope: !13193)
!13196 = !DILocation(line: 5436, column: 11, scope: !13193)
!13197 = !DILocation(line: 5436, column: 10, scope: !13170)
!13198 = !DILocation(line: 5438, column: 30, scope: !13199)
!13199 = distinct !DILexicalBlock(scope: !13193, file: !3, line: 5437, column: 8)
!13200 = !DILocation(line: 5438, column: 10, scope: !13199)
!13201 = !DILocation(line: 5439, column: 3, scope: !13199)
!13202 = !DILocation(line: 5441, column: 10, scope: !13203)
!13203 = distinct !DILexicalBlock(scope: !13170, file: !3, line: 5441, column: 10)
!13204 = !DILocation(line: 5441, column: 20, scope: !13203)
!13205 = !DILocation(line: 5441, column: 17, scope: !13203)
!13206 = !DILocation(line: 5441, column: 10, scope: !13170)
!13207 = !DILocation(line: 5442, column: 22, scope: !13203)
!13208 = !DILocation(line: 5442, column: 26, scope: !13203)
!13209 = !DILocation(line: 5442, column: 8, scope: !13203)
!13210 = !DILocation(line: 5443, column: 6, scope: !13170)
!13211 = !DILocation(line: 5445, column: 7, scope: !13162)
!13212 = !DILocation(line: 5424, column: 11, scope: !13158)
!13213 = !DILocation(line: 5424, column: 9, scope: !13158)
!13214 = !DILocation(line: 5423, column: 5, scope: !13158)
!13215 = distinct !{!13215, !13160, !13216}
!13216 = !DILocation(line: 5445, column: 7, scope: !13154)
!13217 = !DILocation(line: 5422, column: 16, scope: !13150)
!13218 = !DILocation(line: 5422, column: 14, scope: !13150)
!13219 = !DILocation(line: 5421, column: 3, scope: !13150)
!13220 = distinct !{!13220, !13152, !13221}
!13221 = !DILocation(line: 5445, column: 7, scope: !13146)
!13222 = !DILocation(line: 5447, column: 3, scope: !13127)
!13223 = !DILocation(line: 5448, column: 1, scope: !13127)
!13224 = distinct !DISubprogram(name: "have_insn_for", scope: !3, file: !3, line: 5453, type: !13225, scopeLine: 5454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13225 = !DISubroutineType(types: !13226)
!13226 = !{!2756, !384, !5}
!13227 = !DILocalVariable(name: "code", arg: 1, scope: !13224, file: !3, line: 5453, type: !384)
!13228 = !DILocation(line: 5453, column: 30, scope: !13224)
!13229 = !DILocalVariable(name: "mode", arg: 2, scope: !13224, file: !3, line: 5453, type: !5)
!13230 = !DILocation(line: 5453, column: 54, scope: !13224)
!13231 = !DILocation(line: 5455, column: 31, scope: !13224)
!13232 = !DILocation(line: 5455, column: 11, scope: !13224)
!13233 = !DILocation(line: 5455, column: 37, scope: !13224)
!13234 = !DILocation(line: 5456, column: 4, scope: !13224)
!13235 = !DILocation(line: 5456, column: 8, scope: !13224)
!13236 = !DILocation(line: 5456, column: 57, scope: !13224)
!13237 = !DILocation(line: 5457, column: 8, scope: !13224)
!13238 = !DILocation(line: 0, scope: !13224)
!13239 = !DILocation(line: 5455, column: 3, scope: !13224)
!13240 = distinct !DISubprogram(name: "build_libfunc_function", scope: !3, file: !3, line: 6072, type: !13241, scopeLine: 6073, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13241 = !DISubroutineType(types: !13242)
!13242 = !{!2853, !2759}
!13243 = !DILocalVariable(name: "name", arg: 1, scope: !13240, file: !3, line: 6072, type: !2759)
!13244 = !DILocation(line: 6072, column: 37, scope: !13240)
!13245 = !DILocalVariable(name: "decl", scope: !13240, file: !3, line: 6074, type: !2853)
!13246 = !DILocation(line: 6074, column: 8, scope: !13240)
!13247 = !DILocation(line: 6074, column: 15, scope: !13240)
!13248 = !DILocation(line: 6079, column: 3, scope: !13240)
!13249 = !DILocation(line: 6079, column: 26, scope: !13240)
!13250 = !DILocation(line: 6080, column: 3, scope: !13240)
!13251 = !DILocation(line: 6080, column: 24, scope: !13240)
!13252 = !DILocation(line: 6081, column: 3, scope: !13240)
!13253 = !DILocation(line: 6081, column: 22, scope: !13240)
!13254 = !DILocation(line: 6082, column: 3, scope: !13240)
!13255 = !DILocation(line: 6086, column: 3, scope: !13240)
!13256 = !DILocation(line: 6088, column: 10, scope: !13240)
!13257 = !DILocation(line: 6088, column: 3, scope: !13240)
!13258 = distinct !DISubprogram(name: "init_one_libfunc", scope: !3, file: !3, line: 6092, type: !13259, scopeLine: 6093, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13259 = !DISubroutineType(types: !13260)
!13260 = !{!2732, !2759}
!13261 = !DILocalVariable(name: "name", arg: 1, scope: !13258, file: !3, line: 6092, type: !2759)
!13262 = !DILocation(line: 6092, column: 31, scope: !13258)
!13263 = !DILocalVariable(name: "id", scope: !13258, file: !3, line: 6094, type: !2853)
!13264 = !DILocation(line: 6094, column: 8, scope: !13258)
!13265 = !DILocalVariable(name: "decl", scope: !13258, file: !3, line: 6094, type: !2853)
!13266 = !DILocation(line: 6094, column: 12, scope: !13258)
!13267 = !DILocalVariable(name: "slot", scope: !13258, file: !3, line: 6095, type: !3207)
!13268 = !DILocation(line: 6095, column: 10, scope: !13258)
!13269 = !DILocalVariable(name: "hash", scope: !13258, file: !3, line: 6096, type: !3193)
!13270 = !DILocation(line: 6096, column: 13, scope: !13258)
!13271 = !DILocation(line: 6098, column: 7, scope: !13272)
!13272 = distinct !DILexicalBlock(scope: !13258, file: !3, line: 6098, column: 7)
!13273 = !DILocation(line: 6098, column: 21, scope: !13272)
!13274 = !DILocation(line: 6098, column: 7, scope: !13258)
!13275 = !DILocation(line: 6099, column: 21, scope: !13272)
!13276 = !DILocation(line: 6099, column: 19, scope: !13272)
!13277 = !DILocation(line: 6099, column: 5, scope: !13272)
!13278 = !DILocation(line: 6103, column: 24, scope: !13258)
!13279 = !DILocation(line: 6103, column: 8, scope: !13258)
!13280 = !DILocation(line: 6103, column: 6, scope: !13258)
!13281 = !DILocation(line: 6104, column: 28, scope: !13258)
!13282 = !DILocation(line: 6104, column: 10, scope: !13258)
!13283 = !DILocation(line: 6104, column: 8, scope: !13258)
!13284 = !DILocation(line: 6105, column: 36, scope: !13258)
!13285 = !DILocation(line: 6105, column: 51, scope: !13258)
!13286 = !DILocation(line: 6105, column: 55, scope: !13258)
!13287 = !DILocation(line: 6105, column: 10, scope: !13258)
!13288 = !DILocation(line: 6105, column: 8, scope: !13258)
!13289 = !DILocation(line: 6106, column: 18, scope: !13258)
!13290 = !DILocation(line: 6106, column: 17, scope: !13258)
!13291 = !DILocation(line: 6106, column: 10, scope: !13258)
!13292 = !DILocation(line: 6106, column: 8, scope: !13258)
!13293 = !DILocation(line: 6107, column: 7, scope: !13294)
!13294 = distinct !DILexicalBlock(scope: !13258, file: !3, line: 6107, column: 7)
!13295 = !DILocation(line: 6107, column: 12, scope: !13294)
!13296 = !DILocation(line: 6107, column: 7, scope: !13258)
!13297 = !DILocation(line: 6111, column: 38, scope: !13298)
!13298 = distinct !DILexicalBlock(scope: !13294, file: !3, line: 6108, column: 5)
!13299 = !DILocation(line: 6111, column: 14, scope: !13298)
!13300 = !DILocation(line: 6111, column: 12, scope: !13298)
!13301 = !DILocation(line: 6112, column: 15, scope: !13298)
!13302 = !DILocation(line: 6112, column: 8, scope: !13298)
!13303 = !DILocation(line: 6112, column: 13, scope: !13298)
!13304 = !DILocation(line: 6113, column: 5, scope: !13298)
!13305 = !DILocation(line: 6114, column: 10, scope: !13258)
!13306 = !DILocation(line: 6114, column: 3, scope: !13258)
!13307 = distinct !DISubprogram(name: "libfunc_decl_hash", scope: !3, file: !3, line: 6058, type: !3191, scopeLine: 6059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13308 = !DILocalVariable(name: "entry", arg: 1, scope: !13307, file: !3, line: 6058, type: !3194)
!13309 = !DILocation(line: 6058, column: 32, scope: !13307)
!13310 = !DILocation(line: 6060, column: 28, scope: !13307)
!13311 = !DILocation(line: 6060, column: 10, scope: !13307)
!13312 = !DILocation(line: 6060, column: 3, scope: !13307)
!13313 = distinct !DISubprogram(name: "libfunc_decl_eq", scope: !3, file: !3, line: 6064, type: !3199, scopeLine: 6065, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13314 = !DILocalVariable(name: "entry1", arg: 1, scope: !13313, file: !3, line: 6064, type: !3194)
!13315 = !DILocation(line: 6064, column: 30, scope: !13313)
!13316 = !DILocalVariable(name: "entry2", arg: 2, scope: !13313, file: !3, line: 6064, type: !3194)
!13317 = !DILocation(line: 6064, column: 50, scope: !13313)
!13318 = !DILocation(line: 6066, column: 10, scope: !13313)
!13319 = !DILocation(line: 6066, column: 58, scope: !13313)
!13320 = !DILocation(line: 6066, column: 45, scope: !13313)
!13321 = !DILocation(line: 6066, column: 42, scope: !13313)
!13322 = !DILocation(line: 6066, column: 3, scope: !13313)
!13323 = distinct !DISubprogram(name: "set_user_assembler_libfunc", scope: !3, file: !3, line: 6120, type: !13324, scopeLine: 6121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13324 = !DISubroutineType(types: !13325)
!13325 = !{!2732, !2759, !2759}
!13326 = !DILocalVariable(name: "name", arg: 1, scope: !13323, file: !3, line: 6120, type: !2759)
!13327 = !DILocation(line: 6120, column: 41, scope: !13323)
!13328 = !DILocalVariable(name: "asmspec", arg: 2, scope: !13323, file: !3, line: 6120, type: !2759)
!13329 = !DILocation(line: 6120, column: 59, scope: !13323)
!13330 = !DILocalVariable(name: "id", scope: !13323, file: !3, line: 6122, type: !2853)
!13331 = !DILocation(line: 6122, column: 8, scope: !13323)
!13332 = !DILocalVariable(name: "decl", scope: !13323, file: !3, line: 6122, type: !2853)
!13333 = !DILocation(line: 6122, column: 12, scope: !13323)
!13334 = !DILocalVariable(name: "slot", scope: !13323, file: !3, line: 6123, type: !3207)
!13335 = !DILocation(line: 6123, column: 10, scope: !13323)
!13336 = !DILocalVariable(name: "hash", scope: !13323, file: !3, line: 6124, type: !3193)
!13337 = !DILocation(line: 6124, column: 13, scope: !13323)
!13338 = !DILocation(line: 6126, column: 24, scope: !13323)
!13339 = !DILocation(line: 6126, column: 8, scope: !13323)
!13340 = !DILocation(line: 6126, column: 6, scope: !13323)
!13341 = !DILocation(line: 6127, column: 28, scope: !13323)
!13342 = !DILocation(line: 6127, column: 10, scope: !13323)
!13343 = !DILocation(line: 6127, column: 8, scope: !13323)
!13344 = !DILocation(line: 6128, column: 36, scope: !13323)
!13345 = !DILocation(line: 6128, column: 51, scope: !13323)
!13346 = !DILocation(line: 6128, column: 55, scope: !13323)
!13347 = !DILocation(line: 6128, column: 10, scope: !13323)
!13348 = !DILocation(line: 6128, column: 8, scope: !13323)
!13349 = !DILocation(line: 6129, column: 3, scope: !13323)
!13350 = !DILocation(line: 6130, column: 18, scope: !13323)
!13351 = !DILocation(line: 6130, column: 17, scope: !13323)
!13352 = !DILocation(line: 6130, column: 10, scope: !13323)
!13353 = !DILocation(line: 6130, column: 8, scope: !13323)
!13354 = !DILocation(line: 6131, column: 28, scope: !13323)
!13355 = !DILocation(line: 6131, column: 34, scope: !13323)
!13356 = !DILocation(line: 6131, column: 3, scope: !13323)
!13357 = !DILocation(line: 6132, column: 10, scope: !13323)
!13358 = !DILocation(line: 6132, column: 3, scope: !13323)
!13359 = distinct !DISubprogram(name: "set_optab_libfunc", scope: !3, file: !3, line: 6138, type: !13360, scopeLine: 6139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13360 = !DISubroutineType(types: !13361)
!13361 = !{null, !3938, !5, !2759}
!13362 = !DILocalVariable(name: "optable", arg: 1, scope: !13359, file: !3, line: 6138, type: !3938)
!13363 = !DILocation(line: 6138, column: 26, scope: !13359)
!13364 = !DILocalVariable(name: "mode", arg: 2, scope: !13359, file: !3, line: 6138, type: !5)
!13365 = !DILocation(line: 6138, column: 53, scope: !13359)
!13366 = !DILocalVariable(name: "name", arg: 3, scope: !13359, file: !3, line: 6138, type: !2759)
!13367 = !DILocation(line: 6138, column: 71, scope: !13359)
!13368 = !DILocalVariable(name: "val", scope: !13359, file: !3, line: 6140, type: !2732)
!13369 = !DILocation(line: 6140, column: 7, scope: !13359)
!13370 = !DILocalVariable(name: "e", scope: !13359, file: !3, line: 6141, type: !2726)
!13371 = !DILocation(line: 6141, column: 24, scope: !13359)
!13372 = !DILocalVariable(name: "slot", scope: !13359, file: !3, line: 6142, type: !2724)
!13373 = !DILocation(line: 6142, column: 26, scope: !13359)
!13374 = !DILocation(line: 6143, column: 23, scope: !13359)
!13375 = !DILocation(line: 6143, column: 31, scope: !13359)
!13376 = !DILocation(line: 6143, column: 5, scope: !13359)
!13377 = !DILocation(line: 6143, column: 11, scope: !13359)
!13378 = !DILocation(line: 6144, column: 13, scope: !13359)
!13379 = !DILocation(line: 6144, column: 5, scope: !13359)
!13380 = !DILocation(line: 6144, column: 11, scope: !13359)
!13381 = !DILocation(line: 6145, column: 5, scope: !13359)
!13382 = !DILocation(line: 6145, column: 11, scope: !13359)
!13383 = !DILocation(line: 6147, column: 7, scope: !13384)
!13384 = distinct !DILexicalBlock(scope: !13359, file: !3, line: 6147, column: 7)
!13385 = !DILocation(line: 6147, column: 7, scope: !13359)
!13386 = !DILocation(line: 6148, column: 29, scope: !13384)
!13387 = !DILocation(line: 6148, column: 11, scope: !13384)
!13388 = !DILocation(line: 6148, column: 9, scope: !13384)
!13389 = !DILocation(line: 6148, column: 5, scope: !13384)
!13390 = !DILocation(line: 6150, column: 9, scope: !13384)
!13391 = !DILocation(line: 6151, column: 52, scope: !13359)
!13392 = !DILocation(line: 6151, column: 66, scope: !13359)
!13393 = !DILocation(line: 6151, column: 36, scope: !13359)
!13394 = !DILocation(line: 6151, column: 10, scope: !13359)
!13395 = !DILocation(line: 6151, column: 8, scope: !13359)
!13396 = !DILocation(line: 6152, column: 8, scope: !13397)
!13397 = distinct !DILexicalBlock(scope: !13359, file: !3, line: 6152, column: 7)
!13398 = !DILocation(line: 6152, column: 7, scope: !13397)
!13399 = !DILocation(line: 6152, column: 13, scope: !13397)
!13400 = !DILocation(line: 6152, column: 7, scope: !13359)
!13401 = !DILocation(line: 6153, column: 13, scope: !13397)
!13402 = !DILocation(line: 6153, column: 6, scope: !13397)
!13403 = !DILocation(line: 6153, column: 11, scope: !13397)
!13404 = !DILocation(line: 6153, column: 5, scope: !13397)
!13405 = !DILocation(line: 6154, column: 30, scope: !13359)
!13406 = !DILocation(line: 6154, column: 38, scope: !13359)
!13407 = !DILocation(line: 6154, column: 5, scope: !13359)
!13408 = !DILocation(line: 6154, column: 4, scope: !13359)
!13409 = !DILocation(line: 6154, column: 12, scope: !13359)
!13410 = !DILocation(line: 6154, column: 18, scope: !13359)
!13411 = !DILocation(line: 6155, column: 20, scope: !13359)
!13412 = !DILocation(line: 6155, column: 5, scope: !13359)
!13413 = !DILocation(line: 6155, column: 4, scope: !13359)
!13414 = !DILocation(line: 6155, column: 12, scope: !13359)
!13415 = !DILocation(line: 6155, column: 18, scope: !13359)
!13416 = !DILocation(line: 6156, column: 5, scope: !13359)
!13417 = !DILocation(line: 6156, column: 4, scope: !13359)
!13418 = !DILocation(line: 6156, column: 12, scope: !13359)
!13419 = !DILocation(line: 6156, column: 18, scope: !13359)
!13420 = !DILocation(line: 6157, column: 22, scope: !13359)
!13421 = !DILocation(line: 6157, column: 5, scope: !13359)
!13422 = !DILocation(line: 6157, column: 4, scope: !13359)
!13423 = !DILocation(line: 6157, column: 12, scope: !13359)
!13424 = !DILocation(line: 6157, column: 20, scope: !13359)
!13425 = !DILocation(line: 6158, column: 1, scope: !13359)
!13426 = distinct !DISubprogram(name: "set_conv_libfunc", scope: !3, file: !3, line: 6164, type: !13427, scopeLine: 6166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!13427 = !DISubroutineType(types: !13428)
!13428 = !{null, !3974, !5, !5, !2759}
!13429 = !DILocalVariable(name: "optable", arg: 1, scope: !13426, file: !3, line: 6164, type: !3974)
!13430 = !DILocation(line: 6164, column: 33, scope: !13426)
!13431 = !DILocalVariable(name: "tmode", arg: 2, scope: !13426, file: !3, line: 6164, type: !5)
!13432 = !DILocation(line: 6164, column: 60, scope: !13426)
!13433 = !DILocalVariable(name: "fmode", arg: 3, scope: !13426, file: !3, line: 6165, type: !5)
!13434 = !DILocation(line: 6165, column: 23, scope: !13426)
!13435 = !DILocalVariable(name: "name", arg: 4, scope: !13426, file: !3, line: 6165, type: !2759)
!13436 = !DILocation(line: 6165, column: 42, scope: !13426)
!13437 = !DILocalVariable(name: "val", scope: !13426, file: !3, line: 6167, type: !2732)
!13438 = !DILocation(line: 6167, column: 7, scope: !13426)
!13439 = !DILocalVariable(name: "e", scope: !13426, file: !3, line: 6168, type: !2726)
!13440 = !DILocation(line: 6168, column: 24, scope: !13426)
!13441 = !DILocalVariable(name: "slot", scope: !13426, file: !3, line: 6169, type: !2724)
!13442 = !DILocation(line: 6169, column: 26, scope: !13426)
!13443 = !DILocation(line: 6170, column: 23, scope: !13426)
!13444 = !DILocation(line: 6170, column: 31, scope: !13426)
!13445 = !DILocation(line: 6170, column: 5, scope: !13426)
!13446 = !DILocation(line: 6170, column: 11, scope: !13426)
!13447 = !DILocation(line: 6171, column: 13, scope: !13426)
!13448 = !DILocation(line: 6171, column: 5, scope: !13426)
!13449 = !DILocation(line: 6171, column: 11, scope: !13426)
!13450 = !DILocation(line: 6172, column: 13, scope: !13426)
!13451 = !DILocation(line: 6172, column: 5, scope: !13426)
!13452 = !DILocation(line: 6172, column: 11, scope: !13426)
!13453 = !DILocation(line: 6174, column: 7, scope: !13454)
!13454 = distinct !DILexicalBlock(scope: !13426, file: !3, line: 6174, column: 7)
!13455 = !DILocation(line: 6174, column: 7, scope: !13426)
!13456 = !DILocation(line: 6175, column: 29, scope: !13454)
!13457 = !DILocation(line: 6175, column: 11, scope: !13454)
!13458 = !DILocation(line: 6175, column: 9, scope: !13454)
!13459 = !DILocation(line: 6175, column: 5, scope: !13454)
!13460 = !DILocation(line: 6177, column: 9, scope: !13454)
!13461 = !DILocation(line: 6178, column: 52, scope: !13426)
!13462 = !DILocation(line: 6178, column: 66, scope: !13426)
!13463 = !DILocation(line: 6178, column: 36, scope: !13426)
!13464 = !DILocation(line: 6178, column: 10, scope: !13426)
!13465 = !DILocation(line: 6178, column: 8, scope: !13426)
!13466 = !DILocation(line: 6179, column: 8, scope: !13467)
!13467 = distinct !DILexicalBlock(scope: !13426, file: !3, line: 6179, column: 7)
!13468 = !DILocation(line: 6179, column: 7, scope: !13467)
!13469 = !DILocation(line: 6179, column: 13, scope: !13467)
!13470 = !DILocation(line: 6179, column: 7, scope: !13426)
!13471 = !DILocation(line: 6180, column: 13, scope: !13467)
!13472 = !DILocation(line: 6180, column: 6, scope: !13467)
!13473 = !DILocation(line: 6180, column: 11, scope: !13467)
!13474 = !DILocation(line: 6180, column: 5, scope: !13467)
!13475 = !DILocation(line: 6181, column: 30, scope: !13426)
!13476 = !DILocation(line: 6181, column: 38, scope: !13426)
!13477 = !DILocation(line: 6181, column: 5, scope: !13426)
!13478 = !DILocation(line: 6181, column: 4, scope: !13426)
!13479 = !DILocation(line: 6181, column: 12, scope: !13426)
!13480 = !DILocation(line: 6181, column: 18, scope: !13426)
!13481 = !DILocation(line: 6182, column: 20, scope: !13426)
!13482 = !DILocation(line: 6182, column: 5, scope: !13426)
!13483 = !DILocation(line: 6182, column: 4, scope: !13426)
!13484 = !DILocation(line: 6182, column: 12, scope: !13426)
!13485 = !DILocation(line: 6182, column: 18, scope: !13426)
!13486 = !DILocation(line: 6183, column: 20, scope: !13426)
!13487 = !DILocation(line: 6183, column: 5, scope: !13426)
!13488 = !DILocation(line: 6183, column: 4, scope: !13426)
!13489 = !DILocation(line: 6183, column: 12, scope: !13426)
!13490 = !DILocation(line: 6183, column: 18, scope: !13426)
!13491 = !DILocation(line: 6184, column: 22, scope: !13426)
!13492 = !DILocation(line: 6184, column: 5, scope: !13426)
!13493 = !DILocation(line: 6184, column: 4, scope: !13426)
!13494 = !DILocation(line: 6184, column: 12, scope: !13426)
!13495 = !DILocation(line: 6184, column: 20, scope: !13426)
!13496 = !DILocation(line: 6185, column: 1, scope: !13426)
!13497 = !DILocalVariable(name: "i", scope: !3890, file: !3, line: 6193, type: !7)
!13498 = !DILocation(line: 6193, column: 16, scope: !3890)
!13499 = !DILocation(line: 6196, column: 18, scope: !3890)
!13500 = !DILocation(line: 6196, column: 16, scope: !3890)
!13501 = !DILocation(line: 6200, column: 10, scope: !13502)
!13502 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 6200, column: 3)
!13503 = !DILocation(line: 6200, column: 8, scope: !13502)
!13504 = !DILocation(line: 6200, column: 15, scope: !13505)
!13505 = distinct !DILexicalBlock(scope: !13502, file: !3, line: 6200, column: 3)
!13506 = !DILocation(line: 6200, column: 17, scope: !13505)
!13507 = !DILocation(line: 6200, column: 3, scope: !13502)
!13508 = !DILocation(line: 6201, column: 20, scope: !13505)
!13509 = !DILocation(line: 6201, column: 5, scope: !13505)
!13510 = !DILocation(line: 6201, column: 23, scope: !13505)
!13511 = !DILocation(line: 6200, column: 39, scope: !13505)
!13512 = !DILocation(line: 6200, column: 3, scope: !13505)
!13513 = distinct !{!13513, !13507, !13514}
!13514 = !DILocation(line: 6201, column: 25, scope: !13502)
!13515 = !DILocation(line: 6204, column: 10, scope: !13516)
!13516 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 6204, column: 3)
!13517 = !DILocation(line: 6204, column: 8, scope: !13516)
!13518 = !DILocation(line: 6204, column: 15, scope: !13519)
!13519 = distinct !DILexicalBlock(scope: !13516, file: !3, line: 6204, column: 3)
!13520 = !DILocation(line: 6204, column: 17, scope: !13519)
!13521 = !DILocation(line: 6204, column: 3, scope: !13516)
!13522 = !DILocation(line: 6206, column: 22, scope: !13523)
!13523 = distinct !DILexicalBlock(scope: !13519, file: !3, line: 6205, column: 5)
!13524 = !DILocation(line: 6206, column: 7, scope: !13523)
!13525 = !DILocation(line: 6206, column: 25, scope: !13523)
!13526 = !DILocation(line: 6207, column: 23, scope: !13523)
!13527 = !DILocation(line: 6207, column: 7, scope: !13523)
!13528 = !DILocation(line: 6207, column: 26, scope: !13523)
!13529 = !DILocation(line: 6208, column: 5, scope: !13523)
!13530 = !DILocation(line: 6204, column: 39, scope: !13519)
!13531 = !DILocation(line: 6204, column: 3, scope: !13519)
!13532 = distinct !{!13532, !13521, !13533}
!13533 = !DILocation(line: 6208, column: 5, scope: !13516)
!13534 = !DILocation(line: 6215, column: 3, scope: !3890)
!13535 = !DILocation(line: 6218, column: 3, scope: !3890)
!13536 = !DILocation(line: 6219, column: 3, scope: !3890)
!13537 = !DILocation(line: 6220, column: 3, scope: !3890)
!13538 = !DILocation(line: 6221, column: 3, scope: !3890)
!13539 = !DILocation(line: 6222, column: 3, scope: !3890)
!13540 = !DILocation(line: 6223, column: 3, scope: !3890)
!13541 = !DILocation(line: 6224, column: 3, scope: !3890)
!13542 = !DILocation(line: 6225, column: 3, scope: !3890)
!13543 = !DILocation(line: 6226, column: 3, scope: !3890)
!13544 = !DILocation(line: 6227, column: 3, scope: !3890)
!13545 = !DILocation(line: 6228, column: 3, scope: !3890)
!13546 = !DILocation(line: 6229, column: 3, scope: !3890)
!13547 = !DILocation(line: 6230, column: 3, scope: !3890)
!13548 = !DILocation(line: 6231, column: 3, scope: !3890)
!13549 = !DILocation(line: 6232, column: 3, scope: !3890)
!13550 = !DILocation(line: 6233, column: 3, scope: !3890)
!13551 = !DILocation(line: 6234, column: 3, scope: !3890)
!13552 = !DILocation(line: 6235, column: 3, scope: !3890)
!13553 = !DILocation(line: 6236, column: 3, scope: !3890)
!13554 = !DILocation(line: 6237, column: 3, scope: !3890)
!13555 = !DILocation(line: 6238, column: 3, scope: !3890)
!13556 = !DILocation(line: 6239, column: 3, scope: !3890)
!13557 = !DILocation(line: 6240, column: 3, scope: !3890)
!13558 = !DILocation(line: 6241, column: 3, scope: !3890)
!13559 = !DILocation(line: 6242, column: 3, scope: !3890)
!13560 = !DILocation(line: 6243, column: 3, scope: !3890)
!13561 = !DILocation(line: 6244, column: 3, scope: !3890)
!13562 = !DILocation(line: 6245, column: 3, scope: !3890)
!13563 = !DILocation(line: 6246, column: 3, scope: !3890)
!13564 = !DILocation(line: 6247, column: 3, scope: !3890)
!13565 = !DILocation(line: 6248, column: 3, scope: !3890)
!13566 = !DILocation(line: 6249, column: 3, scope: !3890)
!13567 = !DILocation(line: 6250, column: 3, scope: !3890)
!13568 = !DILocation(line: 6251, column: 3, scope: !3890)
!13569 = !DILocation(line: 6252, column: 3, scope: !3890)
!13570 = !DILocation(line: 6253, column: 3, scope: !3890)
!13571 = !DILocation(line: 6254, column: 3, scope: !3890)
!13572 = !DILocation(line: 6255, column: 3, scope: !3890)
!13573 = !DILocation(line: 6256, column: 3, scope: !3890)
!13574 = !DILocation(line: 6257, column: 3, scope: !3890)
!13575 = !DILocation(line: 6258, column: 3, scope: !3890)
!13576 = !DILocation(line: 6259, column: 3, scope: !3890)
!13577 = !DILocation(line: 6260, column: 3, scope: !3890)
!13578 = !DILocation(line: 6261, column: 3, scope: !3890)
!13579 = !DILocation(line: 6262, column: 3, scope: !3890)
!13580 = !DILocation(line: 6263, column: 3, scope: !3890)
!13581 = !DILocation(line: 6264, column: 3, scope: !3890)
!13582 = !DILocation(line: 6265, column: 3, scope: !3890)
!13583 = !DILocation(line: 6266, column: 3, scope: !3890)
!13584 = !DILocation(line: 6267, column: 3, scope: !3890)
!13585 = !DILocation(line: 6268, column: 3, scope: !3890)
!13586 = !DILocation(line: 6269, column: 3, scope: !3890)
!13587 = !DILocation(line: 6270, column: 3, scope: !3890)
!13588 = !DILocation(line: 6274, column: 3, scope: !3890)
!13589 = !DILocation(line: 6275, column: 3, scope: !3890)
!13590 = !DILocation(line: 6276, column: 3, scope: !3890)
!13591 = !DILocation(line: 6278, column: 3, scope: !3890)
!13592 = !DILocation(line: 6279, column: 3, scope: !3890)
!13593 = !DILocation(line: 6280, column: 3, scope: !3890)
!13594 = !DILocation(line: 6282, column: 3, scope: !3890)
!13595 = !DILocation(line: 6284, column: 3, scope: !3890)
!13596 = !DILocation(line: 6285, column: 3, scope: !3890)
!13597 = !DILocation(line: 6287, column: 3, scope: !3890)
!13598 = !DILocation(line: 6288, column: 3, scope: !3890)
!13599 = !DILocation(line: 6289, column: 3, scope: !3890)
!13600 = !DILocation(line: 6290, column: 3, scope: !3890)
!13601 = !DILocation(line: 6291, column: 3, scope: !3890)
!13602 = !DILocation(line: 6292, column: 3, scope: !3890)
!13603 = !DILocation(line: 6293, column: 3, scope: !3890)
!13604 = !DILocation(line: 6295, column: 3, scope: !3890)
!13605 = !DILocation(line: 6296, column: 3, scope: !3890)
!13606 = !DILocation(line: 6297, column: 3, scope: !3890)
!13607 = !DILocation(line: 6298, column: 3, scope: !3890)
!13608 = !DILocation(line: 6299, column: 3, scope: !3890)
!13609 = !DILocation(line: 6300, column: 3, scope: !3890)
!13610 = !DILocation(line: 6301, column: 3, scope: !3890)
!13611 = !DILocation(line: 6302, column: 3, scope: !3890)
!13612 = !DILocation(line: 6303, column: 3, scope: !3890)
!13613 = !DILocation(line: 6304, column: 3, scope: !3890)
!13614 = !DILocation(line: 6305, column: 3, scope: !3890)
!13615 = !DILocation(line: 6306, column: 3, scope: !3890)
!13616 = !DILocation(line: 6307, column: 3, scope: !3890)
!13617 = !DILocation(line: 6308, column: 3, scope: !3890)
!13618 = !DILocation(line: 6309, column: 3, scope: !3890)
!13619 = !DILocation(line: 6310, column: 3, scope: !3890)
!13620 = !DILocation(line: 6311, column: 3, scope: !3890)
!13621 = !DILocation(line: 6312, column: 3, scope: !3890)
!13622 = !DILocation(line: 6313, column: 3, scope: !3890)
!13623 = !DILocation(line: 6314, column: 3, scope: !3890)
!13624 = !DILocation(line: 6315, column: 3, scope: !3890)
!13625 = !DILocation(line: 6316, column: 3, scope: !3890)
!13626 = !DILocation(line: 6317, column: 3, scope: !3890)
!13627 = !DILocation(line: 6318, column: 3, scope: !3890)
!13628 = !DILocation(line: 6319, column: 3, scope: !3890)
!13629 = !DILocation(line: 6320, column: 3, scope: !3890)
!13630 = !DILocation(line: 6321, column: 3, scope: !3890)
!13631 = !DILocation(line: 6322, column: 3, scope: !3890)
!13632 = !DILocation(line: 6323, column: 3, scope: !3890)
!13633 = !DILocation(line: 6324, column: 3, scope: !3890)
!13634 = !DILocation(line: 6325, column: 3, scope: !3890)
!13635 = !DILocation(line: 6326, column: 3, scope: !3890)
!13636 = !DILocation(line: 6327, column: 3, scope: !3890)
!13637 = !DILocation(line: 6328, column: 3, scope: !3890)
!13638 = !DILocation(line: 6329, column: 3, scope: !3890)
!13639 = !DILocation(line: 6330, column: 3, scope: !3890)
!13640 = !DILocation(line: 6331, column: 3, scope: !3890)
!13641 = !DILocation(line: 6332, column: 3, scope: !3890)
!13642 = !DILocation(line: 6333, column: 3, scope: !3890)
!13643 = !DILocation(line: 6334, column: 3, scope: !3890)
!13644 = !DILocation(line: 6335, column: 3, scope: !3890)
!13645 = !DILocation(line: 6336, column: 3, scope: !3890)
!13646 = !DILocation(line: 6337, column: 3, scope: !3890)
!13647 = !DILocation(line: 6339, column: 3, scope: !3890)
!13648 = !DILocation(line: 6341, column: 3, scope: !3890)
!13649 = !DILocation(line: 6342, column: 3, scope: !3890)
!13650 = !DILocation(line: 6344, column: 3, scope: !3890)
!13651 = !DILocation(line: 6345, column: 3, scope: !3890)
!13652 = !DILocation(line: 6346, column: 3, scope: !3890)
!13653 = !DILocation(line: 6347, column: 3, scope: !3890)
!13654 = !DILocation(line: 6348, column: 3, scope: !3890)
!13655 = !DILocation(line: 6349, column: 3, scope: !3890)
!13656 = !DILocation(line: 6351, column: 3, scope: !3890)
!13657 = !DILocation(line: 6352, column: 3, scope: !3890)
!13658 = !DILocation(line: 6353, column: 3, scope: !3890)
!13659 = !DILocation(line: 6354, column: 3, scope: !3890)
!13660 = !DILocation(line: 6356, column: 3, scope: !3890)
!13661 = !DILocation(line: 6357, column: 3, scope: !3890)
!13662 = !DILocation(line: 6358, column: 3, scope: !3890)
!13663 = !DILocation(line: 6359, column: 3, scope: !3890)
!13664 = !DILocation(line: 6360, column: 3, scope: !3890)
!13665 = !DILocation(line: 6361, column: 3, scope: !3890)
!13666 = !DILocation(line: 6362, column: 3, scope: !3890)
!13667 = !DILocation(line: 6363, column: 3, scope: !3890)
!13668 = !DILocation(line: 6364, column: 3, scope: !3890)
!13669 = !DILocation(line: 6365, column: 3, scope: !3890)
!13670 = !DILocation(line: 6366, column: 3, scope: !3890)
!13671 = !DILocation(line: 6367, column: 3, scope: !3890)
!13672 = !DILocation(line: 6368, column: 3, scope: !3890)
!13673 = !DILocation(line: 6369, column: 3, scope: !3890)
!13674 = !DILocation(line: 6370, column: 3, scope: !3890)
!13675 = !DILocation(line: 6371, column: 3, scope: !3890)
!13676 = !DILocation(line: 6372, column: 3, scope: !3890)
!13677 = !DILocation(line: 6373, column: 3, scope: !3890)
!13678 = !DILocation(line: 6374, column: 3, scope: !3890)
!13679 = !DILocation(line: 6375, column: 3, scope: !3890)
!13680 = !DILocation(line: 6376, column: 3, scope: !3890)
!13681 = !DILocation(line: 6377, column: 3, scope: !3890)
!13682 = !DILocation(line: 6378, column: 3, scope: !3890)
!13683 = !DILocation(line: 6379, column: 3, scope: !3890)
!13684 = !DILocation(line: 6380, column: 3, scope: !3890)
!13685 = !DILocation(line: 6381, column: 3, scope: !3890)
!13686 = !DILocation(line: 6382, column: 3, scope: !3890)
!13687 = !DILocation(line: 6383, column: 3, scope: !3890)
!13688 = !DILocation(line: 6385, column: 3, scope: !3890)
!13689 = !DILocation(line: 6388, column: 3, scope: !3890)
!13690 = !DILocation(line: 6389, column: 3, scope: !3890)
!13691 = !DILocation(line: 6390, column: 3, scope: !3890)
!13692 = !DILocation(line: 6391, column: 3, scope: !3890)
!13693 = !DILocation(line: 6392, column: 3, scope: !3890)
!13694 = !DILocation(line: 6393, column: 3, scope: !3890)
!13695 = !DILocation(line: 6394, column: 3, scope: !3890)
!13696 = !DILocation(line: 6395, column: 3, scope: !3890)
!13697 = !DILocation(line: 6396, column: 3, scope: !3890)
!13698 = !DILocation(line: 6397, column: 3, scope: !3890)
!13699 = !DILocation(line: 6398, column: 3, scope: !3890)
!13700 = !DILocation(line: 6399, column: 3, scope: !3890)
!13701 = !DILocation(line: 6400, column: 3, scope: !3890)
!13702 = !DILocation(line: 6402, column: 3, scope: !3890)
!13703 = !DILocation(line: 6403, column: 3, scope: !3890)
!13704 = !DILocation(line: 6404, column: 3, scope: !3890)
!13705 = !DILocation(line: 6405, column: 3, scope: !3890)
!13706 = !DILocation(line: 6407, column: 10, scope: !13707)
!13707 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 6407, column: 3)
!13708 = !DILocation(line: 6407, column: 8, scope: !13707)
!13709 = !DILocation(line: 6407, column: 15, scope: !13710)
!13710 = distinct !DILexicalBlock(scope: !13707, file: !3, line: 6407, column: 3)
!13711 = !DILocation(line: 6407, column: 17, scope: !13710)
!13712 = !DILocation(line: 6407, column: 3, scope: !13707)
!13713 = !DILocation(line: 6409, column: 20, scope: !13714)
!13714 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 6408, column: 5)
!13715 = !DILocation(line: 6409, column: 7, scope: !13714)
!13716 = !DILocation(line: 6409, column: 23, scope: !13714)
!13717 = !DILocation(line: 6410, column: 20, scope: !13714)
!13718 = !DILocation(line: 6410, column: 7, scope: !13714)
!13719 = !DILocation(line: 6410, column: 23, scope: !13714)
!13720 = !DILocation(line: 6411, column: 21, scope: !13714)
!13721 = !DILocation(line: 6411, column: 7, scope: !13714)
!13722 = !DILocation(line: 6411, column: 24, scope: !13714)
!13723 = !DILocation(line: 6412, column: 20, scope: !13714)
!13724 = !DILocation(line: 6412, column: 7, scope: !13714)
!13725 = !DILocation(line: 6412, column: 23, scope: !13714)
!13726 = !DILocation(line: 6413, column: 20, scope: !13714)
!13727 = !DILocation(line: 6413, column: 7, scope: !13714)
!13728 = !DILocation(line: 6413, column: 23, scope: !13714)
!13729 = !DILocation(line: 6415, column: 22, scope: !13714)
!13730 = !DILocation(line: 6415, column: 7, scope: !13714)
!13731 = !DILocation(line: 6415, column: 25, scope: !13714)
!13732 = !DILocation(line: 6416, column: 22, scope: !13714)
!13733 = !DILocation(line: 6416, column: 7, scope: !13714)
!13734 = !DILocation(line: 6416, column: 25, scope: !13714)
!13735 = !DILocation(line: 6417, column: 22, scope: !13714)
!13736 = !DILocation(line: 6417, column: 7, scope: !13714)
!13737 = !DILocation(line: 6417, column: 25, scope: !13714)
!13738 = !DILocation(line: 6418, column: 22, scope: !13714)
!13739 = !DILocation(line: 6418, column: 7, scope: !13714)
!13740 = !DILocation(line: 6418, column: 25, scope: !13714)
!13741 = !DILocation(line: 6419, column: 22, scope: !13714)
!13742 = !DILocation(line: 6419, column: 7, scope: !13714)
!13743 = !DILocation(line: 6419, column: 25, scope: !13714)
!13744 = !DILocation(line: 6420, column: 23, scope: !13714)
!13745 = !DILocation(line: 6420, column: 7, scope: !13714)
!13746 = !DILocation(line: 6420, column: 26, scope: !13714)
!13747 = !DILocation(line: 6421, column: 26, scope: !13714)
!13748 = !DILocation(line: 6421, column: 7, scope: !13714)
!13749 = !DILocation(line: 6421, column: 29, scope: !13714)
!13750 = !DILocation(line: 6422, column: 26, scope: !13714)
!13751 = !DILocation(line: 6422, column: 7, scope: !13714)
!13752 = !DILocation(line: 6422, column: 29, scope: !13714)
!13753 = !DILocation(line: 6423, column: 26, scope: !13714)
!13754 = !DILocation(line: 6423, column: 7, scope: !13714)
!13755 = !DILocation(line: 6423, column: 29, scope: !13714)
!13756 = !DILocation(line: 6424, column: 26, scope: !13714)
!13757 = !DILocation(line: 6424, column: 7, scope: !13714)
!13758 = !DILocation(line: 6424, column: 29, scope: !13714)
!13759 = !DILocation(line: 6425, column: 26, scope: !13714)
!13760 = !DILocation(line: 6425, column: 7, scope: !13714)
!13761 = !DILocation(line: 6425, column: 29, scope: !13714)
!13762 = !DILocation(line: 6426, column: 27, scope: !13714)
!13763 = !DILocation(line: 6426, column: 7, scope: !13714)
!13764 = !DILocation(line: 6426, column: 30, scope: !13714)
!13765 = !DILocation(line: 6427, column: 26, scope: !13714)
!13766 = !DILocation(line: 6427, column: 7, scope: !13714)
!13767 = !DILocation(line: 6427, column: 29, scope: !13714)
!13768 = !DILocation(line: 6428, column: 26, scope: !13714)
!13769 = !DILocation(line: 6428, column: 7, scope: !13714)
!13770 = !DILocation(line: 6428, column: 29, scope: !13714)
!13771 = !DILocation(line: 6429, column: 26, scope: !13714)
!13772 = !DILocation(line: 6429, column: 7, scope: !13714)
!13773 = !DILocation(line: 6429, column: 29, scope: !13714)
!13774 = !DILocation(line: 6430, column: 26, scope: !13714)
!13775 = !DILocation(line: 6430, column: 7, scope: !13714)
!13776 = !DILocation(line: 6430, column: 29, scope: !13714)
!13777 = !DILocation(line: 6431, column: 26, scope: !13714)
!13778 = !DILocation(line: 6431, column: 7, scope: !13714)
!13779 = !DILocation(line: 6431, column: 29, scope: !13714)
!13780 = !DILocation(line: 6432, column: 27, scope: !13714)
!13781 = !DILocation(line: 6432, column: 7, scope: !13714)
!13782 = !DILocation(line: 6432, column: 30, scope: !13714)
!13783 = !DILocation(line: 6433, column: 29, scope: !13714)
!13784 = !DILocation(line: 6433, column: 7, scope: !13714)
!13785 = !DILocation(line: 6433, column: 32, scope: !13714)
!13786 = !DILocation(line: 6434, column: 30, scope: !13714)
!13787 = !DILocation(line: 6434, column: 7, scope: !13714)
!13788 = !DILocation(line: 6434, column: 33, scope: !13714)
!13789 = !DILocation(line: 6435, column: 25, scope: !13714)
!13790 = !DILocation(line: 6435, column: 7, scope: !13714)
!13791 = !DILocation(line: 6435, column: 28, scope: !13714)
!13792 = !DILocation(line: 6437, column: 45, scope: !13714)
!13793 = !DILocation(line: 6437, column: 28, scope: !13714)
!13794 = !DILocation(line: 6437, column: 48, scope: !13714)
!13795 = !DILocation(line: 6437, column: 23, scope: !13714)
!13796 = !DILocation(line: 6437, column: 7, scope: !13714)
!13797 = !DILocation(line: 6437, column: 26, scope: !13714)
!13798 = !DILocation(line: 6438, column: 5, scope: !13714)
!13799 = !DILocation(line: 6407, column: 39, scope: !13710)
!13800 = !DILocation(line: 6407, column: 3, scope: !13710)
!13801 = distinct !{!13801, !13712, !13802}
!13802 = !DILocation(line: 6438, column: 5, scope: !13707)
!13803 = !DILocation(line: 6441, column: 3, scope: !3890)
!13804 = !DILocation(line: 6444, column: 31, scope: !3890)
!13805 = !DILocation(line: 6445, column: 29, scope: !3890)
!13806 = !DILocation(line: 6446, column: 26, scope: !3890)
!13807 = !DILocation(line: 6447, column: 32, scope: !3890)
!13808 = !DILocation(line: 6448, column: 30, scope: !3890)
!13809 = !DILocation(line: 6449, column: 27, scope: !3890)
!13810 = !DILocation(line: 6450, column: 33, scope: !3890)
!13811 = !DILocation(line: 6451, column: 31, scope: !3890)
!13812 = !DILocation(line: 6452, column: 28, scope: !3890)
!13813 = !DILocation(line: 6453, column: 33, scope: !3890)
!13814 = !DILocation(line: 6454, column: 31, scope: !3890)
!13815 = !DILocation(line: 6455, column: 28, scope: !3890)
!13816 = !DILocation(line: 6456, column: 31, scope: !3890)
!13817 = !DILocation(line: 6457, column: 29, scope: !3890)
!13818 = !DILocation(line: 6458, column: 26, scope: !3890)
!13819 = !DILocation(line: 6459, column: 32, scope: !3890)
!13820 = !DILocation(line: 6460, column: 30, scope: !3890)
!13821 = !DILocation(line: 6461, column: 27, scope: !3890)
!13822 = !DILocation(line: 6462, column: 33, scope: !3890)
!13823 = !DILocation(line: 6463, column: 31, scope: !3890)
!13824 = !DILocation(line: 6464, column: 28, scope: !3890)
!13825 = !DILocation(line: 6465, column: 33, scope: !3890)
!13826 = !DILocation(line: 6466, column: 31, scope: !3890)
!13827 = !DILocation(line: 6467, column: 28, scope: !3890)
!13828 = !DILocation(line: 6468, column: 32, scope: !3890)
!13829 = !DILocation(line: 6469, column: 30, scope: !3890)
!13830 = !DILocation(line: 6470, column: 27, scope: !3890)
!13831 = !DILocation(line: 6471, column: 33, scope: !3890)
!13832 = !DILocation(line: 6472, column: 31, scope: !3890)
!13833 = !DILocation(line: 6473, column: 28, scope: !3890)
!13834 = !DILocation(line: 6474, column: 33, scope: !3890)
!13835 = !DILocation(line: 6475, column: 31, scope: !3890)
!13836 = !DILocation(line: 6476, column: 28, scope: !3890)
!13837 = !DILocation(line: 6477, column: 33, scope: !3890)
!13838 = !DILocation(line: 6478, column: 31, scope: !3890)
!13839 = !DILocation(line: 6479, column: 28, scope: !3890)
!13840 = !DILocation(line: 6480, column: 32, scope: !3890)
!13841 = !DILocation(line: 6481, column: 30, scope: !3890)
!13842 = !DILocation(line: 6482, column: 27, scope: !3890)
!13843 = !DILocation(line: 6483, column: 33, scope: !3890)
!13844 = !DILocation(line: 6484, column: 31, scope: !3890)
!13845 = !DILocation(line: 6485, column: 28, scope: !3890)
!13846 = !DILocation(line: 6486, column: 33, scope: !3890)
!13847 = !DILocation(line: 6487, column: 31, scope: !3890)
!13848 = !DILocation(line: 6488, column: 28, scope: !3890)
!13849 = !DILocation(line: 6489, column: 32, scope: !3890)
!13850 = !DILocation(line: 6490, column: 30, scope: !3890)
!13851 = !DILocation(line: 6491, column: 27, scope: !3890)
!13852 = !DILocation(line: 6492, column: 33, scope: !3890)
!13853 = !DILocation(line: 6493, column: 31, scope: !3890)
!13854 = !DILocation(line: 6494, column: 28, scope: !3890)
!13855 = !DILocation(line: 6495, column: 35, scope: !3890)
!13856 = !DILocation(line: 6496, column: 33, scope: !3890)
!13857 = !DILocation(line: 6497, column: 30, scope: !3890)
!13858 = !DILocation(line: 6498, column: 35, scope: !3890)
!13859 = !DILocation(line: 6499, column: 33, scope: !3890)
!13860 = !DILocation(line: 6500, column: 30, scope: !3890)
!13861 = !DILocation(line: 6501, column: 32, scope: !3890)
!13862 = !DILocation(line: 6502, column: 30, scope: !3890)
!13863 = !DILocation(line: 6503, column: 27, scope: !3890)
!13864 = !DILocation(line: 6504, column: 32, scope: !3890)
!13865 = !DILocation(line: 6505, column: 30, scope: !3890)
!13866 = !DILocation(line: 6506, column: 27, scope: !3890)
!13867 = !DILocation(line: 6507, column: 34, scope: !3890)
!13868 = !DILocation(line: 6508, column: 32, scope: !3890)
!13869 = !DILocation(line: 6509, column: 29, scope: !3890)
!13870 = !DILocation(line: 6510, column: 31, scope: !3890)
!13871 = !DILocation(line: 6511, column: 29, scope: !3890)
!13872 = !DILocation(line: 6512, column: 26, scope: !3890)
!13873 = !DILocation(line: 6513, column: 31, scope: !3890)
!13874 = !DILocation(line: 6514, column: 29, scope: !3890)
!13875 = !DILocation(line: 6515, column: 26, scope: !3890)
!13876 = !DILocation(line: 6516, column: 31, scope: !3890)
!13877 = !DILocation(line: 6517, column: 29, scope: !3890)
!13878 = !DILocation(line: 6518, column: 26, scope: !3890)
!13879 = !DILocation(line: 6519, column: 32, scope: !3890)
!13880 = !DILocation(line: 6520, column: 30, scope: !3890)
!13881 = !DILocation(line: 6521, column: 27, scope: !3890)
!13882 = !DILocation(line: 6522, column: 34, scope: !3890)
!13883 = !DILocation(line: 6523, column: 32, scope: !3890)
!13884 = !DILocation(line: 6524, column: 29, scope: !3890)
!13885 = !DILocation(line: 6525, column: 34, scope: !3890)
!13886 = !DILocation(line: 6526, column: 32, scope: !3890)
!13887 = !DILocation(line: 6527, column: 29, scope: !3890)
!13888 = !DILocation(line: 6528, column: 32, scope: !3890)
!13889 = !DILocation(line: 6529, column: 30, scope: !3890)
!13890 = !DILocation(line: 6530, column: 27, scope: !3890)
!13891 = !DILocation(line: 6531, column: 32, scope: !3890)
!13892 = !DILocation(line: 6532, column: 30, scope: !3890)
!13893 = !DILocation(line: 6533, column: 27, scope: !3890)
!13894 = !DILocation(line: 6534, column: 32, scope: !3890)
!13895 = !DILocation(line: 6535, column: 30, scope: !3890)
!13896 = !DILocation(line: 6536, column: 27, scope: !3890)
!13897 = !DILocation(line: 6537, column: 32, scope: !3890)
!13898 = !DILocation(line: 6538, column: 30, scope: !3890)
!13899 = !DILocation(line: 6539, column: 27, scope: !3890)
!13900 = !DILocation(line: 6540, column: 32, scope: !3890)
!13901 = !DILocation(line: 6541, column: 30, scope: !3890)
!13902 = !DILocation(line: 6542, column: 27, scope: !3890)
!13903 = !DILocation(line: 6543, column: 32, scope: !3890)
!13904 = !DILocation(line: 6544, column: 30, scope: !3890)
!13905 = !DILocation(line: 6545, column: 27, scope: !3890)
!13906 = !DILocation(line: 6546, column: 31, scope: !3890)
!13907 = !DILocation(line: 6547, column: 29, scope: !3890)
!13908 = !DILocation(line: 6548, column: 26, scope: !3890)
!13909 = !DILocation(line: 6549, column: 33, scope: !3890)
!13910 = !DILocation(line: 6550, column: 31, scope: !3890)
!13911 = !DILocation(line: 6551, column: 28, scope: !3890)
!13912 = !DILocation(line: 6552, column: 33, scope: !3890)
!13913 = !DILocation(line: 6553, column: 31, scope: !3890)
!13914 = !DILocation(line: 6554, column: 28, scope: !3890)
!13915 = !DILocation(line: 6555, column: 32, scope: !3890)
!13916 = !DILocation(line: 6556, column: 30, scope: !3890)
!13917 = !DILocation(line: 6557, column: 27, scope: !3890)
!13918 = !DILocation(line: 6558, column: 36, scope: !3890)
!13919 = !DILocation(line: 6559, column: 34, scope: !3890)
!13920 = !DILocation(line: 6560, column: 31, scope: !3890)
!13921 = !DILocation(line: 6561, column: 31, scope: !3890)
!13922 = !DILocation(line: 6562, column: 29, scope: !3890)
!13923 = !DILocation(line: 6563, column: 26, scope: !3890)
!13924 = !DILocation(line: 6564, column: 31, scope: !3890)
!13925 = !DILocation(line: 6565, column: 29, scope: !3890)
!13926 = !DILocation(line: 6566, column: 26, scope: !3890)
!13927 = !DILocation(line: 6567, column: 31, scope: !3890)
!13928 = !DILocation(line: 6568, column: 29, scope: !3890)
!13929 = !DILocation(line: 6569, column: 26, scope: !3890)
!13930 = !DILocation(line: 6570, column: 36, scope: !3890)
!13931 = !DILocation(line: 6571, column: 34, scope: !3890)
!13932 = !DILocation(line: 6572, column: 31, scope: !3890)
!13933 = !DILocation(line: 6573, column: 34, scope: !3890)
!13934 = !DILocation(line: 6574, column: 32, scope: !3890)
!13935 = !DILocation(line: 6575, column: 29, scope: !3890)
!13936 = !DILocation(line: 6579, column: 31, scope: !3890)
!13937 = !DILocation(line: 6580, column: 29, scope: !3890)
!13938 = !DILocation(line: 6581, column: 26, scope: !3890)
!13939 = !DILocation(line: 6582, column: 32, scope: !3890)
!13940 = !DILocation(line: 6583, column: 30, scope: !3890)
!13941 = !DILocation(line: 6584, column: 27, scope: !3890)
!13942 = !DILocation(line: 6587, column: 30, scope: !3890)
!13943 = !DILocation(line: 6588, column: 28, scope: !3890)
!13944 = !DILocation(line: 6589, column: 25, scope: !3890)
!13945 = !DILocation(line: 6590, column: 30, scope: !3890)
!13946 = !DILocation(line: 6591, column: 28, scope: !3890)
!13947 = !DILocation(line: 6592, column: 25, scope: !3890)
!13948 = !DILocation(line: 6593, column: 30, scope: !3890)
!13949 = !DILocation(line: 6594, column: 28, scope: !3890)
!13950 = !DILocation(line: 6595, column: 25, scope: !3890)
!13951 = !DILocation(line: 6596, column: 30, scope: !3890)
!13952 = !DILocation(line: 6597, column: 28, scope: !3890)
!13953 = !DILocation(line: 6598, column: 25, scope: !3890)
!13954 = !DILocation(line: 6599, column: 30, scope: !3890)
!13955 = !DILocation(line: 6600, column: 28, scope: !3890)
!13956 = !DILocation(line: 6601, column: 25, scope: !3890)
!13957 = !DILocation(line: 6602, column: 30, scope: !3890)
!13958 = !DILocation(line: 6603, column: 28, scope: !3890)
!13959 = !DILocation(line: 6604, column: 25, scope: !3890)
!13960 = !DILocation(line: 6605, column: 33, scope: !3890)
!13961 = !DILocation(line: 6606, column: 31, scope: !3890)
!13962 = !DILocation(line: 6607, column: 28, scope: !3890)
!13963 = !DILocation(line: 6609, column: 32, scope: !3890)
!13964 = !DILocation(line: 6610, column: 30, scope: !3890)
!13965 = !DILocation(line: 6611, column: 27, scope: !3890)
!13966 = !DILocation(line: 6614, column: 34, scope: !3890)
!13967 = !DILocation(line: 6615, column: 29, scope: !3890)
!13968 = !DILocation(line: 6616, column: 29, scope: !3890)
!13969 = !DILocation(line: 6617, column: 32, scope: !3890)
!13970 = !DILocation(line: 6618, column: 27, scope: !3890)
!13971 = !DILocation(line: 6619, column: 32, scope: !3890)
!13972 = !DILocation(line: 6620, column: 27, scope: !3890)
!13973 = !DILocation(line: 6621, column: 33, scope: !3890)
!13974 = !DILocation(line: 6622, column: 28, scope: !3890)
!13975 = !DILocation(line: 6623, column: 34, scope: !3890)
!13976 = !DILocation(line: 6624, column: 29, scope: !3890)
!13977 = !DILocation(line: 6625, column: 34, scope: !3890)
!13978 = !DILocation(line: 6626, column: 29, scope: !3890)
!13979 = !DILocation(line: 6627, column: 33, scope: !3890)
!13980 = !DILocation(line: 6628, column: 28, scope: !3890)
!13981 = !DILocation(line: 6631, column: 32, scope: !3890)
!13982 = !DILocation(line: 6632, column: 27, scope: !3890)
!13983 = !DILocation(line: 6633, column: 33, scope: !3890)
!13984 = !DILocation(line: 6634, column: 28, scope: !3890)
!13985 = !DILocation(line: 6637, column: 33, scope: !3890)
!13986 = !DILocation(line: 6638, column: 28, scope: !3890)
!13987 = !DILocation(line: 6639, column: 36, scope: !3890)
!13988 = !DILocation(line: 6640, column: 31, scope: !3890)
!13989 = !DILocation(line: 6641, column: 36, scope: !3890)
!13990 = !DILocation(line: 6642, column: 31, scope: !3890)
!13991 = !DILocation(line: 6643, column: 39, scope: !3890)
!13992 = !DILocation(line: 6644, column: 34, scope: !3890)
!13993 = !DILocation(line: 6654, column: 3, scope: !3890)
!13994 = !DILocation(line: 6655, column: 3, scope: !3890)
!13995 = !DILocation(line: 6659, column: 7, scope: !13996)
!13996 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 6659, column: 7)
!13997 = !DILocation(line: 6659, column: 7, scope: !3890)
!13998 = !DILocation(line: 6660, column: 35, scope: !13996)
!13999 = !DILocation(line: 6660, column: 5, scope: !13996)
!14000 = !DILocation(line: 6662, column: 19, scope: !3890)
!14001 = !DILocation(line: 6662, column: 17, scope: !3890)
!14002 = !DILocation(line: 6663, column: 20, scope: !3890)
!14003 = !DILocation(line: 6663, column: 18, scope: !3890)
!14004 = !DILocation(line: 6664, column: 21, scope: !3890)
!14005 = !DILocation(line: 6664, column: 19, scope: !3890)
!14006 = !DILocation(line: 6665, column: 20, scope: !3890)
!14007 = !DILocation(line: 6665, column: 18, scope: !3890)
!14008 = !DILocation(line: 6666, column: 20, scope: !3890)
!14009 = !DILocation(line: 6666, column: 18, scope: !3890)
!14010 = !DILocation(line: 6667, column: 21, scope: !3890)
!14011 = !DILocation(line: 6667, column: 19, scope: !3890)
!14012 = !DILocation(line: 6670, column: 20, scope: !3890)
!14013 = !DILocation(line: 6670, column: 18, scope: !3890)
!14014 = !DILocation(line: 6671, column: 21, scope: !3890)
!14015 = !DILocation(line: 6671, column: 19, scope: !3890)
!14016 = !DILocation(line: 6676, column: 34, scope: !3890)
!14017 = !DILocation(line: 6676, column: 32, scope: !3890)
!14018 = !DILocation(line: 6678, column: 7, scope: !3890)
!14019 = !DILocation(line: 6678, column: 5, scope: !3890)
!14020 = !DILocation(line: 6682, column: 7, scope: !3890)
!14021 = !DILocation(line: 6682, column: 5, scope: !3890)
!14022 = !DILocation(line: 6684, column: 7, scope: !3890)
!14023 = !DILocation(line: 6684, column: 5, scope: !3890)
!14024 = !DILocation(line: 6686, column: 24, scope: !3890)
!14025 = !DILocation(line: 6686, column: 22, scope: !3890)
!14026 = !DILocation(line: 6689, column: 11, scope: !3890)
!14027 = !DILocation(line: 6689, column: 3, scope: !3890)
!14028 = !DILocation(line: 6691, column: 10, scope: !3890)
!14029 = !DILocation(line: 6692, column: 1, scope: !3890)
!14030 = distinct !DISubprogram(name: "hash_libfunc", scope: !3, file: !3, line: 126, type: !3191, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14031 = !DILocalVariable(name: "p", arg: 1, scope: !14030, file: !3, line: 126, type: !3194)
!14032 = !DILocation(line: 126, column: 27, scope: !14030)
!14033 = !DILocalVariable(name: "e", scope: !14030, file: !3, line: 128, type: !14034)
!14034 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3884)
!14035 = !DILocation(line: 128, column: 37, scope: !14030)
!14036 = !DILocation(line: 128, column: 72, scope: !14030)
!14037 = !DILocation(line: 128, column: 41, scope: !14030)
!14038 = !DILocation(line: 130, column: 18, scope: !14030)
!14039 = !DILocation(line: 130, column: 21, scope: !14030)
!14040 = !DILocation(line: 130, column: 35, scope: !14030)
!14041 = !DILocation(line: 130, column: 38, scope: !14030)
!14042 = !DILocation(line: 130, column: 44, scope: !14030)
!14043 = !DILocation(line: 130, column: 27, scope: !14030)
!14044 = !DILocation(line: 130, column: 11, scope: !14030)
!14045 = !DILocation(line: 131, column: 6, scope: !14030)
!14046 = !DILocation(line: 131, column: 9, scope: !14030)
!14047 = !DILocation(line: 131, column: 4, scope: !14030)
!14048 = !DILocation(line: 130, column: 10, scope: !14030)
!14049 = !DILocation(line: 130, column: 3, scope: !14030)
!14050 = distinct !DISubprogram(name: "eq_libfunc", scope: !3, file: !3, line: 137, type: !3199, scopeLine: 138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14051 = !DILocalVariable(name: "p", arg: 1, scope: !14050, file: !3, line: 137, type: !3194)
!14052 = !DILocation(line: 137, column: 25, scope: !14050)
!14053 = !DILocalVariable(name: "q", arg: 2, scope: !14050, file: !3, line: 137, type: !3194)
!14054 = !DILocation(line: 137, column: 40, scope: !14050)
!14055 = !DILocalVariable(name: "e1", scope: !14050, file: !3, line: 139, type: !14034)
!14056 = !DILocation(line: 139, column: 37, scope: !14050)
!14057 = !DILocation(line: 139, column: 73, scope: !14050)
!14058 = !DILocation(line: 139, column: 42, scope: !14050)
!14059 = !DILocalVariable(name: "e2", scope: !14050, file: !3, line: 140, type: !14034)
!14060 = !DILocation(line: 140, column: 37, scope: !14050)
!14061 = !DILocation(line: 140, column: 73, scope: !14050)
!14062 = !DILocation(line: 140, column: 42, scope: !14050)
!14063 = !DILocation(line: 142, column: 11, scope: !14050)
!14064 = !DILocation(line: 142, column: 15, scope: !14050)
!14065 = !DILocation(line: 142, column: 24, scope: !14050)
!14066 = !DILocation(line: 142, column: 28, scope: !14050)
!14067 = !DILocation(line: 142, column: 21, scope: !14050)
!14068 = !DILocation(line: 143, column: 4, scope: !14050)
!14069 = !DILocation(line: 143, column: 7, scope: !14050)
!14070 = !DILocation(line: 143, column: 11, scope: !14050)
!14071 = !DILocation(line: 143, column: 20, scope: !14050)
!14072 = !DILocation(line: 143, column: 24, scope: !14050)
!14073 = !DILocation(line: 143, column: 17, scope: !14050)
!14074 = !DILocation(line: 144, column: 4, scope: !14050)
!14075 = !DILocation(line: 144, column: 7, scope: !14050)
!14076 = !DILocation(line: 144, column: 11, scope: !14050)
!14077 = !DILocation(line: 144, column: 20, scope: !14050)
!14078 = !DILocation(line: 144, column: 24, scope: !14050)
!14079 = !DILocation(line: 144, column: 17, scope: !14050)
!14080 = !DILocation(line: 0, scope: !14050)
!14081 = !DILocation(line: 142, column: 3, scope: !14050)
!14082 = distinct !DISubprogram(name: "init_insn_codes", scope: !3, file: !3, line: 5463, type: !3891, scopeLine: 5464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14083 = !DILocalVariable(name: "i", scope: !14082, file: !3, line: 5465, type: !7)
!14084 = !DILocation(line: 5465, column: 16, scope: !14082)
!14085 = !DILocation(line: 5467, column: 10, scope: !14086)
!14086 = distinct !DILexicalBlock(scope: !14082, file: !3, line: 5467, column: 3)
!14087 = !DILocation(line: 5467, column: 8, scope: !14086)
!14088 = !DILocation(line: 5467, column: 15, scope: !14089)
!14089 = distinct !DILexicalBlock(scope: !14086, file: !3, line: 5467, column: 3)
!14090 = !DILocation(line: 5467, column: 17, scope: !14089)
!14091 = !DILocation(line: 5467, column: 3, scope: !14086)
!14092 = !DILocalVariable(name: "j", scope: !14093, file: !3, line: 5469, type: !7)
!14093 = distinct !DILexicalBlock(scope: !14089, file: !3, line: 5468, column: 5)
!14094 = !DILocation(line: 5469, column: 20, scope: !14093)
!14095 = !DILocalVariable(name: "op", scope: !14093, file: !3, line: 5470, type: !3938)
!14096 = !DILocation(line: 5470, column: 13, scope: !14093)
!14097 = !DILocation(line: 5472, column: 25, scope: !14093)
!14098 = !DILocation(line: 5472, column: 13, scope: !14093)
!14099 = !DILocation(line: 5472, column: 10, scope: !14093)
!14100 = !DILocation(line: 5473, column: 14, scope: !14101)
!14101 = distinct !DILexicalBlock(scope: !14093, file: !3, line: 5473, column: 7)
!14102 = !DILocation(line: 5473, column: 12, scope: !14101)
!14103 = !DILocation(line: 5473, column: 19, scope: !14104)
!14104 = distinct !DILexicalBlock(scope: !14101, file: !3, line: 5473, column: 7)
!14105 = !DILocation(line: 5473, column: 21, scope: !14104)
!14106 = !DILocation(line: 5473, column: 7, scope: !14101)
!14107 = !DILocation(line: 5474, column: 2, scope: !14104)
!14108 = !DILocation(line: 5474, column: 25, scope: !14104)
!14109 = !DILocation(line: 5474, column: 35, scope: !14104)
!14110 = !DILocation(line: 5473, column: 43, scope: !14104)
!14111 = !DILocation(line: 5473, column: 7, scope: !14104)
!14112 = distinct !{!14112, !14106, !14113}
!14113 = !DILocation(line: 5474, column: 37, scope: !14101)
!14114 = !DILocation(line: 5475, column: 5, scope: !14093)
!14115 = !DILocation(line: 5467, column: 44, scope: !14089)
!14116 = !DILocation(line: 5467, column: 3, scope: !14089)
!14117 = distinct !{!14117, !14091, !14118}
!14118 = !DILocation(line: 5475, column: 5, scope: !14086)
!14119 = !DILocation(line: 5476, column: 10, scope: !14120)
!14120 = distinct !DILexicalBlock(scope: !14082, file: !3, line: 5476, column: 3)
!14121 = !DILocation(line: 5476, column: 8, scope: !14120)
!14122 = !DILocation(line: 5476, column: 15, scope: !14123)
!14123 = distinct !DILexicalBlock(scope: !14120, file: !3, line: 5476, column: 3)
!14124 = !DILocation(line: 5476, column: 17, scope: !14123)
!14125 = !DILocation(line: 5476, column: 3, scope: !14120)
!14126 = !DILocalVariable(name: "j", scope: !14127, file: !3, line: 5478, type: !7)
!14127 = distinct !DILexicalBlock(scope: !14123, file: !3, line: 5477, column: 5)
!14128 = !DILocation(line: 5478, column: 20, scope: !14127)
!14129 = !DILocalVariable(name: "k", scope: !14127, file: !3, line: 5478, type: !7)
!14130 = !DILocation(line: 5478, column: 23, scope: !14127)
!14131 = !DILocalVariable(name: "op", scope: !14127, file: !3, line: 5479, type: !3974)
!14132 = !DILocation(line: 5479, column: 21, scope: !14127)
!14133 = !DILocation(line: 5481, column: 33, scope: !14127)
!14134 = !DILocation(line: 5481, column: 13, scope: !14127)
!14135 = !DILocation(line: 5481, column: 10, scope: !14127)
!14136 = !DILocation(line: 5482, column: 14, scope: !14137)
!14137 = distinct !DILexicalBlock(scope: !14127, file: !3, line: 5482, column: 7)
!14138 = !DILocation(line: 5482, column: 12, scope: !14137)
!14139 = !DILocation(line: 5482, column: 19, scope: !14140)
!14140 = distinct !DILexicalBlock(scope: !14137, file: !3, line: 5482, column: 7)
!14141 = !DILocation(line: 5482, column: 21, scope: !14140)
!14142 = !DILocation(line: 5482, column: 7, scope: !14137)
!14143 = !DILocation(line: 5483, column: 9, scope: !14144)
!14144 = distinct !DILexicalBlock(scope: !14140, file: !3, line: 5483, column: 2)
!14145 = !DILocation(line: 5483, column: 7, scope: !14144)
!14146 = !DILocation(line: 5483, column: 14, scope: !14147)
!14147 = distinct !DILexicalBlock(scope: !14144, file: !3, line: 5483, column: 2)
!14148 = !DILocation(line: 5483, column: 16, scope: !14147)
!14149 = !DILocation(line: 5483, column: 2, scope: !14144)
!14150 = !DILocation(line: 5484, column: 4, scope: !14147)
!14151 = !DILocation(line: 5484, column: 38, scope: !14147)
!14152 = !DILocation(line: 5484, column: 48, scope: !14147)
!14153 = !DILocation(line: 5483, column: 38, scope: !14147)
!14154 = !DILocation(line: 5483, column: 2, scope: !14147)
!14155 = distinct !{!14155, !14149, !14156}
!14156 = !DILocation(line: 5484, column: 50, scope: !14144)
!14157 = !DILocation(line: 5482, column: 43, scope: !14140)
!14158 = !DILocation(line: 5482, column: 7, scope: !14140)
!14159 = distinct !{!14159, !14142, !14160}
!14160 = !DILocation(line: 5484, column: 50, scope: !14137)
!14161 = !DILocation(line: 5485, column: 5, scope: !14127)
!14162 = !DILocation(line: 5476, column: 44, scope: !14123)
!14163 = !DILocation(line: 5476, column: 3, scope: !14123)
!14164 = distinct !{!14164, !14125, !14165}
!14165 = !DILocation(line: 5485, column: 5, scope: !14120)
!14166 = !DILocation(line: 5486, column: 1, scope: !14082)
!14167 = distinct !DISubprogram(name: "init_optab", scope: !3, file: !3, line: 5490, type: !14168, scopeLine: 5491, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14168 = !DISubroutineType(types: !14169)
!14169 = !{null, !3938, !384}
!14170 = !DILocalVariable(name: "op", arg: 1, scope: !14167, file: !3, line: 5490, type: !3938)
!14171 = !DILocation(line: 5490, column: 19, scope: !14167)
!14172 = !DILocalVariable(name: "code", arg: 2, scope: !14167, file: !3, line: 5490, type: !384)
!14173 = !DILocation(line: 5490, column: 37, scope: !14167)
!14174 = !DILocation(line: 5492, column: 14, scope: !14167)
!14175 = !DILocation(line: 5492, column: 3, scope: !14167)
!14176 = !DILocation(line: 5492, column: 7, scope: !14167)
!14177 = !DILocation(line: 5492, column: 12, scope: !14167)
!14178 = !DILocation(line: 5493, column: 31, scope: !14167)
!14179 = !DILocation(line: 5493, column: 23, scope: !14167)
!14180 = !DILocation(line: 5493, column: 3, scope: !14167)
!14181 = !DILocation(line: 5493, column: 29, scope: !14167)
!14182 = !DILocation(line: 5494, column: 1, scope: !14167)
!14183 = distinct !DISubprogram(name: "init_optabv", scope: !3, file: !3, line: 5499, type: !14168, scopeLine: 5500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14184 = !DILocalVariable(name: "op", arg: 1, scope: !14183, file: !3, line: 5499, type: !3938)
!14185 = !DILocation(line: 5499, column: 20, scope: !14183)
!14186 = !DILocalVariable(name: "code", arg: 2, scope: !14183, file: !3, line: 5499, type: !384)
!14187 = !DILocation(line: 5499, column: 38, scope: !14183)
!14188 = !DILocation(line: 5501, column: 14, scope: !14183)
!14189 = !DILocation(line: 5501, column: 3, scope: !14183)
!14190 = !DILocation(line: 5501, column: 7, scope: !14183)
!14191 = !DILocation(line: 5501, column: 12, scope: !14183)
!14192 = !DILocation(line: 5502, column: 1, scope: !14183)
!14193 = distinct !DISubprogram(name: "init_convert_optab", scope: !3, file: !3, line: 5506, type: !14194, scopeLine: 5507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14194 = !DISubroutineType(types: !14195)
!14195 = !{null, !3974, !384}
!14196 = !DILocalVariable(name: "op", arg: 1, scope: !14193, file: !3, line: 5506, type: !3974)
!14197 = !DILocation(line: 5506, column: 35, scope: !14193)
!14198 = !DILocalVariable(name: "code", arg: 2, scope: !14193, file: !3, line: 5506, type: !384)
!14199 = !DILocation(line: 5506, column: 53, scope: !14193)
!14200 = !DILocation(line: 5508, column: 14, scope: !14193)
!14201 = !DILocation(line: 5508, column: 3, scope: !14193)
!14202 = !DILocation(line: 5508, column: 7, scope: !14193)
!14203 = !DILocation(line: 5508, column: 12, scope: !14193)
!14204 = !DILocation(line: 5509, column: 1, scope: !14193)
!14205 = distinct !DISubprogram(name: "gen_int_fp_fixed_libfunc", scope: !3, file: !3, line: 5659, type: !14206, scopeLine: 5661, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14206 = !DISubroutineType(types: !14207)
!14207 = !{null, !3938, !2759, !2761, !5}
!14208 = !DILocalVariable(name: "optable", arg: 1, scope: !14205, file: !3, line: 5659, type: !3938)
!14209 = !DILocation(line: 5659, column: 33, scope: !14205)
!14210 = !DILocalVariable(name: "name", arg: 2, scope: !14205, file: !3, line: 5659, type: !2759)
!14211 = !DILocation(line: 5659, column: 54, scope: !14205)
!14212 = !DILocalVariable(name: "suffix", arg: 3, scope: !14205, file: !3, line: 5659, type: !2761)
!14213 = !DILocation(line: 5659, column: 65, scope: !14205)
!14214 = !DILocalVariable(name: "mode", arg: 4, scope: !14205, file: !3, line: 5660, type: !5)
!14215 = !DILocation(line: 5660, column: 24, scope: !14205)
!14216 = !DILocation(line: 5662, column: 7, scope: !14217)
!14217 = distinct !DILexicalBlock(scope: !14205, file: !3, line: 5662, column: 7)
!14218 = !DILocation(line: 5662, column: 35, scope: !14217)
!14219 = !DILocation(line: 5662, column: 38, scope: !14217)
!14220 = !DILocation(line: 5662, column: 60, scope: !14217)
!14221 = !DILocation(line: 5662, column: 7, scope: !14205)
!14222 = !DILocation(line: 5663, column: 21, scope: !14217)
!14223 = !DILocation(line: 5663, column: 30, scope: !14217)
!14224 = !DILocation(line: 5663, column: 36, scope: !14217)
!14225 = !DILocation(line: 5663, column: 44, scope: !14217)
!14226 = !DILocation(line: 5663, column: 5, scope: !14217)
!14227 = !DILocation(line: 5664, column: 7, scope: !14228)
!14228 = distinct !DILexicalBlock(scope: !14205, file: !3, line: 5664, column: 7)
!14229 = !DILocation(line: 5664, column: 7, scope: !14205)
!14230 = !DILocation(line: 5665, column: 22, scope: !14228)
!14231 = !DILocation(line: 5665, column: 31, scope: !14228)
!14232 = !DILocation(line: 5665, column: 37, scope: !14228)
!14233 = !DILocation(line: 5665, column: 45, scope: !14228)
!14234 = !DILocation(line: 5665, column: 5, scope: !14228)
!14235 = !DILocation(line: 5666, column: 7, scope: !14236)
!14236 = distinct !DILexicalBlock(scope: !14205, file: !3, line: 5666, column: 7)
!14237 = !DILocation(line: 5666, column: 7, scope: !14205)
!14238 = !DILocation(line: 5667, column: 24, scope: !14236)
!14239 = !DILocation(line: 5667, column: 33, scope: !14236)
!14240 = !DILocation(line: 5667, column: 39, scope: !14236)
!14241 = !DILocation(line: 5667, column: 47, scope: !14236)
!14242 = !DILocation(line: 5667, column: 5, scope: !14236)
!14243 = !DILocation(line: 5668, column: 1, scope: !14205)
!14244 = distinct !DISubprogram(name: "gen_intv_fp_libfunc", scope: !3, file: !3, line: 5639, type: !14206, scopeLine: 5641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14245 = !DILocalVariable(name: "optable", arg: 1, scope: !14244, file: !3, line: 5639, type: !3938)
!14246 = !DILocation(line: 5639, column: 28, scope: !14244)
!14247 = !DILocalVariable(name: "name", arg: 2, scope: !14244, file: !3, line: 5639, type: !2759)
!14248 = !DILocation(line: 5639, column: 49, scope: !14244)
!14249 = !DILocalVariable(name: "suffix", arg: 3, scope: !14244, file: !3, line: 5639, type: !2761)
!14250 = !DILocation(line: 5639, column: 60, scope: !14244)
!14251 = !DILocalVariable(name: "mode", arg: 4, scope: !14244, file: !3, line: 5640, type: !5)
!14252 = !DILocation(line: 5640, column: 26, scope: !14244)
!14253 = !DILocation(line: 5642, column: 7, scope: !14254)
!14254 = distinct !DILexicalBlock(scope: !14244, file: !3, line: 5642, column: 7)
!14255 = !DILocation(line: 5642, column: 35, scope: !14254)
!14256 = !DILocation(line: 5642, column: 38, scope: !14254)
!14257 = !DILocation(line: 5642, column: 60, scope: !14254)
!14258 = !DILocation(line: 5642, column: 7, scope: !14244)
!14259 = !DILocation(line: 5643, column: 21, scope: !14254)
!14260 = !DILocation(line: 5643, column: 30, scope: !14254)
!14261 = !DILocation(line: 5643, column: 36, scope: !14254)
!14262 = !DILocation(line: 5643, column: 44, scope: !14254)
!14263 = !DILocation(line: 5643, column: 5, scope: !14254)
!14264 = !DILocation(line: 5644, column: 7, scope: !14265)
!14265 = distinct !DILexicalBlock(scope: !14244, file: !3, line: 5644, column: 7)
!14266 = !DILocation(line: 5644, column: 29, scope: !14265)
!14267 = !DILocation(line: 5644, column: 7, scope: !14244)
!14268 = !DILocalVariable(name: "len", scope: !14269, file: !3, line: 5646, type: !2756)
!14269 = distinct !DILexicalBlock(scope: !14265, file: !3, line: 5645, column: 5)
!14270 = !DILocation(line: 5646, column: 11, scope: !14269)
!14271 = !DILocation(line: 5646, column: 25, scope: !14269)
!14272 = !DILocation(line: 5646, column: 17, scope: !14269)
!14273 = !DILocalVariable(name: "v_name", scope: !14269, file: !3, line: 5647, type: !2828)
!14274 = !DILocation(line: 5647, column: 13, scope: !14269)
!14275 = !DILocation(line: 5647, column: 22, scope: !14269)
!14276 = !DILocation(line: 5648, column: 15, scope: !14269)
!14277 = !DILocation(line: 5648, column: 23, scope: !14269)
!14278 = !DILocation(line: 5648, column: 7, scope: !14269)
!14279 = !DILocation(line: 5649, column: 7, scope: !14269)
!14280 = !DILocation(line: 5649, column: 14, scope: !14269)
!14281 = !DILocation(line: 5649, column: 19, scope: !14269)
!14282 = !DILocation(line: 5650, column: 7, scope: !14269)
!14283 = !DILocation(line: 5650, column: 14, scope: !14269)
!14284 = !DILocation(line: 5650, column: 18, scope: !14269)
!14285 = !DILocation(line: 5650, column: 23, scope: !14269)
!14286 = !DILocation(line: 5651, column: 24, scope: !14269)
!14287 = !DILocation(line: 5651, column: 33, scope: !14269)
!14288 = !DILocation(line: 5651, column: 41, scope: !14269)
!14289 = !DILocation(line: 5651, column: 49, scope: !14269)
!14290 = !DILocation(line: 5651, column: 7, scope: !14269)
!14291 = !DILocation(line: 5652, column: 5, scope: !14269)
!14292 = !DILocation(line: 5653, column: 1, scope: !14244)
!14293 = distinct !DISubprogram(name: "gen_signed_fixed_libfunc", scope: !3, file: !3, line: 5603, type: !14206, scopeLine: 5605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14294 = !DILocalVariable(name: "optable", arg: 1, scope: !14293, file: !3, line: 5603, type: !3938)
!14295 = !DILocation(line: 5603, column: 33, scope: !14293)
!14296 = !DILocalVariable(name: "opname", arg: 2, scope: !14293, file: !3, line: 5603, type: !2759)
!14297 = !DILocation(line: 5603, column: 54, scope: !14293)
!14298 = !DILocalVariable(name: "suffix", arg: 3, scope: !14293, file: !3, line: 5603, type: !2761)
!14299 = !DILocation(line: 5603, column: 67, scope: !14293)
!14300 = !DILocalVariable(name: "mode", arg: 4, scope: !14293, file: !3, line: 5604, type: !5)
!14301 = !DILocation(line: 5604, column: 24, scope: !14293)
!14302 = !DILocation(line: 5606, column: 8, scope: !14303)
!14303 = distinct !DILexicalBlock(scope: !14293, file: !3, line: 5606, column: 7)
!14304 = !DILocation(line: 5606, column: 7, scope: !14293)
!14305 = !DILocation(line: 5607, column: 5, scope: !14303)
!14306 = !DILocation(line: 5608, column: 16, scope: !14293)
!14307 = !DILocation(line: 5608, column: 25, scope: !14293)
!14308 = !DILocation(line: 5608, column: 33, scope: !14293)
!14309 = !DILocation(line: 5608, column: 41, scope: !14293)
!14310 = !DILocation(line: 5608, column: 3, scope: !14293)
!14311 = !DILocation(line: 5609, column: 1, scope: !14293)
!14312 = distinct !DISubprogram(name: "gen_unsigned_fixed_libfunc", scope: !3, file: !3, line: 5615, type: !14206, scopeLine: 5617, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14313 = !DILocalVariable(name: "optable", arg: 1, scope: !14312, file: !3, line: 5615, type: !3938)
!14314 = !DILocation(line: 5615, column: 35, scope: !14312)
!14315 = !DILocalVariable(name: "opname", arg: 2, scope: !14312, file: !3, line: 5615, type: !2759)
!14316 = !DILocation(line: 5615, column: 56, scope: !14312)
!14317 = !DILocalVariable(name: "suffix", arg: 3, scope: !14312, file: !3, line: 5615, type: !2761)
!14318 = !DILocation(line: 5615, column: 69, scope: !14312)
!14319 = !DILocalVariable(name: "mode", arg: 4, scope: !14312, file: !3, line: 5616, type: !5)
!14320 = !DILocation(line: 5616, column: 26, scope: !14312)
!14321 = !DILocation(line: 5618, column: 8, scope: !14322)
!14322 = distinct !DILexicalBlock(scope: !14312, file: !3, line: 5618, column: 7)
!14323 = !DILocation(line: 5618, column: 7, scope: !14312)
!14324 = !DILocation(line: 5619, column: 5, scope: !14322)
!14325 = !DILocation(line: 5620, column: 16, scope: !14312)
!14326 = !DILocation(line: 5620, column: 25, scope: !14312)
!14327 = !DILocation(line: 5620, column: 33, scope: !14312)
!14328 = !DILocation(line: 5620, column: 41, scope: !14312)
!14329 = !DILocation(line: 5620, column: 3, scope: !14312)
!14330 = !DILocation(line: 5621, column: 1, scope: !14312)
!14331 = distinct !DISubprogram(name: "gen_int_fp_signed_fixed_libfunc", scope: !3, file: !3, line: 5674, type: !14206, scopeLine: 5676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14332 = !DILocalVariable(name: "optable", arg: 1, scope: !14331, file: !3, line: 5674, type: !3938)
!14333 = !DILocation(line: 5674, column: 40, scope: !14331)
!14334 = !DILocalVariable(name: "name", arg: 2, scope: !14331, file: !3, line: 5674, type: !2759)
!14335 = !DILocation(line: 5674, column: 61, scope: !14331)
!14336 = !DILocalVariable(name: "suffix", arg: 3, scope: !14331, file: !3, line: 5674, type: !2761)
!14337 = !DILocation(line: 5674, column: 72, scope: !14331)
!14338 = !DILocalVariable(name: "mode", arg: 4, scope: !14331, file: !3, line: 5675, type: !5)
!14339 = !DILocation(line: 5675, column: 24, scope: !14331)
!14340 = !DILocation(line: 5677, column: 7, scope: !14341)
!14341 = distinct !DILexicalBlock(scope: !14331, file: !3, line: 5677, column: 7)
!14342 = !DILocation(line: 5677, column: 35, scope: !14341)
!14343 = !DILocation(line: 5677, column: 38, scope: !14341)
!14344 = !DILocation(line: 5677, column: 60, scope: !14341)
!14345 = !DILocation(line: 5677, column: 7, scope: !14331)
!14346 = !DILocation(line: 5678, column: 21, scope: !14341)
!14347 = !DILocation(line: 5678, column: 30, scope: !14341)
!14348 = !DILocation(line: 5678, column: 36, scope: !14341)
!14349 = !DILocation(line: 5678, column: 44, scope: !14341)
!14350 = !DILocation(line: 5678, column: 5, scope: !14341)
!14351 = !DILocation(line: 5679, column: 7, scope: !14352)
!14352 = distinct !DILexicalBlock(scope: !14331, file: !3, line: 5679, column: 7)
!14353 = !DILocation(line: 5679, column: 7, scope: !14331)
!14354 = !DILocation(line: 5680, column: 22, scope: !14352)
!14355 = !DILocation(line: 5680, column: 31, scope: !14352)
!14356 = !DILocation(line: 5680, column: 37, scope: !14352)
!14357 = !DILocation(line: 5680, column: 45, scope: !14352)
!14358 = !DILocation(line: 5680, column: 5, scope: !14352)
!14359 = !DILocation(line: 5681, column: 7, scope: !14360)
!14360 = distinct !DILexicalBlock(scope: !14331, file: !3, line: 5681, column: 7)
!14361 = !DILocation(line: 5681, column: 7, scope: !14331)
!14362 = !DILocation(line: 5682, column: 31, scope: !14360)
!14363 = !DILocation(line: 5682, column: 40, scope: !14360)
!14364 = !DILocation(line: 5682, column: 46, scope: !14360)
!14365 = !DILocation(line: 5682, column: 54, scope: !14360)
!14366 = !DILocation(line: 5682, column: 5, scope: !14360)
!14367 = !DILocation(line: 5683, column: 1, scope: !14331)
!14368 = distinct !DISubprogram(name: "gen_int_libfunc", scope: !3, file: !3, line: 5552, type: !14206, scopeLine: 5554, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14369 = !DILocalVariable(name: "optable", arg: 1, scope: !14368, file: !3, line: 5552, type: !3938)
!14370 = !DILocation(line: 5552, column: 24, scope: !14368)
!14371 = !DILocalVariable(name: "opname", arg: 2, scope: !14368, file: !3, line: 5552, type: !2759)
!14372 = !DILocation(line: 5552, column: 45, scope: !14368)
!14373 = !DILocalVariable(name: "suffix", arg: 3, scope: !14368, file: !3, line: 5552, type: !2761)
!14374 = !DILocation(line: 5552, column: 58, scope: !14368)
!14375 = !DILocalVariable(name: "mode", arg: 4, scope: !14368, file: !3, line: 5553, type: !5)
!14376 = !DILocation(line: 5553, column: 22, scope: !14368)
!14377 = !DILocalVariable(name: "maxsize", scope: !14368, file: !3, line: 5555, type: !2756)
!14378 = !DILocation(line: 5555, column: 7, scope: !14368)
!14379 = !DILocation(line: 5557, column: 7, scope: !14380)
!14380 = distinct !DILexicalBlock(scope: !14368, file: !3, line: 5557, column: 7)
!14381 = !DILocation(line: 5557, column: 29, scope: !14380)
!14382 = !DILocation(line: 5557, column: 7, scope: !14368)
!14383 = !DILocation(line: 5558, column: 5, scope: !14380)
!14384 = !DILocation(line: 5559, column: 7, scope: !14385)
!14385 = distinct !DILexicalBlock(scope: !14368, file: !3, line: 5559, column: 7)
!14386 = !DILocation(line: 5559, column: 15, scope: !14385)
!14387 = !DILocation(line: 5559, column: 7, scope: !14368)
!14388 = !DILocation(line: 5560, column: 13, scope: !14385)
!14389 = !DILocation(line: 5560, column: 5, scope: !14385)
!14390 = !DILocation(line: 5561, column: 7, scope: !14391)
!14391 = distinct !DILexicalBlock(scope: !14368, file: !3, line: 5561, column: 7)
!14392 = !DILocation(line: 5561, column: 29, scope: !14391)
!14393 = !DILocation(line: 5562, column: 7, scope: !14391)
!14394 = !DILocation(line: 5562, column: 10, scope: !14391)
!14395 = !DILocation(line: 5562, column: 17, scope: !14391)
!14396 = !DILocation(line: 5562, column: 15, scope: !14391)
!14397 = !DILocation(line: 5562, column: 27, scope: !14391)
!14398 = !DILocation(line: 5562, column: 30, scope: !14391)
!14399 = !DILocation(line: 5562, column: 56, scope: !14391)
!14400 = !DILocation(line: 5562, column: 54, scope: !14391)
!14401 = !DILocation(line: 5561, column: 7, scope: !14368)
!14402 = !DILocation(line: 5563, column: 5, scope: !14391)
!14403 = !DILocation(line: 5564, column: 16, scope: !14368)
!14404 = !DILocation(line: 5564, column: 25, scope: !14368)
!14405 = !DILocation(line: 5564, column: 33, scope: !14368)
!14406 = !DILocation(line: 5564, column: 41, scope: !14368)
!14407 = !DILocation(line: 5564, column: 3, scope: !14368)
!14408 = !DILocation(line: 5565, column: 1, scope: !14368)
!14409 = distinct !DISubprogram(name: "gen_int_unsigned_fixed_libfunc", scope: !3, file: !3, line: 5715, type: !14206, scopeLine: 5717, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14410 = !DILocalVariable(name: "optable", arg: 1, scope: !14409, file: !3, line: 5715, type: !3938)
!14411 = !DILocation(line: 5715, column: 39, scope: !14409)
!14412 = !DILocalVariable(name: "name", arg: 2, scope: !14409, file: !3, line: 5715, type: !2759)
!14413 = !DILocation(line: 5715, column: 60, scope: !14409)
!14414 = !DILocalVariable(name: "suffix", arg: 3, scope: !14409, file: !3, line: 5715, type: !2761)
!14415 = !DILocation(line: 5715, column: 71, scope: !14409)
!14416 = !DILocalVariable(name: "mode", arg: 4, scope: !14409, file: !3, line: 5716, type: !5)
!14417 = !DILocation(line: 5716, column: 23, scope: !14409)
!14418 = !DILocation(line: 5718, column: 7, scope: !14419)
!14419 = distinct !DILexicalBlock(scope: !14409, file: !3, line: 5718, column: 7)
!14420 = !DILocation(line: 5718, column: 7, scope: !14409)
!14421 = !DILocation(line: 5719, column: 22, scope: !14419)
!14422 = !DILocation(line: 5719, column: 31, scope: !14419)
!14423 = !DILocation(line: 5719, column: 37, scope: !14419)
!14424 = !DILocation(line: 5719, column: 45, scope: !14419)
!14425 = !DILocation(line: 5719, column: 5, scope: !14419)
!14426 = !DILocation(line: 5720, column: 7, scope: !14427)
!14427 = distinct !DILexicalBlock(scope: !14409, file: !3, line: 5720, column: 7)
!14428 = !DILocation(line: 5720, column: 7, scope: !14409)
!14429 = !DILocation(line: 5721, column: 33, scope: !14427)
!14430 = !DILocation(line: 5721, column: 42, scope: !14427)
!14431 = !DILocation(line: 5721, column: 48, scope: !14427)
!14432 = !DILocation(line: 5721, column: 56, scope: !14427)
!14433 = !DILocation(line: 5721, column: 5, scope: !14427)
!14434 = !DILocation(line: 5722, column: 1, scope: !14409)
!14435 = distinct !DISubprogram(name: "gen_fp_libfunc", scope: !3, file: !3, line: 5570, type: !14206, scopeLine: 5572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14436 = !DILocalVariable(name: "optable", arg: 1, scope: !14435, file: !3, line: 5570, type: !3938)
!14437 = !DILocation(line: 5570, column: 23, scope: !14435)
!14438 = !DILocalVariable(name: "opname", arg: 2, scope: !14435, file: !3, line: 5570, type: !2759)
!14439 = !DILocation(line: 5570, column: 44, scope: !14435)
!14440 = !DILocalVariable(name: "suffix", arg: 3, scope: !14435, file: !3, line: 5570, type: !2761)
!14441 = !DILocation(line: 5570, column: 57, scope: !14435)
!14442 = !DILocalVariable(name: "mode", arg: 4, scope: !14435, file: !3, line: 5571, type: !5)
!14443 = !DILocation(line: 5571, column: 21, scope: !14435)
!14444 = !DILocalVariable(name: "dec_opname", scope: !14435, file: !3, line: 5573, type: !2828)
!14445 = !DILocation(line: 5573, column: 9, scope: !14435)
!14446 = !DILocation(line: 5575, column: 7, scope: !14447)
!14447 = distinct !DILexicalBlock(scope: !14435, file: !3, line: 5575, column: 7)
!14448 = !DILocation(line: 5575, column: 29, scope: !14447)
!14449 = !DILocation(line: 5575, column: 7, scope: !14435)
!14450 = !DILocation(line: 5576, column: 18, scope: !14447)
!14451 = !DILocation(line: 5576, column: 27, scope: !14447)
!14452 = !DILocation(line: 5576, column: 35, scope: !14447)
!14453 = !DILocation(line: 5576, column: 43, scope: !14447)
!14454 = !DILocation(line: 5576, column: 5, scope: !14447)
!14455 = !DILocation(line: 5577, column: 7, scope: !14456)
!14456 = distinct !DILexicalBlock(scope: !14435, file: !3, line: 5577, column: 7)
!14457 = !DILocation(line: 5577, column: 7, scope: !14435)
!14458 = !DILocation(line: 5579, column: 20, scope: !14459)
!14459 = distinct !DILexicalBlock(scope: !14456, file: !3, line: 5578, column: 5)
!14460 = !DILocation(line: 5579, column: 18, scope: !14459)
!14461 = !DILocation(line: 5582, column: 15, scope: !14459)
!14462 = !DILocation(line: 5582, column: 7, scope: !14459)
!14463 = !DILocation(line: 5583, column: 15, scope: !14459)
!14464 = !DILocation(line: 5583, column: 26, scope: !14459)
!14465 = !DILocation(line: 5583, column: 52, scope: !14459)
!14466 = !DILocation(line: 5583, column: 57, scope: !14459)
!14467 = !DILocation(line: 5583, column: 7, scope: !14459)
!14468 = !DILocation(line: 5584, column: 20, scope: !14459)
!14469 = !DILocation(line: 5584, column: 29, scope: !14459)
!14470 = !DILocation(line: 5584, column: 41, scope: !14459)
!14471 = !DILocation(line: 5584, column: 49, scope: !14459)
!14472 = !DILocation(line: 5584, column: 7, scope: !14459)
!14473 = !DILocation(line: 5585, column: 5, scope: !14459)
!14474 = !DILocation(line: 5586, column: 1, scope: !14435)
!14475 = distinct !DISubprogram(name: "gen_int_fixed_libfunc", scope: !3, file: !3, line: 5689, type: !14206, scopeLine: 5691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14476 = !DILocalVariable(name: "optable", arg: 1, scope: !14475, file: !3, line: 5689, type: !3938)
!14477 = !DILocation(line: 5689, column: 30, scope: !14475)
!14478 = !DILocalVariable(name: "name", arg: 2, scope: !14475, file: !3, line: 5689, type: !2759)
!14479 = !DILocation(line: 5689, column: 51, scope: !14475)
!14480 = !DILocalVariable(name: "suffix", arg: 3, scope: !14475, file: !3, line: 5689, type: !2761)
!14481 = !DILocation(line: 5689, column: 62, scope: !14475)
!14482 = !DILocalVariable(name: "mode", arg: 4, scope: !14475, file: !3, line: 5690, type: !5)
!14483 = !DILocation(line: 5690, column: 28, scope: !14475)
!14484 = !DILocation(line: 5692, column: 7, scope: !14485)
!14485 = distinct !DILexicalBlock(scope: !14475, file: !3, line: 5692, column: 7)
!14486 = !DILocation(line: 5692, column: 7, scope: !14475)
!14487 = !DILocation(line: 5693, column: 22, scope: !14485)
!14488 = !DILocation(line: 5693, column: 31, scope: !14485)
!14489 = !DILocation(line: 5693, column: 37, scope: !14485)
!14490 = !DILocation(line: 5693, column: 45, scope: !14485)
!14491 = !DILocation(line: 5693, column: 5, scope: !14485)
!14492 = !DILocation(line: 5694, column: 7, scope: !14493)
!14493 = distinct !DILexicalBlock(scope: !14475, file: !3, line: 5694, column: 7)
!14494 = !DILocation(line: 5694, column: 7, scope: !14475)
!14495 = !DILocation(line: 5695, column: 24, scope: !14493)
!14496 = !DILocation(line: 5695, column: 33, scope: !14493)
!14497 = !DILocation(line: 5695, column: 39, scope: !14493)
!14498 = !DILocation(line: 5695, column: 47, scope: !14493)
!14499 = !DILocation(line: 5695, column: 5, scope: !14493)
!14500 = !DILocation(line: 5696, column: 1, scope: !14475)
!14501 = distinct !DISubprogram(name: "gen_int_signed_fixed_libfunc", scope: !3, file: !3, line: 5702, type: !14206, scopeLine: 5704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14502 = !DILocalVariable(name: "optable", arg: 1, scope: !14501, file: !3, line: 5702, type: !3938)
!14503 = !DILocation(line: 5702, column: 37, scope: !14501)
!14504 = !DILocalVariable(name: "name", arg: 2, scope: !14501, file: !3, line: 5702, type: !2759)
!14505 = !DILocation(line: 5702, column: 58, scope: !14501)
!14506 = !DILocalVariable(name: "suffix", arg: 3, scope: !14501, file: !3, line: 5702, type: !2761)
!14507 = !DILocation(line: 5702, column: 69, scope: !14501)
!14508 = !DILocalVariable(name: "mode", arg: 4, scope: !14501, file: !3, line: 5703, type: !5)
!14509 = !DILocation(line: 5703, column: 28, scope: !14501)
!14510 = !DILocation(line: 5705, column: 7, scope: !14511)
!14511 = distinct !DILexicalBlock(scope: !14501, file: !3, line: 5705, column: 7)
!14512 = !DILocation(line: 5705, column: 7, scope: !14501)
!14513 = !DILocation(line: 5706, column: 22, scope: !14511)
!14514 = !DILocation(line: 5706, column: 31, scope: !14511)
!14515 = !DILocation(line: 5706, column: 37, scope: !14511)
!14516 = !DILocation(line: 5706, column: 45, scope: !14511)
!14517 = !DILocation(line: 5706, column: 5, scope: !14511)
!14518 = !DILocation(line: 5707, column: 7, scope: !14519)
!14519 = distinct !DILexicalBlock(scope: !14501, file: !3, line: 5707, column: 7)
!14520 = !DILocation(line: 5707, column: 7, scope: !14501)
!14521 = !DILocation(line: 5708, column: 31, scope: !14519)
!14522 = !DILocation(line: 5708, column: 40, scope: !14519)
!14523 = !DILocation(line: 5708, column: 46, scope: !14519)
!14524 = !DILocation(line: 5708, column: 54, scope: !14519)
!14525 = !DILocation(line: 5708, column: 5, scope: !14519)
!14526 = !DILocation(line: 5709, column: 1, scope: !14501)
!14527 = distinct !DISubprogram(name: "gen_int_fp_libfunc", scope: !3, file: !3, line: 5626, type: !14206, scopeLine: 5628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14528 = !DILocalVariable(name: "optable", arg: 1, scope: !14527, file: !3, line: 5626, type: !3938)
!14529 = !DILocation(line: 5626, column: 27, scope: !14527)
!14530 = !DILocalVariable(name: "name", arg: 2, scope: !14527, file: !3, line: 5626, type: !2759)
!14531 = !DILocation(line: 5626, column: 48, scope: !14527)
!14532 = !DILocalVariable(name: "suffix", arg: 3, scope: !14527, file: !3, line: 5626, type: !2761)
!14533 = !DILocation(line: 5626, column: 59, scope: !14527)
!14534 = !DILocalVariable(name: "mode", arg: 4, scope: !14527, file: !3, line: 5627, type: !5)
!14535 = !DILocation(line: 5627, column: 25, scope: !14527)
!14536 = !DILocation(line: 5629, column: 7, scope: !14537)
!14537 = distinct !DILexicalBlock(scope: !14527, file: !3, line: 5629, column: 7)
!14538 = !DILocation(line: 5629, column: 35, scope: !14537)
!14539 = !DILocation(line: 5629, column: 38, scope: !14537)
!14540 = !DILocation(line: 5629, column: 60, scope: !14537)
!14541 = !DILocation(line: 5629, column: 7, scope: !14527)
!14542 = !DILocation(line: 5630, column: 21, scope: !14537)
!14543 = !DILocation(line: 5630, column: 30, scope: !14537)
!14544 = !DILocation(line: 5630, column: 36, scope: !14537)
!14545 = !DILocation(line: 5630, column: 44, scope: !14537)
!14546 = !DILocation(line: 5630, column: 5, scope: !14537)
!14547 = !DILocation(line: 5631, column: 7, scope: !14548)
!14548 = distinct !DILexicalBlock(scope: !14527, file: !3, line: 5631, column: 7)
!14549 = !DILocation(line: 5631, column: 7, scope: !14527)
!14550 = !DILocation(line: 5632, column: 22, scope: !14548)
!14551 = !DILocation(line: 5632, column: 31, scope: !14548)
!14552 = !DILocation(line: 5632, column: 37, scope: !14548)
!14553 = !DILocation(line: 5632, column: 45, scope: !14548)
!14554 = !DILocation(line: 5632, column: 5, scope: !14548)
!14555 = !DILocation(line: 5633, column: 1, scope: !14527)
!14556 = distinct !DISubprogram(name: "gen_int_to_fp_conv_libfunc", scope: !3, file: !3, line: 5794, type: !14557, scopeLine: 5798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14557 = !DISubroutineType(types: !14558)
!14558 = !{null, !3974, !2759, !5, !5}
!14559 = !DILocalVariable(name: "tab", arg: 1, scope: !14556, file: !3, line: 5794, type: !3974)
!14560 = !DILocation(line: 5794, column: 43, scope: !14556)
!14561 = !DILocalVariable(name: "opname", arg: 2, scope: !14556, file: !3, line: 5795, type: !2759)
!14562 = !DILocation(line: 5795, column: 20, scope: !14556)
!14563 = !DILocalVariable(name: "tmode", arg: 3, scope: !14556, file: !3, line: 5796, type: !5)
!14564 = !DILocation(line: 5796, column: 26, scope: !14556)
!14565 = !DILocalVariable(name: "fmode", arg: 4, scope: !14556, file: !3, line: 5797, type: !5)
!14566 = !DILocation(line: 5797, column: 26, scope: !14556)
!14567 = !DILocation(line: 5799, column: 7, scope: !14568)
!14568 = distinct !DILexicalBlock(scope: !14556, file: !3, line: 5799, column: 7)
!14569 = !DILocation(line: 5799, column: 30, scope: !14568)
!14570 = !DILocation(line: 5799, column: 7, scope: !14556)
!14571 = !DILocation(line: 5800, column: 5, scope: !14568)
!14572 = !DILocation(line: 5801, column: 7, scope: !14573)
!14573 = distinct !DILexicalBlock(scope: !14556, file: !3, line: 5801, column: 7)
!14574 = !DILocation(line: 5801, column: 30, scope: !14573)
!14575 = !DILocation(line: 5801, column: 44, scope: !14573)
!14576 = !DILocation(line: 5801, column: 48, scope: !14573)
!14577 = !DILocation(line: 5801, column: 7, scope: !14556)
!14578 = !DILocation(line: 5802, column: 5, scope: !14573)
!14579 = !DILocation(line: 5803, column: 32, scope: !14556)
!14580 = !DILocation(line: 5803, column: 37, scope: !14556)
!14581 = !DILocation(line: 5803, column: 45, scope: !14556)
!14582 = !DILocation(line: 5803, column: 52, scope: !14556)
!14583 = !DILocation(line: 5803, column: 3, scope: !14556)
!14584 = !DILocation(line: 5804, column: 1, scope: !14556)
!14585 = distinct !DISubprogram(name: "gen_ufloat_conv_libfunc", scope: !3, file: !3, line: 5810, type: !14557, scopeLine: 5814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14586 = !DILocalVariable(name: "tab", arg: 1, scope: !14585, file: !3, line: 5810, type: !3974)
!14587 = !DILocation(line: 5810, column: 40, scope: !14585)
!14588 = !DILocalVariable(name: "opname", arg: 2, scope: !14585, file: !3, line: 5811, type: !2759)
!14589 = !DILocation(line: 5811, column: 17, scope: !14585)
!14590 = !DILocalVariable(name: "tmode", arg: 3, scope: !14585, file: !3, line: 5812, type: !5)
!14591 = !DILocation(line: 5812, column: 23, scope: !14585)
!14592 = !DILocalVariable(name: "fmode", arg: 4, scope: !14585, file: !3, line: 5813, type: !5)
!14593 = !DILocation(line: 5813, column: 23, scope: !14585)
!14594 = !DILocation(line: 5815, column: 7, scope: !14595)
!14595 = distinct !DILexicalBlock(scope: !14585, file: !3, line: 5815, column: 7)
!14596 = !DILocation(line: 5815, column: 7, scope: !14585)
!14597 = !DILocation(line: 5816, column: 33, scope: !14595)
!14598 = !DILocation(line: 5816, column: 50, scope: !14595)
!14599 = !DILocation(line: 5816, column: 57, scope: !14595)
!14600 = !DILocation(line: 5816, column: 5, scope: !14595)
!14601 = !DILocation(line: 5818, column: 33, scope: !14595)
!14602 = !DILocation(line: 5818, column: 49, scope: !14595)
!14603 = !DILocation(line: 5818, column: 56, scope: !14595)
!14604 = !DILocation(line: 5818, column: 5, scope: !14595)
!14605 = !DILocation(line: 5819, column: 1, scope: !14585)
!14606 = distinct !DISubprogram(name: "gen_fp_to_int_conv_libfunc", scope: !3, file: !3, line: 5841, type: !14557, scopeLine: 5845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14607 = !DILocalVariable(name: "tab", arg: 1, scope: !14606, file: !3, line: 5841, type: !3974)
!14608 = !DILocation(line: 5841, column: 43, scope: !14606)
!14609 = !DILocalVariable(name: "opname", arg: 2, scope: !14606, file: !3, line: 5842, type: !2759)
!14610 = !DILocation(line: 5842, column: 20, scope: !14606)
!14611 = !DILocalVariable(name: "tmode", arg: 3, scope: !14606, file: !3, line: 5843, type: !5)
!14612 = !DILocation(line: 5843, column: 26, scope: !14606)
!14613 = !DILocalVariable(name: "fmode", arg: 4, scope: !14606, file: !3, line: 5844, type: !5)
!14614 = !DILocation(line: 5844, column: 26, scope: !14606)
!14615 = !DILocation(line: 5846, column: 7, scope: !14616)
!14616 = distinct !DILexicalBlock(scope: !14606, file: !3, line: 5846, column: 7)
!14617 = !DILocation(line: 5846, column: 30, scope: !14616)
!14618 = !DILocation(line: 5846, column: 44, scope: !14616)
!14619 = !DILocation(line: 5846, column: 48, scope: !14616)
!14620 = !DILocation(line: 5846, column: 7, scope: !14606)
!14621 = !DILocation(line: 5847, column: 5, scope: !14616)
!14622 = !DILocation(line: 5848, column: 7, scope: !14623)
!14623 = distinct !DILexicalBlock(scope: !14606, file: !3, line: 5848, column: 7)
!14624 = !DILocation(line: 5848, column: 30, scope: !14623)
!14625 = !DILocation(line: 5848, column: 7, scope: !14606)
!14626 = !DILocation(line: 5849, column: 5, scope: !14623)
!14627 = !DILocation(line: 5850, column: 32, scope: !14606)
!14628 = !DILocation(line: 5850, column: 37, scope: !14606)
!14629 = !DILocation(line: 5850, column: 45, scope: !14606)
!14630 = !DILocation(line: 5850, column: 52, scope: !14606)
!14631 = !DILocation(line: 5850, column: 3, scope: !14606)
!14632 = !DILocation(line: 5851, column: 1, scope: !14606)
!14633 = distinct !DISubprogram(name: "gen_int_to_fp_nondecimal_conv_libfunc", scope: !3, file: !3, line: 5825, type: !14557, scopeLine: 5829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14634 = !DILocalVariable(name: "tab", arg: 1, scope: !14633, file: !3, line: 5825, type: !3974)
!14635 = !DILocation(line: 5825, column: 54, scope: !14633)
!14636 = !DILocalVariable(name: "opname", arg: 2, scope: !14633, file: !3, line: 5826, type: !2759)
!14637 = !DILocation(line: 5826, column: 31, scope: !14633)
!14638 = !DILocalVariable(name: "tmode", arg: 3, scope: !14633, file: !3, line: 5827, type: !5)
!14639 = !DILocation(line: 5827, column: 37, scope: !14633)
!14640 = !DILocalVariable(name: "fmode", arg: 4, scope: !14633, file: !3, line: 5828, type: !5)
!14641 = !DILocation(line: 5828, column: 37, scope: !14633)
!14642 = !DILocation(line: 5830, column: 7, scope: !14643)
!14643 = distinct !DILexicalBlock(scope: !14633, file: !3, line: 5830, column: 7)
!14644 = !DILocation(line: 5830, column: 30, scope: !14643)
!14645 = !DILocation(line: 5830, column: 7, scope: !14633)
!14646 = !DILocation(line: 5831, column: 5, scope: !14643)
!14647 = !DILocation(line: 5832, column: 7, scope: !14648)
!14648 = distinct !DILexicalBlock(scope: !14633, file: !3, line: 5832, column: 7)
!14649 = !DILocation(line: 5832, column: 30, scope: !14648)
!14650 = !DILocation(line: 5832, column: 7, scope: !14633)
!14651 = !DILocation(line: 5833, column: 5, scope: !14648)
!14652 = !DILocation(line: 5834, column: 32, scope: !14633)
!14653 = !DILocation(line: 5834, column: 37, scope: !14633)
!14654 = !DILocation(line: 5834, column: 45, scope: !14633)
!14655 = !DILocation(line: 5834, column: 52, scope: !14633)
!14656 = !DILocation(line: 5834, column: 3, scope: !14633)
!14657 = !DILocation(line: 5835, column: 1, scope: !14633)
!14658 = distinct !DISubprogram(name: "gen_extend_conv_libfunc", scope: !3, file: !3, line: 5949, type: !14557, scopeLine: 5953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14659 = !DILocalVariable(name: "tab", arg: 1, scope: !14658, file: !3, line: 5949, type: !3974)
!14660 = !DILocation(line: 5949, column: 40, scope: !14658)
!14661 = !DILocalVariable(name: "opname", arg: 2, scope: !14658, file: !3, line: 5950, type: !2759)
!14662 = !DILocation(line: 5950, column: 17, scope: !14658)
!14663 = !DILocalVariable(name: "tmode", arg: 3, scope: !14658, file: !3, line: 5951, type: !5)
!14664 = !DILocation(line: 5951, column: 23, scope: !14658)
!14665 = !DILocalVariable(name: "fmode", arg: 4, scope: !14658, file: !3, line: 5952, type: !5)
!14666 = !DILocation(line: 5952, column: 23, scope: !14658)
!14667 = !DILocation(line: 5954, column: 7, scope: !14668)
!14668 = distinct !DILexicalBlock(scope: !14658, file: !3, line: 5954, column: 7)
!14669 = !DILocation(line: 5954, column: 30, scope: !14668)
!14670 = !DILocation(line: 5954, column: 44, scope: !14668)
!14671 = !DILocation(line: 5954, column: 48, scope: !14668)
!14672 = !DILocation(line: 5954, column: 7, scope: !14658)
!14673 = !DILocation(line: 5955, column: 5, scope: !14668)
!14674 = !DILocation(line: 5956, column: 7, scope: !14675)
!14675 = distinct !DILexicalBlock(scope: !14658, file: !3, line: 5956, column: 7)
!14676 = !DILocation(line: 5956, column: 30, scope: !14675)
!14677 = !DILocation(line: 5956, column: 44, scope: !14675)
!14678 = !DILocation(line: 5956, column: 48, scope: !14675)
!14679 = !DILocation(line: 5956, column: 7, scope: !14658)
!14680 = !DILocation(line: 5957, column: 5, scope: !14675)
!14681 = !DILocation(line: 5958, column: 7, scope: !14682)
!14682 = distinct !DILexicalBlock(scope: !14658, file: !3, line: 5958, column: 7)
!14683 = !DILocation(line: 5958, column: 16, scope: !14682)
!14684 = !DILocation(line: 5958, column: 13, scope: !14682)
!14685 = !DILocation(line: 5958, column: 7, scope: !14658)
!14686 = !DILocation(line: 5959, column: 5, scope: !14682)
!14687 = !DILocation(line: 5961, column: 8, scope: !14688)
!14688 = distinct !DILexicalBlock(scope: !14658, file: !3, line: 5961, column: 7)
!14689 = !DILocation(line: 5961, column: 31, scope: !14688)
!14690 = !DILocation(line: 5961, column: 45, scope: !14688)
!14691 = !DILocation(line: 5961, column: 48, scope: !14688)
!14692 = !DILocation(line: 5962, column: 7, scope: !14688)
!14693 = !DILocation(line: 5962, column: 11, scope: !14688)
!14694 = !DILocation(line: 5962, column: 34, scope: !14688)
!14695 = !DILocation(line: 5962, column: 48, scope: !14688)
!14696 = !DILocation(line: 5962, column: 51, scope: !14688)
!14697 = !DILocation(line: 5961, column: 7, scope: !14658)
!14698 = !DILocation(line: 5963, column: 35, scope: !14688)
!14699 = !DILocation(line: 5963, column: 40, scope: !14688)
!14700 = !DILocation(line: 5963, column: 48, scope: !14688)
!14701 = !DILocation(line: 5963, column: 55, scope: !14688)
!14702 = !DILocation(line: 5963, column: 6, scope: !14688)
!14703 = !DILocation(line: 5965, column: 7, scope: !14704)
!14704 = distinct !DILexicalBlock(scope: !14658, file: !3, line: 5965, column: 7)
!14705 = !DILocation(line: 5965, column: 36, scope: !14704)
!14706 = !DILocation(line: 5965, column: 34, scope: !14704)
!14707 = !DILocation(line: 5965, column: 7, scope: !14658)
!14708 = !DILocation(line: 5966, column: 5, scope: !14704)
!14709 = !DILocation(line: 5968, column: 8, scope: !14710)
!14710 = distinct !DILexicalBlock(scope: !14658, file: !3, line: 5968, column: 7)
!14711 = !DILocation(line: 5968, column: 31, scope: !14710)
!14712 = !DILocation(line: 5969, column: 8, scope: !14710)
!14713 = !DILocation(line: 5969, column: 11, scope: !14710)
!14714 = !DILocation(line: 5969, column: 34, scope: !14710)
!14715 = !DILocation(line: 5970, column: 7, scope: !14710)
!14716 = !DILocation(line: 5970, column: 11, scope: !14710)
!14717 = !DILocation(line: 5970, column: 40, scope: !14710)
!14718 = !DILocation(line: 5970, column: 43, scope: !14710)
!14719 = !DILocation(line: 5968, column: 7, scope: !14658)
!14720 = !DILocation(line: 5971, column: 34, scope: !14710)
!14721 = !DILocation(line: 5971, column: 39, scope: !14710)
!14722 = !DILocation(line: 5971, column: 47, scope: !14710)
!14723 = !DILocation(line: 5971, column: 54, scope: !14710)
!14724 = !DILocation(line: 5971, column: 5, scope: !14710)
!14725 = !DILocation(line: 5972, column: 1, scope: !14658)
!14726 = distinct !DISubprogram(name: "gen_trunc_conv_libfunc", scope: !3, file: !3, line: 5920, type: !14557, scopeLine: 5924, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14727 = !DILocalVariable(name: "tab", arg: 1, scope: !14726, file: !3, line: 5920, type: !3974)
!14728 = !DILocation(line: 5920, column: 39, scope: !14726)
!14729 = !DILocalVariable(name: "opname", arg: 2, scope: !14726, file: !3, line: 5921, type: !2759)
!14730 = !DILocation(line: 5921, column: 17, scope: !14726)
!14731 = !DILocalVariable(name: "tmode", arg: 3, scope: !14726, file: !3, line: 5922, type: !5)
!14732 = !DILocation(line: 5922, column: 23, scope: !14726)
!14733 = !DILocalVariable(name: "fmode", arg: 4, scope: !14726, file: !3, line: 5923, type: !5)
!14734 = !DILocation(line: 5923, column: 23, scope: !14726)
!14735 = !DILocation(line: 5925, column: 7, scope: !14736)
!14736 = distinct !DILexicalBlock(scope: !14726, file: !3, line: 5925, column: 7)
!14737 = !DILocation(line: 5925, column: 30, scope: !14736)
!14738 = !DILocation(line: 5925, column: 44, scope: !14736)
!14739 = !DILocation(line: 5925, column: 48, scope: !14736)
!14740 = !DILocation(line: 5925, column: 7, scope: !14726)
!14741 = !DILocation(line: 5926, column: 5, scope: !14736)
!14742 = !DILocation(line: 5927, column: 7, scope: !14743)
!14743 = distinct !DILexicalBlock(scope: !14726, file: !3, line: 5927, column: 7)
!14744 = !DILocation(line: 5927, column: 30, scope: !14743)
!14745 = !DILocation(line: 5927, column: 44, scope: !14743)
!14746 = !DILocation(line: 5927, column: 48, scope: !14743)
!14747 = !DILocation(line: 5927, column: 7, scope: !14726)
!14748 = !DILocation(line: 5928, column: 5, scope: !14743)
!14749 = !DILocation(line: 5929, column: 7, scope: !14750)
!14750 = distinct !DILexicalBlock(scope: !14726, file: !3, line: 5929, column: 7)
!14751 = !DILocation(line: 5929, column: 16, scope: !14750)
!14752 = !DILocation(line: 5929, column: 13, scope: !14750)
!14753 = !DILocation(line: 5929, column: 7, scope: !14726)
!14754 = !DILocation(line: 5930, column: 5, scope: !14750)
!14755 = !DILocation(line: 5932, column: 8, scope: !14756)
!14756 = distinct !DILexicalBlock(scope: !14726, file: !3, line: 5932, column: 7)
!14757 = !DILocation(line: 5932, column: 31, scope: !14756)
!14758 = !DILocation(line: 5932, column: 45, scope: !14756)
!14759 = !DILocation(line: 5932, column: 48, scope: !14756)
!14760 = !DILocation(line: 5933, column: 7, scope: !14756)
!14761 = !DILocation(line: 5933, column: 11, scope: !14756)
!14762 = !DILocation(line: 5933, column: 34, scope: !14756)
!14763 = !DILocation(line: 5933, column: 48, scope: !14756)
!14764 = !DILocation(line: 5933, column: 51, scope: !14756)
!14765 = !DILocation(line: 5932, column: 7, scope: !14726)
!14766 = !DILocation(line: 5934, column: 35, scope: !14756)
!14767 = !DILocation(line: 5934, column: 40, scope: !14756)
!14768 = !DILocation(line: 5934, column: 48, scope: !14756)
!14769 = !DILocation(line: 5934, column: 55, scope: !14756)
!14770 = !DILocation(line: 5934, column: 6, scope: !14756)
!14771 = !DILocation(line: 5936, column: 7, scope: !14772)
!14772 = distinct !DILexicalBlock(scope: !14726, file: !3, line: 5936, column: 7)
!14773 = !DILocation(line: 5936, column: 37, scope: !14772)
!14774 = !DILocation(line: 5936, column: 34, scope: !14772)
!14775 = !DILocation(line: 5936, column: 7, scope: !14726)
!14776 = !DILocation(line: 5937, column: 5, scope: !14772)
!14777 = !DILocation(line: 5939, column: 8, scope: !14778)
!14778 = distinct !DILexicalBlock(scope: !14726, file: !3, line: 5939, column: 7)
!14779 = !DILocation(line: 5939, column: 31, scope: !14778)
!14780 = !DILocation(line: 5940, column: 8, scope: !14778)
!14781 = !DILocation(line: 5940, column: 11, scope: !14778)
!14782 = !DILocation(line: 5940, column: 34, scope: !14778)
!14783 = !DILocation(line: 5941, column: 7, scope: !14778)
!14784 = !DILocation(line: 5941, column: 11, scope: !14778)
!14785 = !DILocation(line: 5941, column: 40, scope: !14778)
!14786 = !DILocation(line: 5941, column: 43, scope: !14778)
!14787 = !DILocation(line: 5939, column: 7, scope: !14726)
!14788 = !DILocation(line: 5942, column: 34, scope: !14778)
!14789 = !DILocation(line: 5942, column: 39, scope: !14778)
!14790 = !DILocation(line: 5942, column: 47, scope: !14778)
!14791 = !DILocation(line: 5942, column: 54, scope: !14778)
!14792 = !DILocation(line: 5942, column: 5, scope: !14778)
!14793 = !DILocation(line: 5943, column: 1, scope: !14726)
!14794 = distinct !DISubprogram(name: "gen_fract_conv_libfunc", scope: !3, file: !3, line: 5978, type: !14557, scopeLine: 5982, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14795 = !DILocalVariable(name: "tab", arg: 1, scope: !14794, file: !3, line: 5978, type: !3974)
!14796 = !DILocation(line: 5978, column: 39, scope: !14794)
!14797 = !DILocalVariable(name: "opname", arg: 2, scope: !14794, file: !3, line: 5979, type: !2759)
!14798 = !DILocation(line: 5979, column: 16, scope: !14794)
!14799 = !DILocalVariable(name: "tmode", arg: 3, scope: !14794, file: !3, line: 5980, type: !5)
!14800 = !DILocation(line: 5980, column: 22, scope: !14794)
!14801 = !DILocalVariable(name: "fmode", arg: 4, scope: !14794, file: !3, line: 5981, type: !5)
!14802 = !DILocation(line: 5981, column: 22, scope: !14794)
!14803 = !DILocation(line: 5983, column: 7, scope: !14804)
!14804 = distinct !DILexicalBlock(scope: !14794, file: !3, line: 5983, column: 7)
!14805 = !DILocation(line: 5983, column: 16, scope: !14804)
!14806 = !DILocation(line: 5983, column: 13, scope: !14804)
!14807 = !DILocation(line: 5983, column: 7, scope: !14794)
!14808 = !DILocation(line: 5984, column: 5, scope: !14804)
!14809 = !DILocation(line: 5985, column: 9, scope: !14810)
!14810 = distinct !DILexicalBlock(scope: !14794, file: !3, line: 5985, column: 7)
!14811 = !DILocation(line: 5985, column: 40, scope: !14810)
!14812 = !DILocation(line: 5985, column: 43, scope: !14810)
!14813 = !DILocation(line: 5985, column: 7, scope: !14794)
!14814 = !DILocation(line: 5986, column: 5, scope: !14810)
!14815 = !DILocation(line: 5988, column: 7, scope: !14816)
!14816 = distinct !DILexicalBlock(scope: !14794, file: !3, line: 5988, column: 7)
!14817 = !DILocation(line: 5988, column: 33, scope: !14816)
!14818 = !DILocation(line: 5988, column: 30, scope: !14816)
!14819 = !DILocation(line: 5988, column: 7, scope: !14794)
!14820 = !DILocation(line: 5989, column: 34, scope: !14816)
!14821 = !DILocation(line: 5989, column: 39, scope: !14816)
!14822 = !DILocation(line: 5989, column: 47, scope: !14816)
!14823 = !DILocation(line: 5989, column: 54, scope: !14816)
!14824 = !DILocation(line: 5989, column: 5, scope: !14816)
!14825 = !DILocation(line: 5991, column: 34, scope: !14816)
!14826 = !DILocation(line: 5991, column: 39, scope: !14816)
!14827 = !DILocation(line: 5991, column: 47, scope: !14816)
!14828 = !DILocation(line: 5991, column: 54, scope: !14816)
!14829 = !DILocation(line: 5991, column: 5, scope: !14816)
!14830 = !DILocation(line: 5992, column: 1, scope: !14794)
!14831 = distinct !DISubprogram(name: "gen_satfract_conv_libfunc", scope: !3, file: !3, line: 6018, type: !14557, scopeLine: 6022, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14832 = !DILocalVariable(name: "tab", arg: 1, scope: !14831, file: !3, line: 6018, type: !3974)
!14833 = !DILocation(line: 6018, column: 42, scope: !14831)
!14834 = !DILocalVariable(name: "opname", arg: 2, scope: !14831, file: !3, line: 6019, type: !2759)
!14835 = !DILocation(line: 6019, column: 19, scope: !14831)
!14836 = !DILocalVariable(name: "tmode", arg: 3, scope: !14831, file: !3, line: 6020, type: !5)
!14837 = !DILocation(line: 6020, column: 25, scope: !14831)
!14838 = !DILocalVariable(name: "fmode", arg: 4, scope: !14831, file: !3, line: 6021, type: !5)
!14839 = !DILocation(line: 6021, column: 25, scope: !14831)
!14840 = !DILocation(line: 6023, column: 7, scope: !14841)
!14841 = distinct !DILexicalBlock(scope: !14831, file: !3, line: 6023, column: 7)
!14842 = !DILocation(line: 6023, column: 16, scope: !14841)
!14843 = !DILocation(line: 6023, column: 13, scope: !14841)
!14844 = !DILocation(line: 6023, column: 7, scope: !14831)
!14845 = !DILocation(line: 6024, column: 5, scope: !14841)
!14846 = !DILocation(line: 6026, column: 8, scope: !14847)
!14847 = distinct !DILexicalBlock(scope: !14831, file: !3, line: 6026, column: 7)
!14848 = !DILocation(line: 6026, column: 7, scope: !14831)
!14849 = !DILocation(line: 6027, column: 5, scope: !14847)
!14850 = !DILocation(line: 6029, column: 7, scope: !14851)
!14851 = distinct !DILexicalBlock(scope: !14831, file: !3, line: 6029, column: 7)
!14852 = !DILocation(line: 6029, column: 33, scope: !14851)
!14853 = !DILocation(line: 6029, column: 30, scope: !14851)
!14854 = !DILocation(line: 6029, column: 7, scope: !14831)
!14855 = !DILocation(line: 6030, column: 34, scope: !14851)
!14856 = !DILocation(line: 6030, column: 39, scope: !14851)
!14857 = !DILocation(line: 6030, column: 47, scope: !14851)
!14858 = !DILocation(line: 6030, column: 54, scope: !14851)
!14859 = !DILocation(line: 6030, column: 5, scope: !14851)
!14860 = !DILocation(line: 6032, column: 34, scope: !14851)
!14861 = !DILocation(line: 6032, column: 39, scope: !14851)
!14862 = !DILocation(line: 6032, column: 47, scope: !14851)
!14863 = !DILocation(line: 6032, column: 54, scope: !14851)
!14864 = !DILocation(line: 6032, column: 5, scope: !14851)
!14865 = !DILocation(line: 6033, column: 1, scope: !14831)
!14866 = distinct !DISubprogram(name: "gen_fractuns_conv_libfunc", scope: !3, file: !3, line: 5997, type: !14557, scopeLine: 6001, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14867 = !DILocalVariable(name: "tab", arg: 1, scope: !14866, file: !3, line: 5997, type: !3974)
!14868 = !DILocation(line: 5997, column: 42, scope: !14866)
!14869 = !DILocalVariable(name: "opname", arg: 2, scope: !14866, file: !3, line: 5998, type: !2759)
!14870 = !DILocation(line: 5998, column: 19, scope: !14866)
!14871 = !DILocalVariable(name: "tmode", arg: 3, scope: !14866, file: !3, line: 5999, type: !5)
!14872 = !DILocation(line: 5999, column: 25, scope: !14866)
!14873 = !DILocalVariable(name: "fmode", arg: 4, scope: !14866, file: !3, line: 6000, type: !5)
!14874 = !DILocation(line: 6000, column: 25, scope: !14866)
!14875 = !DILocation(line: 6002, column: 7, scope: !14876)
!14876 = distinct !DILexicalBlock(scope: !14866, file: !3, line: 6002, column: 7)
!14877 = !DILocation(line: 6002, column: 16, scope: !14876)
!14878 = !DILocation(line: 6002, column: 13, scope: !14876)
!14879 = !DILocation(line: 6002, column: 7, scope: !14866)
!14880 = !DILocation(line: 6003, column: 5, scope: !14876)
!14881 = !DILocation(line: 6006, column: 10, scope: !14882)
!14882 = distinct !DILexicalBlock(scope: !14866, file: !3, line: 6006, column: 7)
!14883 = !DILocation(line: 6006, column: 41, scope: !14882)
!14884 = !DILocation(line: 6006, column: 44, scope: !14882)
!14885 = !DILocation(line: 6006, column: 67, scope: !14882)
!14886 = !DILocation(line: 6007, column: 2, scope: !14882)
!14887 = !DILocation(line: 6007, column: 6, scope: !14882)
!14888 = !DILocation(line: 6008, column: 6, scope: !14882)
!14889 = !DILocation(line: 6008, column: 9, scope: !14882)
!14890 = !DILocation(line: 6008, column: 32, scope: !14882)
!14891 = !DILocation(line: 6006, column: 7, scope: !14866)
!14892 = !DILocation(line: 6009, column: 5, scope: !14882)
!14893 = !DILocation(line: 6011, column: 32, scope: !14866)
!14894 = !DILocation(line: 6011, column: 37, scope: !14866)
!14895 = !DILocation(line: 6011, column: 45, scope: !14866)
!14896 = !DILocation(line: 6011, column: 52, scope: !14866)
!14897 = !DILocation(line: 6011, column: 3, scope: !14866)
!14898 = !DILocation(line: 6012, column: 1, scope: !14866)
!14899 = distinct !DISubprogram(name: "gen_satfractuns_conv_libfunc", scope: !3, file: !3, line: 6038, type: !14557, scopeLine: 6042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14900 = !DILocalVariable(name: "tab", arg: 1, scope: !14899, file: !3, line: 6038, type: !3974)
!14901 = !DILocation(line: 6038, column: 45, scope: !14899)
!14902 = !DILocalVariable(name: "opname", arg: 2, scope: !14899, file: !3, line: 6039, type: !2759)
!14903 = !DILocation(line: 6039, column: 22, scope: !14899)
!14904 = !DILocalVariable(name: "tmode", arg: 3, scope: !14899, file: !3, line: 6040, type: !5)
!14905 = !DILocation(line: 6040, column: 28, scope: !14899)
!14906 = !DILocalVariable(name: "fmode", arg: 4, scope: !14899, file: !3, line: 6041, type: !5)
!14907 = !DILocation(line: 6041, column: 28, scope: !14899)
!14908 = !DILocation(line: 6043, column: 7, scope: !14909)
!14909 = distinct !DILexicalBlock(scope: !14899, file: !3, line: 6043, column: 7)
!14910 = !DILocation(line: 6043, column: 16, scope: !14909)
!14911 = !DILocation(line: 6043, column: 13, scope: !14909)
!14912 = !DILocation(line: 6043, column: 7, scope: !14899)
!14913 = !DILocation(line: 6044, column: 5, scope: !14909)
!14914 = !DILocation(line: 6046, column: 9, scope: !14915)
!14915 = distinct !DILexicalBlock(scope: !14899, file: !3, line: 6046, column: 7)
!14916 = !DILocation(line: 6046, column: 40, scope: !14915)
!14917 = !DILocation(line: 6046, column: 43, scope: !14915)
!14918 = !DILocation(line: 6046, column: 66, scope: !14915)
!14919 = !DILocation(line: 6046, column: 7, scope: !14899)
!14920 = !DILocation(line: 6047, column: 5, scope: !14915)
!14921 = !DILocation(line: 6049, column: 32, scope: !14899)
!14922 = !DILocation(line: 6049, column: 37, scope: !14899)
!14923 = !DILocation(line: 6049, column: 45, scope: !14899)
!14924 = !DILocation(line: 6049, column: 52, scope: !14899)
!14925 = !DILocation(line: 6049, column: 3, scope: !14899)
!14926 = !DILocation(line: 6050, column: 1, scope: !14899)
!14927 = distinct !DISubprogram(name: "debug_optab_libfuncs", scope: !3, file: !3, line: 6698, type: !3891, scopeLine: 6699, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!14928 = !DILocalVariable(name: "i", scope: !14927, file: !3, line: 6700, type: !2756)
!14929 = !DILocation(line: 6700, column: 7, scope: !14927)
!14930 = !DILocalVariable(name: "j", scope: !14927, file: !3, line: 6701, type: !2756)
!14931 = !DILocation(line: 6701, column: 7, scope: !14927)
!14932 = !DILocalVariable(name: "k", scope: !14927, file: !3, line: 6702, type: !2756)
!14933 = !DILocation(line: 6702, column: 7, scope: !14927)
!14934 = !DILocation(line: 6705, column: 10, scope: !14935)
!14935 = distinct !DILexicalBlock(scope: !14927, file: !3, line: 6705, column: 3)
!14936 = !DILocation(line: 6705, column: 8, scope: !14935)
!14937 = !DILocation(line: 6705, column: 15, scope: !14938)
!14938 = distinct !DILexicalBlock(scope: !14935, file: !3, line: 6705, column: 3)
!14939 = !DILocation(line: 6705, column: 17, scope: !14938)
!14940 = !DILocation(line: 6705, column: 3, scope: !14935)
!14941 = !DILocation(line: 6706, column: 12, scope: !14942)
!14942 = distinct !DILexicalBlock(scope: !14938, file: !3, line: 6706, column: 5)
!14943 = !DILocation(line: 6706, column: 10, scope: !14942)
!14944 = !DILocation(line: 6706, column: 17, scope: !14945)
!14945 = distinct !DILexicalBlock(scope: !14942, file: !3, line: 6706, column: 5)
!14946 = !DILocation(line: 6706, column: 19, scope: !14945)
!14947 = !DILocation(line: 6706, column: 5, scope: !14942)
!14948 = !DILocalVariable(name: "o", scope: !14949, file: !3, line: 6708, type: !3938)
!14949 = distinct !DILexicalBlock(scope: !14945, file: !3, line: 6707, column: 7)
!14950 = !DILocation(line: 6708, column: 8, scope: !14949)
!14951 = !DILocalVariable(name: "l", scope: !14949, file: !3, line: 6709, type: !2732)
!14952 = !DILocation(line: 6709, column: 6, scope: !14949)
!14953 = !DILocation(line: 6711, column: 19, scope: !14949)
!14954 = !DILocation(line: 6711, column: 7, scope: !14949)
!14955 = !DILocation(line: 6711, column: 4, scope: !14949)
!14956 = !DILocation(line: 6712, column: 21, scope: !14949)
!14957 = !DILocation(line: 6712, column: 44, scope: !14949)
!14958 = !DILocation(line: 6712, column: 6, scope: !14949)
!14959 = !DILocation(line: 6712, column: 4, scope: !14949)
!14960 = !DILocation(line: 6713, column: 6, scope: !14961)
!14961 = distinct !DILexicalBlock(scope: !14949, file: !3, line: 6713, column: 6)
!14962 = !DILocation(line: 6713, column: 6, scope: !14949)
!14963 = !DILocation(line: 6715, column: 6, scope: !14964)
!14964 = distinct !DILexicalBlock(scope: !14961, file: !3, line: 6714, column: 4)
!14965 = !DILocation(line: 6716, column: 15, scope: !14964)
!14966 = !DILocation(line: 6717, column: 8, scope: !14964)
!14967 = !DILocation(line: 6718, column: 8, scope: !14964)
!14968 = !DILocation(line: 6719, column: 8, scope: !14964)
!14969 = !DILocation(line: 6716, column: 6, scope: !14964)
!14970 = !DILocation(line: 6720, column: 4, scope: !14964)
!14971 = !DILocation(line: 6721, column: 7, scope: !14949)
!14972 = !DILocation(line: 6706, column: 40, scope: !14945)
!14973 = !DILocation(line: 6706, column: 5, scope: !14945)
!14974 = distinct !{!14974, !14947, !14975}
!14975 = !DILocation(line: 6721, column: 7, scope: !14942)
!14976 = !DILocation(line: 6705, column: 36, scope: !14938)
!14977 = !DILocation(line: 6705, column: 3, scope: !14938)
!14978 = distinct !{!14978, !14940, !14979}
!14979 = !DILocation(line: 6721, column: 7, scope: !14935)
!14980 = !DILocation(line: 6724, column: 10, scope: !14981)
!14981 = distinct !DILexicalBlock(scope: !14927, file: !3, line: 6724, column: 3)
!14982 = !DILocation(line: 6724, column: 8, scope: !14981)
!14983 = !DILocation(line: 6724, column: 15, scope: !14984)
!14984 = distinct !DILexicalBlock(scope: !14981, file: !3, line: 6724, column: 3)
!14985 = !DILocation(line: 6724, column: 17, scope: !14984)
!14986 = !DILocation(line: 6724, column: 3, scope: !14981)
!14987 = !DILocation(line: 6725, column: 12, scope: !14988)
!14988 = distinct !DILexicalBlock(scope: !14984, file: !3, line: 6725, column: 5)
!14989 = !DILocation(line: 6725, column: 10, scope: !14988)
!14990 = !DILocation(line: 6725, column: 17, scope: !14991)
!14991 = distinct !DILexicalBlock(scope: !14988, file: !3, line: 6725, column: 5)
!14992 = !DILocation(line: 6725, column: 19, scope: !14991)
!14993 = !DILocation(line: 6725, column: 5, scope: !14988)
!14994 = !DILocation(line: 6726, column: 14, scope: !14995)
!14995 = distinct !DILexicalBlock(scope: !14991, file: !3, line: 6726, column: 7)
!14996 = !DILocation(line: 6726, column: 12, scope: !14995)
!14997 = !DILocation(line: 6726, column: 19, scope: !14998)
!14998 = distinct !DILexicalBlock(scope: !14995, file: !3, line: 6726, column: 7)
!14999 = !DILocation(line: 6726, column: 21, scope: !14998)
!15000 = !DILocation(line: 6726, column: 7, scope: !14995)
!15001 = !DILocalVariable(name: "o", scope: !15002, file: !3, line: 6728, type: !3974)
!15002 = distinct !DILexicalBlock(scope: !14998, file: !3, line: 6727, column: 2)
!15003 = !DILocation(line: 6728, column: 18, scope: !15002)
!15004 = !DILocalVariable(name: "l", scope: !15002, file: !3, line: 6729, type: !2732)
!15005 = !DILocation(line: 6729, column: 8, scope: !15002)
!15006 = !DILocation(line: 6731, column: 29, scope: !15002)
!15007 = !DILocation(line: 6731, column: 9, scope: !15002)
!15008 = !DILocation(line: 6731, column: 6, scope: !15002)
!15009 = !DILocation(line: 6732, column: 31, scope: !15002)
!15010 = !DILocation(line: 6732, column: 54, scope: !15002)
!15011 = !DILocation(line: 6733, column: 30, scope: !15002)
!15012 = !DILocation(line: 6732, column: 8, scope: !15002)
!15013 = !DILocation(line: 6732, column: 6, scope: !15002)
!15014 = !DILocation(line: 6734, column: 8, scope: !15015)
!15015 = distinct !DILexicalBlock(scope: !15002, file: !3, line: 6734, column: 8)
!15016 = !DILocation(line: 6734, column: 8, scope: !15002)
!15017 = !DILocation(line: 6736, column: 8, scope: !15018)
!15018 = distinct !DILexicalBlock(scope: !15015, file: !3, line: 6735, column: 6)
!15019 = !DILocation(line: 6737, column: 17, scope: !15018)
!15020 = !DILocation(line: 6738, column: 10, scope: !15018)
!15021 = !DILocation(line: 6739, column: 10, scope: !15018)
!15022 = !DILocation(line: 6740, column: 10, scope: !15018)
!15023 = !DILocation(line: 6741, column: 10, scope: !15018)
!15024 = !DILocation(line: 6737, column: 8, scope: !15018)
!15025 = !DILocation(line: 6742, column: 6, scope: !15018)
!15026 = !DILocation(line: 6743, column: 2, scope: !15002)
!15027 = !DILocation(line: 6726, column: 42, scope: !14998)
!15028 = !DILocation(line: 6726, column: 7, scope: !14998)
!15029 = distinct !{!15029, !15000, !15030}
!15030 = !DILocation(line: 6743, column: 2, scope: !14995)
!15031 = !DILocation(line: 6725, column: 40, scope: !14991)
!15032 = !DILocation(line: 6725, column: 5, scope: !14991)
!15033 = distinct !{!15033, !14993, !15034}
!15034 = !DILocation(line: 6743, column: 2, scope: !14988)
!15035 = !DILocation(line: 6724, column: 34, scope: !14984)
!15036 = !DILocation(line: 6724, column: 3, scope: !14984)
!15037 = distinct !{!15037, !14986, !15038}
!15038 = !DILocation(line: 6743, column: 2, scope: !14981)
!15039 = !DILocation(line: 6744, column: 1, scope: !14927)
!15040 = distinct !DISubprogram(name: "gen_cond_trap", scope: !3, file: !3, line: 6751, type: !15041, scopeLine: 6752, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15041 = !DISubroutineType(types: !15042)
!15042 = !{!2732, !384, !2732, !2732, !2732}
!15043 = !DILocalVariable(name: "code", arg: 1, scope: !15040, file: !3, line: 6751, type: !384)
!15044 = !DILocation(line: 6751, column: 30, scope: !15040)
!15045 = !DILocalVariable(name: "op1", arg: 2, scope: !15040, file: !3, line: 6751, type: !2732)
!15046 = !DILocation(line: 6751, column: 40, scope: !15040)
!15047 = !DILocalVariable(name: "op2", arg: 3, scope: !15040, file: !3, line: 6751, type: !2732)
!15048 = !DILocation(line: 6751, column: 49, scope: !15040)
!15049 = !DILocalVariable(name: "tcode", arg: 4, scope: !15040, file: !3, line: 6751, type: !2732)
!15050 = !DILocation(line: 6751, column: 58, scope: !15040)
!15051 = !DILocalVariable(name: "mode", scope: !15040, file: !3, line: 6753, type: !5)
!15052 = !DILocation(line: 6753, column: 21, scope: !15040)
!15053 = !DILocation(line: 6753, column: 28, scope: !15040)
!15054 = !DILocalVariable(name: "icode", scope: !15040, file: !3, line: 6754, type: !527)
!15055 = !DILocation(line: 6754, column: 18, scope: !15040)
!15056 = !DILocalVariable(name: "insn", scope: !15040, file: !3, line: 6755, type: !2732)
!15057 = !DILocation(line: 6755, column: 7, scope: !15040)
!15058 = !DILocalVariable(name: "trap_rtx", scope: !15040, file: !3, line: 6756, type: !2732)
!15059 = !DILocation(line: 6756, column: 7, scope: !15040)
!15060 = !DILocation(line: 6758, column: 7, scope: !15061)
!15061 = distinct !DILexicalBlock(scope: !15040, file: !3, line: 6758, column: 7)
!15062 = !DILocation(line: 6758, column: 12, scope: !15061)
!15063 = !DILocation(line: 6758, column: 7, scope: !15040)
!15064 = !DILocation(line: 6759, column: 5, scope: !15061)
!15065 = !DILocation(line: 6761, column: 11, scope: !15040)
!15066 = !DILocation(line: 6761, column: 46, scope: !15040)
!15067 = !DILocation(line: 6761, column: 9, scope: !15040)
!15068 = !DILocation(line: 6762, column: 7, scope: !15069)
!15069 = distinct !DILexicalBlock(scope: !15040, file: !3, line: 6762, column: 7)
!15070 = !DILocation(line: 6762, column: 13, scope: !15069)
!15071 = !DILocation(line: 6762, column: 7, scope: !15040)
!15072 = !DILocation(line: 6763, column: 5, scope: !15069)
!15073 = !DILocation(line: 6766, column: 17, scope: !15074)
!15074 = distinct !DILexicalBlock(scope: !15040, file: !3, line: 6766, column: 7)
!15075 = !DILocation(line: 6766, column: 7, scope: !15074)
!15076 = !DILocation(line: 6766, column: 24, scope: !15074)
!15077 = !DILocation(line: 6766, column: 35, scope: !15074)
!15078 = !DILocation(line: 6767, column: 7, scope: !15074)
!15079 = !DILocation(line: 6767, column: 21, scope: !15074)
!15080 = !DILocation(line: 6767, column: 11, scope: !15074)
!15081 = !DILocation(line: 6767, column: 28, scope: !15074)
!15082 = !DILocation(line: 6767, column: 39, scope: !15074)
!15083 = !DILocation(line: 6767, column: 50, scope: !15074)
!15084 = !DILocation(line: 6766, column: 7, scope: !15040)
!15085 = !DILocation(line: 6768, column: 5, scope: !15074)
!15086 = !DILocation(line: 6770, column: 3, scope: !15040)
!15087 = !DILocation(line: 6771, column: 3, scope: !15040)
!15088 = !DILocation(line: 6772, column: 21, scope: !15040)
!15089 = !DILocation(line: 6772, column: 26, scope: !15040)
!15090 = !DILocation(line: 6772, column: 31, scope: !15040)
!15091 = !DILocation(line: 6772, column: 3, scope: !15040)
!15092 = !DILocation(line: 6774, column: 8, scope: !15093)
!15093 = distinct !DILexicalBlock(scope: !15040, file: !3, line: 6774, column: 7)
!15094 = !DILocation(line: 6774, column: 7, scope: !15040)
!15095 = !DILocation(line: 6775, column: 10, scope: !15093)
!15096 = !DILocation(line: 6775, column: 5, scope: !15093)
!15097 = !DILocation(line: 6777, column: 12, scope: !15093)
!15098 = !DILocation(line: 6777, column: 29, scope: !15093)
!15099 = !DILocation(line: 6777, column: 39, scope: !15093)
!15100 = !DILocation(line: 6777, column: 59, scope: !15093)
!15101 = !DILocation(line: 6778, column: 8, scope: !15093)
!15102 = !DILocation(line: 6777, column: 10, scope: !15093)
!15103 = !DILocation(line: 6781, column: 7, scope: !15104)
!15104 = distinct !DILexicalBlock(scope: !15040, file: !3, line: 6781, column: 7)
!15105 = !DILocation(line: 6781, column: 12, scope: !15104)
!15106 = !DILocation(line: 6781, column: 7, scope: !15040)
!15107 = !DILocation(line: 6783, column: 7, scope: !15108)
!15108 = distinct !DILexicalBlock(scope: !15104, file: !3, line: 6782, column: 5)
!15109 = !DILocation(line: 6784, column: 7, scope: !15108)
!15110 = !DILocation(line: 6787, column: 14, scope: !15040)
!15111 = !DILocation(line: 6787, column: 3, scope: !15040)
!15112 = !DILocation(line: 6788, column: 10, scope: !15040)
!15113 = !DILocation(line: 6788, column: 8, scope: !15040)
!15114 = !DILocation(line: 6789, column: 3, scope: !15040)
!15115 = !DILocation(line: 6790, column: 10, scope: !15040)
!15116 = !DILocation(line: 6790, column: 3, scope: !15040)
!15117 = !DILocation(line: 6791, column: 1, scope: !15040)
!15118 = distinct !DISubprogram(name: "expand_vec_cond_expr_p", scope: !3, file: !3, line: 6905, type: !15119, scopeLine: 6906, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15119 = !DISubroutineType(types: !15120)
!15120 = !{!2966, !2853, !5}
!15121 = !DILocalVariable(name: "type", arg: 1, scope: !15118, file: !3, line: 6905, type: !2853)
!15122 = !DILocation(line: 6905, column: 30, scope: !15118)
!15123 = !DILocalVariable(name: "vmode", arg: 2, scope: !15118, file: !3, line: 6905, type: !5)
!15124 = !DILocation(line: 6905, column: 54, scope: !15118)
!15125 = !DILocation(line: 6907, column: 24, scope: !15126)
!15126 = distinct !DILexicalBlock(scope: !15118, file: !3, line: 6907, column: 7)
!15127 = !DILocation(line: 6907, column: 30, scope: !15126)
!15128 = !DILocation(line: 6907, column: 7, scope: !15126)
!15129 = !DILocation(line: 6907, column: 37, scope: !15126)
!15130 = !DILocation(line: 6907, column: 7, scope: !15118)
!15131 = !DILocation(line: 6908, column: 5, scope: !15126)
!15132 = !DILocation(line: 6909, column: 3, scope: !15118)
!15133 = !DILocation(line: 6910, column: 1, scope: !15118)
!15134 = distinct !DISubprogram(name: "get_vcond_icode", scope: !3, file: !3, line: 6890, type: !15135, scopeLine: 6891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15135 = !DISubroutineType(types: !15136)
!15136 = !{!527, !2853, !5}
!15137 = !DILocalVariable(name: "type", arg: 1, scope: !15134, file: !3, line: 6890, type: !2853)
!15138 = !DILocation(line: 6890, column: 23, scope: !15134)
!15139 = !DILocalVariable(name: "mode", arg: 2, scope: !15134, file: !3, line: 6890, type: !5)
!15140 = !DILocation(line: 6890, column: 47, scope: !15134)
!15141 = !DILocalVariable(name: "icode", scope: !15134, file: !3, line: 6892, type: !527)
!15142 = !DILocation(line: 6892, column: 18, scope: !15134)
!15143 = !DILocation(line: 6894, column: 7, scope: !15144)
!15144 = distinct !DILexicalBlock(scope: !15134, file: !3, line: 6894, column: 7)
!15145 = !DILocation(line: 6894, column: 7, scope: !15134)
!15146 = !DILocation(line: 6895, column: 29, scope: !15144)
!15147 = !DILocation(line: 6895, column: 13, scope: !15144)
!15148 = !DILocation(line: 6895, column: 11, scope: !15144)
!15149 = !DILocation(line: 6895, column: 5, scope: !15144)
!15150 = !DILocation(line: 6897, column: 28, scope: !15144)
!15151 = !DILocation(line: 6897, column: 13, scope: !15144)
!15152 = !DILocation(line: 6897, column: 11, scope: !15144)
!15153 = !DILocation(line: 6898, column: 10, scope: !15134)
!15154 = !DILocation(line: 6898, column: 3, scope: !15134)
!15155 = distinct !DISubprogram(name: "expand_vec_cond_expr", scope: !3, file: !3, line: 6916, type: !15156, scopeLine: 6918, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15156 = !DISubroutineType(types: !15157)
!15157 = !{!2732, !2853, !2853, !2853, !2853, !2732}
!15158 = !DILocalVariable(name: "vec_cond_type", arg: 1, scope: !15155, file: !3, line: 6916, type: !2853)
!15159 = !DILocation(line: 6916, column: 28, scope: !15155)
!15160 = !DILocalVariable(name: "op0", arg: 2, scope: !15155, file: !3, line: 6916, type: !2853)
!15161 = !DILocation(line: 6916, column: 48, scope: !15155)
!15162 = !DILocalVariable(name: "op1", arg: 3, scope: !15155, file: !3, line: 6916, type: !2853)
!15163 = !DILocation(line: 6916, column: 58, scope: !15155)
!15164 = !DILocalVariable(name: "op2", arg: 4, scope: !15155, file: !3, line: 6916, type: !2853)
!15165 = !DILocation(line: 6916, column: 68, scope: !15155)
!15166 = !DILocalVariable(name: "target", arg: 5, scope: !15155, file: !3, line: 6917, type: !2732)
!15167 = !DILocation(line: 6917, column: 13, scope: !15155)
!15168 = !DILocalVariable(name: "icode", scope: !15155, file: !3, line: 6919, type: !527)
!15169 = !DILocation(line: 6919, column: 18, scope: !15155)
!15170 = !DILocalVariable(name: "comparison", scope: !15155, file: !3, line: 6920, type: !2732)
!15171 = !DILocation(line: 6920, column: 7, scope: !15155)
!15172 = !DILocalVariable(name: "rtx_op1", scope: !15155, file: !3, line: 6920, type: !2732)
!15173 = !DILocation(line: 6920, column: 19, scope: !15155)
!15174 = !DILocalVariable(name: "rtx_op2", scope: !15155, file: !3, line: 6920, type: !2732)
!15175 = !DILocation(line: 6920, column: 28, scope: !15155)
!15176 = !DILocalVariable(name: "cc_op0", scope: !15155, file: !3, line: 6920, type: !2732)
!15177 = !DILocation(line: 6920, column: 37, scope: !15155)
!15178 = !DILocalVariable(name: "cc_op1", scope: !15155, file: !3, line: 6920, type: !2732)
!15179 = !DILocation(line: 6920, column: 45, scope: !15155)
!15180 = !DILocalVariable(name: "mode", scope: !15155, file: !3, line: 6921, type: !5)
!15181 = !DILocation(line: 6921, column: 21, scope: !15155)
!15182 = !DILocation(line: 6921, column: 28, scope: !15155)
!15183 = !DILocalVariable(name: "unsignedp", scope: !15155, file: !3, line: 6922, type: !2966)
!15184 = !DILocation(line: 6922, column: 8, scope: !15155)
!15185 = !DILocation(line: 6922, column: 20, scope: !15155)
!15186 = !DILocation(line: 6924, column: 28, scope: !15155)
!15187 = !DILocation(line: 6924, column: 43, scope: !15155)
!15188 = !DILocation(line: 6924, column: 11, scope: !15155)
!15189 = !DILocation(line: 6924, column: 9, scope: !15155)
!15190 = !DILocation(line: 6925, column: 7, scope: !15191)
!15191 = distinct !DILexicalBlock(scope: !15155, file: !3, line: 6925, column: 7)
!15192 = !DILocation(line: 6925, column: 13, scope: !15191)
!15193 = !DILocation(line: 6925, column: 7, scope: !15155)
!15194 = !DILocation(line: 6926, column: 5, scope: !15191)
!15195 = !DILocation(line: 6928, column: 8, scope: !15196)
!15196 = distinct !DILexicalBlock(scope: !15155, file: !3, line: 6928, column: 7)
!15197 = !DILocation(line: 6928, column: 15, scope: !15196)
!15198 = !DILocation(line: 6928, column: 29, scope: !15196)
!15199 = !DILocation(line: 6928, column: 19, scope: !15196)
!15200 = !DILocation(line: 6928, column: 36, scope: !15196)
!15201 = !DILocation(line: 6928, column: 47, scope: !15196)
!15202 = !DILocation(line: 6928, column: 58, scope: !15196)
!15203 = !DILocation(line: 6928, column: 66, scope: !15196)
!15204 = !DILocation(line: 6928, column: 7, scope: !15155)
!15205 = !DILocation(line: 6929, column: 27, scope: !15196)
!15206 = !DILocation(line: 6929, column: 14, scope: !15196)
!15207 = !DILocation(line: 6929, column: 12, scope: !15196)
!15208 = !DILocation(line: 6929, column: 5, scope: !15196)
!15209 = !DILocation(line: 6932, column: 36, scope: !15155)
!15210 = !DILocation(line: 6933, column: 8, scope: !15155)
!15211 = !DILocation(line: 6933, column: 19, scope: !15155)
!15212 = !DILocation(line: 6932, column: 16, scope: !15155)
!15213 = !DILocation(line: 6932, column: 14, scope: !15155)
!15214 = !DILocation(line: 6934, column: 12, scope: !15155)
!15215 = !DILocation(line: 6934, column: 10, scope: !15155)
!15216 = !DILocation(line: 6935, column: 12, scope: !15155)
!15217 = !DILocation(line: 6935, column: 10, scope: !15155)
!15218 = !DILocation(line: 6937, column: 28, scope: !15155)
!15219 = !DILocation(line: 6937, column: 13, scope: !15155)
!15220 = !DILocation(line: 6937, column: 11, scope: !15155)
!15221 = !DILocation(line: 6938, column: 18, scope: !15222)
!15222 = distinct !DILexicalBlock(scope: !15155, file: !3, line: 6938, column: 7)
!15223 = !DILocation(line: 6938, column: 8, scope: !15222)
!15224 = !DILocation(line: 6938, column: 25, scope: !15222)
!15225 = !DILocation(line: 6938, column: 36, scope: !15222)
!15226 = !DILocation(line: 6938, column: 47, scope: !15222)
!15227 = !DILocation(line: 6938, column: 56, scope: !15222)
!15228 = !DILocation(line: 6939, column: 7, scope: !15222)
!15229 = !DILocation(line: 6939, column: 10, scope: !15222)
!15230 = !DILocation(line: 6939, column: 15, scope: !15222)
!15231 = !DILocation(line: 6938, column: 7, scope: !15155)
!15232 = !DILocation(line: 6940, column: 26, scope: !15222)
!15233 = !DILocation(line: 6940, column: 32, scope: !15222)
!15234 = !DILocation(line: 6940, column: 15, scope: !15222)
!15235 = !DILocation(line: 6940, column: 13, scope: !15222)
!15236 = !DILocation(line: 6940, column: 5, scope: !15222)
!15237 = !DILocation(line: 6942, column: 28, scope: !15155)
!15238 = !DILocation(line: 6942, column: 13, scope: !15155)
!15239 = !DILocation(line: 6942, column: 11, scope: !15155)
!15240 = !DILocation(line: 6943, column: 18, scope: !15241)
!15241 = distinct !DILexicalBlock(scope: !15155, file: !3, line: 6943, column: 7)
!15242 = !DILocation(line: 6943, column: 8, scope: !15241)
!15243 = !DILocation(line: 6943, column: 25, scope: !15241)
!15244 = !DILocation(line: 6943, column: 36, scope: !15241)
!15245 = !DILocation(line: 6943, column: 47, scope: !15241)
!15246 = !DILocation(line: 6943, column: 56, scope: !15241)
!15247 = !DILocation(line: 6944, column: 7, scope: !15241)
!15248 = !DILocation(line: 6944, column: 10, scope: !15241)
!15249 = !DILocation(line: 6944, column: 15, scope: !15241)
!15250 = !DILocation(line: 6943, column: 7, scope: !15155)
!15251 = !DILocation(line: 6945, column: 26, scope: !15241)
!15252 = !DILocation(line: 6945, column: 32, scope: !15241)
!15253 = !DILocation(line: 6945, column: 15, scope: !15241)
!15254 = !DILocation(line: 6945, column: 13, scope: !15241)
!15255 = !DILocation(line: 6945, column: 5, scope: !15241)
!15256 = !DILocation(line: 6948, column: 14, scope: !15155)
!15257 = !DILocation(line: 6948, column: 31, scope: !15155)
!15258 = !DILocation(line: 6948, column: 39, scope: !15155)
!15259 = !DILocation(line: 6948, column: 48, scope: !15155)
!15260 = !DILocation(line: 6949, column: 10, scope: !15155)
!15261 = !DILocation(line: 6949, column: 22, scope: !15155)
!15262 = !DILocation(line: 6949, column: 31, scope: !15155)
!15263 = !DILocation(line: 6948, column: 3, scope: !15155)
!15264 = !DILocation(line: 6951, column: 10, scope: !15155)
!15265 = !DILocation(line: 6951, column: 3, scope: !15155)
!15266 = !DILocation(line: 6952, column: 1, scope: !15155)
!15267 = distinct !DISubprogram(name: "vector_compare_rtx", scope: !3, file: !3, line: 6856, type: !15268, scopeLine: 6857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15268 = !DISubroutineType(types: !15269)
!15269 = !{!2732, !2853, !2966, !527}
!15270 = !DILocalVariable(name: "cond", arg: 1, scope: !15267, file: !3, line: 6856, type: !2853)
!15271 = !DILocation(line: 6856, column: 26, scope: !15267)
!15272 = !DILocalVariable(name: "unsignedp", arg: 2, scope: !15267, file: !3, line: 6856, type: !2966)
!15273 = !DILocation(line: 6856, column: 37, scope: !15267)
!15274 = !DILocalVariable(name: "icode", arg: 3, scope: !15267, file: !3, line: 6856, type: !527)
!15275 = !DILocation(line: 6856, column: 63, scope: !15267)
!15276 = !DILocalVariable(name: "rcode", scope: !15267, file: !3, line: 6858, type: !384)
!15277 = !DILocation(line: 6858, column: 17, scope: !15267)
!15278 = !DILocalVariable(name: "t_op0", scope: !15267, file: !3, line: 6859, type: !2853)
!15279 = !DILocation(line: 6859, column: 8, scope: !15267)
!15280 = !DILocalVariable(name: "t_op1", scope: !15267, file: !3, line: 6859, type: !2853)
!15281 = !DILocation(line: 6859, column: 15, scope: !15267)
!15282 = !DILocalVariable(name: "rtx_op0", scope: !15267, file: !3, line: 6860, type: !2732)
!15283 = !DILocation(line: 6860, column: 7, scope: !15267)
!15284 = !DILocalVariable(name: "rtx_op1", scope: !15267, file: !3, line: 6860, type: !2732)
!15285 = !DILocation(line: 6860, column: 16, scope: !15267)
!15286 = !DILocation(line: 6864, column: 3, scope: !15267)
!15287 = !DILocation(line: 6866, column: 25, scope: !15267)
!15288 = !DILocation(line: 6866, column: 43, scope: !15267)
!15289 = !DILocation(line: 6866, column: 11, scope: !15267)
!15290 = !DILocation(line: 6866, column: 9, scope: !15267)
!15291 = !DILocation(line: 6867, column: 11, scope: !15267)
!15292 = !DILocation(line: 6867, column: 9, scope: !15267)
!15293 = !DILocation(line: 6868, column: 11, scope: !15267)
!15294 = !DILocation(line: 6868, column: 9, scope: !15267)
!15295 = !DILocation(line: 6871, column: 26, scope: !15267)
!15296 = !DILocation(line: 6871, column: 43, scope: !15267)
!15297 = !DILocation(line: 6871, column: 13, scope: !15267)
!15298 = !DILocation(line: 6871, column: 11, scope: !15267)
!15299 = !DILocation(line: 6873, column: 26, scope: !15267)
!15300 = !DILocation(line: 6873, column: 43, scope: !15267)
!15301 = !DILocation(line: 6873, column: 13, scope: !15267)
!15302 = !DILocation(line: 6873, column: 11, scope: !15267)
!15303 = !DILocation(line: 6876, column: 18, scope: !15304)
!15304 = distinct !DILexicalBlock(scope: !15267, file: !3, line: 6876, column: 7)
!15305 = !DILocation(line: 6876, column: 8, scope: !15304)
!15306 = !DILocation(line: 6876, column: 25, scope: !15304)
!15307 = !DILocation(line: 6876, column: 36, scope: !15304)
!15308 = !DILocation(line: 6876, column: 47, scope: !15304)
!15309 = !DILocation(line: 6876, column: 56, scope: !15304)
!15310 = !DILocation(line: 6877, column: 7, scope: !15304)
!15311 = !DILocation(line: 6877, column: 10, scope: !15304)
!15312 = !DILocation(line: 6877, column: 29, scope: !15304)
!15313 = !DILocation(line: 6876, column: 7, scope: !15267)
!15314 = !DILocation(line: 6878, column: 26, scope: !15304)
!15315 = !DILocation(line: 6878, column: 46, scope: !15304)
!15316 = !DILocation(line: 6878, column: 15, scope: !15304)
!15317 = !DILocation(line: 6878, column: 13, scope: !15304)
!15318 = !DILocation(line: 6878, column: 5, scope: !15304)
!15319 = !DILocation(line: 6880, column: 18, scope: !15320)
!15320 = distinct !DILexicalBlock(scope: !15267, file: !3, line: 6880, column: 7)
!15321 = !DILocation(line: 6880, column: 8, scope: !15320)
!15322 = !DILocation(line: 6880, column: 25, scope: !15320)
!15323 = !DILocation(line: 6880, column: 36, scope: !15320)
!15324 = !DILocation(line: 6880, column: 47, scope: !15320)
!15325 = !DILocation(line: 6880, column: 56, scope: !15320)
!15326 = !DILocation(line: 6881, column: 7, scope: !15320)
!15327 = !DILocation(line: 6881, column: 10, scope: !15320)
!15328 = !DILocation(line: 6881, column: 29, scope: !15320)
!15329 = !DILocation(line: 6880, column: 7, scope: !15267)
!15330 = !DILocation(line: 6882, column: 26, scope: !15320)
!15331 = !DILocation(line: 6882, column: 46, scope: !15320)
!15332 = !DILocation(line: 6882, column: 15, scope: !15320)
!15333 = !DILocation(line: 6882, column: 13, scope: !15320)
!15334 = !DILocation(line: 6882, column: 5, scope: !15320)
!15335 = !DILocation(line: 6884, column: 10, scope: !15267)
!15336 = !DILocation(line: 6884, column: 3, scope: !15267)
!15337 = distinct !DISubprogram(name: "expand_val_compare_and_swap", scope: !3, file: !3, line: 6992, type: !15338, scopeLine: 6993, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15338 = !DISubroutineType(types: !15339)
!15339 = !{!2732, !2732, !2732, !2732, !2732}
!15340 = !DILocalVariable(name: "mem", arg: 1, scope: !15337, file: !3, line: 6992, type: !2732)
!15341 = !DILocation(line: 6992, column: 34, scope: !15337)
!15342 = !DILocalVariable(name: "old_val", arg: 2, scope: !15337, file: !3, line: 6992, type: !2732)
!15343 = !DILocation(line: 6992, column: 43, scope: !15337)
!15344 = !DILocalVariable(name: "new_val", arg: 3, scope: !15337, file: !3, line: 6992, type: !2732)
!15345 = !DILocation(line: 6992, column: 56, scope: !15337)
!15346 = !DILocalVariable(name: "target", arg: 4, scope: !15337, file: !3, line: 6992, type: !2732)
!15347 = !DILocation(line: 6992, column: 69, scope: !15337)
!15348 = !DILocalVariable(name: "mode", scope: !15337, file: !3, line: 6994, type: !5)
!15349 = !DILocation(line: 6994, column: 21, scope: !15337)
!15350 = !DILocation(line: 6994, column: 28, scope: !15337)
!15351 = !DILocalVariable(name: "icode", scope: !15337, file: !3, line: 6995, type: !527)
!15352 = !DILocation(line: 6995, column: 18, scope: !15337)
!15353 = !DILocation(line: 6995, column: 48, scope: !15337)
!15354 = !DILocation(line: 6995, column: 26, scope: !15337)
!15355 = !DILocation(line: 6997, column: 7, scope: !15356)
!15356 = distinct !DILexicalBlock(scope: !15337, file: !3, line: 6997, column: 7)
!15357 = !DILocation(line: 6997, column: 13, scope: !15356)
!15358 = !DILocation(line: 6997, column: 7, scope: !15337)
!15359 = !DILocation(line: 6998, column: 5, scope: !15356)
!15360 = !DILocation(line: 7000, column: 41, scope: !15337)
!15361 = !DILocation(line: 7000, column: 46, scope: !15337)
!15362 = !DILocation(line: 7000, column: 55, scope: !15337)
!15363 = !DILocation(line: 7000, column: 64, scope: !15337)
!15364 = !DILocation(line: 7000, column: 72, scope: !15337)
!15365 = !DILocation(line: 7000, column: 10, scope: !15337)
!15366 = !DILocation(line: 7000, column: 3, scope: !15337)
!15367 = !DILocation(line: 7001, column: 1, scope: !15337)
!15368 = distinct !DISubprogram(name: "expand_val_compare_and_swap_1", scope: !3, file: !3, line: 6962, type: !15369, scopeLine: 6964, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15369 = !DISubroutineType(types: !15370)
!15370 = !{!2732, !2732, !2732, !2732, !2732, !527}
!15371 = !DILocalVariable(name: "mem", arg: 1, scope: !15368, file: !3, line: 6962, type: !2732)
!15372 = !DILocation(line: 6962, column: 36, scope: !15368)
!15373 = !DILocalVariable(name: "old_val", arg: 2, scope: !15368, file: !3, line: 6962, type: !2732)
!15374 = !DILocation(line: 6962, column: 45, scope: !15368)
!15375 = !DILocalVariable(name: "new_val", arg: 3, scope: !15368, file: !3, line: 6962, type: !2732)
!15376 = !DILocation(line: 6962, column: 58, scope: !15368)
!15377 = !DILocalVariable(name: "target", arg: 4, scope: !15368, file: !3, line: 6963, type: !2732)
!15378 = !DILocation(line: 6963, column: 15, scope: !15368)
!15379 = !DILocalVariable(name: "icode", arg: 5, scope: !15368, file: !3, line: 6963, type: !527)
!15380 = !DILocation(line: 6963, column: 38, scope: !15368)
!15381 = !DILocalVariable(name: "mode", scope: !15368, file: !3, line: 6965, type: !5)
!15382 = !DILocation(line: 6965, column: 21, scope: !15368)
!15383 = !DILocation(line: 6965, column: 28, scope: !15368)
!15384 = !DILocalVariable(name: "insn", scope: !15368, file: !3, line: 6966, type: !2732)
!15385 = !DILocation(line: 6966, column: 7, scope: !15368)
!15386 = !DILocation(line: 6968, column: 8, scope: !15387)
!15387 = distinct !DILexicalBlock(scope: !15368, file: !3, line: 6968, column: 7)
!15388 = !DILocation(line: 6968, column: 15, scope: !15387)
!15389 = !DILocation(line: 6968, column: 29, scope: !15387)
!15390 = !DILocation(line: 6968, column: 19, scope: !15387)
!15391 = !DILocation(line: 6968, column: 36, scope: !15387)
!15392 = !DILocation(line: 6968, column: 47, scope: !15387)
!15393 = !DILocation(line: 6968, column: 58, scope: !15387)
!15394 = !DILocation(line: 6968, column: 66, scope: !15387)
!15395 = !DILocation(line: 6968, column: 7, scope: !15368)
!15396 = !DILocation(line: 6969, column: 27, scope: !15387)
!15397 = !DILocation(line: 6969, column: 14, scope: !15387)
!15398 = !DILocation(line: 6969, column: 12, scope: !15387)
!15399 = !DILocation(line: 6969, column: 5, scope: !15387)
!15400 = !DILocation(line: 6971, column: 7, scope: !15401)
!15401 = distinct !DILexicalBlock(scope: !15368, file: !3, line: 6971, column: 7)
!15402 = !DILocation(line: 6971, column: 26, scope: !15401)
!15403 = !DILocation(line: 6971, column: 38, scope: !15401)
!15404 = !DILocation(line: 6971, column: 41, scope: !15401)
!15405 = !DILocation(line: 6971, column: 63, scope: !15401)
!15406 = !DILocation(line: 6971, column: 60, scope: !15401)
!15407 = !DILocation(line: 6971, column: 7, scope: !15368)
!15408 = !DILocation(line: 6972, column: 30, scope: !15401)
!15409 = !DILocation(line: 6972, column: 36, scope: !15401)
!15410 = !DILocation(line: 6972, column: 56, scope: !15401)
!15411 = !DILocation(line: 6972, column: 15, scope: !15401)
!15412 = !DILocation(line: 6972, column: 13, scope: !15401)
!15413 = !DILocation(line: 6972, column: 5, scope: !15401)
!15414 = !DILocation(line: 6973, column: 18, scope: !15415)
!15415 = distinct !DILexicalBlock(scope: !15368, file: !3, line: 6973, column: 7)
!15416 = !DILocation(line: 6973, column: 8, scope: !15415)
!15417 = !DILocation(line: 6973, column: 25, scope: !15415)
!15418 = !DILocation(line: 6973, column: 36, scope: !15415)
!15419 = !DILocation(line: 6973, column: 47, scope: !15415)
!15420 = !DILocation(line: 6973, column: 56, scope: !15415)
!15421 = !DILocation(line: 6973, column: 7, scope: !15368)
!15422 = !DILocation(line: 6974, column: 26, scope: !15415)
!15423 = !DILocation(line: 6974, column: 32, scope: !15415)
!15424 = !DILocation(line: 6974, column: 15, scope: !15415)
!15425 = !DILocation(line: 6974, column: 13, scope: !15415)
!15426 = !DILocation(line: 6974, column: 5, scope: !15415)
!15427 = !DILocation(line: 6976, column: 7, scope: !15428)
!15428 = distinct !DILexicalBlock(scope: !15368, file: !3, line: 6976, column: 7)
!15429 = !DILocation(line: 6976, column: 26, scope: !15428)
!15430 = !DILocation(line: 6976, column: 38, scope: !15428)
!15431 = !DILocation(line: 6976, column: 41, scope: !15428)
!15432 = !DILocation(line: 6976, column: 63, scope: !15428)
!15433 = !DILocation(line: 6976, column: 60, scope: !15428)
!15434 = !DILocation(line: 6976, column: 7, scope: !15368)
!15435 = !DILocation(line: 6977, column: 30, scope: !15428)
!15436 = !DILocation(line: 6977, column: 36, scope: !15428)
!15437 = !DILocation(line: 6977, column: 56, scope: !15428)
!15438 = !DILocation(line: 6977, column: 15, scope: !15428)
!15439 = !DILocation(line: 6977, column: 13, scope: !15428)
!15440 = !DILocation(line: 6977, column: 5, scope: !15428)
!15441 = !DILocation(line: 6978, column: 18, scope: !15442)
!15442 = distinct !DILexicalBlock(scope: !15368, file: !3, line: 6978, column: 7)
!15443 = !DILocation(line: 6978, column: 8, scope: !15442)
!15444 = !DILocation(line: 6978, column: 25, scope: !15442)
!15445 = !DILocation(line: 6978, column: 36, scope: !15442)
!15446 = !DILocation(line: 6978, column: 47, scope: !15442)
!15447 = !DILocation(line: 6978, column: 56, scope: !15442)
!15448 = !DILocation(line: 6978, column: 7, scope: !15368)
!15449 = !DILocation(line: 6979, column: 26, scope: !15442)
!15450 = !DILocation(line: 6979, column: 32, scope: !15442)
!15451 = !DILocation(line: 6979, column: 15, scope: !15442)
!15452 = !DILocation(line: 6979, column: 13, scope: !15442)
!15453 = !DILocation(line: 6979, column: 5, scope: !15442)
!15454 = !DILocation(line: 6981, column: 10, scope: !15368)
!15455 = !DILocation(line: 6981, column: 27, scope: !15368)
!15456 = !DILocation(line: 6981, column: 35, scope: !15368)
!15457 = !DILocation(line: 6981, column: 40, scope: !15368)
!15458 = !DILocation(line: 6981, column: 49, scope: !15368)
!15459 = !DILocation(line: 6981, column: 8, scope: !15368)
!15460 = !DILocation(line: 6982, column: 7, scope: !15461)
!15461 = distinct !DILexicalBlock(scope: !15368, file: !3, line: 6982, column: 7)
!15462 = !DILocation(line: 6982, column: 12, scope: !15461)
!15463 = !DILocation(line: 6982, column: 7, scope: !15368)
!15464 = !DILocation(line: 6983, column: 5, scope: !15461)
!15465 = !DILocation(line: 6984, column: 14, scope: !15368)
!15466 = !DILocation(line: 6984, column: 3, scope: !15368)
!15467 = !DILocation(line: 6986, column: 10, scope: !15368)
!15468 = !DILocation(line: 6986, column: 3, scope: !15368)
!15469 = !DILocation(line: 6987, column: 1, scope: !15368)
!15470 = distinct !DISubprogram(name: "expand_bool_compare_and_swap", scope: !3, file: !3, line: 7023, type: !15338, scopeLine: 7024, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15471 = !DILocalVariable(name: "mem", arg: 1, scope: !15470, file: !3, line: 7023, type: !2732)
!15472 = !DILocation(line: 7023, column: 35, scope: !15470)
!15473 = !DILocalVariable(name: "old_val", arg: 2, scope: !15470, file: !3, line: 7023, type: !2732)
!15474 = !DILocation(line: 7023, column: 44, scope: !15470)
!15475 = !DILocalVariable(name: "new_val", arg: 3, scope: !15470, file: !3, line: 7023, type: !2732)
!15476 = !DILocation(line: 7023, column: 57, scope: !15470)
!15477 = !DILocalVariable(name: "target", arg: 4, scope: !15470, file: !3, line: 7023, type: !2732)
!15478 = !DILocation(line: 7023, column: 70, scope: !15470)
!15479 = !DILocalVariable(name: "mode", scope: !15470, file: !3, line: 7025, type: !5)
!15480 = !DILocation(line: 7025, column: 21, scope: !15470)
!15481 = !DILocation(line: 7025, column: 28, scope: !15470)
!15482 = !DILocalVariable(name: "icode", scope: !15470, file: !3, line: 7026, type: !527)
!15483 = !DILocation(line: 7026, column: 18, scope: !15470)
!15484 = !DILocalVariable(name: "subtarget", scope: !15470, file: !3, line: 7027, type: !2732)
!15485 = !DILocation(line: 7027, column: 7, scope: !15470)
!15486 = !DILocalVariable(name: "seq", scope: !15470, file: !3, line: 7027, type: !2732)
!15487 = !DILocation(line: 7027, column: 18, scope: !15470)
!15488 = !DILocalVariable(name: "cc_reg", scope: !15470, file: !3, line: 7027, type: !2732)
!15489 = !DILocation(line: 7027, column: 23, scope: !15470)
!15490 = !DILocation(line: 7032, column: 33, scope: !15470)
!15491 = !DILocation(line: 7032, column: 11, scope: !15470)
!15492 = !DILocation(line: 7032, column: 9, scope: !15470)
!15493 = !DILocation(line: 7033, column: 7, scope: !15494)
!15494 = distinct !DILexicalBlock(scope: !15470, file: !3, line: 7033, column: 7)
!15495 = !DILocation(line: 7033, column: 13, scope: !15494)
!15496 = !DILocation(line: 7033, column: 7, scope: !15470)
!15497 = !DILocation(line: 7034, column: 5, scope: !15494)
!15498 = !DILocation(line: 7036, column: 3, scope: !15470)
!15499 = !DILocation(line: 7038, column: 7, scope: !15500)
!15500 = distinct !DILexicalBlock(scope: !15470, file: !3, line: 7037, column: 5)
!15501 = !DILocation(line: 7039, column: 50, scope: !15500)
!15502 = !DILocation(line: 7039, column: 55, scope: !15500)
!15503 = !DILocation(line: 7039, column: 64, scope: !15500)
!15504 = !DILocation(line: 7040, column: 25, scope: !15500)
!15505 = !DILocation(line: 7039, column: 19, scope: !15500)
!15506 = !DILocation(line: 7039, column: 17, scope: !15500)
!15507 = !DILocation(line: 7041, column: 14, scope: !15500)
!15508 = !DILocation(line: 7042, column: 11, scope: !15509)
!15509 = distinct !DILexicalBlock(scope: !15500, file: !3, line: 7042, column: 11)
!15510 = !DILocation(line: 7042, column: 21, scope: !15509)
!15511 = !DILocation(line: 7042, column: 11, scope: !15500)
!15512 = !DILocation(line: 7044, column: 4, scope: !15513)
!15513 = distinct !DILexicalBlock(scope: !15509, file: !3, line: 7043, column: 2)
!15514 = !DILocation(line: 7045, column: 4, scope: !15513)
!15515 = !DILocation(line: 7048, column: 11, scope: !15516)
!15516 = distinct !DILexicalBlock(scope: !15500, file: !3, line: 7048, column: 11)
!15517 = !DILocation(line: 7048, column: 11, scope: !15500)
!15518 = !DILocation(line: 7049, column: 15, scope: !15516)
!15519 = !DILocation(line: 7049, column: 56, scope: !15516)
!15520 = !DILocation(line: 7049, column: 2, scope: !15516)
!15521 = !DILocation(line: 7050, column: 13, scope: !15500)
!15522 = !DILocation(line: 7050, column: 11, scope: !15500)
!15523 = !DILocation(line: 7051, column: 7, scope: !15500)
!15524 = !DILocation(line: 7054, column: 12, scope: !15525)
!15525 = distinct !DILexicalBlock(scope: !15500, file: !3, line: 7054, column: 11)
!15526 = !DILocation(line: 7054, column: 19, scope: !15525)
!15527 = !DILocation(line: 7054, column: 22, scope: !15525)
!15528 = !DILocation(line: 7054, column: 11, scope: !15500)
!15529 = !DILocation(line: 7056, column: 8, scope: !15530)
!15530 = distinct !DILexicalBlock(scope: !15525, file: !3, line: 7055, column: 2)
!15531 = !DILocation(line: 7057, column: 25, scope: !15530)
!15532 = !DILocation(line: 7057, column: 31, scope: !15530)
!15533 = !DILocation(line: 7057, column: 14, scope: !15530)
!15534 = !DILocation(line: 7057, column: 12, scope: !15530)
!15535 = !DILocation(line: 7058, column: 9, scope: !15530)
!15536 = !DILocation(line: 7059, column: 5, scope: !15500)
!15537 = !DILocation(line: 7060, column: 11, scope: !15470)
!15538 = !DILocation(line: 7060, column: 10, scope: !15470)
!15539 = distinct !{!15539, !15498, !15540}
!15540 = !DILocation(line: 7060, column: 14, scope: !15470)
!15541 = !DILocation(line: 7062, column: 14, scope: !15470)
!15542 = !DILocation(line: 7062, column: 3, scope: !15470)
!15543 = !DILocation(line: 7063, column: 7, scope: !15544)
!15544 = distinct !DILexicalBlock(scope: !15470, file: !3, line: 7063, column: 7)
!15545 = !DILocation(line: 7063, column: 7, scope: !15470)
!15546 = !DILocation(line: 7064, column: 35, scope: !15544)
!15547 = !DILocation(line: 7064, column: 47, scope: !15544)
!15548 = !DILocation(line: 7064, column: 55, scope: !15544)
!15549 = !DILocation(line: 7064, column: 12, scope: !15544)
!15550 = !DILocation(line: 7064, column: 5, scope: !15544)
!15551 = !DILocation(line: 7066, column: 35, scope: !15544)
!15552 = !DILocation(line: 7066, column: 47, scope: !15544)
!15553 = !DILocation(line: 7066, column: 58, scope: !15544)
!15554 = !DILocation(line: 7066, column: 12, scope: !15544)
!15555 = !DILocation(line: 7066, column: 5, scope: !15544)
!15556 = !DILocation(line: 7067, column: 1, scope: !15470)
!15557 = distinct !DISubprogram(name: "find_cc_set", scope: !3, file: !3, line: 7007, type: !10745, scopeLine: 7008, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15558 = !DILocalVariable(name: "x", arg: 1, scope: !15557, file: !3, line: 7007, type: !2732)
!15559 = !DILocation(line: 7007, column: 18, scope: !15557)
!15560 = !DILocalVariable(name: "pat", arg: 2, scope: !15557, file: !3, line: 7007, type: !9920)
!15561 = !DILocation(line: 7007, column: 31, scope: !15557)
!15562 = !DILocalVariable(name: "data", arg: 3, scope: !15557, file: !3, line: 7007, type: !2843)
!15563 = !DILocation(line: 7007, column: 42, scope: !15557)
!15564 = !DILocation(line: 7009, column: 7, scope: !15565)
!15565 = distinct !DILexicalBlock(scope: !15557, file: !3, line: 7009, column: 7)
!15566 = !DILocation(line: 7009, column: 17, scope: !15565)
!15567 = !DILocation(line: 7009, column: 20, scope: !15565)
!15568 = !DILocation(line: 7009, column: 50, scope: !15565)
!15569 = !DILocation(line: 7010, column: 7, scope: !15565)
!15570 = !DILocation(line: 7010, column: 10, scope: !15565)
!15571 = !DILocation(line: 7010, column: 25, scope: !15565)
!15572 = !DILocation(line: 7009, column: 7, scope: !15557)
!15573 = !DILocalVariable(name: "p_cc_reg", scope: !15574, file: !3, line: 7012, type: !3886)
!15574 = distinct !DILexicalBlock(scope: !15565, file: !3, line: 7011, column: 5)
!15575 = !DILocation(line: 7012, column: 12, scope: !15574)
!15576 = !DILocation(line: 7012, column: 31, scope: !15574)
!15577 = !DILocation(line: 7012, column: 23, scope: !15574)
!15578 = !DILocation(line: 7013, column: 7, scope: !15574)
!15579 = !DILocation(line: 7014, column: 19, scope: !15574)
!15580 = !DILocation(line: 7014, column: 8, scope: !15574)
!15581 = !DILocation(line: 7014, column: 17, scope: !15574)
!15582 = !DILocation(line: 7015, column: 5, scope: !15574)
!15583 = !DILocation(line: 7016, column: 1, scope: !15557)
!15584 = distinct !DISubprogram(name: "expand_sync_operation", scope: !3, file: !3, line: 7144, type: !15585, scopeLine: 7145, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15585 = !DISubroutineType(types: !15586)
!15586 = !{!2732, !2732, !2732, !384}
!15587 = !DILocalVariable(name: "mem", arg: 1, scope: !15584, file: !3, line: 7144, type: !2732)
!15588 = !DILocation(line: 7144, column: 28, scope: !15584)
!15589 = !DILocalVariable(name: "val", arg: 2, scope: !15584, file: !3, line: 7144, type: !2732)
!15590 = !DILocation(line: 7144, column: 37, scope: !15584)
!15591 = !DILocalVariable(name: "code", arg: 3, scope: !15584, file: !3, line: 7144, type: !384)
!15592 = !DILocation(line: 7144, column: 56, scope: !15584)
!15593 = !DILocalVariable(name: "mode", scope: !15584, file: !3, line: 7146, type: !5)
!15594 = !DILocation(line: 7146, column: 21, scope: !15584)
!15595 = !DILocation(line: 7146, column: 28, scope: !15584)
!15596 = !DILocalVariable(name: "icode", scope: !15584, file: !3, line: 7147, type: !527)
!15597 = !DILocation(line: 7147, column: 18, scope: !15584)
!15598 = !DILocalVariable(name: "insn", scope: !15584, file: !3, line: 7148, type: !2732)
!15599 = !DILocation(line: 7148, column: 7, scope: !15584)
!15600 = !DILocation(line: 7151, column: 11, scope: !15584)
!15601 = !DILocation(line: 7151, column: 3, scope: !15584)
!15602 = !DILocation(line: 7154, column: 30, scope: !15603)
!15603 = distinct !DILexicalBlock(scope: !15584, file: !3, line: 7152, column: 5)
!15604 = !DILocation(line: 7154, column: 15, scope: !15603)
!15605 = !DILocation(line: 7154, column: 13, scope: !15603)
!15606 = !DILocation(line: 7155, column: 7, scope: !15603)
!15607 = !DILocation(line: 7157, column: 30, scope: !15603)
!15608 = !DILocation(line: 7157, column: 15, scope: !15603)
!15609 = !DILocation(line: 7157, column: 13, scope: !15603)
!15610 = !DILocation(line: 7158, column: 7, scope: !15603)
!15611 = !DILocation(line: 7160, column: 30, scope: !15603)
!15612 = !DILocation(line: 7160, column: 15, scope: !15603)
!15613 = !DILocation(line: 7160, column: 13, scope: !15603)
!15614 = !DILocation(line: 7161, column: 7, scope: !15603)
!15615 = !DILocation(line: 7163, column: 30, scope: !15603)
!15616 = !DILocation(line: 7163, column: 15, scope: !15603)
!15617 = !DILocation(line: 7163, column: 13, scope: !15603)
!15618 = !DILocation(line: 7164, column: 7, scope: !15603)
!15619 = !DILocation(line: 7166, column: 31, scope: !15603)
!15620 = !DILocation(line: 7166, column: 15, scope: !15603)
!15621 = !DILocation(line: 7166, column: 13, scope: !15603)
!15622 = !DILocation(line: 7167, column: 7, scope: !15603)
!15623 = !DILocation(line: 7170, column: 30, scope: !15603)
!15624 = !DILocation(line: 7170, column: 15, scope: !15603)
!15625 = !DILocation(line: 7170, column: 13, scope: !15603)
!15626 = !DILocation(line: 7171, column: 11, scope: !15627)
!15627 = distinct !DILexicalBlock(scope: !15603, file: !3, line: 7171, column: 11)
!15628 = !DILocation(line: 7171, column: 17, scope: !15627)
!15629 = !DILocation(line: 7171, column: 37, scope: !15627)
!15630 = !DILocation(line: 7171, column: 40, scope: !15627)
!15631 = !DILocation(line: 7171, column: 11, scope: !15603)
!15632 = !DILocation(line: 7173, column: 27, scope: !15633)
!15633 = distinct !DILexicalBlock(scope: !15627, file: !3, line: 7172, column: 2)
!15634 = !DILocation(line: 7173, column: 12, scope: !15633)
!15635 = !DILocation(line: 7173, column: 10, scope: !15633)
!15636 = !DILocation(line: 7174, column: 8, scope: !15637)
!15637 = distinct !DILexicalBlock(scope: !15633, file: !3, line: 7174, column: 8)
!15638 = !DILocation(line: 7174, column: 14, scope: !15637)
!15639 = !DILocation(line: 7174, column: 8, scope: !15633)
!15640 = !DILocation(line: 7176, column: 34, scope: !15641)
!15641 = distinct !DILexicalBlock(scope: !15637, file: !3, line: 7175, column: 6)
!15642 = !DILocation(line: 7176, column: 45, scope: !15641)
!15643 = !DILocation(line: 7176, column: 14, scope: !15641)
!15644 = !DILocation(line: 7176, column: 12, scope: !15641)
!15645 = !DILocation(line: 7177, column: 13, scope: !15641)
!15646 = !DILocation(line: 7178, column: 6, scope: !15641)
!15647 = !DILocation(line: 7179, column: 2, scope: !15633)
!15648 = !DILocation(line: 7180, column: 7, scope: !15603)
!15649 = !DILocation(line: 7183, column: 7, scope: !15603)
!15650 = !DILocation(line: 7184, column: 5, scope: !15603)
!15651 = !DILocation(line: 7187, column: 7, scope: !15652)
!15652 = distinct !DILexicalBlock(scope: !15584, file: !3, line: 7187, column: 7)
!15653 = !DILocation(line: 7187, column: 13, scope: !15652)
!15654 = !DILocation(line: 7187, column: 7, scope: !15584)
!15655 = !DILocation(line: 7189, column: 11, scope: !15656)
!15656 = distinct !DILexicalBlock(scope: !15657, file: !3, line: 7189, column: 11)
!15657 = distinct !DILexicalBlock(scope: !15652, file: !3, line: 7188, column: 5)
!15658 = !DILocation(line: 7189, column: 26, scope: !15656)
!15659 = !DILocation(line: 7189, column: 38, scope: !15656)
!15660 = !DILocation(line: 7189, column: 41, scope: !15656)
!15661 = !DILocation(line: 7189, column: 59, scope: !15656)
!15662 = !DILocation(line: 7189, column: 56, scope: !15656)
!15663 = !DILocation(line: 7189, column: 11, scope: !15657)
!15664 = !DILocation(line: 7190, column: 23, scope: !15656)
!15665 = !DILocation(line: 7190, column: 29, scope: !15656)
!15666 = !DILocation(line: 7190, column: 45, scope: !15656)
!15667 = !DILocation(line: 7190, column: 8, scope: !15656)
!15668 = !DILocation(line: 7190, column: 6, scope: !15656)
!15669 = !DILocation(line: 7190, column: 2, scope: !15656)
!15670 = !DILocation(line: 7191, column: 22, scope: !15671)
!15671 = distinct !DILexicalBlock(scope: !15657, file: !3, line: 7191, column: 11)
!15672 = !DILocation(line: 7191, column: 12, scope: !15671)
!15673 = !DILocation(line: 7191, column: 29, scope: !15671)
!15674 = !DILocation(line: 7191, column: 40, scope: !15671)
!15675 = !DILocation(line: 7191, column: 51, scope: !15671)
!15676 = !DILocation(line: 7191, column: 56, scope: !15671)
!15677 = !DILocation(line: 7191, column: 11, scope: !15657)
!15678 = !DILocation(line: 7192, column: 19, scope: !15671)
!15679 = !DILocation(line: 7192, column: 25, scope: !15671)
!15680 = !DILocation(line: 7192, column: 8, scope: !15671)
!15681 = !DILocation(line: 7192, column: 6, scope: !15671)
!15682 = !DILocation(line: 7192, column: 2, scope: !15671)
!15683 = !DILocation(line: 7194, column: 14, scope: !15657)
!15684 = !DILocation(line: 7194, column: 31, scope: !15657)
!15685 = !DILocation(line: 7194, column: 36, scope: !15657)
!15686 = !DILocation(line: 7194, column: 12, scope: !15657)
!15687 = !DILocation(line: 7195, column: 11, scope: !15688)
!15688 = distinct !DILexicalBlock(scope: !15657, file: !3, line: 7195, column: 11)
!15689 = !DILocation(line: 7195, column: 11, scope: !15657)
!15690 = !DILocation(line: 7197, column: 15, scope: !15691)
!15691 = distinct !DILexicalBlock(scope: !15688, file: !3, line: 7196, column: 2)
!15692 = !DILocation(line: 7197, column: 4, scope: !15691)
!15693 = !DILocation(line: 7198, column: 11, scope: !15691)
!15694 = !DILocation(line: 7198, column: 4, scope: !15691)
!15695 = !DILocation(line: 7200, column: 5, scope: !15657)
!15696 = !DILocation(line: 7204, column: 29, scope: !15697)
!15697 = distinct !DILexicalBlock(scope: !15584, file: !3, line: 7204, column: 7)
!15698 = !DILocation(line: 7204, column: 7, scope: !15697)
!15699 = !DILocation(line: 7204, column: 35, scope: !15697)
!15700 = !DILocation(line: 7204, column: 7, scope: !15584)
!15701 = !DILocalVariable(name: "t0", scope: !15702, file: !3, line: 7206, type: !2732)
!15702 = distinct !DILexicalBlock(scope: !15697, file: !3, line: 7205, column: 5)
!15703 = !DILocation(line: 7206, column: 11, scope: !15702)
!15704 = !DILocation(line: 7206, column: 29, scope: !15702)
!15705 = !DILocation(line: 7206, column: 16, scope: !15702)
!15706 = !DILocalVariable(name: "t1", scope: !15702, file: !3, line: 7206, type: !2732)
!15707 = !DILocation(line: 7206, column: 36, scope: !15702)
!15708 = !DILocation(line: 7208, column: 7, scope: !15702)
!15709 = !DILocation(line: 7210, column: 12, scope: !15702)
!15710 = !DILocation(line: 7210, column: 10, scope: !15702)
!15711 = !DILocation(line: 7211, column: 11, scope: !15712)
!15712 = distinct !DILexicalBlock(scope: !15702, file: !3, line: 7211, column: 11)
!15713 = !DILocation(line: 7211, column: 16, scope: !15712)
!15714 = !DILocation(line: 7211, column: 11, scope: !15702)
!15715 = !DILocation(line: 7213, column: 30, scope: !15716)
!15716 = distinct !DILexicalBlock(scope: !15712, file: !3, line: 7212, column: 2)
!15717 = !DILocation(line: 7213, column: 41, scope: !15716)
!15718 = !DILocation(line: 7213, column: 45, scope: !15716)
!15719 = !DILocation(line: 7213, column: 9, scope: !15716)
!15720 = !DILocation(line: 7213, column: 7, scope: !15716)
!15721 = !DILocation(line: 7215, column: 29, scope: !15716)
!15722 = !DILocation(line: 7215, column: 35, scope: !15716)
!15723 = !DILocation(line: 7215, column: 41, scope: !15716)
!15724 = !DILocation(line: 7215, column: 9, scope: !15716)
!15725 = !DILocation(line: 7215, column: 7, scope: !15716)
!15726 = !DILocation(line: 7216, column: 2, scope: !15716)
!15727 = !DILocation(line: 7218, column: 28, scope: !15712)
!15728 = !DILocation(line: 7218, column: 34, scope: !15712)
!15729 = !DILocation(line: 7218, column: 40, scope: !15712)
!15730 = !DILocation(line: 7218, column: 44, scope: !15712)
!15731 = !DILocation(line: 7218, column: 7, scope: !15712)
!15732 = !DILocation(line: 7218, column: 5, scope: !15712)
!15733 = !DILocation(line: 7220, column: 14, scope: !15702)
!15734 = !DILocation(line: 7220, column: 12, scope: !15702)
!15735 = !DILocation(line: 7221, column: 7, scope: !15702)
!15736 = !DILocation(line: 7223, column: 11, scope: !15737)
!15737 = distinct !DILexicalBlock(scope: !15702, file: !3, line: 7223, column: 11)
!15738 = !DILocation(line: 7223, column: 14, scope: !15737)
!15739 = !DILocation(line: 7223, column: 22, scope: !15737)
!15740 = !DILocation(line: 7223, column: 55, scope: !15737)
!15741 = !DILocation(line: 7223, column: 60, scope: !15737)
!15742 = !DILocation(line: 7223, column: 64, scope: !15737)
!15743 = !DILocation(line: 7223, column: 68, scope: !15737)
!15744 = !DILocation(line: 7223, column: 25, scope: !15737)
!15745 = !DILocation(line: 7223, column: 11, scope: !15702)
!15746 = !DILocation(line: 7224, column: 9, scope: !15737)
!15747 = !DILocation(line: 7224, column: 2, scope: !15737)
!15748 = !DILocation(line: 7225, column: 5, scope: !15702)
!15749 = !DILocation(line: 7227, column: 3, scope: !15584)
!15750 = !DILocation(line: 7228, column: 1, scope: !15584)
!15751 = distinct !DISubprogram(name: "expand_compare_and_swap_loop", scope: !3, file: !3, line: 7079, type: !15752, scopeLine: 7080, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15752 = !DISubroutineType(types: !15753)
!15753 = !{!2966, !2732, !2732, !2732, !2732}
!15754 = !DILocalVariable(name: "mem", arg: 1, scope: !15751, file: !3, line: 7079, type: !2732)
!15755 = !DILocation(line: 7079, column: 35, scope: !15751)
!15756 = !DILocalVariable(name: "old_reg", arg: 2, scope: !15751, file: !3, line: 7079, type: !2732)
!15757 = !DILocation(line: 7079, column: 44, scope: !15751)
!15758 = !DILocalVariable(name: "new_reg", arg: 3, scope: !15751, file: !3, line: 7079, type: !2732)
!15759 = !DILocation(line: 7079, column: 57, scope: !15751)
!15760 = !DILocalVariable(name: "seq", arg: 4, scope: !15751, file: !3, line: 7079, type: !2732)
!15761 = !DILocation(line: 7079, column: 70, scope: !15751)
!15762 = !DILocalVariable(name: "mode", scope: !15751, file: !3, line: 7081, type: !5)
!15763 = !DILocation(line: 7081, column: 21, scope: !15751)
!15764 = !DILocation(line: 7081, column: 28, scope: !15751)
!15765 = !DILocalVariable(name: "icode", scope: !15751, file: !3, line: 7082, type: !527)
!15766 = !DILocation(line: 7082, column: 18, scope: !15751)
!15767 = !DILocalVariable(name: "label", scope: !15751, file: !3, line: 7083, type: !2732)
!15768 = !DILocation(line: 7083, column: 7, scope: !15751)
!15769 = !DILocalVariable(name: "cmp_reg", scope: !15751, file: !3, line: 7083, type: !2732)
!15770 = !DILocation(line: 7083, column: 14, scope: !15751)
!15771 = !DILocalVariable(name: "subtarget", scope: !15751, file: !3, line: 7083, type: !2732)
!15772 = !DILocation(line: 7083, column: 23, scope: !15751)
!15773 = !DILocalVariable(name: "cc_reg", scope: !15751, file: !3, line: 7083, type: !2732)
!15774 = !DILocation(line: 7083, column: 34, scope: !15751)
!15775 = !DILocation(line: 7098, column: 11, scope: !15751)
!15776 = !DILocation(line: 7098, column: 9, scope: !15751)
!15777 = !DILocation(line: 7099, column: 26, scope: !15751)
!15778 = !DILocation(line: 7099, column: 13, scope: !15751)
!15779 = !DILocation(line: 7099, column: 11, scope: !15751)
!15780 = !DILocation(line: 7101, column: 19, scope: !15751)
!15781 = !DILocation(line: 7101, column: 28, scope: !15751)
!15782 = !DILocation(line: 7101, column: 3, scope: !15751)
!15783 = !DILocation(line: 7102, column: 15, scope: !15751)
!15784 = !DILocation(line: 7102, column: 3, scope: !15751)
!15785 = !DILocation(line: 7103, column: 19, scope: !15751)
!15786 = !DILocation(line: 7103, column: 28, scope: !15751)
!15787 = !DILocation(line: 7103, column: 3, scope: !15751)
!15788 = !DILocation(line: 7104, column: 7, scope: !15789)
!15789 = distinct !DILexicalBlock(scope: !15751, file: !3, line: 7104, column: 7)
!15790 = !DILocation(line: 7104, column: 7, scope: !15751)
!15791 = !DILocation(line: 7105, column: 16, scope: !15789)
!15792 = !DILocation(line: 7105, column: 5, scope: !15789)
!15793 = !DILocation(line: 7110, column: 33, scope: !15751)
!15794 = !DILocation(line: 7110, column: 11, scope: !15751)
!15795 = !DILocation(line: 7110, column: 9, scope: !15751)
!15796 = !DILocation(line: 7111, column: 7, scope: !15797)
!15797 = distinct !DILexicalBlock(scope: !15751, file: !3, line: 7111, column: 7)
!15798 = !DILocation(line: 7111, column: 13, scope: !15797)
!15799 = !DILocation(line: 7111, column: 7, scope: !15751)
!15800 = !DILocation(line: 7112, column: 5, scope: !15797)
!15801 = !DILocation(line: 7114, column: 46, scope: !15751)
!15802 = !DILocation(line: 7114, column: 51, scope: !15751)
!15803 = !DILocation(line: 7114, column: 60, scope: !15751)
!15804 = !DILocation(line: 7115, column: 11, scope: !15751)
!15805 = !DILocation(line: 7115, column: 20, scope: !15751)
!15806 = !DILocation(line: 7114, column: 15, scope: !15751)
!15807 = !DILocation(line: 7114, column: 13, scope: !15751)
!15808 = !DILocation(line: 7116, column: 7, scope: !15809)
!15809 = distinct !DILexicalBlock(scope: !15751, file: !3, line: 7116, column: 7)
!15810 = !DILocation(line: 7116, column: 17, scope: !15809)
!15811 = !DILocation(line: 7116, column: 7, scope: !15751)
!15812 = !DILocation(line: 7117, column: 5, scope: !15809)
!15813 = !DILocation(line: 7119, column: 10, scope: !15751)
!15814 = !DILocation(line: 7120, column: 7, scope: !15815)
!15815 = distinct !DILexicalBlock(scope: !15751, file: !3, line: 7120, column: 7)
!15816 = !DILocation(line: 7120, column: 7, scope: !15751)
!15817 = !DILocation(line: 7121, column: 18, scope: !15815)
!15818 = !DILocation(line: 7121, column: 59, scope: !15815)
!15819 = !DILocation(line: 7121, column: 5, scope: !15815)
!15820 = !DILocation(line: 7122, column: 7, scope: !15821)
!15821 = distinct !DILexicalBlock(scope: !15751, file: !3, line: 7122, column: 7)
!15822 = !DILocation(line: 7122, column: 7, scope: !15751)
!15823 = !DILocation(line: 7124, column: 17, scope: !15824)
!15824 = distinct !DILexicalBlock(scope: !15821, file: !3, line: 7123, column: 5)
!15825 = !DILocation(line: 7124, column: 15, scope: !15824)
!15826 = !DILocation(line: 7125, column: 17, scope: !15824)
!15827 = !DILocation(line: 7125, column: 15, scope: !15824)
!15828 = !DILocation(line: 7126, column: 5, scope: !15824)
!15829 = !DILocation(line: 7129, column: 11, scope: !15830)
!15830 = distinct !DILexicalBlock(scope: !15831, file: !3, line: 7129, column: 11)
!15831 = distinct !DILexicalBlock(scope: !15821, file: !3, line: 7128, column: 5)
!15832 = !DILocation(line: 7129, column: 24, scope: !15830)
!15833 = !DILocation(line: 7129, column: 21, scope: !15830)
!15834 = !DILocation(line: 7129, column: 11, scope: !15831)
!15835 = !DILocation(line: 7130, column: 18, scope: !15830)
!15836 = !DILocation(line: 7130, column: 27, scope: !15830)
!15837 = !DILocation(line: 7130, column: 2, scope: !15830)
!15838 = !DILocation(line: 7134, column: 28, scope: !15751)
!15839 = !DILocation(line: 7134, column: 37, scope: !15751)
!15840 = !DILocation(line: 7134, column: 50, scope: !15751)
!15841 = !DILocation(line: 7134, column: 62, scope: !15751)
!15842 = !DILocation(line: 7135, column: 7, scope: !15751)
!15843 = !DILocation(line: 7134, column: 3, scope: !15751)
!15844 = !DILocation(line: 7136, column: 3, scope: !15751)
!15845 = !DILocation(line: 7137, column: 1, scope: !15751)
!15846 = distinct !DISubprogram(name: "expand_sync_fetch_operation", scope: !3, file: !3, line: 7237, type: !15847, scopeLine: 7239, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!15847 = !DISubroutineType(types: !15848)
!15848 = !{!2732, !2732, !2732, !384, !2966, !2732}
!15849 = !DILocalVariable(name: "mem", arg: 1, scope: !15846, file: !3, line: 7237, type: !2732)
!15850 = !DILocation(line: 7237, column: 34, scope: !15846)
!15851 = !DILocalVariable(name: "val", arg: 2, scope: !15846, file: !3, line: 7237, type: !2732)
!15852 = !DILocation(line: 7237, column: 43, scope: !15846)
!15853 = !DILocalVariable(name: "code", arg: 3, scope: !15846, file: !3, line: 7237, type: !384)
!15854 = !DILocation(line: 7237, column: 62, scope: !15846)
!15855 = !DILocalVariable(name: "after", arg: 4, scope: !15846, file: !3, line: 7238, type: !2966)
!15856 = !DILocation(line: 7238, column: 14, scope: !15846)
!15857 = !DILocalVariable(name: "target", arg: 5, scope: !15846, file: !3, line: 7238, type: !2732)
!15858 = !DILocation(line: 7238, column: 25, scope: !15846)
!15859 = !DILocalVariable(name: "mode", scope: !15846, file: !3, line: 7240, type: !5)
!15860 = !DILocation(line: 7240, column: 21, scope: !15846)
!15861 = !DILocation(line: 7240, column: 28, scope: !15846)
!15862 = !DILocalVariable(name: "old_code", scope: !15846, file: !3, line: 7241, type: !527)
!15863 = !DILocation(line: 7241, column: 18, scope: !15846)
!15864 = !DILocalVariable(name: "new_code", scope: !15846, file: !3, line: 7241, type: !527)
!15865 = !DILocation(line: 7241, column: 28, scope: !15846)
!15866 = !DILocalVariable(name: "icode", scope: !15846, file: !3, line: 7241, type: !527)
!15867 = !DILocation(line: 7241, column: 38, scope: !15846)
!15868 = !DILocalVariable(name: "compensate", scope: !15846, file: !3, line: 7242, type: !2966)
!15869 = !DILocation(line: 7242, column: 8, scope: !15846)
!15870 = !DILocalVariable(name: "insn", scope: !15846, file: !3, line: 7243, type: !2732)
!15871 = !DILocation(line: 7243, column: 7, scope: !15846)
!15872 = !DILocation(line: 7246, column: 11, scope: !15846)
!15873 = !DILocation(line: 7246, column: 3, scope: !15846)
!15874 = !DILocation(line: 7249, column: 37, scope: !15875)
!15875 = distinct !DILexicalBlock(scope: !15846, file: !3, line: 7247, column: 5)
!15876 = !DILocation(line: 7249, column: 18, scope: !15875)
!15877 = !DILocation(line: 7249, column: 16, scope: !15875)
!15878 = !DILocation(line: 7250, column: 37, scope: !15875)
!15879 = !DILocation(line: 7250, column: 18, scope: !15875)
!15880 = !DILocation(line: 7250, column: 16, scope: !15875)
!15881 = !DILocation(line: 7251, column: 7, scope: !15875)
!15882 = !DILocation(line: 7253, column: 37, scope: !15875)
!15883 = !DILocation(line: 7253, column: 18, scope: !15875)
!15884 = !DILocation(line: 7253, column: 16, scope: !15875)
!15885 = !DILocation(line: 7254, column: 37, scope: !15875)
!15886 = !DILocation(line: 7254, column: 18, scope: !15875)
!15887 = !DILocation(line: 7254, column: 16, scope: !15875)
!15888 = !DILocation(line: 7255, column: 7, scope: !15875)
!15889 = !DILocation(line: 7257, column: 37, scope: !15875)
!15890 = !DILocation(line: 7257, column: 18, scope: !15875)
!15891 = !DILocation(line: 7257, column: 16, scope: !15875)
!15892 = !DILocation(line: 7258, column: 37, scope: !15875)
!15893 = !DILocation(line: 7258, column: 18, scope: !15875)
!15894 = !DILocation(line: 7258, column: 16, scope: !15875)
!15895 = !DILocation(line: 7259, column: 7, scope: !15875)
!15896 = !DILocation(line: 7261, column: 37, scope: !15875)
!15897 = !DILocation(line: 7261, column: 18, scope: !15875)
!15898 = !DILocation(line: 7261, column: 16, scope: !15875)
!15899 = !DILocation(line: 7262, column: 37, scope: !15875)
!15900 = !DILocation(line: 7262, column: 18, scope: !15875)
!15901 = !DILocation(line: 7262, column: 16, scope: !15875)
!15902 = !DILocation(line: 7263, column: 7, scope: !15875)
!15903 = !DILocation(line: 7265, column: 38, scope: !15875)
!15904 = !DILocation(line: 7265, column: 18, scope: !15875)
!15905 = !DILocation(line: 7265, column: 16, scope: !15875)
!15906 = !DILocation(line: 7266, column: 38, scope: !15875)
!15907 = !DILocation(line: 7266, column: 18, scope: !15875)
!15908 = !DILocation(line: 7266, column: 16, scope: !15875)
!15909 = !DILocation(line: 7267, column: 7, scope: !15875)
!15910 = !DILocation(line: 7270, column: 37, scope: !15875)
!15911 = !DILocation(line: 7270, column: 18, scope: !15875)
!15912 = !DILocation(line: 7270, column: 16, scope: !15875)
!15913 = !DILocation(line: 7271, column: 37, scope: !15875)
!15914 = !DILocation(line: 7271, column: 18, scope: !15875)
!15915 = !DILocation(line: 7271, column: 16, scope: !15875)
!15916 = !DILocation(line: 7272, column: 12, scope: !15917)
!15917 = distinct !DILexicalBlock(scope: !15875, file: !3, line: 7272, column: 11)
!15918 = !DILocation(line: 7272, column: 21, scope: !15917)
!15919 = !DILocation(line: 7272, column: 41, scope: !15917)
!15920 = !DILocation(line: 7272, column: 44, scope: !15917)
!15921 = !DILocation(line: 7272, column: 53, scope: !15917)
!15922 = !DILocation(line: 7273, column: 11, scope: !15917)
!15923 = !DILocation(line: 7273, column: 14, scope: !15917)
!15924 = !DILocation(line: 7272, column: 11, scope: !15875)
!15925 = !DILocation(line: 7275, column: 34, scope: !15926)
!15926 = distinct !DILexicalBlock(scope: !15917, file: !3, line: 7274, column: 2)
!15927 = !DILocation(line: 7275, column: 15, scope: !15926)
!15928 = !DILocation(line: 7275, column: 13, scope: !15926)
!15929 = !DILocation(line: 7276, column: 34, scope: !15926)
!15930 = !DILocation(line: 7276, column: 15, scope: !15926)
!15931 = !DILocation(line: 7276, column: 13, scope: !15926)
!15932 = !DILocation(line: 7277, column: 8, scope: !15933)
!15933 = distinct !DILexicalBlock(scope: !15926, file: !3, line: 7277, column: 8)
!15934 = !DILocation(line: 7277, column: 17, scope: !15933)
!15935 = !DILocation(line: 7277, column: 37, scope: !15933)
!15936 = !DILocation(line: 7277, column: 40, scope: !15933)
!15937 = !DILocation(line: 7277, column: 49, scope: !15933)
!15938 = !DILocation(line: 7277, column: 8, scope: !15926)
!15939 = !DILocation(line: 7279, column: 34, scope: !15940)
!15940 = distinct !DILexicalBlock(scope: !15933, file: !3, line: 7278, column: 6)
!15941 = !DILocation(line: 7279, column: 45, scope: !15940)
!15942 = !DILocation(line: 7279, column: 14, scope: !15940)
!15943 = !DILocation(line: 7279, column: 12, scope: !15940)
!15944 = !DILocation(line: 7280, column: 13, scope: !15940)
!15945 = !DILocation(line: 7281, column: 6, scope: !15940)
!15946 = !DILocation(line: 7282, column: 2, scope: !15926)
!15947 = !DILocation(line: 7283, column: 7, scope: !15875)
!15948 = !DILocation(line: 7286, column: 7, scope: !15875)
!15949 = !DILocation(line: 7287, column: 5, scope: !15875)
!15950 = !DILocation(line: 7295, column: 14, scope: !15846)
!15951 = !DILocation(line: 7296, column: 7, scope: !15952)
!15952 = distinct !DILexicalBlock(scope: !15846, file: !3, line: 7296, column: 7)
!15953 = !DILocation(line: 7296, column: 7, scope: !15846)
!15954 = !DILocation(line: 7298, column: 15, scope: !15955)
!15955 = distinct !DILexicalBlock(scope: !15952, file: !3, line: 7297, column: 5)
!15956 = !DILocation(line: 7298, column: 13, scope: !15955)
!15957 = !DILocation(line: 7299, column: 11, scope: !15958)
!15958 = distinct !DILexicalBlock(scope: !15955, file: !3, line: 7299, column: 11)
!15959 = !DILocation(line: 7299, column: 17, scope: !15958)
!15960 = !DILocation(line: 7299, column: 11, scope: !15955)
!15961 = !DILocation(line: 7301, column: 12, scope: !15962)
!15962 = distinct !DILexicalBlock(scope: !15958, file: !3, line: 7300, column: 2)
!15963 = !DILocation(line: 7301, column: 10, scope: !15962)
!15964 = !DILocation(line: 7302, column: 8, scope: !15965)
!15965 = distinct !DILexicalBlock(scope: !15962, file: !3, line: 7302, column: 8)
!15966 = !DILocation(line: 7302, column: 14, scope: !15965)
!15967 = !DILocation(line: 7302, column: 8, scope: !15962)
!15968 = !DILocation(line: 7303, column: 17, scope: !15965)
!15969 = !DILocation(line: 7303, column: 6, scope: !15965)
!15970 = !DILocation(line: 7304, column: 2, scope: !15962)
!15971 = !DILocation(line: 7305, column: 5, scope: !15955)
!15972 = !DILocation(line: 7308, column: 15, scope: !15973)
!15973 = distinct !DILexicalBlock(scope: !15952, file: !3, line: 7307, column: 5)
!15974 = !DILocation(line: 7308, column: 13, scope: !15973)
!15975 = !DILocation(line: 7309, column: 11, scope: !15976)
!15976 = distinct !DILexicalBlock(scope: !15973, file: !3, line: 7309, column: 11)
!15977 = !DILocation(line: 7309, column: 17, scope: !15976)
!15978 = !DILocation(line: 7310, column: 4, scope: !15976)
!15979 = !DILocation(line: 7310, column: 8, scope: !15976)
!15980 = !DILocation(line: 7310, column: 13, scope: !15976)
!15981 = !DILocation(line: 7310, column: 21, scope: !15976)
!15982 = !DILocation(line: 7310, column: 24, scope: !15976)
!15983 = !DILocation(line: 7310, column: 29, scope: !15976)
!15984 = !DILocation(line: 7310, column: 38, scope: !15976)
!15985 = !DILocation(line: 7310, column: 41, scope: !15976)
!15986 = !DILocation(line: 7310, column: 46, scope: !15976)
!15987 = !DILocation(line: 7309, column: 11, scope: !15973)
!15988 = !DILocation(line: 7312, column: 12, scope: !15989)
!15989 = distinct !DILexicalBlock(scope: !15976, file: !3, line: 7311, column: 2)
!15990 = !DILocation(line: 7312, column: 10, scope: !15989)
!15991 = !DILocation(line: 7313, column: 8, scope: !15992)
!15992 = distinct !DILexicalBlock(scope: !15989, file: !3, line: 7313, column: 8)
!15993 = !DILocation(line: 7313, column: 14, scope: !15992)
!15994 = !DILocation(line: 7313, column: 8, scope: !15989)
!15995 = !DILocation(line: 7314, column: 17, scope: !15992)
!15996 = !DILocation(line: 7314, column: 6, scope: !15992)
!15997 = !DILocation(line: 7315, column: 2, scope: !15989)
!15998 = !DILocation(line: 7319, column: 7, scope: !15999)
!15999 = distinct !DILexicalBlock(scope: !15846, file: !3, line: 7319, column: 7)
!16000 = !DILocation(line: 7319, column: 13, scope: !15999)
!16001 = !DILocation(line: 7319, column: 7, scope: !15846)
!16002 = !DILocation(line: 7321, column: 12, scope: !16003)
!16003 = distinct !DILexicalBlock(scope: !16004, file: !3, line: 7321, column: 11)
!16004 = distinct !DILexicalBlock(scope: !15999, file: !3, line: 7320, column: 5)
!16005 = !DILocation(line: 7321, column: 19, scope: !16003)
!16006 = !DILocation(line: 7321, column: 33, scope: !16003)
!16007 = !DILocation(line: 7321, column: 23, scope: !16003)
!16008 = !DILocation(line: 7321, column: 40, scope: !16003)
!16009 = !DILocation(line: 7321, column: 51, scope: !16003)
!16010 = !DILocation(line: 7321, column: 62, scope: !16003)
!16011 = !DILocation(line: 7321, column: 70, scope: !16003)
!16012 = !DILocation(line: 7321, column: 11, scope: !16004)
!16013 = !DILocation(line: 7322, column: 24, scope: !16003)
!16014 = !DILocation(line: 7322, column: 11, scope: !16003)
!16015 = !DILocation(line: 7322, column: 9, scope: !16003)
!16016 = !DILocation(line: 7322, column: 2, scope: !16003)
!16017 = !DILocation(line: 7324, column: 11, scope: !16018)
!16018 = distinct !DILexicalBlock(scope: !16004, file: !3, line: 7324, column: 11)
!16019 = !DILocation(line: 7324, column: 26, scope: !16018)
!16020 = !DILocation(line: 7324, column: 38, scope: !16018)
!16021 = !DILocation(line: 7324, column: 41, scope: !16018)
!16022 = !DILocation(line: 7324, column: 59, scope: !16018)
!16023 = !DILocation(line: 7324, column: 56, scope: !16018)
!16024 = !DILocation(line: 7324, column: 11, scope: !16004)
!16025 = !DILocation(line: 7325, column: 23, scope: !16018)
!16026 = !DILocation(line: 7325, column: 29, scope: !16018)
!16027 = !DILocation(line: 7325, column: 45, scope: !16018)
!16028 = !DILocation(line: 7325, column: 8, scope: !16018)
!16029 = !DILocation(line: 7325, column: 6, scope: !16018)
!16030 = !DILocation(line: 7325, column: 2, scope: !16018)
!16031 = !DILocation(line: 7326, column: 22, scope: !16032)
!16032 = distinct !DILexicalBlock(scope: !16004, file: !3, line: 7326, column: 11)
!16033 = !DILocation(line: 7326, column: 12, scope: !16032)
!16034 = !DILocation(line: 7326, column: 29, scope: !16032)
!16035 = !DILocation(line: 7326, column: 40, scope: !16032)
!16036 = !DILocation(line: 7326, column: 51, scope: !16032)
!16037 = !DILocation(line: 7326, column: 56, scope: !16032)
!16038 = !DILocation(line: 7326, column: 11, scope: !16004)
!16039 = !DILocation(line: 7327, column: 19, scope: !16032)
!16040 = !DILocation(line: 7327, column: 25, scope: !16032)
!16041 = !DILocation(line: 7327, column: 8, scope: !16032)
!16042 = !DILocation(line: 7327, column: 6, scope: !16032)
!16043 = !DILocation(line: 7327, column: 2, scope: !16032)
!16044 = !DILocation(line: 7329, column: 14, scope: !16004)
!16045 = !DILocation(line: 7329, column: 31, scope: !16004)
!16046 = !DILocation(line: 7329, column: 39, scope: !16004)
!16047 = !DILocation(line: 7329, column: 44, scope: !16004)
!16048 = !DILocation(line: 7329, column: 12, scope: !16004)
!16049 = !DILocation(line: 7330, column: 11, scope: !16050)
!16050 = distinct !DILexicalBlock(scope: !16004, file: !3, line: 7330, column: 11)
!16051 = !DILocation(line: 7330, column: 11, scope: !16004)
!16052 = !DILocation(line: 7332, column: 15, scope: !16053)
!16053 = distinct !DILexicalBlock(scope: !16050, file: !3, line: 7331, column: 2)
!16054 = !DILocation(line: 7332, column: 4, scope: !16053)
!16055 = !DILocation(line: 7336, column: 8, scope: !16056)
!16056 = distinct !DILexicalBlock(scope: !16053, file: !3, line: 7336, column: 8)
!16057 = !DILocation(line: 7336, column: 8, scope: !16053)
!16058 = !DILocation(line: 7338, column: 13, scope: !16059)
!16059 = distinct !DILexicalBlock(scope: !16060, file: !3, line: 7338, column: 12)
!16060 = distinct !DILexicalBlock(scope: !16056, file: !3, line: 7337, column: 6)
!16061 = !DILocation(line: 7338, column: 12, scope: !16060)
!16062 = !DILocation(line: 7340, column: 9, scope: !16063)
!16063 = distinct !DILexicalBlock(scope: !16064, file: !3, line: 7340, column: 9)
!16064 = distinct !DILexicalBlock(scope: !16059, file: !3, line: 7339, column: 3)
!16065 = !DILocation(line: 7340, column: 14, scope: !16063)
!16066 = !DILocation(line: 7340, column: 9, scope: !16064)
!16067 = !DILocation(line: 7341, column: 12, scope: !16063)
!16068 = !DILocation(line: 7341, column: 7, scope: !16063)
!16069 = !DILocation(line: 7342, column: 14, scope: !16070)
!16070 = distinct !DILexicalBlock(scope: !16063, file: !3, line: 7342, column: 14)
!16071 = !DILocation(line: 7342, column: 19, scope: !16070)
!16072 = !DILocation(line: 7342, column: 14, scope: !16063)
!16073 = !DILocation(line: 7343, column: 12, scope: !16070)
!16074 = !DILocation(line: 7343, column: 7, scope: !16070)
!16075 = !DILocation(line: 7344, column: 3, scope: !16064)
!16076 = !DILocation(line: 7346, column: 12, scope: !16077)
!16077 = distinct !DILexicalBlock(scope: !16060, file: !3, line: 7346, column: 12)
!16078 = !DILocation(line: 7346, column: 17, scope: !16077)
!16079 = !DILocation(line: 7346, column: 12, scope: !16060)
!16080 = !DILocation(line: 7348, column: 35, scope: !16081)
!16081 = distinct !DILexicalBlock(scope: !16077, file: !3, line: 7347, column: 3)
!16082 = !DILocation(line: 7348, column: 46, scope: !16081)
!16083 = !DILocation(line: 7348, column: 54, scope: !16081)
!16084 = !DILocation(line: 7348, column: 14, scope: !16081)
!16085 = !DILocation(line: 7348, column: 12, scope: !16081)
!16086 = !DILocation(line: 7351, column: 34, scope: !16081)
!16087 = !DILocation(line: 7351, column: 40, scope: !16081)
!16088 = !DILocation(line: 7351, column: 46, scope: !16081)
!16089 = !DILocation(line: 7351, column: 14, scope: !16081)
!16090 = !DILocation(line: 7351, column: 12, scope: !16081)
!16091 = !DILocation(line: 7353, column: 3, scope: !16081)
!16092 = !DILocation(line: 7355, column: 33, scope: !16077)
!16093 = !DILocation(line: 7355, column: 39, scope: !16077)
!16094 = !DILocation(line: 7355, column: 45, scope: !16077)
!16095 = !DILocation(line: 7355, column: 53, scope: !16077)
!16096 = !DILocation(line: 7355, column: 12, scope: !16077)
!16097 = !DILocation(line: 7355, column: 10, scope: !16077)
!16098 = !DILocation(line: 7358, column: 6, scope: !16060)
!16099 = !DILocation(line: 7360, column: 11, scope: !16053)
!16100 = !DILocation(line: 7360, column: 4, scope: !16053)
!16101 = !DILocation(line: 7362, column: 5, scope: !16004)
!16102 = !DILocation(line: 7366, column: 29, scope: !16103)
!16103 = distinct !DILexicalBlock(scope: !15846, file: !3, line: 7366, column: 7)
!16104 = !DILocation(line: 7366, column: 7, scope: !16103)
!16105 = !DILocation(line: 7366, column: 35, scope: !16103)
!16106 = !DILocation(line: 7366, column: 7, scope: !15846)
!16107 = !DILocalVariable(name: "t0", scope: !16108, file: !3, line: 7368, type: !2732)
!16108 = distinct !DILexicalBlock(scope: !16103, file: !3, line: 7367, column: 5)
!16109 = !DILocation(line: 7368, column: 11, scope: !16108)
!16110 = !DILocation(line: 7368, column: 29, scope: !16108)
!16111 = !DILocation(line: 7368, column: 16, scope: !16108)
!16112 = !DILocalVariable(name: "t1", scope: !16108, file: !3, line: 7368, type: !2732)
!16113 = !DILocation(line: 7368, column: 36, scope: !16108)
!16114 = !DILocation(line: 7370, column: 12, scope: !16115)
!16115 = distinct !DILexicalBlock(scope: !16108, file: !3, line: 7370, column: 11)
!16116 = !DILocation(line: 7370, column: 19, scope: !16115)
!16117 = !DILocation(line: 7370, column: 41, scope: !16115)
!16118 = !DILocation(line: 7370, column: 49, scope: !16115)
!16119 = !DILocation(line: 7370, column: 23, scope: !16115)
!16120 = !DILocation(line: 7370, column: 11, scope: !16108)
!16121 = !DILocation(line: 7371, column: 24, scope: !16115)
!16122 = !DILocation(line: 7371, column: 11, scope: !16115)
!16123 = !DILocation(line: 7371, column: 9, scope: !16115)
!16124 = !DILocation(line: 7371, column: 2, scope: !16115)
!16125 = !DILocation(line: 7373, column: 7, scope: !16108)
!16126 = !DILocation(line: 7375, column: 12, scope: !16127)
!16127 = distinct !DILexicalBlock(scope: !16108, file: !3, line: 7375, column: 11)
!16128 = !DILocation(line: 7375, column: 11, scope: !16108)
!16129 = !DILocation(line: 7376, column: 18, scope: !16127)
!16130 = !DILocation(line: 7376, column: 26, scope: !16127)
!16131 = !DILocation(line: 7376, column: 2, scope: !16127)
!16132 = !DILocation(line: 7377, column: 12, scope: !16108)
!16133 = !DILocation(line: 7377, column: 10, scope: !16108)
!16134 = !DILocation(line: 7378, column: 11, scope: !16135)
!16135 = distinct !DILexicalBlock(scope: !16108, file: !3, line: 7378, column: 11)
!16136 = !DILocation(line: 7378, column: 16, scope: !16135)
!16137 = !DILocation(line: 7378, column: 11, scope: !16108)
!16138 = !DILocation(line: 7380, column: 30, scope: !16139)
!16139 = distinct !DILexicalBlock(scope: !16135, file: !3, line: 7379, column: 2)
!16140 = !DILocation(line: 7380, column: 41, scope: !16139)
!16141 = !DILocation(line: 7380, column: 45, scope: !16139)
!16142 = !DILocation(line: 7380, column: 9, scope: !16139)
!16143 = !DILocation(line: 7380, column: 7, scope: !16139)
!16144 = !DILocation(line: 7382, column: 29, scope: !16139)
!16145 = !DILocation(line: 7382, column: 35, scope: !16139)
!16146 = !DILocation(line: 7382, column: 41, scope: !16139)
!16147 = !DILocation(line: 7382, column: 9, scope: !16139)
!16148 = !DILocation(line: 7382, column: 7, scope: !16139)
!16149 = !DILocation(line: 7383, column: 2, scope: !16139)
!16150 = !DILocation(line: 7385, column: 28, scope: !16135)
!16151 = !DILocation(line: 7385, column: 34, scope: !16135)
!16152 = !DILocation(line: 7385, column: 40, scope: !16135)
!16153 = !DILocation(line: 7385, column: 44, scope: !16135)
!16154 = !DILocation(line: 7385, column: 7, scope: !16135)
!16155 = !DILocation(line: 7385, column: 5, scope: !16135)
!16156 = !DILocation(line: 7387, column: 11, scope: !16157)
!16157 = distinct !DILexicalBlock(scope: !16108, file: !3, line: 7387, column: 11)
!16158 = !DILocation(line: 7387, column: 11, scope: !16108)
!16159 = !DILocation(line: 7388, column: 18, scope: !16157)
!16160 = !DILocation(line: 7388, column: 26, scope: !16157)
!16161 = !DILocation(line: 7388, column: 2, scope: !16157)
!16162 = !DILocation(line: 7390, column: 14, scope: !16108)
!16163 = !DILocation(line: 7390, column: 12, scope: !16108)
!16164 = !DILocation(line: 7391, column: 7, scope: !16108)
!16165 = !DILocation(line: 7393, column: 11, scope: !16166)
!16166 = distinct !DILexicalBlock(scope: !16108, file: !3, line: 7393, column: 11)
!16167 = !DILocation(line: 7393, column: 14, scope: !16166)
!16168 = !DILocation(line: 7393, column: 22, scope: !16166)
!16169 = !DILocation(line: 7393, column: 55, scope: !16166)
!16170 = !DILocation(line: 7393, column: 60, scope: !16166)
!16171 = !DILocation(line: 7393, column: 64, scope: !16166)
!16172 = !DILocation(line: 7393, column: 68, scope: !16166)
!16173 = !DILocation(line: 7393, column: 25, scope: !16166)
!16174 = !DILocation(line: 7393, column: 11, scope: !16108)
!16175 = !DILocation(line: 7394, column: 9, scope: !16166)
!16176 = !DILocation(line: 7394, column: 2, scope: !16166)
!16177 = !DILocation(line: 7395, column: 5, scope: !16108)
!16178 = !DILocation(line: 7397, column: 3, scope: !15846)
!16179 = !DILocation(line: 7398, column: 1, scope: !15846)
!16180 = distinct !DISubprogram(name: "expand_sync_lock_test_and_set", scope: !3, file: !3, line: 7408, type: !10003, scopeLine: 7409, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16181 = !DILocalVariable(name: "mem", arg: 1, scope: !16180, file: !3, line: 7408, type: !2732)
!16182 = !DILocation(line: 7408, column: 36, scope: !16180)
!16183 = !DILocalVariable(name: "val", arg: 2, scope: !16180, file: !3, line: 7408, type: !2732)
!16184 = !DILocation(line: 7408, column: 45, scope: !16180)
!16185 = !DILocalVariable(name: "target", arg: 3, scope: !16180, file: !3, line: 7408, type: !2732)
!16186 = !DILocation(line: 7408, column: 54, scope: !16180)
!16187 = !DILocalVariable(name: "mode", scope: !16180, file: !3, line: 7410, type: !5)
!16188 = !DILocation(line: 7410, column: 21, scope: !16180)
!16189 = !DILocation(line: 7410, column: 28, scope: !16180)
!16190 = !DILocalVariable(name: "icode", scope: !16180, file: !3, line: 7411, type: !527)
!16191 = !DILocation(line: 7411, column: 18, scope: !16180)
!16192 = !DILocalVariable(name: "insn", scope: !16180, file: !3, line: 7412, type: !2732)
!16193 = !DILocation(line: 7412, column: 7, scope: !16180)
!16194 = !DILocation(line: 7415, column: 34, scope: !16180)
!16195 = !DILocation(line: 7415, column: 11, scope: !16180)
!16196 = !DILocation(line: 7415, column: 9, scope: !16180)
!16197 = !DILocation(line: 7416, column: 7, scope: !16198)
!16198 = distinct !DILexicalBlock(scope: !16180, file: !3, line: 7416, column: 7)
!16199 = !DILocation(line: 7416, column: 13, scope: !16198)
!16200 = !DILocation(line: 7416, column: 7, scope: !16180)
!16201 = !DILocation(line: 7418, column: 12, scope: !16202)
!16202 = distinct !DILexicalBlock(scope: !16203, file: !3, line: 7418, column: 11)
!16203 = distinct !DILexicalBlock(scope: !16198, file: !3, line: 7417, column: 5)
!16204 = !DILocation(line: 7418, column: 19, scope: !16202)
!16205 = !DILocation(line: 7418, column: 33, scope: !16202)
!16206 = !DILocation(line: 7418, column: 23, scope: !16202)
!16207 = !DILocation(line: 7418, column: 40, scope: !16202)
!16208 = !DILocation(line: 7418, column: 51, scope: !16202)
!16209 = !DILocation(line: 7418, column: 62, scope: !16202)
!16210 = !DILocation(line: 7418, column: 70, scope: !16202)
!16211 = !DILocation(line: 7418, column: 11, scope: !16203)
!16212 = !DILocation(line: 7419, column: 24, scope: !16202)
!16213 = !DILocation(line: 7419, column: 11, scope: !16202)
!16214 = !DILocation(line: 7419, column: 9, scope: !16202)
!16215 = !DILocation(line: 7419, column: 2, scope: !16202)
!16216 = !DILocation(line: 7421, column: 11, scope: !16217)
!16217 = distinct !DILexicalBlock(scope: !16203, file: !3, line: 7421, column: 11)
!16218 = !DILocation(line: 7421, column: 26, scope: !16217)
!16219 = !DILocation(line: 7421, column: 38, scope: !16217)
!16220 = !DILocation(line: 7421, column: 41, scope: !16217)
!16221 = !DILocation(line: 7421, column: 59, scope: !16217)
!16222 = !DILocation(line: 7421, column: 56, scope: !16217)
!16223 = !DILocation(line: 7421, column: 11, scope: !16203)
!16224 = !DILocation(line: 7422, column: 23, scope: !16217)
!16225 = !DILocation(line: 7422, column: 29, scope: !16217)
!16226 = !DILocation(line: 7422, column: 45, scope: !16217)
!16227 = !DILocation(line: 7422, column: 8, scope: !16217)
!16228 = !DILocation(line: 7422, column: 6, scope: !16217)
!16229 = !DILocation(line: 7422, column: 2, scope: !16217)
!16230 = !DILocation(line: 7423, column: 22, scope: !16231)
!16231 = distinct !DILexicalBlock(scope: !16203, file: !3, line: 7423, column: 11)
!16232 = !DILocation(line: 7423, column: 12, scope: !16231)
!16233 = !DILocation(line: 7423, column: 29, scope: !16231)
!16234 = !DILocation(line: 7423, column: 40, scope: !16231)
!16235 = !DILocation(line: 7423, column: 51, scope: !16231)
!16236 = !DILocation(line: 7423, column: 56, scope: !16231)
!16237 = !DILocation(line: 7423, column: 11, scope: !16203)
!16238 = !DILocation(line: 7424, column: 19, scope: !16231)
!16239 = !DILocation(line: 7424, column: 25, scope: !16231)
!16240 = !DILocation(line: 7424, column: 8, scope: !16231)
!16241 = !DILocation(line: 7424, column: 6, scope: !16231)
!16242 = !DILocation(line: 7424, column: 2, scope: !16231)
!16243 = !DILocation(line: 7426, column: 14, scope: !16203)
!16244 = !DILocation(line: 7426, column: 31, scope: !16203)
!16245 = !DILocation(line: 7426, column: 39, scope: !16203)
!16246 = !DILocation(line: 7426, column: 44, scope: !16203)
!16247 = !DILocation(line: 7426, column: 12, scope: !16203)
!16248 = !DILocation(line: 7427, column: 11, scope: !16249)
!16249 = distinct !DILexicalBlock(scope: !16203, file: !3, line: 7427, column: 11)
!16250 = !DILocation(line: 7427, column: 11, scope: !16203)
!16251 = !DILocation(line: 7429, column: 15, scope: !16252)
!16252 = distinct !DILexicalBlock(scope: !16249, file: !3, line: 7428, column: 2)
!16253 = !DILocation(line: 7429, column: 4, scope: !16252)
!16254 = !DILocation(line: 7430, column: 11, scope: !16252)
!16255 = !DILocation(line: 7430, column: 4, scope: !16252)
!16256 = !DILocation(line: 7432, column: 5, scope: !16203)
!16257 = !DILocation(line: 7435, column: 29, scope: !16258)
!16258 = distinct !DILexicalBlock(scope: !16180, file: !3, line: 7435, column: 7)
!16259 = !DILocation(line: 7435, column: 7, scope: !16258)
!16260 = !DILocation(line: 7435, column: 35, scope: !16258)
!16261 = !DILocation(line: 7435, column: 7, scope: !16180)
!16262 = !DILocation(line: 7437, column: 12, scope: !16263)
!16263 = distinct !DILexicalBlock(scope: !16264, file: !3, line: 7437, column: 11)
!16264 = distinct !DILexicalBlock(scope: !16258, file: !3, line: 7436, column: 5)
!16265 = !DILocation(line: 7437, column: 19, scope: !16263)
!16266 = !DILocation(line: 7437, column: 41, scope: !16263)
!16267 = !DILocation(line: 7437, column: 49, scope: !16263)
!16268 = !DILocation(line: 7437, column: 23, scope: !16263)
!16269 = !DILocation(line: 7437, column: 11, scope: !16264)
!16270 = !DILocation(line: 7438, column: 24, scope: !16263)
!16271 = !DILocation(line: 7438, column: 11, scope: !16263)
!16272 = !DILocation(line: 7438, column: 9, scope: !16263)
!16273 = !DILocation(line: 7438, column: 2, scope: !16263)
!16274 = !DILocation(line: 7439, column: 11, scope: !16275)
!16275 = distinct !DILexicalBlock(scope: !16264, file: !3, line: 7439, column: 11)
!16276 = !DILocation(line: 7439, column: 26, scope: !16275)
!16277 = !DILocation(line: 7439, column: 38, scope: !16275)
!16278 = !DILocation(line: 7439, column: 41, scope: !16275)
!16279 = !DILocation(line: 7439, column: 59, scope: !16275)
!16280 = !DILocation(line: 7439, column: 56, scope: !16275)
!16281 = !DILocation(line: 7439, column: 11, scope: !16264)
!16282 = !DILocation(line: 7440, column: 23, scope: !16275)
!16283 = !DILocation(line: 7440, column: 29, scope: !16275)
!16284 = !DILocation(line: 7440, column: 45, scope: !16275)
!16285 = !DILocation(line: 7440, column: 8, scope: !16275)
!16286 = !DILocation(line: 7440, column: 6, scope: !16275)
!16287 = !DILocation(line: 7440, column: 2, scope: !16275)
!16288 = !DILocation(line: 7441, column: 41, scope: !16289)
!16289 = distinct !DILexicalBlock(scope: !16264, file: !3, line: 7441, column: 11)
!16290 = !DILocation(line: 7441, column: 46, scope: !16289)
!16291 = !DILocation(line: 7441, column: 54, scope: !16289)
!16292 = !DILocation(line: 7441, column: 11, scope: !16289)
!16293 = !DILocation(line: 7441, column: 11, scope: !16264)
!16294 = !DILocation(line: 7442, column: 9, scope: !16289)
!16295 = !DILocation(line: 7442, column: 2, scope: !16289)
!16296 = !DILocation(line: 7443, column: 5, scope: !16264)
!16297 = !DILocation(line: 7445, column: 3, scope: !16180)
!16298 = !DILocation(line: 7446, column: 1, scope: !16180)
!16299 = distinct !DISubprogram(name: "gt_ggc_mx_libfunc_entry", scope: !3896, file: !3896, line: 23, type: !3204, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16300 = !DILocalVariable(name: "x_p", arg: 1, scope: !16299, file: !3896, line: 23, type: !2843)
!16301 = !DILocation(line: 23, column: 32, scope: !16299)
!16302 = !DILocalVariable(name: "x", scope: !16299, file: !3896, line: 25, type: !16303)
!16303 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2725)
!16304 = !DILocation(line: 25, column: 32, scope: !16299)
!16305 = !DILocation(line: 25, column: 60, scope: !16299)
!16306 = !DILocation(line: 25, column: 36, scope: !16299)
!16307 = !DILocation(line: 26, column: 7, scope: !16308)
!16308 = distinct !DILexicalBlock(scope: !16299, file: !3896, line: 26, column: 7)
!16309 = !DILocation(line: 26, column: 7, scope: !16299)
!16310 = !DILocation(line: 28, column: 7, scope: !16311)
!16311 = distinct !DILexicalBlock(scope: !16308, file: !3896, line: 27, column: 5)
!16312 = !DILocation(line: 28, column: 7, scope: !16313)
!16313 = distinct !DILexicalBlock(scope: !16314, file: !3896, line: 28, column: 7)
!16314 = distinct !DILexicalBlock(scope: !16311, file: !3896, line: 28, column: 7)
!16315 = !DILocation(line: 28, column: 7, scope: !16314)
!16316 = !DILocation(line: 29, column: 5, scope: !16311)
!16317 = !DILocation(line: 30, column: 1, scope: !16299)
!16318 = distinct !DISubprogram(name: "gt_ggc_m_P13libfunc_entry4htab", scope: !3896, file: !3896, line: 33, type: !3204, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16319 = !DILocalVariable(name: "x_p", arg: 1, scope: !16318, file: !3896, line: 33, type: !2843)
!16320 = !DILocation(line: 33, column: 39, scope: !16318)
!16321 = !DILocalVariable(name: "x", scope: !16318, file: !3896, line: 35, type: !16322)
!16322 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3185)
!16323 = !DILocation(line: 35, column: 23, scope: !16318)
!16324 = !DILocation(line: 35, column: 42, scope: !16318)
!16325 = !DILocation(line: 35, column: 27, scope: !16318)
!16326 = !DILocation(line: 36, column: 7, scope: !16327)
!16327 = distinct !DILexicalBlock(scope: !16318, file: !3896, line: 36, column: 7)
!16328 = !DILocation(line: 36, column: 7, scope: !16318)
!16329 = !DILocation(line: 38, column: 13, scope: !16330)
!16330 = distinct !DILexicalBlock(scope: !16331, file: !3896, line: 38, column: 11)
!16331 = distinct !DILexicalBlock(scope: !16327, file: !3896, line: 37, column: 5)
!16332 = !DILocation(line: 38, column: 16, scope: !16330)
!16333 = !DILocation(line: 38, column: 24, scope: !16330)
!16334 = !DILocation(line: 38, column: 11, scope: !16331)
!16335 = !DILocalVariable(name: "i0", scope: !16336, file: !3896, line: 39, type: !2721)
!16336 = distinct !DILexicalBlock(scope: !16330, file: !3896, line: 38, column: 33)
!16337 = !DILocation(line: 39, column: 16, scope: !16336)
!16338 = !DILocation(line: 40, column: 17, scope: !16339)
!16339 = distinct !DILexicalBlock(scope: !16336, file: !3896, line: 40, column: 9)
!16340 = !DILocation(line: 40, column: 14, scope: !16339)
!16341 = !DILocation(line: 40, column: 22, scope: !16342)
!16342 = distinct !DILexicalBlock(scope: !16339, file: !3896, line: 40, column: 9)
!16343 = !DILocation(line: 40, column: 40, scope: !16342)
!16344 = !DILocation(line: 40, column: 44, scope: !16342)
!16345 = !DILocation(line: 40, column: 25, scope: !16342)
!16346 = !DILocation(line: 40, column: 9, scope: !16339)
!16347 = !DILocation(line: 41, column: 11, scope: !16348)
!16348 = distinct !DILexicalBlock(scope: !16342, file: !3896, line: 40, column: 57)
!16349 = !DILocation(line: 41, column: 11, scope: !16350)
!16350 = distinct !DILexicalBlock(scope: !16351, file: !3896, line: 41, column: 11)
!16351 = distinct !DILexicalBlock(scope: !16348, file: !3896, line: 41, column: 11)
!16352 = !DILocation(line: 41, column: 11, scope: !16351)
!16353 = !DILocation(line: 42, column: 9, scope: !16348)
!16354 = !DILocation(line: 40, column: 53, scope: !16342)
!16355 = !DILocation(line: 40, column: 9, scope: !16342)
!16356 = distinct !{!16356, !16346, !16357}
!16357 = !DILocation(line: 42, column: 9, scope: !16339)
!16358 = !DILocation(line: 43, column: 9, scope: !16336)
!16359 = !DILocalVariable(name: "a__", scope: !16360, file: !3896, line: 43, type: !16361)
!16360 = distinct !DILexicalBlock(scope: !16336, file: !3896, line: 43, column: 9)
!16361 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3194)
!16362 = !DILocation(line: 43, column: 9, scope: !16360)
!16363 = !DILocation(line: 43, column: 9, scope: !16364)
!16364 = distinct !DILexicalBlock(scope: !16360, file: !3896, line: 43, column: 9)
!16365 = !DILocation(line: 44, column: 7, scope: !16336)
!16366 = !DILocation(line: 45, column: 5, scope: !16331)
!16367 = !DILocation(line: 46, column: 1, scope: !16318)
!16368 = distinct !DISubprogram(name: "gt_pch_nx_libfunc_entry", scope: !3896, file: !3896, line: 49, type: !3204, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16369 = !DILocalVariable(name: "x_p", arg: 1, scope: !16368, file: !3896, line: 49, type: !2843)
!16370 = !DILocation(line: 49, column: 32, scope: !16368)
!16371 = !DILocalVariable(name: "x", scope: !16368, file: !3896, line: 51, type: !16303)
!16372 = !DILocation(line: 51, column: 32, scope: !16368)
!16373 = !DILocation(line: 51, column: 60, scope: !16368)
!16374 = !DILocation(line: 51, column: 36, scope: !16368)
!16375 = !DILocation(line: 52, column: 27, scope: !16376)
!16376 = distinct !DILexicalBlock(scope: !16368, file: !3896, line: 52, column: 7)
!16377 = !DILocation(line: 52, column: 30, scope: !16376)
!16378 = !DILocation(line: 52, column: 7, scope: !16376)
!16379 = !DILocation(line: 52, column: 7, scope: !16368)
!16380 = !DILocation(line: 54, column: 7, scope: !16381)
!16381 = distinct !DILexicalBlock(scope: !16376, file: !3896, line: 53, column: 5)
!16382 = !DILocation(line: 54, column: 7, scope: !16383)
!16383 = distinct !DILexicalBlock(scope: !16384, file: !3896, line: 54, column: 7)
!16384 = distinct !DILexicalBlock(scope: !16381, file: !3896, line: 54, column: 7)
!16385 = !DILocation(line: 54, column: 7, scope: !16384)
!16386 = !DILocation(line: 55, column: 5, scope: !16381)
!16387 = !DILocation(line: 56, column: 1, scope: !16368)
!16388 = distinct !DISubprogram(name: "gt_pch_p_13libfunc_entry", scope: !3896, file: !3896, line: 75, type: !16389, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16389 = !DISubroutineType(types: !16390)
!16390 = !{null, !2843, !2843, !16391, !2843}
!16391 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !3900, line: 38, baseType: !3228)
!16392 = !DILocalVariable(name: "this_obj", arg: 1, scope: !16388, file: !3896, line: 75, type: !2843)
!16393 = !DILocation(line: 75, column: 50, scope: !16388)
!16394 = !DILocalVariable(name: "x_p", arg: 2, scope: !16388, file: !3896, line: 76, type: !2843)
!16395 = !DILocation(line: 76, column: 8, scope: !16388)
!16396 = !DILocalVariable(name: "op", arg: 3, scope: !16388, file: !3896, line: 77, type: !16391)
!16397 = !DILocation(line: 77, column: 39, scope: !16388)
!16398 = !DILocalVariable(name: "cookie", arg: 4, scope: !16388, file: !3896, line: 78, type: !2843)
!16399 = !DILocation(line: 78, column: 25, scope: !16388)
!16400 = !DILocalVariable(name: "x", scope: !16388, file: !3896, line: 80, type: !16303)
!16401 = !DILocation(line: 80, column: 32, scope: !16388)
!16402 = !DILocation(line: 80, column: 77, scope: !16388)
!16403 = !DILocation(line: 80, column: 53, scope: !16388)
!16404 = !DILocation(line: 81, column: 16, scope: !16405)
!16405 = distinct !DILexicalBlock(scope: !16388, file: !3896, line: 81, column: 7)
!16406 = !DILocation(line: 81, column: 7, scope: !16405)
!16407 = !DILocation(line: 81, column: 22, scope: !16405)
!16408 = !DILocation(line: 81, column: 19, scope: !16405)
!16409 = !DILocation(line: 81, column: 7, scope: !16388)
!16410 = !DILocation(line: 82, column: 5, scope: !16405)
!16411 = !DILocation(line: 82, column: 13, scope: !16405)
!16412 = !DILocation(line: 82, column: 16, scope: !16405)
!16413 = !DILocation(line: 82, column: 9, scope: !16405)
!16414 = !DILocation(line: 82, column: 26, scope: !16405)
!16415 = !DILocation(line: 83, column: 1, scope: !16388)
!16416 = distinct !DISubprogram(name: "gt_pch_n_P13libfunc_entry4htab", scope: !3896, file: !3896, line: 59, type: !3204, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16417 = !DILocalVariable(name: "x_p", arg: 1, scope: !16416, file: !3896, line: 59, type: !2843)
!16418 = !DILocation(line: 59, column: 39, scope: !16416)
!16419 = !DILocalVariable(name: "x", scope: !16416, file: !3896, line: 61, type: !16322)
!16420 = !DILocation(line: 61, column: 23, scope: !16416)
!16421 = !DILocation(line: 61, column: 42, scope: !16416)
!16422 = !DILocation(line: 61, column: 27, scope: !16416)
!16423 = !DILocation(line: 62, column: 27, scope: !16424)
!16424 = distinct !DILexicalBlock(scope: !16416, file: !3896, line: 62, column: 7)
!16425 = !DILocation(line: 62, column: 30, scope: !16424)
!16426 = !DILocation(line: 62, column: 7, scope: !16424)
!16427 = !DILocation(line: 62, column: 7, scope: !16416)
!16428 = !DILocation(line: 64, column: 13, scope: !16429)
!16429 = distinct !DILexicalBlock(scope: !16430, file: !3896, line: 64, column: 11)
!16430 = distinct !DILexicalBlock(scope: !16424, file: !3896, line: 63, column: 5)
!16431 = !DILocation(line: 64, column: 16, scope: !16429)
!16432 = !DILocation(line: 64, column: 24, scope: !16429)
!16433 = !DILocation(line: 64, column: 11, scope: !16430)
!16434 = !DILocalVariable(name: "i0", scope: !16435, file: !3896, line: 65, type: !2721)
!16435 = distinct !DILexicalBlock(scope: !16429, file: !3896, line: 64, column: 33)
!16436 = !DILocation(line: 65, column: 16, scope: !16435)
!16437 = !DILocation(line: 66, column: 17, scope: !16438)
!16438 = distinct !DILexicalBlock(scope: !16435, file: !3896, line: 66, column: 9)
!16439 = !DILocation(line: 66, column: 14, scope: !16438)
!16440 = !DILocation(line: 66, column: 22, scope: !16441)
!16441 = distinct !DILexicalBlock(scope: !16438, file: !3896, line: 66, column: 9)
!16442 = !DILocation(line: 66, column: 40, scope: !16441)
!16443 = !DILocation(line: 66, column: 44, scope: !16441)
!16444 = !DILocation(line: 66, column: 25, scope: !16441)
!16445 = !DILocation(line: 66, column: 9, scope: !16438)
!16446 = !DILocation(line: 67, column: 11, scope: !16447)
!16447 = distinct !DILexicalBlock(scope: !16441, file: !3896, line: 66, column: 57)
!16448 = !DILocation(line: 67, column: 11, scope: !16449)
!16449 = distinct !DILexicalBlock(scope: !16450, file: !3896, line: 67, column: 11)
!16450 = distinct !DILexicalBlock(scope: !16447, file: !3896, line: 67, column: 11)
!16451 = !DILocation(line: 67, column: 11, scope: !16450)
!16452 = !DILocation(line: 68, column: 9, scope: !16447)
!16453 = !DILocation(line: 66, column: 53, scope: !16441)
!16454 = !DILocation(line: 66, column: 9, scope: !16441)
!16455 = distinct !{!16455, !16445, !16456}
!16456 = !DILocation(line: 68, column: 9, scope: !16438)
!16457 = !DILocation(line: 69, column: 31, scope: !16435)
!16458 = !DILocation(line: 69, column: 34, scope: !16435)
!16459 = !DILocation(line: 69, column: 29, scope: !16435)
!16460 = !DILocation(line: 69, column: 43, scope: !16435)
!16461 = !DILocation(line: 69, column: 9, scope: !16435)
!16462 = !DILocation(line: 70, column: 7, scope: !16435)
!16463 = !DILocation(line: 71, column: 5, scope: !16430)
!16464 = !DILocation(line: 72, column: 1, scope: !16416)
!16465 = distinct !DISubprogram(name: "gt_pch_p_P13libfunc_entry4htab", scope: !3896, file: !3896, line: 86, type: !16389, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16466 = !DILocalVariable(name: "this_obj", arg: 1, scope: !16465, file: !3896, line: 86, type: !2843)
!16467 = !DILocation(line: 86, column: 56, scope: !16465)
!16468 = !DILocalVariable(name: "x_p", arg: 2, scope: !16465, file: !3896, line: 87, type: !2843)
!16469 = !DILocation(line: 87, column: 8, scope: !16465)
!16470 = !DILocalVariable(name: "op", arg: 3, scope: !16465, file: !3896, line: 88, type: !16391)
!16471 = !DILocation(line: 88, column: 39, scope: !16465)
!16472 = !DILocalVariable(name: "cookie", arg: 4, scope: !16465, file: !3896, line: 89, type: !2843)
!16473 = !DILocation(line: 89, column: 25, scope: !16465)
!16474 = !DILocalVariable(name: "x", scope: !16465, file: !3896, line: 91, type: !16322)
!16475 = !DILocation(line: 91, column: 23, scope: !16465)
!16476 = !DILocation(line: 91, column: 59, scope: !16465)
!16477 = !DILocation(line: 91, column: 44, scope: !16465)
!16478 = !DILocation(line: 92, column: 9, scope: !16479)
!16479 = distinct !DILexicalBlock(scope: !16465, file: !3896, line: 92, column: 7)
!16480 = !DILocation(line: 92, column: 12, scope: !16479)
!16481 = !DILocation(line: 92, column: 20, scope: !16479)
!16482 = !DILocation(line: 92, column: 7, scope: !16465)
!16483 = !DILocalVariable(name: "i0", scope: !16484, file: !3896, line: 93, type: !2721)
!16484 = distinct !DILexicalBlock(scope: !16479, file: !3896, line: 92, column: 29)
!16485 = !DILocation(line: 93, column: 12, scope: !16484)
!16486 = !DILocation(line: 94, column: 13, scope: !16487)
!16487 = distinct !DILexicalBlock(scope: !16484, file: !3896, line: 94, column: 5)
!16488 = !DILocation(line: 94, column: 10, scope: !16487)
!16489 = !DILocation(line: 94, column: 18, scope: !16490)
!16490 = distinct !DILexicalBlock(scope: !16487, file: !3896, line: 94, column: 5)
!16491 = !DILocation(line: 94, column: 36, scope: !16490)
!16492 = !DILocation(line: 94, column: 40, scope: !16490)
!16493 = !DILocation(line: 94, column: 21, scope: !16490)
!16494 = !DILocation(line: 94, column: 5, scope: !16487)
!16495 = !DILocation(line: 95, column: 22, scope: !16496)
!16496 = distinct !DILexicalBlock(scope: !16497, file: !3896, line: 95, column: 11)
!16497 = distinct !DILexicalBlock(scope: !16490, file: !3896, line: 94, column: 53)
!16498 = !DILocation(line: 95, column: 25, scope: !16496)
!16499 = !DILocation(line: 95, column: 11, scope: !16496)
!16500 = !DILocation(line: 95, column: 37, scope: !16496)
!16501 = !DILocation(line: 95, column: 34, scope: !16496)
!16502 = !DILocation(line: 95, column: 11, scope: !16497)
!16503 = !DILocation(line: 96, column: 9, scope: !16496)
!16504 = !DILocation(line: 96, column: 17, scope: !16496)
!16505 = !DILocation(line: 96, column: 20, scope: !16496)
!16506 = !DILocation(line: 96, column: 28, scope: !16496)
!16507 = !DILocation(line: 96, column: 15, scope: !16496)
!16508 = !DILocation(line: 96, column: 13, scope: !16496)
!16509 = !DILocation(line: 96, column: 34, scope: !16496)
!16510 = !DILocation(line: 97, column: 5, scope: !16497)
!16511 = !DILocation(line: 94, column: 49, scope: !16490)
!16512 = !DILocation(line: 94, column: 5, scope: !16490)
!16513 = distinct !{!16513, !16494, !16514}
!16514 = !DILocation(line: 97, column: 5, scope: !16487)
!16515 = !DILocation(line: 98, column: 18, scope: !16516)
!16516 = distinct !DILexicalBlock(scope: !16484, file: !3896, line: 98, column: 9)
!16517 = !DILocation(line: 98, column: 9, scope: !16516)
!16518 = !DILocation(line: 98, column: 24, scope: !16516)
!16519 = !DILocation(line: 98, column: 21, scope: !16516)
!16520 = !DILocation(line: 98, column: 9, scope: !16484)
!16521 = !DILocation(line: 99, column: 7, scope: !16516)
!16522 = !DILocation(line: 99, column: 15, scope: !16516)
!16523 = !DILocation(line: 99, column: 18, scope: !16516)
!16524 = !DILocation(line: 99, column: 11, scope: !16516)
!16525 = !DILocation(line: 99, column: 28, scope: !16516)
!16526 = !DILocation(line: 100, column: 3, scope: !16484)
!16527 = !DILocation(line: 101, column: 1, scope: !16465)
!16528 = distinct !DISubprogram(name: "expand_superword_shift", scope: !3, file: !3, line: 839, type: !16529, scopeLine: 842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16529 = !DISubroutineType(types: !16530)
!16530 = !{!2966, !3938, !2732, !2732, !2732, !2732, !2756, !2214}
!16531 = !DILocalVariable(name: "binoptab", arg: 1, scope: !16528, file: !3, line: 839, type: !3938)
!16532 = !DILocation(line: 839, column: 31, scope: !16528)
!16533 = !DILocalVariable(name: "outof_input", arg: 2, scope: !16528, file: !3, line: 839, type: !2732)
!16534 = !DILocation(line: 839, column: 45, scope: !16528)
!16535 = !DILocalVariable(name: "superword_op1", arg: 3, scope: !16528, file: !3, line: 839, type: !2732)
!16536 = !DILocation(line: 839, column: 62, scope: !16528)
!16537 = !DILocalVariable(name: "outof_target", arg: 4, scope: !16528, file: !3, line: 840, type: !2732)
!16538 = !DILocation(line: 840, column: 8, scope: !16528)
!16539 = !DILocalVariable(name: "into_target", arg: 5, scope: !16528, file: !3, line: 840, type: !2732)
!16540 = !DILocation(line: 840, column: 26, scope: !16528)
!16541 = !DILocalVariable(name: "unsignedp", arg: 6, scope: !16528, file: !3, line: 841, type: !2756)
!16542 = !DILocation(line: 841, column: 8, scope: !16528)
!16543 = !DILocalVariable(name: "methods", arg: 7, scope: !16528, file: !3, line: 841, type: !2214)
!16544 = !DILocation(line: 841, column: 38, scope: !16528)
!16545 = !DILocation(line: 843, column: 7, scope: !16546)
!16546 = distinct !DILexicalBlock(scope: !16528, file: !3, line: 843, column: 7)
!16547 = !DILocation(line: 843, column: 19, scope: !16546)
!16548 = !DILocation(line: 843, column: 7, scope: !16528)
!16549 = !DILocation(line: 844, column: 30, scope: !16550)
!16550 = distinct !DILexicalBlock(scope: !16546, file: !3, line: 844, column: 9)
!16551 = !DILocation(line: 844, column: 41, scope: !16550)
!16552 = !DILocation(line: 844, column: 51, scope: !16550)
!16553 = !DILocation(line: 844, column: 64, scope: !16550)
!16554 = !DILocation(line: 845, column: 9, scope: !16550)
!16555 = !DILocation(line: 845, column: 22, scope: !16550)
!16556 = !DILocation(line: 845, column: 33, scope: !16550)
!16557 = !DILocation(line: 844, column: 10, scope: !16550)
!16558 = !DILocation(line: 844, column: 9, scope: !16546)
!16559 = !DILocation(line: 846, column: 7, scope: !16550)
!16560 = !DILocation(line: 845, column: 40, scope: !16550)
!16561 = !DILocation(line: 848, column: 7, scope: !16562)
!16562 = distinct !DILexicalBlock(scope: !16528, file: !3, line: 848, column: 7)
!16563 = !DILocation(line: 848, column: 20, scope: !16562)
!16564 = !DILocation(line: 848, column: 7, scope: !16528)
!16565 = !DILocation(line: 852, column: 11, scope: !16566)
!16566 = distinct !DILexicalBlock(scope: !16567, file: !3, line: 852, column: 11)
!16567 = distinct !DILexicalBlock(scope: !16562, file: !3, line: 849, column: 5)
!16568 = !DILocation(line: 852, column: 20, scope: !16566)
!16569 = !DILocation(line: 852, column: 11, scope: !16567)
!16570 = !DILocation(line: 853, column: 18, scope: !16566)
!16571 = !DILocation(line: 853, column: 32, scope: !16566)
!16572 = !DILocation(line: 853, column: 2, scope: !16566)
!16573 = !DILocation(line: 855, column: 27, scope: !16574)
!16574 = distinct !DILexicalBlock(scope: !16566, file: !3, line: 855, column: 6)
!16575 = !DILocation(line: 855, column: 38, scope: !16574)
!16576 = !DILocation(line: 856, column: 6, scope: !16574)
!16577 = !DILocation(line: 856, column: 19, scope: !16574)
!16578 = !DILocation(line: 857, column: 6, scope: !16574)
!16579 = !DILocation(line: 857, column: 20, scope: !16574)
!16580 = !DILocation(line: 857, column: 31, scope: !16574)
!16581 = !DILocation(line: 855, column: 7, scope: !16574)
!16582 = !DILocation(line: 855, column: 6, scope: !16566)
!16583 = !DILocation(line: 858, column: 4, scope: !16574)
!16584 = !DILocation(line: 859, column: 5, scope: !16567)
!16585 = !DILocation(line: 860, column: 3, scope: !16528)
!16586 = !DILocation(line: 861, column: 1, scope: !16528)
!16587 = distinct !DISubprogram(name: "expand_subword_shift", scope: !3, file: !3, line: 868, type: !6897, scopeLine: 873, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16588 = !DILocalVariable(name: "op1_mode", arg: 1, scope: !16587, file: !3, line: 868, type: !5)
!16589 = !DILocation(line: 868, column: 41, scope: !16587)
!16590 = !DILocalVariable(name: "binoptab", arg: 2, scope: !16587, file: !3, line: 868, type: !3938)
!16591 = !DILocation(line: 868, column: 57, scope: !16587)
!16592 = !DILocalVariable(name: "outof_input", arg: 3, scope: !16587, file: !3, line: 869, type: !2732)
!16593 = !DILocation(line: 869, column: 13, scope: !16587)
!16594 = !DILocalVariable(name: "into_input", arg: 4, scope: !16587, file: !3, line: 869, type: !2732)
!16595 = !DILocation(line: 869, column: 30, scope: !16587)
!16596 = !DILocalVariable(name: "op1", arg: 5, scope: !16587, file: !3, line: 869, type: !2732)
!16597 = !DILocation(line: 869, column: 46, scope: !16587)
!16598 = !DILocalVariable(name: "outof_target", arg: 6, scope: !16587, file: !3, line: 870, type: !2732)
!16599 = !DILocation(line: 870, column: 13, scope: !16587)
!16600 = !DILocalVariable(name: "into_target", arg: 7, scope: !16587, file: !3, line: 870, type: !2732)
!16601 = !DILocation(line: 870, column: 31, scope: !16587)
!16602 = !DILocalVariable(name: "unsignedp", arg: 8, scope: !16587, file: !3, line: 871, type: !2756)
!16603 = !DILocation(line: 871, column: 13, scope: !16587)
!16604 = !DILocalVariable(name: "methods", arg: 9, scope: !16587, file: !3, line: 871, type: !2214)
!16605 = !DILocation(line: 871, column: 43, scope: !16587)
!16606 = !DILocalVariable(name: "shift_mask", arg: 10, scope: !16587, file: !3, line: 872, type: !2723)
!16607 = !DILocation(line: 872, column: 32, scope: !16587)
!16608 = !DILocalVariable(name: "reverse_unsigned_shift", scope: !16587, file: !3, line: 874, type: !3938)
!16609 = !DILocation(line: 874, column: 9, scope: !16587)
!16610 = !DILocalVariable(name: "unsigned_shift", scope: !16587, file: !3, line: 874, type: !3938)
!16611 = !DILocation(line: 874, column: 33, scope: !16587)
!16612 = !DILocalVariable(name: "tmp", scope: !16587, file: !3, line: 875, type: !2732)
!16613 = !DILocation(line: 875, column: 7, scope: !16587)
!16614 = !DILocalVariable(name: "carries", scope: !16587, file: !3, line: 875, type: !2732)
!16615 = !DILocation(line: 875, column: 12, scope: !16587)
!16616 = !DILocation(line: 877, column: 29, scope: !16587)
!16617 = !DILocation(line: 877, column: 38, scope: !16587)
!16618 = !DILocation(line: 877, column: 26, scope: !16587)
!16619 = !DILocation(line: 878, column: 21, scope: !16587)
!16620 = !DILocation(line: 878, column: 30, scope: !16587)
!16621 = !DILocation(line: 878, column: 18, scope: !16587)
!16622 = !DILocation(line: 883, column: 7, scope: !16623)
!16623 = distinct !DILexicalBlock(scope: !16587, file: !3, line: 883, column: 7)
!16624 = !DILocation(line: 883, column: 24, scope: !16623)
!16625 = !DILocation(line: 883, column: 27, scope: !16623)
!16626 = !DILocation(line: 883, column: 38, scope: !16623)
!16627 = !DILocation(line: 883, column: 7, scope: !16587)
!16628 = !DILocation(line: 885, column: 17, scope: !16629)
!16629 = distinct !DILexicalBlock(scope: !16623, file: !3, line: 884, column: 5)
!16630 = !DILocation(line: 885, column: 15, scope: !16629)
!16631 = !DILocation(line: 886, column: 51, scope: !16629)
!16632 = !DILocation(line: 886, column: 13, scope: !16629)
!16633 = !DILocation(line: 886, column: 11, scope: !16629)
!16634 = !DILocation(line: 887, column: 36, scope: !16629)
!16635 = !DILocation(line: 887, column: 57, scope: !16629)
!16636 = !DILocation(line: 887, column: 62, scope: !16629)
!16637 = !DILocation(line: 888, column: 17, scope: !16629)
!16638 = !DILocation(line: 887, column: 13, scope: !16629)
!16639 = !DILocation(line: 887, column: 11, scope: !16629)
!16640 = !DILocation(line: 889, column: 5, scope: !16629)
!16641 = !DILocation(line: 897, column: 31, scope: !16642)
!16642 = distinct !DILexicalBlock(scope: !16623, file: !3, line: 891, column: 5)
!16643 = !DILocation(line: 897, column: 42, scope: !16642)
!16644 = !DILocation(line: 898, column: 10, scope: !16642)
!16645 = !DILocation(line: 898, column: 23, scope: !16642)
!16646 = !DILocation(line: 898, column: 38, scope: !16642)
!16647 = !DILocation(line: 898, column: 49, scope: !16642)
!16648 = !DILocation(line: 897, column: 17, scope: !16642)
!16649 = !DILocation(line: 897, column: 15, scope: !16642)
!16650 = !DILocation(line: 899, column: 11, scope: !16651)
!16651 = distinct !DILexicalBlock(scope: !16642, file: !3, line: 899, column: 11)
!16652 = !DILocation(line: 899, column: 22, scope: !16651)
!16653 = !DILocation(line: 899, column: 11, scope: !16642)
!16654 = !DILocation(line: 901, column: 38, scope: !16655)
!16655 = distinct !DILexicalBlock(scope: !16651, file: !3, line: 900, column: 2)
!16656 = !DILocation(line: 901, column: 10, scope: !16655)
!16657 = !DILocation(line: 901, column: 8, scope: !16655)
!16658 = !DILocation(line: 902, column: 33, scope: !16655)
!16659 = !DILocation(line: 902, column: 54, scope: !16655)
!16660 = !DILocation(line: 902, column: 59, scope: !16655)
!16661 = !DILocation(line: 903, column: 21, scope: !16655)
!16662 = !DILocation(line: 902, column: 10, scope: !16655)
!16663 = !DILocation(line: 902, column: 8, scope: !16655)
!16664 = !DILocation(line: 904, column: 2, scope: !16655)
!16665 = !DILocation(line: 907, column: 52, scope: !16666)
!16666 = distinct !DILexicalBlock(scope: !16651, file: !3, line: 906, column: 2)
!16667 = !DILocation(line: 907, column: 10, scope: !16666)
!16668 = !DILocation(line: 907, column: 8, scope: !16666)
!16669 = !DILocation(line: 908, column: 33, scope: !16666)
!16670 = !DILocation(line: 908, column: 54, scope: !16666)
!16671 = !DILocation(line: 908, column: 59, scope: !16666)
!16672 = !DILocation(line: 909, column: 21, scope: !16666)
!16673 = !DILocation(line: 908, column: 10, scope: !16666)
!16674 = !DILocation(line: 908, column: 8, scope: !16666)
!16675 = !DILocation(line: 912, column: 7, scope: !16676)
!16676 = distinct !DILexicalBlock(scope: !16587, file: !3, line: 912, column: 7)
!16677 = !DILocation(line: 912, column: 11, scope: !16676)
!16678 = !DILocation(line: 912, column: 16, scope: !16676)
!16679 = !DILocation(line: 912, column: 19, scope: !16676)
!16680 = !DILocation(line: 912, column: 27, scope: !16676)
!16681 = !DILocation(line: 912, column: 7, scope: !16587)
!16682 = !DILocation(line: 913, column: 5, scope: !16676)
!16683 = !DILocation(line: 914, column: 27, scope: !16587)
!16684 = !DILocation(line: 914, column: 38, scope: !16587)
!16685 = !DILocation(line: 915, column: 6, scope: !16587)
!16686 = !DILocation(line: 915, column: 15, scope: !16587)
!16687 = !DILocation(line: 915, column: 23, scope: !16587)
!16688 = !DILocation(line: 915, column: 34, scope: !16587)
!16689 = !DILocation(line: 914, column: 13, scope: !16587)
!16690 = !DILocation(line: 914, column: 11, scope: !16587)
!16691 = !DILocation(line: 916, column: 7, scope: !16692)
!16692 = distinct !DILexicalBlock(scope: !16587, file: !3, line: 916, column: 7)
!16693 = !DILocation(line: 916, column: 15, scope: !16692)
!16694 = !DILocation(line: 916, column: 7, scope: !16587)
!16695 = !DILocation(line: 917, column: 5, scope: !16692)
!16696 = !DILocation(line: 921, column: 23, scope: !16587)
!16697 = !DILocation(line: 921, column: 34, scope: !16587)
!16698 = !DILocation(line: 921, column: 50, scope: !16587)
!16699 = !DILocation(line: 921, column: 62, scope: !16587)
!16700 = !DILocation(line: 922, column: 9, scope: !16587)
!16701 = !DILocation(line: 922, column: 22, scope: !16587)
!16702 = !DILocation(line: 922, column: 33, scope: !16587)
!16703 = !DILocation(line: 921, column: 9, scope: !16587)
!16704 = !DILocation(line: 921, column: 7, scope: !16587)
!16705 = !DILocation(line: 923, column: 7, scope: !16706)
!16706 = distinct !DILexicalBlock(scope: !16587, file: !3, line: 923, column: 7)
!16707 = !DILocation(line: 923, column: 11, scope: !16706)
!16708 = !DILocation(line: 923, column: 7, scope: !16587)
!16709 = !DILocation(line: 924, column: 5, scope: !16706)
!16710 = !DILocation(line: 927, column: 28, scope: !16711)
!16711 = distinct !DILexicalBlock(scope: !16587, file: !3, line: 927, column: 7)
!16712 = !DILocation(line: 927, column: 50, scope: !16711)
!16713 = !DILocation(line: 927, column: 55, scope: !16711)
!16714 = !DILocation(line: 928, column: 7, scope: !16711)
!16715 = !DILocation(line: 928, column: 20, scope: !16711)
!16716 = !DILocation(line: 928, column: 31, scope: !16711)
!16717 = !DILocation(line: 927, column: 8, scope: !16711)
!16718 = !DILocation(line: 927, column: 7, scope: !16587)
!16719 = !DILocation(line: 929, column: 5, scope: !16711)
!16720 = !DILocation(line: 932, column: 7, scope: !16721)
!16721 = distinct !DILexicalBlock(scope: !16587, file: !3, line: 932, column: 7)
!16722 = !DILocation(line: 932, column: 20, scope: !16721)
!16723 = !DILocation(line: 932, column: 7, scope: !16587)
!16724 = !DILocation(line: 933, column: 30, scope: !16725)
!16725 = distinct !DILexicalBlock(scope: !16721, file: !3, line: 933, column: 9)
!16726 = !DILocation(line: 933, column: 41, scope: !16725)
!16727 = !DILocation(line: 933, column: 51, scope: !16725)
!16728 = !DILocation(line: 933, column: 64, scope: !16725)
!16729 = !DILocation(line: 934, column: 9, scope: !16725)
!16730 = !DILocation(line: 934, column: 23, scope: !16725)
!16731 = !DILocation(line: 934, column: 34, scope: !16725)
!16732 = !DILocation(line: 933, column: 10, scope: !16725)
!16733 = !DILocation(line: 933, column: 9, scope: !16721)
!16734 = !DILocation(line: 935, column: 7, scope: !16725)
!16735 = !DILocation(line: 934, column: 41, scope: !16725)
!16736 = !DILocation(line: 937, column: 3, scope: !16587)
!16737 = !DILocation(line: 938, column: 1, scope: !16587)
!16738 = distinct !DISubprogram(name: "expand_doubleword_shift_condmove", scope: !3, file: !3, line: 949, type: !16739, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16739 = !DISubroutineType(types: !16740)
!16740 = !{!2966, !5, !3938, !384, !2732, !2732, !2732, !2732, !2732, !2732, !2732, !2732, !2756, !2214, !2723}
!16741 = !DILocalVariable(name: "op1_mode", arg: 1, scope: !16738, file: !3, line: 949, type: !5)
!16742 = !DILocation(line: 949, column: 53, scope: !16738)
!16743 = !DILocalVariable(name: "binoptab", arg: 2, scope: !16738, file: !3, line: 949, type: !3938)
!16744 = !DILocation(line: 949, column: 69, scope: !16738)
!16745 = !DILocalVariable(name: "cmp_code", arg: 3, scope: !16738, file: !3, line: 950, type: !384)
!16746 = !DILocation(line: 950, column: 21, scope: !16738)
!16747 = !DILocalVariable(name: "cmp1", arg: 4, scope: !16738, file: !3, line: 950, type: !2732)
!16748 = !DILocation(line: 950, column: 35, scope: !16738)
!16749 = !DILocalVariable(name: "cmp2", arg: 5, scope: !16738, file: !3, line: 950, type: !2732)
!16750 = !DILocation(line: 950, column: 45, scope: !16738)
!16751 = !DILocalVariable(name: "outof_input", arg: 6, scope: !16738, file: !3, line: 951, type: !2732)
!16752 = !DILocation(line: 951, column: 11, scope: !16738)
!16753 = !DILocalVariable(name: "into_input", arg: 7, scope: !16738, file: !3, line: 951, type: !2732)
!16754 = !DILocation(line: 951, column: 28, scope: !16738)
!16755 = !DILocalVariable(name: "subword_op1", arg: 8, scope: !16738, file: !3, line: 952, type: !2732)
!16756 = !DILocation(line: 952, column: 11, scope: !16738)
!16757 = !DILocalVariable(name: "superword_op1", arg: 9, scope: !16738, file: !3, line: 952, type: !2732)
!16758 = !DILocation(line: 952, column: 28, scope: !16738)
!16759 = !DILocalVariable(name: "outof_target", arg: 10, scope: !16738, file: !3, line: 953, type: !2732)
!16760 = !DILocation(line: 953, column: 11, scope: !16738)
!16761 = !DILocalVariable(name: "into_target", arg: 11, scope: !16738, file: !3, line: 953, type: !2732)
!16762 = !DILocation(line: 953, column: 29, scope: !16738)
!16763 = !DILocalVariable(name: "unsignedp", arg: 12, scope: !16738, file: !3, line: 954, type: !2756)
!16764 = !DILocation(line: 954, column: 11, scope: !16738)
!16765 = !DILocalVariable(name: "methods", arg: 13, scope: !16738, file: !3, line: 954, type: !2214)
!16766 = !DILocation(line: 954, column: 41, scope: !16738)
!16767 = !DILocalVariable(name: "shift_mask", arg: 14, scope: !16738, file: !3, line: 955, type: !2723)
!16768 = !DILocation(line: 955, column: 30, scope: !16738)
!16769 = !DILocalVariable(name: "outof_superword", scope: !16738, file: !3, line: 957, type: !2732)
!16770 = !DILocation(line: 957, column: 7, scope: !16738)
!16771 = !DILocalVariable(name: "into_superword", scope: !16738, file: !3, line: 957, type: !2732)
!16772 = !DILocation(line: 957, column: 24, scope: !16738)
!16773 = !DILocation(line: 961, column: 21, scope: !16738)
!16774 = !DILocation(line: 961, column: 34, scope: !16738)
!16775 = !DILocation(line: 961, column: 54, scope: !16738)
!16776 = !DILocation(line: 961, column: 41, scope: !16738)
!16777 = !DILocation(line: 961, column: 19, scope: !16738)
!16778 = !DILocation(line: 962, column: 7, scope: !16779)
!16779 = distinct !DILexicalBlock(scope: !16738, file: !3, line: 962, column: 7)
!16780 = !DILocation(line: 962, column: 20, scope: !16779)
!16781 = !DILocation(line: 962, column: 25, scope: !16779)
!16782 = !DILocation(line: 962, column: 28, scope: !16779)
!16783 = !DILocation(line: 962, column: 43, scope: !16779)
!16784 = !DILocation(line: 962, column: 40, scope: !16779)
!16785 = !DILocation(line: 962, column: 7, scope: !16738)
!16786 = !DILocation(line: 966, column: 24, scope: !16787)
!16787 = distinct !DILexicalBlock(scope: !16779, file: !3, line: 963, column: 5)
!16788 = !DILocation(line: 966, column: 22, scope: !16787)
!16789 = !DILocation(line: 967, column: 36, scope: !16790)
!16790 = distinct !DILexicalBlock(scope: !16787, file: !3, line: 967, column: 11)
!16791 = !DILocation(line: 967, column: 46, scope: !16790)
!16792 = !DILocation(line: 967, column: 59, scope: !16790)
!16793 = !DILocation(line: 968, column: 8, scope: !16790)
!16794 = !DILocation(line: 968, column: 28, scope: !16790)
!16795 = !DILocation(line: 968, column: 39, scope: !16790)
!16796 = !DILocation(line: 967, column: 12, scope: !16790)
!16797 = !DILocation(line: 967, column: 11, scope: !16787)
!16798 = !DILocation(line: 969, column: 2, scope: !16790)
!16799 = !DILocation(line: 970, column: 5, scope: !16787)
!16800 = !DILocation(line: 973, column: 37, scope: !16801)
!16801 = distinct !DILexicalBlock(scope: !16779, file: !3, line: 972, column: 5)
!16802 = !DILocation(line: 973, column: 24, scope: !16801)
!16803 = !DILocation(line: 973, column: 22, scope: !16801)
!16804 = !DILocation(line: 974, column: 36, scope: !16805)
!16805 = distinct !DILexicalBlock(scope: !16801, file: !3, line: 974, column: 11)
!16806 = !DILocation(line: 974, column: 46, scope: !16805)
!16807 = !DILocation(line: 974, column: 59, scope: !16805)
!16808 = !DILocation(line: 975, column: 8, scope: !16805)
!16809 = !DILocation(line: 975, column: 25, scope: !16805)
!16810 = !DILocation(line: 976, column: 8, scope: !16805)
!16811 = !DILocation(line: 976, column: 19, scope: !16805)
!16812 = !DILocation(line: 974, column: 12, scope: !16805)
!16813 = !DILocation(line: 974, column: 11, scope: !16801)
!16814 = !DILocation(line: 977, column: 2, scope: !16805)
!16815 = !DILocation(line: 981, column: 30, scope: !16816)
!16816 = distinct !DILexicalBlock(scope: !16738, file: !3, line: 981, column: 7)
!16817 = !DILocation(line: 981, column: 40, scope: !16816)
!16818 = !DILocation(line: 982, column: 9, scope: !16816)
!16819 = !DILocation(line: 982, column: 22, scope: !16816)
!16820 = !DILocation(line: 982, column: 34, scope: !16816)
!16821 = !DILocation(line: 983, column: 9, scope: !16816)
!16822 = !DILocation(line: 983, column: 23, scope: !16816)
!16823 = !DILocation(line: 984, column: 9, scope: !16816)
!16824 = !DILocation(line: 984, column: 20, scope: !16816)
!16825 = !DILocation(line: 984, column: 29, scope: !16816)
!16826 = !DILocation(line: 981, column: 8, scope: !16816)
!16827 = !DILocation(line: 981, column: 7, scope: !16738)
!16828 = !DILocation(line: 985, column: 5, scope: !16816)
!16829 = !DILocation(line: 989, column: 31, scope: !16830)
!16830 = distinct !DILexicalBlock(scope: !16738, file: !3, line: 989, column: 7)
!16831 = !DILocation(line: 989, column: 44, scope: !16830)
!16832 = !DILocation(line: 989, column: 54, scope: !16830)
!16833 = !DILocation(line: 989, column: 60, scope: !16830)
!16834 = !DILocation(line: 989, column: 66, scope: !16830)
!16835 = !DILocation(line: 990, column: 10, scope: !16830)
!16836 = !DILocation(line: 990, column: 23, scope: !16830)
!16837 = !DILocation(line: 990, column: 39, scope: !16830)
!16838 = !DILocation(line: 989, column: 8, scope: !16830)
!16839 = !DILocation(line: 989, column: 7, scope: !16738)
!16840 = !DILocation(line: 991, column: 5, scope: !16830)
!16841 = !DILocation(line: 993, column: 7, scope: !16842)
!16842 = distinct !DILexicalBlock(scope: !16738, file: !3, line: 993, column: 7)
!16843 = !DILocation(line: 993, column: 20, scope: !16842)
!16844 = !DILocation(line: 993, column: 7, scope: !16738)
!16845 = !DILocation(line: 994, column: 33, scope: !16846)
!16846 = distinct !DILexicalBlock(scope: !16842, file: !3, line: 994, column: 9)
!16847 = !DILocation(line: 994, column: 47, scope: !16846)
!16848 = !DILocation(line: 994, column: 57, scope: !16846)
!16849 = !DILocation(line: 994, column: 63, scope: !16846)
!16850 = !DILocation(line: 994, column: 69, scope: !16846)
!16851 = !DILocation(line: 995, column: 5, scope: !16846)
!16852 = !DILocation(line: 995, column: 19, scope: !16846)
!16853 = !DILocation(line: 996, column: 5, scope: !16846)
!16854 = !DILocation(line: 994, column: 10, scope: !16846)
!16855 = !DILocation(line: 994, column: 9, scope: !16842)
!16856 = !DILocation(line: 997, column: 7, scope: !16846)
!16857 = !DILocation(line: 996, column: 21, scope: !16846)
!16858 = !DILocation(line: 999, column: 3, scope: !16738)
!16859 = !DILocation(line: 1000, column: 1, scope: !16738)
!16860 = distinct !DISubprogram(name: "lowpart_subreg_maybe_copy", scope: !3, file: !3, line: 2907, type: !16861, scopeLine: 2909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16861 = !DISubroutineType(types: !16862)
!16862 = !{!2732, !5, !2732, !5}
!16863 = !DILocalVariable(name: "omode", arg: 1, scope: !16860, file: !3, line: 2907, type: !5)
!16864 = !DILocation(line: 2907, column: 46, scope: !16860)
!16865 = !DILocalVariable(name: "val", arg: 2, scope: !16860, file: !3, line: 2907, type: !2732)
!16866 = !DILocation(line: 2907, column: 57, scope: !16860)
!16867 = !DILocalVariable(name: "imode", arg: 3, scope: !16860, file: !3, line: 2908, type: !5)
!16868 = !DILocation(line: 2908, column: 25, scope: !16860)
!16869 = !DILocalVariable(name: "ret", scope: !16860, file: !3, line: 2910, type: !2732)
!16870 = !DILocation(line: 2910, column: 7, scope: !16860)
!16871 = !DILocation(line: 2911, column: 25, scope: !16860)
!16872 = !DILocation(line: 2911, column: 32, scope: !16860)
!16873 = !DILocation(line: 2911, column: 37, scope: !16860)
!16874 = !DILocation(line: 2911, column: 9, scope: !16860)
!16875 = !DILocation(line: 2911, column: 7, scope: !16860)
!16876 = !DILocation(line: 2912, column: 7, scope: !16877)
!16877 = distinct !DILexicalBlock(scope: !16860, file: !3, line: 2912, column: 7)
!16878 = !DILocation(line: 2912, column: 11, scope: !16877)
!16879 = !DILocation(line: 2912, column: 7, scope: !16860)
!16880 = !DILocation(line: 2914, column: 24, scope: !16881)
!16881 = distinct !DILexicalBlock(scope: !16877, file: !3, line: 2913, column: 5)
!16882 = !DILocation(line: 2914, column: 31, scope: !16881)
!16883 = !DILocation(line: 2914, column: 13, scope: !16881)
!16884 = !DILocation(line: 2914, column: 11, scope: !16881)
!16885 = !DILocation(line: 2915, column: 29, scope: !16881)
!16886 = !DILocation(line: 2915, column: 36, scope: !16881)
!16887 = !DILocation(line: 2915, column: 41, scope: !16881)
!16888 = !DILocation(line: 2915, column: 13, scope: !16881)
!16889 = !DILocation(line: 2915, column: 11, scope: !16881)
!16890 = !DILocation(line: 2916, column: 7, scope: !16881)
!16891 = !DILocation(line: 2917, column: 5, scope: !16881)
!16892 = !DILocation(line: 2918, column: 10, scope: !16860)
!16893 = !DILocation(line: 2918, column: 3, scope: !16860)
!16894 = distinct !DISubprogram(name: "prepare_float_lib_cmp", scope: !3, file: !3, line: 4353, type: !16895, scopeLine: 4355, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!16895 = !DISubroutineType(types: !16896)
!16896 = !{null, !2732, !2732, !384, !3886, !11024}
!16897 = !DILocalVariable(name: "x", arg: 1, scope: !16894, file: !3, line: 4353, type: !2732)
!16898 = !DILocation(line: 4353, column: 28, scope: !16894)
!16899 = !DILocalVariable(name: "y", arg: 2, scope: !16894, file: !3, line: 4353, type: !2732)
!16900 = !DILocation(line: 4353, column: 35, scope: !16894)
!16901 = !DILocalVariable(name: "comparison", arg: 3, scope: !16894, file: !3, line: 4353, type: !384)
!16902 = !DILocation(line: 4353, column: 52, scope: !16894)
!16903 = !DILocalVariable(name: "ptest", arg: 4, scope: !16894, file: !3, line: 4354, type: !3886)
!16904 = !DILocation(line: 4354, column: 15, scope: !16894)
!16905 = !DILocalVariable(name: "pmode", arg: 5, scope: !16894, file: !3, line: 4354, type: !11024)
!16906 = !DILocation(line: 4354, column: 41, scope: !16894)
!16907 = !DILocalVariable(name: "swapped", scope: !16894, file: !3, line: 4356, type: !384)
!16908 = !DILocation(line: 4356, column: 17, scope: !16894)
!16909 = !DILocation(line: 4356, column: 43, scope: !16894)
!16910 = !DILocation(line: 4356, column: 27, scope: !16894)
!16911 = !DILocalVariable(name: "reversed", scope: !16894, file: !3, line: 4357, type: !384)
!16912 = !DILocation(line: 4357, column: 17, scope: !16894)
!16913 = !DILocation(line: 4357, column: 63, scope: !16894)
!16914 = !DILocation(line: 4357, column: 28, scope: !16894)
!16915 = !DILocalVariable(name: "orig_mode", scope: !16894, file: !3, line: 4358, type: !5)
!16916 = !DILocation(line: 4358, column: 21, scope: !16894)
!16917 = !DILocation(line: 4358, column: 33, scope: !16894)
!16918 = !DILocalVariable(name: "mode", scope: !16894, file: !3, line: 4359, type: !5)
!16919 = !DILocation(line: 4359, column: 21, scope: !16894)
!16920 = !DILocalVariable(name: "cmp_mode", scope: !16894, file: !3, line: 4359, type: !5)
!16921 = !DILocation(line: 4359, column: 27, scope: !16894)
!16922 = !DILocalVariable(name: "value", scope: !16894, file: !3, line: 4360, type: !2732)
!16923 = !DILocation(line: 4360, column: 7, scope: !16894)
!16924 = !DILocalVariable(name: "target", scope: !16894, file: !3, line: 4360, type: !2732)
!16925 = !DILocation(line: 4360, column: 14, scope: !16894)
!16926 = !DILocalVariable(name: "insns", scope: !16894, file: !3, line: 4360, type: !2732)
!16927 = !DILocation(line: 4360, column: 22, scope: !16894)
!16928 = !DILocalVariable(name: "equiv", scope: !16894, file: !3, line: 4360, type: !2732)
!16929 = !DILocation(line: 4360, column: 29, scope: !16894)
!16930 = !DILocalVariable(name: "libfunc", scope: !16894, file: !3, line: 4361, type: !2732)
!16931 = !DILocation(line: 4361, column: 7, scope: !16894)
!16932 = !DILocalVariable(name: "reversed_p", scope: !16894, file: !3, line: 4362, type: !2966)
!16933 = !DILocation(line: 4362, column: 8, scope: !16894)
!16934 = !DILocation(line: 4363, column: 22, scope: !16894)
!16935 = !DILocation(line: 4363, column: 14, scope: !16894)
!16936 = !DILocation(line: 4363, column: 12, scope: !16894)
!16937 = !DILocation(line: 4365, column: 15, scope: !16938)
!16938 = distinct !DILexicalBlock(scope: !16894, file: !3, line: 4365, column: 3)
!16939 = !DILocation(line: 4365, column: 13, scope: !16938)
!16940 = !DILocation(line: 4365, column: 8, scope: !16938)
!16941 = !DILocation(line: 4366, column: 8, scope: !16942)
!16942 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 4365, column: 3)
!16943 = !DILocation(line: 4366, column: 13, scope: !16942)
!16944 = !DILocation(line: 4365, column: 3, scope: !16938)
!16945 = !DILocation(line: 4369, column: 25, scope: !16946)
!16946 = distinct !DILexicalBlock(scope: !16947, file: !3, line: 4369, column: 11)
!16947 = distinct !DILexicalBlock(scope: !16942, file: !3, line: 4368, column: 5)
!16948 = !DILocation(line: 4369, column: 11, scope: !16946)
!16949 = !DILocation(line: 4370, column: 4, scope: !16946)
!16950 = !DILocation(line: 4370, column: 47, scope: !16946)
!16951 = !DILocation(line: 4370, column: 33, scope: !16946)
!16952 = !DILocation(line: 4370, column: 60, scope: !16946)
!16953 = !DILocation(line: 4370, column: 18, scope: !16946)
!16954 = !DILocation(line: 4370, column: 16, scope: !16946)
!16955 = !DILocation(line: 4369, column: 11, scope: !16947)
!16956 = !DILocation(line: 4371, column: 2, scope: !16946)
!16957 = !DILocation(line: 4373, column: 25, scope: !16958)
!16958 = distinct !DILexicalBlock(scope: !16947, file: !3, line: 4373, column: 11)
!16959 = !DILocation(line: 4373, column: 11, scope: !16958)
!16960 = !DILocation(line: 4374, column: 4, scope: !16958)
!16961 = !DILocation(line: 4374, column: 47, scope: !16958)
!16962 = !DILocation(line: 4374, column: 33, scope: !16958)
!16963 = !DILocation(line: 4374, column: 57, scope: !16958)
!16964 = !DILocation(line: 4374, column: 18, scope: !16958)
!16965 = !DILocation(line: 4374, column: 16, scope: !16958)
!16966 = !DILocation(line: 4373, column: 11, scope: !16947)
!16967 = !DILocalVariable(name: "tmp", scope: !16968, file: !3, line: 4376, type: !2732)
!16968 = distinct !DILexicalBlock(scope: !16958, file: !3, line: 4375, column: 2)
!16969 = !DILocation(line: 4376, column: 8, scope: !16968)
!16970 = !DILocation(line: 4377, column: 10, scope: !16968)
!16971 = !DILocation(line: 4377, column: 8, scope: !16968)
!16972 = !DILocation(line: 4377, column: 17, scope: !16968)
!16973 = !DILocation(line: 4377, column: 15, scope: !16968)
!16974 = !DILocation(line: 4377, column: 24, scope: !16968)
!16975 = !DILocation(line: 4377, column: 22, scope: !16968)
!16976 = !DILocation(line: 4378, column: 17, scope: !16968)
!16977 = !DILocation(line: 4378, column: 15, scope: !16968)
!16978 = !DILocation(line: 4379, column: 4, scope: !16968)
!16979 = !DILocation(line: 4382, column: 25, scope: !16980)
!16980 = distinct !DILexicalBlock(scope: !16947, file: !3, line: 4382, column: 11)
!16981 = !DILocation(line: 4382, column: 11, scope: !16980)
!16982 = !DILocation(line: 4383, column: 4, scope: !16980)
!16983 = !DILocation(line: 4383, column: 47, scope: !16980)
!16984 = !DILocation(line: 4383, column: 33, scope: !16980)
!16985 = !DILocation(line: 4383, column: 58, scope: !16980)
!16986 = !DILocation(line: 4383, column: 18, scope: !16980)
!16987 = !DILocation(line: 4383, column: 16, scope: !16980)
!16988 = !DILocation(line: 4384, column: 4, scope: !16980)
!16989 = !DILocation(line: 4382, column: 11, scope: !16947)
!16990 = !DILocation(line: 4386, column: 17, scope: !16991)
!16991 = distinct !DILexicalBlock(scope: !16980, file: !3, line: 4385, column: 2)
!16992 = !DILocation(line: 4386, column: 15, scope: !16991)
!16993 = !DILocation(line: 4387, column: 15, scope: !16991)
!16994 = !DILocation(line: 4388, column: 4, scope: !16991)
!16995 = !DILocation(line: 4390, column: 5, scope: !16947)
!16996 = !DILocation(line: 4367, column: 15, scope: !16942)
!16997 = !DILocation(line: 4367, column: 13, scope: !16942)
!16998 = !DILocation(line: 4365, column: 3, scope: !16942)
!16999 = distinct !{!16999, !16944, !17000}
!17000 = !DILocation(line: 4390, column: 5, scope: !16938)
!17001 = !DILocation(line: 4392, column: 3, scope: !16894)
!17002 = !DILocation(line: 4394, column: 7, scope: !17003)
!17003 = distinct !DILexicalBlock(scope: !16894, file: !3, line: 4394, column: 7)
!17004 = !DILocation(line: 4394, column: 15, scope: !17003)
!17005 = !DILocation(line: 4394, column: 12, scope: !17003)
!17006 = !DILocation(line: 4394, column: 7, scope: !16894)
!17007 = !DILocation(line: 4396, column: 28, scope: !17008)
!17008 = distinct !DILexicalBlock(scope: !17003, file: !3, line: 4395, column: 5)
!17009 = !DILocation(line: 4396, column: 34, scope: !17008)
!17010 = !DILocation(line: 4396, column: 11, scope: !17008)
!17011 = !DILocation(line: 4396, column: 9, scope: !17008)
!17012 = !DILocation(line: 4397, column: 28, scope: !17008)
!17013 = !DILocation(line: 4397, column: 34, scope: !17008)
!17014 = !DILocation(line: 4397, column: 11, scope: !17008)
!17015 = !DILocation(line: 4397, column: 9, scope: !17008)
!17016 = !DILocation(line: 4398, column: 5, scope: !17008)
!17017 = !DILocation(line: 4403, column: 7, scope: !17018)
!17018 = distinct !DILexicalBlock(scope: !16894, file: !3, line: 4403, column: 7)
!17019 = !DILocation(line: 4403, column: 18, scope: !17018)
!17020 = !DILocation(line: 4403, column: 7, scope: !16894)
!17021 = !DILocalVariable(name: "temp", scope: !17022, file: !3, line: 4405, type: !2732)
!17022 = distinct !DILexicalBlock(scope: !17018, file: !3, line: 4404, column: 5)
!17023 = !DILocation(line: 4405, column: 11, scope: !17022)
!17024 = !DILocation(line: 4405, column: 47, scope: !17022)
!17025 = !DILocation(line: 4405, column: 57, scope: !17022)
!17026 = !DILocation(line: 4405, column: 63, scope: !17022)
!17027 = !DILocation(line: 4405, column: 66, scope: !17022)
!17028 = !DILocation(line: 4405, column: 18, scope: !17022)
!17029 = !DILocation(line: 4406, column: 44, scope: !17022)
!17030 = !DILocation(line: 4406, column: 54, scope: !17022)
!17031 = !DILocation(line: 4406, column: 60, scope: !17022)
!17032 = !DILocation(line: 4406, column: 63, scope: !17022)
!17033 = !DILocation(line: 4406, column: 15, scope: !17022)
!17034 = !DILocation(line: 4406, column: 13, scope: !17022)
!17035 = !DILocation(line: 4407, column: 51, scope: !17022)
!17036 = !DILocation(line: 4407, column: 61, scope: !17022)
!17037 = !DILocation(line: 4408, column: 9, scope: !17022)
!17038 = !DILocation(line: 4408, column: 15, scope: !17022)
!17039 = !DILocation(line: 4408, column: 31, scope: !17022)
!17040 = !DILocation(line: 4407, column: 15, scope: !17022)
!17041 = !DILocation(line: 4407, column: 13, scope: !17022)
!17042 = !DILocation(line: 4409, column: 5, scope: !17022)
!17043 = !DILocation(line: 4412, column: 40, scope: !17044)
!17044 = distinct !DILexicalBlock(scope: !17018, file: !3, line: 4411, column: 5)
!17045 = !DILocation(line: 4412, column: 52, scope: !17044)
!17046 = !DILocation(line: 4412, column: 62, scope: !17044)
!17047 = !DILocation(line: 4412, column: 68, scope: !17044)
!17048 = !DILocation(line: 4412, column: 71, scope: !17044)
!17049 = !DILocation(line: 4412, column: 15, scope: !17044)
!17050 = !DILocation(line: 4412, column: 13, scope: !17044)
!17051 = !DILocalVariable(name: "true_rtx", scope: !17052, file: !3, line: 4415, type: !2732)
!17052 = distinct !DILexicalBlock(scope: !17053, file: !3, line: 4414, column: 2)
!17053 = distinct !DILexicalBlock(scope: !17044, file: !3, line: 4413, column: 11)
!17054 = !DILocation(line: 4415, column: 8, scope: !17052)
!17055 = !DILocalVariable(name: "false_rtx", scope: !17052, file: !3, line: 4415, type: !2732)
!17056 = !DILocation(line: 4415, column: 18, scope: !17052)
!17057 = !DILocation(line: 4417, column: 12, scope: !17052)
!17058 = !DILocation(line: 4417, column: 4, scope: !17052)
!17059 = !DILocation(line: 4420, column: 19, scope: !17060)
!17060 = distinct !DILexicalBlock(scope: !17052, file: !3, line: 4418, column: 6)
!17061 = !DILocation(line: 4420, column: 17, scope: !17060)
!17062 = !DILocation(line: 4421, column: 20, scope: !17060)
!17063 = !DILocation(line: 4421, column: 18, scope: !17060)
!17064 = !DILocation(line: 4422, column: 8, scope: !17060)
!17065 = !DILocation(line: 4425, column: 19, scope: !17060)
!17066 = !DILocation(line: 4425, column: 17, scope: !17060)
!17067 = !DILocation(line: 4426, column: 20, scope: !17060)
!17068 = !DILocation(line: 4426, column: 18, scope: !17060)
!17069 = !DILocation(line: 4427, column: 8, scope: !17060)
!17070 = !DILocation(line: 4430, column: 19, scope: !17060)
!17071 = !DILocation(line: 4430, column: 17, scope: !17060)
!17072 = !DILocation(line: 4431, column: 20, scope: !17060)
!17073 = !DILocation(line: 4431, column: 18, scope: !17060)
!17074 = !DILocation(line: 4432, column: 8, scope: !17060)
!17075 = !DILocation(line: 4435, column: 19, scope: !17060)
!17076 = !DILocation(line: 4435, column: 17, scope: !17060)
!17077 = !DILocation(line: 4436, column: 20, scope: !17060)
!17078 = !DILocation(line: 4436, column: 18, scope: !17060)
!17079 = !DILocation(line: 4437, column: 8, scope: !17060)
!17080 = !DILocation(line: 4440, column: 19, scope: !17060)
!17081 = !DILocation(line: 4440, column: 17, scope: !17060)
!17082 = !DILocation(line: 4441, column: 20, scope: !17060)
!17083 = !DILocation(line: 4441, column: 18, scope: !17060)
!17084 = !DILocation(line: 4442, column: 8, scope: !17060)
!17085 = !DILocation(line: 4445, column: 19, scope: !17060)
!17086 = !DILocation(line: 4445, column: 17, scope: !17060)
!17087 = !DILocation(line: 4446, column: 20, scope: !17060)
!17088 = !DILocation(line: 4446, column: 18, scope: !17060)
!17089 = !DILocation(line: 4447, column: 8, scope: !17060)
!17090 = !DILocation(line: 4450, column: 8, scope: !17060)
!17091 = !DILocation(line: 4451, column: 6, scope: !17060)
!17092 = !DILocation(line: 4452, column: 48, scope: !17052)
!17093 = !DILocation(line: 4452, column: 58, scope: !17052)
!17094 = !DILocation(line: 4453, column: 6, scope: !17052)
!17095 = !DILocation(line: 4453, column: 13, scope: !17052)
!17096 = !DILocation(line: 4453, column: 23, scope: !17052)
!17097 = !DILocation(line: 4452, column: 12, scope: !17052)
!17098 = !DILocation(line: 4452, column: 10, scope: !17052)
!17099 = !DILocation(line: 4457, column: 3, scope: !16894)
!17100 = !DILocation(line: 4458, column: 36, scope: !16894)
!17101 = !DILocation(line: 4459, column: 8, scope: !16894)
!17102 = !DILocation(line: 4459, column: 21, scope: !16894)
!17103 = !DILocation(line: 4459, column: 24, scope: !16894)
!17104 = !DILocation(line: 4459, column: 30, scope: !16894)
!17105 = !DILocation(line: 4459, column: 33, scope: !16894)
!17106 = !DILocation(line: 4458, column: 11, scope: !16894)
!17107 = !DILocation(line: 4458, column: 9, scope: !16894)
!17108 = !DILocation(line: 4460, column: 11, scope: !16894)
!17109 = !DILocation(line: 4460, column: 9, scope: !16894)
!17110 = !DILocation(line: 4461, column: 3, scope: !16894)
!17111 = !DILocation(line: 4463, column: 25, scope: !16894)
!17112 = !DILocation(line: 4463, column: 12, scope: !16894)
!17113 = !DILocation(line: 4463, column: 10, scope: !16894)
!17114 = !DILocation(line: 4464, column: 23, scope: !16894)
!17115 = !DILocation(line: 4464, column: 30, scope: !16894)
!17116 = !DILocation(line: 4464, column: 38, scope: !16894)
!17117 = !DILocation(line: 4464, column: 45, scope: !16894)
!17118 = !DILocation(line: 4464, column: 3, scope: !16894)
!17119 = !DILocation(line: 4466, column: 7, scope: !17120)
!17120 = distinct !DILexicalBlock(scope: !16894, file: !3, line: 4466, column: 7)
!17121 = !DILocation(line: 4466, column: 18, scope: !17120)
!17122 = !DILocation(line: 4466, column: 7, scope: !16894)
!17123 = !DILocation(line: 4468, column: 18, scope: !17120)
!17124 = !DILocation(line: 4468, column: 16, scope: !17120)
!17125 = !DILocation(line: 4468, column: 5, scope: !17120)
!17126 = !DILocation(line: 4470, column: 12, scope: !16894)
!17127 = !DILocation(line: 4470, column: 4, scope: !16894)
!17128 = !DILocation(line: 4470, column: 10, scope: !16894)
!17129 = !DILocation(line: 4471, column: 12, scope: !16894)
!17130 = !DILocation(line: 4471, column: 4, scope: !16894)
!17131 = !DILocation(line: 4471, column: 10, scope: !16894)
!17132 = !DILocation(line: 4472, column: 1, scope: !16894)
!17133 = distinct !DISubprogram(name: "gen_fixed_libfunc", scope: !3, file: !3, line: 5591, type: !14206, scopeLine: 5593, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!17134 = !DILocalVariable(name: "optable", arg: 1, scope: !17133, file: !3, line: 5591, type: !3938)
!17135 = !DILocation(line: 5591, column: 26, scope: !17133)
!17136 = !DILocalVariable(name: "opname", arg: 2, scope: !17133, file: !3, line: 5591, type: !2759)
!17137 = !DILocation(line: 5591, column: 47, scope: !17133)
!17138 = !DILocalVariable(name: "suffix", arg: 3, scope: !17133, file: !3, line: 5591, type: !2761)
!17139 = !DILocation(line: 5591, column: 60, scope: !17133)
!17140 = !DILocalVariable(name: "mode", arg: 4, scope: !17133, file: !3, line: 5592, type: !5)
!17141 = !DILocation(line: 5592, column: 24, scope: !17133)
!17142 = !DILocation(line: 5594, column: 8, scope: !17143)
!17143 = distinct !DILexicalBlock(scope: !17133, file: !3, line: 5594, column: 7)
!17144 = !DILocation(line: 5594, column: 7, scope: !17133)
!17145 = !DILocation(line: 5595, column: 5, scope: !17143)
!17146 = !DILocation(line: 5596, column: 16, scope: !17133)
!17147 = !DILocation(line: 5596, column: 25, scope: !17133)
!17148 = !DILocation(line: 5596, column: 33, scope: !17133)
!17149 = !DILocation(line: 5596, column: 41, scope: !17133)
!17150 = !DILocation(line: 5596, column: 3, scope: !17133)
!17151 = !DILocation(line: 5597, column: 1, scope: !17133)
!17152 = distinct !DISubprogram(name: "gen_libfunc", scope: !3, file: !3, line: 5526, type: !17153, scopeLine: 5527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!17153 = !DISubroutineType(types: !17154)
!17154 = !{null, !3938, !2759, !2756, !5}
!17155 = !DILocalVariable(name: "optable", arg: 1, scope: !17152, file: !3, line: 5526, type: !3938)
!17156 = !DILocation(line: 5526, column: 20, scope: !17152)
!17157 = !DILocalVariable(name: "opname", arg: 2, scope: !17152, file: !3, line: 5526, type: !2759)
!17158 = !DILocation(line: 5526, column: 41, scope: !17152)
!17159 = !DILocalVariable(name: "suffix", arg: 3, scope: !17152, file: !3, line: 5526, type: !2756)
!17160 = !DILocation(line: 5526, column: 53, scope: !17152)
!17161 = !DILocalVariable(name: "mode", arg: 4, scope: !17152, file: !3, line: 5526, type: !5)
!17162 = !DILocation(line: 5526, column: 79, scope: !17152)
!17163 = !DILocalVariable(name: "opname_len", scope: !17152, file: !3, line: 5528, type: !7)
!17164 = !DILocation(line: 5528, column: 12, scope: !17152)
!17165 = !DILocation(line: 5528, column: 33, scope: !17152)
!17166 = !DILocation(line: 5528, column: 25, scope: !17152)
!17167 = !DILocalVariable(name: "mname", scope: !17152, file: !3, line: 5529, type: !2759)
!17168 = !DILocation(line: 5529, column: 15, scope: !17152)
!17169 = !DILocation(line: 5529, column: 23, scope: !17152)
!17170 = !DILocalVariable(name: "mname_len", scope: !17152, file: !3, line: 5530, type: !7)
!17171 = !DILocation(line: 5530, column: 12, scope: !17152)
!17172 = !DILocation(line: 5530, column: 32, scope: !17152)
!17173 = !DILocation(line: 5530, column: 24, scope: !17152)
!17174 = !DILocalVariable(name: "libfunc_name", scope: !17152, file: !3, line: 5531, type: !2828)
!17175 = !DILocation(line: 5531, column: 9, scope: !17152)
!17176 = !DILocation(line: 5531, column: 24, scope: !17152)
!17177 = !DILocalVariable(name: "p", scope: !17152, file: !3, line: 5532, type: !2828)
!17178 = !DILocation(line: 5532, column: 9, scope: !17152)
!17179 = !DILocalVariable(name: "q", scope: !17152, file: !3, line: 5533, type: !2759)
!17180 = !DILocation(line: 5533, column: 15, scope: !17152)
!17181 = !DILocation(line: 5535, column: 7, scope: !17152)
!17182 = !DILocation(line: 5535, column: 5, scope: !17152)
!17183 = !DILocation(line: 5536, column: 5, scope: !17152)
!17184 = !DILocation(line: 5536, column: 8, scope: !17152)
!17185 = !DILocation(line: 5537, column: 5, scope: !17152)
!17186 = !DILocation(line: 5537, column: 8, scope: !17152)
!17187 = !DILocation(line: 5538, column: 12, scope: !17188)
!17188 = distinct !DILexicalBlock(scope: !17152, file: !3, line: 5538, column: 3)
!17189 = !DILocation(line: 5538, column: 10, scope: !17188)
!17190 = !DILocation(line: 5538, column: 8, scope: !17188)
!17191 = !DILocation(line: 5538, column: 21, scope: !17192)
!17192 = distinct !DILexicalBlock(scope: !17188, file: !3, line: 5538, column: 3)
!17193 = !DILocation(line: 5538, column: 20, scope: !17192)
!17194 = !DILocation(line: 5538, column: 3, scope: !17188)
!17195 = !DILocation(line: 5539, column: 14, scope: !17192)
!17196 = !DILocation(line: 5539, column: 12, scope: !17192)
!17197 = !DILocation(line: 5539, column: 7, scope: !17192)
!17198 = !DILocation(line: 5539, column: 10, scope: !17192)
!17199 = !DILocation(line: 5538, column: 3, scope: !17192)
!17200 = distinct !{!17200, !17194, !17201}
!17201 = !DILocation(line: 5539, column: 14, scope: !17188)
!17202 = !DILocation(line: 5540, column: 12, scope: !17203)
!17203 = distinct !DILexicalBlock(scope: !17152, file: !3, line: 5540, column: 3)
!17204 = !DILocation(line: 5540, column: 10, scope: !17203)
!17205 = !DILocation(line: 5540, column: 8, scope: !17203)
!17206 = !DILocation(line: 5540, column: 20, scope: !17207)
!17207 = distinct !DILexicalBlock(scope: !17203, file: !3, line: 5540, column: 3)
!17208 = !DILocation(line: 5540, column: 19, scope: !17207)
!17209 = !DILocation(line: 5540, column: 3, scope: !17203)
!17210 = !DILocation(line: 5541, column: 12, scope: !17207)
!17211 = !DILocation(line: 5541, column: 7, scope: !17207)
!17212 = !DILocation(line: 5541, column: 10, scope: !17207)
!17213 = !DILocation(line: 5541, column: 5, scope: !17207)
!17214 = !DILocation(line: 5540, column: 24, scope: !17207)
!17215 = !DILocation(line: 5540, column: 3, scope: !17207)
!17216 = distinct !{!17216, !17209, !17217}
!17217 = !DILocation(line: 5541, column: 12, scope: !17203)
!17218 = !DILocation(line: 5542, column: 10, scope: !17152)
!17219 = !DILocation(line: 5542, column: 5, scope: !17152)
!17220 = !DILocation(line: 5542, column: 8, scope: !17152)
!17221 = !DILocation(line: 5543, column: 4, scope: !17152)
!17222 = !DILocation(line: 5543, column: 6, scope: !17152)
!17223 = !DILocation(line: 5545, column: 22, scope: !17152)
!17224 = !DILocation(line: 5545, column: 31, scope: !17152)
!17225 = !DILocation(line: 5546, column: 26, scope: !17152)
!17226 = !DILocation(line: 5546, column: 40, scope: !17152)
!17227 = !DILocation(line: 5546, column: 44, scope: !17152)
!17228 = !DILocation(line: 5546, column: 42, scope: !17152)
!17229 = !DILocation(line: 5546, column: 8, scope: !17152)
!17230 = !DILocation(line: 5545, column: 3, scope: !17152)
!17231 = !DILocation(line: 5547, column: 1, scope: !17152)
!17232 = distinct !DISubprogram(name: "gen_interclass_conv_libfunc", scope: !3, file: !3, line: 5731, type: !14557, scopeLine: 5735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!17233 = !DILocalVariable(name: "tab", arg: 1, scope: !17232, file: !3, line: 5731, type: !3974)
!17234 = !DILocation(line: 5731, column: 44, scope: !17232)
!17235 = !DILocalVariable(name: "opname", arg: 2, scope: !17232, file: !3, line: 5732, type: !2759)
!17236 = !DILocation(line: 5732, column: 21, scope: !17232)
!17237 = !DILocalVariable(name: "tmode", arg: 3, scope: !17232, file: !3, line: 5733, type: !5)
!17238 = !DILocation(line: 5733, column: 27, scope: !17232)
!17239 = !DILocalVariable(name: "fmode", arg: 4, scope: !17232, file: !3, line: 5734, type: !5)
!17240 = !DILocation(line: 5734, column: 27, scope: !17232)
!17241 = !DILocalVariable(name: "opname_len", scope: !17232, file: !3, line: 5736, type: !2721)
!17242 = !DILocation(line: 5736, column: 10, scope: !17232)
!17243 = !DILocation(line: 5736, column: 31, scope: !17232)
!17244 = !DILocation(line: 5736, column: 23, scope: !17232)
!17245 = !DILocalVariable(name: "mname_len", scope: !17232, file: !3, line: 5737, type: !2721)
!17246 = !DILocation(line: 5737, column: 10, scope: !17232)
!17247 = !DILocalVariable(name: "fname", scope: !17232, file: !3, line: 5739, type: !2759)
!17248 = !DILocation(line: 5739, column: 15, scope: !17232)
!17249 = !DILocalVariable(name: "tname", scope: !17232, file: !3, line: 5739, type: !2759)
!17250 = !DILocation(line: 5739, column: 23, scope: !17232)
!17251 = !DILocalVariable(name: "q", scope: !17232, file: !3, line: 5740, type: !2759)
!17252 = !DILocation(line: 5740, column: 15, scope: !17232)
!17253 = !DILocalVariable(name: "libfunc_name", scope: !17232, file: !3, line: 5741, type: !2828)
!17254 = !DILocation(line: 5741, column: 9, scope: !17232)
!17255 = !DILocalVariable(name: "suffix", scope: !17232, file: !3, line: 5741, type: !2828)
!17256 = !DILocation(line: 5741, column: 24, scope: !17232)
!17257 = !DILocalVariable(name: "nondec_name", scope: !17232, file: !3, line: 5742, type: !2828)
!17258 = !DILocation(line: 5742, column: 9, scope: !17232)
!17259 = !DILocalVariable(name: "dec_name", scope: !17232, file: !3, line: 5742, type: !2828)
!17260 = !DILocation(line: 5742, column: 23, scope: !17232)
!17261 = !DILocalVariable(name: "nondec_suffix", scope: !17232, file: !3, line: 5742, type: !2828)
!17262 = !DILocation(line: 5742, column: 34, scope: !17232)
!17263 = !DILocalVariable(name: "dec_suffix", scope: !17232, file: !3, line: 5742, type: !2828)
!17264 = !DILocation(line: 5742, column: 50, scope: !17232)
!17265 = !DILocalVariable(name: "p", scope: !17232, file: !3, line: 5743, type: !2828)
!17266 = !DILocation(line: 5743, column: 9, scope: !17232)
!17267 = !DILocalVariable(name: "dec_len", scope: !17232, file: !3, line: 5747, type: !17268)
!17268 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2721)
!17269 = !DILocation(line: 5747, column: 16, scope: !17232)
!17270 = !DILocation(line: 5749, column: 23, scope: !17232)
!17271 = !DILocation(line: 5749, column: 15, scope: !17232)
!17272 = !DILocation(line: 5749, column: 56, scope: !17232)
!17273 = !DILocation(line: 5749, column: 48, scope: !17232)
!17274 = !DILocation(line: 5749, column: 46, scope: !17232)
!17275 = !DILocation(line: 5749, column: 13, scope: !17232)
!17276 = !DILocation(line: 5751, column: 17, scope: !17232)
!17277 = !DILocation(line: 5751, column: 15, scope: !17232)
!17278 = !DILocation(line: 5752, column: 3, scope: !17232)
!17279 = !DILocation(line: 5752, column: 18, scope: !17232)
!17280 = !DILocation(line: 5753, column: 3, scope: !17232)
!17281 = !DILocation(line: 5753, column: 18, scope: !17232)
!17282 = !DILocation(line: 5754, column: 12, scope: !17232)
!17283 = !DILocation(line: 5754, column: 28, scope: !17232)
!17284 = !DILocation(line: 5754, column: 36, scope: !17232)
!17285 = !DILocation(line: 5754, column: 3, scope: !17232)
!17286 = !DILocation(line: 5755, column: 19, scope: !17232)
!17287 = !DILocation(line: 5755, column: 33, scope: !17232)
!17288 = !DILocation(line: 5755, column: 31, scope: !17232)
!17289 = !DILocation(line: 5755, column: 44, scope: !17232)
!17290 = !DILocation(line: 5755, column: 17, scope: !17232)
!17291 = !DILocation(line: 5757, column: 14, scope: !17232)
!17292 = !DILocation(line: 5757, column: 12, scope: !17232)
!17293 = !DILocation(line: 5758, column: 3, scope: !17232)
!17294 = !DILocation(line: 5758, column: 15, scope: !17232)
!17295 = !DILocation(line: 5759, column: 3, scope: !17232)
!17296 = !DILocation(line: 5759, column: 15, scope: !17232)
!17297 = !DILocation(line: 5760, column: 12, scope: !17232)
!17298 = !DILocation(line: 5760, column: 3, scope: !17232)
!17299 = !DILocation(line: 5761, column: 12, scope: !17232)
!17300 = !DILocation(line: 5761, column: 33, scope: !17232)
!17301 = !DILocation(line: 5761, column: 41, scope: !17232)
!17302 = !DILocation(line: 5761, column: 3, scope: !17232)
!17303 = !DILocation(line: 5762, column: 16, scope: !17232)
!17304 = !DILocation(line: 5762, column: 25, scope: !17232)
!17305 = !DILocation(line: 5762, column: 37, scope: !17232)
!17306 = !DILocation(line: 5762, column: 35, scope: !17232)
!17307 = !DILocation(line: 5762, column: 48, scope: !17232)
!17308 = !DILocation(line: 5762, column: 14, scope: !17232)
!17309 = !DILocation(line: 5764, column: 11, scope: !17232)
!17310 = !DILocation(line: 5764, column: 9, scope: !17232)
!17311 = !DILocation(line: 5765, column: 11, scope: !17232)
!17312 = !DILocation(line: 5765, column: 9, scope: !17232)
!17313 = !DILocation(line: 5767, column: 7, scope: !17314)
!17314 = distinct !DILexicalBlock(scope: !17232, file: !3, line: 5767, column: 7)
!17315 = !DILocation(line: 5767, column: 35, scope: !17314)
!17316 = !DILocation(line: 5767, column: 38, scope: !17314)
!17317 = !DILocation(line: 5767, column: 7, scope: !17232)
!17318 = !DILocation(line: 5769, column: 22, scope: !17319)
!17319 = distinct !DILexicalBlock(scope: !17314, file: !3, line: 5768, column: 5)
!17320 = !DILocation(line: 5769, column: 20, scope: !17319)
!17321 = !DILocation(line: 5770, column: 16, scope: !17319)
!17322 = !DILocation(line: 5770, column: 14, scope: !17319)
!17323 = !DILocation(line: 5771, column: 5, scope: !17319)
!17324 = !DILocation(line: 5774, column: 22, scope: !17325)
!17325 = distinct !DILexicalBlock(scope: !17314, file: !3, line: 5773, column: 5)
!17326 = !DILocation(line: 5774, column: 20, scope: !17325)
!17327 = !DILocation(line: 5775, column: 16, scope: !17325)
!17328 = !DILocation(line: 5775, column: 14, scope: !17325)
!17329 = !DILocation(line: 5778, column: 7, scope: !17232)
!17330 = !DILocation(line: 5778, column: 5, scope: !17232)
!17331 = !DILocation(line: 5779, column: 12, scope: !17332)
!17332 = distinct !DILexicalBlock(scope: !17232, file: !3, line: 5779, column: 3)
!17333 = !DILocation(line: 5779, column: 10, scope: !17332)
!17334 = !DILocation(line: 5779, column: 8, scope: !17332)
!17335 = !DILocation(line: 5779, column: 20, scope: !17336)
!17336 = distinct !DILexicalBlock(scope: !17332, file: !3, line: 5779, column: 3)
!17337 = !DILocation(line: 5779, column: 19, scope: !17336)
!17338 = !DILocation(line: 5779, column: 3, scope: !17332)
!17339 = !DILocation(line: 5780, column: 10, scope: !17336)
!17340 = !DILocation(line: 5780, column: 6, scope: !17336)
!17341 = !DILocation(line: 5780, column: 8, scope: !17336)
!17342 = !DILocation(line: 5780, column: 5, scope: !17336)
!17343 = !DILocation(line: 5779, column: 24, scope: !17336)
!17344 = !DILocation(line: 5779, column: 29, scope: !17336)
!17345 = !DILocation(line: 5779, column: 3, scope: !17336)
!17346 = distinct !{!17346, !17338, !17347}
!17347 = !DILocation(line: 5780, column: 10, scope: !17332)
!17348 = !DILocation(line: 5781, column: 12, scope: !17349)
!17349 = distinct !DILexicalBlock(scope: !17232, file: !3, line: 5781, column: 3)
!17350 = !DILocation(line: 5781, column: 10, scope: !17349)
!17351 = !DILocation(line: 5781, column: 8, scope: !17349)
!17352 = !DILocation(line: 5781, column: 20, scope: !17353)
!17353 = distinct !DILexicalBlock(scope: !17349, file: !3, line: 5781, column: 3)
!17354 = !DILocation(line: 5781, column: 19, scope: !17353)
!17355 = !DILocation(line: 5781, column: 3, scope: !17349)
!17356 = !DILocation(line: 5782, column: 10, scope: !17353)
!17357 = !DILocation(line: 5782, column: 6, scope: !17353)
!17358 = !DILocation(line: 5782, column: 8, scope: !17353)
!17359 = !DILocation(line: 5782, column: 5, scope: !17353)
!17360 = !DILocation(line: 5781, column: 24, scope: !17353)
!17361 = !DILocation(line: 5781, column: 29, scope: !17353)
!17362 = !DILocation(line: 5781, column: 3, scope: !17353)
!17363 = distinct !{!17363, !17355, !17364}
!17364 = !DILocation(line: 5782, column: 10, scope: !17349)
!17365 = !DILocation(line: 5784, column: 4, scope: !17232)
!17366 = !DILocation(line: 5784, column: 6, scope: !17232)
!17367 = !DILocation(line: 5786, column: 21, scope: !17232)
!17368 = !DILocation(line: 5786, column: 26, scope: !17232)
!17369 = !DILocation(line: 5786, column: 33, scope: !17232)
!17370 = !DILocation(line: 5787, column: 25, scope: !17232)
!17371 = !DILocation(line: 5787, column: 39, scope: !17232)
!17372 = !DILocation(line: 5787, column: 43, scope: !17232)
!17373 = !DILocation(line: 5787, column: 41, scope: !17232)
!17374 = !DILocation(line: 5787, column: 7, scope: !17232)
!17375 = !DILocation(line: 5786, column: 3, scope: !17232)
!17376 = !DILocation(line: 5788, column: 1, scope: !17232)
!17377 = distinct !DISubprogram(name: "gen_intraclass_conv_libfunc", scope: !3, file: !3, line: 5858, type: !14557, scopeLine: 5860, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!17378 = !DILocalVariable(name: "tab", arg: 1, scope: !17377, file: !3, line: 5858, type: !3974)
!17379 = !DILocation(line: 5858, column: 44, scope: !17377)
!17380 = !DILocalVariable(name: "opname", arg: 2, scope: !17377, file: !3, line: 5858, type: !2759)
!17381 = !DILocation(line: 5858, column: 61, scope: !17377)
!17382 = !DILocalVariable(name: "tmode", arg: 3, scope: !17377, file: !3, line: 5859, type: !5)
!17383 = !DILocation(line: 5859, column: 27, scope: !17377)
!17384 = !DILocalVariable(name: "fmode", arg: 4, scope: !17377, file: !3, line: 5859, type: !5)
!17385 = !DILocation(line: 5859, column: 52, scope: !17377)
!17386 = !DILocalVariable(name: "opname_len", scope: !17377, file: !3, line: 5861, type: !2721)
!17387 = !DILocation(line: 5861, column: 10, scope: !17377)
!17388 = !DILocation(line: 5861, column: 31, scope: !17377)
!17389 = !DILocation(line: 5861, column: 23, scope: !17377)
!17390 = !DILocalVariable(name: "mname_len", scope: !17377, file: !3, line: 5862, type: !2721)
!17391 = !DILocation(line: 5862, column: 10, scope: !17377)
!17392 = !DILocalVariable(name: "fname", scope: !17377, file: !3, line: 5864, type: !2759)
!17393 = !DILocation(line: 5864, column: 15, scope: !17377)
!17394 = !DILocalVariable(name: "tname", scope: !17377, file: !3, line: 5864, type: !2759)
!17395 = !DILocation(line: 5864, column: 23, scope: !17377)
!17396 = !DILocalVariable(name: "q", scope: !17377, file: !3, line: 5865, type: !2759)
!17397 = !DILocation(line: 5865, column: 15, scope: !17377)
!17398 = !DILocalVariable(name: "nondec_name", scope: !17377, file: !3, line: 5866, type: !2828)
!17399 = !DILocation(line: 5866, column: 9, scope: !17377)
!17400 = !DILocalVariable(name: "dec_name", scope: !17377, file: !3, line: 5866, type: !2828)
!17401 = !DILocation(line: 5866, column: 23, scope: !17377)
!17402 = !DILocalVariable(name: "nondec_suffix", scope: !17377, file: !3, line: 5866, type: !2828)
!17403 = !DILocation(line: 5866, column: 34, scope: !17377)
!17404 = !DILocalVariable(name: "dec_suffix", scope: !17377, file: !3, line: 5866, type: !2828)
!17405 = !DILocation(line: 5866, column: 50, scope: !17377)
!17406 = !DILocalVariable(name: "libfunc_name", scope: !17377, file: !3, line: 5867, type: !2828)
!17407 = !DILocation(line: 5867, column: 9, scope: !17377)
!17408 = !DILocalVariable(name: "suffix", scope: !17377, file: !3, line: 5867, type: !2828)
!17409 = !DILocation(line: 5867, column: 24, scope: !17377)
!17410 = !DILocalVariable(name: "p", scope: !17377, file: !3, line: 5868, type: !2828)
!17411 = !DILocation(line: 5868, column: 9, scope: !17377)
!17412 = !DILocalVariable(name: "dec_len", scope: !17377, file: !3, line: 5872, type: !17268)
!17413 = !DILocation(line: 5872, column: 16, scope: !17377)
!17414 = !DILocation(line: 5874, column: 23, scope: !17377)
!17415 = !DILocation(line: 5874, column: 15, scope: !17377)
!17416 = !DILocation(line: 5874, column: 56, scope: !17377)
!17417 = !DILocation(line: 5874, column: 48, scope: !17377)
!17418 = !DILocation(line: 5874, column: 46, scope: !17377)
!17419 = !DILocation(line: 5874, column: 13, scope: !17377)
!17420 = !DILocation(line: 5876, column: 17, scope: !17377)
!17421 = !DILocation(line: 5876, column: 15, scope: !17377)
!17422 = !DILocation(line: 5877, column: 3, scope: !17377)
!17423 = !DILocation(line: 5877, column: 18, scope: !17377)
!17424 = !DILocation(line: 5878, column: 3, scope: !17377)
!17425 = !DILocation(line: 5878, column: 18, scope: !17377)
!17426 = !DILocation(line: 5879, column: 12, scope: !17377)
!17427 = !DILocation(line: 5879, column: 28, scope: !17377)
!17428 = !DILocation(line: 5879, column: 36, scope: !17377)
!17429 = !DILocation(line: 5879, column: 3, scope: !17377)
!17430 = !DILocation(line: 5880, column: 19, scope: !17377)
!17431 = !DILocation(line: 5880, column: 33, scope: !17377)
!17432 = !DILocation(line: 5880, column: 31, scope: !17377)
!17433 = !DILocation(line: 5880, column: 44, scope: !17377)
!17434 = !DILocation(line: 5880, column: 17, scope: !17377)
!17435 = !DILocation(line: 5882, column: 14, scope: !17377)
!17436 = !DILocation(line: 5882, column: 12, scope: !17377)
!17437 = !DILocation(line: 5883, column: 3, scope: !17377)
!17438 = !DILocation(line: 5883, column: 15, scope: !17377)
!17439 = !DILocation(line: 5884, column: 3, scope: !17377)
!17440 = !DILocation(line: 5884, column: 15, scope: !17377)
!17441 = !DILocation(line: 5885, column: 12, scope: !17377)
!17442 = !DILocation(line: 5885, column: 3, scope: !17377)
!17443 = !DILocation(line: 5886, column: 12, scope: !17377)
!17444 = !DILocation(line: 5886, column: 35, scope: !17377)
!17445 = !DILocation(line: 5886, column: 43, scope: !17377)
!17446 = !DILocation(line: 5886, column: 3, scope: !17377)
!17447 = !DILocation(line: 5887, column: 16, scope: !17377)
!17448 = !DILocation(line: 5887, column: 25, scope: !17377)
!17449 = !DILocation(line: 5887, column: 37, scope: !17377)
!17450 = !DILocation(line: 5887, column: 35, scope: !17377)
!17451 = !DILocation(line: 5887, column: 48, scope: !17377)
!17452 = !DILocation(line: 5887, column: 14, scope: !17377)
!17453 = !DILocation(line: 5889, column: 11, scope: !17377)
!17454 = !DILocation(line: 5889, column: 9, scope: !17377)
!17455 = !DILocation(line: 5890, column: 11, scope: !17377)
!17456 = !DILocation(line: 5890, column: 9, scope: !17377)
!17457 = !DILocation(line: 5892, column: 7, scope: !17458)
!17458 = distinct !DILexicalBlock(scope: !17377, file: !3, line: 5892, column: 7)
!17459 = !DILocation(line: 5892, column: 35, scope: !17458)
!17460 = !DILocation(line: 5892, column: 38, scope: !17458)
!17461 = !DILocation(line: 5892, column: 7, scope: !17377)
!17462 = !DILocation(line: 5894, column: 22, scope: !17463)
!17463 = distinct !DILexicalBlock(scope: !17458, file: !3, line: 5893, column: 5)
!17464 = !DILocation(line: 5894, column: 20, scope: !17463)
!17465 = !DILocation(line: 5895, column: 16, scope: !17463)
!17466 = !DILocation(line: 5895, column: 14, scope: !17463)
!17467 = !DILocation(line: 5896, column: 5, scope: !17463)
!17468 = !DILocation(line: 5899, column: 22, scope: !17469)
!17469 = distinct !DILexicalBlock(scope: !17458, file: !3, line: 5898, column: 5)
!17470 = !DILocation(line: 5899, column: 20, scope: !17469)
!17471 = !DILocation(line: 5900, column: 16, scope: !17469)
!17472 = !DILocation(line: 5900, column: 14, scope: !17469)
!17473 = !DILocation(line: 5903, column: 7, scope: !17377)
!17474 = !DILocation(line: 5903, column: 5, scope: !17377)
!17475 = !DILocation(line: 5904, column: 12, scope: !17476)
!17476 = distinct !DILexicalBlock(scope: !17377, file: !3, line: 5904, column: 3)
!17477 = !DILocation(line: 5904, column: 10, scope: !17476)
!17478 = !DILocation(line: 5904, column: 8, scope: !17476)
!17479 = !DILocation(line: 5904, column: 20, scope: !17480)
!17480 = distinct !DILexicalBlock(scope: !17476, file: !3, line: 5904, column: 3)
!17481 = !DILocation(line: 5904, column: 19, scope: !17480)
!17482 = !DILocation(line: 5904, column: 3, scope: !17476)
!17483 = !DILocation(line: 5905, column: 10, scope: !17480)
!17484 = !DILocation(line: 5905, column: 6, scope: !17480)
!17485 = !DILocation(line: 5905, column: 8, scope: !17480)
!17486 = !DILocation(line: 5905, column: 5, scope: !17480)
!17487 = !DILocation(line: 5904, column: 24, scope: !17480)
!17488 = !DILocation(line: 5904, column: 29, scope: !17480)
!17489 = !DILocation(line: 5904, column: 3, scope: !17480)
!17490 = distinct !{!17490, !17482, !17491}
!17491 = !DILocation(line: 5905, column: 10, scope: !17476)
!17492 = !DILocation(line: 5906, column: 12, scope: !17493)
!17493 = distinct !DILexicalBlock(scope: !17377, file: !3, line: 5906, column: 3)
!17494 = !DILocation(line: 5906, column: 10, scope: !17493)
!17495 = !DILocation(line: 5906, column: 8, scope: !17493)
!17496 = !DILocation(line: 5906, column: 20, scope: !17497)
!17497 = distinct !DILexicalBlock(scope: !17493, file: !3, line: 5906, column: 3)
!17498 = !DILocation(line: 5906, column: 19, scope: !17497)
!17499 = !DILocation(line: 5906, column: 3, scope: !17493)
!17500 = !DILocation(line: 5907, column: 10, scope: !17497)
!17501 = !DILocation(line: 5907, column: 6, scope: !17497)
!17502 = !DILocation(line: 5907, column: 8, scope: !17497)
!17503 = !DILocation(line: 5907, column: 5, scope: !17497)
!17504 = !DILocation(line: 5906, column: 24, scope: !17497)
!17505 = !DILocation(line: 5906, column: 29, scope: !17497)
!17506 = !DILocation(line: 5906, column: 3, scope: !17497)
!17507 = distinct !{!17507, !17499, !17508}
!17508 = !DILocation(line: 5907, column: 10, scope: !17493)
!17509 = !DILocation(line: 5909, column: 5, scope: !17377)
!17510 = !DILocation(line: 5909, column: 8, scope: !17377)
!17511 = !DILocation(line: 5910, column: 4, scope: !17377)
!17512 = !DILocation(line: 5910, column: 6, scope: !17377)
!17513 = !DILocation(line: 5912, column: 21, scope: !17377)
!17514 = !DILocation(line: 5912, column: 26, scope: !17377)
!17515 = !DILocation(line: 5912, column: 33, scope: !17377)
!17516 = !DILocation(line: 5913, column: 25, scope: !17377)
!17517 = !DILocation(line: 5913, column: 39, scope: !17377)
!17518 = !DILocation(line: 5913, column: 43, scope: !17377)
!17519 = !DILocation(line: 5913, column: 41, scope: !17377)
!17520 = !DILocation(line: 5913, column: 7, scope: !17377)
!17521 = !DILocation(line: 5912, column: 3, scope: !17377)
!17522 = !DILocation(line: 5914, column: 1, scope: !17377)
!17523 = distinct !DISubprogram(name: "get_rtx_code", scope: !3, file: !3, line: 6797, type: !17524, scopeLine: 6798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!17524 = !DISubroutineType(types: !17525)
!17525 = !{!384, !190, !2966}
!17526 = !DILocalVariable(name: "tcode", arg: 1, scope: !17523, file: !3, line: 6797, type: !190)
!17527 = !DILocation(line: 6797, column: 30, scope: !17523)
!17528 = !DILocalVariable(name: "unsignedp", arg: 2, scope: !17523, file: !3, line: 6797, type: !2966)
!17529 = !DILocation(line: 6797, column: 42, scope: !17523)
!17530 = !DILocalVariable(name: "code", scope: !17523, file: !3, line: 6799, type: !384)
!17531 = !DILocation(line: 6799, column: 17, scope: !17523)
!17532 = !DILocation(line: 6800, column: 11, scope: !17523)
!17533 = !DILocation(line: 6800, column: 3, scope: !17523)
!17534 = !DILocation(line: 6803, column: 12, scope: !17535)
!17535 = distinct !DILexicalBlock(scope: !17523, file: !3, line: 6801, column: 5)
!17536 = !DILocation(line: 6804, column: 7, scope: !17535)
!17537 = !DILocation(line: 6806, column: 12, scope: !17535)
!17538 = !DILocation(line: 6807, column: 7, scope: !17535)
!17539 = !DILocation(line: 6809, column: 14, scope: !17535)
!17540 = !DILocation(line: 6809, column: 12, scope: !17535)
!17541 = !DILocation(line: 6810, column: 7, scope: !17535)
!17542 = !DILocation(line: 6812, column: 14, scope: !17535)
!17543 = !DILocation(line: 6812, column: 12, scope: !17535)
!17544 = !DILocation(line: 6813, column: 7, scope: !17535)
!17545 = !DILocation(line: 6815, column: 14, scope: !17535)
!17546 = !DILocation(line: 6815, column: 12, scope: !17535)
!17547 = !DILocation(line: 6816, column: 7, scope: !17535)
!17548 = !DILocation(line: 6818, column: 14, scope: !17535)
!17549 = !DILocation(line: 6818, column: 12, scope: !17535)
!17550 = !DILocation(line: 6819, column: 7, scope: !17535)
!17551 = !DILocation(line: 6822, column: 12, scope: !17535)
!17552 = !DILocation(line: 6823, column: 7, scope: !17535)
!17553 = !DILocation(line: 6825, column: 12, scope: !17535)
!17554 = !DILocation(line: 6826, column: 7, scope: !17535)
!17555 = !DILocation(line: 6828, column: 12, scope: !17535)
!17556 = !DILocation(line: 6829, column: 7, scope: !17535)
!17557 = !DILocation(line: 6831, column: 12, scope: !17535)
!17558 = !DILocation(line: 6832, column: 7, scope: !17535)
!17559 = !DILocation(line: 6834, column: 12, scope: !17535)
!17560 = !DILocation(line: 6835, column: 7, scope: !17535)
!17561 = !DILocation(line: 6837, column: 12, scope: !17535)
!17562 = !DILocation(line: 6838, column: 7, scope: !17535)
!17563 = !DILocation(line: 6840, column: 12, scope: !17535)
!17564 = !DILocation(line: 6841, column: 7, scope: !17535)
!17565 = !DILocation(line: 6843, column: 12, scope: !17535)
!17566 = !DILocation(line: 6844, column: 7, scope: !17535)
!17567 = !DILocation(line: 6847, column: 7, scope: !17535)
!17568 = !DILocation(line: 6848, column: 5, scope: !17535)
!17569 = !DILocation(line: 6849, column: 10, scope: !17523)
!17570 = !DILocation(line: 6849, column: 3, scope: !17523)
!17571 = distinct !DISubprogram(name: "expand_expr", scope: !2215, file: !2215, line: 555, type: !17572, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3893)
!17572 = !DISubroutineType(types: !17573)
!17573 = !{!2732, !2853, !2732, !5, !2698}
!17574 = !DILocalVariable(name: "exp", arg: 1, scope: !17571, file: !2215, line: 555, type: !2853)
!17575 = !DILocation(line: 555, column: 19, scope: !17571)
!17576 = !DILocalVariable(name: "target", arg: 2, scope: !17571, file: !2215, line: 555, type: !2732)
!17577 = !DILocation(line: 555, column: 28, scope: !17571)
!17578 = !DILocalVariable(name: "mode", arg: 3, scope: !17571, file: !2215, line: 555, type: !5)
!17579 = !DILocation(line: 555, column: 54, scope: !17571)
!17580 = !DILocalVariable(name: "modifier", arg: 4, scope: !17571, file: !2215, line: 556, type: !2698)
!17581 = !DILocation(line: 556, column: 28, scope: !17571)
!17582 = !DILocation(line: 558, column: 28, scope: !17571)
!17583 = !DILocation(line: 558, column: 33, scope: !17571)
!17584 = !DILocation(line: 558, column: 41, scope: !17571)
!17585 = !DILocation(line: 558, column: 47, scope: !17571)
!17586 = !DILocation(line: 558, column: 10, scope: !17571)
!17587 = !DILocation(line: 558, column: 3, scope: !17571)
