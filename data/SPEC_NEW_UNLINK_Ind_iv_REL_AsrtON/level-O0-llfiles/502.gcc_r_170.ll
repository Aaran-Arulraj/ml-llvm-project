; ModuleID = 'tree-inline.c'
source_filename = "tree-inline.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.processor_costs = type { i32, i32, i32, i32, [5 x i32], i32, [5 x i32], i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x %struct.stringop_algs], [2 x %struct.stringop_algs], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stringop_algs = type { i32, [4 x %struct.stringop_strategy] }
%struct.stringop_strategy = type { i32, i32 }
%struct.eni_weights_d = type { i32, i32, i32, i32, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.copy_body_data = type { %union.tree_node*, %union.tree_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.function*, %union.tree_node*, %struct.pointer_map_t*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.pointer_map_t*, i32, i8, i8, i8, i8, i32, void (%union.tree_node*)*, %struct.pointer_set_t*, %struct.basic_block_def*, %struct.VEC_gimple_heap*, %struct.pointer_map_t* }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.pointer_set_t = type opaque
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_stmt_iterator = type { %struct.tree_statement_list_node*, %union.tree_node* }
%struct.tree_statement_list_node = type { %struct.tree_statement_list_node*, %struct.tree_statement_list_node*, %union.tree_node* }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_bind = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_eh_filter = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_catch = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_try = type { %struct.gimple_statement_base, %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.gimple_statement_omp = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_statement_omp_for = type { %struct.gimple_statement_omp, %union.tree_node*, i64, %struct.gimple_omp_for_iter*, %struct.gimple_seq_d* }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimplify_ctx = type { %struct.gimplify_ctx*, %struct.VEC_gimple_heap*, %union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_heap*, %struct.htab*, i32, i8, i8, i8 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.call_expr_arg_iterator_d = type { %union.tree_node*, i32, i32 }
%struct.tree_statement_list = type { %struct.tree_common, %struct.tree_statement_list_node*, %struct.tree_statement_list_node* }
%struct.gimple_statement_wce = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_statement_omp_parallel = type { %struct.gimple_statement_omp, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_task = type { %struct.gimple_statement_omp_parallel, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_sections = type { %struct.gimple_statement_omp, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_single = type { %struct.gimple_statement_omp, %union.tree_node* }
%struct.gimple_statement_omp_critical = type { %struct.gimple_statement_omp, %union.tree_node* }
%struct.gimple_statement_eh_ctrl = type { %struct.gimple_statement_base, i32 }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }

@processing_debug_stmt = internal global i32 0, align 4, !dbg !0
@tree_code_type = external dso_local constant [0 x i32], align 4
@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [14 x i8] c"tree-inline.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@warn_inline = external dso_local global i32, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"always_inline\00", align 1
@flag_no_inline = external dso_local global i32, align 4
@.str.3 = private unnamed_addr constant [78 x i8] c"function %q+F can never be inlined because it is suppressed using -fno-inline\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.4 = private unnamed_addr constant [88 x i8] c"function %q+F can never be inlined because it uses attributes conflicting with inlining\00", align 1
@inline_forbidden_reason = internal global i8* null, align 8, !dbg !4294
@optimize_size = external dso_local global i32, align 4
@ix86_cost = external dso_local global %struct.processor_costs*, align 8
@eni_size_weights = common dso_local global %struct.eni_weights_d zeroinitializer, align 4, !dbg !4290
@eni_time_weights = common dso_local global %struct.eni_weights_d zeroinitializer, align 4, !dbg !4292
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@current_function_decl = external dso_local global %union.tree_node*, align 8
@flag_mudflap = external dso_local global i32, align 4
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.5 = private unnamed_addr constant [8 x i8] c"noclone\00", align 1
@debug_hooks = external dso_local global %struct.gcc_debug_hooks*, align 8
@eni_inlining_weights = common dso_local global %struct.eni_weights_d zeroinitializer, align 4, !dbg !4280
@.str.6 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@optimize = external dso_local global i32, align 4
@debug_info_level = external dso_local global i32, align 4
@.str.7 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.8 = private unnamed_addr constant [103 x i8] c"function %q+F can never be inlined because it uses alloca (override using the always_inline attribute)\00", align 1
@.str.9 = private unnamed_addr constant [58 x i8] c"function %q+F can never be inlined because it uses setjmp\00", align 1
@.str.10 = private unnamed_addr constant [75 x i8] c"function %q+F can never be inlined because it uses variable argument lists\00", align 1
@.str.11 = private unnamed_addr constant [85 x i8] c"function %q+F can never be inlined because it uses setjmp-longjmp exception handling\00", align 1
@.str.12 = private unnamed_addr constant [66 x i8] c"function %q+F can never be inlined because it uses non-local goto\00", align 1
@.str.13 = private unnamed_addr constant [92 x i8] c"function %q+F can never be inlined because it uses __builtin_return or __builtin_apply_args\00", align 1
@.str.14 = private unnamed_addr constant [71 x i8] c"function %q+F can never be inlined because it contains a computed goto\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@input_location = external dso_local global i32, align 4
@cgraph_global_info_ready = external dso_local global i8, align 1
@.str.15 = private unnamed_addr constant [36 x i8] c"inlining failed in call to %q+F: %s\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"called from here\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"noinline\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"cold\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.19 = private unnamed_addr constant [10 x i8] c"Inlining \00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c" with frequency %i\0A\00", align 1
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.22 = private unnamed_addr constant [71 x i8] c"function %q+F can never be copied because it receives a non-local goto\00", align 1
@.str.23 = private unnamed_addr constant [95 x i8] c"function %q+F can never be copied because it saves address of local label in a static variable\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.24 = private unnamed_addr constant [74 x i8] c"Edge frequency estimated by cgraph %i diverge from inliner's estimate %i\0A\00", align 1
@.str.25 = private unnamed_addr constant [46 x i8] c"Orig bb: %i, orig bb freq %i, new bb freq %i\0A\00", align 1
@.str.26 = private unnamed_addr constant [30 x i8] c"Created new direct edge to %s\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %key, %union.tree_node* %value) #0 !dbg !4300 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %key.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !4304, metadata !DIExpression()), !dbg !4305
  store %union.tree_node* %key, %union.tree_node** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %key.addr, metadata !4306, metadata !DIExpression()), !dbg !4307
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !4308, metadata !DIExpression()), !dbg !4309
  %0 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4310
  %1 = bitcast %union.tree_node* %0 to i8*, !dbg !4310
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4311
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 6, !dbg !4312
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !4312
  %4 = load %union.tree_node*, %union.tree_node** %key.addr, align 8, !dbg !4313
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !4313
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %3, i8* %5), !dbg !4314
  store i8* %1, i8** %call, align 8, !dbg !4315
  %6 = load %union.tree_node*, %union.tree_node** %key.addr, align 8, !dbg !4316
  %7 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4318
  %cmp = icmp ne %union.tree_node* %6, %7, !dbg !4319
  br i1 %cmp, label %if.then, label %if.end, !dbg !4320

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4321
  %9 = bitcast %union.tree_node* %8 to i8*, !dbg !4321
  %10 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4322
  %decl_map1 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %10, i32 0, i32 6, !dbg !4323
  %11 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map1, align 8, !dbg !4323
  %12 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !4324
  %13 = bitcast %union.tree_node* %12 to i8*, !dbg !4324
  %call2 = call i8** @pointer_map_insert(%struct.pointer_map_t* %11, i8* %13), !dbg !4325
  store i8* %9, i8** %call2, align 8, !dbg !4326
  br label %if.end, !dbg !4327

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4328
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @remap_decl(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !4329 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %n = alloca %union.tree_node**, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4332, metadata !DIExpression()), !dbg !4333
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !4334, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !4336, metadata !DIExpression()), !dbg !4337
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4338
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 6, !dbg !4339
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !4339
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4340
  %3 = bitcast %union.tree_node* %2 to i8*, !dbg !4340
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %1, i8* %3), !dbg !4341
  %4 = bitcast i8** %call to %union.tree_node**, !dbg !4342
  store %union.tree_node** %4, %union.tree_node*** %n, align 8, !dbg !4343
  %5 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !4344
  %tobool = icmp ne %union.tree_node** %5, null, !dbg !4344
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4346

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* @processing_debug_stmt, align 4, !dbg !4347
  %tobool1 = icmp ne i32 %6, 0, !dbg !4347
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4348

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* @processing_debug_stmt, align 4, !dbg !4349
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4351
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !4352
  br label %return, !dbg !4352

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !4353
  %tobool2 = icmp ne %union.tree_node** %8, null, !dbg !4353
  br i1 %tobool2, label %if.end69, label %if.then3, !dbg !4355

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4356, metadata !DIExpression()), !dbg !4358
  %9 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4359
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %9, i32 0, i32 7, !dbg !4360
  %10 = load %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !4360
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4361
  %12 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4362
  %call4 = call %union.tree_node* %10(%union.tree_node* %11, %struct.copy_body_data* %12), !dbg !4359
  store %union.tree_node* %call4, %union.tree_node** %t, align 8, !dbg !4358
  %13 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4363
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4364
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4365
  call void @insert_decl_map(%struct.copy_body_data* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !4366
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4367
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4367
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !4367
  %bf.load = load i64, i64* %17, align 8, !dbg !4367
  %bf.clear = and i64 %bf.load, 65535, !dbg !4367
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4367
  %idxprom = sext i32 %bf.cast to i64, !dbg !4367
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4367
  %18 = load i32, i32* %arrayidx, align 4, !dbg !4367
  %cmp = icmp eq i32 %18, 3, !dbg !4367
  br i1 %cmp, label %if.end6, label %if.then5, !dbg !4369

if.then5:                                         ; preds = %if.then3
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4370
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !4371
  br label %return, !dbg !4371

if.end6:                                          ; preds = %if.then3
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4372
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4372
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4372
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4372
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4373
  %call7 = call %union.tree_node* @remap_type(%union.tree_node* %21, %struct.copy_body_data* %22), !dbg !4374
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4375
  %common8 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !4375
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !4375
  store %union.tree_node* %call7, %union.tree_node** %type9, align 8, !dbg !4376
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4377
  %base10 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4377
  %25 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4377
  %bf.load11 = load i64, i64* %25, align 8, !dbg !4377
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4377
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4377
  %cmp14 = icmp eq i32 %bf.cast13, 35, !dbg !4379
  br i1 %cmp14, label %if.then15, label %if.end19, !dbg !4380

if.then15:                                        ; preds = %if.end6
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4381
  %decl_non_common = bitcast %union.tree_node* %26 to %struct.tree_decl_non_common*, !dbg !4381
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !4381
  %27 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4381
  %28 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4382
  %call16 = call %union.tree_node* @remap_type(%union.tree_node* %27, %struct.copy_body_data* %28), !dbg !4383
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4384
  %decl_non_common17 = bitcast %union.tree_node* %29 to %struct.tree_decl_non_common*, !dbg !4384
  %result18 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common17, i32 0, i32 3, !dbg !4384
  store %union.tree_node* %call16, %union.tree_node** %result18, align 8, !dbg !4385
  br label %if.end19, !dbg !4384

if.end19:                                         ; preds = %if.then15, %if.end6
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4386
  %decl_common = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !4386
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !4386
  %31 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4386
  %32 = bitcast %struct.copy_body_data* %31 to i8*, !dbg !4386
  %call20 = call %union.tree_node* @walk_tree_1(%union.tree_node** %size, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %32, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4386
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4387
  %decl_common21 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !4387
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 4, !dbg !4387
  %34 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4387
  %35 = bitcast %struct.copy_body_data* %34 to i8*, !dbg !4387
  %call22 = call %union.tree_node* @walk_tree_1(%union.tree_node** %size_unit, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %35, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4387
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4388
  %base23 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4388
  %37 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4388
  %bf.load24 = load i64, i64* %37, align 8, !dbg !4388
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !4388
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !4388
  %cmp27 = icmp eq i32 %bf.cast26, 31, !dbg !4390
  br i1 %cmp27, label %if.then28, label %if.end39, !dbg !4391

if.then28:                                        ; preds = %if.end19
  %38 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4392
  %field_decl = bitcast %union.tree_node* %38 to %struct.tree_field_decl*, !dbg !4392
  %offset = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 1, !dbg !4392
  %39 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4392
  %40 = bitcast %struct.copy_body_data* %39 to i8*, !dbg !4392
  %call29 = call %union.tree_node* @walk_tree_1(%union.tree_node** %offset, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %40, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4392
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4394
  %decl_minimal = bitcast %union.tree_node* %41 to %struct.tree_decl_minimal*, !dbg !4394
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !4394
  %42 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4394
  %base30 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4394
  %43 = bitcast %struct.tree_base* %base30 to i64*, !dbg !4394
  %bf.load31 = load i64, i64* %43, align 8, !dbg !4394
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !4394
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !4394
  %cmp34 = icmp eq i32 %bf.cast33, 18, !dbg !4396
  br i1 %cmp34, label %if.then35, label %if.end38, !dbg !4397

if.then35:                                        ; preds = %if.then28
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4398
  %field_decl36 = bitcast %union.tree_node* %44 to %struct.tree_field_decl*, !dbg !4398
  %qualifier = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl36, i32 0, i32 3, !dbg !4398
  %45 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4398
  %46 = bitcast %struct.copy_body_data* %45 to i8*, !dbg !4398
  %call37 = call %union.tree_node* @walk_tree_1(%union.tree_node** %qualifier, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %46, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4398
  br label %if.end38, !dbg !4398

if.end38:                                         ; preds = %if.then35, %if.then28
  br label %if.end39, !dbg !4399

if.end39:                                         ; preds = %if.end38, %if.end19
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4400
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !4400
  %tobool40 = icmp ne %struct.function* %add.ptr, null, !dbg !4400
  br i1 %tobool40, label %land.lhs.true41, label %if.end68, !dbg !4402

land.lhs.true41:                                  ; preds = %if.end39
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4403
  %add.ptr42 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !4403
  %call43 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr42), !dbg !4404
  %conv = zext i8 %call43 to i32, !dbg !4404
  %tobool44 = icmp ne i32 %conv, 0, !dbg !4404
  br i1 %tobool44, label %land.lhs.true45, label %if.end68, !dbg !4405

land.lhs.true45:                                  ; preds = %land.lhs.true41
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4406
  %base46 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !4406
  %50 = bitcast %struct.tree_base* %base46 to i64*, !dbg !4406
  %bf.load47 = load i64, i64* %50, align 8, !dbg !4406
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !4406
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !4406
  %cmp50 = icmp eq i32 %bf.cast49, 32, !dbg !4407
  br i1 %cmp50, label %if.then65, label %lor.lhs.false, !dbg !4408

lor.lhs.false:                                    ; preds = %land.lhs.true45
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4409
  %base52 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !4409
  %52 = bitcast %struct.tree_base* %base52 to i64*, !dbg !4409
  %bf.load53 = load i64, i64* %52, align 8, !dbg !4409
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !4409
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !4409
  %cmp56 = icmp eq i32 %bf.cast55, 36, !dbg !4410
  br i1 %cmp56, label %if.then65, label %lor.lhs.false58, !dbg !4411

lor.lhs.false58:                                  ; preds = %lor.lhs.false
  %53 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4412
  %base59 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !4412
  %54 = bitcast %struct.tree_base* %base59 to i64*, !dbg !4412
  %bf.load60 = load i64, i64* %54, align 8, !dbg !4412
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !4412
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !4412
  %cmp63 = icmp eq i32 %bf.cast62, 34, !dbg !4413
  br i1 %cmp63, label %if.then65, label %if.end68, !dbg !4414

if.then65:                                        ; preds = %lor.lhs.false58, %lor.lhs.false, %land.lhs.true45
  %55 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4415
  %call66 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %55), !dbg !4417
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4418
  %call67 = call zeroext i8 @add_referenced_var(%union.tree_node* %56), !dbg !4419
  br label %if.end68, !dbg !4420

if.end68:                                         ; preds = %if.then65, %lor.lhs.false58, %land.lhs.true41, %if.end39
  %57 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4421
  store %union.tree_node* %57, %union.tree_node** %retval, align 8, !dbg !4422
  br label %return, !dbg !4422

if.end69:                                         ; preds = %if.end
  %58 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4423
  %do_not_unshare = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %58, i32 0, i32 16, !dbg !4425
  %59 = load i8, i8* %do_not_unshare, align 1, !dbg !4425
  %tobool70 = icmp ne i8 %59, 0, !dbg !4423
  br i1 %tobool70, label %if.then71, label %if.else, !dbg !4426

if.then71:                                        ; preds = %if.end69
  %60 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !4427
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !4428
  store %union.tree_node* %61, %union.tree_node** %retval, align 8, !dbg !4429
  br label %return, !dbg !4429

if.else:                                          ; preds = %if.end69
  %62 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !4430
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !4431
  %call72 = call %union.tree_node* @unshare_expr(%union.tree_node* %63), !dbg !4432
  store %union.tree_node* %call72, %union.tree_node** %retval, align 8, !dbg !4433
  br label %return, !dbg !4433

return:                                           ; preds = %if.else, %if.then71, %if.end68, %if.then5, %if.then
  %64 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4434
  ret %union.tree_node* %64, !dbg !4434
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @remap_type(%union.tree_node* %type, %struct.copy_body_data* %id) #0 !dbg !4435 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %node = alloca %union.tree_node**, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4436, metadata !DIExpression()), !dbg !4437
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !4438, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.declare(metadata %union.tree_node*** %node, metadata !4440, metadata !DIExpression()), !dbg !4441
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !4442, metadata !DIExpression()), !dbg !4443
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4444
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !4446
  br i1 %cmp, label %if.then, label %if.end, !dbg !4447

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4448
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !4449
  br label %return, !dbg !4449

if.end:                                           ; preds = %entry
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4450
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 6, !dbg !4451
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !4451
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4452
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !4452
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %3, i8* %5), !dbg !4453
  %6 = bitcast i8** %call to %union.tree_node**, !dbg !4454
  store %union.tree_node** %6, %union.tree_node*** %node, align 8, !dbg !4455
  %7 = load %union.tree_node**, %union.tree_node*** %node, align 8, !dbg !4456
  %tobool = icmp ne %union.tree_node** %7, null, !dbg !4456
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !4458

if.then1:                                         ; preds = %if.end
  %8 = load %union.tree_node**, %union.tree_node*** %node, align 8, !dbg !4459
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !4460
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !4461
  br label %return, !dbg !4461

if.end2:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4462
  %11 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4464
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %11, i32 0, i32 0, !dbg !4465
  %12 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !4465
  %call3 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %10, %union.tree_node* %12), !dbg !4466
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4466
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !4467

if.then5:                                         ; preds = %if.end2
  %13 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4468
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4470
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4471
  call void @insert_decl_map(%struct.copy_body_data* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !4472
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4473
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !4474
  br label %return, !dbg !4474

if.end6:                                          ; preds = %if.end2
  %17 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4475
  %remapping_type_depth = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %17, i32 0, i32 17, !dbg !4476
  %18 = load i32, i32* %remapping_type_depth, align 8, !dbg !4477
  %inc = add nsw i32 %18, 1, !dbg !4477
  store i32 %inc, i32* %remapping_type_depth, align 8, !dbg !4477
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4478
  %20 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4479
  %call7 = call %union.tree_node* @remap_type_1(%union.tree_node* %19, %struct.copy_body_data* %20), !dbg !4480
  store %union.tree_node* %call7, %union.tree_node** %tmp, align 8, !dbg !4481
  %21 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4482
  %remapping_type_depth8 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %21, i32 0, i32 17, !dbg !4483
  %22 = load i32, i32* %remapping_type_depth8, align 8, !dbg !4484
  %dec = add nsw i32 %22, -1, !dbg !4484
  store i32 %dec, i32* %remapping_type_depth8, align 8, !dbg !4484
  %23 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !4485
  store %union.tree_node* %23, %union.tree_node** %retval, align 8, !dbg !4486
  br label %return, !dbg !4486

return:                                           ; preds = %if.end6, %if.then5, %if.then1, %if.then
  %24 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4487
  ret %union.tree_node* %24, !dbg !4487
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @copy_tree_body_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !4488 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %fn = alloca %union.tree_node*, align 8
  %new_block = alloca %union.tree_node*, align 8
  %assignment = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  %new_type = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %n = alloca %union.tree_node**, align 8
  %decl274 = alloca %union.tree_node*, align 8
  %n278 = alloca %union.tree_node**, align 8
  %new_tree = alloca %union.tree_node*, align 8
  %old = alloca %union.tree_node*, align 8
  %type283 = alloca %union.tree_node*, align 8
  %n407 = alloca %union.tree_node**, align 8
  %invariant = alloca i32, align 4
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !4492, metadata !DIExpression()), !dbg !4493
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !4494, metadata !DIExpression()), !dbg !4495
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4496, metadata !DIExpression()), !dbg !4497
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !4498, metadata !DIExpression()), !dbg !4499
  %0 = load i8*, i8** %data.addr, align 8, !dbg !4500
  %1 = bitcast i8* %0 to %struct.copy_body_data*, !dbg !4501
  store %struct.copy_body_data* %1, %struct.copy_body_data** %id, align 8, !dbg !4499
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !4502, metadata !DIExpression()), !dbg !4503
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4504
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 0, !dbg !4505
  %3 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !4505
  store %union.tree_node* %3, %union.tree_node** %fn, align 8, !dbg !4503
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_block, metadata !4506, metadata !DIExpression()), !dbg !4507
  %4 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4508
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !4508
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4508
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !4508
  %bf.load = load i64, i64* %6, align 8, !dbg !4508
  %bf.clear = and i64 %bf.load, 65535, !dbg !4508
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4508
  %cmp = icmp eq i32 %bf.cast, 135, !dbg !4510
  br i1 %cmp, label %land.lhs.true, label %if.else10, !dbg !4511

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4512
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %7, i32 0, i32 14, !dbg !4513
  %8 = load i8, i8* %transform_return_to_modify, align 1, !dbg !4513
  %conv = zext i8 %8 to i32, !dbg !4512
  %tobool = icmp ne i32 %conv, 0, !dbg !4512
  br i1 %tobool, label %if.then, label %if.else10, !dbg !4514

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %assignment, metadata !4515, metadata !DIExpression()), !dbg !4517
  %9 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4518
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !4518
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !4518
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4518
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4518
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4518
  store %union.tree_node* %11, %union.tree_node** %assignment, align 8, !dbg !4517
  %12 = load %union.tree_node*, %union.tree_node** %assignment, align 8, !dbg !4519
  %tobool1 = icmp ne %union.tree_node* %12, null, !dbg !4519
  br i1 %tobool1, label %land.lhs.true2, label %if.else, !dbg !4521

land.lhs.true2:                                   ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %assignment, align 8, !dbg !4522
  %base3 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4522
  %14 = bitcast %struct.tree_base* %base3 to i64*, !dbg !4522
  %bf.load4 = load i64, i64* %14, align 8, !dbg !4522
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !4522
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4522
  %cmp7 = icmp eq i32 %bf.cast6, 53, !dbg !4523
  br i1 %cmp7, label %if.then9, label %if.else, !dbg !4524

if.then9:                                         ; preds = %land.lhs.true2
  %15 = load %union.tree_node*, %union.tree_node** %assignment, align 8, !dbg !4525
  %call = call %union.tree_node* @copy_node_stat(%union.tree_node* %15), !dbg !4525
  %16 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4527
  store %union.tree_node* %call, %union.tree_node** %16, align 8, !dbg !4528
  br label %if.end, !dbg !4529

if.else:                                          ; preds = %land.lhs.true2, %if.then
  %17 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4530
  store %union.tree_node* null, %union.tree_node** %17, align 8, !dbg !4532
  store %union.tree_node* inttoptr (i64 1 to %union.tree_node*), %union.tree_node** %retval, align 8, !dbg !4533
  br label %return, !dbg !4533

if.end:                                           ; preds = %if.then9
  br label %if.end501, !dbg !4534

if.else10:                                        ; preds = %land.lhs.true, %entry
  %18 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4535
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !4535
  %base11 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4535
  %20 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4535
  %bf.load12 = load i64, i64* %20, align 8, !dbg !4535
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4535
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4535
  %cmp15 = icmp eq i32 %bf.cast14, 141, !dbg !4537
  br i1 %cmp15, label %if.then17, label %if.else19, !dbg !4538

if.then17:                                        ; preds = %if.else10
  %21 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4539
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !4541
  %23 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4542
  %call18 = call %union.tree_node* @remap_ssa_name(%union.tree_node* %22, %struct.copy_body_data* %23), !dbg !4543
  %24 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4544
  store %union.tree_node* %call18, %union.tree_node** %24, align 8, !dbg !4545
  %25 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4546
  store i32 0, i32* %25, align 4, !dbg !4547
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4548
  br label %return, !dbg !4548

if.else19:                                        ; preds = %if.else10
  %26 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4549
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !4551
  %28 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4552
  %call20 = call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %27, %union.tree_node* %28), !dbg !4553
  %tobool21 = icmp ne i8 %call20, 0, !dbg !4553
  br i1 %tobool21, label %if.then22, label %if.else60, !dbg !4554

if.then22:                                        ; preds = %if.else19
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !4555, metadata !DIExpression()), !dbg !4557
  %29 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4558
  %30 = load %union.tree_node*, %union.tree_node** %29, align 8, !dbg !4559
  %31 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4560
  %call23 = call %union.tree_node* @remap_decl(%union.tree_node* %30, %struct.copy_body_data* %31), !dbg !4561
  store %union.tree_node* %call23, %union.tree_node** %new_decl, align 8, !dbg !4562
  %32 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4563
  %tobool24 = icmp ne %union.tree_node* %32, null, !dbg !4563
  br i1 %tobool24, label %cond.false, label %cond.true, !dbg !4563

cond.true:                                        ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 958, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4563
  br label %cond.end, !dbg !4563

cond.false:                                       ; preds = %if.then22
  br label %cond.end, !dbg !4563

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4563
  br label %while.cond, !dbg !4564

while.cond:                                       ; preds = %while.body, %cond.end
  %33 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %base25 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !4564
  %34 = bitcast %struct.tree_base* %base25 to i64*, !dbg !4564
  %bf.load26 = load i64, i64* %34, align 8, !dbg !4564
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !4564
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !4564
  %cmp29 = icmp eq i32 %bf.cast28, 116, !dbg !4564
  br i1 %cmp29, label %land.lhs.true44, label %lor.lhs.false, !dbg !4564

lor.lhs.false:                                    ; preds = %while.cond
  %35 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %base31 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4564
  %36 = bitcast %struct.tree_base* %base31 to i64*, !dbg !4564
  %bf.load32 = load i64, i64* %36, align 8, !dbg !4564
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !4564
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !4564
  %cmp35 = icmp eq i32 %bf.cast34, 113, !dbg !4564
  br i1 %cmp35, label %land.lhs.true44, label %lor.lhs.false37, !dbg !4564

lor.lhs.false37:                                  ; preds = %lor.lhs.false
  %37 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %base38 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4564
  %38 = bitcast %struct.tree_base* %base38 to i64*, !dbg !4564
  %bf.load39 = load i64, i64* %38, align 8, !dbg !4564
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !4564
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !4564
  %cmp42 = icmp eq i32 %bf.cast41, 117, !dbg !4564
  br i1 %cmp42, label %land.lhs.true44, label %land.end, !dbg !4564

land.lhs.true44:                                  ; preds = %lor.lhs.false37, %lor.lhs.false, %while.cond
  %39 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %exp45 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !4564
  %operands46 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp45, i32 0, i32 3, !dbg !4564
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands46, i64 0, i64 0, !dbg !4564
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8, !dbg !4564
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4564
  %cmp48 = icmp ne %union.tree_node* %40, %41, !dbg !4564
  br i1 %cmp48, label %land.rhs, label %land.end, !dbg !4564

land.rhs:                                         ; preds = %land.lhs.true44
  %42 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !4564
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4564
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4564
  %44 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %exp50 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !4564
  %operands51 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp50, i32 0, i32 3, !dbg !4564
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands51, i64 0, i64 0, !dbg !4564
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !4564
  %common53 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !4564
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !4564
  %46 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !4564
  %cmp55 = icmp eq %union.tree_node* %43, %46, !dbg !4564
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true44, %lor.lhs.false37
  %47 = phi i1 [ false, %land.lhs.true44 ], [ false, %lor.lhs.false37 ], [ %cmp55, %land.rhs ], !dbg !4565
  br i1 %47, label %while.body, label %while.end, !dbg !4564

while.body:                                       ; preds = %land.end
  %48 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4564
  %exp57 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !4564
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !4564
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !4564
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !4564
  store %union.tree_node* %49, %union.tree_node** %new_decl, align 8, !dbg !4564
  br label %while.cond, !dbg !4564, !llvm.loop !4566

while.end:                                        ; preds = %land.end
  %50 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !4567
  %51 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4568
  store %union.tree_node* %50, %union.tree_node** %51, align 8, !dbg !4569
  %52 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4570
  store i32 0, i32* %52, align 4, !dbg !4571
  br label %if.end499, !dbg !4572

if.else60:                                        ; preds = %if.else19
  %53 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4573
  %54 = load %union.tree_node*, %union.tree_node** %53, align 8, !dbg !4573
  %base61 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !4573
  %55 = bitcast %struct.tree_base* %base61 to i64*, !dbg !4573
  %bf.load62 = load i64, i64* %55, align 8, !dbg !4573
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !4573
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !4573
  %cmp65 = icmp eq i32 %bf.cast64, 147, !dbg !4575
  br i1 %cmp65, label %if.then67, label %if.else68, !dbg !4576

if.then67:                                        ; preds = %if.else60
  %56 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4577
  call void @copy_statement_list(%union.tree_node** %56), !dbg !4578
  br label %if.end498, !dbg !4578

if.else68:                                        ; preds = %if.else60
  %57 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4579
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !4579
  %base69 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !4579
  %59 = bitcast %struct.tree_base* %base69 to i64*, !dbg !4579
  %bf.load70 = load i64, i64* %59, align 8, !dbg !4579
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !4579
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !4579
  %cmp73 = icmp eq i32 %bf.cast72, 120, !dbg !4581
  br i1 %cmp73, label %if.then82, label %lor.lhs.false75, !dbg !4582

lor.lhs.false75:                                  ; preds = %if.else68
  %60 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4583
  %61 = load %union.tree_node*, %union.tree_node** %60, align 8, !dbg !4583
  %base76 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !4583
  %62 = bitcast %struct.tree_base* %base76 to i64*, !dbg !4583
  %bf.load77 = load i64, i64* %62, align 8, !dbg !4583
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !4583
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !4583
  %cmp80 = icmp eq i32 %bf.cast79, 55, !dbg !4584
  br i1 %cmp80, label %if.then82, label %if.else83, !dbg !4585

if.then82:                                        ; preds = %lor.lhs.false75, %if.else68
  %63 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4586
  %64 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4587
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %64, i32 0, i32 6, !dbg !4588
  %65 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !4588
  %66 = bitcast %struct.pointer_map_t* %65 to i8*, !dbg !4587
  %67 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4589
  call void @remap_save_expr(%union.tree_node** %63, i8* %66, i32* %67), !dbg !4590
  br label %if.end497, !dbg !4590

if.else83:                                        ; preds = %lor.lhs.false75
  %68 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4591
  %69 = load %union.tree_node*, %union.tree_node** %68, align 8, !dbg !4591
  %base84 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !4591
  %70 = bitcast %struct.tree_base* %base84 to i64*, !dbg !4591
  %bf.load85 = load i64, i64* %70, align 8, !dbg !4591
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !4591
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !4591
  %cmp88 = icmp eq i32 %bf.cast87, 30, !dbg !4593
  br i1 %cmp88, label %land.lhs.true90, label %if.else99, !dbg !4594

land.lhs.true90:                                  ; preds = %if.else83
  %71 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4595
  %72 = load %union.tree_node*, %union.tree_node** %71, align 8, !dbg !4595
  %decl_minimal = bitcast %union.tree_node* %72 to %struct.tree_decl_minimal*, !dbg !4595
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !4595
  %73 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4595
  %tobool91 = icmp ne %union.tree_node* %73, null, !dbg !4595
  br i1 %tobool91, label %lor.lhs.false92, label %if.then97, !dbg !4596

lor.lhs.false92:                                  ; preds = %land.lhs.true90
  %74 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4597
  %75 = load %union.tree_node*, %union.tree_node** %74, align 8, !dbg !4598
  %call93 = call %union.tree_node* @decl_function_context(%union.tree_node* %75), !dbg !4599
  %76 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4600
  %src_fn94 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %76, i32 0, i32 0, !dbg !4601
  %77 = load %union.tree_node*, %union.tree_node** %src_fn94, align 8, !dbg !4601
  %cmp95 = icmp eq %union.tree_node* %call93, %77, !dbg !4602
  br i1 %cmp95, label %if.then97, label %if.else99, !dbg !4603

if.then97:                                        ; preds = %lor.lhs.false92, %land.lhs.true90
  %78 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4604
  %79 = load %union.tree_node*, %union.tree_node** %78, align 8, !dbg !4605
  %80 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4606
  %call98 = call %union.tree_node* @remap_decl(%union.tree_node* %79, %struct.copy_body_data* %80), !dbg !4607
  %81 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4608
  store %union.tree_node* %call98, %union.tree_node** %81, align 8, !dbg !4609
  br label %if.end496, !dbg !4610

if.else99:                                        ; preds = %lor.lhs.false92, %if.else83
  %82 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4611
  %83 = load %union.tree_node*, %union.tree_node** %82, align 8, !dbg !4611
  %base100 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !4611
  %84 = bitcast %struct.tree_base* %base100 to i64*, !dbg !4611
  %bf.load101 = load i64, i64* %84, align 8, !dbg !4611
  %bf.clear102 = and i64 %bf.load101, 65535, !dbg !4611
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !4611
  %cmp104 = icmp eq i32 %bf.cast103, 58, !dbg !4613
  br i1 %cmp104, label %if.then106, label %if.else107, !dbg !4614

if.then106:                                       ; preds = %if.else99
  %85 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4615
  %86 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4616
  %87 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4617
  call void @copy_bind_expr(%union.tree_node** %85, i32* %86, %struct.copy_body_data* %87), !dbg !4618
  br label %if.end495, !dbg !4618

if.else107:                                       ; preds = %if.else99
  %88 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4619
  %89 = load %union.tree_node*, %union.tree_node** %88, align 8, !dbg !4619
  %base108 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !4619
  %90 = bitcast %struct.tree_base* %base108 to i64*, !dbg !4619
  %bf.load109 = load i64, i64* %90, align 8, !dbg !4619
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !4619
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !4619
  %idxprom = sext i32 %bf.cast111 to i64, !dbg !4619
  %arrayidx112 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4619
  %91 = load i32, i32* %arrayidx112, align 4, !dbg !4619
  %cmp113 = icmp eq i32 %91, 2, !dbg !4619
  br i1 %cmp113, label %if.then115, label %if.else117, !dbg !4621

if.then115:                                       ; preds = %if.else107
  %92 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4622
  %93 = load %union.tree_node*, %union.tree_node** %92, align 8, !dbg !4623
  %94 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4624
  %call116 = call %union.tree_node* @remap_type(%union.tree_node* %93, %struct.copy_body_data* %94), !dbg !4625
  %95 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4626
  store %union.tree_node* %call116, %union.tree_node** %95, align 8, !dbg !4627
  br label %if.end494, !dbg !4628

if.else117:                                       ; preds = %if.else107
  %96 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4629
  %97 = load %union.tree_node*, %union.tree_node** %96, align 8, !dbg !4629
  %base118 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !4629
  %98 = bitcast %struct.tree_base* %base118 to i64*, !dbg !4629
  %bf.load119 = load i64, i64* %98, align 8, !dbg !4629
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !4629
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !4629
  %idxprom122 = sext i32 %bf.cast121 to i64, !dbg !4629
  %arrayidx123 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom122, !dbg !4629
  %99 = load i32, i32* %arrayidx123, align 4, !dbg !4629
  %cmp124 = icmp eq i32 %99, 1, !dbg !4629
  br i1 %cmp124, label %if.then126, label %if.else153, !dbg !4631

if.then126:                                       ; preds = %if.else117
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !4632, metadata !DIExpression()), !dbg !4634
  %100 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4635
  %101 = load %union.tree_node*, %union.tree_node** %100, align 8, !dbg !4635
  %common127 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !4635
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !4635
  %102 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !4635
  %103 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4636
  %call129 = call %union.tree_node* @remap_type(%union.tree_node* %102, %struct.copy_body_data* %103), !dbg !4637
  store %union.tree_node* %call129, %union.tree_node** %new_type, align 8, !dbg !4634
  %104 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4638
  %105 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4640
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8, !dbg !4640
  %common130 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !4640
  %type131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common130, i32 0, i32 2, !dbg !4640
  %107 = load %union.tree_node*, %union.tree_node** %type131, align 8, !dbg !4640
  %cmp132 = icmp eq %union.tree_node* %104, %107, !dbg !4641
  br i1 %cmp132, label %if.then134, label %if.else135, !dbg !4642

if.then134:                                       ; preds = %if.then126
  %108 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4643
  store i32 0, i32* %108, align 4, !dbg !4644
  br label %if.end152, !dbg !4645

if.else135:                                       ; preds = %if.then126
  %109 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4646
  %110 = load %union.tree_node*, %union.tree_node** %109, align 8, !dbg !4646
  %base136 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !4646
  %111 = bitcast %struct.tree_base* %base136 to i64*, !dbg !4646
  %bf.load137 = load i64, i64* %111, align 8, !dbg !4646
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !4646
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !4646
  %cmp140 = icmp eq i32 %bf.cast139, 23, !dbg !4648
  br i1 %cmp140, label %if.then142, label %if.else147, !dbg !4649

if.then142:                                       ; preds = %if.else135
  %112 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4650
  %113 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4651
  %114 = load %union.tree_node*, %union.tree_node** %113, align 8, !dbg !4651
  %int_cst = bitcast %union.tree_node* %114 to %struct.tree_int_cst*, !dbg !4651
  %int_cst143 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4651
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst143, i32 0, i32 0, !dbg !4651
  %115 = load i64, i64* %low, align 8, !dbg !4651
  %116 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4652
  %117 = load %union.tree_node*, %union.tree_node** %116, align 8, !dbg !4652
  %int_cst144 = bitcast %union.tree_node* %117 to %struct.tree_int_cst*, !dbg !4652
  %int_cst145 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst144, i32 0, i32 1, !dbg !4652
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst145, i32 0, i32 1, !dbg !4652
  %118 = load i64, i64* %high, align 8, !dbg !4652
  %call146 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %112, i64 %115, i64 %118), !dbg !4653
  %119 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4654
  store %union.tree_node* %call146, %union.tree_node** %119, align 8, !dbg !4655
  br label %if.end151, !dbg !4656

if.else147:                                       ; preds = %if.else135
  %120 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4657
  %121 = load %union.tree_node*, %union.tree_node** %120, align 8, !dbg !4657
  %call148 = call %union.tree_node* @copy_node_stat(%union.tree_node* %121), !dbg !4657
  %122 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4659
  store %union.tree_node* %call148, %union.tree_node** %122, align 8, !dbg !4660
  %123 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !4661
  %124 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4662
  %125 = load %union.tree_node*, %union.tree_node** %124, align 8, !dbg !4662
  %common149 = bitcast %union.tree_node* %125 to %struct.tree_common*, !dbg !4662
  %type150 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common149, i32 0, i32 2, !dbg !4662
  store %union.tree_node* %123, %union.tree_node** %type150, align 8, !dbg !4663
  br label %if.end151

if.end151:                                        ; preds = %if.else147, %if.then142
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.then134
  br label %if.end493, !dbg !4664

if.else153:                                       ; preds = %if.else117
  %126 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4665
  %127 = load %union.tree_node*, %union.tree_node** %126, align 8, !dbg !4665
  %base154 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !4665
  %128 = bitcast %struct.tree_base* %base154 to i64*, !dbg !4665
  %bf.load155 = load i64, i64* %128, align 8, !dbg !4665
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !4665
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !4665
  %cmp158 = icmp eq i32 %bf.cast157, 53, !dbg !4668
  br i1 %cmp158, label %land.lhs.true160, label %if.else266, !dbg !4669

land.lhs.true160:                                 ; preds = %if.else153
  %129 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4670
  %130 = load %union.tree_node*, %union.tree_node** %129, align 8, !dbg !4670
  %exp161 = bitcast %union.tree_node* %130 to %struct.tree_exp*, !dbg !4670
  %operands162 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp161, i32 0, i32 3, !dbg !4670
  %arrayidx163 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands162, i64 0, i64 0, !dbg !4670
  %131 = load %union.tree_node*, %union.tree_node** %arrayidx163, align 8, !dbg !4670
  %132 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4671
  %133 = load %union.tree_node*, %union.tree_node** %132, align 8, !dbg !4671
  %exp164 = bitcast %union.tree_node* %133 to %struct.tree_exp*, !dbg !4671
  %operands165 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp164, i32 0, i32 3, !dbg !4671
  %arrayidx166 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands165, i64 0, i64 1, !dbg !4671
  %134 = load %union.tree_node*, %union.tree_node** %arrayidx166, align 8, !dbg !4671
  %cmp167 = icmp eq %union.tree_node* %131, %134, !dbg !4672
  br i1 %cmp167, label %land.lhs.true169, label %if.else266, !dbg !4673

land.lhs.true169:                                 ; preds = %land.lhs.true160
  %135 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4674
  %136 = load %union.tree_node*, %union.tree_node** %135, align 8, !dbg !4674
  %exp170 = bitcast %union.tree_node* %136 to %struct.tree_exp*, !dbg !4674
  %operands171 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp170, i32 0, i32 3, !dbg !4674
  %arrayidx172 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands171, i64 0, i64 0, !dbg !4674
  %137 = load %union.tree_node*, %union.tree_node** %arrayidx172, align 8, !dbg !4674
  %138 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4675
  %call173 = call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %137, %union.tree_node* %138), !dbg !4676
  %conv174 = zext i8 %call173 to i32, !dbg !4677
  %tobool175 = icmp ne i32 %conv174, 0, !dbg !4677
  br i1 %tobool175, label %if.then176, label %if.else266, !dbg !4678

if.then176:                                       ; preds = %land.lhs.true169
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4679, metadata !DIExpression()), !dbg !4681
  %139 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4682
  %140 = load %union.tree_node*, %union.tree_node** %139, align 8, !dbg !4682
  %exp177 = bitcast %union.tree_node* %140 to %struct.tree_exp*, !dbg !4682
  %operands178 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp177, i32 0, i32 3, !dbg !4682
  %arrayidx179 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands178, i64 0, i64 0, !dbg !4682
  %141 = load %union.tree_node*, %union.tree_node** %arrayidx179, align 8, !dbg !4682
  store %union.tree_node* %141, %union.tree_node** %decl, align 8, !dbg !4681
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !4683, metadata !DIExpression()), !dbg !4684
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !4685, metadata !DIExpression()), !dbg !4686
  %142 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4687
  %decl_map180 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %142, i32 0, i32 6, !dbg !4688
  %143 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map180, align 8, !dbg !4688
  %144 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4689
  %145 = bitcast %union.tree_node* %144 to i8*, !dbg !4689
  %call181 = call i8** @pointer_map_contains(%struct.pointer_map_t* %143, i8* %145), !dbg !4690
  %146 = bitcast i8** %call181 to %union.tree_node**, !dbg !4691
  store %union.tree_node** %146, %union.tree_node*** %n, align 8, !dbg !4692
  %147 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !4693
  %tobool182 = icmp ne %union.tree_node** %147, null, !dbg !4693
  br i1 %tobool182, label %if.then183, label %if.end265, !dbg !4695

if.then183:                                       ; preds = %if.then176
  %148 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !4696
  %149 = load %union.tree_node*, %union.tree_node** %148, align 8, !dbg !4698
  store %union.tree_node* %149, %union.tree_node** %value, align 8, !dbg !4699
  br label %while.cond184, !dbg !4700

while.cond184:                                    ; preds = %while.body222, %if.then183
  %150 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %base185 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !4700
  %151 = bitcast %struct.tree_base* %base185 to i64*, !dbg !4700
  %bf.load186 = load i64, i64* %151, align 8, !dbg !4700
  %bf.clear187 = and i64 %bf.load186, 65535, !dbg !4700
  %bf.cast188 = trunc i64 %bf.clear187 to i32, !dbg !4700
  %cmp189 = icmp eq i32 %bf.cast188, 116, !dbg !4700
  br i1 %cmp189, label %land.lhs.true205, label %lor.lhs.false191, !dbg !4700

lor.lhs.false191:                                 ; preds = %while.cond184
  %152 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %base192 = bitcast %union.tree_node* %152 to %struct.tree_base*, !dbg !4700
  %153 = bitcast %struct.tree_base* %base192 to i64*, !dbg !4700
  %bf.load193 = load i64, i64* %153, align 8, !dbg !4700
  %bf.clear194 = and i64 %bf.load193, 65535, !dbg !4700
  %bf.cast195 = trunc i64 %bf.clear194 to i32, !dbg !4700
  %cmp196 = icmp eq i32 %bf.cast195, 113, !dbg !4700
  br i1 %cmp196, label %land.lhs.true205, label %lor.lhs.false198, !dbg !4700

lor.lhs.false198:                                 ; preds = %lor.lhs.false191
  %154 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %base199 = bitcast %union.tree_node* %154 to %struct.tree_base*, !dbg !4700
  %155 = bitcast %struct.tree_base* %base199 to i64*, !dbg !4700
  %bf.load200 = load i64, i64* %155, align 8, !dbg !4700
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !4700
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !4700
  %cmp203 = icmp eq i32 %bf.cast202, 117, !dbg !4700
  br i1 %cmp203, label %land.lhs.true205, label %land.end221, !dbg !4700

land.lhs.true205:                                 ; preds = %lor.lhs.false198, %lor.lhs.false191, %while.cond184
  %156 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %exp206 = bitcast %union.tree_node* %156 to %struct.tree_exp*, !dbg !4700
  %operands207 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp206, i32 0, i32 3, !dbg !4700
  %arrayidx208 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands207, i64 0, i64 0, !dbg !4700
  %157 = load %union.tree_node*, %union.tree_node** %arrayidx208, align 8, !dbg !4700
  %158 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4700
  %cmp209 = icmp ne %union.tree_node* %157, %158, !dbg !4700
  br i1 %cmp209, label %land.rhs211, label %land.end221, !dbg !4700

land.rhs211:                                      ; preds = %land.lhs.true205
  %159 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %common212 = bitcast %union.tree_node* %159 to %struct.tree_common*, !dbg !4700
  %type213 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common212, i32 0, i32 2, !dbg !4700
  %160 = load %union.tree_node*, %union.tree_node** %type213, align 8, !dbg !4700
  %161 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %exp214 = bitcast %union.tree_node* %161 to %struct.tree_exp*, !dbg !4700
  %operands215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp214, i32 0, i32 3, !dbg !4700
  %arrayidx216 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands215, i64 0, i64 0, !dbg !4700
  %162 = load %union.tree_node*, %union.tree_node** %arrayidx216, align 8, !dbg !4700
  %common217 = bitcast %union.tree_node* %162 to %struct.tree_common*, !dbg !4700
  %type218 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common217, i32 0, i32 2, !dbg !4700
  %163 = load %union.tree_node*, %union.tree_node** %type218, align 8, !dbg !4700
  %cmp219 = icmp eq %union.tree_node* %160, %163, !dbg !4700
  br label %land.end221

land.end221:                                      ; preds = %land.rhs211, %land.lhs.true205, %lor.lhs.false198
  %164 = phi i1 [ false, %land.lhs.true205 ], [ false, %lor.lhs.false198 ], [ %cmp219, %land.rhs211 ], !dbg !4701
  br i1 %164, label %while.body222, label %while.end226, !dbg !4700

while.body222:                                    ; preds = %land.end221
  %165 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4700
  %exp223 = bitcast %union.tree_node* %165 to %struct.tree_exp*, !dbg !4700
  %operands224 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp223, i32 0, i32 3, !dbg !4700
  %arrayidx225 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands224, i64 0, i64 0, !dbg !4700
  %166 = load %union.tree_node*, %union.tree_node** %arrayidx225, align 8, !dbg !4700
  store %union.tree_node* %166, %union.tree_node** %value, align 8, !dbg !4700
  br label %while.cond184, !dbg !4700, !llvm.loop !4702

while.end226:                                     ; preds = %land.end221
  %167 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4703
  %base227 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !4703
  %168 = bitcast %struct.tree_base* %base227 to i64*, !dbg !4703
  %bf.load228 = load i64, i64* %168, align 8, !dbg !4703
  %bf.lshr = lshr i64 %bf.load228, 17, !dbg !4703
  %bf.clear229 = and i64 %bf.lshr, 1, !dbg !4703
  %bf.cast230 = trunc i64 %bf.clear229 to i32, !dbg !4703
  %tobool231 = icmp ne i32 %bf.cast230, 0, !dbg !4703
  br i1 %tobool231, label %if.then239, label %lor.lhs.false232, !dbg !4705

lor.lhs.false232:                                 ; preds = %while.end226
  %169 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4706
  %base233 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !4706
  %170 = bitcast %struct.tree_base* %base233 to i64*, !dbg !4706
  %bf.load234 = load i64, i64* %170, align 8, !dbg !4706
  %bf.lshr235 = lshr i64 %bf.load234, 20, !dbg !4706
  %bf.clear236 = and i64 %bf.lshr235, 1, !dbg !4706
  %bf.cast237 = trunc i64 %bf.clear236 to i32, !dbg !4706
  %tobool238 = icmp ne i32 %bf.cast237, 0, !dbg !4706
  br i1 %tobool238, label %if.then239, label %if.end264, !dbg !4707

if.then239:                                       ; preds = %lor.lhs.false232, %while.end226
  %171 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4708
  %172 = load %union.tree_node*, %union.tree_node** %171, align 8, !dbg !4708
  %base240 = bitcast %union.tree_node* %172 to %struct.tree_base*, !dbg !4708
  %173 = bitcast %struct.tree_base* %base240 to i64*, !dbg !4708
  %bf.load241 = load i64, i64* %173, align 8, !dbg !4708
  %bf.clear242 = and i64 %bf.load241, 65535, !dbg !4708
  %bf.cast243 = trunc i64 %bf.clear242 to i32, !dbg !4708
  %idxprom244 = sext i32 %bf.cast243 to i64, !dbg !4708
  %arrayidx245 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom244, !dbg !4708
  %174 = load i32, i32* %arrayidx245, align 4, !dbg !4708
  %cmp246 = icmp uge i32 %174, 4, !dbg !4708
  br i1 %cmp246, label %land.lhs.true248, label %cond.false259, !dbg !4708

land.lhs.true248:                                 ; preds = %if.then239
  %175 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4708
  %176 = load %union.tree_node*, %union.tree_node** %175, align 8, !dbg !4708
  %base249 = bitcast %union.tree_node* %176 to %struct.tree_base*, !dbg !4708
  %177 = bitcast %struct.tree_base* %base249 to i64*, !dbg !4708
  %bf.load250 = load i64, i64* %177, align 8, !dbg !4708
  %bf.clear251 = and i64 %bf.load250, 65535, !dbg !4708
  %bf.cast252 = trunc i64 %bf.clear251 to i32, !dbg !4708
  %idxprom253 = sext i32 %bf.cast252 to i64, !dbg !4708
  %arrayidx254 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom253, !dbg !4708
  %178 = load i32, i32* %arrayidx254, align 4, !dbg !4708
  %cmp255 = icmp ule i32 %178, 10, !dbg !4708
  br i1 %cmp255, label %cond.true257, label %cond.false259, !dbg !4708

cond.true257:                                     ; preds = %land.lhs.true248
  %179 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4708
  %180 = load %union.tree_node*, %union.tree_node** %179, align 8, !dbg !4708
  %exp258 = bitcast %union.tree_node* %180 to %struct.tree_exp*, !dbg !4708
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp258, i32 0, i32 1, !dbg !4708
  %181 = load i32, i32* %locus, align 8, !dbg !4708
  br label %cond.end260, !dbg !4708

cond.false259:                                    ; preds = %land.lhs.true248, %if.then239
  br label %cond.end260, !dbg !4708

cond.end260:                                      ; preds = %cond.false259, %cond.true257
  %cond261 = phi i32 [ %181, %cond.true257 ], [ 0, %cond.false259 ], !dbg !4708
  %call262 = call %union.tree_node* @build_empty_stmt(i32 %cond261), !dbg !4710
  %182 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4711
  store %union.tree_node* %call262, %union.tree_node** %182, align 8, !dbg !4712
  %183 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4713
  %184 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4714
  %185 = load i8*, i8** %data.addr, align 8, !dbg !4715
  %call263 = call %union.tree_node* @copy_tree_body_r(%union.tree_node** %183, i32* %184, i8* %185), !dbg !4716
  store %union.tree_node* %call263, %union.tree_node** %retval, align 8, !dbg !4717
  br label %return, !dbg !4717

if.end264:                                        ; preds = %lor.lhs.false232
  br label %if.end265, !dbg !4718

if.end265:                                        ; preds = %if.end264, %if.then176
  br label %if.end359, !dbg !4719

if.else266:                                       ; preds = %land.lhs.true169, %land.lhs.true160, %if.else153
  %186 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4720
  %187 = load %union.tree_node*, %union.tree_node** %186, align 8, !dbg !4720
  %base267 = bitcast %union.tree_node* %187 to %struct.tree_base*, !dbg !4720
  %188 = bitcast %struct.tree_base* %base267 to i64*, !dbg !4720
  %bf.load268 = load i64, i64* %188, align 8, !dbg !4720
  %bf.clear269 = and i64 %bf.load268, 65535, !dbg !4720
  %bf.cast270 = trunc i64 %bf.clear269 to i32, !dbg !4720
  %cmp271 = icmp eq i32 %bf.cast270, 47, !dbg !4722
  br i1 %cmp271, label %if.then273, label %if.end358, !dbg !4723

if.then273:                                       ; preds = %if.else266
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl274, metadata !4724, metadata !DIExpression()), !dbg !4726
  %189 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4727
  %190 = load %union.tree_node*, %union.tree_node** %189, align 8, !dbg !4727
  %exp275 = bitcast %union.tree_node* %190 to %struct.tree_exp*, !dbg !4727
  %operands276 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp275, i32 0, i32 3, !dbg !4727
  %arrayidx277 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands276, i64 0, i64 0, !dbg !4727
  %191 = load %union.tree_node*, %union.tree_node** %arrayidx277, align 8, !dbg !4727
  store %union.tree_node* %191, %union.tree_node** %decl274, align 8, !dbg !4726
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n278, metadata !4728, metadata !DIExpression()), !dbg !4729
  %192 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4730
  %decl_map279 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %192, i32 0, i32 6, !dbg !4731
  %193 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map279, align 8, !dbg !4731
  %194 = load %union.tree_node*, %union.tree_node** %decl274, align 8, !dbg !4732
  %195 = bitcast %union.tree_node* %194 to i8*, !dbg !4732
  %call280 = call i8** @pointer_map_contains(%struct.pointer_map_t* %193, i8* %195), !dbg !4733
  %196 = bitcast i8** %call280 to %union.tree_node**, !dbg !4734
  store %union.tree_node** %196, %union.tree_node*** %n278, align 8, !dbg !4735
  %197 = load %union.tree_node**, %union.tree_node*** %n278, align 8, !dbg !4736
  %tobool281 = icmp ne %union.tree_node** %197, null, !dbg !4736
  br i1 %tobool281, label %if.then282, label %if.end357, !dbg !4738

if.then282:                                       ; preds = %if.then273
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !4739, metadata !DIExpression()), !dbg !4741
  call void @llvm.dbg.declare(metadata %union.tree_node** %old, metadata !4742, metadata !DIExpression()), !dbg !4743
  call void @llvm.dbg.declare(metadata %union.tree_node** %type283, metadata !4744, metadata !DIExpression()), !dbg !4745
  %198 = load %union.tree_node**, %union.tree_node*** %n278, align 8, !dbg !4746
  %199 = load %union.tree_node*, %union.tree_node** %198, align 8, !dbg !4746
  %common284 = bitcast %union.tree_node* %199 to %struct.tree_common*, !dbg !4746
  %type285 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common284, i32 0, i32 2, !dbg !4746
  %200 = load %union.tree_node*, %union.tree_node** %type285, align 8, !dbg !4746
  %common286 = bitcast %union.tree_node* %200 to %struct.tree_common*, !dbg !4746
  %type287 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common286, i32 0, i32 2, !dbg !4746
  %201 = load %union.tree_node*, %union.tree_node** %type287, align 8, !dbg !4746
  store %union.tree_node* %201, %union.tree_node** %type283, align 8, !dbg !4745
  %202 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4747
  %do_not_unshare = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %202, i32 0, i32 16, !dbg !4749
  %203 = load i8, i8* %do_not_unshare, align 1, !dbg !4749
  %tobool288 = icmp ne i8 %203, 0, !dbg !4747
  br i1 %tobool288, label %if.then289, label %if.else290, !dbg !4750

if.then289:                                       ; preds = %if.then282
  %204 = load %union.tree_node**, %union.tree_node*** %n278, align 8, !dbg !4751
  %205 = load %union.tree_node*, %union.tree_node** %204, align 8, !dbg !4752
  store %union.tree_node* %205, %union.tree_node** %new_tree, align 8, !dbg !4753
  br label %if.end292, !dbg !4754

if.else290:                                       ; preds = %if.then282
  %206 = load %union.tree_node**, %union.tree_node*** %n278, align 8, !dbg !4755
  %207 = load %union.tree_node*, %union.tree_node** %206, align 8, !dbg !4756
  %call291 = call %union.tree_node* @unshare_expr(%union.tree_node* %207), !dbg !4757
  store %union.tree_node* %call291, %union.tree_node** %new_tree, align 8, !dbg !4758
  br label %if.end292

if.end292:                                        ; preds = %if.else290, %if.then289
  %208 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4759
  %209 = load %union.tree_node*, %union.tree_node** %208, align 8, !dbg !4760
  store %union.tree_node* %209, %union.tree_node** %old, align 8, !dbg !4761
  %210 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4762
  %call293 = call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %210), !dbg !4763
  %211 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4764
  store %union.tree_node* %call293, %union.tree_node** %211, align 8, !dbg !4765
  %212 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4766
  %213 = load %union.tree_node*, %union.tree_node** %212, align 8, !dbg !4768
  %tobool294 = icmp ne %union.tree_node* %213, null, !dbg !4768
  br i1 %tobool294, label %if.end356, label %if.then295, !dbg !4769

if.then295:                                       ; preds = %if.end292
  %214 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4770
  %base296 = bitcast %union.tree_node* %214 to %struct.tree_base*, !dbg !4770
  %215 = bitcast %struct.tree_base* %base296 to i64*, !dbg !4770
  %bf.load297 = load i64, i64* %215, align 8, !dbg !4770
  %bf.clear298 = and i64 %bf.load297, 65535, !dbg !4770
  %bf.cast299 = trunc i64 %bf.clear298 to i32, !dbg !4770
  %cmp300 = icmp eq i32 %bf.cast299, 121, !dbg !4773
  br i1 %cmp300, label %if.then302, label %if.else333, !dbg !4774

if.then302:                                       ; preds = %if.then295
  %216 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4775
  %base303 = bitcast %union.tree_node* %216 to %struct.tree_base*, !dbg !4775
  %217 = bitcast %struct.tree_base* %base303 to i64*, !dbg !4775
  %bf.load304 = load i64, i64* %217, align 8, !dbg !4775
  %bf.clear305 = and i64 %bf.load304, 65535, !dbg !4775
  %bf.cast306 = trunc i64 %bf.clear305 to i32, !dbg !4775
  %idxprom307 = sext i32 %bf.cast306 to i64, !dbg !4775
  %arrayidx308 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom307, !dbg !4775
  %218 = load i32, i32* %arrayidx308, align 4, !dbg !4775
  %cmp309 = icmp uge i32 %218, 4, !dbg !4775
  br i1 %cmp309, label %land.lhs.true311, label %cond.false323, !dbg !4775

land.lhs.true311:                                 ; preds = %if.then302
  %219 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4775
  %base312 = bitcast %union.tree_node* %219 to %struct.tree_base*, !dbg !4775
  %220 = bitcast %struct.tree_base* %base312 to i64*, !dbg !4775
  %bf.load313 = load i64, i64* %220, align 8, !dbg !4775
  %bf.clear314 = and i64 %bf.load313, 65535, !dbg !4775
  %bf.cast315 = trunc i64 %bf.clear314 to i32, !dbg !4775
  %idxprom316 = sext i32 %bf.cast315 to i64, !dbg !4775
  %arrayidx317 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom316, !dbg !4775
  %221 = load i32, i32* %arrayidx317, align 4, !dbg !4775
  %cmp318 = icmp ule i32 %221, 10, !dbg !4775
  br i1 %cmp318, label %cond.true320, label %cond.false323, !dbg !4775

cond.true320:                                     ; preds = %land.lhs.true311
  %222 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4775
  %exp321 = bitcast %union.tree_node* %222 to %struct.tree_exp*, !dbg !4775
  %locus322 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp321, i32 0, i32 1, !dbg !4775
  %223 = load i32, i32* %locus322, align 8, !dbg !4775
  br label %cond.end324, !dbg !4775

cond.false323:                                    ; preds = %land.lhs.true311, %if.then302
  br label %cond.end324, !dbg !4775

cond.end324:                                      ; preds = %cond.false323, %cond.true320
  %cond325 = phi i32 [ %223, %cond.true320 ], [ 0, %cond.false323 ], !dbg !4775
  %224 = load %union.tree_node*, %union.tree_node** %type283, align 8, !dbg !4777
  %225 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4778
  %call326 = call %union.tree_node* @fold_indirect_ref_1(i32 %cond325, %union.tree_node* %224, %union.tree_node* %225), !dbg !4779
  %226 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4780
  store %union.tree_node* %call326, %union.tree_node** %226, align 8, !dbg !4781
  %227 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4782
  %228 = load %union.tree_node*, %union.tree_node** %227, align 8, !dbg !4784
  %tobool327 = icmp ne %union.tree_node* %228, null, !dbg !4784
  br i1 %tobool327, label %if.end332, label %if.then328, !dbg !4785

if.then328:                                       ; preds = %cond.end324
  %229 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4786
  %exp329 = bitcast %union.tree_node* %229 to %struct.tree_exp*, !dbg !4786
  %operands330 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp329, i32 0, i32 3, !dbg !4786
  %arrayidx331 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands330, i64 0, i64 0, !dbg !4786
  %230 = load %union.tree_node*, %union.tree_node** %arrayidx331, align 8, !dbg !4786
  %231 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4787
  store %union.tree_node* %230, %union.tree_node** %231, align 8, !dbg !4788
  br label %if.end332, !dbg !4789

if.end332:                                        ; preds = %if.then328, %cond.end324
  br label %if.end355, !dbg !4790

if.else333:                                       ; preds = %if.then295
  %232 = load %union.tree_node*, %union.tree_node** %type283, align 8, !dbg !4791
  %233 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4791
  %call334 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %232, %union.tree_node* %233), !dbg !4791
  %234 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4793
  store %union.tree_node* %call334, %union.tree_node** %234, align 8, !dbg !4794
  %235 = load %union.tree_node*, %union.tree_node** %old, align 8, !dbg !4795
  %base335 = bitcast %union.tree_node* %235 to %struct.tree_base*, !dbg !4795
  %236 = bitcast %struct.tree_base* %base335 to i64*, !dbg !4795
  %bf.load336 = load i64, i64* %236, align 8, !dbg !4795
  %bf.lshr337 = lshr i64 %bf.load336, 19, !dbg !4795
  %bf.clear338 = and i64 %bf.lshr337, 1, !dbg !4795
  %bf.cast339 = trunc i64 %bf.clear338 to i32, !dbg !4795
  %237 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4796
  %238 = load %union.tree_node*, %union.tree_node** %237, align 8, !dbg !4796
  %base340 = bitcast %union.tree_node* %238 to %struct.tree_base*, !dbg !4796
  %239 = bitcast %struct.tree_base* %base340 to i64*, !dbg !4796
  %240 = zext i32 %bf.cast339 to i64, !dbg !4797
  %bf.load341 = load i64, i64* %239, align 8, !dbg !4797
  %bf.value = and i64 %240, 1, !dbg !4797
  %bf.shl = shl i64 %bf.value, 19, !dbg !4797
  %bf.clear342 = and i64 %bf.load341, -524289, !dbg !4797
  %bf.set = or i64 %bf.clear342, %bf.shl, !dbg !4797
  store i64 %bf.set, i64* %239, align 8, !dbg !4797
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4797
  %241 = load %union.tree_node*, %union.tree_node** %old, align 8, !dbg !4798
  %base343 = bitcast %union.tree_node* %241 to %struct.tree_base*, !dbg !4798
  %242 = bitcast %struct.tree_base* %base343 to i64*, !dbg !4798
  %bf.load344 = load i64, i64* %242, align 8, !dbg !4798
  %bf.lshr345 = lshr i64 %bf.load344, 16, !dbg !4798
  %bf.clear346 = and i64 %bf.lshr345, 1, !dbg !4798
  %bf.cast347 = trunc i64 %bf.clear346 to i32, !dbg !4798
  %243 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4799
  %244 = load %union.tree_node*, %union.tree_node** %243, align 8, !dbg !4799
  %base348 = bitcast %union.tree_node* %244 to %struct.tree_base*, !dbg !4799
  %245 = bitcast %struct.tree_base* %base348 to i64*, !dbg !4799
  %246 = zext i32 %bf.cast347 to i64, !dbg !4800
  %bf.load349 = load i64, i64* %245, align 8, !dbg !4800
  %bf.value350 = and i64 %246, 1, !dbg !4800
  %bf.shl351 = shl i64 %bf.value350, 16, !dbg !4800
  %bf.clear352 = and i64 %bf.load349, -65537, !dbg !4800
  %bf.set353 = or i64 %bf.clear352, %bf.shl351, !dbg !4800
  store i64 %bf.set353, i64* %245, align 8, !dbg !4800
  %bf.result.cast354 = trunc i64 %bf.value350 to i32, !dbg !4800
  br label %if.end355

if.end355:                                        ; preds = %if.else333, %if.end332
  br label %if.end356, !dbg !4801

if.end356:                                        ; preds = %if.end355, %if.end292
  %247 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4802
  store i32 0, i32* %247, align 4, !dbg !4803
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4804
  br label %return, !dbg !4804

if.end357:                                        ; preds = %if.then273
  br label %if.end358, !dbg !4805

if.end358:                                        ; preds = %if.end357, %if.else266
  br label %if.end359

if.end359:                                        ; preds = %if.end358, %if.end265
  %248 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4806
  %249 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4807
  %call360 = call %union.tree_node* @copy_tree_r(%union.tree_node** %248, i32* %249, i8* null), !dbg !4808
  %250 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4809
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %250, i64 0, !dbg !4809
  %call361 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !4811
  %conv362 = zext i8 %call361 to i32, !dbg !4811
  %tobool363 = icmp ne i32 %conv362, 0, !dbg !4811
  br i1 %tobool363, label %land.lhs.true364, label %if.end378, !dbg !4812

land.lhs.true364:                                 ; preds = %if.end359
  %251 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4813
  %252 = load %union.tree_node*, %union.tree_node** %251, align 8, !dbg !4813
  %base365 = bitcast %union.tree_node* %252 to %struct.tree_base*, !dbg !4813
  %253 = bitcast %struct.tree_base* %base365 to i64*, !dbg !4813
  %bf.load366 = load i64, i64* %253, align 8, !dbg !4813
  %bf.clear367 = and i64 %bf.load366, 65535, !dbg !4813
  %bf.cast368 = trunc i64 %bf.clear367 to i32, !dbg !4813
  %cmp369 = icmp eq i32 %bf.cast368, 32, !dbg !4814
  br i1 %cmp369, label %land.lhs.true371, label %if.end378, !dbg !4815

land.lhs.true371:                                 ; preds = %land.lhs.true364
  %254 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4816
  %remapping_type_depth = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %254, i32 0, i32 17, !dbg !4817
  %255 = load i32, i32* %remapping_type_depth, align 8, !dbg !4817
  %cmp372 = icmp eq i32 %255, 0, !dbg !4818
  br i1 %cmp372, label %land.lhs.true374, label %if.end378, !dbg !4819

land.lhs.true374:                                 ; preds = %land.lhs.true371
  %256 = load i32, i32* @processing_debug_stmt, align 4, !dbg !4820
  %tobool375 = icmp ne i32 %256, 0, !dbg !4820
  br i1 %tobool375, label %if.end378, label %if.then376, !dbg !4821

if.then376:                                       ; preds = %land.lhs.true374
  %257 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4822
  %258 = load %union.tree_node*, %union.tree_node** %257, align 8, !dbg !4823
  %call377 = call zeroext i8 @add_referenced_var(%union.tree_node* %258), !dbg !4824
  br label %if.end378, !dbg !4824

if.end378:                                        ; preds = %if.then376, %land.lhs.true374, %land.lhs.true371, %land.lhs.true364, %if.end359
  %259 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4825
  %260 = load %union.tree_node*, %union.tree_node** %259, align 8, !dbg !4825
  %base379 = bitcast %union.tree_node* %260 to %struct.tree_base*, !dbg !4825
  %261 = bitcast %struct.tree_base* %base379 to i64*, !dbg !4825
  %bf.load380 = load i64, i64* %261, align 8, !dbg !4825
  %bf.clear381 = and i64 %bf.load380, 65535, !dbg !4825
  %bf.cast382 = trunc i64 %bf.clear381 to i32, !dbg !4825
  %idxprom383 = sext i32 %bf.cast382 to i64, !dbg !4825
  %arrayidx384 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom383, !dbg !4825
  %262 = load i32, i32* %arrayidx384, align 4, !dbg !4825
  %cmp385 = icmp uge i32 %262, 4, !dbg !4825
  br i1 %cmp385, label %land.lhs.true387, label %if.end418, !dbg !4825

land.lhs.true387:                                 ; preds = %if.end378
  %263 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4825
  %264 = load %union.tree_node*, %union.tree_node** %263, align 8, !dbg !4825
  %base388 = bitcast %union.tree_node* %264 to %struct.tree_base*, !dbg !4825
  %265 = bitcast %struct.tree_base* %base388 to i64*, !dbg !4825
  %bf.load389 = load i64, i64* %265, align 8, !dbg !4825
  %bf.clear390 = and i64 %bf.load389, 65535, !dbg !4825
  %bf.cast391 = trunc i64 %bf.clear390 to i32, !dbg !4825
  %idxprom392 = sext i32 %bf.cast391 to i64, !dbg !4825
  %arrayidx393 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom392, !dbg !4825
  %266 = load i32, i32* %arrayidx393, align 4, !dbg !4825
  %cmp394 = icmp ule i32 %266, 10, !dbg !4825
  br i1 %cmp394, label %if.then396, label %if.end418, !dbg !4827

if.then396:                                       ; preds = %land.lhs.true387
  %267 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4828
  %remapping_type_depth397 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %267, i32 0, i32 17, !dbg !4830
  %268 = load i32, i32* %remapping_type_depth397, align 8, !dbg !4830
  %cmp398 = icmp eq i32 %268, 0, !dbg !4831
  br i1 %cmp398, label %cond.true400, label %cond.false401, !dbg !4828

cond.true400:                                     ; preds = %if.then396
  %269 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4832
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %269, i32 0, i32 8, !dbg !4833
  %270 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !4833
  br label %cond.end402, !dbg !4828

cond.false401:                                    ; preds = %if.then396
  br label %cond.end402, !dbg !4828

cond.end402:                                      ; preds = %cond.false401, %cond.true400
  %cond403 = phi %union.tree_node* [ %270, %cond.true400 ], [ null, %cond.false401 ], !dbg !4828
  store %union.tree_node* %cond403, %union.tree_node** %new_block, align 8, !dbg !4834
  %271 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4835
  %272 = load %union.tree_node*, %union.tree_node** %271, align 8, !dbg !4835
  %call404 = call %union.tree_node** @tree_block(%union.tree_node* %272), !dbg !4835
  %273 = load %union.tree_node*, %union.tree_node** %call404, align 8, !dbg !4835
  %tobool405 = icmp ne %union.tree_node* %273, null, !dbg !4835
  br i1 %tobool405, label %if.then406, label %if.end416, !dbg !4837

if.then406:                                       ; preds = %cond.end402
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n407, metadata !4838, metadata !DIExpression()), !dbg !4840
  %274 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4841
  %decl_map408 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %274, i32 0, i32 6, !dbg !4842
  %275 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map408, align 8, !dbg !4842
  %276 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4843
  %277 = load %union.tree_node*, %union.tree_node** %276, align 8, !dbg !4843
  %call409 = call %union.tree_node** @tree_block(%union.tree_node* %277), !dbg !4843
  %278 = load %union.tree_node*, %union.tree_node** %call409, align 8, !dbg !4843
  %279 = bitcast %union.tree_node* %278 to i8*, !dbg !4843
  %call410 = call i8** @pointer_map_contains(%struct.pointer_map_t* %275, i8* %279), !dbg !4844
  %280 = bitcast i8** %call410 to %union.tree_node**, !dbg !4845
  store %union.tree_node** %280, %union.tree_node*** %n407, align 8, !dbg !4846
  %281 = load %union.tree_node**, %union.tree_node*** %n407, align 8, !dbg !4847
  %tobool411 = icmp ne %union.tree_node** %281, null, !dbg !4847
  br i1 %tobool411, label %cond.false413, label %cond.true412, !dbg !4847

cond.true412:                                     ; preds = %if.then406
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4847
  br label %cond.end414, !dbg !4847

cond.false413:                                    ; preds = %if.then406
  br label %cond.end414, !dbg !4847

cond.end414:                                      ; preds = %cond.false413, %cond.true412
  %cond415 = phi i32 [ 0, %cond.true412 ], [ 0, %cond.false413 ], !dbg !4847
  %282 = load %union.tree_node**, %union.tree_node*** %n407, align 8, !dbg !4848
  %283 = load %union.tree_node*, %union.tree_node** %282, align 8, !dbg !4849
  store %union.tree_node* %283, %union.tree_node** %new_block, align 8, !dbg !4850
  br label %if.end416, !dbg !4851

if.end416:                                        ; preds = %cond.end414, %cond.end402
  %284 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !4852
  %285 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4853
  %286 = load %union.tree_node*, %union.tree_node** %285, align 8, !dbg !4853
  %call417 = call %union.tree_node** @tree_block(%union.tree_node* %286), !dbg !4853
  store %union.tree_node* %284, %union.tree_node** %call417, align 8, !dbg !4854
  br label %if.end418, !dbg !4855

if.end418:                                        ; preds = %if.end416, %land.lhs.true387, %if.end378
  %287 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4856
  %288 = load %union.tree_node*, %union.tree_node** %287, align 8, !dbg !4856
  %base419 = bitcast %union.tree_node* %288 to %struct.tree_base*, !dbg !4856
  %289 = bitcast %struct.tree_base* %base419 to i64*, !dbg !4856
  %bf.load420 = load i64, i64* %289, align 8, !dbg !4856
  %bf.clear421 = and i64 %bf.load420, 65535, !dbg !4856
  %bf.cast422 = trunc i64 %bf.clear421 to i32, !dbg !4856
  %cmp423 = icmp ne i32 %bf.cast422, 163, !dbg !4858
  br i1 %cmp423, label %if.then425, label %if.end431, !dbg !4859

if.then425:                                       ; preds = %if.end418
  %290 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4860
  %291 = load %union.tree_node*, %union.tree_node** %290, align 8, !dbg !4860
  %common426 = bitcast %union.tree_node* %291 to %struct.tree_common*, !dbg !4860
  %type427 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common426, i32 0, i32 2, !dbg !4860
  %292 = load %union.tree_node*, %union.tree_node** %type427, align 8, !dbg !4860
  %293 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4861
  %call428 = call %union.tree_node* @remap_type(%union.tree_node* %292, %struct.copy_body_data* %293), !dbg !4862
  %294 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4863
  %295 = load %union.tree_node*, %union.tree_node** %294, align 8, !dbg !4863
  %common429 = bitcast %union.tree_node* %295 to %struct.tree_common*, !dbg !4863
  %type430 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common429, i32 0, i32 2, !dbg !4863
  store %union.tree_node* %call428, %union.tree_node** %type430, align 8, !dbg !4864
  br label %if.end431, !dbg !4863

if.end431:                                        ; preds = %if.then425, %if.end418
  %296 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4865
  %297 = load %union.tree_node*, %union.tree_node** %296, align 8, !dbg !4865
  %base432 = bitcast %union.tree_node* %297 to %struct.tree_base*, !dbg !4865
  %298 = bitcast %struct.tree_base* %base432 to i64*, !dbg !4865
  %bf.load433 = load i64, i64* %298, align 8, !dbg !4865
  %bf.clear434 = and i64 %bf.load433, 65535, !dbg !4865
  %bf.cast435 = trunc i64 %bf.clear434 to i32, !dbg !4865
  %cmp436 = icmp eq i32 %bf.cast435, 55, !dbg !4867
  br i1 %cmp436, label %land.lhs.true438, label %if.else453, !dbg !4868

land.lhs.true438:                                 ; preds = %if.end431
  %299 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4869
  %300 = load %union.tree_node*, %union.tree_node** %299, align 8, !dbg !4869
  %exp439 = bitcast %union.tree_node* %300 to %struct.tree_exp*, !dbg !4869
  %operands440 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp439, i32 0, i32 3, !dbg !4869
  %arrayidx441 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands440, i64 0, i64 3, !dbg !4869
  %301 = load %union.tree_node*, %union.tree_node** %arrayidx441, align 8, !dbg !4869
  %tobool442 = icmp ne %union.tree_node* %301, null, !dbg !4869
  br i1 %tobool442, label %if.then443, label %if.else453, !dbg !4870

if.then443:                                       ; preds = %land.lhs.true438
  %302 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4871
  %303 = load %union.tree_node*, %union.tree_node** %302, align 8, !dbg !4871
  %exp444 = bitcast %union.tree_node* %303 to %struct.tree_exp*, !dbg !4871
  %operands445 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp444, i32 0, i32 3, !dbg !4871
  %arrayidx446 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands445, i64 0, i64 3, !dbg !4871
  %304 = load %union.tree_node*, %union.tree_node** %arrayidx446, align 8, !dbg !4871
  %305 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4873
  %306 = load %union.tree_node*, %union.tree_node** %305, align 8, !dbg !4873
  %exp447 = bitcast %union.tree_node* %306 to %struct.tree_exp*, !dbg !4873
  %operands448 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp447, i32 0, i32 3, !dbg !4873
  %arrayidx449 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands448, i64 0, i64 1, !dbg !4873
  store %union.tree_node* %304, %union.tree_node** %arrayidx449, align 8, !dbg !4874
  %307 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4875
  %308 = load %union.tree_node*, %union.tree_node** %307, align 8, !dbg !4875
  %exp450 = bitcast %union.tree_node* %308 to %struct.tree_exp*, !dbg !4875
  %operands451 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp450, i32 0, i32 3, !dbg !4875
  %arrayidx452 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands451, i64 0, i64 3, !dbg !4875
  store %union.tree_node* null, %union.tree_node** %arrayidx452, align 8, !dbg !4876
  br label %if.end492, !dbg !4877

if.else453:                                       ; preds = %land.lhs.true438, %if.end431
  %309 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4878
  %310 = load %union.tree_node*, %union.tree_node** %309, align 8, !dbg !4878
  %base454 = bitcast %union.tree_node* %310 to %struct.tree_base*, !dbg !4878
  %311 = bitcast %struct.tree_base* %base454 to i64*, !dbg !4878
  %bf.load455 = load i64, i64* %311, align 8, !dbg !4878
  %bf.clear456 = and i64 %bf.load455, 65535, !dbg !4878
  %bf.cast457 = trunc i64 %bf.clear456 to i32, !dbg !4878
  %cmp458 = icmp eq i32 %bf.cast457, 121, !dbg !4880
  br i1 %cmp458, label %if.then460, label %if.end491, !dbg !4881

if.then460:                                       ; preds = %if.else453
  call void @llvm.dbg.declare(metadata i32* %invariant, metadata !4882, metadata !DIExpression()), !dbg !4884
  %312 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4885
  %313 = load %union.tree_node*, %union.tree_node** %312, align 8, !dbg !4886
  %call461 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %313), !dbg !4887
  %conv462 = zext i8 %call461 to i32, !dbg !4887
  store i32 %conv462, i32* %invariant, align 4, !dbg !4884
  %314 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4888
  %315 = load %union.tree_node*, %union.tree_node** %314, align 8, !dbg !4888
  %exp463 = bitcast %union.tree_node* %315 to %struct.tree_exp*, !dbg !4888
  %operands464 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp463, i32 0, i32 3, !dbg !4888
  %arrayidx465 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands464, i64 0, i64 0, !dbg !4888
  %316 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4888
  %317 = bitcast %struct.copy_body_data* %316 to i8*, !dbg !4888
  %call466 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx465, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %317, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4888
  %318 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4889
  %319 = load %union.tree_node*, %union.tree_node** %318, align 8, !dbg !4889
  %exp467 = bitcast %union.tree_node* %319 to %struct.tree_exp*, !dbg !4889
  %operands468 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp467, i32 0, i32 3, !dbg !4889
  %arrayidx469 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands468, i64 0, i64 0, !dbg !4889
  %320 = load %union.tree_node*, %union.tree_node** %arrayidx469, align 8, !dbg !4889
  %base470 = bitcast %union.tree_node* %320 to %struct.tree_base*, !dbg !4889
  %321 = bitcast %struct.tree_base* %base470 to i64*, !dbg !4889
  %bf.load471 = load i64, i64* %321, align 8, !dbg !4889
  %bf.clear472 = and i64 %bf.load471, 65535, !dbg !4889
  %bf.cast473 = trunc i64 %bf.clear472 to i32, !dbg !4889
  %cmp474 = icmp eq i32 %bf.cast473, 47, !dbg !4891
  br i1 %cmp474, label %if.then476, label %if.else483, !dbg !4892

if.then476:                                       ; preds = %if.then460
  %322 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4893
  %323 = load %union.tree_node*, %union.tree_node** %322, align 8, !dbg !4893
  %exp477 = bitcast %union.tree_node* %323 to %struct.tree_exp*, !dbg !4893
  %operands478 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp477, i32 0, i32 3, !dbg !4893
  %arrayidx479 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands478, i64 0, i64 0, !dbg !4893
  %324 = load %union.tree_node*, %union.tree_node** %arrayidx479, align 8, !dbg !4893
  %exp480 = bitcast %union.tree_node* %324 to %struct.tree_exp*, !dbg !4893
  %operands481 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp480, i32 0, i32 3, !dbg !4893
  %arrayidx482 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands481, i64 0, i64 0, !dbg !4893
  %325 = load %union.tree_node*, %union.tree_node** %arrayidx482, align 8, !dbg !4893
  %326 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4894
  store %union.tree_node* %325, %union.tree_node** %326, align 8, !dbg !4895
  br label %if.end484, !dbg !4896

if.else483:                                       ; preds = %if.then460
  %327 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4897
  %328 = load %union.tree_node*, %union.tree_node** %327, align 8, !dbg !4898
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %328), !dbg !4899
  br label %if.end484

if.end484:                                        ; preds = %if.else483, %if.then476
  %329 = load i32, i32* %invariant, align 4, !dbg !4900
  %tobool485 = icmp ne i32 %329, 0, !dbg !4900
  br i1 %tobool485, label %land.lhs.true486, label %if.end490, !dbg !4902

land.lhs.true486:                                 ; preds = %if.end484
  %330 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4903
  %331 = load %union.tree_node*, %union.tree_node** %330, align 8, !dbg !4904
  %call487 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %331), !dbg !4905
  %tobool488 = icmp ne i8 %call487, 0, !dbg !4905
  br i1 %tobool488, label %if.end490, label %if.then489, !dbg !4906

if.then489:                                       ; preds = %land.lhs.true486
  %332 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !4907
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %332, i32 0, i32 15, !dbg !4908
  store i8 1, i8* %regimplify, align 2, !dbg !4909
  br label %if.end490, !dbg !4907

if.end490:                                        ; preds = %if.then489, %land.lhs.true486, %if.end484
  %333 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4910
  store i32 0, i32* %333, align 4, !dbg !4911
  br label %if.end491, !dbg !4912

if.end491:                                        ; preds = %if.end490, %if.else453
  br label %if.end492

if.end492:                                        ; preds = %if.end491, %if.then443
  br label %if.end493

if.end493:                                        ; preds = %if.end492, %if.end152
  br label %if.end494

if.end494:                                        ; preds = %if.end493, %if.then115
  br label %if.end495

if.end495:                                        ; preds = %if.end494, %if.then106
  br label %if.end496

if.end496:                                        ; preds = %if.end495, %if.then97
  br label %if.end497

if.end497:                                        ; preds = %if.end496, %if.then82
  br label %if.end498

if.end498:                                        ; preds = %if.end497, %if.then67
  br label %if.end499

if.end499:                                        ; preds = %if.end498, %while.end
  br label %if.end500

if.end500:                                        ; preds = %if.end499
  br label %if.end501

if.end501:                                        ; preds = %if.end500, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4913
  br label %return, !dbg !4913

return:                                           ; preds = %if.end501, %if.end356, %cond.end260, %if.then17, %if.else
  %334 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4914
  ret %union.tree_node* %334, !dbg !4914
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !4915 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !4921, metadata !DIExpression()), !dbg !4922
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !4923
  %tobool = icmp ne %struct.function* %0, null, !dbg !4923
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !4924

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !4925
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !4926
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4926
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !4925
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4927

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !4928
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !4929
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !4929
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !4930
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !4930
  %bf.clear = and i8 %bf.load, 1, !dbg !4930
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4930
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !4927
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !4931
  %land.ext = zext i1 %5 to i32, !dbg !4927
  %conv = trunc i32 %land.ext to i8, !dbg !4923
  ret i8 %conv, !dbg !4932
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @get_var_ann(%union.tree_node* %var) #0 !dbg !4933 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4937, metadata !DIExpression()), !dbg !4938
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !4939, metadata !DIExpression()), !dbg !4941
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4942
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4942
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4942
  %bf.load = load i64, i64* %1, align 8, !dbg !4942
  %bf.clear = and i64 %bf.load, 65535, !dbg !4942
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4942
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !4942
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4942

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4942
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !4942
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !4942
  br label %cond.end19, !dbg !4942

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4942
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4942
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4942
  %bf.load2 = load i64, i64* %4, align 8, !dbg !4942
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4942
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4942
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !4942
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !4942

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4942
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !4942
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !4942
  br label %cond.end17, !dbg !4942

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4942
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4942
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4942
  %bf.load10 = load i64, i64* %7, align 8, !dbg !4942
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !4942
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !4942
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !4942
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !4942

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4942
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !4942
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !4942
  br label %cond.end, !dbg !4942

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !4942

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !4942
  br label %cond.end17, !dbg !4942

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !4942
  br label %cond.end19, !dbg !4942

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !4942
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !4941
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !4943
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !4943
  br i1 %tobool, label %cond.false22, label %cond.true21, !dbg !4943

cond.true21:                                      ; preds = %cond.end19
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4943
  br label %cond.end23, !dbg !4943

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !4943

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !4943
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !4944
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !4945
  %tobool25 = icmp ne %struct.var_ann_d* %11, null, !dbg !4945
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !4945

cond.true26:                                      ; preds = %cond.end23
  %12 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !4946
  %13 = load %struct.var_ann_d*, %struct.var_ann_d** %12, align 8, !dbg !4947
  br label %cond.end28, !dbg !4945

cond.false27:                                     ; preds = %cond.end23
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4948
  %call = call %struct.var_ann_d* @create_var_ann(%union.tree_node* %14), !dbg !4949
  br label %cond.end28, !dbg !4945

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.var_ann_d* [ %13, %cond.true26 ], [ %call, %cond.false27 ], !dbg !4945
  ret %struct.var_ann_d* %cond29, !dbg !4950
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local zeroext i8 @variably_modified_type_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_type_1(%union.tree_node* %type, %struct.copy_body_data* %id) #0 !dbg !4951 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %f = alloca %union.tree_node*, align 8
  %nf = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4952, metadata !DIExpression()), !dbg !4953
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !4954, metadata !DIExpression()), !dbg !4955
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !4956, metadata !DIExpression()), !dbg !4957
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4958, metadata !DIExpression()), !dbg !4959
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4960
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4960
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4960
  %bf.load = load i64, i64* %1, align 8, !dbg !4960
  %bf.clear = and i64 %bf.load, 65535, !dbg !4960
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4960
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !4962
  br i1 %cmp, label %if.then, label %if.else, !dbg !4963

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4964
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !4964
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4964
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4964
  %4 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4966
  %call = call %union.tree_node* @remap_type(%union.tree_node* %3, %struct.copy_body_data* %4), !dbg !4967
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4968
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4968
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4968
  %bf.load3 = load i64, i64* %6, align 8, !dbg !4968
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4968
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4968
  %cmp6 = icmp eq i32 %bf.cast5, 14, !dbg !4968
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !4968

cond.true:                                        ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4968
  %call7 = call i32 @vector_type_mode(%union.tree_node* %7), !dbg !4968
  br label %cond.end, !dbg !4968

cond.false:                                       ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4968
  %type8 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !4968
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 6, !dbg !4968
  %bf.load9 = load i32, i32* %mode, align 4, !dbg !4968
  %bf.lshr = lshr i32 %bf.load9, 16, !dbg !4968
  %bf.clear10 = and i32 %bf.lshr, 255, !dbg !4968
  br label %cond.end, !dbg !4968

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call7, %cond.true ], [ %bf.clear10, %cond.false ], !dbg !4968
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4969
  %base11 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !4969
  %10 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4969
  %bf.load12 = load i64, i64* %10, align 8, !dbg !4969
  %bf.lshr13 = lshr i64 %bf.load12, 26, !dbg !4969
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !4969
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !4969
  %conv = trunc i32 %bf.cast15 to i8, !dbg !4969
  %call16 = call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %call, i32 %cond, i8 zeroext %conv), !dbg !4970
  store %union.tree_node* %call16, %union.tree_node** %new_tree, align 8, !dbg !4971
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4972
  %type17 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4972
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 4, !dbg !4972
  %12 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !4972
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !4972
  br i1 %tobool, label %if.then41, label %lor.lhs.false, !dbg !4974

lor.lhs.false:                                    ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4975
  %base18 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4975
  %14 = bitcast %struct.tree_base* %base18 to i64*, !dbg !4975
  %bf.load19 = load i64, i64* %14, align 8, !dbg !4975
  %bf.lshr20 = lshr i64 %bf.load19, 20, !dbg !4975
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !4975
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !4975
  %mul = mul nsw i32 %bf.cast22, 1, !dbg !4975
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4975
  %base23 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4975
  %16 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4975
  %bf.load24 = load i64, i64* %16, align 8, !dbg !4975
  %bf.lshr25 = lshr i64 %bf.load24, 19, !dbg !4975
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !4975
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !4975
  %mul28 = mul nsw i32 %bf.cast27, 2, !dbg !4975
  %or = or i32 %mul, %mul28, !dbg !4975
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4975
  %type29 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !4975
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6, !dbg !4975
  %bf.load30 = load i32, i32* %restrict_flag, align 4, !dbg !4975
  %bf.lshr31 = lshr i32 %bf.load30, 13, !dbg !4975
  %bf.clear32 = and i32 %bf.lshr31, 1, !dbg !4975
  %mul33 = mul nsw i32 %bf.clear32, 4, !dbg !4975
  %or34 = or i32 %or, %mul33, !dbg !4975
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4975
  %base35 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4975
  %19 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4975
  %bf.load36 = load i64, i64* %19, align 8, !dbg !4975
  %bf.lshr37 = lshr i64 %bf.load36, 56, !dbg !4975
  %bf.cast38 = trunc i64 %bf.lshr37 to i32, !dbg !4975
  %and = and i32 %bf.cast38, 255, !dbg !4975
  %shl = shl i32 %and, 8, !dbg !4975
  %or39 = or i32 %or34, %shl, !dbg !4975
  %tobool40 = icmp ne i32 %or39, 0, !dbg !4975
  br i1 %tobool40, label %if.then41, label %if.end, !dbg !4976

if.then41:                                        ; preds = %lor.lhs.false, %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4977
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4978
  %type42 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !4978
  %attributes43 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type42, i32 0, i32 4, !dbg !4978
  %22 = load %union.tree_node*, %union.tree_node** %attributes43, align 8, !dbg !4978
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4979
  %base44 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !4979
  %24 = bitcast %struct.tree_base* %base44 to i64*, !dbg !4979
  %bf.load45 = load i64, i64* %24, align 8, !dbg !4979
  %bf.lshr46 = lshr i64 %bf.load45, 20, !dbg !4979
  %bf.clear47 = and i64 %bf.lshr46, 1, !dbg !4979
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !4979
  %mul49 = mul nsw i32 %bf.cast48, 1, !dbg !4979
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4979
  %base50 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4979
  %26 = bitcast %struct.tree_base* %base50 to i64*, !dbg !4979
  %bf.load51 = load i64, i64* %26, align 8, !dbg !4979
  %bf.lshr52 = lshr i64 %bf.load51, 19, !dbg !4979
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !4979
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !4979
  %mul55 = mul nsw i32 %bf.cast54, 2, !dbg !4979
  %or56 = or i32 %mul49, %mul55, !dbg !4979
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4979
  %type57 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !4979
  %restrict_flag58 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type57, i32 0, i32 6, !dbg !4979
  %bf.load59 = load i32, i32* %restrict_flag58, align 4, !dbg !4979
  %bf.lshr60 = lshr i32 %bf.load59, 13, !dbg !4979
  %bf.clear61 = and i32 %bf.lshr60, 1, !dbg !4979
  %mul62 = mul nsw i32 %bf.clear61, 4, !dbg !4979
  %or63 = or i32 %or56, %mul62, !dbg !4979
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4979
  %base64 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4979
  %29 = bitcast %struct.tree_base* %base64 to i64*, !dbg !4979
  %bf.load65 = load i64, i64* %29, align 8, !dbg !4979
  %bf.lshr66 = lshr i64 %bf.load65, 56, !dbg !4979
  %bf.cast67 = trunc i64 %bf.lshr66 to i32, !dbg !4979
  %and68 = and i32 %bf.cast67, 255, !dbg !4979
  %shl69 = shl i32 %and68, 8, !dbg !4979
  %or70 = or i32 %or63, %shl69, !dbg !4979
  %call71 = call %union.tree_node* @build_type_attribute_qual_variant(%union.tree_node* %20, %union.tree_node* %22, i32 %or70), !dbg !4980
  store %union.tree_node* %call71, %union.tree_node** %new_tree, align 8, !dbg !4981
  br label %if.end, !dbg !4982

if.end:                                           ; preds = %if.then41, %lor.lhs.false
  %30 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4983
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4984
  %32 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4985
  call void @insert_decl_map(%struct.copy_body_data* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !4986
  %33 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !4987
  store %union.tree_node* %33, %union.tree_node** %retval, align 8, !dbg !4988
  br label %return, !dbg !4988

if.else:                                          ; preds = %entry
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4989
  %base72 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !4989
  %35 = bitcast %struct.tree_base* %base72 to i64*, !dbg !4989
  %bf.load73 = load i64, i64* %35, align 8, !dbg !4989
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !4989
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !4989
  %cmp76 = icmp eq i32 %bf.cast75, 12, !dbg !4991
  br i1 %cmp76, label %if.then78, label %if.else169, !dbg !4992

if.then78:                                        ; preds = %if.else
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4993
  %common79 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !4993
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2, !dbg !4993
  %37 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !4993
  %38 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !4995
  %call81 = call %union.tree_node* @remap_type(%union.tree_node* %37, %struct.copy_body_data* %38), !dbg !4996
  %39 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4997
  %base82 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4997
  %40 = bitcast %struct.tree_base* %base82 to i64*, !dbg !4997
  %bf.load83 = load i64, i64* %40, align 8, !dbg !4997
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !4997
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !4997
  %cmp86 = icmp eq i32 %bf.cast85, 14, !dbg !4997
  br i1 %cmp86, label %cond.true88, label %cond.false90, !dbg !4997

cond.true88:                                      ; preds = %if.then78
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4997
  %call89 = call i32 @vector_type_mode(%union.tree_node* %41), !dbg !4997
  br label %cond.end96, !dbg !4997

cond.false90:                                     ; preds = %if.then78
  %42 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4997
  %type91 = bitcast %union.tree_node* %42 to %struct.tree_type*, !dbg !4997
  %mode92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 6, !dbg !4997
  %bf.load93 = load i32, i32* %mode92, align 4, !dbg !4997
  %bf.lshr94 = lshr i32 %bf.load93, 16, !dbg !4997
  %bf.clear95 = and i32 %bf.lshr94, 255, !dbg !4997
  br label %cond.end96, !dbg !4997

cond.end96:                                       ; preds = %cond.false90, %cond.true88
  %cond97 = phi i32 [ %call89, %cond.true88 ], [ %bf.clear95, %cond.false90 ], !dbg !4997
  %43 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4998
  %base98 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !4998
  %44 = bitcast %struct.tree_base* %base98 to i64*, !dbg !4998
  %bf.load99 = load i64, i64* %44, align 8, !dbg !4998
  %bf.lshr100 = lshr i64 %bf.load99, 26, !dbg !4998
  %bf.clear101 = and i64 %bf.lshr100, 1, !dbg !4998
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !4998
  %conv103 = trunc i32 %bf.cast102 to i8, !dbg !4998
  %call104 = call %union.tree_node* @build_reference_type_for_mode(%union.tree_node* %call81, i32 %cond97, i8 zeroext %conv103), !dbg !4999
  store %union.tree_node* %call104, %union.tree_node** %new_tree, align 8, !dbg !5000
  %45 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5001
  %type105 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !5001
  %attributes106 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type105, i32 0, i32 4, !dbg !5001
  %46 = load %union.tree_node*, %union.tree_node** %attributes106, align 8, !dbg !5001
  %tobool107 = icmp ne %union.tree_node* %46, null, !dbg !5001
  br i1 %tobool107, label %if.then137, label %lor.lhs.false108, !dbg !5003

lor.lhs.false108:                                 ; preds = %cond.end96
  %47 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5004
  %base109 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !5004
  %48 = bitcast %struct.tree_base* %base109 to i64*, !dbg !5004
  %bf.load110 = load i64, i64* %48, align 8, !dbg !5004
  %bf.lshr111 = lshr i64 %bf.load110, 20, !dbg !5004
  %bf.clear112 = and i64 %bf.lshr111, 1, !dbg !5004
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !5004
  %mul114 = mul nsw i32 %bf.cast113, 1, !dbg !5004
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5004
  %base115 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !5004
  %50 = bitcast %struct.tree_base* %base115 to i64*, !dbg !5004
  %bf.load116 = load i64, i64* %50, align 8, !dbg !5004
  %bf.lshr117 = lshr i64 %bf.load116, 19, !dbg !5004
  %bf.clear118 = and i64 %bf.lshr117, 1, !dbg !5004
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !5004
  %mul120 = mul nsw i32 %bf.cast119, 2, !dbg !5004
  %or121 = or i32 %mul114, %mul120, !dbg !5004
  %51 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5004
  %type122 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !5004
  %restrict_flag123 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type122, i32 0, i32 6, !dbg !5004
  %bf.load124 = load i32, i32* %restrict_flag123, align 4, !dbg !5004
  %bf.lshr125 = lshr i32 %bf.load124, 13, !dbg !5004
  %bf.clear126 = and i32 %bf.lshr125, 1, !dbg !5004
  %mul127 = mul nsw i32 %bf.clear126, 4, !dbg !5004
  %or128 = or i32 %or121, %mul127, !dbg !5004
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5004
  %base129 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !5004
  %53 = bitcast %struct.tree_base* %base129 to i64*, !dbg !5004
  %bf.load130 = load i64, i64* %53, align 8, !dbg !5004
  %bf.lshr131 = lshr i64 %bf.load130, 56, !dbg !5004
  %bf.cast132 = trunc i64 %bf.lshr131 to i32, !dbg !5004
  %and133 = and i32 %bf.cast132, 255, !dbg !5004
  %shl134 = shl i32 %and133, 8, !dbg !5004
  %or135 = or i32 %or128, %shl134, !dbg !5004
  %tobool136 = icmp ne i32 %or135, 0, !dbg !5004
  br i1 %tobool136, label %if.then137, label %if.end168, !dbg !5005

if.then137:                                       ; preds = %lor.lhs.false108, %cond.end96
  %54 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5006
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5007
  %type138 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !5007
  %attributes139 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 4, !dbg !5007
  %56 = load %union.tree_node*, %union.tree_node** %attributes139, align 8, !dbg !5007
  %57 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5008
  %base140 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !5008
  %58 = bitcast %struct.tree_base* %base140 to i64*, !dbg !5008
  %bf.load141 = load i64, i64* %58, align 8, !dbg !5008
  %bf.lshr142 = lshr i64 %bf.load141, 20, !dbg !5008
  %bf.clear143 = and i64 %bf.lshr142, 1, !dbg !5008
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !5008
  %mul145 = mul nsw i32 %bf.cast144, 1, !dbg !5008
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5008
  %base146 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !5008
  %60 = bitcast %struct.tree_base* %base146 to i64*, !dbg !5008
  %bf.load147 = load i64, i64* %60, align 8, !dbg !5008
  %bf.lshr148 = lshr i64 %bf.load147, 19, !dbg !5008
  %bf.clear149 = and i64 %bf.lshr148, 1, !dbg !5008
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !5008
  %mul151 = mul nsw i32 %bf.cast150, 2, !dbg !5008
  %or152 = or i32 %mul145, %mul151, !dbg !5008
  %61 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5008
  %type153 = bitcast %union.tree_node* %61 to %struct.tree_type*, !dbg !5008
  %restrict_flag154 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type153, i32 0, i32 6, !dbg !5008
  %bf.load155 = load i32, i32* %restrict_flag154, align 4, !dbg !5008
  %bf.lshr156 = lshr i32 %bf.load155, 13, !dbg !5008
  %bf.clear157 = and i32 %bf.lshr156, 1, !dbg !5008
  %mul158 = mul nsw i32 %bf.clear157, 4, !dbg !5008
  %or159 = or i32 %or152, %mul158, !dbg !5008
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5008
  %base160 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !5008
  %63 = bitcast %struct.tree_base* %base160 to i64*, !dbg !5008
  %bf.load161 = load i64, i64* %63, align 8, !dbg !5008
  %bf.lshr162 = lshr i64 %bf.load161, 56, !dbg !5008
  %bf.cast163 = trunc i64 %bf.lshr162 to i32, !dbg !5008
  %and164 = and i32 %bf.cast163, 255, !dbg !5008
  %shl165 = shl i32 %and164, 8, !dbg !5008
  %or166 = or i32 %or159, %shl165, !dbg !5008
  %call167 = call %union.tree_node* @build_type_attribute_qual_variant(%union.tree_node* %54, %union.tree_node* %56, i32 %or166), !dbg !5009
  store %union.tree_node* %call167, %union.tree_node** %new_tree, align 8, !dbg !5010
  br label %if.end168, !dbg !5011

if.end168:                                        ; preds = %if.then137, %lor.lhs.false108
  %64 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5012
  %65 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5013
  %66 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5014
  call void @insert_decl_map(%struct.copy_body_data* %64, %union.tree_node* %65, %union.tree_node* %66), !dbg !5015
  %67 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5016
  store %union.tree_node* %67, %union.tree_node** %retval, align 8, !dbg !5017
  br label %return, !dbg !5017

if.else169:                                       ; preds = %if.else
  %68 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5018
  %call170 = call %union.tree_node* @copy_node_stat(%union.tree_node* %68), !dbg !5018
  store %union.tree_node* %call170, %union.tree_node** %new_tree, align 8, !dbg !5019
  br label %if.end171

if.end171:                                        ; preds = %if.else169
  br label %if.end172

if.end172:                                        ; preds = %if.end171
  %69 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5020
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5021
  %71 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5022
  call void @insert_decl_map(%struct.copy_body_data* %69, %union.tree_node* %70, %union.tree_node* %71), !dbg !5023
  %72 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5024
  %type173 = bitcast %union.tree_node* %72 to %struct.tree_type*, !dbg !5024
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type173, i32 0, i32 16, !dbg !5024
  %73 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5024
  store %union.tree_node* %73, %union.tree_node** %t, align 8, !dbg !5025
  %74 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5026
  %75 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5028
  %cmp174 = icmp ne %union.tree_node* %74, %75, !dbg !5029
  br i1 %cmp174, label %if.then176, label %if.else185, !dbg !5030

if.then176:                                       ; preds = %if.end172
  %76 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5031
  %77 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5033
  %call177 = call %union.tree_node* @remap_type(%union.tree_node* %76, %struct.copy_body_data* %77), !dbg !5034
  store %union.tree_node* %call177, %union.tree_node** %t, align 8, !dbg !5035
  %78 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5036
  %79 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5037
  %type178 = bitcast %union.tree_node* %79 to %struct.tree_type*, !dbg !5037
  %main_variant179 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type178, i32 0, i32 16, !dbg !5037
  store %union.tree_node* %78, %union.tree_node** %main_variant179, align 8, !dbg !5038
  %80 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5039
  %type180 = bitcast %union.tree_node* %80 to %struct.tree_type*, !dbg !5039
  %next_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type180, i32 0, i32 15, !dbg !5039
  %81 = load %union.tree_node*, %union.tree_node** %next_variant, align 8, !dbg !5039
  %82 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5040
  %type181 = bitcast %union.tree_node* %82 to %struct.tree_type*, !dbg !5040
  %next_variant182 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type181, i32 0, i32 15, !dbg !5040
  store %union.tree_node* %81, %union.tree_node** %next_variant182, align 8, !dbg !5041
  %83 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5042
  %84 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5043
  %type183 = bitcast %union.tree_node* %84 to %struct.tree_type*, !dbg !5043
  %next_variant184 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type183, i32 0, i32 15, !dbg !5043
  store %union.tree_node* %83, %union.tree_node** %next_variant184, align 8, !dbg !5044
  br label %if.end190, !dbg !5045

if.else185:                                       ; preds = %if.end172
  %85 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5046
  %86 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5048
  %type186 = bitcast %union.tree_node* %86 to %struct.tree_type*, !dbg !5048
  %main_variant187 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type186, i32 0, i32 16, !dbg !5048
  store %union.tree_node* %85, %union.tree_node** %main_variant187, align 8, !dbg !5049
  %87 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5050
  %type188 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !5050
  %next_variant189 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type188, i32 0, i32 15, !dbg !5050
  store %union.tree_node* null, %union.tree_node** %next_variant189, align 8, !dbg !5051
  br label %if.end190

if.end190:                                        ; preds = %if.else185, %if.then176
  %88 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5052
  %common191 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !5052
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common191, i32 0, i32 1, !dbg !5052
  %89 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5052
  %tobool192 = icmp ne %union.tree_node* %89, null, !dbg !5052
  br i1 %tobool192, label %if.then193, label %if.end199, !dbg !5054

if.then193:                                       ; preds = %if.end190
  %90 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5055
  %common194 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !5055
  %chain195 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common194, i32 0, i32 1, !dbg !5055
  %91 = load %union.tree_node*, %union.tree_node** %chain195, align 8, !dbg !5055
  %92 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5056
  %call196 = call %union.tree_node* @remap_decl(%union.tree_node* %91, %struct.copy_body_data* %92), !dbg !5057
  %93 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5058
  %common197 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !5058
  %chain198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 1, !dbg !5058
  store %union.tree_node* %call196, %union.tree_node** %chain198, align 8, !dbg !5059
  br label %if.end199, !dbg !5058

if.end199:                                        ; preds = %if.then193, %if.end190
  %94 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5060
  %type200 = bitcast %union.tree_node* %94 to %struct.tree_type*, !dbg !5060
  %pointer_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type200, i32 0, i32 9, !dbg !5060
  store %union.tree_node* null, %union.tree_node** %pointer_to, align 8, !dbg !5061
  %95 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5062
  %type201 = bitcast %union.tree_node* %95 to %struct.tree_type*, !dbg !5062
  %reference_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type201, i32 0, i32 10, !dbg !5062
  store %union.tree_node* null, %union.tree_node** %reference_to, align 8, !dbg !5063
  %96 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5064
  %base202 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !5064
  %97 = bitcast %struct.tree_base* %base202 to i64*, !dbg !5064
  %bf.load203 = load i64, i64* %97, align 8, !dbg !5064
  %bf.clear204 = and i64 %bf.load203, 65535, !dbg !5064
  %bf.cast205 = trunc i64 %bf.clear204 to i32, !dbg !5064
  switch i32 %bf.cast205, label %sw.default [
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 11, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 20, label %sw.bb233
    i32 15, label %sw.bb241
    i32 16, label %sw.bb252
    i32 17, label %sw.bb252
    i32 18, label %sw.bb252
    i32 5, label %sw.bb264
  ], !dbg !5065

sw.bb:                                            ; preds = %if.end199, %if.end199, %if.end199, %if.end199, %if.end199
  %98 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5066
  %type206 = bitcast %union.tree_node* %98 to %struct.tree_type*, !dbg !5066
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type206, i32 0, i32 13, !dbg !5066
  %99 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !5066
  store %union.tree_node* %99, %union.tree_node** %t, align 8, !dbg !5068
  %100 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5069
  %tobool207 = icmp ne %union.tree_node* %100, null, !dbg !5069
  br i1 %tobool207, label %land.lhs.true, label %if.end218, !dbg !5071

land.lhs.true:                                    ; preds = %sw.bb
  %101 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5072
  %base208 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !5072
  %102 = bitcast %struct.tree_base* %base208 to i64*, !dbg !5072
  %bf.load209 = load i64, i64* %102, align 8, !dbg !5072
  %bf.clear210 = and i64 %bf.load209, 65535, !dbg !5072
  %bf.cast211 = trunc i64 %bf.clear210 to i32, !dbg !5072
  %cmp212 = icmp ne i32 %bf.cast211, 23, !dbg !5073
  br i1 %cmp212, label %if.then214, label %if.end218, !dbg !5074

if.then214:                                       ; preds = %land.lhs.true
  %103 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5075
  %type215 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !5075
  %minval216 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type215, i32 0, i32 13, !dbg !5075
  %104 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5075
  %105 = bitcast %struct.copy_body_data* %104 to i8*, !dbg !5075
  %call217 = call %union.tree_node* @walk_tree_1(%union.tree_node** %minval216, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %105, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5075
  br label %if.end218, !dbg !5075

if.end218:                                        ; preds = %if.then214, %land.lhs.true, %sw.bb
  %106 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5076
  %type219 = bitcast %union.tree_node* %106 to %struct.tree_type*, !dbg !5076
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type219, i32 0, i32 14, !dbg !5076
  %107 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !5076
  store %union.tree_node* %107, %union.tree_node** %t, align 8, !dbg !5077
  %108 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5078
  %tobool220 = icmp ne %union.tree_node* %108, null, !dbg !5078
  br i1 %tobool220, label %land.lhs.true221, label %if.end232, !dbg !5080

land.lhs.true221:                                 ; preds = %if.end218
  %109 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5081
  %base222 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !5081
  %110 = bitcast %struct.tree_base* %base222 to i64*, !dbg !5081
  %bf.load223 = load i64, i64* %110, align 8, !dbg !5081
  %bf.clear224 = and i64 %bf.load223, 65535, !dbg !5081
  %bf.cast225 = trunc i64 %bf.clear224 to i32, !dbg !5081
  %cmp226 = icmp ne i32 %bf.cast225, 23, !dbg !5082
  br i1 %cmp226, label %if.then228, label %if.end232, !dbg !5083

if.then228:                                       ; preds = %land.lhs.true221
  %111 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5084
  %type229 = bitcast %union.tree_node* %111 to %struct.tree_type*, !dbg !5084
  %maxval230 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type229, i32 0, i32 14, !dbg !5084
  %112 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5084
  %113 = bitcast %struct.copy_body_data* %112 to i8*, !dbg !5084
  %call231 = call %union.tree_node* @walk_tree_1(%union.tree_node** %maxval230, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %113, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5084
  br label %if.end232, !dbg !5084

if.end232:                                        ; preds = %if.then228, %land.lhs.true221, %if.end218
  %114 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5085
  store %union.tree_node* %114, %union.tree_node** %retval, align 8, !dbg !5086
  br label %return, !dbg !5086

sw.bb233:                                         ; preds = %if.end199
  %115 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5087
  %common234 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !5087
  %type235 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common234, i32 0, i32 2, !dbg !5087
  %116 = load %union.tree_node*, %union.tree_node** %type235, align 8, !dbg !5087
  %117 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5088
  %call236 = call %union.tree_node* @remap_type(%union.tree_node* %116, %struct.copy_body_data* %117), !dbg !5089
  %118 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5090
  %common237 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !5090
  %type238 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common237, i32 0, i32 2, !dbg !5090
  store %union.tree_node* %call236, %union.tree_node** %type238, align 8, !dbg !5091
  %119 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5092
  %type239 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !5092
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type239, i32 0, i32 1, !dbg !5092
  %120 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5092
  %121 = bitcast %struct.copy_body_data* %120 to i8*, !dbg !5092
  %call240 = call %union.tree_node* @walk_tree_1(%union.tree_node** %values, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %121, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5092
  %122 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5093
  store %union.tree_node* %122, %union.tree_node** %retval, align 8, !dbg !5094
  br label %return, !dbg !5094

sw.bb241:                                         ; preds = %if.end199
  %123 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5095
  %common242 = bitcast %union.tree_node* %123 to %struct.tree_common*, !dbg !5095
  %type243 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common242, i32 0, i32 2, !dbg !5095
  %124 = load %union.tree_node*, %union.tree_node** %type243, align 8, !dbg !5095
  %125 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5096
  %call244 = call %union.tree_node* @remap_type(%union.tree_node* %124, %struct.copy_body_data* %125), !dbg !5097
  %126 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5098
  %common245 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !5098
  %type246 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common245, i32 0, i32 2, !dbg !5098
  store %union.tree_node* %call244, %union.tree_node** %type246, align 8, !dbg !5099
  %127 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5100
  %type247 = bitcast %union.tree_node* %127 to %struct.tree_type*, !dbg !5100
  %values248 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type247, i32 0, i32 1, !dbg !5100
  %128 = load %union.tree_node*, %union.tree_node** %values248, align 8, !dbg !5100
  %129 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5101
  %call249 = call %union.tree_node* @remap_type(%union.tree_node* %128, %struct.copy_body_data* %129), !dbg !5102
  %130 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5103
  %type250 = bitcast %union.tree_node* %130 to %struct.tree_type*, !dbg !5103
  %values251 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type250, i32 0, i32 1, !dbg !5103
  store %union.tree_node* %call249, %union.tree_node** %values251, align 8, !dbg !5104
  br label %sw.epilog, !dbg !5105

sw.bb252:                                         ; preds = %if.end199, %if.end199, %if.end199
  call void @llvm.dbg.declare(metadata %union.tree_node** %f, metadata !5106, metadata !DIExpression()), !dbg !5108
  call void @llvm.dbg.declare(metadata %union.tree_node** %nf, metadata !5109, metadata !DIExpression()), !dbg !5110
  store %union.tree_node* null, %union.tree_node** %nf, align 8, !dbg !5110
  %131 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5111
  %type253 = bitcast %union.tree_node* %131 to %struct.tree_type*, !dbg !5111
  %values254 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type253, i32 0, i32 1, !dbg !5111
  %132 = load %union.tree_node*, %union.tree_node** %values254, align 8, !dbg !5111
  store %union.tree_node* %132, %union.tree_node** %f, align 8, !dbg !5113
  br label %for.cond, !dbg !5114

for.cond:                                         ; preds = %for.inc, %sw.bb252
  %133 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !5115
  %tobool255 = icmp ne %union.tree_node* %133, null, !dbg !5117
  br i1 %tobool255, label %for.body, label %for.end, !dbg !5117

for.body:                                         ; preds = %for.cond
  %134 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !5118
  %135 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5120
  %call256 = call %union.tree_node* @remap_decl(%union.tree_node* %134, %struct.copy_body_data* %135), !dbg !5121
  store %union.tree_node* %call256, %union.tree_node** %t, align 8, !dbg !5122
  %136 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5123
  %137 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5124
  %decl_minimal = bitcast %union.tree_node* %137 to %struct.tree_decl_minimal*, !dbg !5124
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !5124
  store %union.tree_node* %136, %union.tree_node** %context, align 8, !dbg !5125
  %138 = load %union.tree_node*, %union.tree_node** %nf, align 8, !dbg !5126
  %139 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5127
  %common257 = bitcast %union.tree_node* %139 to %struct.tree_common*, !dbg !5127
  %chain258 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common257, i32 0, i32 1, !dbg !5127
  store %union.tree_node* %138, %union.tree_node** %chain258, align 8, !dbg !5128
  %140 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5129
  store %union.tree_node* %140, %union.tree_node** %nf, align 8, !dbg !5130
  br label %for.inc, !dbg !5131

for.inc:                                          ; preds = %for.body
  %141 = load %union.tree_node*, %union.tree_node** %f, align 8, !dbg !5132
  %common259 = bitcast %union.tree_node* %141 to %struct.tree_common*, !dbg !5132
  %chain260 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common259, i32 0, i32 1, !dbg !5132
  %142 = load %union.tree_node*, %union.tree_node** %chain260, align 8, !dbg !5132
  store %union.tree_node* %142, %union.tree_node** %f, align 8, !dbg !5133
  br label %for.cond, !dbg !5134, !llvm.loop !5135

for.end:                                          ; preds = %for.cond
  %143 = load %union.tree_node*, %union.tree_node** %nf, align 8, !dbg !5137
  %call261 = call %union.tree_node* @nreverse(%union.tree_node* %143), !dbg !5138
  %144 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5139
  %type262 = bitcast %union.tree_node* %144 to %struct.tree_type*, !dbg !5139
  %values263 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type262, i32 0, i32 1, !dbg !5139
  store %union.tree_node* %call261, %union.tree_node** %values263, align 8, !dbg !5140
  br label %sw.epilog, !dbg !5141

sw.bb264:                                         ; preds = %if.end199
  br label %sw.default, !dbg !5141

sw.default:                                       ; preds = %if.end199, %sw.bb264
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 432, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5142
  br label %sw.epilog, !dbg !5143

sw.epilog:                                        ; preds = %sw.default, %for.end, %sw.bb241
  %145 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5144
  %type265 = bitcast %union.tree_node* %145 to %struct.tree_type*, !dbg !5144
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type265, i32 0, i32 2, !dbg !5144
  %146 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5144
  %147 = bitcast %struct.copy_body_data* %146 to i8*, !dbg !5144
  %call266 = call %union.tree_node* @walk_tree_1(%union.tree_node** %size, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %147, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5144
  %148 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5145
  %type267 = bitcast %union.tree_node* %148 to %struct.tree_type*, !dbg !5145
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type267, i32 0, i32 3, !dbg !5145
  %149 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5145
  %150 = bitcast %struct.copy_body_data* %149 to i8*, !dbg !5145
  %call268 = call %union.tree_node* @walk_tree_1(%union.tree_node** %size_unit, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %150, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5145
  %151 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5146
  store %union.tree_node* %151, %union.tree_node** %retval, align 8, !dbg !5147
  br label %return, !dbg !5147

return:                                           ; preds = %sw.epilog, %sw.bb233, %if.end232, %if.end168, %if.end
  %152 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5148
  ret %union.tree_node* %152, !dbg !5148
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %body, %struct.copy_body_data* %id) #0 !dbg !5149 {
entry:
  %body.addr = alloca %struct.gimple_seq_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %new_body = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body.addr, metadata !5152, metadata !DIExpression()), !dbg !5153
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !5154, metadata !DIExpression()), !dbg !5155
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !5156, metadata !DIExpression()), !dbg !5157
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_body, metadata !5158, metadata !DIExpression()), !dbg !5159
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_body, align 8, !dbg !5159
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body.addr, align 8, !dbg !5160
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !5162
  %1 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5162
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5162
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !5162
  br label %for.cond, !dbg !5163

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5164
  %tobool = icmp ne i8 %call, 0, !dbg !5166
  %lnot = xor i1 %tobool, true, !dbg !5166
  br i1 %lnot, label %for.body, label %for.end, !dbg !5167

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !5168, metadata !DIExpression()), !dbg !5170
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !5171
  %3 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5172
  %call2 = call %union.gimple_statement_d* @remap_gimple_stmt(%union.gimple_statement_d* %call1, %struct.copy_body_data* %3), !dbg !5173
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5170
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !5174
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_body, %union.gimple_statement_d* %4), !dbg !5175
  br label %for.inc, !dbg !5176

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !5177
  br label %for.cond, !dbg !5178, !llvm.loop !5179

for.end:                                          ; preds = %for.cond
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_body, align 8, !dbg !5181
  ret %struct.gimple_seq_d* %5, !dbg !5182
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !5183 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !5186, metadata !DIExpression()), !dbg !5187
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5188, metadata !DIExpression()), !dbg !5189
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !5190
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !5191
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5192
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5193
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !5194
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5195
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !5196
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5197
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !5197
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !5198
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !5199

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5200
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !5200
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !5201
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5201
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !5202
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !5203

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5204
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !5204
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !5205
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !5205
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !5206
  br label %cond.end, !dbg !5203

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5203

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !5203
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5207
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !5208
  ret void, !dbg !5209
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5210 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5213, metadata !DIExpression()), !dbg !5214
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5215
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5215
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5216
  %conv = zext i1 %cmp to i32, !dbg !5216
  %conv1 = trunc i32 %conv to i8, !dbg !5217
  ret i8 %conv1, !dbg !5218
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @remap_gimple_stmt(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) #0 !dbg !5219 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %copy = alloca %union.gimple_statement_d*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %new_block = alloca %union.tree_node*, align 8
  %skip_first = alloca i8, align 1
  %retval1 = alloca %union.tree_node*, align 8
  %s1 = alloca %struct.gimple_seq_d*, align 8
  %s2 = alloca %struct.gimple_seq_d*, align 8
  %i = alloca i64, align 8
  %decl = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %n = alloca %union.tree_node**, align 8
  %r = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %r200 = alloca i32, align 4
  %r204 = alloca i32, align 4
  %n215 = alloca %union.tree_node**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5222, metadata !DIExpression()), !dbg !5223
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !5224, metadata !DIExpression()), !dbg !5225
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %copy, metadata !5226, metadata !DIExpression()), !dbg !5227
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %copy, align 8, !dbg !5227
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !5228, metadata !DIExpression()), !dbg !5229
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_block, metadata !5230, metadata !DIExpression()), !dbg !5231
  call void @llvm.dbg.declare(metadata i8* %skip_first, metadata !5232, metadata !DIExpression()), !dbg !5233
  store i8 0, i8* %skip_first, align 1, !dbg !5233
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5234
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5236
  %cmp = icmp eq i32 %call, 9, !dbg !5237
  br i1 %cmp, label %land.lhs.true, label %if.else10, !dbg !5238

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5239
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i32 0, i32 14, !dbg !5240
  %2 = load i8, i8* %transform_return_to_modify, align 1, !dbg !5240
  %conv = zext i8 %2 to i32, !dbg !5239
  %tobool = icmp ne i32 %conv, 0, !dbg !5239
  br i1 %tobool, label %if.then, label %if.else10, !dbg !5241

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval1, metadata !5242, metadata !DIExpression()), !dbg !5244
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5245
  %call2 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %3), !dbg !5246
  store %union.tree_node* %call2, %union.tree_node** %retval1, align 8, !dbg !5244
  %4 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !5247
  %tobool3 = icmp ne %union.tree_node* %4, null, !dbg !5247
  br i1 %tobool3, label %land.lhs.true4, label %if.else, !dbg !5249

land.lhs.true4:                                   ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !5250
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5250
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !5250
  %bf.load = load i64, i64* %6, align 8, !dbg !5250
  %bf.clear = and i64 %bf.load, 65535, !dbg !5250
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5250
  %cmp5 = icmp ne i32 %bf.cast, 36, !dbg !5251
  br i1 %cmp5, label %if.then7, label %if.else, !dbg !5252

if.then7:                                         ; preds = %land.lhs.true4
  %7 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5253
  %retvar = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %7, i32 0, i32 5, !dbg !5253
  %8 = load %union.tree_node*, %union.tree_node** %retvar, align 8, !dbg !5253
  %9 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !5253
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %8, %union.tree_node* %9), !dbg !5253
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %copy, align 8, !dbg !5255
  store i8 1, i8* %skip_first, align 1, !dbg !5256
  br label %if.end, !dbg !5257

if.else:                                          ; preds = %land.lhs.true4, %if.then
  %call9 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !5258
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %retval, align 8, !dbg !5259
  br label %return, !dbg !5259

if.end:                                           ; preds = %if.then7
  br label %if.end211, !dbg !5260

if.else10:                                        ; preds = %land.lhs.true, %entry
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5261
  %call11 = call zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %10), !dbg !5263
  %tobool12 = icmp ne i8 %call11, 0, !dbg !5263
  br i1 %tobool12, label %if.then13, label %if.else97, !dbg !5264

if.then13:                                        ; preds = %if.else10
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s1, metadata !5265, metadata !DIExpression()), !dbg !5267
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s2, metadata !5268, metadata !DIExpression()), !dbg !5269
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5270
  %call14 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !5271
  switch i32 %call14, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb16
    i32 12, label %sw.bb21
    i32 17, label %sw.bb26
    i32 34, label %sw.bb33
    i32 26, label %sw.bb37
    i32 27, label %sw.bb44
    i32 23, label %sw.bb54
    i32 24, label %sw.bb70
    i32 25, label %sw.bb74
    i32 29, label %sw.bb78
    i32 30, label %sw.bb82
    i32 32, label %sw.bb87
    i32 22, label %sw.bb92
  ], !dbg !5272

sw.bb:                                            ; preds = %if.then13
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5273
  %13 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5275
  %call15 = call %union.gimple_statement_d* @copy_gimple_bind(%union.gimple_statement_d* %12, %struct.copy_body_data* %13), !dbg !5276
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %copy, align 8, !dbg !5277
  br label %sw.epilog, !dbg !5278

sw.bb16:                                          ; preds = %if.then13
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5279
  %call17 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %14), !dbg !5280
  %15 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5281
  %call18 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call17, %struct.copy_body_data* %15), !dbg !5282
  store %struct.gimple_seq_d* %call18, %struct.gimple_seq_d** %s1, align 8, !dbg !5283
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5284
  %call19 = call %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %16), !dbg !5285
  %17 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5286
  %call20 = call %union.gimple_statement_d* @gimple_build_catch(%union.tree_node* %call19, %struct.gimple_seq_d* %17), !dbg !5287
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %copy, align 8, !dbg !5288
  br label %sw.epilog, !dbg !5289

sw.bb21:                                          ; preds = %if.then13
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5290
  %call22 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %18), !dbg !5291
  %19 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5292
  %call23 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call22, %struct.copy_body_data* %19), !dbg !5293
  store %struct.gimple_seq_d* %call23, %struct.gimple_seq_d** %s1, align 8, !dbg !5294
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5295
  %call24 = call %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %20), !dbg !5296
  %21 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5297
  %call25 = call %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node* %call24, %struct.gimple_seq_d* %21), !dbg !5298
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %copy, align 8, !dbg !5299
  br label %sw.epilog, !dbg !5300

sw.bb26:                                          ; preds = %if.then13
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5301
  %call27 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %22), !dbg !5302
  %23 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5303
  %call28 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call27, %struct.copy_body_data* %23), !dbg !5304
  store %struct.gimple_seq_d* %call28, %struct.gimple_seq_d** %s1, align 8, !dbg !5305
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5306
  %call29 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %24), !dbg !5307
  %25 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5308
  %call30 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call29, %struct.copy_body_data* %25), !dbg !5309
  store %struct.gimple_seq_d* %call30, %struct.gimple_seq_d** %s2, align 8, !dbg !5310
  %26 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5311
  %27 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s2, align 8, !dbg !5312
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5313
  %call31 = call i32 @gimple_try_kind(%union.gimple_statement_d* %28), !dbg !5314
  %call32 = call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %26, %struct.gimple_seq_d* %27, i32 %call31), !dbg !5315
  store %union.gimple_statement_d* %call32, %union.gimple_statement_d** %copy, align 8, !dbg !5316
  br label %sw.epilog, !dbg !5317

sw.bb33:                                          ; preds = %if.then13
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5318
  %call34 = call %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %29), !dbg !5319
  %30 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5320
  %call35 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call34, %struct.copy_body_data* %30), !dbg !5321
  store %struct.gimple_seq_d* %call35, %struct.gimple_seq_d** %s1, align 8, !dbg !5322
  %31 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5323
  %call36 = call %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d* %31), !dbg !5324
  store %union.gimple_statement_d* %call36, %union.gimple_statement_d** %copy, align 8, !dbg !5325
  br label %sw.epilog, !dbg !5326

sw.bb37:                                          ; preds = %if.then13
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5327
  %call38 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %32), !dbg !5328
  %33 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5329
  %call39 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call38, %struct.copy_body_data* %33), !dbg !5330
  store %struct.gimple_seq_d* %call39, %struct.gimple_seq_d** %s1, align 8, !dbg !5331
  %34 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5332
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5333
  %call40 = call %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %35), !dbg !5334
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5335
  %call41 = call %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %36), !dbg !5336
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5337
  %call42 = call %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %37), !dbg !5338
  %call43 = call %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d* %34, %union.tree_node* %call40, %union.tree_node* %call41, %union.tree_node* %call42), !dbg !5339
  store %union.gimple_statement_d* %call43, %union.gimple_statement_d** %copy, align 8, !dbg !5340
  br label %sw.epilog, !dbg !5341

sw.bb44:                                          ; preds = %if.then13
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5342
  %call45 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %38), !dbg !5343
  %39 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5344
  %call46 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call45, %struct.copy_body_data* %39), !dbg !5345
  store %struct.gimple_seq_d* %call46, %struct.gimple_seq_d** %s1, align 8, !dbg !5346
  %40 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5347
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5348
  %call47 = call %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %41), !dbg !5349
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5350
  %call48 = call %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %42), !dbg !5351
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5352
  %call49 = call %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %43), !dbg !5353
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5354
  %call50 = call %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %44), !dbg !5355
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5356
  %call51 = call %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %45), !dbg !5357
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5358
  %call52 = call %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %46), !dbg !5359
  %call53 = call %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d* %40, %union.tree_node* %call47, %union.tree_node* %call48, %union.tree_node* %call49, %union.tree_node* %call50, %union.tree_node* %call51, %union.tree_node* %call52), !dbg !5360
  store %union.gimple_statement_d* %call53, %union.gimple_statement_d** %copy, align 8, !dbg !5361
  br label %sw.epilog, !dbg !5362

sw.bb54:                                          ; preds = %if.then13
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5363
  %call55 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %47), !dbg !5364
  %48 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5365
  %call56 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call55, %struct.copy_body_data* %48), !dbg !5366
  store %struct.gimple_seq_d* %call56, %struct.gimple_seq_d** %s1, align 8, !dbg !5367
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5368
  %call57 = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %49), !dbg !5369
  %50 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5370
  %call58 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call57, %struct.copy_body_data* %50), !dbg !5371
  store %struct.gimple_seq_d* %call58, %struct.gimple_seq_d** %s2, align 8, !dbg !5372
  %51 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5373
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5374
  %call59 = call %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %52), !dbg !5375
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5376
  %call60 = call i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %53), !dbg !5377
  %54 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s2, align 8, !dbg !5378
  %call61 = call %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d* %51, %union.tree_node* %call59, i64 %call60, %struct.gimple_seq_d* %54), !dbg !5379
  store %union.gimple_statement_d* %call61, %union.gimple_statement_d** %copy, align 8, !dbg !5380
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5381, metadata !DIExpression()), !dbg !5383
  store i64 0, i64* %i, align 8, !dbg !5384
  br label %for.cond, !dbg !5386

for.cond:                                         ; preds = %for.inc, %sw.bb54
  %55 = load i64, i64* %i, align 8, !dbg !5387
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5389
  %call62 = call i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %56), !dbg !5390
  %cmp63 = icmp ult i64 %55, %call62, !dbg !5391
  br i1 %cmp63, label %for.body, label %for.end, !dbg !5392

for.body:                                         ; preds = %for.cond
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5393
  %58 = load i64, i64* %i, align 8, !dbg !5395
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5396
  %60 = load i64, i64* %i, align 8, !dbg !5397
  %call65 = call %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %59, i64 %60), !dbg !5398
  call void @gimple_omp_for_set_index(%union.gimple_statement_d* %57, i64 %58, %union.tree_node* %call65), !dbg !5399
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5400
  %62 = load i64, i64* %i, align 8, !dbg !5401
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5402
  %64 = load i64, i64* %i, align 8, !dbg !5403
  %call66 = call %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %63, i64 %64), !dbg !5404
  call void @gimple_omp_for_set_initial(%union.gimple_statement_d* %61, i64 %62, %union.tree_node* %call66), !dbg !5405
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5406
  %66 = load i64, i64* %i, align 8, !dbg !5407
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5408
  %68 = load i64, i64* %i, align 8, !dbg !5409
  %call67 = call %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %67, i64 %68), !dbg !5410
  call void @gimple_omp_for_set_final(%union.gimple_statement_d* %65, i64 %66, %union.tree_node* %call67), !dbg !5411
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5412
  %70 = load i64, i64* %i, align 8, !dbg !5413
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5414
  %72 = load i64, i64* %i, align 8, !dbg !5415
  %call68 = call %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %71, i64 %72), !dbg !5416
  call void @gimple_omp_for_set_incr(%union.gimple_statement_d* %69, i64 %70, %union.tree_node* %call68), !dbg !5417
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5418
  %74 = load i64, i64* %i, align 8, !dbg !5419
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5420
  %76 = load i64, i64* %i, align 8, !dbg !5421
  %call69 = call i32 @gimple_omp_for_cond(%union.gimple_statement_d* %75, i64 %76), !dbg !5422
  call void @gimple_omp_for_set_cond(%union.gimple_statement_d* %73, i64 %74, i32 %call69), !dbg !5423
  br label %for.inc, !dbg !5424

for.inc:                                          ; preds = %for.body
  %77 = load i64, i64* %i, align 8, !dbg !5425
  %inc = add i64 %77, 1, !dbg !5425
  store i64 %inc, i64* %i, align 8, !dbg !5425
  br label %for.cond, !dbg !5426, !llvm.loop !5427

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !5429

sw.bb70:                                          ; preds = %if.then13
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5430
  %call71 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %78), !dbg !5431
  %79 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5432
  %call72 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call71, %struct.copy_body_data* %79), !dbg !5433
  store %struct.gimple_seq_d* %call72, %struct.gimple_seq_d** %s1, align 8, !dbg !5434
  %80 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5435
  %call73 = call %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d* %80), !dbg !5436
  store %union.gimple_statement_d* %call73, %union.gimple_statement_d** %copy, align 8, !dbg !5437
  br label %sw.epilog, !dbg !5438

sw.bb74:                                          ; preds = %if.then13
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5439
  %call75 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %81), !dbg !5440
  %82 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5441
  %call76 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call75, %struct.copy_body_data* %82), !dbg !5442
  store %struct.gimple_seq_d* %call76, %struct.gimple_seq_d** %s1, align 8, !dbg !5443
  %83 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5444
  %call77 = call %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d* %83), !dbg !5445
  store %union.gimple_statement_d* %call77, %union.gimple_statement_d** %copy, align 8, !dbg !5446
  br label %sw.epilog, !dbg !5447

sw.bb78:                                          ; preds = %if.then13
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5448
  %call79 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %84), !dbg !5449
  %85 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5450
  %call80 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call79, %struct.copy_body_data* %85), !dbg !5451
  store %struct.gimple_seq_d* %call80, %struct.gimple_seq_d** %s1, align 8, !dbg !5452
  %86 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5453
  %call81 = call %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d* %86), !dbg !5454
  store %union.gimple_statement_d* %call81, %union.gimple_statement_d** %copy, align 8, !dbg !5455
  br label %sw.epilog, !dbg !5456

sw.bb82:                                          ; preds = %if.then13
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5457
  %call83 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %87), !dbg !5458
  %88 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5459
  %call84 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call83, %struct.copy_body_data* %88), !dbg !5460
  store %struct.gimple_seq_d* %call84, %struct.gimple_seq_d** %s1, align 8, !dbg !5461
  %89 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5462
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5463
  %call85 = call %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %90), !dbg !5464
  %call86 = call %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d* %89, %union.tree_node* %call85), !dbg !5465
  store %union.gimple_statement_d* %call86, %union.gimple_statement_d** %copy, align 8, !dbg !5466
  br label %sw.epilog, !dbg !5467

sw.bb87:                                          ; preds = %if.then13
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5468
  %call88 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %91), !dbg !5469
  %92 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5470
  %call89 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call88, %struct.copy_body_data* %92), !dbg !5471
  store %struct.gimple_seq_d* %call89, %struct.gimple_seq_d** %s1, align 8, !dbg !5472
  %93 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5473
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5474
  %call90 = call %union.tree_node* @gimple_omp_single_clauses(%union.gimple_statement_d* %94), !dbg !5475
  %call91 = call %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d* %93, %union.tree_node* %call90), !dbg !5476
  store %union.gimple_statement_d* %call91, %union.gimple_statement_d** %copy, align 8, !dbg !5477
  br label %sw.epilog, !dbg !5478

sw.bb92:                                          ; preds = %if.then13
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5479
  %call93 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %95), !dbg !5480
  %96 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5481
  %call94 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call93, %struct.copy_body_data* %96), !dbg !5482
  store %struct.gimple_seq_d* %call94, %struct.gimple_seq_d** %s1, align 8, !dbg !5483
  %97 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s1, align 8, !dbg !5484
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5485
  %call95 = call %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %98), !dbg !5486
  %call96 = call %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d* %97, %union.tree_node* %call95), !dbg !5487
  store %union.gimple_statement_d* %call96, %union.gimple_statement_d** %copy, align 8, !dbg !5488
  br label %sw.epilog, !dbg !5489

sw.default:                                       ; preds = %if.then13
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1326, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5490
  br label %sw.epilog, !dbg !5491

sw.epilog:                                        ; preds = %sw.default, %sw.bb92, %sw.bb87, %sw.bb82, %sw.bb78, %sw.bb74, %sw.bb70, %for.end, %sw.bb44, %sw.bb37, %sw.bb33, %sw.bb26, %sw.bb21, %sw.bb16, %sw.bb
  br label %if.end210, !dbg !5492

if.else97:                                        ; preds = %if.else10
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5493
  %call98 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %99), !dbg !5496
  %conv99 = zext i8 %call98 to i32, !dbg !5496
  %tobool100 = icmp ne i32 %conv99, 0, !dbg !5496
  br i1 %tobool100, label %land.lhs.true101, label %if.end164, !dbg !5497

land.lhs.true101:                                 ; preds = %if.else97
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5498
  %call102 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %100), !dbg !5499
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5500
  %call103 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %101), !dbg !5501
  %cmp104 = icmp eq %union.tree_node* %call102, %call103, !dbg !5502
  br i1 %cmp104, label %land.lhs.true106, label %if.end164, !dbg !5503

land.lhs.true106:                                 ; preds = %land.lhs.true101
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5504
  %call107 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %102), !dbg !5505
  %103 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5506
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %103, i32 0, i32 0, !dbg !5507
  %104 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !5507
  %call108 = call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %call107, %union.tree_node* %104), !dbg !5508
  %conv109 = zext i8 %call108 to i32, !dbg !5508
  %tobool110 = icmp ne i32 %conv109, 0, !dbg !5508
  br i1 %tobool110, label %if.then111, label %if.end164, !dbg !5509

if.then111:                                       ; preds = %land.lhs.true106
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5510, metadata !DIExpression()), !dbg !5512
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5513
  %call112 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %105), !dbg !5514
  store %union.tree_node* %call112, %union.tree_node** %decl, align 8, !dbg !5512
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !5515, metadata !DIExpression()), !dbg !5516
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !5517, metadata !DIExpression()), !dbg !5518
  %106 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5519
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %106, i32 0, i32 6, !dbg !5520
  %107 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !5520
  %108 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5521
  %109 = bitcast %union.tree_node* %108 to i8*, !dbg !5521
  %call113 = call i8** @pointer_map_contains(%struct.pointer_map_t* %107, i8* %109), !dbg !5522
  %110 = bitcast i8** %call113 to %union.tree_node**, !dbg !5523
  store %union.tree_node** %110, %union.tree_node*** %n, align 8, !dbg !5524
  %111 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !5525
  %tobool114 = icmp ne %union.tree_node** %111, null, !dbg !5525
  br i1 %tobool114, label %if.then115, label %if.end163, !dbg !5527

if.then115:                                       ; preds = %if.then111
  %112 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !5528
  %113 = load %union.tree_node*, %union.tree_node** %112, align 8, !dbg !5530
  store %union.tree_node* %113, %union.tree_node** %value, align 8, !dbg !5531
  br label %while.cond, !dbg !5532

while.cond:                                       ; preds = %while.body, %if.then115
  %114 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %base116 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !5532
  %115 = bitcast %struct.tree_base* %base116 to i64*, !dbg !5532
  %bf.load117 = load i64, i64* %115, align 8, !dbg !5532
  %bf.clear118 = and i64 %bf.load117, 65535, !dbg !5532
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !5532
  %cmp120 = icmp eq i32 %bf.cast119, 116, !dbg !5532
  br i1 %cmp120, label %land.lhs.true135, label %lor.lhs.false, !dbg !5532

lor.lhs.false:                                    ; preds = %while.cond
  %116 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %base122 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !5532
  %117 = bitcast %struct.tree_base* %base122 to i64*, !dbg !5532
  %bf.load123 = load i64, i64* %117, align 8, !dbg !5532
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !5532
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !5532
  %cmp126 = icmp eq i32 %bf.cast125, 113, !dbg !5532
  br i1 %cmp126, label %land.lhs.true135, label %lor.lhs.false128, !dbg !5532

lor.lhs.false128:                                 ; preds = %lor.lhs.false
  %118 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %base129 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !5532
  %119 = bitcast %struct.tree_base* %base129 to i64*, !dbg !5532
  %bf.load130 = load i64, i64* %119, align 8, !dbg !5532
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !5532
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !5532
  %cmp133 = icmp eq i32 %bf.cast132, 117, !dbg !5532
  br i1 %cmp133, label %land.lhs.true135, label %land.end, !dbg !5532

land.lhs.true135:                                 ; preds = %lor.lhs.false128, %lor.lhs.false, %while.cond
  %120 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %exp = bitcast %union.tree_node* %120 to %struct.tree_exp*, !dbg !5532
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5532
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5532
  %121 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5532
  %122 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5532
  %cmp136 = icmp ne %union.tree_node* %121, %122, !dbg !5532
  br i1 %cmp136, label %land.rhs, label %land.end, !dbg !5532

land.rhs:                                         ; preds = %land.lhs.true135
  %123 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %common = bitcast %union.tree_node* %123 to %struct.tree_common*, !dbg !5532
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5532
  %124 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5532
  %125 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %exp138 = bitcast %union.tree_node* %125 to %struct.tree_exp*, !dbg !5532
  %operands139 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp138, i32 0, i32 3, !dbg !5532
  %arrayidx140 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands139, i64 0, i64 0, !dbg !5532
  %126 = load %union.tree_node*, %union.tree_node** %arrayidx140, align 8, !dbg !5532
  %common141 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !5532
  %type142 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common141, i32 0, i32 2, !dbg !5532
  %127 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !5532
  %cmp143 = icmp eq %union.tree_node* %124, %127, !dbg !5532
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true135, %lor.lhs.false128
  %128 = phi i1 [ false, %land.lhs.true135 ], [ false, %lor.lhs.false128 ], [ %cmp143, %land.rhs ], !dbg !5533
  br i1 %128, label %while.body, label %while.end, !dbg !5532

while.body:                                       ; preds = %land.end
  %129 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5532
  %exp145 = bitcast %union.tree_node* %129 to %struct.tree_exp*, !dbg !5532
  %operands146 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp145, i32 0, i32 3, !dbg !5532
  %arrayidx147 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands146, i64 0, i64 0, !dbg !5532
  %130 = load %union.tree_node*, %union.tree_node** %arrayidx147, align 8, !dbg !5532
  store %union.tree_node* %130, %union.tree_node** %value, align 8, !dbg !5532
  br label %while.cond, !dbg !5532, !llvm.loop !5534

while.end:                                        ; preds = %land.end
  %131 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5535
  %base148 = bitcast %union.tree_node* %131 to %struct.tree_base*, !dbg !5535
  %132 = bitcast %struct.tree_base* %base148 to i64*, !dbg !5535
  %bf.load149 = load i64, i64* %132, align 8, !dbg !5535
  %bf.lshr = lshr i64 %bf.load149, 17, !dbg !5535
  %bf.clear150 = and i64 %bf.lshr, 1, !dbg !5535
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !5535
  %tobool152 = icmp ne i32 %bf.cast151, 0, !dbg !5535
  br i1 %tobool152, label %if.then160, label %lor.lhs.false153, !dbg !5537

lor.lhs.false153:                                 ; preds = %while.end
  %133 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5538
  %base154 = bitcast %union.tree_node* %133 to %struct.tree_base*, !dbg !5538
  %134 = bitcast %struct.tree_base* %base154 to i64*, !dbg !5538
  %bf.load155 = load i64, i64* %134, align 8, !dbg !5538
  %bf.lshr156 = lshr i64 %bf.load155, 20, !dbg !5538
  %bf.clear157 = and i64 %bf.lshr156, 1, !dbg !5538
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !5538
  %tobool159 = icmp ne i32 %bf.cast158, 0, !dbg !5538
  br i1 %tobool159, label %if.then160, label %if.end162, !dbg !5539

if.then160:                                       ; preds = %lor.lhs.false153, %while.end
  %call161 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !5540
  store %union.gimple_statement_d* %call161, %union.gimple_statement_d** %retval, align 8, !dbg !5541
  br label %return, !dbg !5541

if.end162:                                        ; preds = %lor.lhs.false153
  br label %if.end163, !dbg !5542

if.end163:                                        ; preds = %if.end162, %if.then111
  br label %if.end164, !dbg !5543

if.end164:                                        ; preds = %if.end163, %land.lhs.true106, %land.lhs.true101, %if.else97
  %135 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5544
  %call165 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %135), !dbg !5546
  %tobool166 = icmp ne i8 %call165, 0, !dbg !5546
  br i1 %tobool166, label %if.then167, label %if.end172, !dbg !5547

if.then167:                                       ; preds = %if.end164
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5548
  %call168 = call %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %136), !dbg !5548
  %137 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5548
  %call169 = call %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %137), !dbg !5548
  %138 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5548
  %call170 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %call168, %union.tree_node* %call169, %union.gimple_statement_d* %138), !dbg !5548
  store %union.gimple_statement_d* %call170, %union.gimple_statement_d** %copy, align 8, !dbg !5550
  %139 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5551
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %139, i32 0, i32 21, !dbg !5551
  %140 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5551
  %call171 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %debug_stmts, %union.gimple_statement_d* %140), !dbg !5551
  %141 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5552
  store %union.gimple_statement_d* %141, %union.gimple_statement_d** %retval, align 8, !dbg !5553
  br label %return, !dbg !5553

if.end172:                                        ; preds = %if.end164
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5554
  %call173 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %142), !dbg !5555
  store %union.gimple_statement_d* %call173, %union.gimple_statement_d** %copy, align 8, !dbg !5556
  %143 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5557
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %143, i32 0, i32 11, !dbg !5559
  %144 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !5559
  %tobool174 = icmp ne %struct.pointer_map_t* %144, null, !dbg !5557
  br i1 %tobool174, label %if.then175, label %if.end209, !dbg !5560

if.then175:                                       ; preds = %if.end172
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5561
  %call176 = call i32 @gimple_code(%union.gimple_statement_d* %145), !dbg !5562
  switch i32 %call176, label %sw.default207 [
    i32 8, label %sw.bb177
    i32 14, label %sw.bb199
    i32 15, label %sw.bb203
  ], !dbg !5563

sw.bb177:                                         ; preds = %if.then175
  call void @llvm.dbg.declare(metadata %union.tree_node** %r, metadata !5564, metadata !DIExpression()), !dbg !5567
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !5568, metadata !DIExpression()), !dbg !5569
  %146 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5570
  %call178 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %146), !dbg !5571
  store %union.tree_node* %call178, %union.tree_node** %fndecl, align 8, !dbg !5569
  %147 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5572
  %tobool179 = icmp ne %union.tree_node* %147, null, !dbg !5572
  br i1 %tobool179, label %land.lhs.true180, label %if.end198, !dbg !5574

land.lhs.true180:                                 ; preds = %sw.bb177
  %148 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5575
  %function_decl = bitcast %union.tree_node* %148 to %struct.tree_function_decl*, !dbg !5575
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5575
  %bf.load181 = load i32, i32* %built_in_class, align 8, !dbg !5575
  %bf.lshr182 = lshr i32 %bf.load181, 11, !dbg !5575
  %bf.clear183 = and i32 %bf.lshr182, 3, !dbg !5575
  %cmp184 = icmp eq i32 %bf.clear183, 3, !dbg !5576
  br i1 %cmp184, label %if.then186, label %if.end198, !dbg !5577

if.then186:                                       ; preds = %land.lhs.true180
  %149 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5578
  %function_decl187 = bitcast %union.tree_node* %149 to %struct.tree_function_decl*, !dbg !5578
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl187, i32 0, i32 5, !dbg !5578
  %bf.load188 = load i32, i32* %function_code, align 8, !dbg !5578
  %bf.clear189 = and i32 %bf.load188, 2047, !dbg !5578
  switch i32 %bf.clear189, label %sw.default196 [
    i32 554, label %sw.bb190
    i32 552, label %sw.bb193
    i32 553, label %sw.bb193
  ], !dbg !5579

sw.bb190:                                         ; preds = %if.then186
  %150 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5580
  %call191 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %150, i32 1), !dbg !5582
  store %union.tree_node* %call191, %union.tree_node** %r, align 8, !dbg !5583
  %151 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5584
  %152 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5585
  %call192 = call %union.tree_node* @remap_eh_region_tree_nr(%union.tree_node* %151, %struct.copy_body_data* %152), !dbg !5586
  store %union.tree_node* %call192, %union.tree_node** %r, align 8, !dbg !5587
  %153 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5588
  %154 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5589
  call void @gimple_call_set_arg(%union.gimple_statement_d* %153, i32 1, %union.tree_node* %154), !dbg !5590
  br label %sw.bb193, !dbg !5590

sw.bb193:                                         ; preds = %if.then186, %if.then186, %sw.bb190
  %155 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5591
  %call194 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %155, i32 0), !dbg !5592
  store %union.tree_node* %call194, %union.tree_node** %r, align 8, !dbg !5593
  %156 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5594
  %157 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5595
  %call195 = call %union.tree_node* @remap_eh_region_tree_nr(%union.tree_node* %156, %struct.copy_body_data* %157), !dbg !5596
  store %union.tree_node* %call195, %union.tree_node** %r, align 8, !dbg !5597
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5598
  %159 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !5599
  call void @gimple_call_set_arg(%union.gimple_statement_d* %158, i32 0, %union.tree_node* %159), !dbg !5600
  br label %sw.epilog197, !dbg !5601

sw.default196:                                    ; preds = %if.then186
  br label %sw.epilog197, !dbg !5602

sw.epilog197:                                     ; preds = %sw.default196, %sw.bb193
  br label %if.end198, !dbg !5603

if.end198:                                        ; preds = %sw.epilog197, %land.lhs.true180, %sw.bb177
  br label %sw.epilog208, !dbg !5604

sw.bb199:                                         ; preds = %if.then175
  call void @llvm.dbg.declare(metadata i32* %r200, metadata !5605, metadata !DIExpression()), !dbg !5607
  %160 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5608
  %call201 = call i32 @gimple_resx_region(%union.gimple_statement_d* %160), !dbg !5609
  store i32 %call201, i32* %r200, align 4, !dbg !5607
  %161 = load i32, i32* %r200, align 4, !dbg !5610
  %162 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5611
  %call202 = call i32 @remap_eh_region_nr(i32 %161, %struct.copy_body_data* %162), !dbg !5612
  store i32 %call202, i32* %r200, align 4, !dbg !5613
  %163 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5614
  %164 = load i32, i32* %r200, align 4, !dbg !5615
  call void @gimple_resx_set_region(%union.gimple_statement_d* %163, i32 %164), !dbg !5616
  br label %sw.epilog208, !dbg !5617

sw.bb203:                                         ; preds = %if.then175
  call void @llvm.dbg.declare(metadata i32* %r204, metadata !5618, metadata !DIExpression()), !dbg !5620
  %165 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5621
  %call205 = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %165), !dbg !5622
  store i32 %call205, i32* %r204, align 4, !dbg !5620
  %166 = load i32, i32* %r204, align 4, !dbg !5623
  %167 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5624
  %call206 = call i32 @remap_eh_region_nr(i32 %166, %struct.copy_body_data* %167), !dbg !5625
  store i32 %call206, i32* %r204, align 4, !dbg !5626
  %168 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5627
  %169 = load i32, i32* %r204, align 4, !dbg !5628
  call void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %168, i32 %169), !dbg !5629
  br label %sw.epilog208, !dbg !5630

sw.default207:                                    ; preds = %if.then175
  br label %sw.epilog208, !dbg !5631

sw.epilog208:                                     ; preds = %sw.default207, %sw.bb203, %sw.bb199, %if.end198
  br label %if.end209, !dbg !5632

if.end209:                                        ; preds = %sw.epilog208, %if.end172
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %sw.epilog
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %if.end
  %170 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5633
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %170, i32 0, i32 8, !dbg !5634
  %171 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !5634
  store %union.tree_node* %171, %union.tree_node** %new_block, align 8, !dbg !5635
  %172 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5636
  %call212 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %172), !dbg !5638
  %tobool213 = icmp ne %union.tree_node* %call212, null, !dbg !5638
  br i1 %tobool213, label %if.then214, label %if.end220, !dbg !5639

if.then214:                                       ; preds = %if.end211
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n215, metadata !5640, metadata !DIExpression()), !dbg !5642
  %173 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5643
  %decl_map216 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %173, i32 0, i32 6, !dbg !5644
  %174 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map216, align 8, !dbg !5644
  %175 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5645
  %call217 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %175), !dbg !5646
  %176 = bitcast %union.tree_node* %call217 to i8*, !dbg !5646
  %call218 = call i8** @pointer_map_contains(%struct.pointer_map_t* %174, i8* %176), !dbg !5647
  %177 = bitcast i8** %call218 to %union.tree_node**, !dbg !5648
  store %union.tree_node** %177, %union.tree_node*** %n215, align 8, !dbg !5649
  %178 = load %union.tree_node**, %union.tree_node*** %n215, align 8, !dbg !5650
  %tobool219 = icmp ne %union.tree_node** %178, null, !dbg !5650
  br i1 %tobool219, label %cond.false, label %cond.true, !dbg !5650

cond.true:                                        ; preds = %if.then214
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1426, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5650
  br label %cond.end, !dbg !5650

cond.false:                                       ; preds = %if.then214
  br label %cond.end, !dbg !5650

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5650
  %179 = load %union.tree_node**, %union.tree_node*** %n215, align 8, !dbg !5651
  %180 = load %union.tree_node*, %union.tree_node** %179, align 8, !dbg !5652
  store %union.tree_node* %180, %union.tree_node** %new_block, align 8, !dbg !5653
  br label %if.end220, !dbg !5654

if.end220:                                        ; preds = %cond.end, %if.end211
  %181 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5655
  %182 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !5656
  call void @gimple_set_block(%union.gimple_statement_d* %181, %union.tree_node* %182), !dbg !5657
  %183 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5658
  %call221 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %183), !dbg !5660
  %tobool222 = icmp ne i8 %call221, 0, !dbg !5660
  br i1 %tobool222, label %if.then223, label %if.end224, !dbg !5661

if.then223:                                       ; preds = %if.end220
  %184 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5662
  store %union.gimple_statement_d* %184, %union.gimple_statement_d** %retval, align 8, !dbg !5663
  br label %return, !dbg !5663

if.end224:                                        ; preds = %if.end220
  %185 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5664
  call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 56, i1 false), !dbg !5664
  %186 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5665
  %187 = bitcast %struct.copy_body_data* %186 to i8*, !dbg !5665
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !5666
  store i8* %187, i8** %info, align 8, !dbg !5667
  %188 = load i8, i8* %skip_first, align 1, !dbg !5668
  %tobool225 = icmp ne i8 %188, 0, !dbg !5668
  br i1 %tobool225, label %if.then226, label %if.else229, !dbg !5670

if.then226:                                       ; preds = %if.end224
  %189 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5671
  %call227 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %189, i32 1), !dbg !5671
  %190 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5671
  %call228 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call227, %union.tree_node* (%union.tree_node**, i32*, i8*)* @remap_gimple_op_r, i8* %190, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5671
  br label %if.end231, !dbg !5671

if.else229:                                       ; preds = %if.end224
  %191 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5672
  %call230 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %191, %union.tree_node* (%union.tree_node**, i32*, i8*)* @remap_gimple_op_r, %struct.walk_stmt_info* %wi), !dbg !5673
  br label %if.end231

if.end231:                                        ; preds = %if.else229, %if.then226
  %192 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5674
  %call232 = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %192), !dbg !5676
  %tobool233 = icmp ne i8 %call232, 0, !dbg !5676
  br i1 %tobool233, label %if.then234, label %if.end235, !dbg !5677

if.then234:                                       ; preds = %if.end231
  %193 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5678
  call void @gimple_set_vdef(%union.gimple_statement_d* %193, %union.tree_node* null), !dbg !5680
  %194 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5681
  call void @gimple_set_vuse(%union.gimple_statement_d* %194, %union.tree_node* null), !dbg !5682
  br label %if.end235, !dbg !5683

if.end235:                                        ; preds = %if.then234, %if.end231
  %195 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !5684
  store %union.gimple_statement_d* %195, %union.gimple_statement_d** %retval, align 8, !dbg !5685
  br label %return, !dbg !5685

return:                                           ; preds = %if.end235, %if.then223, %if.then167, %if.then160, %if.else
  %196 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5686
  ret %union.gimple_statement_d* %196, !dbg !5686
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5687 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5690, metadata !DIExpression()), !dbg !5691
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5692
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5692
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5693
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5693
  ret %union.gimple_statement_d* %1, !dbg !5694
}

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5695 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5699, metadata !DIExpression()), !dbg !5700
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5701
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5702
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5702
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5703
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5703
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5704
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5705
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5706
  ret void, !dbg !5707
}

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_ssa_name(%union.tree_node* %name, %struct.copy_body_data* %id) #0 !dbg !5708 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  %n = alloca %union.tree_node**, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %init_stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5709, metadata !DIExpression()), !dbg !5710
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !5711, metadata !DIExpression()), !dbg !5712
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !5713, metadata !DIExpression()), !dbg !5714
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !5715, metadata !DIExpression()), !dbg !5716
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5717
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5717
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5717
  %bf.load = load i64, i64* %1, align 8, !dbg !5717
  %bf.clear = and i64 %bf.load, 65535, !dbg !5717
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5717
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5717
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5717

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5717
  br label %cond.end, !dbg !5717

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5717

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5717
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5718
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 6, !dbg !5719
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !5719
  %4 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5720
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !5720
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %3, i8* %5), !dbg !5721
  %6 = bitcast i8** %call to %union.tree_node**, !dbg !5722
  store %union.tree_node** %6, %union.tree_node*** %n, align 8, !dbg !5723
  %7 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !5724
  %tobool = icmp ne %union.tree_node** %7, null, !dbg !5724
  br i1 %tobool, label %if.then, label %if.end, !dbg !5726

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !5727
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !5728
  %call1 = call %union.tree_node* @unshare_expr(%union.tree_node* %9), !dbg !5729
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !5730
  br label %return, !dbg !5730

if.end:                                           ; preds = %cond.end
  %10 = load i32, i32* @processing_debug_stmt, align 4, !dbg !5731
  %tobool2 = icmp ne i32 %10, 0, !dbg !5731
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !5733

if.then3:                                         ; preds = %if.end
  store i32 -1, i32* @processing_debug_stmt, align 4, !dbg !5734
  %11 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5736
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !5737
  br label %return, !dbg !5737

if.end4:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5738
  %ssa_name = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !5738
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5738
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5738
  %14 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5739
  %call5 = call %union.tree_node* @remap_decl(%union.tree_node* %13, %struct.copy_body_data* %14), !dbg !5740
  store %union.tree_node* %call5, %union.tree_node** %new_tree, align 8, !dbg !5741
  %15 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5742
  %base6 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5742
  %16 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5742
  %bf.load7 = load i64, i64* %16, align 8, !dbg !5742
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5742
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5742
  %cmp10 = icmp eq i32 %bf.cast9, 32, !dbg !5744
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false, !dbg !5745

lor.lhs.false:                                    ; preds = %if.end4
  %17 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5746
  %base11 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5746
  %18 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5746
  %bf.load12 = load i64, i64* %18, align 8, !dbg !5746
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5746
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5746
  %cmp15 = icmp eq i32 %bf.cast14, 34, !dbg !5747
  br i1 %cmp15, label %land.lhs.true, label %if.else108, !dbg !5748

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end4
  %19 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5749
  %ssa_name16 = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !5749
  %var17 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name16, i32 0, i32 1, !dbg !5749
  %20 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !5749
  %base18 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5749
  %21 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5749
  %bf.load19 = load i64, i64* %21, align 8, !dbg !5749
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5749
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5749
  %cmp22 = icmp ne i32 %bf.cast21, 36, !dbg !5750
  br i1 %cmp22, label %if.then25, label %lor.lhs.false23, !dbg !5751

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5752
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %22, i32 0, i32 14, !dbg !5753
  %23 = load i8, i8* %transform_return_to_modify, align 1, !dbg !5753
  %tobool24 = icmp ne i8 %23, 0, !dbg !5752
  br i1 %tobool24, label %if.else108, label %if.then25, !dbg !5754

if.then25:                                        ; preds = %lor.lhs.false23, %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5755
  %call26 = call %union.tree_node* @make_ssa_name(%union.tree_node* %24, %union.gimple_statement_d* null), !dbg !5757
  store %union.tree_node* %call26, %union.tree_node** %new_tree, align 8, !dbg !5758
  %25 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5759
  %26 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5760
  %27 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5761
  call void @insert_decl_map(%struct.copy_body_data* %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !5762
  %28 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5763
  %base27 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !5763
  %29 = bitcast %struct.tree_base* %base27 to i64*, !dbg !5763
  %bf.load28 = load i64, i64* %29, align 8, !dbg !5763
  %bf.lshr = lshr i64 %bf.load28, 22, !dbg !5763
  %bf.clear29 = and i64 %bf.lshr, 1, !dbg !5763
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !5763
  %30 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5764
  %base31 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !5764
  %31 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5764
  %32 = zext i32 %bf.cast30 to i64, !dbg !5765
  %bf.load32 = load i64, i64* %31, align 8, !dbg !5765
  %bf.value = and i64 %32, 1, !dbg !5765
  %bf.shl = shl i64 %bf.value, 22, !dbg !5765
  %bf.clear33 = and i64 %bf.load32, -4194305, !dbg !5765
  %bf.set = or i64 %bf.clear33, %bf.shl, !dbg !5765
  store i64 %bf.set, i64* %31, align 8, !dbg !5765
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5765
  %33 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5766
  %ssa_name34 = bitcast %union.tree_node* %33 to %struct.tree_ssa_name*, !dbg !5766
  %var35 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name34, i32 0, i32 1, !dbg !5766
  %34 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !5766
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !5766
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5766
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5766
  %36 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5767
  %common36 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !5767
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !5767
  store %union.tree_node* %35, %union.tree_node** %type37, align 8, !dbg !5768
  %37 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5769
  %ssa_name38 = bitcast %union.tree_node* %37 to %struct.tree_ssa_name*, !dbg !5769
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name38, i32 0, i32 2, !dbg !5769
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5769
  %call39 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %38), !dbg !5771
  %tobool40 = icmp ne i8 %call39, 0, !dbg !5771
  br i1 %tobool40, label %if.then41, label %if.end107, !dbg !5772

if.then41:                                        ; preds = %if.then25
  %39 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5773
  %entry_bb = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %39, i32 0, i32 20, !dbg !5776
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !5776
  %tobool42 = icmp ne %struct.basic_block_def* %40, null, !dbg !5773
  br i1 %tobool42, label %land.lhs.true43, label %if.else, !dbg !5777

land.lhs.true43:                                  ; preds = %if.then41
  %41 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5778
  %ssa_name44 = bitcast %union.tree_node* %41 to %struct.tree_ssa_name*, !dbg !5778
  %var45 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name44, i32 0, i32 1, !dbg !5778
  %42 = load %union.tree_node*, %union.tree_node** %var45, align 8, !dbg !5778
  %call46 = call zeroext i8 @is_gimple_reg(%union.tree_node* %42), !dbg !5779
  %conv = zext i8 %call46 to i32, !dbg !5779
  %tobool47 = icmp ne i32 %conv, 0, !dbg !5779
  br i1 %tobool47, label %land.lhs.true48, label %if.else, !dbg !5780

land.lhs.true48:                                  ; preds = %land.lhs.true43
  %43 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5781
  %ssa_name49 = bitcast %union.tree_node* %43 to %struct.tree_ssa_name*, !dbg !5781
  %var50 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name49, i32 0, i32 1, !dbg !5781
  %44 = load %union.tree_node*, %union.tree_node** %var50, align 8, !dbg !5781
  %base51 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !5781
  %45 = bitcast %struct.tree_base* %base51 to i64*, !dbg !5781
  %bf.load52 = load i64, i64* %45, align 8, !dbg !5781
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !5781
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !5781
  %cmp55 = icmp ne i32 %bf.cast54, 34, !dbg !5782
  br i1 %cmp55, label %land.lhs.true57, label %if.else, !dbg !5783

land.lhs.true57:                                  ; preds = %land.lhs.true48
  %46 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5784
  %entry_bb58 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %46, i32 0, i32 20, !dbg !5785
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb58, align 8, !dbg !5785
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5786
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !5786
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5786
  %49 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5786
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %49, i32 0, i32 0, !dbg !5786
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5786
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 1, !dbg !5786
  %51 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5786
  %tobool59 = icmp ne %struct.VEC_edge_gc* %51, null, !dbg !5786
  br i1 %tobool59, label %cond.true60, label %cond.false66, !dbg !5786

cond.true60:                                      ; preds = %land.lhs.true57
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5786
  %add.ptr61 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !5786
  %cfg62 = getelementptr inbounds %struct.function, %struct.function* %add.ptr61, i32 0, i32 1, !dbg !5786
  %53 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg62, align 8, !dbg !5786
  %x_entry_block_ptr63 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %53, i32 0, i32 0, !dbg !5786
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr63, align 8, !dbg !5786
  %succs64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 1, !dbg !5786
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs64, align 8, !dbg !5786
  %base65 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %55, i32 0, i32 0, !dbg !5786
  br label %cond.end67, !dbg !5786

cond.false66:                                     ; preds = %land.lhs.true57
  br label %cond.end67, !dbg !5786

cond.end67:                                       ; preds = %cond.false66, %cond.true60
  %cond68 = phi %struct.VEC_edge_base* [ %base65, %cond.true60 ], [ null, %cond.false66 ], !dbg !5786
  %call69 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond68, i32 0), !dbg !5786
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call69, i32 0, i32 1, !dbg !5787
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5787
  %cmp70 = icmp ne %struct.basic_block_def* %47, %56, !dbg !5788
  br i1 %cmp70, label %if.then85, label %lor.lhs.false72, !dbg !5789

lor.lhs.false72:                                  ; preds = %cond.end67
  %57 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5790
  %entry_bb73 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %57, i32 0, i32 20, !dbg !5790
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb73, align 8, !dbg !5790
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 0, !dbg !5790
  %59 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5790
  %tobool74 = icmp ne %struct.VEC_edge_gc* %59, null, !dbg !5790
  br i1 %tobool74, label %cond.true75, label %cond.false79, !dbg !5790

cond.true75:                                      ; preds = %lor.lhs.false72
  %60 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5790
  %entry_bb76 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %60, i32 0, i32 20, !dbg !5790
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb76, align 8, !dbg !5790
  %preds77 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 0, !dbg !5790
  %62 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds77, align 8, !dbg !5790
  %base78 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %62, i32 0, i32 0, !dbg !5790
  br label %cond.end80, !dbg !5790

cond.false79:                                     ; preds = %lor.lhs.false72
  br label %cond.end80, !dbg !5790

cond.end80:                                       ; preds = %cond.false79, %cond.true75
  %cond81 = phi %struct.VEC_edge_base* [ %base78, %cond.true75 ], [ null, %cond.false79 ], !dbg !5790
  %call82 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond81), !dbg !5790
  %cmp83 = icmp ne i32 %call82, 1, !dbg !5791
  br i1 %cmp83, label %if.then85, label %if.else, !dbg !5792

if.then85:                                        ; preds = %cond.end80, %cond.end67
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5793, metadata !DIExpression()), !dbg !5795
  %63 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5796
  %entry_bb86 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %63, i32 0, i32 20, !dbg !5797
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb86, align 8, !dbg !5797
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %64), !dbg !5798
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init_stmt, metadata !5799, metadata !DIExpression()), !dbg !5800
  %65 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5801
  %66 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5801
  %common87 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !5801
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2, !dbg !5801
  %67 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !5801
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5801
  %call89 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %67, %union.tree_node* %68), !dbg !5801
  %call90 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %65, %union.tree_node* %call89), !dbg !5801
  store %union.gimple_statement_d* %call90, %union.gimple_statement_d** %init_stmt, align 8, !dbg !5802
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !5803
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %69, i32 0), !dbg !5804
  %70 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5805
  %base91 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !5805
  %71 = bitcast %struct.tree_base* %base91 to i64*, !dbg !5805
  %bf.load92 = load i64, i64* %71, align 8, !dbg !5806
  %bf.clear93 = and i64 %bf.load92, -4294967297, !dbg !5806
  store i64 %bf.clear93, i64* %71, align 8, !dbg !5806
  br label %if.end106, !dbg !5807

if.else:                                          ; preds = %cond.end80, %land.lhs.true48, %land.lhs.true43, %if.then41
  %call94 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !5808
  %72 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5810
  %ssa_name95 = bitcast %union.tree_node* %72 to %struct.tree_ssa_name*, !dbg !5810
  %def_stmt96 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name95, i32 0, i32 2, !dbg !5810
  store %union.gimple_statement_d* %call94, %union.gimple_statement_d** %def_stmt96, align 8, !dbg !5811
  %73 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5812
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %73, i32 0, i32 4, !dbg !5814
  %74 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !5814
  %75 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5815
  %ssa_name97 = bitcast %union.tree_node* %75 to %struct.tree_ssa_name*, !dbg !5815
  %var98 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name97, i32 0, i32 1, !dbg !5815
  %76 = load %union.tree_node*, %union.tree_node** %var98, align 8, !dbg !5815
  %call99 = call %union.tree_node* @gimple_default_def(%struct.function* %74, %union.tree_node* %76), !dbg !5816
  %77 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5817
  %cmp100 = icmp eq %union.tree_node* %call99, %77, !dbg !5818
  br i1 %cmp100, label %if.then102, label %if.end105, !dbg !5819

if.then102:                                       ; preds = %if.else
  %78 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5820
  %ssa_name103 = bitcast %union.tree_node* %78 to %struct.tree_ssa_name*, !dbg !5820
  %var104 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name103, i32 0, i32 1, !dbg !5820
  %79 = load %union.tree_node*, %union.tree_node** %var104, align 8, !dbg !5820
  %80 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5821
  call void @set_default_def(%union.tree_node* %79, %union.tree_node* %80), !dbg !5822
  br label %if.end105, !dbg !5822

if.end105:                                        ; preds = %if.then102, %if.else
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then85
  br label %if.end107, !dbg !5823

if.end107:                                        ; preds = %if.end106, %if.then25
  br label %if.end109, !dbg !5824

if.else108:                                       ; preds = %lor.lhs.false23, %lor.lhs.false
  %81 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5825
  %82 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5826
  %83 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5827
  call void @insert_decl_map(%struct.copy_body_data* %81, %union.tree_node* %82, %union.tree_node* %83), !dbg !5828
  br label %if.end109

if.end109:                                        ; preds = %if.else108, %if.end107
  %84 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5829
  store %union.tree_node* %84, %union.tree_node** %retval, align 8, !dbg !5830
  br label %return, !dbg !5830

return:                                           ; preds = %if.end109, %if.then3, %if.then
  %85 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5831
  ret %union.tree_node* %85, !dbg !5831
}

declare dso_local zeroext i8 @auto_var_in_fn_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_statement_list(%union.tree_node** %tp) #0 !dbg !5832 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %oi = alloca %struct.tree_stmt_iterator, align 8
  %ni = alloca %struct.tree_stmt_iterator, align 8
  %new_tree = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.tree_stmt_iterator, align 8
  %tmp2 = alloca %struct.tree_stmt_iterator, align 8
  %stmt = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !5835, metadata !DIExpression()), !dbg !5836
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %oi, metadata !5837, metadata !DIExpression()), !dbg !5843
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %ni, metadata !5844, metadata !DIExpression()), !dbg !5845
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !5846, metadata !DIExpression()), !dbg !5847
  %call = call %union.tree_node* @alloc_stmt_list(), !dbg !5848
  store %union.tree_node* %call, %union.tree_node** %new_tree, align 8, !dbg !5849
  %0 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5850
  %call1 = call { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %0), !dbg !5851
  %1 = bitcast %struct.tree_stmt_iterator* %tmp to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !5851
  %2 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %1, i32 0, i32 0, !dbg !5851
  %3 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call1, 0, !dbg !5851
  store %struct.tree_statement_list_node* %3, %struct.tree_statement_list_node** %2, align 8, !dbg !5851
  %4 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %1, i32 0, i32 1, !dbg !5851
  %5 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call1, 1, !dbg !5851
  store %union.tree_node* %5, %union.tree_node** %4, align 8, !dbg !5851
  %6 = bitcast %struct.tree_stmt_iterator* %ni to i8*, !dbg !5851
  %7 = bitcast %struct.tree_stmt_iterator* %tmp to i8*, !dbg !5851
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !5851
  %8 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5852
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !5853
  %call3 = call { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %9), !dbg !5854
  %10 = bitcast %struct.tree_stmt_iterator* %tmp2 to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !5854
  %11 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %10, i32 0, i32 0, !dbg !5854
  %12 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call3, 0, !dbg !5854
  store %struct.tree_statement_list_node* %12, %struct.tree_statement_list_node** %11, align 8, !dbg !5854
  %13 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %10, i32 0, i32 1, !dbg !5854
  %14 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call3, 1, !dbg !5854
  store %union.tree_node* %14, %union.tree_node** %13, align 8, !dbg !5854
  %15 = bitcast %struct.tree_stmt_iterator* %oi to i8*, !dbg !5854
  %16 = bitcast %struct.tree_stmt_iterator* %tmp2 to i8*, !dbg !5854
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !dbg !5854
  %17 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5855
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !5855
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !5855
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5855
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5855
  %20 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5856
  %common4 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5856
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !5856
  store %union.tree_node* %19, %union.tree_node** %type5, align 8, !dbg !5857
  %21 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5858
  %22 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5859
  store %union.tree_node* %21, %union.tree_node** %22, align 8, !dbg !5860
  br label %for.cond, !dbg !5861

for.cond:                                         ; preds = %for.inc, %entry
  %23 = bitcast %struct.tree_stmt_iterator* %oi to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !5862
  %24 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %23, i32 0, i32 0, !dbg !5862
  %25 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %24, align 8, !dbg !5862
  %26 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %23, i32 0, i32 1, !dbg !5862
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !5862
  %call6 = call zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %25, %union.tree_node* %27), !dbg !5862
  %tobool = icmp ne i8 %call6, 0, !dbg !5865
  %lnot = xor i1 %tobool, true, !dbg !5865
  br i1 %lnot, label %for.body, label %for.end, !dbg !5866

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !5867, metadata !DIExpression()), !dbg !5869
  %28 = bitcast %struct.tree_stmt_iterator* %oi to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !5870
  %29 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %28, i32 0, i32 0, !dbg !5870
  %30 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %29, align 8, !dbg !5870
  %31 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %28, i32 0, i32 1, !dbg !5870
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !5870
  %call7 = call %union.tree_node* @tsi_stmt(%struct.tree_statement_list_node* %30, %union.tree_node* %32), !dbg !5870
  store %union.tree_node* %call7, %union.tree_node** %stmt, align 8, !dbg !5869
  %33 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !5871
  %base = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !5871
  %34 = bitcast %struct.tree_base* %base to i64*, !dbg !5871
  %bf.load = load i64, i64* %34, align 8, !dbg !5871
  %bf.clear = and i64 %bf.load, 65535, !dbg !5871
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5871
  %cmp = icmp eq i32 %bf.cast, 147, !dbg !5873
  br i1 %cmp, label %if.then, label %if.end, !dbg !5874

if.then:                                          ; preds = %for.body
  call void @copy_statement_list(%union.tree_node** %stmt), !dbg !5875
  br label %if.end, !dbg !5875

if.end:                                           ; preds = %if.then, %for.body
  %35 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !5876
  call void @tsi_link_after(%struct.tree_stmt_iterator* %ni, %union.tree_node* %35, i32 4), !dbg !5877
  br label %for.inc, !dbg !5878

for.inc:                                          ; preds = %if.end
  call void @tsi_next(%struct.tree_stmt_iterator* %oi), !dbg !5879
  br label %for.cond, !dbg !5880, !llvm.loop !5881

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5883
}

; Function Attrs: noinline nounwind uwtable
define internal void @remap_save_expr(%union.tree_node** %tp, i8* %st_, i32* %walk_subtrees) #0 !dbg !5884 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %st_.addr = alloca i8*, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %st = alloca %struct.pointer_map_t*, align 8
  %n = alloca %union.tree_node**, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !5887, metadata !DIExpression()), !dbg !5888
  store i8* %st_, i8** %st_.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %st_.addr, metadata !5889, metadata !DIExpression()), !dbg !5890
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !5891, metadata !DIExpression()), !dbg !5892
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %st, metadata !5893, metadata !DIExpression()), !dbg !5894
  %0 = load i8*, i8** %st_.addr, align 8, !dbg !5895
  %1 = bitcast i8* %0 to %struct.pointer_map_t*, !dbg !5896
  store %struct.pointer_map_t* %1, %struct.pointer_map_t** %st, align 8, !dbg !5894
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !5897, metadata !DIExpression()), !dbg !5898
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5899, metadata !DIExpression()), !dbg !5900
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !5901
  %3 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5902
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !5903
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !5903
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %2, i8* %5), !dbg !5904
  %6 = bitcast i8** %call to %union.tree_node**, !dbg !5905
  store %union.tree_node** %6, %union.tree_node*** %n, align 8, !dbg !5906
  %7 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !5907
  %tobool = icmp ne %union.tree_node** %7, null, !dbg !5907
  br i1 %tobool, label %if.else, label %if.then, !dbg !5909

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5910
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !5910
  %call1 = call %union.tree_node* @copy_node_stat(%union.tree_node* %9), !dbg !5910
  store %union.tree_node* %call1, %union.tree_node** %t, align 8, !dbg !5912
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5913
  %11 = bitcast %union.tree_node* %10 to i8*, !dbg !5913
  %12 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !5914
  %13 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5915
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !5916
  %15 = bitcast %union.tree_node* %14 to i8*, !dbg !5916
  %call2 = call i8** @pointer_map_insert(%struct.pointer_map_t* %12, i8* %15), !dbg !5917
  store i8* %11, i8** %call2, align 8, !dbg !5918
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5919
  %17 = bitcast %union.tree_node* %16 to i8*, !dbg !5919
  %18 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !5920
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5921
  %20 = bitcast %union.tree_node* %19 to i8*, !dbg !5921
  %call3 = call i8** @pointer_map_insert(%struct.pointer_map_t* %18, i8* %20), !dbg !5922
  store i8* %17, i8** %call3, align 8, !dbg !5923
  br label %if.end, !dbg !5924

if.else:                                          ; preds = %entry
  %21 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !5925
  store i32 0, i32* %21, align 4, !dbg !5927
  %22 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !5928
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !5929
  store %union.tree_node* %23, %union.tree_node** %t, align 8, !dbg !5930
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5931
  %25 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5932
  store %union.tree_node* %24, %union.tree_node** %25, align 8, !dbg !5933
  ret void, !dbg !5934
}

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_bind_expr(%union.tree_node** %tp, i32* %walk_subtrees, %struct.copy_body_data* %id) #0 !dbg !5935 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %block = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !5938, metadata !DIExpression()), !dbg !5939
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !5940, metadata !DIExpression()), !dbg !5941
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !5942, metadata !DIExpression()), !dbg !5943
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !5944, metadata !DIExpression()), !dbg !5945
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5946
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5946
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !5946
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5946
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !5946
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5946
  store %union.tree_node* %2, %union.tree_node** %block, align 8, !dbg !5945
  %3 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5947
  %4 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !5948
  %call = call %union.tree_node* @copy_tree_r(%union.tree_node** %3, i32* %4, i8* null), !dbg !5949
  %5 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !5950
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !5950
  br i1 %tobool, label %if.then, label %if.end, !dbg !5952

if.then:                                          ; preds = %entry
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5953
  call void @remap_block(%union.tree_node** %block, %struct.copy_body_data* %6), !dbg !5955
  %7 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !5956
  %8 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5957
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !5957
  %exp1 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !5957
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !5957
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 2, !dbg !5957
  store %union.tree_node* %7, %union.tree_node** %arrayidx3, align 8, !dbg !5958
  br label %if.end, !dbg !5959

if.end:                                           ; preds = %if.then, %entry
  %10 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5960
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !5960
  %exp4 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !5960
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !5960
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 0, !dbg !5960
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !5960
  %tobool7 = icmp ne %union.tree_node* %12, null, !dbg !5960
  br i1 %tobool7, label %if.then8, label %if.end16, !dbg !5962

if.then8:                                         ; preds = %if.end
  %13 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5963
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !5963
  %exp9 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !5963
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !5963
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 0, !dbg !5963
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !5963
  %16 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !5964
  %call12 = call %union.tree_node* @remap_decls(%union.tree_node* %15, %struct.VEC_tree_gc** null, %struct.copy_body_data* %16), !dbg !5965
  %17 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5966
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !5966
  %exp13 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !5966
  %operands14 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp13, i32 0, i32 3, !dbg !5966
  %arrayidx15 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands14, i64 0, i64 0, !dbg !5966
  store %union.tree_node* %call12, %union.tree_node** %arrayidx15, align 8, !dbg !5967
  br label %if.end16, !dbg !5966

if.end16:                                         ; preds = %if.then8, %if.end
  ret void, !dbg !5968
}

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local %union.tree_node* @build_empty_stmt(i32) #2

declare dso_local %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_indirect_ref_1(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !5969 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %code = alloca i32, align 4
  %cl = alloca i32, align 4
  %chain = alloca %union.tree_node*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  %new_tree34 = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !5970, metadata !DIExpression()), !dbg !5971
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !5972, metadata !DIExpression()), !dbg !5973
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5974, metadata !DIExpression()), !dbg !5975
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5976, metadata !DIExpression()), !dbg !5977
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5978
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5978
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5978
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5978
  %bf.load = load i64, i64* %2, align 8, !dbg !5978
  %bf.clear = and i64 %bf.load, 65535, !dbg !5978
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5978
  store i32 %bf.cast, i32* %code, align 4, !dbg !5977
  call void @llvm.dbg.declare(metadata i32* %cl, metadata !5979, metadata !DIExpression()), !dbg !5980
  %3 = load i32, i32* %code, align 4, !dbg !5981
  %idxprom = sext i32 %3 to i64, !dbg !5981
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5981
  %4 = load i32, i32* %arrayidx, align 4, !dbg !5981
  store i32 %4, i32* %cl, align 4, !dbg !5980
  %5 = load i32, i32* %cl, align 4, !dbg !5982
  %cmp = icmp uge i32 %5, 4, !dbg !5982
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5982

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %cl, align 4, !dbg !5982
  %cmp1 = icmp ule i32 %6, 10, !dbg !5982
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !5984

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %7 = load i32, i32* %code, align 4, !dbg !5985
  %cmp2 = icmp eq i32 %7, 2, !dbg !5986
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !5987

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %code, align 4, !dbg !5988
  %cmp4 = icmp eq i32 %8, 3, !dbg !5989
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !5990

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %9 = load i32, i32* %code, align 4, !dbg !5991
  %cmp6 = icmp eq i32 %9, 35, !dbg !5992
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !5993

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %10 = load i32, i32* %code, align 4, !dbg !5994
  %cmp8 = icmp eq i32 %10, 163, !dbg !5995
  br i1 %cmp8, label %if.then, label %if.else, !dbg !5996

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain, metadata !5997, metadata !DIExpression()), !dbg !5999
  store %union.tree_node* null, %union.tree_node** %chain, align 8, !dbg !5999
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !6000, metadata !DIExpression()), !dbg !6001
  %11 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6002
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !6002
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !6002
  %chain9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6002
  %13 = load %union.tree_node*, %union.tree_node** %chain9, align 8, !dbg !6002
  store %union.tree_node* %13, %union.tree_node** %chain, align 8, !dbg !6003
  %14 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6004
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !6004
  %call = call %union.tree_node* @copy_node_stat(%union.tree_node* %15), !dbg !6004
  store %union.tree_node* %call, %union.tree_node** %new_tree, align 8, !dbg !6005
  %16 = load i32, i32* @flag_mudflap, align 4, !dbg !6006
  %tobool = icmp ne i32 %16, 0, !dbg !6006
  br i1 %tobool, label %land.lhs.true10, label %if.end, !dbg !6008

land.lhs.true10:                                  ; preds = %if.then
  %17 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6009
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !6010
  %call11 = call i32 @mf_marked_p(%union.tree_node* %18), !dbg !6011
  %tobool12 = icmp ne i32 %call11, 0, !dbg !6011
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !6012

if.then13:                                        ; preds = %land.lhs.true10
  %19 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6013
  %call14 = call %union.tree_node* @mf_mark(%union.tree_node* %19), !dbg !6014
  br label %if.end, !dbg !6014

if.end:                                           ; preds = %if.then13, %land.lhs.true10, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6015
  %21 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6016
  store %union.tree_node* %20, %union.tree_node** %21, align 8, !dbg !6017
  %22 = load i32, i32* %code, align 4, !dbg !6018
  %cmp15 = icmp eq i32 %22, 34, !dbg !6020
  br i1 %cmp15, label %if.then20, label %lor.lhs.false16, !dbg !6021

lor.lhs.false16:                                  ; preds = %if.end
  %23 = load i32, i32* %code, align 4, !dbg !6022
  %cmp17 = icmp eq i32 %23, 2, !dbg !6023
  br i1 %cmp17, label %if.then20, label %lor.lhs.false18, !dbg !6024

lor.lhs.false18:                                  ; preds = %lor.lhs.false16
  %24 = load i32, i32* %code, align 4, !dbg !6025
  %cmp19 = icmp eq i32 %24, 163, !dbg !6026
  br i1 %cmp19, label %if.then20, label %if.end23, !dbg !6027

if.then20:                                        ; preds = %lor.lhs.false18, %lor.lhs.false16, %if.end
  %25 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6028
  %26 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6029
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !6029
  %common21 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !6029
  %chain22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 1, !dbg !6029
  store %union.tree_node* %25, %union.tree_node** %chain22, align 8, !dbg !6030
  br label %if.end23, !dbg !6029

if.end23:                                         ; preds = %if.then20, %lor.lhs.false18
  %28 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6031
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !6031
  %base24 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !6031
  %30 = bitcast %struct.tree_base* %base24 to i64*, !dbg !6031
  %bf.load25 = load i64, i64* %30, align 8, !dbg !6031
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !6031
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !6031
  %cmp28 = icmp eq i32 %bf.cast27, 58, !dbg !6033
  br i1 %cmp28, label %if.then29, label %if.end31, !dbg !6034

if.then29:                                        ; preds = %if.end23
  %31 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6035
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !6035
  %exp = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !6035
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6035
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !6035
  store %union.tree_node* null, %union.tree_node** %arrayidx30, align 8, !dbg !6036
  br label %if.end31, !dbg !6035

if.end31:                                         ; preds = %if.then29, %if.end23
  br label %if.end75, !dbg !6037

if.else:                                          ; preds = %lor.lhs.false7
  %33 = load i32, i32* %code, align 4, !dbg !6038
  %cmp32 = icmp eq i32 %33, 51, !dbg !6040
  br i1 %cmp32, label %if.then33, label %if.else50, !dbg !6041

if.then33:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree34, metadata !6042, metadata !DIExpression()), !dbg !6044
  %34 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6045
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !6045
  %call35 = call %union.tree_node* @copy_node_stat(%union.tree_node* %35), !dbg !6045
  store %union.tree_node* %call35, %union.tree_node** %new_tree34, align 8, !dbg !6046
  %36 = load i32, i32* @flag_mudflap, align 4, !dbg !6047
  %tobool36 = icmp ne i32 %36, 0, !dbg !6047
  br i1 %tobool36, label %land.lhs.true37, label %if.end42, !dbg !6049

land.lhs.true37:                                  ; preds = %if.then33
  %37 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6050
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !6051
  %call38 = call i32 @mf_marked_p(%union.tree_node* %38), !dbg !6052
  %tobool39 = icmp ne i32 %call38, 0, !dbg !6052
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !6053

if.then40:                                        ; preds = %land.lhs.true37
  %39 = load %union.tree_node*, %union.tree_node** %new_tree34, align 8, !dbg !6054
  %call41 = call %union.tree_node* @mf_mark(%union.tree_node* %39), !dbg !6055
  br label %if.end42, !dbg !6055

if.end42:                                         ; preds = %if.then40, %land.lhs.true37, %if.then33
  %40 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6056
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !6056
  %constructor = bitcast %union.tree_node* %41 to %struct.tree_constructor*, !dbg !6056
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !6056
  %42 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !6056
  %tobool43 = icmp ne %struct.VEC_constructor_elt_gc* %42, null, !dbg !6056
  br i1 %tobool43, label %cond.true, label %cond.false, !dbg !6056

cond.true:                                        ; preds = %if.end42
  %43 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6056
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !6056
  %constructor44 = bitcast %union.tree_node* %44 to %struct.tree_constructor*, !dbg !6056
  %elts45 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor44, i32 0, i32 1, !dbg !6056
  %45 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts45, align 8, !dbg !6056
  %base46 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %45, i32 0, i32 0, !dbg !6056
  br label %cond.end, !dbg !6056

cond.false:                                       ; preds = %if.end42
  br label %cond.end, !dbg !6056

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base46, %cond.true ], [ null, %cond.false ], !dbg !6056
  %call47 = call %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_copy(%struct.VEC_constructor_elt_base* %cond), !dbg !6056
  %46 = load %union.tree_node*, %union.tree_node** %new_tree34, align 8, !dbg !6057
  %constructor48 = bitcast %union.tree_node* %46 to %struct.tree_constructor*, !dbg !6057
  %elts49 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor48, i32 0, i32 1, !dbg !6057
  store %struct.VEC_constructor_elt_gc* %call47, %struct.VEC_constructor_elt_gc** %elts49, align 8, !dbg !6058
  %47 = load %union.tree_node*, %union.tree_node** %new_tree34, align 8, !dbg !6059
  %48 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6060
  store %union.tree_node* %47, %union.tree_node** %48, align 8, !dbg !6061
  br label %if.end74, !dbg !6062

if.else50:                                        ; preds = %if.else
  %49 = load i32, i32* %code, align 4, !dbg !6063
  %idxprom51 = sext i32 %49 to i64, !dbg !6063
  %arrayidx52 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom51, !dbg !6063
  %50 = load i32, i32* %arrayidx52, align 4, !dbg !6063
  %cmp53 = icmp eq i32 %50, 2, !dbg !6065
  br i1 %cmp53, label %if.then54, label %if.else55, !dbg !6066

if.then54:                                        ; preds = %if.else50
  %51 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6067
  store i32 0, i32* %51, align 4, !dbg !6068
  br label %if.end73, !dbg !6069

if.else55:                                        ; preds = %if.else50
  %52 = load i32, i32* %code, align 4, !dbg !6070
  %idxprom56 = sext i32 %52 to i64, !dbg !6070
  %arrayidx57 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom56, !dbg !6070
  %53 = load i32, i32* %arrayidx57, align 4, !dbg !6070
  %cmp58 = icmp eq i32 %53, 3, !dbg !6072
  br i1 %cmp58, label %if.then59, label %if.else60, !dbg !6073

if.then59:                                        ; preds = %if.else55
  %54 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6074
  store i32 0, i32* %54, align 4, !dbg !6075
  br label %if.end72, !dbg !6076

if.else60:                                        ; preds = %if.else55
  %55 = load i32, i32* %code, align 4, !dbg !6077
  %idxprom61 = sext i32 %55 to i64, !dbg !6077
  %arrayidx62 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom61, !dbg !6077
  %56 = load i32, i32* %arrayidx62, align 4, !dbg !6077
  %cmp63 = icmp eq i32 %56, 1, !dbg !6079
  br i1 %cmp63, label %if.then64, label %if.else65, !dbg !6080

if.then64:                                        ; preds = %if.else60
  %57 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6081
  store i32 0, i32* %57, align 4, !dbg !6082
  br label %if.end71, !dbg !6083

if.else65:                                        ; preds = %if.else60
  %58 = load i32, i32* %code, align 4, !dbg !6084
  %cmp66 = icmp ne i32 %58, 147, !dbg !6084
  br i1 %cmp66, label %cond.false68, label %cond.true67, !dbg !6084

cond.true67:                                      ; preds = %if.else65
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4093, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6084
  br label %cond.end69, !dbg !6084

cond.false68:                                     ; preds = %if.else65
  br label %cond.end69, !dbg !6084

cond.end69:                                       ; preds = %cond.false68, %cond.true67
  %cond70 = phi i32 [ 0, %cond.true67 ], [ 0, %cond.false68 ], !dbg !6084
  br label %if.end71

if.end71:                                         ; preds = %cond.end69, %if.then64
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then59
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then54
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %cond.end
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end31
  ret %union.tree_node* null, !dbg !6085
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_inlinable_function_p(%union.tree_node* %fn) #0 !dbg !6086 {
entry:
  %retval = alloca i8, align 1
  %fn.addr = alloca %union.tree_node*, align 8
  %inlinable = alloca i8, align 1
  %do_warning = alloca i8, align 1
  %always_inline = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.expanded_location, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata i8* %inlinable, metadata !6091, metadata !DIExpression()), !dbg !6092
  store i8 1, i8* %inlinable, align 1, !dbg !6092
  call void @llvm.dbg.declare(metadata i8* %do_warning, metadata !6093, metadata !DIExpression()), !dbg !6094
  call void @llvm.dbg.declare(metadata %union.tree_node** %always_inline, metadata !6095, metadata !DIExpression()), !dbg !6096
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6097
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6097
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6097
  %bf.load = load i32, i32* %uninlinable, align 8, !dbg !6097
  %bf.lshr = lshr i32 %bf.load, 15, !dbg !6097
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6097
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6097
  br i1 %tobool, label %if.then, label %if.end, !dbg !6099

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6100
  br label %return, !dbg !6100

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @warn_inline, align 4, !dbg !6101
  %tobool1 = icmp ne i32 %1, 0, !dbg !6101
  br i1 %tobool1, label %land.lhs.true, label %land.end, !dbg !6102

land.lhs.true:                                    ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6103
  %function_decl2 = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !6103
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 5, !dbg !6103
  %bf.load3 = load i32, i32* %declared_inline_flag, align 8, !dbg !6103
  %bf.lshr4 = lshr i32 %bf.load3, 21, !dbg !6103
  %bf.clear5 = and i32 %bf.lshr4, 1, !dbg !6103
  %tobool6 = icmp ne i32 %bf.clear5, 0, !dbg !6103
  br i1 %tobool6, label %land.lhs.true7, label %land.end, !dbg !6104

land.lhs.true7:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6105
  %function_decl8 = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !6105
  %no_inline_warning_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl8, i32 0, i32 5, !dbg !6105
  %bf.load9 = load i32, i32* %no_inline_warning_flag, align 8, !dbg !6105
  %bf.lshr10 = lshr i32 %bf.load9, 23, !dbg !6105
  %bf.clear11 = and i32 %bf.lshr10, 1, !dbg !6105
  %tobool12 = icmp ne i32 %bf.clear11, 0, !dbg !6105
  br i1 %tobool12, label %land.end, label %land.rhs, !dbg !6106

land.rhs:                                         ; preds = %land.lhs.true7
  %4 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6107
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !6107
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !6107
  %5 = load i32, i32* %locus, align 8, !dbg !6107
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %5), !dbg !6107
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 3, !dbg !6107
  %6 = load i8, i8* %sysp, align 8, !dbg !6107
  %conv = zext i8 %6 to i32, !dbg !6107
  %cmp = icmp ne i32 %conv, 0, !dbg !6107
  %lnot = xor i1 %cmp, true, !dbg !6108
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true7, %land.lhs.true, %if.end
  %7 = phi i1 [ false, %land.lhs.true7 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %lnot, %land.rhs ], !dbg !6109
  %land.ext = zext i1 %7 to i32, !dbg !6106
  %conv14 = trunc i32 %land.ext to i8, !dbg !6110
  store i8 %conv14, i8* %do_warning, align 1, !dbg !6111
  %8 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6112
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !6112
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !6112
  %9 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !6112
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %9), !dbg !6113
  store %union.tree_node* %call, %union.tree_node** %always_inline, align 8, !dbg !6114
  %10 = load i32, i32* @flag_no_inline, align 4, !dbg !6115
  %tobool15 = icmp ne i32 %10, 0, !dbg !6115
  br i1 %tobool15, label %land.lhs.true16, label %if.else, !dbg !6117

land.lhs.true16:                                  ; preds = %land.end
  %11 = load %union.tree_node*, %union.tree_node** %always_inline, align 8, !dbg !6118
  %cmp17 = icmp eq %union.tree_node* %11, null, !dbg !6119
  br i1 %cmp17, label %if.then19, label %if.else, !dbg !6120

if.then19:                                        ; preds = %land.lhs.true16
  %12 = load i8, i8* %do_warning, align 1, !dbg !6121
  %tobool20 = icmp ne i8 %12, 0, !dbg !6121
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !6124

if.then21:                                        ; preds = %if.then19
  %13 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6125
  %call22 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), %union.tree_node* %13), !dbg !6126
  br label %if.end23, !dbg !6126

if.end23:                                         ; preds = %if.then21, %if.then19
  store i8 0, i8* %inlinable, align 1, !dbg !6127
  br label %if.end62, !dbg !6128

if.else:                                          ; preds = %land.lhs.true16, %land.end
  %14 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6129
  %function_decl24 = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !6129
  %declared_inline_flag25 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl24, i32 0, i32 5, !dbg !6129
  %bf.load26 = load i32, i32* %declared_inline_flag25, align 8, !dbg !6129
  %bf.lshr27 = lshr i32 %bf.load26, 21, !dbg !6129
  %bf.clear28 = and i32 %bf.lshr27, 1, !dbg !6129
  %tobool29 = icmp ne i32 %bf.clear28, 0, !dbg !6129
  br i1 %tobool29, label %if.else39, label %land.lhs.true30, !dbg !6131

land.lhs.true30:                                  ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6132
  %decl_with_vis = bitcast %union.tree_node* %15 to %struct.tree_decl_with_vis*, !dbg !6132
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6132
  %16 = bitcast i24* %comdat_flag to i32*, !dbg !6132
  %bf.load31 = load i32, i32* %16, align 8, !dbg !6132
  %bf.lshr32 = lshr i32 %bf.load31, 9, !dbg !6132
  %bf.clear33 = and i32 %bf.lshr32, 1, !dbg !6132
  %tobool34 = icmp ne i32 %bf.clear33, 0, !dbg !6132
  br i1 %tobool34, label %if.else39, label %land.lhs.true35, !dbg !6132

land.lhs.true35:                                  ; preds = %land.lhs.true30
  %17 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !6132
  %18 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6132
  %call36 = call zeroext i8 %17(%union.tree_node* %18), !dbg !6132
  %tobool37 = icmp ne i8 %call36, 0, !dbg !6132
  br i1 %tobool37, label %if.else39, label %if.then38, !dbg !6133

if.then38:                                        ; preds = %land.lhs.true35
  store i8 0, i8* %inlinable, align 1, !dbg !6134
  br label %if.end61, !dbg !6135

if.else39:                                        ; preds = %land.lhs.true35, %land.lhs.true30, %if.else
  %19 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6136
  %call40 = call zeroext i8 @function_attribute_inlinable_p(%union.tree_node* %19), !dbg !6138
  %tobool41 = icmp ne i8 %call40, 0, !dbg !6138
  br i1 %tobool41, label %if.else47, label %if.then42, !dbg !6139

if.then42:                                        ; preds = %if.else39
  %20 = load i8, i8* %do_warning, align 1, !dbg !6140
  %tobool43 = icmp ne i8 %20, 0, !dbg !6140
  br i1 %tobool43, label %if.then44, label %if.end46, !dbg !6143

if.then44:                                        ; preds = %if.then42
  %21 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6144
  %call45 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.4, i64 0, i64 0), %union.tree_node* %21), !dbg !6145
  br label %if.end46, !dbg !6145

if.end46:                                         ; preds = %if.then44, %if.then42
  store i8 0, i8* %inlinable, align 1, !dbg !6146
  br label %if.end60, !dbg !6147

if.else47:                                        ; preds = %if.else39
  %22 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6148
  %call48 = call zeroext i8 @inline_forbidden_p(%union.tree_node* %22), !dbg !6150
  %tobool49 = icmp ne i8 %call48, 0, !dbg !6150
  br i1 %tobool49, label %if.then50, label %if.end59, !dbg !6151

if.then50:                                        ; preds = %if.else47
  %23 = load %union.tree_node*, %union.tree_node** %always_inline, align 8, !dbg !6152
  %tobool51 = icmp ne %union.tree_node* %23, null, !dbg !6152
  br i1 %tobool51, label %if.then52, label %if.else53, !dbg !6155

if.then52:                                        ; preds = %if.then50
  %24 = load i8*, i8** @inline_forbidden_reason, align 8, !dbg !6156
  %25 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6157
  call void (i8*, ...) @sorry(i8* %24, %union.tree_node* %25), !dbg !6158
  br label %if.end58, !dbg !6158

if.else53:                                        ; preds = %if.then50
  %26 = load i8, i8* %do_warning, align 1, !dbg !6159
  %tobool54 = icmp ne i8 %26, 0, !dbg !6159
  br i1 %tobool54, label %if.then55, label %if.end57, !dbg !6161

if.then55:                                        ; preds = %if.else53
  %27 = load i8*, i8** @inline_forbidden_reason, align 8, !dbg !6162
  %28 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6163
  %call56 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* %27, %union.tree_node* %28), !dbg !6164
  br label %if.end57, !dbg !6164

if.end57:                                         ; preds = %if.then55, %if.else53
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then52
  store i8 0, i8* %inlinable, align 1, !dbg !6165
  br label %if.end59, !dbg !6166

if.end59:                                         ; preds = %if.end58, %if.else47
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end46
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then38
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end23
  %29 = load i8, i8* %inlinable, align 1, !dbg !6167
  %tobool63 = icmp ne i8 %29, 0, !dbg !6168
  %lnot64 = xor i1 %tobool63, true, !dbg !6168
  %lnot.ext = zext i1 %lnot64 to i32, !dbg !6168
  %30 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6169
  %function_decl65 = bitcast %union.tree_node* %30 to %struct.tree_function_decl*, !dbg !6169
  %uninlinable66 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl65, i32 0, i32 5, !dbg !6169
  %bf.load67 = load i32, i32* %uninlinable66, align 8, !dbg !6170
  %bf.value = and i32 %lnot.ext, 1, !dbg !6170
  %bf.shl = shl i32 %bf.value, 15, !dbg !6170
  %bf.clear68 = and i32 %bf.load67, -32769, !dbg !6170
  %bf.set = or i32 %bf.clear68, %bf.shl, !dbg !6170
  store i32 %bf.set, i32* %uninlinable66, align 8, !dbg !6170
  %31 = load i8, i8* %inlinable, align 1, !dbg !6171
  store i8 %31, i8* %retval, align 1, !dbg !6172
  br label %return, !dbg !6172

return:                                           ; preds = %if.end62, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !6173
  ret i8 %32, !dbg !6173
}

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

declare dso_local zeroext i8 @function_attribute_inlinable_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @inline_forbidden_p(%union.tree_node* %fndecl) #0 !dbg !6174 {
entry:
  %retval = alloca i8, align 1
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fun = alloca %struct.function*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %visited_nodes = alloca %struct.pointer_set_t*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %forbidden_p = alloca i8, align 1
  %ret = alloca %union.gimple_statement_d*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6175, metadata !DIExpression()), !dbg !6176
  call void @llvm.dbg.declare(metadata %struct.function** %fun, metadata !6177, metadata !DIExpression()), !dbg !6178
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6179
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6179
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6179
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !6179
  store %struct.function* %1, %struct.function** %fun, align 8, !dbg !6178
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !6180, metadata !DIExpression()), !dbg !6181
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited_nodes, metadata !6182, metadata !DIExpression()), !dbg !6183
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6184, metadata !DIExpression()), !dbg !6185
  call void @llvm.dbg.declare(metadata i8* %forbidden_p, metadata !6186, metadata !DIExpression()), !dbg !6187
  store i8 0, i8* %forbidden_p, align 1, !dbg !6187
  %2 = load %struct.function*, %struct.function** %fun, align 8, !dbg !6188
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6189
  %call = call i8* @copy_forbidden(%struct.function* %2, %union.tree_node* %3), !dbg !6190
  store i8* %call, i8** @inline_forbidden_reason, align 8, !dbg !6191
  %4 = load i8*, i8** @inline_forbidden_reason, align 8, !dbg !6192
  %cmp = icmp ne i8* %4, null, !dbg !6194
  br i1 %cmp, label %if.then, label %if.end, !dbg !6195

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6196
  br label %return, !dbg !6196

if.end:                                           ; preds = %entry
  %call1 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !6197
  store %struct.pointer_set_t* %call1, %struct.pointer_set_t** %visited_nodes, align 8, !dbg !6198
  %5 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !6199
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 56, i1 false), !dbg !6199
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6200
  %7 = bitcast %union.tree_node* %6 to i8*, !dbg !6201
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !6202
  store i8* %7, i8** %info, align 8, !dbg !6203
  %8 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_nodes, align 8, !dbg !6204
  %pset = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 2, !dbg !6205
  store %struct.pointer_set_t* %8, %struct.pointer_set_t** %pset, align 8, !dbg !6206
  %9 = load %struct.function*, %struct.function** %fun, align 8, !dbg !6207
  %cfg = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 1, !dbg !6207
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6207
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !6207
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6207
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !6207
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6207
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !6207
  br label %for.cond, !dbg !6207

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6209
  %14 = load %struct.function*, %struct.function** %fun, align 8, !dbg !6209
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1, !dbg !6209
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6209
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !6209
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6209
  %cmp3 = icmp ne %struct.basic_block_def* %13, %16, !dbg !6209
  br i1 %cmp3, label %for.body, label %for.end, !dbg !6207

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret, metadata !6211, metadata !DIExpression()), !dbg !6213
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6214, metadata !DIExpression()), !dbg !6215
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6216
  %call4 = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %17), !dbg !6217
  store %struct.gimple_seq_d* %call4, %struct.gimple_seq_d** %seq, align 8, !dbg !6215
  %18 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6218
  %call5 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %18, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @inline_forbidden_p_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.walk_stmt_info* %wi), !dbg !6219
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %ret, align 8, !dbg !6220
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !6221
  %cmp6 = icmp ne %union.gimple_statement_d* %19, null, !dbg !6222
  %conv = zext i1 %cmp6 to i32, !dbg !6222
  %conv7 = trunc i32 %conv to i8, !dbg !6223
  store i8 %conv7, i8* %forbidden_p, align 1, !dbg !6224
  %20 = load i8, i8* %forbidden_p, align 1, !dbg !6225
  %tobool = icmp ne i8 %20, 0, !dbg !6225
  br i1 %tobool, label %if.then8, label %if.end9, !dbg !6227

if.then8:                                         ; preds = %for.body
  br label %for.end, !dbg !6228

if.end9:                                          ; preds = %for.body
  br label %for.inc, !dbg !6229

for.inc:                                          ; preds = %if.end9
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6209
  %next_bb10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !6209
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb10, align 8, !dbg !6209
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !6209
  br label %for.cond, !dbg !6209, !llvm.loop !6230

for.end:                                          ; preds = %if.then8, %for.cond
  %23 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_nodes, align 8, !dbg !6232
  call void @pointer_set_destroy(%struct.pointer_set_t* %23), !dbg !6233
  %24 = load i8, i8* %forbidden_p, align 1, !dbg !6234
  store i8 %24, i8* %retval, align 1, !dbg !6235
  br label %return, !dbg !6235

return:                                           ; preds = %for.end, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !6236
  ret i8 %25, !dbg !6236
}

declare dso_local void @sorry(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @estimate_move_cost(%union.tree_node* %type) #0 !dbg !6237 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6240, metadata !DIExpression()), !dbg !6241
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6242, metadata !DIExpression()), !dbg !6243
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6244
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6244
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6244
  %bf.load = load i64, i64* %1, align 8, !dbg !6244
  %bf.clear = and i64 %bf.load, 65535, !dbg !6244
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6244
  %cmp = icmp eq i32 %bf.cast, 19, !dbg !6244
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6244

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3016, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6244
  br label %cond.end, !dbg !6244

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6244

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6244
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6245
  %call = call i64 @int_size_in_bytes(%union.tree_node* %2), !dbg !6246
  store i64 %call, i64* %size, align 8, !dbg !6247
  %3 = load i64, i64* %size, align 8, !dbg !6248
  %cmp1 = icmp slt i64 %3, 0, !dbg !6250
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !6251

lor.lhs.false:                                    ; preds = %cond.end
  %4 = load i64, i64* %size, align 8, !dbg !6252
  %5 = load i32, i32* @optimize_size, align 4, !dbg !6253
  %tobool = icmp ne i32 %5, 0, !dbg !6253
  br i1 %tobool, label %cond.false3, label %cond.true2, !dbg !6253

cond.true2:                                       ; preds = %lor.lhs.false
  %6 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8, !dbg !6253
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %6, i32 0, i32 10, !dbg !6253
  %7 = load i32, i32* %move_ratio, align 4, !dbg !6253
  br label %cond.end4, !dbg !6253

cond.false3:                                      ; preds = %lor.lhs.false
  br label %cond.end4, !dbg !6253

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ %7, %cond.true2 ], [ 3, %cond.false3 ], !dbg !6253
  %mul = mul nsw i32 4, %cond5, !dbg !6254
  %conv = sext i32 %mul to i64, !dbg !6255
  %cmp6 = icmp sgt i64 %4, %conv, !dbg !6256
  br i1 %cmp6, label %if.then, label %if.else, !dbg !6257

if.then:                                          ; preds = %cond.end4, %cond.end
  store i32 4, i32* %retval, align 4, !dbg !6258
  br label %return, !dbg !6258

if.else:                                          ; preds = %cond.end4
  %8 = load i64, i64* %size, align 8, !dbg !6259
  %add = add nsw i64 %8, 4, !dbg !6260
  %sub = sub nsw i64 %add, 1, !dbg !6261
  %div = sdiv i64 %sub, 4, !dbg !6262
  %conv8 = trunc i64 %div to i32, !dbg !6263
  store i32 %conv8, i32* %retval, align 4, !dbg !6264
  br label %return, !dbg !6264

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6265
  ret i32 %9, !dbg !6265
}

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @estimate_num_insns(%union.gimple_statement_d* %stmt, %struct.eni_weights_d* %weights) #0 !dbg !6266 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %weights.addr = alloca %struct.eni_weights_d*, align 8
  %cost = alloca i32, align 4
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  %funtype = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %arg157 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6270, metadata !DIExpression()), !dbg !6271
  store %struct.eni_weights_d* %weights, %struct.eni_weights_d** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eni_weights_d** %weights.addr, metadata !6272, metadata !DIExpression()), !dbg !6273
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !6274, metadata !DIExpression()), !dbg !6275
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6276, metadata !DIExpression()), !dbg !6277
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6278, metadata !DIExpression()), !dbg !6279
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6280
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6281
  store i32 %call, i32* %code, align 4, !dbg !6279
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6282, metadata !DIExpression()), !dbg !6283
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6284, metadata !DIExpression()), !dbg !6285
  %1 = load i32, i32* %code, align 4, !dbg !6286
  switch i32 %1, label %sw.default213 [
    i32 6, label %sw.bb
    i32 1, label %sw.bb21
    i32 5, label %sw.bb27
    i32 8, label %sw.bb36
    i32 3, label %sw.bb177
    i32 4, label %sw.bb177
    i32 18, label %sw.bb177
    i32 16, label %sw.bb177
    i32 9, label %sw.bb177
    i32 33, label %sw.bb177
    i32 2, label %sw.bb177
    i32 7, label %sw.bb178
    i32 14, label %sw.bb181
    i32 15, label %sw.bb182
    i32 10, label %sw.bb183
    i32 12, label %sw.bb186
    i32 11, label %sw.bb189
    i32 17, label %sw.bb192
    i32 28, label %sw.bb198
    i32 31, label %sw.bb198
    i32 20, label %sw.bb198
    i32 21, label %sw.bb198
    i32 19, label %sw.bb199
    i32 23, label %sw.bb200
    i32 26, label %sw.bb208
    i32 27, label %sw.bb208
    i32 22, label %sw.bb208
    i32 24, label %sw.bb208
    i32 25, label %sw.bb208
    i32 29, label %sw.bb208
    i32 30, label %sw.bb208
    i32 32, label %sw.bb208
  ], !dbg !6287

sw.bb:                                            ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6288
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %2), !dbg !6290
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !6291
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6292
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !6293
  store %union.tree_node* %call2, %union.tree_node** %rhs, align 8, !dbg !6294
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6295
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6297
  %tobool = icmp ne i8 %call3, 0, !dbg !6297
  br i1 %tobool, label %if.then, label %if.else, !dbg !6298

if.then:                                          ; preds = %sw.bb
  store i32 0, i32* %cost, align 4, !dbg !6299
  br label %if.end, !dbg !6300

if.else:                                          ; preds = %sw.bb
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6301
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6301
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6301
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6301
  %call4 = call i32 @estimate_move_cost(%union.tree_node* %6), !dbg !6302
  store i32 %call4, i32* %cost, align 4, !dbg !6303
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6304
  %call5 = call zeroext i8 @is_gimple_reg(%union.tree_node* %7), !dbg !6306
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6306
  br i1 %tobool6, label %if.end13, label %land.lhs.true, !dbg !6307

land.lhs.true:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6308
  %call7 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %8), !dbg !6309
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6309
  br i1 %tobool8, label %if.end13, label %if.then9, !dbg !6310

if.then9:                                         ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6311
  %common10 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6311
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !6311
  %10 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !6311
  %call12 = call i32 @estimate_move_cost(%union.tree_node* %10), !dbg !6312
  %11 = load i32, i32* %cost, align 4, !dbg !6313
  %add = add i32 %11, %call12, !dbg !6313
  store i32 %add, i32* %cost, align 4, !dbg !6313
  br label %if.end13, !dbg !6314

if.end13:                                         ; preds = %if.then9, %land.lhs.true, %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6315
  %call14 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %12), !dbg !6316
  %13 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6317
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6318
  %call15 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %14), !dbg !6319
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6320
  %call16 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %15), !dbg !6321
  %call17 = call i32 @get_gimple_rhs_class(i32 %call16), !dbg !6322
  %cmp = icmp eq i32 %call17, 1, !dbg !6323
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6322

cond.true:                                        ; preds = %if.end13
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6324
  %call18 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %16), !dbg !6325
  br label %cond.end, !dbg !6322

cond.false:                                       ; preds = %if.end13
  br label %cond.end, !dbg !6322

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call18, %cond.true ], [ null, %cond.false ], !dbg !6322
  %call19 = call i32 @estimate_operator_cost(i32 %call14, %struct.eni_weights_d* %13, %union.tree_node* %call15, %union.tree_node* %cond), !dbg !6326
  %17 = load i32, i32* %cost, align 4, !dbg !6327
  %add20 = add i32 %17, %call19, !dbg !6327
  store i32 %add20, i32* %cost, align 4, !dbg !6327
  br label %sw.epilog214, !dbg !6328

sw.bb21:                                          ; preds = %entry
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6329
  %call22 = call i32 @gimple_cond_code(%union.gimple_statement_d* %18), !dbg !6330
  %19 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6331
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6332
  %call23 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %20, i32 0), !dbg !6333
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6334
  %call24 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %21, i32 1), !dbg !6335
  %call25 = call i32 @estimate_operator_cost(i32 %call22, %struct.eni_weights_d* %19, %union.tree_node* %call23, %union.tree_node* %call24), !dbg !6336
  %add26 = add nsw i32 1, %call25, !dbg !6337
  store i32 %add26, i32* %cost, align 4, !dbg !6338
  br label %sw.epilog214, !dbg !6339

sw.bb27:                                          ; preds = %entry
  %22 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6340
  %time_based = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %22, i32 0, i32 4, !dbg !6342
  %23 = load i8, i8* %time_based, align 4, !dbg !6342
  %tobool28 = icmp ne i8 %23, 0, !dbg !6340
  br i1 %tobool28, label %if.then29, label %if.else32, !dbg !6343

if.then29:                                        ; preds = %sw.bb27
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6344
  %call30 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %24), !dbg !6345
  %conv = zext i32 %call30 to i64, !dbg !6345
  %call31 = call i32 @floor_log2(i64 %conv), !dbg !6346
  %mul = mul nsw i32 %call31, 2, !dbg !6347
  store i32 %mul, i32* %cost, align 4, !dbg !6348
  br label %if.end35, !dbg !6349

if.else32:                                        ; preds = %sw.bb27
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6350
  %call33 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %25), !dbg !6351
  %mul34 = mul i32 %call33, 2, !dbg !6352
  store i32 %mul34, i32* %cost, align 4, !dbg !6353
  br label %if.end35

if.end35:                                         ; preds = %if.else32, %if.then29
  br label %sw.epilog214, !dbg !6354

sw.bb36:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6355, metadata !DIExpression()), !dbg !6357
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6358
  %call37 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %26), !dbg !6359
  store %union.tree_node* %call37, %union.tree_node** %decl, align 8, !dbg !6357
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6360, metadata !DIExpression()), !dbg !6361
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6362
  %call38 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %27), !dbg !6363
  store %union.tree_node* %call38, %union.tree_node** %addr, align 8, !dbg !6361
  call void @llvm.dbg.declare(metadata %union.tree_node** %funtype, metadata !6364, metadata !DIExpression()), !dbg !6365
  %28 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6366
  %common39 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !6366
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !6366
  %29 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !6366
  store %union.tree_node* %29, %union.tree_node** %funtype, align 8, !dbg !6365
  %30 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6367
  %base = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6367
  %31 = bitcast %struct.tree_base* %base to i64*, !dbg !6367
  %bf.load = load i64, i64* %31, align 8, !dbg !6367
  %bf.clear = and i64 %bf.load, 65535, !dbg !6367
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6367
  %cmp41 = icmp eq i32 %bf.cast, 10, !dbg !6367
  br i1 %cmp41, label %if.then49, label %lor.lhs.false, !dbg !6367

lor.lhs.false:                                    ; preds = %sw.bb36
  %32 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6367
  %base43 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6367
  %33 = bitcast %struct.tree_base* %base43 to i64*, !dbg !6367
  %bf.load44 = load i64, i64* %33, align 8, !dbg !6367
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !6367
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !6367
  %cmp47 = icmp eq i32 %bf.cast46, 12, !dbg !6367
  br i1 %cmp47, label %if.then49, label %if.end52, !dbg !6369

if.then49:                                        ; preds = %lor.lhs.false, %sw.bb36
  %34 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6370
  %common50 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !6370
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !6370
  %35 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !6370
  store %union.tree_node* %35, %union.tree_node** %funtype, align 8, !dbg !6371
  br label %if.end52, !dbg !6372

if.end52:                                         ; preds = %if.then49, %lor.lhs.false
  %36 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6373
  %tobool53 = icmp ne %union.tree_node* %36, null, !dbg !6373
  br i1 %tobool53, label %land.lhs.true54, label %if.else60, !dbg !6375

land.lhs.true54:                                  ; preds = %if.end52
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6376
  %function_decl = bitcast %union.tree_node* %37 to %struct.tree_function_decl*, !dbg !6376
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6376
  %bf.load55 = load i32, i32* %built_in_class, align 8, !dbg !6376
  %bf.lshr = lshr i32 %bf.load55, 11, !dbg !6376
  %bf.clear56 = and i32 %bf.lshr, 3, !dbg !6376
  %cmp57 = icmp eq i32 %bf.clear56, 2, !dbg !6377
  br i1 %cmp57, label %if.then59, label %if.else60, !dbg !6378

if.then59:                                        ; preds = %land.lhs.true54
  %38 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6379
  %target_builtin_call_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %38, i32 0, i32 1, !dbg !6380
  %39 = load i32, i32* %target_builtin_call_cost, align 4, !dbg !6380
  store i32 %39, i32* %cost, align 4, !dbg !6381
  br label %if.end61, !dbg !6382

if.else60:                                        ; preds = %land.lhs.true54, %if.end52
  %40 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6383
  %call_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %40, i32 0, i32 0, !dbg !6384
  %41 = load i32, i32* %call_cost, align 4, !dbg !6384
  store i32 %41, i32* %cost, align 4, !dbg !6385
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then59
  %42 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6386
  %tobool62 = icmp ne %union.tree_node* %42, null, !dbg !6386
  br i1 %tobool62, label %land.lhs.true63, label %if.end80, !dbg !6388

land.lhs.true63:                                  ; preds = %if.end61
  %43 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6389
  %function_decl64 = bitcast %union.tree_node* %43 to %struct.tree_function_decl*, !dbg !6389
  %built_in_class65 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl64, i32 0, i32 5, !dbg !6389
  %bf.load66 = load i32, i32* %built_in_class65, align 8, !dbg !6389
  %bf.lshr67 = lshr i32 %bf.load66, 11, !dbg !6389
  %bf.clear68 = and i32 %bf.lshr67, 3, !dbg !6389
  %cmp69 = icmp eq i32 %bf.clear68, 3, !dbg !6390
  br i1 %cmp69, label %if.then71, label %if.end80, !dbg !6391

if.then71:                                        ; preds = %land.lhs.true63
  %44 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6392
  %function_decl72 = bitcast %union.tree_node* %44 to %struct.tree_function_decl*, !dbg !6392
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl72, i32 0, i32 5, !dbg !6392
  %bf.load73 = load i32, i32* %function_code, align 8, !dbg !6392
  %bf.clear74 = and i32 %bf.load73, 2047, !dbg !6392
  switch i32 %bf.clear74, label %sw.default [
    i32 428, label %sw.bb75
    i32 446, label %sw.bb76
    i32 501, label %sw.bb77
    i32 553, label %sw.bb79
    i32 552, label %sw.bb79
    i32 554, label %sw.bb79
  ], !dbg !6393

sw.bb75:                                          ; preds = %if.then71
  store i32 0, i32* %retval, align 4, !dbg !6394
  br label %return, !dbg !6394

sw.bb76:                                          ; preds = %if.then71
  store i32 0, i32* %retval, align 4, !dbg !6396
  br label %return, !dbg !6396

sw.bb77:                                          ; preds = %if.then71
  %45 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6397
  %target_builtin_call_cost78 = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %45, i32 0, i32 1, !dbg !6398
  %46 = load i32, i32* %target_builtin_call_cost78, align 4, !dbg !6398
  store i32 %46, i32* %cost, align 4, !dbg !6399
  br label %sw.epilog, !dbg !6400

sw.bb79:                                          ; preds = %if.then71, %if.then71, %if.then71
  store i32 0, i32* %retval, align 4, !dbg !6401
  br label %return, !dbg !6401

sw.default:                                       ; preds = %if.then71
  br label %sw.epilog, !dbg !6402

sw.epilog:                                        ; preds = %sw.default, %sw.bb77
  br label %if.end80, !dbg !6403

if.end80:                                         ; preds = %sw.epilog, %land.lhs.true63, %if.end61
  %47 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6404
  %tobool81 = icmp ne %union.tree_node* %47, null, !dbg !6404
  br i1 %tobool81, label %if.then82, label %if.end85, !dbg !6406

if.then82:                                        ; preds = %if.end80
  %48 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6407
  %common83 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !6407
  %type84 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common83, i32 0, i32 2, !dbg !6407
  %49 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !6407
  store %union.tree_node* %49, %union.tree_node** %funtype, align 8, !dbg !6408
  br label %if.end85, !dbg !6409

if.end85:                                         ; preds = %if.then82, %if.end80
  %50 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6410
  %common86 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !6410
  %type87 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common86, i32 0, i32 2, !dbg !6410
  %51 = load %union.tree_node*, %union.tree_node** %type87, align 8, !dbg !6410
  %base88 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6410
  %52 = bitcast %struct.tree_base* %base88 to i64*, !dbg !6410
  %bf.load89 = load i64, i64* %52, align 8, !dbg !6410
  %bf.clear90 = and i64 %bf.load89, 65535, !dbg !6410
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !6410
  %cmp92 = icmp eq i32 %bf.cast91, 19, !dbg !6410
  br i1 %cmp92, label %if.end99, label %if.then94, !dbg !6412

if.then94:                                        ; preds = %if.end85
  %53 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6413
  %common95 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !6413
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !6413
  %54 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !6413
  %call97 = call i32 @estimate_move_cost(%union.tree_node* %54), !dbg !6414
  %55 = load i32, i32* %cost, align 4, !dbg !6415
  %add98 = add i32 %55, %call97, !dbg !6415
  store i32 %add98, i32* %cost, align 4, !dbg !6415
  br label %if.end99, !dbg !6416

if.end99:                                         ; preds = %if.then94, %if.end85
  %56 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6417
  %tobool100 = icmp ne %union.tree_node* %56, null, !dbg !6417
  br i1 %tobool100, label %land.lhs.true101, label %if.else122, !dbg !6419

land.lhs.true101:                                 ; preds = %if.end99
  %57 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6420
  %decl_non_common = bitcast %union.tree_node* %57 to %struct.tree_decl_non_common*, !dbg !6420
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !6420
  %58 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6420
  %tobool102 = icmp ne %union.tree_node* %58, null, !dbg !6420
  br i1 %tobool102, label %if.then103, label %if.else122, !dbg !6421

if.then103:                                       ; preds = %land.lhs.true101
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6422, metadata !DIExpression()), !dbg !6424
  %59 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6425
  %decl_non_common104 = bitcast %union.tree_node* %59 to %struct.tree_decl_non_common*, !dbg !6425
  %arguments105 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common104, i32 0, i32 2, !dbg !6425
  %60 = load %union.tree_node*, %union.tree_node** %arguments105, align 8, !dbg !6425
  store %union.tree_node* %60, %union.tree_node** %arg, align 8, !dbg !6427
  br label %for.cond, !dbg !6428

for.cond:                                         ; preds = %for.inc, %if.then103
  %61 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6429
  %tobool106 = icmp ne %union.tree_node* %61, null, !dbg !6431
  br i1 %tobool106, label %for.body, label %for.end, !dbg !6431

for.body:                                         ; preds = %for.cond
  %62 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6432
  %common107 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !6432
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !6432
  %63 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !6432
  %base109 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !6432
  %64 = bitcast %struct.tree_base* %base109 to i64*, !dbg !6432
  %bf.load110 = load i64, i64* %64, align 8, !dbg !6432
  %bf.clear111 = and i64 %bf.load110, 65535, !dbg !6432
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !6432
  %cmp113 = icmp eq i32 %bf.cast112, 19, !dbg !6432
  br i1 %cmp113, label %if.end120, label %if.then115, !dbg !6434

if.then115:                                       ; preds = %for.body
  %65 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6435
  %common116 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !6435
  %type117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2, !dbg !6435
  %66 = load %union.tree_node*, %union.tree_node** %type117, align 8, !dbg !6435
  %call118 = call i32 @estimate_move_cost(%union.tree_node* %66), !dbg !6436
  %67 = load i32, i32* %cost, align 4, !dbg !6437
  %add119 = add i32 %67, %call118, !dbg !6437
  store i32 %add119, i32* %cost, align 4, !dbg !6437
  br label %if.end120, !dbg !6438

if.end120:                                        ; preds = %if.then115, %for.body
  br label %for.inc, !dbg !6432

for.inc:                                          ; preds = %if.end120
  %68 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6439
  %common121 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !6439
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 1, !dbg !6439
  %69 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6439
  store %union.tree_node* %69, %union.tree_node** %arg, align 8, !dbg !6440
  br label %for.cond, !dbg !6441, !llvm.loop !6442

for.end:                                          ; preds = %for.cond
  br label %if.end176, !dbg !6444

if.else122:                                       ; preds = %land.lhs.true101, %if.end99
  %70 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6445
  %tobool123 = icmp ne %union.tree_node* %70, null, !dbg !6445
  br i1 %tobool123, label %land.lhs.true124, label %if.else151, !dbg !6447

land.lhs.true124:                                 ; preds = %if.else122
  %71 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6448
  %call125 = call zeroext i8 @prototype_p(%union.tree_node* %71), !dbg !6449
  %conv126 = zext i8 %call125 to i32, !dbg !6449
  %tobool127 = icmp ne i32 %conv126, 0, !dbg !6449
  br i1 %tobool127, label %if.then128, label %if.else151, !dbg !6450

if.then128:                                       ; preds = %land.lhs.true124
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6451, metadata !DIExpression()), !dbg !6453
  %72 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !6454
  %type129 = bitcast %union.tree_node* %72 to %struct.tree_type*, !dbg !6454
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type129, i32 0, i32 1, !dbg !6454
  %73 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6454
  store %union.tree_node* %73, %union.tree_node** %t, align 8, !dbg !6456
  br label %for.cond130, !dbg !6457

for.cond130:                                      ; preds = %for.inc147, %if.then128
  %74 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6458
  %tobool131 = icmp ne %union.tree_node* %74, null, !dbg !6458
  br i1 %tobool131, label %land.rhs, label %land.end, !dbg !6460

land.rhs:                                         ; preds = %for.cond130
  %75 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6461
  %76 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 55), align 8, !dbg !6462
  %cmp132 = icmp ne %union.tree_node* %75, %76, !dbg !6463
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond130
  %77 = phi i1 [ false, %for.cond130 ], [ %cmp132, %land.rhs ], !dbg !6464
  br i1 %77, label %for.body134, label %for.end150, !dbg !6465

for.body134:                                      ; preds = %land.end
  %78 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6466
  %list = bitcast %union.tree_node* %78 to %struct.tree_list*, !dbg !6466
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6466
  %79 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6466
  %base135 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !6466
  %80 = bitcast %struct.tree_base* %base135 to i64*, !dbg !6466
  %bf.load136 = load i64, i64* %80, align 8, !dbg !6466
  %bf.clear137 = and i64 %bf.load136, 65535, !dbg !6466
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !6466
  %cmp139 = icmp eq i32 %bf.cast138, 19, !dbg !6466
  br i1 %cmp139, label %if.end146, label %if.then141, !dbg !6468

if.then141:                                       ; preds = %for.body134
  %81 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6469
  %list142 = bitcast %union.tree_node* %81 to %struct.tree_list*, !dbg !6469
  %value143 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list142, i32 0, i32 2, !dbg !6469
  %82 = load %union.tree_node*, %union.tree_node** %value143, align 8, !dbg !6469
  %call144 = call i32 @estimate_move_cost(%union.tree_node* %82), !dbg !6470
  %83 = load i32, i32* %cost, align 4, !dbg !6471
  %add145 = add i32 %83, %call144, !dbg !6471
  store i32 %add145, i32* %cost, align 4, !dbg !6471
  br label %if.end146, !dbg !6472

if.end146:                                        ; preds = %if.then141, %for.body134
  br label %for.inc147, !dbg !6466

for.inc147:                                       ; preds = %if.end146
  %84 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6473
  %common148 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !6473
  %chain149 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common148, i32 0, i32 1, !dbg !6473
  %85 = load %union.tree_node*, %union.tree_node** %chain149, align 8, !dbg !6473
  store %union.tree_node* %85, %union.tree_node** %t, align 8, !dbg !6474
  br label %for.cond130, !dbg !6475, !llvm.loop !6476

for.end150:                                       ; preds = %land.end
  br label %if.end175, !dbg !6478

if.else151:                                       ; preds = %land.lhs.true124, %if.else122
  store i32 0, i32* %i, align 4, !dbg !6479
  br label %for.cond152, !dbg !6482

for.cond152:                                      ; preds = %for.inc173, %if.else151
  %86 = load i32, i32* %i, align 4, !dbg !6483
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6485
  %call153 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %87), !dbg !6486
  %cmp154 = icmp ult i32 %86, %call153, !dbg !6487
  br i1 %cmp154, label %for.body156, label %for.end174, !dbg !6488

for.body156:                                      ; preds = %for.cond152
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg157, metadata !6489, metadata !DIExpression()), !dbg !6491
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6492
  %89 = load i32, i32* %i, align 4, !dbg !6493
  %call158 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %88, i32 %89), !dbg !6494
  store %union.tree_node* %call158, %union.tree_node** %arg157, align 8, !dbg !6491
  %90 = load %union.tree_node*, %union.tree_node** %arg157, align 8, !dbg !6495
  %common159 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !6495
  %type160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 2, !dbg !6495
  %91 = load %union.tree_node*, %union.tree_node** %type160, align 8, !dbg !6495
  %base161 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !6495
  %92 = bitcast %struct.tree_base* %base161 to i64*, !dbg !6495
  %bf.load162 = load i64, i64* %92, align 8, !dbg !6495
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !6495
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !6495
  %cmp165 = icmp eq i32 %bf.cast164, 19, !dbg !6495
  br i1 %cmp165, label %if.end172, label %if.then167, !dbg !6497

if.then167:                                       ; preds = %for.body156
  %93 = load %union.tree_node*, %union.tree_node** %arg157, align 8, !dbg !6498
  %common168 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !6498
  %type169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2, !dbg !6498
  %94 = load %union.tree_node*, %union.tree_node** %type169, align 8, !dbg !6498
  %call170 = call i32 @estimate_move_cost(%union.tree_node* %94), !dbg !6499
  %95 = load i32, i32* %cost, align 4, !dbg !6500
  %add171 = add i32 %95, %call170, !dbg !6500
  store i32 %add171, i32* %cost, align 4, !dbg !6500
  br label %if.end172, !dbg !6501

if.end172:                                        ; preds = %if.then167, %for.body156
  br label %for.inc173, !dbg !6502

for.inc173:                                       ; preds = %if.end172
  %96 = load i32, i32* %i, align 4, !dbg !6503
  %inc = add i32 %96, 1, !dbg !6503
  store i32 %inc, i32* %i, align 4, !dbg !6503
  br label %for.cond152, !dbg !6504, !llvm.loop !6505

for.end174:                                       ; preds = %for.cond152
  br label %if.end175

if.end175:                                        ; preds = %for.end174, %for.end150
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %for.end
  br label %sw.epilog214, !dbg !6507

sw.bb177:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !6508
  br label %return, !dbg !6508

sw.bb178:                                         ; preds = %entry
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6509
  %call179 = call i8* @gimple_asm_string(%union.gimple_statement_d* %97), !dbg !6510
  %call180 = call i32 @asm_str_count(i8* %call179), !dbg !6511
  store i32 %call180, i32* %retval, align 4, !dbg !6512
  br label %return, !dbg !6512

sw.bb181:                                         ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !6513
  br label %return, !dbg !6513

sw.bb182:                                         ; preds = %entry
  store i32 10, i32* %retval, align 4, !dbg !6514
  br label %return, !dbg !6514

sw.bb183:                                         ; preds = %entry
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6515
  %call184 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %98), !dbg !6516
  %99 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6517
  %call185 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call184, %struct.eni_weights_d* %99), !dbg !6518
  store i32 %call185, i32* %retval, align 4, !dbg !6519
  br label %return, !dbg !6519

sw.bb186:                                         ; preds = %entry
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6520
  %call187 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %100), !dbg !6521
  %101 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6522
  %call188 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call187, %struct.eni_weights_d* %101), !dbg !6523
  store i32 %call188, i32* %retval, align 4, !dbg !6524
  br label %return, !dbg !6524

sw.bb189:                                         ; preds = %entry
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6525
  %call190 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %102), !dbg !6526
  %103 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6527
  %call191 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call190, %struct.eni_weights_d* %103), !dbg !6528
  store i32 %call191, i32* %retval, align 4, !dbg !6529
  br label %return, !dbg !6529

sw.bb192:                                         ; preds = %entry
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6530
  %call193 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %104), !dbg !6531
  %105 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6532
  %call194 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call193, %struct.eni_weights_d* %105), !dbg !6533
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6534
  %call195 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %106), !dbg !6535
  %107 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6536
  %call196 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call195, %struct.eni_weights_d* %107), !dbg !6537
  %add197 = add nsw i32 %call194, %call196, !dbg !6538
  store i32 %add197, i32* %retval, align 4, !dbg !6539
  br label %return, !dbg !6539

sw.bb198:                                         ; preds = %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !6540
  br label %return, !dbg !6540

sw.bb199:                                         ; preds = %entry
  %108 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6541
  %omp_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %108, i32 0, i32 3, !dbg !6542
  %109 = load i32, i32* %omp_cost, align 4, !dbg !6542
  store i32 %109, i32* %retval, align 4, !dbg !6543
  br label %return, !dbg !6543

sw.bb200:                                         ; preds = %entry
  %110 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6544
  %omp_cost201 = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %110, i32 0, i32 3, !dbg !6545
  %111 = load i32, i32* %omp_cost201, align 4, !dbg !6545
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6546
  %call202 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %112), !dbg !6547
  %113 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6548
  %call203 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call202, %struct.eni_weights_d* %113), !dbg !6549
  %add204 = add i32 %111, %call203, !dbg !6550
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6551
  %call205 = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %114), !dbg !6552
  %115 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6553
  %call206 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call205, %struct.eni_weights_d* %115), !dbg !6554
  %add207 = add i32 %add204, %call206, !dbg !6555
  store i32 %add207, i32* %retval, align 4, !dbg !6556
  br label %return, !dbg !6556

sw.bb208:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %116 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6557
  %omp_cost209 = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %116, i32 0, i32 3, !dbg !6558
  %117 = load i32, i32* %omp_cost209, align 4, !dbg !6558
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6559
  %call210 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %118), !dbg !6560
  %119 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6561
  %call211 = call i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call210, %struct.eni_weights_d* %119), !dbg !6562
  %add212 = add i32 %117, %call211, !dbg !6563
  store i32 %add212, i32* %retval, align 4, !dbg !6564
  br label %return, !dbg !6564

sw.default213:                                    ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3378, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6565
  br label %sw.epilog214, !dbg !6566

sw.epilog214:                                     ; preds = %sw.default213, %if.end176, %if.end35, %sw.bb21, %cond.end
  %120 = load i32, i32* %cost, align 4, !dbg !6567
  store i32 %120, i32* %retval, align 4, !dbg !6568
  br label %return, !dbg !6568

return:                                           ; preds = %sw.epilog214, %sw.bb208, %sw.bb200, %sw.bb199, %sw.bb198, %sw.bb192, %sw.bb189, %sw.bb186, %sw.bb183, %sw.bb182, %sw.bb181, %sw.bb178, %sw.bb177, %sw.bb79, %sw.bb76, %sw.bb75
  %121 = load i32, i32* %retval, align 4, !dbg !6569
  ret i32 %121, !dbg !6569
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6570 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6574, metadata !DIExpression()), !dbg !6575
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6576
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6577
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6578
  %bf.load = load i32, i32* %1, align 8, !dbg !6578
  %bf.clear = and i32 %bf.load, 255, !dbg !6578
  ret i32 %bf.clear, !dbg !6579
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6580 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6583, metadata !DIExpression()), !dbg !6584
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6585
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6586
  ret %union.tree_node* %call, !dbg !6587
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6588 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6589, metadata !DIExpression()), !dbg !6590
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6591
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6592
  ret %union.tree_node* %call, !dbg !6593
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @estimate_operator_cost(i32 %code, %struct.eni_weights_d* %weights, %union.tree_node* %op1, %union.tree_node* %op2) #0 !dbg !6594 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %weights.addr = alloca %struct.eni_weights_d*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op2.addr = alloca %union.tree_node*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6597, metadata !DIExpression()), !dbg !6598
  store %struct.eni_weights_d* %weights, %struct.eni_weights_d** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eni_weights_d** %weights.addr, metadata !6599, metadata !DIExpression()), !dbg !6600
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !6601, metadata !DIExpression()), !dbg !6602
  store %union.tree_node* %op2, %union.tree_node** %op2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2.addr, metadata !6603, metadata !DIExpression()), !dbg !6604
  %0 = load i32, i32* %code.addr, align 4, !dbg !6605
  switch i32 %0, label %sw.default [
    i32 111, label %sw.bb
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 123, label %sw.bb
    i32 112, label %sw.bb
    i32 56, label %sw.bb1
    i32 57, label %sw.bb1
    i32 63, label %sw.bb1
    i32 66, label %sw.bb1
    i32 64, label %sw.bb1
    i32 65, label %sw.bb1
    i32 114, label %sw.bb1
    i32 115, label %sw.bb1
    i32 77, label %sw.bb1
    i32 79, label %sw.bb1
    i32 78, label %sw.bb1
    i32 80, label %sw.bb1
    i32 81, label %sw.bb1
    i32 82, label %sw.bb1
    i32 83, label %sw.bb1
    i32 84, label %sw.bb1
    i32 85, label %sw.bb1
    i32 86, label %sw.bb1
    i32 170, label %sw.bb1
    i32 171, label %sw.bb1
    i32 87, label %sw.bb1
    i32 88, label %sw.bb1
    i32 89, label %sw.bb1
    i32 90, label %sw.bb1
    i32 91, label %sw.bb1
    i32 92, label %sw.bb1
    i32 93, label %sw.bb1
    i32 94, label %sw.bb1
    i32 95, label %sw.bb1
    i32 96, label %sw.bb1
    i32 97, label %sw.bb1
    i32 98, label %sw.bb1
    i32 99, label %sw.bb1
    i32 100, label %sw.bb1
    i32 101, label %sw.bb1
    i32 102, label %sw.bb1
    i32 104, label %sw.bb1
    i32 103, label %sw.bb1
    i32 105, label %sw.bb1
    i32 106, label %sw.bb1
    i32 107, label %sw.bb1
    i32 108, label %sw.bb1
    i32 109, label %sw.bb1
    i32 110, label %sw.bb1
    i32 124, label %sw.bb1
    i32 125, label %sw.bb1
    i32 126, label %sw.bb1
    i32 127, label %sw.bb1
    i32 128, label %sw.bb1
    i32 151, label %sw.bb1
    i32 164, label %sw.bb1
    i32 165, label %sw.bb1
    i32 166, label %sw.bb1
    i32 168, label %sw.bb1
    i32 169, label %sw.bb1
    i32 167, label %sw.bb1
    i32 172, label %sw.bb1
    i32 173, label %sw.bb1
    i32 174, label %sw.bb1
    i32 175, label %sw.bb1
    i32 176, label %sw.bb1
    i32 177, label %sw.bb1
    i32 178, label %sw.bb1
    i32 179, label %sw.bb1
    i32 180, label %sw.bb1
    i32 181, label %sw.bb1
    i32 182, label %sw.bb1
    i32 183, label %sw.bb1
    i32 184, label %sw.bb1
    i32 67, label %sw.bb2
    i32 68, label %sw.bb2
    i32 69, label %sw.bb2
    i32 70, label %sw.bb2
    i32 76, label %sw.bb2
    i32 71, label %sw.bb2
    i32 72, label %sw.bb2
    i32 73, label %sw.bb2
    i32 74, label %sw.bb2
    i32 75, label %sw.bb2
  ], !dbg !6606

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
  store i32 0, i32* %retval, align 4, !dbg !6607
  br label %return, !dbg !6607

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 1, i32* %retval, align 4, !dbg !6609
  br label %return, !dbg !6609

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %1 = load %union.tree_node*, %union.tree_node** %op2.addr, align 8, !dbg !6610
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6610
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6610
  %bf.load = load i64, i64* %2, align 8, !dbg !6610
  %bf.clear = and i64 %bf.load, 65535, !dbg !6610
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6610
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !6612
  br i1 %cmp, label %if.then, label %if.end, !dbg !6613

if.then:                                          ; preds = %sw.bb2
  %3 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6614
  %div_mod_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %3, i32 0, i32 2, !dbg !6615
  %4 = load i32, i32* %div_mod_cost, align 4, !dbg !6615
  store i32 %4, i32* %retval, align 4, !dbg !6616
  br label %return, !dbg !6616

if.end:                                           ; preds = %sw.bb2
  store i32 1, i32* %retval, align 4, !dbg !6617
  br label %return, !dbg !6617

sw.default:                                       ; preds = %entry
  %5 = load i32, i32* %code.addr, align 4, !dbg !6618
  %call = call i32 @get_gimple_rhs_class(i32 %5), !dbg !6618
  %cmp3 = icmp eq i32 %call, 3, !dbg !6618
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !6618

cond.true:                                        ; preds = %sw.default
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6618
  br label %cond.end, !dbg !6618

cond.false:                                       ; preds = %sw.default
  br label %cond.end, !dbg !6618

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6618
  store i32 0, i32* %retval, align 4, !dbg !6619
  br label %return, !dbg !6619

return:                                           ; preds = %cond.end, %if.end, %if.then, %sw.bb1, %sw.bb
  %6 = load i32, i32* %retval, align 4, !dbg !6620
  ret i32 %6, !dbg !6620
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6621 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6624, metadata !DIExpression()), !dbg !6625
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6626, metadata !DIExpression()), !dbg !6627
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6628
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6629
  store i32 %call, i32* %code, align 4, !dbg !6630
  %1 = load i32, i32* %code, align 4, !dbg !6631
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6633
  %cmp = icmp eq i32 %call1, 3, !dbg !6634
  br i1 %cmp, label %if.then, label %if.end, !dbg !6635

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6636
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6636
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6636
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6636
  %bf.load = load i64, i64* %3, align 8, !dbg !6636
  %bf.clear = and i64 %bf.load, 65535, !dbg !6636
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6636
  store i32 %bf.cast, i32* %code, align 4, !dbg !6637
  br label %if.end, !dbg !6638

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6639
  ret i32 %4, !dbg !6640
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6641 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6644, metadata !DIExpression()), !dbg !6645
  %0 = load i32, i32* %code.addr, align 4, !dbg !6646
  %idxprom = sext i32 %0 to i64, !dbg !6647
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6647
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6647
  %conv = zext i8 %1 to i32, !dbg !6648
  ret i32 %conv, !dbg !6649
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6650 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6651, metadata !DIExpression()), !dbg !6652
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6653
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6655
  %cmp = icmp uge i32 %call, 3, !dbg !6656
  br i1 %cmp, label %if.then, label %if.else, !dbg !6657

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6658
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6659
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6660
  br label %return, !dbg !6660

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6661
  br label %return, !dbg !6661

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6662
  ret %union.tree_node* %2, !dbg !6662
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !6663 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6664, metadata !DIExpression()), !dbg !6665
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6666
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6667
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6668
  %bf.load = load i32, i32* %1, align 8, !dbg !6668
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6668
  ret i32 %bf.lshr, !dbg !6669
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6670 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6673, metadata !DIExpression()), !dbg !6674
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6677
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6679
  %tobool = icmp ne i8 %call, 0, !dbg !6679
  br i1 %tobool, label %if.then, label %if.else, !dbg !6680

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6681
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6683
  %2 = load i32, i32* %i.addr, align 4, !dbg !6684
  %idxprom = zext i32 %2 to i64, !dbg !6683
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6683
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6683
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6685
  br label %return, !dbg !6685

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6686
  br label %return, !dbg !6686

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6687
  ret %union.tree_node* %4, !dbg !6687
}

declare dso_local i32 @floor_log2(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_switch_num_labels(%union.gimple_statement_d* %gs) #0 !dbg !6688 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6691, metadata !DIExpression()), !dbg !6692
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6693, metadata !DIExpression()), !dbg !6694
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6695
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6696
  store i32 %call, i32* %num_ops, align 4, !dbg !6697
  %1 = load i32, i32* %num_ops, align 4, !dbg !6698
  %cmp = icmp ugt i32 %1, 1, !dbg !6698
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6698

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6698
  br label %cond.end, !dbg !6698

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6698

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6698
  %2 = load i32, i32* %num_ops, align 4, !dbg !6699
  %sub = sub i32 %2, 1, !dbg !6700
  ret i32 %sub, !dbg !6701
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6702 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6703, metadata !DIExpression()), !dbg !6704
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6705, metadata !DIExpression()), !dbg !6706
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6707
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6708
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6706
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6709
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6709
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6709
  %bf.load = load i64, i64* %2, align 8, !dbg !6709
  %bf.clear = and i64 %bf.load, 65535, !dbg !6709
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6709
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6711
  br i1 %cmp, label %if.then, label %if.end, !dbg !6712

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6713
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6713
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6713
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6713
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6713
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6714
  br label %return, !dbg !6714

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6715
  br label %return, !dbg !6715

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6716
  ret %union.tree_node* %5, !dbg !6716
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6717 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6718, metadata !DIExpression()), !dbg !6719
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6720
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6721
  ret %union.tree_node* %call, !dbg !6722
}

declare dso_local zeroext i8 @prototype_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6723 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6724, metadata !DIExpression()), !dbg !6725
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6726, metadata !DIExpression()), !dbg !6727
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6728
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6729
  store i32 %call, i32* %num_ops, align 4, !dbg !6730
  %1 = load i32, i32* %num_ops, align 4, !dbg !6731
  %sub = sub i32 %1, 3, !dbg !6732
  ret i32 %sub, !dbg !6733
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6734 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6735, metadata !DIExpression()), !dbg !6736
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6737, metadata !DIExpression()), !dbg !6738
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6739
  %1 = load i32, i32* %index.addr, align 4, !dbg !6740
  %add = add i32 %1, 3, !dbg !6741
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !6742
  ret %union.tree_node* %call, !dbg !6743
}

declare dso_local i32 @asm_str_count(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @gimple_asm_string(%union.gimple_statement_d* %gs) #0 !dbg !6744 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6747, metadata !DIExpression()), !dbg !6748
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6749
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !6750
  %string = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 1, !dbg !6751
  %1 = load i8*, i8** %string, align 8, !dbg !6751
  ret i8* %1, !dbg !6752
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %stmts, %struct.eni_weights_d* %weights) #0 !dbg !6753 {
entry:
  %stmts.addr = alloca %struct.gimple_seq_d*, align 8
  %weights.addr = alloca %struct.eni_weights_d*, align 8
  %cost = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %stmts, %struct.gimple_seq_d** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts.addr, metadata !6756, metadata !DIExpression()), !dbg !6757
  store %struct.eni_weights_d* %weights, %struct.eni_weights_d** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eni_weights_d** %weights.addr, metadata !6758, metadata !DIExpression()), !dbg !6759
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !6760, metadata !DIExpression()), !dbg !6761
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6762, metadata !DIExpression()), !dbg !6763
  store i32 0, i32* %cost, align 4, !dbg !6764
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts.addr, align 8, !dbg !6765
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !6767
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6767
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6767
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6767
  br label %for.cond, !dbg !6768

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6769
  %tobool = icmp ne i8 %call, 0, !dbg !6771
  %lnot = xor i1 %tobool, true, !dbg !6771
  br i1 %lnot, label %for.body, label %for.end, !dbg !6772

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6773
  %3 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6774
  %call2 = call i32 @estimate_num_insns(%union.gimple_statement_d* %call1, %struct.eni_weights_d* %3), !dbg !6775
  %4 = load i32, i32* %cost, align 4, !dbg !6776
  %add = add nsw i32 %4, %call2, !dbg !6776
  store i32 %add, i32* %cost, align 4, !dbg !6776
  br label %for.inc, !dbg !6777

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6778
  br label %for.cond, !dbg !6779, !llvm.loop !6780

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %cost, align 4, !dbg !6782
  ret i32 %5, !dbg !6783
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) #0 !dbg !6784 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6787, metadata !DIExpression()), !dbg !6788
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6789
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !6790
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !6791
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6791
  ret %struct.gimple_seq_d* %1, !dbg !6792
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %gs) #0 !dbg !6793 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6794, metadata !DIExpression()), !dbg !6795
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6796
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !6797
  %failure = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 2, !dbg !6798
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure, align 8, !dbg !6798
  ret %struct.gimple_seq_d* %1, !dbg !6799
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %gs) #0 !dbg !6800 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6801, metadata !DIExpression()), !dbg !6802
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6803
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !6804
  %handler = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 2, !dbg !6805
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !6805
  ret %struct.gimple_seq_d* %1, !dbg !6806
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %gs) #0 !dbg !6807 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6808, metadata !DIExpression()), !dbg !6809
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6810
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !6811
  %eval = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 1, !dbg !6812
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval, align 8, !dbg !6812
  ret %struct.gimple_seq_d* %1, !dbg !6813
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !6814 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6815, metadata !DIExpression()), !dbg !6816
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6817
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !6818
  %cleanup = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 2, !dbg !6819
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !6819
  ret %struct.gimple_seq_d* %1, !dbg !6820
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %gs) #0 !dbg !6821 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6822, metadata !DIExpression()), !dbg !6823
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6824
  %omp = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp*, !dbg !6825
  %body = getelementptr inbounds %struct.gimple_statement_omp, %struct.gimple_statement_omp* %omp, i32 0, i32 1, !dbg !6826
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6826
  ret %struct.gimple_seq_d* %1, !dbg !6827
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %gs) #0 !dbg !6828 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6829, metadata !DIExpression()), !dbg !6830
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6831
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !6832
  %pre_body = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 4, !dbg !6833
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body, align 8, !dbg !6833
  ret %struct.gimple_seq_d* %1, !dbg !6834
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @estimate_num_insns_fn(%union.tree_node* %fndecl, %struct.eni_weights_d* %weights) #0 !dbg !6835 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %weights.addr = alloca %struct.eni_weights_d*, align 8
  %my_function = alloca %struct.function*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %n = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6838, metadata !DIExpression()), !dbg !6839
  store %struct.eni_weights_d* %weights, %struct.eni_weights_d** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eni_weights_d** %weights.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  call void @llvm.dbg.declare(metadata %struct.function** %my_function, metadata !6842, metadata !DIExpression()), !dbg !6843
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6844
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !6844
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6844
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !6844
  store %struct.function* %1, %struct.function** %my_function, align 8, !dbg !6843
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6845, metadata !DIExpression()), !dbg !6846
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6847, metadata !DIExpression()), !dbg !6848
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6849, metadata !DIExpression()), !dbg !6850
  store i32 0, i32* %n, align 4, !dbg !6850
  %2 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !6851
  %tobool = icmp ne %struct.function* %2, null, !dbg !6851
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6851

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !6851
  %cfg = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1, !dbg !6851
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6851
  %tobool1 = icmp ne %struct.control_flow_graph* %4, null, !dbg !6851
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6851

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3396, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6851
  br label %cond.end, !dbg !6851

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6851

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6851
  %5 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !6852
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1, !dbg !6852
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6852
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !6852
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6852
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !6852
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6852
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !6852
  br label %for.cond, !dbg !6852

for.cond:                                         ; preds = %for.inc9, %cond.end
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6854
  %10 = load %struct.function*, %struct.function** %my_function, align 8, !dbg !6854
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1, !dbg !6854
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !6854
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !6854
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6854
  %cmp = icmp ne %struct.basic_block_def* %9, %12, !dbg !6854
  br i1 %cmp, label %for.body, label %for.end11, !dbg !6852

for.body:                                         ; preds = %for.cond
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6856
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !6859
  %14 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6859
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6859
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !6859
  br label %for.cond4, !dbg !6860

for.cond4:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6861
  %tobool5 = icmp ne i8 %call, 0, !dbg !6863
  %lnot = xor i1 %tobool5, true, !dbg !6863
  br i1 %lnot, label %for.body6, label %for.end, !dbg !6864

for.body6:                                        ; preds = %for.cond4
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6865
  %16 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6866
  %call8 = call i32 @estimate_num_insns(%union.gimple_statement_d* %call7, %struct.eni_weights_d* %16), !dbg !6867
  %17 = load i32, i32* %n, align 4, !dbg !6868
  %add = add nsw i32 %17, %call8, !dbg !6868
  store i32 %add, i32* %n, align 4, !dbg !6868
  br label %for.inc, !dbg !6869

for.inc:                                          ; preds = %for.body6
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !6870
  br label %for.cond4, !dbg !6871, !llvm.loop !6872

for.end:                                          ; preds = %for.cond4
  br label %for.inc9, !dbg !6874

for.inc9:                                         ; preds = %for.end
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6854
  %next_bb10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !6854
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb10, align 8, !dbg !6854
  store %struct.basic_block_def* %19, %struct.basic_block_def** %bb, align 8, !dbg !6854
  br label %for.cond, !dbg !6854, !llvm.loop !6875

for.end11:                                        ; preds = %for.cond
  %20 = load i32, i32* %n, align 4, !dbg !6877
  ret i32 %20, !dbg !6878
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6879 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6882, metadata !DIExpression()), !dbg !6883
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6884, metadata !DIExpression()), !dbg !6885
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6886, metadata !DIExpression()), !dbg !6887
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6888
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6889
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6890
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6891
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6892
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6893
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6894
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6895
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6896
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6897
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6898
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6899
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6900
  ret void, !dbg !6901
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_inline_once() #0 !dbg !6902 {
entry:
  store i32 1, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i32 0, i32 0), align 4, !dbg !6903
  store i32 1, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i32 0, i32 1), align 4, !dbg !6904
  store i32 1, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i32 0, i32 2), align 4, !dbg !6905
  store i32 40, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i32 0, i32 3), align 4, !dbg !6906
  store i8 0, i8* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i32 0, i32 4), align 4, !dbg !6907
  store i32 10, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i32 0, i32 0), align 4, !dbg !6908
  store i32 10, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i32 0, i32 1), align 4, !dbg !6909
  store i32 10, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i32 0, i32 2), align 4, !dbg !6910
  store i32 40, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i32 0, i32 3), align 4, !dbg !6911
  store i8 1, i8* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i32 0, i32 4), align 4, !dbg !6912
  ret void, !dbg !6913
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @count_insns_seq(%struct.gimple_seq_d* %seq, %struct.eni_weights_d* %weights) #0 !dbg !6914 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %weights.addr = alloca %struct.eni_weights_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %n = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !6915, metadata !DIExpression()), !dbg !6916
  store %struct.eni_weights_d* %weights, %struct.eni_weights_d** %weights.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eni_weights_d** %weights.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6919, metadata !DIExpression()), !dbg !6920
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6921, metadata !DIExpression()), !dbg !6922
  store i32 0, i32* %n, align 4, !dbg !6922
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !6923
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !6925
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6925
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6925
  br label %for.cond, !dbg !6926

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6927
  %tobool = icmp ne i8 %call, 0, !dbg !6929
  %lnot = xor i1 %tobool, true, !dbg !6929
  br i1 %lnot, label %for.body, label %for.end, !dbg !6930

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6931
  %3 = load %struct.eni_weights_d*, %struct.eni_weights_d** %weights.addr, align 8, !dbg !6932
  %call2 = call i32 @estimate_num_insns(%union.gimple_statement_d* %call1, %struct.eni_weights_d* %3), !dbg !6933
  %4 = load i32, i32* %n, align 4, !dbg !6934
  %add = add nsw i32 %4, %call2, !dbg !6934
  store i32 %add, i32* %n, align 4, !dbg !6934
  br label %for.inc, !dbg !6935

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6936
  br label %for.cond, !dbg !6937, !llvm.loop !6938

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* %n, align 4, !dbg !6940
  ret i32 %5, !dbg !6941
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @optimize_inline_calls(%union.tree_node* %fn) #0 !dbg !6942 {
entry:
  %retval = alloca i32, align 4
  %fn.addr = alloca %union.tree_node*, align 8
  %id = alloca %struct.copy_body_data, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %last = alloca i32, align 4
  %gctx = alloca %struct.gimplify_ctx, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !6945, metadata !DIExpression()), !dbg !6946
  call void @llvm.dbg.declare(metadata %struct.copy_body_data* %id, metadata !6947, metadata !DIExpression()), !dbg !6948
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6949, metadata !DIExpression()), !dbg !6950
  call void @llvm.dbg.declare(metadata i32* %last, metadata !6951, metadata !DIExpression()), !dbg !6952
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6953
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6953
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6953
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6953
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !6953
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !6953
  store i32 %2, i32* %last, align 4, !dbg !6952
  call void @llvm.dbg.declare(metadata %struct.gimplify_ctx* %gctx, metadata !6954, metadata !DIExpression()), !dbg !6970
  %3 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !6971
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %3, i32 0, i32 1, !dbg !6971
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !6971
  %4 = load i32, i32* %arrayidx, align 8, !dbg !6971
  %tobool = icmp ne i32 %4, 0, !dbg !6971
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6973

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !6974
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %5, i32 0, i32 1, !dbg !6974
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 5, !dbg !6974
  %6 = load i32, i32* %arrayidx2, align 4, !dbg !6974
  %tobool3 = icmp ne i32 %6, 0, !dbg !6974
  br i1 %tobool3, label %if.then, label %if.end, !dbg !6975

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !6976
  br label %return, !dbg !6976

if.end:                                           ; preds = %lor.lhs.false
  %7 = bitcast %struct.copy_body_data* %id to i8*, !dbg !6977
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 152, i1 false), !dbg !6977
  %8 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6978
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %8), !dbg !6979
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 3, !dbg !6980
  store %struct.cgraph_node* %call, %struct.cgraph_node** %dst_node, align 8, !dbg !6981
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 2, !dbg !6982
  store %struct.cgraph_node* %call, %struct.cgraph_node** %src_node, align 8, !dbg !6983
  %9 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6984
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !6985
  store %union.tree_node* %9, %union.tree_node** %dst_fn, align 8, !dbg !6986
  %10 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6987
  %tobool4 = icmp ne %union.tree_node* %10, null, !dbg !6987
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !6989

if.then5:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6990
  %dst_fn6 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !6991
  store %union.tree_node* %11, %union.tree_node** %dst_fn6, align 8, !dbg !6992
  br label %if.end7, !dbg !6993

if.end7:                                          ; preds = %if.then5, %if.end
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 7, !dbg !6994
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_maybe_to_var, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !6995
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 12, !dbg !6996
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !6997
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 13, !dbg !6998
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !6999
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 14, !dbg !7000
  store i8 1, i8* %transform_return_to_modify, align 1, !dbg !7001
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 18, !dbg !7002
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !7003
  %call8 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !7004
  %statements_to_fold = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 19, !dbg !7005
  store %struct.pointer_set_t* %call8, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !7006
  call void @push_gimplify_context(%struct.gimplify_ctx* %gctx), !dbg !7007
  call void @free_dominance_info(i32 1), !dbg !7008
  call void @free_dominance_info(i32 2), !dbg !7009
  call void @gimple_register_cfg_hooks(), !dbg !7010
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7011
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !7011
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !7011
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !7011
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 0, !dbg !7011
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7011
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 6, !dbg !7011
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7011
  store %struct.basic_block_def* %15, %struct.basic_block_def** %bb, align 8, !dbg !7011
  br label %for.cond, !dbg !7011

for.cond:                                         ; preds = %for.inc, %if.end7
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7013
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7013
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !7013
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !7013
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !7013
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 1, !dbg !7013
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7013
  %cmp = icmp ne %struct.basic_block_def* %16, %19, !dbg !7013
  br i1 %cmp, label %for.body, label %for.end, !dbg !7011

for.body:                                         ; preds = %for.cond
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7015
  %call13 = call zeroext i8 @gimple_expand_calls_inline(%struct.basic_block_def* %20, %struct.copy_body_data* %id), !dbg !7016
  br label %for.inc, !dbg !7016

for.inc:                                          ; preds = %for.body
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7013
  %next_bb14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !7013
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb14, align 8, !dbg !7013
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !7013
  br label %for.cond, !dbg !7013, !llvm.loop !7017

for.end:                                          ; preds = %for.cond
  call void @pop_gimplify_context(%union.gimple_statement_d* null), !dbg !7019
  %23 = load i32, i32* %last, align 4, !dbg !7020
  %statements_to_fold15 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 19, !dbg !7021
  %24 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold15, align 8, !dbg !7021
  call void @fold_marked_statements(i32 %23, %struct.pointer_set_t* %24), !dbg !7022
  %statements_to_fold16 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 19, !dbg !7023
  %25 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold16, align 8, !dbg !7023
  call void @pointer_set_destroy(%struct.pointer_set_t* %25), !dbg !7024
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 21, !dbg !7025
  %26 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !7025
  %tobool17 = icmp ne %struct.VEC_gimple_heap* %26, null, !dbg !7025
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !7025

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4005, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7025
  br label %cond.end, !dbg !7025

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !7025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7025
  call void @compact_blocks(), !dbg !7026
  %27 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7027
  call void @number_blocks(%union.tree_node* %27), !dbg !7028
  call void @fold_cond_expr_cond(), !dbg !7029
  %call18 = call zeroext i8 @delete_unreachable_blocks_update_callgraph(%struct.copy_body_data* %id), !dbg !7030
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7031
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !7031
  %call20 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr19), !dbg !7032
  %conv = zext i8 %call20 to i32, !dbg !7032
  %tobool21 = icmp ne i32 %conv, 0, !dbg !7032
  %29 = zext i1 %tobool21 to i64, !dbg !7032
  %cond22 = select i1 %tobool21, i32 32768, i32 0, !dbg !7032
  %or = or i32 2080, %cond22, !dbg !7033
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7034
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !7034
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !7034
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !7034
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 7, !dbg !7034
  %32 = load i32, i32* %x_profile_status, align 8, !dbg !7034
  %cmp25 = icmp ne i32 %32, 0, !dbg !7035
  %33 = zext i1 %cmp25 to i64, !dbg !7034
  %cond27 = select i1 %cmp25, i32 512, i32 0, !dbg !7034
  %or28 = or i32 %or, %cond27, !dbg !7036
  store i32 %or28, i32* %retval, align 4, !dbg !7037
  br label %return, !dbg !7037

return:                                           ; preds = %cond.end, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !7038
  ret i32 %34, !dbg !7038
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_decl_maybe_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !7039 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !7042, metadata !DIExpression()), !dbg !7043
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7044
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7044
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7044
  %bf.load = load i64, i64* %1, align 8, !dbg !7044
  %bf.clear = and i64 %bf.load, 65535, !dbg !7044
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7044
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !7046
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7047

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7048
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7048
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7048
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7048
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7048
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7048
  %cmp5 = icmp eq i32 %bf.cast4, 36, !dbg !7049
  br i1 %cmp5, label %if.then, label %if.else, !dbg !7050

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7051
  %5 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7052
  %call = call %union.tree_node* @copy_decl_to_var(%union.tree_node* %4, %struct.copy_body_data* %5), !dbg !7053
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !7054
  br label %return, !dbg !7054

if.else:                                          ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7055
  %7 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7056
  %call6 = call %union.tree_node* @copy_decl_no_change(%union.tree_node* %6, %struct.copy_body_data* %7), !dbg !7057
  store %union.tree_node* %call6, %union.tree_node** %retval, align 8, !dbg !7058
  br label %return, !dbg !7058

return:                                           ; preds = %if.else, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7059
  ret %union.tree_node* %8, !dbg !7059
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

declare dso_local void @push_gimplify_context(%struct.gimplify_ctx*) #2

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @gimple_register_cfg_hooks() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_expand_calls_inline(%struct.basic_block_def* %bb, %struct.copy_body_data* %id) #0 !dbg !7060 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7063, metadata !DIExpression()), !dbg !7064
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !7065, metadata !DIExpression()), !dbg !7066
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7067, metadata !DIExpression()), !dbg !7068
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7069
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !7071
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7071
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7071
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !7071
  br label %for.cond, !dbg !7072

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7073
  %tobool = icmp ne i8 %call, 0, !dbg !7075
  %lnot = xor i1 %tobool, true, !dbg !7075
  br i1 %lnot, label %for.body, label %for.end, !dbg !7076

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7077, metadata !DIExpression()), !dbg !7079
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7080
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !7079
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7081
  %call2 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %3), !dbg !7083
  %conv = zext i8 %call2 to i32, !dbg !7083
  %tobool3 = icmp ne i32 %conv, 0, !dbg !7083
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !7084

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7085
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7086
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7087
  %call4 = call zeroext i8 @expand_call_inline(%struct.basic_block_def* %4, %union.gimple_statement_d* %5, %struct.copy_body_data* %6), !dbg !7088
  %conv5 = zext i8 %call4 to i32, !dbg !7088
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !7088
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7089

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !7090
  br label %return, !dbg !7090

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !7091

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7092
  br label %for.cond, !dbg !7093, !llvm.loop !7094

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7096
  br label %return, !dbg !7096

return:                                           ; preds = %for.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !7097
  ret i8 %7, !dbg !7097
}

declare dso_local void @pop_gimplify_context(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fold_marked_statements(i32 %first, %struct.pointer_set_t* %statements) #0 !dbg !7098 {
entry:
  %first.addr = alloca i32, align 4
  %statements.addr = alloca %struct.pointer_set_t*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %old_stmt = alloca %union.gimple_statement_d*, align 8
  %old_decl = alloca %union.tree_node*, align 8
  %i2 = alloca %struct.gimple_stmt_iterator, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp46 = alloca %struct.gimple_stmt_iterator, align 8
  %new_stmt89 = alloca %union.gimple_statement_d*, align 8
  store i32 %first, i32* %first.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %first.addr, metadata !7101, metadata !DIExpression()), !dbg !7102
  store %struct.pointer_set_t* %statements, %struct.pointer_set_t** %statements.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %statements.addr, metadata !7103, metadata !DIExpression()), !dbg !7104
  br label %for.cond, !dbg !7105

for.cond:                                         ; preds = %for.inc121, %entry
  %0 = load i32, i32* %first.addr, align 4, !dbg !7106
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7109
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !7109
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7109
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7109
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 3, !dbg !7109
  %3 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !7109
  %cmp = icmp slt i32 %0, %3, !dbg !7110
  br i1 %cmp, label %for.body, label %for.end122, !dbg !7111

for.body:                                         ; preds = %for.cond
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7112
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !7112
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !7112
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !7112
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 2, !dbg !7112
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !7112
  %tobool = icmp ne %struct.VEC_basic_block_gc* %6, null, !dbg !7112
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7112

cond.true:                                        ; preds = %for.body
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7112
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !7112
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !7112
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !7112
  %x_basic_block_info5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !7112
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info5, align 8, !dbg !7112
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !7112
  br label %cond.end, !dbg !7112

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7112

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7112
  %10 = load i32, i32* %first.addr, align 4, !dbg !7112
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %10), !dbg !7112
  %tobool6 = icmp ne %struct.basic_block_def* %call, null, !dbg !7112
  br i1 %tobool6, label %if.then, label %if.end120, !dbg !7114

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7115, metadata !DIExpression()), !dbg !7117
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7118
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !7118
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !7118
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !7118
  %x_basic_block_info9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 2, !dbg !7118
  %13 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info9, align 8, !dbg !7118
  %tobool10 = icmp ne %struct.VEC_basic_block_gc* %13, null, !dbg !7118
  br i1 %tobool10, label %cond.true11, label %cond.false16, !dbg !7118

cond.true11:                                      ; preds = %if.then
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7118
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !7118
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !7118
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !7118
  %x_basic_block_info14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 2, !dbg !7118
  %16 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info14, align 8, !dbg !7118
  %base15 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %16, i32 0, i32 0, !dbg !7118
  br label %cond.end17, !dbg !7118

cond.false16:                                     ; preds = %if.then
  br label %cond.end17, !dbg !7118

cond.end17:                                       ; preds = %cond.false16, %cond.true11
  %cond18 = phi %struct.VEC_basic_block_base* [ %base15, %cond.true11 ], [ null, %cond.false16 ], !dbg !7118
  %17 = load i32, i32* %first.addr, align 4, !dbg !7118
  %call19 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond18, i32 %17), !dbg !7118
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %call19), !dbg !7120
  %18 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7120
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7120
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !7120
  br label %for.cond20, !dbg !7121

for.cond20:                                       ; preds = %for.inc, %cond.end17
  %call21 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7122
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7124
  %lnot = xor i1 %tobool22, true, !dbg !7124
  br i1 %lnot, label %for.body23, label %for.end, !dbg !7125

for.body23:                                       ; preds = %for.cond20
  %20 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements.addr, align 8, !dbg !7126
  %call24 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7128
  %21 = bitcast %union.gimple_statement_d* %call24 to i8*, !dbg !7128
  %call25 = call i32 @pointer_set_contains(%struct.pointer_set_t* %20, i8* %21), !dbg !7129
  %tobool26 = icmp ne i32 %call25, 0, !dbg !7129
  br i1 %tobool26, label %if.then27, label %if.end119, !dbg !7130

if.then27:                                        ; preds = %for.body23
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt, metadata !7131, metadata !DIExpression()), !dbg !7133
  %call28 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7134
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7133
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl, metadata !7135, metadata !DIExpression()), !dbg !7136
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7137
  %call29 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %22), !dbg !7138
  %conv = zext i8 %call29 to i32, !dbg !7138
  %tobool30 = icmp ne i32 %conv, 0, !dbg !7138
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !7138

cond.true31:                                      ; preds = %if.then27
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7139
  %call32 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %23), !dbg !7140
  br label %cond.end34, !dbg !7138

cond.false33:                                     ; preds = %if.then27
  br label %cond.end34, !dbg !7138

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %union.tree_node* [ %call32, %cond.true31 ], [ null, %cond.false33 ], !dbg !7138
  store %union.tree_node* %cond35, %union.tree_node** %old_decl, align 8, !dbg !7136
  %24 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !7141
  %tobool36 = icmp ne %union.tree_node* %24, null, !dbg !7141
  br i1 %tobool36, label %land.lhs.true, label %if.else85, !dbg !7143

land.lhs.true:                                    ; preds = %cond.end34
  %25 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !7144
  %function_decl = bitcast %union.tree_node* %25 to %struct.tree_function_decl*, !dbg !7144
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7144
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !7144
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !7144
  %bf.clear = and i32 %bf.lshr, 3, !dbg !7144
  %cmp37 = icmp ne i32 %bf.clear, 0, !dbg !7144
  br i1 %cmp37, label %if.then39, label %if.else85, !dbg !7145

if.then39:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i2, metadata !7146, metadata !DIExpression()), !dbg !7148
  %26 = bitcast %struct.gimple_stmt_iterator* %i2 to i8*, !dbg !7149
  %27 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false), !dbg !7149
  call void @gsi_prev(%struct.gimple_stmt_iterator* %i2), !dbg !7150
  %call40 = call zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator* %gsi), !dbg !7151
  %tobool41 = icmp ne i8 %call40, 0, !dbg !7151
  br i1 %tobool41, label %if.then42, label %if.end84, !dbg !7153

if.then42:                                        ; preds = %if.then39
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !7154, metadata !DIExpression()), !dbg !7156
  %call43 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i2), !dbg !7157
  %tobool44 = icmp ne i8 %call43, 0, !dbg !7157
  br i1 %tobool44, label %if.then45, label %if.else, !dbg !7159

if.then45:                                        ; preds = %if.then42
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7160
  %add.ptr47 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !7160
  %cfg48 = getelementptr inbounds %struct.function, %struct.function* %add.ptr47, i32 0, i32 1, !dbg !7160
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg48, align 8, !dbg !7160
  %x_basic_block_info49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 2, !dbg !7160
  %30 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info49, align 8, !dbg !7160
  %tobool50 = icmp ne %struct.VEC_basic_block_gc* %30, null, !dbg !7160
  br i1 %tobool50, label %cond.true51, label %cond.false56, !dbg !7160

cond.true51:                                      ; preds = %if.then45
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7160
  %add.ptr52 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !7160
  %cfg53 = getelementptr inbounds %struct.function, %struct.function* %add.ptr52, i32 0, i32 1, !dbg !7160
  %32 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg53, align 8, !dbg !7160
  %x_basic_block_info54 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %32, i32 0, i32 2, !dbg !7160
  %33 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info54, align 8, !dbg !7160
  %base55 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %33, i32 0, i32 0, !dbg !7160
  br label %cond.end57, !dbg !7160

cond.false56:                                     ; preds = %if.then45
  br label %cond.end57, !dbg !7160

cond.end57:                                       ; preds = %cond.false56, %cond.true51
  %cond58 = phi %struct.VEC_basic_block_base* [ %base55, %cond.true51 ], [ null, %cond.false56 ], !dbg !7160
  %34 = load i32, i32* %first.addr, align 4, !dbg !7160
  %call59 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond58, i32 %34), !dbg !7160
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp46, %struct.basic_block_def* %call59), !dbg !7161
  %35 = bitcast %struct.gimple_stmt_iterator* %i2 to i8*, !dbg !7161
  %36 = bitcast %struct.gimple_stmt_iterator* %tmp46 to i8*, !dbg !7161
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !7161
  br label %if.end, !dbg !7162

if.else:                                          ; preds = %if.then42
  call void @gsi_next(%struct.gimple_stmt_iterator* %i2), !dbg !7163
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end57
  br label %while.body, !dbg !7164

while.body:                                       ; preds = %if.end, %if.end83
  %call60 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i2), !dbg !7165
  store %union.gimple_statement_d* %call60, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7167
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7168
  call void @update_stmt(%union.gimple_statement_d* %37), !dbg !7169
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7170
  %39 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !7171
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7172
  call void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d* %38, %union.tree_node* %39, %union.gimple_statement_d* %40), !dbg !7173
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7174
  %call61 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7176
  %cmp62 = icmp eq %union.gimple_statement_d* %41, %call61, !dbg !7177
  br i1 %cmp62, label %if.then64, label %if.end83, !dbg !7178

if.then64:                                        ; preds = %while.body
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7179
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7182
  %call65 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %42, %union.gimple_statement_d* %43), !dbg !7183
  %tobool66 = icmp ne i8 %call65, 0, !dbg !7183
  br i1 %tobool66, label %if.then67, label %if.end82, !dbg !7184

if.then67:                                        ; preds = %if.then64
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7185
  %add.ptr68 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !7185
  %cfg69 = getelementptr inbounds %struct.function, %struct.function* %add.ptr68, i32 0, i32 1, !dbg !7185
  %45 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg69, align 8, !dbg !7185
  %x_basic_block_info70 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %45, i32 0, i32 2, !dbg !7185
  %46 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info70, align 8, !dbg !7185
  %tobool71 = icmp ne %struct.VEC_basic_block_gc* %46, null, !dbg !7185
  br i1 %tobool71, label %cond.true72, label %cond.false77, !dbg !7185

cond.true72:                                      ; preds = %if.then67
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7185
  %add.ptr73 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !7185
  %cfg74 = getelementptr inbounds %struct.function, %struct.function* %add.ptr73, i32 0, i32 1, !dbg !7185
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg74, align 8, !dbg !7185
  %x_basic_block_info75 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 2, !dbg !7185
  %49 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info75, align 8, !dbg !7185
  %base76 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %49, i32 0, i32 0, !dbg !7185
  br label %cond.end78, !dbg !7185

cond.false77:                                     ; preds = %if.then67
  br label %cond.end78, !dbg !7185

cond.end78:                                       ; preds = %cond.false77, %cond.true72
  %cond79 = phi %struct.VEC_basic_block_base* [ %base76, %cond.true72 ], [ null, %cond.false77 ], !dbg !7185
  %50 = load i32, i32* %first.addr, align 4, !dbg !7185
  %call80 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond79, i32 %50), !dbg !7185
  %call81 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %call80), !dbg !7186
  br label %if.end82, !dbg !7186

if.end82:                                         ; preds = %cond.end78, %if.then64
  br label %while.end, !dbg !7187

if.end83:                                         ; preds = %while.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %i2), !dbg !7188
  br label %while.body, !dbg !7164, !llvm.loop !7189

while.end:                                        ; preds = %if.end82
  br label %if.end84, !dbg !7191

if.end84:                                         ; preds = %while.end, %if.then39
  br label %if.end118, !dbg !7192

if.else85:                                        ; preds = %land.lhs.true, %cond.end34
  %call86 = call zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator* %gsi), !dbg !7193
  %tobool87 = icmp ne i8 %call86, 0, !dbg !7193
  br i1 %tobool87, label %if.then88, label %if.end117, !dbg !7195

if.then88:                                        ; preds = %if.else85
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt89, metadata !7196, metadata !DIExpression()), !dbg !7198
  %call90 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7199
  store %union.gimple_statement_d* %call90, %union.gimple_statement_d** %new_stmt89, align 8, !dbg !7198
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt89, align 8, !dbg !7200
  call void @update_stmt(%union.gimple_statement_d* %51), !dbg !7201
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7202
  %call91 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %52), !dbg !7204
  %conv92 = zext i8 %call91 to i32, !dbg !7204
  %tobool93 = icmp ne i32 %conv92, 0, !dbg !7204
  br i1 %tobool93, label %if.then97, label %lor.lhs.false, !dbg !7205

lor.lhs.false:                                    ; preds = %if.then88
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt89, align 8, !dbg !7206
  %call94 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %53), !dbg !7207
  %conv95 = zext i8 %call94 to i32, !dbg !7207
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !7207
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !7208

if.then97:                                        ; preds = %lor.lhs.false, %if.then88
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7209
  %55 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !7210
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt89, align 8, !dbg !7211
  call void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d* %54, %union.tree_node* %55, %union.gimple_statement_d* %56), !dbg !7212
  br label %if.end98, !dbg !7212

if.end98:                                         ; preds = %if.then97, %lor.lhs.false
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !7213
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt89, align 8, !dbg !7215
  %call99 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %57, %union.gimple_statement_d* %58), !dbg !7216
  %tobool100 = icmp ne i8 %call99, 0, !dbg !7216
  br i1 %tobool100, label %if.then101, label %if.end116, !dbg !7217

if.then101:                                       ; preds = %if.end98
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7218
  %add.ptr102 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, !dbg !7218
  %cfg103 = getelementptr inbounds %struct.function, %struct.function* %add.ptr102, i32 0, i32 1, !dbg !7218
  %60 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg103, align 8, !dbg !7218
  %x_basic_block_info104 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %60, i32 0, i32 2, !dbg !7218
  %61 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info104, align 8, !dbg !7218
  %tobool105 = icmp ne %struct.VEC_basic_block_gc* %61, null, !dbg !7218
  br i1 %tobool105, label %cond.true106, label %cond.false111, !dbg !7218

cond.true106:                                     ; preds = %if.then101
  %62 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7218
  %add.ptr107 = getelementptr inbounds %struct.function, %struct.function* %62, i64 0, !dbg !7218
  %cfg108 = getelementptr inbounds %struct.function, %struct.function* %add.ptr107, i32 0, i32 1, !dbg !7218
  %63 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg108, align 8, !dbg !7218
  %x_basic_block_info109 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %63, i32 0, i32 2, !dbg !7218
  %64 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info109, align 8, !dbg !7218
  %base110 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %64, i32 0, i32 0, !dbg !7218
  br label %cond.end112, !dbg !7218

cond.false111:                                    ; preds = %if.then101
  br label %cond.end112, !dbg !7218

cond.end112:                                      ; preds = %cond.false111, %cond.true106
  %cond113 = phi %struct.VEC_basic_block_base* [ %base110, %cond.true106 ], [ null, %cond.false111 ], !dbg !7218
  %65 = load i32, i32* %first.addr, align 4, !dbg !7218
  %call114 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond113, i32 %65), !dbg !7218
  %call115 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %call114), !dbg !7219
  br label %if.end116, !dbg !7219

if.end116:                                        ; preds = %cond.end112, %if.end98
  br label %if.end117, !dbg !7220

if.end117:                                        ; preds = %if.end116, %if.else85
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.end84
  br label %if.end119, !dbg !7221

if.end119:                                        ; preds = %if.end118, %for.body23
  br label %for.inc, !dbg !7222

for.inc:                                          ; preds = %if.end119
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7223
  br label %for.cond20, !dbg !7224, !llvm.loop !7225

for.end:                                          ; preds = %for.cond20
  br label %if.end120, !dbg !7227

if.end120:                                        ; preds = %for.end, %cond.end
  br label %for.inc121, !dbg !7112

for.inc121:                                       ; preds = %if.end120
  %66 = load i32, i32* %first.addr, align 4, !dbg !7228
  %inc = add nsw i32 %66, 1, !dbg !7228
  store i32 %inc, i32* %first.addr, align 4, !dbg !7228
  br label %for.cond, !dbg !7229, !llvm.loop !7230

for.end122:                                       ; preds = %for.cond
  ret void, !dbg !7232
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local void @compact_blocks() #2

declare dso_local void @number_blocks(%union.tree_node*) #2

declare dso_local void @fold_cond_expr_cond() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @delete_unreachable_blocks_update_callgraph(%struct.copy_body_data* %id) #0 !dbg !7233 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %changed = alloca i8, align 1
  %b = alloca %struct.basic_block_def*, align 8
  %next_bb = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !7236, metadata !DIExpression()), !dbg !7237
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !7238, metadata !DIExpression()), !dbg !7239
  store i8 0, i8* %changed, align 1, !dbg !7239
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !7240, metadata !DIExpression()), !dbg !7241
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %next_bb, metadata !7242, metadata !DIExpression()), !dbg !7243
  call void @find_unreachable_blocks(), !dbg !7244
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7245
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7245
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7245
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7245
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !7245
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7245
  %next_bb1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !7247
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb1, align 8, !dbg !7247
  store %struct.basic_block_def* %3, %struct.basic_block_def** %b, align 8, !dbg !7248
  br label %for.cond, !dbg !7249

for.cond:                                         ; preds = %for.inc65, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7250
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7252
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !7252
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !7252
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !7252
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !7252
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7252
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !7253
  br i1 %cmp, label %for.body, label %for.end66, !dbg !7254

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7255
  %next_bb4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 6, !dbg !7257
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb4, align 8, !dbg !7257
  store %struct.basic_block_def* %9, %struct.basic_block_def** %next_bb, align 8, !dbg !7258
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7259
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 13, !dbg !7261
  %11 = load i32, i32* %flags, align 8, !dbg !7261
  %and = and i32 %11, 2, !dbg !7262
  %tobool = icmp ne i32 %and, 0, !dbg !7262
  br i1 %tobool, label %if.end64, label %if.then, !dbg !7263

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !7264, metadata !DIExpression()), !dbg !7266
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7267
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %12), !dbg !7269
  %13 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7269
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !7269
  br label %for.cond5, !dbg !7270

for.cond5:                                        ; preds = %for.inc, %if.then
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7271
  %tobool6 = icmp ne i8 %call, 0, !dbg !7273
  %lnot = xor i1 %tobool6, true, !dbg !7273
  br i1 %lnot, label %for.body7, label %for.end63, !dbg !7274

for.body7:                                        ; preds = %for.cond5
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7275
  %call9 = call i32 @gimple_code(%union.gimple_statement_d* %call8), !dbg !7277
  %cmp10 = icmp eq i32 %call9, 8, !dbg !7278
  br i1 %cmp10, label %if.then11, label %if.end62, !dbg !7279

if.then11:                                        ; preds = %for.body7
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !7280, metadata !DIExpression()), !dbg !7282
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !7283, metadata !DIExpression()), !dbg !7284
  %15 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7285
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %15, i32 0, i32 3, !dbg !7287
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !7287
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7288
  %call13 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %16, %union.gimple_statement_d* %call12), !dbg !7289
  store %struct.cgraph_edge* %call13, %struct.cgraph_edge** %e, align 8, !dbg !7290
  %cmp14 = icmp ne %struct.cgraph_edge* %call13, null, !dbg !7291
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !7292

if.then15:                                        ; preds = %if.then11
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7293
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %17, i32 0, i32 9, !dbg !7296
  %18 = load i32, i32* %inline_failed, align 8, !dbg !7296
  %tobool16 = icmp ne i32 %18, 0, !dbg !7293
  br i1 %tobool16, label %if.else, label %if.then17, !dbg !7297

if.then17:                                        ; preds = %if.then15
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7298
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 2, !dbg !7299
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !7299
  call void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node* %20), !dbg !7300
  br label %if.end, !dbg !7300

if.else:                                          ; preds = %if.then15
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7301
  call void @cgraph_remove_edge(%struct.cgraph_edge* %21), !dbg !7302
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then17
  br label %if.end18, !dbg !7303

if.end18:                                         ; preds = %if.end, %if.then11
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7304
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %22, i32 0, i32 12, !dbg !7306
  %23 = load i32, i32* %transform_call_graph_edges, align 8, !dbg !7306
  %cmp19 = icmp eq i32 %23, 2, !dbg !7307
  br i1 %cmp19, label %land.lhs.true, label %if.end61, !dbg !7308

land.lhs.true:                                    ; preds = %if.end18
  %24 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7309
  %dst_node20 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %24, i32 0, i32 3, !dbg !7310
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node20, align 8, !dbg !7310
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 11, !dbg !7311
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !7311
  %tobool21 = icmp ne %struct.cgraph_node* %26, null, !dbg !7309
  br i1 %tobool21, label %if.then22, label %if.end61, !dbg !7312

if.then22:                                        ; preds = %land.lhs.true
  %27 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7313
  %dst_node23 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %27, i32 0, i32 3, !dbg !7315
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node23, align 8, !dbg !7315
  %clones24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 11, !dbg !7316
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %clones24, align 8, !dbg !7316
  store %struct.cgraph_node* %29, %struct.cgraph_node** %node, align 8, !dbg !7317
  br label %for.cond25, !dbg !7318

for.cond25:                                       ; preds = %if.end60, %if.then22
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7319
  %31 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7321
  %dst_node26 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %31, i32 0, i32 3, !dbg !7322
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node26, align 8, !dbg !7322
  %cmp27 = icmp ne %struct.cgraph_node* %30, %32, !dbg !7323
  br i1 %cmp27, label %for.body28, label %for.end, !dbg !7324

for.body28:                                       ; preds = %for.cond25
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7325
  %call29 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7328
  %call30 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %33, %union.gimple_statement_d* %call29), !dbg !7329
  store %struct.cgraph_edge* %call30, %struct.cgraph_edge** %e, align 8, !dbg !7330
  %cmp31 = icmp ne %struct.cgraph_edge* %call30, null, !dbg !7331
  br i1 %cmp31, label %if.then32, label %if.end39, !dbg !7332

if.then32:                                        ; preds = %for.body28
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7333
  %inline_failed33 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %34, i32 0, i32 9, !dbg !7336
  %35 = load i32, i32* %inline_failed33, align 8, !dbg !7336
  %tobool34 = icmp ne i32 %35, 0, !dbg !7333
  br i1 %tobool34, label %if.else37, label %if.then35, !dbg !7337

if.then35:                                        ; preds = %if.then32
  %36 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7338
  %callee36 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %36, i32 0, i32 2, !dbg !7339
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %callee36, align 8, !dbg !7339
  call void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node* %37), !dbg !7340
  br label %if.end38, !dbg !7340

if.else37:                                        ; preds = %if.then32
  %38 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !7341
  call void @cgraph_remove_edge(%struct.cgraph_edge* %38), !dbg !7342
  br label %if.end38

if.end38:                                         ; preds = %if.else37, %if.then35
  br label %if.end39, !dbg !7343

if.end39:                                         ; preds = %if.end38, %for.body28
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7344
  %clones40 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 11, !dbg !7346
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %clones40, align 8, !dbg !7346
  %tobool41 = icmp ne %struct.cgraph_node* %40, null, !dbg !7344
  br i1 %tobool41, label %if.then42, label %if.else44, !dbg !7347

if.then42:                                        ; preds = %if.end39
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7348
  %clones43 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 11, !dbg !7349
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %clones43, align 8, !dbg !7349
  store %struct.cgraph_node* %42, %struct.cgraph_node** %node, align 8, !dbg !7350
  br label %if.end60, !dbg !7351

if.else44:                                        ; preds = %if.end39
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7352
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %43, i32 0, i32 9, !dbg !7354
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !7354
  %tobool45 = icmp ne %struct.cgraph_node* %44, null, !dbg !7352
  br i1 %tobool45, label %if.then46, label %if.else48, !dbg !7355

if.then46:                                        ; preds = %if.else44
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7356
  %next_sibling_clone47 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 9, !dbg !7357
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone47, align 8, !dbg !7357
  store %struct.cgraph_node* %46, %struct.cgraph_node** %node, align 8, !dbg !7358
  br label %if.end59, !dbg !7359

if.else48:                                        ; preds = %if.else44
  br label %while.cond, !dbg !7360

while.cond:                                       ; preds = %while.body, %if.else48
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7362
  %48 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7363
  %dst_node49 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %48, i32 0, i32 3, !dbg !7364
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node49, align 8, !dbg !7364
  %cmp50 = icmp ne %struct.cgraph_node* %47, %49, !dbg !7365
  br i1 %cmp50, label %land.rhs, label %land.end, !dbg !7366

land.rhs:                                         ; preds = %while.cond
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7367
  %next_sibling_clone51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 9, !dbg !7368
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone51, align 8, !dbg !7368
  %tobool52 = icmp ne %struct.cgraph_node* %51, null, !dbg !7369
  %lnot53 = xor i1 %tobool52, true, !dbg !7369
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %52 = phi i1 [ false, %while.cond ], [ %lnot53, %land.rhs ], !dbg !7370
  br i1 %52, label %while.body, label %while.end, !dbg !7360

while.body:                                       ; preds = %land.end
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7371
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 12, !dbg !7372
  %54 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !7372
  store %struct.cgraph_node* %54, %struct.cgraph_node** %node, align 8, !dbg !7373
  br label %while.cond, !dbg !7360, !llvm.loop !7374

while.end:                                        ; preds = %land.end
  %55 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7375
  %56 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7377
  %dst_node54 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %56, i32 0, i32 3, !dbg !7378
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node54, align 8, !dbg !7378
  %cmp55 = icmp ne %struct.cgraph_node* %55, %57, !dbg !7379
  br i1 %cmp55, label %if.then56, label %if.end58, !dbg !7380

if.then56:                                        ; preds = %while.end
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7381
  %next_sibling_clone57 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %58, i32 0, i32 9, !dbg !7382
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone57, align 8, !dbg !7382
  store %struct.cgraph_node* %59, %struct.cgraph_node** %node, align 8, !dbg !7383
  br label %if.end58, !dbg !7384

if.end58:                                         ; preds = %if.then56, %while.end
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then46
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then42
  br label %for.cond25, !dbg !7385, !llvm.loop !7386

for.end:                                          ; preds = %for.cond25
  br label %if.end61, !dbg !7387

if.end61:                                         ; preds = %for.end, %land.lhs.true, %if.end18
  br label %if.end62, !dbg !7388

if.end62:                                         ; preds = %if.end61, %for.body7
  br label %for.inc, !dbg !7389

for.inc:                                          ; preds = %if.end62
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !7390
  br label %for.cond5, !dbg !7391, !llvm.loop !7392

for.end63:                                        ; preds = %for.cond5
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !7394
  call void @delete_basic_block(%struct.basic_block_def* %60), !dbg !7395
  store i8 1, i8* %changed, align 1, !dbg !7396
  br label %if.end64, !dbg !7397

if.end64:                                         ; preds = %for.end63, %for.body
  br label %for.inc65, !dbg !7398

for.inc65:                                        ; preds = %if.end64
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7399
  store %struct.basic_block_def* %61, %struct.basic_block_def** %b, align 8, !dbg !7400
  br label %for.cond, !dbg !7401, !llvm.loop !7402

for.end66:                                        ; preds = %for.cond
  %62 = load i8, i8* %changed, align 1, !dbg !7404
  %tobool67 = icmp ne i8 %62, 0, !dbg !7404
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !7406

if.then68:                                        ; preds = %for.end66
  call void @tidy_fallthru_edges(), !dbg !7407
  br label %if.end69, !dbg !7407

if.end69:                                         ; preds = %if.then68, %for.end66
  %63 = load i8, i8* %changed, align 1, !dbg !7408
  ret i8 %63, !dbg !7409
}

declare dso_local i32 @mf_marked_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @mf_mark(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_copy(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !7410 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_constructor_elt_gc*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !7414, metadata !DIExpression()), !dbg !7415
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !7416, metadata !DIExpression()), !dbg !7415
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !7415
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !7415
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7415

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !7415
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !7415
  %2 = load i32, i32* %num, align 8, !dbg !7415
  br label %cond.end, !dbg !7415

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7415

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7415
  %conv = zext i32 %cond to i64, !dbg !7415
  store i64 %conv, i64* %len_, align 8, !dbg !7415
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %new_vec_, metadata !7417, metadata !DIExpression()), !dbg !7415
  store %struct.VEC_constructor_elt_gc* null, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !7415
  %3 = load i64, i64* %len_, align 8, !dbg !7418
  %tobool1 = icmp ne i64 %3, 0, !dbg !7418
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7415

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !7420
  %conv2 = trunc i64 %4 to i32, !dbg !7420
  %call = call i8* @vec_gc_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 16), !dbg !7420
  %5 = bitcast i8* %call to %struct.VEC_constructor_elt_gc*, !dbg !7420
  store %struct.VEC_constructor_elt_gc* %5, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !7420
  %6 = load i64, i64* %len_, align 8, !dbg !7420
  %conv3 = trunc i64 %6 to i32, !dbg !7420
  %7 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !7420
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %7, i32 0, i32 0, !dbg !7420
  %num4 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %base, i32 0, i32 0, !dbg !7420
  store i32 %conv3, i32* %num4, align 8, !dbg !7420
  %8 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !7420
  %base5 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %8, i32 0, i32 0, !dbg !7420
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %base5, i32 0, i32 2, !dbg !7420
  %arraydecay = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 0, !dbg !7420
  %9 = bitcast %struct.constructor_elt_d* %arraydecay to i8*, !dbg !7420
  %10 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !7420
  %vec6 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %10, i32 0, i32 2, !dbg !7420
  %arraydecay7 = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec6, i64 0, i64 0, !dbg !7420
  %11 = bitcast %struct.constructor_elt_d* %arraydecay7 to i8*, !dbg !7420
  %12 = load i64, i64* %len_, align 8, !dbg !7420
  %mul = mul i64 16, %12, !dbg !7420
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !7420
  br label %if.end, !dbg !7420

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %new_vec_, align 8, !dbg !7415
  ret %struct.VEC_constructor_elt_gc* %13, !dbg !7415
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @unsave_expr_now(%union.tree_node* %expr) #0 !dbg !7422 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %id = alloca %struct.copy_body_data, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7425, metadata !DIExpression()), !dbg !7426
  call void @llvm.dbg.declare(metadata %struct.copy_body_data* %id, metadata !7427, metadata !DIExpression()), !dbg !7428
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7429
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !7431
  br i1 %cmp, label %if.then, label %if.end, !dbg !7432

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7433
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !7434
  br label %return, !dbg !7434

if.end:                                           ; preds = %entry
  %2 = bitcast %struct.copy_body_data* %id to i8*, !dbg !7435
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 152, i1 false), !dbg !7435
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7436
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !7437
  store %union.tree_node* %3, %union.tree_node** %src_fn, align 8, !dbg !7438
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7439
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !7440
  store %union.tree_node* %4, %union.tree_node** %dst_fn, align 8, !dbg !7441
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7442
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !7443
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %decl_map, align 8, !dbg !7444
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !7445
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !7446
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 7, !dbg !7447
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !7448
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 12, !dbg !7449
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !7450
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 13, !dbg !7451
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !7452
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 14, !dbg !7453
  store i8 0, i8* %transform_return_to_modify, align 1, !dbg !7454
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 18, !dbg !7455
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !7456
  %5 = bitcast %struct.copy_body_data* %id to i8*, !dbg !7457
  %call1 = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @mark_local_for_remap_r, i8* %5, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7457
  %6 = bitcast %struct.copy_body_data* %id to i8*, !dbg !7458
  %call2 = call %union.tree_node* @walk_tree_1(%union.tree_node** %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @unsave_r, i8* %6, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7458
  %decl_map3 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !7459
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map3, align 8, !dbg !7459
  call void @pointer_map_destroy(%struct.pointer_map_t* %7), !dbg !7460
  %debug_map4 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !7461
  %8 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map4, align 8, !dbg !7461
  %tobool = icmp ne %struct.pointer_map_t* %8, null, !dbg !7463
  br i1 %tobool, label %if.then5, label %if.end7, !dbg !7464

if.then5:                                         ; preds = %if.end
  %debug_map6 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !7465
  %9 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map6, align 8, !dbg !7465
  call void @pointer_map_destroy(%struct.pointer_map_t* %9), !dbg !7466
  br label %if.end7, !dbg !7466

if.end7:                                          ; preds = %if.then5, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7467
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !7468
  br label %return, !dbg !7468

return:                                           ; preds = %if.end7, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7469
  ret %union.tree_node* %11, !dbg !7469
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @copy_decl_no_change(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !7470 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %copy = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7471, metadata !DIExpression()), !dbg !7472
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !7473, metadata !DIExpression()), !dbg !7474
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !7475, metadata !DIExpression()), !dbg !7476
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7477
  %call = call %union.tree_node* @copy_node_stat(%union.tree_node* %0), !dbg !7477
  store %union.tree_node* %call, %union.tree_node** %copy, align 8, !dbg !7478
  %1 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !7479
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !7479
  %abstract_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7479
  %2 = bitcast i40* %abstract_flag to i64*, !dbg !7479
  %bf.load = load i64, i64* %2, align 8, !dbg !7480
  %bf.clear = and i64 %bf.load, -2049, !dbg !7480
  store i64 %bf.clear, i64* %2, align 8, !dbg !7480
  %3 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 15), align 8, !dbg !7481
  %4 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !7482
  call void %3(%union.tree_node* %4), !dbg !7483
  %5 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !7484
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7484
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7484
  %bf.load1 = load i64, i64* %6, align 8, !dbg !7484
  %bf.clear2 = and i64 %bf.load1, 65535, !dbg !7484
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !7484
  %cmp = icmp eq i32 %bf.cast, 30, !dbg !7486
  br i1 %cmp, label %if.then, label %if.end, !dbg !7487

if.then:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !7488
  %base3 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7488
  %8 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7488
  %bf.load4 = load i64, i64* %8, align 8, !dbg !7490
  %bf.clear5 = and i64 %bf.load4, -262145, !dbg !7490
  store i64 %bf.clear5, i64* %8, align 8, !dbg !7490
  %9 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !7491
  %label_decl = bitcast %union.tree_node* %9 to %struct.tree_label_decl*, !dbg !7491
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 1, !dbg !7491
  store i32 -1, i32* %label_decl_uid, align 8, !dbg !7492
  br label %if.end, !dbg !7493

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7494
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7495
  %12 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !7496
  %call6 = call %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %10, %union.tree_node* %11, %union.tree_node* %12), !dbg !7497
  ret %union.tree_node* %call6, !dbg !7498
}

declare dso_local %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @mark_local_for_remap_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7499 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7500, metadata !DIExpression()), !dbg !7501
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7502, metadata !DIExpression()), !dbg !7503
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7504, metadata !DIExpression()), !dbg !7505
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !7506, metadata !DIExpression()), !dbg !7507
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7508
  %1 = bitcast i8* %0 to %struct.copy_body_data*, !dbg !7509
  store %struct.copy_body_data* %1, %struct.copy_body_data** %id, align 8, !dbg !7507
  %2 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7510
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !7510
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7510
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7510
  %bf.load = load i64, i64* %4, align 8, !dbg !7510
  %bf.clear = and i64 %bf.load, 65535, !dbg !7510
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7510
  %idxprom = sext i32 %bf.cast to i64, !dbg !7510
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7510
  %5 = load i32, i32* %arrayidx, align 4, !dbg !7510
  %cmp = icmp eq i32 %5, 2, !dbg !7510
  br i1 %cmp, label %if.then, label %if.else, !dbg !7512

if.then:                                          ; preds = %entry
  %6 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7513
  store i32 0, i32* %6, align 4, !dbg !7514
  br label %if.end8, !dbg !7515

if.else:                                          ; preds = %entry
  %7 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7516
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !7516
  %base1 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7516
  %9 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7516
  %bf.load2 = load i64, i64* %9, align 8, !dbg !7516
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7516
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7516
  %cmp5 = icmp eq i32 %bf.cast4, 133, !dbg !7518
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !7519

if.then6:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7520, metadata !DIExpression()), !dbg !7522
  %10 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7523
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !7523
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !7523
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7523
  %arrayidx7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7523
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !7523
  store %union.tree_node* %12, %union.tree_node** %decl, align 8, !dbg !7522
  %13 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7524
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7525
  %15 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7526
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %15, i32 0, i32 7, !dbg !7527
  %16 = load %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !7527
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7528
  %18 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7529
  %call = call %union.tree_node* %16(%union.tree_node* %17, %struct.copy_body_data* %18), !dbg !7526
  call void @insert_decl_map(%struct.copy_body_data* %13, %union.tree_node* %14, %union.tree_node* %call), !dbg !7530
  br label %if.end, !dbg !7531

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  ret %union.tree_node* null, !dbg !7532
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @unsave_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7533 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %st = alloca %struct.pointer_map_t*, align 8
  %n = alloca %union.tree_node**, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7534, metadata !DIExpression()), !dbg !7535
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7536, metadata !DIExpression()), !dbg !7537
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7538, metadata !DIExpression()), !dbg !7539
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !7540, metadata !DIExpression()), !dbg !7541
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7542
  %1 = bitcast i8* %0 to %struct.copy_body_data*, !dbg !7543
  store %struct.copy_body_data* %1, %struct.copy_body_data** %id, align 8, !dbg !7541
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %st, metadata !7544, metadata !DIExpression()), !dbg !7545
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7546
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 6, !dbg !7547
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !7547
  store %struct.pointer_map_t* %3, %struct.pointer_map_t** %st, align 8, !dbg !7545
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !7548, metadata !DIExpression()), !dbg !7549
  %4 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7550
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7550
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7550
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7550
  %bf.load = load i64, i64* %6, align 8, !dbg !7550
  %bf.clear = and i64 %bf.load, 65535, !dbg !7550
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7550
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7552
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7553

land.lhs.true:                                    ; preds = %entry
  %7 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7554
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !7554
  %base1 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7554
  %9 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7554
  %bf.load2 = load i64, i64* %9, align 8, !dbg !7554
  %bf.lshr = lshr i64 %bf.load2, 26, !dbg !7554
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !7554
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7554
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !7554
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7555

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %10 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7556
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !7556
  %base5 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7556
  %12 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7556
  %bf.load6 = load i64, i64* %12, align 8, !dbg !7556
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7556
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7556
  %cmp9 = icmp eq i32 %bf.cast8, 30, !dbg !7557
  br i1 %cmp9, label %if.then, label %if.else, !dbg !7558

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %13 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !7559
  %14 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7561
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !7562
  %16 = bitcast %union.tree_node* %15 to i8*, !dbg !7562
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %13, i8* %16), !dbg !7563
  %17 = bitcast i8** %call to %union.tree_node**, !dbg !7564
  store %union.tree_node** %17, %union.tree_node*** %n, align 8, !dbg !7565
  %18 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !7566
  %tobool10 = icmp ne %union.tree_node** %18, null, !dbg !7566
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !7568

if.then11:                                        ; preds = %if.then
  %19 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !7569
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !7570
  %21 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7571
  store %union.tree_node* %20, %union.tree_node** %21, align 8, !dbg !7572
  br label %if.end, !dbg !7573

if.end:                                           ; preds = %if.then11, %if.then
  br label %if.end43, !dbg !7574

if.else:                                          ; preds = %lor.lhs.false
  %22 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7575
  %23 = load %union.tree_node*, %union.tree_node** %22, align 8, !dbg !7575
  %base12 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7575
  %24 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7575
  %bf.load13 = load i64, i64* %24, align 8, !dbg !7575
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7575
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7575
  %cmp16 = icmp eq i32 %bf.cast15, 147, !dbg !7577
  br i1 %cmp16, label %if.then17, label %if.else18, !dbg !7578

if.then17:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7579
  br label %if.end42, !dbg !7579

if.else18:                                        ; preds = %if.else
  %25 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7580
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !7580
  %base19 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7580
  %27 = bitcast %struct.tree_base* %base19 to i64*, !dbg !7580
  %bf.load20 = load i64, i64* %27, align 8, !dbg !7580
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !7580
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !7580
  %cmp23 = icmp eq i32 %bf.cast22, 58, !dbg !7582
  br i1 %cmp23, label %if.then24, label %if.else25, !dbg !7583

if.then24:                                        ; preds = %if.else18
  %28 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7584
  %29 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7585
  %30 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7586
  call void @copy_bind_expr(%union.tree_node** %28, i32* %29, %struct.copy_body_data* %30), !dbg !7587
  br label %if.end41, !dbg !7587

if.else25:                                        ; preds = %if.else18
  %31 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7588
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !7588
  %base26 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !7588
  %33 = bitcast %struct.tree_base* %base26 to i64*, !dbg !7588
  %bf.load27 = load i64, i64* %33, align 8, !dbg !7588
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !7588
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !7588
  %cmp30 = icmp eq i32 %bf.cast29, 120, !dbg !7590
  br i1 %cmp30, label %if.then37, label %lor.lhs.false31, !dbg !7591

lor.lhs.false31:                                  ; preds = %if.else25
  %34 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7592
  %35 = load %union.tree_node*, %union.tree_node** %34, align 8, !dbg !7592
  %base32 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !7592
  %36 = bitcast %struct.tree_base* %base32 to i64*, !dbg !7592
  %bf.load33 = load i64, i64* %36, align 8, !dbg !7592
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !7592
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !7592
  %cmp36 = icmp eq i32 %bf.cast35, 55, !dbg !7593
  br i1 %cmp36, label %if.then37, label %if.else38, !dbg !7594

if.then37:                                        ; preds = %lor.lhs.false31, %if.else25
  %37 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7595
  %38 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !7596
  %39 = bitcast %struct.pointer_map_t* %38 to i8*, !dbg !7596
  %40 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7597
  call void @remap_save_expr(%union.tree_node** %37, i8* %39, i32* %40), !dbg !7598
  br label %if.end40, !dbg !7598

if.else38:                                        ; preds = %lor.lhs.false31
  %41 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7599
  %42 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7601
  %call39 = call %union.tree_node* @copy_tree_r(%union.tree_node** %41, i32* %42, i8* null), !dbg !7602
  %43 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7603
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !7604
  call void @unsave_expr_1(%union.tree_node* %44), !dbg !7605
  br label %if.end40

if.end40:                                         ; preds = %if.else38, %if.then37
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then24
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then17
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end
  ret %union.tree_node* null, !dbg !7606
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gimple_seq_d* @copy_gimple_seq_and_replace_locals(%struct.gimple_seq_d* %seq) #0 !dbg !7607 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %id = alloca %struct.copy_body_data, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %visited = alloca %struct.pointer_set_t*, align 8
  %copy = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !7610, metadata !DIExpression()), !dbg !7611
  call void @llvm.dbg.declare(metadata %struct.copy_body_data* %id, metadata !7612, metadata !DIExpression()), !dbg !7613
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !7614, metadata !DIExpression()), !dbg !7615
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !7616, metadata !DIExpression()), !dbg !7617
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %copy, metadata !7618, metadata !DIExpression()), !dbg !7619
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7620
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !7622
  br i1 %cmp, label %if.then, label %if.end, !dbg !7623

if.then:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7624
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %retval, align 8, !dbg !7625
  br label %return, !dbg !7625

if.end:                                           ; preds = %entry
  %2 = bitcast %struct.copy_body_data* %id to i8*, !dbg !7626
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 152, i1 false), !dbg !7626
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7627
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !7628
  store %union.tree_node* %3, %union.tree_node** %src_fn, align 8, !dbg !7629
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7630
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !7631
  store %union.tree_node* %4, %union.tree_node** %dst_fn, align 8, !dbg !7632
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7633
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !7634
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %decl_map, align 8, !dbg !7635
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !7636
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !7637
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 7, !dbg !7638
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !7639
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 12, !dbg !7640
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !7641
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 13, !dbg !7642
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !7643
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 14, !dbg !7644
  store i8 0, i8* %transform_return_to_modify, align 1, !dbg !7645
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 18, !dbg !7646
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !7647
  %5 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !7648
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 56, i1 false), !dbg !7648
  %call1 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !7649
  store %struct.pointer_set_t* %call1, %struct.pointer_set_t** %visited, align 8, !dbg !7650
  %6 = bitcast %struct.copy_body_data* %id to i8*, !dbg !7651
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !7652
  store i8* %6, i8** %info, align 8, !dbg !7653
  %7 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7654
  %pset = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 2, !dbg !7655
  store %struct.pointer_set_t* %7, %struct.pointer_set_t** %pset, align 8, !dbg !7656
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7657
  %call2 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %8, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @mark_local_labels_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.walk_stmt_info* %wi), !dbg !7658
  %9 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7659
  call void @pointer_set_destroy(%struct.pointer_set_t* %9), !dbg !7660
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7661
  %call3 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %10), !dbg !7662
  store %struct.gimple_seq_d* %call3, %struct.gimple_seq_d** %copy, align 8, !dbg !7663
  %11 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !7664
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 56, i1 false), !dbg !7664
  %12 = bitcast %struct.copy_body_data* %id to i8*, !dbg !7665
  %info4 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !7666
  store i8* %12, i8** %info4, align 8, !dbg !7667
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %copy, align 8, !dbg !7668
  %call5 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %13, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @replace_locals_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @replace_locals_op, %struct.walk_stmt_info* %wi), !dbg !7669
  %decl_map6 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !7670
  %14 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map6, align 8, !dbg !7670
  call void @pointer_map_destroy(%struct.pointer_map_t* %14), !dbg !7671
  %debug_map7 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !7672
  %15 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map7, align 8, !dbg !7672
  %tobool = icmp ne %struct.pointer_map_t* %15, null, !dbg !7674
  br i1 %tobool, label %if.then8, label %if.end10, !dbg !7675

if.then8:                                         ; preds = %if.end
  %debug_map9 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !7676
  %16 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map9, align 8, !dbg !7676
  call void @pointer_map_destroy(%struct.pointer_map_t* %16), !dbg !7677
  br label %if.end10, !dbg !7677

if.end10:                                         ; preds = %if.then8, %if.end
  %17 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %copy, align 8, !dbg !7678
  store %struct.gimple_seq_d* %17, %struct.gimple_seq_d** %retval, align 8, !dbg !7679
  br label %return, !dbg !7679

return:                                           ; preds = %if.end10, %if.then
  %18 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !7680
  ret %struct.gimple_seq_d* %18, !dbg !7680
}

declare dso_local %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @mark_local_labels_stmt(%struct.gimple_stmt_iterator* %gsip, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !7681 {
entry:
  %gsip.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsip, %struct.gimple_stmt_iterator** %gsip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsip.addr, metadata !7685, metadata !DIExpression()), !dbg !7686
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !7687, metadata !DIExpression()), !dbg !7688
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !7689, metadata !DIExpression()), !dbg !7690
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !7691, metadata !DIExpression()), !dbg !7692
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !7693
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !7694
  %1 = load i8*, i8** %info, align 8, !dbg !7694
  %2 = bitcast i8* %1 to %struct.copy_body_data*, !dbg !7695
  store %struct.copy_body_data* %2, %struct.copy_body_data** %id, align 8, !dbg !7692
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7696, metadata !DIExpression()), !dbg !7697
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsip.addr, align 8, !dbg !7698
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !7699
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7697
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7700
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !7702
  %cmp = icmp eq i32 %call1, 4, !dbg !7703
  br i1 %cmp, label %if.then, label %if.end, !dbg !7704

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7705, metadata !DIExpression()), !dbg !7707
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7708
  %call2 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %5), !dbg !7709
  store %union.tree_node* %call2, %union.tree_node** %decl, align 8, !dbg !7707
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7710
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7711
  %8 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7712
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %8, i32 0, i32 7, !dbg !7713
  %9 = load %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !7713
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7714
  %11 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7715
  %call3 = call %union.tree_node* %9(%union.tree_node* %10, %struct.copy_body_data* %11), !dbg !7712
  call void @insert_decl_map(%struct.copy_body_data* %6, %union.tree_node* %7, %union.tree_node* %call3), !dbg !7716
  br label %if.end, !dbg !7717

if.end:                                           ; preds = %if.then, %entry
  ret %union.tree_node* null, !dbg !7718
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @replace_locals_stmt(%struct.gimple_stmt_iterator* %gsip, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !7719 {
entry:
  %gsip.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %block = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsip, %struct.gimple_stmt_iterator** %gsip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsip.addr, metadata !7720, metadata !DIExpression()), !dbg !7721
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !7722, metadata !DIExpression()), !dbg !7723
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !7724, metadata !DIExpression()), !dbg !7725
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !7726, metadata !DIExpression()), !dbg !7727
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !7728
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !7729
  %1 = load i8*, i8** %info, align 8, !dbg !7729
  %2 = bitcast i8* %1 to %struct.copy_body_data*, !dbg !7730
  store %struct.copy_body_data* %2, %struct.copy_body_data** %id, align 8, !dbg !7727
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7731, metadata !DIExpression()), !dbg !7732
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsip.addr, align 8, !dbg !7733
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !7734
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7732
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7735
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !7737
  %cmp = icmp eq i32 %call1, 10, !dbg !7738
  br i1 %cmp, label %if.then, label %if.end10, !dbg !7739

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !7740, metadata !DIExpression()), !dbg !7742
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7743
  %call2 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %5), !dbg !7744
  store %union.tree_node* %call2, %union.tree_node** %block, align 8, !dbg !7742
  %6 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7745
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !7745
  br i1 %tobool, label %if.then3, label %if.end, !dbg !7747

if.then3:                                         ; preds = %if.then
  %7 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7748
  call void @remap_block(%union.tree_node** %block, %struct.copy_body_data* %7), !dbg !7750
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7751
  %9 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7752
  call void @gimple_bind_set_block(%union.gimple_statement_d* %8, %union.tree_node* %9), !dbg !7753
  br label %if.end, !dbg !7754

if.end:                                           ; preds = %if.then3, %if.then
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7755
  %call4 = call %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %10), !dbg !7757
  %tobool5 = icmp ne %union.tree_node* %call4, null, !dbg !7757
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !7758

if.then6:                                         ; preds = %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7759
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7760
  %call7 = call %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %12), !dbg !7761
  %13 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7762
  %call8 = call %union.tree_node* @remap_decls(%union.tree_node* %call7, %struct.VEC_tree_gc** null, %struct.copy_body_data* %13), !dbg !7763
  call void @gimple_bind_set_vars(%union.gimple_statement_d* %11, %union.tree_node* %call8), !dbg !7764
  br label %if.end9, !dbg !7764

if.end9:                                          ; preds = %if.then6, %if.end
  br label %if.end10, !dbg !7765

if.end10:                                         ; preds = %if.end9, %entry
  ret %union.tree_node* null, !dbg !7766
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @replace_locals_op(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7767 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %st = alloca %struct.pointer_map_t*, align 8
  %n = alloca %union.tree_node**, align 8
  %expr = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7768, metadata !DIExpression()), !dbg !7769
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7770, metadata !DIExpression()), !dbg !7771
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7772, metadata !DIExpression()), !dbg !7773
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !7774, metadata !DIExpression()), !dbg !7775
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7776
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !7777
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !7775
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !7778, metadata !DIExpression()), !dbg !7779
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !7780
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !7781
  %3 = load i8*, i8** %info, align 8, !dbg !7781
  %4 = bitcast i8* %3 to %struct.copy_body_data*, !dbg !7782
  store %struct.copy_body_data* %4, %struct.copy_body_data** %id, align 8, !dbg !7779
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %st, metadata !7783, metadata !DIExpression()), !dbg !7784
  %5 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !7785
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %5, i32 0, i32 6, !dbg !7786
  %6 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !7786
  store %struct.pointer_map_t* %6, %struct.pointer_map_t** %st, align 8, !dbg !7784
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !7787, metadata !DIExpression()), !dbg !7788
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !7789, metadata !DIExpression()), !dbg !7790
  %7 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7791
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !7792
  store %union.tree_node* %8, %union.tree_node** %expr, align 8, !dbg !7790
  %9 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7793
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7793
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !7793
  %bf.load = load i64, i64* %10, align 8, !dbg !7793
  %bf.clear = and i64 %bf.load, 65535, !dbg !7793
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7793
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7795
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7796

land.lhs.true:                                    ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7797
  %base1 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7797
  %12 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7797
  %bf.load2 = load i64, i64* %12, align 8, !dbg !7797
  %bf.lshr = lshr i64 %bf.load2, 26, !dbg !7797
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !7797
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7797
  %tobool = icmp ne i32 %bf.cast4, 0, !dbg !7797
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7798

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %13 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7799
  %base5 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7799
  %14 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7799
  %bf.load6 = load i64, i64* %14, align 8, !dbg !7799
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7799
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7799
  %cmp9 = icmp eq i32 %bf.cast8, 30, !dbg !7800
  br i1 %cmp9, label %if.then, label %if.else, !dbg !7801

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %15 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !7802
  %16 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7804
  %17 = bitcast %union.tree_node* %16 to i8*, !dbg !7804
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %15, i8* %17), !dbg !7805
  %18 = bitcast i8** %call to %union.tree_node**, !dbg !7806
  store %union.tree_node** %18, %union.tree_node*** %n, align 8, !dbg !7807
  %19 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !7808
  %tobool10 = icmp ne %union.tree_node** %19, null, !dbg !7808
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !7810

if.then11:                                        ; preds = %if.then
  %20 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !7811
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !7812
  %22 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7813
  store %union.tree_node* %21, %union.tree_node** %22, align 8, !dbg !7814
  br label %if.end, !dbg !7815

if.end:                                           ; preds = %if.then11, %if.then
  %23 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7816
  store i32 0, i32* %23, align 4, !dbg !7817
  br label %if.end51, !dbg !7818

if.else:                                          ; preds = %lor.lhs.false
  %24 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7819
  %base12 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7819
  %25 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7819
  %bf.load13 = load i64, i64* %25, align 8, !dbg !7819
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7819
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7819
  %cmp16 = icmp eq i32 %bf.cast15, 147, !dbg !7821
  br i1 %cmp16, label %if.then29, label %lor.lhs.false17, !dbg !7822

lor.lhs.false17:                                  ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7823
  %base18 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7823
  %27 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7823
  %bf.load19 = load i64, i64* %27, align 8, !dbg !7823
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !7823
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !7823
  %cmp22 = icmp eq i32 %bf.cast21, 58, !dbg !7824
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23, !dbg !7825

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %28 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7826
  %base24 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7826
  %29 = bitcast %struct.tree_base* %base24 to i64*, !dbg !7826
  %bf.load25 = load i64, i64* %29, align 8, !dbg !7826
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !7826
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !7826
  %cmp28 = icmp eq i32 %bf.cast27, 120, !dbg !7827
  br i1 %cmp28, label %if.then29, label %if.else30, !dbg !7828

if.then29:                                        ; preds = %lor.lhs.false23, %lor.lhs.false17, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7829
  br label %if.end50, !dbg !7829

if.else30:                                        ; preds = %lor.lhs.false23
  %30 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7830
  %base31 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !7830
  %31 = bitcast %struct.tree_base* %base31 to i64*, !dbg !7830
  %bf.load32 = load i64, i64* %31, align 8, !dbg !7830
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !7830
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !7830
  %cmp35 = icmp eq i32 %bf.cast34, 55, !dbg !7832
  br i1 %cmp35, label %if.then36, label %if.end49, !dbg !7833

if.then36:                                        ; preds = %if.else30
  %32 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7834
  %exp = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !7834
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7834
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7834
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7834
  %tobool37 = icmp ne %union.tree_node* %33, null, !dbg !7834
  br i1 %tobool37, label %if.end48, label %if.then38, !dbg !7837

if.then38:                                        ; preds = %if.then36
  %34 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7838
  %exp39 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !7838
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !7838
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 3, !dbg !7838
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !7838
  %36 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7840
  %exp42 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !7840
  %operands43 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp42, i32 0, i32 3, !dbg !7840
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands43, i64 0, i64 1, !dbg !7840
  store %union.tree_node* %35, %union.tree_node** %arrayidx44, align 8, !dbg !7841
  %37 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !7842
  %exp45 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !7842
  %operands46 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp45, i32 0, i32 3, !dbg !7842
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands46, i64 0, i64 3, !dbg !7842
  store %union.tree_node* null, %union.tree_node** %arrayidx47, align 8, !dbg !7843
  br label %if.end48, !dbg !7844

if.end48:                                         ; preds = %if.then38, %if.then36
  br label %if.end49, !dbg !7845

if.end49:                                         ; preds = %if.end48, %if.else30
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then29
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end
  ret %union.tree_node* null, !dbg !7846
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @debug_find_tree(%union.tree_node* %top, %union.tree_node* %search) #0 !dbg !7847 {
entry:
  %top.addr = alloca %union.tree_node*, align 8
  %search.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %top, %union.tree_node** %top.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %top.addr, metadata !7850, metadata !DIExpression()), !dbg !7851
  store %union.tree_node* %search, %union.tree_node** %search.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %search.addr, metadata !7852, metadata !DIExpression()), !dbg !7853
  %0 = load %union.tree_node*, %union.tree_node** %search.addr, align 8, !dbg !7854
  %1 = bitcast %union.tree_node* %0 to i8*, !dbg !7854
  %call = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** %top.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* @debug_find_tree_1, i8* %1, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7854
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !7855
  %conv = zext i1 %cmp to i32, !dbg !7855
  %conv1 = trunc i32 %conv to i8, !dbg !7854
  ret i8 %conv1, !dbg !7856
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @debug_find_tree_1(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7857 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7858, metadata !DIExpression()), !dbg !7859
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7860, metadata !DIExpression()), !dbg !7861
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7862, metadata !DIExpression()), !dbg !7863
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7864
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7866
  %2 = load i8*, i8** %data.addr, align 8, !dbg !7867
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !7867
  %cmp = icmp eq %union.tree_node* %1, %3, !dbg !7868
  br i1 %cmp, label %if.then, label %if.else, !dbg !7869

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %data.addr, align 8, !dbg !7870
  %5 = bitcast i8* %4 to %union.tree_node*, !dbg !7871
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !7872
  br label %return, !dbg !7872

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7873
  br label %return, !dbg !7873

return:                                           ; preds = %if.else, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7874
  ret %union.tree_node* %6, !dbg !7874
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %id, %union.tree_node* %decl, %union.tree_node* %copy) #0 !dbg !7875 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %copy.addr = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7880, metadata !DIExpression()), !dbg !7881
  store %union.tree_node* %copy, %union.tree_node** %copy.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy.addr, metadata !7882, metadata !DIExpression()), !dbg !7883
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7884
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !7884
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7884
  %1 = bitcast i40* %artificial_flag to i64*, !dbg !7884
  %bf.load = load i64, i64* %1, align 8, !dbg !7884
  %bf.lshr = lshr i64 %bf.load, 12, !dbg !7884
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7884
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7884
  %2 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7885
  %decl_common1 = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !7885
  %artificial_flag2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 2, !dbg !7885
  %3 = bitcast i40* %artificial_flag2 to i64*, !dbg !7885
  %4 = zext i32 %bf.cast to i64, !dbg !7886
  %bf.load3 = load i64, i64* %3, align 8, !dbg !7886
  %bf.value = and i64 %4, 1, !dbg !7886
  %bf.shl = shl i64 %bf.value, 12, !dbg !7886
  %bf.clear4 = and i64 %bf.load3, -4097, !dbg !7886
  %bf.set = or i64 %bf.clear4, %bf.shl, !dbg !7886
  store i64 %bf.set, i64* %3, align 8, !dbg !7886
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7886
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7887
  %decl_common5 = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !7887
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common5, i32 0, i32 2, !dbg !7887
  %6 = bitcast i40* %ignored_flag to i64*, !dbg !7887
  %bf.load6 = load i64, i64* %6, align 8, !dbg !7887
  %bf.lshr7 = lshr i64 %bf.load6, 10, !dbg !7887
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !7887
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7887
  %7 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7888
  %decl_common10 = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !7888
  %ignored_flag11 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common10, i32 0, i32 2, !dbg !7888
  %8 = bitcast i40* %ignored_flag11 to i64*, !dbg !7888
  %9 = zext i32 %bf.cast9 to i64, !dbg !7889
  %bf.load12 = load i64, i64* %8, align 8, !dbg !7889
  %bf.value13 = and i64 %9, 1, !dbg !7889
  %bf.shl14 = shl i64 %bf.value13, 10, !dbg !7889
  %bf.clear15 = and i64 %bf.load12, -1025, !dbg !7889
  %bf.set16 = or i64 %bf.clear15, %bf.shl14, !dbg !7889
  store i64 %bf.set16, i64* %8, align 8, !dbg !7889
  %bf.result.cast17 = trunc i64 %bf.value13 to i32, !dbg !7889
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7890
  %decl_common18 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !7890
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 7, !dbg !7890
  %11 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !7890
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !7890
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7890

cond.true:                                        ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7890
  %decl_common19 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !7890
  %abstract_origin20 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common19, i32 0, i32 7, !dbg !7890
  %13 = load %union.tree_node*, %union.tree_node** %abstract_origin20, align 8, !dbg !7890
  br label %cond.end, !dbg !7890

cond.false:                                       ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7890
  br label %cond.end, !dbg !7890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %13, %cond.true ], [ %14, %cond.false ], !dbg !7890
  %15 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7891
  %decl_common21 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !7891
  %abstract_origin22 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 7, !dbg !7891
  store %union.tree_node* %cond, %union.tree_node** %abstract_origin22, align 8, !dbg !7892
  %16 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7893
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7893
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !7893
  %bf.load23 = load i64, i64* %17, align 8, !dbg !7893
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !7893
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !7893
  %idxprom = zext i32 %bf.cast25 to i64, !dbg !7893
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !7893
  %arrayidx26 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !7893
  %18 = load i8, i8* %arrayidx26, align 1, !dbg !7893
  %conv = zext i8 %18 to i32, !dbg !7893
  %tobool27 = icmp ne i32 %conv, 0, !dbg !7893
  br i1 %tobool27, label %land.lhs.true, label %if.end, !dbg !7895

land.lhs.true:                                    ; preds = %cond.end
  %19 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7896
  %base28 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !7896
  %20 = bitcast %struct.tree_base* %base28 to i64*, !dbg !7896
  %bf.load29 = load i64, i64* %20, align 8, !dbg !7896
  %bf.lshr30 = lshr i64 %bf.load29, 26, !dbg !7896
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !7896
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !7896
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !7896
  br i1 %tobool33, label %if.end, label %land.lhs.true34, !dbg !7897

land.lhs.true34:                                  ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7898
  %decl_common35 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !7898
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common35, i32 0, i32 2, !dbg !7898
  %22 = bitcast i40* %decl_flag_1 to i64*, !dbg !7898
  %bf.load36 = load i64, i64* %22, align 8, !dbg !7898
  %bf.lshr37 = lshr i64 %bf.load36, 25, !dbg !7898
  %bf.clear38 = and i64 %bf.lshr37, 1, !dbg !7898
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !7898
  %tobool40 = icmp ne i32 %bf.cast39, 0, !dbg !7898
  br i1 %tobool40, label %if.end, label %if.then, !dbg !7899

if.then:                                          ; preds = %land.lhs.true34
  %23 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7900
  call void @set_decl_rtl(%union.tree_node* %23, %struct.rtx_def* null), !dbg !7900
  br label %if.end, !dbg !7900

if.end:                                           ; preds = %if.then, %land.lhs.true34, %land.lhs.true, %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7901
  %base41 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7901
  %25 = bitcast %struct.tree_base* %base41 to i64*, !dbg !7901
  %bf.load42 = load i64, i64* %25, align 8, !dbg !7902
  %bf.clear43 = and i64 %bf.load42, -16777217, !dbg !7902
  %bf.set44 = or i64 %bf.clear43, 16777216, !dbg !7902
  store i64 %bf.set44, i64* %25, align 8, !dbg !7902
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7903
  %decl_minimal = bitcast %union.tree_node* %26 to %struct.tree_decl_minimal*, !dbg !7903
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !7903
  %27 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7903
  %tobool45 = icmp ne %union.tree_node* %27, null, !dbg !7903
  br i1 %tobool45, label %if.else, label %if.then46, !dbg !7905

if.then46:                                        ; preds = %if.end
  br label %if.end64, !dbg !7905

if.else:                                          ; preds = %if.end
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7906
  %decl_minimal47 = bitcast %union.tree_node* %28 to %struct.tree_decl_minimal*, !dbg !7906
  %context48 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal47, i32 0, i32 4, !dbg !7906
  %29 = load %union.tree_node*, %union.tree_node** %context48, align 8, !dbg !7906
  %30 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7908
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %30, i32 0, i32 0, !dbg !7909
  %31 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !7909
  %cmp = icmp ne %union.tree_node* %29, %31, !dbg !7910
  br i1 %cmp, label %if.then50, label %if.else51, !dbg !7911

if.then50:                                        ; preds = %if.else
  br label %if.end63, !dbg !7911

if.else51:                                        ; preds = %if.else
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7912
  %base52 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !7912
  %33 = bitcast %struct.tree_base* %base52 to i64*, !dbg !7912
  %bf.load53 = load i64, i64* %33, align 8, !dbg !7912
  %bf.lshr54 = lshr i64 %bf.load53, 26, !dbg !7912
  %bf.clear55 = and i64 %bf.lshr54, 1, !dbg !7912
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !7912
  %tobool57 = icmp ne i32 %bf.cast56, 0, !dbg !7912
  br i1 %tobool57, label %if.then58, label %if.else59, !dbg !7914

if.then58:                                        ; preds = %if.else51
  br label %if.end62, !dbg !7914

if.else59:                                        ; preds = %if.else51
  %34 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !7915
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %34, i32 0, i32 1, !dbg !7916
  %35 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !7916
  %36 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7917
  %decl_minimal60 = bitcast %union.tree_node* %36 to %struct.tree_decl_minimal*, !dbg !7917
  %context61 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal60, i32 0, i32 4, !dbg !7917
  store %union.tree_node* %35, %union.tree_node** %context61, align 8, !dbg !7918
  br label %if.end62

if.end62:                                         ; preds = %if.else59, %if.then58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then50
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then46
  %37 = load %union.tree_node*, %union.tree_node** %copy.addr, align 8, !dbg !7919
  ret %union.tree_node* %37, !dbg !7920
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_versionable_function_p(%union.tree_node* %fndecl) #0 !dbg !7921 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7922, metadata !DIExpression()), !dbg !7923
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7924
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !7924
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !7924
  %1 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !7924
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), %union.tree_node* %1), !dbg !7925
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !7925
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7926

land.rhs:                                         ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7927
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !7927
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !7927
  %3 = load %struct.function*, %struct.function** %f, align 8, !dbg !7927
  %4 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7928
  %call1 = call i8* @copy_forbidden(%struct.function* %3, %union.tree_node* %4), !dbg !7929
  %cmp = icmp eq i8* %call1, null, !dbg !7930
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7931
  %land.ext = zext i1 %5 to i32, !dbg !7926
  %conv = trunc i32 %land.ext to i8, !dbg !7932
  ret i8 %conv, !dbg !7933
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @copy_forbidden(%struct.function* %fun, %union.tree_node* %fndecl) #0 !dbg !7934 {
entry:
  %retval = alloca i8*, align 8
  %fun.addr = alloca %struct.function*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %reason = alloca i8*, align 8
  %step = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !7937, metadata !DIExpression()), !dbg !7938
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7939, metadata !DIExpression()), !dbg !7940
  call void @llvm.dbg.declare(metadata i8** %reason, metadata !7941, metadata !DIExpression()), !dbg !7942
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7943
  %cannot_be_copied_reason = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 19, !dbg !7944
  %1 = load i8*, i8** %cannot_be_copied_reason, align 8, !dbg !7944
  store i8* %1, i8** %reason, align 8, !dbg !7942
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !7945, metadata !DIExpression()), !dbg !7946
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7947
  %cannot_be_copied_set = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 20, !dbg !7949
  %bf.load = load i32, i32* %cannot_be_copied_set, align 8, !dbg !7949
  %bf.lshr = lshr i32 %bf.load, 21, !dbg !7949
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7949
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !7947
  br i1 %tobool, label %if.then, label %if.end, !dbg !7950

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %reason, align 8, !dbg !7951
  store i8* %3, i8** %retval, align 8, !dbg !7952
  br label %return, !dbg !7952

if.end:                                           ; preds = %entry
  %4 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7953
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 20, !dbg !7955
  %bf.load1 = load i32, i32* %has_nonlocal_label, align 8, !dbg !7955
  %bf.lshr2 = lshr i32 %bf.load1, 20, !dbg !7955
  %bf.clear3 = and i32 %bf.lshr2, 1, !dbg !7955
  %tobool4 = icmp ne i32 %bf.clear3, 0, !dbg !7953
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !7956

if.then5:                                         ; preds = %if.end
  store i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.22, i64 0, i64 0), i8** %reason, align 8, !dbg !7957
  br label %fail, !dbg !7959

if.end6:                                          ; preds = %if.end
  %5 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7960
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 9, !dbg !7962
  %6 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !7962
  store %union.tree_node* %6, %union.tree_node** %step, align 8, !dbg !7963
  br label %for.cond, !dbg !7964

for.cond:                                         ; preds = %for.inc, %if.end6
  %7 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7965
  %tobool7 = icmp ne %union.tree_node* %7, null, !dbg !7967
  br i1 %tobool7, label %for.body, label %for.end, !dbg !7967

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7968, metadata !DIExpression()), !dbg !7970
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7971
  %list = bitcast %union.tree_node* %8 to %struct.tree_list*, !dbg !7971
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !7971
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7971
  store %union.tree_node* %9, %union.tree_node** %decl, align 8, !dbg !7970
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7972
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7972
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !7972
  %bf.load8 = load i64, i64* %11, align 8, !dbg !7972
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !7972
  %bf.cast = trunc i64 %bf.clear9 to i32, !dbg !7972
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7974
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !7975

land.lhs.true:                                    ; preds = %for.body
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7976
  %base10 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7976
  %13 = bitcast %struct.tree_base* %base10 to i64*, !dbg !7976
  %bf.load11 = load i64, i64* %13, align 8, !dbg !7976
  %bf.lshr12 = lshr i64 %bf.load11, 26, !dbg !7976
  %bf.clear13 = and i64 %bf.lshr12, 1, !dbg !7976
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !7976
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !7976
  br i1 %tobool15, label %land.lhs.true16, label %if.end30, !dbg !7977

land.lhs.true16:                                  ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7978
  %decl_common = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !7978
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7978
  %15 = bitcast i40* %decl_flag_1 to i64*, !dbg !7978
  %bf.load17 = load i64, i64* %15, align 8, !dbg !7978
  %bf.lshr18 = lshr i64 %bf.load17, 25, !dbg !7978
  %bf.clear19 = and i64 %bf.lshr18, 1, !dbg !7978
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !7978
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !7978
  br i1 %tobool21, label %if.end30, label %land.lhs.true22, !dbg !7979

land.lhs.true22:                                  ; preds = %land.lhs.true16
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7980
  %decl_common23 = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !7980
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common23, i32 0, i32 5, !dbg !7980
  %17 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7980
  %tobool24 = icmp ne %union.tree_node* %17, null, !dbg !7980
  br i1 %tobool24, label %land.lhs.true25, label %if.end30, !dbg !7981

land.lhs.true25:                                  ; preds = %land.lhs.true22
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7982
  %decl_common26 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !7982
  %initial27 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 5, !dbg !7982
  %19 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7982
  %20 = bitcast %union.tree_node* %19 to i8*, !dbg !7982
  %call = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** %initial27, %union.tree_node* (%union.tree_node**, i32*, i8*)* @has_label_address_in_static_1, i8* %20, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7982
  %tobool28 = icmp ne %union.tree_node* %call, null, !dbg !7982
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !7983

if.then29:                                        ; preds = %land.lhs.true25
  store i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.23, i64 0, i64 0), i8** %reason, align 8, !dbg !7984
  br label %fail, !dbg !7986

if.end30:                                         ; preds = %land.lhs.true25, %land.lhs.true22, %land.lhs.true16, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7987

for.inc:                                          ; preds = %if.end30
  %21 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7988
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7988
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7988
  %22 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7988
  store %union.tree_node* %22, %union.tree_node** %step, align 8, !dbg !7989
  br label %for.cond, !dbg !7990, !llvm.loop !7991

for.end:                                          ; preds = %for.cond
  br label %fail, !dbg !7992

fail:                                             ; preds = %for.end, %if.then29, %if.then5
  call void @llvm.dbg.label(metadata !7993), !dbg !7994
  %23 = load i8*, i8** %reason, align 8, !dbg !7995
  %24 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7996
  %cannot_be_copied_reason31 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 19, !dbg !7997
  store i8* %23, i8** %cannot_be_copied_reason31, align 8, !dbg !7998
  %25 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7999
  %cannot_be_copied_set32 = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 20, !dbg !8000
  %bf.load33 = load i32, i32* %cannot_be_copied_set32, align 8, !dbg !8001
  %bf.clear34 = and i32 %bf.load33, -2097153, !dbg !8001
  %bf.set = or i32 %bf.clear34, 2097152, !dbg !8001
  store i32 %bf.set, i32* %cannot_be_copied_set32, align 8, !dbg !8001
  %26 = load i8*, i8** %reason, align 8, !dbg !8002
  store i8* %26, i8** %retval, align 8, !dbg !8003
  br label %return, !dbg !8003

return:                                           ; preds = %fail, %if.then
  %27 = load i8*, i8** %retval, align 8, !dbg !8004
  ret i8* %27, !dbg !8004
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree_function_versioning(%union.tree_node* %old_decl, %union.tree_node* %new_decl, %struct.VEC_ipa_replace_map_p_gc* %tree_map, i8 zeroext %update_clones, %struct.bitmap_head_def* %args_to_skip) #0 !dbg !8005 {
entry:
  %old_decl.addr = alloca %union.tree_node*, align 8
  %new_decl.addr = alloca %union.tree_node*, align 8
  %tree_map.addr = alloca %struct.VEC_ipa_replace_map_p_gc*, align 8
  %update_clones.addr = alloca i8, align 1
  %args_to_skip.addr = alloca %struct.bitmap_head_def*, align 8
  %old_version_node = alloca %struct.cgraph_node*, align 8
  %new_version_node = alloca %struct.cgraph_node*, align 8
  %id = alloca %struct.copy_body_data, align 8
  %p = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %replace_info = alloca %struct.ipa_replace_map*, align 8
  %old_entry_block = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %init_stmts = alloca %struct.VEC_gimple_heap*, align 8
  %t_step = alloca %union.tree_node*, align 8
  %old_current_function_decl = alloca %union.tree_node*, align 8
  %vars = alloca %union.tree_node*, align 8
  %old_transforms_to_apply = alloca %struct.VEC_ipa_opt_pass_heap*, align 8
  %i32 = alloca i32, align 4
  %init = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %res_decl = alloca %union.tree_node**, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  store %union.tree_node* %old_decl, %union.tree_node** %old_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl.addr, metadata !8008, metadata !DIExpression()), !dbg !8009
  store %union.tree_node* %new_decl, %union.tree_node** %new_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl.addr, metadata !8010, metadata !DIExpression()), !dbg !8011
  store %struct.VEC_ipa_replace_map_p_gc* %tree_map, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, metadata !8012, metadata !DIExpression()), !dbg !8013
  store i8 %update_clones, i8* %update_clones.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_clones.addr, metadata !8014, metadata !DIExpression()), !dbg !8015
  store %struct.bitmap_head_def* %args_to_skip, %struct.bitmap_head_def** %args_to_skip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %args_to_skip.addr, metadata !8016, metadata !DIExpression()), !dbg !8017
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %old_version_node, metadata !8018, metadata !DIExpression()), !dbg !8019
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_version_node, metadata !8020, metadata !DIExpression()), !dbg !8021
  call void @llvm.dbg.declare(metadata %struct.copy_body_data* %id, metadata !8022, metadata !DIExpression()), !dbg !8023
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !8024, metadata !DIExpression()), !dbg !8025
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8026, metadata !DIExpression()), !dbg !8027
  call void @llvm.dbg.declare(metadata %struct.ipa_replace_map** %replace_info, metadata !8028, metadata !DIExpression()), !dbg !8029
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_entry_block, metadata !8030, metadata !DIExpression()), !dbg !8031
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8032, metadata !DIExpression()), !dbg !8033
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %init_stmts, metadata !8034, metadata !DIExpression()), !dbg !8035
  %call = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 10), !dbg !8036
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !8035
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_step, metadata !8037, metadata !DIExpression()), !dbg !8038
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_current_function_decl, metadata !8039, metadata !DIExpression()), !dbg !8040
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8041
  store %union.tree_node* %0, %union.tree_node** %old_current_function_decl, align 8, !dbg !8040
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars, metadata !8042, metadata !DIExpression()), !dbg !8043
  store %union.tree_node* null, %union.tree_node** %vars, align 8, !dbg !8043
  %1 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8044
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8044
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8044
  %bf.load = load i64, i64* %2, align 8, !dbg !8044
  %bf.clear = and i64 %bf.load, 65535, !dbg !8044
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8044
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !8044
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8044

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8044
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8044
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8044
  %bf.load2 = load i64, i64* %4, align 8, !dbg !8044
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8044
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8044
  %cmp5 = icmp eq i32 %bf.cast4, 29, !dbg !8044
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !8044

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4777, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8044
  br label %cond.end, !dbg !8044

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8044

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8044
  %5 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8045
  %function_decl = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !8045
  %possibly_inlined = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8045
  %bf.load6 = load i32, i32* %possibly_inlined, align 8, !dbg !8046
  %bf.clear7 = and i32 %bf.load6, -65537, !dbg !8046
  %bf.set = or i32 %bf.clear7, 65536, !dbg !8046
  store i32 %bf.set, i32* %possibly_inlined, align 8, !dbg !8046
  %6 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8047
  %call8 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %6), !dbg !8048
  store %struct.cgraph_node* %call8, %struct.cgraph_node** %old_version_node, align 8, !dbg !8049
  %7 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8050
  %call9 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %7), !dbg !8051
  store %struct.cgraph_node* %call9, %struct.cgraph_node** %new_version_node, align 8, !dbg !8052
  %8 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !8053
  %outlining_inline_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %8, i32 0, i32 21, !dbg !8054
  %9 = load void (%union.tree_node*)*, void (%union.tree_node*)** %outlining_inline_function, align 8, !dbg !8054
  %10 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8055
  call void %9(%union.tree_node* %10), !dbg !8056
  %11 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8057
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !8057
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8057
  %12 = bitcast i40* %artificial_flag to i64*, !dbg !8057
  %bf.load10 = load i64, i64* %12, align 8, !dbg !8058
  %bf.clear11 = and i64 %bf.load10, -4097, !dbg !8058
  %bf.set12 = or i64 %bf.clear11, 4096, !dbg !8058
  store i64 %bf.set12, i64* %12, align 8, !dbg !8058
  %13 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8059
  %decl_common13 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !8059
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common13, i32 0, i32 7, !dbg !8059
  %14 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !8059
  %tobool = icmp ne %union.tree_node* %14, null, !dbg !8059
  br i1 %tobool, label %cond.true14, label %cond.false17, !dbg !8059

cond.true14:                                      ; preds = %cond.end
  %15 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8059
  %decl_common15 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !8059
  %abstract_origin16 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common15, i32 0, i32 7, !dbg !8059
  %16 = load %union.tree_node*, %union.tree_node** %abstract_origin16, align 8, !dbg !8059
  br label %cond.end18, !dbg !8059

cond.false17:                                     ; preds = %cond.end
  %17 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8059
  br label %cond.end18, !dbg !8059

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %union.tree_node* [ %16, %cond.true14 ], [ %17, %cond.false17 ], !dbg !8059
  %18 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8060
  %decl_common20 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !8060
  %abstract_origin21 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 7, !dbg !8060
  store %union.tree_node* %cond19, %union.tree_node** %abstract_origin21, align 8, !dbg !8061
  %19 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8062
  %function_decl22 = bitcast %union.tree_node* %19 to %struct.tree_function_decl*, !dbg !8062
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl22, i32 0, i32 2, !dbg !8062
  %20 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !8062
  %21 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8063
  %function_decl23 = bitcast %union.tree_node* %21 to %struct.tree_function_decl*, !dbg !8063
  %personality24 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl23, i32 0, i32 2, !dbg !8063
  store %union.tree_node* %20, %union.tree_node** %personality24, align 8, !dbg !8064
  %22 = bitcast %struct.copy_body_data* %id to i8*, !dbg !8065
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 152, i1 false), !dbg !8065
  %call25 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !8066
  %statements_to_fold = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 19, !dbg !8067
  store %struct.pointer_set_t* %call25, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !8068
  %call26 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !8069
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !8070
  store %struct.pointer_map_t* %call26, %struct.pointer_map_t** %decl_map, align 8, !dbg !8071
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !8072
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !8073
  %23 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8074
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !8075
  store %union.tree_node* %23, %union.tree_node** %src_fn, align 8, !dbg !8076
  %24 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8077
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !8078
  store %union.tree_node* %24, %union.tree_node** %dst_fn, align 8, !dbg !8079
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %old_version_node, align 8, !dbg !8080
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 2, !dbg !8081
  store %struct.cgraph_node* %25, %struct.cgraph_node** %src_node, align 8, !dbg !8082
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %new_version_node, align 8, !dbg !8083
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 3, !dbg !8084
  store %struct.cgraph_node* %26, %struct.cgraph_node** %dst_node, align 8, !dbg !8085
  %27 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8086
  %function_decl27 = bitcast %union.tree_node* %27 to %struct.tree_function_decl*, !dbg !8086
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl27, i32 0, i32 1, !dbg !8086
  %28 = load %struct.function*, %struct.function** %f, align 8, !dbg !8086
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 4, !dbg !8087
  store %struct.function* %28, %struct.function** %src_cfun, align 8, !dbg !8088
  %src_node28 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 2, !dbg !8089
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node28, align 8, !dbg !8089
  %ipa_transforms_to_apply = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 17, !dbg !8091
  %30 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply, align 8, !dbg !8091
  %tobool29 = icmp ne %struct.VEC_ipa_opt_pass_heap* %30, null, !dbg !8092
  br i1 %tobool29, label %if.then, label %if.end, !dbg !8093

if.then:                                          ; preds = %cond.end18
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_heap** %old_transforms_to_apply, metadata !8094, metadata !DIExpression()), !dbg !8096
  %dst_node30 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 3, !dbg !8097
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node30, align 8, !dbg !8097
  %ipa_transforms_to_apply31 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 17, !dbg !8098
  %32 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply31, align 8, !dbg !8098
  store %struct.VEC_ipa_opt_pass_heap* %32, %struct.VEC_ipa_opt_pass_heap** %old_transforms_to_apply, align 8, !dbg !8096
  call void @llvm.dbg.declare(metadata i32* %i32, metadata !8099, metadata !DIExpression()), !dbg !8100
  %src_node33 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 2, !dbg !8101
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node33, align 8, !dbg !8101
  %ipa_transforms_to_apply34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 17, !dbg !8101
  %34 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply34, align 8, !dbg !8101
  %tobool35 = icmp ne %struct.VEC_ipa_opt_pass_heap* %34, null, !dbg !8101
  br i1 %tobool35, label %cond.true36, label %cond.false40, !dbg !8101

cond.true36:                                      ; preds = %if.then
  %src_node37 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 2, !dbg !8101
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node37, align 8, !dbg !8101
  %ipa_transforms_to_apply38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 17, !dbg !8101
  %36 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply38, align 8, !dbg !8101
  %base39 = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %36, i32 0, i32 0, !dbg !8101
  br label %cond.end41, !dbg !8101

cond.false40:                                     ; preds = %if.then
  br label %cond.end41, !dbg !8101

cond.end41:                                       ; preds = %cond.false40, %cond.true36
  %cond42 = phi %struct.VEC_ipa_opt_pass_base* [ %base39, %cond.true36 ], [ null, %cond.false40 ], !dbg !8101
  %call43 = call %struct.VEC_ipa_opt_pass_heap* @VEC_ipa_opt_pass_heap_copy(%struct.VEC_ipa_opt_pass_base* %cond42), !dbg !8101
  %dst_node44 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 3, !dbg !8102
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node44, align 8, !dbg !8102
  %ipa_transforms_to_apply45 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 17, !dbg !8103
  store %struct.VEC_ipa_opt_pass_heap* %call43, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply45, align 8, !dbg !8104
  store i32 0, i32* %i32, align 4, !dbg !8105
  br label %for.cond, !dbg !8107

for.cond:                                         ; preds = %for.inc, %cond.end41
  %38 = load i32, i32* %i32, align 4, !dbg !8108
  %39 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %old_transforms_to_apply, align 8, !dbg !8110
  %tobool46 = icmp ne %struct.VEC_ipa_opt_pass_heap* %39, null, !dbg !8110
  br i1 %tobool46, label %cond.true47, label %cond.false49, !dbg !8110

cond.true47:                                      ; preds = %for.cond
  %40 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %old_transforms_to_apply, align 8, !dbg !8110
  %base48 = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %40, i32 0, i32 0, !dbg !8110
  br label %cond.end50, !dbg !8110

cond.false49:                                     ; preds = %for.cond
  br label %cond.end50, !dbg !8110

cond.end50:                                       ; preds = %cond.false49, %cond.true47
  %cond51 = phi %struct.VEC_ipa_opt_pass_base* [ %base48, %cond.true47 ], [ null, %cond.false49 ], !dbg !8110
  %call52 = call i32 @VEC_ipa_opt_pass_base_length(%struct.VEC_ipa_opt_pass_base* %cond51), !dbg !8110
  %cmp53 = icmp ult i32 %38, %call52, !dbg !8111
  br i1 %cmp53, label %for.body, label %for.end, !dbg !8112

for.body:                                         ; preds = %cond.end50
  %dst_node54 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 3, !dbg !8113
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node54, align 8, !dbg !8113
  %ipa_transforms_to_apply55 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 17, !dbg !8113
  %42 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %old_transforms_to_apply, align 8, !dbg !8113
  %tobool56 = icmp ne %struct.VEC_ipa_opt_pass_heap* %42, null, !dbg !8113
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !8113

cond.true57:                                      ; preds = %for.body
  %43 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %old_transforms_to_apply, align 8, !dbg !8113
  %base58 = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %43, i32 0, i32 0, !dbg !8113
  br label %cond.end60, !dbg !8113

cond.false59:                                     ; preds = %for.body
  br label %cond.end60, !dbg !8113

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_ipa_opt_pass_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !8113
  %44 = load i32, i32* %i32, align 4, !dbg !8113
  %call62 = call %struct.ipa_opt_pass_d* @VEC_ipa_opt_pass_base_index(%struct.VEC_ipa_opt_pass_base* %cond61, i32 %44), !dbg !8113
  %call63 = call %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_heap_safe_push(%struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply55, %struct.ipa_opt_pass_d* %call62), !dbg !8113
  br label %for.inc, !dbg !8113

for.inc:                                          ; preds = %cond.end60
  %45 = load i32, i32* %i32, align 4, !dbg !8114
  %inc = add i32 %45, 1, !dbg !8114
  store i32 %inc, i32* %i32, align 4, !dbg !8114
  br label %for.cond, !dbg !8115, !llvm.loop !8116

for.end:                                          ; preds = %cond.end50
  br label %if.end, !dbg !8118

if.end:                                           ; preds = %for.end, %cond.end18
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 7, !dbg !8119
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !8120
  %46 = load i8, i8* %update_clones.addr, align 1, !dbg !8121
  %conv = zext i8 %46 to i32, !dbg !8121
  %tobool64 = icmp ne i32 %conv, 0, !dbg !8121
  %47 = zext i1 %tobool64 to i64, !dbg !8121
  %cond65 = select i1 %tobool64, i32 2, i32 1, !dbg !8121
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 12, !dbg !8122
  store i32 %cond65, i32* %transform_call_graph_edges, align 8, !dbg !8123
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 13, !dbg !8124
  store i8 1, i8* %transform_new_cfg, align 4, !dbg !8125
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 14, !dbg !8126
  store i8 0, i8* %transform_return_to_modify, align 1, !dbg !8127
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 18, !dbg !8128
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !8129
  %48 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8130
  store %union.tree_node* %48, %union.tree_node** @current_function_decl, align 8, !dbg !8131
  %49 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8132
  %function_decl66 = bitcast %union.tree_node* %49 to %struct.tree_function_decl*, !dbg !8132
  %f67 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl66, i32 0, i32 1, !dbg !8132
  %50 = load %struct.function*, %struct.function** %f67, align 8, !dbg !8132
  %cfg = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 1, !dbg !8132
  %51 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8132
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %51, i32 0, i32 0, !dbg !8132
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8132
  store %struct.basic_block_def* %52, %struct.basic_block_def** %old_entry_block, align 8, !dbg !8133
  %53 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8134
  %54 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8135
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %old_entry_block, align 8, !dbg !8136
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 8, !dbg !8137
  %56 = load i64, i64* %count, align 8, !dbg !8137
  call void @initialize_cfun(%union.tree_node* %53, %union.tree_node* %54, i64 %56), !dbg !8138
  %57 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8139
  %function_decl68 = bitcast %union.tree_node* %57 to %struct.tree_function_decl*, !dbg !8139
  %f69 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl68, i32 0, i32 1, !dbg !8139
  %58 = load %struct.function*, %struct.function** %f69, align 8, !dbg !8139
  call void @push_cfun(%struct.function* %58), !dbg !8140
  %59 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8141
  %function_decl70 = bitcast %union.tree_node* %59 to %struct.tree_function_decl*, !dbg !8141
  %f71 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl70, i32 0, i32 1, !dbg !8141
  %60 = load %struct.function*, %struct.function** %f71, align 8, !dbg !8141
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %60, i32 0, i32 7, !dbg !8142
  %61 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !8142
  store %union.tree_node* %61, %union.tree_node** %p, align 8, !dbg !8143
  %62 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !8144
  %tobool72 = icmp ne %union.tree_node* %62, null, !dbg !8144
  br i1 %tobool72, label %if.then73, label %if.end81, !dbg !8146

if.then73:                                        ; preds = %if.end
  %63 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8147
  %function_decl74 = bitcast %union.tree_node* %63 to %struct.tree_function_decl*, !dbg !8147
  %f75 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl74, i32 0, i32 1, !dbg !8147
  %64 = load %struct.function*, %struct.function** %f75, align 8, !dbg !8147
  %static_chain_decl76 = getelementptr inbounds %struct.function, %struct.function* %64, i32 0, i32 7, !dbg !8148
  %65 = load %union.tree_node*, %union.tree_node** %static_chain_decl76, align 8, !dbg !8148
  %call77 = call %union.tree_node* @copy_static_chain(%union.tree_node* %65, %struct.copy_body_data* %id), !dbg !8149
  %66 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8150
  %function_decl78 = bitcast %union.tree_node* %66 to %struct.tree_function_decl*, !dbg !8150
  %f79 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl78, i32 0, i32 1, !dbg !8150
  %67 = load %struct.function*, %struct.function** %f79, align 8, !dbg !8150
  %static_chain_decl80 = getelementptr inbounds %struct.function, %struct.function* %67, i32 0, i32 7, !dbg !8151
  store %union.tree_node* %call77, %union.tree_node** %static_chain_decl80, align 8, !dbg !8152
  br label %if.end81, !dbg !8150

if.end81:                                         ; preds = %if.then73, %if.end
  %68 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !8153
  %tobool82 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %68, null, !dbg !8153
  br i1 %tobool82, label %if.then83, label %if.end160, !dbg !8155

if.then83:                                        ; preds = %if.end81
  store i32 0, i32* %i, align 4, !dbg !8156
  br label %for.cond84, !dbg !8158

for.cond84:                                       ; preds = %for.inc157, %if.then83
  %69 = load i32, i32* %i, align 4, !dbg !8159
  %70 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !8161
  %tobool85 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %70, null, !dbg !8161
  br i1 %tobool85, label %cond.true86, label %cond.false88, !dbg !8161

cond.true86:                                      ; preds = %for.cond84
  %71 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !8161
  %base87 = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %71, i32 0, i32 0, !dbg !8161
  br label %cond.end89, !dbg !8161

cond.false88:                                     ; preds = %for.cond84
  br label %cond.end89, !dbg !8161

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi %struct.VEC_ipa_replace_map_p_base* [ %base87, %cond.true86 ], [ null, %cond.false88 ], !dbg !8161
  %call91 = call i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %cond90), !dbg !8161
  %cmp92 = icmp ult i32 %69, %call91, !dbg !8162
  br i1 %cmp92, label %for.body94, label %for.end159, !dbg !8163

for.body94:                                       ; preds = %cond.end89
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init, metadata !8164, metadata !DIExpression()), !dbg !8166
  %72 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !8167
  %tobool95 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %72, null, !dbg !8167
  br i1 %tobool95, label %cond.true96, label %cond.false98, !dbg !8167

cond.true96:                                      ; preds = %for.body94
  %73 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !8167
  %base97 = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %73, i32 0, i32 0, !dbg !8167
  br label %cond.end99, !dbg !8167

cond.false98:                                     ; preds = %for.body94
  br label %cond.end99, !dbg !8167

cond.end99:                                       ; preds = %cond.false98, %cond.true96
  %cond100 = phi %struct.VEC_ipa_replace_map_p_base* [ %base97, %cond.true96 ], [ null, %cond.false98 ], !dbg !8167
  %74 = load i32, i32* %i, align 4, !dbg !8167
  %call101 = call %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %cond100, i32 %74), !dbg !8167
  store %struct.ipa_replace_map* %call101, %struct.ipa_replace_map** %replace_info, align 8, !dbg !8168
  %75 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !8169
  %replace_p = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %75, i32 0, i32 2, !dbg !8171
  %76 = load i8, i8* %replace_p, align 8, !dbg !8171
  %tobool102 = icmp ne i8 %76, 0, !dbg !8169
  br i1 %tobool102, label %if.then103, label %if.end156, !dbg !8172

if.then103:                                       ; preds = %cond.end99
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !8173, metadata !DIExpression()), !dbg !8175
  %77 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !8176
  %new_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %77, i32 0, i32 1, !dbg !8177
  %78 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8177
  store %union.tree_node* %78, %union.tree_node** %op, align 8, !dbg !8175
  %79 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8178
  %call104 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %79), !dbg !8178
  store %union.tree_node* %call104, %union.tree_node** %op, align 8, !dbg !8178
  %80 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8179
  %base105 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !8179
  %81 = bitcast %struct.tree_base* %base105 to i64*, !dbg !8179
  %bf.load106 = load i64, i64* %81, align 8, !dbg !8179
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !8179
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !8179
  %cmp109 = icmp eq i32 %bf.cast108, 118, !dbg !8181
  br i1 %cmp109, label %if.then111, label %if.end112, !dbg !8182

if.then111:                                       ; preds = %if.then103
  %82 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8183
  %exp = bitcast %union.tree_node* %82 to %struct.tree_exp*, !dbg !8183
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8183
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8183
  %83 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8183
  store %union.tree_node* %83, %union.tree_node** %op, align 8, !dbg !8184
  br label %if.end112, !dbg !8185

if.end112:                                        ; preds = %if.then111, %if.then103
  %84 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8186
  %base113 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !8186
  %85 = bitcast %struct.tree_base* %base113 to i64*, !dbg !8186
  %bf.load114 = load i64, i64* %85, align 8, !dbg !8186
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !8186
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !8186
  %cmp117 = icmp eq i32 %bf.cast116, 121, !dbg !8188
  br i1 %cmp117, label %if.then119, label %if.end137, !dbg !8189

if.then119:                                       ; preds = %if.end112
  %86 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8190
  %exp120 = bitcast %union.tree_node* %86 to %struct.tree_exp*, !dbg !8190
  %operands121 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp120, i32 0, i32 3, !dbg !8190
  %arrayidx122 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands121, i64 0, i64 0, !dbg !8190
  %87 = load %union.tree_node*, %union.tree_node** %arrayidx122, align 8, !dbg !8190
  store %union.tree_node* %87, %union.tree_node** %op, align 8, !dbg !8192
  br label %while.cond, !dbg !8193

while.cond:                                       ; preds = %while.body, %if.then119
  %88 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8194
  %call123 = call zeroext i8 @handled_component_p(%union.tree_node* %88), !dbg !8195
  %tobool124 = icmp ne i8 %call123, 0, !dbg !8193
  br i1 %tobool124, label %while.body, label %while.end, !dbg !8193

while.body:                                       ; preds = %while.cond
  %89 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8196
  %exp125 = bitcast %union.tree_node* %89 to %struct.tree_exp*, !dbg !8196
  %operands126 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp125, i32 0, i32 3, !dbg !8196
  %arrayidx127 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands126, i64 0, i64 0, !dbg !8196
  %90 = load %union.tree_node*, %union.tree_node** %arrayidx127, align 8, !dbg !8196
  store %union.tree_node* %90, %union.tree_node** %op, align 8, !dbg !8197
  br label %while.cond, !dbg !8193, !llvm.loop !8198

while.end:                                        ; preds = %while.cond
  %91 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8199
  %base128 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !8199
  %92 = bitcast %struct.tree_base* %base128 to i64*, !dbg !8199
  %bf.load129 = load i64, i64* %92, align 8, !dbg !8199
  %bf.clear130 = and i64 %bf.load129, 65535, !dbg !8199
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !8199
  %cmp132 = icmp eq i32 %bf.cast131, 32, !dbg !8201
  br i1 %cmp132, label %if.then134, label %if.end136, !dbg !8202

if.then134:                                       ; preds = %while.end
  %93 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !8203
  %call135 = call zeroext i8 @add_referenced_var(%union.tree_node* %93), !dbg !8204
  br label %if.end136, !dbg !8204

if.end136:                                        ; preds = %if.then134, %while.end
  br label %if.end137, !dbg !8205

if.end137:                                        ; preds = %if.end136, %if.end112
  %94 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !8206
  %old_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %94, i32 0, i32 0, !dbg !8206
  %95 = load %union.tree_node*, %union.tree_node** %old_tree, align 8, !dbg !8206
  %base138 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !8206
  %96 = bitcast %struct.tree_base* %base138 to i64*, !dbg !8206
  %bf.load139 = load i64, i64* %96, align 8, !dbg !8206
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !8206
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !8206
  %cmp142 = icmp eq i32 %bf.cast141, 34, !dbg !8206
  br i1 %cmp142, label %cond.false145, label %cond.true144, !dbg !8206

cond.true144:                                     ; preds = %if.end137
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4864, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8206
  br label %cond.end146, !dbg !8206

cond.false145:                                    ; preds = %if.end137
  br label %cond.end146, !dbg !8206

cond.end146:                                      ; preds = %cond.false145, %cond.true144
  %cond147 = phi i32 [ 0, %cond.true144 ], [ 0, %cond.false145 ], !dbg !8206
  %97 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !8207
  %old_tree148 = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %97, i32 0, i32 0, !dbg !8208
  %98 = load %union.tree_node*, %union.tree_node** %old_tree148, align 8, !dbg !8208
  %99 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !8209
  %new_tree149 = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %99, i32 0, i32 1, !dbg !8210
  %100 = load %union.tree_node*, %union.tree_node** %new_tree149, align 8, !dbg !8210
  %src_fn150 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !8211
  %101 = load %union.tree_node*, %union.tree_node** %src_fn150, align 8, !dbg !8211
  %call151 = call %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %id, %union.tree_node* %98, %union.tree_node* %100, %union.tree_node* %101, %struct.basic_block_def* null, %union.tree_node** %vars), !dbg !8212
  store %union.gimple_statement_d* %call151, %union.gimple_statement_d** %init, align 8, !dbg !8213
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init, align 8, !dbg !8214
  %tobool152 = icmp ne %union.gimple_statement_d* %102, null, !dbg !8214
  br i1 %tobool152, label %if.then153, label %if.end155, !dbg !8216

if.then153:                                       ; preds = %cond.end146
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init, align 8, !dbg !8217
  %call154 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %init_stmts, %union.gimple_statement_d* %103), !dbg !8217
  br label %if.end155, !dbg !8217

if.end155:                                        ; preds = %if.then153, %cond.end146
  br label %if.end156, !dbg !8218

if.end156:                                        ; preds = %if.end155, %cond.end99
  br label %for.inc157, !dbg !8219

for.inc157:                                       ; preds = %if.end156
  %104 = load i32, i32* %i, align 4, !dbg !8220
  %inc158 = add i32 %104, 1, !dbg !8220
  store i32 %inc158, i32* %i, align 4, !dbg !8220
  br label %for.cond84, !dbg !8221, !llvm.loop !8222

for.end159:                                       ; preds = %cond.end89
  br label %if.end160, !dbg !8223

if.end160:                                        ; preds = %for.end159, %if.end81
  %105 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8224
  %decl_non_common = bitcast %union.tree_node* %105 to %struct.tree_decl_non_common*, !dbg !8224
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !8224
  %106 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !8224
  %cmp161 = icmp ne %union.tree_node* %106, null, !dbg !8226
  br i1 %cmp161, label %if.then163, label %if.end169, !dbg !8227

if.then163:                                       ; preds = %if.end160
  %107 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8228
  %decl_non_common164 = bitcast %union.tree_node* %107 to %struct.tree_decl_non_common*, !dbg !8228
  %arguments165 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common164, i32 0, i32 2, !dbg !8228
  %108 = load %union.tree_node*, %union.tree_node** %arguments165, align 8, !dbg !8228
  %109 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !8229
  %call166 = call %union.tree_node* @copy_arguments_for_versioning(%union.tree_node* %108, %struct.copy_body_data* %id, %struct.bitmap_head_def* %109, %union.tree_node** %vars), !dbg !8230
  %110 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8231
  %decl_non_common167 = bitcast %union.tree_node* %110 to %struct.tree_decl_non_common*, !dbg !8231
  %arguments168 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common167, i32 0, i32 2, !dbg !8231
  store %union.tree_node* %call166, %union.tree_node** %arguments168, align 8, !dbg !8232
  br label %if.end169, !dbg !8231

if.end169:                                        ; preds = %if.then163, %if.end160
  %src_fn170 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !8233
  %111 = load %union.tree_node*, %union.tree_node** %src_fn170, align 8, !dbg !8233
  %decl_common171 = bitcast %union.tree_node* %111 to %struct.tree_decl_common*, !dbg !8233
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common171, i32 0, i32 5, !dbg !8233
  %112 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !8233
  %call172 = call %union.tree_node* @remap_blocks(%union.tree_node* %112, %struct.copy_body_data* %id), !dbg !8234
  %113 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8235
  %decl_common173 = bitcast %union.tree_node* %113 to %struct.tree_decl_common*, !dbg !8235
  %initial174 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common173, i32 0, i32 5, !dbg !8235
  store %union.tree_node* %call172, %union.tree_node** %initial174, align 8, !dbg !8236
  %dst_fn175 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !8237
  %114 = load %union.tree_node*, %union.tree_node** %dst_fn175, align 8, !dbg !8237
  call void @number_blocks(%union.tree_node* %114), !dbg !8238
  %115 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8239
  %decl_common176 = bitcast %union.tree_node* %115 to %struct.tree_decl_common*, !dbg !8239
  %initial177 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common176, i32 0, i32 5, !dbg !8239
  %116 = load %union.tree_node*, %union.tree_node** %initial177, align 8, !dbg !8239
  %117 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !8240
  call void @declare_inline_vars(%union.tree_node* %116, %union.tree_node* %117), !dbg !8241
  %118 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8242
  %function_decl178 = bitcast %union.tree_node* %118 to %struct.tree_function_decl*, !dbg !8242
  %f179 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl178, i32 0, i32 1, !dbg !8242
  %119 = load %struct.function*, %struct.function** %f179, align 8, !dbg !8242
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %119, i32 0, i32 9, !dbg !8244
  %120 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !8244
  %cmp180 = icmp ne %union.tree_node* %120, null, !dbg !8245
  br i1 %cmp180, label %if.then182, label %if.end219, !dbg !8246

if.then182:                                       ; preds = %if.end169
  %121 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8247
  %function_decl183 = bitcast %union.tree_node* %121 to %struct.tree_function_decl*, !dbg !8247
  %f184 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl183, i32 0, i32 1, !dbg !8247
  %122 = load %struct.function*, %struct.function** %f184, align 8, !dbg !8247
  %local_decls185 = getelementptr inbounds %struct.function, %struct.function* %122, i32 0, i32 9, !dbg !8249
  %123 = load %union.tree_node*, %union.tree_node** %local_decls185, align 8, !dbg !8249
  store %union.tree_node* %123, %union.tree_node** %t_step, align 8, !dbg !8250
  br label %for.cond186, !dbg !8251

for.cond186:                                      ; preds = %for.inc217, %if.then182
  %124 = load %union.tree_node*, %union.tree_node** %t_step, align 8, !dbg !8252
  %tobool187 = icmp ne %union.tree_node* %124, null, !dbg !8254
  br i1 %tobool187, label %for.body188, label %for.end218, !dbg !8254

for.body188:                                      ; preds = %for.cond186
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8255, metadata !DIExpression()), !dbg !8257
  %125 = load %union.tree_node*, %union.tree_node** %t_step, align 8, !dbg !8258
  %list = bitcast %union.tree_node* %125 to %struct.tree_list*, !dbg !8258
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !8258
  %126 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8258
  store %union.tree_node* %126, %union.tree_node** %var, align 8, !dbg !8257
  %127 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8259
  %base189 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !8259
  %128 = bitcast %struct.tree_base* %base189 to i64*, !dbg !8259
  %bf.load190 = load i64, i64* %128, align 8, !dbg !8259
  %bf.lshr = lshr i64 %bf.load190, 26, !dbg !8259
  %bf.clear191 = and i64 %bf.lshr, 1, !dbg !8259
  %bf.cast192 = trunc i64 %bf.clear191 to i32, !dbg !8259
  %tobool193 = icmp ne i32 %bf.cast192, 0, !dbg !8259
  br i1 %tobool193, label %land.lhs.true194, label %if.else, !dbg !8261

land.lhs.true194:                                 ; preds = %for.body188
  %129 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8262
  %base195 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !8262
  %130 = bitcast %struct.tree_base* %base195 to i64*, !dbg !8262
  %bf.load196 = load i64, i64* %130, align 8, !dbg !8262
  %bf.lshr197 = lshr i64 %bf.load196, 22, !dbg !8262
  %bf.clear198 = and i64 %bf.lshr197, 1, !dbg !8262
  %bf.cast199 = trunc i64 %bf.clear198 to i32, !dbg !8262
  %tobool200 = icmp ne i32 %bf.cast199, 0, !dbg !8262
  br i1 %tobool200, label %if.else, label %if.then201, !dbg !8263

if.then201:                                       ; preds = %land.lhs.true194
  %131 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8264
  %132 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8264
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %132, i64 0, !dbg !8264
  %local_decls202 = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 9, !dbg !8264
  %133 = load %union.tree_node*, %union.tree_node** %local_decls202, align 8, !dbg !8264
  %call203 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %131, %union.tree_node* %133), !dbg !8264
  %134 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8265
  %add.ptr204 = getelementptr inbounds %struct.function, %struct.function* %134, i64 0, !dbg !8265
  %local_decls205 = getelementptr inbounds %struct.function, %struct.function* %add.ptr204, i32 0, i32 9, !dbg !8266
  store %union.tree_node* %call203, %union.tree_node** %local_decls205, align 8, !dbg !8267
  br label %if.end216, !dbg !8265

if.else:                                          ; preds = %land.lhs.true194, %for.body188
  %135 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8268
  %call206 = call zeroext i8 @can_be_nonlocal(%union.tree_node* %135, %struct.copy_body_data* %id), !dbg !8270
  %tobool207 = icmp ne i8 %call206, 0, !dbg !8270
  br i1 %tobool207, label %if.end215, label %if.then208, !dbg !8271

if.then208:                                       ; preds = %if.else
  %136 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8272
  %call209 = call %union.tree_node* @remap_decl(%union.tree_node* %136, %struct.copy_body_data* %id), !dbg !8272
  %137 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8272
  %add.ptr210 = getelementptr inbounds %struct.function, %struct.function* %137, i64 0, !dbg !8272
  %local_decls211 = getelementptr inbounds %struct.function, %struct.function* %add.ptr210, i32 0, i32 9, !dbg !8272
  %138 = load %union.tree_node*, %union.tree_node** %local_decls211, align 8, !dbg !8272
  %call212 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call209, %union.tree_node* %138), !dbg !8272
  %139 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8273
  %add.ptr213 = getelementptr inbounds %struct.function, %struct.function* %139, i64 0, !dbg !8273
  %local_decls214 = getelementptr inbounds %struct.function, %struct.function* %add.ptr213, i32 0, i32 9, !dbg !8274
  store %union.tree_node* %call212, %union.tree_node** %local_decls214, align 8, !dbg !8275
  br label %if.end215, !dbg !8273

if.end215:                                        ; preds = %if.then208, %if.else
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %if.then201
  br label %for.inc217, !dbg !8276

for.inc217:                                       ; preds = %if.end216
  %140 = load %union.tree_node*, %union.tree_node** %t_step, align 8, !dbg !8277
  %common = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !8277
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8277
  %141 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8277
  store %union.tree_node* %141, %union.tree_node** %t_step, align 8, !dbg !8278
  br label %for.cond186, !dbg !8279, !llvm.loop !8280

for.end218:                                       ; preds = %for.cond186
  br label %if.end219, !dbg !8281

if.end219:                                        ; preds = %for.end218, %if.end169
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %old_entry_block, align 8, !dbg !8282
  %count220 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %142, i32 0, i32 8, !dbg !8283
  %143 = load i64, i64* %count220, align 8, !dbg !8283
  %144 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8284
  %add.ptr221 = getelementptr inbounds %struct.function, %struct.function* %144, i64 0, !dbg !8284
  %cfg222 = getelementptr inbounds %struct.function, %struct.function* %add.ptr221, i32 0, i32 1, !dbg !8284
  %145 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg222, align 8, !dbg !8284
  %x_entry_block_ptr223 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %145, i32 0, i32 0, !dbg !8284
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr223, align 8, !dbg !8284
  %147 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8285
  %add.ptr224 = getelementptr inbounds %struct.function, %struct.function* %147, i64 0, !dbg !8285
  %cfg225 = getelementptr inbounds %struct.function, %struct.function* %add.ptr224, i32 0, i32 1, !dbg !8285
  %148 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg225, align 8, !dbg !8285
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %148, i32 0, i32 1, !dbg !8285
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8285
  %call226 = call %union.tree_node* @copy_body(%struct.copy_body_data* %id, i64 %143, i32 10000, %struct.basic_block_def* %146, %struct.basic_block_def* %149), !dbg !8286
  %150 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8287
  %decl_non_common227 = bitcast %union.tree_node* %150 to %struct.tree_decl_non_common*, !dbg !8287
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common227, i32 0, i32 3, !dbg !8287
  %151 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8287
  %cmp228 = icmp ne %union.tree_node* %151, null, !dbg !8289
  br i1 %cmp228, label %if.then230, label %if.end238, !dbg !8290

if.then230:                                       ; preds = %if.end219
  call void @llvm.dbg.declare(metadata %union.tree_node*** %res_decl, metadata !8291, metadata !DIExpression()), !dbg !8293
  %152 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !8294
  %decl_non_common231 = bitcast %union.tree_node* %152 to %struct.tree_decl_non_common*, !dbg !8294
  %result232 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common231, i32 0, i32 3, !dbg !8294
  store %union.tree_node** %result232, %union.tree_node*** %res_decl, align 8, !dbg !8293
  %153 = load %union.tree_node**, %union.tree_node*** %res_decl, align 8, !dbg !8295
  %154 = load %union.tree_node*, %union.tree_node** %153, align 8, !dbg !8296
  %call233 = call %union.tree_node* @remap_decl(%union.tree_node* %154, %struct.copy_body_data* %id), !dbg !8297
  %155 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8298
  %decl_non_common234 = bitcast %union.tree_node* %155 to %struct.tree_decl_non_common*, !dbg !8298
  %result235 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common234, i32 0, i32 3, !dbg !8298
  store %union.tree_node* %call233, %union.tree_node** %result235, align 8, !dbg !8299
  %156 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 15), align 8, !dbg !8300
  %157 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8301
  %decl_non_common236 = bitcast %union.tree_node* %157 to %struct.tree_decl_non_common*, !dbg !8301
  %result237 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common236, i32 0, i32 3, !dbg !8301
  %158 = load %union.tree_node*, %union.tree_node** %result237, align 8, !dbg !8301
  call void %156(%union.tree_node* %158), !dbg !8302
  br label %if.end238, !dbg !8303

if.end238:                                        ; preds = %if.then230, %if.end219
  %159 = load %union.tree_node*, %union.tree_node** %new_decl.addr, align 8, !dbg !8304
  call void @number_blocks(%union.tree_node* %159), !dbg !8305
  %160 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8306
  %add.ptr239 = getelementptr inbounds %struct.function, %struct.function* %160, i64 0, !dbg !8306
  %cfg240 = getelementptr inbounds %struct.function, %struct.function* %add.ptr239, i32 0, i32 1, !dbg !8306
  %161 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg240, align 8, !dbg !8306
  %x_entry_block_ptr241 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %161, i32 0, i32 0, !dbg !8306
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr241, align 8, !dbg !8306
  %call242 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %162), !dbg !8307
  %call243 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call242), !dbg !8308
  store %struct.basic_block_def* %call243, %struct.basic_block_def** %bb, align 8, !dbg !8309
  br label %while.cond244, !dbg !8310

while.cond244:                                    ; preds = %cond.end258, %if.end238
  %163 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !8311
  %tobool245 = icmp ne %struct.VEC_gimple_heap* %163, null, !dbg !8311
  br i1 %tobool245, label %cond.true246, label %cond.false248, !dbg !8311

cond.true246:                                     ; preds = %while.cond244
  %164 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !8311
  %base247 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %164, i32 0, i32 0, !dbg !8311
  br label %cond.end249, !dbg !8311

cond.false248:                                    ; preds = %while.cond244
  br label %cond.end249, !dbg !8311

cond.end249:                                      ; preds = %cond.false248, %cond.true246
  %cond250 = phi %struct.VEC_gimple_base* [ %base247, %cond.true246 ], [ null, %cond.false248 ], !dbg !8311
  %call251 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond250), !dbg !8311
  %tobool252 = icmp ne i32 %call251, 0, !dbg !8310
  br i1 %tobool252, label %while.body253, label %while.end261, !dbg !8310

while.body253:                                    ; preds = %cond.end249
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8312
  %166 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !8313
  %tobool254 = icmp ne %struct.VEC_gimple_heap* %166, null, !dbg !8313
  br i1 %tobool254, label %cond.true255, label %cond.false257, !dbg !8313

cond.true255:                                     ; preds = %while.body253
  %167 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !8313
  %base256 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %167, i32 0, i32 0, !dbg !8313
  br label %cond.end258, !dbg !8313

cond.false257:                                    ; preds = %while.body253
  br label %cond.end258, !dbg !8313

cond.end258:                                      ; preds = %cond.false257, %cond.true255
  %cond259 = phi %struct.VEC_gimple_base* [ %base256, %cond.true255 ], [ null, %cond.false257 ], !dbg !8313
  %call260 = call %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %cond259), !dbg !8313
  call void @insert_init_stmt(%struct.copy_body_data* %id, %struct.basic_block_def* %165, %union.gimple_statement_d* %call260), !dbg !8314
  br label %while.cond244, !dbg !8310, !llvm.loop !8315

while.end261:                                     ; preds = %cond.end249
  call void @update_clone_info(%struct.copy_body_data* %id), !dbg !8317
  %168 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8318
  %add.ptr262 = getelementptr inbounds %struct.function, %struct.function* %168, i64 0, !dbg !8318
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %add.ptr262, i32 0, i32 8, !dbg !8320
  %169 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !8320
  %tobool263 = icmp ne %union.tree_node* %169, null, !dbg !8318
  br i1 %tobool263, label %if.then264, label %if.end268, !dbg !8321

if.then264:                                       ; preds = %while.end261
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !8322, metadata !DIExpression()), !dbg !8324
  %170 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !8325
  call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 56, i1 false), !dbg !8325
  %171 = bitcast %struct.copy_body_data* %id to i8*, !dbg !8326
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !8327
  store i8* %171, i8** %info, align 8, !dbg !8328
  %172 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8329
  %add.ptr265 = getelementptr inbounds %struct.function, %struct.function* %172, i64 0, !dbg !8329
  %nonlocal_goto_save_area266 = getelementptr inbounds %struct.function, %struct.function* %add.ptr265, i32 0, i32 8, !dbg !8329
  %173 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !8329
  %call267 = call %union.tree_node* @walk_tree_1(%union.tree_node** %nonlocal_goto_save_area266, %union.tree_node* (%union.tree_node**, i32*, i8*)* @remap_gimple_op_r, i8* %173, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !8329
  br label %if.end268, !dbg !8330

if.end268:                                        ; preds = %if.then264, %while.end261
  %decl_map269 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !8331
  %174 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map269, align 8, !dbg !8331
  call void @pointer_map_destroy(%struct.pointer_map_t* %174), !dbg !8332
  %debug_map270 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !8333
  %175 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map270, align 8, !dbg !8333
  %tobool271 = icmp ne %struct.pointer_map_t* %175, null, !dbg !8335
  br i1 %tobool271, label %if.then272, label %if.end274, !dbg !8336

if.then272:                                       ; preds = %if.end268
  %debug_map273 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !8337
  %176 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map273, align 8, !dbg !8337
  call void @pointer_map_destroy(%struct.pointer_map_t* %176), !dbg !8338
  br label %if.end274, !dbg !8338

if.end274:                                        ; preds = %if.then272, %if.end268
  call void @free_dominance_info(i32 1), !dbg !8339
  call void @free_dominance_info(i32 2), !dbg !8340
  %statements_to_fold275 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 19, !dbg !8341
  %177 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold275, align 8, !dbg !8341
  call void @fold_marked_statements(i32 0, %struct.pointer_set_t* %177), !dbg !8342
  %statements_to_fold276 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 19, !dbg !8343
  %178 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold276, align 8, !dbg !8343
  call void @pointer_set_destroy(%struct.pointer_set_t* %178), !dbg !8344
  call void @fold_cond_expr_cond(), !dbg !8345
  %call277 = call zeroext i8 @delete_unreachable_blocks_update_callgraph(%struct.copy_body_data* %id), !dbg !8346
  call void @update_ssa(i32 2048), !dbg !8347
  call void @free_dominance_info(i32 1), !dbg !8348
  call void @free_dominance_info(i32 2), !dbg !8349
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 21, !dbg !8350
  %179 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !8350
  %tobool278 = icmp ne %struct.VEC_gimple_heap* %179, null, !dbg !8350
  br i1 %tobool278, label %cond.true279, label %cond.false280, !dbg !8350

cond.true279:                                     ; preds = %if.end274
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8350
  br label %cond.end281, !dbg !8350

cond.false280:                                    ; preds = %if.end274
  br label %cond.end281, !dbg !8350

cond.end281:                                      ; preds = %cond.false280, %cond.true279
  %cond282 = phi i32 [ 0, %cond.true279 ], [ 0, %cond.false280 ], !dbg !8350
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %init_stmts), !dbg !8351
  call void @pop_cfun(), !dbg !8352
  %180 = load %union.tree_node*, %union.tree_node** %old_current_function_decl, align 8, !dbg !8353
  store %union.tree_node* %180, %union.tree_node** @current_function_decl, align 8, !dbg !8354
  %181 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8355
  %tobool283 = icmp ne %union.tree_node* %181, null, !dbg !8355
  br i1 %tobool283, label %lor.lhs.false, label %cond.false290, !dbg !8355

lor.lhs.false:                                    ; preds = %cond.end281
  %182 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8355
  %function_decl284 = bitcast %union.tree_node* %182 to %struct.tree_function_decl*, !dbg !8355
  %f285 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl284, i32 0, i32 1, !dbg !8355
  %183 = load %struct.function*, %struct.function** %f285, align 8, !dbg !8355
  %184 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8355
  %add.ptr286 = getelementptr inbounds %struct.function, %struct.function* %184, i64 0, !dbg !8355
  %cmp287 = icmp eq %struct.function* %183, %add.ptr286, !dbg !8355
  br i1 %cmp287, label %cond.false290, label %cond.true289, !dbg !8355

cond.true289:                                     ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4952, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8355
  br label %cond.end291, !dbg !8355

cond.false290:                                    ; preds = %lor.lhs.false, %cond.end281
  br label %cond.end291, !dbg !8355

cond.end291:                                      ; preds = %cond.false290, %cond.true289
  %cond292 = phi i32 [ 0, %cond.true289 ], [ 0, %cond.false290 ], !dbg !8355
  ret void, !dbg !8356
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !8357 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !8360, metadata !DIExpression()), !dbg !8361
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !8361
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !8361
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !8361
  ret %struct.VEC_gimple_heap* %1, !dbg !8361
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ipa_opt_pass_heap* @VEC_ipa_opt_pass_heap_copy(%struct.VEC_ipa_opt_pass_base* %vec_) #0 !dbg !8362 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_ipa_opt_pass_heap*, align 8
  store %struct.VEC_ipa_opt_pass_base* %vec_, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_base** %vec_.addr, metadata !8366, metadata !DIExpression()), !dbg !8367
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !8368, metadata !DIExpression()), !dbg !8367
  %0 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8367
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_base* %0, null, !dbg !8367
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8367

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8367
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %1, i32 0, i32 0, !dbg !8367
  %2 = load i32, i32* %num, align 8, !dbg !8367
  br label %cond.end, !dbg !8367

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8367

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8367
  %conv = zext i32 %cond to i64, !dbg !8367
  store i64 %conv, i64* %len_, align 8, !dbg !8367
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_heap** %new_vec_, metadata !8369, metadata !DIExpression()), !dbg !8367
  store %struct.VEC_ipa_opt_pass_heap* null, %struct.VEC_ipa_opt_pass_heap** %new_vec_, align 8, !dbg !8367
  %3 = load i64, i64* %len_, align 8, !dbg !8370
  %tobool1 = icmp ne i64 %3, 0, !dbg !8370
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8367

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !8372
  %conv2 = trunc i64 %4 to i32, !dbg !8372
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %conv2), !dbg !8372
  %5 = bitcast i8* %call to %struct.VEC_ipa_opt_pass_heap*, !dbg !8372
  store %struct.VEC_ipa_opt_pass_heap* %5, %struct.VEC_ipa_opt_pass_heap** %new_vec_, align 8, !dbg !8372
  %6 = load i64, i64* %len_, align 8, !dbg !8372
  %conv3 = trunc i64 %6 to i32, !dbg !8372
  %7 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %new_vec_, align 8, !dbg !8372
  %base = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %7, i32 0, i32 0, !dbg !8372
  %num4 = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %base, i32 0, i32 0, !dbg !8372
  store i32 %conv3, i32* %num4, align 8, !dbg !8372
  %8 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %new_vec_, align 8, !dbg !8372
  %base5 = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %8, i32 0, i32 0, !dbg !8372
  %vec = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %base5, i32 0, i32 2, !dbg !8372
  %arraydecay = getelementptr inbounds [1 x %struct.ipa_opt_pass_d*], [1 x %struct.ipa_opt_pass_d*]* %vec, i64 0, i64 0, !dbg !8372
  %9 = bitcast %struct.ipa_opt_pass_d** %arraydecay to i8*, !dbg !8372
  %10 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8372
  %vec6 = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %10, i32 0, i32 2, !dbg !8372
  %arraydecay7 = getelementptr inbounds [1 x %struct.ipa_opt_pass_d*], [1 x %struct.ipa_opt_pass_d*]* %vec6, i64 0, i64 0, !dbg !8372
  %11 = bitcast %struct.ipa_opt_pass_d** %arraydecay7 to i8*, !dbg !8372
  %12 = load i64, i64* %len_, align 8, !dbg !8372
  %mul = mul i64 8, %12, !dbg !8372
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !8372
  br label %if.end, !dbg !8372

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %new_vec_, align 8, !dbg !8367
  ret %struct.VEC_ipa_opt_pass_heap* %13, !dbg !8367
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_opt_pass_base_length(%struct.VEC_ipa_opt_pass_base* %vec_) #0 !dbg !8374 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_base*, align 8
  store %struct.VEC_ipa_opt_pass_base* %vec_, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_base** %vec_.addr, metadata !8379, metadata !DIExpression()), !dbg !8380
  %0 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8380
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_base* %0, null, !dbg !8380
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8380

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8380
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %1, i32 0, i32 0, !dbg !8380
  %2 = load i32, i32* %num, align 8, !dbg !8380
  br label %cond.end, !dbg !8380

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8380

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8380
  ret i32 %cond, !dbg !8380
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_heap_safe_push(%struct.VEC_ipa_opt_pass_heap** %vec_, %struct.ipa_opt_pass_d* %obj_) #0 !dbg !8381 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_heap**, align 8
  %obj_.addr = alloca %struct.ipa_opt_pass_d*, align 8
  store %struct.VEC_ipa_opt_pass_heap** %vec_, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, metadata !8386, metadata !DIExpression()), !dbg !8387
  store %struct.ipa_opt_pass_d* %obj_, %struct.ipa_opt_pass_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_opt_pass_d** %obj_.addr, metadata !8388, metadata !DIExpression()), !dbg !8387
  %0 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !8387
  %call = call i32 @VEC_ipa_opt_pass_heap_reserve(%struct.VEC_ipa_opt_pass_heap** %0, i32 1), !dbg !8387
  %1 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !8387
  %2 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %1, align 8, !dbg !8387
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_heap* %2, null, !dbg !8387
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8387

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !8387
  %4 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %3, align 8, !dbg !8387
  %base = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %4, i32 0, i32 0, !dbg !8387
  br label %cond.end, !dbg !8387

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_opt_pass_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8387
  %5 = load %struct.ipa_opt_pass_d*, %struct.ipa_opt_pass_d** %obj_.addr, align 8, !dbg !8387
  %call1 = call %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_base_quick_push(%struct.VEC_ipa_opt_pass_base* %cond, %struct.ipa_opt_pass_d* %5), !dbg !8387
  ret %struct.ipa_opt_pass_d** %call1, !dbg !8387
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_opt_pass_d* @VEC_ipa_opt_pass_base_index(%struct.VEC_ipa_opt_pass_base* %vec_, i32 %ix_) #0 !dbg !8389 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_opt_pass_base* %vec_, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_base** %vec_.addr, metadata !8392, metadata !DIExpression()), !dbg !8393
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8394, metadata !DIExpression()), !dbg !8393
  %0 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8393
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_base* %0, null, !dbg !8393
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8393

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8393
  %2 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8393
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %2, i32 0, i32 0, !dbg !8393
  %3 = load i32, i32* %num, align 8, !dbg !8393
  %cmp = icmp ult i32 %1, %3, !dbg !8393
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8395
  %land.ext = zext i1 %4 to i32, !dbg !8393
  %5 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !8393
  %vec = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %5, i32 0, i32 2, !dbg !8393
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8393
  %idxprom = zext i32 %6 to i64, !dbg !8393
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_opt_pass_d*], [1 x %struct.ipa_opt_pass_d*]* %vec, i64 0, i64 %idxprom, !dbg !8393
  %7 = load %struct.ipa_opt_pass_d*, %struct.ipa_opt_pass_d** %arrayidx, align 8, !dbg !8393
  ret %struct.ipa_opt_pass_d* %7, !dbg !8393
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_cfun(%union.tree_node* %new_fndecl, %union.tree_node* %callee_fndecl, i64 %count) #0 !dbg !8396 {
entry:
  %new_fndecl.addr = alloca %union.tree_node*, align 8
  %callee_fndecl.addr = alloca %union.tree_node*, align 8
  %count.addr = alloca i64, align 8
  %src_cfun = alloca %struct.function*, align 8
  %count_scale = alloca i64, align 8
  store %union.tree_node* %new_fndecl, %union.tree_node** %new_fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_fndecl.addr, metadata !8399, metadata !DIExpression()), !dbg !8400
  store %union.tree_node* %callee_fndecl, %union.tree_node** %callee_fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee_fndecl.addr, metadata !8401, metadata !DIExpression()), !dbg !8402
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !8403, metadata !DIExpression()), !dbg !8404
  call void @llvm.dbg.declare(metadata %struct.function** %src_cfun, metadata !8405, metadata !DIExpression()), !dbg !8406
  %0 = load %union.tree_node*, %union.tree_node** %callee_fndecl.addr, align 8, !dbg !8407
  %function_decl = bitcast %union.tree_node* %0 to %struct.tree_function_decl*, !dbg !8407
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !8407
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !8407
  store %struct.function* %1, %struct.function** %src_cfun, align 8, !dbg !8406
  call void @llvm.dbg.declare(metadata i64* %count_scale, metadata !8408, metadata !DIExpression()), !dbg !8409
  %2 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8410
  %cfg = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1, !dbg !8410
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8410
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !8410
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8410
  %count1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 8, !dbg !8412
  %5 = load i64, i64* %count1, align 8, !dbg !8412
  %tobool = icmp ne i64 %5, 0, !dbg !8410
  br i1 %tobool, label %if.then, label %if.else, !dbg !8413

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %count.addr, align 8, !dbg !8414
  %mul = mul nsw i64 10000, %6, !dbg !8415
  %7 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8416
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1, !dbg !8416
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8416
  %x_entry_block_ptr3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 0, !dbg !8416
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr3, align 8, !dbg !8416
  %count4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 8, !dbg !8417
  %10 = load i64, i64* %count4, align 8, !dbg !8417
  %div = sdiv i64 %mul, %10, !dbg !8418
  store i64 %div, i64* %count_scale, align 8, !dbg !8419
  br label %if.end, !dbg !8420

if.else:                                          ; preds = %entry
  store i64 10000, i64* %count_scale, align 8, !dbg !8421
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @gimple_register_cfg_hooks(), !dbg !8422
  %11 = load %union.tree_node*, %union.tree_node** %new_fndecl.addr, align 8, !dbg !8423
  call void @push_struct_function(%union.tree_node* %11), !dbg !8424
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8425
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !8425
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 5, !dbg !8425
  %13 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !8425
  %cmp = icmp eq %struct.htab* %13, null, !dbg !8425
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8425

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1989, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8425
  br label %cond.end, !dbg !8425

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8425
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8426
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !8426
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 9, !dbg !8426
  %15 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !8426
  %cmp6 = icmp eq %union.tree_node* %15, null, !dbg !8426
  br i1 %cmp6, label %cond.false8, label %cond.true7, !dbg !8426

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1990, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8426
  br label %cond.end9, !dbg !8426

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !8426

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !8426
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8427
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !8427
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !8427
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !8427
  %cmp13 = icmp eq %struct.control_flow_graph* %17, null, !dbg !8427
  br i1 %cmp13, label %cond.false15, label %cond.true14, !dbg !8427

cond.true14:                                      ; preds = %cond.end9
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1991, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8427
  br label %cond.end16, !dbg !8427

cond.false15:                                     ; preds = %cond.end9
  br label %cond.end16, !dbg !8427

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !8427
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8428
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !8428
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 6, !dbg !8428
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8428
  %20 = load %union.tree_node*, %union.tree_node** %new_fndecl.addr, align 8, !dbg !8428
  %cmp19 = icmp eq %union.tree_node* %19, %20, !dbg !8428
  br i1 %cmp19, label %cond.false21, label %cond.true20, !dbg !8428

cond.true20:                                      ; preds = %cond.end16
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1992, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8428
  br label %cond.end22, !dbg !8428

cond.false21:                                     ; preds = %cond.end16
  br label %cond.end22, !dbg !8428

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !8428
  %21 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8429
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 7, !dbg !8430
  %22 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !8430
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8431
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !8431
  %static_chain_decl25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 7, !dbg !8432
  store %union.tree_node* %22, %union.tree_node** %static_chain_decl25, align 8, !dbg !8433
  %24 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8434
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 8, !dbg !8435
  %25 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !8435
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8436
  %add.ptr26 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !8436
  %nonlocal_goto_save_area27 = getelementptr inbounds %struct.function, %struct.function* %add.ptr26, i32 0, i32 8, !dbg !8437
  store %union.tree_node* %25, %union.tree_node** %nonlocal_goto_save_area27, align 8, !dbg !8438
  %27 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8439
  %function_end_locus = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 16, !dbg !8440
  %28 = load i32, i32* %function_end_locus, align 4, !dbg !8440
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8441
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !8441
  %function_end_locus29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 16, !dbg !8442
  store i32 %28, i32* %function_end_locus29, align 4, !dbg !8443
  %30 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8444
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 17, !dbg !8445
  %31 = load i32, i32* %curr_properties, align 8, !dbg !8445
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8446
  %add.ptr30 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !8446
  %curr_properties31 = getelementptr inbounds %struct.function, %struct.function* %add.ptr30, i32 0, i32 17, !dbg !8447
  store i32 %31, i32* %curr_properties31, align 8, !dbg !8448
  %33 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8449
  %last_verified = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 18, !dbg !8450
  %34 = load i32, i32* %last_verified, align 4, !dbg !8450
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8451
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !8451
  %last_verified33 = getelementptr inbounds %struct.function, %struct.function* %add.ptr32, i32 0, i32 18, !dbg !8452
  store i32 %34, i32* %last_verified33, align 4, !dbg !8453
  %36 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8454
  %va_list_gpr_size = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 20, !dbg !8455
  %bf.load = load i32, i32* %va_list_gpr_size, align 8, !dbg !8455
  %bf.clear = and i32 %bf.load, 255, !dbg !8455
  %37 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8456
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %37, i64 0, !dbg !8456
  %va_list_gpr_size35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 20, !dbg !8457
  %bf.load36 = load i32, i32* %va_list_gpr_size35, align 8, !dbg !8458
  %bf.value = and i32 %bf.clear, 255, !dbg !8458
  %bf.clear37 = and i32 %bf.load36, -256, !dbg !8458
  %bf.set = or i32 %bf.clear37, %bf.value, !dbg !8458
  store i32 %bf.set, i32* %va_list_gpr_size35, align 8, !dbg !8458
  %38 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8459
  %va_list_fpr_size = getelementptr inbounds %struct.function, %struct.function* %38, i32 0, i32 20, !dbg !8460
  %bf.load38 = load i32, i32* %va_list_fpr_size, align 8, !dbg !8460
  %bf.lshr = lshr i32 %bf.load38, 8, !dbg !8460
  %bf.clear39 = and i32 %bf.lshr, 255, !dbg !8460
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8461
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !8461
  %va_list_fpr_size41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 20, !dbg !8462
  %bf.load42 = load i32, i32* %va_list_fpr_size41, align 8, !dbg !8463
  %bf.value43 = and i32 %bf.clear39, 255, !dbg !8463
  %bf.shl = shl i32 %bf.value43, 8, !dbg !8463
  %bf.clear44 = and i32 %bf.load42, -65281, !dbg !8463
  %bf.set45 = or i32 %bf.clear44, %bf.shl, !dbg !8463
  store i32 %bf.set45, i32* %va_list_fpr_size41, align 8, !dbg !8463
  %40 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8464
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 20, !dbg !8465
  %bf.load46 = load i32, i32* %function_frequency, align 8, !dbg !8465
  %bf.lshr47 = lshr i32 %bf.load46, 16, !dbg !8465
  %bf.clear48 = and i32 %bf.lshr47, 3, !dbg !8465
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8466
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !8466
  %function_frequency50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 20, !dbg !8467
  %bf.load51 = load i32, i32* %function_frequency50, align 8, !dbg !8468
  %bf.value52 = and i32 %bf.clear48, 3, !dbg !8468
  %bf.shl53 = shl i32 %bf.value52, 16, !dbg !8468
  %bf.clear54 = and i32 %bf.load51, -196609, !dbg !8468
  %bf.set55 = or i32 %bf.clear54, %bf.shl53, !dbg !8468
  store i32 %bf.set55, i32* %function_frequency50, align 8, !dbg !8468
  %42 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8469
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %42, i32 0, i32 20, !dbg !8470
  %bf.load56 = load i32, i32* %has_nonlocal_label, align 8, !dbg !8470
  %bf.lshr57 = lshr i32 %bf.load56, 20, !dbg !8470
  %bf.clear58 = and i32 %bf.lshr57, 1, !dbg !8470
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8471
  %add.ptr59 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !8471
  %has_nonlocal_label60 = getelementptr inbounds %struct.function, %struct.function* %add.ptr59, i32 0, i32 20, !dbg !8472
  %bf.load61 = load i32, i32* %has_nonlocal_label60, align 8, !dbg !8473
  %bf.value62 = and i32 %bf.clear58, 1, !dbg !8473
  %bf.shl63 = shl i32 %bf.value62, 20, !dbg !8473
  %bf.clear64 = and i32 %bf.load61, -1048577, !dbg !8473
  %bf.set65 = or i32 %bf.clear64, %bf.shl63, !dbg !8473
  store i32 %bf.set65, i32* %has_nonlocal_label60, align 8, !dbg !8473
  %44 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8474
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %44, i32 0, i32 20, !dbg !8475
  %bf.load66 = load i32, i32* %stdarg, align 8, !dbg !8475
  %bf.lshr67 = lshr i32 %bf.load66, 22, !dbg !8475
  %bf.clear68 = and i32 %bf.lshr67, 1, !dbg !8475
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8476
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !8476
  %stdarg70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 20, !dbg !8477
  %bf.load71 = load i32, i32* %stdarg70, align 8, !dbg !8478
  %bf.value72 = and i32 %bf.clear68, 1, !dbg !8478
  %bf.shl73 = shl i32 %bf.value72, 22, !dbg !8478
  %bf.clear74 = and i32 %bf.load71, -4194305, !dbg !8478
  %bf.set75 = or i32 %bf.clear74, %bf.shl73, !dbg !8478
  store i32 %bf.set75, i32* %stdarg70, align 8, !dbg !8478
  %46 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8479
  %dont_save_pending_sizes_p = getelementptr inbounds %struct.function, %struct.function* %46, i32 0, i32 20, !dbg !8480
  %bf.load76 = load i32, i32* %dont_save_pending_sizes_p, align 8, !dbg !8480
  %bf.lshr77 = lshr i32 %bf.load76, 23, !dbg !8480
  %bf.clear78 = and i32 %bf.lshr77, 1, !dbg !8480
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8481
  %add.ptr79 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !8481
  %dont_save_pending_sizes_p80 = getelementptr inbounds %struct.function, %struct.function* %add.ptr79, i32 0, i32 20, !dbg !8482
  %bf.load81 = load i32, i32* %dont_save_pending_sizes_p80, align 8, !dbg !8483
  %bf.value82 = and i32 %bf.clear78, 1, !dbg !8483
  %bf.shl83 = shl i32 %bf.value82, 23, !dbg !8483
  %bf.clear84 = and i32 %bf.load81, -8388609, !dbg !8483
  %bf.set85 = or i32 %bf.clear84, %bf.shl83, !dbg !8483
  store i32 %bf.set85, i32* %dont_save_pending_sizes_p80, align 8, !dbg !8483
  %48 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8484
  %after_inlining = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 20, !dbg !8485
  %bf.load86 = load i32, i32* %after_inlining, align 8, !dbg !8485
  %bf.lshr87 = lshr i32 %bf.load86, 24, !dbg !8485
  %bf.clear88 = and i32 %bf.lshr87, 1, !dbg !8485
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8486
  %add.ptr89 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !8486
  %after_inlining90 = getelementptr inbounds %struct.function, %struct.function* %add.ptr89, i32 0, i32 20, !dbg !8487
  %bf.load91 = load i32, i32* %after_inlining90, align 8, !dbg !8488
  %bf.value92 = and i32 %bf.clear88, 1, !dbg !8488
  %bf.shl93 = shl i32 %bf.value92, 24, !dbg !8488
  %bf.clear94 = and i32 %bf.load91, -16777217, !dbg !8488
  %bf.set95 = or i32 %bf.clear94, %bf.shl93, !dbg !8488
  store i32 %bf.set95, i32* %after_inlining90, align 8, !dbg !8488
  %50 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8489
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %50, i32 0, i32 20, !dbg !8490
  %bf.load96 = load i32, i32* %returns_struct, align 8, !dbg !8490
  %bf.lshr97 = lshr i32 %bf.load96, 26, !dbg !8490
  %bf.clear98 = and i32 %bf.lshr97, 1, !dbg !8490
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8491
  %add.ptr99 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !8491
  %returns_struct100 = getelementptr inbounds %struct.function, %struct.function* %add.ptr99, i32 0, i32 20, !dbg !8492
  %bf.load101 = load i32, i32* %returns_struct100, align 8, !dbg !8493
  %bf.value102 = and i32 %bf.clear98, 1, !dbg !8493
  %bf.shl103 = shl i32 %bf.value102, 26, !dbg !8493
  %bf.clear104 = and i32 %bf.load101, -67108865, !dbg !8493
  %bf.set105 = or i32 %bf.clear104, %bf.shl103, !dbg !8493
  store i32 %bf.set105, i32* %returns_struct100, align 8, !dbg !8493
  %52 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8494
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %52, i32 0, i32 20, !dbg !8495
  %bf.load106 = load i32, i32* %returns_pcc_struct, align 8, !dbg !8495
  %bf.lshr107 = lshr i32 %bf.load106, 27, !dbg !8495
  %bf.clear108 = and i32 %bf.lshr107, 1, !dbg !8495
  %53 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8496
  %add.ptr109 = getelementptr inbounds %struct.function, %struct.function* %53, i64 0, !dbg !8496
  %returns_pcc_struct110 = getelementptr inbounds %struct.function, %struct.function* %add.ptr109, i32 0, i32 20, !dbg !8497
  %bf.load111 = load i32, i32* %returns_pcc_struct110, align 8, !dbg !8498
  %bf.value112 = and i32 %bf.clear108, 1, !dbg !8498
  %bf.shl113 = shl i32 %bf.value112, 27, !dbg !8498
  %bf.clear114 = and i32 %bf.load111, -134217729, !dbg !8498
  %bf.set115 = or i32 %bf.clear114, %bf.shl113, !dbg !8498
  store i32 %bf.set115, i32* %returns_pcc_struct110, align 8, !dbg !8498
  %54 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8499
  %after_tree_profile = getelementptr inbounds %struct.function, %struct.function* %54, i32 0, i32 20, !dbg !8500
  %bf.load116 = load i32, i32* %after_tree_profile, align 8, !dbg !8500
  %bf.lshr117 = lshr i32 %bf.load116, 28, !dbg !8500
  %bf.clear118 = and i32 %bf.lshr117, 1, !dbg !8500
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8501
  %add.ptr119 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !8501
  %after_tree_profile120 = getelementptr inbounds %struct.function, %struct.function* %add.ptr119, i32 0, i32 20, !dbg !8502
  %bf.load121 = load i32, i32* %after_tree_profile120, align 8, !dbg !8503
  %bf.value122 = and i32 %bf.clear118, 1, !dbg !8503
  %bf.shl123 = shl i32 %bf.value122, 28, !dbg !8503
  %bf.clear124 = and i32 %bf.load121, -268435457, !dbg !8503
  %bf.set125 = or i32 %bf.clear124, %bf.shl123, !dbg !8503
  store i32 %bf.set125, i32* %after_tree_profile120, align 8, !dbg !8503
  call void @init_empty_tree_cfg(), !dbg !8504
  %56 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8505
  %cfg126 = getelementptr inbounds %struct.function, %struct.function* %56, i32 0, i32 1, !dbg !8505
  %57 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg126, align 8, !dbg !8505
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %57, i32 0, i32 7, !dbg !8505
  %58 = load i32, i32* %x_profile_status, align 8, !dbg !8505
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8506
  %add.ptr127 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, !dbg !8506
  %cfg128 = getelementptr inbounds %struct.function, %struct.function* %add.ptr127, i32 0, i32 1, !dbg !8506
  %60 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg128, align 8, !dbg !8506
  %x_profile_status129 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %60, i32 0, i32 7, !dbg !8506
  store i32 %58, i32* %x_profile_status129, align 8, !dbg !8507
  %61 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8508
  %cfg130 = getelementptr inbounds %struct.function, %struct.function* %61, i32 0, i32 1, !dbg !8508
  %62 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg130, align 8, !dbg !8508
  %x_entry_block_ptr131 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %62, i32 0, i32 0, !dbg !8508
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr131, align 8, !dbg !8508
  %count132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 8, !dbg !8509
  %64 = load i64, i64* %count132, align 8, !dbg !8509
  %65 = load i64, i64* %count_scale, align 8, !dbg !8510
  %mul133 = mul nsw i64 %64, %65, !dbg !8511
  %div134 = sdiv i64 %mul133, 10000, !dbg !8512
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8513
  %add.ptr135 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !8513
  %cfg136 = getelementptr inbounds %struct.function, %struct.function* %add.ptr135, i32 0, i32 1, !dbg !8513
  %67 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg136, align 8, !dbg !8513
  %x_entry_block_ptr137 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %67, i32 0, i32 0, !dbg !8513
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr137, align 8, !dbg !8513
  %count138 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 8, !dbg !8514
  store i64 %div134, i64* %count138, align 8, !dbg !8515
  %69 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8516
  %cfg139 = getelementptr inbounds %struct.function, %struct.function* %69, i32 0, i32 1, !dbg !8516
  %70 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg139, align 8, !dbg !8516
  %x_entry_block_ptr140 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %70, i32 0, i32 0, !dbg !8516
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr140, align 8, !dbg !8516
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 11, !dbg !8517
  %72 = load i32, i32* %frequency, align 8, !dbg !8517
  %73 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8518
  %add.ptr141 = getelementptr inbounds %struct.function, %struct.function* %73, i64 0, !dbg !8518
  %cfg142 = getelementptr inbounds %struct.function, %struct.function* %add.ptr141, i32 0, i32 1, !dbg !8518
  %74 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg142, align 8, !dbg !8518
  %x_entry_block_ptr143 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %74, i32 0, i32 0, !dbg !8518
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr143, align 8, !dbg !8518
  %frequency144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 11, !dbg !8519
  store i32 %72, i32* %frequency144, align 8, !dbg !8520
  %76 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8521
  %cfg145 = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 1, !dbg !8521
  %77 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg145, align 8, !dbg !8521
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %77, i32 0, i32 1, !dbg !8521
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8521
  %count146 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 8, !dbg !8522
  %79 = load i64, i64* %count146, align 8, !dbg !8522
  %80 = load i64, i64* %count_scale, align 8, !dbg !8523
  %mul147 = mul nsw i64 %79, %80, !dbg !8524
  %div148 = sdiv i64 %mul147, 10000, !dbg !8525
  %81 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8526
  %add.ptr149 = getelementptr inbounds %struct.function, %struct.function* %81, i64 0, !dbg !8526
  %cfg150 = getelementptr inbounds %struct.function, %struct.function* %add.ptr149, i32 0, i32 1, !dbg !8526
  %82 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg150, align 8, !dbg !8526
  %x_exit_block_ptr151 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %82, i32 0, i32 1, !dbg !8526
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr151, align 8, !dbg !8526
  %count152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 8, !dbg !8527
  store i64 %div148, i64* %count152, align 8, !dbg !8528
  %84 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8529
  %cfg153 = getelementptr inbounds %struct.function, %struct.function* %84, i32 0, i32 1, !dbg !8529
  %85 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg153, align 8, !dbg !8529
  %x_exit_block_ptr154 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %85, i32 0, i32 1, !dbg !8529
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr154, align 8, !dbg !8529
  %frequency155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 11, !dbg !8530
  %87 = load i32, i32* %frequency155, align 8, !dbg !8530
  %88 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8531
  %add.ptr156 = getelementptr inbounds %struct.function, %struct.function* %88, i64 0, !dbg !8531
  %cfg157 = getelementptr inbounds %struct.function, %struct.function* %add.ptr156, i32 0, i32 1, !dbg !8531
  %89 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg157, align 8, !dbg !8531
  %x_exit_block_ptr158 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %89, i32 0, i32 1, !dbg !8531
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr158, align 8, !dbg !8531
  %frequency159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 11, !dbg !8532
  store i32 %87, i32* %frequency159, align 8, !dbg !8533
  %91 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8534
  %eh = getelementptr inbounds %struct.function, %struct.function* %91, i32 0, i32 0, !dbg !8536
  %92 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !8536
  %tobool160 = icmp ne %struct.eh_status* %92, null, !dbg !8534
  br i1 %tobool160, label %if.then161, label %if.end162, !dbg !8537

if.then161:                                       ; preds = %cond.end22
  call void @init_eh_for_function(), !dbg !8538
  br label %if.end162, !dbg !8538

if.end162:                                        ; preds = %if.then161, %cond.end22
  %93 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8539
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %93, i32 0, i32 3, !dbg !8541
  %94 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !8541
  %tobool163 = icmp ne %struct.gimple_df* %94, null, !dbg !8539
  br i1 %tobool163, label %if.then164, label %if.end171, !dbg !8542

if.then164:                                       ; preds = %if.end162
  %95 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8543
  %add.ptr165 = getelementptr inbounds %struct.function, %struct.function* %95, i64 0, !dbg !8543
  call void @init_tree_ssa(%struct.function* %add.ptr165), !dbg !8545
  %96 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8546
  %add.ptr166 = getelementptr inbounds %struct.function, %struct.function* %96, i64 0, !dbg !8546
  %gimple_df167 = getelementptr inbounds %struct.function, %struct.function* %add.ptr166, i32 0, i32 3, !dbg !8547
  %97 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df167, align 8, !dbg !8547
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %97, i32 0, i32 10, !dbg !8548
  %bf.load168 = load i8, i8* %in_ssa_p, align 8, !dbg !8549
  %bf.clear169 = and i8 %bf.load168, -2, !dbg !8549
  %bf.set170 = or i8 %bf.clear169, 1, !dbg !8549
  store i8 %bf.set170, i8* %in_ssa_p, align 8, !dbg !8549
  call void @init_ssa_operands(), !dbg !8550
  br label %if.end171, !dbg !8551

if.end171:                                        ; preds = %if.then164, %if.end162
  call void @pop_cfun(), !dbg !8552
  ret void, !dbg !8553
}

declare dso_local void @push_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_static_chain(%union.tree_node* %static_chain, %struct.copy_body_data* %id) #0 !dbg !8554 {
entry:
  %static_chain.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %chain_copy = alloca %union.tree_node**, align 8
  %pvar = alloca %union.tree_node**, align 8
  %new_tree = alloca %union.tree_node*, align 8
  store %union.tree_node* %static_chain, %union.tree_node** %static_chain.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %static_chain.addr, metadata !8555, metadata !DIExpression()), !dbg !8556
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !8557, metadata !DIExpression()), !dbg !8558
  call void @llvm.dbg.declare(metadata %union.tree_node*** %chain_copy, metadata !8559, metadata !DIExpression()), !dbg !8560
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pvar, metadata !8561, metadata !DIExpression()), !dbg !8562
  store %union.tree_node** %static_chain.addr, %union.tree_node*** %chain_copy, align 8, !dbg !8563
  %0 = load %union.tree_node**, %union.tree_node*** %chain_copy, align 8, !dbg !8564
  store %union.tree_node** %0, %union.tree_node*** %pvar, align 8, !dbg !8566
  br label %for.cond, !dbg !8567

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node**, %union.tree_node*** %pvar, align 8, !dbg !8568
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !8570
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8571
  br i1 %tobool, label %for.body, label %for.end, !dbg !8571

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !8572, metadata !DIExpression()), !dbg !8574
  %3 = load %union.tree_node**, %union.tree_node*** %pvar, align 8, !dbg !8575
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !8576
  %5 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8577
  %call = call %union.tree_node* @remap_decl(%union.tree_node* %4, %struct.copy_body_data* %5), !dbg !8578
  store %union.tree_node* %call, %union.tree_node** %new_tree, align 8, !dbg !8574
  %6 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 15), align 8, !dbg !8579
  %7 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8580
  call void %6(%union.tree_node* %7), !dbg !8581
  %8 = load %union.tree_node**, %union.tree_node*** %pvar, align 8, !dbg !8582
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !8582
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !8582
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8582
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8582
  %11 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8583
  %common1 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !8583
  %chain2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1, !dbg !8583
  store %union.tree_node* %10, %union.tree_node** %chain2, align 8, !dbg !8584
  %12 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8585
  %13 = load %union.tree_node**, %union.tree_node*** %pvar, align 8, !dbg !8586
  store %union.tree_node* %12, %union.tree_node** %13, align 8, !dbg !8587
  br label %for.inc, !dbg !8588

for.inc:                                          ; preds = %for.body
  %14 = load %union.tree_node**, %union.tree_node*** %pvar, align 8, !dbg !8589
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !8589
  %common3 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !8589
  %chain4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1, !dbg !8589
  store %union.tree_node** %chain4, %union.tree_node*** %pvar, align 8, !dbg !8590
  br label %for.cond, !dbg !8591, !llvm.loop !8592

for.end:                                          ; preds = %for.cond
  %16 = load %union.tree_node*, %union.tree_node** %static_chain.addr, align 8, !dbg !8594
  ret %union.tree_node* %16, !dbg !8595
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %vec_) #0 !dbg !8596 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_replace_map_p_base*, align 8
  store %struct.VEC_ipa_replace_map_p_base* %vec_, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_base** %vec_.addr, metadata !8601, metadata !DIExpression()), !dbg !8602
  %0 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !8602
  %tobool = icmp ne %struct.VEC_ipa_replace_map_p_base* %0, null, !dbg !8602
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8602

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !8602
  %num = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %1, i32 0, i32 0, !dbg !8602
  %2 = load i32, i32* %num, align 8, !dbg !8602
  br label %cond.end, !dbg !8602

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8602

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8602
  ret i32 %cond, !dbg !8602
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %vec_, i32 %ix_) #0 !dbg !8603 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_replace_map_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ipa_replace_map_p_base* %vec_, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_base** %vec_.addr, metadata !8606, metadata !DIExpression()), !dbg !8607
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8608, metadata !DIExpression()), !dbg !8607
  %0 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !8607
  %tobool = icmp ne %struct.VEC_ipa_replace_map_p_base* %0, null, !dbg !8607
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8607

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8607
  %2 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !8607
  %num = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %2, i32 0, i32 0, !dbg !8607
  %3 = load i32, i32* %num, align 8, !dbg !8607
  %cmp = icmp ult i32 %1, %3, !dbg !8607
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8609
  %land.ext = zext i1 %4 to i32, !dbg !8607
  %5 = load %struct.VEC_ipa_replace_map_p_base*, %struct.VEC_ipa_replace_map_p_base** %vec_.addr, align 8, !dbg !8607
  %vec = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %5, i32 0, i32 2, !dbg !8607
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8607
  %idxprom = zext i32 %6 to i64, !dbg !8607
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_replace_map*], [1 x %struct.ipa_replace_map*]* %vec, i64 0, i64 %idxprom, !dbg !8607
  %7 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %arrayidx, align 8, !dbg !8607
  ret %struct.ipa_replace_map* %7, !dbg !8607
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !8610 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8614, metadata !DIExpression()), !dbg !8615
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8616
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8616
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8616
  %bf.load = load i64, i64* %1, align 8, !dbg !8616
  %bf.clear = and i64 %bf.load, 65535, !dbg !8616
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8616
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !8617

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !8618
  br label %return, !dbg !8618

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8620
  br label %return, !dbg !8620

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !8621
  ret i8 %2, !dbg !8621
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %id, %union.tree_node* %p, %union.tree_node* %value, %union.tree_node* %fn, %struct.basic_block_def* %bb, %union.tree_node** %vars) #0 !dbg !8622 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %p.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %vars.addr = alloca %union.tree_node**, align 8
  %init_stmt = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !8625, metadata !DIExpression()), !dbg !8626
  store %union.tree_node* %p, %union.tree_node** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %p.addr, metadata !8627, metadata !DIExpression()), !dbg !8628
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !8629, metadata !DIExpression()), !dbg !8630
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !8631, metadata !DIExpression()), !dbg !8632
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8633, metadata !DIExpression()), !dbg !8634
  store %union.tree_node** %vars, %union.tree_node*** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %vars.addr, metadata !8635, metadata !DIExpression()), !dbg !8636
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init_stmt, metadata !8637, metadata !DIExpression()), !dbg !8638
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %init_stmt, align 8, !dbg !8638
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8639, metadata !DIExpression()), !dbg !8640
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !8641, metadata !DIExpression()), !dbg !8642
  %0 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8643
  store %union.tree_node* %0, %union.tree_node** %rhs, align 8, !dbg !8642
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8644, metadata !DIExpression()), !dbg !8645
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8646
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !8646
  %call = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !8647
  %conv = zext i8 %call to i32, !dbg !8647
  %tobool = icmp ne i32 %conv, 0, !dbg !8647
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8647

cond.true:                                        ; preds = %entry
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8648
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 4, !dbg !8649
  %3 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8649
  %4 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8650
  %call1 = call %union.tree_node* @gimple_default_def(%struct.function* %3, %union.tree_node* %4), !dbg !8651
  br label %cond.end, !dbg !8647

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8647

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !8647
  store %union.tree_node* %cond, %union.tree_node** %def, align 8, !dbg !8645
  %5 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8652
  %tobool2 = icmp ne %union.tree_node* %5, null, !dbg !8652
  br i1 %tobool2, label %land.lhs.true, label %if.end20, !dbg !8654

land.lhs.true:                                    ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8655
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8656
  %cmp = icmp ne %union.tree_node* %6, %7, !dbg !8657
  br i1 %cmp, label %land.lhs.true4, label %if.end20, !dbg !8658

land.lhs.true4:                                   ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8659
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !8659
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8659
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8659
  %10 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8660
  %common5 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !8660
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !8660
  %11 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !8660
  %call7 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %9, %union.tree_node* %11), !dbg !8661
  %tobool8 = icmp ne i8 %call7, 0, !dbg !8661
  br i1 %tobool8, label %if.end20, label %if.then, !dbg !8662

if.then:                                          ; preds = %land.lhs.true4
  %12 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8663
  %common9 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !8663
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !8663
  %13 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !8663
  %14 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8666
  %call11 = call zeroext i8 @fold_convertible_p(%union.tree_node* %13, %union.tree_node* %14), !dbg !8667
  %tobool12 = icmp ne i8 %call11, 0, !dbg !8667
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !8668

if.then13:                                        ; preds = %if.then
  %15 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8669
  %common14 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !8669
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !8669
  %16 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !8669
  %17 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8669
  %call16 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 116, %union.tree_node* %16, %union.tree_node* %17), !dbg !8669
  store %union.tree_node* %call16, %union.tree_node** %rhs, align 8, !dbg !8670
  br label %if.end, !dbg !8671

if.else:                                          ; preds = %if.then
  %18 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8672
  %common17 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !8672
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !8672
  %19 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !8672
  %20 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8672
  %call19 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 118, %union.tree_node* %19, %union.tree_node* %20), !dbg !8672
  store %union.tree_node* %call19, %union.tree_node** %rhs, align 8, !dbg !8673
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  br label %if.end20, !dbg !8674

if.end20:                                         ; preds = %if.end, %land.lhs.true4, %land.lhs.true, %cond.end
  %21 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8675
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8676
  %call21 = call %union.tree_node* @copy_decl_to_var(%union.tree_node* %21, %struct.copy_body_data* %22), !dbg !8677
  store %union.tree_node* %call21, %union.tree_node** %var, align 8, !dbg !8678
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8679
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !8679
  %call23 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr22), !dbg !8681
  %conv24 = zext i8 %call23 to i32, !dbg !8681
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !8681
  br i1 %tobool25, label %land.lhs.true26, label %if.end32, !dbg !8682

land.lhs.true26:                                  ; preds = %if.end20
  %24 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8683
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8683
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !8683
  %bf.load = load i64, i64* %25, align 8, !dbg !8683
  %bf.clear = and i64 %bf.load, 65535, !dbg !8683
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8683
  %cmp27 = icmp eq i32 %bf.cast, 32, !dbg !8684
  br i1 %cmp27, label %if.then29, label %if.end32, !dbg !8685

if.then29:                                        ; preds = %land.lhs.true26
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8686
  %call30 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %26), !dbg !8688
  %27 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8689
  %call31 = call zeroext i8 @add_referenced_var(%union.tree_node* %27), !dbg !8690
  br label %if.end32, !dbg !8691

if.end32:                                         ; preds = %if.then29, %land.lhs.true26, %if.end20
  %28 = load %union.tree_node**, %union.tree_node*** %vars.addr, align 8, !dbg !8692
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !8693
  %30 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8694
  %common33 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !8694
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 1, !dbg !8694
  store %union.tree_node* %29, %union.tree_node** %chain, align 8, !dbg !8695
  %31 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8696
  %32 = load %union.tree_node**, %union.tree_node*** %vars.addr, align 8, !dbg !8697
  store %union.tree_node* %31, %union.tree_node** %32, align 8, !dbg !8698
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8699
  %decl_with_vis = bitcast %union.tree_node* %33 to %struct.tree_decl_with_vis*, !dbg !8699
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !8699
  %34 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !8699
  %bf.load34 = load i32, i32* %34, align 8, !dbg !8700
  %bf.clear35 = and i32 %bf.load34, -257, !dbg !8700
  %bf.set = or i32 %bf.clear35, 256, !dbg !8700
  store i32 %bf.set, i32* %34, align 8, !dbg !8700
  %35 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8701
  %base36 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !8701
  %36 = bitcast %struct.tree_base* %base36 to i64*, !dbg !8701
  %bf.load37 = load i64, i64* %36, align 8, !dbg !8701
  %bf.lshr = lshr i64 %bf.load37, 20, !dbg !8701
  %bf.clear38 = and i64 %bf.lshr, 1, !dbg !8701
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !8701
  %tobool40 = icmp ne i32 %bf.cast39, 0, !dbg !8701
  br i1 %tobool40, label %land.lhs.true41, label %if.end77, !dbg !8703

land.lhs.true41:                                  ; preds = %if.end32
  %37 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8704
  %base42 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !8704
  %38 = bitcast %struct.tree_base* %base42 to i64*, !dbg !8704
  %bf.load43 = load i64, i64* %38, align 8, !dbg !8704
  %bf.lshr44 = lshr i64 %bf.load43, 18, !dbg !8704
  %bf.clear45 = and i64 %bf.lshr44, 1, !dbg !8704
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !8704
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !8704
  br i1 %tobool47, label %if.end77, label %land.lhs.true48, !dbg !8705

land.lhs.true48:                                  ; preds = %land.lhs.true41
  %39 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8706
  %tobool49 = icmp ne %union.tree_node* %39, null, !dbg !8706
  br i1 %tobool49, label %land.lhs.true50, label %if.end77, !dbg !8707

land.lhs.true50:                                  ; preds = %land.lhs.true48
  %40 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8708
  %base51 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !8708
  %41 = bitcast %struct.tree_base* %base51 to i64*, !dbg !8708
  %bf.load52 = load i64, i64* %41, align 8, !dbg !8708
  %bf.lshr53 = lshr i64 %bf.load52, 16, !dbg !8708
  %bf.clear54 = and i64 %bf.lshr53, 1, !dbg !8708
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !8708
  %tobool56 = icmp ne i32 %bf.cast55, 0, !dbg !8708
  br i1 %tobool56, label %if.end77, label %land.lhs.true57, !dbg !8709

land.lhs.true57:                                  ; preds = %land.lhs.true50
  %42 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8710
  %tobool58 = icmp ne %union.tree_node* %42, null, !dbg !8710
  br i1 %tobool58, label %if.end77, label %if.then59, !dbg !8711

if.then59:                                        ; preds = %land.lhs.true57
  %43 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8712
  %call60 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %43), !dbg !8715
  %conv61 = zext i8 %call60 to i32, !dbg !8715
  %tobool62 = icmp ne i32 %conv61, 0, !dbg !8715
  br i1 %tobool62, label %land.lhs.true63, label %if.end76, !dbg !8716

land.lhs.true63:                                  ; preds = %if.then59
  %44 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8717
  %common64 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !8717
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !8717
  %45 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !8717
  %46 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8718
  %common66 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !8718
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !8718
  %47 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !8718
  %call68 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %45, %union.tree_node* %47), !dbg !8719
  %conv69 = zext i8 %call68 to i32, !dbg !8719
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !8719
  br i1 %tobool70, label %land.lhs.true71, label %if.end76, !dbg !8720

land.lhs.true71:                                  ; preds = %land.lhs.true63
  %48 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8721
  %49 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !8722
  %call72 = call zeroext i8 @self_inlining_addr_expr(%union.tree_node* %48, %union.tree_node* %49), !dbg !8723
  %tobool73 = icmp ne i8 %call72, 0, !dbg !8723
  br i1 %tobool73, label %if.end76, label %if.then74, !dbg !8724

if.then74:                                        ; preds = %land.lhs.true71
  %50 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8725
  %51 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8727
  %52 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8728
  call void @insert_decl_map(%struct.copy_body_data* %50, %union.tree_node* %51, %union.tree_node* %52), !dbg !8729
  %53 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8730
  %54 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8731
  %55 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8732
  call void @insert_debug_decl_map(%struct.copy_body_data* %53, %union.tree_node* %54, %union.tree_node* %55), !dbg !8733
  %56 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8734
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8735
  %58 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8736
  %59 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8737
  %call75 = call %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %56, %struct.basic_block_def* %57, %union.tree_node* %58, %union.tree_node* %59, %union.gimple_statement_d* null), !dbg !8738
  store %union.gimple_statement_d* %call75, %union.gimple_statement_d** %retval, align 8, !dbg !8739
  br label %return, !dbg !8739

if.end76:                                         ; preds = %land.lhs.true71, %land.lhs.true63, %if.then59
  br label %if.end77, !dbg !8740

if.end77:                                         ; preds = %if.end76, %land.lhs.true57, %land.lhs.true50, %land.lhs.true48, %land.lhs.true41, %if.end32
  %60 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8741
  %61 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8742
  %62 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8743
  call void @insert_decl_map(%struct.copy_body_data* %60, %union.tree_node* %61, %union.tree_node* %62), !dbg !8744
  %63 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8745
  %common78 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !8745
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !8745
  %64 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !8745
  %type80 = bitcast %union.tree_node* %64 to %struct.tree_type*, !dbg !8745
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type80, i32 0, i32 6, !dbg !8745
  %bf.load81 = load i32, i32* %needs_constructing_flag, align 4, !dbg !8745
  %bf.lshr82 = lshr i32 %bf.load81, 11, !dbg !8745
  %bf.clear83 = and i32 %bf.lshr82, 1, !dbg !8745
  %tobool84 = icmp ne i32 %bf.clear83, 0, !dbg !8745
  br i1 %tobool84, label %if.then85, label %if.end89, !dbg !8747

if.then85:                                        ; preds = %if.end77
  %65 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8748
  %base86 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !8748
  %66 = bitcast %struct.tree_base* %base86 to i64*, !dbg !8748
  %bf.load87 = load i64, i64* %66, align 8, !dbg !8749
  %bf.clear88 = and i64 %bf.load87, -1048577, !dbg !8749
  store i64 %bf.clear88, i64* %66, align 8, !dbg !8749
  br label %if.end89, !dbg !8748

if.end89:                                         ; preds = %if.then85, %if.end77
  %67 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8750
  %add.ptr90 = getelementptr inbounds %struct.function, %struct.function* %67, i64 0, !dbg !8750
  %call91 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr90), !dbg !8752
  %conv92 = zext i8 %call91 to i32, !dbg !8752
  %tobool93 = icmp ne i32 %conv92, 0, !dbg !8752
  br i1 %tobool93, label %land.lhs.true94, label %if.end134, !dbg !8753

land.lhs.true94:                                  ; preds = %if.end89
  %68 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8754
  %tobool95 = icmp ne %union.tree_node* %68, null, !dbg !8754
  br i1 %tobool95, label %land.lhs.true96, label %if.end134, !dbg !8755

land.lhs.true96:                                  ; preds = %land.lhs.true94
  %69 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8756
  %tobool97 = icmp ne %union.tree_node* %69, null, !dbg !8756
  br i1 %tobool97, label %land.lhs.true98, label %if.end134, !dbg !8757

land.lhs.true98:                                  ; preds = %land.lhs.true96
  %70 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8758
  %call99 = call zeroext i8 @is_gimple_reg(%union.tree_node* %70), !dbg !8759
  %conv100 = zext i8 %call99 to i32, !dbg !8759
  %tobool101 = icmp ne i32 %conv100, 0, !dbg !8759
  br i1 %tobool101, label %land.lhs.true102, label %if.end134, !dbg !8760

land.lhs.true102:                                 ; preds = %land.lhs.true98
  %71 = load i32, i32* @optimize, align 4, !dbg !8761
  %tobool103 = icmp ne i32 %71, 0, !dbg !8761
  br i1 %tobool103, label %land.lhs.true114, label %lor.lhs.false, !dbg !8762

lor.lhs.false:                                    ; preds = %land.lhs.true102
  %72 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8763
  %base104 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !8763
  %73 = bitcast %struct.tree_base* %base104 to i64*, !dbg !8763
  %bf.load105 = load i64, i64* %73, align 8, !dbg !8763
  %bf.lshr106 = lshr i64 %bf.load105, 20, !dbg !8763
  %bf.clear107 = and i64 %bf.lshr106, 1, !dbg !8763
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !8763
  %tobool109 = icmp ne i32 %bf.cast108, 0, !dbg !8763
  br i1 %tobool109, label %land.lhs.true110, label %if.end134, !dbg !8764

land.lhs.true110:                                 ; preds = %lor.lhs.false
  %74 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8765
  %call111 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %74), !dbg !8766
  %conv112 = zext i8 %call111 to i32, !dbg !8766
  %tobool113 = icmp ne i32 %conv112, 0, !dbg !8766
  br i1 %tobool113, label %land.lhs.true114, label %if.end134, !dbg !8767

land.lhs.true114:                                 ; preds = %land.lhs.true110, %land.lhs.true102
  %75 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8768
  %base115 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !8768
  %76 = bitcast %struct.tree_base* %base115 to i64*, !dbg !8768
  %bf.load116 = load i64, i64* %76, align 8, !dbg !8768
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !8768
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !8768
  %cmp119 = icmp eq i32 %bf.cast118, 141, !dbg !8769
  br i1 %cmp119, label %land.lhs.true125, label %lor.lhs.false121, !dbg !8770

lor.lhs.false121:                                 ; preds = %land.lhs.true114
  %77 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8771
  %call122 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %77), !dbg !8772
  %conv123 = zext i8 %call122 to i32, !dbg !8772
  %tobool124 = icmp ne i32 %conv123, 0, !dbg !8772
  br i1 %tobool124, label %land.lhs.true125, label %if.end134, !dbg !8773

land.lhs.true125:                                 ; preds = %lor.lhs.false121, %land.lhs.true114
  %78 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8774
  %base126 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !8774
  %79 = bitcast %struct.tree_base* %base126 to i64*, !dbg !8774
  %bf.load127 = load i64, i64* %79, align 8, !dbg !8774
  %bf.lshr128 = lshr i64 %bf.load127, 22, !dbg !8774
  %bf.clear129 = and i64 %bf.lshr128, 1, !dbg !8774
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !8774
  %tobool131 = icmp ne i32 %bf.cast130, 0, !dbg !8774
  br i1 %tobool131, label %if.end134, label %if.then132, !dbg !8775

if.then132:                                       ; preds = %land.lhs.true125
  %80 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8776
  %81 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8778
  %82 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8779
  call void @insert_decl_map(%struct.copy_body_data* %80, %union.tree_node* %81, %union.tree_node* %82), !dbg !8780
  %83 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8781
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8782
  %85 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8783
  %86 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8784
  %call133 = call %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %83, %struct.basic_block_def* %84, %union.tree_node* %85, %union.tree_node* %86, %union.gimple_statement_d* null), !dbg !8785
  store %union.gimple_statement_d* %call133, %union.gimple_statement_d** %retval, align 8, !dbg !8786
  br label %return, !dbg !8786

if.end134:                                        ; preds = %land.lhs.true125, %lor.lhs.false121, %land.lhs.true110, %lor.lhs.false, %land.lhs.true98, %land.lhs.true96, %land.lhs.true94, %if.end89
  %87 = load i32, i32* @optimize, align 4, !dbg !8787
  %tobool135 = icmp ne i32 %87, 0, !dbg !8787
  br i1 %tobool135, label %land.lhs.true136, label %if.end161, !dbg !8789

land.lhs.true136:                                 ; preds = %if.end134
  %88 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8790
  %add.ptr137 = getelementptr inbounds %struct.function, %struct.function* %88, i64 0, !dbg !8790
  %call138 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr137), !dbg !8791
  %conv139 = zext i8 %call138 to i32, !dbg !8791
  %tobool140 = icmp ne i32 %conv139, 0, !dbg !8791
  br i1 %tobool140, label %land.lhs.true141, label %if.end161, !dbg !8792

land.lhs.true141:                                 ; preds = %land.lhs.true136
  %89 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8793
  %tobool142 = icmp ne %union.tree_node* %89, null, !dbg !8793
  br i1 %tobool142, label %if.end161, label %land.lhs.true143, !dbg !8794

land.lhs.true143:                                 ; preds = %land.lhs.true141
  %90 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8795
  %call144 = call zeroext i8 @is_gimple_reg(%union.tree_node* %90), !dbg !8796
  %conv145 = zext i8 %call144 to i32, !dbg !8796
  %tobool146 = icmp ne i32 %conv145, 0, !dbg !8796
  br i1 %tobool146, label %if.then147, label %if.end161, !dbg !8797

if.then147:                                       ; preds = %land.lhs.true143
  %91 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8798
  %tobool148 = icmp ne %union.tree_node* %91, null, !dbg !8798
  br i1 %tobool148, label %lor.lhs.false149, label %cond.false157, !dbg !8798

lor.lhs.false149:                                 ; preds = %if.then147
  %92 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8798
  %base150 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !8798
  %93 = bitcast %struct.tree_base* %base150 to i64*, !dbg !8798
  %bf.load151 = load i64, i64* %93, align 8, !dbg !8798
  %bf.lshr152 = lshr i64 %bf.load151, 16, !dbg !8798
  %bf.clear153 = and i64 %bf.lshr152, 1, !dbg !8798
  %bf.cast154 = trunc i64 %bf.clear153 to i32, !dbg !8798
  %tobool155 = icmp ne i32 %bf.cast154, 0, !dbg !8798
  br i1 %tobool155, label %cond.true156, label %cond.false157, !dbg !8798

cond.true156:                                     ; preds = %lor.lhs.false149
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2452, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8798
  br label %cond.end158, !dbg !8798

cond.false157:                                    ; preds = %lor.lhs.false149, %if.then147
  br label %cond.end158, !dbg !8798

cond.end158:                                      ; preds = %cond.false157, %cond.true156
  %cond159 = phi i32 [ 0, %cond.true156 ], [ 0, %cond.false157 ], !dbg !8798
  %94 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8800
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8801
  %96 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8802
  %97 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8803
  %call160 = call %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %94, %struct.basic_block_def* %95, %union.tree_node* %96, %union.tree_node* %97, %union.gimple_statement_d* null), !dbg !8804
  store %union.gimple_statement_d* %call160, %union.gimple_statement_d** %retval, align 8, !dbg !8805
  br label %return, !dbg !8805

if.end161:                                        ; preds = %land.lhs.true143, %land.lhs.true141, %land.lhs.true136, %if.end134
  %98 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8806
  %tobool162 = icmp ne %union.tree_node* %98, null, !dbg !8806
  br i1 %tobool162, label %if.then163, label %if.end194, !dbg !8808

if.then163:                                       ; preds = %if.end161
  %99 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8809
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8812
  %cmp164 = icmp eq %union.tree_node* %99, %100, !dbg !8813
  br i1 %cmp164, label %if.then166, label %if.end168, !dbg !8814

if.then166:                                       ; preds = %if.then163
  %101 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8815
  %102 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8817
  %103 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8818
  call void @insert_decl_map(%struct.copy_body_data* %101, %union.tree_node* %102, %union.tree_node* %103), !dbg !8819
  %104 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8820
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8821
  %106 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8822
  %107 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8823
  %call167 = call %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %104, %struct.basic_block_def* %105, %union.tree_node* %106, %union.tree_node* %107, %union.gimple_statement_d* null), !dbg !8824
  store %union.gimple_statement_d* %call167, %union.gimple_statement_d** %retval, align 8, !dbg !8825
  br label %return, !dbg !8825

if.end168:                                        ; preds = %if.then163
  %108 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8826
  %call169 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %108), !dbg !8826
  store %union.tree_node* %call169, %union.tree_node** %rhs, align 8, !dbg !8826
  %109 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8827
  %tobool170 = icmp ne %union.tree_node* %109, null, !dbg !8827
  br i1 %tobool170, label %land.lhs.true171, label %if.else186, !dbg !8829

land.lhs.true171:                                 ; preds = %if.end168
  %110 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8830
  %add.ptr172 = getelementptr inbounds %struct.function, %struct.function* %110, i64 0, !dbg !8830
  %call173 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr172), !dbg !8831
  %conv174 = zext i8 %call173 to i32, !dbg !8831
  %tobool175 = icmp ne i32 %conv174, 0, !dbg !8831
  br i1 %tobool175, label %land.lhs.true176, label %if.else186, !dbg !8832

land.lhs.true176:                                 ; preds = %land.lhs.true171
  %111 = load %union.tree_node*, %union.tree_node** %p.addr, align 8, !dbg !8833
  %call177 = call zeroext i8 @is_gimple_reg(%union.tree_node* %111), !dbg !8834
  %conv178 = zext i8 %call177 to i32, !dbg !8834
  %tobool179 = icmp ne i32 %conv178, 0, !dbg !8834
  br i1 %tobool179, label %if.then180, label %if.else186, !dbg !8835

if.then180:                                       ; preds = %land.lhs.true176
  %112 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8836
  %113 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8838
  %call181 = call %union.tree_node* @remap_ssa_name(%union.tree_node* %112, %struct.copy_body_data* %113), !dbg !8839
  store %union.tree_node* %call181, %union.tree_node** %def, align 8, !dbg !8840
  %114 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8841
  %115 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8841
  %call182 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %114, %union.tree_node* %115), !dbg !8841
  store %union.gimple_statement_d* %call182, %union.gimple_statement_d** %init_stmt, align 8, !dbg !8842
  %116 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8843
  %base183 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !8843
  %117 = bitcast %struct.tree_base* %base183 to i64*, !dbg !8843
  %bf.load184 = load i64, i64* %117, align 8, !dbg !8844
  %bf.clear185 = and i64 %bf.load184, -4294967297, !dbg !8844
  store i64 %bf.clear185, i64* %117, align 8, !dbg !8844
  %118 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8845
  call void @set_default_def(%union.tree_node* %118, %union.tree_node* null), !dbg !8846
  br label %if.end188, !dbg !8847

if.else186:                                       ; preds = %land.lhs.true176, %land.lhs.true171, %if.end168
  %119 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8848
  %120 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8848
  %call187 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %119, %union.tree_node* %120), !dbg !8848
  store %union.gimple_statement_d* %call187, %union.gimple_statement_d** %init_stmt, align 8, !dbg !8849
  br label %if.end188

if.end188:                                        ; preds = %if.else186, %if.then180
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8850
  %tobool189 = icmp ne %struct.basic_block_def* %121, null, !dbg !8850
  br i1 %tobool189, label %land.lhs.true190, label %if.end193, !dbg !8852

land.lhs.true190:                                 ; preds = %if.end188
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !8853
  %tobool191 = icmp ne %union.gimple_statement_d* %122, null, !dbg !8853
  br i1 %tobool191, label %if.then192, label %if.end193, !dbg !8854

if.then192:                                       ; preds = %land.lhs.true190
  %123 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8855
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8856
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !8857
  call void @insert_init_stmt(%struct.copy_body_data* %123, %struct.basic_block_def* %124, %union.gimple_statement_d* %125), !dbg !8858
  br label %if.end193, !dbg !8858

if.end193:                                        ; preds = %if.then192, %land.lhs.true190, %if.end188
  br label %if.end194, !dbg !8859

if.end194:                                        ; preds = %if.end193, %if.end161
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !8860
  store %union.gimple_statement_d* %126, %union.gimple_statement_d** %retval, align 8, !dbg !8861
  br label %return, !dbg !8861

return:                                           ; preds = %if.end194, %if.then166, %cond.end158, %if.then132, %if.then74
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8862
  ret %union.gimple_statement_d* %127, !dbg !8862
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !8863 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !8867, metadata !DIExpression()), !dbg !8868
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !8869, metadata !DIExpression()), !dbg !8868
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8868
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !8868
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8868
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !8868
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !8868
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8868

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !8868
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !8868
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !8868
  br label %cond.end, !dbg !8868

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8868

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8868
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !8868
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !8868
  ret %union.gimple_statement_d** %call1, !dbg !8868
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_arguments_for_versioning(%union.tree_node* %orig_parm, %struct.copy_body_data* %id, %struct.bitmap_head_def* %args_to_skip, %union.tree_node** %vars) #0 !dbg !8870 {
entry:
  %orig_parm.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %args_to_skip.addr = alloca %struct.bitmap_head_def*, align 8
  %vars.addr = alloca %union.tree_node**, align 8
  %arg = alloca %union.tree_node*, align 8
  %parg = alloca %union.tree_node**, align 8
  %new_parm = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %new_tree = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.tree_node* %orig_parm, %union.tree_node** %orig_parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_parm.addr, metadata !8873, metadata !DIExpression()), !dbg !8874
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !8875, metadata !DIExpression()), !dbg !8876
  store %struct.bitmap_head_def* %args_to_skip, %struct.bitmap_head_def** %args_to_skip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %args_to_skip.addr, metadata !8877, metadata !DIExpression()), !dbg !8878
  store %union.tree_node** %vars, %union.tree_node*** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %vars.addr, metadata !8879, metadata !DIExpression()), !dbg !8880
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !8881, metadata !DIExpression()), !dbg !8882
  call void @llvm.dbg.declare(metadata %union.tree_node*** %parg, metadata !8883, metadata !DIExpression()), !dbg !8884
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_parm, metadata !8885, metadata !DIExpression()), !dbg !8886
  store %union.tree_node* null, %union.tree_node** %new_parm, align 8, !dbg !8886
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8887, metadata !DIExpression()), !dbg !8888
  store i32 0, i32* %i, align 4, !dbg !8888
  store %union.tree_node** %new_parm, %union.tree_node*** %parg, align 8, !dbg !8889
  %0 = load %union.tree_node*, %union.tree_node** %orig_parm.addr, align 8, !dbg !8890
  store %union.tree_node* %0, %union.tree_node** %arg, align 8, !dbg !8892
  br label %for.cond, !dbg !8893

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8894
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !8896
  br i1 %tobool, label %for.body, label %for.end, !dbg !8896

for.body:                                         ; preds = %for.cond
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !8897
  %tobool1 = icmp ne %struct.bitmap_head_def* %2, null, !dbg !8897
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !8899

lor.lhs.false:                                    ; preds = %for.body
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !8900
  %4 = load i32, i32* %i, align 4, !dbg !8901
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %3, i32 %4), !dbg !8902
  %tobool2 = icmp ne i32 %call, 0, !dbg !8902
  br i1 %tobool2, label %if.else, label %if.then, !dbg !8903

if.then:                                          ; preds = %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !8904, metadata !DIExpression()), !dbg !8906
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8907
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8908
  %call3 = call %union.tree_node* @remap_decl(%union.tree_node* %5, %struct.copy_body_data* %6), !dbg !8909
  store %union.tree_node* %call3, %union.tree_node** %new_tree, align 8, !dbg !8906
  %7 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 15), align 8, !dbg !8910
  %8 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8911
  call void %7(%union.tree_node* %8), !dbg !8912
  %9 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8913
  %10 = load %union.tree_node**, %union.tree_node*** %parg, align 8, !dbg !8914
  store %union.tree_node* %9, %union.tree_node** %10, align 8, !dbg !8915
  %11 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8916
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !8916
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8916
  store %union.tree_node** %chain, %union.tree_node*** %parg, align 8, !dbg !8917
  br label %if.end12, !dbg !8918

if.else:                                          ; preds = %lor.lhs.false
  %12 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8919
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %12, i32 0, i32 6, !dbg !8921
  %13 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !8921
  %14 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8922
  %15 = bitcast %union.tree_node* %14 to i8*, !dbg !8922
  %call4 = call i8** @pointer_map_contains(%struct.pointer_map_t* %13, i8* %15), !dbg !8923
  %tobool5 = icmp ne i8** %call4, null, !dbg !8923
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !8924

if.then6:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8925, metadata !DIExpression()), !dbg !8927
  %16 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8928
  %17 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8929
  %call7 = call %union.tree_node* @copy_decl_to_var(%union.tree_node* %16, %struct.copy_body_data* %17), !dbg !8930
  store %union.tree_node* %call7, %union.tree_node** %var, align 8, !dbg !8927
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8931
  %call8 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %18), !dbg !8932
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8933
  %call9 = call zeroext i8 @add_referenced_var(%union.tree_node* %19), !dbg !8934
  %20 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8935
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8936
  %22 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8937
  call void @insert_decl_map(%struct.copy_body_data* %20, %union.tree_node* %21, %union.tree_node* %22), !dbg !8938
  %23 = load %union.tree_node**, %union.tree_node*** %vars.addr, align 8, !dbg !8939
  %24 = load %union.tree_node*, %union.tree_node** %23, align 8, !dbg !8940
  %25 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8941
  %common10 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !8941
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1, !dbg !8941
  store %union.tree_node* %24, %union.tree_node** %chain11, align 8, !dbg !8942
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8943
  %27 = load %union.tree_node**, %union.tree_node*** %vars.addr, align 8, !dbg !8944
  store %union.tree_node* %26, %union.tree_node** %27, align 8, !dbg !8945
  br label %if.end, !dbg !8946

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !8947

for.inc:                                          ; preds = %if.end12
  %28 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8948
  %common13 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !8948
  %chain14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 1, !dbg !8948
  %29 = load %union.tree_node*, %union.tree_node** %chain14, align 8, !dbg !8948
  store %union.tree_node* %29, %union.tree_node** %arg, align 8, !dbg !8949
  %30 = load i32, i32* %i, align 4, !dbg !8950
  %inc = add nsw i32 %30, 1, !dbg !8950
  store i32 %inc, i32* %i, align 4, !dbg !8950
  br label %for.cond, !dbg !8951, !llvm.loop !8952

for.end:                                          ; preds = %for.cond
  %31 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !8954
  ret %union.tree_node* %31, !dbg !8955
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_blocks(%union.tree_node* %block, %struct.copy_body_data* %id) #0 !dbg !8956 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !8957, metadata !DIExpression()), !dbg !8958
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !8959, metadata !DIExpression()), !dbg !8960
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !8961, metadata !DIExpression()), !dbg !8962
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !8963, metadata !DIExpression()), !dbg !8964
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !8965
  store %union.tree_node* %0, %union.tree_node** %new_tree, align 8, !dbg !8964
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !8966
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !8966
  br i1 %tobool, label %if.end, label %if.then, !dbg !8968

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8969
  br label %return, !dbg !8969

if.end:                                           ; preds = %entry
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8970
  call void @remap_block(%union.tree_node** %new_tree, %struct.copy_body_data* %2), !dbg !8971
  %3 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8972
  %4 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !8972
  %cmp = icmp ne %union.tree_node* %3, %4, !dbg !8972
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8972

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 620, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8972
  br label %cond.end, !dbg !8972

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8972

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8972
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !8973
  %block1 = bitcast %union.tree_node* %5 to %struct.tree_block*, !dbg !8973
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 5, !dbg !8973
  %6 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !8973
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !8975
  br label %for.cond, !dbg !8976

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8977
  %tobool2 = icmp ne %union.tree_node* %7, null, !dbg !8979
  br i1 %tobool2, label %for.body, label %for.end, !dbg !8979

for.body:                                         ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8980
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8981
  %10 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8982
  %call = call %union.tree_node* @remap_blocks(%union.tree_node* %9, %struct.copy_body_data* %10), !dbg !8983
  call void @prepend_lexical_block(%union.tree_node* %8, %union.tree_node* %call), !dbg !8984
  br label %for.inc, !dbg !8984

for.inc:                                          ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8985
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !8985
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8985
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8985
  store %union.tree_node* %12, %union.tree_node** %t, align 8, !dbg !8986
  br label %for.cond, !dbg !8987, !llvm.loop !8988

for.end:                                          ; preds = %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8990
  %block3 = bitcast %union.tree_node* %13 to %struct.tree_block*, !dbg !8990
  %subblocks4 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 5, !dbg !8990
  %14 = load %union.tree_node*, %union.tree_node** %subblocks4, align 8, !dbg !8990
  %call5 = call %union.tree_node* @blocks_nreverse(%union.tree_node* %14), !dbg !8991
  %15 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8992
  %block6 = bitcast %union.tree_node* %15 to %struct.tree_block*, !dbg !8992
  %subblocks7 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block6, i32 0, i32 5, !dbg !8992
  store %union.tree_node* %call5, %union.tree_node** %subblocks7, align 8, !dbg !8993
  %16 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8994
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !8995
  br label %return, !dbg !8995

return:                                           ; preds = %for.end, %if.then
  %17 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8996
  ret %union.tree_node* %17, !dbg !8996
}

; Function Attrs: noinline nounwind uwtable
define internal void @declare_inline_vars(%union.tree_node* %block, %union.tree_node* %vars) #0 !dbg !8997 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %vars.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !9000, metadata !DIExpression()), !dbg !9001
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars.addr, metadata !9002, metadata !DIExpression()), !dbg !9003
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9004, metadata !DIExpression()), !dbg !9005
  %0 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !9006
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !9008
  br label %for.cond, !dbg !9009

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9010
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9012
  br i1 %tobool, label %for.body, label %for.end, !dbg !9012

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9013
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !9013
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9013
  %3 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !9013
  %bf.load = load i32, i32* %3, align 8, !dbg !9015
  %bf.clear = and i32 %bf.load, -257, !dbg !9015
  %bf.set = or i32 %bf.clear, 256, !dbg !9015
  store i32 %bf.set, i32* %3, align 8, !dbg !9015
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9016
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9016
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !9016
  %bf.load1 = load i64, i64* %5, align 8, !dbg !9016
  %bf.lshr = lshr i64 %bf.load1, 26, !dbg !9016
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !9016
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !9016
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !9016
  br i1 %tobool3, label %cond.true, label %land.lhs.true, !dbg !9016

land.lhs.true:                                    ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9016
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9016
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9016
  %bf.load5 = load i64, i64* %7, align 8, !dbg !9016
  %bf.lshr6 = lshr i64 %bf.load5, 22, !dbg !9016
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !9016
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !9016
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !9016
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !9016

cond.true:                                        ; preds = %land.lhs.true, %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4451, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9016
  br label %cond.end, !dbg !9016

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9016

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9016
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9017
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9017
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !9017
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 9, !dbg !9017
  %10 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !9017
  %call = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %8, %union.tree_node* %10), !dbg !9017
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9018
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !9018
  %local_decls11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 9, !dbg !9019
  store %union.tree_node* %call, %union.tree_node** %local_decls11, align 8, !dbg !9020
  br label %for.inc, !dbg !9021

for.inc:                                          ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9022
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !9022
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9022
  %13 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9022
  store %union.tree_node* %13, %union.tree_node** %t, align 8, !dbg !9023
  br label %for.cond, !dbg !9024, !llvm.loop !9025

for.end:                                          ; preds = %for.cond
  %14 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9027
  %tobool12 = icmp ne %union.tree_node* %14, null, !dbg !9027
  br i1 %tobool12, label %if.then, label %if.end, !dbg !9029

if.then:                                          ; preds = %for.end
  %15 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9030
  %block13 = bitcast %union.tree_node* %15 to %struct.tree_block*, !dbg !9030
  %vars14 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block13, i32 0, i32 3, !dbg !9030
  %16 = load %union.tree_node*, %union.tree_node** %vars14, align 8, !dbg !9030
  %17 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !9031
  %call15 = call %union.tree_node* @chainon(%union.tree_node* %16, %union.tree_node* %17), !dbg !9032
  %18 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9033
  %block16 = bitcast %union.tree_node* %18 to %struct.tree_block*, !dbg !9033
  %vars17 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block16, i32 0, i32 3, !dbg !9033
  store %union.tree_node* %call15, %union.tree_node** %vars17, align 8, !dbg !9034
  br label %if.end, !dbg !9033

if.end:                                           ; preds = %if.then, %for.end
  ret void, !dbg !9035
}

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_be_nonlocal(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !9036 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9039, metadata !DIExpression()), !dbg !9040
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !9041, metadata !DIExpression()), !dbg !9042
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9043
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9043
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9043
  %bf.load = load i64, i64* %1, align 8, !dbg !9043
  %bf.clear = and i64 %bf.load, 65535, !dbg !9043
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9043
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !9045
  br i1 %cmp, label %if.then, label %if.end, !dbg !9046

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9047
  br label %return, !dbg !9047

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9048
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9048
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9048
  %bf.load2 = load i64, i64* %3, align 8, !dbg !9048
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9048
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9048
  %cmp5 = icmp eq i32 %bf.cast4, 32, !dbg !9050
  br i1 %cmp5, label %land.lhs.true, label %if.end7, !dbg !9051

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9052
  %5 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9053
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %5, i32 0, i32 0, !dbg !9054
  %6 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !9054
  %call = call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %4, %union.tree_node* %6), !dbg !9055
  %tobool = icmp ne i8 %call, 0, !dbg !9055
  br i1 %tobool, label %if.end7, label %if.then6, !dbg !9056

if.then6:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !9057
  br label %return, !dbg !9057

if.end7:                                          ; preds = %land.lhs.true, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9058
  %base8 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9058
  %8 = bitcast %struct.tree_base* %base8 to i64*, !dbg !9058
  %bf.load9 = load i64, i64* %8, align 8, !dbg !9058
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !9058
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !9058
  %cmp12 = icmp ne i32 %bf.cast11, 32, !dbg !9060
  br i1 %cmp12, label %land.lhs.true13, label %if.end20, !dbg !9061

land.lhs.true13:                                  ; preds = %if.end7
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9062
  %base14 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9062
  %10 = bitcast %struct.tree_base* %base14 to i64*, !dbg !9062
  %bf.load15 = load i64, i64* %10, align 8, !dbg !9062
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !9062
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9062
  %cmp18 = icmp ne i32 %bf.cast17, 34, !dbg !9063
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !9064

if.then19:                                        ; preds = %land.lhs.true13
  store i8 0, i8* %retval, align 1, !dbg !9065
  br label %return, !dbg !9065

if.end20:                                         ; preds = %land.lhs.true13, %if.end7
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9066
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !9066
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9066
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9066
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9068
  %common21 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !9068
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !9068
  %14 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !9068
  %15 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9069
  %call23 = call %union.tree_node* @remapped_type(%union.tree_node* %14, %struct.copy_body_data* %15), !dbg !9070
  %cmp24 = icmp ne %union.tree_node* %12, %call23, !dbg !9071
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !9072

if.then25:                                        ; preds = %if.end20
  store i8 0, i8* %retval, align 1, !dbg !9073
  br label %return, !dbg !9073

if.end26:                                         ; preds = %if.end20
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9074
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !9074
  %call27 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !9076
  %tobool28 = icmp ne i8 %call27, 0, !dbg !9076
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !9077

if.then29:                                        ; preds = %if.end26
  store i8 0, i8* %retval, align 1, !dbg !9078
  br label %return, !dbg !9078

if.end30:                                         ; preds = %if.end26
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9079
  %call31 = call %struct.var_ann_d* @var_ann(%union.tree_node* %17), !dbg !9081
  %tobool32 = icmp ne %struct.var_ann_d* %call31, null, !dbg !9081
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !9082

if.then33:                                        ; preds = %if.end30
  store i8 0, i8* %retval, align 1, !dbg !9083
  br label %return, !dbg !9083

if.end34:                                         ; preds = %if.end30
  store i8 1, i8* %retval, align 1, !dbg !9084
  br label %return, !dbg !9084

return:                                           ; preds = %if.end34, %if.then33, %if.then29, %if.then25, %if.then19, %if.then6, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !9085
  ret i8 %18, !dbg !9085
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_body(%struct.copy_body_data* %id, i64 %count, i32 %frequency_scale, %struct.basic_block_def* %entry_block_map, %struct.basic_block_def* %exit_block_map) #0 !dbg !9086 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %count.addr = alloca i64, align 8
  %frequency_scale.addr = alloca i32, align 4
  %entry_block_map.addr = alloca %struct.basic_block_def*, align 8
  %exit_block_map.addr = alloca %struct.basic_block_def*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !9089, metadata !DIExpression()), !dbg !9090
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !9091, metadata !DIExpression()), !dbg !9092
  store i32 %frequency_scale, i32* %frequency_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frequency_scale.addr, metadata !9093, metadata !DIExpression()), !dbg !9094
  store %struct.basic_block_def* %entry_block_map, %struct.basic_block_def** %entry_block_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_block_map.addr, metadata !9095, metadata !DIExpression()), !dbg !9096
  store %struct.basic_block_def* %exit_block_map, %struct.basic_block_def** %exit_block_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_block_map.addr, metadata !9097, metadata !DIExpression()), !dbg !9098
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !9099, metadata !DIExpression()), !dbg !9100
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9101
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 0, !dbg !9102
  %1 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !9102
  store %union.tree_node* %1, %union.tree_node** %fndecl, align 8, !dbg !9100
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !9103, metadata !DIExpression()), !dbg !9104
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !9105
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !9105
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !9105
  %3 = load %struct.function*, %struct.function** %f, align 8, !dbg !9105
  %cfg = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1, !dbg !9105
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9105
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 0, !dbg !9105
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !9105
  %tobool = icmp ne %struct.basic_block_def* %5, null, !dbg !9105
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9105

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2224, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9105
  br label %cond.end, !dbg !9105

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9105

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9105
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9106
  %7 = load i64, i64* %count.addr, align 8, !dbg !9107
  %8 = load i32, i32* %frequency_scale.addr, align 4, !dbg !9108
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_block_map.addr, align 8, !dbg !9109
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block_map.addr, align 8, !dbg !9110
  %call = call %union.tree_node* @copy_cfg_body(%struct.copy_body_data* %6, i64 %7, i32 %8, %struct.basic_block_def* %9, %struct.basic_block_def* %10), !dbg !9111
  store %union.tree_node* %call, %union.tree_node** %body, align 8, !dbg !9112
  %11 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9113
  call void @copy_debug_stmts(%struct.copy_body_data* %11), !dbg !9114
  %12 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !9115
  ret %union.tree_node* %12, !dbg !9116
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !9117 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9123, metadata !DIExpression()), !dbg !9124
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9125
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !9125
  %tobool = icmp ne i8 %call, 0, !dbg !9125
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9125

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9125
  br label %cond.end, !dbg !9125

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9125

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9125
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9126
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !9126
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9126
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9126
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9126

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9126
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !9126
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !9126
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9126
  br label %cond.end5, !dbg !9126

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9126

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9126
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9126
  ret %struct.edge_def* %call7, !dbg !9127
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !9128 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !9133, metadata !DIExpression()), !dbg !9134
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9134
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !9134
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9134

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9134
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !9134
  %2 = load i32, i32* %num, align 8, !dbg !9134
  br label %cond.end, !dbg !9134

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9134
  ret i32 %cond, !dbg !9134
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_init_stmt(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.gimple_statement_d* %init_stmt) #0 !dbg !9135 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %init_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %rhs = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !9138, metadata !DIExpression()), !dbg !9139
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9140, metadata !DIExpression()), !dbg !9141
  store %union.gimple_statement_d* %init_stmt, %union.gimple_statement_d** %init_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init_stmt.addr, metadata !9142, metadata !DIExpression()), !dbg !9143
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9144
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !9144
  br i1 %tobool, label %if.then, label %if.end35, !dbg !9146

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !9147, metadata !DIExpression()), !dbg !9149
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9150
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %si, %struct.basic_block_def* %1), !dbg !9151
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9152
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %2), !dbg !9154
  %tobool1 = icmp ne i8 %call, 0, !dbg !9154
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !9155

land.lhs.true:                                    ; preds = %if.then
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9156
  %call2 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !9157
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call2), !dbg !9158
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9158
  br i1 %tobool4, label %if.end, label %land.lhs.true5, !dbg !9159

land.lhs.true5:                                   ; preds = %land.lhs.true
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9160
  %call6 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !9160
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !9160
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9160
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9160
  %call7 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %5), !dbg !9161
  %conv = zext i8 %call7 to i32, !dbg !9161
  %tobool8 = icmp ne i32 %conv, 0, !dbg !9161
  br i1 %tobool8, label %land.lhs.true9, label %if.end, !dbg !9162

land.lhs.true9:                                   ; preds = %land.lhs.true5
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9163
  %call10 = call i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %6), !dbg !9164
  %cmp = icmp eq i32 %call10, 2, !dbg !9165
  br i1 %cmp, label %if.then12, label %if.end, !dbg !9166

if.then12:                                        ; preds = %land.lhs.true9
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9167, metadata !DIExpression()), !dbg !9169
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9170
  %call13 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %7), !dbg !9170
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9170
  %call14 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %8), !dbg !9170
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9170
  %call15 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %9), !dbg !9170
  %call16 = call %union.tree_node* @build1_stat(i32 %call13, %union.tree_node* %call14, %union.tree_node* %call15), !dbg !9170
  store %union.tree_node* %call16, %union.tree_node** %rhs, align 8, !dbg !9169
  %10 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9171
  %call17 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %si, %union.tree_node* %10, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0), !dbg !9172
  store %union.tree_node* %call17, %union.tree_node** %rhs, align 8, !dbg !9173
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9174
  %12 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9175
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9175
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !9175
  %bf.load = load i64, i64* %13, align 8, !dbg !9175
  %bf.clear = and i64 %bf.load, 65535, !dbg !9175
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9175
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %11, i32 %bf.cast), !dbg !9176
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9177
  %15 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9178
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %14, %union.tree_node* %15), !dbg !9179
  br label %if.end, !dbg !9180

if.end:                                           ; preds = %if.then12, %land.lhs.true9, %land.lhs.true5, %land.lhs.true, %if.then
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9181
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %16, i32 0), !dbg !9182
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9183
  call void @gimple_regimplify_operands(%union.gimple_statement_d* %17, %struct.gimple_stmt_iterator* %si), !dbg !9184
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9185
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %18), !dbg !9186
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9187
  %call18 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %19), !dbg !9189
  %tobool19 = icmp ne i8 %call18, 0, !dbg !9189
  br i1 %tobool19, label %if.end34, label %land.lhs.true20, !dbg !9190

land.lhs.true20:                                  ; preds = %if.end
  %20 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !9191
  %tobool21 = icmp ne i32 %20, 0, !dbg !9191
  br i1 %tobool21, label %if.then22, label %if.end34, !dbg !9192

if.then22:                                        ; preds = %land.lhs.true20
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !9193, metadata !DIExpression()), !dbg !9195
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !9196, metadata !DIExpression()), !dbg !9197
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9198
  %call23 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %21), !dbg !9199
  store %union.tree_node* %call23, %union.tree_node** %def, align 8, !dbg !9197
  %22 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9200
  %base24 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9200
  %23 = bitcast %struct.tree_base* %base24 to i64*, !dbg !9200
  %bf.load25 = load i64, i64* %23, align 8, !dbg !9200
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !9200
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !9200
  %cmp28 = icmp eq i32 %bf.cast27, 141, !dbg !9202
  br i1 %cmp28, label %if.then30, label %if.else, !dbg !9203

if.then30:                                        ; preds = %if.then22
  %24 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9204
  %ssa_name = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !9204
  %var31 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !9204
  %25 = load %union.tree_node*, %union.tree_node** %var31, align 8, !dbg !9204
  store %union.tree_node* %25, %union.tree_node** %var, align 8, !dbg !9205
  br label %if.end32, !dbg !9206

if.else:                                          ; preds = %if.then22
  %26 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9207
  store %union.tree_node* %26, %union.tree_node** %var, align 8, !dbg !9208
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then30
  %27 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9209
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9210
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !9211
  %30 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9212
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt.addr, align 8, !dbg !9213
  %call33 = call %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %27, %struct.basic_block_def* %28, %union.tree_node* %29, %union.tree_node* %30, %union.gimple_statement_d* %31), !dbg !9214
  br label %if.end34, !dbg !9215

if.end34:                                         ; preds = %if.end32, %land.lhs.true20, %if.end
  br label %if.end35, !dbg !9216

if.end35:                                         ; preds = %if.end34, %entry
  ret void, !dbg !9217
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %vec_) #0 !dbg !9218 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !9222, metadata !DIExpression()), !dbg !9223
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_, metadata !9224, metadata !DIExpression()), !dbg !9223
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9223
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !9223
  %1 = load i32, i32* %num, align 8, !dbg !9223
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9223
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 2, !dbg !9223
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !9223
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 0, !dbg !9223
  %4 = load i32, i32* %num1, align 8, !dbg !9223
  %dec = add i32 %4, -1, !dbg !9223
  store i32 %dec, i32* %num1, align 8, !dbg !9223
  %idxprom = zext i32 %dec to i64, !dbg !9223
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !9223
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !9223
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %obj_, align 8, !dbg !9223
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_, align 8, !dbg !9223
  ret %union.gimple_statement_d* %6, !dbg !9223
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_clone_info(%struct.copy_body_data* %id) #0 !dbg !9225 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %i = alloca i32, align 4
  %replace_info = alloca %struct.ipa_replace_map*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !9228, metadata !DIExpression()), !dbg !9229
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !9230, metadata !DIExpression()), !dbg !9231
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9232
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 3, !dbg !9234
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !9234
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 11, !dbg !9235
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !9235
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !9232
  br i1 %tobool, label %if.end, label %if.then, !dbg !9236

if.then:                                          ; preds = %entry
  br label %for.end47, !dbg !9237

if.end:                                           ; preds = %entry
  %3 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9238
  %dst_node1 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %3, i32 0, i32 3, !dbg !9240
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node1, align 8, !dbg !9240
  %clones2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 11, !dbg !9241
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %clones2, align 8, !dbg !9241
  store %struct.cgraph_node* %5, %struct.cgraph_node** %node, align 8, !dbg !9242
  br label %for.cond, !dbg !9243

for.cond:                                         ; preds = %if.end46, %if.end
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9244
  %7 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9246
  %dst_node3 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %7, i32 0, i32 3, !dbg !9247
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node3, align 8, !dbg !9247
  %cmp = icmp ne %struct.cgraph_node* %6, %8, !dbg !9248
  br i1 %cmp, label %for.body, label %for.end47, !dbg !9249

for.body:                                         ; preds = %for.cond
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9250
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 21, !dbg !9253
  %tree_map = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone, i32 0, i32 0, !dbg !9254
  %10 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !9254
  %tobool4 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %10, null, !dbg !9250
  br i1 %tobool4, label %if.then5, label %if.end27, !dbg !9255

if.then5:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9256, metadata !DIExpression()), !dbg !9258
  store i32 0, i32* %i, align 4, !dbg !9259
  br label %for.cond6, !dbg !9261

for.cond6:                                        ; preds = %for.inc, %if.then5
  %11 = load i32, i32* %i, align 4, !dbg !9262
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9264
  %clone7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 21, !dbg !9264
  %tree_map8 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone7, i32 0, i32 0, !dbg !9264
  %13 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map8, align 8, !dbg !9264
  %tobool9 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %13, null, !dbg !9264
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !9264

cond.true:                                        ; preds = %for.cond6
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9264
  %clone10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 21, !dbg !9264
  %tree_map11 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone10, i32 0, i32 0, !dbg !9264
  %15 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map11, align 8, !dbg !9264
  %base = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %15, i32 0, i32 0, !dbg !9264
  br label %cond.end, !dbg !9264

cond.false:                                       ; preds = %for.cond6
  br label %cond.end, !dbg !9264

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_replace_map_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9264
  %call = call i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %cond), !dbg !9264
  %cmp12 = icmp ult i32 %11, %call, !dbg !9265
  br i1 %cmp12, label %for.body13, label %for.end, !dbg !9266

for.body13:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.ipa_replace_map** %replace_info, metadata !9267, metadata !DIExpression()), !dbg !9269
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9270
  %clone14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 21, !dbg !9270
  %tree_map15 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone14, i32 0, i32 0, !dbg !9270
  %17 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map15, align 8, !dbg !9270
  %tobool16 = icmp ne %struct.VEC_ipa_replace_map_p_gc* %17, null, !dbg !9270
  br i1 %tobool16, label %cond.true17, label %cond.false21, !dbg !9270

cond.true17:                                      ; preds = %for.body13
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9270
  %clone18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 21, !dbg !9270
  %tree_map19 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone18, i32 0, i32 0, !dbg !9270
  %19 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map19, align 8, !dbg !9270
  %base20 = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %19, i32 0, i32 0, !dbg !9270
  br label %cond.end22, !dbg !9270

cond.false21:                                     ; preds = %for.body13
  br label %cond.end22, !dbg !9270

cond.end22:                                       ; preds = %cond.false21, %cond.true17
  %cond23 = phi %struct.VEC_ipa_replace_map_p_base* [ %base20, %cond.true17 ], [ null, %cond.false21 ], !dbg !9270
  %20 = load i32, i32* %i, align 4, !dbg !9270
  %call24 = call %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %cond23, i32 %20), !dbg !9270
  store %struct.ipa_replace_map* %call24, %struct.ipa_replace_map** %replace_info, align 8, !dbg !9271
  %21 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !9272
  %old_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %21, i32 0, i32 0, !dbg !9272
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9272
  %23 = bitcast %struct.copy_body_data* %22 to i8*, !dbg !9272
  %call25 = call %union.tree_node* @walk_tree_1(%union.tree_node** %old_tree, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %23, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !9272
  %24 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %replace_info, align 8, !dbg !9273
  %new_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %24, i32 0, i32 1, !dbg !9273
  %25 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9273
  %26 = bitcast %struct.copy_body_data* %25 to i8*, !dbg !9273
  %call26 = call %union.tree_node* @walk_tree_1(%union.tree_node** %new_tree, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %26, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !9273
  br label %for.inc, !dbg !9274

for.inc:                                          ; preds = %cond.end22
  %27 = load i32, i32* %i, align 4, !dbg !9275
  %inc = add i32 %27, 1, !dbg !9275
  store i32 %inc, i32* %i, align 4, !dbg !9275
  br label %for.cond6, !dbg !9276, !llvm.loop !9277

for.end:                                          ; preds = %cond.end
  br label %if.end27, !dbg !9279

if.end27:                                         ; preds = %for.end, %for.body
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9280
  %clones28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 11, !dbg !9282
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %clones28, align 8, !dbg !9282
  %tobool29 = icmp ne %struct.cgraph_node* %29, null, !dbg !9280
  br i1 %tobool29, label %if.then30, label %if.else, !dbg !9283

if.then30:                                        ; preds = %if.end27
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9284
  %clones31 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 11, !dbg !9285
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %clones31, align 8, !dbg !9285
  store %struct.cgraph_node* %31, %struct.cgraph_node** %node, align 8, !dbg !9286
  br label %if.end46, !dbg !9287

if.else:                                          ; preds = %if.end27
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9288
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 9, !dbg !9290
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !9290
  %tobool32 = icmp ne %struct.cgraph_node* %33, null, !dbg !9288
  br i1 %tobool32, label %if.then33, label %if.else35, !dbg !9291

if.then33:                                        ; preds = %if.else
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9292
  %next_sibling_clone34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 9, !dbg !9293
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone34, align 8, !dbg !9293
  store %struct.cgraph_node* %35, %struct.cgraph_node** %node, align 8, !dbg !9294
  br label %if.end45, !dbg !9295

if.else35:                                        ; preds = %if.else
  br label %while.cond, !dbg !9296

while.cond:                                       ; preds = %while.body, %if.else35
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9298
  %37 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9299
  %dst_node36 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %37, i32 0, i32 3, !dbg !9300
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node36, align 8, !dbg !9300
  %cmp37 = icmp ne %struct.cgraph_node* %36, %38, !dbg !9301
  br i1 %cmp37, label %land.rhs, label %land.end, !dbg !9302

land.rhs:                                         ; preds = %while.cond
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9303
  %next_sibling_clone38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 9, !dbg !9304
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone38, align 8, !dbg !9304
  %tobool39 = icmp ne %struct.cgraph_node* %40, null, !dbg !9305
  %lnot = xor i1 %tobool39, true, !dbg !9305
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %41 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !9306
  br i1 %41, label %while.body, label %while.end, !dbg !9296

while.body:                                       ; preds = %land.end
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9307
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 12, !dbg !9308
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !9308
  store %struct.cgraph_node* %43, %struct.cgraph_node** %node, align 8, !dbg !9309
  br label %while.cond, !dbg !9296, !llvm.loop !9310

while.end:                                        ; preds = %land.end
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9311
  %45 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9313
  %dst_node40 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %45, i32 0, i32 3, !dbg !9314
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node40, align 8, !dbg !9314
  %cmp41 = icmp ne %struct.cgraph_node* %44, %46, !dbg !9315
  br i1 %cmp41, label %if.then42, label %if.end44, !dbg !9316

if.then42:                                        ; preds = %while.end
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !9317
  %next_sibling_clone43 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %47, i32 0, i32 9, !dbg !9318
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone43, align 8, !dbg !9318
  store %struct.cgraph_node* %48, %struct.cgraph_node** %node, align 8, !dbg !9319
  br label %if.end44, !dbg !9320

if.end44:                                         ; preds = %if.then42, %while.end
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then33
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then30
  br label %for.cond, !dbg !9321, !llvm.loop !9322

for.end47:                                        ; preds = %if.then, %for.cond
  ret void, !dbg !9324
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_gimple_op_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !9325 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi_p = alloca %struct.walk_stmt_info*, align 8
  %id = alloca %struct.copy_body_data*, align 8
  %fn = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  %new_type = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %n = alloca %union.tree_node**, align 8
  %type130 = alloca %union.tree_node*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  %old = alloca %union.tree_node*, align 8
  %invariant = alloca i32, align 4
  %block = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !9326, metadata !DIExpression()), !dbg !9327
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !9328, metadata !DIExpression()), !dbg !9329
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9330, metadata !DIExpression()), !dbg !9331
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi_p, metadata !9332, metadata !DIExpression()), !dbg !9333
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9334
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !9335
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi_p, align 8, !dbg !9333
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id, metadata !9336, metadata !DIExpression()), !dbg !9337
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi_p, align 8, !dbg !9338
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !9339
  %3 = load i8*, i8** %info, align 8, !dbg !9339
  %4 = bitcast i8* %3 to %struct.copy_body_data*, !dbg !9340
  store %struct.copy_body_data* %4, %struct.copy_body_data** %id, align 8, !dbg !9337
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !9341, metadata !DIExpression()), !dbg !9342
  %5 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9343
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %5, i32 0, i32 0, !dbg !9344
  %6 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !9344
  store %union.tree_node* %6, %union.tree_node** %fn, align 8, !dbg !9342
  %7 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9345
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !9345
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9345
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !9345
  %bf.load = load i64, i64* %9, align 8, !dbg !9345
  %bf.clear = and i64 %bf.load, 65535, !dbg !9345
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9345
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9347
  br i1 %cmp, label %if.then, label %if.else, !dbg !9348

if.then:                                          ; preds = %entry
  %10 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9349
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !9351
  %12 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9352
  %call = call %union.tree_node* @remap_ssa_name(%union.tree_node* %11, %struct.copy_body_data* %12), !dbg !9353
  %13 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9354
  store %union.tree_node* %call, %union.tree_node** %13, align 8, !dbg !9355
  %14 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9356
  store i32 0, i32* %14, align 4, !dbg !9357
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9358
  br label %return, !dbg !9358

if.else:                                          ; preds = %entry
  %15 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9359
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !9361
  %17 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9362
  %call1 = call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %16, %union.tree_node* %17), !dbg !9363
  %tobool = icmp ne i8 %call1, 0, !dbg !9363
  br i1 %tobool, label %if.then2, label %if.else47, !dbg !9364

if.then2:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !9365, metadata !DIExpression()), !dbg !9367
  %18 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9368
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !9369
  %20 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9370
  %call3 = call %union.tree_node* @remap_decl(%union.tree_node* %19, %struct.copy_body_data* %20), !dbg !9371
  store %union.tree_node* %call3, %union.tree_node** %new_decl, align 8, !dbg !9372
  %21 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9373
  %tobool4 = icmp ne %union.tree_node* %21, null, !dbg !9373
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !9373

cond.true:                                        ; preds = %if.then2
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 748, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9373
  br label %cond.end, !dbg !9373

cond.false:                                       ; preds = %if.then2
  br label %cond.end, !dbg !9373

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9373
  br label %while.cond, !dbg !9374

while.cond:                                       ; preds = %while.body, %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %base5 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !9374
  %23 = bitcast %struct.tree_base* %base5 to i64*, !dbg !9374
  %bf.load6 = load i64, i64* %23, align 8, !dbg !9374
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !9374
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !9374
  %cmp9 = icmp eq i32 %bf.cast8, 116, !dbg !9374
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false, !dbg !9374

lor.lhs.false:                                    ; preds = %while.cond
  %24 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %base10 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9374
  %25 = bitcast %struct.tree_base* %base10 to i64*, !dbg !9374
  %bf.load11 = load i64, i64* %25, align 8, !dbg !9374
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !9374
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !9374
  %cmp14 = icmp eq i32 %bf.cast13, 113, !dbg !9374
  br i1 %cmp14, label %land.lhs.true, label %lor.lhs.false15, !dbg !9374

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %26 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %base16 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !9374
  %27 = bitcast %struct.tree_base* %base16 to i64*, !dbg !9374
  %bf.load17 = load i64, i64* %27, align 8, !dbg !9374
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !9374
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !9374
  %cmp20 = icmp eq i32 %bf.cast19, 117, !dbg !9374
  br i1 %cmp20, label %land.lhs.true, label %land.end, !dbg !9374

land.lhs.true:                                    ; preds = %lor.lhs.false15, %lor.lhs.false, %while.cond
  %28 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %exp = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !9374
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9374
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9374
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9374
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9374
  %cmp21 = icmp ne %union.tree_node* %29, %30, !dbg !9374
  br i1 %cmp21, label %land.rhs, label %land.end, !dbg !9374

land.rhs:                                         ; preds = %land.lhs.true
  %31 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %common = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !9374
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9374
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9374
  %33 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %exp22 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !9374
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !9374
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 0, !dbg !9374
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !9374
  %common25 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !9374
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !9374
  %35 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !9374
  %cmp27 = icmp eq %union.tree_node* %32, %35, !dbg !9374
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.lhs.false15
  %36 = phi i1 [ false, %land.lhs.true ], [ false, %lor.lhs.false15 ], [ %cmp27, %land.rhs ], !dbg !9375
  br i1 %36, label %while.body, label %while.end, !dbg !9374

while.body:                                       ; preds = %land.end
  %37 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9374
  %exp28 = bitcast %union.tree_node* %37 to %struct.tree_exp*, !dbg !9374
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !9374
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 0, !dbg !9374
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !9374
  store %union.tree_node* %38, %union.tree_node** %new_decl, align 8, !dbg !9374
  br label %while.cond, !dbg !9374, !llvm.loop !9376

while.end:                                        ; preds = %land.end
  %39 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9377
  %base31 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !9377
  %40 = bitcast %struct.tree_base* %base31 to i64*, !dbg !9377
  %bf.load32 = load i64, i64* %40, align 8, !dbg !9377
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !9377
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !9377
  %cmp35 = icmp eq i32 %bf.cast34, 23, !dbg !9379
  br i1 %cmp35, label %land.lhs.true36, label %if.end, !dbg !9380

land.lhs.true36:                                  ; preds = %while.end
  %41 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9381
  %42 = load %union.tree_node*, %union.tree_node** %41, align 8, !dbg !9381
  %common37 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !9381
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !9381
  %43 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !9381
  %44 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9382
  %common39 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !9382
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !9382
  %45 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !9382
  %call41 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %43, %union.tree_node* %45), !dbg !9383
  %tobool42 = icmp ne i8 %call41, 0, !dbg !9383
  br i1 %tobool42, label %if.end, label %if.then43, !dbg !9384

if.then43:                                        ; preds = %land.lhs.true36
  %46 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9385
  %47 = load %union.tree_node*, %union.tree_node** %46, align 8, !dbg !9385
  %common44 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !9385
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 2, !dbg !9385
  %48 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !9385
  %49 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9385
  %call46 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %48, %union.tree_node* %49), !dbg !9385
  store %union.tree_node* %call46, %union.tree_node** %new_decl, align 8, !dbg !9386
  br label %if.end, !dbg !9387

if.end:                                           ; preds = %if.then43, %land.lhs.true36, %while.end
  %50 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !9388
  %51 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9389
  store %union.tree_node* %50, %union.tree_node** %51, align 8, !dbg !9390
  %52 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9391
  store i32 0, i32* %52, align 4, !dbg !9392
  br label %if.end322, !dbg !9393

if.else47:                                        ; preds = %if.else
  %53 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9394
  %54 = load %union.tree_node*, %union.tree_node** %53, align 8, !dbg !9394
  %base48 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !9394
  %55 = bitcast %struct.tree_base* %base48 to i64*, !dbg !9394
  %bf.load49 = load i64, i64* %55, align 8, !dbg !9394
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !9394
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !9394
  %cmp52 = icmp eq i32 %bf.cast51, 147, !dbg !9396
  br i1 %cmp52, label %if.then53, label %if.else54, !dbg !9397

if.then53:                                        ; preds = %if.else47
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 762, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9398
  br label %if.end321, !dbg !9398

if.else54:                                        ; preds = %if.else47
  %56 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9399
  %57 = load %union.tree_node*, %union.tree_node** %56, align 8, !dbg !9399
  %base55 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !9399
  %58 = bitcast %struct.tree_base* %base55 to i64*, !dbg !9399
  %bf.load56 = load i64, i64* %58, align 8, !dbg !9399
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !9399
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !9399
  %cmp59 = icmp eq i32 %bf.cast58, 120, !dbg !9401
  br i1 %cmp59, label %if.then60, label %if.else61, !dbg !9402

if.then60:                                        ; preds = %if.else54
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 764, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9403
  br label %if.end320, !dbg !9403

if.else61:                                        ; preds = %if.else54
  %59 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9404
  %60 = load %union.tree_node*, %union.tree_node** %59, align 8, !dbg !9404
  %base62 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !9404
  %61 = bitcast %struct.tree_base* %base62 to i64*, !dbg !9404
  %bf.load63 = load i64, i64* %61, align 8, !dbg !9404
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !9404
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !9404
  %cmp66 = icmp eq i32 %bf.cast65, 30, !dbg !9406
  br i1 %cmp66, label %land.lhs.true67, label %if.else75, !dbg !9407

land.lhs.true67:                                  ; preds = %if.else61
  %62 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9408
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !9408
  %decl_minimal = bitcast %union.tree_node* %63 to %struct.tree_decl_minimal*, !dbg !9408
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !9408
  %64 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !9408
  %tobool68 = icmp ne %union.tree_node* %64, null, !dbg !9408
  br i1 %tobool68, label %lor.lhs.false69, label %if.then73, !dbg !9409

lor.lhs.false69:                                  ; preds = %land.lhs.true67
  %65 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9410
  %66 = load %union.tree_node*, %union.tree_node** %65, align 8, !dbg !9411
  %call70 = call %union.tree_node* @decl_function_context(%union.tree_node* %66), !dbg !9412
  %67 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9413
  %src_fn71 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %67, i32 0, i32 0, !dbg !9414
  %68 = load %union.tree_node*, %union.tree_node** %src_fn71, align 8, !dbg !9414
  %cmp72 = icmp eq %union.tree_node* %call70, %68, !dbg !9415
  br i1 %cmp72, label %if.then73, label %if.else75, !dbg !9416

if.then73:                                        ; preds = %lor.lhs.false69, %land.lhs.true67
  %69 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9417
  %70 = load %union.tree_node*, %union.tree_node** %69, align 8, !dbg !9418
  %71 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9419
  %call74 = call %union.tree_node* @remap_decl(%union.tree_node* %70, %struct.copy_body_data* %71), !dbg !9420
  %72 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9421
  store %union.tree_node* %call74, %union.tree_node** %72, align 8, !dbg !9422
  br label %if.end319, !dbg !9423

if.else75:                                        ; preds = %lor.lhs.false69, %if.else61
  %73 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9424
  %74 = load %union.tree_node*, %union.tree_node** %73, align 8, !dbg !9424
  %base76 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !9424
  %75 = bitcast %struct.tree_base* %base76 to i64*, !dbg !9424
  %bf.load77 = load i64, i64* %75, align 8, !dbg !9424
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !9424
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !9424
  %idxprom = sext i32 %bf.cast79 to i64, !dbg !9424
  %arrayidx80 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9424
  %76 = load i32, i32* %arrayidx80, align 4, !dbg !9424
  %cmp81 = icmp eq i32 %76, 2, !dbg !9424
  br i1 %cmp81, label %if.then82, label %if.else84, !dbg !9426

if.then82:                                        ; preds = %if.else75
  %77 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9427
  %78 = load %union.tree_node*, %union.tree_node** %77, align 8, !dbg !9428
  %79 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9429
  %call83 = call %union.tree_node* @remap_type(%union.tree_node* %78, %struct.copy_body_data* %79), !dbg !9430
  %80 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9431
  store %union.tree_node* %call83, %union.tree_node** %80, align 8, !dbg !9432
  br label %if.end318, !dbg !9433

if.else84:                                        ; preds = %if.else75
  %81 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9434
  %82 = load %union.tree_node*, %union.tree_node** %81, align 8, !dbg !9434
  %base85 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !9434
  %83 = bitcast %struct.tree_base* %base85 to i64*, !dbg !9434
  %bf.load86 = load i64, i64* %83, align 8, !dbg !9434
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !9434
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !9434
  %idxprom89 = sext i32 %bf.cast88 to i64, !dbg !9434
  %arrayidx90 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom89, !dbg !9434
  %84 = load i32, i32* %arrayidx90, align 4, !dbg !9434
  %cmp91 = icmp eq i32 %84, 1, !dbg !9434
  br i1 %cmp91, label %if.then92, label %if.else117, !dbg !9436

if.then92:                                        ; preds = %if.else84
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_type, metadata !9437, metadata !DIExpression()), !dbg !9439
  %85 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9440
  %86 = load %union.tree_node*, %union.tree_node** %85, align 8, !dbg !9440
  %common93 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !9440
  %type94 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common93, i32 0, i32 2, !dbg !9440
  %87 = load %union.tree_node*, %union.tree_node** %type94, align 8, !dbg !9440
  %88 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9441
  %call95 = call %union.tree_node* @remap_type(%union.tree_node* %87, %struct.copy_body_data* %88), !dbg !9442
  store %union.tree_node* %call95, %union.tree_node** %new_type, align 8, !dbg !9439
  %89 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9443
  %90 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9445
  %91 = load %union.tree_node*, %union.tree_node** %90, align 8, !dbg !9445
  %common96 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !9445
  %type97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 2, !dbg !9445
  %92 = load %union.tree_node*, %union.tree_node** %type97, align 8, !dbg !9445
  %cmp98 = icmp eq %union.tree_node* %89, %92, !dbg !9446
  br i1 %cmp98, label %if.then99, label %if.else100, !dbg !9447

if.then99:                                        ; preds = %if.then92
  %93 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9448
  store i32 0, i32* %93, align 4, !dbg !9449
  br label %if.end116, !dbg !9450

if.else100:                                       ; preds = %if.then92
  %94 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9451
  %95 = load %union.tree_node*, %union.tree_node** %94, align 8, !dbg !9451
  %base101 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !9451
  %96 = bitcast %struct.tree_base* %base101 to i64*, !dbg !9451
  %bf.load102 = load i64, i64* %96, align 8, !dbg !9451
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !9451
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !9451
  %cmp105 = icmp eq i32 %bf.cast104, 23, !dbg !9453
  br i1 %cmp105, label %if.then106, label %if.else111, !dbg !9454

if.then106:                                       ; preds = %if.else100
  %97 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9455
  %98 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9456
  %99 = load %union.tree_node*, %union.tree_node** %98, align 8, !dbg !9456
  %int_cst = bitcast %union.tree_node* %99 to %struct.tree_int_cst*, !dbg !9456
  %int_cst107 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9456
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst107, i32 0, i32 0, !dbg !9456
  %100 = load i64, i64* %low, align 8, !dbg !9456
  %101 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9457
  %102 = load %union.tree_node*, %union.tree_node** %101, align 8, !dbg !9457
  %int_cst108 = bitcast %union.tree_node* %102 to %struct.tree_int_cst*, !dbg !9457
  %int_cst109 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst108, i32 0, i32 1, !dbg !9457
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst109, i32 0, i32 1, !dbg !9457
  %103 = load i64, i64* %high, align 8, !dbg !9457
  %call110 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %97, i64 %100, i64 %103), !dbg !9458
  %104 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9459
  store %union.tree_node* %call110, %union.tree_node** %104, align 8, !dbg !9460
  br label %if.end115, !dbg !9461

if.else111:                                       ; preds = %if.else100
  %105 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9462
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8, !dbg !9462
  %call112 = call %union.tree_node* @copy_node_stat(%union.tree_node* %106), !dbg !9462
  %107 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9464
  store %union.tree_node* %call112, %union.tree_node** %107, align 8, !dbg !9465
  %108 = load %union.tree_node*, %union.tree_node** %new_type, align 8, !dbg !9466
  %109 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9467
  %110 = load %union.tree_node*, %union.tree_node** %109, align 8, !dbg !9467
  %common113 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !9467
  %type114 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common113, i32 0, i32 2, !dbg !9467
  store %union.tree_node* %108, %union.tree_node** %type114, align 8, !dbg !9468
  br label %if.end115

if.end115:                                        ; preds = %if.else111, %if.then106
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.then99
  br label %if.end317, !dbg !9469

if.else117:                                       ; preds = %if.else84
  %111 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9470
  %112 = load %union.tree_node*, %union.tree_node** %111, align 8, !dbg !9470
  %base118 = bitcast %union.tree_node* %112 to %struct.tree_base*, !dbg !9470
  %113 = bitcast %struct.tree_base* %base118 to i64*, !dbg !9470
  %bf.load119 = load i64, i64* %113, align 8, !dbg !9470
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !9470
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !9470
  %cmp122 = icmp eq i32 %bf.cast121, 47, !dbg !9473
  br i1 %cmp122, label %if.then123, label %if.end196, !dbg !9474

if.then123:                                       ; preds = %if.else117
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !9475, metadata !DIExpression()), !dbg !9477
  %114 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9478
  %115 = load %union.tree_node*, %union.tree_node** %114, align 8, !dbg !9478
  %exp124 = bitcast %union.tree_node* %115 to %struct.tree_exp*, !dbg !9478
  %operands125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 3, !dbg !9478
  %arrayidx126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands125, i64 0, i64 0, !dbg !9478
  %116 = load %union.tree_node*, %union.tree_node** %arrayidx126, align 8, !dbg !9478
  store %union.tree_node* %116, %union.tree_node** %decl, align 8, !dbg !9477
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !9479, metadata !DIExpression()), !dbg !9480
  %117 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9481
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %117, i32 0, i32 6, !dbg !9482
  %118 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !9482
  %119 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9483
  %120 = bitcast %union.tree_node* %119 to i8*, !dbg !9483
  %call127 = call i8** @pointer_map_contains(%struct.pointer_map_t* %118, i8* %120), !dbg !9484
  %121 = bitcast i8** %call127 to %union.tree_node**, !dbg !9485
  store %union.tree_node** %121, %union.tree_node*** %n, align 8, !dbg !9486
  %122 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !9487
  %tobool128 = icmp ne %union.tree_node** %122, null, !dbg !9487
  br i1 %tobool128, label %if.then129, label %if.end195, !dbg !9489

if.then129:                                       ; preds = %if.then123
  call void @llvm.dbg.declare(metadata %union.tree_node** %type130, metadata !9490, metadata !DIExpression()), !dbg !9492
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !9493, metadata !DIExpression()), !dbg !9494
  call void @llvm.dbg.declare(metadata %union.tree_node** %old, metadata !9495, metadata !DIExpression()), !dbg !9496
  %123 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !9497
  %124 = load %union.tree_node*, %union.tree_node** %123, align 8, !dbg !9497
  %common131 = bitcast %union.tree_node* %124 to %struct.tree_common*, !dbg !9497
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 2, !dbg !9497
  %125 = load %union.tree_node*, %union.tree_node** %type132, align 8, !dbg !9497
  %common133 = bitcast %union.tree_node* %125 to %struct.tree_common*, !dbg !9497
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !9497
  %126 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !9497
  store %union.tree_node* %126, %union.tree_node** %type130, align 8, !dbg !9498
  %127 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !9499
  %128 = load %union.tree_node*, %union.tree_node** %127, align 8, !dbg !9500
  %call135 = call %union.tree_node* @unshare_expr(%union.tree_node* %128), !dbg !9501
  store %union.tree_node* %call135, %union.tree_node** %new_tree, align 8, !dbg !9502
  %129 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9503
  %130 = load %union.tree_node*, %union.tree_node** %129, align 8, !dbg !9504
  store %union.tree_node* %130, %union.tree_node** %old, align 8, !dbg !9505
  %131 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9506
  %call136 = call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %131), !dbg !9507
  %132 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9508
  store %union.tree_node* %call136, %union.tree_node** %132, align 8, !dbg !9509
  %133 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9510
  %134 = load %union.tree_node*, %union.tree_node** %133, align 8, !dbg !9512
  %tobool137 = icmp ne %union.tree_node* %134, null, !dbg !9512
  br i1 %tobool137, label %if.end194, label %if.then138, !dbg !9513

if.then138:                                       ; preds = %if.then129
  %135 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9514
  %base139 = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !9514
  %136 = bitcast %struct.tree_base* %base139 to i64*, !dbg !9514
  %bf.load140 = load i64, i64* %136, align 8, !dbg !9514
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !9514
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !9514
  %cmp143 = icmp eq i32 %bf.cast142, 121, !dbg !9517
  br i1 %cmp143, label %if.then144, label %if.else172, !dbg !9518

if.then144:                                       ; preds = %if.then138
  %137 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9519
  %base145 = bitcast %union.tree_node* %137 to %struct.tree_base*, !dbg !9519
  %138 = bitcast %struct.tree_base* %base145 to i64*, !dbg !9519
  %bf.load146 = load i64, i64* %138, align 8, !dbg !9519
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !9519
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !9519
  %idxprom149 = sext i32 %bf.cast148 to i64, !dbg !9519
  %arrayidx150 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom149, !dbg !9519
  %139 = load i32, i32* %arrayidx150, align 4, !dbg !9519
  %cmp151 = icmp uge i32 %139, 4, !dbg !9519
  br i1 %cmp151, label %land.lhs.true152, label %cond.false162, !dbg !9519

land.lhs.true152:                                 ; preds = %if.then144
  %140 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9519
  %base153 = bitcast %union.tree_node* %140 to %struct.tree_base*, !dbg !9519
  %141 = bitcast %struct.tree_base* %base153 to i64*, !dbg !9519
  %bf.load154 = load i64, i64* %141, align 8, !dbg !9519
  %bf.clear155 = and i64 %bf.load154, 65535, !dbg !9519
  %bf.cast156 = trunc i64 %bf.clear155 to i32, !dbg !9519
  %idxprom157 = sext i32 %bf.cast156 to i64, !dbg !9519
  %arrayidx158 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom157, !dbg !9519
  %142 = load i32, i32* %arrayidx158, align 4, !dbg !9519
  %cmp159 = icmp ule i32 %142, 10, !dbg !9519
  br i1 %cmp159, label %cond.true160, label %cond.false162, !dbg !9519

cond.true160:                                     ; preds = %land.lhs.true152
  %143 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9519
  %exp161 = bitcast %union.tree_node* %143 to %struct.tree_exp*, !dbg !9519
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp161, i32 0, i32 1, !dbg !9519
  %144 = load i32, i32* %locus, align 8, !dbg !9519
  br label %cond.end163, !dbg !9519

cond.false162:                                    ; preds = %land.lhs.true152, %if.then144
  br label %cond.end163, !dbg !9519

cond.end163:                                      ; preds = %cond.false162, %cond.true160
  %cond164 = phi i32 [ %144, %cond.true160 ], [ 0, %cond.false162 ], !dbg !9519
  %145 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !9521
  %146 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9522
  %call165 = call %union.tree_node* @fold_indirect_ref_1(i32 %cond164, %union.tree_node* %145, %union.tree_node* %146), !dbg !9523
  %147 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9524
  store %union.tree_node* %call165, %union.tree_node** %147, align 8, !dbg !9525
  %148 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9526
  %149 = load %union.tree_node*, %union.tree_node** %148, align 8, !dbg !9528
  %tobool166 = icmp ne %union.tree_node* %149, null, !dbg !9528
  br i1 %tobool166, label %if.end171, label %if.then167, !dbg !9529

if.then167:                                       ; preds = %cond.end163
  %150 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9530
  %exp168 = bitcast %union.tree_node* %150 to %struct.tree_exp*, !dbg !9530
  %operands169 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp168, i32 0, i32 3, !dbg !9530
  %arrayidx170 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands169, i64 0, i64 0, !dbg !9530
  %151 = load %union.tree_node*, %union.tree_node** %arrayidx170, align 8, !dbg !9530
  %152 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9531
  store %union.tree_node* %151, %union.tree_node** %152, align 8, !dbg !9532
  br label %if.end171, !dbg !9533

if.end171:                                        ; preds = %if.then167, %cond.end163
  br label %if.end193, !dbg !9534

if.else172:                                       ; preds = %if.then138
  %153 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !9535
  %154 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !9535
  %call173 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %153, %union.tree_node* %154), !dbg !9535
  %155 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9537
  store %union.tree_node* %call173, %union.tree_node** %155, align 8, !dbg !9538
  %156 = load %union.tree_node*, %union.tree_node** %old, align 8, !dbg !9539
  %base174 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !9539
  %157 = bitcast %struct.tree_base* %base174 to i64*, !dbg !9539
  %bf.load175 = load i64, i64* %157, align 8, !dbg !9539
  %bf.lshr = lshr i64 %bf.load175, 19, !dbg !9539
  %bf.clear176 = and i64 %bf.lshr, 1, !dbg !9539
  %bf.cast177 = trunc i64 %bf.clear176 to i32, !dbg !9539
  %158 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9540
  %159 = load %union.tree_node*, %union.tree_node** %158, align 8, !dbg !9540
  %base178 = bitcast %union.tree_node* %159 to %struct.tree_base*, !dbg !9540
  %160 = bitcast %struct.tree_base* %base178 to i64*, !dbg !9540
  %161 = zext i32 %bf.cast177 to i64, !dbg !9541
  %bf.load179 = load i64, i64* %160, align 8, !dbg !9541
  %bf.value = and i64 %161, 1, !dbg !9541
  %bf.shl = shl i64 %bf.value, 19, !dbg !9541
  %bf.clear180 = and i64 %bf.load179, -524289, !dbg !9541
  %bf.set = or i64 %bf.clear180, %bf.shl, !dbg !9541
  store i64 %bf.set, i64* %160, align 8, !dbg !9541
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !9541
  %162 = load %union.tree_node*, %union.tree_node** %old, align 8, !dbg !9542
  %base181 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !9542
  %163 = bitcast %struct.tree_base* %base181 to i64*, !dbg !9542
  %bf.load182 = load i64, i64* %163, align 8, !dbg !9542
  %bf.lshr183 = lshr i64 %bf.load182, 23, !dbg !9542
  %bf.clear184 = and i64 %bf.lshr183, 1, !dbg !9542
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !9542
  %164 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9543
  %165 = load %union.tree_node*, %union.tree_node** %164, align 8, !dbg !9543
  %base186 = bitcast %union.tree_node* %165 to %struct.tree_base*, !dbg !9543
  %166 = bitcast %struct.tree_base* %base186 to i64*, !dbg !9543
  %167 = zext i32 %bf.cast185 to i64, !dbg !9544
  %bf.load187 = load i64, i64* %166, align 8, !dbg !9544
  %bf.value188 = and i64 %167, 1, !dbg !9544
  %bf.shl189 = shl i64 %bf.value188, 23, !dbg !9544
  %bf.clear190 = and i64 %bf.load187, -8388609, !dbg !9544
  %bf.set191 = or i64 %bf.clear190, %bf.shl189, !dbg !9544
  store i64 %bf.set191, i64* %166, align 8, !dbg !9544
  %bf.result.cast192 = trunc i64 %bf.value188 to i32, !dbg !9544
  br label %if.end193

if.end193:                                        ; preds = %if.else172, %if.end171
  br label %if.end194, !dbg !9545

if.end194:                                        ; preds = %if.end193, %if.then129
  %168 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9546
  store i32 0, i32* %168, align 4, !dbg !9547
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9548
  br label %return, !dbg !9548

if.end195:                                        ; preds = %if.then123
  br label %if.end196, !dbg !9549

if.end196:                                        ; preds = %if.end195, %if.else117
  %169 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9550
  %170 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9551
  %call197 = call %union.tree_node* @copy_tree_r(%union.tree_node** %169, i32* %170, i8* null), !dbg !9552
  %171 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9553
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %171, i64 0, !dbg !9553
  %call198 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !9555
  %conv = zext i8 %call198 to i32, !dbg !9555
  %tobool199 = icmp ne i32 %conv, 0, !dbg !9555
  br i1 %tobool199, label %land.lhs.true200, label %if.end214, !dbg !9556

land.lhs.true200:                                 ; preds = %if.end196
  %172 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9557
  %173 = load %union.tree_node*, %union.tree_node** %172, align 8, !dbg !9557
  %base201 = bitcast %union.tree_node* %173 to %struct.tree_base*, !dbg !9557
  %174 = bitcast %struct.tree_base* %base201 to i64*, !dbg !9557
  %bf.load202 = load i64, i64* %174, align 8, !dbg !9557
  %bf.clear203 = and i64 %bf.load202, 65535, !dbg !9557
  %bf.cast204 = trunc i64 %bf.clear203 to i32, !dbg !9557
  %cmp205 = icmp eq i32 %bf.cast204, 32, !dbg !9558
  br i1 %cmp205, label %land.lhs.true207, label %if.end214, !dbg !9559

land.lhs.true207:                                 ; preds = %land.lhs.true200
  %175 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9560
  %remapping_type_depth = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %175, i32 0, i32 17, !dbg !9561
  %176 = load i32, i32* %remapping_type_depth, align 8, !dbg !9561
  %cmp208 = icmp eq i32 %176, 0, !dbg !9562
  br i1 %cmp208, label %land.lhs.true210, label %if.end214, !dbg !9563

land.lhs.true210:                                 ; preds = %land.lhs.true207
  %177 = load i32, i32* @processing_debug_stmt, align 4, !dbg !9564
  %tobool211 = icmp ne i32 %177, 0, !dbg !9564
  br i1 %tobool211, label %if.end214, label %if.then212, !dbg !9565

if.then212:                                       ; preds = %land.lhs.true210
  %178 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9566
  %179 = load %union.tree_node*, %union.tree_node** %178, align 8, !dbg !9567
  %call213 = call zeroext i8 @add_referenced_var(%union.tree_node* %179), !dbg !9568
  br label %if.end214, !dbg !9568

if.end214:                                        ; preds = %if.then212, %land.lhs.true210, %land.lhs.true207, %land.lhs.true200, %if.end196
  %180 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9569
  %181 = load %union.tree_node*, %union.tree_node** %180, align 8, !dbg !9569
  %base215 = bitcast %union.tree_node* %181 to %struct.tree_base*, !dbg !9569
  %182 = bitcast %struct.tree_base* %base215 to i64*, !dbg !9569
  %bf.load216 = load i64, i64* %182, align 8, !dbg !9569
  %bf.clear217 = and i64 %bf.load216, 65535, !dbg !9569
  %bf.cast218 = trunc i64 %bf.clear217 to i32, !dbg !9569
  %idxprom219 = sext i32 %bf.cast218 to i64, !dbg !9569
  %arrayidx220 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom219, !dbg !9569
  %183 = load i32, i32* %arrayidx220, align 4, !dbg !9569
  %cmp221 = icmp uge i32 %183, 4, !dbg !9569
  br i1 %cmp221, label %land.lhs.true223, label %if.end239, !dbg !9569

land.lhs.true223:                                 ; preds = %if.end214
  %184 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9569
  %185 = load %union.tree_node*, %union.tree_node** %184, align 8, !dbg !9569
  %base224 = bitcast %union.tree_node* %185 to %struct.tree_base*, !dbg !9569
  %186 = bitcast %struct.tree_base* %base224 to i64*, !dbg !9569
  %bf.load225 = load i64, i64* %186, align 8, !dbg !9569
  %bf.clear226 = and i64 %bf.load225, 65535, !dbg !9569
  %bf.cast227 = trunc i64 %bf.clear226 to i32, !dbg !9569
  %idxprom228 = sext i32 %bf.cast227 to i64, !dbg !9569
  %arrayidx229 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom228, !dbg !9569
  %187 = load i32, i32* %arrayidx229, align 4, !dbg !9569
  %cmp230 = icmp ule i32 %187, 10, !dbg !9569
  br i1 %cmp230, label %if.then232, label %if.end239, !dbg !9571

if.then232:                                       ; preds = %land.lhs.true223
  %188 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9572
  %189 = load %union.tree_node*, %union.tree_node** %188, align 8, !dbg !9572
  %call233 = call %union.tree_node** @tree_block(%union.tree_node* %189), !dbg !9572
  %190 = load %union.tree_node*, %union.tree_node** %call233, align 8, !dbg !9572
  %tobool234 = icmp ne %union.tree_node* %190, null, !dbg !9572
  br i1 %tobool234, label %cond.true235, label %cond.false236, !dbg !9572

cond.true235:                                     ; preds = %if.then232
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9572
  br label %cond.end237, !dbg !9572

cond.false236:                                    ; preds = %if.then232
  br label %cond.end237, !dbg !9572

cond.end237:                                      ; preds = %cond.false236, %cond.true235
  %cond238 = phi i32 [ 0, %cond.true235 ], [ 0, %cond.false236 ], !dbg !9572
  br label %if.end239, !dbg !9572

if.end239:                                        ; preds = %cond.end237, %land.lhs.true223, %if.end214
  %191 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9573
  %192 = load %union.tree_node*, %union.tree_node** %191, align 8, !dbg !9573
  %base240 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !9573
  %193 = bitcast %struct.tree_base* %base240 to i64*, !dbg !9573
  %bf.load241 = load i64, i64* %193, align 8, !dbg !9573
  %bf.clear242 = and i64 %bf.load241, 65535, !dbg !9573
  %bf.cast243 = trunc i64 %bf.clear242 to i32, !dbg !9573
  %cmp244 = icmp ne i32 %bf.cast243, 163, !dbg !9575
  br i1 %cmp244, label %if.then246, label %if.end252, !dbg !9576

if.then246:                                       ; preds = %if.end239
  %194 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9577
  %195 = load %union.tree_node*, %union.tree_node** %194, align 8, !dbg !9577
  %common247 = bitcast %union.tree_node* %195 to %struct.tree_common*, !dbg !9577
  %type248 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common247, i32 0, i32 2, !dbg !9577
  %196 = load %union.tree_node*, %union.tree_node** %type248, align 8, !dbg !9577
  %197 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9578
  %call249 = call %union.tree_node* @remap_type(%union.tree_node* %196, %struct.copy_body_data* %197), !dbg !9579
  %198 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9580
  %199 = load %union.tree_node*, %union.tree_node** %198, align 8, !dbg !9580
  %common250 = bitcast %union.tree_node* %199 to %struct.tree_common*, !dbg !9580
  %type251 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common250, i32 0, i32 2, !dbg !9580
  store %union.tree_node* %call249, %union.tree_node** %type251, align 8, !dbg !9581
  br label %if.end252, !dbg !9580

if.end252:                                        ; preds = %if.then246, %if.end239
  %200 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9582
  %201 = load %union.tree_node*, %union.tree_node** %200, align 8, !dbg !9582
  %base253 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !9582
  %202 = bitcast %struct.tree_base* %base253 to i64*, !dbg !9582
  %bf.load254 = load i64, i64* %202, align 8, !dbg !9582
  %bf.clear255 = and i64 %bf.load254, 65535, !dbg !9582
  %bf.cast256 = trunc i64 %bf.clear255 to i32, !dbg !9582
  %cmp257 = icmp eq i32 %bf.cast256, 55, !dbg !9584
  br i1 %cmp257, label %land.lhs.true259, label %if.else274, !dbg !9585

land.lhs.true259:                                 ; preds = %if.end252
  %203 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9586
  %204 = load %union.tree_node*, %union.tree_node** %203, align 8, !dbg !9586
  %exp260 = bitcast %union.tree_node* %204 to %struct.tree_exp*, !dbg !9586
  %operands261 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp260, i32 0, i32 3, !dbg !9586
  %arrayidx262 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands261, i64 0, i64 3, !dbg !9586
  %205 = load %union.tree_node*, %union.tree_node** %arrayidx262, align 8, !dbg !9586
  %tobool263 = icmp ne %union.tree_node* %205, null, !dbg !9586
  br i1 %tobool263, label %if.then264, label %if.else274, !dbg !9587

if.then264:                                       ; preds = %land.lhs.true259
  %206 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9588
  %207 = load %union.tree_node*, %union.tree_node** %206, align 8, !dbg !9588
  %exp265 = bitcast %union.tree_node* %207 to %struct.tree_exp*, !dbg !9588
  %operands266 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp265, i32 0, i32 3, !dbg !9588
  %arrayidx267 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands266, i64 0, i64 3, !dbg !9588
  %208 = load %union.tree_node*, %union.tree_node** %arrayidx267, align 8, !dbg !9588
  %209 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9590
  %210 = load %union.tree_node*, %union.tree_node** %209, align 8, !dbg !9590
  %exp268 = bitcast %union.tree_node* %210 to %struct.tree_exp*, !dbg !9590
  %operands269 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp268, i32 0, i32 3, !dbg !9590
  %arrayidx270 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands269, i64 0, i64 1, !dbg !9590
  store %union.tree_node* %208, %union.tree_node** %arrayidx270, align 8, !dbg !9591
  %211 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9592
  %212 = load %union.tree_node*, %union.tree_node** %211, align 8, !dbg !9592
  %exp271 = bitcast %union.tree_node* %212 to %struct.tree_exp*, !dbg !9592
  %operands272 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp271, i32 0, i32 3, !dbg !9592
  %arrayidx273 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands272, i64 0, i64 3, !dbg !9592
  store %union.tree_node* null, %union.tree_node** %arrayidx273, align 8, !dbg !9593
  br label %if.end316, !dbg !9594

if.else274:                                       ; preds = %land.lhs.true259, %if.end252
  %213 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9595
  %214 = load %union.tree_node*, %union.tree_node** %213, align 8, !dbg !9595
  %base275 = bitcast %union.tree_node* %214 to %struct.tree_base*, !dbg !9595
  %215 = bitcast %struct.tree_base* %base275 to i64*, !dbg !9595
  %bf.load276 = load i64, i64* %215, align 8, !dbg !9595
  %bf.clear277 = and i64 %bf.load276, 65535, !dbg !9595
  %bf.cast278 = trunc i64 %bf.clear277 to i32, !dbg !9595
  %cmp279 = icmp eq i32 %bf.cast278, 121, !dbg !9597
  br i1 %cmp279, label %if.then281, label %if.end315, !dbg !9598

if.then281:                                       ; preds = %if.else274
  call void @llvm.dbg.declare(metadata i32* %invariant, metadata !9599, metadata !DIExpression()), !dbg !9601
  %216 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9602
  %217 = load %union.tree_node*, %union.tree_node** %216, align 8, !dbg !9603
  %call282 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %217), !dbg !9604
  %conv283 = zext i8 %call282 to i32, !dbg !9604
  store i32 %conv283, i32* %invariant, align 4, !dbg !9601
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !9605, metadata !DIExpression()), !dbg !9606
  %218 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9607
  %block284 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %218, i32 0, i32 8, !dbg !9608
  %219 = load %union.tree_node*, %union.tree_node** %block284, align 8, !dbg !9608
  store %union.tree_node* %219, %union.tree_node** %block, align 8, !dbg !9606
  %220 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9609
  %block285 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %220, i32 0, i32 8, !dbg !9610
  store %union.tree_node* null, %union.tree_node** %block285, align 8, !dbg !9611
  %221 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9612
  %222 = load %union.tree_node*, %union.tree_node** %221, align 8, !dbg !9612
  %exp286 = bitcast %union.tree_node* %222 to %struct.tree_exp*, !dbg !9612
  %operands287 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp286, i32 0, i32 3, !dbg !9612
  %arrayidx288 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands287, i64 0, i64 0, !dbg !9612
  %223 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9612
  %224 = bitcast %struct.copy_body_data* %223 to i8*, !dbg !9612
  %call289 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx288, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %224, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !9612
  %225 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9613
  %226 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9614
  %block290 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %226, i32 0, i32 8, !dbg !9615
  store %union.tree_node* %225, %union.tree_node** %block290, align 8, !dbg !9616
  %227 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9617
  %228 = load %union.tree_node*, %union.tree_node** %227, align 8, !dbg !9617
  %exp291 = bitcast %union.tree_node* %228 to %struct.tree_exp*, !dbg !9617
  %operands292 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp291, i32 0, i32 3, !dbg !9617
  %arrayidx293 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands292, i64 0, i64 0, !dbg !9617
  %229 = load %union.tree_node*, %union.tree_node** %arrayidx293, align 8, !dbg !9617
  %base294 = bitcast %union.tree_node* %229 to %struct.tree_base*, !dbg !9617
  %230 = bitcast %struct.tree_base* %base294 to i64*, !dbg !9617
  %bf.load295 = load i64, i64* %230, align 8, !dbg !9617
  %bf.clear296 = and i64 %bf.load295, 65535, !dbg !9617
  %bf.cast297 = trunc i64 %bf.clear296 to i32, !dbg !9617
  %cmp298 = icmp eq i32 %bf.cast297, 47, !dbg !9619
  br i1 %cmp298, label %if.then300, label %if.else307, !dbg !9620

if.then300:                                       ; preds = %if.then281
  %231 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9621
  %232 = load %union.tree_node*, %union.tree_node** %231, align 8, !dbg !9621
  %exp301 = bitcast %union.tree_node* %232 to %struct.tree_exp*, !dbg !9621
  %operands302 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp301, i32 0, i32 3, !dbg !9621
  %arrayidx303 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands302, i64 0, i64 0, !dbg !9621
  %233 = load %union.tree_node*, %union.tree_node** %arrayidx303, align 8, !dbg !9621
  %exp304 = bitcast %union.tree_node* %233 to %struct.tree_exp*, !dbg !9621
  %operands305 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp304, i32 0, i32 3, !dbg !9621
  %arrayidx306 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands305, i64 0, i64 0, !dbg !9621
  %234 = load %union.tree_node*, %union.tree_node** %arrayidx306, align 8, !dbg !9621
  %235 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9622
  store %union.tree_node* %234, %union.tree_node** %235, align 8, !dbg !9623
  br label %if.end308, !dbg !9624

if.else307:                                       ; preds = %if.then281
  %236 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9625
  %237 = load %union.tree_node*, %union.tree_node** %236, align 8, !dbg !9626
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %237), !dbg !9627
  br label %if.end308

if.end308:                                        ; preds = %if.else307, %if.then300
  %238 = load i32, i32* %invariant, align 4, !dbg !9628
  %tobool309 = icmp ne i32 %238, 0, !dbg !9628
  br i1 %tobool309, label %land.lhs.true310, label %if.end314, !dbg !9630

land.lhs.true310:                                 ; preds = %if.end308
  %239 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !9631
  %240 = load %union.tree_node*, %union.tree_node** %239, align 8, !dbg !9632
  %call311 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %240), !dbg !9633
  %tobool312 = icmp ne i8 %call311, 0, !dbg !9633
  br i1 %tobool312, label %if.end314, label %if.then313, !dbg !9634

if.then313:                                       ; preds = %land.lhs.true310
  %241 = load %struct.copy_body_data*, %struct.copy_body_data** %id, align 8, !dbg !9635
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %241, i32 0, i32 15, !dbg !9636
  store i8 1, i8* %regimplify, align 2, !dbg !9637
  br label %if.end314, !dbg !9635

if.end314:                                        ; preds = %if.then313, %land.lhs.true310, %if.end308
  %242 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !9638
  store i32 0, i32* %242, align 4, !dbg !9639
  br label %if.end315, !dbg !9640

if.end315:                                        ; preds = %if.end314, %if.else274
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.then264
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.end116
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %if.then82
  br label %if.end319

if.end319:                                        ; preds = %if.end318, %if.then73
  br label %if.end320

if.end320:                                        ; preds = %if.end319, %if.then60
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.then53
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.end
  br label %if.end323

if.end323:                                        ; preds = %if.end322
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9641
  br label %return, !dbg !9641

return:                                           ; preds = %if.end323, %if.end194, %if.then
  %243 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9642
  ret %union.tree_node* %243, !dbg !9642
}

declare dso_local void @update_ssa(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !9643 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !9646, metadata !DIExpression()), !dbg !9647
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !9648
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !9648
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !9648
  br i1 %tobool, label %if.then, label %if.end, !dbg !9647

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !9648
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !9648
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !9648
  call void @free(i8* %4), !dbg !9648
  br label %if.end, !dbg !9648

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !9647
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !9647
  ret void, !dbg !9647
}

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @maybe_inline_call_in_expr(%union.tree_node* %exp) #0 !dbg !9650 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %decl_map = alloca %struct.pointer_map_t*, align 8
  %iter = alloca %struct.call_expr_arg_iterator_d, align 8
  %id = alloca %struct.copy_body_data, align 8
  %param = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9651, metadata !DIExpression()), !dbg !9652
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !9653, metadata !DIExpression()), !dbg !9654
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9655
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %0), !dbg !9656
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !9654
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9657
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9657
  br i1 %tobool, label %land.lhs.true, label %if.end18, !dbg !9659

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9660
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9660
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9660
  %bf.load = load i64, i64* %3, align 8, !dbg !9660
  %bf.lshr = lshr i64 %bf.load, 20, !dbg !9660
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9660
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9660
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !9660
  br i1 %tobool1, label %land.lhs.true2, label %if.end18, !dbg !9661

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9662
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !9662
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !9662
  %5 = load %union.tree_node*, %union.tree_node** %saved_tree, align 8, !dbg !9662
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !9662
  br i1 %tobool3, label %if.then, label %if.end18, !dbg !9663

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %decl_map, metadata !9664, metadata !DIExpression()), !dbg !9666
  %call4 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !9667
  store %struct.pointer_map_t* %call4, %struct.pointer_map_t** %decl_map, align 8, !dbg !9666
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !9668, metadata !DIExpression()), !dbg !9675
  call void @llvm.dbg.declare(metadata %struct.copy_body_data* %id, metadata !9676, metadata !DIExpression()), !dbg !9677
  call void @llvm.dbg.declare(metadata %union.tree_node** %param, metadata !9678, metadata !DIExpression()), !dbg !9679
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !9680, metadata !DIExpression()), !dbg !9681
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9682, metadata !DIExpression()), !dbg !9683
  %6 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9684
  %decl_non_common5 = bitcast %union.tree_node* %6 to %struct.tree_decl_non_common*, !dbg !9684
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common5, i32 0, i32 2, !dbg !9684
  %7 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !9684
  store %union.tree_node* %7, %union.tree_node** %param, align 8, !dbg !9686
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9687
  %call6 = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %8, %struct.call_expr_arg_iterator_d* %iter), !dbg !9688
  store %union.tree_node* %call6, %union.tree_node** %arg, align 8, !dbg !9689
  br label %for.cond, !dbg !9690

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !9691
  %tobool7 = icmp ne %union.tree_node* %9, null, !dbg !9693
  br i1 %tobool7, label %for.body, label %for.end, !dbg !9693

for.body:                                         ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9694
  %11 = bitcast %union.tree_node* %10 to i8*, !dbg !9694
  %12 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !9695
  %13 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !9696
  %14 = bitcast %union.tree_node* %13 to i8*, !dbg !9696
  %call8 = call i8** @pointer_map_insert(%struct.pointer_map_t* %12, i8* %14), !dbg !9697
  store i8* %11, i8** %call8, align 8, !dbg !9698
  br label %for.inc, !dbg !9699

for.inc:                                          ; preds = %for.body
  %15 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !9700
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !9700
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9700
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9700
  store %union.tree_node* %16, %union.tree_node** %param, align 8, !dbg !9701
  %call9 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter), !dbg !9702
  store %union.tree_node* %call9, %union.tree_node** %arg, align 8, !dbg !9703
  br label %for.cond, !dbg !9704, !llvm.loop !9705

for.end:                                          ; preds = %for.cond
  %17 = bitcast %struct.copy_body_data* %id to i8*, !dbg !9707
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 152, i1 false), !dbg !9707
  %18 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9708
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !9709
  store %union.tree_node* %18, %union.tree_node** %src_fn, align 8, !dbg !9710
  %19 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9711
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !9712
  store %union.tree_node* %19, %union.tree_node** %dst_fn, align 8, !dbg !9713
  %20 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9714
  %function_decl = bitcast %union.tree_node* %20 to %struct.tree_function_decl*, !dbg !9714
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !9714
  %21 = load %struct.function*, %struct.function** %f, align 8, !dbg !9714
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 4, !dbg !9715
  store %struct.function* %21, %struct.function** %src_cfun, align 8, !dbg !9716
  %22 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !9717
  %decl_map10 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !9718
  store %struct.pointer_map_t* %22, %struct.pointer_map_t** %decl_map10, align 8, !dbg !9719
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 7, !dbg !9720
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !9721
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 12, !dbg !9722
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !9723
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 13, !dbg !9724
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !9725
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 14, !dbg !9726
  store i8 1, i8* %transform_return_to_modify, align 1, !dbg !9727
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 18, !dbg !9728
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !9729
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 15, !dbg !9730
  store i8 0, i8* %regimplify, align 2, !dbg !9731
  %do_not_unshare = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 16, !dbg !9732
  store i8 1, i8* %do_not_unshare, align 1, !dbg !9733
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 10, !dbg !9734
  store i32 0, i32* %eh_lp_nr, align 8, !dbg !9735
  %call11 = call %union.tree_node* @copy_tree_body(%struct.copy_body_data* %id), !dbg !9736
  store %union.tree_node* %call11, %union.tree_node** %t, align 8, !dbg !9737
  %23 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !9738
  call void @pointer_map_destroy(%struct.pointer_map_t* %23), !dbg !9739
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9740
  %base12 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9740
  %25 = bitcast %struct.tree_base* %base12 to i64*, !dbg !9740
  %bf.load13 = load i64, i64* %25, align 8, !dbg !9740
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !9740
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !9740
  %cmp = icmp eq i32 %bf.cast15, 53, !dbg !9742
  br i1 %cmp, label %if.then16, label %if.end, !dbg !9743

if.then16:                                        ; preds = %for.end
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9744
  %exp17 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !9744
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !9744
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9744
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9744
  store %union.tree_node* %27, %union.tree_node** %retval, align 8, !dbg !9745
  br label %return, !dbg !9745

if.end:                                           ; preds = %for.end
  br label %if.end18, !dbg !9746

if.end18:                                         ; preds = %if.end, %land.lhs.true2, %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9747
  br label %return, !dbg !9747

return:                                           ; preds = %if.end18, %if.then16
  %28 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9748
  ret %union.tree_node* %28, !dbg !9748
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_call_expr_arg(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #0 !dbg !9749 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9753, metadata !DIExpression()), !dbg !9754
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !9755, metadata !DIExpression()), !dbg !9756
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9757
  %1 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9758
  call void @init_call_expr_arg_iterator(%union.tree_node* %0, %struct.call_expr_arg_iterator_d* %1), !dbg !9759
  %2 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9760
  %call = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %2), !dbg !9761
  ret %union.tree_node* %call, !dbg !9762
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter) #0 !dbg !9763 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  %result = alloca %union.tree_node*, align 8
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !9766, metadata !DIExpression()), !dbg !9767
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9768, metadata !DIExpression()), !dbg !9769
  %0 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9770
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %0, i32 0, i32 2, !dbg !9772
  %1 = load i32, i32* %i, align 4, !dbg !9772
  %2 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9773
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %2, i32 0, i32 1, !dbg !9774
  %3 = load i32, i32* %n, align 8, !dbg !9774
  %cmp = icmp sge i32 %1, %3, !dbg !9775
  br i1 %cmp, label %if.then, label %if.end, !dbg !9776

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9777
  br label %return, !dbg !9777

if.end:                                           ; preds = %entry
  %4 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9778
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %4, i32 0, i32 0, !dbg !9778
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9778
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !9778
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9778
  %6 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9778
  %i1 = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !9778
  %7 = load i32, i32* %i1, align 4, !dbg !9778
  %add = add nsw i32 %7, 3, !dbg !9778
  %idxprom = sext i32 %add to i64, !dbg !9778
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !9778
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9778
  store %union.tree_node* %8, %union.tree_node** %result, align 8, !dbg !9779
  %9 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9780
  %i2 = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %9, i32 0, i32 2, !dbg !9781
  %10 = load i32, i32* %i2, align 4, !dbg !9782
  %inc = add nsw i32 %10, 1, !dbg !9782
  store i32 %inc, i32* %i2, align 4, !dbg !9782
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9783
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !9784
  br label %return, !dbg !9784

return:                                           ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9785
  ret %union.tree_node* %12, !dbg !9785
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_tree_body(%struct.copy_body_data* %id) #0 !dbg !9786 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !9789, metadata !DIExpression()), !dbg !9790
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !9791, metadata !DIExpression()), !dbg !9792
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9793
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 0, !dbg !9794
  %1 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !9794
  store %union.tree_node* %1, %union.tree_node** %fndecl, align 8, !dbg !9792
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !9795, metadata !DIExpression()), !dbg !9796
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !9797
  %decl_non_common = bitcast %union.tree_node* %2 to %struct.tree_decl_non_common*, !dbg !9797
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !9797
  %3 = load %union.tree_node*, %union.tree_node** %saved_tree, align 8, !dbg !9797
  store %union.tree_node* %3, %union.tree_node** %body, align 8, !dbg !9796
  %4 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !9798
  %5 = bitcast %struct.copy_body_data* %4 to i8*, !dbg !9798
  %call = call %union.tree_node* @walk_tree_1(%union.tree_node** %body, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %5, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !9798
  %6 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !9799
  ret %union.tree_node* %6, !dbg !9800
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_duplicate_type(%union.tree_node* %type) #0 !dbg !9801 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %id = alloca %struct.copy_body_data, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9802, metadata !DIExpression()), !dbg !9803
  call void @llvm.dbg.declare(metadata %struct.copy_body_data* %id, metadata !9804, metadata !DIExpression()), !dbg !9805
  %0 = bitcast %struct.copy_body_data* %id to i8*, !dbg !9806
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 152, i1 false), !dbg !9806
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9807
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 0, !dbg !9808
  store %union.tree_node* %1, %union.tree_node** %src_fn, align 8, !dbg !9809
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9810
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 1, !dbg !9811
  store %union.tree_node* %2, %union.tree_node** %dst_fn, align 8, !dbg !9812
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9813
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9813
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 4, !dbg !9814
  store %struct.function* %add.ptr, %struct.function** %src_cfun, align 8, !dbg !9815
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !9816
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !9817
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %decl_map, align 8, !dbg !9818
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !9819
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !9820
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 7, !dbg !9821
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !9822
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9823
  %call1 = call %union.tree_node* @remap_type_1(%union.tree_node* %4, %struct.copy_body_data* %id), !dbg !9824
  store %union.tree_node* %call1, %union.tree_node** %type.addr, align 8, !dbg !9825
  %decl_map2 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 6, !dbg !9826
  %5 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map2, align 8, !dbg !9826
  call void @pointer_map_destroy(%struct.pointer_map_t* %5), !dbg !9827
  %debug_map3 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !9828
  %6 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map3, align 8, !dbg !9828
  %tobool = icmp ne %struct.pointer_map_t* %6, null, !dbg !9830
  br i1 %tobool, label %if.then, label %if.end, !dbg !9831

if.then:                                          ; preds = %entry
  %debug_map4 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i32 0, i32 22, !dbg !9832
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map4, align 8, !dbg !9832
  call void @pointer_map_destroy(%struct.pointer_map_t* %7), !dbg !9833
  br label %if.end, !dbg !9833

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9834
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9835
  %type5 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !9835
  %canonical = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 19, !dbg !9835
  store %union.tree_node* %8, %union.tree_node** %canonical, align 8, !dbg !9836
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9837
  ret %union.tree_node* %10, !dbg !9838
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_can_inline_p(%struct.cgraph_edge* %e) #0 !dbg !9839 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %caller = alloca %union.tree_node*, align 8
  %callee = alloca %union.tree_node*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !9842, metadata !DIExpression()), !dbg !9843
  call void @llvm.dbg.declare(metadata %union.tree_node** %caller, metadata !9844, metadata !DIExpression()), !dbg !9845
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !9846, metadata !DIExpression()), !dbg !9847
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9848
  %caller1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 1, !dbg !9849
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %caller1, align 8, !dbg !9849
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !9850
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9850
  store %union.tree_node* %2, %union.tree_node** %caller, align 8, !dbg !9851
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9852
  %callee2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 2, !dbg !9853
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %callee2, align 8, !dbg !9853
  %decl3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !9854
  %5 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !9854
  store %union.tree_node* %5, %union.tree_node** %callee, align 8, !dbg !9855
  %6 = load %union.tree_node*, %union.tree_node** %caller, align 8, !dbg !9856
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !9856
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 2, !dbg !9856
  %7 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !9856
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !9856
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9858

land.lhs.true:                                    ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9859
  %function_decl4 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !9859
  %personality5 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl4, i32 0, i32 2, !dbg !9859
  %9 = load %union.tree_node*, %union.tree_node** %personality5, align 8, !dbg !9859
  %tobool6 = icmp ne %union.tree_node* %9, null, !dbg !9859
  br i1 %tobool6, label %land.lhs.true7, label %if.end, !dbg !9860

land.lhs.true7:                                   ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %caller, align 8, !dbg !9861
  %function_decl8 = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !9861
  %personality9 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl8, i32 0, i32 2, !dbg !9861
  %11 = load %union.tree_node*, %union.tree_node** %personality9, align 8, !dbg !9861
  %12 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9862
  %function_decl10 = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !9862
  %personality11 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 2, !dbg !9862
  %13 = load %union.tree_node*, %union.tree_node** %personality11, align 8, !dbg !9862
  %cmp = icmp ne %union.tree_node* %11, %13, !dbg !9863
  br i1 %cmp, label %if.then, label %if.end, !dbg !9864

if.then:                                          ; preds = %land.lhs.true7
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9865
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 9, !dbg !9867
  store i32 1, i32* %inline_failed, align 8, !dbg !9868
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9869
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 7, !dbg !9870
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !9870
  call void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %16, i8 zeroext 1), !dbg !9871
  store i8 0, i8* %retval, align 1, !dbg !9872
  br label %return, !dbg !9872

if.end:                                           ; preds = %land.lhs.true7, %land.lhs.true, %entry
  %17 = load i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 107, i32 5), align 8, !dbg !9873
  %18 = load %union.tree_node*, %union.tree_node** %caller, align 8, !dbg !9875
  %19 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !9876
  %call = call zeroext i8 %17(%union.tree_node* %18, %union.tree_node* %19), !dbg !9877
  %tobool12 = icmp ne i8 %call, 0, !dbg !9877
  br i1 %tobool12, label %if.end16, label %if.then13, !dbg !9878

if.then13:                                        ; preds = %if.end
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9879
  %inline_failed14 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 9, !dbg !9881
  store i32 16, i32* %inline_failed14, align 8, !dbg !9882
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9883
  %call_stmt15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 7, !dbg !9884
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt15, align 8, !dbg !9884
  call void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %22, i8 zeroext 1), !dbg !9885
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9886
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 14, !dbg !9887
  %bf.load = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !9888
  %bf.clear = and i8 %bf.load, -3, !dbg !9888
  %bf.set = or i8 %bf.clear, 2, !dbg !9888
  store i8 %bf.set, i8* %call_stmt_cannot_inline_p, align 2, !dbg !9888
  store i8 0, i8* %retval, align 1, !dbg !9889
  br label %return, !dbg !9889

if.end16:                                         ; preds = %if.end
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9890
  %call_stmt17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %24, i32 0, i32 7, !dbg !9892
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt17, align 8, !dbg !9892
  %tobool18 = icmp ne %union.gimple_statement_d* %25, null, !dbg !9890
  br i1 %tobool18, label %land.lhs.true19, label %if.end30, !dbg !9893

land.lhs.true19:                                  ; preds = %if.end16
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9894
  %call_stmt20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 7, !dbg !9895
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt20, align 8, !dbg !9895
  %call21 = call zeroext i8 @gimple_check_call_args(%union.gimple_statement_d* %27), !dbg !9896
  %tobool22 = icmp ne i8 %call21, 0, !dbg !9896
  br i1 %tobool22, label %if.end30, label %if.then23, !dbg !9897

if.then23:                                        ; preds = %land.lhs.true19
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9898
  %inline_failed24 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 9, !dbg !9900
  store i32 17, i32* %inline_failed24, align 8, !dbg !9901
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9902
  %call_stmt25 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 7, !dbg !9903
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt25, align 8, !dbg !9903
  call void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %30, i8 zeroext 1), !dbg !9904
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !9905
  %call_stmt_cannot_inline_p26 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %31, i32 0, i32 14, !dbg !9906
  %bf.load27 = load i8, i8* %call_stmt_cannot_inline_p26, align 2, !dbg !9907
  %bf.clear28 = and i8 %bf.load27, -3, !dbg !9907
  %bf.set29 = or i8 %bf.clear28, 2, !dbg !9907
  store i8 %bf.set29, i8* %call_stmt_cannot_inline_p26, align 2, !dbg !9907
  store i8 0, i8* %retval, align 1, !dbg !9908
  br label %return, !dbg !9908

if.end30:                                         ; preds = %land.lhs.true19, %if.end16
  store i8 1, i8* %retval, align 1, !dbg !9909
  br label %return, !dbg !9909

return:                                           ; preds = %if.end30, %if.then23, %if.then13, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !9910
  ret i8 %32, !dbg !9910
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %s, i8 zeroext %inlinable_p) #0 !dbg !9911 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %inlinable_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9914, metadata !DIExpression()), !dbg !9915
  store i8 %inlinable_p, i8* %inlinable_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %inlinable_p.addr, metadata !9916, metadata !DIExpression()), !dbg !9917
  %0 = load i8, i8* %inlinable_p.addr, align 1, !dbg !9918
  %tobool = icmp ne i8 %0, 0, !dbg !9918
  br i1 %tobool, label %if.then, label %if.else, !dbg !9920

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9921
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !9922
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9923
  %bf.load = load i32, i32* %2, align 8, !dbg !9924
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9924
  %or = or i32 %bf.lshr, 1, !dbg !9924
  %bf.load1 = load i32, i32* %2, align 8, !dbg !9924
  %bf.value = and i32 %or, 65535, !dbg !9924
  %bf.shl = shl i32 %bf.value, 16, !dbg !9924
  %bf.clear = and i32 %bf.load1, 65535, !dbg !9924
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !9924
  store i32 %bf.set, i32* %2, align 8, !dbg !9924
  br label %if.end, !dbg !9921

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9925
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !9926
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !9927
  %bf.load3 = load i32, i32* %4, align 8, !dbg !9928
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !9928
  %and = and i32 %bf.lshr4, -2, !dbg !9928
  %bf.load5 = load i32, i32* %4, align 8, !dbg !9928
  %bf.value6 = and i32 %and, 65535, !dbg !9928
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !9928
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !9928
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !9928
  store i32 %bf.set9, i32* %4, align 8, !dbg !9928
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !9929
}

declare dso_local zeroext i8 @gimple_check_call_args(%union.gimple_statement_d*) #2

declare dso_local %struct.var_ann_d* @create_var_ann(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type_for_mode(%union.tree_node*, i32, i8 zeroext) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_type_attribute_qual_variant(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_reference_type_for_mode(%union.tree_node*, i32, i8 zeroext) #2

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !9930 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9936, metadata !DIExpression()), !dbg !9937
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9938
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !9938
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9938

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9939
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !9940
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !9940
  br label %cond.end, !dbg !9938

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9938

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !9938
  ret %struct.gimple_seq_node_d* %cond, !dbg !9941
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !9942 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9945, metadata !DIExpression()), !dbg !9946
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9947
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9948
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !9949
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9949
  ret %struct.basic_block_def* %1, !dbg !9950
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !9951 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9954, metadata !DIExpression()), !dbg !9955
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9956, metadata !DIExpression()), !dbg !9957
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9958
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9958
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9959
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9960
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !9961
  ret %union.tree_node* %call, !dbg !9962
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !9963 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9966, metadata !DIExpression()), !dbg !9967
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9968
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9969
  %cmp = icmp eq i32 %call, 18, !dbg !9970
  %conv = zext i1 %cmp to i32, !dbg !9970
  %conv1 = trunc i32 %conv to i8, !dbg !9969
  ret i8 %conv1, !dbg !9971
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !9972 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !9977, metadata !DIExpression()), !dbg !9978
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9979, metadata !DIExpression()), !dbg !9978
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9978
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !9978
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9978

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9978
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9978
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !9978
  %3 = load i32, i32* %num, align 8, !dbg !9978
  %cmp = icmp ult i32 %1, %3, !dbg !9978
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9980
  %land.ext = zext i1 %4 to i32, !dbg !9978
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9978
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !9978
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9978
  %idxprom = zext i32 %6 to i64, !dbg !9978
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !9978
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !9978
  ret %struct.edge_def* %7, !dbg !9978
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !9981 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !9984, metadata !DIExpression()), !dbg !9985
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9985
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !9985
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9985

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !9985
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !9985
  %2 = load i32, i32* %num, align 8, !dbg !9985
  br label %cond.end, !dbg !9985

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9985

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9985
  ret i32 %cond, !dbg !9985
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !9986 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9987, metadata !DIExpression()), !dbg !9988
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !9989, metadata !DIExpression()), !dbg !9990
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !9991, metadata !DIExpression()), !dbg !9992
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9993
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !9994
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !9995
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !9996
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !9997
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !9998
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !9999
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10000
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !10001
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !10002
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10003
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !10004
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !10005
  ret void, !dbg !10006
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

declare dso_local void @set_default_def(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !10007 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10010, metadata !DIExpression()), !dbg !10011
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10012
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !10013
  %1 = load i32, i32* %flags, align 8, !dbg !10013
  %and = and i32 %1, 512, !dbg !10014
  %tobool = icmp ne i32 %and, 0, !dbg !10014
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !10015

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10016
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !10017
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !10018
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !10018
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !10016
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !10019

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10020
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !10021
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !10022
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !10022
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !10023
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !10023
  br label %cond.end, !dbg !10019

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !10019

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !10019
  ret %struct.gimple_seq_d* %cond, !dbg !10024
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !10025 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !10026, metadata !DIExpression()), !dbg !10027
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !10028
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !10028
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10028

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !10029
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !10030
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !10030
  br label %cond.end, !dbg !10028

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10028

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !10028
  ret %struct.gimple_seq_node_d* %cond, !dbg !10031
}

declare dso_local %union.tree_node* @alloc_stmt_list() #2

; Function Attrs: noinline nounwind uwtable
define internal { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %t) #0 !dbg !10032 {
entry:
  %retval = alloca %struct.tree_stmt_iterator, align 8
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !10035, metadata !DIExpression()), !dbg !10036
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %retval, metadata !10037, metadata !DIExpression()), !dbg !10038
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10039
  %stmt_list = bitcast %union.tree_node* %0 to %struct.tree_statement_list*, !dbg !10039
  %head = getelementptr inbounds %struct.tree_statement_list, %struct.tree_statement_list* %stmt_list, i32 0, i32 1, !dbg !10039
  %1 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %head, align 8, !dbg !10039
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %retval, i32 0, i32 0, !dbg !10040
  store %struct.tree_statement_list_node* %1, %struct.tree_statement_list_node** %ptr, align 8, !dbg !10041
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10042
  %container = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %retval, i32 0, i32 1, !dbg !10043
  store %union.tree_node* %2, %union.tree_node** %container, align 8, !dbg !10044
  %3 = bitcast %struct.tree_stmt_iterator* %retval to { %struct.tree_statement_list_node*, %union.tree_node* }*, !dbg !10045
  %4 = load { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %3, align 8, !dbg !10045
  ret { %struct.tree_statement_list_node*, %union.tree_node* } %4, !dbg !10045
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %i.coerce0, %union.tree_node* %i.coerce1) #0 !dbg !10046 {
entry:
  %i = alloca %struct.tree_stmt_iterator, align 8
  %0 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*
  %1 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 0
  store %struct.tree_statement_list_node* %i.coerce0, %struct.tree_statement_list_node** %1, align 8
  %2 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %i.coerce1, %union.tree_node** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !10049, metadata !DIExpression()), !dbg !10050
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %i, i32 0, i32 0, !dbg !10051
  %3 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %ptr, align 8, !dbg !10051
  %cmp = icmp eq %struct.tree_statement_list_node* %3, null, !dbg !10052
  %conv = zext i1 %cmp to i32, !dbg !10052
  %conv1 = trunc i32 %conv to i8, !dbg !10053
  ret i8 %conv1, !dbg !10054
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @tsi_stmt(%struct.tree_statement_list_node* %i.coerce0, %union.tree_node* %i.coerce1) #0 !dbg !10055 {
entry:
  %i = alloca %struct.tree_stmt_iterator, align 8
  %0 = bitcast %struct.tree_stmt_iterator* %i to { %struct.tree_statement_list_node*, %union.tree_node* }*
  %1 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 0
  store %struct.tree_statement_list_node* %i.coerce0, %struct.tree_statement_list_node** %1, align 8
  %2 = getelementptr inbounds { %struct.tree_statement_list_node*, %union.tree_node* }, { %struct.tree_statement_list_node*, %union.tree_node* }* %0, i32 0, i32 1
  store %union.tree_node* %i.coerce1, %union.tree_node** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator* %i, metadata !10058, metadata !DIExpression()), !dbg !10059
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %i, i32 0, i32 0, !dbg !10060
  %3 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %ptr, align 8, !dbg !10060
  %stmt = getelementptr inbounds %struct.tree_statement_list_node, %struct.tree_statement_list_node* %3, i32 0, i32 2, !dbg !10061
  %4 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !10061
  ret %union.tree_node* %4, !dbg !10062
}

declare dso_local void @tsi_link_after(%struct.tree_stmt_iterator*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @tsi_next(%struct.tree_stmt_iterator* %i) #0 !dbg !10063 {
entry:
  %i.addr = alloca %struct.tree_stmt_iterator*, align 8
  store %struct.tree_stmt_iterator* %i, %struct.tree_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_stmt_iterator** %i.addr, metadata !10067, metadata !DIExpression()), !dbg !10068
  %0 = load %struct.tree_stmt_iterator*, %struct.tree_stmt_iterator** %i.addr, align 8, !dbg !10069
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %0, i32 0, i32 0, !dbg !10070
  %1 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %ptr, align 8, !dbg !10070
  %next = getelementptr inbounds %struct.tree_statement_list_node, %struct.tree_statement_list_node* %1, i32 0, i32 1, !dbg !10071
  %2 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %next, align 8, !dbg !10071
  %3 = load %struct.tree_stmt_iterator*, %struct.tree_stmt_iterator** %i.addr, align 8, !dbg !10072
  %ptr1 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %3, i32 0, i32 0, !dbg !10073
  store %struct.tree_statement_list_node* %2, %struct.tree_statement_list_node** %ptr1, align 8, !dbg !10074
  ret void, !dbg !10075
}

; Function Attrs: noinline nounwind uwtable
define internal void @remap_block(%union.tree_node** %block, %struct.copy_body_data* %id) #0 !dbg !10076 {
entry:
  %block.addr = alloca %union.tree_node**, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %old_block = alloca %union.tree_node*, align 8
  %new_block = alloca %union.tree_node*, align 8
  store %union.tree_node** %block, %union.tree_node*** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %block.addr, metadata !10079, metadata !DIExpression()), !dbg !10080
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !10081, metadata !DIExpression()), !dbg !10082
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_block, metadata !10083, metadata !DIExpression()), !dbg !10084
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_block, metadata !10085, metadata !DIExpression()), !dbg !10086
  %0 = load %union.tree_node**, %union.tree_node*** %block.addr, align 8, !dbg !10087
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10088
  store %union.tree_node* %1, %union.tree_node** %old_block, align 8, !dbg !10089
  %call = call %union.tree_node* @make_node_stat(i32 4), !dbg !10090
  store %union.tree_node* %call, %union.tree_node** %new_block, align 8, !dbg !10091
  %2 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10092
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10092
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !10092
  %bf.load = load i64, i64* %3, align 8, !dbg !10092
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !10092
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10092
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10092
  %4 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10093
  %base1 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10093
  %5 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10093
  %6 = zext i32 %bf.cast to i64, !dbg !10094
  %bf.load2 = load i64, i64* %5, align 8, !dbg !10094
  %bf.value = and i64 %6, 1, !dbg !10094
  %bf.shl = shl i64 %bf.value, 24, !dbg !10094
  %bf.clear3 = and i64 %bf.load2, -16777217, !dbg !10094
  %bf.set = or i64 %bf.clear3, %bf.shl, !dbg !10094
  store i64 %bf.set, i64* %5, align 8, !dbg !10094
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !10094
  %7 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10095
  %8 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10096
  %block4 = bitcast %union.tree_node* %8 to %struct.tree_block*, !dbg !10096
  %abstract_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block4, i32 0, i32 7, !dbg !10096
  store %union.tree_node* %7, %union.tree_node** %abstract_origin, align 8, !dbg !10097
  %9 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10098
  %block5 = bitcast %union.tree_node* %9 to %struct.tree_block*, !dbg !10098
  %locus = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block5, i32 0, i32 2, !dbg !10098
  %10 = load i32, i32* %locus, align 4, !dbg !10098
  %11 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10099
  %block6 = bitcast %union.tree_node* %11 to %struct.tree_block*, !dbg !10099
  %locus7 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block6, i32 0, i32 2, !dbg !10099
  store i32 %10, i32* %locus7, align 4, !dbg !10100
  %12 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10101
  %block8 = bitcast %union.tree_node* %12 to %struct.tree_block*, !dbg !10101
  %nonlocalized_vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block8, i32 0, i32 4, !dbg !10101
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %nonlocalized_vars, align 8, !dbg !10101
  %tobool = icmp ne %struct.VEC_tree_gc* %13, null, !dbg !10101
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10101

cond.true:                                        ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10101
  %block9 = bitcast %union.tree_node* %14 to %struct.tree_block*, !dbg !10101
  %nonlocalized_vars10 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block9, i32 0, i32 4, !dbg !10101
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %nonlocalized_vars10, align 8, !dbg !10101
  %base11 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !10101
  br label %cond.end, !dbg !10101

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10101

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base11, %cond.true ], [ null, %cond.false ], !dbg !10101
  %call12 = call %struct.VEC_tree_gc* @VEC_tree_gc_copy(%struct.VEC_tree_base* %cond), !dbg !10101
  %16 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10102
  %block13 = bitcast %union.tree_node* %16 to %struct.tree_block*, !dbg !10102
  %nonlocalized_vars14 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block13, i32 0, i32 4, !dbg !10102
  store %struct.VEC_tree_gc* %call12, %struct.VEC_tree_gc** %nonlocalized_vars14, align 8, !dbg !10103
  %17 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10104
  %18 = load %union.tree_node**, %union.tree_node*** %block.addr, align 8, !dbg !10105
  store %union.tree_node* %17, %union.tree_node** %18, align 8, !dbg !10106
  %19 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10107
  %block15 = bitcast %union.tree_node* %19 to %struct.tree_block*, !dbg !10107
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block15, i32 0, i32 3, !dbg !10107
  %20 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !10107
  %21 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10108
  %block16 = bitcast %union.tree_node* %21 to %struct.tree_block*, !dbg !10108
  %nonlocalized_vars17 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block16, i32 0, i32 4, !dbg !10108
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10109
  %call18 = call %union.tree_node* @remap_decls(%union.tree_node* %20, %struct.VEC_tree_gc** %nonlocalized_vars17, %struct.copy_body_data* %22), !dbg !10110
  %23 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10111
  %block19 = bitcast %union.tree_node* %23 to %struct.tree_block*, !dbg !10111
  %vars20 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block19, i32 0, i32 3, !dbg !10111
  store %union.tree_node* %call18, %union.tree_node** %vars20, align 8, !dbg !10112
  %24 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10113
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %24, i32 0, i32 18, !dbg !10115
  %25 = load void (%union.tree_node*)*, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !10115
  %tobool21 = icmp ne void (%union.tree_node*)* %25, null, !dbg !10113
  br i1 %tobool21, label %if.then, label %if.end, !dbg !10116

if.then:                                          ; preds = %cond.end
  %26 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10117
  %transform_lang_insert_block22 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %26, i32 0, i32 18, !dbg !10118
  %27 = load void (%union.tree_node*)*, void (%union.tree_node*)** %transform_lang_insert_block22, align 8, !dbg !10118
  %28 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10119
  call void %27(%union.tree_node* %28), !dbg !10117
  br label %if.end, !dbg !10117

if.end:                                           ; preds = %if.then, %cond.end
  %29 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10120
  %30 = load %union.tree_node*, %union.tree_node** %old_block, align 8, !dbg !10121
  %31 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10122
  call void @insert_decl_map(%struct.copy_body_data* %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !10123
  ret void, !dbg !10124
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_decls(%union.tree_node* %decls, %struct.VEC_tree_gc** %nonlocalized_list, %struct.copy_body_data* %id) #0 !dbg !10125 {
entry:
  %decls.addr = alloca %union.tree_node*, align 8
  %nonlocalized_list.addr = alloca %struct.VEC_tree_gc**, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %old_var = alloca %union.tree_node*, align 8
  %new_decls = alloca %union.tree_node*, align 8
  %new_var = alloca %union.tree_node*, align 8
  store %union.tree_node* %decls, %union.tree_node** %decls.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decls.addr, metadata !10129, metadata !DIExpression()), !dbg !10130
  store %struct.VEC_tree_gc** %nonlocalized_list, %struct.VEC_tree_gc*** %nonlocalized_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %nonlocalized_list.addr, metadata !10131, metadata !DIExpression()), !dbg !10132
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !10133, metadata !DIExpression()), !dbg !10134
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_var, metadata !10135, metadata !DIExpression()), !dbg !10136
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decls, metadata !10137, metadata !DIExpression()), !dbg !10138
  store %union.tree_node* null, %union.tree_node** %new_decls, align 8, !dbg !10138
  %0 = load %union.tree_node*, %union.tree_node** %decls.addr, align 8, !dbg !10139
  store %union.tree_node* %0, %union.tree_node** %old_var, align 8, !dbg !10141
  br label %for.cond, !dbg !10142

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10143
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !10145
  br i1 %tobool, label %for.body, label %for.end, !dbg !10145

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_var, metadata !10146, metadata !DIExpression()), !dbg !10148
  %2 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10149
  %3 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10151
  %call = call zeroext i8 @can_be_nonlocal(%union.tree_node* %2, %struct.copy_body_data* %3), !dbg !10152
  %tobool1 = icmp ne i8 %call, 0, !dbg !10152
  br i1 %tobool1, label %if.then, label %if.end31, !dbg !10153

if.then:                                          ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10154
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !10154
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !10154
  %bf.load = load i64, i64* %5, align 8, !dbg !10154
  %bf.clear = and i64 %bf.load, 65535, !dbg !10154
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10154
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !10157
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10158

land.lhs.true:                                    ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10159
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !10159
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10159
  %7 = bitcast i40* %decl_flag_1 to i64*, !dbg !10159
  %bf.load2 = load i64, i64* %7, align 8, !dbg !10159
  %bf.lshr = lshr i64 %bf.load2, 25, !dbg !10159
  %bf.clear3 = and i64 %bf.lshr, 1, !dbg !10159
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10159
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !10159
  br i1 %tobool5, label %if.end, label %land.lhs.true6, !dbg !10160

land.lhs.true6:                                   ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10161
  %call7 = call %struct.var_ann_d* @var_ann(%union.tree_node* %8), !dbg !10162
  %tobool8 = icmp ne %struct.var_ann_d* %call7, null, !dbg !10162
  br i1 %tobool8, label %if.then11, label %lor.lhs.false, !dbg !10163

lor.lhs.false:                                    ; preds = %land.lhs.true6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10164
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !10164
  %call9 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !10165
  %tobool10 = icmp ne i8 %call9, 0, !dbg !10165
  br i1 %tobool10, label %if.end, label %if.then11, !dbg !10166

if.then11:                                        ; preds = %lor.lhs.false, %land.lhs.true6
  %10 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10167
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10167
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !10167
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 9, !dbg !10167
  %12 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !10167
  %call13 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %10, %union.tree_node* %12), !dbg !10167
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10168
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !10168
  %local_decls15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 9, !dbg !10169
  store %union.tree_node* %call13, %union.tree_node** %local_decls15, align 8, !dbg !10170
  br label %if.end, !dbg !10168

if.end:                                           ; preds = %if.then11, %lor.lhs.false, %land.lhs.true, %if.then
  %14 = load i32, i32* @optimize, align 4, !dbg !10171
  %tobool16 = icmp ne i32 %14, 0, !dbg !10171
  br i1 %tobool16, label %lor.lhs.false17, label %land.lhs.true19, !dbg !10173

lor.lhs.false17:                                  ; preds = %if.end
  %15 = load i32, i32* @debug_info_level, align 4, !dbg !10174
  %cmp18 = icmp ugt i32 %15, 1, !dbg !10175
  br i1 %cmp18, label %land.lhs.true19, label %if.end30, !dbg !10176

land.lhs.true19:                                  ; preds = %lor.lhs.false17, %if.end
  %16 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10177
  %decl_common20 = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !10177
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 2, !dbg !10177
  %17 = bitcast i40* %ignored_flag to i64*, !dbg !10177
  %bf.load21 = load i64, i64* %17, align 8, !dbg !10177
  %bf.lshr22 = lshr i64 %bf.load21, 10, !dbg !10177
  %bf.clear23 = and i64 %bf.lshr22, 1, !dbg !10177
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !10177
  %tobool25 = icmp ne i32 %bf.cast24, 0, !dbg !10177
  br i1 %tobool25, label %if.end30, label %land.lhs.true26, !dbg !10178

land.lhs.true26:                                  ; preds = %land.lhs.true19
  %18 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %nonlocalized_list.addr, align 8, !dbg !10179
  %tobool27 = icmp ne %struct.VEC_tree_gc** %18, null, !dbg !10179
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !10180

if.then28:                                        ; preds = %land.lhs.true26
  %19 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %nonlocalized_list.addr, align 8, !dbg !10181
  %20 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10181
  %call29 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %19, %union.tree_node* %20), !dbg !10181
  br label %if.end30, !dbg !10181

if.end30:                                         ; preds = %if.then28, %land.lhs.true26, %land.lhs.true19, %lor.lhs.false17
  br label %for.inc, !dbg !10182

if.end31:                                         ; preds = %for.body
  %21 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10183
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10184
  %call32 = call %union.tree_node* @remap_decl(%union.tree_node* %21, %struct.copy_body_data* %22), !dbg !10185
  store %union.tree_node* %call32, %union.tree_node** %new_var, align 8, !dbg !10186
  %23 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10187
  %24 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10189
  %retvar = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %24, i32 0, i32 5, !dbg !10190
  %25 = load %union.tree_node*, %union.tree_node** %retvar, align 8, !dbg !10190
  %cmp33 = icmp eq %union.tree_node* %23, %25, !dbg !10191
  br i1 %cmp33, label %if.then34, label %if.else, !dbg !10192

if.then34:                                        ; preds = %if.end31
  br label %if.end60, !dbg !10192

if.else:                                          ; preds = %if.end31
  %26 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10193
  %tobool35 = icmp ne %union.tree_node* %26, null, !dbg !10193
  br i1 %tobool35, label %if.else53, label %if.then36, !dbg !10195

if.then36:                                        ; preds = %if.else
  %27 = load i32, i32* @optimize, align 4, !dbg !10196
  %tobool37 = icmp ne i32 %27, 0, !dbg !10196
  br i1 %tobool37, label %lor.lhs.false38, label %land.lhs.true40, !dbg !10199

lor.lhs.false38:                                  ; preds = %if.then36
  %28 = load i32, i32* @debug_info_level, align 4, !dbg !10200
  %cmp39 = icmp ugt i32 %28, 1, !dbg !10201
  br i1 %cmp39, label %land.lhs.true40, label %if.end52, !dbg !10202

land.lhs.true40:                                  ; preds = %lor.lhs.false38, %if.then36
  %29 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10203
  %decl_common41 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !10203
  %ignored_flag42 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common41, i32 0, i32 2, !dbg !10203
  %30 = bitcast i40* %ignored_flag42 to i64*, !dbg !10203
  %bf.load43 = load i64, i64* %30, align 8, !dbg !10203
  %bf.lshr44 = lshr i64 %bf.load43, 10, !dbg !10203
  %bf.clear45 = and i64 %bf.lshr44, 1, !dbg !10203
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !10203
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !10203
  br i1 %tobool47, label %if.end52, label %land.lhs.true48, !dbg !10204

land.lhs.true48:                                  ; preds = %land.lhs.true40
  %31 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %nonlocalized_list.addr, align 8, !dbg !10205
  %tobool49 = icmp ne %struct.VEC_tree_gc** %31, null, !dbg !10205
  br i1 %tobool49, label %if.then50, label %if.end52, !dbg !10206

if.then50:                                        ; preds = %land.lhs.true48
  %32 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %nonlocalized_list.addr, align 8, !dbg !10207
  %33 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10207
  %call51 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %32, %union.tree_node* %33), !dbg !10207
  br label %if.end52, !dbg !10207

if.end52:                                         ; preds = %if.then50, %land.lhs.true48, %land.lhs.true40, %lor.lhs.false38
  br label %if.end59, !dbg !10208

if.else53:                                        ; preds = %if.else
  %34 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10209
  %base54 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !10209
  %35 = bitcast %struct.tree_base* %base54 to i64*, !dbg !10209
  %bf.load55 = load i64, i64* %35, align 8, !dbg !10209
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !10209
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !10209
  %idxprom = sext i32 %bf.cast57 to i64, !dbg !10209
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10209
  %36 = load i32, i32* %arrayidx, align 4, !dbg !10209
  %cmp58 = icmp eq i32 %36, 3, !dbg !10209
  br i1 %cmp58, label %cond.false, label %cond.true, !dbg !10209

cond.true:                                        ; preds = %if.else53
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 569, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10209
  br label %cond.end, !dbg !10209

cond.false:                                       ; preds = %if.else53
  br label %cond.end, !dbg !10209

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10209
  %37 = load %union.tree_node*, %union.tree_node** %new_decls, align 8, !dbg !10211
  %38 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10212
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !10212
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !10212
  store %union.tree_node* %37, %union.tree_node** %chain, align 8, !dbg !10213
  %39 = load %union.tree_node*, %union.tree_node** %new_var, align 8, !dbg !10214
  store %union.tree_node* %39, %union.tree_node** %new_decls, align 8, !dbg !10215
  br label %if.end59

if.end59:                                         ; preds = %cond.end, %if.end52
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then34
  br label %for.inc, !dbg !10216

for.inc:                                          ; preds = %if.end60, %if.end30
  %40 = load %union.tree_node*, %union.tree_node** %old_var, align 8, !dbg !10217
  %common61 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !10217
  %chain62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 1, !dbg !10217
  %41 = load %union.tree_node*, %union.tree_node** %chain62, align 8, !dbg !10217
  store %union.tree_node* %41, %union.tree_node** %old_var, align 8, !dbg !10218
  br label %for.cond, !dbg !10219, !llvm.loop !10220

for.end:                                          ; preds = %for.cond
  %42 = load %union.tree_node*, %union.tree_node** %new_decls, align 8, !dbg !10222
  %call63 = call %union.tree_node* @nreverse(%union.tree_node* %42), !dbg !10223
  ret %union.tree_node* %call63, !dbg !10224
}

declare dso_local %union.tree_node* @make_node_stat(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_gc* @VEC_tree_gc_copy(%struct.VEC_tree_base* %vec_) #0 !dbg !10225 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_tree_gc*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10229, metadata !DIExpression()), !dbg !10230
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !10231, metadata !DIExpression()), !dbg !10230
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10230
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !10230
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10230

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10230
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !10230
  %2 = load i32, i32* %num, align 8, !dbg !10230
  br label %cond.end, !dbg !10230

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10230

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !10230
  %conv = zext i32 %cond to i64, !dbg !10230
  store i64 %conv, i64* %len_, align 8, !dbg !10230
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %new_vec_, metadata !10232, metadata !DIExpression()), !dbg !10230
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %new_vec_, align 8, !dbg !10230
  %3 = load i64, i64* %len_, align 8, !dbg !10233
  %tobool1 = icmp ne i64 %3, 0, !dbg !10233
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10230

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !10235
  %conv2 = trunc i64 %4 to i32, !dbg !10235
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %conv2), !dbg !10235
  %5 = bitcast i8* %call to %struct.VEC_tree_gc*, !dbg !10235
  store %struct.VEC_tree_gc* %5, %struct.VEC_tree_gc** %new_vec_, align 8, !dbg !10235
  %6 = load i64, i64* %len_, align 8, !dbg !10235
  %conv3 = trunc i64 %6 to i32, !dbg !10235
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %new_vec_, align 8, !dbg !10235
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %7, i32 0, i32 0, !dbg !10235
  %num4 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %base, i32 0, i32 0, !dbg !10235
  store i32 %conv3, i32* %num4, align 8, !dbg !10235
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %new_vec_, align 8, !dbg !10235
  %base5 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %8, i32 0, i32 0, !dbg !10235
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %base5, i32 0, i32 2, !dbg !10235
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !10235
  %9 = bitcast %union.tree_node** %arraydecay to i8*, !dbg !10235
  %10 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10235
  %vec6 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %10, i32 0, i32 2, !dbg !10235
  %arraydecay7 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec6, i64 0, i64 0, !dbg !10235
  %11 = bitcast %union.tree_node** %arraydecay7 to i8*, !dbg !10235
  %12 = load i64, i64* %len_, align 8, !dbg !10235
  %mul = mul i64 8, %12, !dbg !10235
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !10235
  br label %if.end, !dbg !10235

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %new_vec_, align 8, !dbg !10230
  ret %struct.VEC_tree_gc* %13, !dbg !10230
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @var_ann(%union.tree_node* %t) #0 !dbg !10237 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !10240, metadata !DIExpression()), !dbg !10241
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !10242, metadata !DIExpression()), !dbg !10245
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10246
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10246
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10246
  %bf.load = load i64, i64* %1, align 8, !dbg !10246
  %bf.clear = and i64 %bf.load, 65535, !dbg !10246
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10246
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !10246
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10246

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10246
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !10246
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !10246
  br label %cond.end19, !dbg !10246

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10246
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10246
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10246
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10246
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10246
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10246
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !10246
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !10246

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10246
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !10246
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !10246
  br label %cond.end17, !dbg !10246

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10246
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !10246
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !10246
  %bf.load10 = load i64, i64* %7, align 8, !dbg !10246
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !10246
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !10246
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !10246
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !10246

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !10246
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !10246
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !10246
  br label %cond.end, !dbg !10246

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !10246

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !10246
  br label %cond.end17, !dbg !10246

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !10246
  br label %cond.end19, !dbg !10246

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !10246
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !10245
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !10247
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !10247
  br i1 %tobool, label %cond.true21, label %cond.false22, !dbg !10247

cond.true21:                                      ; preds = %cond.end19
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !10248
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !10249
  br label %cond.end23, !dbg !10247

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !10247

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi %struct.var_ann_d* [ %11, %cond.true21 ], [ null, %cond.false22 ], !dbg !10247
  ret %struct.var_ann_d* %cond24, !dbg !10250
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !10251 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !10254, metadata !DIExpression()), !dbg !10255
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10256, metadata !DIExpression()), !dbg !10255
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10255
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !10255
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10255
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !10255
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !10255
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10255

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10255
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !10255
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !10255
  br label %cond.end, !dbg !10255

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10255

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10255
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10255
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !10255
  ret %union.tree_node** %call1, !dbg !10255
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !10257 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !10260, metadata !DIExpression()), !dbg !10261
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10262, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !10263, metadata !DIExpression()), !dbg !10261
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10261
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !10261
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !10261
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10261

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10261
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !10261
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !10261
  br label %cond.end, !dbg !10261

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10261

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10261
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !10261
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !10261
  %tobool1 = icmp ne i32 %call, 0, !dbg !10261
  %lnot = xor i1 %tobool1, true, !dbg !10261
  %lnot.ext = zext i1 %lnot to i32, !dbg !10261
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !10261
  %5 = load i32, i32* %extend, align 4, !dbg !10264
  %tobool2 = icmp ne i32 %5, 0, !dbg !10264
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10261

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10264
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !10264
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !10264
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !10264
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !10264
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !10264
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !10264
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !10264
  br label %if.end, !dbg !10264

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !10261
  ret i32 %12, !dbg !10261
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !10266 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10269, metadata !DIExpression()), !dbg !10270
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10271, metadata !DIExpression()), !dbg !10270
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !10272, metadata !DIExpression()), !dbg !10270
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10270
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !10270
  %1 = load i32, i32* %num, align 8, !dbg !10270
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10270
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !10270
  %3 = load i32, i32* %alloc, align 4, !dbg !10270
  %cmp = icmp ult i32 %1, %3, !dbg !10270
  %conv = zext i1 %cmp to i32, !dbg !10270
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10270
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !10270
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10270
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !10270
  %6 = load i32, i32* %num1, align 8, !dbg !10270
  %inc = add i32 %6, 1, !dbg !10270
  store i32 %inc, i32* %num1, align 8, !dbg !10270
  %idxprom = zext i32 %6 to i64, !dbg !10270
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10270
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !10270
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10270
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10270
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !10270
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10270
  ret %union.tree_node** %9, !dbg !10270
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !10273 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10276, metadata !DIExpression()), !dbg !10277
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10278, metadata !DIExpression()), !dbg !10277
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10277
  %cmp = icmp sge i32 %0, 0, !dbg !10277
  %conv = zext i1 %cmp to i32, !dbg !10277
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10277
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !10277
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10277

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10277
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !10277
  %3 = load i32, i32* %alloc, align 4, !dbg !10277
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10277
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !10277
  %5 = load i32, i32* %num, align 8, !dbg !10277
  %sub = sub i32 %3, %5, !dbg !10277
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10277
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10277
  %conv2 = zext i1 %cmp1 to i32, !dbg !10277
  br label %cond.end, !dbg !10277

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10277
  %tobool3 = icmp ne i32 %7, 0, !dbg !10277
  %lnot = xor i1 %tobool3, true, !dbg !10277
  %lnot.ext = zext i1 %lnot to i32, !dbg !10277
  br label %cond.end, !dbg !10277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10277
  ret i32 %cond, !dbg !10277
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !10279 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10280, metadata !DIExpression()), !dbg !10281
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10282
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !10283
  ret %union.tree_node* %call, !dbg !10284
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %g) #0 !dbg !10285 {
entry:
  %retval = alloca i8, align 1
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10288, metadata !DIExpression()), !dbg !10289
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10290
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10291
  switch i32 %call, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 17, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 29, label %sw.bb
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 22, label %sw.bb
    i32 34, label %sw.bb
  ], !dbg !10292

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !10293
  br label %return, !dbg !10293

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10295
  br label %return, !dbg !10295

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i8, i8* %retval, align 1, !dbg !10296
  ret i8 %1, !dbg !10296
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @copy_gimple_bind(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) #0 !dbg !10297 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %new_bind = alloca %union.gimple_statement_d*, align 8
  %new_block = alloca %union.tree_node*, align 8
  %new_vars = alloca %union.tree_node*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  %new_body = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10298, metadata !DIExpression()), !dbg !10299
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !10300, metadata !DIExpression()), !dbg !10301
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_bind, metadata !10302, metadata !DIExpression()), !dbg !10303
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_block, metadata !10304, metadata !DIExpression()), !dbg !10305
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_vars, metadata !10306, metadata !DIExpression()), !dbg !10307
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !10308, metadata !DIExpression()), !dbg !10309
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_body, metadata !10310, metadata !DIExpression()), !dbg !10311
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10312
  %call = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %0), !dbg !10313
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %body, align 8, !dbg !10314
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !10315
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10316
  %call1 = call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %1, %struct.copy_body_data* %2), !dbg !10317
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %new_body, align 8, !dbg !10318
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10319
  %call2 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %3), !dbg !10320
  store %union.tree_node* %call2, %union.tree_node** %new_block, align 8, !dbg !10321
  %4 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10322
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !10322
  br i1 %tobool, label %if.then, label %if.end, !dbg !10324

if.then:                                          ; preds = %entry
  %5 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10325
  call void @remap_block(%union.tree_node** %new_block, %struct.copy_body_data* %5), !dbg !10326
  br label %if.end, !dbg !10326

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10327
  %call3 = call %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %6), !dbg !10328
  store %union.tree_node* %call3, %union.tree_node** %new_vars, align 8, !dbg !10329
  %7 = load %union.tree_node*, %union.tree_node** %new_vars, align 8, !dbg !10330
  %tobool4 = icmp ne %union.tree_node* %7, null, !dbg !10330
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !10332

if.then5:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %new_vars, align 8, !dbg !10333
  %9 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10334
  %call6 = call %union.tree_node* @remap_decls(%union.tree_node* %8, %struct.VEC_tree_gc** null, %struct.copy_body_data* %9), !dbg !10335
  store %union.tree_node* %call6, %union.tree_node** %new_vars, align 8, !dbg !10336
  br label %if.end7, !dbg !10337

if.end7:                                          ; preds = %if.then5, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %new_vars, align 8, !dbg !10338
  %11 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_body, align 8, !dbg !10339
  %12 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !10340
  %call8 = call %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* %10, %struct.gimple_seq_d* %11, %union.tree_node* %12), !dbg !10341
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %new_bind, align 8, !dbg !10342
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_bind, align 8, !dbg !10343
  ret %union.gimple_statement_d* %13, !dbg !10344
}

declare dso_local %union.gimple_statement_d* @gimple_build_catch(%union.tree_node*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %gs) #0 !dbg !10345 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10346, metadata !DIExpression()), !dbg !10347
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10348
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !10349
  %types = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 1, !dbg !10350
  %1 = load %union.tree_node*, %union.tree_node** %types, align 8, !dbg !10350
  ret %union.tree_node* %1, !dbg !10351
}

declare dso_local %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %gs) #0 !dbg !10352 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10353, metadata !DIExpression()), !dbg !10354
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10355
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !10356
  %types = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 1, !dbg !10357
  %1 = load %union.tree_node*, %union.tree_node** %types, align 8, !dbg !10357
  ret %union.tree_node* %1, !dbg !10358
}

declare dso_local %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_try_kind(%union.gimple_statement_d* %gs) #0 !dbg !10359 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10362, metadata !DIExpression()), !dbg !10363
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10364
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !10365
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !10366
  %bf.load = load i32, i32* %1, align 8, !dbg !10366
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10366
  %and = and i32 %bf.lshr, 3, !dbg !10367
  ret i32 %and, !dbg !10368
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !10369 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10370, metadata !DIExpression()), !dbg !10371
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10372
  %gimple_wce = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_wce*, !dbg !10373
  %cleanup = getelementptr inbounds %struct.gimple_statement_wce, %struct.gimple_statement_wce* %gimple_wce, i32 0, i32 1, !dbg !10374
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !10374
  ret %struct.gimple_seq_d* %1, !dbg !10375
}

declare dso_local %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %gs) #0 !dbg !10376 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10377, metadata !DIExpression()), !dbg !10378
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10379
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !10380
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !10381
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !10381
  ret %union.tree_node* %1, !dbg !10382
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %gs) #0 !dbg !10383 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10384, metadata !DIExpression()), !dbg !10385
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10386
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !10387
  %child_fn = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !10388
  %1 = load %union.tree_node*, %union.tree_node** %child_fn, align 8, !dbg !10388
  ret %union.tree_node* %1, !dbg !10389
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %gs) #0 !dbg !10390 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10391, metadata !DIExpression()), !dbg !10392
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10393
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !10394
  %data_arg = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !10395
  %1 = load %union.tree_node*, %union.tree_node** %data_arg, align 8, !dbg !10395
  ret %union.tree_node* %1, !dbg !10396
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %gs) #0 !dbg !10397 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10398, metadata !DIExpression()), !dbg !10399
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10400
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !10401
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !10402
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !10402
  ret %union.tree_node* %1, !dbg !10403
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %gs) #0 !dbg !10404 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10405, metadata !DIExpression()), !dbg !10406
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10407
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !10408
  %child_fn = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 2, !dbg !10409
  %1 = load %union.tree_node*, %union.tree_node** %child_fn, align 8, !dbg !10409
  ret %union.tree_node* %1, !dbg !10410
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %gs) #0 !dbg !10411 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10412, metadata !DIExpression()), !dbg !10413
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10414
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_parallel*, !dbg !10415
  %data_arg = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 3, !dbg !10416
  %1 = load %union.tree_node*, %union.tree_node** %data_arg, align 8, !dbg !10416
  ret %union.tree_node* %1, !dbg !10417
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %gs) #0 !dbg !10418 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10419, metadata !DIExpression()), !dbg !10420
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10421
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !10422
  %copy_fn = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 1, !dbg !10423
  %1 = load %union.tree_node*, %union.tree_node** %copy_fn, align 8, !dbg !10423
  ret %union.tree_node* %1, !dbg !10424
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %gs) #0 !dbg !10425 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10426, metadata !DIExpression()), !dbg !10427
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10428
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !10429
  %arg_size = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 2, !dbg !10430
  %1 = load %union.tree_node*, %union.tree_node** %arg_size, align 8, !dbg !10430
  ret %union.tree_node* %1, !dbg !10431
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %gs) #0 !dbg !10432 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10433, metadata !DIExpression()), !dbg !10434
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10435
  %gimple_omp_task = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_task*, !dbg !10436
  %arg_align = getelementptr inbounds %struct.gimple_statement_omp_task, %struct.gimple_statement_omp_task* %gimple_omp_task, i32 0, i32 3, !dbg !10437
  %1 = load %union.tree_node*, %union.tree_node** %arg_align, align 8, !dbg !10437
  ret %union.tree_node* %1, !dbg !10438
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d*, %union.tree_node*, i64, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %gs) #0 !dbg !10439 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10440, metadata !DIExpression()), !dbg !10441
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10442
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !10443
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 1, !dbg !10444
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !10444
  ret %union.tree_node* %1, !dbg !10445
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %gs) #0 !dbg !10446 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10449, metadata !DIExpression()), !dbg !10450
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10451
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !10452
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10453
  %1 = load i64, i64* %collapse, align 8, !dbg !10453
  ret i64 %1, !dbg !10454
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_index(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %index) #0 !dbg !10455 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %index.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10458, metadata !DIExpression()), !dbg !10459
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10460, metadata !DIExpression()), !dbg !10461
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !10462, metadata !DIExpression()), !dbg !10463
  %0 = load i64, i64* %i.addr, align 8, !dbg !10464
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10464
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10464
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10464
  %2 = load i64, i64* %collapse, align 8, !dbg !10464
  %cmp = icmp ult i64 %0, %2, !dbg !10464
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10464

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3475, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10464
  br label %cond.end, !dbg !10464

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10464

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10464
  %3 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !10465
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10466
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !10467
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10468
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10468
  %6 = load i64, i64* %i.addr, align 8, !dbg !10469
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !10466
  %index2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !10470
  store %union.tree_node* %3, %union.tree_node** %index2, align 8, !dbg !10471
  ret void, !dbg !10472
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !10473 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10476, metadata !DIExpression()), !dbg !10477
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10478, metadata !DIExpression()), !dbg !10479
  %0 = load i64, i64* %i.addr, align 8, !dbg !10480
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10480
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10480
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10480
  %2 = load i64, i64* %collapse, align 8, !dbg !10480
  %cmp = icmp ult i64 %0, %2, !dbg !10480
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10480

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3453, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10480
  br label %cond.end, !dbg !10480

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10480
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10481
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !10482
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10483
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10483
  %5 = load i64, i64* %i.addr, align 8, !dbg !10484
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !10481
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !10485
  %6 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !10485
  ret %union.tree_node* %6, !dbg !10486
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_initial(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %initial) #0 !dbg !10487 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %initial.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10488, metadata !DIExpression()), !dbg !10489
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10490, metadata !DIExpression()), !dbg !10491
  store %union.tree_node* %initial, %union.tree_node** %initial.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %initial.addr, metadata !10492, metadata !DIExpression()), !dbg !10493
  %0 = load i64, i64* %i.addr, align 8, !dbg !10494
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10494
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10494
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10494
  %2 = load i64, i64* %collapse, align 8, !dbg !10494
  %cmp = icmp ult i64 %0, %2, !dbg !10494
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10494

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10494
  br label %cond.end, !dbg !10494

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10494
  %3 = load %union.tree_node*, %union.tree_node** %initial.addr, align 8, !dbg !10495
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10496
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !10497
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10498
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10498
  %6 = load i64, i64* %i.addr, align 8, !dbg !10499
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !10496
  %initial2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !10500
  store %union.tree_node* %3, %union.tree_node** %initial2, align 8, !dbg !10501
  ret void, !dbg !10502
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !10503 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10504, metadata !DIExpression()), !dbg !10505
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10506, metadata !DIExpression()), !dbg !10507
  %0 = load i64, i64* %i.addr, align 8, !dbg !10508
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10508
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10508
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10508
  %2 = load i64, i64* %collapse, align 8, !dbg !10508
  %cmp = icmp ult i64 %0, %2, !dbg !10508
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10508

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10508
  br label %cond.end, !dbg !10508

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10508

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10508
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10509
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !10510
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10511
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10511
  %5 = load i64, i64* %i.addr, align 8, !dbg !10512
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !10509
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !10513
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !10513
  ret %union.tree_node* %6, !dbg !10514
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_final(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %final) #0 !dbg !10515 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %final.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10516, metadata !DIExpression()), !dbg !10517
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10518, metadata !DIExpression()), !dbg !10519
  store %union.tree_node* %final, %union.tree_node** %final.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %final.addr, metadata !10520, metadata !DIExpression()), !dbg !10521
  %0 = load i64, i64* %i.addr, align 8, !dbg !10522
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10522
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10522
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10522
  %2 = load i64, i64* %collapse, align 8, !dbg !10522
  %cmp = icmp ult i64 %0, %2, !dbg !10522
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10522

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10522
  br label %cond.end, !dbg !10522

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10522

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10522
  %3 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !10523
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10524
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !10525
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10526
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10526
  %6 = load i64, i64* %i.addr, align 8, !dbg !10527
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !10524
  %final2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !10528
  store %union.tree_node* %3, %union.tree_node** %final2, align 8, !dbg !10529
  ret void, !dbg !10530
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !10531 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10532, metadata !DIExpression()), !dbg !10533
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10534, metadata !DIExpression()), !dbg !10535
  %0 = load i64, i64* %i.addr, align 8, !dbg !10536
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10536
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10536
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10536
  %2 = load i64, i64* %collapse, align 8, !dbg !10536
  %cmp = icmp ult i64 %0, %2, !dbg !10536
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10536

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10536
  br label %cond.end, !dbg !10536

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10536

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10536
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10537
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !10538
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10539
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10539
  %5 = load i64, i64* %i.addr, align 8, !dbg !10540
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !10537
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !10541
  %6 = load %union.tree_node*, %union.tree_node** %final, align 8, !dbg !10541
  ret %union.tree_node* %6, !dbg !10542
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_incr(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %incr) #0 !dbg !10543 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %incr.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10544, metadata !DIExpression()), !dbg !10545
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10546, metadata !DIExpression()), !dbg !10547
  store %union.tree_node* %incr, %union.tree_node** %incr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %incr.addr, metadata !10548, metadata !DIExpression()), !dbg !10549
  %0 = load i64, i64* %i.addr, align 8, !dbg !10550
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10550
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10550
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10550
  %2 = load i64, i64* %collapse, align 8, !dbg !10550
  %cmp = icmp ult i64 %0, %2, !dbg !10550
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10550

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10550
  br label %cond.end, !dbg !10550

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10550
  %3 = load %union.tree_node*, %union.tree_node** %incr.addr, align 8, !dbg !10551
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10552
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !10553
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10554
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10554
  %6 = load i64, i64* %i.addr, align 8, !dbg !10555
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !10552
  %incr2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !10556
  store %union.tree_node* %3, %union.tree_node** %incr2, align 8, !dbg !10557
  ret void, !dbg !10558
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !10559 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10560, metadata !DIExpression()), !dbg !10561
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10562, metadata !DIExpression()), !dbg !10563
  %0 = load i64, i64* %i.addr, align 8, !dbg !10564
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10564
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10564
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10564
  %2 = load i64, i64* %collapse, align 8, !dbg !10564
  %cmp = icmp ult i64 %0, %2, !dbg !10564
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10564

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10564
  br label %cond.end, !dbg !10564

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10564

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10564
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10565
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !10566
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10567
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10567
  %5 = load i64, i64* %i.addr, align 8, !dbg !10568
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !10565
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !10569
  %6 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !10569
  ret %union.tree_node* %6, !dbg !10570
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_cond(%union.gimple_statement_d* %gs, i64 %i, i32 %cond) #0 !dbg !10571 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %cond.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10574, metadata !DIExpression()), !dbg !10575
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10576, metadata !DIExpression()), !dbg !10577
  store i32 %cond, i32* %cond.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond.addr, metadata !10578, metadata !DIExpression()), !dbg !10579
  %0 = load i32, i32* %cond.addr, align 4, !dbg !10580
  %idxprom = sext i32 %0 to i64, !dbg !10580
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10580
  %1 = load i32, i32* %arrayidx, align 4, !dbg !10580
  %cmp = icmp eq i32 %1, 5, !dbg !10580
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10580

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 4076, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10580
  br label %cond.end, !dbg !10580

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10580

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10580
  %2 = load i64, i64* %i.addr, align 8, !dbg !10581
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10581
  %gimple_omp_for = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !10581
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10581
  %4 = load i64, i64* %collapse, align 8, !dbg !10581
  %cmp2 = icmp ult i64 %2, %4, !dbg !10581
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !10581

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 4077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10581
  br label %cond.end5, !dbg !10581

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !10581

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !10581
  %5 = load i32, i32* %cond.addr, align 4, !dbg !10582
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10583
  %gimple_omp_for7 = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_omp_for*, !dbg !10584
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for7, i32 0, i32 3, !dbg !10585
  %7 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10585
  %8 = load i64, i64* %i.addr, align 8, !dbg !10586
  %arrayidx8 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %7, i64 %8, !dbg !10583
  %cond9 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx8, i32 0, i32 0, !dbg !10587
  store i32 %5, i32* %cond9, align 8, !dbg !10588
  ret void, !dbg !10589
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_omp_for_cond(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !10590 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10593, metadata !DIExpression()), !dbg !10594
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !10595, metadata !DIExpression()), !dbg !10596
  %0 = load i64, i64* %i.addr, align 8, !dbg !10597
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10597
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !10597
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !10597
  %2 = load i64, i64* %collapse, align 8, !dbg !10597
  %cmp = icmp ult i64 %0, %2, !dbg !10597
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10597

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 4088, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10597
  br label %cond.end, !dbg !10597

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10597

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10597
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10598
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !10599
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !10600
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !10600
  %5 = load i64, i64* %i.addr, align 8, !dbg !10601
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !10598
  %cond2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 0, !dbg !10602
  %6 = load i32, i32* %cond2, align 8, !dbg !10602
  ret i32 %6, !dbg !10603
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %gs) #0 !dbg !10604 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10605, metadata !DIExpression()), !dbg !10606
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10607
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_sections*, !dbg !10608
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 1, !dbg !10609
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !10609
  ret %union.tree_node* %1, !dbg !10610
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_single_clauses(%union.gimple_statement_d* %gs) #0 !dbg !10611 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10612, metadata !DIExpression()), !dbg !10613
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10614
  %gimple_omp_single = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_single*, !dbg !10615
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_single, %struct.gimple_statement_omp_single* %gimple_omp_single, i32 0, i32 1, !dbg !10616
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !10616
  ret %union.tree_node* %1, !dbg !10617
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %gs) #0 !dbg !10618 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10619, metadata !DIExpression()), !dbg !10620
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10621
  %gimple_omp_critical = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_critical*, !dbg !10622
  %name = getelementptr inbounds %struct.gimple_statement_omp_critical, %struct.gimple_statement_omp_critical* %gimple_omp_critical, i32 0, i32 1, !dbg !10623
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !10623
  ret %union.tree_node* %1, !dbg !10624
}

declare dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !10625 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !10626, metadata !DIExpression()), !dbg !10627
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !10628
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !10630
  %tobool = icmp ne i8 %call, 0, !dbg !10630
  br i1 %tobool, label %if.then, label %if.end, !dbg !10631

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !10632
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !10633
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !10634
  %bf.load = load i32, i32* %2, align 8, !dbg !10634
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10634
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !10635
  %conv = zext i1 %cmp to i32, !dbg !10635
  %conv1 = trunc i32 %conv to i8, !dbg !10632
  store i8 %conv1, i8* %retval, align 1, !dbg !10636
  br label %return, !dbg !10636

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10637
  br label %return, !dbg !10637

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !10638
  ret i8 %3, !dbg !10638
}

declare dso_local %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %dbg) #0 !dbg !10639 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !10642, metadata !DIExpression()), !dbg !10643
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !10644
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !10645
  ret %union.tree_node* %call, !dbg !10646
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %dbg) #0 !dbg !10647 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !10648, metadata !DIExpression()), !dbg !10649
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !10650
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !10651
  ret %union.tree_node* %call, !dbg !10652
}

declare dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_eh_region_tree_nr(%union.tree_node* %old_t_nr, %struct.copy_body_data* %id) #0 !dbg !10653 {
entry:
  %old_t_nr.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %old_nr = alloca i32, align 4
  %new_nr = alloca i32, align 4
  store %union.tree_node* %old_t_nr, %union.tree_node** %old_t_nr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_t_nr.addr, metadata !10654, metadata !DIExpression()), !dbg !10655
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !10656, metadata !DIExpression()), !dbg !10657
  call void @llvm.dbg.declare(metadata i32* %old_nr, metadata !10658, metadata !DIExpression()), !dbg !10659
  call void @llvm.dbg.declare(metadata i32* %new_nr, metadata !10660, metadata !DIExpression()), !dbg !10661
  %0 = load %union.tree_node*, %union.tree_node** %old_t_nr.addr, align 8, !dbg !10662
  %call = call i64 @tree_low_cst(%union.tree_node* %0, i32 0), !dbg !10663
  %conv = trunc i64 %call to i32, !dbg !10663
  store i32 %conv, i32* %old_nr, align 4, !dbg !10664
  %1 = load i32, i32* %old_nr, align 4, !dbg !10665
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10666
  %call1 = call i32 @remap_eh_region_nr(i32 %1, %struct.copy_body_data* %2), !dbg !10667
  store i32 %call1, i32* %new_nr, align 4, !dbg !10668
  %3 = load i32, i32* %new_nr, align 4, !dbg !10669
  %conv2 = sext i32 %3 to i64, !dbg !10669
  %call3 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv2), !dbg !10670
  ret %union.tree_node* %call3, !dbg !10671
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) #0 !dbg !10672 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10675, metadata !DIExpression()), !dbg !10676
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10677, metadata !DIExpression()), !dbg !10678
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !10679, metadata !DIExpression()), !dbg !10680
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10681
  %1 = load i32, i32* %index.addr, align 4, !dbg !10682
  %add = add i32 %1, 3, !dbg !10683
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !10684
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 %add, %union.tree_node* %2), !dbg !10685
  ret void, !dbg !10686
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_resx_region(%union.gimple_statement_d* %gs) #0 !dbg !10687 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10690, metadata !DIExpression()), !dbg !10691
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10692
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !10693
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !10694
  %1 = load i32, i32* %region, align 8, !dbg !10694
  ret i32 %1, !dbg !10695
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @remap_eh_region_nr(i32 %old_nr, %struct.copy_body_data* %id) #0 !dbg !10696 {
entry:
  %old_nr.addr = alloca i32, align 4
  %id.addr = alloca %struct.copy_body_data*, align 8
  %old_r = alloca %struct.eh_region_d*, align 8
  %new_r = alloca %struct.eh_region_d*, align 8
  %slot = alloca i8**, align 8
  store i32 %old_nr, i32* %old_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %old_nr.addr, metadata !10699, metadata !DIExpression()), !dbg !10700
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !10701, metadata !DIExpression()), !dbg !10702
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %old_r, metadata !10703, metadata !DIExpression()), !dbg !10704
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_r, metadata !10705, metadata !DIExpression()), !dbg !10706
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !10707, metadata !DIExpression()), !dbg !10708
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10709
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 4, !dbg !10710
  %1 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !10710
  %2 = load i32, i32* %old_nr.addr, align 4, !dbg !10711
  %call = call %struct.eh_region_d* @get_eh_region_from_number_fn(%struct.function* %1, i32 %2), !dbg !10712
  store %struct.eh_region_d* %call, %struct.eh_region_d** %old_r, align 8, !dbg !10713
  %3 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !10714
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %3, i32 0, i32 11, !dbg !10715
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !10715
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r, align 8, !dbg !10716
  %6 = bitcast %struct.eh_region_d* %5 to i8*, !dbg !10716
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %4, i8* %6), !dbg !10717
  store i8** %call1, i8*** %slot, align 8, !dbg !10718
  %7 = load i8**, i8*** %slot, align 8, !dbg !10719
  %8 = load i8*, i8** %7, align 8, !dbg !10720
  %9 = bitcast i8* %8 to %struct.eh_region_d*, !dbg !10721
  store %struct.eh_region_d* %9, %struct.eh_region_d** %new_r, align 8, !dbg !10722
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !10723
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 3, !dbg !10724
  %11 = load i32, i32* %index, align 8, !dbg !10724
  ret i32 %11, !dbg !10725
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_resx_set_region(%union.gimple_statement_d* %gs, i32 %region) #0 !dbg !10726 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10729, metadata !DIExpression()), !dbg !10730
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !10731, metadata !DIExpression()), !dbg !10732
  %0 = load i32, i32* %region.addr, align 4, !dbg !10733
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10734
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !10735
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !10736
  store i32 %0, i32* %region1, align 8, !dbg !10737
  ret void, !dbg !10738
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %gs) #0 !dbg !10739 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10740, metadata !DIExpression()), !dbg !10741
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10742
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !10743
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !10744
  %1 = load i32, i32* %region, align 8, !dbg !10744
  ret i32 %1, !dbg !10745
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %gs, i32 %region) #0 !dbg !10746 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10747, metadata !DIExpression()), !dbg !10748
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !10749, metadata !DIExpression()), !dbg !10750
  %0 = load i32, i32* %region.addr, align 4, !dbg !10751
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10752
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !10753
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !10754
  store i32 %0, i32* %region1, align 8, !dbg !10755
  ret void, !dbg !10756
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !10757 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10758, metadata !DIExpression()), !dbg !10759
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10760
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !10761
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !10762
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !10762
  ret %union.tree_node* %1, !dbg !10763
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) #0 !dbg !10764 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10767, metadata !DIExpression()), !dbg !10768
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !10769, metadata !DIExpression()), !dbg !10770
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !10771
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10772
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !10773
  %block1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !10774
  store %union.tree_node* %0, %union.tree_node** %block1, align 8, !dbg !10775
  ret void, !dbg !10776
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !10777 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10780, metadata !DIExpression()), !dbg !10781
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !10782, metadata !DIExpression()), !dbg !10783
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10784
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10786
  %tobool = icmp ne i8 %call, 0, !dbg !10786
  br i1 %tobool, label %if.then, label %if.else, !dbg !10787

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10788
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !10790
  %2 = load i32, i32* %i.addr, align 4, !dbg !10791
  %idx.ext = zext i32 %2 to i64, !dbg !10792
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !10792
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !10793
  br label %return, !dbg !10793

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !10794
  br label %return, !dbg !10794

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !10795
  ret %union.tree_node** %3, !dbg !10795
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !10796 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10797, metadata !DIExpression()), !dbg !10798
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10799
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10800
  %cmp = icmp uge i32 %call, 6, !dbg !10801
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10802

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10803
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !10804
  %cmp2 = icmp ule i32 %call1, 9, !dbg !10805
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !10806
  %land.ext = zext i1 %2 to i32, !dbg !10802
  %conv = trunc i32 %land.ext to i8, !dbg !10800
  ret i8 %conv, !dbg !10807
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vdef(%union.gimple_statement_d* %g, %union.tree_node* %vdef) #0 !dbg !10808 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vdef.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10809, metadata !DIExpression()), !dbg !10810
  store %union.tree_node* %vdef, %union.tree_node** %vdef.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vdef.addr, metadata !10811, metadata !DIExpression()), !dbg !10812
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10813
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10813
  %tobool = icmp ne i8 %call, 0, !dbg !10813
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10813

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10813
  br label %cond.end, !dbg !10813

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10813

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10813
  %1 = load %union.tree_node*, %union.tree_node** %vdef.addr, align 8, !dbg !10814
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10815
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10816
  %vdef1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !10817
  store %union.tree_node* %1, %union.tree_node** %vdef1, align 8, !dbg !10818
  ret void, !dbg !10819
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) #0 !dbg !10820 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10821, metadata !DIExpression()), !dbg !10822
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !10823, metadata !DIExpression()), !dbg !10824
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10825
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10825
  %tobool = icmp ne i8 %call, 0, !dbg !10825
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10825

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10825
  br label %cond.end, !dbg !10825

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10825
  %1 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !10826
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10827
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10828
  %vuse1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10829
  store %union.tree_node* %1, %union.tree_node** %vuse1, align 8, !dbg !10830
  ret void, !dbg !10831
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %gs) #0 !dbg !10832 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10833, metadata !DIExpression()), !dbg !10834
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10835
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !10836
  %block = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !10837
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !10837
  ret %union.tree_node* %1, !dbg !10838
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %gs) #0 !dbg !10839 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10840, metadata !DIExpression()), !dbg !10841
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10842
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !10843
  %vars = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 1, !dbg !10844
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !10844
  ret %union.tree_node* %1, !dbg !10845
}

declare dso_local %union.gimple_statement_d* @gimple_build_bind(%union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !10846 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10847, metadata !DIExpression()), !dbg !10848
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10849
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10850
  %cmp = icmp eq i32 %call, 2, !dbg !10851
  %conv = zext i1 %cmp to i32, !dbg !10851
  %conv1 = trunc i32 %conv to i8, !dbg !10850
  ret i8 %conv1, !dbg !10852
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !10853 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10854, metadata !DIExpression()), !dbg !10855
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !10856, metadata !DIExpression()), !dbg !10857
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !10858, metadata !DIExpression()), !dbg !10859
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10860
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10860
  %conv = zext i8 %call to i32, !dbg !10860
  %tobool = icmp ne i32 %conv, 0, !dbg !10860
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !10860

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !10860
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10860
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !10860
  %cmp = icmp ult i32 %1, %call1, !dbg !10860
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10860

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10860
  br label %cond.end, !dbg !10860

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10860
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !10861
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10862
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !10863
  %5 = load i32, i32* %i.addr, align 4, !dbg !10864
  %idxprom = zext i32 %5 to i64, !dbg !10863
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !10863
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !10865
  ret void, !dbg !10866
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !10867 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10868, metadata !DIExpression()), !dbg !10869
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10870
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10871
  %cmp = icmp uge i32 %call, 1, !dbg !10872
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10873

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10874
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !10875
  %cmp2 = icmp ule i32 %call1, 9, !dbg !10876
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !10877
  %land.ext = zext i1 %2 to i32, !dbg !10873
  %conv = trunc i32 %land.ext to i8, !dbg !10871
  ret i8 %conv, !dbg !10878
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !10879 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10880, metadata !DIExpression()), !dbg !10881
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10882
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !10883
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !10884
  %1 = load i32, i32* %num_ops, align 4, !dbg !10884
  ret i32 %1, !dbg !10885
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !10886 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10889, metadata !DIExpression()), !dbg !10890
  call void @llvm.dbg.declare(metadata i64* %off, metadata !10891, metadata !DIExpression()), !dbg !10892
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10893
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !10894
  %idxprom = zext i32 %call to i64, !dbg !10895
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !10895
  %1 = load i64, i64* %arrayidx, align 8, !dbg !10895
  store i64 %1, i64* %off, align 8, !dbg !10896
  %2 = load i64, i64* %off, align 8, !dbg !10897
  %cmp = icmp ne i64 %2, 0, !dbg !10897
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10897

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10897
  br label %cond.end, !dbg !10897

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10897

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10897
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10898
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !10899
  %5 = load i64, i64* %off, align 8, !dbg !10900
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !10901
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !10902
  ret %union.tree_node** %6, !dbg !10903
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !10904 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10907, metadata !DIExpression()), !dbg !10908
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10909
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10910
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !10911
  ret i32 %call1, !dbg !10912
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !10913 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10916, metadata !DIExpression()), !dbg !10917
  %0 = load i32, i32* %code.addr, align 4, !dbg !10918
  %idxprom = zext i32 %0 to i64, !dbg !10919
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !10919
  %1 = load i32, i32* %arrayidx, align 4, !dbg !10919
  ret i32 %1, !dbg !10920
}

declare dso_local %struct.eh_region_d* @get_eh_region_from_number_fn(%struct.function*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @inline_forbidden_p_stmt(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wip) #0 !dbg !10921 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wip.addr = alloca %struct.walk_stmt_info*, align 8
  %fn = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !10922, metadata !DIExpression()), !dbg !10923
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !10924, metadata !DIExpression()), !dbg !10925
  store %struct.walk_stmt_info* %wip, %struct.walk_stmt_info** %wip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wip.addr, metadata !10926, metadata !DIExpression()), !dbg !10927
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !10928, metadata !DIExpression()), !dbg !10929
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wip.addr, align 8, !dbg !10930
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !10931
  %1 = load i8*, i8** %info, align 8, !dbg !10931
  %2 = bitcast i8* %1 to %union.tree_node*, !dbg !10932
  store %union.tree_node* %2, %union.tree_node** %fn, align 8, !dbg !10929
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10933, metadata !DIExpression()), !dbg !10934
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10935, metadata !DIExpression()), !dbg !10936
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !10937
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !10938
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !10936
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10939
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !10940
  switch i32 %call1, label %sw.default32 [
    i32 8, label %sw.bb
    i32 3, label %sw.bb24
  ], !dbg !10941

sw.bb:                                            ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10942
  %call2 = call zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d* %5), !dbg !10945
  %conv = zext i8 %call2 to i32, !dbg !10945
  %tobool = icmp ne i32 %conv, 0, !dbg !10945
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10946

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !10947
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !10947
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !10947
  %7 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !10947
  %call3 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %7), !dbg !10948
  %tobool4 = icmp ne %union.tree_node* %call3, null, !dbg !10948
  br i1 %tobool4, label %if.end, label %if.then, !dbg !10949

if.then:                                          ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.8, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !10950
  %8 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !10952
  store i8 1, i8* %8, align 1, !dbg !10953
  %9 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !10954
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !10955
  br label %return, !dbg !10955

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10956
  %call5 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %10), !dbg !10957
  store %union.tree_node* %call5, %union.tree_node** %t, align 8, !dbg !10958
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10959
  %cmp = icmp eq %union.tree_node* %11, null, !dbg !10961
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !10962

if.then7:                                         ; preds = %if.end
  br label %sw.epilog33, !dbg !10963

if.end8:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10964
  %call9 = call i32 @setjmp_call_p(%union.tree_node* %12), !dbg !10966
  %tobool10 = icmp ne i32 %call9, 0, !dbg !10966
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !10967

if.then11:                                        ; preds = %if.end8
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.9, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !10968
  %13 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !10970
  store i8 1, i8* %13, align 1, !dbg !10971
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10972
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !10973
  br label %return, !dbg !10973

if.end12:                                         ; preds = %if.end8
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10974
  %function_decl = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !10974
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !10974
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !10974
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !10974
  %bf.clear = and i32 %bf.lshr, 3, !dbg !10974
  %cmp13 = icmp eq i32 %bf.clear, 3, !dbg !10976
  br i1 %cmp13, label %if.then15, label %if.end23, !dbg !10977

if.then15:                                        ; preds = %if.end12
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10978
  %function_decl16 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !10978
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl16, i32 0, i32 5, !dbg !10978
  %bf.load17 = load i32, i32* %function_code, align 8, !dbg !10978
  %bf.clear18 = and i32 %bf.load17, 2047, !dbg !10978
  switch i32 %bf.clear18, label %sw.default [
    i32 515, label %sw.bb19
    i32 492, label %sw.bb19
    i32 514, label %sw.bb19
    i32 490, label %sw.bb20
    i32 522, label %sw.bb21
    i32 503, label %sw.bb22
    i32 417, label %sw.bb22
  ], !dbg !10979

sw.bb19:                                          ; preds = %if.then15, %if.then15, %if.then15
  store i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.10, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !10980
  %17 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !10982
  store i8 1, i8* %17, align 1, !dbg !10983
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10984
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !10985
  br label %return, !dbg !10985

sw.bb20:                                          ; preds = %if.then15
  store i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.11, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !10986
  %19 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !10987
  store i8 1, i8* %19, align 1, !dbg !10988
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10989
  store %union.tree_node* %20, %union.tree_node** %retval, align 8, !dbg !10990
  br label %return, !dbg !10990

sw.bb21:                                          ; preds = %if.then15
  store i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.12, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !10991
  %21 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !10992
  store i8 1, i8* %21, align 1, !dbg !10993
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10994
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !10995
  br label %return, !dbg !10995

sw.bb22:                                          ; preds = %if.then15, %if.then15
  store i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.13, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !10996
  %23 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !10997
  store i8 1, i8* %23, align 1, !dbg !10998
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10999
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !11000
  br label %return, !dbg !11000

sw.default:                                       ; preds = %if.then15
  br label %sw.epilog, !dbg !11001

sw.epilog:                                        ; preds = %sw.default
  br label %if.end23, !dbg !11002

if.end23:                                         ; preds = %sw.epilog, %if.end12
  br label %sw.epilog33, !dbg !11003

sw.bb24:                                          ; preds = %entry
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11004
  %call25 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %25), !dbg !11005
  store %union.tree_node* %call25, %union.tree_node** %t, align 8, !dbg !11006
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11007
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !11007
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !11007
  %bf.load26 = load i64, i64* %27, align 8, !dbg !11007
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !11007
  %bf.cast = trunc i64 %bf.clear27 to i32, !dbg !11007
  %cmp28 = icmp ne i32 %bf.cast, 30, !dbg !11009
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !11010

if.then30:                                        ; preds = %sw.bb24
  store i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.14, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !11011
  %28 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !11013
  store i8 1, i8* %28, align 1, !dbg !11014
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11015
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !11016
  br label %return, !dbg !11016

if.end31:                                         ; preds = %sw.bb24
  br label %sw.epilog33, !dbg !11017

sw.default32:                                     ; preds = %entry
  br label %sw.epilog33, !dbg !11018

sw.epilog33:                                      ; preds = %sw.default32, %if.end31, %if.end23, %if.then7
  %30 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !11019
  store i8 0, i8* %30, align 1, !dbg !11020
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11021
  br label %return, !dbg !11021

return:                                           ; preds = %sw.epilog33, %if.then30, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %if.then11, %if.then
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11022
  ret %union.tree_node* %31, !dbg !11022
}

declare dso_local zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d*) #2

declare dso_local i32 @setjmp_call_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) #0 !dbg !11023 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11024, metadata !DIExpression()), !dbg !11025
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11026
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !11027
  ret %union.tree_node* %call, !dbg !11028
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !11029 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11030, metadata !DIExpression()), !dbg !11031
  call void @llvm.dbg.declare(metadata i32* %code, metadata !11032, metadata !DIExpression()), !dbg !11033
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11034
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !11035
  store i32 %call, i32* %code, align 4, !dbg !11033
  %1 = load i32, i32* %code, align 4, !dbg !11036
  %cmp = icmp eq i32 %1, 6, !dbg !11038
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !11039

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !11040
  %cmp1 = icmp eq i32 %2, 1, !dbg !11041
  br i1 %cmp1, label %if.then, label %if.else, !dbg !11042

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11043
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !11044
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !11045
  %bf.load = load i32, i32* %4, align 8, !dbg !11045
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11045
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !11046
  br label %return, !dbg !11046

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !11047
  %cmp2 = icmp eq i32 %5, 8, !dbg !11049
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !11050

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !11051
  br label %return, !dbg !11051

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11052
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !11053
  br label %return, !dbg !11053

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !11054
  ret i32 %6, !dbg !11054
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !11055 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11056, metadata !DIExpression()), !dbg !11057
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11058
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !11059
  %cmp = icmp eq i32 %call, 8, !dbg !11060
  %conv = zext i1 %cmp to i32, !dbg !11060
  %conv1 = trunc i32 %conv to i8, !dbg !11059
  ret i8 %conv1, !dbg !11061
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expand_call_inline(%struct.basic_block_def* %bb, %union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) #0 !dbg !11062 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %use_retvar = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %st = alloca %struct.pointer_map_t*, align 8
  %dst = alloca %struct.pointer_map_t*, align 8
  %return_slot = alloca %union.tree_node*, align 8
  %modify_dest = alloca %union.tree_node*, align 8
  %saved_location = alloca i32, align 4
  %cg_edge = alloca %struct.cgraph_edge*, align 8
  %reason = alloca i32, align 4
  %return_block = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %successfully_inlined = alloca i8, align 1
  %purge_dead_abnormal_edges = alloca i8, align 1
  %t_step = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.expanded_location, align 8
  %tmp117 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp118 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp124 = alloca %struct.gimple_stmt_iterator, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %old_stmt = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %var300 = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11065, metadata !DIExpression()), !dbg !11066
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11067, metadata !DIExpression()), !dbg !11068
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !11069, metadata !DIExpression()), !dbg !11070
  call void @llvm.dbg.declare(metadata %union.tree_node** %use_retvar, metadata !11071, metadata !DIExpression()), !dbg !11072
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !11073, metadata !DIExpression()), !dbg !11074
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %st, metadata !11075, metadata !DIExpression()), !dbg !11076
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %dst, metadata !11077, metadata !DIExpression()), !dbg !11078
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_slot, metadata !11079, metadata !DIExpression()), !dbg !11080
  call void @llvm.dbg.declare(metadata %union.tree_node** %modify_dest, metadata !11081, metadata !DIExpression()), !dbg !11082
  call void @llvm.dbg.declare(metadata i32* %saved_location, metadata !11083, metadata !DIExpression()), !dbg !11084
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cg_edge, metadata !11085, metadata !DIExpression()), !dbg !11086
  call void @llvm.dbg.declare(metadata i32* %reason, metadata !11087, metadata !DIExpression()), !dbg !11088
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %return_block, metadata !11089, metadata !DIExpression()), !dbg !11090
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !11091, metadata !DIExpression()), !dbg !11092
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11093, metadata !DIExpression()), !dbg !11094
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %stmt_gsi, metadata !11095, metadata !DIExpression()), !dbg !11096
  call void @llvm.dbg.declare(metadata i8* %successfully_inlined, metadata !11097, metadata !DIExpression()), !dbg !11098
  store i8 0, i8* %successfully_inlined, align 1, !dbg !11098
  call void @llvm.dbg.declare(metadata i8* %purge_dead_abnormal_edges, metadata !11099, metadata !DIExpression()), !dbg !11100
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_step, metadata !11101, metadata !DIExpression()), !dbg !11102
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !11103, metadata !DIExpression()), !dbg !11104
  %0 = load i32, i32* @input_location, align 4, !dbg !11105
  store i32 %0, i32* %saved_location, align 4, !dbg !11106
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11107
  %call = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %1), !dbg !11109
  %tobool = icmp ne i8 %call, 0, !dbg !11109
  br i1 %tobool, label %if.then, label %if.end, !dbg !11110

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11111
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %2), !dbg !11112
  store i32 %call1, i32* @input_location, align 4, !dbg !11113
  br label %if.end, !dbg !11114

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11115
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !11117
  %cmp = icmp ne i32 %call2, 8, !dbg !11118
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !11119

if.then3:                                         ; preds = %if.end
  br label %egress, !dbg !11120

if.end4:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11121
  %call5 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %4), !dbg !11122
  store %union.tree_node* %call5, %union.tree_node** %fn, align 8, !dbg !11123
  %5 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11124
  %tobool6 = icmp ne %union.tree_node* %5, null, !dbg !11124
  br i1 %tobool6, label %if.end12, label %if.then7, !dbg !11126

if.then7:                                         ; preds = %if.end4
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11127
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %6, i32 0, i32 3, !dbg !11129
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !11129
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11130
  %call8 = call %union.tree_node* @get_indirect_callee_fndecl(%struct.cgraph_node* %7, %union.gimple_statement_d* %8), !dbg !11131
  store %union.tree_node* %call8, %union.tree_node** %fn, align 8, !dbg !11132
  %9 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11133
  %tobool9 = icmp ne %union.tree_node* %9, null, !dbg !11133
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !11135

if.then10:                                        ; preds = %if.then7
  br label %egress, !dbg !11136

if.end11:                                         ; preds = %if.then7
  br label %if.end12, !dbg !11137

if.end12:                                         ; preds = %if.end11, %if.end4
  %10 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11138
  %call13 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %10), !dbg !11139
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call13, i32 0, i32 0, !dbg !11140
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11140
  store %union.tree_node* %11, %union.tree_node** %fn, align 8, !dbg !11141
  %12 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11142
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !11142
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !11142
  %13 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !11142
  %tobool14 = icmp ne %union.tree_node* %13, null, !dbg !11142
  br i1 %tobool14, label %if.end25, label %land.lhs.true, !dbg !11144

land.lhs.true:                                    ; preds = %if.end12
  %14 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11145
  %decl_common15 = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !11145
  %abstract_origin = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common15, i32 0, i32 7, !dbg !11145
  %15 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !11145
  %tobool16 = icmp ne %union.tree_node* %15, null, !dbg !11145
  br i1 %tobool16, label %land.lhs.true17, label %if.end25, !dbg !11146

land.lhs.true17:                                  ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11147
  %decl_common18 = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !11147
  %abstract_origin19 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 7, !dbg !11147
  %17 = load %union.tree_node*, %union.tree_node** %abstract_origin19, align 8, !dbg !11147
  %call20 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %17), !dbg !11148
  %conv = zext i8 %call20 to i32, !dbg !11148
  %tobool21 = icmp ne i32 %conv, 0, !dbg !11148
  br i1 %tobool21, label %if.then22, label %if.end25, !dbg !11149

if.then22:                                        ; preds = %land.lhs.true17
  %18 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11150
  %decl_common23 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !11150
  %abstract_origin24 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common23, i32 0, i32 7, !dbg !11150
  %19 = load %union.tree_node*, %union.tree_node** %abstract_origin24, align 8, !dbg !11150
  store %union.tree_node* %19, %union.tree_node** %fn, align 8, !dbg !11151
  br label %if.end25, !dbg !11152

if.end25:                                         ; preds = %if.then22, %land.lhs.true17, %land.lhs.true, %if.end12
  %20 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11153
  %dst_node26 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %20, i32 0, i32 3, !dbg !11155
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node26, align 8, !dbg !11155
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 27, !dbg !11156
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !11156
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !11156
  %bf.clear = and i16 %bf.lshr, 1, !dbg !11156
  %bf.cast = zext i16 %bf.clear to i32, !dbg !11156
  %tobool27 = icmp ne i32 %bf.cast, 0, !dbg !11153
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !11157

if.then28:                                        ; preds = %if.end25
  br label %egress, !dbg !11158

if.end29:                                         ; preds = %if.end25
  %22 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11159
  %dst_node30 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %22, i32 0, i32 3, !dbg !11160
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node30, align 8, !dbg !11160
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11161
  %call31 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %23, %union.gimple_statement_d* %24), !dbg !11162
  store %struct.cgraph_edge* %call31, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11163
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11164
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %25, i32 0, i32 1, !dbg !11164
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !11164
  %decl32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 0, !dbg !11164
  %27 = load %union.tree_node*, %union.tree_node** %decl32, align 8, !dbg !11164
  %function_decl = bitcast %union.tree_node* %27 to %struct.tree_function_decl*, !dbg !11164
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 2, !dbg !11164
  %28 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !11164
  %tobool33 = icmp ne %union.tree_node* %28, null, !dbg !11164
  br i1 %tobool33, label %land.lhs.true34, label %if.end51, !dbg !11166

land.lhs.true34:                                  ; preds = %if.end29
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11167
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 2, !dbg !11167
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !11167
  %decl35 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 0, !dbg !11167
  %31 = load %union.tree_node*, %union.tree_node** %decl35, align 8, !dbg !11167
  %function_decl36 = bitcast %union.tree_node* %31 to %struct.tree_function_decl*, !dbg !11167
  %personality37 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl36, i32 0, i32 2, !dbg !11167
  %32 = load %union.tree_node*, %union.tree_node** %personality37, align 8, !dbg !11167
  %tobool38 = icmp ne %union.tree_node* %32, null, !dbg !11167
  br i1 %tobool38, label %land.lhs.true39, label %if.end51, !dbg !11168

land.lhs.true39:                                  ; preds = %land.lhs.true34
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11169
  %caller40 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %33, i32 0, i32 1, !dbg !11169
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %caller40, align 8, !dbg !11169
  %decl41 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 0, !dbg !11169
  %35 = load %union.tree_node*, %union.tree_node** %decl41, align 8, !dbg !11169
  %function_decl42 = bitcast %union.tree_node* %35 to %struct.tree_function_decl*, !dbg !11169
  %personality43 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl42, i32 0, i32 2, !dbg !11169
  %36 = load %union.tree_node*, %union.tree_node** %personality43, align 8, !dbg !11169
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11170
  %callee44 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %37, i32 0, i32 2, !dbg !11170
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %callee44, align 8, !dbg !11170
  %decl45 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %38, i32 0, i32 0, !dbg !11170
  %39 = load %union.tree_node*, %union.tree_node** %decl45, align 8, !dbg !11170
  %function_decl46 = bitcast %union.tree_node* %39 to %struct.tree_function_decl*, !dbg !11170
  %personality47 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl46, i32 0, i32 2, !dbg !11170
  %40 = load %union.tree_node*, %union.tree_node** %personality47, align 8, !dbg !11170
  %cmp48 = icmp ne %union.tree_node* %36, %40, !dbg !11171
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !11172

if.then50:                                        ; preds = %land.lhs.true39
  br label %egress, !dbg !11173

if.end51:                                         ; preds = %land.lhs.true39, %land.lhs.true34, %if.end29
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11174
  %call52 = call zeroext i8 @cgraph_inline_p(%struct.cgraph_edge* %41, i32* %reason), !dbg !11176
  %tobool53 = icmp ne i8 %call52, 0, !dbg !11176
  br i1 %tobool53, label %if.end97, label %if.then54, !dbg !11177

if.then54:                                        ; preds = %if.end51
  %42 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11178
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %42, i32 0, i32 14, !dbg !11181
  %bf.load55 = load i8, i8* %indirect_call, align 2, !dbg !11181
  %bf.clear56 = and i8 %bf.load55, 1, !dbg !11181
  %bf.cast57 = zext i8 %bf.clear56 to i32, !dbg !11181
  %tobool58 = icmp ne i32 %bf.cast57, 0, !dbg !11178
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !11182

if.then59:                                        ; preds = %if.then54
  br label %egress, !dbg !11183

if.end60:                                         ; preds = %if.then54
  %43 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11184
  %decl_common61 = bitcast %union.tree_node* %43 to %struct.tree_decl_common*, !dbg !11184
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common61, i32 0, i32 6, !dbg !11184
  %44 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !11184
  %call62 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %44), !dbg !11186
  %tobool63 = icmp ne %union.tree_node* %call62, null, !dbg !11186
  br i1 %tobool63, label %land.lhs.true64, label %if.else, !dbg !11187

land.lhs.true64:                                  ; preds = %if.end60
  %45 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !11188
  %conv65 = zext i8 %45 to i32, !dbg !11188
  %tobool66 = icmp ne i32 %conv65, 0, !dbg !11188
  br i1 %tobool66, label %if.then67, label %if.else, !dbg !11189

if.then67:                                        ; preds = %land.lhs.true64
  %46 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11190
  %47 = load i32, i32* %reason, align 4, !dbg !11192
  %call68 = call i8* @cgraph_inline_failed_string(i32 %47), !dbg !11193
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0), %union.tree_node* %46, i8* %call68), !dbg !11194
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0)), !dbg !11195
  br label %if.end96, !dbg !11196

if.else:                                          ; preds = %land.lhs.true64, %if.end60
  %48 = load i32, i32* @warn_inline, align 4, !dbg !11197
  %tobool69 = icmp ne i32 %48, 0, !dbg !11197
  br i1 %tobool69, label %land.lhs.true70, label %if.end95, !dbg !11199

land.lhs.true70:                                  ; preds = %if.else
  %49 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11200
  %function_decl71 = bitcast %union.tree_node* %49 to %struct.tree_function_decl*, !dbg !11200
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl71, i32 0, i32 5, !dbg !11200
  %bf.load72 = load i32, i32* %declared_inline_flag, align 8, !dbg !11200
  %bf.lshr73 = lshr i32 %bf.load72, 21, !dbg !11200
  %bf.clear74 = and i32 %bf.lshr73, 1, !dbg !11200
  %tobool75 = icmp ne i32 %bf.clear74, 0, !dbg !11200
  br i1 %tobool75, label %land.lhs.true76, label %if.end95, !dbg !11201

land.lhs.true76:                                  ; preds = %land.lhs.true70
  %50 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11202
  %decl_minimal = bitcast %union.tree_node* %50 to %struct.tree_decl_minimal*, !dbg !11202
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !11202
  %51 = load i32, i32* %locus, align 8, !dbg !11202
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %51), !dbg !11202
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 3, !dbg !11202
  %52 = load i8, i8* %sysp, align 8, !dbg !11202
  %conv77 = zext i8 %52 to i32, !dbg !11202
  %cmp78 = icmp ne i32 %conv77, 0, !dbg !11202
  br i1 %cmp78, label %if.end95, label %land.lhs.true80, !dbg !11203

land.lhs.true80:                                  ; preds = %land.lhs.true76
  %53 = load i32, i32* %reason, align 4, !dbg !11204
  %cmp81 = icmp ne i32 %53, 1, !dbg !11205
  br i1 %cmp81, label %land.lhs.true83, label %if.end95, !dbg !11206

land.lhs.true83:                                  ; preds = %land.lhs.true80
  %54 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11207
  %decl_common84 = bitcast %union.tree_node* %54 to %struct.tree_decl_common*, !dbg !11207
  %attributes85 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common84, i32 0, i32 6, !dbg !11207
  %55 = load %union.tree_node*, %union.tree_node** %attributes85, align 8, !dbg !11207
  %call86 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0), %union.tree_node* %55), !dbg !11208
  %tobool87 = icmp ne %union.tree_node* %call86, null, !dbg !11208
  br i1 %tobool87, label %if.end95, label %land.lhs.true88, !dbg !11209

land.lhs.true88:                                  ; preds = %land.lhs.true83
  %56 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !11210
  %conv89 = zext i8 %56 to i32, !dbg !11210
  %tobool90 = icmp ne i32 %conv89, 0, !dbg !11210
  br i1 %tobool90, label %if.then91, label %if.end95, !dbg !11211

if.then91:                                        ; preds = %land.lhs.true88
  %57 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11212
  %58 = load i32, i32* %reason, align 4, !dbg !11214
  %call92 = call i8* @cgraph_inline_failed_string(i32 %58), !dbg !11215
  %call93 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0), %union.tree_node* %57, i8* %call92), !dbg !11216
  %call94 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0)), !dbg !11217
  br label %if.end95, !dbg !11218

if.end95:                                         ; preds = %if.then91, %land.lhs.true88, %land.lhs.true83, %land.lhs.true80, %land.lhs.true76, %land.lhs.true70, %if.else
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then67
  br label %egress, !dbg !11219

if.end97:                                         ; preds = %if.end51
  %59 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11220
  %callee98 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %59, i32 0, i32 2, !dbg !11221
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %callee98, align 8, !dbg !11221
  %decl99 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %60, i32 0, i32 0, !dbg !11222
  %61 = load %union.tree_node*, %union.tree_node** %decl99, align 8, !dbg !11222
  store %union.tree_node* %61, %union.tree_node** %fn, align 8, !dbg !11223
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11224
  %call100 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %62), !dbg !11225
  %63 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11226
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %63, i32 0, i32 10, !dbg !11227
  store i32 %call100, i32* %eh_lp_nr, align 8, !dbg !11228
  %64 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11229
  %callee101 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %64, i32 0, i32 2, !dbg !11229
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %callee101, align 8, !dbg !11229
  %decl102 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %65, i32 0, i32 0, !dbg !11229
  %66 = load %union.tree_node*, %union.tree_node** %decl102, align 8, !dbg !11229
  %function_decl103 = bitcast %union.tree_node* %66 to %struct.tree_function_decl*, !dbg !11229
  %personality104 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl103, i32 0, i32 2, !dbg !11229
  %67 = load %union.tree_node*, %union.tree_node** %personality104, align 8, !dbg !11229
  %tobool105 = icmp ne %union.tree_node* %67, null, !dbg !11229
  br i1 %tobool105, label %if.then106, label %if.end115, !dbg !11231

if.then106:                                       ; preds = %if.end97
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11232
  %callee107 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %68, i32 0, i32 2, !dbg !11232
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %callee107, align 8, !dbg !11232
  %decl108 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 0, !dbg !11232
  %70 = load %union.tree_node*, %union.tree_node** %decl108, align 8, !dbg !11232
  %function_decl109 = bitcast %union.tree_node* %70 to %struct.tree_function_decl*, !dbg !11232
  %personality110 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl109, i32 0, i32 2, !dbg !11232
  %71 = load %union.tree_node*, %union.tree_node** %personality110, align 8, !dbg !11232
  %72 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11233
  %caller111 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %72, i32 0, i32 1, !dbg !11233
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %caller111, align 8, !dbg !11233
  %decl112 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %73, i32 0, i32 0, !dbg !11233
  %74 = load %union.tree_node*, %union.tree_node** %decl112, align 8, !dbg !11233
  %function_decl113 = bitcast %union.tree_node* %74 to %struct.tree_function_decl*, !dbg !11233
  %personality114 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl113, i32 0, i32 2, !dbg !11233
  store %union.tree_node* %71, %union.tree_node** %personality114, align 8, !dbg !11234
  br label %if.end115, !dbg !11233

if.end115:                                        ; preds = %if.then106, %if.end97
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11235
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11236
  %77 = bitcast %union.gimple_statement_d* %76 to i8*, !dbg !11236
  %call116 = call %struct.edge_def* @split_block(%struct.basic_block_def* %75, i8* %77), !dbg !11237
  store %struct.edge_def* %call116, %struct.edge_def** %e, align 8, !dbg !11238
  %78 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11239
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 0, !dbg !11240
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !11240
  store %struct.basic_block_def* %79, %struct.basic_block_def** %bb.addr, align 8, !dbg !11241
  %80 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11242
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 1, !dbg !11243
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !11243
  store %struct.basic_block_def* %81, %struct.basic_block_def** %return_block, align 8, !dbg !11244
  %82 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11245
  call void @remove_edge(%struct.edge_def* %82), !dbg !11246
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11247
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp117, %struct.basic_block_def* %83), !dbg !11248
  %84 = bitcast %struct.gimple_stmt_iterator* %stmt_gsi to i8*, !dbg !11248
  %85 = bitcast %struct.gimple_stmt_iterator* %tmp117 to i8*, !dbg !11248
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 24, i1 false), !dbg !11248
  call void @gsi_remove(%struct.gimple_stmt_iterator* %stmt_gsi, i8 zeroext 0), !dbg !11249
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %return_block, align 8, !dbg !11250
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp118, %struct.basic_block_def* %86), !dbg !11251
  %87 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11251
  %88 = bitcast %struct.gimple_stmt_iterator* %tmp118 to i8*, !dbg !11251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 24, i1 false), !dbg !11251
  %call119 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11252
  %tobool120 = icmp ne i8 %call119, 0, !dbg !11252
  br i1 %tobool120, label %if.then121, label %if.else122, !dbg !11254

if.then121:                                       ; preds = %if.end115
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11255
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %89, i32 0), !dbg !11257
  store i8 1, i8* %purge_dead_abnormal_edges, align 1, !dbg !11258
  br label %if.end123, !dbg !11259

if.else122:                                       ; preds = %if.end115
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11260
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %90, i32 0), !dbg !11262
  store i8 0, i8* %purge_dead_abnormal_edges, align 1, !dbg !11263
  br label %if.end123

if.end123:                                        ; preds = %if.else122, %if.then121
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %return_block, align 8, !dbg !11264
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp124, %struct.basic_block_def* %91), !dbg !11265
  %92 = bitcast %struct.gimple_stmt_iterator* %stmt_gsi to i8*, !dbg !11265
  %93 = bitcast %struct.gimple_stmt_iterator* %tmp124 to i8*, !dbg !11265
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false), !dbg !11265
  %call125 = call %union.tree_node* @make_node_stat(i32 4), !dbg !11266
  %94 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11267
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %94, i32 0, i32 8, !dbg !11268
  store %union.tree_node* %call125, %union.tree_node** %block, align 8, !dbg !11269
  %95 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11270
  %96 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11271
  %block126 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %96, i32 0, i32 8, !dbg !11271
  %97 = load %union.tree_node*, %union.tree_node** %block126, align 8, !dbg !11271
  %block127 = bitcast %union.tree_node* %97 to %struct.tree_block*, !dbg !11271
  %abstract_origin128 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block127, i32 0, i32 7, !dbg !11271
  store %union.tree_node* %95, %union.tree_node** %abstract_origin128, align 8, !dbg !11272
  %98 = load i32, i32* @input_location, align 4, !dbg !11273
  %99 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11274
  %block129 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %99, i32 0, i32 8, !dbg !11274
  %100 = load %union.tree_node*, %union.tree_node** %block129, align 8, !dbg !11274
  %block130 = bitcast %union.tree_node* %100 to %struct.tree_block*, !dbg !11274
  %locus131 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block130, i32 0, i32 2, !dbg !11274
  store i32 %98, i32* %locus131, align 4, !dbg !11275
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11276
  %call132 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %101), !dbg !11277
  %102 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11278
  %block133 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %102, i32 0, i32 8, !dbg !11279
  %103 = load %union.tree_node*, %union.tree_node** %block133, align 8, !dbg !11279
  call void @prepend_lexical_block(%union.tree_node* %call132, %union.tree_node* %103), !dbg !11280
  %104 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11281
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %104, i32 0, i32 6, !dbg !11282
  %105 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !11282
  store %struct.pointer_map_t* %105, %struct.pointer_map_t** %st, align 8, !dbg !11283
  %call134 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !11284
  %106 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11285
  %decl_map135 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %106, i32 0, i32 6, !dbg !11286
  store %struct.pointer_map_t* %call134, %struct.pointer_map_t** %decl_map135, align 8, !dbg !11287
  %107 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11288
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %107, i32 0, i32 22, !dbg !11289
  %108 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !11289
  store %struct.pointer_map_t* %108, %struct.pointer_map_t** %dst, align 8, !dbg !11290
  %109 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11291
  %debug_map136 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %109, i32 0, i32 22, !dbg !11292
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map136, align 8, !dbg !11293
  %110 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11294
  %111 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11295
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %111, i32 0, i32 0, !dbg !11296
  store %union.tree_node* %110, %union.tree_node** %src_fn, align 8, !dbg !11297
  %112 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11298
  %callee137 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %112, i32 0, i32 2, !dbg !11299
  %113 = load %struct.cgraph_node*, %struct.cgraph_node** %callee137, align 8, !dbg !11299
  %114 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11300
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %114, i32 0, i32 2, !dbg !11301
  store %struct.cgraph_node* %113, %struct.cgraph_node** %src_node, align 8, !dbg !11302
  %115 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11303
  %function_decl138 = bitcast %union.tree_node* %115 to %struct.tree_function_decl*, !dbg !11303
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl138, i32 0, i32 1, !dbg !11303
  %116 = load %struct.function*, %struct.function** %f, align 8, !dbg !11303
  %117 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11304
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %117, i32 0, i32 4, !dbg !11305
  store %struct.function* %116, %struct.function** %src_cfun, align 8, !dbg !11306
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11307
  %119 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11308
  %gimple_call = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %119, i32 0, i32 9, !dbg !11309
  store %union.gimple_statement_d* %118, %union.gimple_statement_d** %gimple_call, align 8, !dbg !11310
  %120 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11311
  %src_cfun139 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %120, i32 0, i32 4, !dbg !11311
  %121 = load %struct.function*, %struct.function** %src_cfun139, align 8, !dbg !11311
  %after_inlining = getelementptr inbounds %struct.function, %struct.function* %121, i32 0, i32 20, !dbg !11311
  %bf.load140 = load i32, i32* %after_inlining, align 8, !dbg !11311
  %bf.lshr141 = lshr i32 %bf.load140, 24, !dbg !11311
  %bf.clear142 = and i32 %bf.lshr141, 1, !dbg !11311
  %tobool143 = icmp ne i32 %bf.clear142, 0, !dbg !11311
  br i1 %tobool143, label %cond.true, label %cond.false, !dbg !11311

cond.true:                                        ; preds = %if.end123
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3635, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11311
  br label %cond.end, !dbg !11311

cond.false:                                       ; preds = %if.end123
  br label %cond.end, !dbg !11311

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11311
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11312
  %123 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11313
  %entry_bb = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %123, i32 0, i32 20, !dbg !11314
  store %struct.basic_block_def* %122, %struct.basic_block_def** %entry_bb, align 8, !dbg !11315
  %124 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11316
  %decl_common144 = bitcast %union.tree_node* %124 to %struct.tree_decl_common*, !dbg !11316
  %attributes145 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common144, i32 0, i32 6, !dbg !11316
  %125 = load %union.tree_node*, %union.tree_node** %attributes145, align 8, !dbg !11316
  %call146 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %union.tree_node* %125), !dbg !11318
  %tobool147 = icmp ne %union.tree_node* %call146, null, !dbg !11318
  br i1 %tobool147, label %if.then148, label %if.end150, !dbg !11319

if.then148:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !11320, metadata !DIExpression()), !dbg !11322
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11323
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %si, %struct.basic_block_def* %126), !dbg !11324
  %call149 = call %union.gimple_statement_d* @gimple_build_predict(i32 10, i32 0), !dbg !11325
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %call149, i32 0), !dbg !11326
  br label %if.end150, !dbg !11327

if.end150:                                        ; preds = %if.then148, %cond.end
  %127 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11328
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11329
  %129 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11330
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11331
  call void @initialize_inlined_parameters(%struct.copy_body_data* %127, %union.gimple_statement_d* %128, %union.tree_node* %129, %struct.basic_block_def* %130), !dbg !11332
  %131 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11333
  %decl_common151 = bitcast %union.tree_node* %131 to %struct.tree_decl_common*, !dbg !11333
  %initial152 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common151, i32 0, i32 5, !dbg !11333
  %132 = load %union.tree_node*, %union.tree_node** %initial152, align 8, !dbg !11333
  %tobool153 = icmp ne %union.tree_node* %132, null, !dbg !11333
  br i1 %tobool153, label %if.then154, label %if.end159, !dbg !11335

if.then154:                                       ; preds = %if.end150
  %133 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11336
  %block155 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %133, i32 0, i32 8, !dbg !11337
  %134 = load %union.tree_node*, %union.tree_node** %block155, align 8, !dbg !11337
  %135 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11338
  %decl_common156 = bitcast %union.tree_node* %135 to %struct.tree_decl_common*, !dbg !11338
  %initial157 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common156, i32 0, i32 5, !dbg !11338
  %136 = load %union.tree_node*, %union.tree_node** %initial157, align 8, !dbg !11338
  %137 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11339
  %call158 = call %union.tree_node* @remap_blocks(%union.tree_node* %136, %struct.copy_body_data* %137), !dbg !11340
  call void @prepend_lexical_block(%union.tree_node* %134, %union.tree_node* %call158), !dbg !11341
  br label %if.end159, !dbg !11341

if.end159:                                        ; preds = %if.then154, %if.end150
  %138 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11342
  %decl_common160 = bitcast %union.tree_node* %138 to %struct.tree_decl_common*, !dbg !11342
  %initial161 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common160, i32 0, i32 5, !dbg !11342
  %139 = load %union.tree_node*, %union.tree_node** %initial161, align 8, !dbg !11342
  %tobool162 = icmp ne %union.tree_node* %139, null, !dbg !11342
  br i1 %tobool162, label %cond.false164, label %cond.true163, !dbg !11342

cond.true163:                                     ; preds = %if.end159
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3652, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11342
  br label %cond.end165, !dbg !11342

cond.false164:                                    ; preds = %if.end159
  br label %cond.end165, !dbg !11342

cond.end165:                                      ; preds = %cond.false164, %cond.true163
  %cond166 = phi i32 [ 0, %cond.true163 ], [ 0, %cond.false164 ], !dbg !11342
  %140 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11343
  %decl_common167 = bitcast %union.tree_node* %140 to %struct.tree_decl_common*, !dbg !11343
  %initial168 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common167, i32 0, i32 5, !dbg !11343
  %141 = load %union.tree_node*, %union.tree_node** %initial168, align 8, !dbg !11343
  %base = bitcast %union.tree_node* %141 to %struct.tree_base*, !dbg !11343
  %142 = bitcast %struct.tree_base* %base to i64*, !dbg !11343
  %bf.load169 = load i64, i64* %142, align 8, !dbg !11343
  %bf.clear170 = and i64 %bf.load169, 65535, !dbg !11343
  %bf.cast171 = trunc i64 %bf.clear170 to i32, !dbg !11343
  %cmp172 = icmp eq i32 %bf.cast171, 4, !dbg !11343
  br i1 %cmp172, label %cond.false175, label %cond.true174, !dbg !11343

cond.true174:                                     ; preds = %cond.end165
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3653, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11343
  br label %cond.end176, !dbg !11343

cond.false175:                                    ; preds = %cond.end165
  br label %cond.end176, !dbg !11343

cond.end176:                                      ; preds = %cond.false175, %cond.true174
  %cond177 = phi i32 [ 0, %cond.true174 ], [ 0, %cond.false175 ], !dbg !11343
  store %union.tree_node* null, %union.tree_node** %return_slot, align 8, !dbg !11344
  %143 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11345
  %call178 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %143), !dbg !11347
  %tobool179 = icmp ne %union.tree_node* %call178, null, !dbg !11347
  br i1 %tobool179, label %if.then180, label %if.else197, !dbg !11348

if.then180:                                       ; preds = %cond.end176
  %144 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11349
  %call181 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %144), !dbg !11351
  store %union.tree_node* %call181, %union.tree_node** %modify_dest, align 8, !dbg !11352
  %145 = load %union.tree_node*, %union.tree_node** %modify_dest, align 8, !dbg !11353
  %base182 = bitcast %union.tree_node* %145 to %struct.tree_base*, !dbg !11353
  %146 = bitcast %struct.tree_base* %base182 to i64*, !dbg !11353
  %bf.load183 = load i64, i64* %146, align 8, !dbg !11353
  %bf.clear184 = and i64 %bf.load183, 65535, !dbg !11353
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !11353
  %idxprom = sext i32 %bf.cast185 to i64, !dbg !11353
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11353
  %147 = load i32, i32* %arrayidx, align 4, !dbg !11353
  %cmp186 = icmp eq i32 %147, 3, !dbg !11353
  br i1 %cmp186, label %if.then188, label %if.end192, !dbg !11355

if.then188:                                       ; preds = %if.then180
  %148 = load %union.tree_node*, %union.tree_node** %modify_dest, align 8, !dbg !11356
  %base189 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !11356
  %149 = bitcast %struct.tree_base* %base189 to i64*, !dbg !11356
  %bf.load190 = load i64, i64* %149, align 8, !dbg !11357
  %bf.clear191 = and i64 %bf.load190, -8388609, !dbg !11357
  %bf.set = or i64 %bf.clear191, 8388608, !dbg !11357
  store i64 %bf.set, i64* %149, align 8, !dbg !11357
  br label %if.end192, !dbg !11356

if.end192:                                        ; preds = %if.then188, %if.then180
  %150 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11358
  %call193 = call zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %150), !dbg !11360
  %tobool194 = icmp ne i8 %call193, 0, !dbg !11360
  br i1 %tobool194, label %if.then195, label %if.end196, !dbg !11361

if.then195:                                       ; preds = %if.end192
  %151 = load %union.tree_node*, %union.tree_node** %modify_dest, align 8, !dbg !11362
  store %union.tree_node* %151, %union.tree_node** %return_slot, align 8, !dbg !11364
  store %union.tree_node* null, %union.tree_node** %modify_dest, align 8, !dbg !11365
  br label %if.end196, !dbg !11366

if.end196:                                        ; preds = %if.then195, %if.end192
  br label %if.end198, !dbg !11367

if.else197:                                       ; preds = %cond.end176
  store %union.tree_node* null, %union.tree_node** %modify_dest, align 8, !dbg !11368
  br label %if.end198

if.end198:                                        ; preds = %if.else197, %if.end196
  %152 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !11369
  %function_decl199 = bitcast %union.tree_node* %152 to %struct.tree_function_decl*, !dbg !11369
  %operator_new_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl199, i32 0, i32 5, !dbg !11369
  %bf.load200 = load i32, i32* %operator_new_flag, align 8, !dbg !11369
  %bf.lshr201 = lshr i32 %bf.load200, 20, !dbg !11369
  %bf.clear202 = and i32 %bf.lshr201, 1, !dbg !11369
  %tobool203 = icmp ne i32 %bf.clear202, 0, !dbg !11369
  br i1 %tobool203, label %if.then204, label %if.end205, !dbg !11371

if.then204:                                       ; preds = %if.end198
  store %union.tree_node* null, %union.tree_node** %return_slot, align 8, !dbg !11372
  store %union.tree_node* null, %union.tree_node** %modify_dest, align 8, !dbg !11374
  br label %if.end205, !dbg !11375

if.end205:                                        ; preds = %if.then204, %if.end198
  %153 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11376
  %154 = load %union.tree_node*, %union.tree_node** %return_slot, align 8, !dbg !11377
  %155 = load %union.tree_node*, %union.tree_node** %modify_dest, align 8, !dbg !11378
  %call206 = call %union.tree_node* @declare_return_variable(%struct.copy_body_data* %153, %union.tree_node* %154, %union.tree_node* %155), !dbg !11379
  store %union.tree_node* %call206, %union.tree_node** %use_retvar, align 8, !dbg !11380
  %156 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11381
  %src_cfun207 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %156, i32 0, i32 4, !dbg !11382
  %157 = load %struct.function*, %struct.function** %src_cfun207, align 8, !dbg !11382
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %157, i32 0, i32 9, !dbg !11383
  %158 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !11383
  store %union.tree_node* %158, %union.tree_node** %t_step, align 8, !dbg !11384
  br label %for.cond, !dbg !11385

for.cond:                                         ; preds = %for.inc, %if.end205
  %159 = load %union.tree_node*, %union.tree_node** %t_step, align 8, !dbg !11386
  %tobool208 = icmp ne %union.tree_node* %159, null, !dbg !11389
  br i1 %tobool208, label %for.body, label %for.end, !dbg !11389

for.body:                                         ; preds = %for.cond
  %160 = load %union.tree_node*, %union.tree_node** %t_step, align 8, !dbg !11390
  %list = bitcast %union.tree_node* %160 to %struct.tree_list*, !dbg !11390
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !11390
  %161 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11390
  store %union.tree_node* %161, %union.tree_node** %var, align 8, !dbg !11392
  %162 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11393
  %base209 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !11393
  %163 = bitcast %struct.tree_base* %base209 to i64*, !dbg !11393
  %bf.load210 = load i64, i64* %163, align 8, !dbg !11393
  %bf.lshr211 = lshr i64 %bf.load210, 26, !dbg !11393
  %bf.clear212 = and i64 %bf.lshr211, 1, !dbg !11393
  %bf.cast213 = trunc i64 %bf.clear212 to i32, !dbg !11393
  %tobool214 = icmp ne i32 %bf.cast213, 0, !dbg !11393
  br i1 %tobool214, label %land.lhs.true215, label %if.else235, !dbg !11395

land.lhs.true215:                                 ; preds = %for.body
  %164 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11396
  %base216 = bitcast %union.tree_node* %164 to %struct.tree_base*, !dbg !11396
  %165 = bitcast %struct.tree_base* %base216 to i64*, !dbg !11396
  %bf.load217 = load i64, i64* %165, align 8, !dbg !11396
  %bf.lshr218 = lshr i64 %bf.load217, 22, !dbg !11396
  %bf.clear219 = and i64 %bf.lshr218, 1, !dbg !11396
  %bf.cast220 = trunc i64 %bf.clear219 to i32, !dbg !11396
  %tobool221 = icmp ne i32 %bf.cast220, 0, !dbg !11396
  br i1 %tobool221, label %if.else235, label %if.then222, !dbg !11397

if.then222:                                       ; preds = %land.lhs.true215
  %166 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11398
  %call223 = call %struct.var_ann_d* @var_ann(%union.tree_node* %166), !dbg !11401
  %tobool224 = icmp ne %struct.var_ann_d* %call223, null, !dbg !11401
  br i1 %tobool224, label %land.lhs.true225, label %if.end234, !dbg !11402

land.lhs.true225:                                 ; preds = %if.then222
  %167 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11403
  %call226 = call zeroext i8 @add_referenced_var(%union.tree_node* %167), !dbg !11404
  %conv227 = zext i8 %call226 to i32, !dbg !11404
  %tobool228 = icmp ne i32 %conv227, 0, !dbg !11404
  br i1 %tobool228, label %if.then229, label %if.end234, !dbg !11405

if.then229:                                       ; preds = %land.lhs.true225
  %168 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11406
  %169 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11406
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %169, i64 0, !dbg !11406
  %local_decls230 = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 9, !dbg !11406
  %170 = load %union.tree_node*, %union.tree_node** %local_decls230, align 8, !dbg !11406
  %call231 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %168, %union.tree_node* %170), !dbg !11406
  %171 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11407
  %add.ptr232 = getelementptr inbounds %struct.function, %struct.function* %171, i64 0, !dbg !11407
  %local_decls233 = getelementptr inbounds %struct.function, %struct.function* %add.ptr232, i32 0, i32 9, !dbg !11408
  store %union.tree_node* %call231, %union.tree_node** %local_decls233, align 8, !dbg !11409
  br label %if.end234, !dbg !11407

if.end234:                                        ; preds = %if.then229, %land.lhs.true225, %if.then222
  br label %if.end246, !dbg !11410

if.else235:                                       ; preds = %land.lhs.true215, %for.body
  %172 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11411
  %173 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11413
  %call236 = call zeroext i8 @can_be_nonlocal(%union.tree_node* %172, %struct.copy_body_data* %173), !dbg !11414
  %tobool237 = icmp ne i8 %call236, 0, !dbg !11414
  br i1 %tobool237, label %if.end245, label %if.then238, !dbg !11415

if.then238:                                       ; preds = %if.else235
  %174 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11416
  %175 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11416
  %call239 = call %union.tree_node* @remap_decl(%union.tree_node* %174, %struct.copy_body_data* %175), !dbg !11416
  %176 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11416
  %add.ptr240 = getelementptr inbounds %struct.function, %struct.function* %176, i64 0, !dbg !11416
  %local_decls241 = getelementptr inbounds %struct.function, %struct.function* %add.ptr240, i32 0, i32 9, !dbg !11416
  %177 = load %union.tree_node*, %union.tree_node** %local_decls241, align 8, !dbg !11416
  %call242 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call239, %union.tree_node* %177), !dbg !11416
  %178 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11417
  %add.ptr243 = getelementptr inbounds %struct.function, %struct.function* %178, i64 0, !dbg !11417
  %local_decls244 = getelementptr inbounds %struct.function, %struct.function* %add.ptr243, i32 0, i32 9, !dbg !11418
  store %union.tree_node* %call242, %union.tree_node** %local_decls244, align 8, !dbg !11419
  br label %if.end245, !dbg !11417

if.end245:                                        ; preds = %if.then238, %if.else235
  br label %if.end246

if.end246:                                        ; preds = %if.end245, %if.end234
  br label %for.inc, !dbg !11420

for.inc:                                          ; preds = %if.end246
  %179 = load %union.tree_node*, %union.tree_node** %t_step, align 8, !dbg !11421
  %common = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !11421
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !11421
  %180 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !11421
  store %union.tree_node* %180, %union.tree_node** %t_step, align 8, !dbg !11422
  br label %for.cond, !dbg !11423, !llvm.loop !11424

for.end:                                          ; preds = %for.cond
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11426
  %tobool247 = icmp ne %struct._IO_FILE* %181, null, !dbg !11426
  br i1 %tobool247, label %land.lhs.true248, label %if.end255, !dbg !11428

land.lhs.true248:                                 ; preds = %for.end
  %182 = load i32, i32* @dump_flags, align 4, !dbg !11429
  %and = and i32 %182, 8, !dbg !11430
  %tobool249 = icmp ne i32 %and, 0, !dbg !11430
  br i1 %tobool249, label %if.then250, label %if.end255, !dbg !11431

if.then250:                                       ; preds = %land.lhs.true248
  %183 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11432
  %call251 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %183, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)), !dbg !11434
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11435
  %185 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11436
  %src_fn252 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %185, i32 0, i32 0, !dbg !11437
  %186 = load %union.tree_node*, %union.tree_node** %src_fn252, align 8, !dbg !11437
  call void @print_generic_expr(%struct._IO_FILE* %184, %union.tree_node* %186, i32 0), !dbg !11438
  %187 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11439
  %call253 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %187, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0)), !dbg !11440
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11441
  %189 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11442
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %189, i32 0, i32 1, !dbg !11443
  %190 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !11443
  call void @print_generic_expr(%struct._IO_FILE* %188, %union.tree_node* %190, i32 0), !dbg !11444
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11445
  %192 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11446
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %192, i32 0, i32 11, !dbg !11447
  %193 = load i32, i32* %frequency, align 8, !dbg !11447
  %call254 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %191, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i32 %193), !dbg !11448
  br label %if.end255, !dbg !11449

if.end255:                                        ; preds = %if.then250, %land.lhs.true248, %for.end
  %194 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11450
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11451
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %195, i32 0, i32 8, !dbg !11452
  %196 = load i64, i64* %count, align 8, !dbg !11452
  %197 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11453
  %frequency256 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %197, i32 0, i32 11, !dbg !11454
  %198 = load i32, i32* %frequency256, align 8, !dbg !11454
  %mul = mul nsw i32 %198, 10000, !dbg !11455
  %div = sdiv i32 %mul, 1000, !dbg !11456
  %199 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11457
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %return_block, align 8, !dbg !11458
  %call257 = call %union.tree_node* @copy_body(%struct.copy_body_data* %194, i64 %196, i32 %div, %struct.basic_block_def* %199, %struct.basic_block_def* %200), !dbg !11459
  %201 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11460
  %add.ptr258 = getelementptr inbounds %struct.function, %struct.function* %201, i64 0, !dbg !11460
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr258, i32 0, i32 3, !dbg !11462
  %202 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !11462
  %tobool259 = icmp ne %struct.gimple_df* %202, null, !dbg !11460
  br i1 %tobool259, label %if.then260, label %if.end265, !dbg !11463

if.then260:                                       ; preds = %if.end255
  %203 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11464
  %add.ptr261 = getelementptr inbounds %struct.function, %struct.function* %203, i64 0, !dbg !11464
  %gimple_df262 = getelementptr inbounds %struct.function, %struct.function* %add.ptr261, i32 0, i32 3, !dbg !11466
  %204 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df262, align 8, !dbg !11466
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %204, i32 0, i32 4, !dbg !11467
  call void @pt_solution_reset(%struct.pt_solution* %escaped), !dbg !11468
  %205 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11469
  %add.ptr263 = getelementptr inbounds %struct.function, %struct.function* %205, i64 0, !dbg !11469
  %gimple_df264 = getelementptr inbounds %struct.function, %struct.function* %add.ptr263, i32 0, i32 3, !dbg !11470
  %206 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df264, align 8, !dbg !11470
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %206, i32 0, i32 5, !dbg !11471
  call void @pt_solution_reset(%struct.pt_solution* %callused), !dbg !11472
  br label %if.end265, !dbg !11473

if.end265:                                        ; preds = %if.then260, %if.end255
  %207 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11474
  %debug_map266 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %207, i32 0, i32 22, !dbg !11476
  %208 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map266, align 8, !dbg !11476
  %tobool267 = icmp ne %struct.pointer_map_t* %208, null, !dbg !11474
  br i1 %tobool267, label %if.then268, label %if.end271, !dbg !11477

if.then268:                                       ; preds = %if.end265
  %209 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11478
  %debug_map269 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %209, i32 0, i32 22, !dbg !11480
  %210 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map269, align 8, !dbg !11480
  call void @pointer_map_destroy(%struct.pointer_map_t* %210), !dbg !11481
  %211 = load %struct.pointer_map_t*, %struct.pointer_map_t** %dst, align 8, !dbg !11482
  %212 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11483
  %debug_map270 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %212, i32 0, i32 22, !dbg !11484
  store %struct.pointer_map_t* %211, %struct.pointer_map_t** %debug_map270, align 8, !dbg !11485
  br label %if.end271, !dbg !11486

if.end271:                                        ; preds = %if.then268, %if.end265
  %213 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11487
  %decl_map272 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %213, i32 0, i32 6, !dbg !11488
  %214 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map272, align 8, !dbg !11488
  call void @pointer_map_destroy(%struct.pointer_map_t* %214), !dbg !11489
  %215 = load %struct.pointer_map_t*, %struct.pointer_map_t** %st, align 8, !dbg !11490
  %216 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11491
  %decl_map273 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %216, i32 0, i32 6, !dbg !11492
  store %struct.pointer_map_t* %215, %struct.pointer_map_t** %decl_map273, align 8, !dbg !11493
  %217 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11494
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %217), !dbg !11495
  %218 = load %union.tree_node*, %union.tree_node** %use_retvar, align 8, !dbg !11496
  %tobool274 = icmp ne %union.tree_node* %218, null, !dbg !11496
  br i1 %tobool274, label %land.lhs.true275, label %if.else287, !dbg !11498

land.lhs.true275:                                 ; preds = %if.end271
  %219 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11499
  %call276 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %219), !dbg !11500
  %tobool277 = icmp ne %union.tree_node* %call276, null, !dbg !11500
  br i1 %tobool277, label %if.then278, label %if.else287, !dbg !11501

if.then278:                                       ; preds = %land.lhs.true275
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt, metadata !11502, metadata !DIExpression()), !dbg !11504
  %220 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11505
  store %union.gimple_statement_d* %220, %union.gimple_statement_d** %old_stmt, align 8, !dbg !11504
  %221 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11506
  %call279 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %221), !dbg !11506
  %222 = load %union.tree_node*, %union.tree_node** %use_retvar, align 8, !dbg !11506
  %call280 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call279, %union.tree_node* %222), !dbg !11506
  store %union.gimple_statement_d* %call280, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11507
  %223 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11508
  call void @gsi_replace(%struct.gimple_stmt_iterator* %stmt_gsi, %union.gimple_statement_d* %223, i8 zeroext 0), !dbg !11509
  %224 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11510
  %add.ptr281 = getelementptr inbounds %struct.function, %struct.function* %224, i64 0, !dbg !11510
  %call282 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr281), !dbg !11512
  %tobool283 = icmp ne i8 %call282, 0, !dbg !11512
  br i1 %tobool283, label %if.then284, label %if.end285, !dbg !11513

if.then284:                                       ; preds = %if.then278
  %225 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11514
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %225), !dbg !11515
  br label %if.end285, !dbg !11515

if.end285:                                        ; preds = %if.then284, %if.then278
  %226 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !11516
  %227 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11517
  %call286 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %226, %union.gimple_statement_d* %227), !dbg !11518
  br label %if.end314, !dbg !11519

if.else287:                                       ; preds = %land.lhs.true275, %if.end271
  %228 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11520
  %call288 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %228), !dbg !11523
  %tobool289 = icmp ne %union.tree_node* %call288, null, !dbg !11523
  br i1 %tobool289, label %land.lhs.true290, label %if.else312, !dbg !11524

land.lhs.true290:                                 ; preds = %if.else287
  %229 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11525
  %call291 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %229), !dbg !11525
  %base292 = bitcast %union.tree_node* %call291 to %struct.tree_base*, !dbg !11525
  %230 = bitcast %struct.tree_base* %base292 to i64*, !dbg !11525
  %bf.load293 = load i64, i64* %230, align 8, !dbg !11525
  %bf.clear294 = and i64 %bf.load293, 65535, !dbg !11525
  %bf.cast295 = trunc i64 %bf.clear294 to i32, !dbg !11525
  %cmp296 = icmp eq i32 %bf.cast295, 141, !dbg !11526
  br i1 %cmp296, label %if.then298, label %if.else312, !dbg !11527

if.then298:                                       ; preds = %land.lhs.true290
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !11528, metadata !DIExpression()), !dbg !11530
  %231 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11531
  %call299 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %231), !dbg !11532
  store %union.tree_node* %call299, %union.tree_node** %name, align 8, !dbg !11530
  call void @llvm.dbg.declare(metadata %union.tree_node** %var300, metadata !11533, metadata !DIExpression()), !dbg !11534
  %232 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11535
  %ssa_name = bitcast %union.tree_node* %232 to %struct.tree_ssa_name*, !dbg !11535
  %var301 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !11535
  %233 = load %union.tree_node*, %union.tree_node** %var301, align 8, !dbg !11535
  store %union.tree_node* %233, %union.tree_node** %var300, align 8, !dbg !11534
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !11536, metadata !DIExpression()), !dbg !11537
  %234 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11538
  %add.ptr302 = getelementptr inbounds %struct.function, %struct.function* %234, i64 0, !dbg !11538
  %235 = load %union.tree_node*, %union.tree_node** %var300, align 8, !dbg !11539
  %call303 = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr302, %union.tree_node* %235), !dbg !11540
  store %union.tree_node* %call303, %union.tree_node** %def, align 8, !dbg !11537
  %236 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !11541
  %tobool304 = icmp ne %union.tree_node* %236, null, !dbg !11541
  br i1 %tobool304, label %if.then305, label %if.else308, !dbg !11543

if.then305:                                       ; preds = %if.then298
  %237 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11544
  %call306 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %237), !dbg !11544
  %238 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !11544
  %call307 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call306, %union.tree_node* %238), !dbg !11544
  store %union.gimple_statement_d* %call307, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11546
  %239 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11547
  call void @gsi_replace(%struct.gimple_stmt_iterator* %stmt_gsi, %union.gimple_statement_d* %239, i8 zeroext 1), !dbg !11548
  br label %if.end311, !dbg !11549

if.else308:                                       ; preds = %if.then298
  call void @gsi_remove(%struct.gimple_stmt_iterator* %stmt_gsi, i8 zeroext 1), !dbg !11550
  %240 = load %union.tree_node*, %union.tree_node** %var300, align 8, !dbg !11552
  %241 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11553
  call void @set_default_def(%union.tree_node* %240, %union.tree_node* %241), !dbg !11554
  %call309 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !11555
  %242 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11556
  %ssa_name310 = bitcast %union.tree_node* %242 to %struct.tree_ssa_name*, !dbg !11556
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name310, i32 0, i32 2, !dbg !11556
  store %union.gimple_statement_d* %call309, %union.gimple_statement_d** %def_stmt, align 8, !dbg !11557
  br label %if.end311

if.end311:                                        ; preds = %if.else308, %if.then305
  br label %if.end313, !dbg !11558

if.else312:                                       ; preds = %land.lhs.true290, %if.else287
  call void @gsi_remove(%struct.gimple_stmt_iterator* %stmt_gsi, i8 zeroext 1), !dbg !11559
  br label %if.end313

if.end313:                                        ; preds = %if.else312, %if.end311
  br label %if.end314

if.end314:                                        ; preds = %if.end313, %if.end285
  %243 = load i8, i8* %purge_dead_abnormal_edges, align 1, !dbg !11560
  %tobool315 = icmp ne i8 %243, 0, !dbg !11560
  br i1 %tobool315, label %if.then316, label %if.end318, !dbg !11562

if.then316:                                       ; preds = %if.end314
  %244 = load %struct.basic_block_def*, %struct.basic_block_def** %return_block, align 8, !dbg !11563
  %call317 = call zeroext i8 @gimple_purge_dead_abnormal_call_edges(%struct.basic_block_def* %244), !dbg !11564
  br label %if.end318, !dbg !11564

if.end318:                                        ; preds = %if.then316, %if.end314
  %245 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11565
  %call319 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %245), !dbg !11567
  %tobool320 = icmp ne i8 %call319, 0, !dbg !11567
  br i1 %tobool320, label %if.then321, label %if.end341, !dbg !11568

if.then321:                                       ; preds = %if.end318
  %246 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11569
  %call322 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %246), !dbg !11569
  %conv323 = zext i8 %call322 to i32, !dbg !11569
  %tobool324 = icmp ne i32 %conv323, 0, !dbg !11569
  br i1 %tobool324, label %cond.false333, label %lor.lhs.false, !dbg !11569

lor.lhs.false:                                    ; preds = %if.then321
  %247 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11569
  %call325 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %247), !dbg !11569
  %cmp326 = icmp eq i32 %call325, 116, !dbg !11569
  br i1 %cmp326, label %cond.false333, label %lor.lhs.false328, !dbg !11569

lor.lhs.false328:                                 ; preds = %lor.lhs.false
  %248 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11569
  %call329 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %248), !dbg !11569
  %cmp330 = icmp eq i32 %call329, 113, !dbg !11569
  br i1 %cmp330, label %cond.false333, label %cond.true332, !dbg !11569

cond.true332:                                     ; preds = %lor.lhs.false328
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3798, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11569
  br label %cond.end334, !dbg !11569

cond.false333:                                    ; preds = %lor.lhs.false328, %lor.lhs.false, %if.then321
  br label %cond.end334, !dbg !11569

cond.end334:                                      ; preds = %cond.false333, %cond.true332
  %cond335 = phi i32 [ 0, %cond.true332 ], [ 0, %cond.false333 ], !dbg !11569
  %249 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11571
  %call336 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %249), !dbg !11571
  %base337 = bitcast %union.tree_node* %call336 to %struct.tree_base*, !dbg !11571
  %250 = bitcast %struct.tree_base* %base337 to i64*, !dbg !11571
  %bf.load338 = load i64, i64* %250, align 8, !dbg !11572
  %bf.clear339 = and i64 %bf.load338, -16777217, !dbg !11572
  %bf.set340 = or i64 %bf.clear339, 16777216, !dbg !11572
  store i64 %bf.set340, i64* %250, align 8, !dbg !11572
  br label %if.end341, !dbg !11573

if.end341:                                        ; preds = %cond.end334, %if.end318
  %251 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !11574
  %outlining_inline_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %251, i32 0, i32 21, !dbg !11575
  %252 = load void (%union.tree_node*)*, void (%union.tree_node*)** %outlining_inline_function, align 8, !dbg !11575
  %253 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11576
  %callee342 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %253, i32 0, i32 2, !dbg !11577
  %254 = load %struct.cgraph_node*, %struct.cgraph_node** %callee342, align 8, !dbg !11577
  %decl343 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %254, i32 0, i32 0, !dbg !11578
  %255 = load %union.tree_node*, %union.tree_node** %decl343, align 8, !dbg !11578
  call void %252(%union.tree_node* %255), !dbg !11579
  %256 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cg_edge, align 8, !dbg !11580
  %callee344 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %256, i32 0, i32 2, !dbg !11581
  %257 = load %struct.cgraph_node*, %struct.cgraph_node** %callee344, align 8, !dbg !11581
  call void @cgraph_remove_node(%struct.cgraph_node* %257), !dbg !11582
  %258 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11583
  %block345 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %258, i32 0, i32 8, !dbg !11584
  store %union.tree_node* null, %union.tree_node** %block345, align 8, !dbg !11585
  store i8 1, i8* %successfully_inlined, align 1, !dbg !11586
  br label %egress, !dbg !11587

egress:                                           ; preds = %if.end341, %if.end96, %if.then59, %if.then50, %if.then28, %if.then10, %if.then3
  call void @llvm.dbg.label(metadata !11588), !dbg !11589
  %259 = load i32, i32* %saved_location, align 4, !dbg !11590
  store i32 %259, i32* @input_location, align 4, !dbg !11591
  %260 = load i8, i8* %successfully_inlined, align 1, !dbg !11592
  ret i8 %260, !dbg !11593
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !11594 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !11595, metadata !DIExpression()), !dbg !11596
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11597
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !11598
  %cmp = icmp ne i32 %call, 0, !dbg !11599
  %conv = zext i1 %cmp to i32, !dbg !11599
  %conv1 = trunc i32 %conv to i8, !dbg !11598
  ret i8 %conv1, !dbg !11600
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !11601 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !11604, metadata !DIExpression()), !dbg !11605
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !11606
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !11607
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !11608
  %1 = load i32, i32* %location, align 8, !dbg !11608
  ret i32 %1, !dbg !11609
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_indirect_callee_fndecl(%struct.cgraph_node* %node, %union.gimple_statement_d* %stmt) #0 !dbg !11610 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %cs = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !11613, metadata !DIExpression()), !dbg !11614
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11615, metadata !DIExpression()), !dbg !11616
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs, metadata !11617, metadata !DIExpression()), !dbg !11618
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !11619
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11620
  %call = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %0, %union.gimple_statement_d* %1), !dbg !11621
  store %struct.cgraph_edge* %call, %struct.cgraph_edge** %cs, align 8, !dbg !11622
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !11623
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !11623
  br i1 %tobool, label %if.then, label %if.end, !dbg !11625

if.then:                                          ; preds = %entry
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs, align 8, !dbg !11626
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 2, !dbg !11627
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !11627
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !11628
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11628
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !11629
  br label %return, !dbg !11629

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11630
  br label %return, !dbg !11630

return:                                           ; preds = %if.end, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11631
  ret %union.tree_node* %6, !dbg !11631
}

declare dso_local zeroext i8 @gimple_has_body_p(%union.tree_node*) #2

declare dso_local %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @cgraph_inline_p(%struct.cgraph_edge*, i32*) #2

declare dso_local i8* @cgraph_inline_failed_string(i32) #2

declare dso_local i32 @lookup_stmt_eh_lp(%union.gimple_statement_d*) #2

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local void @remove_edge(%struct.edge_def*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @prepend_lexical_block(%union.tree_node* %current_block, %union.tree_node* %new_block) #0 !dbg !11632 {
entry:
  %current_block.addr = alloca %union.tree_node*, align 8
  %new_block.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %current_block, %union.tree_node** %current_block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %current_block.addr, metadata !11633, metadata !DIExpression()), !dbg !11634
  store %union.tree_node* %new_block, %union.tree_node** %new_block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_block.addr, metadata !11635, metadata !DIExpression()), !dbg !11636
  %0 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !11637
  %block = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !11637
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 5, !dbg !11637
  %1 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !11637
  %2 = load %union.tree_node*, %union.tree_node** %new_block.addr, align 8, !dbg !11638
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !11638
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !11638
  store %union.tree_node* %1, %union.tree_node** %chain, align 8, !dbg !11639
  %3 = load %union.tree_node*, %union.tree_node** %new_block.addr, align 8, !dbg !11640
  %4 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !11641
  %block1 = bitcast %union.tree_node* %4 to %struct.tree_block*, !dbg !11641
  %subblocks2 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 5, !dbg !11641
  store %union.tree_node* %3, %union.tree_node** %subblocks2, align 8, !dbg !11642
  %5 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !11643
  %6 = load %union.tree_node*, %union.tree_node** %new_block.addr, align 8, !dbg !11644
  %block3 = bitcast %union.tree_node* %6 to %struct.tree_block*, !dbg !11644
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 6, !dbg !11644
  store %union.tree_node* %5, %union.tree_node** %supercontext, align 8, !dbg !11645
  ret void, !dbg !11646
}

declare dso_local %union.gimple_statement_d* @gimple_build_predict(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_inlined_parameters(%struct.copy_body_data* %id, %union.gimple_statement_d* %stmt, %union.tree_node* %fn, %struct.basic_block_def* %bb) #0 !dbg !11647 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %parms = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %p = alloca %union.tree_node*, align 8
  %vars = alloca %union.tree_node*, align 8
  %static_chain = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !11650, metadata !DIExpression()), !dbg !11651
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !11652, metadata !DIExpression()), !dbg !11653
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !11654, metadata !DIExpression()), !dbg !11655
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11656, metadata !DIExpression()), !dbg !11657
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms, metadata !11658, metadata !DIExpression()), !dbg !11659
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11660, metadata !DIExpression()), !dbg !11661
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !11662, metadata !DIExpression()), !dbg !11663
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars, metadata !11664, metadata !DIExpression()), !dbg !11665
  store %union.tree_node* null, %union.tree_node** %vars, align 8, !dbg !11665
  call void @llvm.dbg.declare(metadata %union.tree_node** %static_chain, metadata !11666, metadata !DIExpression()), !dbg !11667
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11668
  %call = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %0), !dbg !11669
  store %union.tree_node* %call, %union.tree_node** %static_chain, align 8, !dbg !11667
  %1 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !11670
  %decl_non_common = bitcast %union.tree_node* %1 to %struct.tree_decl_non_common*, !dbg !11670
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !11670
  %2 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !11670
  store %union.tree_node* %2, %union.tree_node** %parms, align 8, !dbg !11671
  %3 = load %union.tree_node*, %union.tree_node** %parms, align 8, !dbg !11672
  store %union.tree_node* %3, %union.tree_node** %p, align 8, !dbg !11674
  store i64 0, i64* %i, align 8, !dbg !11675
  br label %for.cond, !dbg !11676

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !11677
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !11679
  br i1 %tobool, label %for.body, label %for.end, !dbg !11679

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !11680, metadata !DIExpression()), !dbg !11682
  %5 = load i64, i64* %i, align 8, !dbg !11683
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11684
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %6), !dbg !11685
  %conv = zext i32 %call1 to i64, !dbg !11685
  %cmp = icmp ult i64 %5, %conv, !dbg !11686
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11683

cond.true:                                        ; preds = %for.body
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !11687
  %8 = load i64, i64* %i, align 8, !dbg !11688
  %conv3 = trunc i64 %8 to i32, !dbg !11688
  %call4 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %7, i32 %conv3), !dbg !11689
  br label %cond.end, !dbg !11683

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !11683

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call4, %cond.true ], [ null, %cond.false ], !dbg !11683
  store %union.tree_node* %cond, %union.tree_node** %val, align 8, !dbg !11690
  %9 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11691
  %10 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !11692
  %11 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11693
  %12 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !11694
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11695
  %call5 = call %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %9, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %12, %struct.basic_block_def* %13, %union.tree_node** %vars), !dbg !11696
  br label %for.inc, !dbg !11697

for.inc:                                          ; preds = %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !11698
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !11698
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !11698
  %15 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !11698
  store %union.tree_node* %15, %union.tree_node** %p, align 8, !dbg !11699
  %16 = load i64, i64* %i, align 8, !dbg !11700
  %inc = add i64 %16, 1, !dbg !11700
  store i64 %inc, i64* %i, align 8, !dbg !11700
  br label %for.cond, !dbg !11701, !llvm.loop !11702

for.end:                                          ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !11704
  %function_decl = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !11704
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !11704
  %18 = load %struct.function*, %struct.function** %f, align 8, !dbg !11704
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 7, !dbg !11705
  %19 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !11705
  store %union.tree_node* %19, %union.tree_node** %p, align 8, !dbg !11706
  %20 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !11707
  %21 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !11707
  %cmp6 = icmp ne %union.tree_node* %20, %21, !dbg !11707
  br i1 %cmp6, label %cond.false9, label %cond.true8, !dbg !11707

cond.true8:                                       ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2513, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11707
  br label %cond.end10, !dbg !11707

cond.false9:                                      ; preds = %for.end
  br label %cond.end10, !dbg !11707

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !11707
  %22 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !11708
  %tobool12 = icmp ne %union.tree_node* %22, null, !dbg !11708
  br i1 %tobool12, label %if.then, label %if.end, !dbg !11710

if.then:                                          ; preds = %cond.end10
  %23 = load %union.tree_node*, %union.tree_node** %static_chain, align 8, !dbg !11711
  %tobool13 = icmp ne %union.tree_node* %23, null, !dbg !11711
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !11711

cond.true14:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11711
  br label %cond.end16, !dbg !11711

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !11711

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !11711
  %24 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11713
  %25 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !11714
  %26 = load %union.tree_node*, %union.tree_node** %static_chain, align 8, !dbg !11715
  %27 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !11716
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11717
  %call18 = call %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %24, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* %27, %struct.basic_block_def* %28, %union.tree_node** %vars), !dbg !11718
  br label %if.end, !dbg !11719

if.end:                                           ; preds = %cond.end16, %cond.end10
  %29 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11720
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %29, i32 0, i32 8, !dbg !11721
  %30 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !11721
  %31 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !11722
  call void @declare_inline_vars(%union.tree_node* %30, %union.tree_node* %31), !dbg !11723
  ret void, !dbg !11724
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !11725 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11726, metadata !DIExpression()), !dbg !11727
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11728
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !11729
  ret %union.tree_node* %call, !dbg !11730
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %s) #0 !dbg !11731 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !11732, metadata !DIExpression()), !dbg !11733
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !11734
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !11735
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !11736
  %bf.load = load i32, i32* %1, align 8, !dbg !11736
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11736
  %and = and i32 %bf.lshr, 4, !dbg !11737
  %cmp = icmp ne i32 %and, 0, !dbg !11738
  %conv = zext i1 %cmp to i32, !dbg !11738
  %conv1 = trunc i32 %conv to i8, !dbg !11739
  ret i8 %conv1, !dbg !11740
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @declare_return_variable(%struct.copy_body_data* %id, %union.tree_node* %return_slot, %union.tree_node* %modify_dest) #0 !dbg !11741 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %return_slot.addr = alloca %union.tree_node*, align 8
  %modify_dest.addr = alloca %union.tree_node*, align 8
  %callee = alloca %union.tree_node*, align 8
  %caller = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %callee_type = alloca %union.tree_node*, align 8
  %caller_type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  %return_slot_addr = alloca %union.tree_node*, align 8
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %volatilep = alloca i32, align 4
  %base32 = alloca %union.tree_node*, align 8
  %use_it = alloca i8, align 1
  %base_m = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !11742, metadata !DIExpression()), !dbg !11743
  store %union.tree_node* %return_slot, %union.tree_node** %return_slot.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_slot.addr, metadata !11744, metadata !DIExpression()), !dbg !11745
  store %union.tree_node* %modify_dest, %union.tree_node** %modify_dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %modify_dest.addr, metadata !11746, metadata !DIExpression()), !dbg !11747
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !11748, metadata !DIExpression()), !dbg !11749
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11750
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 0, !dbg !11751
  %1 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !11751
  store %union.tree_node* %1, %union.tree_node** %callee, align 8, !dbg !11749
  call void @llvm.dbg.declare(metadata %union.tree_node** %caller, metadata !11752, metadata !DIExpression()), !dbg !11753
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11754
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 1, !dbg !11755
  %3 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !11755
  store %union.tree_node* %3, %union.tree_node** %caller, align 8, !dbg !11753
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !11756, metadata !DIExpression()), !dbg !11757
  %4 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !11758
  %decl_non_common = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !11758
  %result1 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !11758
  %5 = load %union.tree_node*, %union.tree_node** %result1, align 8, !dbg !11758
  store %union.tree_node* %5, %union.tree_node** %result, align 8, !dbg !11757
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee_type, metadata !11759, metadata !DIExpression()), !dbg !11760
  %6 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11761
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !11761
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11761
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11761
  store %union.tree_node* %7, %union.tree_node** %callee_type, align 8, !dbg !11760
  call void @llvm.dbg.declare(metadata %union.tree_node** %caller_type, metadata !11762, metadata !DIExpression()), !dbg !11763
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !11764, metadata !DIExpression()), !dbg !11765
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !11766, metadata !DIExpression()), !dbg !11767
  %8 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11768
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !11768
  br i1 %tobool, label %if.then, label %if.else, !dbg !11770

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11771
  %common2 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !11771
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !11771
  %10 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !11771
  store %union.tree_node* %10, %union.tree_node** %caller_type, align 8, !dbg !11772
  br label %if.end, !dbg !11773

if.else:                                          ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !11774
  %common4 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !11774
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !11774
  %12 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !11774
  %common6 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !11774
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !11774
  %13 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !11774
  store %union.tree_node* %13, %union.tree_node** %caller_type, align 8, !dbg !11775
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11776
  %tobool8 = icmp ne %union.tree_node* %14, null, !dbg !11776
  br i1 %tobool8, label %lor.lhs.false, label %if.then9, !dbg !11778

lor.lhs.false:                                    ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %callee_type, align 8, !dbg !11779
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !11779
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !11779
  %bf.load = load i64, i64* %16, align 8, !dbg !11779
  %bf.clear = and i64 %bf.load, 65535, !dbg !11779
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11779
  %cmp = icmp eq i32 %bf.cast, 19, !dbg !11779
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !11780

if.then9:                                         ; preds = %lor.lhs.false, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11781
  br label %return, !dbg !11781

if.end10:                                         ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %return_slot.addr, align 8, !dbg !11782
  %tobool11 = icmp ne %union.tree_node* %17, null, !dbg !11782
  br i1 %tobool11, label %if.then12, label %if.end107, !dbg !11784

if.then12:                                        ; preds = %if.end10
  %18 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11785
  %tobool13 = icmp ne %union.tree_node* %18, null, !dbg !11785
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !11785

cond.true:                                        ; preds = %if.then12
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2566, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11785
  br label %cond.end, !dbg !11785

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !11785

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11785
  %19 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11787
  %decl_common = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !11787
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11787
  %20 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !11787
  %bf.load14 = load i64, i64* %20, align 8, !dbg !11787
  %bf.lshr = lshr i64 %bf.load14, 28, !dbg !11787
  %bf.clear15 = and i64 %bf.lshr, 1, !dbg !11787
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !11787
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !11787
  br i1 %tobool17, label %if.then18, label %if.else50, !dbg !11789

if.then18:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_slot_addr, metadata !11790, metadata !DIExpression()), !dbg !11792
  %21 = load %union.tree_node*, %union.tree_node** %return_slot.addr, align 8, !dbg !11793
  %call = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %21), !dbg !11793
  store %union.tree_node* %call, %union.tree_node** %return_slot_addr, align 8, !dbg !11792
  %22 = load %union.tree_node*, %union.tree_node** %return_slot_addr, align 8, !dbg !11794
  %call19 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %22), !dbg !11794
  store %union.tree_node* %call19, %union.tree_node** %return_slot_addr, align 8, !dbg !11794
  %23 = load %union.tree_node*, %union.tree_node** %return_slot.addr, align 8, !dbg !11795
  %base20 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !11795
  %24 = bitcast %struct.tree_base* %base20 to i64*, !dbg !11795
  %bf.load21 = load i64, i64* %24, align 8, !dbg !11795
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !11795
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !11795
  %cmp24 = icmp ne i32 %bf.cast23, 141, !dbg !11795
  br i1 %cmp24, label %cond.false26, label %cond.true25, !dbg !11795

cond.true25:                                      ; preds = %if.then18
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11795
  br label %cond.end27, !dbg !11795

cond.false26:                                     ; preds = %if.then18
  br label %cond.end27, !dbg !11795

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !11795
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11796
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !11796
  %call29 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !11798
  %tobool30 = icmp ne i8 %call29, 0, !dbg !11798
  br i1 %tobool30, label %if.then31, label %if.end49, !dbg !11799

if.then31:                                        ; preds = %cond.end27
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !11800, metadata !DIExpression()), !dbg !11802
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !11803, metadata !DIExpression()), !dbg !11804
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !11805, metadata !DIExpression()), !dbg !11806
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11807, metadata !DIExpression()), !dbg !11808
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !11809, metadata !DIExpression()), !dbg !11810
  call void @llvm.dbg.declare(metadata i32* %volatilep, metadata !11811, metadata !DIExpression()), !dbg !11812
  call void @llvm.dbg.declare(metadata %union.tree_node** %base32, metadata !11813, metadata !DIExpression()), !dbg !11814
  %26 = load %union.tree_node*, %union.tree_node** %return_slot.addr, align 8, !dbg !11815
  %call33 = call %union.tree_node* @get_inner_reference(%union.tree_node* %26, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode, i32* %unsignedp, i32* %volatilep, i8 zeroext 0), !dbg !11816
  store %union.tree_node* %call33, %union.tree_node** %base32, align 8, !dbg !11817
  %27 = load %union.tree_node*, %union.tree_node** %base32, align 8, !dbg !11818
  %base34 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !11818
  %28 = bitcast %struct.tree_base* %base34 to i64*, !dbg !11818
  %bf.load35 = load i64, i64* %28, align 8, !dbg !11818
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !11818
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !11818
  %cmp38 = icmp eq i32 %bf.cast37, 47, !dbg !11820
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !11821

if.then39:                                        ; preds = %if.then31
  %29 = load %union.tree_node*, %union.tree_node** %base32, align 8, !dbg !11822
  %exp = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !11822
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11822
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !11822
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11822
  store %union.tree_node* %30, %union.tree_node** %base32, align 8, !dbg !11823
  br label %if.end40, !dbg !11824

if.end40:                                         ; preds = %if.then39, %if.then31
  %31 = load %union.tree_node*, %union.tree_node** %base32, align 8, !dbg !11825
  %base41 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !11825
  %32 = bitcast %struct.tree_base* %base41 to i64*, !dbg !11825
  %bf.load42 = load i64, i64* %32, align 8, !dbg !11825
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !11825
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !11825
  %cmp45 = icmp eq i32 %bf.cast44, 141, !dbg !11827
  br i1 %cmp45, label %if.then46, label %if.end48, !dbg !11828

if.then46:                                        ; preds = %if.end40
  %33 = load %union.tree_node*, %union.tree_node** %base32, align 8, !dbg !11829
  %ssa_name = bitcast %union.tree_node* %33 to %struct.tree_ssa_name*, !dbg !11829
  %var47 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !11829
  %34 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !11829
  store %union.tree_node* %34, %union.tree_node** %base32, align 8, !dbg !11830
  br label %if.end48, !dbg !11831

if.end48:                                         ; preds = %if.then46, %if.end40
  %35 = load %union.tree_node*, %union.tree_node** %base32, align 8, !dbg !11832
  call void @mark_sym_for_renaming(%union.tree_node* %35), !dbg !11833
  br label %if.end49, !dbg !11834

if.end49:                                         ; preds = %if.end48, %cond.end27
  %36 = load %union.tree_node*, %union.tree_node** %return_slot_addr, align 8, !dbg !11835
  store %union.tree_node* %36, %union.tree_node** %var, align 8, !dbg !11836
  br label %if.end72, !dbg !11837

if.else50:                                        ; preds = %cond.end
  %37 = load %union.tree_node*, %union.tree_node** %return_slot.addr, align 8, !dbg !11838
  store %union.tree_node* %37, %union.tree_node** %var, align 8, !dbg !11840
  %38 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11841
  %base51 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !11841
  %39 = bitcast %struct.tree_base* %base51 to i64*, !dbg !11841
  %bf.load52 = load i64, i64* %39, align 8, !dbg !11841
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !11841
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !11841
  %cmp55 = icmp ne i32 %bf.cast54, 141, !dbg !11841
  br i1 %cmp55, label %cond.false57, label %cond.true56, !dbg !11841

cond.true56:                                      ; preds = %if.else50
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2603, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11841
  br label %cond.end58, !dbg !11841

cond.false57:                                     ; preds = %if.else50
  br label %cond.end58, !dbg !11841

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond59 = phi i32 [ 0, %cond.true56 ], [ 0, %cond.false57 ], !dbg !11841
  %40 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11842
  %base60 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !11842
  %41 = bitcast %struct.tree_base* %base60 to i64*, !dbg !11842
  %bf.load61 = load i64, i64* %41, align 8, !dbg !11842
  %bf.lshr62 = lshr i64 %bf.load61, 18, !dbg !11842
  %bf.clear63 = and i64 %bf.lshr62, 1, !dbg !11842
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !11842
  %42 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11843
  %base65 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !11843
  %43 = bitcast %struct.tree_base* %base65 to i64*, !dbg !11843
  %bf.load66 = load i64, i64* %43, align 8, !dbg !11844
  %bf.lshr67 = lshr i64 %bf.load66, 18, !dbg !11844
  %bf.clear68 = and i64 %bf.lshr67, 1, !dbg !11844
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !11844
  %or = or i32 %bf.cast69, %bf.cast64, !dbg !11844
  %44 = zext i32 %or to i64, !dbg !11844
  %bf.load70 = load i64, i64* %43, align 8, !dbg !11844
  %bf.value = and i64 %44, 1, !dbg !11844
  %bf.shl = shl i64 %bf.value, 18, !dbg !11844
  %bf.clear71 = and i64 %bf.load70, -262145, !dbg !11844
  %bf.set = or i64 %bf.clear71, %bf.shl, !dbg !11844
  store i64 %bf.set, i64* %43, align 8, !dbg !11844
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !11844
  br label %if.end72

if.end72:                                         ; preds = %cond.end58, %if.end49
  %45 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11845
  %common73 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !11845
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !11845
  %46 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !11845
  %base75 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !11845
  %47 = bitcast %struct.tree_base* %base75 to i64*, !dbg !11845
  %bf.load76 = load i64, i64* %47, align 8, !dbg !11845
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !11845
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !11845
  %cmp79 = icmp eq i32 %bf.cast78, 13, !dbg !11847
  br i1 %cmp79, label %land.lhs.true, label %lor.lhs.false80, !dbg !11848

lor.lhs.false80:                                  ; preds = %if.end72
  %48 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11849
  %common81 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !11849
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !11849
  %49 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !11849
  %base83 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !11849
  %50 = bitcast %struct.tree_base* %base83 to i64*, !dbg !11849
  %bf.load84 = load i64, i64* %50, align 8, !dbg !11849
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !11849
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !11849
  %cmp87 = icmp eq i32 %bf.cast86, 14, !dbg !11850
  br i1 %cmp87, label %land.lhs.true, label %if.end106, !dbg !11851

land.lhs.true:                                    ; preds = %lor.lhs.false80, %if.end72
  %51 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11852
  %decl_common88 = bitcast %union.tree_node* %51 to %struct.tree_decl_common*, !dbg !11852
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common88, i32 0, i32 2, !dbg !11852
  %52 = bitcast i40* %gimple_reg_flag to i64*, !dbg !11852
  %bf.load89 = load i64, i64* %52, align 8, !dbg !11852
  %bf.lshr90 = lshr i64 %bf.load89, 27, !dbg !11852
  %bf.clear91 = and i64 %bf.lshr90, 1, !dbg !11852
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !11852
  %tobool93 = icmp ne i32 %bf.cast92, 0, !dbg !11852
  br i1 %tobool93, label %if.end106, label %land.lhs.true94, !dbg !11853

land.lhs.true94:                                  ; preds = %land.lhs.true
  %53 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11854
  %base95 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !11854
  %54 = bitcast %struct.tree_base* %base95 to i64*, !dbg !11854
  %bf.load96 = load i64, i64* %54, align 8, !dbg !11854
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !11854
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !11854
  %idxprom = sext i32 %bf.cast98 to i64, !dbg !11854
  %arrayidx99 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11854
  %55 = load i32, i32* %arrayidx99, align 4, !dbg !11854
  %cmp100 = icmp eq i32 %55, 3, !dbg !11854
  br i1 %cmp100, label %if.then101, label %if.end106, !dbg !11855

if.then101:                                       ; preds = %land.lhs.true94
  %56 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11856
  %decl_common102 = bitcast %union.tree_node* %56 to %struct.tree_decl_common*, !dbg !11856
  %gimple_reg_flag103 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common102, i32 0, i32 2, !dbg !11856
  %57 = bitcast i40* %gimple_reg_flag103 to i64*, !dbg !11856
  %bf.load104 = load i64, i64* %57, align 8, !dbg !11857
  %bf.clear105 = and i64 %bf.load104, -134217729, !dbg !11857
  store i64 %bf.clear105, i64* %57, align 8, !dbg !11857
  br label %if.end106, !dbg !11856

if.end106:                                        ; preds = %if.then101, %land.lhs.true94, %land.lhs.true, %lor.lhs.false80
  store %union.tree_node* null, %union.tree_node** %use, align 8, !dbg !11858
  br label %done, !dbg !11859

if.end107:                                        ; preds = %if.end10
  %58 = load %union.tree_node*, %union.tree_node** %callee_type, align 8, !dbg !11860
  %base108 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !11860
  %59 = bitcast %struct.tree_base* %base108 to i64*, !dbg !11860
  %bf.load109 = load i64, i64* %59, align 8, !dbg !11860
  %bf.lshr110 = lshr i64 %bf.load109, 18, !dbg !11860
  %bf.clear111 = and i64 %bf.lshr110, 1, !dbg !11860
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !11860
  %tobool113 = icmp ne i32 %bf.cast112, 0, !dbg !11860
  br i1 %tobool113, label %cond.true114, label %cond.false115, !dbg !11860

cond.true114:                                     ; preds = %if.end107
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2616, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11860
  br label %cond.end116, !dbg !11860

cond.false115:                                    ; preds = %if.end107
  br label %cond.end116, !dbg !11860

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i32 [ 0, %cond.true114 ], [ 0, %cond.false115 ], !dbg !11860
  %60 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11861
  %tobool118 = icmp ne %union.tree_node* %60, null, !dbg !11861
  br i1 %tobool118, label %land.lhs.true119, label %if.end210, !dbg !11863

land.lhs.true119:                                 ; preds = %cond.end116
  %61 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11864
  %base120 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !11864
  %62 = bitcast %struct.tree_base* %base120 to i64*, !dbg !11864
  %bf.load121 = load i64, i64* %62, align 8, !dbg !11864
  %bf.clear122 = and i64 %bf.load121, 65535, !dbg !11864
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !11864
  %cmp124 = icmp ne i32 %bf.cast123, 141, !dbg !11865
  br i1 %cmp124, label %if.then125, label %if.end210, !dbg !11866

if.then125:                                       ; preds = %land.lhs.true119
  call void @llvm.dbg.declare(metadata i8* %use_it, metadata !11867, metadata !DIExpression()), !dbg !11869
  store i8 0, i8* %use_it, align 1, !dbg !11869
  %63 = load %union.tree_node*, %union.tree_node** %callee_type, align 8, !dbg !11870
  %64 = load %union.tree_node*, %union.tree_node** %caller_type, align 8, !dbg !11872
  %call126 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %63, %union.tree_node* %64), !dbg !11873
  %tobool127 = icmp ne i8 %call126, 0, !dbg !11873
  br i1 %tobool127, label %if.else129, label %if.then128, !dbg !11874

if.then128:                                       ; preds = %if.then125
  store i8 0, i8* %use_it, align 1, !dbg !11875
  br label %if.end206, !dbg !11876

if.else129:                                       ; preds = %if.then125
  %65 = load %union.tree_node*, %union.tree_node** %caller_type, align 8, !dbg !11877
  %type130 = bitcast %union.tree_node* %65 to %struct.tree_type*, !dbg !11877
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type130, i32 0, i32 3, !dbg !11877
  %66 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !11877
  %base131 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !11877
  %67 = bitcast %struct.tree_base* %base131 to i64*, !dbg !11877
  %bf.load132 = load i64, i64* %67, align 8, !dbg !11877
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !11877
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !11877
  %cmp135 = icmp ne i32 %bf.cast134, 23, !dbg !11879
  br i1 %cmp135, label %if.then136, label %if.else137, !dbg !11880

if.then136:                                       ; preds = %if.else129
  store i8 1, i8* %use_it, align 1, !dbg !11881
  br label %if.end205, !dbg !11882

if.else137:                                       ; preds = %if.else129
  %68 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11883
  %base138 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !11883
  %69 = bitcast %struct.tree_base* %base138 to i64*, !dbg !11883
  %bf.load139 = load i64, i64* %69, align 8, !dbg !11883
  %bf.lshr140 = lshr i64 %bf.load139, 18, !dbg !11883
  %bf.clear141 = and i64 %bf.lshr140, 1, !dbg !11883
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !11883
  %tobool143 = icmp ne i32 %bf.cast142, 0, !dbg !11883
  br i1 %tobool143, label %if.then144, label %if.else145, !dbg !11885

if.then144:                                       ; preds = %if.else137
  store i8 0, i8* %use_it, align 1, !dbg !11886
  br label %if.end204, !dbg !11887

if.else145:                                       ; preds = %if.else137
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_m, metadata !11888, metadata !DIExpression()), !dbg !11890
  %70 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11891
  %call146 = call %union.tree_node* @get_base_address(%union.tree_node* %70), !dbg !11892
  store %union.tree_node* %call146, %union.tree_node** %base_m, align 8, !dbg !11890
  %71 = load %union.tree_node*, %union.tree_node** %base_m, align 8, !dbg !11893
  %base147 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !11893
  %72 = bitcast %struct.tree_base* %base147 to i64*, !dbg !11893
  %bf.load148 = load i64, i64* %72, align 8, !dbg !11893
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !11893
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !11893
  %idxprom151 = sext i32 %bf.cast150 to i64, !dbg !11893
  %arrayidx152 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom151, !dbg !11893
  %73 = load i32, i32* %arrayidx152, align 4, !dbg !11893
  %cmp153 = icmp eq i32 %73, 3, !dbg !11893
  br i1 %cmp153, label %if.else155, label %if.then154, !dbg !11895

if.then154:                                       ; preds = %if.else145
  store i8 0, i8* %use_it, align 1, !dbg !11896
  br label %if.end203, !dbg !11897

if.else155:                                       ; preds = %if.else145
  %74 = load %union.tree_node*, %union.tree_node** %base_m, align 8, !dbg !11898
  %call156 = call zeroext i8 @is_global_var(%union.tree_node* %74), !dbg !11900
  %tobool157 = icmp ne i8 %call156, 0, !dbg !11900
  br i1 %tobool157, label %if.then158, label %if.else159, !dbg !11901

if.then158:                                       ; preds = %if.else155
  store i8 0, i8* %use_it, align 1, !dbg !11902
  br label %if.end202, !dbg !11903

if.else159:                                       ; preds = %if.else155
  %75 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11904
  %common160 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !11904
  %type161 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common160, i32 0, i32 2, !dbg !11904
  %76 = load %union.tree_node*, %union.tree_node** %type161, align 8, !dbg !11904
  %base162 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !11904
  %77 = bitcast %struct.tree_base* %base162 to i64*, !dbg !11904
  %bf.load163 = load i64, i64* %77, align 8, !dbg !11904
  %bf.clear164 = and i64 %bf.load163, 65535, !dbg !11904
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !11904
  %cmp166 = icmp eq i32 %bf.cast165, 13, !dbg !11906
  br i1 %cmp166, label %land.lhs.true175, label %lor.lhs.false167, !dbg !11907

lor.lhs.false167:                                 ; preds = %if.else159
  %78 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11908
  %common168 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !11908
  %type169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2, !dbg !11908
  %79 = load %union.tree_node*, %union.tree_node** %type169, align 8, !dbg !11908
  %base170 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !11908
  %80 = bitcast %struct.tree_base* %base170 to i64*, !dbg !11908
  %bf.load171 = load i64, i64* %80, align 8, !dbg !11908
  %bf.clear172 = and i64 %bf.load171, 65535, !dbg !11908
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !11908
  %cmp174 = icmp eq i32 %bf.cast173, 14, !dbg !11909
  br i1 %cmp174, label %land.lhs.true175, label %if.else192, !dbg !11910

land.lhs.true175:                                 ; preds = %lor.lhs.false167, %if.else159
  %81 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11911
  %decl_common176 = bitcast %union.tree_node* %81 to %struct.tree_decl_common*, !dbg !11911
  %gimple_reg_flag177 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common176, i32 0, i32 2, !dbg !11911
  %82 = bitcast i40* %gimple_reg_flag177 to i64*, !dbg !11911
  %bf.load178 = load i64, i64* %82, align 8, !dbg !11911
  %bf.lshr179 = lshr i64 %bf.load178, 27, !dbg !11911
  %bf.clear180 = and i64 %bf.lshr179, 1, !dbg !11911
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !11911
  %tobool182 = icmp ne i32 %bf.cast181, 0, !dbg !11911
  br i1 %tobool182, label %if.else192, label %land.lhs.true183, !dbg !11912

land.lhs.true183:                                 ; preds = %land.lhs.true175
  %83 = load %union.tree_node*, %union.tree_node** %base_m, align 8, !dbg !11913
  %decl_common184 = bitcast %union.tree_node* %83 to %struct.tree_decl_common*, !dbg !11913
  %gimple_reg_flag185 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common184, i32 0, i32 2, !dbg !11913
  %84 = bitcast i40* %gimple_reg_flag185 to i64*, !dbg !11913
  %bf.load186 = load i64, i64* %84, align 8, !dbg !11913
  %bf.lshr187 = lshr i64 %bf.load186, 27, !dbg !11913
  %bf.clear188 = and i64 %bf.lshr187, 1, !dbg !11913
  %bf.cast189 = trunc i64 %bf.clear188 to i32, !dbg !11913
  %tobool190 = icmp ne i32 %bf.cast189, 0, !dbg !11913
  br i1 %tobool190, label %if.then191, label %if.else192, !dbg !11914

if.then191:                                       ; preds = %land.lhs.true183
  store i8 0, i8* %use_it, align 1, !dbg !11915
  br label %if.end201, !dbg !11916

if.else192:                                       ; preds = %land.lhs.true183, %land.lhs.true175, %lor.lhs.false167
  %85 = load %union.tree_node*, %union.tree_node** %base_m, align 8, !dbg !11917
  %base193 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !11917
  %86 = bitcast %struct.tree_base* %base193 to i64*, !dbg !11917
  %bf.load194 = load i64, i64* %86, align 8, !dbg !11917
  %bf.lshr195 = lshr i64 %bf.load194, 18, !dbg !11917
  %bf.clear196 = and i64 %bf.lshr195, 1, !dbg !11917
  %bf.cast197 = trunc i64 %bf.clear196 to i32, !dbg !11917
  %tobool198 = icmp ne i32 %bf.cast197, 0, !dbg !11917
  br i1 %tobool198, label %if.end200, label %if.then199, !dbg !11919

if.then199:                                       ; preds = %if.else192
  store i8 1, i8* %use_it, align 1, !dbg !11920
  br label %if.end200, !dbg !11921

if.end200:                                        ; preds = %if.then199, %if.else192
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %if.then191
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.then158
  br label %if.end203

if.end203:                                        ; preds = %if.end202, %if.then154
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.then144
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then136
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then128
  %87 = load i8, i8* %use_it, align 1, !dbg !11922
  %tobool207 = icmp ne i8 %87, 0, !dbg !11922
  br i1 %tobool207, label %if.then208, label %if.end209, !dbg !11924

if.then208:                                       ; preds = %if.end206
  %88 = load %union.tree_node*, %union.tree_node** %modify_dest.addr, align 8, !dbg !11925
  store %union.tree_node* %88, %union.tree_node** %var, align 8, !dbg !11927
  store %union.tree_node* null, %union.tree_node** %use, align 8, !dbg !11928
  br label %done, !dbg !11929

if.end209:                                        ; preds = %if.end206
  br label %if.end210, !dbg !11930

if.end210:                                        ; preds = %if.end209, %land.lhs.true119, %cond.end116
  %89 = load %union.tree_node*, %union.tree_node** %callee_type, align 8, !dbg !11931
  %type211 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !11931
  %size_unit212 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type211, i32 0, i32 3, !dbg !11931
  %90 = load %union.tree_node*, %union.tree_node** %size_unit212, align 8, !dbg !11931
  %base213 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !11931
  %91 = bitcast %struct.tree_base* %base213 to i64*, !dbg !11931
  %bf.load214 = load i64, i64* %91, align 8, !dbg !11931
  %bf.clear215 = and i64 %bf.load214, 65535, !dbg !11931
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !11931
  %cmp217 = icmp eq i32 %bf.cast216, 23, !dbg !11931
  br i1 %cmp217, label %cond.false219, label %cond.true218, !dbg !11931

cond.true218:                                     ; preds = %if.end210
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2666, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11931
  br label %cond.end220, !dbg !11931

cond.false219:                                    ; preds = %if.end210
  br label %cond.end220, !dbg !11931

cond.end220:                                      ; preds = %cond.false219, %cond.true218
  %cond221 = phi i32 [ 0, %cond.true218 ], [ 0, %cond.false219 ], !dbg !11931
  %92 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11932
  %93 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11933
  %call222 = call %union.tree_node* @copy_result_decl_to_var(%union.tree_node* %92, %struct.copy_body_data* %93), !dbg !11934
  store %union.tree_node* %call222, %union.tree_node** %var, align 8, !dbg !11935
  %94 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11936
  %add.ptr223 = getelementptr inbounds %struct.function, %struct.function* %94, i64 0, !dbg !11936
  %call224 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr223), !dbg !11938
  %tobool225 = icmp ne i8 %call224, 0, !dbg !11938
  br i1 %tobool225, label %if.then226, label %if.end229, !dbg !11939

if.then226:                                       ; preds = %cond.end220
  %95 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11940
  %call227 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %95), !dbg !11942
  %96 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11943
  %call228 = call zeroext i8 @add_referenced_var(%union.tree_node* %96), !dbg !11944
  br label %if.end229, !dbg !11945

if.end229:                                        ; preds = %if.then226, %cond.end220
  %97 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11946
  %decl_with_vis = bitcast %union.tree_node* %97 to %struct.tree_decl_with_vis*, !dbg !11946
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !11946
  %98 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !11946
  %bf.load230 = load i32, i32* %98, align 8, !dbg !11947
  %bf.clear231 = and i32 %bf.load230, -257, !dbg !11947
  %bf.set232 = or i32 %bf.clear231, 256, !dbg !11947
  store i32 %bf.set232, i32* %98, align 8, !dbg !11947
  %99 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11948
  %100 = load %union.tree_node*, %union.tree_node** %caller, align 8, !dbg !11948
  %function_decl = bitcast %union.tree_node* %100 to %struct.tree_function_decl*, !dbg !11948
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !11948
  %101 = load %struct.function*, %struct.function** %f, align 8, !dbg !11948
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %101, i32 0, i32 9, !dbg !11948
  %102 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !11948
  %call233 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %99, %union.tree_node* %102), !dbg !11948
  %103 = load %union.tree_node*, %union.tree_node** %caller, align 8, !dbg !11949
  %function_decl234 = bitcast %union.tree_node* %103 to %struct.tree_function_decl*, !dbg !11949
  %f235 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl234, i32 0, i32 1, !dbg !11949
  %104 = load %struct.function*, %struct.function** %f235, align 8, !dbg !11949
  %local_decls236 = getelementptr inbounds %struct.function, %struct.function* %104, i32 0, i32 9, !dbg !11950
  store %union.tree_node* %call233, %union.tree_node** %local_decls236, align 8, !dbg !11951
  %105 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11952
  %base237 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !11952
  %106 = bitcast %struct.tree_base* %base237 to i64*, !dbg !11952
  %bf.load238 = load i64, i64* %106, align 8, !dbg !11953
  %bf.clear239 = and i64 %bf.load238, -8388609, !dbg !11953
  %bf.set240 = or i64 %bf.clear239, 8388608, !dbg !11953
  store i64 %bf.set240, i64* %106, align 8, !dbg !11953
  %107 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11954
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %107, i32 0, i32 8, !dbg !11955
  %108 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !11955
  %109 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11956
  call void @declare_inline_vars(%union.tree_node* %108, %union.tree_node* %109), !dbg !11957
  %110 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11958
  store %union.tree_node* %110, %union.tree_node** %use, align 8, !dbg !11959
  %111 = load %union.tree_node*, %union.tree_node** %caller_type, align 8, !dbg !11960
  %112 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11962
  %common241 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !11962
  %type242 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common241, i32 0, i32 2, !dbg !11962
  %113 = load %union.tree_node*, %union.tree_node** %type242, align 8, !dbg !11962
  %call243 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %111, %union.tree_node* %113), !dbg !11963
  %tobool244 = icmp ne i8 %call243, 0, !dbg !11963
  br i1 %tobool244, label %if.end247, label %if.then245, !dbg !11964

if.then245:                                       ; preds = %if.end229
  %114 = load %union.tree_node*, %union.tree_node** %caller_type, align 8, !dbg !11965
  %115 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11965
  %call246 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %114, %union.tree_node* %115), !dbg !11965
  store %union.tree_node* %call246, %union.tree_node** %use, align 8, !dbg !11966
  br label %if.end247, !dbg !11967

if.end247:                                        ; preds = %if.then245, %if.end229
  %116 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !11968
  %call248 = call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %116), !dbg !11968
  store %union.tree_node* %call248, %union.tree_node** %use, align 8, !dbg !11968
  %117 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11969
  %decl_common249 = bitcast %union.tree_node* %117 to %struct.tree_decl_common*, !dbg !11969
  %decl_by_reference_flag250 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common249, i32 0, i32 2, !dbg !11969
  %118 = bitcast i40* %decl_by_reference_flag250 to i64*, !dbg !11969
  %bf.load251 = load i64, i64* %118, align 8, !dbg !11969
  %bf.lshr252 = lshr i64 %bf.load251, 28, !dbg !11969
  %bf.clear253 = and i64 %bf.lshr252, 1, !dbg !11969
  %bf.cast254 = trunc i64 %bf.clear253 to i32, !dbg !11969
  %tobool255 = icmp ne i32 %bf.cast254, 0, !dbg !11969
  br i1 %tobool255, label %if.then256, label %if.end262, !dbg !11971

if.then256:                                       ; preds = %if.end247
  %119 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11972
  %base257 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !11972
  %120 = bitcast %struct.tree_base* %base257 to i64*, !dbg !11972
  %bf.load258 = load i64, i64* %120, align 8, !dbg !11974
  %bf.clear259 = and i64 %bf.load258, -262145, !dbg !11974
  %bf.set260 = or i64 %bf.clear259, 262144, !dbg !11974
  store i64 %bf.set260, i64* %120, align 8, !dbg !11974
  %121 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11975
  %call261 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %121), !dbg !11975
  store %union.tree_node* %call261, %union.tree_node** %var, align 8, !dbg !11976
  br label %if.end262, !dbg !11977

if.end262:                                        ; preds = %if.then256, %if.end247
  br label %done, !dbg !11969

done:                                             ; preds = %if.end262, %if.then208, %if.end106
  call void @llvm.dbg.label(metadata !11978), !dbg !11979
  %122 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11980
  %123 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !11981
  %124 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11982
  call void @insert_decl_map(%struct.copy_body_data* %122, %union.tree_node* %123, %union.tree_node* %124), !dbg !11983
  %125 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11984
  %126 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !11985
  %retvar = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %126, i32 0, i32 5, !dbg !11986
  store %union.tree_node* %125, %union.tree_node** %retvar, align 8, !dbg !11987
  %127 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !11988
  store %union.tree_node* %127, %union.tree_node** %retval, align 8, !dbg !11989
  br label %return, !dbg !11989

return:                                           ; preds = %done, %if.then9
  %128 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11990
  ret %union.tree_node* %128, !dbg !11990
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local void @pt_solution_reset(%struct.pt_solution*) #2

declare dso_local void @unlink_stmt_vdef(%union.gimple_statement_d*) #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_purge_dead_abnormal_call_edges(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !11991 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11992, metadata !DIExpression()), !dbg !11993
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11994
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !11995
  %cmp = icmp eq i32 %call, 6, !dbg !11996
  %conv = zext i1 %cmp to i32, !dbg !11996
  %conv1 = trunc i32 %conv to i8, !dbg !11995
  ret i8 %conv1, !dbg !11997
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

declare dso_local void @cgraph_remove_node(%struct.cgraph_node*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !11998 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11999, metadata !DIExpression()), !dbg !12000
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12001
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !12002
  ret %union.tree_node* %call, !dbg !12003
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_global_var(%union.tree_node* %t) #0 !dbg !12004 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !12005, metadata !DIExpression()), !dbg !12006
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !12007
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12007
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12007
  %bf.load = load i64, i64* %1, align 8, !dbg !12007
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !12007
  %bf.clear = and i64 %bf.lshr, 1, !dbg !12007
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12007
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !12007
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !12008

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !12009
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !12009
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !12009
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !12009
  %bf.load1 = load i64, i64* %3, align 8, !dbg !12009
  %bf.lshr2 = lshr i64 %bf.load1, 25, !dbg !12009
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !12009
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !12009
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !12008
  br label %lor.end, !dbg !12008

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !12008
  %conv = trunc i32 %lor.ext to i8, !dbg !12010
  ret i8 %conv, !dbg !12011
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_result_decl_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !12012 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %copy = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !12013, metadata !DIExpression()), !dbg !12014
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12015, metadata !DIExpression()), !dbg !12016
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !12017, metadata !DIExpression()), !dbg !12018
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12019, metadata !DIExpression()), !dbg !12020
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12021
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12021
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12021
  %bf.load = load i64, i64* %1, align 8, !dbg !12021
  %bf.clear = and i64 %bf.load, 65535, !dbg !12021
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12021
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !12021
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !12021

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12021
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12021
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !12021
  %bf.load2 = load i64, i64* %3, align 8, !dbg !12021
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !12021
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !12021
  %cmp5 = icmp eq i32 %bf.cast4, 36, !dbg !12021
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !12021

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4532, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12021
  br label %cond.end, !dbg !12021

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !12021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12021
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12022
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !12022
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12022
  %5 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !12022
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !12023
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12024
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !12024
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !12024
  %7 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !12024
  %bf.load7 = load i64, i64* %7, align 8, !dbg !12024
  %bf.lshr = lshr i64 %bf.load7, 28, !dbg !12024
  %bf.clear8 = and i64 %bf.lshr, 1, !dbg !12024
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !12024
  %tobool = icmp ne i32 %bf.cast9, 0, !dbg !12024
  br i1 %tobool, label %if.then, label %if.end, !dbg !12026

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12027
  %common10 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !12027
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !12027
  %9 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !12027
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !12028
  br label %if.end, !dbg !12029

if.end:                                           ; preds = %if.then, %cond.end
  %10 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12030
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %10, i32 0, i32 1, !dbg !12030
  %11 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !12030
  %decl_minimal = bitcast %union.tree_node* %11 to %struct.tree_decl_minimal*, !dbg !12030
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !12030
  %12 = load i32, i32* %locus, align 8, !dbg !12030
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12030
  %decl_minimal12 = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !12030
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal12, i32 0, i32 3, !dbg !12030
  %14 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12030
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12030
  %call = call %union.tree_node* @build_decl_stat(i32 %12, i32 32, %union.tree_node* %14, %union.tree_node* %15), !dbg !12030
  store %union.tree_node* %call, %union.tree_node** %copy, align 8, !dbg !12031
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12032
  %base13 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !12032
  %17 = bitcast %struct.tree_base* %base13 to i64*, !dbg !12032
  %bf.load14 = load i64, i64* %17, align 8, !dbg !12032
  %bf.lshr15 = lshr i64 %bf.load14, 20, !dbg !12032
  %bf.clear16 = and i64 %bf.lshr15, 1, !dbg !12032
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !12032
  %18 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12033
  %base18 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !12033
  %19 = bitcast %struct.tree_base* %base18 to i64*, !dbg !12033
  %20 = zext i32 %bf.cast17 to i64, !dbg !12034
  %bf.load19 = load i64, i64* %19, align 8, !dbg !12034
  %bf.value = and i64 %20, 1, !dbg !12034
  %bf.shl = shl i64 %bf.value, 20, !dbg !12034
  %bf.clear20 = and i64 %bf.load19, -1048577, !dbg !12034
  %bf.set = or i64 %bf.clear20, %bf.shl, !dbg !12034
  store i64 %bf.set, i64* %19, align 8, !dbg !12034
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !12034
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12035
  %base21 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !12035
  %22 = bitcast %struct.tree_base* %base21 to i64*, !dbg !12035
  %bf.load22 = load i64, i64* %22, align 8, !dbg !12035
  %bf.lshr23 = lshr i64 %bf.load22, 19, !dbg !12035
  %bf.clear24 = and i64 %bf.lshr23, 1, !dbg !12035
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !12035
  %23 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12036
  %base26 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !12036
  %24 = bitcast %struct.tree_base* %base26 to i64*, !dbg !12036
  %25 = zext i32 %bf.cast25 to i64, !dbg !12037
  %bf.load27 = load i64, i64* %24, align 8, !dbg !12037
  %bf.value28 = and i64 %25, 1, !dbg !12037
  %bf.shl29 = shl i64 %bf.value28, 19, !dbg !12037
  %bf.clear30 = and i64 %bf.load27, -524289, !dbg !12037
  %bf.set31 = or i64 %bf.clear30, %bf.shl29, !dbg !12037
  store i64 %bf.set31, i64* %24, align 8, !dbg !12037
  %bf.result.cast32 = trunc i64 %bf.value28 to i32, !dbg !12037
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12038
  %decl_common33 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !12038
  %decl_by_reference_flag34 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common33, i32 0, i32 2, !dbg !12038
  %27 = bitcast i40* %decl_by_reference_flag34 to i64*, !dbg !12038
  %bf.load35 = load i64, i64* %27, align 8, !dbg !12038
  %bf.lshr36 = lshr i64 %bf.load35, 28, !dbg !12038
  %bf.clear37 = and i64 %bf.lshr36, 1, !dbg !12038
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !12038
  %tobool39 = icmp ne i32 %bf.cast38, 0, !dbg !12038
  br i1 %tobool39, label %if.end66, label %if.then40, !dbg !12040

if.then40:                                        ; preds = %if.end
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12041
  %base41 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !12041
  %29 = bitcast %struct.tree_base* %base41 to i64*, !dbg !12041
  %bf.load42 = load i64, i64* %29, align 8, !dbg !12041
  %bf.lshr43 = lshr i64 %bf.load42, 18, !dbg !12041
  %bf.clear44 = and i64 %bf.lshr43, 1, !dbg !12041
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !12041
  %30 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12043
  %base46 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !12043
  %31 = bitcast %struct.tree_base* %base46 to i64*, !dbg !12043
  %32 = zext i32 %bf.cast45 to i64, !dbg !12044
  %bf.load47 = load i64, i64* %31, align 8, !dbg !12044
  %bf.value48 = and i64 %32, 1, !dbg !12044
  %bf.shl49 = shl i64 %bf.value48, 18, !dbg !12044
  %bf.clear50 = and i64 %bf.load47, -262145, !dbg !12044
  %bf.set51 = or i64 %bf.clear50, %bf.shl49, !dbg !12044
  store i64 %bf.set51, i64* %31, align 8, !dbg !12044
  %bf.result.cast52 = trunc i64 %bf.value48 to i32, !dbg !12044
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12045
  %decl_common53 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !12045
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common53, i32 0, i32 2, !dbg !12045
  %34 = bitcast i40* %gimple_reg_flag to i64*, !dbg !12045
  %bf.load54 = load i64, i64* %34, align 8, !dbg !12045
  %bf.lshr55 = lshr i64 %bf.load54, 27, !dbg !12045
  %bf.clear56 = and i64 %bf.lshr55, 1, !dbg !12045
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !12045
  %35 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12046
  %decl_common58 = bitcast %union.tree_node* %35 to %struct.tree_decl_common*, !dbg !12046
  %gimple_reg_flag59 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common58, i32 0, i32 2, !dbg !12046
  %36 = bitcast i40* %gimple_reg_flag59 to i64*, !dbg !12046
  %37 = zext i32 %bf.cast57 to i64, !dbg !12047
  %bf.load60 = load i64, i64* %36, align 8, !dbg !12047
  %bf.value61 = and i64 %37, 1, !dbg !12047
  %bf.shl62 = shl i64 %bf.value61, 27, !dbg !12047
  %bf.clear63 = and i64 %bf.load60, -134217729, !dbg !12047
  %bf.set64 = or i64 %bf.clear63, %bf.shl62, !dbg !12047
  store i64 %bf.set64, i64* %36, align 8, !dbg !12047
  %bf.result.cast65 = trunc i64 %bf.value61 to i32, !dbg !12047
  br label %if.end66, !dbg !12048

if.end66:                                         ; preds = %if.then40, %if.end
  %38 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12049
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12050
  %40 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12051
  %call67 = call %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %38, %union.tree_node* %39, %union.tree_node* %40), !dbg !12052
  ret %union.tree_node* %call67, !dbg !12053
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !12054 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !12059, metadata !DIExpression()), !dbg !12060
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12061, metadata !DIExpression()), !dbg !12060
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !12060
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !12060
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12060

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12060
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !12060
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !12060
  %3 = load i32, i32* %num, align 8, !dbg !12060
  %cmp = icmp ult i32 %1, %3, !dbg !12060
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12062
  %land.ext = zext i1 %4 to i32, !dbg !12060
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !12060
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !12060
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12060
  %idxprom = zext i32 %6 to i64, !dbg !12060
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !12060
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !12060
  ret %struct.basic_block_def* %7, !dbg !12060
}

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev(%struct.gimple_stmt_iterator* %i) #0 !dbg !12063 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !12064, metadata !DIExpression()), !dbg !12065
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !12066
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !12067
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !12067
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 1, !dbg !12068
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %prev, align 8, !dbg !12068
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !12069
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !12070
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !12071
  ret void, !dbg !12072
}

declare dso_local zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !12073 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !12076, metadata !DIExpression()), !dbg !12077
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !12078
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !12080
  %tobool = icmp ne i8 %call, 0, !dbg !12080
  br i1 %tobool, label %if.then, label %if.end, !dbg !12081

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !12082
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !12084
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !12085
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !12086
  br label %if.end, !dbg !12087

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !12088
}

declare dso_local void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def*) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @unsave_expr_1(%union.tree_node* %expr) #0 !dbg !12089 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !12090, metadata !DIExpression()), !dbg !12091
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12092
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12092
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12092
  %bf.load = load i64, i64* %1, align 8, !dbg !12092
  %bf.clear = and i64 %bf.load, 65535, !dbg !12092
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12092
  switch i32 %bf.cast, label %sw.default [
    i32 55, label %sw.bb
  ], !dbg !12093

sw.bb:                                            ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12094
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !12094
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12094
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !12094
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12094
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !12094
  br i1 %tobool, label %if.then, label %if.end, !dbg !12097

if.then:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !12098

if.end:                                           ; preds = %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12099
  %exp1 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !12099
  %operands2 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !12099
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands2, i64 0, i64 3, !dbg !12099
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !12099
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12100
  %exp4 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !12100
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !12100
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 1, !dbg !12100
  store %union.tree_node* %5, %union.tree_node** %arrayidx6, align 8, !dbg !12101
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !12102
  %exp7 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !12102
  %operands8 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp7, i32 0, i32 3, !dbg !12102
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands8, i64 0, i64 3, !dbg !12102
  store %union.tree_node* null, %union.tree_node** %arrayidx9, align 8, !dbg !12103
  br label %sw.epilog, !dbg !12104

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !12105

sw.epilog:                                        ; preds = %sw.default, %if.end, %if.then
  ret void, !dbg !12106
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !12107 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12108, metadata !DIExpression()), !dbg !12109
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12110
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !12111
  ret %union.tree_node* %call, !dbg !12112
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_block(%union.gimple_statement_d* %gs, %union.tree_node* %block) #0 !dbg !12113 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12114, metadata !DIExpression()), !dbg !12115
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !12116, metadata !DIExpression()), !dbg !12117
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !12118
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !12118
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !12118

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !12118
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !12118
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !12118
  %bf.load = load i64, i64* %2, align 8, !dbg !12118
  %bf.clear = and i64 %bf.load, 65535, !dbg !12118
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12118
  %cmp1 = icmp eq i32 %bf.cast, 4, !dbg !12118
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !12118

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 2573, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12118
  br label %cond.end, !dbg !12118

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !12118

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12118
  %3 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !12119
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12120
  %gimple_bind = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_bind*, !dbg !12121
  %block2 = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !12122
  store %union.tree_node* %3, %union.tree_node** %block2, align 8, !dbg !12123
  ret void, !dbg !12124
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_vars(%union.gimple_statement_d* %gs, %union.tree_node* %vars) #0 !dbg !12125 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %vars.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12126, metadata !DIExpression()), !dbg !12127
  store %union.tree_node* %vars, %union.tree_node** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars.addr, metadata !12128, metadata !DIExpression()), !dbg !12129
  %0 = load %union.tree_node*, %union.tree_node** %vars.addr, align 8, !dbg !12130
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12131
  %gimple_bind = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_bind*, !dbg !12132
  %vars1 = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 1, !dbg !12133
  store %union.tree_node* %0, %union.tree_node** %vars1, align 8, !dbg !12134
  ret void, !dbg !12135
}

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_decl_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !12136 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %copy = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !12137, metadata !DIExpression()), !dbg !12138
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12139, metadata !DIExpression()), !dbg !12140
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !12141, metadata !DIExpression()), !dbg !12142
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !12143, metadata !DIExpression()), !dbg !12144
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12145
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12145
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12145
  %bf.load = load i64, i64* %1, align 8, !dbg !12145
  %bf.clear = and i64 %bf.load, 65535, !dbg !12145
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12145
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !12145
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !12145

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12145
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12145
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !12145
  %bf.load2 = load i64, i64* %3, align 8, !dbg !12145
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !12145
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !12145
  %cmp5 = icmp eq i32 %bf.cast4, 36, !dbg !12145
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !12145

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4509, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12145
  br label %cond.end, !dbg !12145

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !12145

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12145
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12146
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !12146
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12146
  %5 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !12146
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !12147
  %6 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12148
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %6, i32 0, i32 1, !dbg !12148
  %7 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !12148
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !12148
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !12148
  %8 = load i32, i32* %locus, align 8, !dbg !12148
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12148
  %decl_minimal7 = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !12148
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal7, i32 0, i32 3, !dbg !12148
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12148
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12148
  %call = call %union.tree_node* @build_decl_stat(i32 %8, i32 32, %union.tree_node* %10, %union.tree_node* %11), !dbg !12148
  store %union.tree_node* %call, %union.tree_node** %copy, align 8, !dbg !12149
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12150
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !12150
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !12150
  %bf.load9 = load i64, i64* %13, align 8, !dbg !12150
  %bf.lshr = lshr i64 %bf.load9, 18, !dbg !12150
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !12150
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !12150
  %14 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12151
  %base12 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !12151
  %15 = bitcast %struct.tree_base* %base12 to i64*, !dbg !12151
  %16 = zext i32 %bf.cast11 to i64, !dbg !12152
  %bf.load13 = load i64, i64* %15, align 8, !dbg !12152
  %bf.value = and i64 %16, 1, !dbg !12152
  %bf.shl = shl i64 %bf.value, 18, !dbg !12152
  %bf.clear14 = and i64 %bf.load13, -262145, !dbg !12152
  %bf.set = or i64 %bf.clear14, %bf.shl, !dbg !12152
  store i64 %bf.set, i64* %15, align 8, !dbg !12152
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !12152
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12153
  %base15 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !12153
  %18 = bitcast %struct.tree_base* %base15 to i64*, !dbg !12153
  %bf.load16 = load i64, i64* %18, align 8, !dbg !12153
  %bf.lshr17 = lshr i64 %bf.load16, 20, !dbg !12153
  %bf.clear18 = and i64 %bf.lshr17, 1, !dbg !12153
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !12153
  %19 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12154
  %base20 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !12154
  %20 = bitcast %struct.tree_base* %base20 to i64*, !dbg !12154
  %21 = zext i32 %bf.cast19 to i64, !dbg !12155
  %bf.load21 = load i64, i64* %20, align 8, !dbg !12155
  %bf.value22 = and i64 %21, 1, !dbg !12155
  %bf.shl23 = shl i64 %bf.value22, 20, !dbg !12155
  %bf.clear24 = and i64 %bf.load21, -1048577, !dbg !12155
  %bf.set25 = or i64 %bf.clear24, %bf.shl23, !dbg !12155
  store i64 %bf.set25, i64* %20, align 8, !dbg !12155
  %bf.result.cast26 = trunc i64 %bf.value22 to i32, !dbg !12155
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12156
  %base27 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !12156
  %23 = bitcast %struct.tree_base* %base27 to i64*, !dbg !12156
  %bf.load28 = load i64, i64* %23, align 8, !dbg !12156
  %bf.lshr29 = lshr i64 %bf.load28, 19, !dbg !12156
  %bf.clear30 = and i64 %bf.lshr29, 1, !dbg !12156
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !12156
  %24 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12157
  %base32 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !12157
  %25 = bitcast %struct.tree_base* %base32 to i64*, !dbg !12157
  %26 = zext i32 %bf.cast31 to i64, !dbg !12158
  %bf.load33 = load i64, i64* %25, align 8, !dbg !12158
  %bf.value34 = and i64 %26, 1, !dbg !12158
  %bf.shl35 = shl i64 %bf.value34, 19, !dbg !12158
  %bf.clear36 = and i64 %bf.load33, -524289, !dbg !12158
  %bf.set37 = or i64 %bf.clear36, %bf.shl35, !dbg !12158
  store i64 %bf.set37, i64* %25, align 8, !dbg !12158
  %bf.result.cast38 = trunc i64 %bf.value34 to i32, !dbg !12158
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12159
  %decl_common = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !12159
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !12159
  %28 = bitcast i40* %gimple_reg_flag to i64*, !dbg !12159
  %bf.load39 = load i64, i64* %28, align 8, !dbg !12159
  %bf.lshr40 = lshr i64 %bf.load39, 27, !dbg !12159
  %bf.clear41 = and i64 %bf.lshr40, 1, !dbg !12159
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !12159
  %29 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12160
  %decl_common43 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !12160
  %gimple_reg_flag44 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common43, i32 0, i32 2, !dbg !12160
  %30 = bitcast i40* %gimple_reg_flag44 to i64*, !dbg !12160
  %31 = zext i32 %bf.cast42 to i64, !dbg !12161
  %bf.load45 = load i64, i64* %30, align 8, !dbg !12161
  %bf.value46 = and i64 %31, 1, !dbg !12161
  %bf.shl47 = shl i64 %bf.value46, 27, !dbg !12161
  %bf.clear48 = and i64 %bf.load45, -134217729, !dbg !12161
  %bf.set49 = or i64 %bf.clear48, %bf.shl47, !dbg !12161
  store i64 %bf.set49, i64* %30, align 8, !dbg !12161
  %bf.result.cast50 = trunc i64 %bf.value46 to i32, !dbg !12161
  %32 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12162
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12163
  %34 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !12164
  %call51 = call %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %32, %union.tree_node* %33, %union.tree_node* %34), !dbg !12165
  ret %union.tree_node* %call51, !dbg !12166
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @has_label_address_in_static_1(%union.tree_node** %nodep, i32* %walk_subtrees, i8* %fnp) #0 !dbg !12167 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %nodep.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %fnp.addr = alloca i8*, align 8
  %node = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  store %union.tree_node** %nodep, %union.tree_node*** %nodep.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %nodep.addr, metadata !12168, metadata !DIExpression()), !dbg !12169
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !12170, metadata !DIExpression()), !dbg !12171
  store i8* %fnp, i8** %fnp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnp.addr, metadata !12172, metadata !DIExpression()), !dbg !12173
  call void @llvm.dbg.declare(metadata %union.tree_node** %node, metadata !12174, metadata !DIExpression()), !dbg !12175
  %0 = load %union.tree_node**, %union.tree_node*** %nodep.addr, align 8, !dbg !12176
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !12177
  store %union.tree_node* %1, %union.tree_node** %node, align 8, !dbg !12175
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !12178, metadata !DIExpression()), !dbg !12179
  %2 = load i8*, i8** %fnp.addr, align 8, !dbg !12180
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !12181
  store %union.tree_node* %3, %union.tree_node** %fn, align 8, !dbg !12179
  %4 = load %union.tree_node*, %union.tree_node** %node, align 8, !dbg !12182
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !12182
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !12182
  %bf.load = load i64, i64* %5, align 8, !dbg !12182
  %bf.clear = and i64 %bf.load, 65535, !dbg !12182
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12182
  %cmp = icmp eq i32 %bf.cast, 30, !dbg !12184
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12185

land.lhs.true:                                    ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node, align 8, !dbg !12186
  %decl_minimal = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !12186
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !12186
  %7 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !12186
  %8 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !12187
  %cmp1 = icmp eq %union.tree_node* %7, %8, !dbg !12188
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12189

if.then:                                          ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %node, align 8, !dbg !12190
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !12191
  br label %return, !dbg !12191

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %union.tree_node*, %union.tree_node** %node, align 8, !dbg !12192
  %base2 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !12192
  %11 = bitcast %struct.tree_base* %base2 to i64*, !dbg !12192
  %bf.load3 = load i64, i64* %11, align 8, !dbg !12192
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !12192
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !12192
  %idxprom = sext i32 %bf.cast5 to i64, !dbg !12192
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12192
  %12 = load i32, i32* %arrayidx, align 4, !dbg !12192
  %cmp6 = icmp eq i32 %12, 2, !dbg !12192
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !12194

if.then7:                                         ; preds = %if.end
  %13 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !12195
  store i32 0, i32* %13, align 4, !dbg !12196
  br label %if.end8, !dbg !12197

if.end8:                                          ; preds = %if.then7, %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12198
  br label %return, !dbg !12198

return:                                           ; preds = %if.end8, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12199
  ret %union.tree_node* %14, !dbg !12199
}

declare dso_local void @find_unreachable_blocks() #2

declare dso_local void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node*) #2

declare dso_local void @cgraph_remove_edge(%struct.cgraph_edge*) #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

declare dso_local void @tidy_fallthru_edges() #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_opt_pass_heap_reserve(%struct.VEC_ipa_opt_pass_heap** %vec_, i32 %alloc_) #0 !dbg !12200 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ipa_opt_pass_heap** %vec_, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, metadata !12203, metadata !DIExpression()), !dbg !12204
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12205, metadata !DIExpression()), !dbg !12204
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !12206, metadata !DIExpression()), !dbg !12204
  %0 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !12204
  %1 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %0, align 8, !dbg !12204
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_heap* %1, null, !dbg !12204
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12204

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !12204
  %3 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %2, align 8, !dbg !12204
  %base = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %3, i32 0, i32 0, !dbg !12204
  br label %cond.end, !dbg !12204

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12204

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ipa_opt_pass_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12204
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !12204
  %call = call i32 @VEC_ipa_opt_pass_base_space(%struct.VEC_ipa_opt_pass_base* %cond, i32 %4), !dbg !12204
  %tobool1 = icmp ne i32 %call, 0, !dbg !12204
  %lnot = xor i1 %tobool1, true, !dbg !12204
  %lnot.ext = zext i1 %lnot to i32, !dbg !12204
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !12204
  %5 = load i32, i32* %extend, align 4, !dbg !12207
  %tobool2 = icmp ne i32 %5, 0, !dbg !12207
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12204

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !12207
  %7 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %6, align 8, !dbg !12207
  %8 = bitcast %struct.VEC_ipa_opt_pass_heap* %7 to i8*, !dbg !12207
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !12207
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !12207
  %10 = bitcast i8* %call3 to %struct.VEC_ipa_opt_pass_heap*, !dbg !12207
  %11 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !12207
  store %struct.VEC_ipa_opt_pass_heap* %10, %struct.VEC_ipa_opt_pass_heap** %11, align 8, !dbg !12207
  br label %if.end, !dbg !12207

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !12204
  ret i32 %12, !dbg !12204
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_base_quick_push(%struct.VEC_ipa_opt_pass_base* %vec_, %struct.ipa_opt_pass_d* %obj_) #0 !dbg !12209 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_base*, align 8
  %obj_.addr = alloca %struct.ipa_opt_pass_d*, align 8
  %slot_ = alloca %struct.ipa_opt_pass_d**, align 8
  store %struct.VEC_ipa_opt_pass_base* %vec_, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_base** %vec_.addr, metadata !12212, metadata !DIExpression()), !dbg !12213
  store %struct.ipa_opt_pass_d* %obj_, %struct.ipa_opt_pass_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ipa_opt_pass_d** %obj_.addr, metadata !12214, metadata !DIExpression()), !dbg !12213
  call void @llvm.dbg.declare(metadata %struct.ipa_opt_pass_d*** %slot_, metadata !12215, metadata !DIExpression()), !dbg !12213
  %0 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12213
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %0, i32 0, i32 0, !dbg !12213
  %1 = load i32, i32* %num, align 8, !dbg !12213
  %2 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12213
  %alloc = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %2, i32 0, i32 1, !dbg !12213
  %3 = load i32, i32* %alloc, align 4, !dbg !12213
  %cmp = icmp ult i32 %1, %3, !dbg !12213
  %conv = zext i1 %cmp to i32, !dbg !12213
  %4 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12213
  %vec = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %4, i32 0, i32 2, !dbg !12213
  %5 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12213
  %num1 = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %5, i32 0, i32 0, !dbg !12213
  %6 = load i32, i32* %num1, align 8, !dbg !12213
  %inc = add i32 %6, 1, !dbg !12213
  store i32 %inc, i32* %num1, align 8, !dbg !12213
  %idxprom = zext i32 %6 to i64, !dbg !12213
  %arrayidx = getelementptr inbounds [1 x %struct.ipa_opt_pass_d*], [1 x %struct.ipa_opt_pass_d*]* %vec, i64 0, i64 %idxprom, !dbg !12213
  store %struct.ipa_opt_pass_d** %arrayidx, %struct.ipa_opt_pass_d*** %slot_, align 8, !dbg !12213
  %7 = load %struct.ipa_opt_pass_d*, %struct.ipa_opt_pass_d** %obj_.addr, align 8, !dbg !12213
  %8 = load %struct.ipa_opt_pass_d**, %struct.ipa_opt_pass_d*** %slot_, align 8, !dbg !12213
  store %struct.ipa_opt_pass_d* %7, %struct.ipa_opt_pass_d** %8, align 8, !dbg !12213
  %9 = load %struct.ipa_opt_pass_d**, %struct.ipa_opt_pass_d*** %slot_, align 8, !dbg !12213
  ret %struct.ipa_opt_pass_d** %9, !dbg !12213
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ipa_opt_pass_base_space(%struct.VEC_ipa_opt_pass_base* %vec_, i32 %alloc_) #0 !dbg !12216 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ipa_opt_pass_base* %vec_, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_base** %vec_.addr, metadata !12219, metadata !DIExpression()), !dbg !12220
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12221, metadata !DIExpression()), !dbg !12220
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12220
  %cmp = icmp sge i32 %0, 0, !dbg !12220
  %conv = zext i1 %cmp to i32, !dbg !12220
  %1 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12220
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_base* %1, null, !dbg !12220
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12220

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12220
  %alloc = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %2, i32 0, i32 1, !dbg !12220
  %3 = load i32, i32* %alloc, align 4, !dbg !12220
  %4 = load %struct.VEC_ipa_opt_pass_base*, %struct.VEC_ipa_opt_pass_base** %vec_.addr, align 8, !dbg !12220
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %4, i32 0, i32 0, !dbg !12220
  %5 = load i32, i32* %num, align 8, !dbg !12220
  %sub = sub i32 %3, %5, !dbg !12220
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !12220
  %cmp1 = icmp uge i32 %sub, %6, !dbg !12220
  %conv2 = zext i1 %cmp1 to i32, !dbg !12220
  br label %cond.end, !dbg !12220

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !12220
  %tobool3 = icmp ne i32 %7, 0, !dbg !12220
  %lnot = xor i1 %tobool3, true, !dbg !12220
  %lnot.ext = zext i1 %lnot to i32, !dbg !12220
  br label %cond.end, !dbg !12220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !12220
  ret i32 %cond, !dbg !12220
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local void @push_struct_function(%union.tree_node*) #2

declare dso_local void @init_empty_tree_cfg() #2

declare dso_local void @init_eh_for_function() #2

declare dso_local void @init_tree_ssa(%struct.function*) #2

declare dso_local void @init_ssa_operands() #2

declare dso_local zeroext i8 @fold_convertible_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @self_inlining_addr_expr(%union.tree_node* %value, %union.tree_node* %fn) #0 !dbg !12222 {
entry:
  %retval = alloca i8, align 1
  %value.addr = alloca %union.tree_node*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !12223, metadata !DIExpression()), !dbg !12224
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !12225, metadata !DIExpression()), !dbg !12226
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !12227, metadata !DIExpression()), !dbg !12228
  %0 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12229
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12229
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12229
  %bf.load = load i64, i64* %1, align 8, !dbg !12229
  %bf.clear = and i64 %bf.load, 65535, !dbg !12229
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12229
  %cmp = icmp ne i32 %bf.cast, 121, !dbg !12231
  br i1 %cmp, label %if.then, label %if.end, !dbg !12232

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !12233
  br label %return, !dbg !12233

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12234
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !12234
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12234
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !12234
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12234
  %call = call %union.tree_node* @get_base_address(%union.tree_node* %3), !dbg !12235
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !12236
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !12237
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !12237
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12238

land.rhs:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !12239
  %6 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !12240
  %call1 = call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %5, %union.tree_node* %6), !dbg !12241
  %conv = zext i8 %call1 to i32, !dbg !12241
  %tobool2 = icmp ne i32 %conv, 0, !dbg !12238
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %7 = phi i1 [ false, %if.end ], [ %tobool2, %land.rhs ], !dbg !12242
  %land.ext = zext i1 %7 to i32, !dbg !12238
  %conv3 = trunc i32 %land.ext to i8, !dbg !12237
  store i8 %conv3, i8* %retval, align 1, !dbg !12243
  br label %return, !dbg !12243

return:                                           ; preds = %land.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !12244
  ret i8 %8, !dbg !12244
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_debug_decl_map(%struct.copy_body_data* %id, %union.tree_node* %key, %union.tree_node* %value) #0 !dbg !12245 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %key.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12246, metadata !DIExpression()), !dbg !12247
  store %union.tree_node* %key, %union.tree_node** %key.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %key.addr, metadata !12248, metadata !DIExpression()), !dbg !12249
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !12250, metadata !DIExpression()), !dbg !12251
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12252
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 4, !dbg !12254
  %1 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !12254
  %call = call zeroext i8 @gimple_in_ssa_p(%struct.function* %1), !dbg !12255
  %tobool = icmp ne i8 %call, 0, !dbg !12255
  br i1 %tobool, label %if.end, label %if.then, !dbg !12256

if.then:                                          ; preds = %entry
  br label %return, !dbg !12257

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !12258
  %tobool1 = icmp ne i32 %2, 0, !dbg !12258
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !12260

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !12261

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %key.addr, align 8, !dbg !12262
  %call4 = call %union.tree_node* @target_for_debug_bind(%union.tree_node* %3), !dbg !12264
  %tobool5 = icmp ne %union.tree_node* %call4, null, !dbg !12264
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !12265

if.then6:                                         ; preds = %if.end3
  br label %return, !dbg !12266

if.end7:                                          ; preds = %if.end3
  %4 = load %union.tree_node*, %union.tree_node** %key.addr, align 8, !dbg !12267
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !12267
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !12267
  %bf.load = load i64, i64* %5, align 8, !dbg !12267
  %bf.clear = and i64 %bf.load, 65535, !dbg !12267
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12267
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !12267
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12267

cond.true:                                        ; preds = %if.end7
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 165, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12267
  br label %cond.end, !dbg !12267

cond.false:                                       ; preds = %if.end7
  br label %cond.end, !dbg !12267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12267
  %6 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12268
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !12268
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !12268
  %bf.load9 = load i64, i64* %7, align 8, !dbg !12268
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !12268
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !12268
  %cmp12 = icmp eq i32 %bf.cast11, 32, !dbg !12268
  br i1 %cmp12, label %cond.false14, label %cond.true13, !dbg !12268

cond.true13:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 166, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12268
  br label %cond.end15, !dbg !12268

cond.false14:                                     ; preds = %cond.end
  br label %cond.end15, !dbg !12268

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !12268
  %8 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12269
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %8, i32 0, i32 22, !dbg !12271
  %9 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !12271
  %tobool17 = icmp ne %struct.pointer_map_t* %9, null, !dbg !12269
  br i1 %tobool17, label %if.end21, label %if.then18, !dbg !12272

if.then18:                                        ; preds = %cond.end15
  %call19 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !12273
  %10 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12274
  %debug_map20 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %10, i32 0, i32 22, !dbg !12275
  store %struct.pointer_map_t* %call19, %struct.pointer_map_t** %debug_map20, align 8, !dbg !12276
  br label %if.end21, !dbg !12274

if.end21:                                         ; preds = %if.then18, %cond.end15
  %11 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12277
  %12 = bitcast %union.tree_node* %11 to i8*, !dbg !12277
  %13 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12278
  %debug_map22 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %13, i32 0, i32 22, !dbg !12279
  %14 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map22, align 8, !dbg !12279
  %15 = load %union.tree_node*, %union.tree_node** %key.addr, align 8, !dbg !12280
  %16 = bitcast %union.tree_node* %15 to i8*, !dbg !12280
  %call23 = call i8** @pointer_map_insert(%struct.pointer_map_t* %14, i8* %16), !dbg !12281
  store i8* %12, i8** %call23, align 8, !dbg !12282
  br label %return, !dbg !12283

return:                                           ; preds = %if.end21, %if.then6, %if.then2, %if.then
  ret void, !dbg !12283
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %var, %union.tree_node* %value, %union.gimple_statement_d* %base_stmt) #0 !dbg !12284 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %base_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %note = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tracked_var = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12287, metadata !DIExpression()), !dbg !12288
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12289, metadata !DIExpression()), !dbg !12290
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !12291, metadata !DIExpression()), !dbg !12292
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !12293, metadata !DIExpression()), !dbg !12294
  store %union.gimple_statement_d* %base_stmt, %union.gimple_statement_d** %base_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %base_stmt.addr, metadata !12295, metadata !DIExpression()), !dbg !12296
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %note, metadata !12297, metadata !DIExpression()), !dbg !12298
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12299, metadata !DIExpression()), !dbg !12300
  call void @llvm.dbg.declare(metadata %union.tree_node** %tracked_var, metadata !12301, metadata !DIExpression()), !dbg !12302
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12303
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 4, !dbg !12305
  %1 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !12305
  %call = call zeroext i8 @gimple_in_ssa_p(%struct.function* %1), !dbg !12306
  %tobool = icmp ne i8 %call, 0, !dbg !12306
  br i1 %tobool, label %if.end, label %if.then, !dbg !12307

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !12308
  br label %return, !dbg !12308

if.end:                                           ; preds = %entry
  %2 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !12309
  %tobool1 = icmp ne i32 %2, 0, !dbg !12309
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !12311

if.then2:                                         ; preds = %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !12312
  br label %return, !dbg !12312

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !12313
  %call4 = call %union.tree_node* @target_for_debug_bind(%union.tree_node* %3), !dbg !12314
  store %union.tree_node* %call4, %union.tree_node** %tracked_var, align 8, !dbg !12315
  %4 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !12316
  %tobool5 = icmp ne %union.tree_node* %4, null, !dbg !12316
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !12318

if.then6:                                         ; preds = %if.end3
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !12319
  br label %return, !dbg !12319

if.end7:                                          ; preds = %if.end3
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12320
  %tobool8 = icmp ne %struct.basic_block_def* %5, null, !dbg !12320
  br i1 %tobool8, label %if.then9, label %if.end16, !dbg !12322

if.then9:                                         ; preds = %if.end7
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12323
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %6), !dbg !12325
  %7 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12325
  %8 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12325
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !12325
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %base_stmt.addr, align 8, !dbg !12326
  %tobool10 = icmp ne %union.gimple_statement_d* %9, null, !dbg !12326
  br i1 %tobool10, label %if.end15, label %land.lhs.true, !dbg !12328

land.lhs.true:                                    ; preds = %if.then9
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12329
  %tobool12 = icmp ne i8 %call11, 0, !dbg !12329
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !12330

if.then13:                                        ; preds = %land.lhs.true
  %call14 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12331
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %base_stmt.addr, align 8, !dbg !12332
  br label %if.end15, !dbg !12333

if.end15:                                         ; preds = %if.then13, %land.lhs.true, %if.then9
  br label %if.end16, !dbg !12334

if.end16:                                         ; preds = %if.end15, %if.end7
  %10 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !12335
  %11 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !12335
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %base_stmt.addr, align 8, !dbg !12335
  %call17 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %10, %union.tree_node* %11, %union.gimple_statement_d* %12), !dbg !12335
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %note, align 8, !dbg !12336
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12337
  %tobool18 = icmp ne %struct.basic_block_def* %13, null, !dbg !12337
  br i1 %tobool18, label %if.then19, label %if.end24, !dbg !12339

if.then19:                                        ; preds = %if.end16
  %call20 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12340
  %tobool21 = icmp ne i8 %call20, 0, !dbg !12340
  br i1 %tobool21, label %if.else, label %if.then22, !dbg !12343

if.then22:                                        ; preds = %if.then19
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !12344
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %14, i32 1), !dbg !12345
  br label %if.end23, !dbg !12345

if.else:                                          ; preds = %if.then19
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !12346
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %15, i32 1), !dbg !12347
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then22
  br label %if.end24, !dbg !12348

if.end24:                                         ; preds = %if.end23, %if.end16
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !12349
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %retval, align 8, !dbg !12350
  br label %return, !dbg !12350

return:                                           ; preds = %if.end24, %if.then6, %if.then2, %if.then
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !12351
  ret %union.gimple_statement_d* %17, !dbg !12351
}

declare dso_local %union.tree_node* @target_for_debug_bind(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !12352 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !12355, metadata !DIExpression()), !dbg !12356
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12357, metadata !DIExpression()), !dbg !12356
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !12358, metadata !DIExpression()), !dbg !12356
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !12356
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !12356
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !12356
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12356

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !12356
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !12356
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !12356
  br label %cond.end, !dbg !12356

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12356

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12356
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !12356
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !12356
  %tobool1 = icmp ne i32 %call, 0, !dbg !12356
  %lnot = xor i1 %tobool1, true, !dbg !12356
  %lnot.ext = zext i1 %lnot to i32, !dbg !12356
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !12356
  %5 = load i32, i32* %extend, align 4, !dbg !12359
  %tobool2 = icmp ne i32 %5, 0, !dbg !12359
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12356

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !12359
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !12359
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !12359
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !12359
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !12359
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !12359
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !12359
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !12359
  br label %if.end, !dbg !12359

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !12356
  ret i32 %12, !dbg !12356
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !12361 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !12364, metadata !DIExpression()), !dbg !12365
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !12366, metadata !DIExpression()), !dbg !12365
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !12367, metadata !DIExpression()), !dbg !12365
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12365
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !12365
  %1 = load i32, i32* %num, align 8, !dbg !12365
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12365
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !12365
  %3 = load i32, i32* %alloc, align 4, !dbg !12365
  %cmp = icmp ult i32 %1, %3, !dbg !12365
  %conv = zext i1 %cmp to i32, !dbg !12365
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12365
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !12365
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12365
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !12365
  %6 = load i32, i32* %num1, align 8, !dbg !12365
  %inc = add i32 %6, 1, !dbg !12365
  store i32 %inc, i32* %num1, align 8, !dbg !12365
  %idxprom = zext i32 %6 to i64, !dbg !12365
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !12365
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !12365
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !12365
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !12365
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !12365
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !12365
  ret %union.gimple_statement_d** %9, !dbg !12365
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !12368 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !12371, metadata !DIExpression()), !dbg !12372
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12373, metadata !DIExpression()), !dbg !12372
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12372
  %cmp = icmp sge i32 %0, 0, !dbg !12372
  %conv = zext i1 %cmp to i32, !dbg !12372
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12372
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !12372
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12372

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12372
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !12372
  %3 = load i32, i32* %alloc, align 4, !dbg !12372
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !12372
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !12372
  %5 = load i32, i32* %num, align 8, !dbg !12372
  %sub = sub i32 %3, %5, !dbg !12372
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !12372
  %cmp1 = icmp uge i32 %sub, %6, !dbg !12372
  %conv2 = zext i1 %cmp1 to i32, !dbg !12372
  br label %cond.end, !dbg !12372

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !12372
  %tobool3 = icmp ne i32 %7, 0, !dbg !12372
  %lnot = xor i1 %tobool3, true, !dbg !12372
  %lnot.ext = zext i1 %lnot to i32, !dbg !12372
  br label %cond.end, !dbg !12372

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !12372
  ret i32 %cond, !dbg !12372
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local %union.tree_node* @blocks_nreverse(%union.tree_node*) #2

declare dso_local %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remapped_type(%union.tree_node* %type, %struct.copy_body_data* %id) #0 !dbg !12374 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %node = alloca %union.tree_node**, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12375, metadata !DIExpression()), !dbg !12376
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12377, metadata !DIExpression()), !dbg !12378
  call void @llvm.dbg.declare(metadata %union.tree_node*** %node, metadata !12379, metadata !DIExpression()), !dbg !12380
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12381
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !12383
  br i1 %cmp, label %if.then, label %if.end, !dbg !12384

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12385
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !12386
  br label %return, !dbg !12386

if.end:                                           ; preds = %entry
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12387
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 6, !dbg !12388
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !12388
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12389
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !12389
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %3, i8* %5), !dbg !12390
  %6 = bitcast i8** %call to %union.tree_node**, !dbg !12391
  store %union.tree_node** %6, %union.tree_node*** %node, align 8, !dbg !12392
  %7 = load %union.tree_node**, %union.tree_node*** %node, align 8, !dbg !12393
  %tobool = icmp ne %union.tree_node** %7, null, !dbg !12393
  br i1 %tobool, label %if.then1, label %if.else, !dbg !12395

if.then1:                                         ; preds = %if.end
  %8 = load %union.tree_node**, %union.tree_node*** %node, align 8, !dbg !12396
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !12397
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !12398
  br label %return, !dbg !12398

if.else:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12399
  br label %return, !dbg !12399

return:                                           ; preds = %if.else, %if.then1, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12400
  ret %union.tree_node* %10, !dbg !12400
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_cfg_body(%struct.copy_body_data* %id, i64 %count, i32 %frequency_scale, %struct.basic_block_def* %entry_block_map, %struct.basic_block_def* %exit_block_map) #0 !dbg !12401 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %count.addr = alloca i64, align 8
  %frequency_scale.addr = alloca i32, align 4
  %entry_block_map.addr = alloca %struct.basic_block_def*, align 8
  %exit_block_map.addr = alloca %struct.basic_block_def*, align 8
  %callee_fndecl = alloca %union.tree_node*, align 8
  %src_cfun = alloca %struct.function*, align 8
  %cfun_to_copy = alloca %struct.function*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %new_fndecl = alloca %union.tree_node*, align 8
  %count_scale = alloca i64, align 8
  %last = alloca i32, align 4
  %new_bb = alloca %struct.basic_block_def*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12402, metadata !DIExpression()), !dbg !12403
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !12404, metadata !DIExpression()), !dbg !12405
  store i32 %frequency_scale, i32* %frequency_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frequency_scale.addr, metadata !12406, metadata !DIExpression()), !dbg !12407
  store %struct.basic_block_def* %entry_block_map, %struct.basic_block_def** %entry_block_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_block_map.addr, metadata !12408, metadata !DIExpression()), !dbg !12409
  store %struct.basic_block_def* %exit_block_map, %struct.basic_block_def** %exit_block_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_block_map.addr, metadata !12410, metadata !DIExpression()), !dbg !12411
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee_fndecl, metadata !12412, metadata !DIExpression()), !dbg !12413
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12414
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 0, !dbg !12415
  %1 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !12415
  store %union.tree_node* %1, %union.tree_node** %callee_fndecl, align 8, !dbg !12413
  call void @llvm.dbg.declare(metadata %struct.function** %src_cfun, metadata !12416, metadata !DIExpression()), !dbg !12417
  %2 = load %union.tree_node*, %union.tree_node** %callee_fndecl, align 8, !dbg !12418
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !12418
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !12418
  %3 = load %struct.function*, %struct.function** %f, align 8, !dbg !12418
  store %struct.function* %3, %struct.function** %src_cfun, align 8, !dbg !12417
  call void @llvm.dbg.declare(metadata %struct.function** %cfun_to_copy, metadata !12419, metadata !DIExpression()), !dbg !12420
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12421, metadata !DIExpression()), !dbg !12422
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_fndecl, metadata !12423, metadata !DIExpression()), !dbg !12424
  store %union.tree_node* null, %union.tree_node** %new_fndecl, align 8, !dbg !12424
  call void @llvm.dbg.declare(metadata i64* %count_scale, metadata !12425, metadata !DIExpression()), !dbg !12426
  call void @llvm.dbg.declare(metadata i32* %last, metadata !12427, metadata !DIExpression()), !dbg !12428
  %4 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !12429
  %cfg = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1, !dbg !12429
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12429
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !12429
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !12429
  %count1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 8, !dbg !12431
  %7 = load i64, i64* %count1, align 8, !dbg !12431
  %tobool = icmp ne i64 %7, 0, !dbg !12429
  br i1 %tobool, label %if.then, label %if.else, !dbg !12432

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %count.addr, align 8, !dbg !12433
  %mul = mul nsw i64 10000, %8, !dbg !12434
  %9 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !12435
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 1, !dbg !12435
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !12435
  %x_entry_block_ptr3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !12435
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr3, align 8, !dbg !12435
  %count4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 8, !dbg !12436
  %12 = load i64, i64* %count4, align 8, !dbg !12436
  %div = sdiv i64 %mul, %12, !dbg !12437
  store i64 %div, i64* %count_scale, align 8, !dbg !12438
  br label %if.end, !dbg !12439

if.else:                                          ; preds = %entry
  store i64 10000, i64* %count_scale, align 8, !dbg !12440
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @gimple_register_cfg_hooks(), !dbg !12441
  %13 = load %union.tree_node*, %union.tree_node** %callee_fndecl, align 8, !dbg !12442
  %function_decl5 = bitcast %union.tree_node* %13 to %struct.tree_function_decl*, !dbg !12442
  %f6 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl5, i32 0, i32 1, !dbg !12442
  %14 = load %struct.function*, %struct.function** %f6, align 8, !dbg !12442
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 1, !dbg !12442
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !12442
  %x_entry_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !12442
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr8, align 8, !dbg !12442
  %tobool9 = icmp ne %struct.basic_block_def* %16, null, !dbg !12442
  br i1 %tobool9, label %cond.false, label %cond.true, !dbg !12442

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2063, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12442
  br label %cond.end, !dbg !12442

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !12442

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12442
  %17 = load %union.tree_node*, %union.tree_node** %callee_fndecl, align 8, !dbg !12443
  %function_decl10 = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !12443
  %f11 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 1, !dbg !12443
  %18 = load %struct.function*, %struct.function** %f11, align 8, !dbg !12443
  %19 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12444
  %src_cfun12 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %19, i32 0, i32 4, !dbg !12445
  store %struct.function* %18, %struct.function** %src_cfun12, align 8, !dbg !12446
  store %struct.function* %18, %struct.function** %cfun_to_copy, align 8, !dbg !12447
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_block_map.addr, align 8, !dbg !12448
  %21 = bitcast %struct.basic_block_def* %20 to i8*, !dbg !12448
  %22 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12449
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 1, !dbg !12449
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !12449
  %x_entry_block_ptr14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 0, !dbg !12449
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr14, align 8, !dbg !12449
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 2, !dbg !12450
  store i8* %21, i8** %aux, align 8, !dbg !12451
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block_map.addr, align 8, !dbg !12452
  %26 = bitcast %struct.basic_block_def* %25 to i8*, !dbg !12452
  %27 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12453
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 1, !dbg !12453
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !12453
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 1, !dbg !12453
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12453
  %aux16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 2, !dbg !12454
  store i8* %26, i8** %aux16, align 8, !dbg !12455
  %30 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12456
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 1, !dbg !12456
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !12456
  %x_entry_block_ptr18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 0, !dbg !12456
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr18, align 8, !dbg !12456
  %33 = bitcast %struct.basic_block_def* %32 to i8*, !dbg !12456
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_block_map.addr, align 8, !dbg !12457
  %aux19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 2, !dbg !12458
  store i8* %33, i8** %aux19, align 8, !dbg !12459
  %35 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12460
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 1, !dbg !12460
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !12460
  %x_exit_block_ptr21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 1, !dbg !12460
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr21, align 8, !dbg !12460
  %38 = bitcast %struct.basic_block_def* %37 to i8*, !dbg !12460
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block_map.addr, align 8, !dbg !12461
  %aux22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 2, !dbg !12462
  store i8* %38, i8** %aux22, align 8, !dbg !12463
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12464
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !12464
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !12466
  %41 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !12466
  %tobool23 = icmp ne %struct.eh_status* %41, null, !dbg !12464
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !12467

if.then24:                                        ; preds = %cond.end
  %42 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12468
  %43 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12469
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %43, i32 0, i32 10, !dbg !12470
  %44 = load i32, i32* %eh_lp_nr, align 8, !dbg !12470
  %45 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12471
  %46 = bitcast %struct.copy_body_data* %45 to i8*, !dbg !12471
  %call = call %struct.pointer_map_t* @duplicate_eh_regions(%struct.function* %42, %struct.eh_region_d* null, i32 %44, %union.tree_node* (%union.tree_node*, i8*)* @remap_decl_1, i8* %46), !dbg !12472
  %47 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12473
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %47, i32 0, i32 11, !dbg !12474
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %eh_map, align 8, !dbg !12475
  br label %if.end25, !dbg !12473

if.end25:                                         ; preds = %if.then24, %cond.end
  %48 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12476
  %cfg26 = getelementptr inbounds %struct.function, %struct.function* %48, i32 0, i32 1, !dbg !12476
  %49 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg26, align 8, !dbg !12476
  %x_entry_block_ptr27 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %49, i32 0, i32 0, !dbg !12476
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr27, align 8, !dbg !12476
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 6, !dbg !12476
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !12476
  store %struct.basic_block_def* %51, %struct.basic_block_def** %bb, align 8, !dbg !12476
  br label %for.cond, !dbg !12476

for.cond:                                         ; preds = %for.inc, %if.end25
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12478
  %53 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12478
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %53, i32 0, i32 1, !dbg !12478
  %54 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !12478
  %x_exit_block_ptr29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %54, i32 0, i32 1, !dbg !12478
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr29, align 8, !dbg !12478
  %cmp = icmp ne %struct.basic_block_def* %52, %55, !dbg !12478
  br i1 %cmp, label %for.body, label %for.end, !dbg !12476

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !12480, metadata !DIExpression()), !dbg !12482
  %56 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12483
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12484
  %58 = load i32, i32* %frequency_scale.addr, align 4, !dbg !12485
  %59 = load i64, i64* %count_scale, align 8, !dbg !12486
  %call30 = call %struct.basic_block_def* @copy_bb(%struct.copy_body_data* %56, %struct.basic_block_def* %57, i32 %58, i64 %59), !dbg !12487
  store %struct.basic_block_def* %call30, %struct.basic_block_def** %new_bb, align 8, !dbg !12482
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12488
  %61 = bitcast %struct.basic_block_def* %60 to i8*, !dbg !12488
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12489
  %aux31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 2, !dbg !12490
  store i8* %61, i8** %aux31, align 8, !dbg !12491
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12492
  %64 = bitcast %struct.basic_block_def* %63 to i8*, !dbg !12492
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12493
  %aux32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 2, !dbg !12494
  store i8* %64, i8** %aux32, align 8, !dbg !12495
  br label %for.inc, !dbg !12496

for.inc:                                          ; preds = %for.body
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12478
  %next_bb33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 6, !dbg !12478
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb33, align 8, !dbg !12478
  store %struct.basic_block_def* %67, %struct.basic_block_def** %bb, align 8, !dbg !12478
  br label %for.cond, !dbg !12478, !llvm.loop !12497

for.end:                                          ; preds = %for.cond
  %68 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12499
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %68, i64 0, !dbg !12499
  %cfg35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 1, !dbg !12499
  %69 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg35, align 8, !dbg !12499
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %69, i32 0, i32 5, !dbg !12499
  %70 = load i32, i32* %x_last_basic_block, align 8, !dbg !12499
  store i32 %70, i32* %last, align 4, !dbg !12500
  %71 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12501
  %cfg36 = getelementptr inbounds %struct.function, %struct.function* %71, i32 0, i32 1, !dbg !12501
  %72 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg36, align 8, !dbg !12501
  %x_entry_block_ptr37 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %72, i32 0, i32 0, !dbg !12501
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr37, align 8, !dbg !12501
  store %struct.basic_block_def* %73, %struct.basic_block_def** %bb, align 8, !dbg !12501
  br label %for.cond38, !dbg !12501

for.cond38:                                       ; preds = %for.inc41, %for.end
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12503
  %tobool39 = icmp ne %struct.basic_block_def* %74, null, !dbg !12501
  br i1 %tobool39, label %for.body40, label %for.end43, !dbg !12501

for.body40:                                       ; preds = %for.cond38
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12505
  %76 = load i64, i64* %count_scale, align 8, !dbg !12506
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block_map.addr, align 8, !dbg !12507
  call void @copy_edges_for_bb(%struct.basic_block_def* %75, i64 %76, %struct.basic_block_def* %77), !dbg !12508
  br label %for.inc41, !dbg !12508

for.inc41:                                        ; preds = %for.body40
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12503
  %next_bb42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 6, !dbg !12503
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb42, align 8, !dbg !12503
  store %struct.basic_block_def* %79, %struct.basic_block_def** %bb, align 8, !dbg !12503
  br label %for.cond38, !dbg !12503, !llvm.loop !12509

for.end43:                                        ; preds = %for.cond38
  %80 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12511
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %80, i64 0, !dbg !12511
  %call45 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr44), !dbg !12513
  %tobool46 = icmp ne i8 %call45, 0, !dbg !12513
  br i1 %tobool46, label %if.then47, label %if.end56, !dbg !12514

if.then47:                                        ; preds = %for.end43
  %81 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12515
  %cfg48 = getelementptr inbounds %struct.function, %struct.function* %81, i32 0, i32 1, !dbg !12515
  %82 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg48, align 8, !dbg !12515
  %x_entry_block_ptr49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %82, i32 0, i32 0, !dbg !12515
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr49, align 8, !dbg !12515
  store %struct.basic_block_def* %83, %struct.basic_block_def** %bb, align 8, !dbg !12515
  br label %for.cond50, !dbg !12515

for.cond50:                                       ; preds = %for.inc53, %if.then47
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12517
  %tobool51 = icmp ne %struct.basic_block_def* %84, null, !dbg !12515
  br i1 %tobool51, label %for.body52, label %for.end55, !dbg !12515

for.body52:                                       ; preds = %for.cond50
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12519
  %86 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12520
  call void @copy_phis_for_bb(%struct.basic_block_def* %85, %struct.copy_body_data* %86), !dbg !12521
  br label %for.inc53, !dbg !12521

for.inc53:                                        ; preds = %for.body52
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12517
  %next_bb54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 6, !dbg !12517
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb54, align 8, !dbg !12517
  store %struct.basic_block_def* %88, %struct.basic_block_def** %bb, align 8, !dbg !12517
  br label %for.cond50, !dbg !12517, !llvm.loop !12522

for.end55:                                        ; preds = %for.cond50
  br label %if.end56, !dbg !12523

if.end56:                                         ; preds = %for.end55, %for.end43
  %89 = load %struct.function*, %struct.function** %cfun_to_copy, align 8, !dbg !12524
  %cfg57 = getelementptr inbounds %struct.function, %struct.function* %89, i32 0, i32 1, !dbg !12524
  %90 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg57, align 8, !dbg !12524
  %x_entry_block_ptr58 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %90, i32 0, i32 0, !dbg !12524
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr58, align 8, !dbg !12524
  store %struct.basic_block_def* %91, %struct.basic_block_def** %bb, align 8, !dbg !12524
  br label %for.cond59, !dbg !12524

for.cond59:                                       ; preds = %for.inc65, %if.end56
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12526
  %tobool60 = icmp ne %struct.basic_block_def* %92, null, !dbg !12524
  br i1 %tobool60, label %for.body61, label %for.end67, !dbg !12524

for.body61:                                       ; preds = %for.cond59
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12528
  %aux62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %93, i32 0, i32 2, !dbg !12530
  %94 = load i8*, i8** %aux62, align 8, !dbg !12530
  %95 = bitcast i8* %94 to %struct.basic_block_def*, !dbg !12531
  %aux63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 2, !dbg !12532
  store i8* null, i8** %aux63, align 8, !dbg !12533
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12534
  %aux64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 2, !dbg !12535
  store i8* null, i8** %aux64, align 8, !dbg !12536
  br label %for.inc65, !dbg !12537

for.inc65:                                        ; preds = %for.body61
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12526
  %next_bb66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 6, !dbg !12526
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb66, align 8, !dbg !12526
  store %struct.basic_block_def* %98, %struct.basic_block_def** %bb, align 8, !dbg !12526
  br label %for.cond59, !dbg !12526, !llvm.loop !12538

for.end67:                                        ; preds = %for.cond59
  br label %for.cond68, !dbg !12540

for.cond68:                                       ; preds = %for.inc86, %for.end67
  %99 = load i32, i32* %last, align 4, !dbg !12541
  %100 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12544
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %100, i64 0, !dbg !12544
  %cfg70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 1, !dbg !12544
  %101 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg70, align 8, !dbg !12544
  %x_last_basic_block71 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %101, i32 0, i32 5, !dbg !12544
  %102 = load i32, i32* %x_last_basic_block71, align 8, !dbg !12544
  %cmp72 = icmp slt i32 %99, %102, !dbg !12545
  br i1 %cmp72, label %for.body73, label %for.end87, !dbg !12546

for.body73:                                       ; preds = %for.cond68
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12547
  %add.ptr74 = getelementptr inbounds %struct.function, %struct.function* %103, i64 0, !dbg !12547
  %cfg75 = getelementptr inbounds %struct.function, %struct.function* %add.ptr74, i32 0, i32 1, !dbg !12547
  %104 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg75, align 8, !dbg !12547
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %104, i32 0, i32 2, !dbg !12547
  %105 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !12547
  %tobool76 = icmp ne %struct.VEC_basic_block_gc* %105, null, !dbg !12547
  br i1 %tobool76, label %cond.true77, label %cond.false81, !dbg !12547

cond.true77:                                      ; preds = %for.body73
  %106 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12547
  %add.ptr78 = getelementptr inbounds %struct.function, %struct.function* %106, i64 0, !dbg !12547
  %cfg79 = getelementptr inbounds %struct.function, %struct.function* %add.ptr78, i32 0, i32 1, !dbg !12547
  %107 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg79, align 8, !dbg !12547
  %x_basic_block_info80 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %107, i32 0, i32 2, !dbg !12547
  %108 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info80, align 8, !dbg !12547
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %108, i32 0, i32 0, !dbg !12547
  br label %cond.end82, !dbg !12547

cond.false81:                                     ; preds = %for.body73
  br label %cond.end82, !dbg !12547

cond.end82:                                       ; preds = %cond.false81, %cond.true77
  %cond83 = phi %struct.VEC_basic_block_base* [ %base, %cond.true77 ], [ null, %cond.false81 ], !dbg !12547
  %109 = load i32, i32* %last, align 4, !dbg !12547
  %call84 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond83, i32 %109), !dbg !12547
  %aux85 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call84, i32 0, i32 2, !dbg !12548
  store i8* null, i8** %aux85, align 8, !dbg !12549
  br label %for.inc86, !dbg !12547

for.inc86:                                        ; preds = %cond.end82
  %110 = load i32, i32* %last, align 4, !dbg !12550
  %inc = add nsw i32 %110, 1, !dbg !12550
  store i32 %inc, i32* %last, align 4, !dbg !12550
  br label %for.cond68, !dbg !12551, !llvm.loop !12552

for.end87:                                        ; preds = %for.cond68
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_block_map.addr, align 8, !dbg !12554
  %aux88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 2, !dbg !12555
  store i8* null, i8** %aux88, align 8, !dbg !12556
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block_map.addr, align 8, !dbg !12557
  %aux89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 2, !dbg !12558
  store i8* null, i8** %aux89, align 8, !dbg !12559
  %113 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12560
  %eh_map90 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %113, i32 0, i32 11, !dbg !12562
  %114 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map90, align 8, !dbg !12562
  %tobool91 = icmp ne %struct.pointer_map_t* %114, null, !dbg !12560
  br i1 %tobool91, label %if.then92, label %if.end95, !dbg !12563

if.then92:                                        ; preds = %for.end87
  %115 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12564
  %eh_map93 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %115, i32 0, i32 11, !dbg !12566
  %116 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map93, align 8, !dbg !12566
  call void @pointer_map_destroy(%struct.pointer_map_t* %116), !dbg !12567
  %117 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12568
  %eh_map94 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %117, i32 0, i32 11, !dbg !12569
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %eh_map94, align 8, !dbg !12570
  br label %if.end95, !dbg !12571

if.end95:                                         ; preds = %if.then92, %for.end87
  %118 = load %union.tree_node*, %union.tree_node** %new_fndecl, align 8, !dbg !12572
  ret %union.tree_node* %118, !dbg !12573
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_debug_stmts(%struct.copy_body_data* %id) #0 !dbg !12574 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %i = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12575, metadata !DIExpression()), !dbg !12576
  call void @llvm.dbg.declare(metadata i64* %i, metadata !12577, metadata !DIExpression()), !dbg !12578
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12579, metadata !DIExpression()), !dbg !12580
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12581
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 21, !dbg !12583
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !12583
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !12581
  br i1 %tobool, label %if.end, label %if.then, !dbg !12584

if.then:                                          ; preds = %entry
  br label %return, !dbg !12585

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !dbg !12586
  br label %for.cond, !dbg !12588

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12589
  %debug_stmts1 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %2, i32 0, i32 21, !dbg !12589
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts1, align 8, !dbg !12589
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %3, null, !dbg !12589
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !12589

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12589
  %debug_stmts3 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %4, i32 0, i32 21, !dbg !12589
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts3, align 8, !dbg !12589
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %5, i32 0, i32 0, !dbg !12589
  br label %cond.end, !dbg !12589

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !12589

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12589
  %6 = load i64, i64* %i, align 8, !dbg !12589
  %conv = trunc i64 %6 to i32, !dbg !12589
  %call = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %conv, %union.gimple_statement_d** %stmt), !dbg !12589
  %tobool4 = icmp ne i32 %call, 0, !dbg !12591
  br i1 %tobool4, label %for.body, label %for.end, !dbg !12591

for.body:                                         ; preds = %cond.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12592
  %8 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12593
  call void @copy_debug_stmt(%union.gimple_statement_d* %7, %struct.copy_body_data* %8), !dbg !12594
  br label %for.inc, !dbg !12594

for.inc:                                          ; preds = %for.body
  %9 = load i64, i64* %i, align 8, !dbg !12595
  %inc = add i64 %9, 1, !dbg !12595
  store i64 %inc, i64* %i, align 8, !dbg !12595
  br label %for.cond, !dbg !12596, !llvm.loop !12597

for.end:                                          ; preds = %cond.end
  %10 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12599
  %debug_stmts5 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %10, i32 0, i32 21, !dbg !12599
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %debug_stmts5), !dbg !12599
  br label %return, !dbg !12600

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !12600
}

declare dso_local %struct.pointer_map_t* @duplicate_eh_regions(%struct.function*, %struct.eh_region_d*, i32, %union.tree_node* (%union.tree_node*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @remap_decl_1(%union.tree_node* %decl, i8* %data) #0 !dbg !12601 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !12604, metadata !DIExpression()), !dbg !12605
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !12606, metadata !DIExpression()), !dbg !12607
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12608
  %1 = load i8*, i8** %data.addr, align 8, !dbg !12609
  %2 = bitcast i8* %1 to %struct.copy_body_data*, !dbg !12610
  %call = call %union.tree_node* @remap_decl(%union.tree_node* %0, %struct.copy_body_data* %2), !dbg !12611
  ret %union.tree_node* %call, !dbg !12612
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @copy_bb(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, i32 %frequency_scale, i64 %count_scale) #0 !dbg !12613 {
entry:
  %id.addr = alloca %struct.copy_body_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %frequency_scale.addr = alloca i32, align 4
  %count_scale.addr = alloca i64, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %copy_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %seq_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %copy_basic_block = alloca %struct.basic_block_def*, align 8
  %decl = alloca %union.tree_node*, align 8
  %freq = alloca i64, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp8 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %orig_stmt = alloca %union.gimple_statement_d*, align 8
  %new_rhs = alloca %union.tree_node*, align 8
  %tmp38 = alloca %struct.gimple_stmt_iterator, align 8
  %fn = alloca %union.tree_node*, align 8
  %p = alloca %union.tree_node*, align 8
  %new_call = alloca %union.gimple_statement_d*, align 8
  %argarray = alloca %struct.VEC_tree_heap*, align 8
  %nargs = alloca i64, align 8
  %n = alloca i64, align 8
  %nargs109 = alloca i64, align 8
  %count113 = alloca %union.tree_node*, align 8
  %p114 = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %flags = alloca i32, align 4
  %edge_freq = alloca i32, align 4
  %dest = alloca %struct.cgraph_node*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %def = alloca %union.tree_node*, align 8
  %tmp297 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !12616, metadata !DIExpression()), !dbg !12617
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12618, metadata !DIExpression()), !dbg !12619
  store i32 %frequency_scale, i32* %frequency_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frequency_scale.addr, metadata !12620, metadata !DIExpression()), !dbg !12621
  store i64 %count_scale, i64* %count_scale.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count_scale.addr, metadata !12622, metadata !DIExpression()), !dbg !12623
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12624, metadata !DIExpression()), !dbg !12625
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !12626, metadata !DIExpression()), !dbg !12627
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %seq_gsi, metadata !12628, metadata !DIExpression()), !dbg !12629
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %copy_basic_block, metadata !12630, metadata !DIExpression()), !dbg !12631
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !12632, metadata !DIExpression()), !dbg !12633
  call void @llvm.dbg.declare(metadata i64* %freq, metadata !12634, metadata !DIExpression()), !dbg !12635
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12636
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 5, !dbg !12637
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !12637
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 2, !dbg !12638
  %2 = load i8*, i8** %aux, align 8, !dbg !12638
  %3 = bitcast i8* %2 to %struct.basic_block_def*, !dbg !12639
  %call = call %struct.basic_block_def* @create_basic_block(i8* null, i8* null, %struct.basic_block_def* %3), !dbg !12640
  store %struct.basic_block_def* %call, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12641
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12642
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 8, !dbg !12643
  %5 = load i64, i64* %count, align 8, !dbg !12643
  %6 = load i64, i64* %count_scale.addr, align 8, !dbg !12644
  %mul = mul nsw i64 %5, %6, !dbg !12645
  %div = sdiv i64 %mul, 10000, !dbg !12646
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12647
  %count1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 8, !dbg !12648
  store i64 %div, i64* %count1, align 8, !dbg !12649
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12650
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 11, !dbg !12651
  %9 = load i32, i32* %frequency, align 8, !dbg !12651
  %conv = sext i32 %9 to i64, !dbg !12652
  %10 = load i32, i32* %frequency_scale.addr, align 4, !dbg !12653
  %conv2 = sext i32 %10 to i64, !dbg !12653
  %mul3 = mul nsw i64 %conv, %conv2, !dbg !12654
  %div4 = sdiv i64 %mul3, 10000, !dbg !12655
  store i64 %div4, i64* %freq, align 8, !dbg !12656
  %11 = load i64, i64* %freq, align 8, !dbg !12657
  %cmp = icmp sgt i64 %11, 10000, !dbg !12659
  br i1 %cmp, label %if.then, label %if.end, !dbg !12660

if.then:                                          ; preds = %entry
  store i64 10000, i64* %freq, align 8, !dbg !12661
  br label %if.end, !dbg !12662

if.end:                                           ; preds = %if.then, %entry
  %12 = load i64, i64* %freq, align 8, !dbg !12663
  %conv6 = trunc i64 %12 to i32, !dbg !12663
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12664
  %frequency7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 11, !dbg !12665
  store i32 %conv6, i32* %frequency7, align 8, !dbg !12666
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12667
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %14), !dbg !12668
  %15 = bitcast %struct.gimple_stmt_iterator* %copy_gsi to i8*, !dbg !12668
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12668
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !12668
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12669
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp8, %struct.basic_block_def* %17), !dbg !12671
  %18 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12671
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp8 to i8*, !dbg !12671
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !12671
  br label %for.cond, !dbg !12672

for.cond:                                         ; preds = %for.inc298, %if.end
  %call9 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12673
  %tobool = icmp ne i8 %call9, 0, !dbg !12675
  %lnot = xor i1 %tobool, true, !dbg !12675
  br i1 %lnot, label %for.body, label %for.end299, !dbg !12676

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12677, metadata !DIExpression()), !dbg !12679
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12680
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %stmt, align 8, !dbg !12679
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_stmt, metadata !12681, metadata !DIExpression()), !dbg !12682
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12683
  store %union.gimple_statement_d* %20, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !12682
  %21 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12684
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %21, i32 0, i32 15, !dbg !12685
  store i8 0, i8* %regimplify, align 2, !dbg !12686
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12687
  %23 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12688
  %call11 = call %union.gimple_statement_d* @remap_gimple_stmt(%union.gimple_statement_d* %22, %struct.copy_body_data* %23), !dbg !12689
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt, align 8, !dbg !12690
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12691
  %call12 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %24), !dbg !12693
  %tobool13 = icmp ne i8 %call12, 0, !dbg !12693
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !12694

if.then14:                                        ; preds = %for.body
  br label %for.inc298, !dbg !12695

if.end15:                                         ; preds = %for.body
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12696
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !12696
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12697
  %27 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12698
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %27, i32 0, i32 4, !dbg !12699
  %28 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !12699
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !12700
  call void @gimple_duplicate_stmt_histograms(%struct.function* %add.ptr, %union.gimple_statement_d* %26, %struct.function* %28, %union.gimple_statement_d* %29), !dbg !12701
  %30 = bitcast %struct.gimple_stmt_iterator* %seq_gsi to i8*, !dbg !12702
  %31 = bitcast %struct.gimple_stmt_iterator* %copy_gsi to i8*, !dbg !12702
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false), !dbg !12702
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12703
  %call16 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %32), !dbg !12705
  %conv17 = zext i8 %call16 to i32, !dbg !12705
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !12705
  br i1 %tobool18, label %land.lhs.true, label %if.end30, !dbg !12706

land.lhs.true:                                    ; preds = %if.end15
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12707
  %call19 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %33), !dbg !12708
  %cmp20 = icmp eq i32 %call19, 116, !dbg !12709
  br i1 %cmp20, label %land.lhs.true22, label %if.end30, !dbg !12710

land.lhs.true22:                                  ; preds = %land.lhs.true
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12711
  %call23 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %34), !dbg !12712
  %call24 = call zeroext i8 @is_gimple_val(%union.tree_node* %call23), !dbg !12713
  %tobool25 = icmp ne i8 %call24, 0, !dbg !12713
  br i1 %tobool25, label %if.end30, label %if.then26, !dbg !12714

if.then26:                                        ; preds = %land.lhs.true22
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_rhs, metadata !12715, metadata !DIExpression()), !dbg !12717
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12718
  %call27 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %35), !dbg !12719
  %call28 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %seq_gsi, %union.tree_node* %call27, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0), !dbg !12720
  store %union.tree_node* %call28, %union.tree_node** %new_rhs, align 8, !dbg !12721
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12722
  %37 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !12723
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %36, %union.tree_node* %37), !dbg !12724
  %38 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12725
  %regimplify29 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %38, i32 0, i32 15, !dbg !12726
  store i8 0, i8* %regimplify29, align 2, !dbg !12727
  br label %if.end30, !dbg !12728

if.end30:                                         ; preds = %if.then26, %land.lhs.true22, %land.lhs.true, %if.end15
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12729
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %seq_gsi, %union.gimple_statement_d* %39, i32 0), !dbg !12730
  %40 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12731
  %regimplify31 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %40, i32 0, i32 15, !dbg !12733
  %41 = load i8, i8* %regimplify31, align 2, !dbg !12733
  %tobool32 = icmp ne i8 %41, 0, !dbg !12731
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !12734

if.then33:                                        ; preds = %if.end30
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12735
  call void @gimple_regimplify_operands(%union.gimple_statement_d* %42, %struct.gimple_stmt_iterator* %seq_gsi), !dbg !12736
  br label %if.end34, !dbg !12736

if.end34:                                         ; preds = %if.then33, %if.end30
  %call35 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi), !dbg !12737
  %tobool36 = icmp ne i8 %call35, 0, !dbg !12737
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !12739

if.then37:                                        ; preds = %if.end34
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12740
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp38, %struct.basic_block_def* %43), !dbg !12741
  %44 = bitcast %struct.gimple_stmt_iterator* %copy_gsi to i8*, !dbg !12741
  %45 = bitcast %struct.gimple_stmt_iterator* %tmp38 to i8*, !dbg !12741
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false), !dbg !12741
  br label %if.end39, !dbg !12742

if.else:                                          ; preds = %if.end34
  call void @gsi_next(%struct.gimple_stmt_iterator* %copy_gsi), !dbg !12743
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then37
  br label %do.body, !dbg !12744

do.body:                                          ; preds = %do.cond, %if.end39
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !12745, metadata !DIExpression()), !dbg !12747
  %call40 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi), !dbg !12748
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %stmt, align 8, !dbg !12749
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12750
  %call41 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %46), !dbg !12752
  %conv42 = zext i8 %call41 to i32, !dbg !12752
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !12752
  br i1 %tobool43, label %land.lhs.true44, label %if.else89, !dbg !12753

land.lhs.true44:                                  ; preds = %do.body
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12754
  %call45 = call zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %47), !dbg !12755
  %conv46 = zext i8 %call45 to i32, !dbg !12755
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !12755
  br i1 %tobool47, label %land.lhs.true48, label %if.else89, !dbg !12756

land.lhs.true48:                                  ; preds = %land.lhs.true44
  %48 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12757
  %gimple_call = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %48, i32 0, i32 9, !dbg !12758
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call, align 8, !dbg !12758
  %tobool49 = icmp ne %union.gimple_statement_d* %49, null, !dbg !12757
  br i1 %tobool49, label %if.then50, label %if.else89, !dbg !12759

if.then50:                                        ; preds = %land.lhs.true48
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !12760, metadata !DIExpression()), !dbg !12762
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_call, metadata !12763, metadata !DIExpression()), !dbg !12764
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %argarray, metadata !12765, metadata !DIExpression()), !dbg !12766
  call void @llvm.dbg.declare(metadata i64* %nargs, metadata !12767, metadata !DIExpression()), !dbg !12768
  %50 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12769
  %gimple_call51 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %50, i32 0, i32 9, !dbg !12770
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call51, align 8, !dbg !12770
  %call52 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %51), !dbg !12771
  %conv53 = zext i32 %call52 to i64, !dbg !12771
  store i64 %conv53, i64* %nargs, align 8, !dbg !12768
  call void @llvm.dbg.declare(metadata i64* %n, metadata !12772, metadata !DIExpression()), !dbg !12773
  %52 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12774
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %52, i32 0, i32 0, !dbg !12774
  %53 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !12774
  %decl_non_common = bitcast %union.tree_node* %53 to %struct.tree_decl_non_common*, !dbg !12774
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !12774
  %54 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !12774
  store %union.tree_node* %54, %union.tree_node** %p, align 8, !dbg !12776
  br label %for.cond54, !dbg !12777

for.cond54:                                       ; preds = %for.inc, %if.then50
  %55 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !12778
  %tobool55 = icmp ne %union.tree_node* %55, null, !dbg !12780
  br i1 %tobool55, label %for.body56, label %for.end, !dbg !12780

for.body56:                                       ; preds = %for.cond54
  %56 = load i64, i64* %nargs, align 8, !dbg !12781
  %dec = add i64 %56, -1, !dbg !12781
  store i64 %dec, i64* %nargs, align 8, !dbg !12781
  br label %for.inc, !dbg !12782

for.inc:                                          ; preds = %for.body56
  %57 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !12783
  %common = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !12783
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !12783
  %58 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !12783
  store %union.tree_node* %58, %union.tree_node** %p, align 8, !dbg !12784
  br label %for.cond54, !dbg !12785, !llvm.loop !12786

for.end:                                          ; preds = %for.cond54
  %59 = load i64, i64* %nargs, align 8, !dbg !12788
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12789
  %call57 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %60), !dbg !12790
  %conv58 = zext i32 %call57 to i64, !dbg !12790
  %add = add i64 %59, %conv58, !dbg !12791
  store i64 %add, i64* %n, align 8, !dbg !12792
  %61 = load i64, i64* %n, align 8, !dbg !12793
  %conv59 = trunc i64 %61 to i32, !dbg !12793
  %call60 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %conv59), !dbg !12793
  store %struct.VEC_tree_heap* %call60, %struct.VEC_tree_heap** %argarray, align 8, !dbg !12794
  %62 = load i64, i64* %n, align 8, !dbg !12795
  %conv61 = trunc i64 %62 to i32, !dbg !12795
  call void @VEC_tree_heap_safe_grow(%struct.VEC_tree_heap** %argarray, i32 %conv61), !dbg !12795
  %63 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !12796
  %tobool62 = icmp ne %struct.VEC_tree_heap* %63, null, !dbg !12796
  br i1 %tobool62, label %cond.true, label %cond.false, !dbg !12796

cond.true:                                        ; preds = %for.end
  %64 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !12796
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %64, i32 0, i32 0, !dbg !12796
  br label %cond.end, !dbg !12796

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !12796

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12796
  %call63 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond), !dbg !12796
  %65 = bitcast %union.tree_node** %call63 to i8*, !dbg !12797
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12798
  %call64 = call %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %66, i32 0), !dbg !12799
  %67 = bitcast %union.tree_node** %call64 to i8*, !dbg !12797
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12800
  %call65 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %68), !dbg !12801
  %conv66 = zext i32 %call65 to i64, !dbg !12801
  %mul67 = mul i64 %conv66, 8, !dbg !12802
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %67, i64 %mul67, i1 false), !dbg !12797
  %69 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !12803
  %tobool68 = icmp ne %struct.VEC_tree_heap* %69, null, !dbg !12803
  br i1 %tobool68, label %cond.true69, label %cond.false71, !dbg !12803

cond.true69:                                      ; preds = %cond.end
  %70 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !12803
  %base70 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %70, i32 0, i32 0, !dbg !12803
  br label %cond.end72, !dbg !12803

cond.false71:                                     ; preds = %cond.end
  br label %cond.end72, !dbg !12803

cond.end72:                                       ; preds = %cond.false71, %cond.true69
  %cond73 = phi %struct.VEC_tree_base* [ %base70, %cond.true69 ], [ null, %cond.false71 ], !dbg !12803
  %call74 = call %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %cond73), !dbg !12803
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12804
  %call75 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %71), !dbg !12805
  %idx.ext = zext i32 %call75 to i64, !dbg !12806
  %add.ptr76 = getelementptr inbounds %union.tree_node*, %union.tree_node** %call74, i64 %idx.ext, !dbg !12806
  %72 = bitcast %union.tree_node** %add.ptr76 to i8*, !dbg !12807
  %73 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12808
  %gimple_call77 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %73, i32 0, i32 9, !dbg !12809
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call77, align 8, !dbg !12809
  %call78 = call %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %74, i32 0), !dbg !12810
  %75 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12811
  %gimple_call79 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %75, i32 0, i32 9, !dbg !12812
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call79, align 8, !dbg !12812
  %call80 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %76), !dbg !12813
  %conv81 = zext i32 %call80 to i64, !dbg !12813
  %77 = load i64, i64* %nargs, align 8, !dbg !12814
  %sub = sub i64 %conv81, %77, !dbg !12815
  %add.ptr82 = getelementptr inbounds %union.tree_node*, %union.tree_node** %call78, i64 %sub, !dbg !12816
  %78 = bitcast %union.tree_node** %add.ptr82 to i8*, !dbg !12807
  %79 = load i64, i64* %nargs, align 8, !dbg !12817
  %mul83 = mul i64 %79, 8, !dbg !12818
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %78, i64 %mul83, i1 false), !dbg !12807
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12819
  %call84 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %80), !dbg !12820
  %81 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !12821
  %call85 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %call84, %struct.VEC_tree_heap* %81), !dbg !12822
  store %union.gimple_statement_d* %call85, %union.gimple_statement_d** %new_call, align 8, !dbg !12823
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %argarray), !dbg !12824
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12825
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12826
  call void @gimple_call_copy_flags(%union.gimple_statement_d* %82, %union.gimple_statement_d* %83), !dbg !12827
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12828
  call void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %84, i8 zeroext 0), !dbg !12829
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12830
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12831
  %call86 = call i32 @gimple_location(%union.gimple_statement_d* %86), !dbg !12832
  call void @gimple_set_location(%union.gimple_statement_d* %85, i32 %call86), !dbg !12833
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12834
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12835
  %call87 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %88), !dbg !12836
  call void @gimple_set_block(%union.gimple_statement_d* %87, %union.tree_node* %call87), !dbg !12837
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12838
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12839
  %call88 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %90), !dbg !12840
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %89, %union.tree_node* %call88), !dbg !12841
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12842
  call void @gsi_replace(%struct.gimple_stmt_iterator* %copy_gsi, %union.gimple_statement_d* %91, i8 zeroext 0), !dbg !12843
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12844
  call void @gimple_set_bb(%union.gimple_statement_d* %92, %struct.basic_block_def* null), !dbg !12845
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_call, align 8, !dbg !12846
  store %union.gimple_statement_d* %93, %union.gimple_statement_d** %stmt, align 8, !dbg !12847
  br label %if.end130, !dbg !12848

if.else89:                                        ; preds = %land.lhs.true48, %land.lhs.true44, %do.body
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12849
  %call90 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %94), !dbg !12851
  %conv91 = zext i8 %call90 to i32, !dbg !12851
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !12851
  br i1 %tobool92, label %land.lhs.true93, label %if.end129, !dbg !12852

land.lhs.true93:                                  ; preds = %if.else89
  %95 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12853
  %gimple_call94 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %95, i32 0, i32 9, !dbg !12854
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call94, align 8, !dbg !12854
  %tobool95 = icmp ne %union.gimple_statement_d* %96, null, !dbg !12853
  br i1 %tobool95, label %land.lhs.true96, label %if.end129, !dbg !12855

land.lhs.true96:                                  ; preds = %land.lhs.true93
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12856
  %call97 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %97), !dbg !12857
  store %union.tree_node* %call97, %union.tree_node** %decl, align 8, !dbg !12858
  %tobool98 = icmp ne %union.tree_node* %call97, null, !dbg !12858
  br i1 %tobool98, label %land.lhs.true99, label %if.end129, !dbg !12859

land.lhs.true99:                                  ; preds = %land.lhs.true96
  %98 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !12860
  %function_decl = bitcast %union.tree_node* %98 to %struct.tree_function_decl*, !dbg !12860
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !12860
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !12860
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !12860
  %bf.clear = and i32 %bf.lshr, 3, !dbg !12860
  %cmp100 = icmp eq i32 %bf.clear, 3, !dbg !12861
  br i1 %cmp100, label %land.lhs.true102, label %if.end129, !dbg !12862

land.lhs.true102:                                 ; preds = %land.lhs.true99
  %99 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !12863
  %function_decl103 = bitcast %union.tree_node* %99 to %struct.tree_function_decl*, !dbg !12863
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl103, i32 0, i32 5, !dbg !12863
  %bf.load104 = load i32, i32* %function_code, align 8, !dbg !12863
  %bf.clear105 = and i32 %bf.load104, 2047, !dbg !12863
  %cmp106 = icmp eq i32 %bf.clear105, 517, !dbg !12864
  br i1 %cmp106, label %if.then108, label %if.end129, !dbg !12865

if.then108:                                       ; preds = %land.lhs.true102
  call void @llvm.dbg.declare(metadata i64* %nargs109, metadata !12866, metadata !DIExpression()), !dbg !12868
  %100 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12869
  %gimple_call110 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %100, i32 0, i32 9, !dbg !12870
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call110, align 8, !dbg !12870
  %call111 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %101), !dbg !12871
  %conv112 = zext i32 %call111 to i64, !dbg !12871
  store i64 %conv112, i64* %nargs109, align 8, !dbg !12868
  call void @llvm.dbg.declare(metadata %union.tree_node** %count113, metadata !12872, metadata !DIExpression()), !dbg !12873
  call void @llvm.dbg.declare(metadata %union.tree_node** %p114, metadata !12874, metadata !DIExpression()), !dbg !12875
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !12876, metadata !DIExpression()), !dbg !12877
  %102 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12878
  %src_fn115 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %102, i32 0, i32 0, !dbg !12878
  %103 = load %union.tree_node*, %union.tree_node** %src_fn115, align 8, !dbg !12878
  %decl_non_common116 = bitcast %union.tree_node* %103 to %struct.tree_decl_non_common*, !dbg !12878
  %arguments117 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common116, i32 0, i32 2, !dbg !12878
  %104 = load %union.tree_node*, %union.tree_node** %arguments117, align 8, !dbg !12878
  store %union.tree_node* %104, %union.tree_node** %p114, align 8, !dbg !12880
  br label %for.cond118, !dbg !12881

for.cond118:                                      ; preds = %for.inc122, %if.then108
  %105 = load %union.tree_node*, %union.tree_node** %p114, align 8, !dbg !12882
  %tobool119 = icmp ne %union.tree_node* %105, null, !dbg !12884
  br i1 %tobool119, label %for.body120, label %for.end125, !dbg !12884

for.body120:                                      ; preds = %for.cond118
  %106 = load i64, i64* %nargs109, align 8, !dbg !12885
  %dec121 = add i64 %106, -1, !dbg !12885
  store i64 %dec121, i64* %nargs109, align 8, !dbg !12885
  br label %for.inc122, !dbg !12886

for.inc122:                                       ; preds = %for.body120
  %107 = load %union.tree_node*, %union.tree_node** %p114, align 8, !dbg !12887
  %common123 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !12887
  %chain124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common123, i32 0, i32 1, !dbg !12887
  %108 = load %union.tree_node*, %union.tree_node** %chain124, align 8, !dbg !12887
  store %union.tree_node* %108, %union.tree_node** %p114, align 8, !dbg !12888
  br label %for.cond118, !dbg !12889, !llvm.loop !12890

for.end125:                                       ; preds = %for.cond118
  %109 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !12892
  %110 = load i64, i64* %nargs109, align 8, !dbg !12893
  %call126 = call %union.tree_node* @build_int_cst(%union.tree_node* %109, i64 %110), !dbg !12894
  store %union.tree_node* %call126, %union.tree_node** %count113, align 8, !dbg !12895
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12896
  %call127 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %111), !dbg !12896
  %112 = load %union.tree_node*, %union.tree_node** %count113, align 8, !dbg !12896
  %call128 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call127, %union.tree_node* %112), !dbg !12896
  store %union.gimple_statement_d* %call128, %union.gimple_statement_d** %new_stmt, align 8, !dbg !12897
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !12898
  call void @gsi_replace(%struct.gimple_stmt_iterator* %copy_gsi, %union.gimple_statement_d* %113, i8 zeroext 0), !dbg !12899
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !12900
  store %union.gimple_statement_d* %114, %union.gimple_statement_d** %stmt, align 8, !dbg !12901
  br label %if.end129, !dbg !12902

if.end129:                                        ; preds = %for.end125, %land.lhs.true102, %land.lhs.true99, %land.lhs.true96, %land.lhs.true93, %if.else89
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %cond.end72
  %115 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12903
  %statements_to_fold = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %115, i32 0, i32 19, !dbg !12905
  %116 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !12905
  %tobool131 = icmp ne %struct.pointer_set_t* %116, null, !dbg !12903
  br i1 %tobool131, label %if.then132, label %if.end135, !dbg !12906

if.then132:                                       ; preds = %if.end130
  %117 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12907
  %statements_to_fold133 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %117, i32 0, i32 19, !dbg !12908
  %118 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold133, align 8, !dbg !12908
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12909
  %120 = bitcast %union.gimple_statement_d* %119 to i8*, !dbg !12909
  %call134 = call i32 @pointer_set_insert(%struct.pointer_set_t* %118, i8* %120), !dbg !12910
  br label %if.end135, !dbg !12910

if.end135:                                        ; preds = %if.then132, %if.end130
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12911
  %call136 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %121), !dbg !12913
  %tobool137 = icmp ne i8 %call136, 0, !dbg !12913
  br i1 %tobool137, label %if.then138, label %if.end263, !dbg !12914

if.then138:                                       ; preds = %if.end135
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !12915, metadata !DIExpression()), !dbg !12917
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !12918, metadata !DIExpression()), !dbg !12919
  %122 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12920
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %122, i32 0, i32 12, !dbg !12921
  %123 = load i32, i32* %transform_call_graph_edges, align 8, !dbg !12921
  switch i32 %123, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb173
    i32 1, label %sw.bb177
  ], !dbg !12922

sw.bb:                                            ; preds = %if.then138
  %124 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12923
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %124, i32 0, i32 2, !dbg !12925
  %125 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node, align 8, !dbg !12925
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !12926
  %call139 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %125, %union.gimple_statement_d* %126), !dbg !12927
  store %struct.cgraph_edge* %call139, %struct.cgraph_edge** %edge, align 8, !dbg !12928
  %127 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12929
  %tobool140 = icmp ne %struct.cgraph_edge* %127, null, !dbg !12929
  br i1 %tobool140, label %if.then141, label %if.end172, !dbg !12931

if.then141:                                       ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata i32* %edge_freq, metadata !12932, metadata !DIExpression()), !dbg !12934
  %128 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12935
  %frequency142 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %128, i32 0, i32 11, !dbg !12936
  %129 = load i32, i32* %frequency142, align 8, !dbg !12936
  store i32 %129, i32* %edge_freq, align 4, !dbg !12934
  %130 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12937
  %131 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12938
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %131, i32 0, i32 3, !dbg !12939
  %132 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !12939
  %133 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12940
  %134 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12941
  %call143 = call i32 @gimple_uid(%union.gimple_statement_d* %134), !dbg !12942
  %135 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12943
  %frequency144 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %135, i32 0, i32 11, !dbg !12944
  %136 = load i32, i32* %frequency144, align 8, !dbg !12944
  %call145 = call %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge* %130, %struct.cgraph_node* %132, %union.gimple_statement_d* %133, i32 %call143, i64 10000, i32 1000, i32 %136, i8 zeroext 1), !dbg !12945
  store %struct.cgraph_edge* %call145, %struct.cgraph_edge** %edge, align 8, !dbg !12946
  %137 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12947
  %dst_node146 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %137, i32 0, i32 3, !dbg !12948
  %138 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node146, align 8, !dbg !12948
  %decl147 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %138, i32 0, i32 0, !dbg !12949
  %139 = load %union.tree_node*, %union.tree_node** %decl147, align 8, !dbg !12949
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12950
  %call148 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %139, %struct.basic_block_def* %140), !dbg !12951
  %141 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12952
  %frequency149 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %141, i32 0, i32 11, !dbg !12953
  store i32 %call148, i32* %frequency149, align 8, !dbg !12954
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12955
  %tobool150 = icmp ne %struct._IO_FILE* %142, null, !dbg !12955
  br i1 %tobool150, label %land.lhs.true151, label %if.end170, !dbg !12957

land.lhs.true151:                                 ; preds = %if.then141
  %143 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12958
  %add.ptr152 = getelementptr inbounds %struct.function, %struct.function* %143, i64 0, !dbg !12958
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr152, i32 0, i32 1, !dbg !12958
  %144 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12958
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %144, i32 0, i32 7, !dbg !12958
  %145 = load i32, i32* %x_profile_status, align 8, !dbg !12958
  %cmp153 = icmp ne i32 %145, 0, !dbg !12959
  br i1 %cmp153, label %land.lhs.true155, label %if.end170, !dbg !12960

land.lhs.true155:                                 ; preds = %land.lhs.true151
  %146 = load i32, i32* %edge_freq, align 4, !dbg !12961
  %147 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12962
  %frequency156 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %147, i32 0, i32 11, !dbg !12963
  %148 = load i32, i32* %frequency156, align 8, !dbg !12963
  %add157 = add nsw i32 %148, 10, !dbg !12964
  %cmp158 = icmp sgt i32 %146, %add157, !dbg !12965
  br i1 %cmp158, label %if.then164, label %lor.lhs.false, !dbg !12966

lor.lhs.false:                                    ; preds = %land.lhs.true155
  %149 = load i32, i32* %edge_freq, align 4, !dbg !12967
  %150 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12968
  %frequency160 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %150, i32 0, i32 11, !dbg !12969
  %151 = load i32, i32* %frequency160, align 8, !dbg !12969
  %sub161 = sub nsw i32 %151, 10, !dbg !12970
  %cmp162 = icmp slt i32 %149, %sub161, !dbg !12971
  br i1 %cmp162, label %if.then164, label %if.end170, !dbg !12972

if.then164:                                       ; preds = %lor.lhs.false, %land.lhs.true155
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12973
  %153 = load i32, i32* %edge_freq, align 4, !dbg !12975
  %154 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12976
  %frequency165 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %154, i32 0, i32 11, !dbg !12977
  %155 = load i32, i32* %frequency165, align 8, !dbg !12977
  %call166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %152, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.24, i64 0, i64 0), i32 %153, i32 %155), !dbg !12978
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12979
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12980
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %157, i32 0, i32 9, !dbg !12981
  %158 = load i32, i32* %index, align 8, !dbg !12981
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12982
  %frequency167 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %159, i32 0, i32 11, !dbg !12983
  %160 = load i32, i32* %frequency167, align 8, !dbg !12983
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !12984
  %frequency168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %161, i32 0, i32 11, !dbg !12985
  %162 = load i32, i32* %frequency168, align 8, !dbg !12985
  %call169 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %156, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.25, i64 0, i64 0), i32 %158, i32 %160, i32 %162), !dbg !12986
  br label %if.end170, !dbg !12987

if.end170:                                        ; preds = %if.then164, %lor.lhs.false, %land.lhs.true151, %if.then141
  %163 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !12988
  %call171 = call %union.gimple_statement_d* @cgraph_redirect_edge_call_stmt_to_callee(%struct.cgraph_edge* %163), !dbg !12989
  store %union.gimple_statement_d* %call171, %union.gimple_statement_d** %stmt, align 8, !dbg !12990
  br label %if.end172, !dbg !12991

if.end172:                                        ; preds = %if.end170, %sw.bb
  br label %sw.epilog, !dbg !12992

sw.bb173:                                         ; preds = %if.then138
  %164 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12993
  %dst_node174 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %164, i32 0, i32 3, !dbg !12994
  %165 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node174, align 8, !dbg !12994
  %166 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !12995
  %167 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12996
  call void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node* %165, %union.gimple_statement_d* %166, %union.gimple_statement_d* %167), !dbg !12997
  %168 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !12998
  %dst_node175 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %168, i32 0, i32 3, !dbg !12999
  %169 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node175, align 8, !dbg !12999
  %170 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13000
  %call176 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %169, %union.gimple_statement_d* %170), !dbg !13001
  store %struct.cgraph_edge* %call176, %struct.cgraph_edge** %edge, align 8, !dbg !13002
  br label %sw.epilog, !dbg !13003

sw.bb177:                                         ; preds = %if.then138
  %171 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13004
  %dst_node178 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %171, i32 0, i32 3, !dbg !13005
  %172 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node178, align 8, !dbg !13005
  %173 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !13006
  %call179 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %172, %union.gimple_statement_d* %173), !dbg !13007
  store %struct.cgraph_edge* %call179, %struct.cgraph_edge** %edge, align 8, !dbg !13008
  %174 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !13009
  %tobool180 = icmp ne %struct.cgraph_edge* %174, null, !dbg !13009
  br i1 %tobool180, label %if.then181, label %if.end182, !dbg !13011

if.then181:                                       ; preds = %sw.bb177
  %175 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !13012
  %176 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13013
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* %175, %union.gimple_statement_d* %176), !dbg !13014
  br label %if.end182, !dbg !13014

if.end182:                                        ; preds = %if.then181, %sw.bb177
  br label %sw.epilog, !dbg !13015

sw.default:                                       ; preds = %if.then138
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1670, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13016
  br label %sw.epilog, !dbg !13017

sw.epilog:                                        ; preds = %sw.default, %if.end182, %sw.bb173, %if.end172
  %177 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !13018
  %tobool183 = icmp ne %struct.cgraph_edge* %177, null, !dbg !13018
  br i1 %tobool183, label %lor.lhs.false184, label %land.lhs.true192, !dbg !13020

lor.lhs.false184:                                 ; preds = %sw.epilog
  %178 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !13021
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %178, i32 0, i32 14, !dbg !13022
  %bf.load185 = load i8, i8* %indirect_call, align 2, !dbg !13022
  %bf.clear186 = and i8 %bf.load185, 1, !dbg !13022
  %bf.cast = zext i8 %bf.clear186 to i32, !dbg !13022
  %tobool187 = icmp ne i32 %bf.cast, 0, !dbg !13021
  br i1 %tobool187, label %land.lhs.true188, label %if.end247, !dbg !13023

land.lhs.true188:                                 ; preds = %lor.lhs.false184
  %179 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13024
  %transform_call_graph_edges189 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %179, i32 0, i32 12, !dbg !13025
  %180 = load i32, i32* %transform_call_graph_edges189, align 8, !dbg !13025
  %cmp190 = icmp eq i32 %180, 2, !dbg !13026
  br i1 %cmp190, label %land.lhs.true192, label %if.end247, !dbg !13027

land.lhs.true192:                                 ; preds = %land.lhs.true188, %sw.epilog
  %181 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13028
  %call193 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %181), !dbg !13029
  %conv194 = zext i8 %call193 to i32, !dbg !13029
  %tobool195 = icmp ne i32 %conv194, 0, !dbg !13029
  br i1 %tobool195, label %land.lhs.true196, label %if.end247, !dbg !13030

land.lhs.true196:                                 ; preds = %land.lhs.true192
  %182 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13031
  %call197 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %182), !dbg !13032
  store %union.tree_node* %call197, %union.tree_node** %fn, align 8, !dbg !13033
  %cmp198 = icmp ne %union.tree_node* %call197, null, !dbg !13034
  br i1 %cmp198, label %if.then200, label %if.end247, !dbg !13035

if.then200:                                       ; preds = %land.lhs.true196
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %dest, metadata !13036, metadata !DIExpression()), !dbg !13038
  %183 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !13039
  %call201 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %183), !dbg !13040
  store %struct.cgraph_node* %call201, %struct.cgraph_node** %dest, align 8, !dbg !13038
  %184 = load %struct.cgraph_node*, %struct.cgraph_node** %dest, align 8, !dbg !13041
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %184, i32 0, i32 27, !dbg !13041
  %bf.load202 = load i16, i16* %needed, align 4, !dbg !13041
  %bf.clear203 = and i16 %bf.load202, 1, !dbg !13041
  %bf.cast204 = zext i16 %bf.clear203 to i32, !dbg !13041
  %tobool205 = icmp ne i32 %bf.cast204, 0, !dbg !13041
  br i1 %tobool205, label %cond.false221, label %lor.lhs.false206, !dbg !13041

lor.lhs.false206:                                 ; preds = %if.then200
  %185 = load %struct.cgraph_node*, %struct.cgraph_node** %dest, align 8, !dbg !13041
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %185, i32 0, i32 27, !dbg !13041
  %bf.load207 = load i16, i16* %analyzed, align 4, !dbg !13041
  %bf.lshr208 = lshr i16 %bf.load207, 5, !dbg !13041
  %bf.clear209 = and i16 %bf.lshr208, 1, !dbg !13041
  %bf.cast210 = zext i16 %bf.clear209 to i32, !dbg !13041
  %tobool211 = icmp ne i32 %bf.cast210, 0, !dbg !13041
  br i1 %tobool211, label %lor.lhs.false212, label %cond.false221, !dbg !13041

lor.lhs.false212:                                 ; preds = %lor.lhs.false206
  %186 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13041
  %src_node213 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %186, i32 0, i32 2, !dbg !13041
  %187 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node213, align 8, !dbg !13041
  %analyzed214 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %187, i32 0, i32 27, !dbg !13041
  %bf.load215 = load i16, i16* %analyzed214, align 4, !dbg !13041
  %bf.lshr216 = lshr i16 %bf.load215, 5, !dbg !13041
  %bf.clear217 = and i16 %bf.lshr216, 1, !dbg !13041
  %bf.cast218 = zext i16 %bf.clear217 to i32, !dbg !13041
  %tobool219 = icmp ne i32 %bf.cast218, 0, !dbg !13041
  br i1 %tobool219, label %cond.true220, label %cond.false221, !dbg !13041

cond.true220:                                     ; preds = %lor.lhs.false212
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13041
  br label %cond.end222, !dbg !13041

cond.false221:                                    ; preds = %lor.lhs.false212, %lor.lhs.false206, %if.then200
  br label %cond.end222, !dbg !13041

cond.end222:                                      ; preds = %cond.false221, %cond.true220
  %cond223 = phi i32 [ 0, %cond.true220 ], [ 0, %cond.false221 ], !dbg !13041
  %188 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13042
  %transform_call_graph_edges224 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %188, i32 0, i32 12, !dbg !13044
  %189 = load i32, i32* %transform_call_graph_edges224, align 8, !dbg !13044
  %cmp225 = icmp eq i32 %189, 2, !dbg !13045
  br i1 %cmp225, label %if.then227, label %if.else233, !dbg !13046

if.then227:                                       ; preds = %cond.end222
  %190 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13047
  %dst_node228 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %190, i32 0, i32 3, !dbg !13048
  %191 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node228, align 8, !dbg !13048
  %192 = load %struct.cgraph_node*, %struct.cgraph_node** %dest, align 8, !dbg !13049
  %193 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !13050
  %194 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13051
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13052
  %count229 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %195, i32 0, i32 8, !dbg !13053
  %196 = load i64, i64* %count229, align 8, !dbg !13053
  %197 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13054
  %dst_node230 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %197, i32 0, i32 3, !dbg !13055
  %198 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node230, align 8, !dbg !13055
  %decl231 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %198, i32 0, i32 0, !dbg !13056
  %199 = load %union.tree_node*, %union.tree_node** %decl231, align 8, !dbg !13056
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !13057
  %call232 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %199, %struct.basic_block_def* %200), !dbg !13058
  %201 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13059
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %201, i32 0, i32 10, !dbg !13060
  %202 = load i32, i32* %loop_depth, align 4, !dbg !13060
  call void @cgraph_create_edge_including_clones(%struct.cgraph_node* %191, %struct.cgraph_node* %192, %union.gimple_statement_d* %193, %union.gimple_statement_d* %194, i64 %196, i32 %call232, i32 %202, i32 18), !dbg !13061
  br label %if.end241, !dbg !13061

if.else233:                                       ; preds = %cond.end222
  %203 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13062
  %dst_node234 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %203, i32 0, i32 3, !dbg !13063
  %204 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node234, align 8, !dbg !13063
  %205 = load %struct.cgraph_node*, %struct.cgraph_node** %dest, align 8, !dbg !13064
  %206 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13065
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13066
  %count235 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %207, i32 0, i32 8, !dbg !13067
  %208 = load i64, i64* %count235, align 8, !dbg !13067
  %209 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13068
  %dst_node236 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %209, i32 0, i32 3, !dbg !13069
  %210 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node236, align 8, !dbg !13069
  %decl237 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %210, i32 0, i32 0, !dbg !13070
  %211 = load %union.tree_node*, %union.tree_node** %decl237, align 8, !dbg !13070
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !13071
  %call238 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %211, %struct.basic_block_def* %212), !dbg !13072
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13073
  %loop_depth239 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %213, i32 0, i32 10, !dbg !13074
  %214 = load i32, i32* %loop_depth239, align 4, !dbg !13074
  %call240 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %204, %struct.cgraph_node* %205, %union.gimple_statement_d* %206, i64 %208, i32 %call238, i32 %214), !dbg !13075
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call240, i32 0, i32 9, !dbg !13076
  store i32 18, i32* %inline_failed, align 8, !dbg !13077
  br label %if.end241

if.end241:                                        ; preds = %if.else233, %if.then227
  %215 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !13078
  %tobool242 = icmp ne %struct._IO_FILE* %215, null, !dbg !13078
  br i1 %tobool242, label %if.then243, label %if.end246, !dbg !13080

if.then243:                                       ; preds = %if.end241
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !13081
  %217 = load %struct.cgraph_node*, %struct.cgraph_node** %dest, align 8, !dbg !13083
  %call244 = call i8* @cgraph_node_name(%struct.cgraph_node* %217), !dbg !13084
  %call245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %216, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.26, i64 0, i64 0), i8* %call244), !dbg !13085
  br label %if.end246, !dbg !13086

if.end246:                                        ; preds = %if.then243, %if.end241
  br label %if.end247, !dbg !13087

if.end247:                                        ; preds = %if.end246, %land.lhs.true196, %land.lhs.true192, %land.lhs.true188, %lor.lhs.false184
  %218 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13088
  %call248 = call i32 @gimple_call_flags(%union.gimple_statement_d* %218), !dbg !13089
  store i32 %call248, i32* %flags, align 4, !dbg !13090
  %219 = load i32, i32* %flags, align 4, !dbg !13091
  %and = and i32 %219, 32, !dbg !13093
  %tobool249 = icmp ne i32 %and, 0, !dbg !13093
  br i1 %tobool249, label %if.then250, label %if.end254, !dbg !13094

if.then250:                                       ; preds = %if.end247
  %220 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13095
  %add.ptr251 = getelementptr inbounds %struct.function, %struct.function* %220, i64 0, !dbg !13095
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr251, i32 0, i32 20, !dbg !13096
  %bf.load252 = load i32, i32* %calls_alloca, align 8, !dbg !13097
  %bf.clear253 = and i32 %bf.load252, -524289, !dbg !13097
  %bf.set = or i32 %bf.clear253, 524288, !dbg !13097
  store i32 %bf.set, i32* %calls_alloca, align 8, !dbg !13097
  br label %if.end254, !dbg !13095

if.end254:                                        ; preds = %if.then250, %if.end247
  %221 = load i32, i32* %flags, align 4, !dbg !13098
  %and255 = and i32 %221, 128, !dbg !13100
  %tobool256 = icmp ne i32 %and255, 0, !dbg !13100
  br i1 %tobool256, label %if.then257, label %if.end262, !dbg !13101

if.then257:                                       ; preds = %if.end254
  %222 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13102
  %add.ptr258 = getelementptr inbounds %struct.function, %struct.function* %222, i64 0, !dbg !13102
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr258, i32 0, i32 20, !dbg !13103
  %bf.load259 = load i32, i32* %calls_setjmp, align 8, !dbg !13104
  %bf.clear260 = and i32 %bf.load259, -262145, !dbg !13104
  %bf.set261 = or i32 %bf.clear260, 262144, !dbg !13104
  store i32 %bf.set261, i32* %calls_setjmp, align 8, !dbg !13104
  br label %if.end262, !dbg !13102

if.end262:                                        ; preds = %if.then257, %if.end254
  br label %if.end263, !dbg !13105

if.end263:                                        ; preds = %if.end262, %if.end135
  %223 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13106
  %add.ptr264 = getelementptr inbounds %struct.function, %struct.function* %223, i64 0, !dbg !13106
  %224 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13107
  %225 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13108
  %src_cfun265 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %225, i32 0, i32 4, !dbg !13109
  %226 = load %struct.function*, %struct.function** %src_cfun265, align 8, !dbg !13109
  %227 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_stmt, align 8, !dbg !13110
  %228 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13111
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %228, i32 0, i32 11, !dbg !13112
  %229 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !13112
  %230 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13113
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %230, i32 0, i32 10, !dbg !13114
  %231 = load i32, i32* %eh_lp_nr, align 8, !dbg !13114
  %call266 = call zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function* %add.ptr264, %union.gimple_statement_d* %224, %struct.function* %226, %union.gimple_statement_d* %227, %struct.pointer_map_t* %229, i32 %231), !dbg !13115
  %232 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13116
  %add.ptr267 = getelementptr inbounds %struct.function, %struct.function* %232, i64 0, !dbg !13116
  %call268 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr267), !dbg !13118
  %conv269 = zext i8 %call268 to i32, !dbg !13118
  %tobool270 = icmp ne i32 %conv269, 0, !dbg !13118
  br i1 %tobool270, label %land.lhs.true271, label %if.end293, !dbg !13119

land.lhs.true271:                                 ; preds = %if.end263
  %233 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13120
  %call272 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %233), !dbg !13121
  %tobool273 = icmp ne i8 %call272, 0, !dbg !13121
  br i1 %tobool273, label %if.end293, label %if.then274, !dbg !13122

if.then274:                                       ; preds = %land.lhs.true271
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !13123, metadata !DIExpression()), !dbg !13137
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !13138, metadata !DIExpression()), !dbg !13139
  %call275 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi), !dbg !13140
  call void @find_new_referenced_vars(%union.gimple_statement_d* %call275), !dbg !13141
  %234 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13142
  %call276 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %234, i32 2), !dbg !13142
  store %union.tree_node* %call276, %union.tree_node** %def, align 8, !dbg !13142
  br label %for.cond277, !dbg !13142

for.cond277:                                      ; preds = %for.inc290, %if.then274
  %call278 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !13144
  %tobool279 = icmp ne i8 %call278, 0, !dbg !13144
  %lnot280 = xor i1 %tobool279, true, !dbg !13144
  br i1 %lnot280, label %for.body281, label %for.end292, !dbg !13142

for.body281:                                      ; preds = %for.cond277
  %235 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !13146
  %base282 = bitcast %union.tree_node* %235 to %struct.tree_base*, !dbg !13146
  %236 = bitcast %struct.tree_base* %base282 to i64*, !dbg !13146
  %bf.load283 = load i64, i64* %236, align 8, !dbg !13146
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !13146
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !13146
  %cmp286 = icmp eq i32 %bf.cast285, 141, !dbg !13148
  br i1 %cmp286, label %if.then288, label %if.end289, !dbg !13149

if.then288:                                       ; preds = %for.body281
  %237 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13150
  %238 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !13151
  %ssa_name = bitcast %union.tree_node* %238 to %struct.tree_ssa_name*, !dbg !13151
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !13151
  store %union.gimple_statement_d* %237, %union.gimple_statement_d** %def_stmt, align 8, !dbg !13152
  br label %if.end289, !dbg !13151

if.end289:                                        ; preds = %if.then288, %for.body281
  br label %for.inc290, !dbg !13153

for.inc290:                                       ; preds = %if.end289
  %call291 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %i), !dbg !13144
  store %union.tree_node* %call291, %union.tree_node** %def, align 8, !dbg !13144
  br label %for.cond277, !dbg !13144, !llvm.loop !13154

for.end292:                                       ; preds = %for.cond277
  br label %if.end293, !dbg !13156

if.end293:                                        ; preds = %for.end292, %land.lhs.true271, %if.end263
  call void @gsi_next(%struct.gimple_stmt_iterator* %copy_gsi), !dbg !13157
  br label %do.cond, !dbg !13158

do.cond:                                          ; preds = %if.end293
  %call294 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi), !dbg !13159
  %tobool295 = icmp ne i8 %call294, 0, !dbg !13160
  %lnot296 = xor i1 %tobool295, true, !dbg !13160
  br i1 %lnot296, label %do.body, label %do.end, !dbg !13158, !llvm.loop !13161

do.end:                                           ; preds = %do.cond
  %239 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !13163
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp297, %struct.basic_block_def* %239), !dbg !13164
  %240 = bitcast %struct.gimple_stmt_iterator* %copy_gsi to i8*, !dbg !13164
  %241 = bitcast %struct.gimple_stmt_iterator* %tmp297 to i8*, !dbg !13164
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %240, i8* align 8 %241, i64 24, i1 false), !dbg !13164
  br label %for.inc298, !dbg !13165

for.inc298:                                       ; preds = %do.end, %if.then14
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !13166
  br label %for.cond, !dbg !13167, !llvm.loop !13168

for.end299:                                       ; preds = %for.cond
  %242 = load %struct.basic_block_def*, %struct.basic_block_def** %copy_basic_block, align 8, !dbg !13170
  ret %struct.basic_block_def* %242, !dbg !13171
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_edges_for_bb(%struct.basic_block_def* %bb, i64 %count_scale, %struct.basic_block_def* %ret_bb) #0 !dbg !13172 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %count_scale.addr = alloca i64, align 8
  %ret_bb.addr = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %old_edge = alloca %struct.edge_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %flags = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %new_edge = alloca %struct.edge_def*, align 8
  %tmp24 = alloca %struct.gimple_stmt_iterator, align 8
  %copy_stmt = alloca %union.gimple_statement_d*, align 8
  %can_throw = alloca i8, align 1
  %nonlocal_goto = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %tmp53 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !13175, metadata !DIExpression()), !dbg !13176
  store i64 %count_scale, i64* %count_scale.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count_scale.addr, metadata !13177, metadata !DIExpression()), !dbg !13178
  store %struct.basic_block_def* %ret_bb, %struct.basic_block_def** %ret_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ret_bb.addr, metadata !13179, metadata !DIExpression()), !dbg !13180
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !13181, metadata !DIExpression()), !dbg !13182
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13183
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !13184
  %1 = load i8*, i8** %aux, align 8, !dbg !13184
  %2 = bitcast i8* %1 to %struct.basic_block_def*, !dbg !13185
  store %struct.basic_block_def* %2, %struct.basic_block_def** %new_bb, align 8, !dbg !13182
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !13186, metadata !DIExpression()), !dbg !13193
  call void @llvm.dbg.declare(metadata %struct.edge_def** %old_edge, metadata !13194, metadata !DIExpression()), !dbg !13195
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !13196, metadata !DIExpression()), !dbg !13197
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !13198, metadata !DIExpression()), !dbg !13199
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13200
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !13200
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !13200
  %4 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !13200
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !13200
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !13200
  store i32 %6, i32* %5, align 8, !dbg !13200
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !13200
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !13200
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !13200
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !13200
  %10 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !13200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !13200
  br label %for.cond, !dbg !13200

for.cond:                                         ; preds = %for.inc, %entry
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13202
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !13202
  %13 = load i32, i32* %12, align 8, !dbg !13202
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !13202
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !13202
  %call1 = call zeroext i8 @ei_cond(i32 %13, %struct.VEC_edge_gc** %15, %struct.edge_def** %old_edge), !dbg !13202
  %tobool = icmp ne i8 %call1, 0, !dbg !13200
  br i1 %tobool, label %for.body, label %for.end, !dbg !13200

for.body:                                         ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13204
  %flags2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 7, !dbg !13206
  %17 = load i32, i32* %flags2, align 8, !dbg !13206
  %and = and i32 %17, 8, !dbg !13207
  %tobool3 = icmp ne i32 %and, 0, !dbg !13207
  br i1 %tobool3, label %if.end17, label %if.then, !dbg !13208

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_edge, metadata !13209, metadata !DIExpression()), !dbg !13211
  %18 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13212
  %flags4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !13213
  %19 = load i32, i32* %flags4, align 8, !dbg !13213
  store i32 %19, i32* %flags, align 4, !dbg !13214
  %20 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13215
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 1, !dbg !13217
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !13217
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !13218
  %22 = load i32, i32* %index, align 8, !dbg !13218
  %cmp = icmp eq i32 %22, 1, !dbg !13219
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13220

land.lhs.true:                                    ; preds = %if.then
  %23 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13221
  %flags5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 7, !dbg !13222
  %24 = load i32, i32* %flags5, align 8, !dbg !13222
  %tobool6 = icmp ne i32 %24, 0, !dbg !13221
  br i1 %tobool6, label %if.end, label %land.lhs.true7, !dbg !13223

land.lhs.true7:                                   ; preds = %land.lhs.true
  %25 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13224
  %dest8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 1, !dbg !13225
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dest8, align 8, !dbg !13225
  %aux9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 2, !dbg !13226
  %27 = load i8*, i8** %aux9, align 8, !dbg !13226
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13227
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !13227
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !13227
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13227
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 1, !dbg !13227
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !13227
  %31 = bitcast %struct.basic_block_def* %30 to i8*, !dbg !13227
  %cmp10 = icmp ne i8* %27, %31, !dbg !13228
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !13229

if.then11:                                        ; preds = %land.lhs.true7
  %32 = load i32, i32* %flags, align 4, !dbg !13230
  %or = or i32 %32, 1, !dbg !13230
  store i32 %or, i32* %flags, align 4, !dbg !13230
  br label %if.end, !dbg !13231

if.end:                                           ; preds = %if.then11, %land.lhs.true7, %land.lhs.true, %if.then
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13232
  %34 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13233
  %dest12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !13234
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest12, align 8, !dbg !13234
  %aux13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 2, !dbg !13235
  %36 = load i8*, i8** %aux13, align 8, !dbg !13235
  %37 = bitcast i8* %36 to %struct.basic_block_def*, !dbg !13236
  %38 = load i32, i32* %flags, align 4, !dbg !13237
  %call14 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %33, %struct.basic_block_def* %37, i32 %38), !dbg !13238
  store %struct.edge_def* %call14, %struct.edge_def** %new_edge, align 8, !dbg !13239
  %39 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13240
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 9, !dbg !13241
  %40 = load i64, i64* %count, align 8, !dbg !13241
  %41 = load i64, i64* %count_scale.addr, align 8, !dbg !13242
  %mul = mul nsw i64 %40, %41, !dbg !13243
  %div = sdiv i64 %mul, 10000, !dbg !13244
  %42 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !13245
  %count15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 9, !dbg !13246
  store i64 %div, i64* %count15, align 8, !dbg !13247
  %43 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13248
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 8, !dbg !13249
  %44 = load i32, i32* %probability, align 4, !dbg !13249
  %45 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !13250
  %probability16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 8, !dbg !13251
  store i32 %44, i32* %probability16, align 4, !dbg !13252
  br label %if.end17, !dbg !13253

if.end17:                                         ; preds = %if.end, %for.body
  br label %for.inc, !dbg !13254

for.inc:                                          ; preds = %if.end17
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !13202
  br label %for.cond, !dbg !13202, !llvm.loop !13255

for.end:                                          ; preds = %for.cond
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13257
  %index18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !13259
  %47 = load i32, i32* %index18, align 8, !dbg !13259
  %cmp19 = icmp eq i32 %47, 0, !dbg !13260
  br i1 %cmp19, label %if.then22, label %lor.lhs.false, !dbg !13261

lor.lhs.false:                                    ; preds = %for.end
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13262
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !13263
  %49 = load i32, i32* %index20, align 8, !dbg !13263
  %cmp21 = icmp eq i32 %49, 1, !dbg !13264
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !13265

if.then22:                                        ; preds = %lor.lhs.false, %for.end
  br label %for.end82, !dbg !13266

if.end23:                                         ; preds = %lor.lhs.false
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13267
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp24, %struct.basic_block_def* %50), !dbg !13269
  %51 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !13269
  %52 = bitcast %struct.gimple_stmt_iterator* %tmp24 to i8*, !dbg !13269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false), !dbg !13269
  br label %for.cond25, !dbg !13270

for.cond25:                                       ; preds = %if.end81, %if.end23
  %call26 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13271
  %tobool27 = icmp ne i8 %call26, 0, !dbg !13273
  %lnot = xor i1 %tobool27, true, !dbg !13273
  br i1 %lnot, label %for.body28, label %for.end82, !dbg !13274

for.body28:                                       ; preds = %for.cond25
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %copy_stmt, metadata !13275, metadata !DIExpression()), !dbg !13277
  call void @llvm.dbg.declare(metadata i8* %can_throw, metadata !13278, metadata !DIExpression()), !dbg !13279
  call void @llvm.dbg.declare(metadata i8* %nonlocal_goto, metadata !13280, metadata !DIExpression()), !dbg !13281
  %call29 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13282
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13283
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13284
  %call30 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %53), !dbg !13286
  %tobool31 = icmp ne i8 %call30, 0, !dbg !13286
  br i1 %tobool31, label %if.end38, label %if.then32, !dbg !13287

if.then32:                                        ; preds = %for.body28
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13288
  call void @update_stmt(%union.gimple_statement_d* %54), !dbg !13290
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13291
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !13291
  %call34 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr33), !dbg !13293
  %tobool35 = icmp ne i8 %call34, 0, !dbg !13293
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !13294

if.then36:                                        ; preds = %if.then32
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13295
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %56), !dbg !13296
  br label %if.end37, !dbg !13296

if.end37:                                         ; preds = %if.then36, %if.then32
  br label %if.end38, !dbg !13297

if.end38:                                         ; preds = %if.end37, %for.body28
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !13298
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13299
  %call39 = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %57), !dbg !13300
  store i8 %call39, i8* %can_throw, align 1, !dbg !13301
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13302
  %call40 = call zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d* %58), !dbg !13303
  store i8 %call40, i8* %nonlocal_goto, align 1, !dbg !13304
  %59 = load i8, i8* %can_throw, align 1, !dbg !13305
  %conv = zext i8 %59 to i32, !dbg !13305
  %tobool41 = icmp ne i32 %conv, 0, !dbg !13305
  br i1 %tobool41, label %if.then45, label %lor.lhs.false42, !dbg !13307

lor.lhs.false42:                                  ; preds = %if.end38
  %60 = load i8, i8* %nonlocal_goto, align 1, !dbg !13308
  %conv43 = zext i8 %60 to i32, !dbg !13308
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !13308
  br i1 %tobool44, label %if.then45, label %if.end55, !dbg !13309

if.then45:                                        ; preds = %lor.lhs.false42, %if.end38
  %call46 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13310
  %tobool47 = icmp ne i8 %call46, 0, !dbg !13310
  br i1 %tobool47, label %if.end54, label %if.then48, !dbg !13313

if.then48:                                        ; preds = %if.then45
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !13314, metadata !DIExpression()), !dbg !13316
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13317
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13318
  %63 = bitcast %union.gimple_statement_d* %62 to i8*, !dbg !13318
  %call49 = call %struct.edge_def* @split_block(%struct.basic_block_def* %61, i8* %63), !dbg !13319
  store %struct.edge_def* %call49, %struct.edge_def** %e, align 8, !dbg !13316
  %64 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13320
  %dest50 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 1, !dbg !13321
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %dest50, align 8, !dbg !13321
  store %struct.basic_block_def* %65, %struct.basic_block_def** %new_bb, align 8, !dbg !13322
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13323
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 0, !dbg !13324
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !13324
  %aux51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 2, !dbg !13325
  %68 = load i8*, i8** %aux51, align 8, !dbg !13325
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13326
  %aux52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 2, !dbg !13327
  store i8* %68, i8** %aux52, align 8, !dbg !13328
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13329
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp53, %struct.basic_block_def* %70), !dbg !13330
  %71 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !13330
  %72 = bitcast %struct.gimple_stmt_iterator* %tmp53 to i8*, !dbg !13330
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 24, i1 false), !dbg !13330
  br label %if.end54, !dbg !13331

if.end54:                                         ; preds = %if.then48, %if.then45
  br label %if.end55, !dbg !13332

if.end55:                                         ; preds = %if.end54, %lor.lhs.false42
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13333
  %call56 = call i32 @gimple_code(%union.gimple_statement_d* %73), !dbg !13335
  %cmp57 = icmp eq i32 %call56, 15, !dbg !13336
  br i1 %cmp57, label %if.then59, label %if.else, !dbg !13337

if.then59:                                        ; preds = %if.end55
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13338
  %call60 = call zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d* %74), !dbg !13339
  br label %if.end64, !dbg !13339

if.else:                                          ; preds = %if.end55
  %75 = load i8, i8* %can_throw, align 1, !dbg !13340
  %tobool61 = icmp ne i8 %75, 0, !dbg !13340
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !13342

if.then62:                                        ; preds = %if.else
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13343
  call void @make_eh_edges(%union.gimple_statement_d* %76), !dbg !13344
  br label %if.end63, !dbg !13344

if.end63:                                         ; preds = %if.then62, %if.else
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then59
  %77 = load i8, i8* %nonlocal_goto, align 1, !dbg !13345
  %tobool65 = icmp ne i8 %77, 0, !dbg !13345
  br i1 %tobool65, label %if.then66, label %if.end68, !dbg !13347

if.then66:                                        ; preds = %if.end64
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13348
  %call67 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %78), !dbg !13349
  call void @make_abnormal_goto_edges(%struct.basic_block_def* %call67, i8 zeroext 1), !dbg !13350
  br label %if.end68, !dbg !13350

if.end68:                                         ; preds = %if.then66, %if.end64
  %79 = load i8, i8* %can_throw, align 1, !dbg !13351
  %conv69 = zext i8 %79 to i32, !dbg !13351
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !13351
  br i1 %tobool70, label %land.lhs.true74, label %lor.lhs.false71, !dbg !13353

lor.lhs.false71:                                  ; preds = %if.end68
  %80 = load i8, i8* %nonlocal_goto, align 1, !dbg !13354
  %conv72 = zext i8 %80 to i32, !dbg !13354
  %tobool73 = icmp ne i32 %conv72, 0, !dbg !13354
  br i1 %tobool73, label %land.lhs.true74, label %if.end81, !dbg !13355

land.lhs.true74:                                  ; preds = %lor.lhs.false71, %if.end68
  %81 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13356
  %add.ptr75 = getelementptr inbounds %struct.function, %struct.function* %81, i64 0, !dbg !13356
  %call76 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr75), !dbg !13357
  %conv77 = zext i8 %call76 to i32, !dbg !13357
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !13357
  br i1 %tobool78, label %if.then79, label %if.end81, !dbg !13358

if.then79:                                        ; preds = %land.lhs.true74
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy_stmt, align 8, !dbg !13359
  %call80 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %82), !dbg !13360
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %ret_bb.addr, align 8, !dbg !13361
  %84 = load i8, i8* %can_throw, align 1, !dbg !13362
  %85 = load i8, i8* %nonlocal_goto, align 1, !dbg !13363
  call void @update_ssa_across_abnormal_edges(%struct.basic_block_def* %call80, %struct.basic_block_def* %83, i8 zeroext %84, i8 zeroext %85), !dbg !13364
  br label %if.end81, !dbg !13364

if.end81:                                         ; preds = %if.then79, %land.lhs.true74, %lor.lhs.false71
  br label %for.cond25, !dbg !13365, !llvm.loop !13366

for.end82:                                        ; preds = %if.then22, %for.cond25
  ret void, !dbg !13368
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_phis_for_bb(%struct.basic_block_def* %bb, %struct.copy_body_data* %id) #0 !dbg !13369 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %res = alloca %union.tree_node*, align 8
  %new_res = alloca %union.tree_node*, align 8
  %new_phi = alloca %union.gimple_statement_d*, align 8
  %new_edge = alloca %struct.edge_def*, align 8
  %tmp9 = alloca %struct.edge_iterator, align 8
  %old_edge = alloca %struct.edge_def*, align 8
  %arg = alloca %union.tree_node*, align 8
  %new_arg = alloca %union.tree_node*, align 8
  %block = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !13372, metadata !DIExpression()), !dbg !13373
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !13374, metadata !DIExpression()), !dbg !13375
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !13376, metadata !DIExpression()), !dbg !13378
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13379
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !13380
  %1 = load i8*, i8** %aux, align 8, !dbg !13380
  %2 = bitcast i8* %1 to %struct.basic_block_def*, !dbg !13381
  store %struct.basic_block_def* %2, %struct.basic_block_def** %new_bb, align 8, !dbg !13378
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !13382, metadata !DIExpression()), !dbg !13383
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !13384, metadata !DIExpression()), !dbg !13385
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !13386, metadata !DIExpression()), !dbg !13387
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13388
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %3), !dbg !13390
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %call), !dbg !13391
  %4 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !13391
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !13391
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !13391
  br label %for.cond, !dbg !13392

for.cond:                                         ; preds = %for.inc37, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13393
  %tobool = icmp ne i8 %call1, 0, !dbg !13395
  %lnot = xor i1 %tobool, true, !dbg !13395
  br i1 %lnot, label %for.body, label %for.end38, !dbg !13396

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !13397, metadata !DIExpression()), !dbg !13399
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_res, metadata !13400, metadata !DIExpression()), !dbg !13401
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_phi, metadata !13402, metadata !DIExpression()), !dbg !13403
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_edge, metadata !13404, metadata !DIExpression()), !dbg !13405
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13406
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %phi, align 8, !dbg !13407
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13408
  %call3 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %6), !dbg !13408
  %call4 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call3), !dbg !13408
  store %union.tree_node* %call4, %union.tree_node** %res, align 8, !dbg !13409
  %7 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !13410
  store %union.tree_node* %7, %union.tree_node** %new_res, align 8, !dbg !13411
  %8 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !13412
  %call5 = call zeroext i8 @is_gimple_reg(%union.tree_node* %8), !dbg !13414
  %tobool6 = icmp ne i8 %call5, 0, !dbg !13414
  br i1 %tobool6, label %if.then, label %if.end36, !dbg !13415

if.then:                                          ; preds = %for.body
  %9 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13416
  %10 = bitcast %struct.copy_body_data* %9 to i8*, !dbg !13416
  %call7 = call %union.tree_node* @walk_tree_1(%union.tree_node** %new_res, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %10, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !13416
  %11 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !13418
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13419
  %call8 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %11, %struct.basic_block_def* %12), !dbg !13420
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %new_phi, align 8, !dbg !13421
  %13 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !13422
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !13422
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !13422
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %def_stmt, align 8, !dbg !13423
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13424
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 0, !dbg !13424
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !13424
  %15 = bitcast %struct.edge_iterator* %tmp9 to { i32, %struct.VEC_edge_gc** }*, !dbg !13424
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !13424
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !13424
  store i32 %17, i32* %16, align 8, !dbg !13424
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !13424
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !13424
  store %struct.VEC_edge_gc** %19, %struct.VEC_edge_gc*** %18, align 8, !dbg !13424
  %20 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !13424
  %21 = bitcast %struct.edge_iterator* %tmp9 to i8*, !dbg !13424
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 16, i1 false), !dbg !13424
  br label %for.cond11, !dbg !13424

for.cond11:                                       ; preds = %for.inc, %if.then
  %22 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13426
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 0, !dbg !13426
  %24 = load i32, i32* %23, align 8, !dbg !13426
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 1, !dbg !13426
  %26 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %25, align 8, !dbg !13426
  %call12 = call zeroext i8 @ei_cond(i32 %24, %struct.VEC_edge_gc** %26, %struct.edge_def** %new_edge), !dbg !13426
  %tobool13 = icmp ne i8 %call12, 0, !dbg !13424
  br i1 %tobool13, label %for.body14, label %for.end, !dbg !13424

for.body14:                                       ; preds = %for.cond11
  call void @llvm.dbg.declare(metadata %struct.edge_def** %old_edge, metadata !13428, metadata !DIExpression()), !dbg !13431
  %27 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !13432
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 0, !dbg !13433
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !13433
  %aux15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 2, !dbg !13434
  %29 = load i8*, i8** %aux15, align 8, !dbg !13434
  %30 = bitcast i8* %29 to %struct.basic_block_def*, !dbg !13435
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13436
  %call16 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %30, %struct.basic_block_def* %31), !dbg !13437
  store %struct.edge_def* %call16, %struct.edge_def** %old_edge, align 8, !dbg !13431
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !13438, metadata !DIExpression()), !dbg !13439
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13440
  %33 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13440
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 6, !dbg !13440
  %34 = load i32, i32* %dest_idx, align 4, !dbg !13440
  %call17 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %32, i32 %34), !dbg !13440
  %call18 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call17), !dbg !13440
  store %union.tree_node* %call18, %union.tree_node** %arg, align 8, !dbg !13439
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_arg, metadata !13441, metadata !DIExpression()), !dbg !13442
  %35 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !13443
  store %union.tree_node* %35, %union.tree_node** %new_arg, align 8, !dbg !13442
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !13444, metadata !DIExpression()), !dbg !13445
  %36 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13446
  %block19 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %36, i32 0, i32 8, !dbg !13447
  %37 = load %union.tree_node*, %union.tree_node** %block19, align 8, !dbg !13447
  store %union.tree_node* %37, %union.tree_node** %block, align 8, !dbg !13445
  %38 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13448
  %block20 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %38, i32 0, i32 8, !dbg !13449
  store %union.tree_node* null, %union.tree_node** %block20, align 8, !dbg !13450
  %39 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13451
  %40 = bitcast %struct.copy_body_data* %39 to i8*, !dbg !13451
  %call21 = call %union.tree_node* @walk_tree_1(%union.tree_node** %new_arg, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %40, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !13451
  %41 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !13452
  %42 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !13453
  %block22 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %42, i32 0, i32 8, !dbg !13454
  store %union.tree_node* %41, %union.tree_node** %block22, align 8, !dbg !13455
  %43 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !13456
  %tobool23 = icmp ne %union.tree_node* %43, null, !dbg !13456
  br i1 %tobool23, label %cond.false, label %cond.true, !dbg !13456

cond.true:                                        ; preds = %for.body14
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1940, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13456
  br label %cond.end, !dbg !13456

cond.false:                                       ; preds = %for.body14
  br label %cond.end, !dbg !13456

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13456
  %44 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !13457
  %base = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !13457
  %45 = bitcast %struct.tree_base* %base to i64*, !dbg !13457
  %bf.load = load i64, i64* %45, align 8, !dbg !13457
  %bf.clear = and i64 %bf.load, 65535, !dbg !13457
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13457
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !13459
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13460

land.lhs.true:                                    ; preds = %cond.end
  %46 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !13461
  %base24 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !13461
  %47 = bitcast %struct.tree_base* %base24 to i64*, !dbg !13461
  %bf.load25 = load i64, i64* %47, align 8, !dbg !13461
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !13461
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !13461
  %cmp28 = icmp ne i32 %bf.cast27, 29, !dbg !13462
  br i1 %cmp28, label %land.lhs.true29, label %if.end, !dbg !13463

land.lhs.true29:                                  ; preds = %land.lhs.true
  %48 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !13464
  %call30 = call zeroext i8 @is_gimple_val(%union.tree_node* %48), !dbg !13465
  %tobool31 = icmp ne i8 %call30, 0, !dbg !13465
  br i1 %tobool31, label %if.end, label %if.then32, !dbg !13466

if.then32:                                        ; preds = %land.lhs.true29
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !13467, metadata !DIExpression()), !dbg !13469
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !13469
  %49 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !13470
  %call33 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %49, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !13471
  store %union.tree_node* %call33, %union.tree_node** %new_arg, align 8, !dbg !13472
  %50 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !13473
  %51 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !13474
  %call34 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %50, %struct.gimple_seq_d* %51), !dbg !13475
  br label %if.end, !dbg !13476

if.end:                                           ; preds = %if.then32, %land.lhs.true29, %land.lhs.true, %cond.end
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !13477
  %53 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !13478
  %54 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !13479
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13480
  %56 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !13481
  %call35 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %55, %struct.edge_def* %56), !dbg !13482
  call void @add_phi_arg(%union.gimple_statement_d* %52, %union.tree_node* %53, %struct.edge_def* %54, i32 %call35), !dbg !13483
  br label %for.inc, !dbg !13484

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !13426
  br label %for.cond11, !dbg !13426, !llvm.loop !13485

for.end:                                          ; preds = %for.cond11
  br label %if.end36, !dbg !13487

if.end36:                                         ; preds = %for.end, %for.body
  br label %for.inc37, !dbg !13488

for.inc37:                                        ; preds = %if.end36
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !13489
  br label %for.cond, !dbg !13490, !llvm.loop !13491

for.end38:                                        ; preds = %for.cond
  ret void, !dbg !13493
}

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

declare dso_local void @gimple_duplicate_stmt_histograms(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !13494 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13495, metadata !DIExpression()), !dbg !13496
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !13497, metadata !DIExpression()), !dbg !13498
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13499
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !13500
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !13501
  ret void, !dbg !13502
}

declare dso_local void @gimple_regimplify_operands(%union.gimple_statement_d*, %struct.gimple_stmt_iterator*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %s) #0 !dbg !13503 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !13504, metadata !DIExpression()), !dbg !13505
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !13506
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !13507
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !13508
  %bf.load = load i32, i32* %1, align 8, !dbg !13508
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !13508
  %and = and i32 %bf.lshr, 16, !dbg !13509
  %cmp = icmp ne i32 %and, 0, !dbg !13510
  %conv = zext i1 %cmp to i32, !dbg !13510
  %conv1 = trunc i32 %conv to i8, !dbg !13511
  ret i8 %conv1, !dbg !13512
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !13513 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13516, metadata !DIExpression()), !dbg !13517
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13517
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !13517
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !13517
  ret %struct.VEC_tree_heap* %1, !dbg !13517
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_safe_grow(%struct.VEC_tree_heap** %vec_, i32 %size_) #0 !dbg !13518 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !13522, metadata !DIExpression()), !dbg !13523
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !13524, metadata !DIExpression()), !dbg !13523
  %0 = load i32, i32* %size_.addr, align 4, !dbg !13523
  %cmp = icmp sge i32 %0, 0, !dbg !13523
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !13523

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !13523
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !13523
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13523

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !13523
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !13523
  br label %cond.end, !dbg !13523

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !13523

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13523
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !13523
  %5 = load i32, i32* %size_.addr, align 4, !dbg !13523
  %cmp1 = icmp ule i32 %call, %5, !dbg !13523
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !13525
  %land.ext = zext i1 %6 to i32, !dbg !13523
  %7 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %8 = load i32, i32* %size_.addr, align 4, !dbg !13523
  %9 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %9, align 8, !dbg !13523
  %tobool2 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !13523
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !13523

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %11, align 8, !dbg !13523
  %tobool4 = icmp ne %struct.VEC_tree_heap* %12, null, !dbg !13523
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !13523

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %13, align 8, !dbg !13523
  %base6 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !13523
  br label %cond.end8, !dbg !13523

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !13523

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_tree_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !13523
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %cond9, i32 0, i32 0, !dbg !13523
  %15 = load i32, i32* %num, align 8, !dbg !13523
  br label %cond.end11, !dbg !13523

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !13523

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !13523
  %sub = sub nsw i32 %8, %cond12, !dbg !13523
  %call13 = call i32 @VEC_tree_heap_reserve_exact(%struct.VEC_tree_heap** %7, i32 %sub), !dbg !13523
  %16 = load i32, i32* %size_.addr, align 4, !dbg !13523
  %17 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %17, align 8, !dbg !13523
  %tobool14 = icmp ne %struct.VEC_tree_heap* %18, null, !dbg !13523
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !13523

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13523
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %19, align 8, !dbg !13523
  %base16 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i32 0, i32 0, !dbg !13523
  br label %cond.end18, !dbg !13523

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !13523

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !13523
  %num20 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %cond19, i32 0, i32 0, !dbg !13523
  store i32 %16, i32* %num20, align 8, !dbg !13523
  ret void, !dbg !13523
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) #0 !dbg !13526 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !13529, metadata !DIExpression()), !dbg !13530
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !13530
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !13530
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13530

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !13530
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 2, !dbg !13530
  %arraydecay = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 0, !dbg !13530
  br label %cond.end, !dbg !13530

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13530

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !13530
  ret %union.tree_node** %cond, !dbg !13530
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !13531 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13532, metadata !DIExpression()), !dbg !13533
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !13534, metadata !DIExpression()), !dbg !13535
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13536
  %1 = load i32, i32* %index.addr, align 4, !dbg !13537
  %add = add i32 %1, 3, !dbg !13538
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 %add), !dbg !13539
  ret %union.tree_node** %call, !dbg !13540
}

declare dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node*, %struct.VEC_tree_heap*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !13541 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !13544, metadata !DIExpression()), !dbg !13545
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13546
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !13546
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !13546
  br i1 %tobool, label %if.then, label %if.end, !dbg !13545

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13546
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !13546
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !13546
  call void @free(i8* %4), !dbg !13546
  br label %if.end, !dbg !13546

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13545
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !13545
  ret void, !dbg !13545
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_copy_flags(%union.gimple_statement_d* %dest_call, %union.gimple_statement_d* %orig_call) #0 !dbg !13548 {
entry:
  %dest_call.addr = alloca %union.gimple_statement_d*, align 8
  %orig_call.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dest_call, %union.gimple_statement_d** %dest_call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dest_call.addr, metadata !13551, metadata !DIExpression()), !dbg !13552
  store %union.gimple_statement_d* %orig_call, %union.gimple_statement_d** %orig_call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_call.addr, metadata !13553, metadata !DIExpression()), !dbg !13554
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_call.addr, align 8, !dbg !13555
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !13556
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !13557
  %bf.load = load i32, i32* %1, align 8, !dbg !13557
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !13557
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dest_call.addr, align 8, !dbg !13558
  %gsbase1 = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !13559
  %3 = bitcast %struct.gimple_statement_base* %gsbase1 to i32*, !dbg !13560
  %bf.load2 = load i32, i32* %3, align 8, !dbg !13561
  %bf.value = and i32 %bf.lshr, 65535, !dbg !13561
  %bf.shl = shl i32 %bf.value, 16, !dbg !13561
  %bf.clear = and i32 %bf.load2, 65535, !dbg !13561
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !13561
  store i32 %bf.set, i32* %3, align 8, !dbg !13561
  ret void, !dbg !13562
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %s, i8 zeroext %pass_arg_pack_p) #0 !dbg !13563 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %pass_arg_pack_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !13564, metadata !DIExpression()), !dbg !13565
  store i8 %pass_arg_pack_p, i8* %pass_arg_pack_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %pass_arg_pack_p.addr, metadata !13566, metadata !DIExpression()), !dbg !13567
  %0 = load i8, i8* %pass_arg_pack_p.addr, align 1, !dbg !13568
  %tobool = icmp ne i8 %0, 0, !dbg !13568
  br i1 %tobool, label %if.then, label %if.else, !dbg !13570

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !13571
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !13572
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !13573
  %bf.load = load i32, i32* %2, align 8, !dbg !13574
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !13574
  %or = or i32 %bf.lshr, 16, !dbg !13574
  %bf.load1 = load i32, i32* %2, align 8, !dbg !13574
  %bf.value = and i32 %or, 65535, !dbg !13574
  %bf.shl = shl i32 %bf.value, 16, !dbg !13574
  %bf.clear = and i32 %bf.load1, 65535, !dbg !13574
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !13574
  store i32 %bf.set, i32* %2, align 8, !dbg !13574
  br label %if.end, !dbg !13571

if.else:                                          ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !13575
  %gsbase2 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !13576
  %4 = bitcast %struct.gimple_statement_base* %gsbase2 to i32*, !dbg !13577
  %bf.load3 = load i32, i32* %4, align 8, !dbg !13578
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !13578
  %and = and i32 %bf.lshr4, -17, !dbg !13578
  %bf.load5 = load i32, i32* %4, align 8, !dbg !13578
  %bf.value6 = and i32 %and, 65535, !dbg !13578
  %bf.shl7 = shl i32 %bf.value6, 16, !dbg !13578
  %bf.clear8 = and i32 %bf.load5, 65535, !dbg !13578
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !13578
  store i32 %bf.set9, i32* %4, align 8, !dbg !13578
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !13579
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !13580 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13583, metadata !DIExpression()), !dbg !13584
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !13585, metadata !DIExpression()), !dbg !13586
  %0 = load i32, i32* %location.addr, align 4, !dbg !13587
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13588
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !13589
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !13590
  store i32 %0, i32* %location1, align 8, !dbg !13591
  ret void, !dbg !13592
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !13593 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13594, metadata !DIExpression()), !dbg !13595
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !13596, metadata !DIExpression()), !dbg !13597
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13598
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13599
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !13600
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13601
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !13601
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !13603

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13604
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !13604
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !13604
  %bf.load = load i64, i64* %4, align 8, !dbg !13604
  %bf.clear = and i64 %bf.load, 65535, !dbg !13604
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13604
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !13605
  br i1 %cmp, label %if.then, label %if.end, !dbg !13606

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13607
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !13608
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !13608
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !13608
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !13609
  br label %if.end, !dbg !13608

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !13610
}

declare dso_local void @gimple_set_bb(%union.gimple_statement_d*, %struct.basic_block_def*) #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

declare dso_local %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge*, %struct.cgraph_node*, %union.gimple_statement_d*, i32, i64, i32, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !13611 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13612, metadata !DIExpression()), !dbg !13613
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13614
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !13615
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !13616
  %1 = load i32, i32* %uid, align 4, !dbg !13616
  ret i32 %1, !dbg !13617
}

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local %union.gimple_statement_d* @cgraph_redirect_edge_call_stmt_to_callee(%struct.cgraph_edge*) #2

declare dso_local void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node*, %union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local void @cgraph_set_call_stmt(%struct.cgraph_edge*, %union.gimple_statement_d*) #2

declare dso_local void @cgraph_create_edge_including_clones(%struct.cgraph_node*, %struct.cgraph_node*, %union.gimple_statement_d*, %union.gimple_statement_d*, i64, i32, i32, i32) #2

declare dso_local %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node*, %struct.cgraph_node*, %union.gimple_statement_d*, i64, i32, i32) #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) #2

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*, %struct.pointer_map_t*, i32) #2

declare dso_local void @find_new_referenced_vars(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !13618 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !13622, metadata !DIExpression()), !dbg !13623
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !13624, metadata !DIExpression()), !dbg !13625
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !13626, metadata !DIExpression()), !dbg !13627
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13628
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13629
  %2 = load i32, i32* %flags.addr, align 4, !dbg !13630
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !13631
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13632
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !13633
  store i32 1, i32* %iter_type, align 4, !dbg !13634
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13635
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !13636
  ret %union.tree_node* %call, !dbg !13637
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !13638 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !13643, metadata !DIExpression()), !dbg !13644
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13645
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !13646
  %1 = load i8, i8* %done, align 8, !dbg !13646
  ret i8 %1, !dbg !13647
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !13648 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !13651, metadata !DIExpression()), !dbg !13652
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !13653, metadata !DIExpression()), !dbg !13654
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13655
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !13657
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !13657
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !13655
  br i1 %tobool, label %if.then, label %if.end, !dbg !13658

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13659
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !13659
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !13659
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !13659
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !13659
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !13661
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13662
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !13663
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !13663
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !13664
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !13664
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13665
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !13666
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !13667
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !13668
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !13669
  br label %return, !dbg !13669

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13670
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !13672
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !13672
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !13670
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !13673

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13674
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !13674
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !13674
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !13674
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !13674
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !13674
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !13676
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13677
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !13678
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !13678
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !13679
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !13679
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13680
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !13681
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !13682
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !13683
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !13684
  br label %return, !dbg !13684

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13685
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !13686
  store i8 1, i8* %done, align 8, !dbg !13687
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13688
  br label %return, !dbg !13688

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13689
  ret %union.tree_node* %20, !dbg !13689
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !13690 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !13695, metadata !DIExpression()), !dbg !13696
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !13696
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !13696
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13696

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !13696
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !13696
  %2 = load i32, i32* %num, align 8, !dbg !13696
  br label %cond.end, !dbg !13696

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13696

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !13696
  ret i32 %cond, !dbg !13696
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve_exact(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !13697 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !13700, metadata !DIExpression()), !dbg !13701
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13702, metadata !DIExpression()), !dbg !13701
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13703, metadata !DIExpression()), !dbg !13701
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13701
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !13701
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !13701
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13701

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13701
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !13701
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !13701
  br label %cond.end, !dbg !13701

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13701

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13701
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13701
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !13701
  %tobool1 = icmp ne i32 %call, 0, !dbg !13701
  %lnot = xor i1 %tobool1, true, !dbg !13701
  %lnot.ext = zext i1 %lnot to i32, !dbg !13701
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13701
  %5 = load i32, i32* %extend, align 4, !dbg !13704
  %tobool2 = icmp ne i32 %5, 0, !dbg !13704
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13701

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13704
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !13704
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !13704
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13704
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !13704
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !13704
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !13704
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !13704
  br label %if.end, !dbg !13704

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13701
  ret i32 %12, !dbg !13701
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !13706 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !13709, metadata !DIExpression()), !dbg !13710
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !13711, metadata !DIExpression()), !dbg !13712
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !13713, metadata !DIExpression()), !dbg !13714
  %0 = load i32, i32* %flags.addr, align 4, !dbg !13715
  %and = and i32 %0, 8, !dbg !13715
  %tobool = icmp ne i32 %and, 0, !dbg !13715
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !13715

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !13715
  %and1 = and i32 %1, 2, !dbg !13715
  %tobool2 = icmp ne i32 %and1, 0, !dbg !13715
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !13715

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !13715
  %and3 = and i32 %2, 4, !dbg !13715
  %tobool4 = icmp ne i32 %and3, 0, !dbg !13715
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !13715

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !13715
  %and6 = and i32 %3, 1, !dbg !13715
  %tobool7 = icmp ne i32 %and6, 0, !dbg !13715
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !13715

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13715
  br label %cond.end, !dbg !13715

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !13715

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13715
  %4 = load i32, i32* %flags.addr, align 4, !dbg !13716
  %and8 = and i32 %4, 10, !dbg !13717
  %tobool9 = icmp ne i32 %and8, 0, !dbg !13717
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !13718

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13719
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !13720
  br label %cond.end12, !dbg !13718

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !13718

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !13718
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13721
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !13722
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !13723
  %7 = load i32, i32* %flags.addr, align 4, !dbg !13724
  %and14 = and i32 %7, 8, !dbg !13726
  %tobool15 = icmp ne i32 %and14, 0, !dbg !13726
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !13727

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13728
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !13729
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !13729
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !13728
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !13730

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13731
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !13732
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !13733
  br i1 %cmp, label %if.then, label %if.end, !dbg !13734

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13735
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !13736
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !13736
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !13737
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !13737
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13738
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !13739
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !13740
  br label %if.end, !dbg !13738

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !13741
  %and23 = and i32 %15, 5, !dbg !13742
  %tobool24 = icmp ne i32 %and23, 0, !dbg !13742
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !13743

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13744
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !13745
  br label %cond.end28, !dbg !13743

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !13743

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !13743
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13746
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !13747
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !13748
  %18 = load i32, i32* %flags.addr, align 4, !dbg !13749
  %and30 = and i32 %18, 4, !dbg !13751
  %tobool31 = icmp ne i32 %and30, 0, !dbg !13751
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !13752

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13753
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !13754
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !13754
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !13753
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !13755

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13756
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !13757
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !13758
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !13759

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13760
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !13761
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !13761
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !13762
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !13762
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13763
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !13764
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !13765
  br label %if.end42, !dbg !13763

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13766
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !13767
  store i8 0, i8* %done, align 8, !dbg !13768
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13769
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !13770
  store i32 0, i32* %phi_i, align 8, !dbg !13771
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13772
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !13773
  store i32 0, i32* %num_phi, align 4, !dbg !13774
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !13775
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !13776
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !13777
  ret void, !dbg !13778
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !13779 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13782, metadata !DIExpression()), !dbg !13783
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13784
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !13786
  %tobool = icmp ne i8 %call, 0, !dbg !13786
  br i1 %tobool, label %if.end, label %if.then, !dbg !13787

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !13788
  br label %return, !dbg !13788

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13789
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !13790
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !13791
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !13792
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !13792
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !13793
  br label %return, !dbg !13793

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !13794
  ret %struct.def_optype_d* %3, !dbg !13794
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !13795 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13796, metadata !DIExpression()), !dbg !13797
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13798
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !13800
  %tobool = icmp ne i8 %call, 0, !dbg !13800
  br i1 %tobool, label %if.end, label %if.then, !dbg !13801

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13802
  br label %return, !dbg !13802

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13803
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !13804
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !13805
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !13805
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !13806
  br label %return, !dbg !13806

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13807
  ret %union.tree_node* %3, !dbg !13807
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !13808 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13811, metadata !DIExpression()), !dbg !13812
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13813
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !13815
  %tobool = icmp ne i8 %call, 0, !dbg !13815
  br i1 %tobool, label %if.end, label %if.then, !dbg !13816

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !13817
  br label %return, !dbg !13817

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13818
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !13819
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !13820
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !13821
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !13821
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !13822
  br label %return, !dbg !13822

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !13823
  ret %struct.use_optype_d* %3, !dbg !13823
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !13824 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13825, metadata !DIExpression()), !dbg !13826
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13827
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !13829
  %tobool = icmp ne i8 %call, 0, !dbg !13829
  br i1 %tobool, label %if.end, label %if.then, !dbg !13830

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13831
  br label %return, !dbg !13831

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13832
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !13833
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !13834
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !13834
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !13835
  br label %return, !dbg !13835

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13836
  ret %union.tree_node* %3, !dbg !13836
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !13837 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !13843, metadata !DIExpression()), !dbg !13844
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !13845
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !13846
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !13846
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !13847
  ret %union.tree_node* %2, !dbg !13848
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !13849 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !13853, metadata !DIExpression()), !dbg !13854
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !13855
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !13856
  ret %union.tree_node* %1, !dbg !13857
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !13858 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !13861, metadata !DIExpression()), !dbg !13862
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !13863, metadata !DIExpression()), !dbg !13864
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !13865
  store i32 0, i32* %index, align 8, !dbg !13866
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !13867
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !13868
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !13869
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !13870
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !13870
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !13870
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !13871 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !13875, metadata !DIExpression()), !dbg !13876
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !13877, metadata !DIExpression()), !dbg !13878
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13879
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !13879
  %5 = load i32, i32* %4, align 8, !dbg !13879
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !13879
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !13879
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !13879
  %tobool = icmp ne i8 %call, 0, !dbg !13879
  br i1 %tobool, label %if.else, label %if.then, !dbg !13881

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13882
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !13882
  %10 = load i32, i32* %9, align 8, !dbg !13882
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !13882
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !13882
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !13882
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !13884
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !13885
  store i8 1, i8* %retval, align 1, !dbg !13886
  br label %return, !dbg !13886

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !13887
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !13889
  store i8 0, i8* %retval, align 1, !dbg !13890
  br label %return, !dbg !13890

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !13891
  ret i8 %15, !dbg !13891
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !13892 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !13896, metadata !DIExpression()), !dbg !13897
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !13898
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !13898
  %1 = load i32, i32* %index, align 8, !dbg !13898
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !13898
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !13898
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !13898
  %5 = load i32, i32* %4, align 8, !dbg !13898
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !13898
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !13898
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !13898
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !13898
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13898

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !13898
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !13898
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !13898
  %11 = load i32, i32* %10, align 8, !dbg !13898
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !13898
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !13898
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !13898
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !13898
  br label %cond.end, !dbg !13898

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13898

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13898
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !13898
  %cmp = icmp ult i32 %1, %call2, !dbg !13898
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !13898

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13898
  br label %cond.end5, !dbg !13898

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !13898

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !13898
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !13899
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !13900
  %15 = load i32, i32* %index7, align 8, !dbg !13901
  %inc = add i32 %15, 1, !dbg !13901
  store i32 %inc, i32* %index7, align 8, !dbg !13901
  ret void, !dbg !13902
}

declare dso_local zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d*) #2

declare dso_local void @make_eh_edges(%union.gimple_statement_d*) #2

declare dso_local void @make_abnormal_goto_edges(%struct.basic_block_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_ssa_across_abnormal_edges(%struct.basic_block_def* %bb, %struct.basic_block_def* %ret_bb, i8 zeroext %can_throw, i8 zeroext %nonlocal_goto) #0 !dbg !13903 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %ret_bb.addr = alloca %struct.basic_block_def*, align 8
  %can_throw.addr = alloca i8, align 1
  %nonlocal_goto.addr = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp18 = alloca %struct.gimple_stmt_iterator, align 8
  %re = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !13906, metadata !DIExpression()), !dbg !13907
  store %struct.basic_block_def* %ret_bb, %struct.basic_block_def** %ret_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ret_bb.addr, metadata !13908, metadata !DIExpression()), !dbg !13909
  store i8 %can_throw, i8* %can_throw.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %can_throw.addr, metadata !13910, metadata !DIExpression()), !dbg !13911
  store i8 %nonlocal_goto, i8* %nonlocal_goto.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nonlocal_goto.addr, metadata !13912, metadata !DIExpression()), !dbg !13913
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !13914, metadata !DIExpression()), !dbg !13915
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !13916, metadata !DIExpression()), !dbg !13917
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13918
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !13918
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !13918
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !13918
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !13918
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !13918
  store i32 %3, i32* %2, align 8, !dbg !13918
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !13918
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !13918
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !13918
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !13918
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !13918
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !13918
  br label %for.cond, !dbg !13918

for.cond:                                         ; preds = %for.inc72, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13920
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !13920
  %10 = load i32, i32* %9, align 8, !dbg !13920
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !13920
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !13920
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !13920
  %tobool = icmp ne i8 %call1, 0, !dbg !13918
  br i1 %tobool, label %for.body, label %for.end73, !dbg !13918

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13922
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !13924
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !13924
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 2, !dbg !13925
  %15 = load i8*, i8** %aux, align 8, !dbg !13925
  %tobool2 = icmp ne i8* %15, null, !dbg !13922
  br i1 %tobool2, label %lor.lhs.false, label %if.then, !dbg !13926

lor.lhs.false:                                    ; preds = %for.body
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13927
  %dest3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 1, !dbg !13928
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest3, align 8, !dbg !13928
  %aux4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 2, !dbg !13929
  %18 = load i8*, i8** %aux4, align 8, !dbg !13929
  %19 = bitcast i8* %18 to %struct.basic_block_def*, !dbg !13930
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !13931
  %20 = load i32, i32* %index, align 8, !dbg !13931
  %cmp = icmp eq i32 %20, 0, !dbg !13932
  br i1 %cmp, label %if.then, label %if.end71, !dbg !13933

if.then:                                          ; preds = %lor.lhs.false, %for.body
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !13934, metadata !DIExpression()), !dbg !13936
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !13937, metadata !DIExpression()), !dbg !13938
  %21 = load i8, i8* %nonlocal_goto.addr, align 1, !dbg !13939
  %tobool5 = icmp ne i8 %21, 0, !dbg !13939
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !13941

if.then6:                                         ; preds = %if.then
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13942
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !13942
  %23 = load i32, i32* %flags, align 8, !dbg !13942
  %and = and i32 %23, 8, !dbg !13942
  %tobool7 = icmp ne i32 %and, 0, !dbg !13942
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !13942

cond.true:                                        ; preds = %if.then6
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1775, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13942
  br label %cond.end, !dbg !13942

cond.false:                                       ; preds = %if.then6
  br label %cond.end, !dbg !13942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13942
  br label %if.end, !dbg !13942

if.end:                                           ; preds = %cond.end, %if.then
  %24 = load i8, i8* %can_throw.addr, align 1, !dbg !13943
  %tobool8 = icmp ne i8 %24, 0, !dbg !13943
  br i1 %tobool8, label %if.end17, label %if.then9, !dbg !13945

if.then9:                                         ; preds = %if.end
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13946
  %flags10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 7, !dbg !13946
  %26 = load i32, i32* %flags10, align 8, !dbg !13946
  %and11 = and i32 %26, 8, !dbg !13946
  %tobool12 = icmp ne i32 %and11, 0, !dbg !13946
  br i1 %tobool12, label %cond.true13, label %cond.false14, !dbg !13946

cond.true13:                                      ; preds = %if.then9
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1778, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13946
  br label %cond.end15, !dbg !13946

cond.false14:                                     ; preds = %if.then9
  br label %cond.end15, !dbg !13946

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !13946
  br label %if.end17, !dbg !13946

if.end17:                                         ; preds = %cond.end15, %if.end
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13947
  %dest19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 1, !dbg !13949
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %dest19, align 8, !dbg !13949
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp18, %struct.basic_block_def* %28), !dbg !13950
  %29 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !13950
  %30 = bitcast %struct.gimple_stmt_iterator* %tmp18 to i8*, !dbg !13950
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 24, i1 false), !dbg !13950
  br label %for.cond20, !dbg !13951

for.cond20:                                       ; preds = %for.inc, %if.end17
  %call21 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13952
  %tobool22 = icmp ne i8 %call21, 0, !dbg !13954
  %lnot = xor i1 %tobool22, true, !dbg !13954
  br i1 %lnot, label %for.body23, label %for.end, !dbg !13955

for.body23:                                       ; preds = %for.cond20
  call void @llvm.dbg.declare(metadata %struct.edge_def** %re, metadata !13956, metadata !DIExpression()), !dbg !13958
  %call24 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !13959
  store %union.gimple_statement_d* %call24, %union.gimple_statement_d** %phi, align 8, !dbg !13960
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13961
  %dest25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 1, !dbg !13961
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dest25, align 8, !dbg !13961
  %aux26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 2, !dbg !13961
  %33 = load i8*, i8** %aux26, align 8, !dbg !13961
  %tobool27 = icmp ne i8* %33, null, !dbg !13961
  br i1 %tobool27, label %cond.true28, label %cond.false29, !dbg !13961

cond.true28:                                      ; preds = %for.body23
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1787, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13961
  br label %cond.end30, !dbg !13961

cond.false29:                                     ; preds = %for.body23
  br label %cond.end30, !dbg !13961

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !13961
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13962
  %flags32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 7, !dbg !13962
  %35 = load i32, i32* %flags32, align 8, !dbg !13962
  %and33 = and i32 %35, 8, !dbg !13962
  %tobool34 = icmp ne i32 %and33, 0, !dbg !13962
  br i1 %tobool34, label %cond.false40, label %lor.lhs.false35, !dbg !13962

lor.lhs.false35:                                  ; preds = %cond.end30
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13962
  %call36 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %36), !dbg !13962
  %call37 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call36), !dbg !13962
  %base = bitcast %union.tree_node* %call37 to %struct.tree_base*, !dbg !13962
  %37 = bitcast %struct.tree_base* %base to i64*, !dbg !13962
  %bf.load = load i64, i64* %37, align 8, !dbg !13962
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !13962
  %bf.clear = and i64 %bf.lshr, 1, !dbg !13962
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13962
  %tobool38 = icmp ne i32 %bf.cast, 0, !dbg !13962
  br i1 %tobool38, label %cond.false40, label %cond.true39, !dbg !13962

cond.true39:                                      ; preds = %lor.lhs.false35
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1790, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13962
  br label %cond.end41, !dbg !13962

cond.false40:                                     ; preds = %lor.lhs.false35, %cond.end30
  br label %cond.end41, !dbg !13962

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !13962
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13963
  %call43 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %38), !dbg !13963
  %call44 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call43), !dbg !13963
  %call45 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call44), !dbg !13965
  %tobool46 = icmp ne i8 %call45, 0, !dbg !13965
  br i1 %tobool46, label %if.end50, label %if.then47, !dbg !13966

if.then47:                                        ; preds = %cond.end41
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13967
  %call48 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %39), !dbg !13967
  %call49 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call48), !dbg !13967
  %ssa_name = bitcast %union.tree_node* %call49 to %struct.tree_ssa_name*, !dbg !13967
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !13967
  %40 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13967
  call void @mark_sym_for_renaming(%union.tree_node* %40), !dbg !13969
  br label %for.inc, !dbg !13970

if.end50:                                         ; preds = %cond.end41
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %ret_bb.addr, align 8, !dbg !13971
  %42 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13972
  %dest51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 1, !dbg !13973
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %dest51, align 8, !dbg !13973
  %call52 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %41, %struct.basic_block_def* %43), !dbg !13974
  store %struct.edge_def* %call52, %struct.edge_def** %re, align 8, !dbg !13975
  %44 = load %struct.edge_def*, %struct.edge_def** %re, align 8, !dbg !13976
  %tobool53 = icmp ne %struct.edge_def* %44, null, !dbg !13976
  br i1 %tobool53, label %cond.false55, label %cond.true54, !dbg !13976

cond.true54:                                      ; preds = %if.end50
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1799, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13976
  br label %cond.end56, !dbg !13976

cond.false55:                                     ; preds = %if.end50
  br label %cond.end56, !dbg !13976

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi i32 [ 0, %cond.true54 ], [ 0, %cond.false55 ], !dbg !13976
  %45 = load %struct.edge_def*, %struct.edge_def** %re, align 8, !dbg !13977
  %flags58 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 7, !dbg !13977
  %46 = load i32, i32* %flags58, align 8, !dbg !13977
  %and59 = and i32 %46, 10, !dbg !13977
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13977
  %flags60 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 7, !dbg !13977
  %48 = load i32, i32* %flags60, align 8, !dbg !13977
  %and61 = and i32 %48, 10, !dbg !13977
  %cmp62 = icmp eq i32 %and59, %and61, !dbg !13977
  br i1 %cmp62, label %cond.false64, label %cond.true63, !dbg !13977

cond.true63:                                      ; preds = %cond.end56
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13977
  br label %cond.end65, !dbg !13977

cond.false64:                                     ; preds = %cond.end56
  br label %cond.end65, !dbg !13977

cond.end65:                                       ; preds = %cond.false64, %cond.true63
  %cond66 = phi i32 [ 0, %cond.true63 ], [ 0, %cond.false64 ], !dbg !13977
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13978
  %50 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13978
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 6, !dbg !13978
  %51 = load i32, i32* %dest_idx, align 4, !dbg !13978
  %call67 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %49, i32 %51), !dbg !13978
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !13978
  %53 = load %struct.edge_def*, %struct.edge_def** %re, align 8, !dbg !13978
  %dest_idx68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 6, !dbg !13978
  %54 = load i32, i32* %dest_idx68, align 4, !dbg !13978
  %call69 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %52, i32 %54), !dbg !13978
  %call70 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call69), !dbg !13978
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call67, %union.tree_node* %call70), !dbg !13978
  br label %for.inc, !dbg !13979

for.inc:                                          ; preds = %cond.end65, %if.then47
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !13980
  br label %for.cond20, !dbg !13981, !llvm.loop !13982

for.end:                                          ; preds = %for.cond20
  br label %if.end71, !dbg !13984

if.end71:                                         ; preds = %for.end, %lor.lhs.false
  br label %for.inc72, !dbg !13985

for.inc72:                                        ; preds = %if.end71
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !13920
  br label %for.cond, !dbg !13920, !llvm.loop !13986

for.end73:                                        ; preds = %for.cond
  ret void, !dbg !13988
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !13989 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !13992, metadata !DIExpression()), !dbg !13993
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !13994
  %3 = load i32, i32* %index, align 8, !dbg !13994
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !13995
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !13995
  %6 = load i32, i32* %5, align 8, !dbg !13995
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !13995
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !13995
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !13995
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !13995
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13995

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !13995
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !13995
  %11 = load i32, i32* %10, align 8, !dbg !13995
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !13995
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !13995
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !13995
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !13995
  br label %cond.end, !dbg !13995

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13995

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13995
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !13995
  %cmp = icmp eq i32 %3, %call2, !dbg !13996
  %conv = zext i1 %cmp to i32, !dbg !13996
  %conv3 = trunc i32 %conv to i8, !dbg !13997
  ret i8 %conv3, !dbg !13998
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !13999 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !14002, metadata !DIExpression()), !dbg !14003
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !14004
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !14004
  %5 = load i32, i32* %4, align 8, !dbg !14004
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !14004
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !14004
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !14004
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !14004
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14004

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !14004
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !14004
  %10 = load i32, i32* %9, align 8, !dbg !14004
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !14004
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !14004
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !14004
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !14004
  br label %cond.end, !dbg !14004

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14004
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !14004
  %13 = load i32, i32* %index, align 8, !dbg !14004
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !14004
  ret %struct.edge_def* %call2, !dbg !14005
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !14006 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !14009, metadata !DIExpression()), !dbg !14010
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !14011
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !14011
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !14011
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !14011

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14011
  br label %cond.end, !dbg !14011

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14011

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14011
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !14012
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !14012
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !14013
  ret %struct.VEC_edge_gc* %5, !dbg !14014
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !14015 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14016, metadata !DIExpression()), !dbg !14017
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14018
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !14019
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !14020
  ret %union.tree_node** %result, !dbg !14021
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !14022 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !14025, metadata !DIExpression()), !dbg !14026
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !14027, metadata !DIExpression()), !dbg !14028
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !14029
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !14030
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14031
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !14032
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !14033
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !14033
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !14034
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !14035
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14036
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !14037
  ret void, !dbg !14038
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !14039 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14042, metadata !DIExpression()), !dbg !14043
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !14044, metadata !DIExpression()), !dbg !14045
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14046
  %1 = load i32, i32* %i.addr, align 4, !dbg !14047
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !14048
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !14049
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !14050
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !14051 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !14054, metadata !DIExpression()), !dbg !14055
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14056
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !14058
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !14058
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !14059
  br i1 %cmp, label %if.then, label %if.end, !dbg !14060

if.then:                                          ; preds = %entry
  br label %return, !dbg !14061

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14062
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !14063
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !14063
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14064
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !14065
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !14065
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !14066
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !14067
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14068
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !14069
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !14069
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14070
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !14071
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !14071
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !14072
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !14073
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14074
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !14075
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !14076
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14077
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !14078
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !14079
  br label %return, !dbg !14080

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !14080
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !14081 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !14084, metadata !DIExpression()), !dbg !14085
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !14086, metadata !DIExpression()), !dbg !14087
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !14088, metadata !DIExpression()), !dbg !14089
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !14090
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !14090
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !14092

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !14093
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !14093
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !14093
  %bf.load = load i64, i64* %2, align 8, !dbg !14093
  %bf.clear = and i64 %bf.load, 65535, !dbg !14093
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14093
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !14094
  br i1 %cmp, label %if.then, label %if.else, !dbg !14095

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14096
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !14097
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !14098
  br label %if.end, !dbg !14096

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !14099
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !14099
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !14099
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !14101
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14102
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !14103
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !14104
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !14105
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !14106 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !14109, metadata !DIExpression()), !dbg !14110
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !14111, metadata !DIExpression()), !dbg !14112
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14113
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14114
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !14115
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !14116
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14117
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !14118
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !14118
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14119
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !14120
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !14121
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14122
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14123
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !14124
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !14124
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !14125
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !14126
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14127
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14128
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !14129
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !14130
  ret void, !dbg !14131
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !14132 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14136, metadata !DIExpression()), !dbg !14137
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !14138, metadata !DIExpression()), !dbg !14139
  %0 = load i32, i32* %index.addr, align 4, !dbg !14140
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14140
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !14140
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !14140
  %2 = load i32, i32* %capacity, align 8, !dbg !14140
  %cmp = icmp ule i32 %0, %2, !dbg !14140
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !14140

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14140
  br label %cond.end, !dbg !14140

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14140
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14141
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !14142
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !14143
  %4 = load i32, i32* %index.addr, align 4, !dbg !14144
  %idxprom = zext i32 %4 to i64, !dbg !14141
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !14141
  ret %struct.phi_arg_d* %arrayidx, !dbg !14145
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !14146 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14147, metadata !DIExpression()), !dbg !14148
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14149
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !14149
  %1 = load i32, i32* %flags, align 8, !dbg !14149
  %and = and i32 %1, 512, !dbg !14149
  %tobool = icmp ne i32 %and, 0, !dbg !14149
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14149

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14149
  br label %cond.end, !dbg !14149

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14149

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14149
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14150
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !14152
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !14153
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !14153
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !14150
  br i1 %tobool1, label %if.end, label %if.then, !dbg !14154

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !14155
  br label %return, !dbg !14155

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14156
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !14157
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !14158
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !14158
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !14159
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !14159
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !14160
  br label %return, !dbg !14160

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !14161
  ret %struct.gimple_seq_d* %7, !dbg !14161
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #2

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) #0 !dbg !14162 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14165, metadata !DIExpression()), !dbg !14166
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !14167, metadata !DIExpression()), !dbg !14168
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14169
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !14170
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !14171
  %2 = load i32, i32* %dest_idx, align 4, !dbg !14171
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %2), !dbg !14172
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !14173
  %3 = load i32, i32* %locus, align 8, !dbg !14173
  ret i32 %3, !dbg !14174
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !14175 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !14178, metadata !DIExpression()), !dbg !14179
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14180, metadata !DIExpression()), !dbg !14179
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !14181, metadata !DIExpression()), !dbg !14179
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14182
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !14182
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !14182

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !14182
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14182
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !14182
  %3 = load i32, i32* %num, align 8, !dbg !14182
  %cmp = icmp ult i32 %1, %3, !dbg !14182
  br i1 %cmp, label %if.then, label %if.else, !dbg !14179

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !14184
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !14184
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !14184
  %idxprom = zext i32 %5 to i64, !dbg !14184
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !14184
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !14184
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !14184
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !14184
  store i32 1, i32* %retval, align 4, !dbg !14184
  br label %return, !dbg !14184

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !14186
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !14186
  store i32 0, i32* %retval, align 4, !dbg !14186
  br label %return, !dbg !14186

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !14179
  ret i32 %9, !dbg !14179
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_debug_stmt(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) #0 !dbg !14188 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %n = alloca %union.tree_node**, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %n1 = alloca %union.tree_node**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14191, metadata !DIExpression()), !dbg !14192
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !14193, metadata !DIExpression()), !dbg !14194
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14195, metadata !DIExpression()), !dbg !14196
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n, metadata !14197, metadata !DIExpression()), !dbg !14198
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !14199, metadata !DIExpression()), !dbg !14200
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !14201
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %0, i32 0, i32 8, !dbg !14202
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14202
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !14203
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14204
  %call = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %2), !dbg !14206
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !14206
  br i1 %tobool, label %if.then, label %if.end6, !dbg !14207

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node*** %n1, metadata !14208, metadata !DIExpression()), !dbg !14210
  %3 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !14211
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %3, i32 0, i32 6, !dbg !14212
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !14212
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14213
  %call2 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %5), !dbg !14214
  %6 = bitcast %union.tree_node* %call2 to i8*, !dbg !14214
  %call3 = call i8** @pointer_map_contains(%struct.pointer_map_t* %4, i8* %6), !dbg !14215
  %7 = bitcast i8** %call3 to %union.tree_node**, !dbg !14216
  store %union.tree_node** %7, %union.tree_node*** %n1, align 8, !dbg !14217
  %8 = load %union.tree_node**, %union.tree_node*** %n1, align 8, !dbg !14218
  %tobool4 = icmp ne %union.tree_node** %8, null, !dbg !14218
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !14220

if.then5:                                         ; preds = %if.then
  %9 = load %union.tree_node**, %union.tree_node*** %n1, align 8, !dbg !14221
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !14222
  store %union.tree_node* %10, %union.tree_node** %t, align 8, !dbg !14223
  br label %if.end, !dbg !14224

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end6, !dbg !14225

if.end6:                                          ; preds = %if.end, %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14226
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14227
  call void @gimple_set_block(%union.gimple_statement_d* %11, %union.tree_node* %12), !dbg !14228
  %13 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !14229
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 56, i1 false), !dbg !14229
  %14 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !14230
  %15 = bitcast %struct.copy_body_data* %14 to i8*, !dbg !14230
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !14231
  store i8* %15, i8** %info, align 8, !dbg !14232
  store i32 1, i32* @processing_debug_stmt, align 4, !dbg !14233
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14234
  %call7 = call %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %16), !dbg !14235
  store %union.tree_node* %call7, %union.tree_node** %t, align 8, !dbg !14236
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14237
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !14237
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !14237
  %bf.load = load i64, i64* %18, align 8, !dbg !14237
  %bf.clear = and i64 %bf.load, 65535, !dbg !14237
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14237
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !14239
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !14240

land.lhs.true:                                    ; preds = %if.end6
  %19 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !14241
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %19, i32 0, i32 22, !dbg !14242
  %20 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !14242
  %tobool8 = icmp ne %struct.pointer_map_t* %20, null, !dbg !14241
  br i1 %tobool8, label %land.lhs.true9, label %if.else, !dbg !14243

land.lhs.true9:                                   ; preds = %land.lhs.true
  %21 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !14244
  %debug_map10 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %21, i32 0, i32 22, !dbg !14245
  %22 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map10, align 8, !dbg !14245
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14246
  %24 = bitcast %union.tree_node* %23 to i8*, !dbg !14246
  %call11 = call i8** @pointer_map_contains(%struct.pointer_map_t* %22, i8* %24), !dbg !14247
  %25 = bitcast i8** %call11 to %union.tree_node**, !dbg !14248
  store %union.tree_node** %25, %union.tree_node*** %n, align 8, !dbg !14249
  %tobool12 = icmp ne %union.tree_node** %25, null, !dbg !14249
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !14250

if.then13:                                        ; preds = %land.lhs.true9
  %26 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !14251
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !14251
  %base14 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !14251
  %28 = bitcast %struct.tree_base* %base14 to i64*, !dbg !14251
  %bf.load15 = load i64, i64* %28, align 8, !dbg !14251
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !14251
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !14251
  %cmp18 = icmp eq i32 %bf.cast17, 32, !dbg !14251
  br i1 %cmp18, label %cond.false, label %cond.true, !dbg !14251

cond.true:                                        ; preds = %if.then13
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2150, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !14251
  br label %cond.end, !dbg !14251

cond.false:                                       ; preds = %if.then13
  br label %cond.end, !dbg !14251

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14251
  %29 = load %union.tree_node**, %union.tree_node*** %n, align 8, !dbg !14253
  %30 = load %union.tree_node*, %union.tree_node** %29, align 8, !dbg !14254
  store %union.tree_node* %30, %union.tree_node** %t, align 8, !dbg !14255
  br label %if.end44, !dbg !14256

if.else:                                          ; preds = %land.lhs.true9, %land.lhs.true, %if.end6
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14257
  %base19 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !14257
  %32 = bitcast %struct.tree_base* %base19 to i64*, !dbg !14257
  %bf.load20 = load i64, i64* %32, align 8, !dbg !14257
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !14257
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !14257
  %cmp23 = icmp eq i32 %bf.cast22, 32, !dbg !14259
  br i1 %cmp23, label %land.lhs.true24, label %if.else41, !dbg !14260

land.lhs.true24:                                  ; preds = %if.else
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14261
  %base25 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !14261
  %34 = bitcast %struct.tree_base* %base25 to i64*, !dbg !14261
  %bf.load26 = load i64, i64* %34, align 8, !dbg !14261
  %bf.lshr = lshr i64 %bf.load26, 26, !dbg !14261
  %bf.clear27 = and i64 %bf.lshr, 1, !dbg !14261
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !14261
  %tobool29 = icmp ne i32 %bf.cast28, 0, !dbg !14261
  br i1 %tobool29, label %if.else41, label %land.lhs.true30, !dbg !14262

land.lhs.true30:                                  ; preds = %land.lhs.true24
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14263
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !14263
  %call31 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !14264
  %conv = zext i8 %call31 to i32, !dbg !14264
  %tobool32 = icmp ne i32 %conv, 0, !dbg !14264
  br i1 %tobool32, label %land.lhs.true33, label %if.else41, !dbg !14265

land.lhs.true33:                                  ; preds = %land.lhs.true30
  %36 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !14266
  %decl_map34 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %36, i32 0, i32 6, !dbg !14267
  %37 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map34, align 8, !dbg !14267
  %38 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14268
  %39 = bitcast %union.tree_node* %38 to i8*, !dbg !14268
  %call35 = call i8** @pointer_map_contains(%struct.pointer_map_t* %37, i8* %39), !dbg !14269
  %tobool36 = icmp ne i8** %call35, null, !dbg !14269
  br i1 %tobool36, label %if.else41, label %land.lhs.true37, !dbg !14270

land.lhs.true37:                                  ; preds = %land.lhs.true33
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14271
  %call38 = call %struct.var_ann_d* @var_ann(%union.tree_node* %40), !dbg !14272
  %tobool39 = icmp ne %struct.var_ann_d* %call38, null, !dbg !14272
  br i1 %tobool39, label %if.else41, label %if.then40, !dbg !14273

if.then40:                                        ; preds = %land.lhs.true37
  br label %if.end43, !dbg !14273

if.else41:                                        ; preds = %land.lhs.true37, %land.lhs.true33, %land.lhs.true30, %land.lhs.true24, %if.else
  %41 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !14274
  %call42 = call %union.tree_node* @walk_tree_1(%union.tree_node** %t, %union.tree_node* (%union.tree_node**, i32*, i8*)* @remap_gimple_op_r, i8* %41, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !14274
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then40
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %cond.end
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14275
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14276
  call void @gimple_debug_bind_set_var(%union.gimple_statement_d* %42, %union.tree_node* %43), !dbg !14277
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14278
  %call45 = call zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %44), !dbg !14280
  %tobool46 = icmp ne i8 %call45, 0, !dbg !14280
  br i1 %tobool46, label %if.then47, label %if.end50, !dbg !14281

if.then47:                                        ; preds = %if.end44
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14282
  %call48 = call %union.tree_node** @gimple_debug_bind_get_value_ptr(%union.gimple_statement_d* %45), !dbg !14282
  %46 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !14282
  %call49 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call48, %union.tree_node* (%union.tree_node**, i32*, i8*)* @remap_gimple_op_r, i8* %46, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !14282
  br label %if.end50, !dbg !14282

if.end50:                                         ; preds = %if.then47, %if.end44
  %47 = load i32, i32* @processing_debug_stmt, align 4, !dbg !14283
  %cmp51 = icmp slt i32 %47, 0, !dbg !14285
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !14286

if.then53:                                        ; preds = %if.end50
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14287
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %48), !dbg !14288
  br label %if.end54, !dbg !14288

if.end54:                                         ; preds = %if.then53, %if.end50
  store i32 0, i32* @processing_debug_stmt, align 4, !dbg !14289
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14290
  call void @update_stmt(%union.gimple_statement_d* %49), !dbg !14291
  %50 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14292
  %add.ptr55 = getelementptr inbounds %struct.function, %struct.function* %50, i64 0, !dbg !14292
  %call56 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr55), !dbg !14294
  %tobool57 = icmp ne i8 %call56, 0, !dbg !14294
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !14295

if.then58:                                        ; preds = %if.end54
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14296
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %51), !dbg !14297
  br label %if.end59, !dbg !14297

if.end59:                                         ; preds = %if.then58, %if.end54
  ret void, !dbg !14298
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_set_var(%union.gimple_statement_d* %dbg, %union.tree_node* %var) #0 !dbg !14299 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !14300, metadata !DIExpression()), !dbg !14301
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !14302, metadata !DIExpression()), !dbg !14303
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !14304
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !14305
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !14306
  ret void, !dbg !14307
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %dbg) #0 !dbg !14308 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !14309, metadata !DIExpression()), !dbg !14310
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !14311
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !14312
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !14313
  %conv = zext i1 %cmp to i32, !dbg !14313
  %conv1 = trunc i32 %conv to i8, !dbg !14312
  ret i8 %conv1, !dbg !14314
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_debug_bind_get_value_ptr(%union.gimple_statement_d* %dbg) #0 !dbg !14315 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !14316, metadata !DIExpression()), !dbg !14317
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !14318
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !14319
  ret %union.tree_node** %call, !dbg !14320
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !14321 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !14322, metadata !DIExpression()), !dbg !14323
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !14324
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !14325
  ret void, !dbg !14326
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !14327 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14330, metadata !DIExpression()), !dbg !14331
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14332
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !14332
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !14332
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !14332
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14332

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14332
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !14332
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !14332
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !14332
  br label %cond.end, !dbg !14332

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14332

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14332
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !14332
  %cmp = icmp eq i32 %call, 1, !dbg !14333
  %conv = zext i1 %cmp to i32, !dbg !14333
  %conv2 = trunc i32 %conv to i8, !dbg !14332
  ret i8 %conv2, !dbg !14334
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) #0 !dbg !14335 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14338, metadata !DIExpression()), !dbg !14339
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14340
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !14341
  %call1 = call i32 @get_gimple_rhs_class(i32 %call), !dbg !14342
  ret i32 %call1, !dbg !14343
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !14344 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14345, metadata !DIExpression()), !dbg !14346
  call void @llvm.dbg.declare(metadata i32* %code, metadata !14347, metadata !DIExpression()), !dbg !14348
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14349
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !14350
  store i32 %call, i32* %code, align 4, !dbg !14348
  %1 = load i32, i32* %code, align 4, !dbg !14351
  %cmp = icmp eq i32 %1, 6, !dbg !14353
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14354

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !14355
  %cmp1 = icmp eq i32 %2, 8, !dbg !14356
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !14357

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !14358, metadata !DIExpression()), !dbg !14360
  %3 = load i32, i32* %code, align 4, !dbg !14361
  %cmp2 = icmp eq i32 %3, 8, !dbg !14363
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !14364

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14365
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !14366
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !14367
  br label %if.end, !dbg !14368

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14369
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !14370
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !14371

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14372
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !14372
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !14372
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14372
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !14372
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !14374
  br label %sw.epilog, !dbg !14375

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14376
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !14376
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !14376
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !14376
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !14376
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !14377
  br label %sw.epilog, !dbg !14378

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14379
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !14380
  br label %return, !dbg !14380

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !14381
  %cmp12 = icmp eq i32 %11, 1, !dbg !14383
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !14384

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !14385
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !14386
  br label %return, !dbg !14386

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !14387
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !14388
  br label %return, !dbg !14388

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14389
  ret %union.tree_node* %14, !dbg !14389
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %s, i32 %code) #0 !dbg !14390 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !14393, metadata !DIExpression()), !dbg !14394
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !14395, metadata !DIExpression()), !dbg !14396
  %0 = load i32, i32* %code.addr, align 4, !dbg !14397
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !14398
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !14399
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !14400
  %bf.load = load i32, i32* %2, align 8, !dbg !14401
  %bf.value = and i32 %0, 65535, !dbg !14401
  %bf.shl = shl i32 %bf.value, 16, !dbg !14401
  %bf.clear = and i32 %bf.load, 65535, !dbg !14401
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !14401
  store i32 %bf.set, i32* %2, align 8, !dbg !14401
  ret void, !dbg !14402
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !14403 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14404, metadata !DIExpression()), !dbg !14405
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !14406, metadata !DIExpression()), !dbg !14407
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14408
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !14409
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !14407
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !14410, metadata !DIExpression()), !dbg !14411
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !14412
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !14412
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14412
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !14412
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !14411
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14413
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !14413
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !14413
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !14413
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !14414
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14415
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !14415
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !14415
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !14415
  ret %union.tree_node* %6, !dbg !14416
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_call_expr_arg_iterator(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #0 !dbg !14417 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !14420, metadata !DIExpression()), !dbg !14421
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !14422, metadata !DIExpression()), !dbg !14423
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14424
  %1 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !14425
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %1, i32 0, i32 0, !dbg !14426
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !14427
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !14428
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !14428
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !14428
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14428
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14428
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !14428
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !14428
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !14428
  %4 = load i64, i64* %low, align 8, !dbg !14428
  %conv = trunc i64 %4 to i32, !dbg !14428
  %sub = sub nsw i32 %conv, 3, !dbg !14428
  %5 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !14429
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %5, i32 0, i32 1, !dbg !14430
  store i32 %sub, i32* %n, align 8, !dbg !14431
  %6 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !14432
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !14433
  store i32 0, i32* %i, align 4, !dbg !14434
  ret void, !dbg !14435
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4296, !4297, !4298}
!llvm.ident = !{!4299}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "processing_debug_stmt", scope: !2, file: !3, line: 178, type: !2683, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2584, globals: !4279, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !407, !414, !590, !596, !609, !743, !1617, !1656, !1662, !1668, !1684, !1688, !1693, !1707, !1715, !1722, !1728, !1731, !1757, !1789, !1793, !1806, !1843, !2563, !2577}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !385, line: 309, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406}
!387 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!399 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!400 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!401 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!402 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!403 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!404 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!405 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!406 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !408, line: 104, baseType: !7, size: 32, elements: !409)
!408 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!409 = !{!410, !411, !412, !413}
!410 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!411 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!412 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!413 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!414 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !415, line: 74, baseType: !7, size: 32, elements: !416)
!415 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!416 = !{!417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589}
!417 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!589 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!590 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "copy_body_cge_which", file: !591, line: 33, baseType: !7, size: 32, elements: !592)
!591 = !DIFile(filename: "./tree-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!592 = !{!593, !594, !595}
!593 = !DIEnumerator(name: "CB_CGE_DUPLICATE", value: 0, isUnsigned: true)
!594 = !DIEnumerator(name: "CB_CGE_MOVE", value: 1, isUnsigned: true)
!595 = !DIEnumerator(name: "CB_CGE_MOVE_CLONES", value: 2, isUnsigned: true)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !597)
!597 = !{!598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608}
!598 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!599 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!600 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!601 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!602 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!603 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!604 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!605 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!606 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!607 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!608 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!609 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !610)
!610 = !{!611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742}
!611 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!743 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !744, line: 723, baseType: !7, size: 32, elements: !745)
!744 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!745 = !{!746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616}
!746 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!747 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!748 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!749 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!750 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!751 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!752 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!753 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!754 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!755 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!756 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!757 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!758 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!759 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!760 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!761 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!762 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!763 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!764 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!765 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!766 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!767 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!768 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!769 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!770 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!771 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!772 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!773 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!774 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!775 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!776 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!777 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!778 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!779 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!780 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!781 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!782 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!783 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!784 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!785 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!786 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!787 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!788 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!789 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!790 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!791 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1613 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1614 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1615 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1616 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1617 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !1618, line: 51, baseType: !7, size: 32, elements: !1619)
!1618 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1619 = !{!1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655}
!1620 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!1621 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!1622 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!1623 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!1624 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!1625 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!1626 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!1627 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!1628 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!1629 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!1630 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!1631 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!1632 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!1633 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!1634 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!1635 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!1636 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!1637 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!1638 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!1639 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!1640 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!1641 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!1642 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!1643 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!1644 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!1645 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!1646 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!1647 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!1648 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!1649 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!1650 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!1651 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!1652 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!1653 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!1654 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!1655 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!1656 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !1618, line: 80, baseType: !7, size: 32, elements: !1657)
!1657 = !{!1658, !1659, !1660, !1661}
!1658 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1659 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1660 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1661 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1662 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !1663)
!1663 = !{!1664, !1665, !1666, !1667}
!1664 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!1665 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!1666 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!1667 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!1668 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1669, line: 29, baseType: !7, size: 32, elements: !1670)
!1669 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1670 = !{!1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683}
!1671 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!1672 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!1673 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!1674 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!1675 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!1676 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!1677 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!1678 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!1679 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!1680 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!1681 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!1682 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!1683 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!1684 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !337, line: 912, baseType: !7, size: 32, elements: !1685)
!1685 = !{!1686, !1687}
!1686 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!1687 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!1688 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !1618, line: 4603, baseType: !7, size: 32, elements: !1689)
!1689 = !{!1690, !1691, !1692}
!1690 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1691 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1692 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1693 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !337, line: 295, baseType: !7, size: 32, elements: !1694)
!1694 = !{!1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706}
!1695 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1696 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1697 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1698 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1699 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1700 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1701 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1702 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1703 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1704 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1705 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1706 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1707 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tsi_iterator_update", file: !1708, line: 95, baseType: !7, size: 32, elements: !1709)
!1708 = !DIFile(filename: "./tree-iterator.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1709 = !{!1710, !1711, !1712, !1713, !1714}
!1710 = !DIEnumerator(name: "TSI_NEW_STMT", value: 0, isUnsigned: true)
!1711 = !DIEnumerator(name: "TSI_SAME_STMT", value: 1, isUnsigned: true)
!1712 = !DIEnumerator(name: "TSI_CHAIN_START", value: 2, isUnsigned: true)
!1713 = !DIEnumerator(name: "TSI_CHAIN_END", value: 3, isUnsigned: true)
!1714 = !DIEnumerator(name: "TSI_CONTINUE_LINKING", value: 4, isUnsigned: true)
!1715 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_info_level", file: !1716, line: 46, baseType: !7, size: 32, elements: !1717)
!1716 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1717 = !{!1718, !1719, !1720, !1721}
!1718 = !DIEnumerator(name: "DINFO_LEVEL_NONE", value: 0, isUnsigned: true)
!1719 = !DIEnumerator(name: "DINFO_LEVEL_TERSE", value: 1, isUnsigned: true)
!1720 = !DIEnumerator(name: "DINFO_LEVEL_NORMAL", value: 2, isUnsigned: true)
!1721 = !DIEnumerator(name: "DINFO_LEVEL_VERBOSE", value: 3, isUnsigned: true)
!1722 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_try_flags", file: !1618, line: 514, baseType: !7, size: 32, elements: !1723)
!1723 = !{!1724, !1725, !1726, !1727}
!1724 = !DIEnumerator(name: "GIMPLE_TRY_CATCH", value: 1, isUnsigned: true)
!1725 = !DIEnumerator(name: "GIMPLE_TRY_FINALLY", value: 2, isUnsigned: true)
!1726 = !DIEnumerator(name: "GIMPLE_TRY_KIND", value: 3, isUnsigned: true)
!1727 = !DIEnumerator(name: "GIMPLE_TRY_CATCH_IS_CLEANUP", value: 4, isUnsigned: true)
!1728 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !1618, line: 124, baseType: !7, size: 32, elements: !1729)
!1729 = !{!1730}
!1730 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!1731 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !1618, line: 727, baseType: !7, size: 32, elements: !1732)
!1732 = !{!1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756}
!1733 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1734 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1735 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1736 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1737 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1738 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1739 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1740 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1741 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1742 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1743 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1744 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1745 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1746 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1747 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1748 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1749 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1750 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1751 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1752 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1753 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1754 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1755 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1756 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1757 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !1758, line: 24, baseType: !7, size: 32, elements: !1759)
!1758 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1759 = !{!1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788}
!1760 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!1761 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!1762 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!1763 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!1764 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!1765 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!1766 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!1767 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!1768 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!1769 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!1770 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!1771 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!1772 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!1773 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!1774 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!1775 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!1776 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!1777 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!1778 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!1779 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!1780 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!1781 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!1782 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!1783 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!1784 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!1785 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!1786 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!1787 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!1788 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!1789 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prediction", file: !1758, line: 32, baseType: !7, size: 32, elements: !1790)
!1790 = !{!1791, !1792}
!1791 = !DIEnumerator(name: "NOT_TAKEN", value: 0, isUnsigned: true)
!1792 = !DIEnumerator(name: "TAKEN", value: 1, isUnsigned: true)
!1793 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !1618, line: 100, baseType: !7, size: 32, elements: !1794)
!1794 = !{!1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805}
!1795 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!1796 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!1797 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!1798 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!1799 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!1800 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!1801 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!1802 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!1803 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!1804 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!1805 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!1806 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !1807)
!1807 = !{!1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842}
!1808 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!1809 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!1810 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!1811 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!1812 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!1813 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!1814 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!1815 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!1816 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!1817 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!1818 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!1819 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!1820 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!1821 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!1822 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!1823 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!1824 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!1825 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!1826 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!1827 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!1828 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!1829 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!1830 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!1831 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!1832 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!1833 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!1834 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!1835 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!1836 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!1837 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!1838 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!1839 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!1840 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!1841 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!1842 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!1843 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !1844)
!1844 = !{!1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562}
!1845 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!1846 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!1847 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!1848 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!1849 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!1850 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!1851 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!1852 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!1853 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!1854 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!1855 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!1856 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!1857 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!1858 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!1859 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!1860 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!1861 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!1862 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!1863 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!1864 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!1865 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!1866 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!1867 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!1868 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!1869 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!1870 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!1871 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!1872 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!1873 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!1874 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!1875 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!1876 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!1877 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!1878 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!1879 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!1880 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!1881 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!1882 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!1883 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!1884 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!1885 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!1886 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!1887 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!1888 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!1889 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!1890 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!1891 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!1892 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!1893 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!1894 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!1895 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!1896 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!1897 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!1898 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!1899 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!1900 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!1901 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!1902 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!1903 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!1904 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!1905 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!1906 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!1907 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!1908 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!1909 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!1910 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!1911 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!1912 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!1913 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!1914 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!1915 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!1916 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!1917 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!1918 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!1919 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!1920 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!1921 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!1922 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!1923 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!1924 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!1925 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!1926 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!1927 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!1928 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!1929 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!1930 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!1931 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!1932 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!1933 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!1934 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!1935 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!1936 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!1937 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!1938 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!1939 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!1940 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!1941 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!1942 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!1943 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!1944 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!1945 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!1946 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!1947 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!1948 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!1949 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!1950 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!1951 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!1952 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!1953 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!1954 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!1955 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!1956 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!1957 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!1958 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!1959 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!1960 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!1961 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!1962 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!1963 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!1964 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!1965 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!1966 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!1967 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!1968 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!1969 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!1970 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!1971 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!1972 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!1973 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!1974 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!1975 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!1976 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!1977 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!1978 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!1979 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!1980 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!1981 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!1982 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!1983 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!1984 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!1985 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!1986 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!1987 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!1988 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!1989 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!1990 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!1991 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!1992 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!1993 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!1994 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!1995 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!1996 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!1997 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!1998 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!1999 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!2000 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!2001 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!2002 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!2003 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!2004 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!2005 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!2006 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!2007 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!2008 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!2009 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!2010 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!2011 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!2012 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!2013 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!2014 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!2015 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!2016 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!2017 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!2018 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!2019 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!2020 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!2021 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!2022 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!2023 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!2024 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!2025 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!2026 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!2027 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!2028 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!2029 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!2030 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!2031 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!2032 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!2033 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!2034 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!2035 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!2036 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!2037 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!2038 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!2039 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!2040 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!2041 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!2042 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!2043 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!2044 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!2045 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!2046 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!2047 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!2048 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!2049 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!2050 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!2051 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!2052 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!2053 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!2054 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!2055 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!2056 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!2057 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!2058 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!2059 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!2060 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!2061 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!2062 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!2063 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!2064 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!2065 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!2066 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!2067 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!2068 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!2069 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!2070 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!2071 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!2072 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!2073 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!2074 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!2075 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!2076 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!2077 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!2078 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!2079 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!2080 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!2081 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!2082 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!2083 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!2084 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!2085 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!2086 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!2087 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!2088 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!2089 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!2090 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!2091 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!2092 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!2093 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!2094 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!2095 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!2096 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!2097 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!2098 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!2099 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!2100 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!2101 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!2102 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!2103 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!2104 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!2105 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!2106 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!2107 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!2108 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!2109 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!2110 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!2111 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!2112 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!2113 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!2114 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!2115 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!2116 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!2117 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!2118 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!2119 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!2120 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!2121 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!2122 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!2123 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!2124 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!2125 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!2126 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!2127 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!2128 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!2129 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!2130 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!2131 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!2132 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!2133 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!2134 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!2135 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!2136 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!2137 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!2138 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!2139 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!2140 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!2141 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!2142 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!2143 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!2144 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!2145 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!2146 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!2147 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!2148 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!2149 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!2150 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!2151 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!2152 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!2153 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!2154 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!2155 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!2156 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!2157 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!2158 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!2159 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!2160 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!2161 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!2162 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!2163 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!2164 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!2165 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!2166 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!2167 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!2168 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!2169 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!2170 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!2171 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!2172 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!2173 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!2174 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!2175 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!2176 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!2177 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!2178 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!2179 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!2180 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!2181 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!2182 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!2183 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!2184 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!2185 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!2186 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!2187 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!2188 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!2189 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!2190 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!2191 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!2192 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!2193 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!2194 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!2195 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!2196 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!2197 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!2198 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!2199 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!2200 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!2201 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!2202 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!2203 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!2204 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!2205 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!2206 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!2207 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!2208 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!2209 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!2210 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!2211 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!2212 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!2213 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!2214 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!2215 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!2216 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!2217 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!2218 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!2219 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!2220 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!2221 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!2222 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!2223 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!2224 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!2225 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!2226 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!2227 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!2228 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!2229 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!2230 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!2231 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!2232 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!2233 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!2234 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!2235 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!2236 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!2237 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!2238 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!2239 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!2240 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!2241 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!2242 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!2243 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!2244 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!2245 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!2246 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!2247 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!2248 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!2249 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!2250 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!2251 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!2252 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!2253 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!2254 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!2255 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!2256 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!2257 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!2258 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!2259 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!2260 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!2261 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!2262 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!2263 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!2264 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!2265 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!2266 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!2267 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!2268 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!2269 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!2270 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!2271 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!2272 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!2273 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!2274 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!2275 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!2276 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!2277 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!2278 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!2279 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!2280 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!2281 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!2282 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!2283 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!2284 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!2285 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!2286 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!2287 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!2288 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!2289 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!2290 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!2291 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!2292 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!2293 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!2294 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!2295 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!2296 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!2297 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!2298 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!2299 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!2300 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!2301 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!2302 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!2303 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!2304 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!2305 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!2306 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!2307 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!2308 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!2309 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!2310 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!2311 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!2312 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!2313 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!2314 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!2315 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!2316 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!2317 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!2318 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!2319 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!2320 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!2321 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!2322 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!2323 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!2324 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!2325 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!2326 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!2327 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!2328 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!2329 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!2330 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!2331 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!2332 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!2333 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!2334 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!2335 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!2336 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!2337 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!2338 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!2339 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!2340 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!2341 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!2342 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!2343 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!2344 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!2345 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!2346 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!2347 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!2348 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!2349 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!2350 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!2351 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!2352 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!2353 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!2354 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!2355 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!2356 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!2357 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!2358 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!2359 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!2360 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!2361 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!2362 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!2363 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!2364 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!2365 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!2366 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!2367 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!2368 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!2369 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!2370 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!2371 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!2372 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!2373 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!2374 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!2375 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!2376 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!2377 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!2378 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!2379 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!2380 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!2381 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!2382 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!2383 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!2384 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!2385 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!2386 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!2387 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!2388 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!2389 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!2390 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!2391 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!2392 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!2393 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!2394 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!2395 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!2396 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!2397 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!2398 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!2399 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!2400 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!2401 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!2402 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!2403 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!2404 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!2405 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!2406 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!2407 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!2408 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!2409 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!2410 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!2411 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!2412 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!2413 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!2414 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!2415 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!2416 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!2417 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!2418 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!2419 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!2420 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!2421 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!2422 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!2423 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!2424 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!2425 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!2426 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!2427 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!2428 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!2429 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!2430 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!2431 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!2432 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!2433 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!2434 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!2435 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!2436 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!2437 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!2438 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!2439 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!2440 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!2441 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!2442 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!2443 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!2444 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!2445 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!2446 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!2447 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!2448 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!2449 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!2450 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!2451 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!2452 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!2453 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!2454 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!2455 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!2456 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!2457 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!2458 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!2459 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!2460 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!2461 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!2462 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!2463 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!2464 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!2465 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!2466 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!2467 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!2468 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!2469 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!2470 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!2471 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!2472 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!2473 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!2474 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!2475 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!2476 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!2477 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!2478 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!2479 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!2480 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!2481 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!2482 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!2483 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!2484 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!2485 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!2486 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!2487 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!2488 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!2489 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!2490 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!2491 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!2492 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!2493 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!2494 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!2495 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!2496 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!2497 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!2498 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!2499 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!2500 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!2501 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!2502 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!2503 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!2504 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!2505 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!2506 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!2507 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!2508 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!2509 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!2510 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!2511 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!2512 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!2513 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!2514 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!2515 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!2516 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!2517 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!2518 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!2519 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!2520 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!2521 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!2522 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!2523 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!2524 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!2525 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!2526 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!2527 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!2528 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!2529 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!2530 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!2531 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!2532 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!2533 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!2534 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!2535 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!2536 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!2537 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!2538 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!2539 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!2540 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!2541 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!2542 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!2543 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!2544 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!2545 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!2546 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!2547 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!2548 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!2549 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!2550 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!2551 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!2552 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!2553 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!2554 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!2555 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!2556 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!2557 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!2558 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!2559 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!2560 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!2561 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!2562 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!2563 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !2564)
!2564 = !{!2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576}
!2565 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!2566 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!2567 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!2568 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!2569 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!2570 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!2571 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!2572 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!2573 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!2574 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!2575 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!2576 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!2577 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !2578, line: 119, baseType: !7, size: 32, elements: !2579)
!2578 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2579 = !{!2580, !2581, !2582, !2583}
!2580 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!2581 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!2582 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!2583 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!2584 = !{!2585, !2683, !134, !2870, !3983, !2586, !2716, !2588, !4253, !3438, !7, !1722, !2855, !3312, !2918, !4255, !1656, !3762, !3534, !4257, !2764, !4247, !4033, !3473, !3127, !4274, !2917}
!2585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2586, size: 64)
!2586 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2587, line: 56, baseType: !2588)
!2587 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2589, size: 64)
!2589 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !2590)
!2590 = !{!2591, !2624, !2630, !2643, !2662, !2673, !2678, !2689, !2695, !2709, !2721, !2759, !3219, !3247, !3264, !3265, !3270, !3279, !3285, !3290, !3294, !3298, !3635, !3682, !3688, !3694, !3701, !3714, !3728, !3745, !3757, !3779, !3794, !3965}
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2589, file: !135, line: 3372, baseType: !2592, size: 64)
!2592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !2593)
!2593 = !{!2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2592, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2592, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2592, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2592, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2592, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2592, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2592, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2592, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2592, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2592, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2592, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2592, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2592, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2592, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2592, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2592, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2592, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2592, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2592, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2592, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2592, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2592, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2592, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2592, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2592, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2592, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2592, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2592, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2592, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2592, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2589, file: !135, line: 3373, baseType: !2625, size: 192)
!2625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !2626)
!2626 = !{!2627, !2628, !2629}
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2625, file: !135, line: 403, baseType: !2592, size: 64)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2625, file: !135, line: 404, baseType: !2586, size: 64, offset: 64)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2625, file: !135, line: 405, baseType: !2586, size: 64, offset: 128)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2589, file: !135, line: 3374, baseType: !2631, size: 320)
!2631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !2632)
!2632 = !{!2633, !2634}
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2631, file: !135, line: 1385, baseType: !2625, size: 192)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2631, file: !135, line: 1386, baseType: !2635, size: 128, offset: 192)
!2635 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2636, line: 58, baseType: !2637)
!2636 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2637 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2636, line: 54, size: 128, elements: !2638)
!2638 = !{!2639, !2641}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2637, file: !2636, line: 56, baseType: !2640, size: 64)
!2640 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2637, file: !2636, line: 57, baseType: !2642, size: 64, offset: 64)
!2642 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2589, file: !135, line: 3375, baseType: !2644, size: 256)
!2644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !2645)
!2645 = !{!2646, !2647}
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2644, file: !135, line: 1398, baseType: !2625, size: 192)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2644, file: !135, line: 1399, baseType: !2648, size: 64, offset: 192)
!2648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2649, size: 64)
!2649 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2650, line: 52, size: 256, elements: !2651)
!2650 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2651 = !{!2652, !2653, !2654, !2655, !2656, !2657, !2658}
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2649, file: !2650, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2649, file: !2650, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2649, file: !2650, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2649, file: !2650, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2649, file: !2650, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2649, file: !2650, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2649, file: !2650, line: 62, baseType: !2659, size: 192, offset: 64)
!2659 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2640, size: 192, elements: !2660)
!2660 = !{!2661}
!2661 = !DISubrange(count: 3)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2589, file: !135, line: 3376, baseType: !2663, size: 256)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !2664)
!2664 = !{!2665, !2666}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2663, file: !135, line: 1409, baseType: !2625, size: 192)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2663, file: !135, line: 1410, baseType: !2667, size: 64, offset: 192)
!2667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2668, size: 64)
!2668 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2669, line: 27, size: 192, elements: !2670)
!2669 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2670 = !{!2671, !2672}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2668, file: !2669, line: 29, baseType: !2635, size: 128)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2668, file: !2669, line: 30, baseType: !5, size: 32, offset: 128)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2589, file: !135, line: 3377, baseType: !2674, size: 256)
!2674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !2675)
!2675 = !{!2676, !2677}
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2674, file: !135, line: 1438, baseType: !2625, size: 192)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2674, file: !135, line: 1439, baseType: !2586, size: 64, offset: 192)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2589, file: !135, line: 3378, baseType: !2679, size: 256)
!2679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !2680)
!2680 = !{!2681, !2682, !2684}
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2679, file: !135, line: 1419, baseType: !2625, size: 192)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2679, file: !135, line: 1420, baseType: !2683, size: 32, offset: 192)
!2683 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2679, file: !135, line: 1421, baseType: !2685, size: 8, offset: 224)
!2685 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2686, size: 8, elements: !2687)
!2686 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2687 = !{!2688}
!2688 = !DISubrange(count: 1)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2589, file: !135, line: 3379, baseType: !2690, size: 320)
!2690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !2691)
!2691 = !{!2692, !2693, !2694}
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2690, file: !135, line: 1429, baseType: !2625, size: 192)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2690, file: !135, line: 1430, baseType: !2586, size: 64, offset: 192)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2690, file: !135, line: 1431, baseType: !2586, size: 64, offset: 256)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2589, file: !135, line: 3380, baseType: !2696, size: 320)
!2696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !2697)
!2697 = !{!2698, !2699}
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2696, file: !135, line: 1461, baseType: !2625, size: 192)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2696, file: !135, line: 1462, baseType: !2700, size: 128, offset: 192)
!2700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2701, line: 31, size: 128, elements: !2702)
!2701 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2702 = !{!2703, !2707, !2708}
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2700, file: !2701, line: 32, baseType: !2704, size: 64)
!2704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2705, size: 64)
!2705 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2706)
!2706 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2700, file: !2701, line: 33, baseType: !7, size: 32, offset: 64)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2700, file: !2701, line: 34, baseType: !7, size: 32, offset: 96)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2589, file: !135, line: 3381, baseType: !2710, size: 384)
!2710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !2711)
!2711 = !{!2712, !2713, !2718, !2719, !2720}
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2710, file: !135, line: 2508, baseType: !2625, size: 192)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2710, file: !135, line: 2509, baseType: !2714, size: 32, offset: 192)
!2714 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2715, line: 58, baseType: !2716)
!2715 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2716 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2717, line: 44, baseType: !7)
!2717 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2710, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2710, file: !135, line: 2511, baseType: !2586, size: 64, offset: 256)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2710, file: !135, line: 2512, baseType: !2586, size: 64, offset: 320)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2589, file: !135, line: 3382, baseType: !2722, size: 896)
!2722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !2723)
!2723 = !{!2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756}
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2722, file: !135, line: 2653, baseType: !2710, size: 384)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2722, file: !135, line: 2654, baseType: !2586, size: 64, offset: 384)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2722, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2722, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2722, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2722, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2722, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2722, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2722, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2722, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2722, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2722, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2722, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2722, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2722, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2722, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2722, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2722, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2722, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2722, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2722, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2722, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2722, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2722, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2722, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2722, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2722, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2722, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2722, file: !135, line: 2705, baseType: !2586, size: 64, offset: 576)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2722, file: !135, line: 2706, baseType: !2586, size: 64, offset: 640)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2722, file: !135, line: 2707, baseType: !2586, size: 64, offset: 704)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2722, file: !135, line: 2708, baseType: !2586, size: 64, offset: 768)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2722, file: !135, line: 2711, baseType: !2757, size: 64, offset: 832)
!2757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2758, size: 64)
!2758 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2589, file: !135, line: 3383, baseType: !2760, size: 960)
!2760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !2761)
!2761 = !{!2762, !2763}
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2760, file: !135, line: 2757, baseType: !2722, size: 896)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2760, file: !135, line: 2758, baseType: !2764, size: 64, offset: 896)
!2764 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2587, line: 50, baseType: !2765)
!2765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2766, size: 64)
!2766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !2767, line: 240, size: 384, elements: !2768)
!2767 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2768 = !{!2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779}
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2766, file: !2767, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2766, file: !2767, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2766, file: !2767, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2766, file: !2767, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2766, file: !2767, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2766, file: !2767, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2766, file: !2767, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2766, file: !2767, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2766, file: !2767, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2766, file: !2767, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2766, file: !2767, line: 321, baseType: !2780, size: 320, offset: 64)
!2780 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !2767, line: 315, size: 320, elements: !2781)
!2781 = !{!2782, !3186, !3188, !3217, !3218}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2780, file: !2767, line: 316, baseType: !2783, size: 64)
!2783 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2784, size: 64, elements: !2687)
!2784 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !2767, line: 183, baseType: !2785)
!2785 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !2767, line: 166, size: 64, elements: !2786)
!2786 = !{!2787, !2788, !2789, !2792, !2793, !2801, !2802, !2814, !2817, !2879, !2880, !3163, !3176, !3183}
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2785, file: !2767, line: 168, baseType: !2683, size: 32)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2785, file: !2767, line: 169, baseType: !7, size: 32)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2785, file: !2767, line: 170, baseType: !2790, size: 64)
!2790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2791, size: 64)
!2791 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2686)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2785, file: !2767, line: 171, baseType: !2764, size: 64)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2785, file: !2767, line: 172, baseType: !2794, size: 64)
!2794 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2587, line: 53, baseType: !2795)
!2795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2796, size: 64)
!2796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !2767, line: 359, size: 128, elements: !2797)
!2797 = !{!2798, !2799}
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2796, file: !2767, line: 360, baseType: !2683, size: 32)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2796, file: !2767, line: 361, baseType: !2800, size: 64, offset: 64)
!2800 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2764, size: 64, elements: !2687)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2785, file: !2767, line: 173, baseType: !5, size: 32)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2785, file: !2767, line: 174, baseType: !2803, size: 32)
!2803 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !2767, line: 133, baseType: !2804)
!2804 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2767, line: 115, size: 32, elements: !2805)
!2805 = !{!2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2804, file: !2767, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2804, file: !2767, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2804, file: !2767, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2804, file: !2767, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2804, file: !2767, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2804, file: !2767, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2804, file: !2767, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2804, file: !2767, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2785, file: !2767, line: 175, baseType: !2815, size: 64)
!2815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2816, size: 64)
!2816 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !2767, line: 175, flags: DIFlagFwdDecl)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2785, file: !2767, line: 176, baseType: !2818, size: 64)
!2818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2819, size: 64)
!2819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2820, line: 75, size: 256, elements: !2821)
!2820 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2821 = !{!2822, !2836, !2837, !2838}
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2819, file: !2820, line: 76, baseType: !2823, size: 64)
!2823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2824, size: 64)
!2824 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2820, line: 68, baseType: !2825)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2820, line: 63, size: 320, elements: !2826)
!2826 = !{!2827, !2829, !2830, !2831}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2825, file: !2820, line: 64, baseType: !2828, size: 64)
!2828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2825, size: 64)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2825, file: !2820, line: 65, baseType: !2828, size: 64, offset: 64)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2825, file: !2820, line: 66, baseType: !7, size: 32, offset: 128)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2825, file: !2820, line: 67, baseType: !2832, size: 128, offset: 192)
!2832 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2833, size: 128, elements: !2834)
!2833 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2820, line: 29, baseType: !2640)
!2834 = !{!2835}
!2835 = !DISubrange(count: 2)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2819, file: !2820, line: 77, baseType: !2823, size: 64, offset: 64)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2819, file: !2820, line: 78, baseType: !7, size: 32, offset: 128)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2819, file: !2820, line: 79, baseType: !2839, size: 64, offset: 192)
!2839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2840, size: 64)
!2840 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2820, line: 49, baseType: !2841)
!2841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2820, line: 45, size: 832, elements: !2842)
!2842 = !{!2843, !2844, !2845}
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2841, file: !2820, line: 46, baseType: !2828, size: 64)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2841, file: !2820, line: 47, baseType: !2818, size: 64, offset: 64)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2841, file: !2820, line: 48, baseType: !2846, size: 704, offset: 128)
!2846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2847, line: 164, size: 704, elements: !2848)
!2847 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2848 = !{!2849, !2850, !2861, !2862, !2863, !2864, !2865, !2866, !2871, !2875, !2876, !2877, !2878}
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2846, file: !2847, line: 166, baseType: !2642, size: 64)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2846, file: !2847, line: 167, baseType: !2851, size: 64, offset: 64)
!2851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2852, size: 64)
!2852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2847, line: 157, size: 192, elements: !2853)
!2853 = !{!2854, !2856, !2857}
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2852, file: !2847, line: 159, baseType: !2855, size: 64)
!2855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2686, size: 64)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2852, file: !2847, line: 160, baseType: !2851, size: 64, offset: 64)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2852, file: !2847, line: 161, baseType: !2858, size: 32, offset: 128)
!2858 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2686, size: 32, elements: !2859)
!2859 = !{!2860}
!2860 = !DISubrange(count: 4)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2846, file: !2847, line: 168, baseType: !2855, size: 64, offset: 128)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2846, file: !2847, line: 169, baseType: !2855, size: 64, offset: 192)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2846, file: !2847, line: 170, baseType: !2855, size: 64, offset: 256)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2846, file: !2847, line: 171, baseType: !2642, size: 64, offset: 320)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2846, file: !2847, line: 172, baseType: !2683, size: 32, offset: 384)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2846, file: !2847, line: 176, baseType: !2867, size: 64, offset: 448)
!2867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2868, size: 64)
!2868 = !DISubroutineType(types: !2869)
!2869 = !{!2851, !2870, !2642}
!2870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2846, file: !2847, line: 177, baseType: !2872, size: 64, offset: 512)
!2872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2873, size: 64)
!2873 = !DISubroutineType(types: !2874)
!2874 = !{null, !2870, !2851}
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2846, file: !2847, line: 178, baseType: !2870, size: 64, offset: 576)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2846, file: !2847, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2846, file: !2847, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2846, file: !2847, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2785, file: !2767, line: 177, baseType: !2586, size: 64)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2785, file: !2767, line: 178, baseType: !2881, size: 64)
!2881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2882, size: 64)
!2882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !2883)
!2883 = !{!2884, !3128, !3129, !3130, !3133, !3137, !3138, !3139, !3157, !3158, !3159, !3160, !3161, !3162}
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2882, file: !337, line: 219, baseType: !2885, size: 64)
!2885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2886, size: 64)
!2886 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !2887)
!2887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !2888)
!2888 = !{!2889}
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2887, file: !337, line: 151, baseType: !2890, size: 128)
!2890 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !2891)
!2891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !2892)
!2892 = !{!2893, !2894, !2895}
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2891, file: !337, line: 150, baseType: !7, size: 32)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2891, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2891, file: !337, line: 150, baseType: !2896, size: 64, offset: 64)
!2896 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2897, size: 64, elements: !2687)
!2897 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2587, line: 108, baseType: !2898)
!2898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2899, size: 64)
!2899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !2900)
!2900 = !{!2901, !2902, !2903, !3120, !3121, !3122, !3123, !3124, !3125, !3126}
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2899, file: !337, line: 124, baseType: !2881, size: 64)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2899, file: !337, line: 125, baseType: !2881, size: 64, offset: 64)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2899, file: !337, line: 131, baseType: !2904, size: 64, offset: 128)
!2904 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !2905)
!2905 = !{!2906, !3119}
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2904, file: !337, line: 129, baseType: !2907, size: 64)
!2907 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2587, line: 66, baseType: !2908)
!2908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2909, size: 64)
!2909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1618, line: 143, size: 192, elements: !2910)
!2910 = !{!2911, !3117, !3118}
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2909, file: !1618, line: 145, baseType: !2912, size: 64)
!2912 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !2587, line: 69, baseType: !2913)
!2913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2914, size: 64)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1618, line: 136, size: 192, elements: !2915)
!2915 = !{!2916, !3115, !3116}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2914, file: !1618, line: 137, baseType: !2917, size: 64)
!2917 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2587, line: 58, baseType: !2918)
!2918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2919, size: 64)
!2919 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1618, line: 737, size: 768, elements: !2920)
!2920 = !{!2921, !2938, !2970, !2976, !2981, !2986, !2993, !2999, !3005, !3010, !3024, !3029, !3035, !3040, !3050, !3055, !3073, !3080, !3087, !3093, !3098, !3104, !3110}
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2919, file: !1618, line: 738, baseType: !2922, size: 256)
!2922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1618, line: 271, size: 256, elements: !2923)
!2923 = !{!2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937}
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2922, file: !1618, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2922, file: !1618, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2922, file: !1618, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2922, file: !1618, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2922, file: !1618, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2922, file: !1618, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2922, file: !1618, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2922, file: !1618, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2922, file: !1618, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2922, file: !1618, line: 312, baseType: !7, size: 32, offset: 32)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2922, file: !1618, line: 316, baseType: !2714, size: 32, offset: 64)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2922, file: !1618, line: 319, baseType: !7, size: 32, offset: 96)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2922, file: !1618, line: 323, baseType: !2881, size: 64, offset: 128)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2922, file: !1618, line: 327, baseType: !2586, size: 64, offset: 192)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2919, file: !1618, line: 739, baseType: !2939, size: 448)
!2939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1618, line: 350, size: 448, elements: !2940)
!2940 = !{!2941, !2968}
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2939, file: !1618, line: 353, baseType: !2942, size: 384)
!2942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1618, line: 333, size: 384, elements: !2943)
!2943 = !{!2944, !2945, !2951}
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2942, file: !1618, line: 336, baseType: !2922, size: 256)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2942, file: !1618, line: 343, baseType: !2946, size: 64, offset: 256)
!2946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2947, size: 64)
!2947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2578, line: 37, size: 128, elements: !2948)
!2948 = !{!2949, !2950}
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2947, file: !2578, line: 39, baseType: !2946, size: 64)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2947, file: !2578, line: 40, baseType: !2585, size: 64, offset: 64)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2942, file: !1618, line: 344, baseType: !2952, size: 64, offset: 320)
!2952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2953, size: 64)
!2953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2578, line: 45, size: 320, elements: !2954)
!2954 = !{!2955, !2956}
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2953, file: !2578, line: 47, baseType: !2952, size: 64)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2953, file: !2578, line: 48, baseType: !2957, size: 256, offset: 64)
!2957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2958)
!2958 = !{!2959, !2961, !2962, !2967}
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2957, file: !135, line: 1884, baseType: !2960, size: 64)
!2960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2957, size: 64)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2957, file: !135, line: 1885, baseType: !2960, size: 64, offset: 64)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2957, file: !135, line: 1891, baseType: !2963, size: 64, offset: 128)
!2963 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2957, file: !135, line: 1891, size: 64, elements: !2964)
!2964 = !{!2965, !2966}
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2963, file: !135, line: 1891, baseType: !2917, size: 64)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2963, file: !135, line: 1891, baseType: !2586, size: 64)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2957, file: !135, line: 1892, baseType: !2585, size: 64, offset: 192)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2939, file: !1618, line: 359, baseType: !2969, size: 64, offset: 384)
!2969 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2586, size: 64, elements: !2687)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2919, file: !1618, line: 740, baseType: !2971, size: 512)
!2971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1618, line: 365, size: 512, elements: !2972)
!2972 = !{!2973, !2974, !2975}
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2971, file: !1618, line: 368, baseType: !2942, size: 384)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2971, file: !1618, line: 373, baseType: !2586, size: 64, offset: 384)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2971, file: !1618, line: 374, baseType: !2586, size: 64, offset: 448)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2919, file: !1618, line: 741, baseType: !2977, size: 576)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1618, line: 380, size: 576, elements: !2978)
!2978 = !{!2979, !2980}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2977, file: !1618, line: 383, baseType: !2971, size: 512)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2977, file: !1618, line: 389, baseType: !2969, size: 64, offset: 512)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2919, file: !1618, line: 742, baseType: !2982, size: 320)
!2982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1618, line: 395, size: 320, elements: !2983)
!2983 = !{!2984, !2985}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2982, file: !1618, line: 397, baseType: !2922, size: 256)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2982, file: !1618, line: 400, baseType: !2907, size: 64, offset: 256)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2919, file: !1618, line: 743, baseType: !2987, size: 448)
!2987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1618, line: 406, size: 448, elements: !2988)
!2988 = !{!2989, !2990, !2991, !2992}
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2987, file: !1618, line: 408, baseType: !2922, size: 256)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2987, file: !1618, line: 412, baseType: !2586, size: 64, offset: 256)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2987, file: !1618, line: 420, baseType: !2586, size: 64, offset: 320)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2987, file: !1618, line: 423, baseType: !2907, size: 64, offset: 384)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2919, file: !1618, line: 744, baseType: !2994, size: 384)
!2994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1618, line: 429, size: 384, elements: !2995)
!2995 = !{!2996, !2997, !2998}
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2994, file: !1618, line: 431, baseType: !2922, size: 256)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2994, file: !1618, line: 434, baseType: !2586, size: 64, offset: 256)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2994, file: !1618, line: 437, baseType: !2907, size: 64, offset: 320)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2919, file: !1618, line: 745, baseType: !3000, size: 384)
!3000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1618, line: 443, size: 384, elements: !3001)
!3001 = !{!3002, !3003, !3004}
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3000, file: !1618, line: 445, baseType: !2922, size: 256)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3000, file: !1618, line: 449, baseType: !2586, size: 64, offset: 256)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !3000, file: !1618, line: 453, baseType: !2907, size: 64, offset: 320)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2919, file: !1618, line: 746, baseType: !3006, size: 320)
!3006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1618, line: 459, size: 320, elements: !3007)
!3007 = !{!3008, !3009}
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3006, file: !1618, line: 461, baseType: !2922, size: 256)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !3006, file: !1618, line: 464, baseType: !2586, size: 64, offset: 256)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2919, file: !1618, line: 747, baseType: !3011, size: 768)
!3011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1618, line: 469, size: 768, elements: !3012)
!3012 = !{!3013, !3014, !3015, !3016, !3017}
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3011, file: !1618, line: 471, baseType: !2922, size: 256)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !3011, file: !1618, line: 474, baseType: !7, size: 32, offset: 256)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3011, file: !1618, line: 475, baseType: !7, size: 32, offset: 288)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3011, file: !1618, line: 478, baseType: !2586, size: 64, offset: 320)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3011, file: !1618, line: 481, baseType: !3018, size: 384, offset: 384)
!3018 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3019, size: 384, elements: !2687)
!3019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !3020)
!3020 = !{!3021, !3022, !3023}
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !3019, file: !135, line: 1920, baseType: !2957, size: 256)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !3019, file: !135, line: 1921, baseType: !2586, size: 64, offset: 256)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3019, file: !135, line: 1922, baseType: !2714, size: 32, offset: 320)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2919, file: !1618, line: 748, baseType: !3025, size: 320)
!3025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1618, line: 487, size: 320, elements: !3026)
!3026 = !{!3027, !3028}
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3025, file: !1618, line: 490, baseType: !2922, size: 256)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3025, file: !1618, line: 494, baseType: !2683, size: 32, offset: 256)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2919, file: !1618, line: 749, baseType: !3030, size: 384)
!3030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1618, line: 500, size: 384, elements: !3031)
!3031 = !{!3032, !3033, !3034}
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3030, file: !1618, line: 502, baseType: !2922, size: 256)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !3030, file: !1618, line: 506, baseType: !2907, size: 64, offset: 256)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3030, file: !1618, line: 510, baseType: !2907, size: 64, offset: 320)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2919, file: !1618, line: 750, baseType: !3036, size: 320)
!3036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1618, line: 529, size: 320, elements: !3037)
!3037 = !{!3038, !3039}
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3036, file: !1618, line: 531, baseType: !2922, size: 256)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3036, file: !1618, line: 540, baseType: !2907, size: 64, offset: 256)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2919, file: !1618, line: 751, baseType: !3041, size: 704)
!3041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1618, line: 546, size: 704, elements: !3042)
!3042 = !{!3043, !3044, !3045, !3046, !3047, !3048, !3049}
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3041, file: !1618, line: 549, baseType: !2971, size: 512)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3041, file: !1618, line: 553, baseType: !2790, size: 64, offset: 512)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !3041, file: !1618, line: 557, baseType: !2706, size: 8, offset: 576)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !3041, file: !1618, line: 558, baseType: !2706, size: 8, offset: 584)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !3041, file: !1618, line: 559, baseType: !2706, size: 8, offset: 592)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !3041, file: !1618, line: 560, baseType: !2706, size: 8, offset: 600)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3041, file: !1618, line: 566, baseType: !2969, size: 64, offset: 640)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2919, file: !1618, line: 752, baseType: !3051, size: 384)
!3051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1618, line: 571, size: 384, elements: !3052)
!3052 = !{!3053, !3054}
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3051, file: !1618, line: 573, baseType: !2982, size: 320)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3051, file: !1618, line: 577, baseType: !2586, size: 64, offset: 320)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2919, file: !1618, line: 753, baseType: !3056, size: 576)
!3056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1618, line: 600, size: 576, elements: !3057)
!3057 = !{!3058, !3059, !3060, !3063, !3072}
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3056, file: !1618, line: 602, baseType: !2982, size: 320)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3056, file: !1618, line: 605, baseType: !2586, size: 64, offset: 320)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !3056, file: !1618, line: 609, baseType: !3061, size: 64, offset: 384)
!3061 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3062, line: 46, baseType: !2640)
!3062 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !3056, file: !1618, line: 612, baseType: !3064, size: 64, offset: 448)
!3064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3065, size: 64)
!3065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1618, line: 581, size: 320, elements: !3066)
!3066 = !{!3067, !3068, !3069, !3070, !3071}
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !3065, file: !1618, line: 583, baseType: !134, size: 32)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3065, file: !1618, line: 586, baseType: !2586, size: 64, offset: 64)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3065, file: !1618, line: 589, baseType: !2586, size: 64, offset: 128)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !3065, file: !1618, line: 592, baseType: !2586, size: 64, offset: 192)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !3065, file: !1618, line: 595, baseType: !2586, size: 64, offset: 256)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !3056, file: !1618, line: 616, baseType: !2907, size: 64, offset: 512)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2919, file: !1618, line: 754, baseType: !3074, size: 512)
!3074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1618, line: 622, size: 512, elements: !3075)
!3075 = !{!3076, !3077, !3078, !3079}
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3074, file: !1618, line: 624, baseType: !2982, size: 320)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3074, file: !1618, line: 628, baseType: !2586, size: 64, offset: 320)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !3074, file: !1618, line: 632, baseType: !2586, size: 64, offset: 384)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !3074, file: !1618, line: 636, baseType: !2586, size: 64, offset: 448)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2919, file: !1618, line: 755, baseType: !3081, size: 704)
!3081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1618, line: 642, size: 704, elements: !3082)
!3082 = !{!3083, !3084, !3085, !3086}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !3081, file: !1618, line: 644, baseType: !3074, size: 512)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !3081, file: !1618, line: 648, baseType: !2586, size: 64, offset: 512)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !3081, file: !1618, line: 652, baseType: !2586, size: 64, offset: 576)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !3081, file: !1618, line: 653, baseType: !2586, size: 64, offset: 640)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2919, file: !1618, line: 756, baseType: !3088, size: 448)
!3088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1618, line: 663, size: 448, elements: !3089)
!3089 = !{!3090, !3091, !3092}
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3088, file: !1618, line: 665, baseType: !2982, size: 320)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3088, file: !1618, line: 668, baseType: !2586, size: 64, offset: 320)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !3088, file: !1618, line: 673, baseType: !2586, size: 64, offset: 384)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2919, file: !1618, line: 757, baseType: !3094, size: 384)
!3094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1618, line: 694, size: 384, elements: !3095)
!3095 = !{!3096, !3097}
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3094, file: !1618, line: 696, baseType: !2982, size: 320)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3094, file: !1618, line: 699, baseType: !2586, size: 64, offset: 320)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2919, file: !1618, line: 758, baseType: !3099, size: 384)
!3099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1618, line: 681, size: 384, elements: !3100)
!3100 = !{!3101, !3102, !3103}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3099, file: !1618, line: 683, baseType: !2922, size: 256)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !3099, file: !1618, line: 686, baseType: !2586, size: 64, offset: 256)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !3099, file: !1618, line: 689, baseType: !2586, size: 64, offset: 320)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2919, file: !1618, line: 759, baseType: !3105, size: 384)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1618, line: 707, size: 384, elements: !3106)
!3106 = !{!3107, !3108, !3109}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3105, file: !1618, line: 709, baseType: !2922, size: 256)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !3105, file: !1618, line: 712, baseType: !2586, size: 64, offset: 256)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !3105, file: !1618, line: 712, baseType: !2586, size: 64, offset: 320)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2919, file: !1618, line: 760, baseType: !3111, size: 320)
!3111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1618, line: 718, size: 320, elements: !3112)
!3112 = !{!3113, !3114}
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3111, file: !1618, line: 720, baseType: !2922, size: 256)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3111, file: !1618, line: 723, baseType: !2586, size: 64, offset: 256)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2914, file: !1618, line: 138, baseType: !2913, size: 64, offset: 64)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2914, file: !1618, line: 139, baseType: !2913, size: 64, offset: 128)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2909, file: !1618, line: 146, baseType: !2912, size: 64, offset: 64)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2909, file: !1618, line: 152, baseType: !2907, size: 64, offset: 128)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2904, file: !337, line: 130, baseType: !2764, size: 64)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2899, file: !337, line: 134, baseType: !2870, size: 64, offset: 192)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2899, file: !337, line: 137, baseType: !2586, size: 64, offset: 256)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2899, file: !337, line: 138, baseType: !2714, size: 32, offset: 320)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2899, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2899, file: !337, line: 144, baseType: !2683, size: 32, offset: 384)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2899, file: !337, line: 145, baseType: !2683, size: 32, offset: 416)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2899, file: !337, line: 146, baseType: !3127, size: 64, offset: 448)
!3127 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !2642)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2882, file: !337, line: 220, baseType: !2885, size: 64, offset: 64)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2882, file: !337, line: 223, baseType: !2870, size: 64, offset: 128)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2882, file: !337, line: 226, baseType: !3131, size: 64, offset: 192)
!3131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3132, size: 64)
!3132 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2882, file: !337, line: 229, baseType: !3134, size: 128, offset: 256)
!3134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3135, size: 128, elements: !2834)
!3135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3136, size: 64)
!3136 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2882, file: !337, line: 232, baseType: !2881, size: 64, offset: 384)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2882, file: !337, line: 233, baseType: !2881, size: 64, offset: 448)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2882, file: !337, line: 238, baseType: !3140, size: 64, offset: 512)
!3140 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !3141)
!3141 = !{!3142, !3148}
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3140, file: !337, line: 236, baseType: !3143, size: 64)
!3143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3144, size: 64)
!3144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !3145)
!3145 = !{!3146, !3147}
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3144, file: !337, line: 275, baseType: !2907, size: 64)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3144, file: !337, line: 278, baseType: !2907, size: 64, offset: 64)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3140, file: !337, line: 237, baseType: !3149, size: 64)
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!3150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !3151)
!3151 = !{!3152, !3153, !3154, !3155, !3156}
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3150, file: !337, line: 261, baseType: !2764, size: 64)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3150, file: !337, line: 262, baseType: !2764, size: 64, offset: 64)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3150, file: !337, line: 266, baseType: !2764, size: 64, offset: 128)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3150, file: !337, line: 267, baseType: !2764, size: 64, offset: 192)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3150, file: !337, line: 270, baseType: !2683, size: 32, offset: 256)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2882, file: !337, line: 241, baseType: !3127, size: 64, offset: 576)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2882, file: !337, line: 244, baseType: !2683, size: 32, offset: 640)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2882, file: !337, line: 247, baseType: !2683, size: 32, offset: 672)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2882, file: !337, line: 250, baseType: !2683, size: 32, offset: 704)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2882, file: !337, line: 253, baseType: !2683, size: 32, offset: 736)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2882, file: !337, line: 256, baseType: !2683, size: 32, offset: 768)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2785, file: !2767, line: 179, baseType: !3164, size: 64)
!3164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3165, size: 64)
!3165 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !2767, line: 150, baseType: !3166)
!3166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !2767, line: 142, size: 320, elements: !3167)
!3167 = !{!3168, !3169, !3170, !3171, !3174, !3175}
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3166, file: !2767, line: 144, baseType: !2586, size: 64)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3166, file: !2767, line: 145, baseType: !2764, size: 64, offset: 64)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3166, file: !2767, line: 146, baseType: !2764, size: 64, offset: 128)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3166, file: !2767, line: 147, baseType: !3172, size: 32, offset: 192)
!3172 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3173, line: 31, baseType: !2683)
!3173 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3166, file: !2767, line: 148, baseType: !7, size: 32, offset: 224)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3166, file: !2767, line: 149, baseType: !2706, size: 8, offset: 256)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2785, file: !2767, line: 180, baseType: !3177, size: 64)
!3177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3178, size: 64)
!3178 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !2767, line: 162, baseType: !3179)
!3179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !2767, line: 159, size: 128, elements: !3180)
!3180 = !{!3181, !3182}
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3179, file: !2767, line: 160, baseType: !2586, size: 64)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3179, file: !2767, line: 161, baseType: !2642, size: 64, offset: 64)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2785, file: !2767, line: 181, baseType: !3184, size: 64)
!3184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3185, size: 64)
!3185 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !2767, line: 181, flags: DIFlagFwdDecl)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2780, file: !2767, line: 317, baseType: !3187, size: 64)
!3187 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2642, size: 64, elements: !2687)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2780, file: !2767, line: 318, baseType: !3189, size: 320)
!3189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !2767, line: 188, size: 320, elements: !3190)
!3190 = !{!3191, !3193, !3216}
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3189, file: !2767, line: 190, baseType: !3192, size: 192)
!3192 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2784, size: 192, elements: !2660)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3189, file: !2767, line: 193, baseType: !3194, size: 64, offset: 192)
!3194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3195, size: 64)
!3195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !2767, line: 206, size: 320, elements: !3196)
!3196 = !{!3197, !3201, !3202, !3203, !3215}
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3195, file: !2767, line: 208, baseType: !3198, size: 64)
!3198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3199, size: 64)
!3199 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2587, line: 62, baseType: !3200)
!3200 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2587, line: 61, flags: DIFlagFwdDecl)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3195, file: !2767, line: 211, baseType: !7, size: 32, offset: 64)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3195, file: !2767, line: 214, baseType: !2642, size: 64, offset: 128)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3195, file: !2767, line: 224, baseType: !3204, size: 64, offset: 192)
!3204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3205, size: 64)
!3205 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !2767, line: 202, baseType: !3206)
!3206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !2767, line: 202, size: 128, elements: !3207)
!3207 = !{!3208}
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3206, file: !2767, line: 202, baseType: !3209, size: 128)
!3209 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !2767, line: 200, baseType: !3210)
!3210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !2767, line: 200, size: 128, elements: !3211)
!3211 = !{!3212, !3213, !3214}
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3210, file: !2767, line: 200, baseType: !7, size: 32)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3210, file: !2767, line: 200, baseType: !7, size: 32, offset: 32)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3210, file: !2767, line: 200, baseType: !2800, size: 64, offset: 64)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3195, file: !2767, line: 234, baseType: !3204, size: 64, offset: 256)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3189, file: !2767, line: 197, baseType: !2642, size: 64, offset: 256)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2780, file: !2767, line: 319, baseType: !2649, size: 256)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2780, file: !2767, line: 320, baseType: !2668, size: 192)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2589, file: !135, line: 3384, baseType: !3220, size: 1472)
!3220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !3221)
!3221 = !{!3222, !3243, !3244, !3245, !3246}
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3220, file: !135, line: 3115, baseType: !3223, size: 1216)
!3223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !3224)
!3224 = !{!3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242}
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3223, file: !135, line: 2985, baseType: !2760, size: 960)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3223, file: !135, line: 2986, baseType: !2586, size: 64, offset: 960)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3223, file: !135, line: 2987, baseType: !2586, size: 64, offset: 1024)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3223, file: !135, line: 2988, baseType: !2586, size: 64, offset: 1088)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3223, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3223, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3223, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3223, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3223, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3223, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3223, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3223, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3223, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3223, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3223, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3223, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3223, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3223, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3220, file: !135, line: 3117, baseType: !2586, size: 64, offset: 1216)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3220, file: !135, line: 3119, baseType: !2586, size: 64, offset: 1280)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3220, file: !135, line: 3121, baseType: !2586, size: 64, offset: 1344)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3220, file: !135, line: 3123, baseType: !2586, size: 64, offset: 1408)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2589, file: !135, line: 3385, baseType: !3248, size: 1088)
!3248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !3249)
!3249 = !{!3250, !3251, !3252}
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3248, file: !135, line: 2875, baseType: !2760, size: 960)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3248, file: !135, line: 2876, baseType: !2764, size: 64, offset: 960)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3248, file: !135, line: 2877, baseType: !3253, size: 64, offset: 1024)
!3253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3254, size: 64)
!3254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !3255, line: 172, size: 128, elements: !3256)
!3255 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3256 = !{!3257, !3258, !3259, !3260, !3261, !3262, !3263}
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !3254, file: !3255, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3254, file: !3255, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !3254, file: !3255, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !3254, file: !3255, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !3254, file: !3255, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !3254, file: !3255, line: 195, baseType: !7, size: 32, offset: 32)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !3254, file: !3255, line: 199, baseType: !2586, size: 64, offset: 64)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2589, file: !135, line: 3386, baseType: !3223, size: 1216)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2589, file: !135, line: 3387, baseType: !3266, size: 1280)
!3266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !3267)
!3267 = !{!3268, !3269}
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3266, file: !135, line: 3094, baseType: !3223, size: 1216)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3266, file: !135, line: 3095, baseType: !3253, size: 64, offset: 1216)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2589, file: !135, line: 3388, baseType: !3271, size: 1216)
!3271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !3272)
!3272 = !{!3273, !3274, !3275, !3276, !3277, !3278}
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3271, file: !135, line: 2825, baseType: !2722, size: 896)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3271, file: !135, line: 2827, baseType: !2586, size: 64, offset: 896)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !3271, file: !135, line: 2828, baseType: !2586, size: 64, offset: 960)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !3271, file: !135, line: 2829, baseType: !2586, size: 64, offset: 1024)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !3271, file: !135, line: 2830, baseType: !2586, size: 64, offset: 1088)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !3271, file: !135, line: 2831, baseType: !2586, size: 64, offset: 1152)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2589, file: !135, line: 3389, baseType: !3280, size: 1024)
!3280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !3281)
!3281 = !{!3282, !3283, !3284}
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3280, file: !135, line: 2851, baseType: !2760, size: 960)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !3280, file: !135, line: 2852, baseType: !2683, size: 32, offset: 960)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !3280, file: !135, line: 2853, baseType: !2683, size: 32, offset: 992)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2589, file: !135, line: 3390, baseType: !3286, size: 1024)
!3286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !3287)
!3287 = !{!3288, !3289}
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3286, file: !135, line: 2858, baseType: !2760, size: 960)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3286, file: !135, line: 2859, baseType: !3253, size: 64, offset: 960)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2589, file: !135, line: 3391, baseType: !3291, size: 960)
!3291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !3292)
!3292 = !{!3293}
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3291, file: !135, line: 2863, baseType: !2760, size: 960)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2589, file: !135, line: 3392, baseType: !3295, size: 1472)
!3295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !3296)
!3296 = !{!3297}
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3295, file: !135, line: 3305, baseType: !3220, size: 1472)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2589, file: !135, line: 3393, baseType: !3299, size: 1792)
!3299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !3300)
!3300 = !{!3301, !3302, !3614, !3615, !3616, !3617, !3618, !3619, !3620, !3621, !3622, !3623, !3624, !3625, !3626, !3627, !3628, !3629, !3630, !3631, !3632, !3633, !3634}
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3299, file: !135, line: 3249, baseType: !3220, size: 1472)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3299, file: !135, line: 3251, baseType: !3303, size: 64, offset: 1472)
!3303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3304, size: 64)
!3304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !3305, line: 463, size: 1152, elements: !3306)
!3305 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3306 = !{!3307, !3468, !3499, !3500, !3555, !3558, !3559, !3560, !3561, !3562, !3563, !3587, !3590, !3591, !3592, !3593, !3594, !3595, !3596, !3597, !3598, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613}
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !3304, file: !3305, line: 464, baseType: !3308, size: 64)
!3308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3309, size: 64)
!3309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !3310)
!3310 = !{!3311, !3360, !3373, !3387, !3437, !3449}
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !3309, file: !330, line: 197, baseType: !3312, size: 64)
!3312 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !3313)
!3313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3314, size: 64)
!3314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !3315)
!3315 = !{!3316, !3317, !3318, !3319, !3320, !3321, !3348, !3357, !3358, !3359}
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !3314, file: !330, line: 119, baseType: !3313, size: 64)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !3314, file: !330, line: 122, baseType: !3313, size: 64, offset: 64)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !3314, file: !330, line: 123, baseType: !3313, size: 64, offset: 128)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3314, file: !330, line: 126, baseType: !2683, size: 32, offset: 192)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3314, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3314, file: !330, line: 165, baseType: !3322, size: 192, offset: 256)
!3322 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !3323)
!3323 = !{!3324, !3337, !3343}
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !3322, file: !330, line: 137, baseType: !3325, size: 128)
!3325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !3326)
!3326 = !{!3327, !3336}
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !3325, file: !330, line: 135, baseType: !3328, size: 64)
!3328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3329, size: 64)
!3329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !3330)
!3330 = !{!3331, !3332, !3333, !3334, !3335}
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !3329, file: !330, line: 96, baseType: !3328, size: 64)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !3329, file: !330, line: 97, baseType: !3328, size: 64, offset: 64)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3329, file: !330, line: 101, baseType: !2586, size: 64, offset: 128)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !3329, file: !330, line: 106, baseType: !2586, size: 64, offset: 192)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3329, file: !330, line: 111, baseType: !2586, size: 64, offset: 256)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !3325, file: !330, line: 136, baseType: !3328, size: 64, offset: 64)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !3322, file: !330, line: 151, baseType: !3338, size: 192)
!3338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !3339)
!3339 = !{!3340, !3341, !3342}
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3338, file: !330, line: 141, baseType: !2586, size: 64)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3338, file: !330, line: 145, baseType: !2586, size: 64, offset: 64)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !3338, file: !330, line: 150, baseType: !2683, size: 32, offset: 128)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !3322, file: !330, line: 164, baseType: !3344, size: 128)
!3344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !3345)
!3345 = !{!3346, !3347}
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !3344, file: !330, line: 161, baseType: !2586, size: 64)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !3344, file: !330, line: 163, baseType: !2714, size: 32, offset: 64)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !3314, file: !330, line: 168, baseType: !3349, size: 64, offset: 448)
!3349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3350, size: 64)
!3350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !3351)
!3351 = !{!3352, !3353, !3354, !3355, !3356}
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !3350, file: !330, line: 70, baseType: !3349, size: 64)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3350, file: !330, line: 73, baseType: !3313, size: 64, offset: 64)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !3350, file: !330, line: 78, baseType: !2586, size: 64, offset: 128)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !3350, file: !330, line: 85, baseType: !2764, size: 64, offset: 192)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3350, file: !330, line: 88, baseType: !2683, size: 32, offset: 256)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !3314, file: !330, line: 173, baseType: !2764, size: 64, offset: 512)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !3314, file: !330, line: 173, baseType: !2764, size: 64, offset: 576)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !3314, file: !330, line: 177, baseType: !2706, size: 8, offset: 640)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !3309, file: !330, line: 200, baseType: !3361, size: 64, offset: 64)
!3361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3362, size: 64)
!3362 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !3363)
!3363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !3364)
!3364 = !{!3365}
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3363, file: !330, line: 185, baseType: !3366, size: 128)
!3366 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !3367)
!3367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !3368)
!3368 = !{!3369, !3370, !3371}
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3367, file: !330, line: 184, baseType: !7, size: 32)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3367, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3367, file: !330, line: 184, baseType: !3372, size: 64, offset: 64)
!3372 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3312, size: 64, elements: !2687)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !3309, file: !330, line: 203, baseType: !3374, size: 64, offset: 128)
!3374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3375, size: 64)
!3375 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !3376)
!3376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !3377)
!3377 = !{!3378}
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3376, file: !330, line: 189, baseType: !3379, size: 128)
!3379 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !3380)
!3380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !3381)
!3381 = !{!3382, !3383, !3384}
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3380, file: !330, line: 188, baseType: !7, size: 32)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3380, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3380, file: !330, line: 188, baseType: !3385, size: 64, offset: 64)
!3385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3386, size: 64, elements: !2687)
!3386 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !3349)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !3309, file: !330, line: 207, baseType: !3388, size: 64, offset: 192)
!3388 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !3389, line: 144, baseType: !3390)
!3389 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3391, size: 64)
!3391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !3389, line: 100, size: 896, elements: !3392)
!3392 = !{!3393, !3401, !3406, !3411, !3413, !3414, !3415, !3416, !3417, !3418, !3423, !3425, !3426, !3431, !3436}
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3391, file: !3389, line: 102, baseType: !3394, size: 64)
!3394 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !3389, line: 52, baseType: !3395)
!3395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3396, size: 64)
!3396 = !DISubroutineType(types: !3397)
!3397 = !{!3398, !3399}
!3398 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !3389, line: 47, baseType: !7)
!3399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3400, size: 64)
!3400 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3391, file: !3389, line: 105, baseType: !3402, size: 64, offset: 64)
!3402 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !3389, line: 59, baseType: !3403)
!3403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3404, size: 64)
!3404 = !DISubroutineType(types: !3405)
!3405 = !{!2683, !3399, !3399}
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3391, file: !3389, line: 108, baseType: !3407, size: 64, offset: 128)
!3407 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !3389, line: 63, baseType: !3408)
!3408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3409, size: 64)
!3409 = !DISubroutineType(types: !3410)
!3410 = !{null, !2870}
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3391, file: !3389, line: 111, baseType: !3412, size: 64, offset: 192)
!3412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2870, size: 64)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3391, file: !3389, line: 114, baseType: !3061, size: 64, offset: 256)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3391, file: !3389, line: 117, baseType: !3061, size: 64, offset: 320)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3391, file: !3389, line: 120, baseType: !3061, size: 64, offset: 384)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3391, file: !3389, line: 124, baseType: !7, size: 32, offset: 448)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3391, file: !3389, line: 128, baseType: !7, size: 32, offset: 480)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3391, file: !3389, line: 131, baseType: !3419, size: 64, offset: 512)
!3419 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !3389, line: 75, baseType: !3420)
!3420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3421, size: 64)
!3421 = !DISubroutineType(types: !3422)
!3422 = !{!2870, !3061, !3061}
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3391, file: !3389, line: 132, baseType: !3424, size: 64, offset: 576)
!3424 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !3389, line: 78, baseType: !3408)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3391, file: !3389, line: 135, baseType: !2870, size: 64, offset: 640)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3391, file: !3389, line: 136, baseType: !3427, size: 64, offset: 704)
!3427 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !3389, line: 82, baseType: !3428)
!3428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3429, size: 64)
!3429 = !DISubroutineType(types: !3430)
!3430 = !{!2870, !2870, !3061, !3061}
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3391, file: !3389, line: 137, baseType: !3432, size: 64, offset: 768)
!3432 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !3389, line: 83, baseType: !3433)
!3433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3434, size: 64)
!3434 = !DISubroutineType(types: !3435)
!3435 = !{null, !2870, !2870}
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3391, file: !3389, line: 141, baseType: !7, size: 32, offset: 832)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !3309, file: !330, line: 211, baseType: !3438, size: 64, offset: 256)
!3438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3439, size: 64)
!3439 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !3440)
!3440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !3441)
!3441 = !{!3442}
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3440, file: !135, line: 183, baseType: !3443, size: 128)
!3443 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !3444)
!3444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !3445)
!3445 = !{!3446, !3447, !3448}
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3444, file: !135, line: 182, baseType: !7, size: 32)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3444, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3444, file: !135, line: 182, baseType: !2969, size: 64, offset: 64)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !3309, file: !330, line: 220, baseType: !3450, size: 64, offset: 320)
!3450 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !3451)
!3451 = !{!3452, !3453}
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !3450, file: !330, line: 218, baseType: !3438, size: 64)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !3450, file: !330, line: 219, baseType: !3454, size: 64)
!3454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3455, size: 64)
!3455 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !3456, line: 29, baseType: !3457)
!3456 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !3456, line: 29, size: 96, elements: !3458)
!3458 = !{!3459}
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3457, file: !3456, line: 29, baseType: !3460, size: 96)
!3460 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !3456, line: 27, baseType: !3461)
!3461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !3456, line: 27, size: 96, elements: !3462)
!3462 = !{!3463, !3464, !3465}
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3461, file: !3456, line: 27, baseType: !7, size: 32)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3461, file: !3456, line: 27, baseType: !7, size: 32, offset: 32)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3461, file: !3456, line: 27, baseType: !3466, size: 8, offset: 64)
!3466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3467, size: 8, elements: !2687)
!3467 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !3456, line: 26, baseType: !2706)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !3304, file: !3305, line: 467, baseType: !3469, size: 64, offset: 64)
!3469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3470, size: 64)
!3470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !3471)
!3471 = !{!3472, !3474, !3475, !3488, !3489, !3490, !3491, !3492, !3493, !3495, !3497, !3498}
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3470, file: !337, line: 377, baseType: !3473, size: 64)
!3473 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2587, line: 111, baseType: !2881)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3470, file: !337, line: 378, baseType: !3473, size: 64, offset: 64)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3470, file: !337, line: 381, baseType: !3476, size: 64, offset: 128)
!3476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3477, size: 64)
!3477 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !3478)
!3478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !3479)
!3479 = !{!3480}
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3478, file: !337, line: 282, baseType: !3481, size: 128)
!3481 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !3482)
!3482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !3483)
!3483 = !{!3484, !3485, !3486}
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3482, file: !337, line: 281, baseType: !7, size: 32)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3482, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3482, file: !337, line: 281, baseType: !3487, size: 64, offset: 64)
!3487 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3473, size: 64, elements: !2687)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3470, file: !337, line: 384, baseType: !2683, size: 32, offset: 192)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3470, file: !337, line: 387, baseType: !2683, size: 32, offset: 224)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3470, file: !337, line: 390, baseType: !2683, size: 32, offset: 256)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3470, file: !337, line: 394, baseType: !3476, size: 64, offset: 320)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3470, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3470, file: !337, line: 399, baseType: !3494, size: 64, offset: 416)
!3494 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !2834)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3470, file: !337, line: 402, baseType: !3496, size: 64, offset: 480)
!3496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2834)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3470, file: !337, line: 406, baseType: !2683, size: 32, offset: 544)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3470, file: !337, line: 409, baseType: !2683, size: 32, offset: 576)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !3304, file: !3305, line: 470, baseType: !2908, size: 64, offset: 128)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !3304, file: !3305, line: 473, baseType: !3501, size: 64, offset: 192)
!3501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3502, size: 64)
!3502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !3255, line: 39, size: 1152, elements: !3503)
!3503 = !{!3504, !3505, !3518, !3519, !3520, !3532, !3533, !3537, !3538, !3539, !3540, !3541}
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !3502, file: !3255, line: 41, baseType: !3388, size: 64)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !3502, file: !3255, line: 48, baseType: !3506, size: 64, offset: 64)
!3506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3507, size: 64)
!3507 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1618, line: 35, baseType: !3508)
!3508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1618, line: 35, size: 128, elements: !3509)
!3509 = !{!3510}
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3508, file: !1618, line: 35, baseType: !3511, size: 128)
!3511 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1618, line: 33, baseType: !3512)
!3512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1618, line: 33, size: 128, elements: !3513)
!3513 = !{!3514, !3515, !3516}
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3512, file: !1618, line: 33, baseType: !7, size: 32)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3512, file: !1618, line: 33, baseType: !7, size: 32, offset: 32)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3512, file: !1618, line: 33, baseType: !3517, size: 64, offset: 64)
!3517 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2917, size: 64, elements: !2687)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !3502, file: !3255, line: 51, baseType: !3438, size: 64, offset: 128)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !3502, file: !3255, line: 54, baseType: !2586, size: 64, offset: 192)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !3502, file: !3255, line: 57, baseType: !3521, size: 128, offset: 256)
!3521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !3522, line: 31, size: 128, elements: !3523)
!3522 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3523 = !{!3524, !3525, !3526, !3527, !3528, !3529, !3530}
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !3521, file: !3522, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !3521, file: !3522, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !3521, file: !3522, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !3521, file: !3522, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !3521, file: !3522, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !3521, file: !3522, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3521, file: !3522, line: 56, baseType: !3531, size: 64, offset: 64)
!3531 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !2587, line: 47, baseType: !2818)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !3502, file: !3255, line: 60, baseType: !3521, size: 128, offset: 384)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !3502, file: !3255, line: 64, baseType: !3534, size: 64, offset: 512)
!3534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3535, size: 64)
!3535 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !3536, line: 33, flags: DIFlagFwdDecl)
!3536 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !3502, file: !3255, line: 67, baseType: !2586, size: 64, offset: 576)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !3502, file: !3255, line: 73, baseType: !3388, size: 64, offset: 640)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !3502, file: !3255, line: 77, baseType: !3531, size: 64, offset: 704)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !3502, file: !3255, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !3502, file: !3255, line: 82, baseType: !3542, size: 320, offset: 832)
!3542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2578, line: 62, size: 320, elements: !3543)
!3543 = !{!3544, !3550, !3551, !3552, !3553, !3554}
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !3542, file: !2578, line: 63, baseType: !3545, size: 64)
!3545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3546, size: 64)
!3546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2578, line: 56, size: 128, elements: !3547)
!3547 = !{!3548, !3549}
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3546, file: !2578, line: 57, baseType: !3545, size: 64)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !3546, file: !2578, line: 58, baseType: !2685, size: 8, offset: 64)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !3542, file: !2578, line: 64, baseType: !7, size: 32, offset: 64)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !3542, file: !2578, line: 66, baseType: !7, size: 32, offset: 96)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !3542, file: !2578, line: 68, baseType: !2706, size: 8, offset: 128)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !3542, file: !2578, line: 70, baseType: !2946, size: 64, offset: 192)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !3542, file: !2578, line: 71, baseType: !2952, size: 64, offset: 256)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !3304, file: !3305, line: 476, baseType: !3556, size: 64, offset: 256)
!3556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3557, size: 64)
!3557 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !3305, line: 476, flags: DIFlagFwdDecl)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !3304, file: !3305, line: 479, baseType: !3388, size: 64, offset: 320)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3304, file: !3305, line: 484, baseType: !2586, size: 64, offset: 384)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !3304, file: !3305, line: 488, baseType: !2586, size: 64, offset: 448)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !3304, file: !3305, line: 493, baseType: !2586, size: 64, offset: 512)
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !3304, file: !3305, line: 496, baseType: !2586, size: 64, offset: 576)
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !3304, file: !3305, line: 501, baseType: !3564, size: 64, offset: 640)
!3564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3565, size: 64)
!3565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !3566)
!3566 = !{!3567, !3570, !3571, !3572, !3573, !3575, !3576, !3581, !3582, !3583, !3584, !3585, !3586}
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3565, file: !348, line: 2356, baseType: !3568, size: 64)
!3568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3569, size: 64)
!3569 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3565, file: !348, line: 2357, baseType: !2790, size: 64, offset: 64)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3565, file: !348, line: 2358, baseType: !2683, size: 32, offset: 128)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3565, file: !348, line: 2359, baseType: !2683, size: 32, offset: 160)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3565, file: !348, line: 2360, baseType: !3574, size: 128, offset: 192)
!3574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2683, size: 128, elements: !2859)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3565, file: !348, line: 2364, baseType: !2683, size: 32, offset: 320)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3565, file: !348, line: 2367, baseType: !3577, size: 128, offset: 384)
!3577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !3578)
!3578 = !{!3579, !3580}
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3577, file: !348, line: 2351, baseType: !2764, size: 64)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3577, file: !348, line: 2352, baseType: !2642, size: 64, offset: 64)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3565, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3565, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3565, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3565, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3565, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3565, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !3304, file: !3305, line: 504, baseType: !3588, size: 64, offset: 704)
!3588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3589, size: 64)
!3589 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !3305, line: 504, flags: DIFlagFwdDecl)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !3304, file: !3305, line: 507, baseType: !3388, size: 64, offset: 768)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !3304, file: !3305, line: 510, baseType: !2683, size: 32, offset: 832)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !3304, file: !3305, line: 513, baseType: !2683, size: 32, offset: 864)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !3304, file: !3305, line: 516, baseType: !2714, size: 32, offset: 896)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !3304, file: !3305, line: 519, baseType: !2714, size: 32, offset: 928)
!3595 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !3304, file: !3305, line: 522, baseType: !7, size: 32, offset: 960)
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !3304, file: !3305, line: 523, baseType: !7, size: 32, offset: 992)
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !3304, file: !3305, line: 528, baseType: !2790, size: 64, offset: 1024)
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !3304, file: !3305, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !3304, file: !3305, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !3304, file: !3305, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !3304, file: !3305, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !3304, file: !3305, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !3304, file: !3305, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !3304, file: !3305, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !3304, file: !3305, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !3304, file: !3305, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !3304, file: !3305, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !3304, file: !3305, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !3304, file: !3305, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !3304, file: !3305, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !3304, file: !3305, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !3304, file: !3305, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !3304, file: !3305, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !3299, file: !135, line: 3254, baseType: !2586, size: 64, offset: 1536)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !3299, file: !135, line: 3257, baseType: !2586, size: 64, offset: 1600)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !3299, file: !135, line: 3258, baseType: !2586, size: 64, offset: 1664)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !3299, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !3299, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !3299, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !3299, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !3299, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !3299, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !3299, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !3299, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !3299, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !3299, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !3299, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !3299, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !3299, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !3299, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !3299, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3299, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !3299, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !3299, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2589, file: !135, line: 3394, baseType: !3636, size: 1344)
!3636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !3637)
!3637 = !{!3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663, !3671, !3672, !3673, !3674, !3675, !3676, !3677, !3678, !3679}
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3636, file: !135, line: 2280, baseType: !2625, size: 192)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3636, file: !135, line: 2281, baseType: !2586, size: 64, offset: 192)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3636, file: !135, line: 2282, baseType: !2586, size: 64, offset: 256)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3636, file: !135, line: 2283, baseType: !2586, size: 64, offset: 320)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3636, file: !135, line: 2284, baseType: !2586, size: 64, offset: 384)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3636, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3636, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3636, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3636, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3636, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3636, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3636, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3636, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3636, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3636, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3636, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3636, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3636, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3636, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3636, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3636, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3636, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3636, file: !135, line: 2306, baseType: !3172, size: 32, offset: 544)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3636, file: !135, line: 2307, baseType: !2586, size: 64, offset: 576)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3636, file: !135, line: 2308, baseType: !2586, size: 64, offset: 640)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3636, file: !135, line: 2314, baseType: !3664, size: 64, offset: 704)
!3664 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !3665)
!3665 = !{!3666, !3667, !3668}
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3664, file: !135, line: 2310, baseType: !2683, size: 32)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3664, file: !135, line: 2311, baseType: !2790, size: 64)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3664, file: !135, line: 2312, baseType: !3669, size: 64)
!3669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3670, size: 64)
!3670 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3636, file: !135, line: 2315, baseType: !2586, size: 64, offset: 768)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3636, file: !135, line: 2316, baseType: !2586, size: 64, offset: 832)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3636, file: !135, line: 2317, baseType: !2586, size: 64, offset: 896)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3636, file: !135, line: 2318, baseType: !2586, size: 64, offset: 960)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3636, file: !135, line: 2319, baseType: !2586, size: 64, offset: 1024)
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3636, file: !135, line: 2320, baseType: !2586, size: 64, offset: 1088)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3636, file: !135, line: 2321, baseType: !2586, size: 64, offset: 1152)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3636, file: !135, line: 2322, baseType: !2586, size: 64, offset: 1216)
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3636, file: !135, line: 2324, baseType: !3680, size: 64, offset: 1280)
!3680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3681, size: 64)
!3681 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2589, file: !135, line: 3395, baseType: !3683, size: 320)
!3683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !3684)
!3684 = !{!3685, !3686, !3687}
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3683, file: !135, line: 1470, baseType: !2625, size: 192)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3683, file: !135, line: 1471, baseType: !2586, size: 64, offset: 192)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3683, file: !135, line: 1472, baseType: !2586, size: 64, offset: 256)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2589, file: !135, line: 3396, baseType: !3689, size: 320)
!3689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !3690)
!3690 = !{!3691, !3692, !3693}
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3689, file: !135, line: 1483, baseType: !2625, size: 192)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3689, file: !135, line: 1484, baseType: !2683, size: 32, offset: 192)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3689, file: !135, line: 1485, baseType: !2969, size: 64, offset: 256)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2589, file: !135, line: 3397, baseType: !3695, size: 384)
!3695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !3696)
!3696 = !{!3697, !3698, !3699, !3700}
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3695, file: !135, line: 1830, baseType: !2625, size: 192)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3695, file: !135, line: 1831, baseType: !2714, size: 32, offset: 192)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3695, file: !135, line: 1832, baseType: !2586, size: 64, offset: 256)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3695, file: !135, line: 1835, baseType: !2969, size: 64, offset: 320)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2589, file: !135, line: 3398, baseType: !3702, size: 704)
!3702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !3703)
!3703 = !{!3704, !3705, !3706, !3707, !3708, !3713}
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3702, file: !135, line: 1899, baseType: !2625, size: 192)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3702, file: !135, line: 1902, baseType: !2586, size: 64, offset: 192)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3702, file: !135, line: 1905, baseType: !2917, size: 64, offset: 256)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3702, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3702, file: !135, line: 1911, baseType: !3709, size: 64, offset: 384)
!3709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3710, size: 64)
!3710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !3255, line: 117, size: 128, elements: !3711)
!3711 = !{!3712}
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !3710, file: !3255, line: 120, baseType: !3521, size: 128)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3702, file: !135, line: 1914, baseType: !2957, size: 256, offset: 448)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2589, file: !135, line: 3399, baseType: !3715, size: 704)
!3715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !3716)
!3716 = !{!3717, !3718, !3719, !3720, !3721, !3722, !3723, !3724, !3725, !3726, !3727}
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3715, file: !135, line: 2009, baseType: !2625, size: 192)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3715, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3715, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3715, file: !135, line: 2014, baseType: !2714, size: 32, offset: 224)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3715, file: !135, line: 2016, baseType: !2586, size: 64, offset: 256)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3715, file: !135, line: 2017, baseType: !3438, size: 64, offset: 320)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3715, file: !135, line: 2019, baseType: !2586, size: 64, offset: 384)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3715, file: !135, line: 2020, baseType: !2586, size: 64, offset: 448)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3715, file: !135, line: 2021, baseType: !2586, size: 64, offset: 512)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3715, file: !135, line: 2022, baseType: !2586, size: 64, offset: 576)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3715, file: !135, line: 2023, baseType: !2586, size: 64, offset: 640)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2589, file: !135, line: 3400, baseType: !3729, size: 832)
!3729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !3730)
!3730 = !{!3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740}
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3729, file: !135, line: 2431, baseType: !2625, size: 192)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3729, file: !135, line: 2433, baseType: !2586, size: 64, offset: 192)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3729, file: !135, line: 2434, baseType: !2586, size: 64, offset: 256)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3729, file: !135, line: 2435, baseType: !2586, size: 64, offset: 320)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3729, file: !135, line: 2436, baseType: !2586, size: 64, offset: 384)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3729, file: !135, line: 2437, baseType: !3438, size: 64, offset: 448)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3729, file: !135, line: 2438, baseType: !2586, size: 64, offset: 512)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3729, file: !135, line: 2440, baseType: !2586, size: 64, offset: 576)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3729, file: !135, line: 2441, baseType: !2586, size: 64, offset: 640)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3729, file: !135, line: 2443, baseType: !3741, size: 128, offset: 704)
!3741 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !3742)
!3742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !3743)
!3743 = !{!3744}
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3742, file: !135, line: 182, baseType: !3443, size: 128)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2589, file: !135, line: 3401, baseType: !3746, size: 320)
!3746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !3747)
!3747 = !{!3748, !3749, !3756}
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3746, file: !135, line: 3329, baseType: !2625, size: 192)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3746, file: !135, line: 3330, baseType: !3750, size: 64, offset: 192)
!3750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3751, size: 64)
!3751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !3752)
!3752 = !{!3753, !3754, !3755}
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3751, file: !135, line: 3322, baseType: !3750, size: 64)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3751, file: !135, line: 3323, baseType: !3750, size: 64, offset: 64)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3751, file: !135, line: 3324, baseType: !2586, size: 64, offset: 128)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3746, file: !135, line: 3331, baseType: !3750, size: 64, offset: 256)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2589, file: !135, line: 3402, baseType: !3758, size: 256)
!3758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !3759)
!3759 = !{!3760, !3761}
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3758, file: !135, line: 1541, baseType: !2625, size: 192)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3758, file: !135, line: 1542, baseType: !3762, size: 64, offset: 192)
!3762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3763, size: 64)
!3763 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !3764)
!3764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !3765)
!3765 = !{!3766}
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3764, file: !135, line: 1538, baseType: !3767, size: 192)
!3767 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !3768)
!3768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !3769)
!3769 = !{!3770, !3771, !3772}
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3768, file: !135, line: 1537, baseType: !7, size: 32)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3768, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3768, file: !135, line: 1537, baseType: !3773, size: 128, offset: 64)
!3773 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3774, size: 128, elements: !2687)
!3774 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !3775)
!3775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !3776)
!3776 = !{!3777, !3778}
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3775, file: !135, line: 1533, baseType: !2586, size: 64)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3775, file: !135, line: 1534, baseType: !2586, size: 64, offset: 64)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2589, file: !135, line: 3403, baseType: !3780, size: 512)
!3780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !3781)
!3781 = !{!3782, !3783, !3784, !3785, !3791, !3792, !3793}
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3780, file: !135, line: 1939, baseType: !2625, size: 192)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3780, file: !135, line: 1940, baseType: !2714, size: 32, offset: 192)
!3784 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3780, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3780, file: !135, line: 1946, baseType: !3786, size: 32, offset: 256)
!3786 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !3787)
!3787 = !{!3788, !3789, !3790}
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3786, file: !135, line: 1943, baseType: !370, size: 32)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3786, file: !135, line: 1944, baseType: !377, size: 32)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3786, file: !135, line: 1945, baseType: !134, size: 32)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3780, file: !135, line: 1950, baseType: !2907, size: 64, offset: 320)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3780, file: !135, line: 1951, baseType: !2907, size: 64, offset: 384)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3780, file: !135, line: 1953, baseType: !2969, size: 64, offset: 448)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2589, file: !135, line: 3404, baseType: !3795, size: 1664)
!3795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !3796)
!3796 = !{!3797, !3798}
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3795, file: !135, line: 3338, baseType: !2625, size: 192)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3795, file: !135, line: 3341, baseType: !3799, size: 1472, offset: 192)
!3799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !744, line: 410, size: 1472, elements: !3800)
!3800 = !{!3801, !3802, !3803, !3804, !3805, !3806, !3807, !3808, !3809, !3811, !3812, !3813, !3814, !3815, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3825, !3826, !3827, !3828, !3829, !3830, !3831, !3832, !3833, !3834, !3835, !3836, !3837, !3838, !3839, !3840, !3841, !3842, !3843, !3844, !3845, !3846, !3847, !3848, !3849, !3850, !3851, !3852, !3853, !3854, !3855, !3856, !3857, !3858, !3859, !3860, !3861, !3862, !3863, !3864, !3865, !3866, !3867, !3868, !3869, !3870, !3871, !3872, !3873, !3874, !3875, !3876, !3877, !3878, !3879, !3880, !3881, !3882, !3883, !3884, !3885, !3886, !3887, !3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3901, !3902, !3903, !3904, !3905, !3906, !3907, !3908, !3909, !3910, !3911, !3912, !3913, !3914, !3915, !3916, !3917, !3918, !3919, !3920, !3921, !3922, !3923, !3924, !3925, !3926, !3927, !3928, !3929, !3930, !3931, !3932, !3933, !3934, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3948, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959, !3960, !3961, !3962, !3963, !3964}
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3799, file: !744, line: 412, baseType: !2683, size: 32)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3799, file: !744, line: 413, baseType: !2683, size: 32, offset: 32)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3799, file: !744, line: 414, baseType: !2683, size: 32, offset: 64)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3799, file: !744, line: 415, baseType: !2683, size: 32, offset: 96)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3799, file: !744, line: 416, baseType: !2683, size: 32, offset: 128)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3799, file: !744, line: 417, baseType: !2683, size: 32, offset: 160)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3799, file: !744, line: 418, baseType: !2706, size: 8, offset: 192)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3799, file: !744, line: 419, baseType: !2706, size: 8, offset: 200)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3799, file: !744, line: 420, baseType: !3810, size: 8, offset: 208)
!3810 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3799, file: !744, line: 421, baseType: !3810, size: 8, offset: 216)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3799, file: !744, line: 422, baseType: !3810, size: 8, offset: 224)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3799, file: !744, line: 423, baseType: !3810, size: 8, offset: 232)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3799, file: !744, line: 424, baseType: !3810, size: 8, offset: 240)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3799, file: !744, line: 425, baseType: !3810, size: 8, offset: 248)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3799, file: !744, line: 426, baseType: !3810, size: 8, offset: 256)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3799, file: !744, line: 427, baseType: !3810, size: 8, offset: 264)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3799, file: !744, line: 428, baseType: !3810, size: 8, offset: 272)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3799, file: !744, line: 429, baseType: !3810, size: 8, offset: 280)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3799, file: !744, line: 430, baseType: !3810, size: 8, offset: 288)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3799, file: !744, line: 431, baseType: !3810, size: 8, offset: 296)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3799, file: !744, line: 432, baseType: !3810, size: 8, offset: 304)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3799, file: !744, line: 433, baseType: !3810, size: 8, offset: 312)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3799, file: !744, line: 434, baseType: !3810, size: 8, offset: 320)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3799, file: !744, line: 435, baseType: !3810, size: 8, offset: 328)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3799, file: !744, line: 436, baseType: !3810, size: 8, offset: 336)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3799, file: !744, line: 437, baseType: !3810, size: 8, offset: 344)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3799, file: !744, line: 438, baseType: !3810, size: 8, offset: 352)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3799, file: !744, line: 439, baseType: !3810, size: 8, offset: 360)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3799, file: !744, line: 440, baseType: !3810, size: 8, offset: 368)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3799, file: !744, line: 441, baseType: !3810, size: 8, offset: 376)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3799, file: !744, line: 442, baseType: !3810, size: 8, offset: 384)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3799, file: !744, line: 443, baseType: !3810, size: 8, offset: 392)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3799, file: !744, line: 444, baseType: !3810, size: 8, offset: 400)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3799, file: !744, line: 445, baseType: !3810, size: 8, offset: 408)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3799, file: !744, line: 446, baseType: !3810, size: 8, offset: 416)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3799, file: !744, line: 447, baseType: !3810, size: 8, offset: 424)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3799, file: !744, line: 448, baseType: !3810, size: 8, offset: 432)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3799, file: !744, line: 449, baseType: !3810, size: 8, offset: 440)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3799, file: !744, line: 450, baseType: !3810, size: 8, offset: 448)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3799, file: !744, line: 451, baseType: !3810, size: 8, offset: 456)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3799, file: !744, line: 452, baseType: !3810, size: 8, offset: 464)
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3799, file: !744, line: 453, baseType: !3810, size: 8, offset: 472)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3799, file: !744, line: 454, baseType: !3810, size: 8, offset: 480)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3799, file: !744, line: 455, baseType: !3810, size: 8, offset: 488)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3799, file: !744, line: 456, baseType: !3810, size: 8, offset: 496)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3799, file: !744, line: 457, baseType: !3810, size: 8, offset: 504)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3799, file: !744, line: 458, baseType: !3810, size: 8, offset: 512)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3799, file: !744, line: 459, baseType: !3810, size: 8, offset: 520)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3799, file: !744, line: 460, baseType: !3810, size: 8, offset: 528)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3799, file: !744, line: 461, baseType: !3810, size: 8, offset: 536)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3799, file: !744, line: 462, baseType: !3810, size: 8, offset: 544)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3799, file: !744, line: 463, baseType: !3810, size: 8, offset: 552)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3799, file: !744, line: 464, baseType: !3810, size: 8, offset: 560)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3799, file: !744, line: 465, baseType: !3810, size: 8, offset: 568)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3799, file: !744, line: 466, baseType: !3810, size: 8, offset: 576)
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3799, file: !744, line: 467, baseType: !3810, size: 8, offset: 584)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3799, file: !744, line: 468, baseType: !3810, size: 8, offset: 592)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3799, file: !744, line: 469, baseType: !3810, size: 8, offset: 600)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3799, file: !744, line: 470, baseType: !3810, size: 8, offset: 608)
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3799, file: !744, line: 471, baseType: !3810, size: 8, offset: 616)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3799, file: !744, line: 472, baseType: !3810, size: 8, offset: 624)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3799, file: !744, line: 473, baseType: !3810, size: 8, offset: 632)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3799, file: !744, line: 474, baseType: !3810, size: 8, offset: 640)
!3865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3799, file: !744, line: 475, baseType: !3810, size: 8, offset: 648)
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3799, file: !744, line: 476, baseType: !3810, size: 8, offset: 656)
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3799, file: !744, line: 477, baseType: !3810, size: 8, offset: 664)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3799, file: !744, line: 478, baseType: !3810, size: 8, offset: 672)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3799, file: !744, line: 479, baseType: !3810, size: 8, offset: 680)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3799, file: !744, line: 480, baseType: !3810, size: 8, offset: 688)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3799, file: !744, line: 481, baseType: !3810, size: 8, offset: 696)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3799, file: !744, line: 482, baseType: !3810, size: 8, offset: 704)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3799, file: !744, line: 483, baseType: !3810, size: 8, offset: 712)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3799, file: !744, line: 484, baseType: !3810, size: 8, offset: 720)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3799, file: !744, line: 485, baseType: !3810, size: 8, offset: 728)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3799, file: !744, line: 486, baseType: !3810, size: 8, offset: 736)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3799, file: !744, line: 487, baseType: !3810, size: 8, offset: 744)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3799, file: !744, line: 488, baseType: !3810, size: 8, offset: 752)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3799, file: !744, line: 489, baseType: !3810, size: 8, offset: 760)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3799, file: !744, line: 490, baseType: !3810, size: 8, offset: 768)
!3881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3799, file: !744, line: 491, baseType: !3810, size: 8, offset: 776)
!3882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3799, file: !744, line: 492, baseType: !3810, size: 8, offset: 784)
!3883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3799, file: !744, line: 493, baseType: !3810, size: 8, offset: 792)
!3884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3799, file: !744, line: 494, baseType: !3810, size: 8, offset: 800)
!3885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3799, file: !744, line: 495, baseType: !3810, size: 8, offset: 808)
!3886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3799, file: !744, line: 496, baseType: !3810, size: 8, offset: 816)
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3799, file: !744, line: 497, baseType: !3810, size: 8, offset: 824)
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3799, file: !744, line: 498, baseType: !3810, size: 8, offset: 832)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3799, file: !744, line: 499, baseType: !3810, size: 8, offset: 840)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3799, file: !744, line: 500, baseType: !3810, size: 8, offset: 848)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3799, file: !744, line: 501, baseType: !3810, size: 8, offset: 856)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3799, file: !744, line: 502, baseType: !3810, size: 8, offset: 864)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3799, file: !744, line: 503, baseType: !3810, size: 8, offset: 872)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3799, file: !744, line: 504, baseType: !3810, size: 8, offset: 880)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3799, file: !744, line: 505, baseType: !3810, size: 8, offset: 888)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3799, file: !744, line: 506, baseType: !3810, size: 8, offset: 896)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3799, file: !744, line: 507, baseType: !3810, size: 8, offset: 904)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3799, file: !744, line: 508, baseType: !3810, size: 8, offset: 912)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3799, file: !744, line: 509, baseType: !3810, size: 8, offset: 920)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3799, file: !744, line: 510, baseType: !3810, size: 8, offset: 928)
!3901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3799, file: !744, line: 511, baseType: !3810, size: 8, offset: 936)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3799, file: !744, line: 512, baseType: !3810, size: 8, offset: 944)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3799, file: !744, line: 513, baseType: !3810, size: 8, offset: 952)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3799, file: !744, line: 514, baseType: !3810, size: 8, offset: 960)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3799, file: !744, line: 515, baseType: !3810, size: 8, offset: 968)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3799, file: !744, line: 516, baseType: !3810, size: 8, offset: 976)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3799, file: !744, line: 517, baseType: !3810, size: 8, offset: 984)
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3799, file: !744, line: 518, baseType: !3810, size: 8, offset: 992)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3799, file: !744, line: 519, baseType: !3810, size: 8, offset: 1000)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3799, file: !744, line: 520, baseType: !3810, size: 8, offset: 1008)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3799, file: !744, line: 521, baseType: !3810, size: 8, offset: 1016)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3799, file: !744, line: 522, baseType: !3810, size: 8, offset: 1024)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3799, file: !744, line: 523, baseType: !3810, size: 8, offset: 1032)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3799, file: !744, line: 524, baseType: !3810, size: 8, offset: 1040)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3799, file: !744, line: 525, baseType: !3810, size: 8, offset: 1048)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3799, file: !744, line: 526, baseType: !3810, size: 8, offset: 1056)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3799, file: !744, line: 527, baseType: !3810, size: 8, offset: 1064)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3799, file: !744, line: 528, baseType: !3810, size: 8, offset: 1072)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3799, file: !744, line: 529, baseType: !3810, size: 8, offset: 1080)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3799, file: !744, line: 530, baseType: !3810, size: 8, offset: 1088)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3799, file: !744, line: 531, baseType: !3810, size: 8, offset: 1096)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3799, file: !744, line: 532, baseType: !3810, size: 8, offset: 1104)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3799, file: !744, line: 533, baseType: !3810, size: 8, offset: 1112)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3799, file: !744, line: 534, baseType: !3810, size: 8, offset: 1120)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3799, file: !744, line: 535, baseType: !3810, size: 8, offset: 1128)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3799, file: !744, line: 536, baseType: !3810, size: 8, offset: 1136)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3799, file: !744, line: 537, baseType: !3810, size: 8, offset: 1144)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3799, file: !744, line: 538, baseType: !3810, size: 8, offset: 1152)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3799, file: !744, line: 539, baseType: !3810, size: 8, offset: 1160)
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3799, file: !744, line: 540, baseType: !3810, size: 8, offset: 1168)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3799, file: !744, line: 541, baseType: !3810, size: 8, offset: 1176)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3799, file: !744, line: 542, baseType: !3810, size: 8, offset: 1184)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3799, file: !744, line: 543, baseType: !3810, size: 8, offset: 1192)
!3934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3799, file: !744, line: 544, baseType: !3810, size: 8, offset: 1200)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3799, file: !744, line: 545, baseType: !3810, size: 8, offset: 1208)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3799, file: !744, line: 546, baseType: !3810, size: 8, offset: 1216)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3799, file: !744, line: 547, baseType: !3810, size: 8, offset: 1224)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3799, file: !744, line: 548, baseType: !3810, size: 8, offset: 1232)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3799, file: !744, line: 549, baseType: !3810, size: 8, offset: 1240)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3799, file: !744, line: 550, baseType: !3810, size: 8, offset: 1248)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3799, file: !744, line: 551, baseType: !3810, size: 8, offset: 1256)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3799, file: !744, line: 552, baseType: !3810, size: 8, offset: 1264)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3799, file: !744, line: 553, baseType: !3810, size: 8, offset: 1272)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3799, file: !744, line: 554, baseType: !3810, size: 8, offset: 1280)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3799, file: !744, line: 555, baseType: !3810, size: 8, offset: 1288)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3799, file: !744, line: 556, baseType: !3810, size: 8, offset: 1296)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3799, file: !744, line: 557, baseType: !3810, size: 8, offset: 1304)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3799, file: !744, line: 558, baseType: !3810, size: 8, offset: 1312)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3799, file: !744, line: 559, baseType: !3810, size: 8, offset: 1320)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3799, file: !744, line: 560, baseType: !3810, size: 8, offset: 1328)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3799, file: !744, line: 561, baseType: !3810, size: 8, offset: 1336)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3799, file: !744, line: 562, baseType: !3810, size: 8, offset: 1344)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3799, file: !744, line: 563, baseType: !3810, size: 8, offset: 1352)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3799, file: !744, line: 564, baseType: !3810, size: 8, offset: 1360)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3799, file: !744, line: 565, baseType: !3810, size: 8, offset: 1368)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3799, file: !744, line: 566, baseType: !3810, size: 8, offset: 1376)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3799, file: !744, line: 567, baseType: !3810, size: 8, offset: 1384)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3799, file: !744, line: 568, baseType: !3810, size: 8, offset: 1392)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3799, file: !744, line: 569, baseType: !3810, size: 8, offset: 1400)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3799, file: !744, line: 570, baseType: !3810, size: 8, offset: 1408)
!3961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3799, file: !744, line: 571, baseType: !3810, size: 8, offset: 1416)
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3799, file: !744, line: 572, baseType: !3810, size: 8, offset: 1424)
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3799, file: !744, line: 573, baseType: !3810, size: 8, offset: 1432)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3799, file: !744, line: 574, baseType: !3810, size: 8, offset: 1440)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2589, file: !135, line: 3405, baseType: !3966, size: 384)
!3966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !3967)
!3967 = !{!3968, !3969}
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3966, file: !135, line: 3353, baseType: !2625, size: 192)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3966, file: !135, line: 3356, baseType: !3970, size: 192, offset: 192)
!3970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !744, line: 578, size: 192, elements: !3971)
!3971 = !{!3972, !3973, !3974, !3975, !3976, !3977, !3978, !3979, !3980, !3981, !3982}
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3970, file: !744, line: 580, baseType: !2683, size: 32)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3970, file: !744, line: 581, baseType: !2683, size: 32, offset: 32)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3970, file: !744, line: 582, baseType: !2683, size: 32, offset: 64)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3970, file: !744, line: 583, baseType: !2683, size: 32, offset: 96)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3970, file: !744, line: 584, baseType: !2706, size: 8, offset: 128)
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3970, file: !744, line: 585, baseType: !2706, size: 8, offset: 136)
!3978 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3970, file: !744, line: 586, baseType: !2706, size: 8, offset: 144)
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3970, file: !744, line: 587, baseType: !2706, size: 8, offset: 152)
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3970, file: !744, line: 588, baseType: !2706, size: 8, offset: 160)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3970, file: !744, line: 589, baseType: !2706, size: 8, offset: 168)
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3970, file: !744, line: 590, baseType: !2706, size: 8, offset: 176)
!3983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3984, size: 64)
!3984 = !DIDerivedType(tag: DW_TAG_typedef, name: "copy_body_data", file: !591, line: 129, baseType: !3985)
!3985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "copy_body_data", file: !591, line: 42, size: 1216, elements: !3986)
!3986 = !{!3987, !3988, !3989, !4219, !4220, !4221, !4222, !4223, !4228, !4229, !4230, !4231, !4232, !4233, !4234, !4235, !4236, !4237, !4238, !4242, !4245, !4246, !4252}
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "src_fn", scope: !3985, file: !591, line: 46, baseType: !2586, size: 64)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "dst_fn", scope: !3985, file: !591, line: 50, baseType: !2586, size: 64, offset: 64)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "src_node", scope: !3985, file: !591, line: 53, baseType: !3990, size: 64, offset: 128)
!3990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3991, size: 64)
!3991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !385, line: 181, size: 2496, elements: !3992)
!3992 = !{!3993, !3994, !4017, !4018, !4019, !4020, !4021, !4022, !4023, !4024, !4025, !4026, !4027, !4028, !4029, !4030, !4031, !4032, !4134, !4156, !4166, !4170, !4196, !4205, !4206, !4207, !4208, !4209, !4210, !4211, !4212, !4213, !4214, !4215, !4216, !4217, !4218}
!3993 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3991, file: !385, line: 182, baseType: !2586, size: 64)
!3994 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3991, file: !385, line: 183, baseType: !3995, size: 64, offset: 64)
!3995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3996, size: 64)
!3996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !385, line: 314, size: 768, elements: !3997)
!3997 = !{!3998, !3999, !4000, !4001, !4002, !4003, !4004, !4005, !4006, !4007, !4009, !4010, !4011, !4012, !4014, !4015, !4016}
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3996, file: !385, line: 316, baseType: !3127, size: 64)
!3999 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3996, file: !385, line: 317, baseType: !3990, size: 64, offset: 64)
!4000 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3996, file: !385, line: 318, baseType: !3990, size: 64, offset: 128)
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3996, file: !385, line: 319, baseType: !3995, size: 64, offset: 192)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3996, file: !385, line: 320, baseType: !3995, size: 64, offset: 256)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3996, file: !385, line: 321, baseType: !3995, size: 64, offset: 320)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3996, file: !385, line: 322, baseType: !3995, size: 64, offset: 384)
!4005 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3996, file: !385, line: 323, baseType: !2917, size: 64, offset: 448)
!4006 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3996, file: !385, line: 324, baseType: !2870, size: 64, offset: 512)
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3996, file: !385, line: 327, baseType: !4008, size: 32, offset: 576)
!4008 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !385, line: 312, baseType: !384)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3996, file: !385, line: 330, baseType: !7, size: 32, offset: 608)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3996, file: !385, line: 334, baseType: !2683, size: 32, offset: 640)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3996, file: !385, line: 336, baseType: !2683, size: 32, offset: 672)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3996, file: !385, line: 338, baseType: !4013, size: 16, offset: 704)
!4013 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3996, file: !385, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3996, file: !385, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!4016 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3996, file: !385, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3991, file: !385, line: 184, baseType: !3995, size: 64, offset: 128)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3991, file: !385, line: 185, baseType: !3990, size: 64, offset: 192)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3991, file: !385, line: 186, baseType: !3990, size: 64, offset: 256)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3991, file: !385, line: 188, baseType: !3990, size: 64, offset: 320)
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3991, file: !385, line: 190, baseType: !3990, size: 64, offset: 384)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3991, file: !385, line: 192, baseType: !3990, size: 64, offset: 448)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3991, file: !385, line: 194, baseType: !3990, size: 64, offset: 512)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3991, file: !385, line: 196, baseType: !3990, size: 64, offset: 576)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3991, file: !385, line: 197, baseType: !3990, size: 64, offset: 640)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3991, file: !385, line: 198, baseType: !3990, size: 64, offset: 704)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3991, file: !385, line: 199, baseType: !3990, size: 64, offset: 768)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3991, file: !385, line: 202, baseType: !3990, size: 64, offset: 832)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3991, file: !385, line: 204, baseType: !3990, size: 64, offset: 896)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3991, file: !385, line: 207, baseType: !3388, size: 64, offset: 960)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3991, file: !385, line: 209, baseType: !2870, size: 64, offset: 1024)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3991, file: !385, line: 214, baseType: !4033, size: 64, offset: 1088)
!4033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4034, size: 64)
!4034 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !3305, line: 177, baseType: !4035)
!4035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !3305, line: 177, size: 128, elements: !4036)
!4036 = !{!4037}
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4035, file: !3305, line: 177, baseType: !4038, size: 128)
!4038 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !3305, line: 176, baseType: !4039)
!4039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !3305, line: 176, size: 128, elements: !4040)
!4040 = !{!4041, !4042, !4043}
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4039, file: !3305, line: 176, baseType: !7, size: 32)
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4039, file: !3305, line: 176, baseType: !7, size: 32, offset: 32)
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4039, file: !3305, line: 176, baseType: !4044, size: 64, offset: 64)
!4044 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4045, size: 64, elements: !2687)
!4045 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !3305, line: 174, baseType: !4046)
!4046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4047, size: 64)
!4047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !408, line: 173, size: 1152, elements: !4048)
!4048 = !{!4049, !4073, !4077, !4100, !4101, !4105, !4110, !4111, !4115}
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4047, file: !408, line: 175, baseType: !4050, size: 640)
!4050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !408, line: 114, size: 640, elements: !4051)
!4051 = !{!4052, !4053, !4054, !4058, !4062, !4064, !4065, !4066, !4068, !4069, !4070, !4071, !4072}
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4050, file: !408, line: 117, baseType: !407, size: 32)
!4053 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4050, file: !408, line: 121, baseType: !2790, size: 64, offset: 64)
!4054 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !4050, file: !408, line: 125, baseType: !4055, size: 64, offset: 128)
!4055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4056, size: 64)
!4056 = !DISubroutineType(types: !4057)
!4057 = !{!2706}
!4058 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !4050, file: !408, line: 130, baseType: !4059, size: 64, offset: 192)
!4059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4060, size: 64)
!4060 = !DISubroutineType(types: !4061)
!4061 = !{!7}
!4062 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !4050, file: !408, line: 133, baseType: !4063, size: 64, offset: 256)
!4063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4050, size: 64)
!4064 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4050, file: !408, line: 136, baseType: !4063, size: 64, offset: 320)
!4065 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !4050, file: !408, line: 139, baseType: !2683, size: 32, offset: 384)
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !4050, file: !408, line: 143, baseType: !4067, size: 32, offset: 416)
!4067 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !415, line: 80, baseType: !414)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !4050, file: !408, line: 146, baseType: !7, size: 32, offset: 448)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !4050, file: !408, line: 147, baseType: !7, size: 32, offset: 480)
!4070 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !4050, file: !408, line: 148, baseType: !7, size: 32, offset: 512)
!4071 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !4050, file: !408, line: 151, baseType: !7, size: 32, offset: 544)
!4072 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !4050, file: !408, line: 152, baseType: !7, size: 32, offset: 576)
!4073 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !4047, file: !408, line: 179, baseType: !4074, size: 64, offset: 640)
!4074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4075, size: 64)
!4075 = !DISubroutineType(types: !4076)
!4076 = !{null}
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !4047, file: !408, line: 182, baseType: !4078, size: 64, offset: 704)
!4078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4079, size: 64)
!4079 = !DISubroutineType(types: !4080)
!4080 = !{null, !4081}
!4081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4082, size: 64)
!4082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !385, line: 276, size: 192, elements: !4083)
!4083 = !{!4084, !4085, !4099}
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !4082, file: !385, line: 278, baseType: !3388, size: 64)
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !4082, file: !385, line: 279, baseType: !4086, size: 64, offset: 64)
!4086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4087, size: 64)
!4087 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !385, line: 272, baseType: !4088)
!4088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !385, line: 272, size: 128, elements: !4089)
!4089 = !{!4090}
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4088, file: !385, line: 272, baseType: !4091, size: 128)
!4091 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !385, line: 270, baseType: !4092)
!4092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !385, line: 270, size: 128, elements: !4093)
!4093 = !{!4094, !4095, !4096}
!4094 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4092, file: !385, line: 270, baseType: !7, size: 32)
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4092, file: !385, line: 270, baseType: !7, size: 32, offset: 32)
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4092, file: !385, line: 270, baseType: !4097, size: 64, offset: 64)
!4097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4098, size: 64, elements: !2687)
!4098 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !385, line: 268, baseType: !3990)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !4082, file: !385, line: 280, baseType: !2870, size: 64, offset: 128)
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !4047, file: !408, line: 187, baseType: !4074, size: 64, offset: 768)
!4101 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !4047, file: !408, line: 188, baseType: !4102, size: 64, offset: 832)
!4102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4103, size: 64)
!4103 = !DISubroutineType(types: !4104)
!4104 = !{null, !3990}
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !4047, file: !408, line: 191, baseType: !4106, size: 64, offset: 896)
!4106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4107, size: 64)
!4107 = !DISubroutineType(types: !4108)
!4108 = !{null, !3990, !4109}
!4109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2917, size: 64)
!4110 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !4047, file: !408, line: 195, baseType: !7, size: 32, offset: 960)
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !4047, file: !408, line: 196, baseType: !4112, size: 64, offset: 1024)
!4112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4113, size: 64)
!4113 = !DISubroutineType(types: !4114)
!4114 = !{!7, !3990}
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !4047, file: !408, line: 197, baseType: !4116, size: 64, offset: 1088)
!4116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4117, size: 64)
!4117 = !DISubroutineType(types: !4118)
!4118 = !{null, !4119}
!4119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4120, size: 64)
!4120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !385, line: 358, size: 320, elements: !4121)
!4121 = !{!4122, !4123, !4124, !4125, !4126, !4127, !4128, !4129, !4130, !4131, !4132, !4133}
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4120, file: !385, line: 359, baseType: !2586, size: 64)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4120, file: !385, line: 361, baseType: !4119, size: 64, offset: 64)
!4124 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !4120, file: !385, line: 363, baseType: !4119, size: 64, offset: 128)
!4125 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !4120, file: !385, line: 366, baseType: !4119, size: 64, offset: 192)
!4126 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !4120, file: !385, line: 368, baseType: !2683, size: 32, offset: 256)
!4127 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !4120, file: !385, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!4128 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !4120, file: !385, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !4120, file: !385, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !4120, file: !385, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !4120, file: !385, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !4120, file: !385, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4120, file: !385, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3991, file: !385, line: 216, baseType: !4135, size: 320, offset: 1152)
!4135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !385, line: 88, size: 320, elements: !4136)
!4136 = !{!4137, !4140, !4148, !4149, !4150, !4151, !4152, !4153, !4154, !4155}
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !4135, file: !385, line: 90, baseType: !4138, size: 64)
!4138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4139, size: 64)
!4139 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !385, line: 51, flags: DIFlagFwdDecl)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !4135, file: !385, line: 92, baseType: !4141, size: 192, offset: 64)
!4141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !385, line: 57, size: 192, elements: !4142)
!4142 = !{!4143, !4144, !4145, !4146, !4147}
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !4141, file: !385, line: 60, baseType: !2642, size: 64)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !4141, file: !385, line: 63, baseType: !2683, size: 32, offset: 64)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !4141, file: !385, line: 65, baseType: !2683, size: 32, offset: 96)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !4141, file: !385, line: 67, baseType: !2683, size: 32, offset: 128)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !4141, file: !385, line: 69, baseType: !2683, size: 32, offset: 160)
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !4135, file: !385, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !4135, file: !385, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !4135, file: !385, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !4135, file: !385, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !4135, file: !385, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!4153 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !4135, file: !385, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !4135, file: !385, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !4135, file: !385, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3991, file: !385, line: 217, baseType: !4157, size: 320, offset: 1472)
!4157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !385, line: 126, size: 320, elements: !4158)
!4158 = !{!4159, !4160, !4161, !4162, !4163, !4164, !4165}
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !4157, file: !385, line: 128, baseType: !2642, size: 64)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !4157, file: !385, line: 130, baseType: !2642, size: 64, offset: 64)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !4157, file: !385, line: 134, baseType: !3990, size: 64, offset: 128)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !4157, file: !385, line: 137, baseType: !2683, size: 32, offset: 192)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4157, file: !385, line: 138, baseType: !2683, size: 32, offset: 224)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !4157, file: !385, line: 141, baseType: !2683, size: 32, offset: 256)
!4165 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !4157, file: !385, line: 144, baseType: !2706, size: 8, offset: 288)
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3991, file: !385, line: 218, baseType: !4167, size: 32, offset: 1792)
!4167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !385, line: 150, size: 32, elements: !4168)
!4168 = !{!4169}
!4169 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !4167, file: !385, line: 151, baseType: !7, size: 32)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3991, file: !385, line: 219, baseType: !4171, size: 192, offset: 1856)
!4171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !385, line: 171, size: 192, elements: !4172)
!4172 = !{!4173, !4194, !4195}
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !4171, file: !385, line: 173, baseType: !4174, size: 64)
!4174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4175, size: 64)
!4175 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !385, line: 169, baseType: !4176)
!4176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !385, line: 169, size: 128, elements: !4177)
!4177 = !{!4178}
!4178 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4176, file: !385, line: 169, baseType: !4179, size: 128)
!4179 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !385, line: 168, baseType: !4180)
!4180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !385, line: 168, size: 128, elements: !4181)
!4181 = !{!4182, !4183, !4184}
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4180, file: !385, line: 168, baseType: !7, size: 32)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4180, file: !385, line: 168, baseType: !7, size: 32, offset: 32)
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4180, file: !385, line: 168, baseType: !4185, size: 64, offset: 64)
!4185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4186, size: 64, elements: !2687)
!4186 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !385, line: 167, baseType: !4187)
!4187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4188, size: 64)
!4188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !385, line: 156, size: 192, elements: !4189)
!4189 = !{!4190, !4191, !4192, !4193}
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !4188, file: !385, line: 159, baseType: !2586, size: 64)
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !4188, file: !385, line: 161, baseType: !2586, size: 64, offset: 64)
!4192 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !4188, file: !385, line: 163, baseType: !2706, size: 8, offset: 128)
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !4188, file: !385, line: 165, baseType: !2706, size: 8, offset: 136)
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !4171, file: !385, line: 174, baseType: !3531, size: 64, offset: 64)
!4195 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !4171, file: !385, line: 175, baseType: !3531, size: 64, offset: 128)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3991, file: !385, line: 220, baseType: !4197, size: 256, offset: 2048)
!4197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !385, line: 74, size: 256, elements: !4198)
!4198 = !{!4199, !4200, !4201, !4202, !4203, !4204}
!4199 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !4197, file: !385, line: 76, baseType: !2642, size: 64)
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !4197, file: !385, line: 77, baseType: !2642, size: 64, offset: 64)
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4197, file: !385, line: 78, baseType: !2586, size: 64, offset: 128)
!4202 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !4197, file: !385, line: 79, baseType: !2706, size: 8, offset: 192)
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !4197, file: !385, line: 80, baseType: !2706, size: 8, offset: 200)
!4204 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !4197, file: !385, line: 82, baseType: !2706, size: 8, offset: 208)
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3991, file: !385, line: 223, baseType: !3127, size: 64, offset: 2304)
!4206 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3991, file: !385, line: 225, baseType: !2683, size: 32, offset: 2368)
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3991, file: !385, line: 227, baseType: !2683, size: 32, offset: 2400)
!4208 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3991, file: !385, line: 231, baseType: !2683, size: 32, offset: 2432)
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3991, file: !385, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!4210 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3991, file: !385, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3991, file: !385, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3991, file: !385, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3991, file: !385, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!4214 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3991, file: !385, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!4215 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3991, file: !385, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3991, file: !385, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!4217 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3991, file: !385, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3991, file: !385, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "dst_node", scope: !3985, file: !591, line: 56, baseType: !3990, size: 64, offset: 192)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "src_cfun", scope: !3985, file: !591, line: 61, baseType: !3303, size: 64, offset: 256)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "retvar", scope: !3985, file: !591, line: 64, baseType: !2586, size: 64, offset: 320)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "decl_map", scope: !3985, file: !591, line: 68, baseType: !3534, size: 64, offset: 384)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "copy_decl", scope: !3985, file: !591, line: 71, baseType: !4224, size: 64, offset: 448)
!4224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4225, size: 64)
!4225 = !DISubroutineType(types: !4226)
!4226 = !{!2586, !2586, !4227}
!4227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3985, size: 64)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3985, file: !591, line: 74, baseType: !2586, size: 64, offset: 512)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_call", scope: !3985, file: !591, line: 78, baseType: !2917, size: 64, offset: 576)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "eh_lp_nr", scope: !3985, file: !591, line: 81, baseType: !2683, size: 32, offset: 640)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "eh_map", scope: !3985, file: !591, line: 85, baseType: !3534, size: 64, offset: 704)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "transform_call_graph_edges", scope: !3985, file: !591, line: 92, baseType: !590, size: 32, offset: 768)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "transform_new_cfg", scope: !3985, file: !591, line: 96, baseType: !2706, size: 8, offset: 800)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "transform_return_to_modify", scope: !3985, file: !591, line: 101, baseType: !2706, size: 8, offset: 808)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "regimplify", scope: !3985, file: !591, line: 104, baseType: !2706, size: 8, offset: 816)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "do_not_unshare", scope: !3985, file: !591, line: 107, baseType: !2706, size: 8, offset: 824)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "remapping_type_depth", scope: !3985, file: !591, line: 110, baseType: !2683, size: 32, offset: 832)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "transform_lang_insert_block", scope: !3985, file: !591, line: 113, baseType: !4239, size: 64, offset: 896)
!4239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4240, size: 64)
!4240 = !DISubroutineType(types: !4241)
!4241 = !{null, !2586}
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "statements_to_fold", scope: !3985, file: !591, line: 116, baseType: !4243, size: 64, offset: 960)
!4243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4244, size: 64)
!4244 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!4245 = !DIDerivedType(tag: DW_TAG_member, name: "entry_bb", scope: !3985, file: !591, line: 119, baseType: !2881, size: 64, offset: 1024)
!4246 = !DIDerivedType(tag: DW_TAG_member, name: "debug_stmts", scope: !3985, file: !591, line: 122, baseType: !4247, size: 64, offset: 1088)
!4247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4248, size: 64)
!4248 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !1618, line: 34, baseType: !4249)
!4249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !1618, line: 34, size: 128, elements: !4250)
!4250 = !{!4251}
!4251 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4249, file: !1618, line: 34, baseType: !3511, size: 128)
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "debug_map", scope: !3985, file: !591, line: 128, baseType: !3534, size: 64, offset: 1152)
!4253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4254, size: 64)
!4254 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2589)
!4255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4256, size: 64)
!4256 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2919)
!4257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4258, size: 64)
!4258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !1618, line: 4652, size: 448, elements: !4259)
!4259 = !{!4260, !4267, !4268, !4269, !4270, !4271, !4272, !4273}
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !4258, file: !1618, line: 4655, baseType: !4261, size: 192)
!4261 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !1618, line: 265, baseType: !4262)
!4262 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1618, line: 254, size: 192, elements: !4263)
!4263 = !{!4264, !4265, !4266}
!4264 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4262, file: !1618, line: 257, baseType: !2912, size: 64)
!4265 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4262, file: !1618, line: 263, baseType: !2907, size: 64, offset: 64)
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4262, file: !1618, line: 264, baseType: !3473, size: 64, offset: 128)
!4267 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !4258, file: !1618, line: 4659, baseType: !2870, size: 64, offset: 192)
!4268 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !4258, file: !1618, line: 4664, baseType: !4243, size: 64, offset: 256)
!4269 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !4258, file: !1618, line: 4678, baseType: !2706, size: 8, offset: 320)
!4270 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !4258, file: !1618, line: 4681, baseType: !2706, size: 8, offset: 328)
!4271 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !4258, file: !1618, line: 4685, baseType: !2706, size: 8, offset: 336)
!4272 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !4258, file: !1618, line: 4688, baseType: !2706, size: 8, offset: 344)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !4258, file: !1618, line: 4694, baseType: !2586, size: 64, offset: 384)
!4274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4275, size: 64)
!4275 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !4276)
!4276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !4277)
!4277 = !{!4278}
!4278 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4276, file: !135, line: 184, baseType: !3443, size: 128)
!4279 = !{!4280, !4290, !4292, !4294, !0}
!4280 = !DIGlobalVariableExpression(var: !4281, expr: !DIExpression())
!4281 = distinct !DIGlobalVariable(name: "eni_inlining_weights", scope: !2, file: !3, line: 107, type: !4282, isLocal: false, isDefinition: true)
!4282 = !DIDerivedType(tag: DW_TAG_typedef, name: "eni_weights", file: !591, line: 151, baseType: !4283)
!4283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eni_weights_d", file: !591, line: 133, size: 160, elements: !4284)
!4284 = !{!4285, !4286, !4287, !4288, !4289}
!4285 = !DIDerivedType(tag: DW_TAG_member, name: "call_cost", scope: !4283, file: !591, line: 136, baseType: !7, size: 32)
!4286 = !DIDerivedType(tag: DW_TAG_member, name: "target_builtin_call_cost", scope: !4283, file: !591, line: 139, baseType: !7, size: 32, offset: 32)
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "div_mod_cost", scope: !4283, file: !591, line: 142, baseType: !7, size: 32, offset: 64)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "omp_cost", scope: !4283, file: !591, line: 145, baseType: !7, size: 32, offset: 96)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "time_based", scope: !4283, file: !591, line: 150, baseType: !2706, size: 8, offset: 128)
!4290 = !DIGlobalVariableExpression(var: !4291, expr: !DIExpression())
!4291 = distinct !DIGlobalVariable(name: "eni_size_weights", scope: !2, file: !3, line: 112, type: !4282, isLocal: false, isDefinition: true)
!4292 = !DIGlobalVariableExpression(var: !4293, expr: !DIExpression())
!4293 = distinct !DIGlobalVariable(name: "eni_time_weights", scope: !2, file: !3, line: 117, type: !4282, isLocal: false, isDefinition: true)
!4294 = !DIGlobalVariableExpression(var: !4295, expr: !DIExpression())
!4295 = distinct !DIGlobalVariable(name: "inline_forbidden_reason", scope: !2, file: !3, line: 2781, type: !2790, isLocal: true, isDefinition: true)
!4296 = !{i32 7, !"Dwarf Version", i32 4}
!4297 = !{i32 2, !"Debug Info Version", i32 3}
!4298 = !{i32 1, !"wchar_size", i32 4}
!4299 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4300 = distinct !DISubprogram(name: "insert_decl_map", scope: !3, file: !3, line: 140, type: !4301, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4301 = !DISubroutineType(types: !4302)
!4302 = !{null, !3983, !2586, !2586}
!4303 = !{}
!4304 = !DILocalVariable(name: "id", arg: 1, scope: !4300, file: !3, line: 140, type: !3983)
!4305 = !DILocation(line: 140, column: 34, scope: !4300)
!4306 = !DILocalVariable(name: "key", arg: 2, scope: !4300, file: !3, line: 140, type: !2586)
!4307 = !DILocation(line: 140, column: 43, scope: !4300)
!4308 = !DILocalVariable(name: "value", arg: 3, scope: !4300, file: !3, line: 140, type: !2586)
!4309 = !DILocation(line: 140, column: 53, scope: !4300)
!4310 = !DILocation(line: 142, column: 45, scope: !4300)
!4311 = !DILocation(line: 142, column: 24, scope: !4300)
!4312 = !DILocation(line: 142, column: 28, scope: !4300)
!4313 = !DILocation(line: 142, column: 38, scope: !4300)
!4314 = !DILocation(line: 142, column: 4, scope: !4300)
!4315 = !DILocation(line: 142, column: 43, scope: !4300)
!4316 = !DILocation(line: 146, column: 7, scope: !4317)
!4317 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 146, column: 7)
!4318 = !DILocation(line: 146, column: 14, scope: !4317)
!4319 = !DILocation(line: 146, column: 11, scope: !4317)
!4320 = !DILocation(line: 146, column: 7, scope: !4300)
!4321 = !DILocation(line: 147, column: 49, scope: !4317)
!4322 = !DILocation(line: 147, column: 26, scope: !4317)
!4323 = !DILocation(line: 147, column: 30, scope: !4317)
!4324 = !DILocation(line: 147, column: 40, scope: !4317)
!4325 = !DILocation(line: 147, column: 6, scope: !4317)
!4326 = !DILocation(line: 147, column: 47, scope: !4317)
!4327 = !DILocation(line: 147, column: 5, scope: !4317)
!4328 = !DILocation(line: 148, column: 1, scope: !4300)
!4329 = distinct !DISubprogram(name: "remap_decl", scope: !3, file: !3, line: 262, type: !4330, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4330 = !DISubroutineType(types: !4331)
!4331 = !{!2586, !2586, !3983}
!4332 = !DILocalVariable(name: "decl", arg: 1, scope: !4329, file: !3, line: 262, type: !2586)
!4333 = !DILocation(line: 262, column: 18, scope: !4329)
!4334 = !DILocalVariable(name: "id", arg: 2, scope: !4329, file: !3, line: 262, type: !3983)
!4335 = !DILocation(line: 262, column: 40, scope: !4329)
!4336 = !DILocalVariable(name: "n", scope: !4329, file: !3, line: 264, type: !2585)
!4337 = !DILocation(line: 264, column: 9, scope: !4329)
!4338 = !DILocation(line: 270, column: 38, scope: !4329)
!4339 = !DILocation(line: 270, column: 42, scope: !4329)
!4340 = !DILocation(line: 270, column: 52, scope: !4329)
!4341 = !DILocation(line: 270, column: 16, scope: !4329)
!4342 = !DILocation(line: 270, column: 7, scope: !4329)
!4343 = !DILocation(line: 270, column: 5, scope: !4329)
!4344 = !DILocation(line: 272, column: 8, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4329, file: !3, line: 272, column: 7)
!4346 = !DILocation(line: 272, column: 10, scope: !4345)
!4347 = !DILocation(line: 272, column: 13, scope: !4345)
!4348 = !DILocation(line: 272, column: 7, scope: !4329)
!4349 = !DILocation(line: 274, column: 29, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 273, column: 5)
!4351 = !DILocation(line: 275, column: 14, scope: !4350)
!4352 = !DILocation(line: 275, column: 7, scope: !4350)
!4353 = !DILocation(line: 280, column: 8, scope: !4354)
!4354 = distinct !DILexicalBlock(scope: !4329, file: !3, line: 280, column: 7)
!4355 = !DILocation(line: 280, column: 7, scope: !4329)
!4356 = !DILocalVariable(name: "t", scope: !4357, file: !3, line: 283, type: !2586)
!4357 = distinct !DILexicalBlock(scope: !4354, file: !3, line: 281, column: 5)
!4358 = !DILocation(line: 283, column: 12, scope: !4357)
!4359 = !DILocation(line: 283, column: 16, scope: !4357)
!4360 = !DILocation(line: 283, column: 20, scope: !4357)
!4361 = !DILocation(line: 283, column: 31, scope: !4357)
!4362 = !DILocation(line: 283, column: 37, scope: !4357)
!4363 = !DILocation(line: 288, column: 24, scope: !4357)
!4364 = !DILocation(line: 288, column: 28, scope: !4357)
!4365 = !DILocation(line: 288, column: 34, scope: !4357)
!4366 = !DILocation(line: 288, column: 7, scope: !4357)
!4367 = !DILocation(line: 290, column: 12, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 290, column: 11)
!4369 = !DILocation(line: 290, column: 11, scope: !4357)
!4370 = !DILocation(line: 291, column: 9, scope: !4368)
!4371 = !DILocation(line: 291, column: 2, scope: !4368)
!4372 = !DILocation(line: 294, column: 35, scope: !4357)
!4373 = !DILocation(line: 294, column: 50, scope: !4357)
!4374 = !DILocation(line: 294, column: 23, scope: !4357)
!4375 = !DILocation(line: 294, column: 7, scope: !4357)
!4376 = !DILocation(line: 294, column: 21, scope: !4357)
!4377 = !DILocation(line: 295, column: 11, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 295, column: 11)
!4379 = !DILocation(line: 295, column: 25, scope: !4378)
!4380 = !DILocation(line: 295, column: 11, scope: !4357)
!4381 = !DILocation(line: 296, column: 46, scope: !4378)
!4382 = !DILocation(line: 296, column: 70, scope: !4378)
!4383 = !DILocation(line: 296, column: 34, scope: !4378)
!4384 = !DILocation(line: 296, column: 9, scope: !4378)
!4385 = !DILocation(line: 296, column: 32, scope: !4378)
!4386 = !DILocation(line: 299, column: 7, scope: !4357)
!4387 = !DILocation(line: 300, column: 7, scope: !4357)
!4388 = !DILocation(line: 303, column: 11, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 303, column: 11)
!4390 = !DILocation(line: 303, column: 25, scope: !4389)
!4391 = !DILocation(line: 303, column: 11, scope: !4357)
!4392 = !DILocation(line: 305, column: 4, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 304, column: 2)
!4394 = !DILocation(line: 306, column: 8, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 306, column: 8)
!4396 = !DILocation(line: 306, column: 37, scope: !4395)
!4397 = !DILocation(line: 306, column: 8, scope: !4393)
!4398 = !DILocation(line: 307, column: 6, scope: !4395)
!4399 = !DILocation(line: 308, column: 2, scope: !4393)
!4400 = !DILocation(line: 310, column: 11, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 310, column: 11)
!4402 = !DILocation(line: 310, column: 16, scope: !4401)
!4403 = !DILocation(line: 310, column: 36, scope: !4401)
!4404 = !DILocation(line: 310, column: 19, scope: !4401)
!4405 = !DILocation(line: 311, column: 4, scope: !4401)
!4406 = !DILocation(line: 311, column: 8, scope: !4401)
!4407 = !DILocation(line: 311, column: 22, scope: !4401)
!4408 = !DILocation(line: 312, column: 8, scope: !4401)
!4409 = !DILocation(line: 312, column: 11, scope: !4401)
!4410 = !DILocation(line: 312, column: 25, scope: !4401)
!4411 = !DILocation(line: 312, column: 40, scope: !4401)
!4412 = !DILocation(line: 312, column: 43, scope: !4401)
!4413 = !DILocation(line: 312, column: 57, scope: !4401)
!4414 = !DILocation(line: 310, column: 11, scope: !4357)
!4415 = !DILocation(line: 314, column: 17, scope: !4416)
!4416 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 313, column: 2)
!4417 = !DILocation(line: 314, column: 4, scope: !4416)
!4418 = !DILocation(line: 315, column: 24, scope: !4416)
!4419 = !DILocation(line: 315, column: 4, scope: !4416)
!4420 = !DILocation(line: 316, column: 2, scope: !4416)
!4421 = !DILocation(line: 317, column: 14, scope: !4357)
!4422 = !DILocation(line: 317, column: 7, scope: !4357)
!4423 = !DILocation(line: 320, column: 7, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4329, file: !3, line: 320, column: 7)
!4425 = !DILocation(line: 320, column: 11, scope: !4424)
!4426 = !DILocation(line: 320, column: 7, scope: !4329)
!4427 = !DILocation(line: 321, column: 13, scope: !4424)
!4428 = !DILocation(line: 321, column: 12, scope: !4424)
!4429 = !DILocation(line: 321, column: 5, scope: !4424)
!4430 = !DILocation(line: 323, column: 27, scope: !4424)
!4431 = !DILocation(line: 323, column: 26, scope: !4424)
!4432 = !DILocation(line: 323, column: 12, scope: !4424)
!4433 = !DILocation(line: 323, column: 5, scope: !4424)
!4434 = !DILocation(line: 324, column: 1, scope: !4329)
!4435 = distinct !DISubprogram(name: "remap_type", scope: !3, file: !3, line: 442, type: !4330, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4436 = !DILocalVariable(name: "type", arg: 1, scope: !4435, file: !3, line: 442, type: !2586)
!4437 = !DILocation(line: 442, column: 18, scope: !4435)
!4438 = !DILocalVariable(name: "id", arg: 2, scope: !4435, file: !3, line: 442, type: !3983)
!4439 = !DILocation(line: 442, column: 40, scope: !4435)
!4440 = !DILocalVariable(name: "node", scope: !4435, file: !3, line: 444, type: !2585)
!4441 = !DILocation(line: 444, column: 9, scope: !4435)
!4442 = !DILocalVariable(name: "tmp", scope: !4435, file: !3, line: 445, type: !2586)
!4443 = !DILocation(line: 445, column: 8, scope: !4435)
!4444 = !DILocation(line: 447, column: 7, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 447, column: 7)
!4446 = !DILocation(line: 447, column: 12, scope: !4445)
!4447 = !DILocation(line: 447, column: 7, scope: !4435)
!4448 = !DILocation(line: 448, column: 12, scope: !4445)
!4449 = !DILocation(line: 448, column: 5, scope: !4445)
!4450 = !DILocation(line: 451, column: 41, scope: !4435)
!4451 = !DILocation(line: 451, column: 45, scope: !4435)
!4452 = !DILocation(line: 451, column: 55, scope: !4435)
!4453 = !DILocation(line: 451, column: 19, scope: !4435)
!4454 = !DILocation(line: 451, column: 10, scope: !4435)
!4455 = !DILocation(line: 451, column: 8, scope: !4435)
!4456 = !DILocation(line: 452, column: 7, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 452, column: 7)
!4458 = !DILocation(line: 452, column: 7, scope: !4435)
!4459 = !DILocation(line: 453, column: 13, scope: !4457)
!4460 = !DILocation(line: 453, column: 12, scope: !4457)
!4461 = !DILocation(line: 453, column: 5, scope: !4457)
!4462 = !DILocation(line: 456, column: 35, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 456, column: 7)
!4464 = !DILocation(line: 456, column: 41, scope: !4463)
!4465 = !DILocation(line: 456, column: 45, scope: !4463)
!4466 = !DILocation(line: 456, column: 9, scope: !4463)
!4467 = !DILocation(line: 456, column: 7, scope: !4435)
!4468 = !DILocation(line: 458, column: 24, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 457, column: 5)
!4470 = !DILocation(line: 458, column: 28, scope: !4469)
!4471 = !DILocation(line: 458, column: 34, scope: !4469)
!4472 = !DILocation(line: 458, column: 7, scope: !4469)
!4473 = !DILocation(line: 459, column: 14, scope: !4469)
!4474 = !DILocation(line: 459, column: 7, scope: !4469)
!4475 = !DILocation(line: 462, column: 3, scope: !4435)
!4476 = !DILocation(line: 462, column: 7, scope: !4435)
!4477 = !DILocation(line: 462, column: 27, scope: !4435)
!4478 = !DILocation(line: 463, column: 23, scope: !4435)
!4479 = !DILocation(line: 463, column: 29, scope: !4435)
!4480 = !DILocation(line: 463, column: 9, scope: !4435)
!4481 = !DILocation(line: 463, column: 7, scope: !4435)
!4482 = !DILocation(line: 464, column: 3, scope: !4435)
!4483 = !DILocation(line: 464, column: 7, scope: !4435)
!4484 = !DILocation(line: 464, column: 27, scope: !4435)
!4485 = !DILocation(line: 466, column: 10, scope: !4435)
!4486 = !DILocation(line: 466, column: 3, scope: !4435)
!4487 = !DILocation(line: 467, column: 1, scope: !4435)
!4488 = distinct !DISubprogram(name: "copy_tree_body_r", scope: !3, file: !3, line: 905, type: !4489, scopeLine: 906, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4489 = !DISubroutineType(types: !4490)
!4490 = !{!2586, !2585, !4491, !2870}
!4491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2683, size: 64)
!4492 = !DILocalVariable(name: "tp", arg: 1, scope: !4488, file: !3, line: 905, type: !2585)
!4493 = !DILocation(line: 905, column: 25, scope: !4488)
!4494 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !4488, file: !3, line: 905, type: !4491)
!4495 = !DILocation(line: 905, column: 34, scope: !4488)
!4496 = !DILocalVariable(name: "data", arg: 3, scope: !4488, file: !3, line: 905, type: !2870)
!4497 = !DILocation(line: 905, column: 55, scope: !4488)
!4498 = !DILocalVariable(name: "id", scope: !4488, file: !3, line: 907, type: !3983)
!4499 = !DILocation(line: 907, column: 19, scope: !4488)
!4500 = !DILocation(line: 907, column: 43, scope: !4488)
!4501 = !DILocation(line: 907, column: 24, scope: !4488)
!4502 = !DILocalVariable(name: "fn", scope: !4488, file: !3, line: 908, type: !2586)
!4503 = !DILocation(line: 908, column: 8, scope: !4488)
!4504 = !DILocation(line: 908, column: 13, scope: !4488)
!4505 = !DILocation(line: 908, column: 17, scope: !4488)
!4506 = !DILocalVariable(name: "new_block", scope: !4488, file: !3, line: 909, type: !2586)
!4507 = !DILocation(line: 909, column: 8, scope: !4488)
!4508 = !DILocation(line: 920, column: 7, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 920, column: 7)
!4510 = !DILocation(line: 920, column: 23, scope: !4509)
!4511 = !DILocation(line: 920, column: 38, scope: !4509)
!4512 = !DILocation(line: 920, column: 41, scope: !4509)
!4513 = !DILocation(line: 920, column: 45, scope: !4509)
!4514 = !DILocation(line: 920, column: 7, scope: !4488)
!4515 = !DILocalVariable(name: "assignment", scope: !4516, file: !3, line: 922, type: !2586)
!4516 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 921, column: 5)
!4517 = !DILocation(line: 922, column: 12, scope: !4516)
!4518 = !DILocation(line: 922, column: 25, scope: !4516)
!4519 = !DILocation(line: 929, column: 11, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4516, file: !3, line: 929, column: 11)
!4521 = !DILocation(line: 929, column: 22, scope: !4520)
!4522 = !DILocation(line: 929, column: 25, scope: !4520)
!4523 = !DILocation(line: 929, column: 48, scope: !4520)
!4524 = !DILocation(line: 929, column: 11, scope: !4516)
!4525 = !DILocation(line: 933, column: 10, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 930, column: 2)
!4527 = !DILocation(line: 933, column: 5, scope: !4526)
!4528 = !DILocation(line: 933, column: 8, scope: !4526)
!4529 = !DILocation(line: 934, column: 2, scope: !4526)
!4530 = !DILocation(line: 937, column: 5, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 936, column: 2)
!4532 = !DILocation(line: 937, column: 8, scope: !4531)
!4533 = !DILocation(line: 938, column: 4, scope: !4531)
!4534 = !DILocation(line: 940, column: 5, scope: !4516)
!4535 = !DILocation(line: 941, column: 12, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 941, column: 12)
!4537 = !DILocation(line: 941, column: 28, scope: !4536)
!4538 = !DILocation(line: 941, column: 12, scope: !4509)
!4539 = !DILocation(line: 943, column: 30, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 942, column: 5)
!4541 = !DILocation(line: 943, column: 29, scope: !4540)
!4542 = !DILocation(line: 943, column: 34, scope: !4540)
!4543 = !DILocation(line: 943, column: 13, scope: !4540)
!4544 = !DILocation(line: 943, column: 8, scope: !4540)
!4545 = !DILocation(line: 943, column: 11, scope: !4540)
!4546 = !DILocation(line: 944, column: 8, scope: !4540)
!4547 = !DILocation(line: 944, column: 22, scope: !4540)
!4548 = !DILocation(line: 945, column: 7, scope: !4540)
!4549 = !DILocation(line: 952, column: 31, scope: !4550)
!4550 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 952, column: 12)
!4551 = !DILocation(line: 952, column: 30, scope: !4550)
!4552 = !DILocation(line: 952, column: 35, scope: !4550)
!4553 = !DILocation(line: 952, column: 12, scope: !4550)
!4554 = !DILocation(line: 952, column: 12, scope: !4536)
!4555 = !DILocalVariable(name: "new_decl", scope: !4556, file: !3, line: 954, type: !2586)
!4556 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 953, column: 5)
!4557 = !DILocation(line: 954, column: 12, scope: !4556)
!4558 = !DILocation(line: 957, column: 31, scope: !4556)
!4559 = !DILocation(line: 957, column: 30, scope: !4556)
!4560 = !DILocation(line: 957, column: 35, scope: !4556)
!4561 = !DILocation(line: 957, column: 18, scope: !4556)
!4562 = !DILocation(line: 957, column: 16, scope: !4556)
!4563 = !DILocation(line: 958, column: 7, scope: !4556)
!4564 = !DILocation(line: 960, column: 7, scope: !4556)
!4565 = !DILocation(line: 0, scope: !4556)
!4566 = distinct !{!4566, !4564, !4564}
!4567 = !DILocation(line: 961, column: 13, scope: !4556)
!4568 = !DILocation(line: 961, column: 8, scope: !4556)
!4569 = !DILocation(line: 961, column: 11, scope: !4556)
!4570 = !DILocation(line: 962, column: 8, scope: !4556)
!4571 = !DILocation(line: 962, column: 22, scope: !4556)
!4572 = !DILocation(line: 963, column: 5, scope: !4556)
!4573 = !DILocation(line: 964, column: 12, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 964, column: 12)
!4575 = !DILocation(line: 964, column: 28, scope: !4574)
!4576 = !DILocation(line: 964, column: 12, scope: !4550)
!4577 = !DILocation(line: 965, column: 26, scope: !4574)
!4578 = !DILocation(line: 965, column: 5, scope: !4574)
!4579 = !DILocation(line: 966, column: 12, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4574, file: !3, line: 966, column: 12)
!4581 = !DILocation(line: 966, column: 28, scope: !4580)
!4582 = !DILocation(line: 967, column: 5, scope: !4580)
!4583 = !DILocation(line: 967, column: 8, scope: !4580)
!4584 = !DILocation(line: 967, column: 24, scope: !4580)
!4585 = !DILocation(line: 966, column: 12, scope: !4574)
!4586 = !DILocation(line: 968, column: 22, scope: !4580)
!4587 = !DILocation(line: 968, column: 26, scope: !4580)
!4588 = !DILocation(line: 968, column: 30, scope: !4580)
!4589 = !DILocation(line: 968, column: 40, scope: !4580)
!4590 = !DILocation(line: 968, column: 5, scope: !4580)
!4591 = !DILocation(line: 969, column: 12, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 969, column: 12)
!4593 = !DILocation(line: 969, column: 28, scope: !4592)
!4594 = !DILocation(line: 970, column: 5, scope: !4592)
!4595 = !DILocation(line: 970, column: 11, scope: !4592)
!4596 = !DILocation(line: 971, column: 9, scope: !4592)
!4597 = !DILocation(line: 971, column: 36, scope: !4592)
!4598 = !DILocation(line: 971, column: 35, scope: !4592)
!4599 = !DILocation(line: 971, column: 12, scope: !4592)
!4600 = !DILocation(line: 971, column: 43, scope: !4592)
!4601 = !DILocation(line: 971, column: 47, scope: !4592)
!4602 = !DILocation(line: 971, column: 40, scope: !4592)
!4603 = !DILocation(line: 969, column: 12, scope: !4580)
!4604 = !DILocation(line: 973, column: 24, scope: !4592)
!4605 = !DILocation(line: 973, column: 23, scope: !4592)
!4606 = !DILocation(line: 973, column: 28, scope: !4592)
!4607 = !DILocation(line: 973, column: 11, scope: !4592)
!4608 = !DILocation(line: 973, column: 6, scope: !4592)
!4609 = !DILocation(line: 973, column: 9, scope: !4592)
!4610 = !DILocation(line: 973, column: 5, scope: !4592)
!4611 = !DILocation(line: 974, column: 12, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 974, column: 12)
!4613 = !DILocation(line: 974, column: 28, scope: !4612)
!4614 = !DILocation(line: 974, column: 12, scope: !4592)
!4615 = !DILocation(line: 975, column: 21, scope: !4612)
!4616 = !DILocation(line: 975, column: 25, scope: !4612)
!4617 = !DILocation(line: 975, column: 40, scope: !4612)
!4618 = !DILocation(line: 975, column: 5, scope: !4612)
!4619 = !DILocation(line: 977, column: 12, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 977, column: 12)
!4621 = !DILocation(line: 977, column: 12, scope: !4612)
!4622 = !DILocation(line: 978, column: 24, scope: !4620)
!4623 = !DILocation(line: 978, column: 23, scope: !4620)
!4624 = !DILocation(line: 978, column: 28, scope: !4620)
!4625 = !DILocation(line: 978, column: 11, scope: !4620)
!4626 = !DILocation(line: 978, column: 6, scope: !4620)
!4627 = !DILocation(line: 978, column: 9, scope: !4620)
!4628 = !DILocation(line: 978, column: 5, scope: !4620)
!4629 = !DILocation(line: 982, column: 12, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 982, column: 12)
!4631 = !DILocation(line: 982, column: 12, scope: !4620)
!4632 = !DILocalVariable(name: "new_type", scope: !4633, file: !3, line: 984, type: !2586)
!4633 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 983, column: 5)
!4634 = !DILocation(line: 984, column: 12, scope: !4633)
!4635 = !DILocation(line: 984, column: 35, scope: !4633)
!4636 = !DILocation(line: 984, column: 52, scope: !4633)
!4637 = !DILocation(line: 984, column: 23, scope: !4633)
!4638 = !DILocation(line: 986, column: 11, scope: !4639)
!4639 = distinct !DILexicalBlock(scope: !4633, file: !3, line: 986, column: 11)
!4640 = !DILocation(line: 986, column: 23, scope: !4639)
!4641 = !DILocation(line: 986, column: 20, scope: !4639)
!4642 = !DILocation(line: 986, column: 11, scope: !4633)
!4643 = !DILocation(line: 987, column: 3, scope: !4639)
!4644 = !DILocation(line: 987, column: 17, scope: !4639)
!4645 = !DILocation(line: 987, column: 2, scope: !4639)
!4646 = !DILocation(line: 989, column: 16, scope: !4647)
!4647 = distinct !DILexicalBlock(scope: !4639, file: !3, line: 989, column: 16)
!4648 = !DILocation(line: 989, column: 32, scope: !4647)
!4649 = !DILocation(line: 989, column: 16, scope: !4639)
!4650 = !DILocation(line: 990, column: 28, scope: !4647)
!4651 = !DILocation(line: 990, column: 38, scope: !4647)
!4652 = !DILocation(line: 991, column: 7, scope: !4647)
!4653 = !DILocation(line: 990, column: 8, scope: !4647)
!4654 = !DILocation(line: 990, column: 3, scope: !4647)
!4655 = !DILocation(line: 990, column: 6, scope: !4647)
!4656 = !DILocation(line: 990, column: 2, scope: !4647)
!4657 = !DILocation(line: 994, column: 10, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4647, file: !3, line: 993, column: 2)
!4659 = !DILocation(line: 994, column: 5, scope: !4658)
!4660 = !DILocation(line: 994, column: 8, scope: !4658)
!4661 = !DILocation(line: 995, column: 22, scope: !4658)
!4662 = !DILocation(line: 995, column: 4, scope: !4658)
!4663 = !DILocation(line: 995, column: 20, scope: !4658)
!4664 = !DILocation(line: 997, column: 5, scope: !4633)
!4665 = !DILocation(line: 1006, column: 11, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1006, column: 11)
!4667 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1002, column: 5)
!4668 = !DILocation(line: 1006, column: 27, scope: !4666)
!4669 = !DILocation(line: 1007, column: 4, scope: !4666)
!4670 = !DILocation(line: 1007, column: 7, scope: !4666)
!4671 = !DILocation(line: 1007, column: 32, scope: !4666)
!4672 = !DILocation(line: 1007, column: 29, scope: !4666)
!4673 = !DILocation(line: 1008, column: 4, scope: !4666)
!4674 = !DILocation(line: 1008, column: 26, scope: !4666)
!4675 = !DILocation(line: 1008, column: 49, scope: !4666)
!4676 = !DILocation(line: 1008, column: 8, scope: !4666)
!4677 = !DILocation(line: 1008, column: 7, scope: !4666)
!4678 = !DILocation(line: 1006, column: 11, scope: !4667)
!4679 = !DILocalVariable(name: "decl", scope: !4680, file: !3, line: 1013, type: !2586)
!4680 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 1009, column: 2)
!4681 = !DILocation(line: 1013, column: 9, scope: !4680)
!4682 = !DILocation(line: 1013, column: 16, scope: !4680)
!4683 = !DILocalVariable(name: "value", scope: !4680, file: !3, line: 1013, type: !2586)
!4684 = !DILocation(line: 1013, column: 39, scope: !4680)
!4685 = !DILocalVariable(name: "n", scope: !4680, file: !3, line: 1014, type: !2585)
!4686 = !DILocation(line: 1014, column: 10, scope: !4680)
!4687 = !DILocation(line: 1016, column: 39, scope: !4680)
!4688 = !DILocation(line: 1016, column: 43, scope: !4680)
!4689 = !DILocation(line: 1016, column: 53, scope: !4680)
!4690 = !DILocation(line: 1016, column: 17, scope: !4680)
!4691 = !DILocation(line: 1016, column: 8, scope: !4680)
!4692 = !DILocation(line: 1016, column: 6, scope: !4680)
!4693 = !DILocation(line: 1017, column: 8, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 1017, column: 8)
!4695 = !DILocation(line: 1017, column: 8, scope: !4680)
!4696 = !DILocation(line: 1019, column: 17, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 1018, column: 6)
!4698 = !DILocation(line: 1019, column: 16, scope: !4697)
!4699 = !DILocation(line: 1019, column: 14, scope: !4697)
!4700 = !DILocation(line: 1020, column: 8, scope: !4697)
!4701 = !DILocation(line: 0, scope: !4697)
!4702 = distinct !{!4702, !4700, !4700}
!4703 = !DILocation(line: 1021, column: 12, scope: !4704)
!4704 = distinct !DILexicalBlock(scope: !4697, file: !3, line: 1021, column: 12)
!4705 = !DILocation(line: 1021, column: 34, scope: !4704)
!4706 = !DILocation(line: 1021, column: 37, scope: !4704)
!4707 = !DILocation(line: 1021, column: 12, scope: !4697)
!4708 = !DILocation(line: 1023, column: 29, scope: !4709)
!4709 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 1022, column: 3)
!4710 = !DILocation(line: 1023, column: 11, scope: !4709)
!4711 = !DILocation(line: 1023, column: 6, scope: !4709)
!4712 = !DILocation(line: 1023, column: 9, scope: !4709)
!4713 = !DILocation(line: 1024, column: 30, scope: !4709)
!4714 = !DILocation(line: 1024, column: 34, scope: !4709)
!4715 = !DILocation(line: 1024, column: 49, scope: !4709)
!4716 = !DILocation(line: 1024, column: 12, scope: !4709)
!4717 = !DILocation(line: 1024, column: 5, scope: !4709)
!4718 = !DILocation(line: 1026, column: 6, scope: !4697)
!4719 = !DILocation(line: 1027, column: 2, scope: !4680)
!4720 = !DILocation(line: 1028, column: 16, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 1028, column: 16)
!4722 = !DILocation(line: 1028, column: 32, scope: !4721)
!4723 = !DILocation(line: 1028, column: 16, scope: !4666)
!4724 = !DILocalVariable(name: "decl", scope: !4725, file: !3, line: 1032, type: !2586)
!4725 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 1029, column: 2)
!4726 = !DILocation(line: 1032, column: 9, scope: !4725)
!4727 = !DILocation(line: 1032, column: 16, scope: !4725)
!4728 = !DILocalVariable(name: "n", scope: !4725, file: !3, line: 1033, type: !2585)
!4729 = !DILocation(line: 1033, column: 10, scope: !4725)
!4730 = !DILocation(line: 1035, column: 39, scope: !4725)
!4731 = !DILocation(line: 1035, column: 43, scope: !4725)
!4732 = !DILocation(line: 1035, column: 53, scope: !4725)
!4733 = !DILocation(line: 1035, column: 17, scope: !4725)
!4734 = !DILocation(line: 1035, column: 8, scope: !4725)
!4735 = !DILocation(line: 1035, column: 6, scope: !4725)
!4736 = !DILocation(line: 1036, column: 8, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 1036, column: 8)
!4738 = !DILocation(line: 1036, column: 8, scope: !4725)
!4739 = !DILocalVariable(name: "new_tree", scope: !4740, file: !3, line: 1038, type: !2586)
!4740 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1037, column: 6)
!4741 = !DILocation(line: 1038, column: 13, scope: !4740)
!4742 = !DILocalVariable(name: "old", scope: !4740, file: !3, line: 1039, type: !2586)
!4743 = !DILocation(line: 1039, column: 13, scope: !4740)
!4744 = !DILocalVariable(name: "type", scope: !4740, file: !3, line: 1046, type: !2586)
!4745 = !DILocation(line: 1046, column: 13, scope: !4740)
!4746 = !DILocation(line: 1046, column: 20, scope: !4740)
!4747 = !DILocation(line: 1047, column: 12, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 1047, column: 12)
!4749 = !DILocation(line: 1047, column: 16, scope: !4748)
!4750 = !DILocation(line: 1047, column: 12, scope: !4740)
!4751 = !DILocation(line: 1048, column: 15, scope: !4748)
!4752 = !DILocation(line: 1048, column: 14, scope: !4748)
!4753 = !DILocation(line: 1048, column: 12, scope: !4748)
!4754 = !DILocation(line: 1048, column: 3, scope: !4748)
!4755 = !DILocation(line: 1050, column: 29, scope: !4748)
!4756 = !DILocation(line: 1050, column: 28, scope: !4748)
!4757 = !DILocation(line: 1050, column: 14, scope: !4748)
!4758 = !DILocation(line: 1050, column: 12, scope: !4748)
!4759 = !DILocation(line: 1051, column: 15, scope: !4740)
!4760 = !DILocation(line: 1051, column: 14, scope: !4740)
!4761 = !DILocation(line: 1051, column: 12, scope: !4740)
!4762 = !DILocation(line: 1052, column: 40, scope: !4740)
!4763 = !DILocation(line: 1052, column: 14, scope: !4740)
!4764 = !DILocation(line: 1052, column: 9, scope: !4740)
!4765 = !DILocation(line: 1052, column: 12, scope: !4740)
!4766 = !DILocation(line: 1053, column: 15, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 1053, column: 12)
!4768 = !DILocation(line: 1053, column: 14, scope: !4767)
!4769 = !DILocation(line: 1053, column: 12, scope: !4740)
!4770 = !DILocation(line: 1055, column: 9, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 1055, column: 9)
!4772 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 1054, column: 10)
!4773 = !DILocation(line: 1055, column: 30, scope: !4771)
!4774 = !DILocation(line: 1055, column: 9, scope: !4772)
!4775 = !DILocation(line: 1057, column: 36, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 1056, column: 7)
!4777 = !DILocation(line: 1058, column: 8, scope: !4776)
!4778 = !DILocation(line: 1058, column: 14, scope: !4776)
!4779 = !DILocation(line: 1057, column: 15, scope: !4776)
!4780 = !DILocation(line: 1057, column: 10, scope: !4776)
!4781 = !DILocation(line: 1057, column: 13, scope: !4776)
!4782 = !DILocation(line: 1062, column: 16, scope: !4783)
!4783 = distinct !DILexicalBlock(scope: !4776, file: !3, line: 1062, column: 13)
!4784 = !DILocation(line: 1062, column: 15, scope: !4783)
!4785 = !DILocation(line: 1062, column: 13, scope: !4776)
!4786 = !DILocation(line: 1063, column: 10, scope: !4783)
!4787 = !DILocation(line: 1063, column: 5, scope: !4783)
!4788 = !DILocation(line: 1063, column: 8, scope: !4783)
!4789 = !DILocation(line: 1063, column: 4, scope: !4783)
!4790 = !DILocation(line: 1064, column: 7, scope: !4776)
!4791 = !DILocation(line: 1067, column: 22, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 1066, column: 7)
!4793 = !DILocation(line: 1067, column: 17, scope: !4792)
!4794 = !DILocation(line: 1067, column: 20, scope: !4792)
!4795 = !DILocation(line: 1068, column: 36, scope: !4792)
!4796 = !DILocation(line: 1068, column: 9, scope: !4792)
!4797 = !DILocation(line: 1068, column: 34, scope: !4792)
!4798 = !DILocation(line: 1069, column: 35, scope: !4792)
!4799 = !DILocation(line: 1069, column: 9, scope: !4792)
!4800 = !DILocation(line: 1069, column: 33, scope: !4792)
!4801 = !DILocation(line: 1071, column: 3, scope: !4772)
!4802 = !DILocation(line: 1072, column: 9, scope: !4740)
!4803 = !DILocation(line: 1072, column: 23, scope: !4740)
!4804 = !DILocation(line: 1073, column: 8, scope: !4740)
!4805 = !DILocation(line: 1075, column: 2, scope: !4725)
!4806 = !DILocation(line: 1079, column: 20, scope: !4667)
!4807 = !DILocation(line: 1079, column: 24, scope: !4667)
!4808 = !DILocation(line: 1079, column: 7, scope: !4667)
!4809 = !DILocation(line: 1083, column: 28, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1083, column: 11)
!4811 = !DILocation(line: 1083, column: 11, scope: !4810)
!4812 = !DILocation(line: 1084, column: 4, scope: !4810)
!4813 = !DILocation(line: 1084, column: 7, scope: !4810)
!4814 = !DILocation(line: 1084, column: 23, scope: !4810)
!4815 = !DILocation(line: 1085, column: 4, scope: !4810)
!4816 = !DILocation(line: 1085, column: 7, scope: !4810)
!4817 = !DILocation(line: 1085, column: 11, scope: !4810)
!4818 = !DILocation(line: 1085, column: 32, scope: !4810)
!4819 = !DILocation(line: 1086, column: 4, scope: !4810)
!4820 = !DILocation(line: 1086, column: 8, scope: !4810)
!4821 = !DILocation(line: 1083, column: 11, scope: !4667)
!4822 = !DILocation(line: 1087, column: 23, scope: !4810)
!4823 = !DILocation(line: 1087, column: 22, scope: !4810)
!4824 = !DILocation(line: 1087, column: 2, scope: !4810)
!4825 = !DILocation(line: 1092, column: 11, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1092, column: 11)
!4827 = !DILocation(line: 1092, column: 11, scope: !4667)
!4828 = !DILocation(line: 1094, column: 16, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4826, file: !3, line: 1093, column: 2)
!4830 = !DILocation(line: 1094, column: 20, scope: !4829)
!4831 = !DILocation(line: 1094, column: 41, scope: !4829)
!4832 = !DILocation(line: 1094, column: 48, scope: !4829)
!4833 = !DILocation(line: 1094, column: 52, scope: !4829)
!4834 = !DILocation(line: 1094, column: 14, scope: !4829)
!4835 = !DILocation(line: 1095, column: 8, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4829, file: !3, line: 1095, column: 8)
!4837 = !DILocation(line: 1095, column: 8, scope: !4829)
!4838 = !DILocalVariable(name: "n", scope: !4839, file: !3, line: 1097, type: !2585)
!4839 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 1096, column: 6)
!4840 = !DILocation(line: 1097, column: 14, scope: !4839)
!4841 = !DILocation(line: 1098, column: 43, scope: !4839)
!4842 = !DILocation(line: 1098, column: 47, scope: !4839)
!4843 = !DILocation(line: 1099, column: 8, scope: !4839)
!4844 = !DILocation(line: 1098, column: 21, scope: !4839)
!4845 = !DILocation(line: 1098, column: 12, scope: !4839)
!4846 = !DILocation(line: 1098, column: 10, scope: !4839)
!4847 = !DILocation(line: 1100, column: 8, scope: !4839)
!4848 = !DILocation(line: 1101, column: 21, scope: !4839)
!4849 = !DILocation(line: 1101, column: 20, scope: !4839)
!4850 = !DILocation(line: 1101, column: 18, scope: !4839)
!4851 = !DILocation(line: 1102, column: 6, scope: !4839)
!4852 = !DILocation(line: 1103, column: 23, scope: !4829)
!4853 = !DILocation(line: 1103, column: 4, scope: !4829)
!4854 = !DILocation(line: 1103, column: 21, scope: !4829)
!4855 = !DILocation(line: 1104, column: 2, scope: !4829)
!4856 = !DILocation(line: 1106, column: 11, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1106, column: 11)
!4858 = !DILocation(line: 1106, column: 27, scope: !4857)
!4859 = !DILocation(line: 1106, column: 11, scope: !4667)
!4860 = !DILocation(line: 1107, column: 32, scope: !4857)
!4861 = !DILocation(line: 1107, column: 49, scope: !4857)
!4862 = !DILocation(line: 1107, column: 20, scope: !4857)
!4863 = !DILocation(line: 1107, column: 2, scope: !4857)
!4864 = !DILocation(line: 1107, column: 18, scope: !4857)
!4865 = !DILocation(line: 1111, column: 11, scope: !4866)
!4866 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1111, column: 11)
!4867 = !DILocation(line: 1111, column: 27, scope: !4866)
!4868 = !DILocation(line: 1111, column: 42, scope: !4866)
!4869 = !DILocation(line: 1111, column: 45, scope: !4866)
!4870 = !DILocation(line: 1111, column: 11, scope: !4667)
!4871 = !DILocation(line: 1113, column: 28, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1112, column: 2)
!4873 = !DILocation(line: 1113, column: 4, scope: !4872)
!4874 = !DILocation(line: 1113, column: 26, scope: !4872)
!4875 = !DILocation(line: 1114, column: 4, scope: !4872)
!4876 = !DILocation(line: 1114, column: 26, scope: !4872)
!4877 = !DILocation(line: 1115, column: 2, scope: !4872)
!4878 = !DILocation(line: 1120, column: 16, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1120, column: 16)
!4880 = !DILocation(line: 1120, column: 32, scope: !4879)
!4881 = !DILocation(line: 1120, column: 16, scope: !4866)
!4882 = !DILocalVariable(name: "invariant", scope: !4883, file: !3, line: 1122, type: !2683)
!4883 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 1121, column: 2)
!4884 = !DILocation(line: 1122, column: 8, scope: !4883)
!4885 = !DILocation(line: 1122, column: 46, scope: !4883)
!4886 = !DILocation(line: 1122, column: 45, scope: !4883)
!4887 = !DILocation(line: 1122, column: 20, scope: !4883)
!4888 = !DILocation(line: 1123, column: 4, scope: !4883)
!4889 = !DILocation(line: 1127, column: 8, scope: !4890)
!4890 = distinct !DILexicalBlock(scope: !4883, file: !3, line: 1127, column: 8)
!4891 = !DILocation(line: 1127, column: 42, scope: !4890)
!4892 = !DILocation(line: 1127, column: 8, scope: !4883)
!4893 = !DILocation(line: 1128, column: 12, scope: !4890)
!4894 = !DILocation(line: 1128, column: 7, scope: !4890)
!4895 = !DILocation(line: 1128, column: 10, scope: !4890)
!4896 = !DILocation(line: 1128, column: 6, scope: !4890)
!4897 = !DILocation(line: 1130, column: 47, scope: !4890)
!4898 = !DILocation(line: 1130, column: 46, scope: !4890)
!4899 = !DILocation(line: 1130, column: 6, scope: !4890)
!4900 = !DILocation(line: 1134, column: 8, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4883, file: !3, line: 1134, column: 8)
!4902 = !DILocation(line: 1134, column: 18, scope: !4901)
!4903 = !DILocation(line: 1134, column: 48, scope: !4901)
!4904 = !DILocation(line: 1134, column: 47, scope: !4901)
!4905 = !DILocation(line: 1134, column: 22, scope: !4901)
!4906 = !DILocation(line: 1134, column: 8, scope: !4883)
!4907 = !DILocation(line: 1135, column: 6, scope: !4901)
!4908 = !DILocation(line: 1135, column: 10, scope: !4901)
!4909 = !DILocation(line: 1135, column: 21, scope: !4901)
!4910 = !DILocation(line: 1137, column: 5, scope: !4883)
!4911 = !DILocation(line: 1137, column: 19, scope: !4883)
!4912 = !DILocation(line: 1138, column: 2, scope: !4883)
!4913 = !DILocation(line: 1142, column: 3, scope: !4488)
!4914 = !DILocation(line: 1143, column: 1, scope: !4488)
!4915 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !4916, file: !4916, line: 33, type: !4917, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4916 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4917 = !DISubroutineType(types: !4918)
!4918 = !{!2706, !4919}
!4919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4920, size: 64)
!4920 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3304)
!4921 = !DILocalVariable(name: "fun", arg: 1, scope: !4915, file: !4916, line: 33, type: !4919)
!4922 = !DILocation(line: 33, column: 41, scope: !4915)
!4923 = !DILocation(line: 35, column: 10, scope: !4915)
!4924 = !DILocation(line: 35, column: 14, scope: !4915)
!4925 = !DILocation(line: 35, column: 17, scope: !4915)
!4926 = !DILocation(line: 35, column: 22, scope: !4915)
!4927 = !DILocation(line: 35, column: 32, scope: !4915)
!4928 = !DILocation(line: 35, column: 35, scope: !4915)
!4929 = !DILocation(line: 35, column: 40, scope: !4915)
!4930 = !DILocation(line: 35, column: 51, scope: !4915)
!4931 = !DILocation(line: 0, scope: !4915)
!4932 = !DILocation(line: 35, column: 3, scope: !4915)
!4933 = distinct !DISubprogram(name: "get_var_ann", scope: !4916, file: !4916, line: 141, type: !4934, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4934 = !DISubroutineType(types: !4935)
!4935 = !{!4936, !2586}
!4936 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !3255, line: 297, baseType: !3253)
!4937 = !DILocalVariable(name: "var", arg: 1, scope: !4933, file: !4916, line: 141, type: !2586)
!4938 = !DILocation(line: 141, column: 19, scope: !4933)
!4939 = !DILocalVariable(name: "p", scope: !4933, file: !4916, line: 143, type: !4940)
!4940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4936, size: 64)
!4941 = !DILocation(line: 143, column: 14, scope: !4933)
!4942 = !DILocation(line: 143, column: 18, scope: !4933)
!4943 = !DILocation(line: 144, column: 3, scope: !4933)
!4944 = !DILocation(line: 145, column: 11, scope: !4933)
!4945 = !DILocation(line: 145, column: 10, scope: !4933)
!4946 = !DILocation(line: 145, column: 16, scope: !4933)
!4947 = !DILocation(line: 145, column: 15, scope: !4933)
!4948 = !DILocation(line: 145, column: 36, scope: !4933)
!4949 = !DILocation(line: 145, column: 20, scope: !4933)
!4950 = !DILocation(line: 145, column: 3, scope: !4933)
!4951 = distinct !DISubprogram(name: "remap_type_1", scope: !3, file: !3, line: 327, type: !4330, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!4952 = !DILocalVariable(name: "type", arg: 1, scope: !4951, file: !3, line: 327, type: !2586)
!4953 = !DILocation(line: 327, column: 20, scope: !4951)
!4954 = !DILocalVariable(name: "id", arg: 2, scope: !4951, file: !3, line: 327, type: !3983)
!4955 = !DILocation(line: 327, column: 42, scope: !4951)
!4956 = !DILocalVariable(name: "new_tree", scope: !4951, file: !3, line: 329, type: !2586)
!4957 = !DILocation(line: 329, column: 8, scope: !4951)
!4958 = !DILocalVariable(name: "t", scope: !4951, file: !3, line: 329, type: !2586)
!4959 = !DILocation(line: 329, column: 18, scope: !4951)
!4960 = !DILocation(line: 334, column: 7, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 334, column: 7)
!4962 = !DILocation(line: 334, column: 24, scope: !4961)
!4963 = !DILocation(line: 334, column: 7, scope: !4951)
!4964 = !DILocation(line: 336, column: 59, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4961, file: !3, line: 335, column: 5)
!4966 = !DILocation(line: 336, column: 77, scope: !4965)
!4967 = !DILocation(line: 336, column: 47, scope: !4965)
!4968 = !DILocation(line: 337, column: 7, scope: !4965)
!4969 = !DILocation(line: 338, column: 7, scope: !4965)
!4970 = !DILocation(line: 336, column: 18, scope: !4965)
!4971 = !DILocation(line: 336, column: 16, scope: !4965)
!4972 = !DILocation(line: 339, column: 11, scope: !4973)
!4973 = distinct !DILexicalBlock(scope: !4965, file: !3, line: 339, column: 11)
!4974 = !DILocation(line: 339, column: 34, scope: !4973)
!4975 = !DILocation(line: 339, column: 37, scope: !4973)
!4976 = !DILocation(line: 339, column: 11, scope: !4965)
!4977 = !DILocation(line: 340, column: 48, scope: !4973)
!4978 = !DILocation(line: 341, column: 13, scope: !4973)
!4979 = !DILocation(line: 342, column: 13, scope: !4973)
!4980 = !DILocation(line: 340, column: 13, scope: !4973)
!4981 = !DILocation(line: 340, column: 11, scope: !4973)
!4982 = !DILocation(line: 340, column: 2, scope: !4973)
!4983 = !DILocation(line: 343, column: 24, scope: !4965)
!4984 = !DILocation(line: 343, column: 28, scope: !4965)
!4985 = !DILocation(line: 343, column: 34, scope: !4965)
!4986 = !DILocation(line: 343, column: 7, scope: !4965)
!4987 = !DILocation(line: 344, column: 14, scope: !4965)
!4988 = !DILocation(line: 344, column: 7, scope: !4965)
!4989 = !DILocation(line: 346, column: 12, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4961, file: !3, line: 346, column: 12)
!4991 = !DILocation(line: 346, column: 29, scope: !4990)
!4992 = !DILocation(line: 346, column: 12, scope: !4961)
!4993 = !DILocation(line: 348, column: 61, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 347, column: 5)
!4995 = !DILocation(line: 348, column: 79, scope: !4994)
!4996 = !DILocation(line: 348, column: 49, scope: !4994)
!4997 = !DILocation(line: 349, column: 10, scope: !4994)
!4998 = !DILocation(line: 350, column: 10, scope: !4994)
!4999 = !DILocation(line: 348, column: 18, scope: !4994)
!5000 = !DILocation(line: 348, column: 16, scope: !4994)
!5001 = !DILocation(line: 351, column: 11, scope: !5002)
!5002 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 351, column: 11)
!5003 = !DILocation(line: 351, column: 34, scope: !5002)
!5004 = !DILocation(line: 351, column: 37, scope: !5002)
!5005 = !DILocation(line: 351, column: 11, scope: !4994)
!5006 = !DILocation(line: 352, column: 48, scope: !5002)
!5007 = !DILocation(line: 353, column: 13, scope: !5002)
!5008 = !DILocation(line: 354, column: 13, scope: !5002)
!5009 = !DILocation(line: 352, column: 13, scope: !5002)
!5010 = !DILocation(line: 352, column: 11, scope: !5002)
!5011 = !DILocation(line: 352, column: 2, scope: !5002)
!5012 = !DILocation(line: 355, column: 24, scope: !4994)
!5013 = !DILocation(line: 355, column: 28, scope: !4994)
!5014 = !DILocation(line: 355, column: 34, scope: !4994)
!5015 = !DILocation(line: 355, column: 7, scope: !4994)
!5016 = !DILocation(line: 356, column: 14, scope: !4994)
!5017 = !DILocation(line: 356, column: 7, scope: !4994)
!5018 = !DILocation(line: 359, column: 16, scope: !4990)
!5019 = !DILocation(line: 359, column: 14, scope: !4990)
!5020 = !DILocation(line: 361, column: 20, scope: !4951)
!5021 = !DILocation(line: 361, column: 24, scope: !4951)
!5022 = !DILocation(line: 361, column: 30, scope: !4951)
!5023 = !DILocation(line: 361, column: 3, scope: !4951)
!5024 = !DILocation(line: 365, column: 7, scope: !4951)
!5025 = !DILocation(line: 365, column: 5, scope: !4951)
!5026 = !DILocation(line: 366, column: 7, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 366, column: 7)
!5028 = !DILocation(line: 366, column: 15, scope: !5027)
!5029 = !DILocation(line: 366, column: 12, scope: !5027)
!5030 = !DILocation(line: 366, column: 7, scope: !4951)
!5031 = !DILocation(line: 368, column: 23, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5027, file: !3, line: 367, column: 5)
!5033 = !DILocation(line: 368, column: 26, scope: !5032)
!5034 = !DILocation(line: 368, column: 11, scope: !5032)
!5035 = !DILocation(line: 368, column: 9, scope: !5032)
!5036 = !DILocation(line: 369, column: 38, scope: !5032)
!5037 = !DILocation(line: 369, column: 7, scope: !5032)
!5038 = !DILocation(line: 369, column: 36, scope: !5032)
!5039 = !DILocation(line: 370, column: 38, scope: !5032)
!5040 = !DILocation(line: 370, column: 7, scope: !5032)
!5041 = !DILocation(line: 370, column: 36, scope: !5032)
!5042 = !DILocation(line: 371, column: 31, scope: !5032)
!5043 = !DILocation(line: 371, column: 7, scope: !5032)
!5044 = !DILocation(line: 371, column: 29, scope: !5032)
!5045 = !DILocation(line: 372, column: 5, scope: !5032)
!5046 = !DILocation(line: 375, column: 38, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !5027, file: !3, line: 374, column: 5)
!5048 = !DILocation(line: 375, column: 7, scope: !5047)
!5049 = !DILocation(line: 375, column: 36, scope: !5047)
!5050 = !DILocation(line: 376, column: 7, scope: !5047)
!5051 = !DILocation(line: 376, column: 36, scope: !5047)
!5052 = !DILocation(line: 379, column: 7, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 379, column: 7)
!5054 = !DILocation(line: 379, column: 7, scope: !4951)
!5055 = !DILocation(line: 380, column: 45, scope: !5053)
!5056 = !DILocation(line: 380, column: 68, scope: !5053)
!5057 = !DILocation(line: 380, column: 33, scope: !5053)
!5058 = !DILocation(line: 380, column: 5, scope: !5053)
!5059 = !DILocation(line: 380, column: 31, scope: !5053)
!5060 = !DILocation(line: 383, column: 3, scope: !4951)
!5061 = !DILocation(line: 383, column: 30, scope: !4951)
!5062 = !DILocation(line: 384, column: 3, scope: !4951)
!5063 = !DILocation(line: 384, column: 32, scope: !4951)
!5064 = !DILocation(line: 386, column: 11, scope: !4951)
!5065 = !DILocation(line: 386, column: 3, scope: !4951)
!5066 = !DILocation(line: 393, column: 11, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 387, column: 5)
!5068 = !DILocation(line: 393, column: 9, scope: !5067)
!5069 = !DILocation(line: 394, column: 11, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5067, file: !3, line: 394, column: 11)
!5071 = !DILocation(line: 394, column: 13, scope: !5070)
!5072 = !DILocation(line: 394, column: 16, scope: !5070)
!5073 = !DILocation(line: 394, column: 30, scope: !5070)
!5074 = !DILocation(line: 394, column: 11, scope: !5067)
!5075 = !DILocation(line: 395, column: 9, scope: !5070)
!5076 = !DILocation(line: 397, column: 11, scope: !5067)
!5077 = !DILocation(line: 397, column: 9, scope: !5067)
!5078 = !DILocation(line: 398, column: 11, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5067, file: !3, line: 398, column: 11)
!5080 = !DILocation(line: 398, column: 13, scope: !5079)
!5081 = !DILocation(line: 398, column: 16, scope: !5079)
!5082 = !DILocation(line: 398, column: 30, scope: !5079)
!5083 = !DILocation(line: 398, column: 11, scope: !5067)
!5084 = !DILocation(line: 399, column: 9, scope: !5079)
!5085 = !DILocation(line: 400, column: 14, scope: !5067)
!5086 = !DILocation(line: 400, column: 7, scope: !5067)
!5087 = !DILocation(line: 403, column: 42, scope: !5067)
!5088 = !DILocation(line: 403, column: 64, scope: !5067)
!5089 = !DILocation(line: 403, column: 30, scope: !5067)
!5090 = !DILocation(line: 403, column: 7, scope: !5067)
!5091 = !DILocation(line: 403, column: 28, scope: !5067)
!5092 = !DILocation(line: 404, column: 7, scope: !5067)
!5093 = !DILocation(line: 405, column: 14, scope: !5067)
!5094 = !DILocation(line: 405, column: 7, scope: !5067)
!5095 = !DILocation(line: 408, column: 42, scope: !5067)
!5096 = !DILocation(line: 408, column: 64, scope: !5067)
!5097 = !DILocation(line: 408, column: 30, scope: !5067)
!5098 = !DILocation(line: 408, column: 7, scope: !5067)
!5099 = !DILocation(line: 408, column: 28, scope: !5067)
!5100 = !DILocation(line: 409, column: 44, scope: !5067)
!5101 = !DILocation(line: 409, column: 68, scope: !5067)
!5102 = !DILocation(line: 409, column: 32, scope: !5067)
!5103 = !DILocation(line: 409, column: 7, scope: !5067)
!5104 = !DILocation(line: 409, column: 30, scope: !5067)
!5105 = !DILocation(line: 410, column: 7, scope: !5067)
!5106 = !DILocalVariable(name: "f", scope: !5107, file: !3, line: 416, type: !2586)
!5107 = distinct !DILexicalBlock(scope: !5067, file: !3, line: 415, column: 7)
!5108 = !DILocation(line: 416, column: 7, scope: !5107)
!5109 = !DILocalVariable(name: "nf", scope: !5107, file: !3, line: 416, type: !2586)
!5110 = !DILocation(line: 416, column: 10, scope: !5107)
!5111 = !DILocation(line: 418, column: 11, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 418, column: 2)
!5113 = !DILocation(line: 418, column: 9, scope: !5112)
!5114 = !DILocation(line: 418, column: 7, scope: !5112)
!5115 = !DILocation(line: 418, column: 35, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 418, column: 2)
!5117 = !DILocation(line: 418, column: 2, scope: !5112)
!5118 = !DILocation(line: 420, column: 22, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !5116, file: !3, line: 419, column: 4)
!5120 = !DILocation(line: 420, column: 25, scope: !5119)
!5121 = !DILocation(line: 420, column: 10, scope: !5119)
!5122 = !DILocation(line: 420, column: 8, scope: !5119)
!5123 = !DILocation(line: 421, column: 25, scope: !5119)
!5124 = !DILocation(line: 421, column: 6, scope: !5119)
!5125 = !DILocation(line: 421, column: 23, scope: !5119)
!5126 = !DILocation(line: 422, column: 23, scope: !5119)
!5127 = !DILocation(line: 422, column: 6, scope: !5119)
!5128 = !DILocation(line: 422, column: 21, scope: !5119)
!5129 = !DILocation(line: 423, column: 11, scope: !5119)
!5130 = !DILocation(line: 423, column: 9, scope: !5119)
!5131 = !DILocation(line: 424, column: 4, scope: !5119)
!5132 = !DILocation(line: 418, column: 43, scope: !5116)
!5133 = !DILocation(line: 418, column: 41, scope: !5116)
!5134 = !DILocation(line: 418, column: 2, scope: !5116)
!5135 = distinct !{!5135, !5117, !5136}
!5136 = !DILocation(line: 424, column: 4, scope: !5112)
!5137 = !DILocation(line: 425, column: 37, scope: !5107)
!5138 = !DILocation(line: 425, column: 27, scope: !5107)
!5139 = !DILocation(line: 425, column: 2, scope: !5107)
!5140 = !DILocation(line: 425, column: 25, scope: !5107)
!5141 = !DILocation(line: 427, column: 7, scope: !5067)
!5142 = !DILocation(line: 432, column: 7, scope: !5067)
!5143 = !DILocation(line: 433, column: 5, scope: !5067)
!5144 = !DILocation(line: 435, column: 3, scope: !4951)
!5145 = !DILocation(line: 436, column: 3, scope: !4951)
!5146 = !DILocation(line: 438, column: 10, scope: !4951)
!5147 = !DILocation(line: 438, column: 3, scope: !4951)
!5148 = !DILocation(line: 439, column: 1, scope: !4951)
!5149 = distinct !DISubprogram(name: "remap_gimple_seq", scope: !3, file: !3, line: 673, type: !5150, scopeLine: 674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5150 = !DISubroutineType(types: !5151)
!5151 = !{!2907, !2907, !3983}
!5152 = !DILocalVariable(name: "body", arg: 1, scope: !5149, file: !3, line: 673, type: !2907)
!5153 = !DILocation(line: 673, column: 30, scope: !5149)
!5154 = !DILocalVariable(name: "id", arg: 2, scope: !5149, file: !3, line: 673, type: !3983)
!5155 = !DILocation(line: 673, column: 52, scope: !5149)
!5156 = !DILocalVariable(name: "si", scope: !5149, file: !3, line: 675, type: !4261)
!5157 = !DILocation(line: 675, column: 24, scope: !5149)
!5158 = !DILocalVariable(name: "new_body", scope: !5149, file: !3, line: 676, type: !2907)
!5159 = !DILocation(line: 676, column: 14, scope: !5149)
!5160 = !DILocation(line: 678, column: 24, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 678, column: 3)
!5162 = !DILocation(line: 678, column: 13, scope: !5161)
!5163 = !DILocation(line: 678, column: 8, scope: !5161)
!5164 = !DILocation(line: 678, column: 32, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 678, column: 3)
!5166 = !DILocation(line: 678, column: 31, scope: !5165)
!5167 = !DILocation(line: 678, column: 3, scope: !5161)
!5168 = !DILocalVariable(name: "new_stmt", scope: !5169, file: !3, line: 680, type: !2917)
!5169 = distinct !DILexicalBlock(scope: !5165, file: !3, line: 679, column: 5)
!5170 = !DILocation(line: 680, column: 14, scope: !5169)
!5171 = !DILocation(line: 680, column: 44, scope: !5169)
!5172 = !DILocation(line: 680, column: 59, scope: !5169)
!5173 = !DILocation(line: 680, column: 25, scope: !5169)
!5174 = !DILocation(line: 681, column: 39, scope: !5169)
!5175 = !DILocation(line: 681, column: 7, scope: !5169)
!5176 = !DILocation(line: 682, column: 5, scope: !5169)
!5177 = !DILocation(line: 678, column: 48, scope: !5165)
!5178 = !DILocation(line: 678, column: 3, scope: !5165)
!5179 = distinct !{!5179, !5167, !5180}
!5180 = !DILocation(line: 682, column: 5, scope: !5161)
!5181 = !DILocation(line: 684, column: 10, scope: !5149)
!5182 = !DILocation(line: 684, column: 3, scope: !5149)
!5183 = distinct !DISubprogram(name: "gsi_start", scope: !1618, file: !1618, line: 4403, type: !5184, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5184 = !DISubroutineType(types: !5185)
!5185 = !{!4261, !2907}
!5186 = !DILocalVariable(name: "seq", arg: 1, scope: !5183, file: !1618, line: 4403, type: !2907)
!5187 = !DILocation(line: 4403, column: 23, scope: !5183)
!5188 = !DILocalVariable(name: "i", scope: !5183, file: !1618, line: 4405, type: !4261)
!5189 = !DILocation(line: 4405, column: 24, scope: !5183)
!5190 = !DILocation(line: 4407, column: 29, scope: !5183)
!5191 = !DILocation(line: 4407, column: 11, scope: !5183)
!5192 = !DILocation(line: 4407, column: 5, scope: !5183)
!5193 = !DILocation(line: 4407, column: 9, scope: !5183)
!5194 = !DILocation(line: 4408, column: 11, scope: !5183)
!5195 = !DILocation(line: 4408, column: 5, scope: !5183)
!5196 = !DILocation(line: 4408, column: 9, scope: !5183)
!5197 = !DILocation(line: 4409, column: 13, scope: !5183)
!5198 = !DILocation(line: 4409, column: 11, scope: !5183)
!5199 = !DILocation(line: 4409, column: 17, scope: !5183)
!5200 = !DILocation(line: 4409, column: 22, scope: !5183)
!5201 = !DILocation(line: 4409, column: 27, scope: !5183)
!5202 = !DILocation(line: 4409, column: 20, scope: !5183)
!5203 = !DILocation(line: 4409, column: 10, scope: !5183)
!5204 = !DILocation(line: 4409, column: 48, scope: !5183)
!5205 = !DILocation(line: 4409, column: 53, scope: !5183)
!5206 = !DILocation(line: 4409, column: 35, scope: !5183)
!5207 = !DILocation(line: 4409, column: 5, scope: !5183)
!5208 = !DILocation(line: 4409, column: 8, scope: !5183)
!5209 = !DILocation(line: 4411, column: 3, scope: !5183)
!5210 = distinct !DISubprogram(name: "gsi_end_p", scope: !1618, file: !1618, line: 4467, type: !5211, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5211 = !DISubroutineType(types: !5212)
!5212 = !{!2706, !4261}
!5213 = !DILocalVariable(name: "i", arg: 1, scope: !5210, file: !1618, line: 4467, type: !4261)
!5214 = !DILocation(line: 4467, column: 33, scope: !5210)
!5215 = !DILocation(line: 4469, column: 12, scope: !5210)
!5216 = !DILocation(line: 4469, column: 16, scope: !5210)
!5217 = !DILocation(line: 4469, column: 10, scope: !5210)
!5218 = !DILocation(line: 4469, column: 3, scope: !5210)
!5219 = distinct !DISubprogram(name: "remap_gimple_stmt", scope: !3, file: !3, line: 1179, type: !5220, scopeLine: 1180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5220 = !DISubroutineType(types: !5221)
!5221 = !{!2917, !2917, !3983}
!5222 = !DILocalVariable(name: "stmt", arg: 1, scope: !5219, file: !3, line: 1179, type: !2917)
!5223 = !DILocation(line: 1179, column: 27, scope: !5219)
!5224 = !DILocalVariable(name: "id", arg: 2, scope: !5219, file: !3, line: 1179, type: !3983)
!5225 = !DILocation(line: 1179, column: 49, scope: !5219)
!5226 = !DILocalVariable(name: "copy", scope: !5219, file: !3, line: 1181, type: !2917)
!5227 = !DILocation(line: 1181, column: 10, scope: !5219)
!5228 = !DILocalVariable(name: "wi", scope: !5219, file: !3, line: 1182, type: !4258)
!5229 = !DILocation(line: 1182, column: 25, scope: !5219)
!5230 = !DILocalVariable(name: "new_block", scope: !5219, file: !3, line: 1183, type: !2586)
!5231 = !DILocation(line: 1183, column: 8, scope: !5219)
!5232 = !DILocalVariable(name: "skip_first", scope: !5219, file: !3, line: 1184, type: !2706)
!5233 = !DILocation(line: 1184, column: 8, scope: !5219)
!5234 = !DILocation(line: 1196, column: 20, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 1196, column: 7)
!5236 = !DILocation(line: 1196, column: 7, scope: !5235)
!5237 = !DILocation(line: 1196, column: 26, scope: !5235)
!5238 = !DILocation(line: 1196, column: 43, scope: !5235)
!5239 = !DILocation(line: 1196, column: 46, scope: !5235)
!5240 = !DILocation(line: 1196, column: 50, scope: !5235)
!5241 = !DILocation(line: 1196, column: 7, scope: !5219)
!5242 = !DILocalVariable(name: "retval", scope: !5243, file: !3, line: 1198, type: !2586)
!5243 = distinct !DILexicalBlock(scope: !5235, file: !3, line: 1197, column: 5)
!5244 = !DILocation(line: 1198, column: 12, scope: !5243)
!5245 = !DILocation(line: 1198, column: 43, scope: !5243)
!5246 = !DILocation(line: 1198, column: 21, scope: !5243)
!5247 = !DILocation(line: 1205, column: 11, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5243, file: !3, line: 1205, column: 11)
!5249 = !DILocation(line: 1205, column: 18, scope: !5248)
!5250 = !DILocation(line: 1205, column: 21, scope: !5248)
!5251 = !DILocation(line: 1205, column: 40, scope: !5248)
!5252 = !DILocation(line: 1205, column: 11, scope: !5243)
!5253 = !DILocation(line: 1207, column: 11, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5248, file: !3, line: 1206, column: 9)
!5255 = !DILocation(line: 1207, column: 9, scope: !5254)
!5256 = !DILocation(line: 1209, column: 15, scope: !5254)
!5257 = !DILocation(line: 1210, column: 2, scope: !5254)
!5258 = !DILocation(line: 1212, column: 9, scope: !5248)
!5259 = !DILocation(line: 1212, column: 2, scope: !5248)
!5260 = !DILocation(line: 1213, column: 5, scope: !5243)
!5261 = !DILocation(line: 1214, column: 38, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5235, file: !3, line: 1214, column: 12)
!5263 = !DILocation(line: 1214, column: 12, scope: !5262)
!5264 = !DILocation(line: 1214, column: 12, scope: !5235)
!5265 = !DILocalVariable(name: "s1", scope: !5266, file: !3, line: 1216, type: !2907)
!5266 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1215, column: 5)
!5267 = !DILocation(line: 1216, column: 18, scope: !5266)
!5268 = !DILocalVariable(name: "s2", scope: !5266, file: !3, line: 1216, type: !2907)
!5269 = !DILocation(line: 1216, column: 22, scope: !5266)
!5270 = !DILocation(line: 1221, column: 28, scope: !5266)
!5271 = !DILocation(line: 1221, column: 15, scope: !5266)
!5272 = !DILocation(line: 1221, column: 7, scope: !5266)
!5273 = !DILocation(line: 1224, column: 29, scope: !5274)
!5274 = distinct !DILexicalBlock(scope: !5266, file: !3, line: 1222, column: 2)
!5275 = !DILocation(line: 1224, column: 35, scope: !5274)
!5276 = !DILocation(line: 1224, column: 11, scope: !5274)
!5277 = !DILocation(line: 1224, column: 9, scope: !5274)
!5278 = !DILocation(line: 1225, column: 4, scope: !5274)
!5279 = !DILocation(line: 1228, column: 49, scope: !5274)
!5280 = !DILocation(line: 1228, column: 27, scope: !5274)
!5281 = !DILocation(line: 1228, column: 56, scope: !5274)
!5282 = !DILocation(line: 1228, column: 9, scope: !5274)
!5283 = !DILocation(line: 1228, column: 7, scope: !5274)
!5284 = !DILocation(line: 1229, column: 51, scope: !5274)
!5285 = !DILocation(line: 1229, column: 31, scope: !5274)
!5286 = !DILocation(line: 1229, column: 58, scope: !5274)
!5287 = !DILocation(line: 1229, column: 11, scope: !5274)
!5288 = !DILocation(line: 1229, column: 9, scope: !5274)
!5289 = !DILocation(line: 1230, column: 4, scope: !5274)
!5290 = !DILocation(line: 1233, column: 53, scope: !5274)
!5291 = !DILocation(line: 1233, column: 27, scope: !5274)
!5292 = !DILocation(line: 1233, column: 60, scope: !5274)
!5293 = !DILocation(line: 1233, column: 9, scope: !5274)
!5294 = !DILocation(line: 1233, column: 7, scope: !5274)
!5295 = !DILocation(line: 1234, column: 59, scope: !5274)
!5296 = !DILocation(line: 1234, column: 35, scope: !5274)
!5297 = !DILocation(line: 1234, column: 66, scope: !5274)
!5298 = !DILocation(line: 1234, column: 11, scope: !5274)
!5299 = !DILocation(line: 1234, column: 9, scope: !5274)
!5300 = !DILocation(line: 1235, column: 4, scope: !5274)
!5301 = !DILocation(line: 1238, column: 44, scope: !5274)
!5302 = !DILocation(line: 1238, column: 27, scope: !5274)
!5303 = !DILocation(line: 1238, column: 51, scope: !5274)
!5304 = !DILocation(line: 1238, column: 9, scope: !5274)
!5305 = !DILocation(line: 1238, column: 7, scope: !5274)
!5306 = !DILocation(line: 1239, column: 47, scope: !5274)
!5307 = !DILocation(line: 1239, column: 27, scope: !5274)
!5308 = !DILocation(line: 1239, column: 54, scope: !5274)
!5309 = !DILocation(line: 1239, column: 9, scope: !5274)
!5310 = !DILocation(line: 1239, column: 7, scope: !5274)
!5311 = !DILocation(line: 1240, column: 29, scope: !5274)
!5312 = !DILocation(line: 1240, column: 33, scope: !5274)
!5313 = !DILocation(line: 1240, column: 54, scope: !5274)
!5314 = !DILocation(line: 1240, column: 37, scope: !5274)
!5315 = !DILocation(line: 1240, column: 11, scope: !5274)
!5316 = !DILocation(line: 1240, column: 9, scope: !5274)
!5317 = !DILocation(line: 1241, column: 4, scope: !5274)
!5318 = !DILocation(line: 1244, column: 47, scope: !5274)
!5319 = !DILocation(line: 1244, column: 27, scope: !5274)
!5320 = !DILocation(line: 1244, column: 54, scope: !5274)
!5321 = !DILocation(line: 1244, column: 9, scope: !5274)
!5322 = !DILocation(line: 1244, column: 7, scope: !5274)
!5323 = !DILocation(line: 1245, column: 29, scope: !5274)
!5324 = !DILocation(line: 1245, column: 11, scope: !5274)
!5325 = !DILocation(line: 1245, column: 9, scope: !5274)
!5326 = !DILocation(line: 1246, column: 4, scope: !5274)
!5327 = !DILocation(line: 1249, column: 44, scope: !5274)
!5328 = !DILocation(line: 1249, column: 27, scope: !5274)
!5329 = !DILocation(line: 1249, column: 51, scope: !5274)
!5330 = !DILocation(line: 1249, column: 9, scope: !5274)
!5331 = !DILocation(line: 1249, column: 7, scope: !5274)
!5332 = !DILocation(line: 1251, column: 14, scope: !5274)
!5333 = !DILocation(line: 1252, column: 36, scope: !5274)
!5334 = !DILocation(line: 1252, column: 7, scope: !5274)
!5335 = !DILocation(line: 1253, column: 37, scope: !5274)
!5336 = !DILocation(line: 1253, column: 7, scope: !5274)
!5337 = !DILocation(line: 1254, column: 37, scope: !5274)
!5338 = !DILocation(line: 1254, column: 7, scope: !5274)
!5339 = !DILocation(line: 1250, column: 11, scope: !5274)
!5340 = !DILocation(line: 1250, column: 9, scope: !5274)
!5341 = !DILocation(line: 1255, column: 4, scope: !5274)
!5342 = !DILocation(line: 1258, column: 44, scope: !5274)
!5343 = !DILocation(line: 1258, column: 27, scope: !5274)
!5344 = !DILocation(line: 1258, column: 51, scope: !5274)
!5345 = !DILocation(line: 1258, column: 9, scope: !5274)
!5346 = !DILocation(line: 1258, column: 7, scope: !5274)
!5347 = !DILocation(line: 1260, column: 14, scope: !5274)
!5348 = !DILocation(line: 1261, column: 32, scope: !5274)
!5349 = !DILocation(line: 1261, column: 7, scope: !5274)
!5350 = !DILocation(line: 1262, column: 33, scope: !5274)
!5351 = !DILocation(line: 1262, column: 7, scope: !5274)
!5352 = !DILocation(line: 1263, column: 33, scope: !5274)
!5353 = !DILocation(line: 1263, column: 7, scope: !5274)
!5354 = !DILocation(line: 1264, column: 32, scope: !5274)
!5355 = !DILocation(line: 1264, column: 7, scope: !5274)
!5356 = !DILocation(line: 1265, column: 33, scope: !5274)
!5357 = !DILocation(line: 1265, column: 7, scope: !5274)
!5358 = !DILocation(line: 1266, column: 34, scope: !5274)
!5359 = !DILocation(line: 1266, column: 7, scope: !5274)
!5360 = !DILocation(line: 1259, column: 11, scope: !5274)
!5361 = !DILocation(line: 1259, column: 9, scope: !5274)
!5362 = !DILocation(line: 1267, column: 4, scope: !5274)
!5363 = !DILocation(line: 1270, column: 44, scope: !5274)
!5364 = !DILocation(line: 1270, column: 27, scope: !5274)
!5365 = !DILocation(line: 1270, column: 51, scope: !5274)
!5366 = !DILocation(line: 1270, column: 9, scope: !5274)
!5367 = !DILocation(line: 1270, column: 7, scope: !5274)
!5368 = !DILocation(line: 1271, column: 52, scope: !5274)
!5369 = !DILocation(line: 1271, column: 27, scope: !5274)
!5370 = !DILocation(line: 1271, column: 59, scope: !5274)
!5371 = !DILocation(line: 1271, column: 9, scope: !5274)
!5372 = !DILocation(line: 1271, column: 7, scope: !5274)
!5373 = !DILocation(line: 1272, column: 33, scope: !5274)
!5374 = !DILocation(line: 1272, column: 61, scope: !5274)
!5375 = !DILocation(line: 1272, column: 37, scope: !5274)
!5376 = !DILocation(line: 1273, column: 37, scope: !5274)
!5377 = !DILocation(line: 1273, column: 12, scope: !5274)
!5378 = !DILocation(line: 1273, column: 44, scope: !5274)
!5379 = !DILocation(line: 1272, column: 11, scope: !5274)
!5380 = !DILocation(line: 1272, column: 9, scope: !5274)
!5381 = !DILocalVariable(name: "i", scope: !5382, file: !3, line: 1275, type: !3061)
!5382 = distinct !DILexicalBlock(scope: !5274, file: !3, line: 1274, column: 4)
!5383 = !DILocation(line: 1275, column: 13, scope: !5382)
!5384 = !DILocation(line: 1276, column: 13, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5382, file: !3, line: 1276, column: 6)
!5386 = !DILocation(line: 1276, column: 11, scope: !5385)
!5387 = !DILocation(line: 1276, column: 18, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1276, column: 6)
!5389 = !DILocation(line: 1276, column: 47, scope: !5388)
!5390 = !DILocation(line: 1276, column: 22, scope: !5388)
!5391 = !DILocation(line: 1276, column: 20, scope: !5388)
!5392 = !DILocation(line: 1276, column: 6, scope: !5385)
!5393 = !DILocation(line: 1278, column: 29, scope: !5394)
!5394 = distinct !DILexicalBlock(scope: !5388, file: !3, line: 1277, column: 8)
!5395 = !DILocation(line: 1278, column: 35, scope: !5394)
!5396 = !DILocation(line: 1279, column: 30, scope: !5394)
!5397 = !DILocation(line: 1279, column: 36, scope: !5394)
!5398 = !DILocation(line: 1279, column: 8, scope: !5394)
!5399 = !DILocation(line: 1278, column: 3, scope: !5394)
!5400 = !DILocation(line: 1280, column: 31, scope: !5394)
!5401 = !DILocation(line: 1280, column: 37, scope: !5394)
!5402 = !DILocation(line: 1281, column: 34, scope: !5394)
!5403 = !DILocation(line: 1281, column: 40, scope: !5394)
!5404 = !DILocation(line: 1281, column: 10, scope: !5394)
!5405 = !DILocation(line: 1280, column: 3, scope: !5394)
!5406 = !DILocation(line: 1282, column: 29, scope: !5394)
!5407 = !DILocation(line: 1282, column: 35, scope: !5394)
!5408 = !DILocation(line: 1283, column: 30, scope: !5394)
!5409 = !DILocation(line: 1283, column: 36, scope: !5394)
!5410 = !DILocation(line: 1283, column: 8, scope: !5394)
!5411 = !DILocation(line: 1282, column: 3, scope: !5394)
!5412 = !DILocation(line: 1284, column: 28, scope: !5394)
!5413 = !DILocation(line: 1284, column: 34, scope: !5394)
!5414 = !DILocation(line: 1285, column: 28, scope: !5394)
!5415 = !DILocation(line: 1285, column: 34, scope: !5394)
!5416 = !DILocation(line: 1285, column: 7, scope: !5394)
!5417 = !DILocation(line: 1284, column: 3, scope: !5394)
!5418 = !DILocation(line: 1286, column: 28, scope: !5394)
!5419 = !DILocation(line: 1286, column: 34, scope: !5394)
!5420 = !DILocation(line: 1287, column: 28, scope: !5394)
!5421 = !DILocation(line: 1287, column: 34, scope: !5394)
!5422 = !DILocation(line: 1287, column: 7, scope: !5394)
!5423 = !DILocation(line: 1286, column: 3, scope: !5394)
!5424 = !DILocation(line: 1288, column: 8, scope: !5394)
!5425 = !DILocation(line: 1276, column: 55, scope: !5388)
!5426 = !DILocation(line: 1276, column: 6, scope: !5388)
!5427 = distinct !{!5427, !5392, !5428}
!5428 = !DILocation(line: 1288, column: 8, scope: !5385)
!5429 = !DILocation(line: 1290, column: 4, scope: !5274)
!5430 = !DILocation(line: 1293, column: 44, scope: !5274)
!5431 = !DILocation(line: 1293, column: 27, scope: !5274)
!5432 = !DILocation(line: 1293, column: 51, scope: !5274)
!5433 = !DILocation(line: 1293, column: 9, scope: !5274)
!5434 = !DILocation(line: 1293, column: 7, scope: !5274)
!5435 = !DILocation(line: 1294, column: 36, scope: !5274)
!5436 = !DILocation(line: 1294, column: 11, scope: !5274)
!5437 = !DILocation(line: 1294, column: 9, scope: !5274)
!5438 = !DILocation(line: 1295, column: 4, scope: !5274)
!5439 = !DILocation(line: 1298, column: 44, scope: !5274)
!5440 = !DILocation(line: 1298, column: 27, scope: !5274)
!5441 = !DILocation(line: 1298, column: 51, scope: !5274)
!5442 = !DILocation(line: 1298, column: 9, scope: !5274)
!5443 = !DILocation(line: 1298, column: 7, scope: !5274)
!5444 = !DILocation(line: 1299, column: 37, scope: !5274)
!5445 = !DILocation(line: 1299, column: 11, scope: !5274)
!5446 = !DILocation(line: 1299, column: 9, scope: !5274)
!5447 = !DILocation(line: 1300, column: 4, scope: !5274)
!5448 = !DILocation(line: 1303, column: 44, scope: !5274)
!5449 = !DILocation(line: 1303, column: 27, scope: !5274)
!5450 = !DILocation(line: 1303, column: 51, scope: !5274)
!5451 = !DILocation(line: 1303, column: 9, scope: !5274)
!5452 = !DILocation(line: 1303, column: 7, scope: !5274)
!5453 = !DILocation(line: 1304, column: 37, scope: !5274)
!5454 = !DILocation(line: 1304, column: 11, scope: !5274)
!5455 = !DILocation(line: 1304, column: 9, scope: !5274)
!5456 = !DILocation(line: 1305, column: 4, scope: !5274)
!5457 = !DILocation(line: 1308, column: 44, scope: !5274)
!5458 = !DILocation(line: 1308, column: 27, scope: !5274)
!5459 = !DILocation(line: 1308, column: 51, scope: !5274)
!5460 = !DILocation(line: 1308, column: 9, scope: !5274)
!5461 = !DILocation(line: 1308, column: 7, scope: !5274)
!5462 = !DILocation(line: 1310, column: 14, scope: !5274)
!5463 = !DILocation(line: 1310, column: 47, scope: !5274)
!5464 = !DILocation(line: 1310, column: 18, scope: !5274)
!5465 = !DILocation(line: 1309, column: 11, scope: !5274)
!5466 = !DILocation(line: 1309, column: 9, scope: !5274)
!5467 = !DILocation(line: 1311, column: 4, scope: !5274)
!5468 = !DILocation(line: 1314, column: 44, scope: !5274)
!5469 = !DILocation(line: 1314, column: 27, scope: !5274)
!5470 = !DILocation(line: 1314, column: 51, scope: !5274)
!5471 = !DILocation(line: 1314, column: 9, scope: !5274)
!5472 = !DILocation(line: 1314, column: 7, scope: !5274)
!5473 = !DILocation(line: 1316, column: 14, scope: !5274)
!5474 = !DILocation(line: 1316, column: 45, scope: !5274)
!5475 = !DILocation(line: 1316, column: 18, scope: !5274)
!5476 = !DILocation(line: 1315, column: 11, scope: !5274)
!5477 = !DILocation(line: 1315, column: 9, scope: !5274)
!5478 = !DILocation(line: 1317, column: 4, scope: !5274)
!5479 = !DILocation(line: 1320, column: 44, scope: !5274)
!5480 = !DILocation(line: 1320, column: 27, scope: !5274)
!5481 = !DILocation(line: 1320, column: 51, scope: !5274)
!5482 = !DILocation(line: 1320, column: 9, scope: !5274)
!5483 = !DILocation(line: 1320, column: 7, scope: !5274)
!5484 = !DILocation(line: 1322, column: 35, scope: !5274)
!5485 = !DILocation(line: 1322, column: 65, scope: !5274)
!5486 = !DILocation(line: 1322, column: 39, scope: !5274)
!5487 = !DILocation(line: 1322, column: 8, scope: !5274)
!5488 = !DILocation(line: 1322, column: 6, scope: !5274)
!5489 = !DILocation(line: 1323, column: 4, scope: !5274)
!5490 = !DILocation(line: 1326, column: 4, scope: !5274)
!5491 = !DILocation(line: 1327, column: 2, scope: !5274)
!5492 = !DILocation(line: 1328, column: 5, scope: !5266)
!5493 = !DILocation(line: 1331, column: 33, scope: !5494)
!5494 = distinct !DILexicalBlock(scope: !5495, file: !3, line: 1331, column: 11)
!5495 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1330, column: 5)
!5496 = !DILocation(line: 1331, column: 11, scope: !5494)
!5497 = !DILocation(line: 1332, column: 4, scope: !5494)
!5498 = !DILocation(line: 1332, column: 26, scope: !5494)
!5499 = !DILocation(line: 1332, column: 7, scope: !5494)
!5500 = !DILocation(line: 1332, column: 55, scope: !5494)
!5501 = !DILocation(line: 1332, column: 35, scope: !5494)
!5502 = !DILocation(line: 1332, column: 32, scope: !5494)
!5503 = !DILocation(line: 1333, column: 4, scope: !5494)
!5504 = !DILocation(line: 1333, column: 44, scope: !5494)
!5505 = !DILocation(line: 1333, column: 25, scope: !5494)
!5506 = !DILocation(line: 1333, column: 51, scope: !5494)
!5507 = !DILocation(line: 1333, column: 55, scope: !5494)
!5508 = !DILocation(line: 1333, column: 7, scope: !5494)
!5509 = !DILocation(line: 1331, column: 11, scope: !5495)
!5510 = !DILocalVariable(name: "decl", scope: !5511, file: !3, line: 1342, type: !2586)
!5511 = distinct !DILexicalBlock(scope: !5494, file: !3, line: 1334, column: 2)
!5512 = !DILocation(line: 1342, column: 9, scope: !5511)
!5513 = !DILocation(line: 1342, column: 35, scope: !5511)
!5514 = !DILocation(line: 1342, column: 16, scope: !5511)
!5515 = !DILocalVariable(name: "value", scope: !5511, file: !3, line: 1342, type: !2586)
!5516 = !DILocation(line: 1342, column: 42, scope: !5511)
!5517 = !DILocalVariable(name: "n", scope: !5511, file: !3, line: 1343, type: !2585)
!5518 = !DILocation(line: 1343, column: 10, scope: !5511)
!5519 = !DILocation(line: 1345, column: 39, scope: !5511)
!5520 = !DILocation(line: 1345, column: 43, scope: !5511)
!5521 = !DILocation(line: 1345, column: 53, scope: !5511)
!5522 = !DILocation(line: 1345, column: 17, scope: !5511)
!5523 = !DILocation(line: 1345, column: 8, scope: !5511)
!5524 = !DILocation(line: 1345, column: 6, scope: !5511)
!5525 = !DILocation(line: 1346, column: 8, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5511, file: !3, line: 1346, column: 8)
!5527 = !DILocation(line: 1346, column: 8, scope: !5511)
!5528 = !DILocation(line: 1348, column: 17, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5526, file: !3, line: 1347, column: 6)
!5530 = !DILocation(line: 1348, column: 16, scope: !5529)
!5531 = !DILocation(line: 1348, column: 14, scope: !5529)
!5532 = !DILocation(line: 1349, column: 8, scope: !5529)
!5533 = !DILocation(line: 0, scope: !5529)
!5534 = distinct !{!5534, !5532, !5532}
!5535 = !DILocation(line: 1350, column: 12, scope: !5536)
!5536 = distinct !DILexicalBlock(scope: !5529, file: !3, line: 1350, column: 12)
!5537 = !DILocation(line: 1350, column: 34, scope: !5536)
!5538 = !DILocation(line: 1350, column: 37, scope: !5536)
!5539 = !DILocation(line: 1350, column: 12, scope: !5529)
!5540 = !DILocation(line: 1351, column: 10, scope: !5536)
!5541 = !DILocation(line: 1351, column: 3, scope: !5536)
!5542 = !DILocation(line: 1352, column: 6, scope: !5529)
!5543 = !DILocation(line: 1353, column: 2, scope: !5511)
!5544 = !DILocation(line: 1355, column: 32, scope: !5545)
!5545 = distinct !DILexicalBlock(scope: !5495, file: !3, line: 1355, column: 11)
!5546 = !DILocation(line: 1355, column: 11, scope: !5545)
!5547 = !DILocation(line: 1355, column: 11, scope: !5495)
!5548 = !DILocation(line: 1357, column: 11, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5545, file: !3, line: 1356, column: 2)
!5550 = !DILocation(line: 1357, column: 9, scope: !5549)
!5551 = !DILocation(line: 1360, column: 4, scope: !5549)
!5552 = !DILocation(line: 1361, column: 11, scope: !5549)
!5553 = !DILocation(line: 1361, column: 4, scope: !5549)
!5554 = !DILocation(line: 1365, column: 27, scope: !5495)
!5555 = !DILocation(line: 1365, column: 14, scope: !5495)
!5556 = !DILocation(line: 1365, column: 12, scope: !5495)
!5557 = !DILocation(line: 1369, column: 11, scope: !5558)
!5558 = distinct !DILexicalBlock(scope: !5495, file: !3, line: 1369, column: 11)
!5559 = !DILocation(line: 1369, column: 15, scope: !5558)
!5560 = !DILocation(line: 1369, column: 11, scope: !5495)
!5561 = !DILocation(line: 1370, column: 23, scope: !5558)
!5562 = !DILocation(line: 1370, column: 10, scope: !5558)
!5563 = !DILocation(line: 1370, column: 2, scope: !5558)
!5564 = !DILocalVariable(name: "r", scope: !5565, file: !3, line: 1374, type: !2586)
!5565 = distinct !DILexicalBlock(scope: !5566, file: !3, line: 1373, column: 6)
!5566 = distinct !DILexicalBlock(scope: !5558, file: !3, line: 1371, column: 4)
!5567 = !DILocation(line: 1374, column: 13, scope: !5565)
!5568 = !DILocalVariable(name: "fndecl", scope: !5565, file: !3, line: 1374, type: !2586)
!5569 = !DILocation(line: 1374, column: 16, scope: !5565)
!5570 = !DILocation(line: 1374, column: 45, scope: !5565)
!5571 = !DILocation(line: 1374, column: 25, scope: !5565)
!5572 = !DILocation(line: 1375, column: 12, scope: !5573)
!5573 = distinct !DILexicalBlock(scope: !5565, file: !3, line: 1375, column: 12)
!5574 = !DILocation(line: 1375, column: 19, scope: !5573)
!5575 = !DILocation(line: 1375, column: 22, scope: !5573)
!5576 = !DILocation(line: 1375, column: 51, scope: !5573)
!5577 = !DILocation(line: 1375, column: 12, scope: !5565)
!5578 = !DILocation(line: 1376, column: 11, scope: !5573)
!5579 = !DILocation(line: 1376, column: 3, scope: !5573)
!5580 = !DILocation(line: 1379, column: 28, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1377, column: 5)
!5582 = !DILocation(line: 1379, column: 11, scope: !5581)
!5583 = !DILocation(line: 1379, column: 9, scope: !5581)
!5584 = !DILocation(line: 1380, column: 36, scope: !5581)
!5585 = !DILocation(line: 1380, column: 39, scope: !5581)
!5586 = !DILocation(line: 1380, column: 11, scope: !5581)
!5587 = !DILocation(line: 1380, column: 9, scope: !5581)
!5588 = !DILocation(line: 1381, column: 28, scope: !5581)
!5589 = !DILocation(line: 1381, column: 37, scope: !5581)
!5590 = !DILocation(line: 1381, column: 7, scope: !5581)
!5591 = !DILocation(line: 1386, column: 28, scope: !5581)
!5592 = !DILocation(line: 1386, column: 11, scope: !5581)
!5593 = !DILocation(line: 1386, column: 9, scope: !5581)
!5594 = !DILocation(line: 1387, column: 36, scope: !5581)
!5595 = !DILocation(line: 1387, column: 39, scope: !5581)
!5596 = !DILocation(line: 1387, column: 11, scope: !5581)
!5597 = !DILocation(line: 1387, column: 9, scope: !5581)
!5598 = !DILocation(line: 1388, column: 28, scope: !5581)
!5599 = !DILocation(line: 1388, column: 37, scope: !5581)
!5600 = !DILocation(line: 1388, column: 7, scope: !5581)
!5601 = !DILocation(line: 1389, column: 7, scope: !5581)
!5602 = !DILocation(line: 1392, column: 7, scope: !5581)
!5603 = !DILocation(line: 1393, column: 5, scope: !5581)
!5604 = !DILocation(line: 1395, column: 6, scope: !5566)
!5605 = !DILocalVariable(name: "r", scope: !5606, file: !3, line: 1399, type: !2683)
!5606 = distinct !DILexicalBlock(scope: !5566, file: !3, line: 1398, column: 6)
!5607 = !DILocation(line: 1399, column: 12, scope: !5606)
!5608 = !DILocation(line: 1399, column: 36, scope: !5606)
!5609 = !DILocation(line: 1399, column: 16, scope: !5606)
!5610 = !DILocation(line: 1400, column: 32, scope: !5606)
!5611 = !DILocation(line: 1400, column: 35, scope: !5606)
!5612 = !DILocation(line: 1400, column: 12, scope: !5606)
!5613 = !DILocation(line: 1400, column: 10, scope: !5606)
!5614 = !DILocation(line: 1401, column: 32, scope: !5606)
!5615 = !DILocation(line: 1401, column: 38, scope: !5606)
!5616 = !DILocation(line: 1401, column: 8, scope: !5606)
!5617 = !DILocation(line: 1403, column: 6, scope: !5566)
!5618 = !DILocalVariable(name: "r", scope: !5619, file: !3, line: 1407, type: !2683)
!5619 = distinct !DILexicalBlock(scope: !5566, file: !3, line: 1406, column: 6)
!5620 = !DILocation(line: 1407, column: 12, scope: !5619)
!5621 = !DILocation(line: 1407, column: 43, scope: !5619)
!5622 = !DILocation(line: 1407, column: 16, scope: !5619)
!5623 = !DILocation(line: 1408, column: 32, scope: !5619)
!5624 = !DILocation(line: 1408, column: 35, scope: !5619)
!5625 = !DILocation(line: 1408, column: 12, scope: !5619)
!5626 = !DILocation(line: 1408, column: 10, scope: !5619)
!5627 = !DILocation(line: 1409, column: 39, scope: !5619)
!5628 = !DILocation(line: 1409, column: 45, scope: !5619)
!5629 = !DILocation(line: 1409, column: 8, scope: !5619)
!5630 = !DILocation(line: 1411, column: 6, scope: !5566)
!5631 = !DILocation(line: 1414, column: 6, scope: !5566)
!5632 = !DILocation(line: 1415, column: 4, scope: !5566)
!5633 = !DILocation(line: 1421, column: 15, scope: !5219)
!5634 = !DILocation(line: 1421, column: 19, scope: !5219)
!5635 = !DILocation(line: 1421, column: 13, scope: !5219)
!5636 = !DILocation(line: 1422, column: 21, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 1422, column: 7)
!5638 = !DILocation(line: 1422, column: 7, scope: !5637)
!5639 = !DILocation(line: 1422, column: 7, scope: !5219)
!5640 = !DILocalVariable(name: "n", scope: !5641, file: !3, line: 1424, type: !2585)
!5641 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 1423, column: 5)
!5642 = !DILocation(line: 1424, column: 13, scope: !5641)
!5643 = !DILocation(line: 1425, column: 42, scope: !5641)
!5644 = !DILocation(line: 1425, column: 46, scope: !5641)
!5645 = !DILocation(line: 1425, column: 70, scope: !5641)
!5646 = !DILocation(line: 1425, column: 56, scope: !5641)
!5647 = !DILocation(line: 1425, column: 20, scope: !5641)
!5648 = !DILocation(line: 1425, column: 11, scope: !5641)
!5649 = !DILocation(line: 1425, column: 9, scope: !5641)
!5650 = !DILocation(line: 1426, column: 7, scope: !5641)
!5651 = !DILocation(line: 1427, column: 20, scope: !5641)
!5652 = !DILocation(line: 1427, column: 19, scope: !5641)
!5653 = !DILocation(line: 1427, column: 17, scope: !5641)
!5654 = !DILocation(line: 1428, column: 5, scope: !5641)
!5655 = !DILocation(line: 1430, column: 21, scope: !5219)
!5656 = !DILocation(line: 1430, column: 27, scope: !5219)
!5657 = !DILocation(line: 1430, column: 3, scope: !5219)
!5658 = !DILocation(line: 1432, column: 28, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 1432, column: 7)
!5660 = !DILocation(line: 1432, column: 7, scope: !5659)
!5661 = !DILocation(line: 1432, column: 7, scope: !5219)
!5662 = !DILocation(line: 1433, column: 12, scope: !5659)
!5663 = !DILocation(line: 1433, column: 5, scope: !5659)
!5664 = !DILocation(line: 1436, column: 3, scope: !5219)
!5665 = !DILocation(line: 1437, column: 13, scope: !5219)
!5666 = !DILocation(line: 1437, column: 6, scope: !5219)
!5667 = !DILocation(line: 1437, column: 11, scope: !5219)
!5668 = !DILocation(line: 1438, column: 7, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 1438, column: 7)
!5670 = !DILocation(line: 1438, column: 7, scope: !5219)
!5671 = !DILocation(line: 1439, column: 5, scope: !5669)
!5672 = !DILocation(line: 1441, column: 21, scope: !5669)
!5673 = !DILocation(line: 1441, column: 5, scope: !5669)
!5674 = !DILocation(line: 1445, column: 27, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5219, file: !3, line: 1445, column: 7)
!5676 = !DILocation(line: 1445, column: 7, scope: !5675)
!5677 = !DILocation(line: 1445, column: 7, scope: !5219)
!5678 = !DILocation(line: 1447, column: 24, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 1446, column: 5)
!5680 = !DILocation(line: 1447, column: 7, scope: !5679)
!5681 = !DILocation(line: 1448, column: 24, scope: !5679)
!5682 = !DILocation(line: 1448, column: 7, scope: !5679)
!5683 = !DILocation(line: 1449, column: 5, scope: !5679)
!5684 = !DILocation(line: 1451, column: 10, scope: !5219)
!5685 = !DILocation(line: 1451, column: 3, scope: !5219)
!5686 = !DILocation(line: 1452, column: 1, scope: !5219)
!5687 = distinct !DISubprogram(name: "gsi_stmt", scope: !1618, file: !1618, line: 4501, type: !5688, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5688 = !DISubroutineType(types: !5689)
!5689 = !{!2917, !4261}
!5690 = !DILocalVariable(name: "i", arg: 1, scope: !5687, file: !1618, line: 4501, type: !4261)
!5691 = !DILocation(line: 4501, column: 32, scope: !5687)
!5692 = !DILocation(line: 4503, column: 12, scope: !5687)
!5693 = !DILocation(line: 4503, column: 17, scope: !5687)
!5694 = !DILocation(line: 4503, column: 3, scope: !5687)
!5695 = distinct !DISubprogram(name: "gsi_next", scope: !1618, file: !1618, line: 4485, type: !5696, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5696 = !DISubroutineType(types: !5697)
!5697 = !{null, !5698}
!5698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4261, size: 64)
!5699 = !DILocalVariable(name: "i", arg: 1, scope: !5695, file: !1618, line: 4485, type: !5698)
!5700 = !DILocation(line: 4485, column: 33, scope: !5695)
!5701 = !DILocation(line: 4487, column: 12, scope: !5695)
!5702 = !DILocation(line: 4487, column: 15, scope: !5695)
!5703 = !DILocation(line: 4487, column: 20, scope: !5695)
!5704 = !DILocation(line: 4487, column: 3, scope: !5695)
!5705 = !DILocation(line: 4487, column: 6, scope: !5695)
!5706 = !DILocation(line: 4487, column: 10, scope: !5695)
!5707 = !DILocation(line: 4488, column: 1, scope: !5695)
!5708 = distinct !DISubprogram(name: "remap_ssa_name", scope: !3, file: !3, line: 183, type: !4330, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5709 = !DILocalVariable(name: "name", arg: 1, scope: !5708, file: !3, line: 183, type: !2586)
!5710 = !DILocation(line: 183, column: 22, scope: !5708)
!5711 = !DILocalVariable(name: "id", arg: 2, scope: !5708, file: !3, line: 183, type: !3983)
!5712 = !DILocation(line: 183, column: 44, scope: !5708)
!5713 = !DILocalVariable(name: "new_tree", scope: !5708, file: !3, line: 185, type: !2586)
!5714 = !DILocation(line: 185, column: 8, scope: !5708)
!5715 = !DILocalVariable(name: "n", scope: !5708, file: !3, line: 186, type: !2585)
!5716 = !DILocation(line: 186, column: 9, scope: !5708)
!5717 = !DILocation(line: 188, column: 3, scope: !5708)
!5718 = !DILocation(line: 190, column: 38, scope: !5708)
!5719 = !DILocation(line: 190, column: 42, scope: !5708)
!5720 = !DILocation(line: 190, column: 52, scope: !5708)
!5721 = !DILocation(line: 190, column: 16, scope: !5708)
!5722 = !DILocation(line: 190, column: 7, scope: !5708)
!5723 = !DILocation(line: 190, column: 5, scope: !5708)
!5724 = !DILocation(line: 191, column: 7, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 191, column: 7)
!5726 = !DILocation(line: 191, column: 7, scope: !5708)
!5727 = !DILocation(line: 192, column: 27, scope: !5725)
!5728 = !DILocation(line: 192, column: 26, scope: !5725)
!5729 = !DILocation(line: 192, column: 12, scope: !5725)
!5730 = !DILocation(line: 192, column: 5, scope: !5725)
!5731 = !DILocation(line: 194, column: 7, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 194, column: 7)
!5733 = !DILocation(line: 194, column: 7, scope: !5708)
!5734 = !DILocation(line: 196, column: 29, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 195, column: 5)
!5736 = !DILocation(line: 197, column: 14, scope: !5735)
!5737 = !DILocation(line: 197, column: 7, scope: !5735)
!5738 = !DILocation(line: 202, column: 26, scope: !5708)
!5739 = !DILocation(line: 202, column: 47, scope: !5708)
!5740 = !DILocation(line: 202, column: 14, scope: !5708)
!5741 = !DILocation(line: 202, column: 12, scope: !5708)
!5742 = !DILocation(line: 210, column: 8, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 210, column: 7)
!5744 = !DILocation(line: 210, column: 29, scope: !5743)
!5745 = !DILocation(line: 210, column: 41, scope: !5743)
!5746 = !DILocation(line: 210, column: 44, scope: !5743)
!5747 = !DILocation(line: 210, column: 65, scope: !5743)
!5748 = !DILocation(line: 211, column: 7, scope: !5743)
!5749 = !DILocation(line: 211, column: 11, scope: !5743)
!5750 = !DILocation(line: 211, column: 43, scope: !5743)
!5751 = !DILocation(line: 212, column: 4, scope: !5743)
!5752 = !DILocation(line: 212, column: 8, scope: !5743)
!5753 = !DILocation(line: 212, column: 12, scope: !5743)
!5754 = !DILocation(line: 210, column: 7, scope: !5708)
!5755 = !DILocation(line: 214, column: 33, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5743, file: !3, line: 213, column: 5)
!5757 = !DILocation(line: 214, column: 18, scope: !5756)
!5758 = !DILocation(line: 214, column: 16, scope: !5756)
!5759 = !DILocation(line: 215, column: 24, scope: !5756)
!5760 = !DILocation(line: 215, column: 28, scope: !5756)
!5761 = !DILocation(line: 215, column: 34, scope: !5756)
!5762 = !DILocation(line: 215, column: 7, scope: !5756)
!5763 = !DILocation(line: 217, column: 4, scope: !5756)
!5764 = !DILocation(line: 216, column: 7, scope: !5756)
!5765 = !DILocation(line: 217, column: 2, scope: !5756)
!5766 = !DILocation(line: 218, column: 30, scope: !5756)
!5767 = !DILocation(line: 218, column: 7, scope: !5756)
!5768 = !DILocation(line: 218, column: 28, scope: !5756)
!5769 = !DILocation(line: 219, column: 25, scope: !5770)
!5770 = distinct !DILexicalBlock(scope: !5756, file: !3, line: 219, column: 11)
!5771 = !DILocation(line: 219, column: 11, scope: !5770)
!5772 = !DILocation(line: 219, column: 11, scope: !5756)
!5773 = !DILocation(line: 230, column: 8, scope: !5774)
!5774 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 230, column: 8)
!5775 = distinct !DILexicalBlock(scope: !5770, file: !3, line: 220, column: 2)
!5776 = !DILocation(line: 230, column: 12, scope: !5774)
!5777 = !DILocation(line: 231, column: 8, scope: !5774)
!5778 = !DILocation(line: 231, column: 26, scope: !5774)
!5779 = !DILocation(line: 231, column: 11, scope: !5774)
!5780 = !DILocation(line: 232, column: 8, scope: !5774)
!5781 = !DILocation(line: 232, column: 11, scope: !5774)
!5782 = !DILocation(line: 232, column: 43, scope: !5774)
!5783 = !DILocation(line: 233, column: 8, scope: !5774)
!5784 = !DILocation(line: 233, column: 12, scope: !5774)
!5785 = !DILocation(line: 233, column: 16, scope: !5774)
!5786 = !DILocation(line: 233, column: 28, scope: !5774)
!5787 = !DILocation(line: 233, column: 60, scope: !5774)
!5788 = !DILocation(line: 233, column: 25, scope: !5774)
!5789 = !DILocation(line: 234, column: 5, scope: !5774)
!5790 = !DILocation(line: 234, column: 8, scope: !5774)
!5791 = !DILocation(line: 234, column: 41, scope: !5774)
!5792 = !DILocation(line: 230, column: 8, scope: !5775)
!5793 = !DILocalVariable(name: "gsi", scope: !5794, file: !3, line: 236, type: !4261)
!5794 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 235, column: 6)
!5795 = !DILocation(line: 236, column: 29, scope: !5794)
!5796 = !DILocation(line: 236, column: 48, scope: !5794)
!5797 = !DILocation(line: 236, column: 52, scope: !5794)
!5798 = !DILocation(line: 236, column: 35, scope: !5794)
!5799 = !DILocalVariable(name: "init_stmt", scope: !5794, file: !3, line: 237, type: !2917)
!5800 = !DILocation(line: 237, column: 15, scope: !5794)
!5801 = !DILocation(line: 239, column: 20, scope: !5794)
!5802 = !DILocation(line: 239, column: 18, scope: !5794)
!5803 = !DILocation(line: 242, column: 32, scope: !5794)
!5804 = !DILocation(line: 242, column: 8, scope: !5794)
!5805 = !DILocation(line: 243, column: 8, scope: !5794)
!5806 = !DILocation(line: 243, column: 43, scope: !5794)
!5807 = !DILocation(line: 244, column: 6, scope: !5794)
!5808 = !DILocation(line: 247, column: 39, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5774, file: !3, line: 246, column: 6)
!5810 = !DILocation(line: 247, column: 8, scope: !5809)
!5811 = !DILocation(line: 247, column: 37, scope: !5809)
!5812 = !DILocation(line: 248, column: 32, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5809, file: !3, line: 248, column: 12)
!5814 = !DILocation(line: 248, column: 36, scope: !5813)
!5815 = !DILocation(line: 248, column: 46, scope: !5813)
!5816 = !DILocation(line: 248, column: 12, scope: !5813)
!5817 = !DILocation(line: 249, column: 8, scope: !5813)
!5818 = !DILocation(line: 249, column: 5, scope: !5813)
!5819 = !DILocation(line: 248, column: 12, scope: !5809)
!5820 = !DILocation(line: 250, column: 27, scope: !5813)
!5821 = !DILocation(line: 250, column: 52, scope: !5813)
!5822 = !DILocation(line: 250, column: 10, scope: !5813)
!5823 = !DILocation(line: 252, column: 2, scope: !5775)
!5824 = !DILocation(line: 253, column: 5, scope: !5756)
!5825 = !DILocation(line: 255, column: 22, scope: !5743)
!5826 = !DILocation(line: 255, column: 26, scope: !5743)
!5827 = !DILocation(line: 255, column: 32, scope: !5743)
!5828 = !DILocation(line: 255, column: 5, scope: !5743)
!5829 = !DILocation(line: 256, column: 10, scope: !5708)
!5830 = !DILocation(line: 256, column: 3, scope: !5708)
!5831 = !DILocation(line: 257, column: 1, scope: !5708)
!5832 = distinct !DISubprogram(name: "copy_statement_list", scope: !3, file: !3, line: 630, type: !5833, scopeLine: 631, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5833 = !DISubroutineType(types: !5834)
!5834 = !{null, !2585}
!5835 = !DILocalVariable(name: "tp", arg: 1, scope: !5832, file: !3, line: 630, type: !2585)
!5836 = !DILocation(line: 630, column: 28, scope: !5832)
!5837 = !DILocalVariable(name: "oi", scope: !5832, file: !3, line: 632, type: !5838)
!5838 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree_stmt_iterator", file: !1708, line: 35, baseType: !5839)
!5839 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1708, line: 32, size: 128, elements: !5840)
!5840 = !{!5841, !5842}
!5841 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5839, file: !1708, line: 33, baseType: !3750, size: 64)
!5842 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5839, file: !1708, line: 34, baseType: !2586, size: 64, offset: 64)
!5843 = !DILocation(line: 632, column: 22, scope: !5832)
!5844 = !DILocalVariable(name: "ni", scope: !5832, file: !3, line: 632, type: !5838)
!5845 = !DILocation(line: 632, column: 26, scope: !5832)
!5846 = !DILocalVariable(name: "new_tree", scope: !5832, file: !3, line: 633, type: !2586)
!5847 = !DILocation(line: 633, column: 8, scope: !5832)
!5848 = !DILocation(line: 635, column: 14, scope: !5832)
!5849 = !DILocation(line: 635, column: 12, scope: !5832)
!5850 = !DILocation(line: 636, column: 19, scope: !5832)
!5851 = !DILocation(line: 636, column: 8, scope: !5832)
!5852 = !DILocation(line: 637, column: 20, scope: !5832)
!5853 = !DILocation(line: 637, column: 19, scope: !5832)
!5854 = !DILocation(line: 637, column: 8, scope: !5832)
!5855 = !DILocation(line: 638, column: 26, scope: !5832)
!5856 = !DILocation(line: 638, column: 3, scope: !5832)
!5857 = !DILocation(line: 638, column: 24, scope: !5832)
!5858 = !DILocation(line: 639, column: 9, scope: !5832)
!5859 = !DILocation(line: 639, column: 4, scope: !5832)
!5860 = !DILocation(line: 639, column: 7, scope: !5832)
!5861 = !DILocation(line: 641, column: 3, scope: !5832)
!5862 = !DILocation(line: 641, column: 11, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5864, file: !3, line: 641, column: 3)
!5864 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 641, column: 3)
!5865 = !DILocation(line: 641, column: 10, scope: !5863)
!5866 = !DILocation(line: 641, column: 3, scope: !5864)
!5867 = !DILocalVariable(name: "stmt", scope: !5868, file: !3, line: 643, type: !2586)
!5868 = distinct !DILexicalBlock(scope: !5863, file: !3, line: 642, column: 5)
!5869 = !DILocation(line: 643, column: 12, scope: !5868)
!5870 = !DILocation(line: 643, column: 19, scope: !5868)
!5871 = !DILocation(line: 644, column: 11, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 644, column: 11)
!5873 = !DILocation(line: 644, column: 28, scope: !5872)
!5874 = !DILocation(line: 644, column: 11, scope: !5868)
!5875 = !DILocation(line: 645, column: 2, scope: !5872)
!5876 = !DILocation(line: 646, column: 28, scope: !5868)
!5877 = !DILocation(line: 646, column: 7, scope: !5868)
!5878 = !DILocation(line: 647, column: 5, scope: !5868)
!5879 = !DILocation(line: 641, column: 27, scope: !5863)
!5880 = !DILocation(line: 641, column: 3, scope: !5863)
!5881 = distinct !{!5881, !5866, !5882}
!5882 = !DILocation(line: 647, column: 5, scope: !5864)
!5883 = !DILocation(line: 648, column: 1, scope: !5832)
!5884 = distinct !DISubprogram(name: "remap_save_expr", scope: !3, file: !3, line: 4103, type: !5885, scopeLine: 4104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5885 = !DISubroutineType(types: !5886)
!5886 = !{null, !2585, !2870, !4491}
!5887 = !DILocalVariable(name: "tp", arg: 1, scope: !5884, file: !3, line: 4103, type: !2585)
!5888 = !DILocation(line: 4103, column: 24, scope: !5884)
!5889 = !DILocalVariable(name: "st_", arg: 2, scope: !5884, file: !3, line: 4103, type: !2870)
!5890 = !DILocation(line: 4103, column: 34, scope: !5884)
!5891 = !DILocalVariable(name: "walk_subtrees", arg: 3, scope: !5884, file: !3, line: 4103, type: !4491)
!5892 = !DILocation(line: 4103, column: 44, scope: !5884)
!5893 = !DILocalVariable(name: "st", scope: !5884, file: !3, line: 4105, type: !3534)
!5894 = !DILocation(line: 4105, column: 25, scope: !5884)
!5895 = !DILocation(line: 4105, column: 55, scope: !5884)
!5896 = !DILocation(line: 4105, column: 30, scope: !5884)
!5897 = !DILocalVariable(name: "n", scope: !5884, file: !3, line: 4106, type: !2585)
!5898 = !DILocation(line: 4106, column: 9, scope: !5884)
!5899 = !DILocalVariable(name: "t", scope: !5884, file: !3, line: 4107, type: !2586)
!5900 = !DILocation(line: 4107, column: 8, scope: !5884)
!5901 = !DILocation(line: 4110, column: 38, scope: !5884)
!5902 = !DILocation(line: 4110, column: 43, scope: !5884)
!5903 = !DILocation(line: 4110, column: 42, scope: !5884)
!5904 = !DILocation(line: 4110, column: 16, scope: !5884)
!5905 = !DILocation(line: 4110, column: 7, scope: !5884)
!5906 = !DILocation(line: 4110, column: 5, scope: !5884)
!5907 = !DILocation(line: 4113, column: 8, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5884, file: !3, line: 4113, column: 7)
!5909 = !DILocation(line: 4113, column: 7, scope: !5884)
!5910 = !DILocation(line: 4115, column: 11, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 4114, column: 5)
!5912 = !DILocation(line: 4115, column: 9, scope: !5911)
!5913 = !DILocation(line: 4118, column: 39, scope: !5911)
!5914 = !DILocation(line: 4118, column: 28, scope: !5911)
!5915 = !DILocation(line: 4118, column: 33, scope: !5911)
!5916 = !DILocation(line: 4118, column: 32, scope: !5911)
!5917 = !DILocation(line: 4118, column: 8, scope: !5911)
!5918 = !DILocation(line: 4118, column: 37, scope: !5911)
!5919 = !DILocation(line: 4120, column: 37, scope: !5911)
!5920 = !DILocation(line: 4120, column: 28, scope: !5911)
!5921 = !DILocation(line: 4120, column: 32, scope: !5911)
!5922 = !DILocation(line: 4120, column: 8, scope: !5911)
!5923 = !DILocation(line: 4120, column: 35, scope: !5911)
!5924 = !DILocation(line: 4121, column: 5, scope: !5911)
!5925 = !DILocation(line: 4125, column: 8, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 4123, column: 5)
!5927 = !DILocation(line: 4125, column: 22, scope: !5926)
!5928 = !DILocation(line: 4126, column: 12, scope: !5926)
!5929 = !DILocation(line: 4126, column: 11, scope: !5926)
!5930 = !DILocation(line: 4126, column: 9, scope: !5926)
!5931 = !DILocation(line: 4130, column: 9, scope: !5884)
!5932 = !DILocation(line: 4130, column: 4, scope: !5884)
!5933 = !DILocation(line: 4130, column: 7, scope: !5884)
!5934 = !DILocation(line: 4131, column: 1, scope: !5884)
!5935 = distinct !DISubprogram(name: "copy_bind_expr", scope: !3, file: !3, line: 651, type: !5936, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5936 = !DISubroutineType(types: !5937)
!5937 = !{null, !2585, !4491, !3983}
!5938 = !DILocalVariable(name: "tp", arg: 1, scope: !5935, file: !3, line: 651, type: !2585)
!5939 = !DILocation(line: 651, column: 23, scope: !5935)
!5940 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5935, file: !3, line: 651, type: !4491)
!5941 = !DILocation(line: 651, column: 32, scope: !5935)
!5942 = !DILocalVariable(name: "id", arg: 3, scope: !5935, file: !3, line: 651, type: !3983)
!5943 = !DILocation(line: 651, column: 63, scope: !5935)
!5944 = !DILocalVariable(name: "block", scope: !5935, file: !3, line: 653, type: !2586)
!5945 = !DILocation(line: 653, column: 8, scope: !5935)
!5946 = !DILocation(line: 653, column: 16, scope: !5935)
!5947 = !DILocation(line: 655, column: 16, scope: !5935)
!5948 = !DILocation(line: 655, column: 20, scope: !5935)
!5949 = !DILocation(line: 655, column: 3, scope: !5935)
!5950 = !DILocation(line: 656, column: 7, scope: !5951)
!5951 = distinct !DILexicalBlock(scope: !5935, file: !3, line: 656, column: 7)
!5952 = !DILocation(line: 656, column: 7, scope: !5935)
!5953 = !DILocation(line: 658, column: 28, scope: !5954)
!5954 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 657, column: 5)
!5955 = !DILocation(line: 658, column: 7, scope: !5954)
!5956 = !DILocation(line: 659, column: 31, scope: !5954)
!5957 = !DILocation(line: 659, column: 7, scope: !5954)
!5958 = !DILocation(line: 659, column: 29, scope: !5954)
!5959 = !DILocation(line: 660, column: 5, scope: !5954)
!5960 = !DILocation(line: 662, column: 7, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5935, file: !3, line: 662, column: 7)
!5962 = !DILocation(line: 662, column: 7, scope: !5935)
!5963 = !DILocation(line: 665, column: 41, scope: !5961)
!5964 = !DILocation(line: 665, column: 69, scope: !5961)
!5965 = !DILocation(line: 665, column: 28, scope: !5961)
!5966 = !DILocation(line: 665, column: 5, scope: !5961)
!5967 = !DILocation(line: 665, column: 26, scope: !5961)
!5968 = !DILocation(line: 666, column: 1, scope: !5935)
!5969 = distinct !DISubprogram(name: "copy_tree_r", scope: !3, file: !3, line: 4031, type: !4489, scopeLine: 4032, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!5970 = !DILocalVariable(name: "tp", arg: 1, scope: !5969, file: !3, line: 4031, type: !2585)
!5971 = !DILocation(line: 4031, column: 20, scope: !5969)
!5972 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5969, file: !3, line: 4031, type: !4491)
!5973 = !DILocation(line: 4031, column: 29, scope: !5969)
!5974 = !DILocalVariable(name: "data", arg: 3, scope: !5969, file: !3, line: 4031, type: !2870)
!5975 = !DILocation(line: 4031, column: 50, scope: !5969)
!5976 = !DILocalVariable(name: "code", scope: !5969, file: !3, line: 4033, type: !134)
!5977 = !DILocation(line: 4033, column: 18, scope: !5969)
!5978 = !DILocation(line: 4033, column: 25, scope: !5969)
!5979 = !DILocalVariable(name: "cl", scope: !5969, file: !3, line: 4034, type: !596)
!5980 = !DILocation(line: 4034, column: 24, scope: !5969)
!5981 = !DILocation(line: 4034, column: 29, scope: !5969)
!5982 = !DILocation(line: 4037, column: 7, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 4037, column: 7)
!5984 = !DILocation(line: 4038, column: 7, scope: !5983)
!5985 = !DILocation(line: 4038, column: 10, scope: !5983)
!5986 = !DILocation(line: 4038, column: 15, scope: !5983)
!5987 = !DILocation(line: 4039, column: 7, scope: !5983)
!5988 = !DILocation(line: 4039, column: 10, scope: !5983)
!5989 = !DILocation(line: 4039, column: 15, scope: !5983)
!5990 = !DILocation(line: 4040, column: 7, scope: !5983)
!5991 = !DILocation(line: 4040, column: 10, scope: !5983)
!5992 = !DILocation(line: 4040, column: 15, scope: !5983)
!5993 = !DILocation(line: 4041, column: 7, scope: !5983)
!5994 = !DILocation(line: 4041, column: 10, scope: !5983)
!5995 = !DILocation(line: 4041, column: 15, scope: !5983)
!5996 = !DILocation(line: 4037, column: 7, scope: !5969)
!5997 = !DILocalVariable(name: "chain", scope: !5998, file: !3, line: 4045, type: !2586)
!5998 = distinct !DILexicalBlock(scope: !5983, file: !3, line: 4042, column: 5)
!5999 = !DILocation(line: 4045, column: 12, scope: !5998)
!6000 = !DILocalVariable(name: "new_tree", scope: !5998, file: !3, line: 4045, type: !2586)
!6001 = !DILocation(line: 4045, column: 31, scope: !5998)
!6002 = !DILocation(line: 4047, column: 15, scope: !5998)
!6003 = !DILocation(line: 4047, column: 13, scope: !5998)
!6004 = !DILocation(line: 4050, column: 18, scope: !5998)
!6005 = !DILocation(line: 4050, column: 16, scope: !5998)
!6006 = !DILocation(line: 4053, column: 11, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 4053, column: 11)
!6008 = !DILocation(line: 4053, column: 24, scope: !6007)
!6009 = !DILocation(line: 4053, column: 41, scope: !6007)
!6010 = !DILocation(line: 4053, column: 40, scope: !6007)
!6011 = !DILocation(line: 4053, column: 27, scope: !6007)
!6012 = !DILocation(line: 4053, column: 11, scope: !5998)
!6013 = !DILocation(line: 4054, column: 18, scope: !6007)
!6014 = !DILocation(line: 4054, column: 9, scope: !6007)
!6015 = !DILocation(line: 4056, column: 13, scope: !5998)
!6016 = !DILocation(line: 4056, column: 8, scope: !5998)
!6017 = !DILocation(line: 4056, column: 11, scope: !5998)
!6018 = !DILocation(line: 4060, column: 11, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 4060, column: 11)
!6020 = !DILocation(line: 4060, column: 16, scope: !6019)
!6021 = !DILocation(line: 4061, column: 4, scope: !6019)
!6022 = !DILocation(line: 4061, column: 7, scope: !6019)
!6023 = !DILocation(line: 4061, column: 12, scope: !6019)
!6024 = !DILocation(line: 4062, column: 4, scope: !6019)
!6025 = !DILocation(line: 4062, column: 7, scope: !6019)
!6026 = !DILocation(line: 4062, column: 12, scope: !6019)
!6027 = !DILocation(line: 4060, column: 11, scope: !5998)
!6028 = !DILocation(line: 4063, column: 21, scope: !6019)
!6029 = !DILocation(line: 4063, column: 2, scope: !6019)
!6030 = !DILocation(line: 4063, column: 19, scope: !6019)
!6031 = !DILocation(line: 4067, column: 11, scope: !6032)
!6032 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 4067, column: 11)
!6033 = !DILocation(line: 4067, column: 27, scope: !6032)
!6034 = !DILocation(line: 4067, column: 11, scope: !5998)
!6035 = !DILocation(line: 4068, column: 2, scope: !6032)
!6036 = !DILocation(line: 4068, column: 24, scope: !6032)
!6037 = !DILocation(line: 4069, column: 5, scope: !5998)
!6038 = !DILocation(line: 4070, column: 12, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !5983, file: !3, line: 4070, column: 12)
!6040 = !DILocation(line: 4070, column: 17, scope: !6039)
!6041 = !DILocation(line: 4070, column: 12, scope: !5983)
!6042 = !DILocalVariable(name: "new_tree", scope: !6043, file: !3, line: 4074, type: !2586)
!6043 = distinct !DILexicalBlock(scope: !6039, file: !3, line: 4071, column: 5)
!6044 = !DILocation(line: 4074, column: 12, scope: !6043)
!6045 = !DILocation(line: 4076, column: 18, scope: !6043)
!6046 = !DILocation(line: 4076, column: 16, scope: !6043)
!6047 = !DILocation(line: 4079, column: 11, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 4079, column: 11)
!6049 = !DILocation(line: 4079, column: 24, scope: !6048)
!6050 = !DILocation(line: 4079, column: 41, scope: !6048)
!6051 = !DILocation(line: 4079, column: 40, scope: !6048)
!6052 = !DILocation(line: 4079, column: 27, scope: !6048)
!6053 = !DILocation(line: 4079, column: 11, scope: !6043)
!6054 = !DILocation(line: 4080, column: 18, scope: !6048)
!6055 = !DILocation(line: 4080, column: 9, scope: !6048)
!6056 = !DILocation(line: 4082, column: 37, scope: !6043)
!6057 = !DILocation(line: 4082, column: 7, scope: !6043)
!6058 = !DILocation(line: 4082, column: 35, scope: !6043)
!6059 = !DILocation(line: 4084, column: 13, scope: !6043)
!6060 = !DILocation(line: 4084, column: 8, scope: !6043)
!6061 = !DILocation(line: 4084, column: 11, scope: !6043)
!6062 = !DILocation(line: 4085, column: 5, scope: !6043)
!6063 = !DILocation(line: 4086, column: 12, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6039, file: !3, line: 4086, column: 12)
!6065 = !DILocation(line: 4086, column: 35, scope: !6064)
!6066 = !DILocation(line: 4086, column: 12, scope: !6039)
!6067 = !DILocation(line: 4087, column: 6, scope: !6064)
!6068 = !DILocation(line: 4087, column: 20, scope: !6064)
!6069 = !DILocation(line: 4087, column: 5, scope: !6064)
!6070 = !DILocation(line: 4088, column: 12, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 4088, column: 12)
!6072 = !DILocation(line: 4088, column: 35, scope: !6071)
!6073 = !DILocation(line: 4088, column: 12, scope: !6064)
!6074 = !DILocation(line: 4089, column: 6, scope: !6071)
!6075 = !DILocation(line: 4089, column: 20, scope: !6071)
!6076 = !DILocation(line: 4089, column: 5, scope: !6071)
!6077 = !DILocation(line: 4090, column: 12, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !6071, file: !3, line: 4090, column: 12)
!6079 = !DILocation(line: 4090, column: 35, scope: !6078)
!6080 = !DILocation(line: 4090, column: 12, scope: !6071)
!6081 = !DILocation(line: 4091, column: 6, scope: !6078)
!6082 = !DILocation(line: 4091, column: 20, scope: !6078)
!6083 = !DILocation(line: 4091, column: 5, scope: !6078)
!6084 = !DILocation(line: 4093, column: 5, scope: !6078)
!6085 = !DILocation(line: 4094, column: 3, scope: !5969)
!6086 = distinct !DISubprogram(name: "tree_inlinable_function_p", scope: !3, file: !3, line: 2943, type: !6087, scopeLine: 2944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6087 = !DISubroutineType(types: !6088)
!6088 = !{!2706, !2586}
!6089 = !DILocalVariable(name: "fn", arg: 1, scope: !6086, file: !3, line: 2943, type: !2586)
!6090 = !DILocation(line: 2943, column: 33, scope: !6086)
!6091 = !DILocalVariable(name: "inlinable", scope: !6086, file: !3, line: 2945, type: !2706)
!6092 = !DILocation(line: 2945, column: 8, scope: !6086)
!6093 = !DILocalVariable(name: "do_warning", scope: !6086, file: !3, line: 2946, type: !2706)
!6094 = !DILocation(line: 2946, column: 8, scope: !6086)
!6095 = !DILocalVariable(name: "always_inline", scope: !6086, file: !3, line: 2947, type: !2586)
!6096 = !DILocation(line: 2947, column: 8, scope: !6086)
!6097 = !DILocation(line: 2951, column: 7, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 2951, column: 7)
!6099 = !DILocation(line: 2951, column: 7, scope: !6086)
!6100 = !DILocation(line: 2952, column: 5, scope: !6098)
!6101 = !DILocation(line: 2955, column: 17, scope: !6086)
!6102 = !DILocation(line: 2956, column: 3, scope: !6086)
!6103 = !DILocation(line: 2956, column: 6, scope: !6086)
!6104 = !DILocation(line: 2957, column: 3, scope: !6086)
!6105 = !DILocation(line: 2957, column: 7, scope: !6086)
!6106 = !DILocation(line: 2958, column: 3, scope: !6086)
!6107 = !DILocation(line: 2958, column: 7, scope: !6086)
!6108 = !DILocation(line: 2958, column: 6, scope: !6086)
!6109 = !DILocation(line: 0, scope: !6086)
!6110 = !DILocation(line: 2955, column: 16, scope: !6086)
!6111 = !DILocation(line: 2955, column: 14, scope: !6086)
!6112 = !DILocation(line: 2960, column: 54, scope: !6086)
!6113 = !DILocation(line: 2960, column: 19, scope: !6086)
!6114 = !DILocation(line: 2960, column: 17, scope: !6086)
!6115 = !DILocation(line: 2962, column: 7, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !6086, file: !3, line: 2962, column: 7)
!6117 = !DILocation(line: 2963, column: 7, scope: !6116)
!6118 = !DILocation(line: 2963, column: 10, scope: !6116)
!6119 = !DILocation(line: 2963, column: 24, scope: !6116)
!6120 = !DILocation(line: 2962, column: 7, scope: !6086)
!6121 = !DILocation(line: 2965, column: 11, scope: !6122)
!6122 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2965, column: 11)
!6123 = distinct !DILexicalBlock(scope: !6116, file: !3, line: 2964, column: 5)
!6124 = !DILocation(line: 2965, column: 11, scope: !6123)
!6125 = !DILocation(line: 2967, column: 53, scope: !6122)
!6126 = !DILocation(line: 2966, column: 9, scope: !6122)
!6127 = !DILocation(line: 2968, column: 17, scope: !6123)
!6128 = !DILocation(line: 2969, column: 5, scope: !6123)
!6129 = !DILocation(line: 2973, column: 13, scope: !6130)
!6130 = distinct !DILexicalBlock(scope: !6116, file: !3, line: 2973, column: 12)
!6131 = !DILocation(line: 2974, column: 5, scope: !6130)
!6132 = !DILocation(line: 2974, column: 8, scope: !6130)
!6133 = !DILocation(line: 2973, column: 12, scope: !6116)
!6134 = !DILocation(line: 2975, column: 15, scope: !6130)
!6135 = !DILocation(line: 2975, column: 5, scope: !6130)
!6136 = !DILocation(line: 2977, column: 45, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !6130, file: !3, line: 2977, column: 12)
!6138 = !DILocation(line: 2977, column: 13, scope: !6137)
!6139 = !DILocation(line: 2977, column: 12, scope: !6130)
!6140 = !DILocation(line: 2979, column: 11, scope: !6141)
!6141 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 2979, column: 11)
!6142 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 2978, column: 5)
!6143 = !DILocation(line: 2979, column: 11, scope: !6142)
!6144 = !DILocation(line: 2981, column: 63, scope: !6141)
!6145 = !DILocation(line: 2980, column: 9, scope: !6141)
!6146 = !DILocation(line: 2982, column: 17, scope: !6142)
!6147 = !DILocation(line: 2983, column: 5, scope: !6142)
!6148 = !DILocation(line: 2985, column: 32, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 2985, column: 12)
!6150 = !DILocation(line: 2985, column: 12, scope: !6149)
!6151 = !DILocation(line: 2985, column: 12, scope: !6137)
!6152 = !DILocation(line: 2994, column: 11, scope: !6153)
!6153 = distinct !DILexicalBlock(scope: !6154, file: !3, line: 2994, column: 11)
!6154 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 2986, column: 5)
!6155 = !DILocation(line: 2994, column: 11, scope: !6154)
!6156 = !DILocation(line: 2995, column: 9, scope: !6153)
!6157 = !DILocation(line: 2995, column: 34, scope: !6153)
!6158 = !DILocation(line: 2995, column: 2, scope: !6153)
!6159 = !DILocation(line: 2996, column: 16, scope: !6160)
!6160 = distinct !DILexicalBlock(scope: !6153, file: !3, line: 2996, column: 16)
!6161 = !DILocation(line: 2996, column: 16, scope: !6153)
!6162 = !DILocation(line: 2997, column: 24, scope: !6160)
!6163 = !DILocation(line: 2997, column: 49, scope: !6160)
!6164 = !DILocation(line: 2997, column: 2, scope: !6160)
!6165 = !DILocation(line: 2999, column: 17, scope: !6154)
!6166 = !DILocation(line: 3000, column: 5, scope: !6154)
!6167 = !DILocation(line: 3003, column: 28, scope: !6086)
!6168 = !DILocation(line: 3003, column: 27, scope: !6086)
!6169 = !DILocation(line: 3003, column: 3, scope: !6086)
!6170 = !DILocation(line: 3003, column: 25, scope: !6086)
!6171 = !DILocation(line: 3005, column: 10, scope: !6086)
!6172 = !DILocation(line: 3005, column: 3, scope: !6086)
!6173 = !DILocation(line: 3006, column: 1, scope: !6086)
!6174 = distinct !DISubprogram(name: "inline_forbidden_p", scope: !3, file: !3, line: 2905, type: !6087, scopeLine: 2906, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6175 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6174, file: !3, line: 2905, type: !2586)
!6176 = !DILocation(line: 2905, column: 26, scope: !6174)
!6177 = !DILocalVariable(name: "fun", scope: !6174, file: !3, line: 2907, type: !3303)
!6178 = !DILocation(line: 2907, column: 20, scope: !6174)
!6179 = !DILocation(line: 2907, column: 26, scope: !6174)
!6180 = !DILocalVariable(name: "wi", scope: !6174, file: !3, line: 2908, type: !4258)
!6181 = !DILocation(line: 2908, column: 25, scope: !6174)
!6182 = !DILocalVariable(name: "visited_nodes", scope: !6174, file: !3, line: 2909, type: !4243)
!6183 = !DILocation(line: 2909, column: 25, scope: !6174)
!6184 = !DILocalVariable(name: "bb", scope: !6174, file: !3, line: 2910, type: !3473)
!6185 = !DILocation(line: 2910, column: 15, scope: !6174)
!6186 = !DILocalVariable(name: "forbidden_p", scope: !6174, file: !3, line: 2911, type: !2706)
!6187 = !DILocation(line: 2911, column: 8, scope: !6174)
!6188 = !DILocation(line: 2914, column: 45, scope: !6174)
!6189 = !DILocation(line: 2914, column: 50, scope: !6174)
!6190 = !DILocation(line: 2914, column: 29, scope: !6174)
!6191 = !DILocation(line: 2914, column: 27, scope: !6174)
!6192 = !DILocation(line: 2915, column: 7, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 2915, column: 7)
!6194 = !DILocation(line: 2915, column: 31, scope: !6193)
!6195 = !DILocation(line: 2915, column: 7, scope: !6174)
!6196 = !DILocation(line: 2916, column: 5, scope: !6193)
!6197 = !DILocation(line: 2920, column: 19, scope: !6174)
!6198 = !DILocation(line: 2920, column: 17, scope: !6174)
!6199 = !DILocation(line: 2921, column: 3, scope: !6174)
!6200 = !DILocation(line: 2922, column: 22, scope: !6174)
!6201 = !DILocation(line: 2922, column: 13, scope: !6174)
!6202 = !DILocation(line: 2922, column: 6, scope: !6174)
!6203 = !DILocation(line: 2922, column: 11, scope: !6174)
!6204 = !DILocation(line: 2923, column: 13, scope: !6174)
!6205 = !DILocation(line: 2923, column: 6, scope: !6174)
!6206 = !DILocation(line: 2923, column: 11, scope: !6174)
!6207 = !DILocation(line: 2925, column: 3, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 2925, column: 3)
!6209 = !DILocation(line: 2925, column: 3, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 2925, column: 3)
!6211 = !DILocalVariable(name: "ret", scope: !6212, file: !3, line: 2927, type: !2917)
!6212 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 2926, column: 5)
!6213 = !DILocation(line: 2927, column: 14, scope: !6212)
!6214 = !DILocalVariable(name: "seq", scope: !6212, file: !3, line: 2928, type: !2907)
!6215 = !DILocation(line: 2928, column: 18, scope: !6212)
!6216 = !DILocation(line: 2928, column: 32, scope: !6212)
!6217 = !DILocation(line: 2928, column: 24, scope: !6212)
!6218 = !DILocation(line: 2929, column: 30, scope: !6212)
!6219 = !DILocation(line: 2929, column: 13, scope: !6212)
!6220 = !DILocation(line: 2929, column: 11, scope: !6212)
!6221 = !DILocation(line: 2930, column: 22, scope: !6212)
!6222 = !DILocation(line: 2930, column: 26, scope: !6212)
!6223 = !DILocation(line: 2930, column: 21, scope: !6212)
!6224 = !DILocation(line: 2930, column: 19, scope: !6212)
!6225 = !DILocation(line: 2931, column: 11, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 2931, column: 11)
!6227 = !DILocation(line: 2931, column: 11, scope: !6212)
!6228 = !DILocation(line: 2932, column: 2, scope: !6226)
!6229 = !DILocation(line: 2933, column: 5, scope: !6212)
!6230 = distinct !{!6230, !6207, !6231}
!6231 = !DILocation(line: 2933, column: 5, scope: !6208)
!6232 = !DILocation(line: 2935, column: 24, scope: !6174)
!6233 = !DILocation(line: 2935, column: 3, scope: !6174)
!6234 = !DILocation(line: 2936, column: 10, scope: !6174)
!6235 = !DILocation(line: 2936, column: 3, scope: !6174)
!6236 = !DILocation(line: 2937, column: 1, scope: !6174)
!6237 = distinct !DISubprogram(name: "estimate_move_cost", scope: !3, file: !3, line: 3012, type: !6238, scopeLine: 3013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6238 = !DISubroutineType(types: !6239)
!6239 = !{!2683, !2586}
!6240 = !DILocalVariable(name: "type", arg: 1, scope: !6237, file: !3, line: 3012, type: !2586)
!6241 = !DILocation(line: 3012, column: 26, scope: !6237)
!6242 = !DILocalVariable(name: "size", scope: !6237, file: !3, line: 3014, type: !2642)
!6243 = !DILocation(line: 3014, column: 17, scope: !6237)
!6244 = !DILocation(line: 3016, column: 3, scope: !6237)
!6245 = !DILocation(line: 3018, column: 29, scope: !6237)
!6246 = !DILocation(line: 3018, column: 10, scope: !6237)
!6247 = !DILocation(line: 3018, column: 8, scope: !6237)
!6248 = !DILocation(line: 3020, column: 7, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6237, file: !3, line: 3020, column: 7)
!6250 = !DILocation(line: 3020, column: 12, scope: !6249)
!6251 = !DILocation(line: 3020, column: 16, scope: !6249)
!6252 = !DILocation(line: 3020, column: 19, scope: !6249)
!6253 = !DILocation(line: 3020, column: 44, scope: !6249)
!6254 = !DILocation(line: 3020, column: 42, scope: !6249)
!6255 = !DILocation(line: 3020, column: 26, scope: !6249)
!6256 = !DILocation(line: 3020, column: 24, scope: !6249)
!6257 = !DILocation(line: 3020, column: 7, scope: !6237)
!6258 = !DILocation(line: 3022, column: 5, scope: !6249)
!6259 = !DILocation(line: 3024, column: 14, scope: !6249)
!6260 = !DILocation(line: 3024, column: 19, scope: !6249)
!6261 = !DILocation(line: 3024, column: 37, scope: !6249)
!6262 = !DILocation(line: 3024, column: 42, scope: !6249)
!6263 = !DILocation(line: 3024, column: 12, scope: !6249)
!6264 = !DILocation(line: 3024, column: 5, scope: !6249)
!6265 = !DILocation(line: 3025, column: 1, scope: !6237)
!6266 = distinct !DISubprogram(name: "estimate_num_insns", scope: !3, file: !3, line: 3176, type: !6267, scopeLine: 3177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6267 = !DISubroutineType(types: !6268)
!6268 = !{!2683, !2917, !6269}
!6269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4282, size: 64)
!6270 = !DILocalVariable(name: "stmt", arg: 1, scope: !6266, file: !3, line: 3176, type: !2917)
!6271 = !DILocation(line: 3176, column: 28, scope: !6266)
!6272 = !DILocalVariable(name: "weights", arg: 2, scope: !6266, file: !3, line: 3176, type: !6269)
!6273 = !DILocation(line: 3176, column: 47, scope: !6266)
!6274 = !DILocalVariable(name: "cost", scope: !6266, file: !3, line: 3178, type: !7)
!6275 = !DILocation(line: 3178, column: 12, scope: !6266)
!6276 = !DILocalVariable(name: "i", scope: !6266, file: !3, line: 3178, type: !7)
!6277 = !DILocation(line: 3178, column: 18, scope: !6266)
!6278 = !DILocalVariable(name: "code", scope: !6266, file: !3, line: 3179, type: !1617)
!6279 = !DILocation(line: 3179, column: 20, scope: !6266)
!6280 = !DILocation(line: 3179, column: 40, scope: !6266)
!6281 = !DILocation(line: 3179, column: 27, scope: !6266)
!6282 = !DILocalVariable(name: "lhs", scope: !6266, file: !3, line: 3180, type: !2586)
!6283 = !DILocation(line: 3180, column: 8, scope: !6266)
!6284 = !DILocalVariable(name: "rhs", scope: !6266, file: !3, line: 3181, type: !2586)
!6285 = !DILocation(line: 3181, column: 8, scope: !6266)
!6286 = !DILocation(line: 3183, column: 11, scope: !6266)
!6287 = !DILocation(line: 3183, column: 3, scope: !6266)
!6288 = !DILocation(line: 3204, column: 32, scope: !6289)
!6289 = distinct !DILexicalBlock(scope: !6266, file: !3, line: 3184, column: 5)
!6290 = !DILocation(line: 3204, column: 13, scope: !6289)
!6291 = !DILocation(line: 3204, column: 11, scope: !6289)
!6292 = !DILocation(line: 3205, column: 33, scope: !6289)
!6293 = !DILocation(line: 3205, column: 13, scope: !6289)
!6294 = !DILocation(line: 3205, column: 11, scope: !6289)
!6295 = !DILocation(line: 3207, column: 26, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6289, file: !3, line: 3207, column: 11)
!6297 = !DILocation(line: 3207, column: 11, scope: !6296)
!6298 = !DILocation(line: 3207, column: 11, scope: !6289)
!6299 = !DILocation(line: 3208, column: 7, scope: !6296)
!6300 = !DILocation(line: 3208, column: 2, scope: !6296)
!6301 = !DILocation(line: 3210, column: 29, scope: !6296)
!6302 = !DILocation(line: 3210, column: 9, scope: !6296)
!6303 = !DILocation(line: 3210, column: 7, scope: !6296)
!6304 = !DILocation(line: 3212, column: 27, scope: !6305)
!6305 = distinct !DILexicalBlock(scope: !6289, file: !3, line: 3212, column: 11)
!6306 = !DILocation(line: 3212, column: 12, scope: !6305)
!6307 = !DILocation(line: 3212, column: 32, scope: !6305)
!6308 = !DILocation(line: 3212, column: 61, scope: !6305)
!6309 = !DILocation(line: 3212, column: 36, scope: !6305)
!6310 = !DILocation(line: 3212, column: 11, scope: !6289)
!6311 = !DILocation(line: 3213, column: 30, scope: !6305)
!6312 = !DILocation(line: 3213, column: 10, scope: !6305)
!6313 = !DILocation(line: 3213, column: 7, scope: !6305)
!6314 = !DILocation(line: 3213, column: 2, scope: !6305)
!6315 = !DILocation(line: 3215, column: 63, scope: !6289)
!6316 = !DILocation(line: 3215, column: 39, scope: !6289)
!6317 = !DILocation(line: 3215, column: 70, scope: !6289)
!6318 = !DILocation(line: 3216, column: 37, scope: !6289)
!6319 = !DILocation(line: 3216, column: 17, scope: !6289)
!6320 = !DILocation(line: 3217, column: 57, scope: !6289)
!6321 = !DILocation(line: 3217, column: 33, scope: !6289)
!6322 = !DILocation(line: 3217, column: 11, scope: !6289)
!6323 = !DILocation(line: 3218, column: 11, scope: !6289)
!6324 = !DILocation(line: 3219, column: 33, scope: !6289)
!6325 = !DILocation(line: 3219, column: 13, scope: !6289)
!6326 = !DILocation(line: 3215, column: 15, scope: !6289)
!6327 = !DILocation(line: 3215, column: 12, scope: !6289)
!6328 = !DILocation(line: 3220, column: 7, scope: !6289)
!6329 = !DILocation(line: 3223, column: 60, scope: !6289)
!6330 = !DILocation(line: 3223, column: 42, scope: !6289)
!6331 = !DILocation(line: 3223, column: 67, scope: !6289)
!6332 = !DILocation(line: 3224, column: 31, scope: !6289)
!6333 = !DILocation(line: 3224, column: 20, scope: !6289)
!6334 = !DILocation(line: 3225, column: 25, scope: !6289)
!6335 = !DILocation(line: 3225, column: 14, scope: !6289)
!6336 = !DILocation(line: 3223, column: 18, scope: !6289)
!6337 = !DILocation(line: 3223, column: 16, scope: !6289)
!6338 = !DILocation(line: 3223, column: 12, scope: !6289)
!6339 = !DILocation(line: 3226, column: 7, scope: !6289)
!6340 = !DILocation(line: 3234, column: 11, scope: !6341)
!6341 = distinct !DILexicalBlock(scope: !6289, file: !3, line: 3234, column: 11)
!6342 = !DILocation(line: 3234, column: 20, scope: !6341)
!6343 = !DILocation(line: 3234, column: 11, scope: !6289)
!6344 = !DILocation(line: 3235, column: 54, scope: !6341)
!6345 = !DILocation(line: 3235, column: 28, scope: !6341)
!6346 = !DILocation(line: 3235, column: 16, scope: !6341)
!6347 = !DILocation(line: 3235, column: 61, scope: !6341)
!6348 = !DILocation(line: 3235, column: 14, scope: !6341)
!6349 = !DILocation(line: 3235, column: 9, scope: !6341)
!6350 = !DILocation(line: 3237, column: 42, scope: !6341)
!6351 = !DILocation(line: 3237, column: 16, scope: !6341)
!6352 = !DILocation(line: 3237, column: 48, scope: !6341)
!6353 = !DILocation(line: 3237, column: 14, scope: !6341)
!6354 = !DILocation(line: 3238, column: 7, scope: !6289)
!6355 = !DILocalVariable(name: "decl", scope: !6356, file: !3, line: 3242, type: !2586)
!6356 = distinct !DILexicalBlock(scope: !6289, file: !3, line: 3241, column: 7)
!6357 = !DILocation(line: 3242, column: 7, scope: !6356)
!6358 = !DILocation(line: 3242, column: 34, scope: !6356)
!6359 = !DILocation(line: 3242, column: 14, scope: !6356)
!6360 = !DILocalVariable(name: "addr", scope: !6356, file: !3, line: 3243, type: !2586)
!6361 = !DILocation(line: 3243, column: 7, scope: !6356)
!6362 = !DILocation(line: 3243, column: 30, scope: !6356)
!6363 = !DILocation(line: 3243, column: 14, scope: !6356)
!6364 = !DILocalVariable(name: "funtype", scope: !6356, file: !3, line: 3244, type: !2586)
!6365 = !DILocation(line: 3244, column: 7, scope: !6356)
!6366 = !DILocation(line: 3244, column: 17, scope: !6356)
!6367 = !DILocation(line: 3246, column: 6, scope: !6368)
!6368 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3246, column: 6)
!6369 = !DILocation(line: 3246, column: 6, scope: !6356)
!6370 = !DILocation(line: 3247, column: 14, scope: !6368)
!6371 = !DILocation(line: 3247, column: 12, scope: !6368)
!6372 = !DILocation(line: 3247, column: 4, scope: !6368)
!6373 = !DILocation(line: 3249, column: 6, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3249, column: 6)
!6375 = !DILocation(line: 3249, column: 11, scope: !6374)
!6376 = !DILocation(line: 3249, column: 14, scope: !6374)
!6377 = !DILocation(line: 3249, column: 41, scope: !6374)
!6378 = !DILocation(line: 3249, column: 6, scope: !6356)
!6379 = !DILocation(line: 3250, column: 11, scope: !6374)
!6380 = !DILocation(line: 3250, column: 20, scope: !6374)
!6381 = !DILocation(line: 3250, column: 9, scope: !6374)
!6382 = !DILocation(line: 3250, column: 4, scope: !6374)
!6383 = !DILocation(line: 3252, column: 11, scope: !6374)
!6384 = !DILocation(line: 3252, column: 20, scope: !6374)
!6385 = !DILocation(line: 3252, column: 9, scope: !6374)
!6386 = !DILocation(line: 3254, column: 6, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3254, column: 6)
!6388 = !DILocation(line: 3254, column: 11, scope: !6387)
!6389 = !DILocation(line: 3254, column: 14, scope: !6387)
!6390 = !DILocation(line: 3254, column: 41, scope: !6387)
!6391 = !DILocation(line: 3254, column: 6, scope: !6356)
!6392 = !DILocation(line: 3255, column: 12, scope: !6387)
!6393 = !DILocation(line: 3255, column: 4, scope: !6387)
!6394 = !DILocation(line: 3258, column: 8, scope: !6395)
!6395 = distinct !DILexicalBlock(scope: !6387, file: !3, line: 3256, column: 6)
!6396 = !DILocation(line: 3260, column: 8, scope: !6395)
!6397 = !DILocation(line: 3264, column: 15, scope: !6395)
!6398 = !DILocation(line: 3264, column: 24, scope: !6395)
!6399 = !DILocation(line: 3264, column: 13, scope: !6395)
!6400 = !DILocation(line: 3265, column: 8, scope: !6395)
!6401 = !DILocation(line: 3271, column: 8, scope: !6395)
!6402 = !DILocation(line: 3274, column: 8, scope: !6395)
!6403 = !DILocation(line: 3275, column: 6, scope: !6395)
!6404 = !DILocation(line: 3277, column: 6, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3277, column: 6)
!6406 = !DILocation(line: 3277, column: 6, scope: !6356)
!6407 = !DILocation(line: 3278, column: 14, scope: !6405)
!6408 = !DILocation(line: 3278, column: 12, scope: !6405)
!6409 = !DILocation(line: 3278, column: 4, scope: !6405)
!6410 = !DILocation(line: 3280, column: 7, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3280, column: 6)
!6412 = !DILocation(line: 3280, column: 6, scope: !6356)
!6413 = !DILocation(line: 3281, column: 32, scope: !6411)
!6414 = !DILocation(line: 3281, column: 12, scope: !6411)
!6415 = !DILocation(line: 3281, column: 9, scope: !6411)
!6416 = !DILocation(line: 3281, column: 4, scope: !6411)
!6417 = !DILocation(line: 3285, column: 6, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3285, column: 6)
!6419 = !DILocation(line: 3285, column: 11, scope: !6418)
!6420 = !DILocation(line: 3285, column: 14, scope: !6418)
!6421 = !DILocation(line: 3285, column: 6, scope: !6356)
!6422 = !DILocalVariable(name: "arg", scope: !6423, file: !3, line: 3287, type: !2586)
!6423 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 3286, column: 4)
!6424 = !DILocation(line: 3287, column: 11, scope: !6423)
!6425 = !DILocation(line: 3288, column: 17, scope: !6426)
!6426 = distinct !DILexicalBlock(scope: !6423, file: !3, line: 3288, column: 6)
!6427 = !DILocation(line: 3288, column: 15, scope: !6426)
!6428 = !DILocation(line: 3288, column: 11, scope: !6426)
!6429 = !DILocation(line: 3288, column: 40, scope: !6430)
!6430 = distinct !DILexicalBlock(scope: !6426, file: !3, line: 3288, column: 6)
!6431 = !DILocation(line: 3288, column: 6, scope: !6426)
!6432 = !DILocation(line: 3289, column: 13, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 3289, column: 12)
!6434 = !DILocation(line: 3289, column: 12, scope: !6430)
!6435 = !DILocation(line: 3290, column: 38, scope: !6433)
!6436 = !DILocation(line: 3290, column: 18, scope: !6433)
!6437 = !DILocation(line: 3290, column: 15, scope: !6433)
!6438 = !DILocation(line: 3290, column: 10, scope: !6433)
!6439 = !DILocation(line: 3288, column: 51, scope: !6430)
!6440 = !DILocation(line: 3288, column: 49, scope: !6430)
!6441 = !DILocation(line: 3288, column: 6, scope: !6430)
!6442 = distinct !{!6442, !6431, !6443}
!6443 = !DILocation(line: 3290, column: 53, scope: !6426)
!6444 = !DILocation(line: 3291, column: 4, scope: !6423)
!6445 = !DILocation(line: 3292, column: 11, scope: !6446)
!6446 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 3292, column: 11)
!6447 = !DILocation(line: 3292, column: 19, scope: !6446)
!6448 = !DILocation(line: 3292, column: 35, scope: !6446)
!6449 = !DILocation(line: 3292, column: 22, scope: !6446)
!6450 = !DILocation(line: 3292, column: 11, scope: !6418)
!6451 = !DILocalVariable(name: "t", scope: !6452, file: !3, line: 3294, type: !2586)
!6452 = distinct !DILexicalBlock(scope: !6446, file: !3, line: 3293, column: 4)
!6453 = !DILocation(line: 3294, column: 11, scope: !6452)
!6454 = !DILocation(line: 3295, column: 15, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6452, file: !3, line: 3295, column: 6)
!6456 = !DILocation(line: 3295, column: 13, scope: !6455)
!6457 = !DILocation(line: 3295, column: 11, scope: !6455)
!6458 = !DILocation(line: 3295, column: 41, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6455, file: !3, line: 3295, column: 6)
!6460 = !DILocation(line: 3295, column: 43, scope: !6459)
!6461 = !DILocation(line: 3295, column: 46, scope: !6459)
!6462 = !DILocation(line: 3295, column: 51, scope: !6459)
!6463 = !DILocation(line: 3295, column: 48, scope: !6459)
!6464 = !DILocation(line: 0, scope: !6459)
!6465 = !DILocation(line: 3295, column: 6, scope: !6455)
!6466 = !DILocation(line: 3297, column: 13, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 3297, column: 12)
!6468 = !DILocation(line: 3297, column: 12, scope: !6459)
!6469 = !DILocation(line: 3298, column: 38, scope: !6467)
!6470 = !DILocation(line: 3298, column: 18, scope: !6467)
!6471 = !DILocation(line: 3298, column: 15, scope: !6467)
!6472 = !DILocation(line: 3298, column: 10, scope: !6467)
!6473 = !DILocation(line: 3296, column: 12, scope: !6459)
!6474 = !DILocation(line: 3296, column: 10, scope: !6459)
!6475 = !DILocation(line: 3295, column: 6, scope: !6459)
!6476 = distinct !{!6476, !6465, !6477}
!6477 = !DILocation(line: 3298, column: 52, scope: !6455)
!6478 = !DILocation(line: 3299, column: 4, scope: !6452)
!6479 = !DILocation(line: 3302, column: 13, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 3302, column: 6)
!6481 = distinct !DILexicalBlock(scope: !6446, file: !3, line: 3301, column: 4)
!6482 = !DILocation(line: 3302, column: 11, scope: !6480)
!6483 = !DILocation(line: 3302, column: 18, scope: !6484)
!6484 = distinct !DILexicalBlock(scope: !6480, file: !3, line: 3302, column: 6)
!6485 = !DILocation(line: 3302, column: 44, scope: !6484)
!6486 = !DILocation(line: 3302, column: 22, scope: !6484)
!6487 = !DILocation(line: 3302, column: 20, scope: !6484)
!6488 = !DILocation(line: 3302, column: 6, scope: !6480)
!6489 = !DILocalVariable(name: "arg", scope: !6490, file: !3, line: 3304, type: !2586)
!6490 = distinct !DILexicalBlock(scope: !6484, file: !3, line: 3303, column: 8)
!6491 = !DILocation(line: 3304, column: 8, scope: !6490)
!6492 = !DILocation(line: 3304, column: 31, scope: !6490)
!6493 = !DILocation(line: 3304, column: 37, scope: !6490)
!6494 = !DILocation(line: 3304, column: 14, scope: !6490)
!6495 = !DILocation(line: 3305, column: 15, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6490, file: !3, line: 3305, column: 14)
!6497 = !DILocation(line: 3305, column: 14, scope: !6490)
!6498 = !DILocation(line: 3306, column: 33, scope: !6496)
!6499 = !DILocation(line: 3306, column: 13, scope: !6496)
!6500 = !DILocation(line: 3306, column: 10, scope: !6496)
!6501 = !DILocation(line: 3306, column: 5, scope: !6496)
!6502 = !DILocation(line: 3307, column: 8, scope: !6490)
!6503 = !DILocation(line: 3302, column: 52, scope: !6484)
!6504 = !DILocation(line: 3302, column: 6, scope: !6484)
!6505 = distinct !{!6505, !6488, !6506}
!6506 = !DILocation(line: 3307, column: 8, scope: !6480)
!6507 = !DILocation(line: 3310, column: 2, scope: !6356)
!6508 = !DILocation(line: 3320, column: 7, scope: !6289)
!6509 = !DILocation(line: 3323, column: 48, scope: !6289)
!6510 = !DILocation(line: 3323, column: 29, scope: !6289)
!6511 = !DILocation(line: 3323, column: 14, scope: !6289)
!6512 = !DILocation(line: 3323, column: 7, scope: !6289)
!6513 = !DILocation(line: 3328, column: 7, scope: !6289)
!6514 = !DILocation(line: 3334, column: 7, scope: !6289)
!6515 = !DILocation(line: 3337, column: 56, scope: !6289)
!6516 = !DILocation(line: 3337, column: 38, scope: !6289)
!6517 = !DILocation(line: 3337, column: 63, scope: !6289)
!6518 = !DILocation(line: 3337, column: 14, scope: !6289)
!6519 = !DILocation(line: 3337, column: 7, scope: !6289)
!6520 = !DILocation(line: 3340, column: 64, scope: !6289)
!6521 = !DILocation(line: 3340, column: 38, scope: !6289)
!6522 = !DILocation(line: 3340, column: 71, scope: !6289)
!6523 = !DILocation(line: 3340, column: 14, scope: !6289)
!6524 = !DILocation(line: 3340, column: 7, scope: !6289)
!6525 = !DILocation(line: 3343, column: 60, scope: !6289)
!6526 = !DILocation(line: 3343, column: 38, scope: !6289)
!6527 = !DILocation(line: 3343, column: 67, scope: !6289)
!6528 = !DILocation(line: 3343, column: 14, scope: !6289)
!6529 = !DILocation(line: 3343, column: 7, scope: !6289)
!6530 = !DILocation(line: 3346, column: 56, scope: !6289)
!6531 = !DILocation(line: 3346, column: 39, scope: !6289)
!6532 = !DILocation(line: 3346, column: 63, scope: !6289)
!6533 = !DILocation(line: 3346, column: 15, scope: !6289)
!6534 = !DILocation(line: 3347, column: 61, scope: !6289)
!6535 = !DILocation(line: 3347, column: 41, scope: !6289)
!6536 = !DILocation(line: 3347, column: 68, scope: !6289)
!6537 = !DILocation(line: 3347, column: 17, scope: !6289)
!6538 = !DILocation(line: 3347, column: 15, scope: !6289)
!6539 = !DILocation(line: 3346, column: 7, scope: !6289)
!6540 = !DILocation(line: 3356, column: 7, scope: !6289)
!6541 = !DILocation(line: 3359, column: 14, scope: !6289)
!6542 = !DILocation(line: 3359, column: 23, scope: !6289)
!6543 = !DILocation(line: 3359, column: 7, scope: !6289)
!6544 = !DILocation(line: 3362, column: 15, scope: !6289)
!6545 = !DILocation(line: 3362, column: 24, scope: !6289)
!6546 = !DILocation(line: 3363, column: 58, scope: !6289)
!6547 = !DILocation(line: 3363, column: 41, scope: !6289)
!6548 = !DILocation(line: 3363, column: 65, scope: !6289)
!6549 = !DILocation(line: 3363, column: 17, scope: !6289)
!6550 = !DILocation(line: 3363, column: 15, scope: !6289)
!6551 = !DILocation(line: 3364, column: 66, scope: !6289)
!6552 = !DILocation(line: 3364, column: 41, scope: !6289)
!6553 = !DILocation(line: 3364, column: 73, scope: !6289)
!6554 = !DILocation(line: 3364, column: 17, scope: !6289)
!6555 = !DILocation(line: 3364, column: 15, scope: !6289)
!6556 = !DILocation(line: 3362, column: 7, scope: !6289)
!6557 = !DILocation(line: 3374, column: 15, scope: !6289)
!6558 = !DILocation(line: 3374, column: 24, scope: !6289)
!6559 = !DILocation(line: 3375, column: 58, scope: !6289)
!6560 = !DILocation(line: 3375, column: 41, scope: !6289)
!6561 = !DILocation(line: 3375, column: 65, scope: !6289)
!6562 = !DILocation(line: 3375, column: 17, scope: !6289)
!6563 = !DILocation(line: 3375, column: 15, scope: !6289)
!6564 = !DILocation(line: 3374, column: 7, scope: !6289)
!6565 = !DILocation(line: 3378, column: 7, scope: !6289)
!6566 = !DILocation(line: 3379, column: 5, scope: !6289)
!6567 = !DILocation(line: 3381, column: 10, scope: !6266)
!6568 = !DILocation(line: 3381, column: 3, scope: !6266)
!6569 = !DILocation(line: 3382, column: 1, scope: !6266)
!6570 = distinct !DISubprogram(name: "gimple_code", scope: !1618, file: !1618, line: 1052, type: !6571, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6571 = !DISubroutineType(types: !6572)
!6572 = !{!1617, !6573}
!6573 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !2587, line: 60, baseType: !4255)
!6574 = !DILocalVariable(name: "g", arg: 1, scope: !6570, file: !1618, line: 1052, type: !6573)
!6575 = !DILocation(line: 1052, column: 27, scope: !6570)
!6576 = !DILocation(line: 1054, column: 10, scope: !6570)
!6577 = !DILocation(line: 1054, column: 13, scope: !6570)
!6578 = !DILocation(line: 1054, column: 20, scope: !6570)
!6579 = !DILocation(line: 1054, column: 3, scope: !6570)
!6580 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !1618, file: !1618, line: 1694, type: !6581, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6581 = !DISubroutineType(types: !6582)
!6582 = !{!2586, !6573}
!6583 = !DILocalVariable(name: "gs", arg: 1, scope: !6580, file: !1618, line: 1694, type: !6573)
!6584 = !DILocation(line: 1694, column: 33, scope: !6580)
!6585 = !DILocation(line: 1697, column: 21, scope: !6580)
!6586 = !DILocation(line: 1697, column: 10, scope: !6580)
!6587 = !DILocation(line: 1697, column: 3, scope: !6580)
!6588 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !1618, file: !1618, line: 1727, type: !6581, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6589 = !DILocalVariable(name: "gs", arg: 1, scope: !6588, file: !1618, line: 1727, type: !6573)
!6590 = !DILocation(line: 1727, column: 34, scope: !6588)
!6591 = !DILocation(line: 1730, column: 21, scope: !6588)
!6592 = !DILocation(line: 1730, column: 10, scope: !6588)
!6593 = !DILocation(line: 1730, column: 3, scope: !6588)
!6594 = distinct !DISubprogram(name: "estimate_operator_cost", scope: !3, file: !3, line: 3030, type: !6595, scopeLine: 3032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6595 = !DISubroutineType(types: !6596)
!6596 = !{!2683, !134, !6269, !2586, !2586}
!6597 = !DILocalVariable(name: "code", arg: 1, scope: !6594, file: !3, line: 3030, type: !134)
!6598 = !DILocation(line: 3030, column: 40, scope: !6594)
!6599 = !DILocalVariable(name: "weights", arg: 2, scope: !6594, file: !3, line: 3030, type: !6269)
!6600 = !DILocation(line: 3030, column: 59, scope: !6594)
!6601 = !DILocalVariable(name: "op1", arg: 3, scope: !6594, file: !3, line: 3031, type: !2586)
!6602 = !DILocation(line: 3031, column: 9, scope: !6594)
!6603 = !DILocalVariable(name: "op2", arg: 4, scope: !6594, file: !3, line: 3031, type: !2586)
!6604 = !DILocation(line: 3031, column: 36, scope: !6594)
!6605 = !DILocation(line: 3033, column: 11, scope: !6594)
!6606 = !DILocation(line: 3033, column: 3, scope: !6594)
!6607 = !DILocation(line: 3041, column: 7, scope: !6608)
!6608 = distinct !DILexicalBlock(scope: !6594, file: !3, line: 3034, column: 5)
!6609 = !DILocation(line: 3128, column: 7, scope: !6608)
!6610 = !DILocation(line: 3142, column: 11, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 3142, column: 11)
!6612 = !DILocation(line: 3142, column: 27, scope: !6611)
!6613 = !DILocation(line: 3142, column: 11, scope: !6608)
!6614 = !DILocation(line: 3143, column: 16, scope: !6611)
!6615 = !DILocation(line: 3143, column: 25, scope: !6611)
!6616 = !DILocation(line: 3143, column: 9, scope: !6611)
!6617 = !DILocation(line: 3144, column: 7, scope: !6608)
!6618 = !DILocation(line: 3148, column: 7, scope: !6608)
!6619 = !DILocation(line: 3149, column: 7, scope: !6608)
!6620 = !DILocation(line: 3151, column: 1, scope: !6594)
!6621 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !1618, file: !1618, line: 1815, type: !6622, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6622 = !DISubroutineType(types: !6623)
!6623 = !{!134, !6573}
!6624 = !DILocalVariable(name: "gs", arg: 1, scope: !6621, file: !1618, line: 1815, type: !6573)
!6625 = !DILocation(line: 1815, column: 38, scope: !6621)
!6626 = !DILocalVariable(name: "code", scope: !6621, file: !1618, line: 1817, type: !134)
!6627 = !DILocation(line: 1817, column: 18, scope: !6621)
!6628 = !DILocation(line: 1820, column: 28, scope: !6621)
!6629 = !DILocation(line: 1820, column: 10, scope: !6621)
!6630 = !DILocation(line: 1820, column: 8, scope: !6621)
!6631 = !DILocation(line: 1821, column: 29, scope: !6632)
!6632 = distinct !DILexicalBlock(scope: !6621, file: !1618, line: 1821, column: 7)
!6633 = !DILocation(line: 1821, column: 7, scope: !6632)
!6634 = !DILocation(line: 1821, column: 35, scope: !6632)
!6635 = !DILocation(line: 1821, column: 7, scope: !6621)
!6636 = !DILocation(line: 1822, column: 12, scope: !6632)
!6637 = !DILocation(line: 1822, column: 10, scope: !6632)
!6638 = !DILocation(line: 1822, column: 5, scope: !6632)
!6639 = !DILocation(line: 1824, column: 10, scope: !6621)
!6640 = !DILocation(line: 1824, column: 3, scope: !6621)
!6641 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !1618, file: !1618, line: 1686, type: !6642, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6642 = !DISubroutineType(types: !6643)
!6643 = !{!1656, !134}
!6644 = !DILocalVariable(name: "code", arg: 1, scope: !6641, file: !1618, line: 1686, type: !134)
!6645 = !DILocation(line: 1686, column: 38, scope: !6641)
!6646 = !DILocation(line: 1688, column: 63, scope: !6641)
!6647 = !DILocation(line: 1688, column: 34, scope: !6641)
!6648 = !DILocation(line: 1688, column: 10, scope: !6641)
!6649 = !DILocation(line: 1688, column: 3, scope: !6641)
!6650 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !1618, file: !1618, line: 1759, type: !6581, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6651 = !DILocalVariable(name: "gs", arg: 1, scope: !6650, file: !1618, line: 1759, type: !6573)
!6652 = !DILocation(line: 1759, column: 34, scope: !6650)
!6653 = !DILocation(line: 1763, column: 23, scope: !6654)
!6654 = distinct !DILexicalBlock(scope: !6650, file: !1618, line: 1763, column: 7)
!6655 = !DILocation(line: 1763, column: 7, scope: !6654)
!6656 = !DILocation(line: 1763, column: 27, scope: !6654)
!6657 = !DILocation(line: 1763, column: 7, scope: !6650)
!6658 = !DILocation(line: 1764, column: 23, scope: !6654)
!6659 = !DILocation(line: 1764, column: 12, scope: !6654)
!6660 = !DILocation(line: 1764, column: 5, scope: !6654)
!6661 = !DILocation(line: 1766, column: 5, scope: !6654)
!6662 = !DILocation(line: 1767, column: 1, scope: !6650)
!6663 = distinct !DISubprogram(name: "gimple_cond_code", scope: !1618, file: !1618, line: 2221, type: !6622, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6664 = !DILocalVariable(name: "gs", arg: 1, scope: !6663, file: !1618, line: 2221, type: !6573)
!6665 = !DILocation(line: 2221, column: 32, scope: !6663)
!6666 = !DILocation(line: 2224, column: 27, scope: !6663)
!6667 = !DILocation(line: 2224, column: 31, scope: !6663)
!6668 = !DILocation(line: 2224, column: 38, scope: !6663)
!6669 = !DILocation(line: 2224, column: 3, scope: !6663)
!6670 = distinct !DISubprogram(name: "gimple_op", scope: !1618, file: !1618, line: 1631, type: !6671, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6671 = !DISubroutineType(types: !6672)
!6672 = !{!2586, !6573, !7}
!6673 = !DILocalVariable(name: "gs", arg: 1, scope: !6670, file: !1618, line: 1631, type: !6573)
!6674 = !DILocation(line: 1631, column: 25, scope: !6670)
!6675 = !DILocalVariable(name: "i", arg: 2, scope: !6670, file: !1618, line: 1631, type: !7)
!6676 = !DILocation(line: 1631, column: 38, scope: !6670)
!6677 = !DILocation(line: 1633, column: 23, scope: !6678)
!6678 = distinct !DILexicalBlock(scope: !6670, file: !1618, line: 1633, column: 7)
!6679 = !DILocation(line: 1633, column: 7, scope: !6678)
!6680 = !DILocation(line: 1633, column: 7, scope: !6670)
!6681 = !DILocation(line: 1638, column: 26, scope: !6682)
!6682 = distinct !DILexicalBlock(scope: !6678, file: !1618, line: 1634, column: 5)
!6683 = !DILocation(line: 1638, column: 14, scope: !6682)
!6684 = !DILocation(line: 1638, column: 50, scope: !6682)
!6685 = !DILocation(line: 1638, column: 7, scope: !6682)
!6686 = !DILocation(line: 1641, column: 5, scope: !6678)
!6687 = !DILocation(line: 1642, column: 1, scope: !6670)
!6688 = distinct !DISubprogram(name: "gimple_switch_num_labels", scope: !1618, file: !1618, line: 3157, type: !6689, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6689 = !DISubroutineType(types: !6690)
!6690 = !{!7, !6573}
!6691 = !DILocalVariable(name: "gs", arg: 1, scope: !6688, file: !1618, line: 3157, type: !6573)
!6692 = !DILocation(line: 3157, column: 40, scope: !6688)
!6693 = !DILocalVariable(name: "num_ops", scope: !6688, file: !1618, line: 3159, type: !7)
!6694 = !DILocation(line: 3159, column: 12, scope: !6688)
!6695 = !DILocation(line: 3161, column: 29, scope: !6688)
!6696 = !DILocation(line: 3161, column: 13, scope: !6688)
!6697 = !DILocation(line: 3161, column: 11, scope: !6688)
!6698 = !DILocation(line: 3162, column: 3, scope: !6688)
!6699 = !DILocation(line: 3163, column: 10, scope: !6688)
!6700 = !DILocation(line: 3163, column: 18, scope: !6688)
!6701 = !DILocation(line: 3163, column: 3, scope: !6688)
!6702 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !1618, file: !1618, line: 1954, type: !6581, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6703 = !DILocalVariable(name: "gs", arg: 1, scope: !6702, file: !1618, line: 1954, type: !6573)
!6704 = !DILocation(line: 1954, column: 34, scope: !6702)
!6705 = !DILocalVariable(name: "addr", scope: !6702, file: !1618, line: 1956, type: !2586)
!6706 = !DILocation(line: 1956, column: 8, scope: !6702)
!6707 = !DILocation(line: 1956, column: 31, scope: !6702)
!6708 = !DILocation(line: 1956, column: 15, scope: !6702)
!6709 = !DILocation(line: 1957, column: 7, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6702, file: !1618, line: 1957, column: 7)
!6711 = !DILocation(line: 1957, column: 24, scope: !6710)
!6712 = !DILocation(line: 1957, column: 7, scope: !6702)
!6713 = !DILocation(line: 1958, column: 12, scope: !6710)
!6714 = !DILocation(line: 1958, column: 5, scope: !6710)
!6715 = !DILocation(line: 1959, column: 3, scope: !6702)
!6716 = !DILocation(line: 1960, column: 1, scope: !6702)
!6717 = distinct !DISubprogram(name: "gimple_call_fn", scope: !1618, file: !1618, line: 1911, type: !6581, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6718 = !DILocalVariable(name: "gs", arg: 1, scope: !6717, file: !1618, line: 1911, type: !6573)
!6719 = !DILocation(line: 1911, column: 30, scope: !6717)
!6720 = !DILocation(line: 1914, column: 21, scope: !6717)
!6721 = !DILocation(line: 1914, column: 10, scope: !6717)
!6722 = !DILocation(line: 1914, column: 3, scope: !6717)
!6723 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !1618, file: !1618, line: 2013, type: !6689, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6724 = !DILocalVariable(name: "gs", arg: 1, scope: !6723, file: !1618, line: 2013, type: !6573)
!6725 = !DILocation(line: 2013, column: 36, scope: !6723)
!6726 = !DILocalVariable(name: "num_ops", scope: !6723, file: !1618, line: 2015, type: !7)
!6727 = !DILocation(line: 2015, column: 12, scope: !6723)
!6728 = !DILocation(line: 2017, column: 29, scope: !6723)
!6729 = !DILocation(line: 2017, column: 13, scope: !6723)
!6730 = !DILocation(line: 2017, column: 11, scope: !6723)
!6731 = !DILocation(line: 2018, column: 10, scope: !6723)
!6732 = !DILocation(line: 2018, column: 18, scope: !6723)
!6733 = !DILocation(line: 2018, column: 3, scope: !6723)
!6734 = distinct !DISubprogram(name: "gimple_call_arg", scope: !1618, file: !1618, line: 2025, type: !6671, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6735 = !DILocalVariable(name: "gs", arg: 1, scope: !6734, file: !1618, line: 2025, type: !6573)
!6736 = !DILocation(line: 2025, column: 31, scope: !6734)
!6737 = !DILocalVariable(name: "index", arg: 2, scope: !6734, file: !1618, line: 2025, type: !7)
!6738 = !DILocation(line: 2025, column: 44, scope: !6734)
!6739 = !DILocation(line: 2028, column: 21, scope: !6734)
!6740 = !DILocation(line: 2028, column: 25, scope: !6734)
!6741 = !DILocation(line: 2028, column: 31, scope: !6734)
!6742 = !DILocation(line: 2028, column: 10, scope: !6734)
!6743 = !DILocation(line: 2028, column: 3, scope: !6734)
!6744 = distinct !DISubprogram(name: "gimple_asm_string", scope: !1618, file: !1618, line: 2729, type: !6745, scopeLine: 2730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6745 = !DISubroutineType(types: !6746)
!6746 = !{!2790, !6573}
!6747 = !DILocalVariable(name: "gs", arg: 1, scope: !6744, file: !1618, line: 2729, type: !6573)
!6748 = !DILocation(line: 2729, column: 33, scope: !6744)
!6749 = !DILocation(line: 2732, column: 10, scope: !6744)
!6750 = !DILocation(line: 2732, column: 14, scope: !6744)
!6751 = !DILocation(line: 2732, column: 25, scope: !6744)
!6752 = !DILocation(line: 2732, column: 3, scope: !6744)
!6753 = distinct !DISubprogram(name: "estimate_num_insns_seq", scope: !3, file: !3, line: 3159, type: !6754, scopeLine: 3160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6754 = !DISubroutineType(types: !6755)
!6755 = !{!2683, !2907, !6269}
!6756 = !DILocalVariable(name: "stmts", arg: 1, scope: !6753, file: !3, line: 3159, type: !2907)
!6757 = !DILocation(line: 3159, column: 40, scope: !6753)
!6758 = !DILocalVariable(name: "weights", arg: 2, scope: !6753, file: !3, line: 3159, type: !6269)
!6759 = !DILocation(line: 3159, column: 60, scope: !6753)
!6760 = !DILocalVariable(name: "cost", scope: !6753, file: !3, line: 3161, type: !2683)
!6761 = !DILocation(line: 3161, column: 7, scope: !6753)
!6762 = !DILocalVariable(name: "gsi", scope: !6753, file: !3, line: 3162, type: !4261)
!6763 = !DILocation(line: 3162, column: 24, scope: !6753)
!6764 = !DILocation(line: 3164, column: 8, scope: !6753)
!6765 = !DILocation(line: 3165, column: 25, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6753, file: !3, line: 3165, column: 3)
!6767 = !DILocation(line: 3165, column: 14, scope: !6766)
!6768 = !DILocation(line: 3165, column: 8, scope: !6766)
!6769 = !DILocation(line: 3165, column: 34, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6766, file: !3, line: 3165, column: 3)
!6771 = !DILocation(line: 3165, column: 33, scope: !6770)
!6772 = !DILocation(line: 3165, column: 3, scope: !6766)
!6773 = !DILocation(line: 3166, column: 33, scope: !6770)
!6774 = !DILocation(line: 3166, column: 49, scope: !6770)
!6775 = !DILocation(line: 3166, column: 13, scope: !6770)
!6776 = !DILocation(line: 3166, column: 10, scope: !6770)
!6777 = !DILocation(line: 3166, column: 5, scope: !6770)
!6778 = !DILocation(line: 3165, column: 51, scope: !6770)
!6779 = !DILocation(line: 3165, column: 3, scope: !6770)
!6780 = distinct !{!6780, !6772, !6781}
!6781 = !DILocation(line: 3166, column: 56, scope: !6766)
!6782 = !DILocation(line: 3168, column: 10, scope: !6753)
!6783 = !DILocation(line: 3168, column: 3, scope: !6753)
!6784 = distinct !DISubprogram(name: "gimple_bind_body", scope: !1618, file: !1618, line: 2517, type: !6785, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6785 = !DISubroutineType(types: !6786)
!6786 = !{!2907, !2917}
!6787 = !DILocalVariable(name: "gs", arg: 1, scope: !6784, file: !1618, line: 2517, type: !2917)
!6788 = !DILocation(line: 2517, column: 26, scope: !6784)
!6789 = !DILocation(line: 2520, column: 10, scope: !6784)
!6790 = !DILocation(line: 2520, column: 14, scope: !6784)
!6791 = !DILocation(line: 2520, column: 26, scope: !6784)
!6792 = !DILocation(line: 2520, column: 3, scope: !6784)
!6793 = distinct !DISubprogram(name: "gimple_eh_filter_failure", scope: !1618, file: !1618, line: 2869, type: !6785, scopeLine: 2870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6794 = !DILocalVariable(name: "gs", arg: 1, scope: !6793, file: !1618, line: 2869, type: !2917)
!6795 = !DILocation(line: 2869, column: 34, scope: !6793)
!6796 = !DILocation(line: 2872, column: 10, scope: !6793)
!6797 = !DILocation(line: 2872, column: 14, scope: !6793)
!6798 = !DILocation(line: 2872, column: 31, scope: !6793)
!6799 = !DILocation(line: 2872, column: 3, scope: !6793)
!6800 = distinct !DISubprogram(name: "gimple_catch_handler", scope: !1618, file: !1618, line: 2806, type: !6785, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6801 = !DILocalVariable(name: "gs", arg: 1, scope: !6800, file: !1618, line: 2806, type: !2917)
!6802 = !DILocation(line: 2806, column: 30, scope: !6800)
!6803 = !DILocation(line: 2809, column: 10, scope: !6800)
!6804 = !DILocation(line: 2809, column: 14, scope: !6800)
!6805 = !DILocation(line: 2809, column: 27, scope: !6800)
!6806 = !DILocation(line: 2809, column: 3, scope: !6800)
!6807 = distinct !DISubprogram(name: "gimple_try_eval", scope: !1618, file: !1618, line: 2953, type: !6785, scopeLine: 2954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6808 = !DILocalVariable(name: "gs", arg: 1, scope: !6807, file: !1618, line: 2953, type: !2917)
!6809 = !DILocation(line: 2953, column: 25, scope: !6807)
!6810 = !DILocation(line: 2956, column: 10, scope: !6807)
!6811 = !DILocation(line: 2956, column: 14, scope: !6807)
!6812 = !DILocation(line: 2956, column: 25, scope: !6807)
!6813 = !DILocation(line: 2956, column: 3, scope: !6807)
!6814 = distinct !DISubprogram(name: "gimple_try_cleanup", scope: !1618, file: !1618, line: 2964, type: !6785, scopeLine: 2965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6815 = !DILocalVariable(name: "gs", arg: 1, scope: !6814, file: !1618, line: 2964, type: !2917)
!6816 = !DILocation(line: 2964, column: 28, scope: !6814)
!6817 = !DILocation(line: 2967, column: 10, scope: !6814)
!6818 = !DILocation(line: 2967, column: 14, scope: !6814)
!6819 = !DILocation(line: 2967, column: 25, scope: !6814)
!6820 = !DILocation(line: 2967, column: 3, scope: !6814)
!6821 = distinct !DISubprogram(name: "gimple_omp_body", scope: !1618, file: !1618, line: 3363, type: !6785, scopeLine: 3364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6822 = !DILocalVariable(name: "gs", arg: 1, scope: !6821, file: !1618, line: 3363, type: !2917)
!6823 = !DILocation(line: 3363, column: 25, scope: !6821)
!6824 = !DILocation(line: 3365, column: 10, scope: !6821)
!6825 = !DILocation(line: 3365, column: 14, scope: !6821)
!6826 = !DILocation(line: 3365, column: 18, scope: !6821)
!6827 = !DILocation(line: 3365, column: 3, scope: !6821)
!6828 = distinct !DISubprogram(name: "gimple_omp_for_pre_body", scope: !1618, file: !1618, line: 3583, type: !6785, scopeLine: 3584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6829 = !DILocalVariable(name: "gs", arg: 1, scope: !6828, file: !1618, line: 3583, type: !2917)
!6830 = !DILocation(line: 3583, column: 33, scope: !6828)
!6831 = !DILocation(line: 3586, column: 10, scope: !6828)
!6832 = !DILocation(line: 3586, column: 14, scope: !6828)
!6833 = !DILocation(line: 3586, column: 29, scope: !6828)
!6834 = !DILocation(line: 3586, column: 3, scope: !6828)
!6835 = distinct !DISubprogram(name: "estimate_num_insns_fn", scope: !3, file: !3, line: 3389, type: !6836, scopeLine: 3390, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6836 = !DISubroutineType(types: !6837)
!6837 = !{!2683, !2586, !6269}
!6838 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6835, file: !3, line: 3389, type: !2586)
!6839 = !DILocation(line: 3389, column: 29, scope: !6835)
!6840 = !DILocalVariable(name: "weights", arg: 2, scope: !6835, file: !3, line: 3389, type: !6269)
!6841 = !DILocation(line: 3389, column: 50, scope: !6835)
!6842 = !DILocalVariable(name: "my_function", scope: !6835, file: !3, line: 3391, type: !3303)
!6843 = !DILocation(line: 3391, column: 20, scope: !6835)
!6844 = !DILocation(line: 3391, column: 34, scope: !6835)
!6845 = !DILocalVariable(name: "bsi", scope: !6835, file: !3, line: 3392, type: !4261)
!6846 = !DILocation(line: 3392, column: 24, scope: !6835)
!6847 = !DILocalVariable(name: "bb", scope: !6835, file: !3, line: 3393, type: !3473)
!6848 = !DILocation(line: 3393, column: 15, scope: !6835)
!6849 = !DILocalVariable(name: "n", scope: !6835, file: !3, line: 3394, type: !2683)
!6850 = !DILocation(line: 3394, column: 7, scope: !6835)
!6851 = !DILocation(line: 3396, column: 3, scope: !6835)
!6852 = !DILocation(line: 3397, column: 3, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 3397, column: 3)
!6854 = !DILocation(line: 3397, column: 3, scope: !6855)
!6855 = distinct !DILexicalBlock(scope: !6853, file: !3, line: 3397, column: 3)
!6856 = !DILocation(line: 3399, column: 32, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6858, file: !3, line: 3399, column: 7)
!6858 = distinct !DILexicalBlock(scope: !6855, file: !3, line: 3398, column: 5)
!6859 = !DILocation(line: 3399, column: 18, scope: !6857)
!6860 = !DILocation(line: 3399, column: 12, scope: !6857)
!6861 = !DILocation(line: 3399, column: 38, scope: !6862)
!6862 = distinct !DILexicalBlock(scope: !6857, file: !3, line: 3399, column: 7)
!6863 = !DILocation(line: 3399, column: 37, scope: !6862)
!6864 = !DILocation(line: 3399, column: 7, scope: !6857)
!6865 = !DILocation(line: 3400, column: 27, scope: !6862)
!6866 = !DILocation(line: 3400, column: 43, scope: !6862)
!6867 = !DILocation(line: 3400, column: 7, scope: !6862)
!6868 = !DILocation(line: 3400, column: 4, scope: !6862)
!6869 = !DILocation(line: 3400, column: 2, scope: !6862)
!6870 = !DILocation(line: 3399, column: 55, scope: !6862)
!6871 = !DILocation(line: 3399, column: 7, scope: !6862)
!6872 = distinct !{!6872, !6864, !6873}
!6873 = !DILocation(line: 3400, column: 50, scope: !6857)
!6874 = !DILocation(line: 3401, column: 5, scope: !6858)
!6875 = distinct !{!6875, !6852, !6876}
!6876 = !DILocation(line: 3401, column: 5, scope: !6853)
!6877 = !DILocation(line: 3403, column: 10, scope: !6835)
!6878 = !DILocation(line: 3403, column: 3, scope: !6835)
!6879 = distinct !DISubprogram(name: "gsi_start_bb", scope: !1618, file: !1618, line: 4418, type: !6880, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6880 = !DISubroutineType(types: !6881)
!6881 = !{!4261, !3473}
!6882 = !DILocalVariable(name: "bb", arg: 1, scope: !6879, file: !1618, line: 4418, type: !3473)
!6883 = !DILocation(line: 4418, column: 27, scope: !6879)
!6884 = !DILocalVariable(name: "i", scope: !6879, file: !1618, line: 4420, type: !4261)
!6885 = !DILocation(line: 4420, column: 24, scope: !6879)
!6886 = !DILocalVariable(name: "seq", scope: !6879, file: !1618, line: 4421, type: !2907)
!6887 = !DILocation(line: 4421, column: 14, scope: !6879)
!6888 = !DILocation(line: 4423, column: 17, scope: !6879)
!6889 = !DILocation(line: 4423, column: 9, scope: !6879)
!6890 = !DILocation(line: 4423, column: 7, scope: !6879)
!6891 = !DILocation(line: 4424, column: 29, scope: !6879)
!6892 = !DILocation(line: 4424, column: 11, scope: !6879)
!6893 = !DILocation(line: 4424, column: 5, scope: !6879)
!6894 = !DILocation(line: 4424, column: 9, scope: !6879)
!6895 = !DILocation(line: 4425, column: 11, scope: !6879)
!6896 = !DILocation(line: 4425, column: 5, scope: !6879)
!6897 = !DILocation(line: 4425, column: 9, scope: !6879)
!6898 = !DILocation(line: 4426, column: 10, scope: !6879)
!6899 = !DILocation(line: 4426, column: 5, scope: !6879)
!6900 = !DILocation(line: 4426, column: 8, scope: !6879)
!6901 = !DILocation(line: 4428, column: 3, scope: !6879)
!6902 = distinct !DISubprogram(name: "init_inline_once", scope: !3, file: !3, line: 3410, type: !4075, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6903 = !DILocation(line: 3412, column: 30, scope: !6902)
!6904 = !DILocation(line: 3413, column: 45, scope: !6902)
!6905 = !DILocation(line: 3414, column: 33, scope: !6902)
!6906 = !DILocation(line: 3415, column: 29, scope: !6902)
!6907 = !DILocation(line: 3416, column: 31, scope: !6902)
!6908 = !DILocation(line: 3422, column: 30, scope: !6902)
!6909 = !DILocation(line: 3423, column: 45, scope: !6902)
!6910 = !DILocation(line: 3424, column: 33, scope: !6902)
!6911 = !DILocation(line: 3425, column: 29, scope: !6902)
!6912 = !DILocation(line: 3426, column: 31, scope: !6902)
!6913 = !DILocation(line: 3427, column: 1, scope: !6902)
!6914 = distinct !DISubprogram(name: "count_insns_seq", scope: !3, file: !3, line: 3432, type: !6754, scopeLine: 3433, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6915 = !DILocalVariable(name: "seq", arg: 1, scope: !6914, file: !3, line: 3432, type: !2907)
!6916 = !DILocation(line: 3432, column: 29, scope: !6914)
!6917 = !DILocalVariable(name: "weights", arg: 2, scope: !6914, file: !3, line: 3432, type: !6269)
!6918 = !DILocation(line: 3432, column: 47, scope: !6914)
!6919 = !DILocalVariable(name: "gsi", scope: !6914, file: !3, line: 3434, type: !4261)
!6920 = !DILocation(line: 3434, column: 24, scope: !6914)
!6921 = !DILocalVariable(name: "n", scope: !6914, file: !3, line: 3435, type: !2683)
!6922 = !DILocation(line: 3435, column: 7, scope: !6914)
!6923 = !DILocation(line: 3436, column: 25, scope: !6924)
!6924 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 3436, column: 3)
!6925 = !DILocation(line: 3436, column: 14, scope: !6924)
!6926 = !DILocation(line: 3436, column: 8, scope: !6924)
!6927 = !DILocation(line: 3436, column: 32, scope: !6928)
!6928 = distinct !DILexicalBlock(scope: !6924, file: !3, line: 3436, column: 3)
!6929 = !DILocation(line: 3436, column: 31, scope: !6928)
!6930 = !DILocation(line: 3436, column: 3, scope: !6924)
!6931 = !DILocation(line: 3437, column: 30, scope: !6928)
!6932 = !DILocation(line: 3437, column: 46, scope: !6928)
!6933 = !DILocation(line: 3437, column: 10, scope: !6928)
!6934 = !DILocation(line: 3437, column: 7, scope: !6928)
!6935 = !DILocation(line: 3437, column: 5, scope: !6928)
!6936 = !DILocation(line: 3436, column: 49, scope: !6928)
!6937 = !DILocation(line: 3436, column: 3, scope: !6928)
!6938 = distinct !{!6938, !6930, !6939}
!6939 = !DILocation(line: 3437, column: 53, scope: !6924)
!6940 = !DILocation(line: 3439, column: 10, scope: !6914)
!6941 = !DILocation(line: 3439, column: 3, scope: !6914)
!6942 = distinct !DISubprogram(name: "optimize_inline_calls", scope: !3, file: !3, line: 3940, type: !6943, scopeLine: 3941, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!6943 = !DISubroutineType(types: !6944)
!6944 = !{!7, !2586}
!6945 = !DILocalVariable(name: "fn", arg: 1, scope: !6942, file: !3, line: 3940, type: !2586)
!6946 = !DILocation(line: 3940, column: 29, scope: !6942)
!6947 = !DILocalVariable(name: "id", scope: !6942, file: !3, line: 3942, type: !3984)
!6948 = !DILocation(line: 3942, column: 18, scope: !6942)
!6949 = !DILocalVariable(name: "bb", scope: !6942, file: !3, line: 3943, type: !3473)
!6950 = !DILocation(line: 3943, column: 15, scope: !6942)
!6951 = !DILocalVariable(name: "last", scope: !6942, file: !3, line: 3944, type: !2683)
!6952 = !DILocation(line: 3944, column: 7, scope: !6942)
!6953 = !DILocation(line: 3944, column: 14, scope: !6942)
!6954 = !DILocalVariable(name: "gctx", scope: !6942, file: !3, line: 3945, type: !6955)
!6955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimplify_ctx", file: !1618, line: 980, size: 576, elements: !6956)
!6956 = !{!6957, !6959, !6960, !6961, !6962, !6963, !6964, !6965, !6966, !6967, !6968, !6969}
!6957 = !DIDerivedType(tag: DW_TAG_member, name: "prev_context", scope: !6955, file: !1618, line: 982, baseType: !6958, size: 64)
!6958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6955, size: 64)
!6959 = !DIDerivedType(tag: DW_TAG_member, name: "bind_expr_stack", scope: !6955, file: !1618, line: 984, baseType: !4247, size: 64, offset: 64)
!6960 = !DIDerivedType(tag: DW_TAG_member, name: "temps", scope: !6955, file: !1618, line: 985, baseType: !2586, size: 64, offset: 128)
!6961 = !DIDerivedType(tag: DW_TAG_member, name: "conditional_cleanups", scope: !6955, file: !1618, line: 986, baseType: !2907, size: 64, offset: 192)
!6962 = !DIDerivedType(tag: DW_TAG_member, name: "exit_label", scope: !6955, file: !1618, line: 987, baseType: !2586, size: 64, offset: 256)
!6963 = !DIDerivedType(tag: DW_TAG_member, name: "return_temp", scope: !6955, file: !1618, line: 988, baseType: !2586, size: 64, offset: 320)
!6964 = !DIDerivedType(tag: DW_TAG_member, name: "case_labels", scope: !6955, file: !1618, line: 990, baseType: !4274, size: 64, offset: 384)
!6965 = !DIDerivedType(tag: DW_TAG_member, name: "temp_htab", scope: !6955, file: !1618, line: 992, baseType: !3388, size: 64, offset: 448)
!6966 = !DIDerivedType(tag: DW_TAG_member, name: "conditions", scope: !6955, file: !1618, line: 994, baseType: !2683, size: 32, offset: 512)
!6967 = !DIDerivedType(tag: DW_TAG_member, name: "save_stack", scope: !6955, file: !1618, line: 995, baseType: !2706, size: 8, offset: 544)
!6968 = !DIDerivedType(tag: DW_TAG_member, name: "into_ssa", scope: !6955, file: !1618, line: 996, baseType: !2706, size: 8, offset: 552)
!6969 = !DIDerivedType(tag: DW_TAG_member, name: "allow_rhs_cond_expr", scope: !6955, file: !1618, line: 997, baseType: !2706, size: 8, offset: 560)
!6970 = !DILocation(line: 3945, column: 23, scope: !6942)
!6971 = !DILocation(line: 3950, column: 7, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6942, file: !3, line: 3950, column: 7)
!6973 = !DILocation(line: 3950, column: 18, scope: !6972)
!6974 = !DILocation(line: 3950, column: 21, scope: !6972)
!6975 = !DILocation(line: 3950, column: 7, scope: !6942)
!6976 = !DILocation(line: 3951, column: 5, scope: !6972)
!6977 = !DILocation(line: 3954, column: 3, scope: !6942)
!6978 = !DILocation(line: 3956, column: 44, scope: !6942)
!6979 = !DILocation(line: 3956, column: 31, scope: !6942)
!6980 = !DILocation(line: 3956, column: 20, scope: !6942)
!6981 = !DILocation(line: 3956, column: 29, scope: !6942)
!6982 = !DILocation(line: 3956, column: 6, scope: !6942)
!6983 = !DILocation(line: 3956, column: 15, scope: !6942)
!6984 = !DILocation(line: 3957, column: 15, scope: !6942)
!6985 = !DILocation(line: 3957, column: 6, scope: !6942)
!6986 = !DILocation(line: 3957, column: 13, scope: !6942)
!6987 = !DILocation(line: 3959, column: 7, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6942, file: !3, line: 3959, column: 7)
!6989 = !DILocation(line: 3959, column: 7, scope: !6942)
!6990 = !DILocation(line: 3960, column: 17, scope: !6988)
!6991 = !DILocation(line: 3960, column: 8, scope: !6988)
!6992 = !DILocation(line: 3960, column: 15, scope: !6988)
!6993 = !DILocation(line: 3960, column: 5, scope: !6988)
!6994 = !DILocation(line: 3962, column: 6, scope: !6942)
!6995 = !DILocation(line: 3962, column: 16, scope: !6942)
!6996 = !DILocation(line: 3963, column: 6, scope: !6942)
!6997 = !DILocation(line: 3963, column: 33, scope: !6942)
!6998 = !DILocation(line: 3964, column: 6, scope: !6942)
!6999 = !DILocation(line: 3964, column: 24, scope: !6942)
!7000 = !DILocation(line: 3965, column: 6, scope: !6942)
!7001 = !DILocation(line: 3965, column: 33, scope: !6942)
!7002 = !DILocation(line: 3966, column: 6, scope: !6942)
!7003 = !DILocation(line: 3966, column: 34, scope: !6942)
!7004 = !DILocation(line: 3967, column: 27, scope: !6942)
!7005 = !DILocation(line: 3967, column: 6, scope: !6942)
!7006 = !DILocation(line: 3967, column: 25, scope: !6942)
!7007 = !DILocation(line: 3969, column: 3, scope: !6942)
!7008 = !DILocation(line: 3972, column: 3, scope: !6942)
!7009 = !DILocation(line: 3973, column: 3, scope: !6942)
!7010 = !DILocation(line: 3976, column: 3, scope: !6942)
!7011 = !DILocation(line: 3984, column: 3, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !6942, file: !3, line: 3984, column: 3)
!7013 = !DILocation(line: 3984, column: 3, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !7012, file: !3, line: 3984, column: 3)
!7015 = !DILocation(line: 3985, column: 33, scope: !7014)
!7016 = !DILocation(line: 3985, column: 5, scope: !7014)
!7017 = distinct !{!7017, !7011, !7018}
!7018 = !DILocation(line: 3985, column: 40, scope: !7012)
!7019 = !DILocation(line: 3987, column: 3, scope: !6942)
!7020 = !DILocation(line: 4002, column: 27, scope: !6942)
!7021 = !DILocation(line: 4002, column: 36, scope: !6942)
!7022 = !DILocation(line: 4002, column: 3, scope: !6942)
!7023 = !DILocation(line: 4003, column: 27, scope: !6942)
!7024 = !DILocation(line: 4003, column: 3, scope: !6942)
!7025 = !DILocation(line: 4005, column: 3, scope: !6942)
!7026 = !DILocation(line: 4008, column: 3, scope: !6942)
!7027 = !DILocation(line: 4010, column: 18, scope: !6942)
!7028 = !DILocation(line: 4010, column: 3, scope: !6942)
!7029 = !DILocation(line: 4012, column: 3, scope: !6942)
!7030 = !DILocation(line: 4013, column: 3, scope: !6942)
!7031 = !DILocation(line: 4024, column: 24, scope: !6942)
!7032 = !DILocation(line: 4024, column: 7, scope: !6942)
!7033 = !DILocation(line: 4024, column: 4, scope: !6942)
!7034 = !DILocation(line: 4025, column: 7, scope: !6942)
!7035 = !DILocation(line: 4025, column: 22, scope: !6942)
!7036 = !DILocation(line: 4025, column: 4, scope: !6942)
!7037 = !DILocation(line: 4022, column: 3, scope: !6942)
!7038 = !DILocation(line: 4026, column: 1, scope: !6942)
!7039 = distinct !DISubprogram(name: "copy_decl_maybe_to_var", scope: !3, file: !3, line: 4574, type: !4330, scopeLine: 4575, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7040 = !DILocalVariable(name: "decl", arg: 1, scope: !7039, file: !3, line: 4574, type: !2586)
!7041 = !DILocation(line: 4574, column: 30, scope: !7039)
!7042 = !DILocalVariable(name: "id", arg: 2, scope: !7039, file: !3, line: 4574, type: !3983)
!7043 = !DILocation(line: 4574, column: 52, scope: !7039)
!7044 = !DILocation(line: 4576, column: 7, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 4576, column: 7)
!7046 = !DILocation(line: 4576, column: 24, scope: !7045)
!7047 = !DILocation(line: 4576, column: 37, scope: !7045)
!7048 = !DILocation(line: 4576, column: 40, scope: !7045)
!7049 = !DILocation(line: 4576, column: 57, scope: !7045)
!7050 = !DILocation(line: 4576, column: 7, scope: !7039)
!7051 = !DILocation(line: 4577, column: 30, scope: !7045)
!7052 = !DILocation(line: 4577, column: 36, scope: !7045)
!7053 = !DILocation(line: 4577, column: 12, scope: !7045)
!7054 = !DILocation(line: 4577, column: 5, scope: !7045)
!7055 = !DILocation(line: 4579, column: 33, scope: !7045)
!7056 = !DILocation(line: 4579, column: 39, scope: !7045)
!7057 = !DILocation(line: 4579, column: 12, scope: !7045)
!7058 = !DILocation(line: 4579, column: 5, scope: !7045)
!7059 = !DILocation(line: 4580, column: 1, scope: !7039)
!7060 = distinct !DISubprogram(name: "gimple_expand_calls_inline", scope: !3, file: !3, line: 3826, type: !7061, scopeLine: 3827, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7061 = !DISubroutineType(types: !7062)
!7062 = !{!2706, !3473, !3983}
!7063 = !DILocalVariable(name: "bb", arg: 1, scope: !7060, file: !3, line: 3826, type: !3473)
!7064 = !DILocation(line: 3826, column: 41, scope: !7060)
!7065 = !DILocalVariable(name: "id", arg: 2, scope: !7060, file: !3, line: 3826, type: !3983)
!7066 = !DILocation(line: 3826, column: 61, scope: !7060)
!7067 = !DILocalVariable(name: "gsi", scope: !7060, file: !3, line: 3828, type: !4261)
!7068 = !DILocation(line: 3828, column: 24, scope: !7060)
!7069 = !DILocation(line: 3830, column: 28, scope: !7070)
!7070 = distinct !DILexicalBlock(scope: !7060, file: !3, line: 3830, column: 3)
!7071 = !DILocation(line: 3830, column: 14, scope: !7070)
!7072 = !DILocation(line: 3830, column: 8, scope: !7070)
!7073 = !DILocation(line: 3830, column: 34, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !7070, file: !3, line: 3830, column: 3)
!7075 = !DILocation(line: 3830, column: 33, scope: !7074)
!7076 = !DILocation(line: 3830, column: 3, scope: !7070)
!7077 = !DILocalVariable(name: "stmt", scope: !7078, file: !3, line: 3832, type: !2917)
!7078 = distinct !DILexicalBlock(scope: !7074, file: !3, line: 3831, column: 5)
!7079 = !DILocation(line: 3832, column: 14, scope: !7078)
!7080 = !DILocation(line: 3832, column: 21, scope: !7078)
!7081 = !DILocation(line: 3834, column: 27, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7078, file: !3, line: 3834, column: 11)
!7083 = !DILocation(line: 3834, column: 11, scope: !7082)
!7084 = !DILocation(line: 3835, column: 4, scope: !7082)
!7085 = !DILocation(line: 3835, column: 27, scope: !7082)
!7086 = !DILocation(line: 3835, column: 31, scope: !7082)
!7087 = !DILocation(line: 3835, column: 37, scope: !7082)
!7088 = !DILocation(line: 3835, column: 7, scope: !7082)
!7089 = !DILocation(line: 3834, column: 11, scope: !7078)
!7090 = !DILocation(line: 3836, column: 2, scope: !7082)
!7091 = !DILocation(line: 3837, column: 5, scope: !7078)
!7092 = !DILocation(line: 3830, column: 51, scope: !7074)
!7093 = !DILocation(line: 3830, column: 3, scope: !7074)
!7094 = distinct !{!7094, !7076, !7095}
!7095 = !DILocation(line: 3837, column: 5, scope: !7070)
!7096 = !DILocation(line: 3839, column: 3, scope: !7060)
!7097 = !DILocation(line: 3840, column: 1, scope: !7060)
!7098 = distinct !DISubprogram(name: "fold_marked_statements", scope: !3, file: !3, line: 3847, type: !7099, scopeLine: 3848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7099 = !DISubroutineType(types: !7100)
!7100 = !{null, !2683, !4243}
!7101 = !DILocalVariable(name: "first", arg: 1, scope: !7098, file: !3, line: 3847, type: !2683)
!7102 = !DILocation(line: 3847, column: 29, scope: !7098)
!7103 = !DILocalVariable(name: "statements", arg: 2, scope: !7098, file: !3, line: 3847, type: !4243)
!7104 = !DILocation(line: 3847, column: 58, scope: !7098)
!7105 = !DILocation(line: 3849, column: 3, scope: !7098)
!7106 = !DILocation(line: 3849, column: 10, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7108, file: !3, line: 3849, column: 3)
!7108 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 3849, column: 3)
!7109 = !DILocation(line: 3849, column: 18, scope: !7107)
!7110 = !DILocation(line: 3849, column: 16, scope: !7107)
!7111 = !DILocation(line: 3849, column: 3, scope: !7108)
!7112 = !DILocation(line: 3850, column: 9, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7107, file: !3, line: 3850, column: 9)
!7114 = !DILocation(line: 3850, column: 9, scope: !7107)
!7115 = !DILocalVariable(name: "gsi", scope: !7116, file: !3, line: 3852, type: !4261)
!7116 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 3851, column: 7)
!7117 = !DILocation(line: 3852, column: 30, scope: !7116)
!7118 = !DILocation(line: 3854, column: 27, scope: !7119)
!7119 = distinct !DILexicalBlock(scope: !7116, file: !3, line: 3854, column: 2)
!7120 = !DILocation(line: 3854, column: 13, scope: !7119)
!7121 = !DILocation(line: 3854, column: 7, scope: !7119)
!7122 = !DILocation(line: 3855, column: 8, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7119, file: !3, line: 3854, column: 2)
!7124 = !DILocation(line: 3855, column: 7, scope: !7123)
!7125 = !DILocation(line: 3854, column: 2, scope: !7119)
!7126 = !DILocation(line: 3857, column: 30, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7123, file: !3, line: 3857, column: 8)
!7128 = !DILocation(line: 3857, column: 42, scope: !7127)
!7129 = !DILocation(line: 3857, column: 8, scope: !7127)
!7130 = !DILocation(line: 3857, column: 8, scope: !7123)
!7131 = !DILocalVariable(name: "old_stmt", scope: !7132, file: !3, line: 3859, type: !2917)
!7132 = distinct !DILexicalBlock(scope: !7127, file: !3, line: 3858, column: 6)
!7133 = !DILocation(line: 3859, column: 15, scope: !7132)
!7134 = !DILocation(line: 3859, column: 26, scope: !7132)
!7135 = !DILocalVariable(name: "old_decl", scope: !7132, file: !3, line: 3860, type: !2586)
!7136 = !DILocation(line: 3860, column: 13, scope: !7132)
!7137 = !DILocation(line: 3860, column: 40, scope: !7132)
!7138 = !DILocation(line: 3860, column: 24, scope: !7132)
!7139 = !DILocation(line: 3860, column: 72, scope: !7132)
!7140 = !DILocation(line: 3860, column: 52, scope: !7132)
!7141 = !DILocation(line: 3862, column: 12, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7132, file: !3, line: 3862, column: 12)
!7143 = !DILocation(line: 3862, column: 21, scope: !7142)
!7144 = !DILocation(line: 3862, column: 24, scope: !7142)
!7145 = !DILocation(line: 3862, column: 12, scope: !7132)
!7146 = !DILocalVariable(name: "i2", scope: !7147, file: !3, line: 3866, type: !4261)
!7147 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 3863, column: 3)
!7148 = !DILocation(line: 3866, column: 26, scope: !7147)
!7149 = !DILocation(line: 3866, column: 31, scope: !7147)
!7150 = !DILocation(line: 3867, column: 5, scope: !7147)
!7151 = !DILocation(line: 3868, column: 9, scope: !7152)
!7152 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 3868, column: 9)
!7153 = !DILocation(line: 3868, column: 9, scope: !7147)
!7154 = !DILocalVariable(name: "new_stmt", scope: !7155, file: !3, line: 3870, type: !2917)
!7155 = distinct !DILexicalBlock(scope: !7152, file: !3, line: 3869, column: 7)
!7156 = !DILocation(line: 3870, column: 16, scope: !7155)
!7157 = !DILocation(line: 3871, column: 13, scope: !7158)
!7158 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 3871, column: 13)
!7159 = !DILocation(line: 3871, column: 13, scope: !7155)
!7160 = !DILocation(line: 3872, column: 23, scope: !7158)
!7161 = !DILocation(line: 3872, column: 9, scope: !7158)
!7162 = !DILocation(line: 3872, column: 4, scope: !7158)
!7163 = !DILocation(line: 3874, column: 4, scope: !7158)
!7164 = !DILocation(line: 3875, column: 9, scope: !7155)
!7165 = !DILocation(line: 3877, column: 17, scope: !7166)
!7166 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 3876, column: 4)
!7167 = !DILocation(line: 3877, column: 15, scope: !7166)
!7168 = !DILocation(line: 3878, column: 19, scope: !7166)
!7169 = !DILocation(line: 3878, column: 6, scope: !7166)
!7170 = !DILocation(line: 3879, column: 41, scope: !7166)
!7171 = !DILocation(line: 3879, column: 51, scope: !7166)
!7172 = !DILocation(line: 3880, column: 13, scope: !7166)
!7173 = !DILocation(line: 3879, column: 6, scope: !7166)
!7174 = !DILocation(line: 3882, column: 10, scope: !7175)
!7175 = distinct !DILexicalBlock(scope: !7166, file: !3, line: 3882, column: 10)
!7176 = !DILocation(line: 3882, column: 22, scope: !7175)
!7177 = !DILocation(line: 3882, column: 19, scope: !7175)
!7178 = !DILocation(line: 3882, column: 10, scope: !7166)
!7179 = !DILocation(line: 3894, column: 46, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 3894, column: 14)
!7181 = distinct !DILexicalBlock(scope: !7175, file: !3, line: 3883, column: 8)
!7182 = !DILocation(line: 3895, column: 11, scope: !7180)
!7183 = !DILocation(line: 3894, column: 14, scope: !7180)
!7184 = !DILocation(line: 3894, column: 14, scope: !7181)
!7185 = !DILocation(line: 3896, column: 33, scope: !7180)
!7186 = !DILocation(line: 3896, column: 5, scope: !7180)
!7187 = !DILocation(line: 3897, column: 10, scope: !7181)
!7188 = !DILocation(line: 3899, column: 6, scope: !7166)
!7189 = distinct !{!7189, !7164, !7190}
!7190 = !DILocation(line: 3900, column: 4, scope: !7155)
!7191 = !DILocation(line: 3901, column: 7, scope: !7155)
!7192 = !DILocation(line: 3902, column: 3, scope: !7147)
!7193 = !DILocation(line: 3903, column: 17, scope: !7194)
!7194 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 3903, column: 17)
!7195 = !DILocation(line: 3903, column: 17, scope: !7142)
!7196 = !DILocalVariable(name: "new_stmt", scope: !7197, file: !3, line: 3907, type: !2917)
!7197 = distinct !DILexicalBlock(scope: !7194, file: !3, line: 3904, column: 3)
!7198 = !DILocation(line: 3907, column: 12, scope: !7197)
!7199 = !DILocation(line: 3907, column: 23, scope: !7197)
!7200 = !DILocation(line: 3908, column: 18, scope: !7197)
!7201 = !DILocation(line: 3908, column: 5, scope: !7197)
!7202 = !DILocation(line: 3910, column: 25, scope: !7203)
!7203 = distinct !DILexicalBlock(scope: !7197, file: !3, line: 3910, column: 9)
!7204 = !DILocation(line: 3910, column: 9, scope: !7203)
!7205 = !DILocation(line: 3911, column: 9, scope: !7203)
!7206 = !DILocation(line: 3911, column: 28, scope: !7203)
!7207 = !DILocation(line: 3911, column: 12, scope: !7203)
!7208 = !DILocation(line: 3910, column: 9, scope: !7197)
!7209 = !DILocation(line: 3912, column: 42, scope: !7203)
!7210 = !DILocation(line: 3912, column: 52, scope: !7203)
!7211 = !DILocation(line: 3913, column: 14, scope: !7203)
!7212 = !DILocation(line: 3912, column: 7, scope: !7203)
!7213 = !DILocation(line: 3915, column: 41, scope: !7214)
!7214 = distinct !DILexicalBlock(scope: !7197, file: !3, line: 3915, column: 9)
!7215 = !DILocation(line: 3915, column: 51, scope: !7214)
!7216 = !DILocation(line: 3915, column: 9, scope: !7214)
!7217 = !DILocation(line: 3915, column: 9, scope: !7197)
!7218 = !DILocation(line: 3916, column: 35, scope: !7214)
!7219 = !DILocation(line: 3916, column: 7, scope: !7214)
!7220 = !DILocation(line: 3917, column: 3, scope: !7197)
!7221 = !DILocation(line: 3918, column: 6, scope: !7132)
!7222 = !DILocation(line: 3857, column: 56, scope: !7127)
!7223 = !DILocation(line: 3856, column: 7, scope: !7123)
!7224 = !DILocation(line: 3854, column: 2, scope: !7123)
!7225 = distinct !{!7225, !7125, !7226}
!7226 = !DILocation(line: 3918, column: 6, scope: !7119)
!7227 = !DILocation(line: 3919, column: 7, scope: !7116)
!7228 = !DILocation(line: 3849, column: 39, scope: !7107)
!7229 = !DILocation(line: 3849, column: 3, scope: !7107)
!7230 = distinct !{!7230, !7111, !7231}
!7231 = !DILocation(line: 3919, column: 7, scope: !7108)
!7232 = !DILocation(line: 3920, column: 1, scope: !7098)
!7233 = distinct !DISubprogram(name: "delete_unreachable_blocks_update_callgraph", scope: !3, file: !3, line: 4649, type: !7234, scopeLine: 4650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7234 = !DISubroutineType(types: !7235)
!7235 = !{!2706, !3983}
!7236 = !DILocalVariable(name: "id", arg: 1, scope: !7233, file: !3, line: 4649, type: !3983)
!7237 = !DILocation(line: 4649, column: 61, scope: !7233)
!7238 = !DILocalVariable(name: "changed", scope: !7233, file: !3, line: 4651, type: !2706)
!7239 = !DILocation(line: 4651, column: 8, scope: !7233)
!7240 = !DILocalVariable(name: "b", scope: !7233, file: !3, line: 4652, type: !3473)
!7241 = !DILocation(line: 4652, column: 15, scope: !7233)
!7242 = !DILocalVariable(name: "next_bb", scope: !7233, file: !3, line: 4652, type: !3473)
!7243 = !DILocation(line: 4652, column: 18, scope: !7233)
!7244 = !DILocation(line: 4654, column: 3, scope: !7233)
!7245 = !DILocation(line: 4658, column: 12, scope: !7246)
!7246 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 4658, column: 3)
!7247 = !DILocation(line: 4658, column: 29, scope: !7246)
!7248 = !DILocation(line: 4658, column: 10, scope: !7246)
!7249 = !DILocation(line: 4658, column: 8, scope: !7246)
!7250 = !DILocation(line: 4658, column: 38, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7246, file: !3, line: 4658, column: 3)
!7252 = !DILocation(line: 4658, column: 43, scope: !7251)
!7253 = !DILocation(line: 4658, column: 40, scope: !7251)
!7254 = !DILocation(line: 4658, column: 3, scope: !7246)
!7255 = !DILocation(line: 4660, column: 17, scope: !7256)
!7256 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 4659, column: 5)
!7257 = !DILocation(line: 4660, column: 20, scope: !7256)
!7258 = !DILocation(line: 4660, column: 15, scope: !7256)
!7259 = !DILocation(line: 4662, column: 13, scope: !7260)
!7260 = distinct !DILexicalBlock(scope: !7256, file: !3, line: 4662, column: 11)
!7261 = !DILocation(line: 4662, column: 16, scope: !7260)
!7262 = !DILocation(line: 4662, column: 22, scope: !7260)
!7263 = !DILocation(line: 4662, column: 11, scope: !7256)
!7264 = !DILocalVariable(name: "bsi", scope: !7265, file: !3, line: 4664, type: !4261)
!7265 = distinct !DILexicalBlock(scope: !7260, file: !3, line: 4663, column: 2)
!7266 = !DILocation(line: 4664, column: 32, scope: !7265)
!7267 = !DILocation(line: 4666, column: 36, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7265, file: !3, line: 4666, column: 11)
!7269 = !DILocation(line: 4666, column: 22, scope: !7268)
!7270 = !DILocation(line: 4666, column: 16, scope: !7268)
!7271 = !DILocation(line: 4666, column: 41, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7268, file: !3, line: 4666, column: 11)
!7273 = !DILocation(line: 4666, column: 40, scope: !7272)
!7274 = !DILocation(line: 4666, column: 11, scope: !7268)
!7275 = !DILocation(line: 4667, column: 23, scope: !7276)
!7276 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 4667, column: 10)
!7277 = !DILocation(line: 4667, column: 10, scope: !7276)
!7278 = !DILocation(line: 4667, column: 39, scope: !7276)
!7279 = !DILocation(line: 4667, column: 10, scope: !7272)
!7280 = !DILocalVariable(name: "e", scope: !7281, file: !3, line: 4669, type: !3995)
!7281 = distinct !DILexicalBlock(scope: !7276, file: !3, line: 4668, column: 8)
!7282 = !DILocation(line: 4669, column: 30, scope: !7281)
!7283 = !DILocalVariable(name: "node", scope: !7281, file: !3, line: 4670, type: !3990)
!7284 = !DILocation(line: 4670, column: 23, scope: !7281)
!7285 = !DILocation(line: 4672, column: 32, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7281, file: !3, line: 4672, column: 14)
!7287 = !DILocation(line: 4672, column: 36, scope: !7286)
!7288 = !DILocation(line: 4672, column: 46, scope: !7286)
!7289 = !DILocation(line: 4672, column: 19, scope: !7286)
!7290 = !DILocation(line: 4672, column: 17, scope: !7286)
!7291 = !DILocation(line: 4672, column: 63, scope: !7286)
!7292 = !DILocation(line: 4672, column: 14, scope: !7281)
!7293 = !DILocation(line: 4674, column: 12, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 4674, column: 11)
!7295 = distinct !DILexicalBlock(scope: !7286, file: !3, line: 4673, column: 5)
!7296 = !DILocation(line: 4674, column: 15, scope: !7294)
!7297 = !DILocation(line: 4674, column: 11, scope: !7295)
!7298 = !DILocation(line: 4675, column: 47, scope: !7294)
!7299 = !DILocation(line: 4675, column: 50, scope: !7294)
!7300 = !DILocation(line: 4675, column: 9, scope: !7294)
!7301 = !DILocation(line: 4677, column: 36, scope: !7294)
!7302 = !DILocation(line: 4677, column: 16, scope: !7294)
!7303 = !DILocation(line: 4678, column: 5, scope: !7295)
!7304 = !DILocation(line: 4679, column: 7, scope: !7305)
!7305 = distinct !DILexicalBlock(scope: !7281, file: !3, line: 4679, column: 7)
!7306 = !DILocation(line: 4679, column: 11, scope: !7305)
!7307 = !DILocation(line: 4679, column: 38, scope: !7305)
!7308 = !DILocation(line: 4680, column: 7, scope: !7305)
!7309 = !DILocation(line: 4680, column: 10, scope: !7305)
!7310 = !DILocation(line: 4680, column: 14, scope: !7305)
!7311 = !DILocation(line: 4680, column: 24, scope: !7305)
!7312 = !DILocation(line: 4679, column: 7, scope: !7281)
!7313 = !DILocation(line: 4681, column: 22, scope: !7314)
!7314 = distinct !DILexicalBlock(scope: !7305, file: !3, line: 4681, column: 10)
!7315 = !DILocation(line: 4681, column: 26, scope: !7314)
!7316 = !DILocation(line: 4681, column: 36, scope: !7314)
!7317 = !DILocation(line: 4681, column: 20, scope: !7314)
!7318 = !DILocation(line: 4681, column: 15, scope: !7314)
!7319 = !DILocation(line: 4681, column: 44, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7314, file: !3, line: 4681, column: 10)
!7321 = !DILocation(line: 4681, column: 52, scope: !7320)
!7322 = !DILocation(line: 4681, column: 56, scope: !7320)
!7323 = !DILocation(line: 4681, column: 49, scope: !7320)
!7324 = !DILocation(line: 4681, column: 10, scope: !7314)
!7325 = !DILocation(line: 4683, column: 38, scope: !7326)
!7326 = distinct !DILexicalBlock(scope: !7327, file: !3, line: 4683, column: 20)
!7327 = distinct !DILexicalBlock(scope: !7320, file: !3, line: 4682, column: 7)
!7328 = !DILocation(line: 4683, column: 44, scope: !7326)
!7329 = !DILocation(line: 4683, column: 25, scope: !7326)
!7330 = !DILocation(line: 4683, column: 23, scope: !7326)
!7331 = !DILocation(line: 4683, column: 61, scope: !7326)
!7332 = !DILocation(line: 4683, column: 20, scope: !7327)
!7333 = !DILocation(line: 4685, column: 18, scope: !7334)
!7334 = distinct !DILexicalBlock(scope: !7335, file: !3, line: 4685, column: 17)
!7335 = distinct !DILexicalBlock(scope: !7326, file: !3, line: 4684, column: 4)
!7336 = !DILocation(line: 4685, column: 21, scope: !7334)
!7337 = !DILocation(line: 4685, column: 17, scope: !7335)
!7338 = !DILocation(line: 4686, column: 53, scope: !7334)
!7339 = !DILocation(line: 4686, column: 56, scope: !7334)
!7340 = !DILocation(line: 4686, column: 15, scope: !7334)
!7341 = !DILocation(line: 4688, column: 42, scope: !7334)
!7342 = !DILocation(line: 4688, column: 22, scope: !7334)
!7343 = !DILocation(line: 4689, column: 4, scope: !7335)
!7344 = !DILocation(line: 4691, column: 13, scope: !7345)
!7345 = distinct !DILexicalBlock(scope: !7327, file: !3, line: 4691, column: 13)
!7346 = !DILocation(line: 4691, column: 19, scope: !7345)
!7347 = !DILocation(line: 4691, column: 13, scope: !7327)
!7348 = !DILocation(line: 4692, column: 11, scope: !7345)
!7349 = !DILocation(line: 4692, column: 17, scope: !7345)
!7350 = !DILocation(line: 4692, column: 9, scope: !7345)
!7351 = !DILocation(line: 4692, column: 4, scope: !7345)
!7352 = !DILocation(line: 4693, column: 18, scope: !7353)
!7353 = distinct !DILexicalBlock(scope: !7345, file: !3, line: 4693, column: 18)
!7354 = !DILocation(line: 4693, column: 24, scope: !7353)
!7355 = !DILocation(line: 4693, column: 18, scope: !7345)
!7356 = !DILocation(line: 4694, column: 11, scope: !7353)
!7357 = !DILocation(line: 4694, column: 17, scope: !7353)
!7358 = !DILocation(line: 4694, column: 9, scope: !7353)
!7359 = !DILocation(line: 4694, column: 4, scope: !7353)
!7360 = !DILocation(line: 4697, column: 6, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7353, file: !3, line: 4696, column: 4)
!7362 = !DILocation(line: 4697, column: 13, scope: !7361)
!7363 = !DILocation(line: 4697, column: 21, scope: !7361)
!7364 = !DILocation(line: 4697, column: 25, scope: !7361)
!7365 = !DILocation(line: 4697, column: 18, scope: !7361)
!7366 = !DILocation(line: 4697, column: 34, scope: !7361)
!7367 = !DILocation(line: 4697, column: 38, scope: !7361)
!7368 = !DILocation(line: 4697, column: 44, scope: !7361)
!7369 = !DILocation(line: 4697, column: 37, scope: !7361)
!7370 = !DILocation(line: 0, scope: !7361)
!7371 = !DILocation(line: 4698, column: 15, scope: !7361)
!7372 = !DILocation(line: 4698, column: 21, scope: !7361)
!7373 = !DILocation(line: 4698, column: 13, scope: !7361)
!7374 = distinct !{!7374, !7360, !7372}
!7375 = !DILocation(line: 4699, column: 10, scope: !7376)
!7376 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 4699, column: 10)
!7377 = !DILocation(line: 4699, column: 18, scope: !7376)
!7378 = !DILocation(line: 4699, column: 22, scope: !7376)
!7379 = !DILocation(line: 4699, column: 15, scope: !7376)
!7380 = !DILocation(line: 4699, column: 10, scope: !7361)
!7381 = !DILocation(line: 4700, column: 15, scope: !7376)
!7382 = !DILocation(line: 4700, column: 21, scope: !7376)
!7383 = !DILocation(line: 4700, column: 13, scope: !7376)
!7384 = !DILocation(line: 4700, column: 8, scope: !7376)
!7385 = !DILocation(line: 4681, column: 10, scope: !7320)
!7386 = distinct !{!7386, !7324, !7387}
!7387 = !DILocation(line: 4702, column: 7, scope: !7314)
!7388 = !DILocation(line: 4703, column: 8, scope: !7281)
!7389 = !DILocation(line: 4667, column: 42, scope: !7276)
!7390 = !DILocation(line: 4666, column: 58, scope: !7272)
!7391 = !DILocation(line: 4666, column: 11, scope: !7272)
!7392 = distinct !{!7392, !7274, !7393}
!7393 = !DILocation(line: 4703, column: 8, scope: !7268)
!7394 = !DILocation(line: 4704, column: 24, scope: !7265)
!7395 = !DILocation(line: 4704, column: 4, scope: !7265)
!7396 = !DILocation(line: 4705, column: 12, scope: !7265)
!7397 = !DILocation(line: 4706, column: 2, scope: !7265)
!7398 = !DILocation(line: 4707, column: 5, scope: !7256)
!7399 = !DILocation(line: 4658, column: 63, scope: !7251)
!7400 = !DILocation(line: 4658, column: 61, scope: !7251)
!7401 = !DILocation(line: 4658, column: 3, scope: !7251)
!7402 = distinct !{!7402, !7254, !7403}
!7403 = !DILocation(line: 4707, column: 5, scope: !7246)
!7404 = !DILocation(line: 4709, column: 7, scope: !7405)
!7405 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 4709, column: 7)
!7406 = !DILocation(line: 4709, column: 7, scope: !7233)
!7407 = !DILocation(line: 4710, column: 5, scope: !7405)
!7408 = !DILocation(line: 4711, column: 10, scope: !7233)
!7409 = !DILocation(line: 4711, column: 3, scope: !7233)
!7410 = distinct !DISubprogram(name: "VEC_constructor_elt_gc_copy", scope: !135, file: !135, line: 1538, type: !7411, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7411 = !DISubroutineType(types: !7412)
!7412 = !{!3762, !7413}
!7413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3767, size: 64)
!7414 = !DILocalVariable(name: "vec_", arg: 1, scope: !7410, file: !135, line: 1538, type: !7413)
!7415 = !DILocation(line: 1538, column: 1, scope: !7410)
!7416 = !DILocalVariable(name: "len_", scope: !7410, file: !135, line: 1538, type: !3061)
!7417 = !DILocalVariable(name: "new_vec_", scope: !7410, file: !135, line: 1538, type: !3762)
!7418 = !DILocation(line: 1538, column: 1, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7410, file: !135, line: 1538, column: 1)
!7420 = !DILocation(line: 1538, column: 1, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !7419, file: !135, line: 1538, column: 1)
!7422 = distinct !DISubprogram(name: "unsave_expr_now", scope: !3, file: !3, line: 4229, type: !7423, scopeLine: 4230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7423 = !DISubroutineType(types: !7424)
!7424 = !{!2586, !2586}
!7425 = !DILocalVariable(name: "expr", arg: 1, scope: !7422, file: !3, line: 4229, type: !2586)
!7426 = !DILocation(line: 4229, column: 23, scope: !7422)
!7427 = !DILocalVariable(name: "id", scope: !7422, file: !3, line: 4231, type: !3984)
!7428 = !DILocation(line: 4231, column: 18, scope: !7422)
!7429 = !DILocation(line: 4234, column: 7, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 4234, column: 7)
!7431 = !DILocation(line: 4234, column: 12, scope: !7430)
!7432 = !DILocation(line: 4234, column: 7, scope: !7422)
!7433 = !DILocation(line: 4235, column: 12, scope: !7430)
!7434 = !DILocation(line: 4235, column: 5, scope: !7430)
!7435 = !DILocation(line: 4238, column: 3, scope: !7422)
!7436 = !DILocation(line: 4239, column: 15, scope: !7422)
!7437 = !DILocation(line: 4239, column: 6, scope: !7422)
!7438 = !DILocation(line: 4239, column: 13, scope: !7422)
!7439 = !DILocation(line: 4240, column: 15, scope: !7422)
!7440 = !DILocation(line: 4240, column: 6, scope: !7422)
!7441 = !DILocation(line: 4240, column: 13, scope: !7422)
!7442 = !DILocation(line: 4241, column: 17, scope: !7422)
!7443 = !DILocation(line: 4241, column: 6, scope: !7422)
!7444 = !DILocation(line: 4241, column: 15, scope: !7422)
!7445 = !DILocation(line: 4242, column: 6, scope: !7422)
!7446 = !DILocation(line: 4242, column: 16, scope: !7422)
!7447 = !DILocation(line: 4244, column: 6, scope: !7422)
!7448 = !DILocation(line: 4244, column: 16, scope: !7422)
!7449 = !DILocation(line: 4245, column: 6, scope: !7422)
!7450 = !DILocation(line: 4245, column: 33, scope: !7422)
!7451 = !DILocation(line: 4246, column: 6, scope: !7422)
!7452 = !DILocation(line: 4246, column: 24, scope: !7422)
!7453 = !DILocation(line: 4247, column: 6, scope: !7422)
!7454 = !DILocation(line: 4247, column: 33, scope: !7422)
!7455 = !DILocation(line: 4248, column: 6, scope: !7422)
!7456 = !DILocation(line: 4248, column: 34, scope: !7422)
!7457 = !DILocation(line: 4251, column: 3, scope: !7422)
!7458 = !DILocation(line: 4254, column: 3, scope: !7422)
!7459 = !DILocation(line: 4257, column: 27, scope: !7422)
!7460 = !DILocation(line: 4257, column: 3, scope: !7422)
!7461 = !DILocation(line: 4258, column: 10, scope: !7462)
!7462 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 4258, column: 7)
!7463 = !DILocation(line: 4258, column: 7, scope: !7462)
!7464 = !DILocation(line: 4258, column: 7, scope: !7422)
!7465 = !DILocation(line: 4259, column: 29, scope: !7462)
!7466 = !DILocation(line: 4259, column: 5, scope: !7462)
!7467 = !DILocation(line: 4261, column: 10, scope: !7422)
!7468 = !DILocation(line: 4261, column: 3, scope: !7422)
!7469 = !DILocation(line: 4262, column: 1, scope: !7422)
!7470 = distinct !DISubprogram(name: "copy_decl_no_change", scope: !3, file: !3, line: 4552, type: !4330, scopeLine: 4553, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7471 = !DILocalVariable(name: "decl", arg: 1, scope: !7470, file: !3, line: 4552, type: !2586)
!7472 = !DILocation(line: 4552, column: 27, scope: !7470)
!7473 = !DILocalVariable(name: "id", arg: 2, scope: !7470, file: !3, line: 4552, type: !3983)
!7474 = !DILocation(line: 4552, column: 49, scope: !7470)
!7475 = !DILocalVariable(name: "copy", scope: !7470, file: !3, line: 4554, type: !2586)
!7476 = !DILocation(line: 4554, column: 8, scope: !7470)
!7477 = !DILocation(line: 4556, column: 10, scope: !7470)
!7478 = !DILocation(line: 4556, column: 8, scope: !7470)
!7479 = !DILocation(line: 4559, column: 3, scope: !7470)
!7480 = !DILocation(line: 4559, column: 24, scope: !7470)
!7481 = !DILocation(line: 4560, column: 14, scope: !7470)
!7482 = !DILocation(line: 4560, column: 38, scope: !7470)
!7483 = !DILocation(line: 4560, column: 3, scope: !7470)
!7484 = !DILocation(line: 4564, column: 7, scope: !7485)
!7485 = distinct !DILexicalBlock(scope: !7470, file: !3, line: 4564, column: 7)
!7486 = !DILocation(line: 4564, column: 24, scope: !7485)
!7487 = !DILocation(line: 4564, column: 7, scope: !7470)
!7488 = !DILocation(line: 4566, column: 7, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7485, file: !3, line: 4565, column: 5)
!7490 = !DILocation(line: 4566, column: 31, scope: !7489)
!7491 = !DILocation(line: 4567, column: 7, scope: !7489)
!7492 = !DILocation(line: 4567, column: 29, scope: !7489)
!7493 = !DILocation(line: 4568, column: 5, scope: !7489)
!7494 = !DILocation(line: 4570, column: 36, scope: !7470)
!7495 = !DILocation(line: 4570, column: 40, scope: !7470)
!7496 = !DILocation(line: 4570, column: 46, scope: !7470)
!7497 = !DILocation(line: 4570, column: 10, scope: !7470)
!7498 = !DILocation(line: 4570, column: 3, scope: !7470)
!7499 = distinct !DISubprogram(name: "mark_local_for_remap_r", scope: !3, file: !3, line: 4138, type: !4489, scopeLine: 4140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7500 = !DILocalVariable(name: "tp", arg: 1, scope: !7499, file: !3, line: 4138, type: !2585)
!7501 = !DILocation(line: 4138, column: 31, scope: !7499)
!7502 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7499, file: !3, line: 4138, type: !4491)
!7503 = !DILocation(line: 4138, column: 40, scope: !7499)
!7504 = !DILocalVariable(name: "data", arg: 3, scope: !7499, file: !3, line: 4139, type: !2870)
!7505 = !DILocation(line: 4139, column: 10, scope: !7499)
!7506 = !DILocalVariable(name: "id", scope: !7499, file: !3, line: 4141, type: !3983)
!7507 = !DILocation(line: 4141, column: 19, scope: !7499)
!7508 = !DILocation(line: 4141, column: 43, scope: !7499)
!7509 = !DILocation(line: 4141, column: 24, scope: !7499)
!7510 = !DILocation(line: 4144, column: 7, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !7499, file: !3, line: 4144, column: 7)
!7512 = !DILocation(line: 4144, column: 7, scope: !7499)
!7513 = !DILocation(line: 4145, column: 6, scope: !7511)
!7514 = !DILocation(line: 4145, column: 20, scope: !7511)
!7515 = !DILocation(line: 4145, column: 5, scope: !7511)
!7516 = !DILocation(line: 4147, column: 12, scope: !7517)
!7517 = distinct !DILexicalBlock(scope: !7511, file: !3, line: 4147, column: 12)
!7518 = !DILocation(line: 4147, column: 28, scope: !7517)
!7519 = !DILocation(line: 4147, column: 12, scope: !7511)
!7520 = !DILocalVariable(name: "decl", scope: !7521, file: !3, line: 4149, type: !2586)
!7521 = distinct !DILexicalBlock(scope: !7517, file: !3, line: 4148, column: 5)
!7522 = !DILocation(line: 4149, column: 12, scope: !7521)
!7523 = !DILocation(line: 4149, column: 19, scope: !7521)
!7524 = !DILocation(line: 4152, column: 24, scope: !7521)
!7525 = !DILocation(line: 4152, column: 28, scope: !7521)
!7526 = !DILocation(line: 4152, column: 34, scope: !7521)
!7527 = !DILocation(line: 4152, column: 38, scope: !7521)
!7528 = !DILocation(line: 4152, column: 49, scope: !7521)
!7529 = !DILocation(line: 4152, column: 55, scope: !7521)
!7530 = !DILocation(line: 4152, column: 7, scope: !7521)
!7531 = !DILocation(line: 4153, column: 5, scope: !7521)
!7532 = !DILocation(line: 4155, column: 3, scope: !7499)
!7533 = distinct !DISubprogram(name: "unsave_r", scope: !3, file: !3, line: 4188, type: !4489, scopeLine: 4189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7534 = !DILocalVariable(name: "tp", arg: 1, scope: !7533, file: !3, line: 4188, type: !2585)
!7535 = !DILocation(line: 4188, column: 17, scope: !7533)
!7536 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7533, file: !3, line: 4188, type: !4491)
!7537 = !DILocation(line: 4188, column: 26, scope: !7533)
!7538 = !DILocalVariable(name: "data", arg: 3, scope: !7533, file: !3, line: 4188, type: !2870)
!7539 = !DILocation(line: 4188, column: 47, scope: !7533)
!7540 = !DILocalVariable(name: "id", scope: !7533, file: !3, line: 4190, type: !3983)
!7541 = !DILocation(line: 4190, column: 19, scope: !7533)
!7542 = !DILocation(line: 4190, column: 43, scope: !7533)
!7543 = !DILocation(line: 4190, column: 24, scope: !7533)
!7544 = !DILocalVariable(name: "st", scope: !7533, file: !3, line: 4191, type: !3534)
!7545 = !DILocation(line: 4191, column: 25, scope: !7533)
!7546 = !DILocation(line: 4191, column: 30, scope: !7533)
!7547 = !DILocation(line: 4191, column: 34, scope: !7533)
!7548 = !DILocalVariable(name: "n", scope: !7533, file: !3, line: 4192, type: !2585)
!7549 = !DILocation(line: 4192, column: 9, scope: !7533)
!7550 = !DILocation(line: 4195, column: 8, scope: !7551)
!7551 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 4195, column: 7)
!7552 = !DILocation(line: 4195, column: 24, scope: !7551)
!7553 = !DILocation(line: 4195, column: 36, scope: !7551)
!7554 = !DILocation(line: 4195, column: 40, scope: !7551)
!7555 = !DILocation(line: 4196, column: 7, scope: !7551)
!7556 = !DILocation(line: 4196, column: 10, scope: !7551)
!7557 = !DILocation(line: 4196, column: 26, scope: !7551)
!7558 = !DILocation(line: 4195, column: 7, scope: !7533)
!7559 = !DILocation(line: 4199, column: 42, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7551, file: !3, line: 4197, column: 5)
!7561 = !DILocation(line: 4199, column: 47, scope: !7560)
!7562 = !DILocation(line: 4199, column: 46, scope: !7560)
!7563 = !DILocation(line: 4199, column: 20, scope: !7560)
!7564 = !DILocation(line: 4199, column: 11, scope: !7560)
!7565 = !DILocation(line: 4199, column: 9, scope: !7560)
!7566 = !DILocation(line: 4202, column: 11, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 4202, column: 11)
!7568 = !DILocation(line: 4202, column: 11, scope: !7560)
!7569 = !DILocation(line: 4203, column: 9, scope: !7567)
!7570 = !DILocation(line: 4203, column: 8, scope: !7567)
!7571 = !DILocation(line: 4203, column: 3, scope: !7567)
!7572 = !DILocation(line: 4203, column: 6, scope: !7567)
!7573 = !DILocation(line: 4203, column: 2, scope: !7567)
!7574 = !DILocation(line: 4204, column: 5, scope: !7560)
!7575 = !DILocation(line: 4206, column: 12, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7551, file: !3, line: 4206, column: 12)
!7577 = !DILocation(line: 4206, column: 28, scope: !7576)
!7578 = !DILocation(line: 4206, column: 12, scope: !7551)
!7579 = !DILocation(line: 4207, column: 5, scope: !7576)
!7580 = !DILocation(line: 4208, column: 12, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4208, column: 12)
!7582 = !DILocation(line: 4208, column: 28, scope: !7581)
!7583 = !DILocation(line: 4208, column: 12, scope: !7576)
!7584 = !DILocation(line: 4209, column: 21, scope: !7581)
!7585 = !DILocation(line: 4209, column: 25, scope: !7581)
!7586 = !DILocation(line: 4209, column: 40, scope: !7581)
!7587 = !DILocation(line: 4209, column: 5, scope: !7581)
!7588 = !DILocation(line: 4210, column: 12, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 4210, column: 12)
!7590 = !DILocation(line: 4210, column: 28, scope: !7589)
!7591 = !DILocation(line: 4211, column: 5, scope: !7589)
!7592 = !DILocation(line: 4211, column: 8, scope: !7589)
!7593 = !DILocation(line: 4211, column: 24, scope: !7589)
!7594 = !DILocation(line: 4210, column: 12, scope: !7581)
!7595 = !DILocation(line: 4212, column: 22, scope: !7589)
!7596 = !DILocation(line: 4212, column: 26, scope: !7589)
!7597 = !DILocation(line: 4212, column: 30, scope: !7589)
!7598 = !DILocation(line: 4212, column: 5, scope: !7589)
!7599 = !DILocation(line: 4215, column: 20, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 4214, column: 5)
!7601 = !DILocation(line: 4215, column: 24, scope: !7600)
!7602 = !DILocation(line: 4215, column: 7, scope: !7600)
!7603 = !DILocation(line: 4218, column: 23, scope: !7600)
!7604 = !DILocation(line: 4218, column: 22, scope: !7600)
!7605 = !DILocation(line: 4218, column: 7, scope: !7600)
!7606 = !DILocation(line: 4222, column: 3, scope: !7533)
!7607 = distinct !DISubprogram(name: "copy_gimple_seq_and_replace_locals", scope: !3, file: !3, line: 4375, type: !7608, scopeLine: 4376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7608 = !DISubroutineType(types: !7609)
!7609 = !{!2907, !2907}
!7610 = !DILocalVariable(name: "seq", arg: 1, scope: !7607, file: !3, line: 4375, type: !2907)
!7611 = !DILocation(line: 4375, column: 48, scope: !7607)
!7612 = !DILocalVariable(name: "id", scope: !7607, file: !3, line: 4377, type: !3984)
!7613 = !DILocation(line: 4377, column: 18, scope: !7607)
!7614 = !DILocalVariable(name: "wi", scope: !7607, file: !3, line: 4378, type: !4258)
!7615 = !DILocation(line: 4378, column: 25, scope: !7607)
!7616 = !DILocalVariable(name: "visited", scope: !7607, file: !3, line: 4379, type: !4243)
!7617 = !DILocation(line: 4379, column: 25, scope: !7607)
!7618 = !DILocalVariable(name: "copy", scope: !7607, file: !3, line: 4380, type: !2907)
!7619 = !DILocation(line: 4380, column: 14, scope: !7607)
!7620 = !DILocation(line: 4383, column: 7, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7607, file: !3, line: 4383, column: 7)
!7622 = !DILocation(line: 4383, column: 11, scope: !7621)
!7623 = !DILocation(line: 4383, column: 7, scope: !7607)
!7624 = !DILocation(line: 4384, column: 12, scope: !7621)
!7625 = !DILocation(line: 4384, column: 5, scope: !7621)
!7626 = !DILocation(line: 4387, column: 3, scope: !7607)
!7627 = !DILocation(line: 4388, column: 15, scope: !7607)
!7628 = !DILocation(line: 4388, column: 6, scope: !7607)
!7629 = !DILocation(line: 4388, column: 13, scope: !7607)
!7630 = !DILocation(line: 4389, column: 15, scope: !7607)
!7631 = !DILocation(line: 4389, column: 6, scope: !7607)
!7632 = !DILocation(line: 4389, column: 13, scope: !7607)
!7633 = !DILocation(line: 4390, column: 17, scope: !7607)
!7634 = !DILocation(line: 4390, column: 6, scope: !7607)
!7635 = !DILocation(line: 4390, column: 15, scope: !7607)
!7636 = !DILocation(line: 4391, column: 6, scope: !7607)
!7637 = !DILocation(line: 4391, column: 16, scope: !7607)
!7638 = !DILocation(line: 4393, column: 6, scope: !7607)
!7639 = !DILocation(line: 4393, column: 16, scope: !7607)
!7640 = !DILocation(line: 4394, column: 6, scope: !7607)
!7641 = !DILocation(line: 4394, column: 33, scope: !7607)
!7642 = !DILocation(line: 4395, column: 6, scope: !7607)
!7643 = !DILocation(line: 4395, column: 24, scope: !7607)
!7644 = !DILocation(line: 4396, column: 6, scope: !7607)
!7645 = !DILocation(line: 4396, column: 33, scope: !7607)
!7646 = !DILocation(line: 4397, column: 6, scope: !7607)
!7647 = !DILocation(line: 4397, column: 34, scope: !7607)
!7648 = !DILocation(line: 4400, column: 3, scope: !7607)
!7649 = !DILocation(line: 4401, column: 13, scope: !7607)
!7650 = !DILocation(line: 4401, column: 11, scope: !7607)
!7651 = !DILocation(line: 4402, column: 13, scope: !7607)
!7652 = !DILocation(line: 4402, column: 6, scope: !7607)
!7653 = !DILocation(line: 4402, column: 11, scope: !7607)
!7654 = !DILocation(line: 4403, column: 13, scope: !7607)
!7655 = !DILocation(line: 4403, column: 6, scope: !7607)
!7656 = !DILocation(line: 4403, column: 11, scope: !7607)
!7657 = !DILocation(line: 4404, column: 20, scope: !7607)
!7658 = !DILocation(line: 4404, column: 3, scope: !7607)
!7659 = !DILocation(line: 4405, column: 24, scope: !7607)
!7660 = !DILocation(line: 4405, column: 3, scope: !7607)
!7661 = !DILocation(line: 4407, column: 27, scope: !7607)
!7662 = !DILocation(line: 4407, column: 10, scope: !7607)
!7663 = !DILocation(line: 4407, column: 8, scope: !7607)
!7664 = !DILocation(line: 4410, column: 3, scope: !7607)
!7665 = !DILocation(line: 4411, column: 13, scope: !7607)
!7666 = !DILocation(line: 4411, column: 6, scope: !7607)
!7667 = !DILocation(line: 4411, column: 11, scope: !7607)
!7668 = !DILocation(line: 4412, column: 20, scope: !7607)
!7669 = !DILocation(line: 4412, column: 3, scope: !7607)
!7670 = !DILocation(line: 4415, column: 27, scope: !7607)
!7671 = !DILocation(line: 4415, column: 3, scope: !7607)
!7672 = !DILocation(line: 4416, column: 10, scope: !7673)
!7673 = distinct !DILexicalBlock(scope: !7607, file: !3, line: 4416, column: 7)
!7674 = !DILocation(line: 4416, column: 7, scope: !7673)
!7675 = !DILocation(line: 4416, column: 7, scope: !7607)
!7676 = !DILocation(line: 4417, column: 29, scope: !7673)
!7677 = !DILocation(line: 4417, column: 5, scope: !7673)
!7678 = !DILocation(line: 4419, column: 10, scope: !7607)
!7679 = !DILocation(line: 4419, column: 3, scope: !7607)
!7680 = !DILocation(line: 4420, column: 1, scope: !7607)
!7681 = distinct !DISubprogram(name: "mark_local_labels_stmt", scope: !3, file: !3, line: 4269, type: !7682, scopeLine: 4272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7682 = !DISubroutineType(types: !7683)
!7683 = !{!2586, !5698, !7684, !4257}
!7684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2706, size: 64)
!7685 = !DILocalVariable(name: "gsip", arg: 1, scope: !7681, file: !3, line: 4269, type: !5698)
!7686 = !DILocation(line: 4269, column: 47, scope: !7681)
!7687 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !7681, file: !3, line: 4270, type: !7684)
!7688 = !DILocation(line: 4270, column: 17, scope: !7681)
!7689 = !DILocalVariable(name: "wi", arg: 3, scope: !7681, file: !3, line: 4271, type: !4257)
!7690 = !DILocation(line: 4271, column: 34, scope: !7681)
!7691 = !DILocalVariable(name: "id", scope: !7681, file: !3, line: 4273, type: !3983)
!7692 = !DILocation(line: 4273, column: 19, scope: !7681)
!7693 = !DILocation(line: 4273, column: 43, scope: !7681)
!7694 = !DILocation(line: 4273, column: 47, scope: !7681)
!7695 = !DILocation(line: 4273, column: 24, scope: !7681)
!7696 = !DILocalVariable(name: "stmt", scope: !7681, file: !3, line: 4274, type: !2917)
!7697 = !DILocation(line: 4274, column: 10, scope: !7681)
!7698 = !DILocation(line: 4274, column: 28, scope: !7681)
!7699 = !DILocation(line: 4274, column: 17, scope: !7681)
!7700 = !DILocation(line: 4276, column: 20, scope: !7701)
!7701 = distinct !DILexicalBlock(scope: !7681, file: !3, line: 4276, column: 7)
!7702 = !DILocation(line: 4276, column: 7, scope: !7701)
!7703 = !DILocation(line: 4276, column: 26, scope: !7701)
!7704 = !DILocation(line: 4276, column: 7, scope: !7681)
!7705 = !DILocalVariable(name: "decl", scope: !7706, file: !3, line: 4278, type: !2586)
!7706 = distinct !DILexicalBlock(scope: !7701, file: !3, line: 4277, column: 5)
!7707 = !DILocation(line: 4278, column: 12, scope: !7706)
!7708 = !DILocation(line: 4278, column: 39, scope: !7706)
!7709 = !DILocation(line: 4278, column: 19, scope: !7706)
!7710 = !DILocation(line: 4281, column: 24, scope: !7706)
!7711 = !DILocation(line: 4281, column: 28, scope: !7706)
!7712 = !DILocation(line: 4281, column: 34, scope: !7706)
!7713 = !DILocation(line: 4281, column: 38, scope: !7706)
!7714 = !DILocation(line: 4281, column: 49, scope: !7706)
!7715 = !DILocation(line: 4281, column: 55, scope: !7706)
!7716 = !DILocation(line: 4281, column: 7, scope: !7706)
!7717 = !DILocation(line: 4282, column: 5, scope: !7706)
!7718 = !DILocation(line: 4284, column: 3, scope: !7681)
!7719 = distinct !DISubprogram(name: "replace_locals_stmt", scope: !3, file: !3, line: 4343, type: !7682, scopeLine: 4346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7720 = !DILocalVariable(name: "gsip", arg: 1, scope: !7719, file: !3, line: 4343, type: !5698)
!7721 = !DILocation(line: 4343, column: 44, scope: !7719)
!7722 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !7719, file: !3, line: 4344, type: !7684)
!7723 = !DILocation(line: 4344, column: 14, scope: !7719)
!7724 = !DILocalVariable(name: "wi", arg: 3, scope: !7719, file: !3, line: 4345, type: !4257)
!7725 = !DILocation(line: 4345, column: 31, scope: !7719)
!7726 = !DILocalVariable(name: "id", scope: !7719, file: !3, line: 4347, type: !3983)
!7727 = !DILocation(line: 4347, column: 19, scope: !7719)
!7728 = !DILocation(line: 4347, column: 43, scope: !7719)
!7729 = !DILocation(line: 4347, column: 47, scope: !7719)
!7730 = !DILocation(line: 4347, column: 24, scope: !7719)
!7731 = !DILocalVariable(name: "stmt", scope: !7719, file: !3, line: 4348, type: !2917)
!7732 = !DILocation(line: 4348, column: 10, scope: !7719)
!7733 = !DILocation(line: 4348, column: 28, scope: !7719)
!7734 = !DILocation(line: 4348, column: 17, scope: !7719)
!7735 = !DILocation(line: 4350, column: 20, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !7719, file: !3, line: 4350, column: 7)
!7737 = !DILocation(line: 4350, column: 7, scope: !7736)
!7738 = !DILocation(line: 4350, column: 26, scope: !7736)
!7739 = !DILocation(line: 4350, column: 7, scope: !7719)
!7740 = !DILocalVariable(name: "block", scope: !7741, file: !3, line: 4352, type: !2586)
!7741 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 4351, column: 5)
!7742 = !DILocation(line: 4352, column: 12, scope: !7741)
!7743 = !DILocation(line: 4352, column: 39, scope: !7741)
!7744 = !DILocation(line: 4352, column: 20, scope: !7741)
!7745 = !DILocation(line: 4354, column: 11, scope: !7746)
!7746 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 4354, column: 11)
!7747 = !DILocation(line: 4354, column: 11, scope: !7741)
!7748 = !DILocation(line: 4356, column: 25, scope: !7749)
!7749 = distinct !DILexicalBlock(scope: !7746, file: !3, line: 4355, column: 2)
!7750 = !DILocation(line: 4356, column: 4, scope: !7749)
!7751 = !DILocation(line: 4357, column: 27, scope: !7749)
!7752 = !DILocation(line: 4357, column: 33, scope: !7749)
!7753 = !DILocation(line: 4357, column: 4, scope: !7749)
!7754 = !DILocation(line: 4358, column: 2, scope: !7749)
!7755 = !DILocation(line: 4362, column: 29, scope: !7756)
!7756 = distinct !DILexicalBlock(scope: !7741, file: !3, line: 4362, column: 11)
!7757 = !DILocation(line: 4362, column: 11, scope: !7756)
!7758 = !DILocation(line: 4362, column: 11, scope: !7741)
!7759 = !DILocation(line: 4363, column: 24, scope: !7756)
!7760 = !DILocation(line: 4363, column: 61, scope: !7756)
!7761 = !DILocation(line: 4363, column: 43, scope: !7756)
!7762 = !DILocation(line: 4363, column: 74, scope: !7756)
!7763 = !DILocation(line: 4363, column: 30, scope: !7756)
!7764 = !DILocation(line: 4363, column: 2, scope: !7756)
!7765 = !DILocation(line: 4364, column: 5, scope: !7741)
!7766 = !DILocation(line: 4367, column: 3, scope: !7719)
!7767 = distinct !DISubprogram(name: "replace_locals_op", scope: !3, file: !3, line: 4294, type: !4489, scopeLine: 4295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7768 = !DILocalVariable(name: "tp", arg: 1, scope: !7767, file: !3, line: 4294, type: !2585)
!7769 = !DILocation(line: 4294, column: 26, scope: !7767)
!7770 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7767, file: !3, line: 4294, type: !4491)
!7771 = !DILocation(line: 4294, column: 35, scope: !7767)
!7772 = !DILocalVariable(name: "data", arg: 3, scope: !7767, file: !3, line: 4294, type: !2870)
!7773 = !DILocation(line: 4294, column: 56, scope: !7767)
!7774 = !DILocalVariable(name: "wi", scope: !7767, file: !3, line: 4296, type: !4257)
!7775 = !DILocation(line: 4296, column: 26, scope: !7767)
!7776 = !DILocation(line: 4296, column: 56, scope: !7767)
!7777 = !DILocation(line: 4296, column: 31, scope: !7767)
!7778 = !DILocalVariable(name: "id", scope: !7767, file: !3, line: 4297, type: !3983)
!7779 = !DILocation(line: 4297, column: 19, scope: !7767)
!7780 = !DILocation(line: 4297, column: 43, scope: !7767)
!7781 = !DILocation(line: 4297, column: 47, scope: !7767)
!7782 = !DILocation(line: 4297, column: 24, scope: !7767)
!7783 = !DILocalVariable(name: "st", scope: !7767, file: !3, line: 4298, type: !3534)
!7784 = !DILocation(line: 4298, column: 25, scope: !7767)
!7785 = !DILocation(line: 4298, column: 30, scope: !7767)
!7786 = !DILocation(line: 4298, column: 34, scope: !7767)
!7787 = !DILocalVariable(name: "n", scope: !7767, file: !3, line: 4299, type: !2585)
!7788 = !DILocation(line: 4299, column: 9, scope: !7767)
!7789 = !DILocalVariable(name: "expr", scope: !7767, file: !3, line: 4300, type: !2586)
!7790 = !DILocation(line: 4300, column: 8, scope: !7767)
!7791 = !DILocation(line: 4300, column: 16, scope: !7767)
!7792 = !DILocation(line: 4300, column: 15, scope: !7767)
!7793 = !DILocation(line: 4303, column: 8, scope: !7794)
!7794 = distinct !DILexicalBlock(scope: !7767, file: !3, line: 4303, column: 7)
!7795 = !DILocation(line: 4303, column: 25, scope: !7794)
!7796 = !DILocation(line: 4304, column: 8, scope: !7794)
!7797 = !DILocation(line: 4304, column: 12, scope: !7794)
!7798 = !DILocation(line: 4305, column: 7, scope: !7794)
!7799 = !DILocation(line: 4305, column: 10, scope: !7794)
!7800 = !DILocation(line: 4305, column: 27, scope: !7794)
!7801 = !DILocation(line: 4303, column: 7, scope: !7767)
!7802 = !DILocation(line: 4308, column: 42, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7794, file: !3, line: 4306, column: 5)
!7804 = !DILocation(line: 4308, column: 46, scope: !7803)
!7805 = !DILocation(line: 4308, column: 20, scope: !7803)
!7806 = !DILocation(line: 4308, column: 11, scope: !7803)
!7807 = !DILocation(line: 4308, column: 9, scope: !7803)
!7808 = !DILocation(line: 4311, column: 11, scope: !7809)
!7809 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 4311, column: 11)
!7810 = !DILocation(line: 4311, column: 11, scope: !7803)
!7811 = !DILocation(line: 4312, column: 9, scope: !7809)
!7812 = !DILocation(line: 4312, column: 8, scope: !7809)
!7813 = !DILocation(line: 4312, column: 3, scope: !7809)
!7814 = !DILocation(line: 4312, column: 6, scope: !7809)
!7815 = !DILocation(line: 4312, column: 2, scope: !7809)
!7816 = !DILocation(line: 4313, column: 8, scope: !7803)
!7817 = !DILocation(line: 4313, column: 22, scope: !7803)
!7818 = !DILocation(line: 4314, column: 5, scope: !7803)
!7819 = !DILocation(line: 4315, column: 12, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7794, file: !3, line: 4315, column: 12)
!7821 = !DILocation(line: 4315, column: 29, scope: !7820)
!7822 = !DILocation(line: 4316, column: 5, scope: !7820)
!7823 = !DILocation(line: 4316, column: 8, scope: !7820)
!7824 = !DILocation(line: 4316, column: 25, scope: !7820)
!7825 = !DILocation(line: 4317, column: 5, scope: !7820)
!7826 = !DILocation(line: 4317, column: 8, scope: !7820)
!7827 = !DILocation(line: 4317, column: 25, scope: !7820)
!7828 = !DILocation(line: 4315, column: 12, scope: !7794)
!7829 = !DILocation(line: 4318, column: 5, scope: !7820)
!7830 = !DILocation(line: 4319, column: 12, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7820, file: !3, line: 4319, column: 12)
!7832 = !DILocation(line: 4319, column: 29, scope: !7831)
!7833 = !DILocation(line: 4319, column: 12, scope: !7820)
!7834 = !DILocation(line: 4325, column: 12, scope: !7835)
!7835 = distinct !DILexicalBlock(scope: !7836, file: !3, line: 4325, column: 11)
!7836 = distinct !DILexicalBlock(scope: !7831, file: !3, line: 4320, column: 5)
!7837 = !DILocation(line: 4325, column: 11, scope: !7836)
!7838 = !DILocation(line: 4327, column: 29, scope: !7839)
!7839 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 4326, column: 2)
!7840 = !DILocation(line: 4327, column: 4, scope: !7839)
!7841 = !DILocation(line: 4327, column: 27, scope: !7839)
!7842 = !DILocation(line: 4328, column: 4, scope: !7839)
!7843 = !DILocation(line: 4328, column: 27, scope: !7839)
!7844 = !DILocation(line: 4329, column: 2, scope: !7839)
!7845 = !DILocation(line: 4330, column: 5, scope: !7836)
!7846 = !DILocation(line: 4333, column: 3, scope: !7767)
!7847 = distinct !DISubprogram(name: "debug_find_tree", scope: !3, file: !3, line: 4435, type: !7848, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7848 = !DISubroutineType(types: !7849)
!7849 = !{!2706, !2586, !2586}
!7850 = !DILocalVariable(name: "top", arg: 1, scope: !7847, file: !3, line: 4435, type: !2586)
!7851 = !DILocation(line: 4435, column: 23, scope: !7847)
!7852 = !DILocalVariable(name: "search", arg: 2, scope: !7847, file: !3, line: 4435, type: !2586)
!7853 = !DILocation(line: 4435, column: 33, scope: !7847)
!7854 = !DILocation(line: 4437, column: 10, scope: !7847)
!7855 = !DILocation(line: 4437, column: 73, scope: !7847)
!7856 = !DILocation(line: 4437, column: 3, scope: !7847)
!7857 = distinct !DISubprogram(name: "debug_find_tree_1", scope: !3, file: !3, line: 4426, type: !4489, scopeLine: 4427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7858 = !DILocalVariable(name: "tp", arg: 1, scope: !7857, file: !3, line: 4426, type: !2585)
!7859 = !DILocation(line: 4426, column: 26, scope: !7857)
!7860 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7857, file: !3, line: 4426, type: !4491)
!7861 = !DILocation(line: 4426, column: 35, scope: !7857)
!7862 = !DILocalVariable(name: "data", arg: 3, scope: !7857, file: !3, line: 4426, type: !2870)
!7863 = !DILocation(line: 4426, column: 73, scope: !7857)
!7864 = !DILocation(line: 4428, column: 8, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !7857, file: !3, line: 4428, column: 7)
!7866 = !DILocation(line: 4428, column: 7, scope: !7865)
!7867 = !DILocation(line: 4428, column: 14, scope: !7865)
!7868 = !DILocation(line: 4428, column: 11, scope: !7865)
!7869 = !DILocation(line: 4428, column: 7, scope: !7857)
!7870 = !DILocation(line: 4429, column: 19, scope: !7865)
!7871 = !DILocation(line: 4429, column: 12, scope: !7865)
!7872 = !DILocation(line: 4429, column: 5, scope: !7865)
!7873 = !DILocation(line: 4431, column: 5, scope: !7865)
!7874 = !DILocation(line: 4432, column: 1, scope: !7857)
!7875 = distinct !DISubprogram(name: "copy_decl_for_dup_finish", scope: !3, file: !3, line: 4464, type: !7876, scopeLine: 4465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7876 = !DISubroutineType(types: !7877)
!7877 = !{!2586, !3983, !2586, !2586}
!7878 = !DILocalVariable(name: "id", arg: 1, scope: !7875, file: !3, line: 4464, type: !3983)
!7879 = !DILocation(line: 4464, column: 43, scope: !7875)
!7880 = !DILocalVariable(name: "decl", arg: 2, scope: !7875, file: !3, line: 4464, type: !2586)
!7881 = !DILocation(line: 4464, column: 52, scope: !7875)
!7882 = !DILocalVariable(name: "copy", arg: 3, scope: !7875, file: !3, line: 4464, type: !2586)
!7883 = !DILocation(line: 4464, column: 63, scope: !7875)
!7884 = !DILocation(line: 4468, column: 28, scope: !7875)
!7885 = !DILocation(line: 4468, column: 3, scope: !7875)
!7886 = !DILocation(line: 4468, column: 26, scope: !7875)
!7887 = !DILocation(line: 4469, column: 27, scope: !7875)
!7888 = !DILocation(line: 4469, column: 3, scope: !7875)
!7889 = !DILocation(line: 4469, column: 25, scope: !7875)
!7890 = !DILocation(line: 4473, column: 33, scope: !7875)
!7891 = !DILocation(line: 4473, column: 3, scope: !7875)
!7892 = !DILocation(line: 4473, column: 31, scope: !7875)
!7893 = !DILocation(line: 4476, column: 7, scope: !7894)
!7894 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 4476, column: 7)
!7895 = !DILocation(line: 4477, column: 7, scope: !7894)
!7896 = !DILocation(line: 4477, column: 11, scope: !7894)
!7897 = !DILocation(line: 4477, column: 30, scope: !7894)
!7898 = !DILocation(line: 4477, column: 34, scope: !7894)
!7899 = !DILocation(line: 4476, column: 7, scope: !7875)
!7900 = !DILocation(line: 4478, column: 5, scope: !7894)
!7901 = !DILocation(line: 4481, column: 3, scope: !7875)
!7902 = !DILocation(line: 4481, column: 20, scope: !7875)
!7903 = !DILocation(line: 4484, column: 8, scope: !7904)
!7904 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 4484, column: 7)
!7905 = !DILocation(line: 4484, column: 7, scope: !7875)
!7906 = !DILocation(line: 4487, column: 12, scope: !7907)
!7907 = distinct !DILexicalBlock(scope: !7904, file: !3, line: 4487, column: 12)
!7908 = !DILocation(line: 4487, column: 35, scope: !7907)
!7909 = !DILocation(line: 4487, column: 39, scope: !7907)
!7910 = !DILocation(line: 4487, column: 32, scope: !7907)
!7911 = !DILocation(line: 4487, column: 12, scope: !7904)
!7912 = !DILocation(line: 4491, column: 12, scope: !7913)
!7913 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 4491, column: 12)
!7914 = !DILocation(line: 4491, column: 12, scope: !7907)
!7915 = !DILocation(line: 4498, column: 27, scope: !7913)
!7916 = !DILocation(line: 4498, column: 31, scope: !7913)
!7917 = !DILocation(line: 4498, column: 5, scope: !7913)
!7918 = !DILocation(line: 4498, column: 25, scope: !7913)
!7919 = !DILocation(line: 4500, column: 10, scope: !7875)
!7920 = !DILocation(line: 4500, column: 3, scope: !7875)
!7921 = distinct !DISubprogram(name: "tree_versionable_function_p", scope: !3, file: !3, line: 4638, type: !6087, scopeLine: 4639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7922 = !DILocalVariable(name: "fndecl", arg: 1, scope: !7921, file: !3, line: 4638, type: !2586)
!7923 = !DILocation(line: 4638, column: 35, scope: !7921)
!7924 = !DILocation(line: 4640, column: 41, scope: !7921)
!7925 = !DILocation(line: 4640, column: 12, scope: !7921)
!7926 = !DILocation(line: 4641, column: 4, scope: !7921)
!7927 = !DILocation(line: 4641, column: 23, scope: !7921)
!7928 = !DILocation(line: 4641, column: 54, scope: !7921)
!7929 = !DILocation(line: 4641, column: 7, scope: !7921)
!7930 = !DILocation(line: 4641, column: 62, scope: !7921)
!7931 = !DILocation(line: 0, scope: !7921)
!7932 = !DILocation(line: 4640, column: 10, scope: !7921)
!7933 = !DILocation(line: 4640, column: 3, scope: !7921)
!7934 = distinct !DISubprogram(name: "copy_forbidden", scope: !3, file: !3, line: 2734, type: !7935, scopeLine: 2735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!7935 = !DISubroutineType(types: !7936)
!7936 = !{!2790, !3303, !2586}
!7937 = !DILocalVariable(name: "fun", arg: 1, scope: !7934, file: !3, line: 2734, type: !3303)
!7938 = !DILocation(line: 2734, column: 34, scope: !7934)
!7939 = !DILocalVariable(name: "fndecl", arg: 2, scope: !7934, file: !3, line: 2734, type: !2586)
!7940 = !DILocation(line: 2734, column: 44, scope: !7934)
!7941 = !DILocalVariable(name: "reason", scope: !7934, file: !3, line: 2736, type: !2790)
!7942 = !DILocation(line: 2736, column: 15, scope: !7934)
!7943 = !DILocation(line: 2736, column: 24, scope: !7934)
!7944 = !DILocation(line: 2736, column: 29, scope: !7934)
!7945 = !DILocalVariable(name: "step", scope: !7934, file: !3, line: 2737, type: !2586)
!7946 = !DILocation(line: 2737, column: 8, scope: !7934)
!7947 = !DILocation(line: 2740, column: 7, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7934, file: !3, line: 2740, column: 7)
!7949 = !DILocation(line: 2740, column: 12, scope: !7948)
!7950 = !DILocation(line: 2740, column: 7, scope: !7934)
!7951 = !DILocation(line: 2741, column: 12, scope: !7948)
!7952 = !DILocation(line: 2741, column: 5, scope: !7948)
!7953 = !DILocation(line: 2749, column: 7, scope: !7954)
!7954 = distinct !DILexicalBlock(scope: !7934, file: !3, line: 2749, column: 7)
!7955 = !DILocation(line: 2749, column: 12, scope: !7954)
!7956 = !DILocation(line: 2749, column: 7, scope: !7934)
!7957 = !DILocation(line: 2751, column: 14, scope: !7958)
!7958 = distinct !DILexicalBlock(scope: !7954, file: !3, line: 2750, column: 5)
!7959 = !DILocation(line: 2753, column: 7, scope: !7958)
!7960 = !DILocation(line: 2756, column: 15, scope: !7961)
!7961 = distinct !DILexicalBlock(scope: !7934, file: !3, line: 2756, column: 3)
!7962 = !DILocation(line: 2756, column: 20, scope: !7961)
!7963 = !DILocation(line: 2756, column: 13, scope: !7961)
!7964 = !DILocation(line: 2756, column: 8, scope: !7961)
!7965 = !DILocation(line: 2756, column: 33, scope: !7966)
!7966 = distinct !DILexicalBlock(scope: !7961, file: !3, line: 2756, column: 3)
!7967 = !DILocation(line: 2756, column: 3, scope: !7961)
!7968 = !DILocalVariable(name: "decl", scope: !7969, file: !3, line: 2758, type: !2586)
!7969 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 2757, column: 5)
!7970 = !DILocation(line: 2758, column: 12, scope: !7969)
!7971 = !DILocation(line: 2758, column: 19, scope: !7969)
!7972 = !DILocation(line: 2760, column: 11, scope: !7973)
!7973 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 2760, column: 11)
!7974 = !DILocation(line: 2760, column: 28, scope: !7973)
!7975 = !DILocation(line: 2761, column: 4, scope: !7973)
!7976 = !DILocation(line: 2761, column: 7, scope: !7973)
!7977 = !DILocation(line: 2762, column: 4, scope: !7973)
!7978 = !DILocation(line: 2762, column: 8, scope: !7973)
!7979 = !DILocation(line: 2763, column: 4, scope: !7973)
!7980 = !DILocation(line: 2763, column: 7, scope: !7973)
!7981 = !DILocation(line: 2764, column: 4, scope: !7973)
!7982 = !DILocation(line: 2764, column: 7, scope: !7973)
!7983 = !DILocation(line: 2760, column: 11, scope: !7969)
!7984 = !DILocation(line: 2768, column: 11, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7973, file: !3, line: 2767, column: 2)
!7986 = !DILocation(line: 2770, column: 4, scope: !7985)
!7987 = !DILocation(line: 2772, column: 5, scope: !7969)
!7988 = !DILocation(line: 2756, column: 46, scope: !7966)
!7989 = !DILocation(line: 2756, column: 44, scope: !7966)
!7990 = !DILocation(line: 2756, column: 3, scope: !7966)
!7991 = distinct !{!7991, !7967, !7992}
!7992 = !DILocation(line: 2772, column: 5, scope: !7961)
!7993 = !DILabel(scope: !7934, name: "fail", file: !3, line: 2774)
!7994 = !DILocation(line: 2774, column: 2, scope: !7934)
!7995 = !DILocation(line: 2775, column: 34, scope: !7934)
!7996 = !DILocation(line: 2775, column: 3, scope: !7934)
!7997 = !DILocation(line: 2775, column: 8, scope: !7934)
!7998 = !DILocation(line: 2775, column: 32, scope: !7934)
!7999 = !DILocation(line: 2776, column: 3, scope: !7934)
!8000 = !DILocation(line: 2776, column: 8, scope: !7934)
!8001 = !DILocation(line: 2776, column: 29, scope: !7934)
!8002 = !DILocation(line: 2777, column: 10, scope: !7934)
!8003 = !DILocation(line: 2777, column: 3, scope: !7934)
!8004 = !DILocation(line: 2778, column: 1, scope: !7934)
!8005 = distinct !DISubprogram(name: "tree_function_versioning", scope: !3, file: !3, line: 4759, type: !8006, scopeLine: 4762, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8006 = !DISubroutineType(types: !8007)
!8007 = !{null, !2586, !2586, !4174, !2706, !3531}
!8008 = !DILocalVariable(name: "old_decl", arg: 1, scope: !8005, file: !3, line: 4759, type: !2586)
!8009 = !DILocation(line: 4759, column: 32, scope: !8005)
!8010 = !DILocalVariable(name: "new_decl", arg: 2, scope: !8005, file: !3, line: 4759, type: !2586)
!8011 = !DILocation(line: 4759, column: 47, scope: !8005)
!8012 = !DILocalVariable(name: "tree_map", arg: 3, scope: !8005, file: !3, line: 4760, type: !4174)
!8013 = !DILocation(line: 4760, column: 33, scope: !8005)
!8014 = !DILocalVariable(name: "update_clones", arg: 4, scope: !8005, file: !3, line: 4761, type: !2706)
!8015 = !DILocation(line: 4761, column: 11, scope: !8005)
!8016 = !DILocalVariable(name: "args_to_skip", arg: 5, scope: !8005, file: !3, line: 4761, type: !3531)
!8017 = !DILocation(line: 4761, column: 33, scope: !8005)
!8018 = !DILocalVariable(name: "old_version_node", scope: !8005, file: !3, line: 4763, type: !3990)
!8019 = !DILocation(line: 4763, column: 23, scope: !8005)
!8020 = !DILocalVariable(name: "new_version_node", scope: !8005, file: !3, line: 4764, type: !3990)
!8021 = !DILocation(line: 4764, column: 23, scope: !8005)
!8022 = !DILocalVariable(name: "id", scope: !8005, file: !3, line: 4765, type: !3984)
!8023 = !DILocation(line: 4765, column: 18, scope: !8005)
!8024 = !DILocalVariable(name: "p", scope: !8005, file: !3, line: 4766, type: !2586)
!8025 = !DILocation(line: 4766, column: 8, scope: !8005)
!8026 = !DILocalVariable(name: "i", scope: !8005, file: !3, line: 4767, type: !7)
!8027 = !DILocation(line: 4767, column: 12, scope: !8005)
!8028 = !DILocalVariable(name: "replace_info", scope: !8005, file: !3, line: 4768, type: !4187)
!8029 = !DILocation(line: 4768, column: 27, scope: !8005)
!8030 = !DILocalVariable(name: "old_entry_block", scope: !8005, file: !3, line: 4769, type: !3473)
!8031 = !DILocation(line: 4769, column: 15, scope: !8005)
!8032 = !DILocalVariable(name: "bb", scope: !8005, file: !3, line: 4769, type: !3473)
!8033 = !DILocation(line: 4769, column: 32, scope: !8005)
!8034 = !DILocalVariable(name: "init_stmts", scope: !8005, file: !3, line: 4770, type: !4247)
!8035 = !DILocation(line: 4770, column: 23, scope: !8005)
!8036 = !DILocation(line: 4770, column: 36, scope: !8005)
!8037 = !DILocalVariable(name: "t_step", scope: !8005, file: !3, line: 4772, type: !2586)
!8038 = !DILocation(line: 4772, column: 8, scope: !8005)
!8039 = !DILocalVariable(name: "old_current_function_decl", scope: !8005, file: !3, line: 4773, type: !2586)
!8040 = !DILocation(line: 4773, column: 8, scope: !8005)
!8041 = !DILocation(line: 4773, column: 36, scope: !8005)
!8042 = !DILocalVariable(name: "vars", scope: !8005, file: !3, line: 4774, type: !2586)
!8043 = !DILocation(line: 4774, column: 8, scope: !8005)
!8044 = !DILocation(line: 4776, column: 3, scope: !8005)
!8045 = !DILocation(line: 4778, column: 3, scope: !8005)
!8046 = !DILocation(line: 4778, column: 36, scope: !8005)
!8047 = !DILocation(line: 4780, column: 35, scope: !8005)
!8048 = !DILocation(line: 4780, column: 22, scope: !8005)
!8049 = !DILocation(line: 4780, column: 20, scope: !8005)
!8050 = !DILocation(line: 4781, column: 35, scope: !8005)
!8051 = !DILocation(line: 4781, column: 22, scope: !8005)
!8052 = !DILocation(line: 4781, column: 20, scope: !8005)
!8053 = !DILocation(line: 4787, column: 5, scope: !8005)
!8054 = !DILocation(line: 4787, column: 18, scope: !8005)
!8055 = !DILocation(line: 4787, column: 46, scope: !8005)
!8056 = !DILocation(line: 4787, column: 3, scope: !8005)
!8057 = !DILocation(line: 4789, column: 3, scope: !8005)
!8058 = !DILocation(line: 4789, column: 30, scope: !8005)
!8059 = !DILocation(line: 4790, column: 37, scope: !8005)
!8060 = !DILocation(line: 4790, column: 3, scope: !8005)
!8061 = !DILocation(line: 4790, column: 35, scope: !8005)
!8062 = !DILocation(line: 4791, column: 42, scope: !8005)
!8063 = !DILocation(line: 4791, column: 3, scope: !8005)
!8064 = !DILocation(line: 4791, column: 40, scope: !8005)
!8065 = !DILocation(line: 4794, column: 3, scope: !8005)
!8066 = !DILocation(line: 4797, column: 27, scope: !8005)
!8067 = !DILocation(line: 4797, column: 6, scope: !8005)
!8068 = !DILocation(line: 4797, column: 25, scope: !8005)
!8069 = !DILocation(line: 4799, column: 17, scope: !8005)
!8070 = !DILocation(line: 4799, column: 6, scope: !8005)
!8071 = !DILocation(line: 4799, column: 15, scope: !8005)
!8072 = !DILocation(line: 4800, column: 6, scope: !8005)
!8073 = !DILocation(line: 4800, column: 16, scope: !8005)
!8074 = !DILocation(line: 4801, column: 15, scope: !8005)
!8075 = !DILocation(line: 4801, column: 6, scope: !8005)
!8076 = !DILocation(line: 4801, column: 13, scope: !8005)
!8077 = !DILocation(line: 4802, column: 15, scope: !8005)
!8078 = !DILocation(line: 4802, column: 6, scope: !8005)
!8079 = !DILocation(line: 4802, column: 13, scope: !8005)
!8080 = !DILocation(line: 4803, column: 17, scope: !8005)
!8081 = !DILocation(line: 4803, column: 6, scope: !8005)
!8082 = !DILocation(line: 4803, column: 15, scope: !8005)
!8083 = !DILocation(line: 4804, column: 17, scope: !8005)
!8084 = !DILocation(line: 4804, column: 6, scope: !8005)
!8085 = !DILocation(line: 4804, column: 15, scope: !8005)
!8086 = !DILocation(line: 4805, column: 17, scope: !8005)
!8087 = !DILocation(line: 4805, column: 6, scope: !8005)
!8088 = !DILocation(line: 4805, column: 15, scope: !8005)
!8089 = !DILocation(line: 4806, column: 10, scope: !8090)
!8090 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4806, column: 7)
!8091 = !DILocation(line: 4806, column: 20, scope: !8090)
!8092 = !DILocation(line: 4806, column: 7, scope: !8090)
!8093 = !DILocation(line: 4806, column: 7, scope: !8005)
!8094 = !DILocalVariable(name: "old_transforms_to_apply", scope: !8095, file: !3, line: 4808, type: !4033)
!8095 = distinct !DILexicalBlock(scope: !8090, file: !3, line: 4807, column: 5)
!8096 = !DILocation(line: 4808, column: 32, scope: !8095)
!8097 = !DILocation(line: 4808, column: 61, scope: !8095)
!8098 = !DILocation(line: 4808, column: 71, scope: !8095)
!8099 = !DILocalVariable(name: "i", scope: !8095, file: !3, line: 4809, type: !7)
!8100 = !DILocation(line: 4809, column: 20, scope: !8095)
!8101 = !DILocation(line: 4811, column: 46, scope: !8095)
!8102 = !DILocation(line: 4811, column: 10, scope: !8095)
!8103 = !DILocation(line: 4811, column: 20, scope: !8095)
!8104 = !DILocation(line: 4811, column: 44, scope: !8095)
!8105 = !DILocation(line: 4813, column: 14, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8095, file: !3, line: 4813, column: 7)
!8107 = !DILocation(line: 4813, column: 12, scope: !8106)
!8108 = !DILocation(line: 4813, column: 19, scope: !8109)
!8109 = distinct !DILexicalBlock(scope: !8106, file: !3, line: 4813, column: 7)
!8110 = !DILocation(line: 4813, column: 23, scope: !8109)
!8111 = !DILocation(line: 4813, column: 21, scope: !8109)
!8112 = !DILocation(line: 4813, column: 7, scope: !8106)
!8113 = !DILocation(line: 4814, column: 9, scope: !8109)
!8114 = !DILocation(line: 4813, column: 76, scope: !8109)
!8115 = !DILocation(line: 4813, column: 7, scope: !8109)
!8116 = distinct !{!8116, !8112, !8117}
!8117 = !DILocation(line: 4814, column: 9, scope: !8106)
!8118 = !DILocation(line: 4818, column: 5, scope: !8095)
!8119 = !DILocation(line: 4820, column: 6, scope: !8005)
!8120 = !DILocation(line: 4820, column: 16, scope: !8005)
!8121 = !DILocation(line: 4822, column: 7, scope: !8005)
!8122 = !DILocation(line: 4821, column: 6, scope: !8005)
!8123 = !DILocation(line: 4822, column: 5, scope: !8005)
!8124 = !DILocation(line: 4823, column: 6, scope: !8005)
!8125 = !DILocation(line: 4823, column: 24, scope: !8005)
!8126 = !DILocation(line: 4824, column: 6, scope: !8005)
!8127 = !DILocation(line: 4824, column: 33, scope: !8005)
!8128 = !DILocation(line: 4825, column: 6, scope: !8005)
!8129 = !DILocation(line: 4825, column: 34, scope: !8005)
!8130 = !DILocation(line: 4827, column: 27, scope: !8005)
!8131 = !DILocation(line: 4827, column: 25, scope: !8005)
!8132 = !DILocation(line: 4828, column: 21, scope: !8005)
!8133 = !DILocation(line: 4828, column: 19, scope: !8005)
!8134 = !DILocation(line: 4830, column: 20, scope: !8005)
!8135 = !DILocation(line: 4830, column: 30, scope: !8005)
!8136 = !DILocation(line: 4831, column: 6, scope: !8005)
!8137 = !DILocation(line: 4831, column: 23, scope: !8005)
!8138 = !DILocation(line: 4830, column: 3, scope: !8005)
!8139 = !DILocation(line: 4832, column: 14, scope: !8005)
!8140 = !DILocation(line: 4832, column: 3, scope: !8005)
!8141 = !DILocation(line: 4835, column: 7, scope: !8005)
!8142 = !DILocation(line: 4835, column: 40, scope: !8005)
!8143 = !DILocation(line: 4835, column: 5, scope: !8005)
!8144 = !DILocation(line: 4836, column: 7, scope: !8145)
!8145 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4836, column: 7)
!8146 = !DILocation(line: 4836, column: 7, scope: !8005)
!8147 = !DILocation(line: 4838, column: 26, scope: !8145)
!8148 = !DILocation(line: 4838, column: 59, scope: !8145)
!8149 = !DILocation(line: 4838, column: 7, scope: !8145)
!8150 = !DILocation(line: 4837, column: 5, scope: !8145)
!8151 = !DILocation(line: 4837, column: 38, scope: !8145)
!8152 = !DILocation(line: 4837, column: 56, scope: !8145)
!8153 = !DILocation(line: 4842, column: 7, scope: !8154)
!8154 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4842, column: 7)
!8155 = !DILocation(line: 4842, column: 7, scope: !8005)
!8156 = !DILocation(line: 4843, column: 12, scope: !8157)
!8157 = distinct !DILexicalBlock(scope: !8154, file: !3, line: 4843, column: 5)
!8158 = !DILocation(line: 4843, column: 10, scope: !8157)
!8159 = !DILocation(line: 4843, column: 17, scope: !8160)
!8160 = distinct !DILexicalBlock(scope: !8157, file: !3, line: 4843, column: 5)
!8161 = !DILocation(line: 4843, column: 21, scope: !8160)
!8162 = !DILocation(line: 4843, column: 19, scope: !8160)
!8163 = !DILocation(line: 4843, column: 5, scope: !8157)
!8164 = !DILocalVariable(name: "init", scope: !8165, file: !3, line: 4845, type: !2917)
!8165 = distinct !DILexicalBlock(scope: !8160, file: !3, line: 4844, column: 7)
!8166 = !DILocation(line: 4845, column: 9, scope: !8165)
!8167 = !DILocation(line: 4846, column: 17, scope: !8165)
!8168 = !DILocation(line: 4846, column: 15, scope: !8165)
!8169 = !DILocation(line: 4847, column: 6, scope: !8170)
!8170 = distinct !DILexicalBlock(scope: !8165, file: !3, line: 4847, column: 6)
!8171 = !DILocation(line: 4847, column: 20, scope: !8170)
!8172 = !DILocation(line: 4847, column: 6, scope: !8165)
!8173 = !DILocalVariable(name: "op", scope: !8174, file: !3, line: 4849, type: !2586)
!8174 = distinct !DILexicalBlock(scope: !8170, file: !3, line: 4848, column: 4)
!8175 = !DILocation(line: 4849, column: 11, scope: !8174)
!8176 = !DILocation(line: 4849, column: 16, scope: !8174)
!8177 = !DILocation(line: 4849, column: 30, scope: !8174)
!8178 = !DILocation(line: 4851, column: 6, scope: !8174)
!8179 = !DILocation(line: 4853, column: 10, scope: !8180)
!8180 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 4853, column: 10)
!8181 = !DILocation(line: 4853, column: 25, scope: !8180)
!8182 = !DILocation(line: 4853, column: 10, scope: !8174)
!8183 = !DILocation(line: 4854, column: 13, scope: !8180)
!8184 = !DILocation(line: 4854, column: 11, scope: !8180)
!8185 = !DILocation(line: 4854, column: 8, scope: !8180)
!8186 = !DILocation(line: 4856, column: 10, scope: !8187)
!8187 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 4856, column: 10)
!8188 = !DILocation(line: 4856, column: 25, scope: !8187)
!8189 = !DILocation(line: 4856, column: 10, scope: !8174)
!8190 = !DILocation(line: 4858, column: 8, scope: !8191)
!8191 = distinct !DILexicalBlock(scope: !8187, file: !3, line: 4857, column: 8)
!8192 = !DILocation(line: 4858, column: 6, scope: !8191)
!8193 = !DILocation(line: 4859, column: 3, scope: !8191)
!8194 = !DILocation(line: 4859, column: 31, scope: !8191)
!8195 = !DILocation(line: 4859, column: 10, scope: !8191)
!8196 = !DILocation(line: 4860, column: 10, scope: !8191)
!8197 = !DILocation(line: 4860, column: 8, scope: !8191)
!8198 = distinct !{!8198, !8193, !8196}
!8199 = !DILocation(line: 4861, column: 7, scope: !8200)
!8200 = distinct !DILexicalBlock(scope: !8191, file: !3, line: 4861, column: 7)
!8201 = !DILocation(line: 4861, column: 22, scope: !8200)
!8202 = !DILocation(line: 4861, column: 7, scope: !8191)
!8203 = !DILocation(line: 4862, column: 25, scope: !8200)
!8204 = !DILocation(line: 4862, column: 5, scope: !8200)
!8205 = !DILocation(line: 4863, column: 8, scope: !8191)
!8206 = !DILocation(line: 4864, column: 6, scope: !8174)
!8207 = !DILocation(line: 4865, column: 39, scope: !8174)
!8208 = !DILocation(line: 4865, column: 53, scope: !8174)
!8209 = !DILocation(line: 4866, column: 17, scope: !8174)
!8210 = !DILocation(line: 4866, column: 31, scope: !8174)
!8211 = !DILocation(line: 4866, column: 44, scope: !8174)
!8212 = !DILocation(line: 4865, column: 13, scope: !8174)
!8213 = !DILocation(line: 4865, column: 11, scope: !8174)
!8214 = !DILocation(line: 4869, column: 10, scope: !8215)
!8215 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 4869, column: 10)
!8216 = !DILocation(line: 4869, column: 10, scope: !8174)
!8217 = !DILocation(line: 4870, column: 8, scope: !8215)
!8218 = !DILocation(line: 4871, column: 4, scope: !8174)
!8219 = !DILocation(line: 4872, column: 7, scope: !8165)
!8220 = !DILocation(line: 4843, column: 64, scope: !8160)
!8221 = !DILocation(line: 4843, column: 5, scope: !8160)
!8222 = distinct !{!8222, !8163, !8223}
!8223 = !DILocation(line: 4872, column: 7, scope: !8157)
!8224 = !DILocation(line: 4874, column: 7, scope: !8225)
!8225 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4874, column: 7)
!8226 = !DILocation(line: 4874, column: 33, scope: !8225)
!8227 = !DILocation(line: 4874, column: 7, scope: !8005)
!8228 = !DILocation(line: 4876, column: 38, scope: !8225)
!8229 = !DILocation(line: 4877, column: 16, scope: !8225)
!8230 = !DILocation(line: 4876, column: 7, scope: !8225)
!8231 = !DILocation(line: 4875, column: 5, scope: !8225)
!8232 = !DILocation(line: 4875, column: 31, scope: !8225)
!8233 = !DILocation(line: 4879, column: 43, scope: !8005)
!8234 = !DILocation(line: 4879, column: 29, scope: !8005)
!8235 = !DILocation(line: 4879, column: 3, scope: !8005)
!8236 = !DILocation(line: 4879, column: 27, scope: !8005)
!8237 = !DILocation(line: 4882, column: 21, scope: !8005)
!8238 = !DILocation(line: 4882, column: 3, scope: !8005)
!8239 = !DILocation(line: 4884, column: 24, scope: !8005)
!8240 = !DILocation(line: 4884, column: 49, scope: !8005)
!8241 = !DILocation(line: 4884, column: 3, scope: !8005)
!8242 = !DILocation(line: 4886, column: 7, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4886, column: 7)
!8244 = !DILocation(line: 4886, column: 40, scope: !8243)
!8245 = !DILocation(line: 4886, column: 52, scope: !8243)
!8246 = !DILocation(line: 4886, column: 7, scope: !8005)
!8247 = !DILocation(line: 4888, column: 19, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 4888, column: 5)
!8249 = !DILocation(line: 4888, column: 52, scope: !8248)
!8250 = !DILocation(line: 4888, column: 17, scope: !8248)
!8251 = !DILocation(line: 4888, column: 10, scope: !8248)
!8252 = !DILocation(line: 4889, column: 3, scope: !8253)
!8253 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 4888, column: 5)
!8254 = !DILocation(line: 4888, column: 5, scope: !8248)
!8255 = !DILocalVariable(name: "var", scope: !8256, file: !3, line: 4891, type: !2586)
!8256 = distinct !DILexicalBlock(scope: !8253, file: !3, line: 4890, column: 7)
!8257 = !DILocation(line: 4891, column: 7, scope: !8256)
!8258 = !DILocation(line: 4891, column: 13, scope: !8256)
!8259 = !DILocation(line: 4892, column: 6, scope: !8260)
!8260 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 4892, column: 6)
!8261 = !DILocation(line: 4892, column: 24, scope: !8260)
!8262 = !DILocation(line: 4892, column: 28, scope: !8260)
!8263 = !DILocation(line: 4892, column: 6, scope: !8256)
!8264 = !DILocation(line: 4893, column: 24, scope: !8260)
!8265 = !DILocation(line: 4893, column: 4, scope: !8260)
!8266 = !DILocation(line: 4893, column: 10, scope: !8260)
!8267 = !DILocation(line: 4893, column: 22, scope: !8260)
!8268 = !DILocation(line: 4894, column: 29, scope: !8269)
!8269 = distinct !DILexicalBlock(scope: !8260, file: !3, line: 4894, column: 11)
!8270 = !DILocation(line: 4894, column: 12, scope: !8269)
!8271 = !DILocation(line: 4894, column: 11, scope: !8260)
!8272 = !DILocation(line: 4896, column: 6, scope: !8269)
!8273 = !DILocation(line: 4895, column: 4, scope: !8269)
!8274 = !DILocation(line: 4895, column: 10, scope: !8269)
!8275 = !DILocation(line: 4895, column: 22, scope: !8269)
!8276 = !DILocation(line: 4898, column: 7, scope: !8256)
!8277 = !DILocation(line: 4889, column: 20, scope: !8253)
!8278 = !DILocation(line: 4889, column: 18, scope: !8253)
!8279 = !DILocation(line: 4888, column: 5, scope: !8253)
!8280 = distinct !{!8280, !8254, !8281}
!8281 = !DILocation(line: 4898, column: 7, scope: !8248)
!8282 = !DILocation(line: 4901, column: 19, scope: !8005)
!8283 = !DILocation(line: 4901, column: 36, scope: !8005)
!8284 = !DILocation(line: 4902, column: 7, scope: !8005)
!8285 = !DILocation(line: 4902, column: 24, scope: !8005)
!8286 = !DILocation(line: 4901, column: 3, scope: !8005)
!8287 = !DILocation(line: 4904, column: 7, scope: !8288)
!8288 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4904, column: 7)
!8289 = !DILocation(line: 4904, column: 30, scope: !8288)
!8290 = !DILocation(line: 4904, column: 7, scope: !8005)
!8291 = !DILocalVariable(name: "res_decl", scope: !8292, file: !3, line: 4906, type: !2585)
!8292 = distinct !DILexicalBlock(scope: !8288, file: !3, line: 4905, column: 5)
!8293 = !DILocation(line: 4906, column: 13, scope: !8292)
!8294 = !DILocation(line: 4906, column: 25, scope: !8292)
!8295 = !DILocation(line: 4907, column: 45, scope: !8292)
!8296 = !DILocation(line: 4907, column: 44, scope: !8292)
!8297 = !DILocation(line: 4907, column: 32, scope: !8292)
!8298 = !DILocation(line: 4907, column: 7, scope: !8292)
!8299 = !DILocation(line: 4907, column: 30, scope: !8292)
!8300 = !DILocation(line: 4908, column: 18, scope: !8292)
!8301 = !DILocation(line: 4908, column: 42, scope: !8292)
!8302 = !DILocation(line: 4908, column: 7, scope: !8292)
!8303 = !DILocation(line: 4909, column: 5, scope: !8292)
!8304 = !DILocation(line: 4912, column: 18, scope: !8005)
!8305 = !DILocation(line: 4912, column: 3, scope: !8005)
!8306 = !DILocation(line: 4917, column: 38, scope: !8005)
!8307 = !DILocation(line: 4917, column: 20, scope: !8005)
!8308 = !DILocation(line: 4917, column: 8, scope: !8005)
!8309 = !DILocation(line: 4917, column: 6, scope: !8005)
!8310 = !DILocation(line: 4918, column: 3, scope: !8005)
!8311 = !DILocation(line: 4918, column: 10, scope: !8005)
!8312 = !DILocation(line: 4919, column: 28, scope: !8005)
!8313 = !DILocation(line: 4919, column: 32, scope: !8005)
!8314 = !DILocation(line: 4919, column: 5, scope: !8005)
!8315 = distinct !{!8315, !8310, !8316}
!8316 = !DILocation(line: 4919, column: 60, scope: !8005)
!8317 = !DILocation(line: 4920, column: 3, scope: !8005)
!8318 = !DILocation(line: 4923, column: 7, scope: !8319)
!8319 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4923, column: 7)
!8320 = !DILocation(line: 4923, column: 13, scope: !8319)
!8321 = !DILocation(line: 4923, column: 7, scope: !8005)
!8322 = !DILocalVariable(name: "wi", scope: !8323, file: !3, line: 4925, type: !4258)
!8323 = distinct !DILexicalBlock(scope: !8319, file: !3, line: 4924, column: 5)
!8324 = !DILocation(line: 4925, column: 29, scope: !8323)
!8325 = !DILocation(line: 4927, column: 7, scope: !8323)
!8326 = !DILocation(line: 4928, column: 17, scope: !8323)
!8327 = !DILocation(line: 4928, column: 10, scope: !8323)
!8328 = !DILocation(line: 4928, column: 15, scope: !8323)
!8329 = !DILocation(line: 4929, column: 7, scope: !8323)
!8330 = !DILocation(line: 4930, column: 5, scope: !8323)
!8331 = !DILocation(line: 4933, column: 27, scope: !8005)
!8332 = !DILocation(line: 4933, column: 3, scope: !8005)
!8333 = !DILocation(line: 4934, column: 10, scope: !8334)
!8334 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4934, column: 7)
!8335 = !DILocation(line: 4934, column: 7, scope: !8334)
!8336 = !DILocation(line: 4934, column: 7, scope: !8005)
!8337 = !DILocation(line: 4935, column: 29, scope: !8334)
!8338 = !DILocation(line: 4935, column: 5, scope: !8334)
!8339 = !DILocation(line: 4936, column: 3, scope: !8005)
!8340 = !DILocation(line: 4937, column: 3, scope: !8005)
!8341 = !DILocation(line: 4939, column: 33, scope: !8005)
!8342 = !DILocation(line: 4939, column: 3, scope: !8005)
!8343 = !DILocation(line: 4940, column: 27, scope: !8005)
!8344 = !DILocation(line: 4940, column: 3, scope: !8005)
!8345 = !DILocation(line: 4941, column: 3, scope: !8005)
!8346 = !DILocation(line: 4942, column: 3, scope: !8005)
!8347 = !DILocation(line: 4943, column: 3, scope: !8005)
!8348 = !DILocation(line: 4944, column: 3, scope: !8005)
!8349 = !DILocation(line: 4945, column: 3, scope: !8005)
!8350 = !DILocation(line: 4947, column: 3, scope: !8005)
!8351 = !DILocation(line: 4948, column: 3, scope: !8005)
!8352 = !DILocation(line: 4949, column: 3, scope: !8005)
!8353 = !DILocation(line: 4950, column: 27, scope: !8005)
!8354 = !DILocation(line: 4950, column: 25, scope: !8005)
!8355 = !DILocation(line: 4951, column: 3, scope: !8005)
!8356 = !DILocation(line: 4953, column: 3, scope: !8005)
!8357 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !1618, file: !1618, line: 34, type: !8358, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8358 = !DISubroutineType(types: !8359)
!8359 = !{!4247, !2683}
!8360 = !DILocalVariable(name: "alloc_", arg: 1, scope: !8357, file: !1618, line: 34, type: !2683)
!8361 = !DILocation(line: 34, column: 1, scope: !8357)
!8362 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_copy", scope: !3305, file: !3305, line: 177, type: !8363, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8363 = !DISubroutineType(types: !8364)
!8364 = !{!4033, !8365}
!8365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4038, size: 64)
!8366 = !DILocalVariable(name: "vec_", arg: 1, scope: !8362, file: !3305, line: 177, type: !8365)
!8367 = !DILocation(line: 177, column: 1, scope: !8362)
!8368 = !DILocalVariable(name: "len_", scope: !8362, file: !3305, line: 177, type: !3061)
!8369 = !DILocalVariable(name: "new_vec_", scope: !8362, file: !3305, line: 177, type: !4033)
!8370 = !DILocation(line: 177, column: 1, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8362, file: !3305, line: 177, column: 1)
!8372 = !DILocation(line: 177, column: 1, scope: !8373)
!8373 = distinct !DILexicalBlock(scope: !8371, file: !3305, line: 177, column: 1)
!8374 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_length", scope: !3305, file: !3305, line: 176, type: !8375, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8375 = !DISubroutineType(types: !8376)
!8376 = !{!7, !8377}
!8377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8378, size: 64)
!8378 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4038)
!8379 = !DILocalVariable(name: "vec_", arg: 1, scope: !8374, file: !3305, line: 176, type: !8377)
!8380 = !DILocation(line: 176, column: 1, scope: !8374)
!8381 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_safe_push", scope: !3305, file: !3305, line: 177, type: !8382, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8382 = !DISubroutineType(types: !8383)
!8383 = !{!8384, !8385, !4045}
!8384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4045, size: 64)
!8385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4033, size: 64)
!8386 = !DILocalVariable(name: "vec_", arg: 1, scope: !8381, file: !3305, line: 177, type: !8385)
!8387 = !DILocation(line: 177, column: 1, scope: !8381)
!8388 = !DILocalVariable(name: "obj_", arg: 2, scope: !8381, file: !3305, line: 177, type: !4045)
!8389 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_index", scope: !3305, file: !3305, line: 176, type: !8390, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8390 = !DISubroutineType(types: !8391)
!8391 = !{!4045, !8377, !7}
!8392 = !DILocalVariable(name: "vec_", arg: 1, scope: !8389, file: !3305, line: 176, type: !8377)
!8393 = !DILocation(line: 176, column: 1, scope: !8389)
!8394 = !DILocalVariable(name: "ix_", arg: 2, scope: !8389, file: !3305, line: 176, type: !7)
!8395 = !DILocation(line: 0, scope: !8389)
!8396 = distinct !DISubprogram(name: "initialize_cfun", scope: !3, file: !3, line: 1971, type: !8397, scopeLine: 1972, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8397 = !DISubroutineType(types: !8398)
!8398 = !{null, !2586, !2586, !3127}
!8399 = !DILocalVariable(name: "new_fndecl", arg: 1, scope: !8396, file: !3, line: 1971, type: !2586)
!8400 = !DILocation(line: 1971, column: 23, scope: !8396)
!8401 = !DILocalVariable(name: "callee_fndecl", arg: 2, scope: !8396, file: !3, line: 1971, type: !2586)
!8402 = !DILocation(line: 1971, column: 40, scope: !8396)
!8403 = !DILocalVariable(name: "count", arg: 3, scope: !8396, file: !3, line: 1971, type: !3127)
!8404 = !DILocation(line: 1971, column: 65, scope: !8396)
!8405 = !DILocalVariable(name: "src_cfun", scope: !8396, file: !3, line: 1973, type: !3303)
!8406 = !DILocation(line: 1973, column: 20, scope: !8396)
!8407 = !DILocation(line: 1973, column: 31, scope: !8396)
!8408 = !DILocalVariable(name: "count_scale", scope: !8396, file: !3, line: 1974, type: !3127)
!8409 = !DILocation(line: 1974, column: 13, scope: !8396)
!8410 = !DILocation(line: 1976, column: 7, scope: !8411)
!8411 = distinct !DILexicalBlock(scope: !8396, file: !3, line: 1976, column: 7)
!8412 = !DILocation(line: 1976, column: 48, scope: !8411)
!8413 = !DILocation(line: 1976, column: 7, scope: !8396)
!8414 = !DILocation(line: 1977, column: 39, scope: !8411)
!8415 = !DILocation(line: 1977, column: 37, scope: !8411)
!8416 = !DILocation(line: 1978, column: 8, scope: !8411)
!8417 = !DILocation(line: 1978, column: 49, scope: !8411)
!8418 = !DILocation(line: 1978, column: 6, scope: !8411)
!8419 = !DILocation(line: 1977, column: 17, scope: !8411)
!8420 = !DILocation(line: 1977, column: 5, scope: !8411)
!8421 = !DILocation(line: 1980, column: 17, scope: !8411)
!8422 = !DILocation(line: 1983, column: 3, scope: !8396)
!8423 = !DILocation(line: 1986, column: 25, scope: !8396)
!8424 = !DILocation(line: 1986, column: 3, scope: !8396)
!8425 = !DILocation(line: 1989, column: 3, scope: !8396)
!8426 = !DILocation(line: 1990, column: 3, scope: !8396)
!8427 = !DILocation(line: 1991, column: 3, scope: !8396)
!8428 = !DILocation(line: 1992, column: 3, scope: !8396)
!8429 = !DILocation(line: 1995, column: 29, scope: !8396)
!8430 = !DILocation(line: 1995, column: 39, scope: !8396)
!8431 = !DILocation(line: 1995, column: 3, scope: !8396)
!8432 = !DILocation(line: 1995, column: 9, scope: !8396)
!8433 = !DILocation(line: 1995, column: 27, scope: !8396)
!8434 = !DILocation(line: 1996, column: 35, scope: !8396)
!8435 = !DILocation(line: 1996, column: 45, scope: !8396)
!8436 = !DILocation(line: 1996, column: 3, scope: !8396)
!8437 = !DILocation(line: 1996, column: 9, scope: !8396)
!8438 = !DILocation(line: 1996, column: 33, scope: !8396)
!8439 = !DILocation(line: 1997, column: 30, scope: !8396)
!8440 = !DILocation(line: 1997, column: 40, scope: !8396)
!8441 = !DILocation(line: 1997, column: 3, scope: !8396)
!8442 = !DILocation(line: 1997, column: 9, scope: !8396)
!8443 = !DILocation(line: 1997, column: 28, scope: !8396)
!8444 = !DILocation(line: 1998, column: 27, scope: !8396)
!8445 = !DILocation(line: 1998, column: 37, scope: !8396)
!8446 = !DILocation(line: 1998, column: 3, scope: !8396)
!8447 = !DILocation(line: 1998, column: 9, scope: !8396)
!8448 = !DILocation(line: 1998, column: 25, scope: !8396)
!8449 = !DILocation(line: 1999, column: 25, scope: !8396)
!8450 = !DILocation(line: 1999, column: 35, scope: !8396)
!8451 = !DILocation(line: 1999, column: 3, scope: !8396)
!8452 = !DILocation(line: 1999, column: 9, scope: !8396)
!8453 = !DILocation(line: 1999, column: 23, scope: !8396)
!8454 = !DILocation(line: 2000, column: 28, scope: !8396)
!8455 = !DILocation(line: 2000, column: 38, scope: !8396)
!8456 = !DILocation(line: 2000, column: 3, scope: !8396)
!8457 = !DILocation(line: 2000, column: 9, scope: !8396)
!8458 = !DILocation(line: 2000, column: 26, scope: !8396)
!8459 = !DILocation(line: 2001, column: 28, scope: !8396)
!8460 = !DILocation(line: 2001, column: 38, scope: !8396)
!8461 = !DILocation(line: 2001, column: 3, scope: !8396)
!8462 = !DILocation(line: 2001, column: 9, scope: !8396)
!8463 = !DILocation(line: 2001, column: 26, scope: !8396)
!8464 = !DILocation(line: 2002, column: 30, scope: !8396)
!8465 = !DILocation(line: 2002, column: 40, scope: !8396)
!8466 = !DILocation(line: 2002, column: 3, scope: !8396)
!8467 = !DILocation(line: 2002, column: 9, scope: !8396)
!8468 = !DILocation(line: 2002, column: 28, scope: !8396)
!8469 = !DILocation(line: 2003, column: 30, scope: !8396)
!8470 = !DILocation(line: 2003, column: 40, scope: !8396)
!8471 = !DILocation(line: 2003, column: 3, scope: !8396)
!8472 = !DILocation(line: 2003, column: 9, scope: !8396)
!8473 = !DILocation(line: 2003, column: 28, scope: !8396)
!8474 = !DILocation(line: 2004, column: 18, scope: !8396)
!8475 = !DILocation(line: 2004, column: 28, scope: !8396)
!8476 = !DILocation(line: 2004, column: 3, scope: !8396)
!8477 = !DILocation(line: 2004, column: 9, scope: !8396)
!8478 = !DILocation(line: 2004, column: 16, scope: !8396)
!8479 = !DILocation(line: 2005, column: 37, scope: !8396)
!8480 = !DILocation(line: 2005, column: 47, scope: !8396)
!8481 = !DILocation(line: 2005, column: 3, scope: !8396)
!8482 = !DILocation(line: 2005, column: 9, scope: !8396)
!8483 = !DILocation(line: 2005, column: 35, scope: !8396)
!8484 = !DILocation(line: 2006, column: 26, scope: !8396)
!8485 = !DILocation(line: 2006, column: 36, scope: !8396)
!8486 = !DILocation(line: 2006, column: 3, scope: !8396)
!8487 = !DILocation(line: 2006, column: 9, scope: !8396)
!8488 = !DILocation(line: 2006, column: 24, scope: !8396)
!8489 = !DILocation(line: 2007, column: 26, scope: !8396)
!8490 = !DILocation(line: 2007, column: 36, scope: !8396)
!8491 = !DILocation(line: 2007, column: 3, scope: !8396)
!8492 = !DILocation(line: 2007, column: 9, scope: !8396)
!8493 = !DILocation(line: 2007, column: 24, scope: !8396)
!8494 = !DILocation(line: 2008, column: 30, scope: !8396)
!8495 = !DILocation(line: 2008, column: 40, scope: !8396)
!8496 = !DILocation(line: 2008, column: 3, scope: !8396)
!8497 = !DILocation(line: 2008, column: 9, scope: !8396)
!8498 = !DILocation(line: 2008, column: 28, scope: !8396)
!8499 = !DILocation(line: 2009, column: 30, scope: !8396)
!8500 = !DILocation(line: 2009, column: 40, scope: !8396)
!8501 = !DILocation(line: 2009, column: 3, scope: !8396)
!8502 = !DILocation(line: 2009, column: 9, scope: !8396)
!8503 = !DILocation(line: 2009, column: 28, scope: !8396)
!8504 = !DILocation(line: 2011, column: 3, scope: !8396)
!8505 = !DILocation(line: 2013, column: 40, scope: !8396)
!8506 = !DILocation(line: 2013, column: 3, scope: !8396)
!8507 = !DILocation(line: 2013, column: 38, scope: !8396)
!8508 = !DILocation(line: 2015, column: 6, scope: !8396)
!8509 = !DILocation(line: 2015, column: 47, scope: !8396)
!8510 = !DILocation(line: 2015, column: 55, scope: !8396)
!8511 = !DILocation(line: 2015, column: 53, scope: !8396)
!8512 = !DILocation(line: 2015, column: 67, scope: !8396)
!8513 = !DILocation(line: 2014, column: 3, scope: !8396)
!8514 = !DILocation(line: 2014, column: 20, scope: !8396)
!8515 = !DILocation(line: 2014, column: 26, scope: !8396)
!8516 = !DILocation(line: 2018, column: 7, scope: !8396)
!8517 = !DILocation(line: 2018, column: 48, scope: !8396)
!8518 = !DILocation(line: 2017, column: 3, scope: !8396)
!8519 = !DILocation(line: 2017, column: 20, scope: !8396)
!8520 = !DILocation(line: 2018, column: 5, scope: !8396)
!8521 = !DILocation(line: 2020, column: 6, scope: !8396)
!8522 = !DILocation(line: 2020, column: 46, scope: !8396)
!8523 = !DILocation(line: 2020, column: 54, scope: !8396)
!8524 = !DILocation(line: 2020, column: 52, scope: !8396)
!8525 = !DILocation(line: 2020, column: 66, scope: !8396)
!8526 = !DILocation(line: 2019, column: 3, scope: !8396)
!8527 = !DILocation(line: 2019, column: 19, scope: !8396)
!8528 = !DILocation(line: 2019, column: 25, scope: !8396)
!8529 = !DILocation(line: 2023, column: 5, scope: !8396)
!8530 = !DILocation(line: 2023, column: 45, scope: !8396)
!8531 = !DILocation(line: 2022, column: 3, scope: !8396)
!8532 = !DILocation(line: 2022, column: 19, scope: !8396)
!8533 = !DILocation(line: 2022, column: 29, scope: !8396)
!8534 = !DILocation(line: 2024, column: 7, scope: !8535)
!8535 = distinct !DILexicalBlock(scope: !8396, file: !3, line: 2024, column: 7)
!8536 = !DILocation(line: 2024, column: 17, scope: !8535)
!8537 = !DILocation(line: 2024, column: 7, scope: !8396)
!8538 = !DILocation(line: 2025, column: 5, scope: !8535)
!8539 = !DILocation(line: 2027, column: 7, scope: !8540)
!8540 = distinct !DILexicalBlock(scope: !8396, file: !3, line: 2027, column: 7)
!8541 = !DILocation(line: 2027, column: 17, scope: !8540)
!8542 = !DILocation(line: 2027, column: 7, scope: !8396)
!8543 = !DILocation(line: 2029, column: 22, scope: !8544)
!8544 = distinct !DILexicalBlock(scope: !8540, file: !3, line: 2028, column: 5)
!8545 = !DILocation(line: 2029, column: 7, scope: !8544)
!8546 = !DILocation(line: 2030, column: 7, scope: !8544)
!8547 = !DILocation(line: 2030, column: 13, scope: !8544)
!8548 = !DILocation(line: 2030, column: 24, scope: !8544)
!8549 = !DILocation(line: 2030, column: 33, scope: !8544)
!8550 = !DILocation(line: 2031, column: 7, scope: !8544)
!8551 = !DILocation(line: 2032, column: 5, scope: !8544)
!8552 = !DILocation(line: 2033, column: 3, scope: !8396)
!8553 = !DILocation(line: 2034, column: 1, scope: !8396)
!8554 = distinct !DISubprogram(name: "copy_static_chain", scope: !3, file: !3, line: 4619, type: !4330, scopeLine: 4620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8555 = !DILocalVariable(name: "static_chain", arg: 1, scope: !8554, file: !3, line: 4619, type: !2586)
!8556 = !DILocation(line: 4619, column: 25, scope: !8554)
!8557 = !DILocalVariable(name: "id", arg: 2, scope: !8554, file: !3, line: 4619, type: !3983)
!8558 = !DILocation(line: 4619, column: 56, scope: !8554)
!8559 = !DILocalVariable(name: "chain_copy", scope: !8554, file: !3, line: 4621, type: !2585)
!8560 = !DILocation(line: 4621, column: 9, scope: !8554)
!8561 = !DILocalVariable(name: "pvar", scope: !8554, file: !3, line: 4621, type: !2585)
!8562 = !DILocation(line: 4621, column: 22, scope: !8554)
!8563 = !DILocation(line: 4623, column: 14, scope: !8554)
!8564 = !DILocation(line: 4624, column: 15, scope: !8565)
!8565 = distinct !DILexicalBlock(scope: !8554, file: !3, line: 4624, column: 3)
!8566 = !DILocation(line: 4624, column: 13, scope: !8565)
!8567 = !DILocation(line: 4624, column: 8, scope: !8565)
!8568 = !DILocation(line: 4624, column: 28, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 4624, column: 3)
!8570 = !DILocation(line: 4624, column: 27, scope: !8569)
!8571 = !DILocation(line: 4624, column: 3, scope: !8565)
!8572 = !DILocalVariable(name: "new_tree", scope: !8573, file: !3, line: 4626, type: !2586)
!8573 = distinct !DILexicalBlock(scope: !8569, file: !3, line: 4625, column: 5)
!8574 = !DILocation(line: 4626, column: 12, scope: !8573)
!8575 = !DILocation(line: 4626, column: 36, scope: !8573)
!8576 = !DILocation(line: 4626, column: 35, scope: !8573)
!8577 = !DILocation(line: 4626, column: 42, scope: !8573)
!8578 = !DILocation(line: 4626, column: 23, scope: !8573)
!8579 = !DILocation(line: 4627, column: 18, scope: !8573)
!8580 = !DILocation(line: 4627, column: 42, scope: !8573)
!8581 = !DILocation(line: 4627, column: 7, scope: !8573)
!8582 = !DILocation(line: 4628, column: 31, scope: !8573)
!8583 = !DILocation(line: 4628, column: 7, scope: !8573)
!8584 = !DILocation(line: 4628, column: 29, scope: !8573)
!8585 = !DILocation(line: 4629, column: 15, scope: !8573)
!8586 = !DILocation(line: 4629, column: 8, scope: !8573)
!8587 = !DILocation(line: 4629, column: 13, scope: !8573)
!8588 = !DILocation(line: 4630, column: 5, scope: !8573)
!8589 = !DILocation(line: 4624, column: 42, scope: !8569)
!8590 = !DILocation(line: 4624, column: 39, scope: !8569)
!8591 = !DILocation(line: 4624, column: 3, scope: !8569)
!8592 = distinct !{!8592, !8571, !8593}
!8593 = !DILocation(line: 4630, column: 5, scope: !8565)
!8594 = !DILocation(line: 4631, column: 10, scope: !8554)
!8595 = !DILocation(line: 4631, column: 3, scope: !8554)
!8596 = distinct !DISubprogram(name: "VEC_ipa_replace_map_p_base_length", scope: !385, file: !385, line: 168, type: !8597, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8597 = !DISubroutineType(types: !8598)
!8598 = !{!7, !8599}
!8599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8600, size: 64)
!8600 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4179)
!8601 = !DILocalVariable(name: "vec_", arg: 1, scope: !8596, file: !385, line: 168, type: !8599)
!8602 = !DILocation(line: 168, column: 1, scope: !8596)
!8603 = distinct !DISubprogram(name: "VEC_ipa_replace_map_p_base_index", scope: !385, file: !385, line: 168, type: !8604, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8604 = !DISubroutineType(types: !8605)
!8605 = !{!4186, !8599, !7}
!8606 = !DILocalVariable(name: "vec_", arg: 1, scope: !8603, file: !385, line: 168, type: !8599)
!8607 = !DILocation(line: 168, column: 1, scope: !8603)
!8608 = !DILocalVariable(name: "ix_", arg: 2, scope: !8603, file: !385, line: 168, type: !7)
!8609 = !DILocation(line: 0, scope: !8603)
!8610 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !8611, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8611 = !DISubroutineType(types: !8612)
!8612 = !{!2706, !8613}
!8613 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !2587, line: 59, baseType: !4253)
!8614 = !DILocalVariable(name: "t", arg: 1, scope: !8610, file: !135, line: 4551, type: !8613)
!8615 = !DILocation(line: 4551, column: 33, scope: !8610)
!8616 = !DILocation(line: 4553, column: 11, scope: !8610)
!8617 = !DILocation(line: 4553, column: 3, scope: !8610)
!8618 = !DILocation(line: 4562, column: 7, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8610, file: !135, line: 4554, column: 5)
!8620 = !DILocation(line: 4565, column: 7, scope: !8619)
!8621 = !DILocation(line: 4567, column: 1, scope: !8610)
!8622 = distinct !DISubprogram(name: "setup_one_parameter", scope: !3, file: !3, line: 2338, type: !8623, scopeLine: 2340, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8623 = !DISubroutineType(types: !8624)
!8624 = !{!2917, !3983, !2586, !2586, !2586, !3473, !2585}
!8625 = !DILocalVariable(name: "id", arg: 1, scope: !8622, file: !3, line: 2338, type: !3983)
!8626 = !DILocation(line: 2338, column: 38, scope: !8622)
!8627 = !DILocalVariable(name: "p", arg: 2, scope: !8622, file: !3, line: 2338, type: !2586)
!8628 = !DILocation(line: 2338, column: 47, scope: !8622)
!8629 = !DILocalVariable(name: "value", arg: 3, scope: !8622, file: !3, line: 2338, type: !2586)
!8630 = !DILocation(line: 2338, column: 55, scope: !8622)
!8631 = !DILocalVariable(name: "fn", arg: 4, scope: !8622, file: !3, line: 2338, type: !2586)
!8632 = !DILocation(line: 2338, column: 67, scope: !8622)
!8633 = !DILocalVariable(name: "bb", arg: 5, scope: !8622, file: !3, line: 2339, type: !3473)
!8634 = !DILocation(line: 2339, column: 20, scope: !8622)
!8635 = !DILocalVariable(name: "vars", arg: 6, scope: !8622, file: !3, line: 2339, type: !2585)
!8636 = !DILocation(line: 2339, column: 30, scope: !8622)
!8637 = !DILocalVariable(name: "init_stmt", scope: !8622, file: !3, line: 2341, type: !2917)
!8638 = !DILocation(line: 2341, column: 10, scope: !8622)
!8639 = !DILocalVariable(name: "var", scope: !8622, file: !3, line: 2342, type: !2586)
!8640 = !DILocation(line: 2342, column: 8, scope: !8622)
!8641 = !DILocalVariable(name: "rhs", scope: !8622, file: !3, line: 2343, type: !2586)
!8642 = !DILocation(line: 2343, column: 8, scope: !8622)
!8643 = !DILocation(line: 2343, column: 14, scope: !8622)
!8644 = !DILocalVariable(name: "def", scope: !8622, file: !3, line: 2344, type: !2586)
!8645 = !DILocation(line: 2344, column: 8, scope: !8622)
!8646 = !DILocation(line: 2344, column: 32, scope: !8622)
!8647 = !DILocation(line: 2344, column: 15, scope: !8622)
!8648 = !DILocation(line: 2345, column: 30, scope: !8622)
!8649 = !DILocation(line: 2345, column: 34, scope: !8622)
!8650 = !DILocation(line: 2345, column: 44, scope: !8622)
!8651 = !DILocation(line: 2345, column: 10, scope: !8622)
!8652 = !DILocation(line: 2347, column: 7, scope: !8653)
!8653 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2347, column: 7)
!8654 = !DILocation(line: 2348, column: 7, scope: !8653)
!8655 = !DILocation(line: 2348, column: 10, scope: !8653)
!8656 = !DILocation(line: 2348, column: 19, scope: !8653)
!8657 = !DILocation(line: 2348, column: 16, scope: !8653)
!8658 = !DILocation(line: 2349, column: 7, scope: !8653)
!8659 = !DILocation(line: 2349, column: 38, scope: !8653)
!8660 = !DILocation(line: 2349, column: 53, scope: !8653)
!8661 = !DILocation(line: 2349, column: 11, scope: !8653)
!8662 = !DILocation(line: 2347, column: 7, scope: !8622)
!8663 = !DILocation(line: 2351, column: 31, scope: !8664)
!8664 = distinct !DILexicalBlock(scope: !8665, file: !3, line: 2351, column: 11)
!8665 = distinct !DILexicalBlock(scope: !8653, file: !3, line: 2350, column: 5)
!8666 = !DILocation(line: 2351, column: 46, scope: !8664)
!8667 = !DILocation(line: 2351, column: 11, scope: !8664)
!8668 = !DILocation(line: 2351, column: 11, scope: !8665)
!8669 = !DILocation(line: 2352, column: 8, scope: !8664)
!8670 = !DILocation(line: 2352, column: 6, scope: !8664)
!8671 = !DILocation(line: 2352, column: 2, scope: !8664)
!8672 = !DILocation(line: 2358, column: 8, scope: !8664)
!8673 = !DILocation(line: 2358, column: 6, scope: !8664)
!8674 = !DILocation(line: 2359, column: 5, scope: !8665)
!8675 = !DILocation(line: 2364, column: 27, scope: !8622)
!8676 = !DILocation(line: 2364, column: 30, scope: !8622)
!8677 = !DILocation(line: 2364, column: 9, scope: !8622)
!8678 = !DILocation(line: 2364, column: 7, scope: !8622)
!8679 = !DILocation(line: 2367, column: 24, scope: !8680)
!8680 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2367, column: 7)
!8681 = !DILocation(line: 2367, column: 7, scope: !8680)
!8682 = !DILocation(line: 2367, column: 30, scope: !8680)
!8683 = !DILocation(line: 2367, column: 33, scope: !8680)
!8684 = !DILocation(line: 2367, column: 49, scope: !8680)
!8685 = !DILocation(line: 2367, column: 7, scope: !8622)
!8686 = !DILocation(line: 2369, column: 20, scope: !8687)
!8687 = distinct !DILexicalBlock(scope: !8680, file: !3, line: 2368, column: 5)
!8688 = !DILocation(line: 2369, column: 7, scope: !8687)
!8689 = !DILocation(line: 2370, column: 27, scope: !8687)
!8690 = !DILocation(line: 2370, column: 7, scope: !8687)
!8691 = !DILocation(line: 2371, column: 5, scope: !8687)
!8692 = !DILocation(line: 2374, column: 23, scope: !8622)
!8693 = !DILocation(line: 2374, column: 22, scope: !8622)
!8694 = !DILocation(line: 2374, column: 3, scope: !8622)
!8695 = !DILocation(line: 2374, column: 20, scope: !8622)
!8696 = !DILocation(line: 2375, column: 11, scope: !8622)
!8697 = !DILocation(line: 2375, column: 4, scope: !8622)
!8698 = !DILocation(line: 2375, column: 9, scope: !8622)
!8699 = !DILocation(line: 2378, column: 3, scope: !8622)
!8700 = !DILocation(line: 2378, column: 34, scope: !8622)
!8701 = !DILocation(line: 2384, column: 7, scope: !8702)
!8702 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2384, column: 7)
!8703 = !DILocation(line: 2385, column: 7, scope: !8702)
!8704 = !DILocation(line: 2385, column: 11, scope: !8702)
!8705 = !DILocation(line: 2386, column: 7, scope: !8702)
!8706 = !DILocation(line: 2386, column: 10, scope: !8702)
!8707 = !DILocation(line: 2386, column: 16, scope: !8702)
!8708 = !DILocation(line: 2386, column: 20, scope: !8702)
!8709 = !DILocation(line: 2387, column: 7, scope: !8702)
!8710 = !DILocation(line: 2387, column: 11, scope: !8702)
!8711 = !DILocation(line: 2384, column: 7, scope: !8622)
!8712 = !DILocation(line: 2393, column: 36, scope: !8713)
!8713 = distinct !DILexicalBlock(scope: !8714, file: !3, line: 2393, column: 11)
!8714 = distinct !DILexicalBlock(scope: !8702, file: !3, line: 2388, column: 5)
!8715 = !DILocation(line: 2393, column: 11, scope: !8713)
!8716 = !DILocation(line: 2394, column: 4, scope: !8713)
!8717 = !DILocation(line: 2394, column: 34, scope: !8713)
!8718 = !DILocation(line: 2395, column: 8, scope: !8713)
!8719 = !DILocation(line: 2394, column: 7, scope: !8713)
!8720 = !DILocation(line: 2401, column: 4, scope: !8713)
!8721 = !DILocation(line: 2401, column: 34, scope: !8713)
!8722 = !DILocation(line: 2401, column: 41, scope: !8713)
!8723 = !DILocation(line: 2401, column: 9, scope: !8713)
!8724 = !DILocation(line: 2393, column: 11, scope: !8714)
!8725 = !DILocation(line: 2403, column: 21, scope: !8726)
!8726 = distinct !DILexicalBlock(scope: !8713, file: !3, line: 2402, column: 2)
!8727 = !DILocation(line: 2403, column: 25, scope: !8726)
!8728 = !DILocation(line: 2403, column: 28, scope: !8726)
!8729 = !DILocation(line: 2403, column: 4, scope: !8726)
!8730 = !DILocation(line: 2404, column: 27, scope: !8726)
!8731 = !DILocation(line: 2404, column: 31, scope: !8726)
!8732 = !DILocation(line: 2404, column: 34, scope: !8726)
!8733 = !DILocation(line: 2404, column: 4, scope: !8726)
!8734 = !DILocation(line: 2405, column: 35, scope: !8726)
!8735 = !DILocation(line: 2405, column: 39, scope: !8726)
!8736 = !DILocation(line: 2405, column: 43, scope: !8726)
!8737 = !DILocation(line: 2405, column: 48, scope: !8726)
!8738 = !DILocation(line: 2405, column: 11, scope: !8726)
!8739 = !DILocation(line: 2405, column: 4, scope: !8726)
!8740 = !DILocation(line: 2407, column: 5, scope: !8714)
!8741 = !DILocation(line: 2412, column: 20, scope: !8622)
!8742 = !DILocation(line: 2412, column: 24, scope: !8622)
!8743 = !DILocation(line: 2412, column: 27, scope: !8622)
!8744 = !DILocation(line: 2412, column: 3, scope: !8622)
!8745 = !DILocation(line: 2423, column: 7, scope: !8746)
!8746 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2423, column: 7)
!8747 = !DILocation(line: 2423, column: 7, scope: !8622)
!8748 = !DILocation(line: 2424, column: 5, scope: !8746)
!8749 = !DILocation(line: 2424, column: 25, scope: !8746)
!8750 = !DILocation(line: 2436, column: 24, scope: !8751)
!8751 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2436, column: 7)
!8752 = !DILocation(line: 2436, column: 7, scope: !8751)
!8753 = !DILocation(line: 2436, column: 30, scope: !8751)
!8754 = !DILocation(line: 2436, column: 33, scope: !8751)
!8755 = !DILocation(line: 2436, column: 37, scope: !8751)
!8756 = !DILocation(line: 2436, column: 40, scope: !8751)
!8757 = !DILocation(line: 2436, column: 44, scope: !8751)
!8758 = !DILocation(line: 2436, column: 62, scope: !8751)
!8759 = !DILocation(line: 2436, column: 47, scope: !8751)
!8760 = !DILocation(line: 2437, column: 7, scope: !8751)
!8761 = !DILocation(line: 2437, column: 11, scope: !8751)
!8762 = !DILocation(line: 2438, column: 11, scope: !8751)
!8763 = !DILocation(line: 2438, column: 15, scope: !8751)
!8764 = !DILocation(line: 2439, column: 8, scope: !8751)
!8765 = !DILocation(line: 2439, column: 36, scope: !8751)
!8766 = !DILocation(line: 2439, column: 11, scope: !8751)
!8767 = !DILocation(line: 2440, column: 7, scope: !8751)
!8768 = !DILocation(line: 2440, column: 11, scope: !8751)
!8769 = !DILocation(line: 2440, column: 27, scope: !8751)
!8770 = !DILocation(line: 2441, column: 4, scope: !8751)
!8771 = !DILocation(line: 2441, column: 32, scope: !8751)
!8772 = !DILocation(line: 2441, column: 7, scope: !8751)
!8773 = !DILocation(line: 2442, column: 7, scope: !8751)
!8774 = !DILocation(line: 2442, column: 11, scope: !8751)
!8775 = !DILocation(line: 2436, column: 7, scope: !8622)
!8776 = !DILocation(line: 2444, column: 24, scope: !8777)
!8777 = distinct !DILexicalBlock(scope: !8751, file: !3, line: 2443, column: 5)
!8778 = !DILocation(line: 2444, column: 28, scope: !8777)
!8779 = !DILocation(line: 2444, column: 33, scope: !8777)
!8780 = !DILocation(line: 2444, column: 7, scope: !8777)
!8781 = !DILocation(line: 2445, column: 38, scope: !8777)
!8782 = !DILocation(line: 2445, column: 42, scope: !8777)
!8783 = !DILocation(line: 2445, column: 46, scope: !8777)
!8784 = !DILocation(line: 2445, column: 51, scope: !8777)
!8785 = !DILocation(line: 2445, column: 14, scope: !8777)
!8786 = !DILocation(line: 2445, column: 7, scope: !8777)
!8787 = !DILocation(line: 2450, column: 7, scope: !8788)
!8788 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2450, column: 7)
!8789 = !DILocation(line: 2450, column: 16, scope: !8788)
!8790 = !DILocation(line: 2450, column: 36, scope: !8788)
!8791 = !DILocation(line: 2450, column: 19, scope: !8788)
!8792 = !DILocation(line: 2450, column: 42, scope: !8788)
!8793 = !DILocation(line: 2450, column: 46, scope: !8788)
!8794 = !DILocation(line: 2450, column: 50, scope: !8788)
!8795 = !DILocation(line: 2450, column: 68, scope: !8788)
!8796 = !DILocation(line: 2450, column: 53, scope: !8788)
!8797 = !DILocation(line: 2450, column: 7, scope: !8622)
!8798 = !DILocation(line: 2452, column: 7, scope: !8799)
!8799 = distinct !DILexicalBlock(scope: !8788, file: !3, line: 2451, column: 5)
!8800 = !DILocation(line: 2453, column: 38, scope: !8799)
!8801 = !DILocation(line: 2453, column: 42, scope: !8799)
!8802 = !DILocation(line: 2453, column: 46, scope: !8799)
!8803 = !DILocation(line: 2453, column: 51, scope: !8799)
!8804 = !DILocation(line: 2453, column: 14, scope: !8799)
!8805 = !DILocation(line: 2453, column: 7, scope: !8799)
!8806 = !DILocation(line: 2458, column: 7, scope: !8807)
!8807 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 2458, column: 7)
!8808 = !DILocation(line: 2458, column: 7, scope: !8622)
!8809 = !DILocation(line: 2460, column: 11, scope: !8810)
!8810 = distinct !DILexicalBlock(scope: !8811, file: !3, line: 2460, column: 11)
!8811 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 2459, column: 5)
!8812 = !DILocation(line: 2460, column: 18, scope: !8810)
!8813 = !DILocation(line: 2460, column: 15, scope: !8810)
!8814 = !DILocation(line: 2460, column: 11, scope: !8811)
!8815 = !DILocation(line: 2462, column: 21, scope: !8816)
!8816 = distinct !DILexicalBlock(scope: !8810, file: !3, line: 2461, column: 2)
!8817 = !DILocation(line: 2462, column: 25, scope: !8816)
!8818 = !DILocation(line: 2462, column: 28, scope: !8816)
!8819 = !DILocation(line: 2462, column: 4, scope: !8816)
!8820 = !DILocation(line: 2463, column: 35, scope: !8816)
!8821 = !DILocation(line: 2463, column: 39, scope: !8816)
!8822 = !DILocation(line: 2463, column: 43, scope: !8816)
!8823 = !DILocation(line: 2463, column: 48, scope: !8816)
!8824 = !DILocation(line: 2463, column: 11, scope: !8816)
!8825 = !DILocation(line: 2463, column: 4, scope: !8816)
!8826 = !DILocation(line: 2466, column: 7, scope: !8811)
!8827 = !DILocation(line: 2470, column: 11, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8811, file: !3, line: 2470, column: 11)
!8829 = !DILocation(line: 2470, column: 15, scope: !8828)
!8830 = !DILocation(line: 2470, column: 35, scope: !8828)
!8831 = !DILocation(line: 2470, column: 18, scope: !8828)
!8832 = !DILocation(line: 2470, column: 41, scope: !8828)
!8833 = !DILocation(line: 2470, column: 59, scope: !8828)
!8834 = !DILocation(line: 2470, column: 44, scope: !8828)
!8835 = !DILocation(line: 2470, column: 11, scope: !8811)
!8836 = !DILocation(line: 2472, column: 26, scope: !8837)
!8837 = distinct !DILexicalBlock(scope: !8828, file: !3, line: 2471, column: 2)
!8838 = !DILocation(line: 2472, column: 31, scope: !8837)
!8839 = !DILocation(line: 2472, column: 10, scope: !8837)
!8840 = !DILocation(line: 2472, column: 8, scope: !8837)
!8841 = !DILocation(line: 2473, column: 23, scope: !8837)
!8842 = !DILocation(line: 2473, column: 21, scope: !8837)
!8843 = !DILocation(line: 2474, column: 4, scope: !8837)
!8844 = !DILocation(line: 2474, column: 34, scope: !8837)
!8845 = !DILocation(line: 2475, column: 21, scope: !8837)
!8846 = !DILocation(line: 2475, column: 4, scope: !8837)
!8847 = !DILocation(line: 2476, column: 2, scope: !8837)
!8848 = !DILocation(line: 2478, column: 21, scope: !8828)
!8849 = !DILocation(line: 2478, column: 19, scope: !8828)
!8850 = !DILocation(line: 2480, column: 11, scope: !8851)
!8851 = distinct !DILexicalBlock(scope: !8811, file: !3, line: 2480, column: 11)
!8852 = !DILocation(line: 2480, column: 14, scope: !8851)
!8853 = !DILocation(line: 2480, column: 17, scope: !8851)
!8854 = !DILocation(line: 2480, column: 11, scope: !8811)
!8855 = !DILocation(line: 2481, column: 27, scope: !8851)
!8856 = !DILocation(line: 2481, column: 31, scope: !8851)
!8857 = !DILocation(line: 2481, column: 35, scope: !8851)
!8858 = !DILocation(line: 2481, column: 9, scope: !8851)
!8859 = !DILocation(line: 2482, column: 5, scope: !8811)
!8860 = !DILocation(line: 2483, column: 10, scope: !8622)
!8861 = !DILocation(line: 2483, column: 3, scope: !8622)
!8862 = !DILocation(line: 2484, column: 1, scope: !8622)
!8863 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !1618, file: !1618, line: 34, type: !8864, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8864 = !DISubroutineType(types: !8865)
!8865 = !{!4109, !8866, !2917}
!8866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4247, size: 64)
!8867 = !DILocalVariable(name: "vec_", arg: 1, scope: !8863, file: !1618, line: 34, type: !8866)
!8868 = !DILocation(line: 34, column: 1, scope: !8863)
!8869 = !DILocalVariable(name: "obj_", arg: 2, scope: !8863, file: !1618, line: 34, type: !2917)
!8870 = distinct !DISubprogram(name: "copy_arguments_for_versioning", scope: !3, file: !3, line: 4584, type: !8871, scopeLine: 4586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8871 = !DISubroutineType(types: !8872)
!8872 = !{!2586, !2586, !3983, !3531, !2585}
!8873 = !DILocalVariable(name: "orig_parm", arg: 1, scope: !8870, file: !3, line: 4584, type: !2586)
!8874 = !DILocation(line: 4584, column: 37, scope: !8870)
!8875 = !DILocalVariable(name: "id", arg: 2, scope: !8870, file: !3, line: 4584, type: !3983)
!8876 = !DILocation(line: 4584, column: 65, scope: !8870)
!8877 = !DILocalVariable(name: "args_to_skip", arg: 3, scope: !8870, file: !3, line: 4585, type: !3531)
!8878 = !DILocation(line: 4585, column: 18, scope: !8870)
!8879 = !DILocalVariable(name: "vars", arg: 4, scope: !8870, file: !3, line: 4585, type: !2585)
!8880 = !DILocation(line: 4585, column: 38, scope: !8870)
!8881 = !DILocalVariable(name: "arg", scope: !8870, file: !3, line: 4587, type: !2586)
!8882 = !DILocation(line: 4587, column: 8, scope: !8870)
!8883 = !DILocalVariable(name: "parg", scope: !8870, file: !3, line: 4587, type: !2585)
!8884 = !DILocation(line: 4587, column: 14, scope: !8870)
!8885 = !DILocalVariable(name: "new_parm", scope: !8870, file: !3, line: 4588, type: !2586)
!8886 = !DILocation(line: 4588, column: 8, scope: !8870)
!8887 = !DILocalVariable(name: "i", scope: !8870, file: !3, line: 4589, type: !2683)
!8888 = !DILocation(line: 4589, column: 7, scope: !8870)
!8889 = !DILocation(line: 4591, column: 8, scope: !8870)
!8890 = !DILocation(line: 4593, column: 14, scope: !8891)
!8891 = distinct !DILexicalBlock(scope: !8870, file: !3, line: 4593, column: 3)
!8892 = !DILocation(line: 4593, column: 12, scope: !8891)
!8893 = !DILocation(line: 4593, column: 8, scope: !8891)
!8894 = !DILocation(line: 4593, column: 25, scope: !8895)
!8895 = distinct !DILexicalBlock(scope: !8891, file: !3, line: 4593, column: 3)
!8896 = !DILocation(line: 4593, column: 3, scope: !8891)
!8897 = !DILocation(line: 4594, column: 10, scope: !8898)
!8898 = distinct !DILexicalBlock(scope: !8895, file: !3, line: 4594, column: 9)
!8899 = !DILocation(line: 4594, column: 23, scope: !8898)
!8900 = !DILocation(line: 4594, column: 41, scope: !8898)
!8901 = !DILocation(line: 4594, column: 55, scope: !8898)
!8902 = !DILocation(line: 4594, column: 27, scope: !8898)
!8903 = !DILocation(line: 4594, column: 9, scope: !8895)
!8904 = !DILocalVariable(name: "new_tree", scope: !8905, file: !3, line: 4596, type: !2586)
!8905 = distinct !DILexicalBlock(scope: !8898, file: !3, line: 4595, column: 7)
!8906 = !DILocation(line: 4596, column: 14, scope: !8905)
!8907 = !DILocation(line: 4596, column: 37, scope: !8905)
!8908 = !DILocation(line: 4596, column: 42, scope: !8905)
!8909 = !DILocation(line: 4596, column: 25, scope: !8905)
!8910 = !DILocation(line: 4597, column: 20, scope: !8905)
!8911 = !DILocation(line: 4597, column: 44, scope: !8905)
!8912 = !DILocation(line: 4597, column: 9, scope: !8905)
!8913 = !DILocation(line: 4598, column: 17, scope: !8905)
!8914 = !DILocation(line: 4598, column: 10, scope: !8905)
!8915 = !DILocation(line: 4598, column: 15, scope: !8905)
!8916 = !DILocation(line: 4599, column: 10, scope: !8905)
!8917 = !DILocation(line: 4599, column: 7, scope: !8905)
!8918 = !DILocation(line: 4600, column: 7, scope: !8905)
!8919 = !DILocation(line: 4601, column: 37, scope: !8920)
!8920 = distinct !DILexicalBlock(scope: !8898, file: !3, line: 4601, column: 14)
!8921 = !DILocation(line: 4601, column: 41, scope: !8920)
!8922 = !DILocation(line: 4601, column: 51, scope: !8920)
!8923 = !DILocation(line: 4601, column: 15, scope: !8920)
!8924 = !DILocation(line: 4601, column: 14, scope: !8898)
!8925 = !DILocalVariable(name: "var", scope: !8926, file: !3, line: 4606, type: !2586)
!8926 = distinct !DILexicalBlock(scope: !8920, file: !3, line: 4602, column: 7)
!8927 = !DILocation(line: 4606, column: 7, scope: !8926)
!8928 = !DILocation(line: 4606, column: 31, scope: !8926)
!8929 = !DILocation(line: 4606, column: 36, scope: !8926)
!8930 = !DILocation(line: 4606, column: 13, scope: !8926)
!8931 = !DILocation(line: 4607, column: 15, scope: !8926)
!8932 = !DILocation(line: 4607, column: 2, scope: !8926)
!8933 = !DILocation(line: 4608, column: 22, scope: !8926)
!8934 = !DILocation(line: 4608, column: 2, scope: !8926)
!8935 = !DILocation(line: 4609, column: 19, scope: !8926)
!8936 = !DILocation(line: 4609, column: 23, scope: !8926)
!8937 = !DILocation(line: 4609, column: 28, scope: !8926)
!8938 = !DILocation(line: 4609, column: 2, scope: !8926)
!8939 = !DILocation(line: 4611, column: 29, scope: !8926)
!8940 = !DILocation(line: 4611, column: 28, scope: !8926)
!8941 = !DILocation(line: 4611, column: 9, scope: !8926)
!8942 = !DILocation(line: 4611, column: 26, scope: !8926)
!8943 = !DILocation(line: 4612, column: 17, scope: !8926)
!8944 = !DILocation(line: 4612, column: 10, scope: !8926)
!8945 = !DILocation(line: 4612, column: 15, scope: !8926)
!8946 = !DILocation(line: 4613, column: 7, scope: !8926)
!8947 = !DILocation(line: 4594, column: 56, scope: !8898)
!8948 = !DILocation(line: 4593, column: 36, scope: !8895)
!8949 = !DILocation(line: 4593, column: 34, scope: !8895)
!8950 = !DILocation(line: 4593, column: 55, scope: !8895)
!8951 = !DILocation(line: 4593, column: 3, scope: !8895)
!8952 = distinct !{!8952, !8896, !8953}
!8953 = !DILocation(line: 4613, column: 7, scope: !8891)
!8954 = !DILocation(line: 4614, column: 10, scope: !8870)
!8955 = !DILocation(line: 4614, column: 3, scope: !8870)
!8956 = distinct !DISubprogram(name: "remap_blocks", scope: !3, file: !3, line: 611, type: !4330, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8957 = !DILocalVariable(name: "block", arg: 1, scope: !8956, file: !3, line: 611, type: !2586)
!8958 = !DILocation(line: 611, column: 20, scope: !8956)
!8959 = !DILocalVariable(name: "id", arg: 2, scope: !8956, file: !3, line: 611, type: !3983)
!8960 = !DILocation(line: 611, column: 43, scope: !8956)
!8961 = !DILocalVariable(name: "t", scope: !8956, file: !3, line: 613, type: !2586)
!8962 = !DILocation(line: 613, column: 8, scope: !8956)
!8963 = !DILocalVariable(name: "new_tree", scope: !8956, file: !3, line: 614, type: !2586)
!8964 = !DILocation(line: 614, column: 8, scope: !8956)
!8965 = !DILocation(line: 614, column: 19, scope: !8956)
!8966 = !DILocation(line: 616, column: 8, scope: !8967)
!8967 = distinct !DILexicalBlock(scope: !8956, file: !3, line: 616, column: 7)
!8968 = !DILocation(line: 616, column: 7, scope: !8956)
!8969 = !DILocation(line: 617, column: 5, scope: !8967)
!8970 = !DILocation(line: 619, column: 27, scope: !8956)
!8971 = !DILocation(line: 619, column: 3, scope: !8956)
!8972 = !DILocation(line: 620, column: 3, scope: !8956)
!8973 = !DILocation(line: 621, column: 12, scope: !8974)
!8974 = distinct !DILexicalBlock(scope: !8956, file: !3, line: 621, column: 3)
!8975 = !DILocation(line: 621, column: 10, scope: !8974)
!8976 = !DILocation(line: 621, column: 8, scope: !8974)
!8977 = !DILocation(line: 621, column: 37, scope: !8978)
!8978 = distinct !DILexicalBlock(scope: !8974, file: !3, line: 621, column: 3)
!8979 = !DILocation(line: 621, column: 3, scope: !8974)
!8980 = !DILocation(line: 622, column: 28, scope: !8978)
!8981 = !DILocation(line: 622, column: 52, scope: !8978)
!8982 = !DILocation(line: 622, column: 55, scope: !8978)
!8983 = !DILocation(line: 622, column: 38, scope: !8978)
!8984 = !DILocation(line: 622, column: 5, scope: !8978)
!8985 = !DILocation(line: 621, column: 45, scope: !8978)
!8986 = !DILocation(line: 621, column: 43, scope: !8978)
!8987 = !DILocation(line: 621, column: 3, scope: !8978)
!8988 = distinct !{!8988, !8979, !8989}
!8989 = !DILocation(line: 622, column: 58, scope: !8974)
!8990 = !DILocation(line: 625, column: 49, scope: !8956)
!8991 = !DILocation(line: 625, column: 32, scope: !8956)
!8992 = !DILocation(line: 625, column: 3, scope: !8956)
!8993 = !DILocation(line: 625, column: 30, scope: !8956)
!8994 = !DILocation(line: 626, column: 10, scope: !8956)
!8995 = !DILocation(line: 626, column: 3, scope: !8956)
!8996 = !DILocation(line: 627, column: 1, scope: !8956)
!8997 = distinct !DISubprogram(name: "declare_inline_vars", scope: !3, file: !3, line: 4445, type: !8998, scopeLine: 4446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!8998 = !DISubroutineType(types: !8999)
!8999 = !{null, !2586, !2586}
!9000 = !DILocalVariable(name: "block", arg: 1, scope: !8997, file: !3, line: 4445, type: !2586)
!9001 = !DILocation(line: 4445, column: 27, scope: !8997)
!9002 = !DILocalVariable(name: "vars", arg: 2, scope: !8997, file: !3, line: 4445, type: !2586)
!9003 = !DILocation(line: 4445, column: 39, scope: !8997)
!9004 = !DILocalVariable(name: "t", scope: !8997, file: !3, line: 4447, type: !2586)
!9005 = !DILocation(line: 4447, column: 8, scope: !8997)
!9006 = !DILocation(line: 4448, column: 12, scope: !9007)
!9007 = distinct !DILexicalBlock(scope: !8997, file: !3, line: 4448, column: 3)
!9008 = !DILocation(line: 4448, column: 10, scope: !9007)
!9009 = !DILocation(line: 4448, column: 8, scope: !9007)
!9010 = !DILocation(line: 4448, column: 18, scope: !9011)
!9011 = distinct !DILexicalBlock(scope: !9007, file: !3, line: 4448, column: 3)
!9012 = !DILocation(line: 4448, column: 3, scope: !9007)
!9013 = !DILocation(line: 4450, column: 7, scope: !9014)
!9014 = distinct !DILexicalBlock(scope: !9011, file: !3, line: 4449, column: 5)
!9015 = !DILocation(line: 4450, column: 36, scope: !9014)
!9016 = !DILocation(line: 4451, column: 7, scope: !9014)
!9017 = !DILocation(line: 4452, column: 27, scope: !9014)
!9018 = !DILocation(line: 4452, column: 7, scope: !9014)
!9019 = !DILocation(line: 4452, column: 13, scope: !9014)
!9020 = !DILocation(line: 4452, column: 25, scope: !9014)
!9021 = !DILocation(line: 4453, column: 5, scope: !9014)
!9022 = !DILocation(line: 4448, column: 25, scope: !9011)
!9023 = !DILocation(line: 4448, column: 23, scope: !9011)
!9024 = !DILocation(line: 4448, column: 3, scope: !9011)
!9025 = distinct !{!9025, !9012, !9026}
!9026 = !DILocation(line: 4453, column: 5, scope: !9007)
!9027 = !DILocation(line: 4455, column: 7, scope: !9028)
!9028 = distinct !DILexicalBlock(scope: !8997, file: !3, line: 4455, column: 7)
!9029 = !DILocation(line: 4455, column: 7, scope: !8997)
!9030 = !DILocation(line: 4456, column: 35, scope: !9028)
!9031 = !DILocation(line: 4456, column: 55, scope: !9028)
!9032 = !DILocation(line: 4456, column: 26, scope: !9028)
!9033 = !DILocation(line: 4456, column: 5, scope: !9028)
!9034 = !DILocation(line: 4456, column: 24, scope: !9028)
!9035 = !DILocation(line: 4457, column: 1, scope: !8997)
!9036 = distinct !DISubprogram(name: "can_be_nonlocal", scope: !3, file: !3, line: 492, type: !9037, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9037 = !DISubroutineType(types: !9038)
!9038 = !{!2706, !2586, !3983}
!9039 = !DILocalVariable(name: "decl", arg: 1, scope: !9036, file: !3, line: 492, type: !2586)
!9040 = !DILocation(line: 492, column: 23, scope: !9036)
!9041 = !DILocalVariable(name: "id", arg: 2, scope: !9036, file: !3, line: 492, type: !3983)
!9042 = !DILocation(line: 492, column: 45, scope: !9036)
!9043 = !DILocation(line: 495, column: 7, scope: !9044)
!9044 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 495, column: 7)
!9045 = !DILocation(line: 495, column: 24, scope: !9044)
!9046 = !DILocation(line: 495, column: 7, scope: !9036)
!9047 = !DILocation(line: 496, column: 5, scope: !9044)
!9048 = !DILocation(line: 500, column: 7, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 500, column: 7)
!9050 = !DILocation(line: 500, column: 24, scope: !9049)
!9051 = !DILocation(line: 501, column: 7, scope: !9049)
!9052 = !DILocation(line: 501, column: 29, scope: !9049)
!9053 = !DILocation(line: 501, column: 35, scope: !9049)
!9054 = !DILocation(line: 501, column: 39, scope: !9049)
!9055 = !DILocation(line: 501, column: 11, scope: !9049)
!9056 = !DILocation(line: 500, column: 7, scope: !9036)
!9057 = !DILocation(line: 502, column: 5, scope: !9049)
!9058 = !DILocation(line: 506, column: 7, scope: !9059)
!9059 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 506, column: 7)
!9060 = !DILocation(line: 506, column: 24, scope: !9059)
!9061 = !DILocation(line: 506, column: 36, scope: !9059)
!9062 = !DILocation(line: 506, column: 39, scope: !9059)
!9063 = !DILocation(line: 506, column: 56, scope: !9059)
!9064 = !DILocation(line: 506, column: 7, scope: !9036)
!9065 = !DILocation(line: 507, column: 5, scope: !9059)
!9066 = !DILocation(line: 512, column: 7, scope: !9067)
!9067 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 512, column: 7)
!9068 = !DILocation(line: 512, column: 42, scope: !9067)
!9069 = !DILocation(line: 512, column: 60, scope: !9067)
!9070 = !DILocation(line: 512, column: 27, scope: !9067)
!9071 = !DILocation(line: 512, column: 24, scope: !9067)
!9072 = !DILocation(line: 512, column: 7, scope: !9036)
!9073 = !DILocation(line: 513, column: 5, scope: !9067)
!9074 = !DILocation(line: 516, column: 25, scope: !9075)
!9075 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 516, column: 7)
!9076 = !DILocation(line: 516, column: 8, scope: !9075)
!9077 = !DILocation(line: 516, column: 7, scope: !9036)
!9078 = !DILocation(line: 517, column: 5, scope: !9075)
!9079 = !DILocation(line: 520, column: 16, scope: !9080)
!9080 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 520, column: 7)
!9081 = !DILocation(line: 520, column: 7, scope: !9080)
!9082 = !DILocation(line: 520, column: 7, scope: !9036)
!9083 = !DILocation(line: 521, column: 5, scope: !9080)
!9084 = !DILocation(line: 523, column: 3, scope: !9036)
!9085 = !DILocation(line: 524, column: 1, scope: !9036)
!9086 = distinct !DISubprogram(name: "copy_body", scope: !3, file: !3, line: 2217, type: !9087, scopeLine: 2219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9087 = !DISubroutineType(types: !9088)
!9088 = !{!2586, !3983, !3127, !2683, !3473, !3473}
!9089 = !DILocalVariable(name: "id", arg: 1, scope: !9086, file: !3, line: 2217, type: !3983)
!9090 = !DILocation(line: 2217, column: 28, scope: !9086)
!9091 = !DILocalVariable(name: "count", arg: 2, scope: !9086, file: !3, line: 2217, type: !3127)
!9092 = !DILocation(line: 2217, column: 42, scope: !9086)
!9093 = !DILocalVariable(name: "frequency_scale", arg: 3, scope: !9086, file: !3, line: 2217, type: !2683)
!9094 = !DILocation(line: 2217, column: 53, scope: !9086)
!9095 = !DILocalVariable(name: "entry_block_map", arg: 4, scope: !9086, file: !3, line: 2218, type: !3473)
!9096 = !DILocation(line: 2218, column: 17, scope: !9086)
!9097 = !DILocalVariable(name: "exit_block_map", arg: 5, scope: !9086, file: !3, line: 2218, type: !3473)
!9098 = !DILocation(line: 2218, column: 46, scope: !9086)
!9099 = !DILocalVariable(name: "fndecl", scope: !9086, file: !3, line: 2220, type: !2586)
!9100 = !DILocation(line: 2220, column: 8, scope: !9086)
!9101 = !DILocation(line: 2220, column: 17, scope: !9086)
!9102 = !DILocation(line: 2220, column: 21, scope: !9086)
!9103 = !DILocalVariable(name: "body", scope: !9086, file: !3, line: 2221, type: !2586)
!9104 = !DILocation(line: 2221, column: 8, scope: !9086)
!9105 = !DILocation(line: 2224, column: 3, scope: !9086)
!9106 = !DILocation(line: 2225, column: 25, scope: !9086)
!9107 = !DILocation(line: 2225, column: 29, scope: !9086)
!9108 = !DILocation(line: 2225, column: 36, scope: !9086)
!9109 = !DILocation(line: 2225, column: 53, scope: !9086)
!9110 = !DILocation(line: 2225, column: 70, scope: !9086)
!9111 = !DILocation(line: 2225, column: 10, scope: !9086)
!9112 = !DILocation(line: 2225, column: 8, scope: !9086)
!9113 = !DILocation(line: 2226, column: 21, scope: !9086)
!9114 = !DILocation(line: 2226, column: 3, scope: !9086)
!9115 = !DILocation(line: 2228, column: 10, scope: !9086)
!9116 = !DILocation(line: 2228, column: 3, scope: !9086)
!9117 = distinct !DISubprogram(name: "single_succ_edge", scope: !337, file: !337, line: 643, type: !9118, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9118 = !DISubroutineType(types: !9119)
!9119 = !{!2897, !9120}
!9120 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !2587, line: 112, baseType: !9121)
!9121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9122, size: 64)
!9122 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2882)
!9123 = !DILocalVariable(name: "bb", arg: 1, scope: !9117, file: !337, line: 643, type: !9120)
!9124 = !DILocation(line: 643, column: 37, scope: !9117)
!9125 = !DILocation(line: 645, column: 3, scope: !9117)
!9126 = !DILocation(line: 646, column: 10, scope: !9117)
!9127 = !DILocation(line: 646, column: 3, scope: !9117)
!9128 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !1618, file: !1618, line: 33, type: !9129, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9129 = !DISubroutineType(types: !9130)
!9130 = !{!7, !9131}
!9131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9132, size: 64)
!9132 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3511)
!9133 = !DILocalVariable(name: "vec_", arg: 1, scope: !9128, file: !1618, line: 33, type: !9131)
!9134 = !DILocation(line: 33, column: 1, scope: !9128)
!9135 = distinct !DISubprogram(name: "insert_init_stmt", scope: !3, file: !3, line: 2291, type: !9136, scopeLine: 2292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9136 = !DISubroutineType(types: !9137)
!9137 = !{null, !3983, !3473, !2917}
!9138 = !DILocalVariable(name: "id", arg: 1, scope: !9135, file: !3, line: 2291, type: !3983)
!9139 = !DILocation(line: 2291, column: 35, scope: !9135)
!9140 = !DILocalVariable(name: "bb", arg: 2, scope: !9135, file: !3, line: 2291, type: !3473)
!9141 = !DILocation(line: 2291, column: 51, scope: !9135)
!9142 = !DILocalVariable(name: "init_stmt", arg: 3, scope: !9135, file: !3, line: 2291, type: !2917)
!9143 = !DILocation(line: 2291, column: 62, scope: !9135)
!9144 = !DILocation(line: 2295, column: 7, scope: !9145)
!9145 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 2295, column: 7)
!9146 = !DILocation(line: 2295, column: 7, scope: !9135)
!9147 = !DILocalVariable(name: "si", scope: !9148, file: !3, line: 2297, type: !4261)
!9148 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 2296, column: 5)
!9149 = !DILocation(line: 2297, column: 28, scope: !9148)
!9150 = !DILocation(line: 2297, column: 46, scope: !9148)
!9151 = !DILocation(line: 2297, column: 33, scope: !9148)
!9152 = !DILocation(line: 2303, column: 29, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 2303, column: 11)
!9154 = !DILocation(line: 2303, column: 12, scope: !9153)
!9155 = !DILocation(line: 2304, column: 4, scope: !9153)
!9156 = !DILocation(line: 2304, column: 42, scope: !9153)
!9157 = !DILocation(line: 2304, column: 23, scope: !9153)
!9158 = !DILocation(line: 2304, column: 8, scope: !9153)
!9159 = !DILocation(line: 2305, column: 4, scope: !9153)
!9160 = !DILocation(line: 2305, column: 27, scope: !9153)
!9161 = !DILocation(line: 2305, column: 7, scope: !9153)
!9162 = !DILocation(line: 2306, column: 4, scope: !9153)
!9163 = !DILocation(line: 2306, column: 32, scope: !9153)
!9164 = !DILocation(line: 2306, column: 7, scope: !9153)
!9165 = !DILocation(line: 2306, column: 43, scope: !9153)
!9166 = !DILocation(line: 2303, column: 11, scope: !9148)
!9167 = !DILocalVariable(name: "rhs", scope: !9168, file: !3, line: 2308, type: !2586)
!9168 = distinct !DILexicalBlock(scope: !9153, file: !3, line: 2307, column: 2)
!9169 = !DILocation(line: 2308, column: 9, scope: !9168)
!9170 = !DILocation(line: 2308, column: 15, scope: !9168)
!9171 = !DILocation(line: 2311, column: 41, scope: !9168)
!9172 = !DILocation(line: 2311, column: 10, scope: !9168)
!9173 = !DILocation(line: 2311, column: 8, scope: !9168)
!9174 = !DILocation(line: 2313, column: 32, scope: !9168)
!9175 = !DILocation(line: 2313, column: 43, scope: !9168)
!9176 = !DILocation(line: 2313, column: 4, scope: !9168)
!9177 = !DILocation(line: 2314, column: 28, scope: !9168)
!9178 = !DILocation(line: 2314, column: 39, scope: !9168)
!9179 = !DILocation(line: 2314, column: 4, scope: !9168)
!9180 = !DILocation(line: 2315, column: 2, scope: !9168)
!9181 = !DILocation(line: 2316, column: 30, scope: !9148)
!9182 = !DILocation(line: 2316, column: 7, scope: !9148)
!9183 = !DILocation(line: 2317, column: 35, scope: !9148)
!9184 = !DILocation(line: 2317, column: 7, scope: !9148)
!9185 = !DILocation(line: 2318, column: 34, scope: !9148)
!9186 = !DILocation(line: 2318, column: 7, scope: !9148)
!9187 = !DILocation(line: 2320, column: 29, scope: !9188)
!9188 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 2320, column: 11)
!9189 = !DILocation(line: 2320, column: 12, scope: !9188)
!9190 = !DILocation(line: 2320, column: 40, scope: !9188)
!9191 = !DILocation(line: 2320, column: 43, scope: !9188)
!9192 = !DILocation(line: 2320, column: 11, scope: !9148)
!9193 = !DILocalVariable(name: "var", scope: !9194, file: !3, line: 2322, type: !2586)
!9194 = distinct !DILexicalBlock(scope: !9188, file: !3, line: 2321, column: 2)
!9195 = !DILocation(line: 2322, column: 9, scope: !9194)
!9196 = !DILocalVariable(name: "def", scope: !9194, file: !3, line: 2322, type: !2586)
!9197 = !DILocation(line: 2322, column: 14, scope: !9194)
!9198 = !DILocation(line: 2322, column: 39, scope: !9194)
!9199 = !DILocation(line: 2322, column: 20, scope: !9194)
!9200 = !DILocation(line: 2324, column: 8, scope: !9201)
!9201 = distinct !DILexicalBlock(scope: !9194, file: !3, line: 2324, column: 8)
!9202 = !DILocation(line: 2324, column: 24, scope: !9201)
!9203 = !DILocation(line: 2324, column: 8, scope: !9194)
!9204 = !DILocation(line: 2325, column: 12, scope: !9201)
!9205 = !DILocation(line: 2325, column: 10, scope: !9201)
!9206 = !DILocation(line: 2325, column: 6, scope: !9201)
!9207 = !DILocation(line: 2327, column: 12, scope: !9201)
!9208 = !DILocation(line: 2327, column: 10, scope: !9201)
!9209 = !DILocation(line: 2329, column: 28, scope: !9194)
!9210 = !DILocation(line: 2329, column: 32, scope: !9194)
!9211 = !DILocation(line: 2329, column: 36, scope: !9194)
!9212 = !DILocation(line: 2329, column: 41, scope: !9194)
!9213 = !DILocation(line: 2329, column: 46, scope: !9194)
!9214 = !DILocation(line: 2329, column: 4, scope: !9194)
!9215 = !DILocation(line: 2330, column: 2, scope: !9194)
!9216 = !DILocation(line: 2331, column: 5, scope: !9148)
!9217 = !DILocation(line: 2332, column: 1, scope: !9135)
!9218 = distinct !DISubprogram(name: "VEC_gimple_base_pop", scope: !1618, file: !1618, line: 33, type: !9219, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9219 = !DISubroutineType(types: !9220)
!9220 = !{!2917, !9221}
!9221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3511, size: 64)
!9222 = !DILocalVariable(name: "vec_", arg: 1, scope: !9218, file: !1618, line: 33, type: !9221)
!9223 = !DILocation(line: 33, column: 1, scope: !9218)
!9224 = !DILocalVariable(name: "obj_", scope: !9218, file: !1618, line: 33, type: !2917)
!9225 = distinct !DISubprogram(name: "update_clone_info", scope: !3, file: !3, line: 4717, type: !9226, scopeLine: 4718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9226 = !DISubroutineType(types: !9227)
!9227 = !{null, !3983}
!9228 = !DILocalVariable(name: "id", arg: 1, scope: !9225, file: !3, line: 4717, type: !3983)
!9229 = !DILocation(line: 4717, column: 37, scope: !9225)
!9230 = !DILocalVariable(name: "node", scope: !9225, file: !3, line: 4719, type: !3990)
!9231 = !DILocation(line: 4719, column: 23, scope: !9225)
!9232 = !DILocation(line: 4720, column: 8, scope: !9233)
!9233 = distinct !DILexicalBlock(scope: !9225, file: !3, line: 4720, column: 7)
!9234 = !DILocation(line: 4720, column: 12, scope: !9233)
!9235 = !DILocation(line: 4720, column: 22, scope: !9233)
!9236 = !DILocation(line: 4720, column: 7, scope: !9225)
!9237 = !DILocation(line: 4721, column: 5, scope: !9233)
!9238 = !DILocation(line: 4722, column: 15, scope: !9239)
!9239 = distinct !DILexicalBlock(scope: !9225, file: !3, line: 4722, column: 3)
!9240 = !DILocation(line: 4722, column: 19, scope: !9239)
!9241 = !DILocation(line: 4722, column: 29, scope: !9239)
!9242 = !DILocation(line: 4722, column: 13, scope: !9239)
!9243 = !DILocation(line: 4722, column: 8, scope: !9239)
!9244 = !DILocation(line: 4722, column: 37, scope: !9245)
!9245 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 4722, column: 3)
!9246 = !DILocation(line: 4722, column: 45, scope: !9245)
!9247 = !DILocation(line: 4722, column: 49, scope: !9245)
!9248 = !DILocation(line: 4722, column: 42, scope: !9245)
!9249 = !DILocation(line: 4722, column: 3, scope: !9239)
!9250 = !DILocation(line: 4725, column: 11, scope: !9251)
!9251 = distinct !DILexicalBlock(scope: !9252, file: !3, line: 4725, column: 11)
!9252 = distinct !DILexicalBlock(scope: !9245, file: !3, line: 4723, column: 5)
!9253 = !DILocation(line: 4725, column: 17, scope: !9251)
!9254 = !DILocation(line: 4725, column: 23, scope: !9251)
!9255 = !DILocation(line: 4725, column: 11, scope: !9252)
!9256 = !DILocalVariable(name: "i", scope: !9257, file: !3, line: 4727, type: !7)
!9257 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 4726, column: 9)
!9258 = !DILocation(line: 4727, column: 17, scope: !9257)
!9259 = !DILocation(line: 4728, column: 18, scope: !9260)
!9260 = distinct !DILexicalBlock(scope: !9257, file: !3, line: 4728, column: 11)
!9261 = !DILocation(line: 4728, column: 16, scope: !9260)
!9262 = !DILocation(line: 4728, column: 23, scope: !9263)
!9263 = distinct !DILexicalBlock(scope: !9260, file: !3, line: 4728, column: 11)
!9264 = !DILocation(line: 4728, column: 27, scope: !9263)
!9265 = !DILocation(line: 4728, column: 25, scope: !9263)
!9266 = !DILocation(line: 4728, column: 11, scope: !9260)
!9267 = !DILocalVariable(name: "replace_info", scope: !9268, file: !3, line: 4730, type: !4187)
!9268 = distinct !DILexicalBlock(scope: !9263, file: !3, line: 4729, column: 6)
!9269 = !DILocation(line: 4730, column: 32, scope: !9268)
!9270 = !DILocation(line: 4731, column: 23, scope: !9268)
!9271 = !DILocation(line: 4731, column: 21, scope: !9268)
!9272 = !DILocation(line: 4732, column: 8, scope: !9268)
!9273 = !DILocation(line: 4733, column: 8, scope: !9268)
!9274 = !DILocation(line: 4734, column: 6, scope: !9268)
!9275 = !DILocation(line: 4728, column: 82, scope: !9263)
!9276 = !DILocation(line: 4728, column: 11, scope: !9263)
!9277 = distinct !{!9277, !9266, !9278}
!9278 = !DILocation(line: 4734, column: 6, scope: !9260)
!9279 = !DILocation(line: 4735, column: 2, scope: !9257)
!9280 = !DILocation(line: 4736, column: 11, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !9252, file: !3, line: 4736, column: 11)
!9282 = !DILocation(line: 4736, column: 17, scope: !9281)
!9283 = !DILocation(line: 4736, column: 11, scope: !9252)
!9284 = !DILocation(line: 4737, column: 9, scope: !9281)
!9285 = !DILocation(line: 4737, column: 15, scope: !9281)
!9286 = !DILocation(line: 4737, column: 7, scope: !9281)
!9287 = !DILocation(line: 4737, column: 2, scope: !9281)
!9288 = !DILocation(line: 4738, column: 16, scope: !9289)
!9289 = distinct !DILexicalBlock(scope: !9281, file: !3, line: 4738, column: 16)
!9290 = !DILocation(line: 4738, column: 22, scope: !9289)
!9291 = !DILocation(line: 4738, column: 16, scope: !9281)
!9292 = !DILocation(line: 4739, column: 9, scope: !9289)
!9293 = !DILocation(line: 4739, column: 15, scope: !9289)
!9294 = !DILocation(line: 4739, column: 7, scope: !9289)
!9295 = !DILocation(line: 4739, column: 2, scope: !9289)
!9296 = !DILocation(line: 4742, column: 4, scope: !9297)
!9297 = distinct !DILexicalBlock(scope: !9289, file: !3, line: 4741, column: 2)
!9298 = !DILocation(line: 4742, column: 11, scope: !9297)
!9299 = !DILocation(line: 4742, column: 19, scope: !9297)
!9300 = !DILocation(line: 4742, column: 23, scope: !9297)
!9301 = !DILocation(line: 4742, column: 16, scope: !9297)
!9302 = !DILocation(line: 4742, column: 32, scope: !9297)
!9303 = !DILocation(line: 4742, column: 36, scope: !9297)
!9304 = !DILocation(line: 4742, column: 42, scope: !9297)
!9305 = !DILocation(line: 4742, column: 35, scope: !9297)
!9306 = !DILocation(line: 0, scope: !9297)
!9307 = !DILocation(line: 4743, column: 13, scope: !9297)
!9308 = !DILocation(line: 4743, column: 19, scope: !9297)
!9309 = !DILocation(line: 4743, column: 11, scope: !9297)
!9310 = distinct !{!9310, !9296, !9308}
!9311 = !DILocation(line: 4744, column: 8, scope: !9312)
!9312 = distinct !DILexicalBlock(scope: !9297, file: !3, line: 4744, column: 8)
!9313 = !DILocation(line: 4744, column: 16, scope: !9312)
!9314 = !DILocation(line: 4744, column: 20, scope: !9312)
!9315 = !DILocation(line: 4744, column: 13, scope: !9312)
!9316 = !DILocation(line: 4744, column: 8, scope: !9297)
!9317 = !DILocation(line: 4745, column: 13, scope: !9312)
!9318 = !DILocation(line: 4745, column: 19, scope: !9312)
!9319 = !DILocation(line: 4745, column: 11, scope: !9312)
!9320 = !DILocation(line: 4745, column: 6, scope: !9312)
!9321 = !DILocation(line: 4722, column: 3, scope: !9245)
!9322 = distinct !{!9322, !9249, !9323}
!9323 = !DILocation(line: 4747, column: 5, scope: !9239)
!9324 = !DILocation(line: 4748, column: 1, scope: !9225)
!9325 = distinct !DISubprogram(name: "remap_gimple_op_r", scope: !3, file: !3, line: 725, type: !4489, scopeLine: 726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9326 = !DILocalVariable(name: "tp", arg: 1, scope: !9325, file: !3, line: 725, type: !2585)
!9327 = !DILocation(line: 725, column: 26, scope: !9325)
!9328 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !9325, file: !3, line: 725, type: !4491)
!9329 = !DILocation(line: 725, column: 35, scope: !9325)
!9330 = !DILocalVariable(name: "data", arg: 3, scope: !9325, file: !3, line: 725, type: !2870)
!9331 = !DILocation(line: 725, column: 56, scope: !9325)
!9332 = !DILocalVariable(name: "wi_p", scope: !9325, file: !3, line: 727, type: !4257)
!9333 = !DILocation(line: 727, column: 26, scope: !9325)
!9334 = !DILocation(line: 727, column: 59, scope: !9325)
!9335 = !DILocation(line: 727, column: 33, scope: !9325)
!9336 = !DILocalVariable(name: "id", scope: !9325, file: !3, line: 728, type: !3983)
!9337 = !DILocation(line: 728, column: 19, scope: !9325)
!9338 = !DILocation(line: 728, column: 43, scope: !9325)
!9339 = !DILocation(line: 728, column: 49, scope: !9325)
!9340 = !DILocation(line: 728, column: 24, scope: !9325)
!9341 = !DILocalVariable(name: "fn", scope: !9325, file: !3, line: 729, type: !2586)
!9342 = !DILocation(line: 729, column: 8, scope: !9325)
!9343 = !DILocation(line: 729, column: 13, scope: !9325)
!9344 = !DILocation(line: 729, column: 17, scope: !9325)
!9345 = !DILocation(line: 731, column: 7, scope: !9346)
!9346 = distinct !DILexicalBlock(scope: !9325, file: !3, line: 731, column: 7)
!9347 = !DILocation(line: 731, column: 23, scope: !9346)
!9348 = !DILocation(line: 731, column: 7, scope: !9325)
!9349 = !DILocation(line: 733, column: 30, scope: !9350)
!9350 = distinct !DILexicalBlock(scope: !9346, file: !3, line: 732, column: 5)
!9351 = !DILocation(line: 733, column: 29, scope: !9350)
!9352 = !DILocation(line: 733, column: 34, scope: !9350)
!9353 = !DILocation(line: 733, column: 13, scope: !9350)
!9354 = !DILocation(line: 733, column: 8, scope: !9350)
!9355 = !DILocation(line: 733, column: 11, scope: !9350)
!9356 = !DILocation(line: 734, column: 8, scope: !9350)
!9357 = !DILocation(line: 734, column: 22, scope: !9350)
!9358 = !DILocation(line: 735, column: 7, scope: !9350)
!9359 = !DILocation(line: 737, column: 31, scope: !9360)
!9360 = distinct !DILexicalBlock(scope: !9346, file: !3, line: 737, column: 12)
!9361 = !DILocation(line: 737, column: 30, scope: !9360)
!9362 = !DILocation(line: 737, column: 35, scope: !9360)
!9363 = !DILocation(line: 737, column: 12, scope: !9360)
!9364 = !DILocation(line: 737, column: 12, scope: !9346)
!9365 = !DILocalVariable(name: "new_decl", scope: !9366, file: !3, line: 744, type: !2586)
!9366 = distinct !DILexicalBlock(scope: !9360, file: !3, line: 738, column: 5)
!9367 = !DILocation(line: 744, column: 12, scope: !9366)
!9368 = !DILocation(line: 747, column: 31, scope: !9366)
!9369 = !DILocation(line: 747, column: 30, scope: !9366)
!9370 = !DILocation(line: 747, column: 35, scope: !9366)
!9371 = !DILocation(line: 747, column: 18, scope: !9366)
!9372 = !DILocation(line: 747, column: 16, scope: !9366)
!9373 = !DILocation(line: 748, column: 7, scope: !9366)
!9374 = !DILocation(line: 750, column: 7, scope: !9366)
!9375 = !DILocation(line: 0, scope: !9366)
!9376 = distinct !{!9376, !9374, !9374}
!9377 = !DILocation(line: 755, column: 11, scope: !9378)
!9378 = distinct !DILexicalBlock(scope: !9366, file: !3, line: 755, column: 11)
!9379 = !DILocation(line: 755, column: 32, scope: !9378)
!9380 = !DILocation(line: 756, column: 4, scope: !9378)
!9381 = !DILocation(line: 756, column: 35, scope: !9378)
!9382 = !DILocation(line: 756, column: 52, scope: !9378)
!9383 = !DILocation(line: 756, column: 8, scope: !9378)
!9384 = !DILocation(line: 755, column: 11, scope: !9366)
!9385 = !DILocation(line: 757, column: 13, scope: !9378)
!9386 = !DILocation(line: 757, column: 11, scope: !9378)
!9387 = !DILocation(line: 757, column: 2, scope: !9378)
!9388 = !DILocation(line: 758, column: 13, scope: !9366)
!9389 = !DILocation(line: 758, column: 8, scope: !9366)
!9390 = !DILocation(line: 758, column: 11, scope: !9366)
!9391 = !DILocation(line: 759, column: 8, scope: !9366)
!9392 = !DILocation(line: 759, column: 22, scope: !9366)
!9393 = !DILocation(line: 760, column: 5, scope: !9366)
!9394 = !DILocation(line: 761, column: 12, scope: !9395)
!9395 = distinct !DILexicalBlock(scope: !9360, file: !3, line: 761, column: 12)
!9396 = !DILocation(line: 761, column: 28, scope: !9395)
!9397 = !DILocation(line: 761, column: 12, scope: !9360)
!9398 = !DILocation(line: 762, column: 5, scope: !9395)
!9399 = !DILocation(line: 763, column: 12, scope: !9400)
!9400 = distinct !DILexicalBlock(scope: !9395, file: !3, line: 763, column: 12)
!9401 = !DILocation(line: 763, column: 28, scope: !9400)
!9402 = !DILocation(line: 763, column: 12, scope: !9395)
!9403 = !DILocation(line: 764, column: 5, scope: !9400)
!9404 = !DILocation(line: 765, column: 12, scope: !9405)
!9405 = distinct !DILexicalBlock(scope: !9400, file: !3, line: 765, column: 12)
!9406 = !DILocation(line: 765, column: 28, scope: !9405)
!9407 = !DILocation(line: 766, column: 5, scope: !9405)
!9408 = !DILocation(line: 766, column: 10, scope: !9405)
!9409 = !DILocation(line: 767, column: 9, scope: !9405)
!9410 = !DILocation(line: 767, column: 36, scope: !9405)
!9411 = !DILocation(line: 767, column: 35, scope: !9405)
!9412 = !DILocation(line: 767, column: 12, scope: !9405)
!9413 = !DILocation(line: 767, column: 43, scope: !9405)
!9414 = !DILocation(line: 767, column: 47, scope: !9405)
!9415 = !DILocation(line: 767, column: 40, scope: !9405)
!9416 = !DILocation(line: 765, column: 12, scope: !9400)
!9417 = !DILocation(line: 769, column: 24, scope: !9405)
!9418 = !DILocation(line: 769, column: 23, scope: !9405)
!9419 = !DILocation(line: 769, column: 28, scope: !9405)
!9420 = !DILocation(line: 769, column: 11, scope: !9405)
!9421 = !DILocation(line: 769, column: 6, scope: !9405)
!9422 = !DILocation(line: 769, column: 9, scope: !9405)
!9423 = !DILocation(line: 769, column: 5, scope: !9405)
!9424 = !DILocation(line: 770, column: 12, scope: !9425)
!9425 = distinct !DILexicalBlock(scope: !9405, file: !3, line: 770, column: 12)
!9426 = !DILocation(line: 770, column: 12, scope: !9405)
!9427 = !DILocation(line: 772, column: 24, scope: !9425)
!9428 = !DILocation(line: 772, column: 23, scope: !9425)
!9429 = !DILocation(line: 772, column: 28, scope: !9425)
!9430 = !DILocation(line: 772, column: 11, scope: !9425)
!9431 = !DILocation(line: 772, column: 6, scope: !9425)
!9432 = !DILocation(line: 772, column: 9, scope: !9425)
!9433 = !DILocation(line: 772, column: 5, scope: !9425)
!9434 = !DILocation(line: 773, column: 12, scope: !9435)
!9435 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 773, column: 12)
!9436 = !DILocation(line: 773, column: 12, scope: !9425)
!9437 = !DILocalVariable(name: "new_type", scope: !9438, file: !3, line: 777, type: !2586)
!9438 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 774, column: 5)
!9439 = !DILocation(line: 777, column: 12, scope: !9438)
!9440 = !DILocation(line: 777, column: 35, scope: !9438)
!9441 = !DILocation(line: 777, column: 52, scope: !9438)
!9442 = !DILocation(line: 777, column: 23, scope: !9438)
!9443 = !DILocation(line: 779, column: 11, scope: !9444)
!9444 = distinct !DILexicalBlock(scope: !9438, file: !3, line: 779, column: 11)
!9445 = !DILocation(line: 779, column: 23, scope: !9444)
!9446 = !DILocation(line: 779, column: 20, scope: !9444)
!9447 = !DILocation(line: 779, column: 11, scope: !9438)
!9448 = !DILocation(line: 780, column: 3, scope: !9444)
!9449 = !DILocation(line: 780, column: 17, scope: !9444)
!9450 = !DILocation(line: 780, column: 2, scope: !9444)
!9451 = !DILocation(line: 782, column: 16, scope: !9452)
!9452 = distinct !DILexicalBlock(scope: !9444, file: !3, line: 782, column: 16)
!9453 = !DILocation(line: 782, column: 32, scope: !9452)
!9454 = !DILocation(line: 782, column: 16, scope: !9444)
!9455 = !DILocation(line: 783, column: 28, scope: !9452)
!9456 = !DILocation(line: 783, column: 38, scope: !9452)
!9457 = !DILocation(line: 784, column: 7, scope: !9452)
!9458 = !DILocation(line: 783, column: 8, scope: !9452)
!9459 = !DILocation(line: 783, column: 3, scope: !9452)
!9460 = !DILocation(line: 783, column: 6, scope: !9452)
!9461 = !DILocation(line: 783, column: 2, scope: !9452)
!9462 = !DILocation(line: 787, column: 10, scope: !9463)
!9463 = distinct !DILexicalBlock(scope: !9452, file: !3, line: 786, column: 2)
!9464 = !DILocation(line: 787, column: 5, scope: !9463)
!9465 = !DILocation(line: 787, column: 8, scope: !9463)
!9466 = !DILocation(line: 788, column: 22, scope: !9463)
!9467 = !DILocation(line: 788, column: 4, scope: !9463)
!9468 = !DILocation(line: 788, column: 20, scope: !9463)
!9469 = !DILocation(line: 790, column: 5, scope: !9438)
!9470 = !DILocation(line: 795, column: 11, scope: !9471)
!9471 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 795, column: 11)
!9472 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 792, column: 5)
!9473 = !DILocation(line: 795, column: 27, scope: !9471)
!9474 = !DILocation(line: 795, column: 11, scope: !9472)
!9475 = !DILocalVariable(name: "decl", scope: !9476, file: !3, line: 799, type: !2586)
!9476 = distinct !DILexicalBlock(scope: !9471, file: !3, line: 796, column: 2)
!9477 = !DILocation(line: 799, column: 9, scope: !9476)
!9478 = !DILocation(line: 799, column: 16, scope: !9476)
!9479 = !DILocalVariable(name: "n", scope: !9476, file: !3, line: 800, type: !2585)
!9480 = !DILocation(line: 800, column: 10, scope: !9476)
!9481 = !DILocation(line: 802, column: 39, scope: !9476)
!9482 = !DILocation(line: 802, column: 43, scope: !9476)
!9483 = !DILocation(line: 802, column: 53, scope: !9476)
!9484 = !DILocation(line: 802, column: 17, scope: !9476)
!9485 = !DILocation(line: 802, column: 8, scope: !9476)
!9486 = !DILocation(line: 802, column: 6, scope: !9476)
!9487 = !DILocation(line: 803, column: 8, scope: !9488)
!9488 = distinct !DILexicalBlock(scope: !9476, file: !3, line: 803, column: 8)
!9489 = !DILocation(line: 803, column: 8, scope: !9476)
!9490 = !DILocalVariable(name: "type", scope: !9491, file: !3, line: 805, type: !2586)
!9491 = distinct !DILexicalBlock(scope: !9488, file: !3, line: 804, column: 6)
!9492 = !DILocation(line: 805, column: 13, scope: !9491)
!9493 = !DILocalVariable(name: "new_tree", scope: !9491, file: !3, line: 805, type: !2586)
!9494 = !DILocation(line: 805, column: 19, scope: !9491)
!9495 = !DILocalVariable(name: "old", scope: !9491, file: !3, line: 805, type: !2586)
!9496 = !DILocation(line: 805, column: 29, scope: !9491)
!9497 = !DILocation(line: 814, column: 15, scope: !9491)
!9498 = !DILocation(line: 814, column: 13, scope: !9491)
!9499 = !DILocation(line: 815, column: 34, scope: !9491)
!9500 = !DILocation(line: 815, column: 33, scope: !9491)
!9501 = !DILocation(line: 815, column: 19, scope: !9491)
!9502 = !DILocation(line: 815, column: 17, scope: !9491)
!9503 = !DILocation(line: 816, column: 15, scope: !9491)
!9504 = !DILocation(line: 816, column: 14, scope: !9491)
!9505 = !DILocation(line: 816, column: 12, scope: !9491)
!9506 = !DILocation(line: 817, column: 40, scope: !9491)
!9507 = !DILocation(line: 817, column: 14, scope: !9491)
!9508 = !DILocation(line: 817, column: 9, scope: !9491)
!9509 = !DILocation(line: 817, column: 12, scope: !9491)
!9510 = !DILocation(line: 818, column: 14, scope: !9511)
!9511 = distinct !DILexicalBlock(scope: !9491, file: !3, line: 818, column: 12)
!9512 = !DILocation(line: 818, column: 13, scope: !9511)
!9513 = !DILocation(line: 818, column: 12, scope: !9491)
!9514 = !DILocation(line: 820, column: 9, scope: !9515)
!9515 = distinct !DILexicalBlock(scope: !9516, file: !3, line: 820, column: 9)
!9516 = distinct !DILexicalBlock(scope: !9511, file: !3, line: 819, column: 10)
!9517 = !DILocation(line: 820, column: 30, scope: !9515)
!9518 = !DILocation(line: 820, column: 9, scope: !9516)
!9519 = !DILocation(line: 822, column: 36, scope: !9520)
!9520 = distinct !DILexicalBlock(scope: !9515, file: !3, line: 821, column: 7)
!9521 = !DILocation(line: 823, column: 8, scope: !9520)
!9522 = !DILocation(line: 823, column: 14, scope: !9520)
!9523 = !DILocation(line: 822, column: 15, scope: !9520)
!9524 = !DILocation(line: 822, column: 10, scope: !9520)
!9525 = !DILocation(line: 822, column: 13, scope: !9520)
!9526 = !DILocation(line: 827, column: 16, scope: !9527)
!9527 = distinct !DILexicalBlock(scope: !9520, file: !3, line: 827, column: 13)
!9528 = !DILocation(line: 827, column: 15, scope: !9527)
!9529 = !DILocation(line: 827, column: 13, scope: !9520)
!9530 = !DILocation(line: 828, column: 10, scope: !9527)
!9531 = !DILocation(line: 828, column: 5, scope: !9527)
!9532 = !DILocation(line: 828, column: 8, scope: !9527)
!9533 = !DILocation(line: 828, column: 4, scope: !9527)
!9534 = !DILocation(line: 829, column: 7, scope: !9520)
!9535 = !DILocation(line: 832, column: 22, scope: !9536)
!9536 = distinct !DILexicalBlock(scope: !9515, file: !3, line: 831, column: 7)
!9537 = !DILocation(line: 832, column: 17, scope: !9536)
!9538 = !DILocation(line: 832, column: 20, scope: !9536)
!9539 = !DILocation(line: 833, column: 36, scope: !9536)
!9540 = !DILocation(line: 833, column: 9, scope: !9536)
!9541 = !DILocation(line: 833, column: 34, scope: !9536)
!9542 = !DILocation(line: 834, column: 33, scope: !9536)
!9543 = !DILocation(line: 834, column: 9, scope: !9536)
!9544 = !DILocation(line: 834, column: 31, scope: !9536)
!9545 = !DILocation(line: 836, column: 3, scope: !9516)
!9546 = !DILocation(line: 837, column: 9, scope: !9491)
!9547 = !DILocation(line: 837, column: 23, scope: !9491)
!9548 = !DILocation(line: 838, column: 8, scope: !9491)
!9549 = !DILocation(line: 840, column: 2, scope: !9476)
!9550 = !DILocation(line: 844, column: 20, scope: !9472)
!9551 = !DILocation(line: 844, column: 24, scope: !9472)
!9552 = !DILocation(line: 844, column: 7, scope: !9472)
!9553 = !DILocation(line: 848, column: 28, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 848, column: 11)
!9555 = !DILocation(line: 848, column: 11, scope: !9554)
!9556 = !DILocation(line: 849, column: 4, scope: !9554)
!9557 = !DILocation(line: 849, column: 7, scope: !9554)
!9558 = !DILocation(line: 849, column: 23, scope: !9554)
!9559 = !DILocation(line: 850, column: 4, scope: !9554)
!9560 = !DILocation(line: 850, column: 7, scope: !9554)
!9561 = !DILocation(line: 850, column: 11, scope: !9554)
!9562 = !DILocation(line: 850, column: 32, scope: !9554)
!9563 = !DILocation(line: 851, column: 4, scope: !9554)
!9564 = !DILocation(line: 851, column: 8, scope: !9554)
!9565 = !DILocation(line: 848, column: 11, scope: !9472)
!9566 = !DILocation(line: 852, column: 23, scope: !9554)
!9567 = !DILocation(line: 852, column: 22, scope: !9554)
!9568 = !DILocation(line: 852, column: 2, scope: !9554)
!9569 = !DILocation(line: 855, column: 11, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 855, column: 11)
!9571 = !DILocation(line: 855, column: 11, scope: !9472)
!9572 = !DILocation(line: 856, column: 2, scope: !9570)
!9573 = !DILocation(line: 858, column: 11, scope: !9574)
!9574 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 858, column: 11)
!9575 = !DILocation(line: 858, column: 27, scope: !9574)
!9576 = !DILocation(line: 858, column: 11, scope: !9472)
!9577 = !DILocation(line: 859, column: 32, scope: !9574)
!9578 = !DILocation(line: 859, column: 49, scope: !9574)
!9579 = !DILocation(line: 859, column: 20, scope: !9574)
!9580 = !DILocation(line: 859, column: 2, scope: !9574)
!9581 = !DILocation(line: 859, column: 18, scope: !9574)
!9582 = !DILocation(line: 861, column: 11, scope: !9583)
!9583 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 861, column: 11)
!9584 = !DILocation(line: 861, column: 27, scope: !9583)
!9585 = !DILocation(line: 861, column: 42, scope: !9583)
!9586 = !DILocation(line: 861, column: 45, scope: !9583)
!9587 = !DILocation(line: 861, column: 11, scope: !9472)
!9588 = !DILocation(line: 865, column: 28, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 862, column: 2)
!9590 = !DILocation(line: 865, column: 4, scope: !9589)
!9591 = !DILocation(line: 865, column: 26, scope: !9589)
!9592 = !DILocation(line: 866, column: 4, scope: !9589)
!9593 = !DILocation(line: 866, column: 26, scope: !9589)
!9594 = !DILocation(line: 867, column: 2, scope: !9589)
!9595 = !DILocation(line: 868, column: 16, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 868, column: 16)
!9597 = !DILocation(line: 868, column: 32, scope: !9596)
!9598 = !DILocation(line: 868, column: 16, scope: !9583)
!9599 = !DILocalVariable(name: "invariant", scope: !9600, file: !3, line: 874, type: !2683)
!9600 = distinct !DILexicalBlock(scope: !9596, file: !3, line: 869, column: 2)
!9601 = !DILocation(line: 874, column: 8, scope: !9600)
!9602 = !DILocation(line: 874, column: 46, scope: !9600)
!9603 = !DILocation(line: 874, column: 45, scope: !9600)
!9604 = !DILocation(line: 874, column: 20, scope: !9600)
!9605 = !DILocalVariable(name: "block", scope: !9600, file: !3, line: 875, type: !2586)
!9606 = !DILocation(line: 875, column: 9, scope: !9600)
!9607 = !DILocation(line: 875, column: 17, scope: !9600)
!9608 = !DILocation(line: 875, column: 21, scope: !9600)
!9609 = !DILocation(line: 876, column: 4, scope: !9600)
!9610 = !DILocation(line: 876, column: 8, scope: !9600)
!9611 = !DILocation(line: 876, column: 14, scope: !9600)
!9612 = !DILocation(line: 877, column: 4, scope: !9600)
!9613 = !DILocation(line: 878, column: 16, scope: !9600)
!9614 = !DILocation(line: 878, column: 4, scope: !9600)
!9615 = !DILocation(line: 878, column: 8, scope: !9600)
!9616 = !DILocation(line: 878, column: 14, scope: !9600)
!9617 = !DILocation(line: 882, column: 8, scope: !9618)
!9618 = distinct !DILexicalBlock(scope: !9600, file: !3, line: 882, column: 8)
!9619 = !DILocation(line: 882, column: 42, scope: !9618)
!9620 = !DILocation(line: 882, column: 8, scope: !9600)
!9621 = !DILocation(line: 883, column: 12, scope: !9618)
!9622 = !DILocation(line: 883, column: 7, scope: !9618)
!9623 = !DILocation(line: 883, column: 10, scope: !9618)
!9624 = !DILocation(line: 883, column: 6, scope: !9618)
!9625 = !DILocation(line: 885, column: 47, scope: !9618)
!9626 = !DILocation(line: 885, column: 46, scope: !9618)
!9627 = !DILocation(line: 885, column: 6, scope: !9618)
!9628 = !DILocation(line: 889, column: 8, scope: !9629)
!9629 = distinct !DILexicalBlock(scope: !9600, file: !3, line: 889, column: 8)
!9630 = !DILocation(line: 889, column: 18, scope: !9629)
!9631 = !DILocation(line: 889, column: 48, scope: !9629)
!9632 = !DILocation(line: 889, column: 47, scope: !9629)
!9633 = !DILocation(line: 889, column: 22, scope: !9629)
!9634 = !DILocation(line: 889, column: 8, scope: !9600)
!9635 = !DILocation(line: 890, column: 6, scope: !9629)
!9636 = !DILocation(line: 890, column: 10, scope: !9629)
!9637 = !DILocation(line: 890, column: 21, scope: !9629)
!9638 = !DILocation(line: 892, column: 5, scope: !9600)
!9639 = !DILocation(line: 892, column: 19, scope: !9600)
!9640 = !DILocation(line: 893, column: 2, scope: !9600)
!9641 = !DILocation(line: 897, column: 3, scope: !9325)
!9642 = !DILocation(line: 898, column: 1, scope: !9325)
!9643 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !1618, file: !1618, line: 34, type: !9644, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9644 = !DISubroutineType(types: !9645)
!9645 = !{null, !8866}
!9646 = !DILocalVariable(name: "vec_", arg: 1, scope: !9643, file: !1618, line: 34, type: !8866)
!9647 = !DILocation(line: 34, column: 1, scope: !9643)
!9648 = !DILocation(line: 34, column: 1, scope: !9649)
!9649 = distinct !DILexicalBlock(scope: !9643, file: !1618, line: 34, column: 1)
!9650 = distinct !DISubprogram(name: "maybe_inline_call_in_expr", scope: !3, file: !3, line: 4960, type: !7423, scopeLine: 4961, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9651 = !DILocalVariable(name: "exp", arg: 1, scope: !9650, file: !3, line: 4960, type: !2586)
!9652 = !DILocation(line: 4960, column: 33, scope: !9650)
!9653 = !DILocalVariable(name: "fn", scope: !9650, file: !3, line: 4962, type: !2586)
!9654 = !DILocation(line: 4962, column: 8, scope: !9650)
!9655 = !DILocation(line: 4962, column: 32, scope: !9650)
!9656 = !DILocation(line: 4962, column: 13, scope: !9650)
!9657 = !DILocation(line: 4965, column: 7, scope: !9658)
!9658 = distinct !DILexicalBlock(scope: !9650, file: !3, line: 4965, column: 7)
!9659 = !DILocation(line: 4965, column: 10, scope: !9658)
!9660 = !DILocation(line: 4965, column: 13, scope: !9658)
!9661 = !DILocation(line: 4965, column: 32, scope: !9658)
!9662 = !DILocation(line: 4965, column: 35, scope: !9658)
!9663 = !DILocation(line: 4965, column: 7, scope: !9650)
!9664 = !DILocalVariable(name: "decl_map", scope: !9665, file: !3, line: 4967, type: !3534)
!9665 = distinct !DILexicalBlock(scope: !9658, file: !3, line: 4966, column: 5)
!9666 = !DILocation(line: 4967, column: 29, scope: !9665)
!9667 = !DILocation(line: 4967, column: 40, scope: !9665)
!9668 = !DILocalVariable(name: "iter", scope: !9665, file: !3, line: 4968, type: !9669)
!9669 = !DIDerivedType(tag: DW_TAG_typedef, name: "call_expr_arg_iterator", file: !135, line: 5364, baseType: !9670)
!9670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "call_expr_arg_iterator_d", file: !135, line: 5360, size: 128, elements: !9671)
!9671 = !{!9672, !9673, !9674}
!9672 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !9670, file: !135, line: 5361, baseType: !2586, size: 64)
!9673 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !9670, file: !135, line: 5362, baseType: !2683, size: 32, offset: 64)
!9674 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !9670, file: !135, line: 5363, baseType: !2683, size: 32, offset: 96)
!9675 = !DILocation(line: 4968, column: 30, scope: !9665)
!9676 = !DILocalVariable(name: "id", scope: !9665, file: !3, line: 4969, type: !3984)
!9677 = !DILocation(line: 4969, column: 22, scope: !9665)
!9678 = !DILocalVariable(name: "param", scope: !9665, file: !3, line: 4970, type: !2586)
!9679 = !DILocation(line: 4970, column: 12, scope: !9665)
!9680 = !DILocalVariable(name: "arg", scope: !9665, file: !3, line: 4970, type: !2586)
!9681 = !DILocation(line: 4970, column: 19, scope: !9665)
!9682 = !DILocalVariable(name: "t", scope: !9665, file: !3, line: 4970, type: !2586)
!9683 = !DILocation(line: 4970, column: 24, scope: !9665)
!9684 = !DILocation(line: 4973, column: 20, scope: !9685)
!9685 = distinct !DILexicalBlock(scope: !9665, file: !3, line: 4973, column: 7)
!9686 = !DILocation(line: 4973, column: 18, scope: !9685)
!9687 = !DILocation(line: 4973, column: 68, scope: !9685)
!9688 = !DILocation(line: 4973, column: 47, scope: !9685)
!9689 = !DILocation(line: 4973, column: 45, scope: !9685)
!9690 = !DILocation(line: 4973, column: 12, scope: !9685)
!9691 = !DILocation(line: 4974, column: 5, scope: !9692)
!9692 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 4973, column: 7)
!9693 = !DILocation(line: 4973, column: 7, scope: !9685)
!9694 = !DILocation(line: 4976, column: 42, scope: !9692)
!9695 = !DILocation(line: 4976, column: 23, scope: !9692)
!9696 = !DILocation(line: 4976, column: 33, scope: !9692)
!9697 = !DILocation(line: 4976, column: 3, scope: !9692)
!9698 = !DILocation(line: 4976, column: 40, scope: !9692)
!9699 = !DILocation(line: 4976, column: 2, scope: !9692)
!9700 = !DILocation(line: 4975, column: 13, scope: !9692)
!9701 = !DILocation(line: 4975, column: 11, scope: !9692)
!9702 = !DILocation(line: 4975, column: 39, scope: !9692)
!9703 = !DILocation(line: 4975, column: 37, scope: !9692)
!9704 = !DILocation(line: 4973, column: 7, scope: !9692)
!9705 = distinct !{!9705, !9693, !9706}
!9706 = !DILocation(line: 4976, column: 42, scope: !9685)
!9707 = !DILocation(line: 4978, column: 7, scope: !9665)
!9708 = !DILocation(line: 4979, column: 19, scope: !9665)
!9709 = !DILocation(line: 4979, column: 10, scope: !9665)
!9710 = !DILocation(line: 4979, column: 17, scope: !9665)
!9711 = !DILocation(line: 4980, column: 19, scope: !9665)
!9712 = !DILocation(line: 4980, column: 10, scope: !9665)
!9713 = !DILocation(line: 4980, column: 17, scope: !9665)
!9714 = !DILocation(line: 4981, column: 21, scope: !9665)
!9715 = !DILocation(line: 4981, column: 10, scope: !9665)
!9716 = !DILocation(line: 4981, column: 19, scope: !9665)
!9717 = !DILocation(line: 4982, column: 21, scope: !9665)
!9718 = !DILocation(line: 4982, column: 10, scope: !9665)
!9719 = !DILocation(line: 4982, column: 19, scope: !9665)
!9720 = !DILocation(line: 4984, column: 10, scope: !9665)
!9721 = !DILocation(line: 4984, column: 20, scope: !9665)
!9722 = !DILocation(line: 4985, column: 10, scope: !9665)
!9723 = !DILocation(line: 4985, column: 37, scope: !9665)
!9724 = !DILocation(line: 4986, column: 10, scope: !9665)
!9725 = !DILocation(line: 4986, column: 28, scope: !9665)
!9726 = !DILocation(line: 4987, column: 10, scope: !9665)
!9727 = !DILocation(line: 4987, column: 37, scope: !9665)
!9728 = !DILocation(line: 4988, column: 10, scope: !9665)
!9729 = !DILocation(line: 4988, column: 38, scope: !9665)
!9730 = !DILocation(line: 4992, column: 10, scope: !9665)
!9731 = !DILocation(line: 4992, column: 21, scope: !9665)
!9732 = !DILocation(line: 4993, column: 10, scope: !9665)
!9733 = !DILocation(line: 4993, column: 25, scope: !9665)
!9734 = !DILocation(line: 4996, column: 10, scope: !9665)
!9735 = !DILocation(line: 4996, column: 19, scope: !9665)
!9736 = !DILocation(line: 4998, column: 11, scope: !9665)
!9737 = !DILocation(line: 4998, column: 9, scope: !9665)
!9738 = !DILocation(line: 4999, column: 28, scope: !9665)
!9739 = !DILocation(line: 4999, column: 7, scope: !9665)
!9740 = !DILocation(line: 5003, column: 11, scope: !9741)
!9741 = distinct !DILexicalBlock(scope: !9665, file: !3, line: 5003, column: 11)
!9742 = !DILocation(line: 5003, column: 25, scope: !9741)
!9743 = !DILocation(line: 5003, column: 11, scope: !9665)
!9744 = !DILocation(line: 5004, column: 9, scope: !9741)
!9745 = !DILocation(line: 5004, column: 2, scope: !9741)
!9746 = !DILocation(line: 5005, column: 5, scope: !9665)
!9747 = !DILocation(line: 5007, column: 4, scope: !9650)
!9748 = !DILocation(line: 5008, column: 1, scope: !9650)
!9749 = distinct !DISubprogram(name: "first_call_expr_arg", scope: !135, file: !135, line: 5419, type: !9750, scopeLine: 5420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9750 = !DISubroutineType(types: !9751)
!9751 = !{!2586, !2586, !9752}
!9752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9669, size: 64)
!9753 = !DILocalVariable(name: "exp", arg: 1, scope: !9749, file: !135, line: 5419, type: !2586)
!9754 = !DILocation(line: 5419, column: 27, scope: !9749)
!9755 = !DILocalVariable(name: "iter", arg: 2, scope: !9749, file: !135, line: 5419, type: !9752)
!9756 = !DILocation(line: 5419, column: 56, scope: !9749)
!9757 = !DILocation(line: 5421, column: 32, scope: !9749)
!9758 = !DILocation(line: 5421, column: 37, scope: !9749)
!9759 = !DILocation(line: 5421, column: 3, scope: !9749)
!9760 = !DILocation(line: 5422, column: 30, scope: !9749)
!9761 = !DILocation(line: 5422, column: 10, scope: !9749)
!9762 = !DILocation(line: 5422, column: 3, scope: !9749)
!9763 = distinct !DISubprogram(name: "next_call_expr_arg", scope: !135, file: !135, line: 5393, type: !9764, scopeLine: 5394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9764 = !DISubroutineType(types: !9765)
!9765 = !{!2586, !9752}
!9766 = !DILocalVariable(name: "iter", arg: 1, scope: !9763, file: !135, line: 5393, type: !9752)
!9767 = !DILocation(line: 5393, column: 45, scope: !9763)
!9768 = !DILocalVariable(name: "result", scope: !9763, file: !135, line: 5395, type: !2586)
!9769 = !DILocation(line: 5395, column: 8, scope: !9763)
!9770 = !DILocation(line: 5396, column: 7, scope: !9771)
!9771 = distinct !DILexicalBlock(scope: !9763, file: !135, line: 5396, column: 7)
!9772 = !DILocation(line: 5396, column: 13, scope: !9771)
!9773 = !DILocation(line: 5396, column: 18, scope: !9771)
!9774 = !DILocation(line: 5396, column: 24, scope: !9771)
!9775 = !DILocation(line: 5396, column: 15, scope: !9771)
!9776 = !DILocation(line: 5396, column: 7, scope: !9763)
!9777 = !DILocation(line: 5397, column: 5, scope: !9771)
!9778 = !DILocation(line: 5398, column: 12, scope: !9763)
!9779 = !DILocation(line: 5398, column: 10, scope: !9763)
!9780 = !DILocation(line: 5399, column: 3, scope: !9763)
!9781 = !DILocation(line: 5399, column: 9, scope: !9763)
!9782 = !DILocation(line: 5399, column: 10, scope: !9763)
!9783 = !DILocation(line: 5400, column: 10, scope: !9763)
!9784 = !DILocation(line: 5400, column: 3, scope: !9763)
!9785 = !DILocation(line: 5401, column: 1, scope: !9763)
!9786 = distinct !DISubprogram(name: "copy_tree_body", scope: !3, file: !3, line: 2203, type: !9787, scopeLine: 2204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9787 = !DISubroutineType(types: !9788)
!9788 = !{!2586, !3983}
!9789 = !DILocalVariable(name: "id", arg: 1, scope: !9786, file: !3, line: 2203, type: !3983)
!9790 = !DILocation(line: 2203, column: 33, scope: !9786)
!9791 = !DILocalVariable(name: "fndecl", scope: !9786, file: !3, line: 2205, type: !2586)
!9792 = !DILocation(line: 2205, column: 8, scope: !9786)
!9793 = !DILocation(line: 2205, column: 17, scope: !9786)
!9794 = !DILocation(line: 2205, column: 21, scope: !9786)
!9795 = !DILocalVariable(name: "body", scope: !9786, file: !3, line: 2206, type: !2586)
!9796 = !DILocation(line: 2206, column: 8, scope: !9786)
!9797 = !DILocation(line: 2206, column: 15, scope: !9786)
!9798 = !DILocation(line: 2208, column: 3, scope: !9786)
!9799 = !DILocation(line: 2210, column: 10, scope: !9786)
!9800 = !DILocation(line: 2210, column: 3, scope: !9786)
!9801 = distinct !DISubprogram(name: "build_duplicate_type", scope: !3, file: !3, line: 5013, type: !7423, scopeLine: 5014, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9802 = !DILocalVariable(name: "type", arg: 1, scope: !9801, file: !3, line: 5013, type: !2586)
!9803 = !DILocation(line: 5013, column: 28, scope: !9801)
!9804 = !DILocalVariable(name: "id", scope: !9801, file: !3, line: 5015, type: !3985)
!9805 = !DILocation(line: 5015, column: 25, scope: !9801)
!9806 = !DILocation(line: 5017, column: 3, scope: !9801)
!9807 = !DILocation(line: 5018, column: 15, scope: !9801)
!9808 = !DILocation(line: 5018, column: 6, scope: !9801)
!9809 = !DILocation(line: 5018, column: 13, scope: !9801)
!9810 = !DILocation(line: 5019, column: 15, scope: !9801)
!9811 = !DILocation(line: 5019, column: 6, scope: !9801)
!9812 = !DILocation(line: 5019, column: 13, scope: !9801)
!9813 = !DILocation(line: 5020, column: 17, scope: !9801)
!9814 = !DILocation(line: 5020, column: 6, scope: !9801)
!9815 = !DILocation(line: 5020, column: 15, scope: !9801)
!9816 = !DILocation(line: 5021, column: 17, scope: !9801)
!9817 = !DILocation(line: 5021, column: 6, scope: !9801)
!9818 = !DILocation(line: 5021, column: 15, scope: !9801)
!9819 = !DILocation(line: 5022, column: 6, scope: !9801)
!9820 = !DILocation(line: 5022, column: 16, scope: !9801)
!9821 = !DILocation(line: 5023, column: 6, scope: !9801)
!9822 = !DILocation(line: 5023, column: 16, scope: !9801)
!9823 = !DILocation(line: 5025, column: 24, scope: !9801)
!9824 = !DILocation(line: 5025, column: 10, scope: !9801)
!9825 = !DILocation(line: 5025, column: 8, scope: !9801)
!9826 = !DILocation(line: 5027, column: 27, scope: !9801)
!9827 = !DILocation(line: 5027, column: 3, scope: !9801)
!9828 = !DILocation(line: 5028, column: 10, scope: !9829)
!9829 = distinct !DILexicalBlock(scope: !9801, file: !3, line: 5028, column: 7)
!9830 = !DILocation(line: 5028, column: 7, scope: !9829)
!9831 = !DILocation(line: 5028, column: 7, scope: !9801)
!9832 = !DILocation(line: 5029, column: 29, scope: !9829)
!9833 = !DILocation(line: 5029, column: 5, scope: !9829)
!9834 = !DILocation(line: 5031, column: 27, scope: !9801)
!9835 = !DILocation(line: 5031, column: 3, scope: !9801)
!9836 = !DILocation(line: 5031, column: 25, scope: !9801)
!9837 = !DILocation(line: 5033, column: 10, scope: !9801)
!9838 = !DILocation(line: 5033, column: 3, scope: !9801)
!9839 = distinct !DISubprogram(name: "tree_can_inline_p", scope: !3, file: !3, line: 5040, type: !9840, scopeLine: 5041, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9840 = !DISubroutineType(types: !9841)
!9841 = !{!2706, !3995}
!9842 = !DILocalVariable(name: "e", arg: 1, scope: !9839, file: !3, line: 5040, type: !3995)
!9843 = !DILocation(line: 5040, column: 40, scope: !9839)
!9844 = !DILocalVariable(name: "caller", scope: !9839, file: !3, line: 5069, type: !2586)
!9845 = !DILocation(line: 5069, column: 8, scope: !9839)
!9846 = !DILocalVariable(name: "callee", scope: !9839, file: !3, line: 5069, type: !2586)
!9847 = !DILocation(line: 5069, column: 16, scope: !9839)
!9848 = !DILocation(line: 5071, column: 12, scope: !9839)
!9849 = !DILocation(line: 5071, column: 15, scope: !9839)
!9850 = !DILocation(line: 5071, column: 23, scope: !9839)
!9851 = !DILocation(line: 5071, column: 10, scope: !9839)
!9852 = !DILocation(line: 5072, column: 12, scope: !9839)
!9853 = !DILocation(line: 5072, column: 15, scope: !9839)
!9854 = !DILocation(line: 5072, column: 23, scope: !9839)
!9855 = !DILocation(line: 5072, column: 10, scope: !9839)
!9856 = !DILocation(line: 5076, column: 7, scope: !9857)
!9857 = distinct !DILexicalBlock(scope: !9839, file: !3, line: 5076, column: 7)
!9858 = !DILocation(line: 5077, column: 7, scope: !9857)
!9859 = !DILocation(line: 5077, column: 10, scope: !9857)
!9860 = !DILocation(line: 5078, column: 7, scope: !9857)
!9861 = !DILocation(line: 5078, column: 11, scope: !9857)
!9862 = !DILocation(line: 5079, column: 7, scope: !9857)
!9863 = !DILocation(line: 5079, column: 4, scope: !9857)
!9864 = !DILocation(line: 5076, column: 7, scope: !9839)
!9865 = !DILocation(line: 5081, column: 7, scope: !9866)
!9866 = distinct !DILexicalBlock(scope: !9857, file: !3, line: 5080, column: 5)
!9867 = !DILocation(line: 5081, column: 10, scope: !9866)
!9868 = !DILocation(line: 5081, column: 24, scope: !9866)
!9869 = !DILocation(line: 5082, column: 38, scope: !9866)
!9870 = !DILocation(line: 5082, column: 41, scope: !9866)
!9871 = !DILocation(line: 5082, column: 7, scope: !9866)
!9872 = !DILocation(line: 5083, column: 7, scope: !9866)
!9873 = !DILocation(line: 5087, column: 30, scope: !9874)
!9874 = distinct !DILexicalBlock(scope: !9839, file: !3, line: 5087, column: 7)
!9875 = !DILocation(line: 5087, column: 44, scope: !9874)
!9876 = !DILocation(line: 5087, column: 52, scope: !9874)
!9877 = !DILocation(line: 5087, column: 8, scope: !9874)
!9878 = !DILocation(line: 5087, column: 7, scope: !9839)
!9879 = !DILocation(line: 5089, column: 7, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9874, file: !3, line: 5088, column: 5)
!9881 = !DILocation(line: 5089, column: 10, scope: !9880)
!9882 = !DILocation(line: 5089, column: 24, scope: !9880)
!9883 = !DILocation(line: 5090, column: 38, scope: !9880)
!9884 = !DILocation(line: 5090, column: 41, scope: !9880)
!9885 = !DILocation(line: 5090, column: 7, scope: !9880)
!9886 = !DILocation(line: 5091, column: 7, scope: !9880)
!9887 = !DILocation(line: 5091, column: 10, scope: !9880)
!9888 = !DILocation(line: 5091, column: 36, scope: !9880)
!9889 = !DILocation(line: 5092, column: 7, scope: !9880)
!9890 = !DILocation(line: 5095, column: 7, scope: !9891)
!9891 = distinct !DILexicalBlock(scope: !9839, file: !3, line: 5095, column: 7)
!9892 = !DILocation(line: 5095, column: 10, scope: !9891)
!9893 = !DILocation(line: 5096, column: 7, scope: !9891)
!9894 = !DILocation(line: 5096, column: 35, scope: !9891)
!9895 = !DILocation(line: 5096, column: 38, scope: !9891)
!9896 = !DILocation(line: 5096, column: 11, scope: !9891)
!9897 = !DILocation(line: 5095, column: 7, scope: !9839)
!9898 = !DILocation(line: 5098, column: 7, scope: !9899)
!9899 = distinct !DILexicalBlock(scope: !9891, file: !3, line: 5097, column: 5)
!9900 = !DILocation(line: 5098, column: 10, scope: !9899)
!9901 = !DILocation(line: 5098, column: 24, scope: !9899)
!9902 = !DILocation(line: 5099, column: 38, scope: !9899)
!9903 = !DILocation(line: 5099, column: 41, scope: !9899)
!9904 = !DILocation(line: 5099, column: 7, scope: !9899)
!9905 = !DILocation(line: 5100, column: 7, scope: !9899)
!9906 = !DILocation(line: 5100, column: 10, scope: !9899)
!9907 = !DILocation(line: 5100, column: 36, scope: !9899)
!9908 = !DILocation(line: 5101, column: 7, scope: !9899)
!9909 = !DILocation(line: 5104, column: 3, scope: !9839)
!9910 = !DILocation(line: 5105, column: 1, scope: !9839)
!9911 = distinct !DISubprogram(name: "gimple_call_set_cannot_inline", scope: !1618, file: !1618, line: 2081, type: !9912, scopeLine: 2082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9912 = !DISubroutineType(types: !9913)
!9913 = !{null, !2917, !2706}
!9914 = !DILocalVariable(name: "s", arg: 1, scope: !9911, file: !1618, line: 2081, type: !2917)
!9915 = !DILocation(line: 2081, column: 39, scope: !9911)
!9916 = !DILocalVariable(name: "inlinable_p", arg: 2, scope: !9911, file: !1618, line: 2081, type: !2706)
!9917 = !DILocation(line: 2081, column: 47, scope: !9911)
!9918 = !DILocation(line: 2084, column: 7, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9911, file: !1618, line: 2084, column: 7)
!9920 = !DILocation(line: 2084, column: 7, scope: !9911)
!9921 = !DILocation(line: 2085, column: 5, scope: !9919)
!9922 = !DILocation(line: 2085, column: 8, scope: !9919)
!9923 = !DILocation(line: 2085, column: 15, scope: !9919)
!9924 = !DILocation(line: 2085, column: 23, scope: !9919)
!9925 = !DILocation(line: 2087, column: 5, scope: !9919)
!9926 = !DILocation(line: 2087, column: 8, scope: !9919)
!9927 = !DILocation(line: 2087, column: 15, scope: !9919)
!9928 = !DILocation(line: 2087, column: 23, scope: !9919)
!9929 = !DILocation(line: 2088, column: 1, scope: !9911)
!9930 = distinct !DISubprogram(name: "gimple_seq_first", scope: !1618, file: !1618, line: 159, type: !9931, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9931 = !DISubroutineType(types: !9932)
!9932 = !{!2912, !9933}
!9933 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !2587, line: 67, baseType: !9934)
!9934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9935, size: 64)
!9935 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2909)
!9936 = !DILocalVariable(name: "s", arg: 1, scope: !9930, file: !1618, line: 159, type: !9933)
!9937 = !DILocation(line: 159, column: 36, scope: !9930)
!9938 = !DILocation(line: 161, column: 10, scope: !9930)
!9939 = !DILocation(line: 161, column: 14, scope: !9930)
!9940 = !DILocation(line: 161, column: 17, scope: !9930)
!9941 = !DILocation(line: 161, column: 3, scope: !9930)
!9942 = distinct !DISubprogram(name: "gimple_bb", scope: !1618, file: !1618, line: 1112, type: !9943, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9943 = !DISubroutineType(types: !9944)
!9944 = !{!2881, !6573}
!9945 = !DILocalVariable(name: "g", arg: 1, scope: !9942, file: !1618, line: 1112, type: !6573)
!9946 = !DILocation(line: 1112, column: 25, scope: !9942)
!9947 = !DILocation(line: 1114, column: 10, scope: !9942)
!9948 = !DILocation(line: 1114, column: 13, scope: !9942)
!9949 = !DILocation(line: 1114, column: 20, scope: !9942)
!9950 = !DILocation(line: 1114, column: 3, scope: !9942)
!9951 = distinct !DISubprogram(name: "make_ssa_name", scope: !4916, file: !4916, line: 1245, type: !9952, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9952 = !DISubroutineType(types: !9953)
!9953 = !{!2586, !2586, !2917}
!9954 = !DILocalVariable(name: "var", arg: 1, scope: !9951, file: !4916, line: 1245, type: !2586)
!9955 = !DILocation(line: 1245, column: 21, scope: !9951)
!9956 = !DILocalVariable(name: "stmt", arg: 2, scope: !9951, file: !4916, line: 1245, type: !2917)
!9957 = !DILocation(line: 1245, column: 33, scope: !9951)
!9958 = !DILocation(line: 1247, column: 28, scope: !9951)
!9959 = !DILocation(line: 1247, column: 34, scope: !9951)
!9960 = !DILocation(line: 1247, column: 39, scope: !9951)
!9961 = !DILocation(line: 1247, column: 10, scope: !9951)
!9962 = !DILocation(line: 1247, column: 3, scope: !9951)
!9963 = distinct !DISubprogram(name: "gimple_nop_p", scope: !1618, file: !1618, line: 4304, type: !9964, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9964 = !DISubroutineType(types: !9965)
!9965 = !{!2706, !6573}
!9966 = !DILocalVariable(name: "g", arg: 1, scope: !9963, file: !1618, line: 4304, type: !6573)
!9967 = !DILocation(line: 4304, column: 28, scope: !9963)
!9968 = !DILocation(line: 4306, column: 23, scope: !9963)
!9969 = !DILocation(line: 4306, column: 10, scope: !9963)
!9970 = !DILocation(line: 4306, column: 26, scope: !9963)
!9971 = !DILocation(line: 4306, column: 3, scope: !9963)
!9972 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !337, file: !337, line: 150, type: !9973, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9973 = !DISubroutineType(types: !9974)
!9974 = !{!2897, !9975, !7}
!9975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9976, size: 64)
!9976 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2890)
!9977 = !DILocalVariable(name: "vec_", arg: 1, scope: !9972, file: !337, line: 150, type: !9975)
!9978 = !DILocation(line: 150, column: 1, scope: !9972)
!9979 = !DILocalVariable(name: "ix_", arg: 2, scope: !9972, file: !337, line: 150, type: !7)
!9980 = !DILocation(line: 0, scope: !9972)
!9981 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !337, file: !337, line: 150, type: !9982, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9982 = !DISubroutineType(types: !9983)
!9983 = !{!7, !9975}
!9984 = !DILocalVariable(name: "vec_", arg: 1, scope: !9981, file: !337, line: 150, type: !9975)
!9985 = !DILocation(line: 150, column: 1, scope: !9981)
!9986 = distinct !DISubprogram(name: "gsi_last_bb", scope: !1618, file: !1618, line: 4450, type: !6880, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!9987 = !DILocalVariable(name: "bb", arg: 1, scope: !9986, file: !1618, line: 4450, type: !3473)
!9988 = !DILocation(line: 4450, column: 26, scope: !9986)
!9989 = !DILocalVariable(name: "i", scope: !9986, file: !1618, line: 4452, type: !4261)
!9990 = !DILocation(line: 4452, column: 24, scope: !9986)
!9991 = !DILocalVariable(name: "seq", scope: !9986, file: !1618, line: 4453, type: !2907)
!9992 = !DILocation(line: 4453, column: 14, scope: !9986)
!9993 = !DILocation(line: 4455, column: 17, scope: !9986)
!9994 = !DILocation(line: 4455, column: 9, scope: !9986)
!9995 = !DILocation(line: 4455, column: 7, scope: !9986)
!9996 = !DILocation(line: 4456, column: 28, scope: !9986)
!9997 = !DILocation(line: 4456, column: 11, scope: !9986)
!9998 = !DILocation(line: 4456, column: 5, scope: !9986)
!9999 = !DILocation(line: 4456, column: 9, scope: !9986)
!10000 = !DILocation(line: 4457, column: 11, scope: !9986)
!10001 = !DILocation(line: 4457, column: 5, scope: !9986)
!10002 = !DILocation(line: 4457, column: 9, scope: !9986)
!10003 = !DILocation(line: 4458, column: 10, scope: !9986)
!10004 = !DILocation(line: 4458, column: 5, scope: !9986)
!10005 = !DILocation(line: 4458, column: 8, scope: !9986)
!10006 = !DILocation(line: 4460, column: 3, scope: !9986)
!10007 = distinct !DISubprogram(name: "bb_seq", scope: !1618, file: !1618, line: 237, type: !10008, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10008 = !DISubroutineType(types: !10009)
!10009 = !{!2907, !9120}
!10010 = !DILocalVariable(name: "bb", arg: 1, scope: !10007, file: !1618, line: 237, type: !9120)
!10011 = !DILocation(line: 237, column: 27, scope: !10007)
!10012 = !DILocation(line: 239, column: 13, scope: !10007)
!10013 = !DILocation(line: 239, column: 17, scope: !10007)
!10014 = !DILocation(line: 239, column: 23, scope: !10007)
!10015 = !DILocation(line: 239, column: 33, scope: !10007)
!10016 = !DILocation(line: 239, column: 36, scope: !10007)
!10017 = !DILocation(line: 239, column: 40, scope: !10007)
!10018 = !DILocation(line: 239, column: 43, scope: !10007)
!10019 = !DILocation(line: 239, column: 10, scope: !10007)
!10020 = !DILocation(line: 239, column: 53, scope: !10007)
!10021 = !DILocation(line: 239, column: 57, scope: !10007)
!10022 = !DILocation(line: 239, column: 60, scope: !10007)
!10023 = !DILocation(line: 239, column: 68, scope: !10007)
!10024 = !DILocation(line: 239, column: 3, scope: !10007)
!10025 = distinct !DISubprogram(name: "gimple_seq_last", scope: !1618, file: !1618, line: 178, type: !9931, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10026 = !DILocalVariable(name: "s", arg: 1, scope: !10025, file: !1618, line: 178, type: !9933)
!10027 = !DILocation(line: 178, column: 35, scope: !10025)
!10028 = !DILocation(line: 180, column: 10, scope: !10025)
!10029 = !DILocation(line: 180, column: 14, scope: !10025)
!10030 = !DILocation(line: 180, column: 17, scope: !10025)
!10031 = !DILocation(line: 180, column: 3, scope: !10025)
!10032 = distinct !DISubprogram(name: "tsi_start", scope: !1708, file: !1708, line: 38, type: !10033, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10033 = !DISubroutineType(types: !10034)
!10034 = !{!5838, !2586}
!10035 = !DILocalVariable(name: "t", arg: 1, scope: !10032, file: !1708, line: 38, type: !2586)
!10036 = !DILocation(line: 38, column: 17, scope: !10032)
!10037 = !DILocalVariable(name: "i", scope: !10032, file: !1708, line: 40, type: !5838)
!10038 = !DILocation(line: 40, column: 22, scope: !10032)
!10039 = !DILocation(line: 42, column: 11, scope: !10032)
!10040 = !DILocation(line: 42, column: 5, scope: !10032)
!10041 = !DILocation(line: 42, column: 9, scope: !10032)
!10042 = !DILocation(line: 43, column: 17, scope: !10032)
!10043 = !DILocation(line: 43, column: 5, scope: !10032)
!10044 = !DILocation(line: 43, column: 15, scope: !10032)
!10045 = !DILocation(line: 45, column: 3, scope: !10032)
!10046 = distinct !DISubprogram(name: "tsi_end_p", scope: !1708, file: !1708, line: 60, type: !10047, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10047 = !DISubroutineType(types: !10048)
!10048 = !{!2706, !5838}
!10049 = !DILocalVariable(name: "i", arg: 1, scope: !10046, file: !1708, line: 60, type: !5838)
!10050 = !DILocation(line: 60, column: 31, scope: !10046)
!10051 = !DILocation(line: 62, column: 12, scope: !10046)
!10052 = !DILocation(line: 62, column: 16, scope: !10046)
!10053 = !DILocation(line: 62, column: 10, scope: !10046)
!10054 = !DILocation(line: 62, column: 3, scope: !10046)
!10055 = distinct !DISubprogram(name: "tsi_stmt", scope: !1708, file: !1708, line: 90, type: !10056, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10056 = !DISubroutineType(types: !10057)
!10057 = !{!2586, !5838}
!10058 = !DILocalVariable(name: "i", arg: 1, scope: !10055, file: !1708, line: 90, type: !5838)
!10059 = !DILocation(line: 90, column: 30, scope: !10055)
!10060 = !DILocation(line: 92, column: 12, scope: !10055)
!10061 = !DILocation(line: 92, column: 17, scope: !10055)
!10062 = !DILocation(line: 92, column: 3, scope: !10055)
!10063 = distinct !DISubprogram(name: "tsi_next", scope: !1708, file: !1708, line: 72, type: !10064, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10064 = !DISubroutineType(types: !10065)
!10065 = !{null, !10066}
!10066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5838, size: 64)
!10067 = !DILocalVariable(name: "i", arg: 1, scope: !10063, file: !1708, line: 72, type: !10066)
!10068 = !DILocation(line: 72, column: 31, scope: !10063)
!10069 = !DILocation(line: 74, column: 12, scope: !10063)
!10070 = !DILocation(line: 74, column: 15, scope: !10063)
!10071 = !DILocation(line: 74, column: 20, scope: !10063)
!10072 = !DILocation(line: 74, column: 3, scope: !10063)
!10073 = !DILocation(line: 74, column: 6, scope: !10063)
!10074 = !DILocation(line: 74, column: 10, scope: !10063)
!10075 = !DILocation(line: 75, column: 1, scope: !10063)
!10076 = distinct !DISubprogram(name: "remap_block", scope: !3, file: !3, line: 582, type: !10077, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10077 = !DISubroutineType(types: !10078)
!10078 = !{null, !2585, !3983}
!10079 = !DILocalVariable(name: "block", arg: 1, scope: !10076, file: !3, line: 582, type: !2585)
!10080 = !DILocation(line: 582, column: 20, scope: !10076)
!10081 = !DILocalVariable(name: "id", arg: 2, scope: !10076, file: !3, line: 582, type: !3983)
!10082 = !DILocation(line: 582, column: 43, scope: !10076)
!10083 = !DILocalVariable(name: "old_block", scope: !10076, file: !3, line: 584, type: !2586)
!10084 = !DILocation(line: 584, column: 8, scope: !10076)
!10085 = !DILocalVariable(name: "new_block", scope: !10076, file: !3, line: 585, type: !2586)
!10086 = !DILocation(line: 585, column: 8, scope: !10076)
!10087 = !DILocation(line: 588, column: 16, scope: !10076)
!10088 = !DILocation(line: 588, column: 15, scope: !10076)
!10089 = !DILocation(line: 588, column: 13, scope: !10076)
!10090 = !DILocation(line: 589, column: 15, scope: !10076)
!10091 = !DILocation(line: 589, column: 13, scope: !10076)
!10092 = !DILocation(line: 590, column: 27, scope: !10076)
!10093 = !DILocation(line: 590, column: 3, scope: !10076)
!10094 = !DILocation(line: 590, column: 25, scope: !10076)
!10095 = !DILocation(line: 591, column: 39, scope: !10076)
!10096 = !DILocation(line: 591, column: 3, scope: !10076)
!10097 = !DILocation(line: 591, column: 37, scope: !10076)
!10098 = !DILocation(line: 592, column: 39, scope: !10076)
!10099 = !DILocation(line: 592, column: 3, scope: !10076)
!10100 = !DILocation(line: 592, column: 37, scope: !10076)
!10101 = !DILocation(line: 594, column: 7, scope: !10076)
!10102 = !DILocation(line: 593, column: 3, scope: !10076)
!10103 = !DILocation(line: 594, column: 5, scope: !10076)
!10104 = !DILocation(line: 595, column: 12, scope: !10076)
!10105 = !DILocation(line: 595, column: 4, scope: !10076)
!10106 = !DILocation(line: 595, column: 10, scope: !10076)
!10107 = !DILocation(line: 598, column: 41, scope: !10076)
!10108 = !DILocation(line: 599, column: 9, scope: !10076)
!10109 = !DILocation(line: 600, column: 6, scope: !10076)
!10110 = !DILocation(line: 598, column: 28, scope: !10076)
!10111 = !DILocation(line: 598, column: 3, scope: !10076)
!10112 = !DILocation(line: 598, column: 26, scope: !10076)
!10113 = !DILocation(line: 602, column: 7, scope: !10114)
!10114 = distinct !DILexicalBlock(scope: !10076, file: !3, line: 602, column: 7)
!10115 = !DILocation(line: 602, column: 11, scope: !10114)
!10116 = !DILocation(line: 602, column: 7, scope: !10076)
!10117 = !DILocation(line: 603, column: 5, scope: !10114)
!10118 = !DILocation(line: 603, column: 9, scope: !10114)
!10119 = !DILocation(line: 603, column: 38, scope: !10114)
!10120 = !DILocation(line: 606, column: 20, scope: !10076)
!10121 = !DILocation(line: 606, column: 24, scope: !10076)
!10122 = !DILocation(line: 606, column: 35, scope: !10076)
!10123 = !DILocation(line: 606, column: 3, scope: !10076)
!10124 = !DILocation(line: 607, column: 1, scope: !10076)
!10125 = distinct !DISubprogram(name: "remap_decls", scope: !3, file: !3, line: 527, type: !10126, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10126 = !DISubroutineType(types: !10127)
!10127 = !{!2586, !2586, !10128, !3983}
!10128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3438, size: 64)
!10129 = !DILocalVariable(name: "decls", arg: 1, scope: !10125, file: !3, line: 527, type: !2586)
!10130 = !DILocation(line: 527, column: 19, scope: !10125)
!10131 = !DILocalVariable(name: "nonlocalized_list", arg: 2, scope: !10125, file: !3, line: 527, type: !10128)
!10132 = !DILocation(line: 527, column: 41, scope: !10125)
!10133 = !DILocalVariable(name: "id", arg: 3, scope: !10125, file: !3, line: 527, type: !3983)
!10134 = !DILocation(line: 527, column: 76, scope: !10125)
!10135 = !DILocalVariable(name: "old_var", scope: !10125, file: !3, line: 529, type: !2586)
!10136 = !DILocation(line: 529, column: 8, scope: !10125)
!10137 = !DILocalVariable(name: "new_decls", scope: !10125, file: !3, line: 530, type: !2586)
!10138 = !DILocation(line: 530, column: 8, scope: !10125)
!10139 = !DILocation(line: 533, column: 18, scope: !10140)
!10140 = distinct !DILexicalBlock(scope: !10125, file: !3, line: 533, column: 3)
!10141 = !DILocation(line: 533, column: 16, scope: !10140)
!10142 = !DILocation(line: 533, column: 8, scope: !10140)
!10143 = !DILocation(line: 533, column: 25, scope: !10144)
!10144 = distinct !DILexicalBlock(scope: !10140, file: !3, line: 533, column: 3)
!10145 = !DILocation(line: 533, column: 3, scope: !10140)
!10146 = !DILocalVariable(name: "new_var", scope: !10147, file: !3, line: 535, type: !2586)
!10147 = distinct !DILexicalBlock(scope: !10144, file: !3, line: 534, column: 5)
!10148 = !DILocation(line: 535, column: 12, scope: !10147)
!10149 = !DILocation(line: 537, column: 28, scope: !10150)
!10150 = distinct !DILexicalBlock(scope: !10147, file: !3, line: 537, column: 11)
!10151 = !DILocation(line: 537, column: 37, scope: !10150)
!10152 = !DILocation(line: 537, column: 11, scope: !10150)
!10153 = !DILocation(line: 537, column: 11, scope: !10147)
!10154 = !DILocation(line: 539, column: 8, scope: !10155)
!10155 = distinct !DILexicalBlock(scope: !10156, file: !3, line: 539, column: 8)
!10156 = distinct !DILexicalBlock(scope: !10150, file: !3, line: 538, column: 2)
!10157 = !DILocation(line: 539, column: 28, scope: !10155)
!10158 = !DILocation(line: 540, column: 8, scope: !10155)
!10159 = !DILocation(line: 540, column: 13, scope: !10155)
!10160 = !DILocation(line: 541, column: 8, scope: !10155)
!10161 = !DILocation(line: 541, column: 21, scope: !10155)
!10162 = !DILocation(line: 541, column: 12, scope: !10155)
!10163 = !DILocation(line: 541, column: 30, scope: !10155)
!10164 = !DILocation(line: 541, column: 51, scope: !10155)
!10165 = !DILocation(line: 541, column: 34, scope: !10155)
!10166 = !DILocation(line: 539, column: 8, scope: !10156)
!10167 = !DILocation(line: 542, column: 26, scope: !10155)
!10168 = !DILocation(line: 542, column: 6, scope: !10155)
!10169 = !DILocation(line: 542, column: 12, scope: !10155)
!10170 = !DILocation(line: 542, column: 24, scope: !10155)
!10171 = !DILocation(line: 544, column: 10, scope: !10172)
!10172 = distinct !DILexicalBlock(scope: !10156, file: !3, line: 544, column: 8)
!10173 = !DILocation(line: 544, column: 19, scope: !10172)
!10174 = !DILocation(line: 544, column: 22, scope: !10172)
!10175 = !DILocation(line: 544, column: 39, scope: !10172)
!10176 = !DILocation(line: 545, column: 8, scope: !10172)
!10177 = !DILocation(line: 545, column: 12, scope: !10172)
!10178 = !DILocation(line: 546, column: 8, scope: !10172)
!10179 = !DILocation(line: 546, column: 11, scope: !10172)
!10180 = !DILocation(line: 544, column: 8, scope: !10156)
!10181 = !DILocation(line: 547, column: 6, scope: !10172)
!10182 = !DILocation(line: 548, column: 4, scope: !10156)
!10183 = !DILocation(line: 552, column: 29, scope: !10147)
!10184 = !DILocation(line: 552, column: 38, scope: !10147)
!10185 = !DILocation(line: 552, column: 17, scope: !10147)
!10186 = !DILocation(line: 552, column: 15, scope: !10147)
!10187 = !DILocation(line: 558, column: 11, scope: !10188)
!10188 = distinct !DILexicalBlock(scope: !10147, file: !3, line: 558, column: 11)
!10189 = !DILocation(line: 558, column: 22, scope: !10188)
!10190 = !DILocation(line: 558, column: 26, scope: !10188)
!10191 = !DILocation(line: 558, column: 19, scope: !10188)
!10192 = !DILocation(line: 558, column: 11, scope: !10147)
!10193 = !DILocation(line: 560, column: 17, scope: !10194)
!10194 = distinct !DILexicalBlock(scope: !10188, file: !3, line: 560, column: 16)
!10195 = !DILocation(line: 560, column: 16, scope: !10188)
!10196 = !DILocation(line: 562, column: 10, scope: !10197)
!10197 = distinct !DILexicalBlock(scope: !10198, file: !3, line: 562, column: 8)
!10198 = distinct !DILexicalBlock(scope: !10194, file: !3, line: 561, column: 9)
!10199 = !DILocation(line: 562, column: 19, scope: !10197)
!10200 = !DILocation(line: 562, column: 22, scope: !10197)
!10201 = !DILocation(line: 562, column: 39, scope: !10197)
!10202 = !DILocation(line: 563, column: 8, scope: !10197)
!10203 = !DILocation(line: 563, column: 12, scope: !10197)
!10204 = !DILocation(line: 564, column: 8, scope: !10197)
!10205 = !DILocation(line: 564, column: 11, scope: !10197)
!10206 = !DILocation(line: 562, column: 8, scope: !10198)
!10207 = !DILocation(line: 565, column: 6, scope: !10197)
!10208 = !DILocation(line: 566, column: 2, scope: !10198)
!10209 = !DILocation(line: 569, column: 4, scope: !10210)
!10210 = distinct !DILexicalBlock(scope: !10194, file: !3, line: 568, column: 2)
!10211 = !DILocation(line: 570, column: 27, scope: !10210)
!10212 = !DILocation(line: 570, column: 4, scope: !10210)
!10213 = !DILocation(line: 570, column: 25, scope: !10210)
!10214 = !DILocation(line: 571, column: 16, scope: !10210)
!10215 = !DILocation(line: 571, column: 14, scope: !10210)
!10216 = !DILocation(line: 573, column: 5, scope: !10147)
!10217 = !DILocation(line: 533, column: 44, scope: !10144)
!10218 = !DILocation(line: 533, column: 42, scope: !10144)
!10219 = !DILocation(line: 533, column: 3, scope: !10144)
!10220 = distinct !{!10220, !10145, !10221}
!10221 = !DILocation(line: 573, column: 5, scope: !10140)
!10222 = !DILocation(line: 575, column: 20, scope: !10125)
!10223 = !DILocation(line: 575, column: 10, scope: !10125)
!10224 = !DILocation(line: 575, column: 3, scope: !10125)
!10225 = distinct !DISubprogram(name: "VEC_tree_gc_copy", scope: !135, file: !135, line: 183, type: !10226, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10226 = !DISubroutineType(types: !10227)
!10227 = !{!3438, !10228}
!10228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3443, size: 64)
!10229 = !DILocalVariable(name: "vec_", arg: 1, scope: !10225, file: !135, line: 183, type: !10228)
!10230 = !DILocation(line: 183, column: 1, scope: !10225)
!10231 = !DILocalVariable(name: "len_", scope: !10225, file: !135, line: 183, type: !3061)
!10232 = !DILocalVariable(name: "new_vec_", scope: !10225, file: !135, line: 183, type: !3438)
!10233 = !DILocation(line: 183, column: 1, scope: !10234)
!10234 = distinct !DILexicalBlock(scope: !10225, file: !135, line: 183, column: 1)
!10235 = !DILocation(line: 183, column: 1, scope: !10236)
!10236 = distinct !DILexicalBlock(scope: !10234, file: !135, line: 183, column: 1)
!10237 = distinct !DISubprogram(name: "var_ann", scope: !4916, file: !4916, line: 132, type: !10238, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10238 = !DISubroutineType(types: !10239)
!10239 = !{!4936, !8613}
!10240 = !DILocalVariable(name: "t", arg: 1, scope: !10237, file: !4916, line: 132, type: !8613)
!10241 = !DILocation(line: 132, column: 21, scope: !10237)
!10242 = !DILocalVariable(name: "p", scope: !10237, file: !4916, line: 134, type: !10243)
!10243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10244, size: 64)
!10244 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4936)
!10245 = !DILocation(line: 134, column: 20, scope: !10237)
!10246 = !DILocation(line: 134, column: 24, scope: !10237)
!10247 = !DILocation(line: 135, column: 10, scope: !10237)
!10248 = !DILocation(line: 135, column: 15, scope: !10237)
!10249 = !DILocation(line: 135, column: 14, scope: !10237)
!10250 = !DILocation(line: 135, column: 3, scope: !10237)
!10251 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !135, file: !135, line: 183, type: !10252, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10252 = !DISubroutineType(types: !10253)
!10253 = !{!2585, !10128, !2586}
!10254 = !DILocalVariable(name: "vec_", arg: 1, scope: !10251, file: !135, line: 183, type: !10128)
!10255 = !DILocation(line: 183, column: 1, scope: !10251)
!10256 = !DILocalVariable(name: "obj_", arg: 2, scope: !10251, file: !135, line: 183, type: !2586)
!10257 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !135, file: !135, line: 183, type: !10258, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10258 = !DISubroutineType(types: !10259)
!10259 = !{!2683, !10128, !2683}
!10260 = !DILocalVariable(name: "vec_", arg: 1, scope: !10257, file: !135, line: 183, type: !10128)
!10261 = !DILocation(line: 183, column: 1, scope: !10257)
!10262 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10257, file: !135, line: 183, type: !2683)
!10263 = !DILocalVariable(name: "extend", scope: !10257, file: !135, line: 183, type: !2683)
!10264 = !DILocation(line: 183, column: 1, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10257, file: !135, line: 183, column: 1)
!10266 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !10267, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10267 = !DISubroutineType(types: !10268)
!10268 = !{!2585, !10228, !2586}
!10269 = !DILocalVariable(name: "vec_", arg: 1, scope: !10266, file: !135, line: 182, type: !10228)
!10270 = !DILocation(line: 182, column: 1, scope: !10266)
!10271 = !DILocalVariable(name: "obj_", arg: 2, scope: !10266, file: !135, line: 182, type: !2586)
!10272 = !DILocalVariable(name: "slot_", scope: !10266, file: !135, line: 182, type: !2585)
!10273 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !10274, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10274 = !DISubroutineType(types: !10275)
!10275 = !{!2683, !10228, !2683}
!10276 = !DILocalVariable(name: "vec_", arg: 1, scope: !10273, file: !135, line: 182, type: !10228)
!10277 = !DILocation(line: 182, column: 1, scope: !10273)
!10278 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10273, file: !135, line: 182, type: !2683)
!10279 = distinct !DISubprogram(name: "gimple_return_retval", scope: !1618, file: !1618, line: 4253, type: !6581, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10280 = !DILocalVariable(name: "gs", arg: 1, scope: !10279, file: !1618, line: 4253, type: !6573)
!10281 = !DILocation(line: 4253, column: 36, scope: !10279)
!10282 = !DILocation(line: 4256, column: 21, scope: !10279)
!10283 = !DILocation(line: 4256, column: 10, scope: !10279)
!10284 = !DILocation(line: 4256, column: 3, scope: !10279)
!10285 = distinct !DISubprogram(name: "gimple_has_substatements", scope: !1618, file: !1618, line: 1083, type: !10286, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10286 = !DISubroutineType(types: !10287)
!10287 = !{!2706, !2917}
!10288 = !DILocalVariable(name: "g", arg: 1, scope: !10285, file: !1618, line: 1083, type: !2917)
!10289 = !DILocation(line: 1083, column: 34, scope: !10285)
!10290 = !DILocation(line: 1085, column: 24, scope: !10285)
!10291 = !DILocation(line: 1085, column: 11, scope: !10285)
!10292 = !DILocation(line: 1085, column: 3, scope: !10285)
!10293 = !DILocation(line: 1101, column: 7, scope: !10294)
!10294 = distinct !DILexicalBlock(scope: !10285, file: !1618, line: 1086, column: 5)
!10295 = !DILocation(line: 1104, column: 7, scope: !10294)
!10296 = !DILocation(line: 1106, column: 1, scope: !10285)
!10297 = distinct !DISubprogram(name: "copy_gimple_bind", scope: !3, file: !3, line: 692, type: !5220, scopeLine: 693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10298 = !DILocalVariable(name: "stmt", arg: 1, scope: !10297, file: !3, line: 692, type: !2917)
!10299 = !DILocation(line: 692, column: 26, scope: !10297)
!10300 = !DILocalVariable(name: "id", arg: 2, scope: !10297, file: !3, line: 692, type: !3983)
!10301 = !DILocation(line: 692, column: 48, scope: !10297)
!10302 = !DILocalVariable(name: "new_bind", scope: !10297, file: !3, line: 694, type: !2917)
!10303 = !DILocation(line: 694, column: 10, scope: !10297)
!10304 = !DILocalVariable(name: "new_block", scope: !10297, file: !3, line: 695, type: !2586)
!10305 = !DILocation(line: 695, column: 8, scope: !10297)
!10306 = !DILocalVariable(name: "new_vars", scope: !10297, file: !3, line: 695, type: !2586)
!10307 = !DILocation(line: 695, column: 19, scope: !10297)
!10308 = !DILocalVariable(name: "body", scope: !10297, file: !3, line: 696, type: !2907)
!10309 = !DILocation(line: 696, column: 14, scope: !10297)
!10310 = !DILocalVariable(name: "new_body", scope: !10297, file: !3, line: 696, type: !2907)
!10311 = !DILocation(line: 696, column: 20, scope: !10297)
!10312 = !DILocation(line: 700, column: 28, scope: !10297)
!10313 = !DILocation(line: 700, column: 10, scope: !10297)
!10314 = !DILocation(line: 700, column: 8, scope: !10297)
!10315 = !DILocation(line: 701, column: 32, scope: !10297)
!10316 = !DILocation(line: 701, column: 38, scope: !10297)
!10317 = !DILocation(line: 701, column: 14, scope: !10297)
!10318 = !DILocation(line: 701, column: 12, scope: !10297)
!10319 = !DILocation(line: 703, column: 34, scope: !10297)
!10320 = !DILocation(line: 703, column: 15, scope: !10297)
!10321 = !DILocation(line: 703, column: 13, scope: !10297)
!10322 = !DILocation(line: 704, column: 7, scope: !10323)
!10323 = distinct !DILexicalBlock(scope: !10297, file: !3, line: 704, column: 7)
!10324 = !DILocation(line: 704, column: 7, scope: !10297)
!10325 = !DILocation(line: 705, column: 30, scope: !10323)
!10326 = !DILocation(line: 705, column: 5, scope: !10323)
!10327 = !DILocation(line: 709, column: 32, scope: !10297)
!10328 = !DILocation(line: 709, column: 14, scope: !10297)
!10329 = !DILocation(line: 709, column: 12, scope: !10297)
!10330 = !DILocation(line: 710, column: 7, scope: !10331)
!10331 = distinct !DILexicalBlock(scope: !10297, file: !3, line: 710, column: 7)
!10332 = !DILocation(line: 710, column: 7, scope: !10297)
!10333 = !DILocation(line: 711, column: 29, scope: !10331)
!10334 = !DILocation(line: 711, column: 45, scope: !10331)
!10335 = !DILocation(line: 711, column: 16, scope: !10331)
!10336 = !DILocation(line: 711, column: 14, scope: !10331)
!10337 = !DILocation(line: 711, column: 5, scope: !10331)
!10338 = !DILocation(line: 713, column: 33, scope: !10297)
!10339 = !DILocation(line: 713, column: 43, scope: !10297)
!10340 = !DILocation(line: 713, column: 53, scope: !10297)
!10341 = !DILocation(line: 713, column: 14, scope: !10297)
!10342 = !DILocation(line: 713, column: 12, scope: !10297)
!10343 = !DILocation(line: 715, column: 10, scope: !10297)
!10344 = !DILocation(line: 715, column: 3, scope: !10297)
!10345 = distinct !DISubprogram(name: "gimple_catch_types", scope: !1618, file: !1618, line: 2785, type: !6581, scopeLine: 2786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10346 = !DILocalVariable(name: "gs", arg: 1, scope: !10345, file: !1618, line: 2785, type: !6573)
!10347 = !DILocation(line: 2785, column: 34, scope: !10345)
!10348 = !DILocation(line: 2788, column: 10, scope: !10345)
!10349 = !DILocation(line: 2788, column: 14, scope: !10345)
!10350 = !DILocation(line: 2788, column: 27, scope: !10345)
!10351 = !DILocation(line: 2788, column: 3, scope: !10345)
!10352 = distinct !DISubprogram(name: "gimple_eh_filter_types", scope: !1618, file: !1618, line: 2847, type: !6581, scopeLine: 2848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10353 = !DILocalVariable(name: "gs", arg: 1, scope: !10352, file: !1618, line: 2847, type: !6573)
!10354 = !DILocation(line: 2847, column: 38, scope: !10352)
!10355 = !DILocation(line: 2850, column: 10, scope: !10352)
!10356 = !DILocation(line: 2850, column: 14, scope: !10352)
!10357 = !DILocation(line: 2850, column: 31, scope: !10352)
!10358 = !DILocation(line: 2850, column: 3, scope: !10352)
!10359 = distinct !DISubprogram(name: "gimple_try_kind", scope: !1618, file: !1618, line: 2921, type: !10360, scopeLine: 2922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10360 = !DISubroutineType(types: !10361)
!10361 = !{!1722, !6573}
!10362 = !DILocalVariable(name: "gs", arg: 1, scope: !10359, file: !1618, line: 2921, type: !6573)
!10363 = !DILocation(line: 2921, column: 31, scope: !10359)
!10364 = !DILocation(line: 2924, column: 35, scope: !10359)
!10365 = !DILocation(line: 2924, column: 39, scope: !10359)
!10366 = !DILocation(line: 2924, column: 46, scope: !10359)
!10367 = !DILocation(line: 2924, column: 54, scope: !10359)
!10368 = !DILocation(line: 2924, column: 3, scope: !10359)
!10369 = distinct !DISubprogram(name: "gimple_wce_cleanup", scope: !1618, file: !1618, line: 3009, type: !6785, scopeLine: 3010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10370 = !DILocalVariable(name: "gs", arg: 1, scope: !10369, file: !1618, line: 3009, type: !2917)
!10371 = !DILocation(line: 3009, column: 28, scope: !10369)
!10372 = !DILocation(line: 3012, column: 10, scope: !10369)
!10373 = !DILocation(line: 3012, column: 14, scope: !10369)
!10374 = !DILocation(line: 3012, column: 25, scope: !10369)
!10375 = !DILocation(line: 3012, column: 3, scope: !10369)
!10376 = distinct !DISubprogram(name: "gimple_omp_parallel_clauses", scope: !1618, file: !1618, line: 3604, type: !6581, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10377 = !DILocalVariable(name: "gs", arg: 1, scope: !10376, file: !1618, line: 3604, type: !6573)
!10378 = !DILocation(line: 3604, column: 43, scope: !10376)
!10379 = !DILocation(line: 3607, column: 10, scope: !10376)
!10380 = !DILocation(line: 3607, column: 14, scope: !10376)
!10381 = !DILocation(line: 3607, column: 34, scope: !10376)
!10382 = !DILocation(line: 3607, column: 3, scope: !10376)
!10383 = distinct !DISubprogram(name: "gimple_omp_parallel_child_fn", scope: !1618, file: !1618, line: 3635, type: !6581, scopeLine: 3636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10384 = !DILocalVariable(name: "gs", arg: 1, scope: !10383, file: !1618, line: 3635, type: !6573)
!10385 = !DILocation(line: 3635, column: 44, scope: !10383)
!10386 = !DILocation(line: 3638, column: 10, scope: !10383)
!10387 = !DILocation(line: 3638, column: 14, scope: !10383)
!10388 = !DILocation(line: 3638, column: 34, scope: !10383)
!10389 = !DILocation(line: 3638, column: 3, scope: !10383)
!10390 = distinct !DISubprogram(name: "gimple_omp_parallel_data_arg", scope: !1618, file: !1618, line: 3666, type: !6581, scopeLine: 3667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10391 = !DILocalVariable(name: "gs", arg: 1, scope: !10390, file: !1618, line: 3666, type: !6573)
!10392 = !DILocation(line: 3666, column: 44, scope: !10390)
!10393 = !DILocation(line: 3669, column: 10, scope: !10390)
!10394 = !DILocation(line: 3669, column: 14, scope: !10390)
!10395 = !DILocation(line: 3669, column: 34, scope: !10390)
!10396 = !DILocation(line: 3669, column: 3, scope: !10390)
!10397 = distinct !DISubprogram(name: "gimple_omp_task_clauses", scope: !1618, file: !1618, line: 3696, type: !6581, scopeLine: 3697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10398 = !DILocalVariable(name: "gs", arg: 1, scope: !10397, file: !1618, line: 3696, type: !6573)
!10399 = !DILocation(line: 3696, column: 39, scope: !10397)
!10400 = !DILocation(line: 3699, column: 10, scope: !10397)
!10401 = !DILocation(line: 3699, column: 14, scope: !10397)
!10402 = !DILocation(line: 3699, column: 34, scope: !10397)
!10403 = !DILocation(line: 3699, column: 3, scope: !10397)
!10404 = distinct !DISubprogram(name: "gimple_omp_task_child_fn", scope: !1618, file: !1618, line: 3727, type: !6581, scopeLine: 3728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10405 = !DILocalVariable(name: "gs", arg: 1, scope: !10404, file: !1618, line: 3727, type: !6573)
!10406 = !DILocation(line: 3727, column: 40, scope: !10404)
!10407 = !DILocation(line: 3730, column: 10, scope: !10404)
!10408 = !DILocation(line: 3730, column: 14, scope: !10404)
!10409 = !DILocation(line: 3730, column: 34, scope: !10404)
!10410 = !DILocation(line: 3730, column: 3, scope: !10404)
!10411 = distinct !DISubprogram(name: "gimple_omp_task_data_arg", scope: !1618, file: !1618, line: 3758, type: !6581, scopeLine: 3759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10412 = !DILocalVariable(name: "gs", arg: 1, scope: !10411, file: !1618, line: 3758, type: !6573)
!10413 = !DILocation(line: 3758, column: 40, scope: !10411)
!10414 = !DILocation(line: 3761, column: 10, scope: !10411)
!10415 = !DILocation(line: 3761, column: 14, scope: !10411)
!10416 = !DILocation(line: 3761, column: 34, scope: !10411)
!10417 = !DILocation(line: 3761, column: 3, scope: !10411)
!10418 = distinct !DISubprogram(name: "gimple_omp_task_copy_fn", scope: !1618, file: !1618, line: 3889, type: !6581, scopeLine: 3890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10419 = !DILocalVariable(name: "gs", arg: 1, scope: !10418, file: !1618, line: 3889, type: !6573)
!10420 = !DILocation(line: 3889, column: 39, scope: !10418)
!10421 = !DILocation(line: 3892, column: 10, scope: !10418)
!10422 = !DILocation(line: 3892, column: 14, scope: !10418)
!10423 = !DILocation(line: 3892, column: 30, scope: !10418)
!10424 = !DILocation(line: 3892, column: 3, scope: !10418)
!10425 = distinct !DISubprogram(name: "gimple_omp_task_arg_size", scope: !1618, file: !1618, line: 3919, type: !6581, scopeLine: 3920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10426 = !DILocalVariable(name: "gs", arg: 1, scope: !10425, file: !1618, line: 3919, type: !6573)
!10427 = !DILocation(line: 3919, column: 40, scope: !10425)
!10428 = !DILocation(line: 3922, column: 10, scope: !10425)
!10429 = !DILocation(line: 3922, column: 14, scope: !10425)
!10430 = !DILocation(line: 3922, column: 30, scope: !10425)
!10431 = !DILocation(line: 3922, column: 3, scope: !10425)
!10432 = distinct !DISubprogram(name: "gimple_omp_task_arg_align", scope: !1618, file: !1618, line: 3949, type: !6581, scopeLine: 3950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10433 = !DILocalVariable(name: "gs", arg: 1, scope: !10432, file: !1618, line: 3949, type: !6573)
!10434 = !DILocation(line: 3949, column: 41, scope: !10432)
!10435 = !DILocation(line: 3952, column: 10, scope: !10432)
!10436 = !DILocation(line: 3952, column: 14, scope: !10432)
!10437 = !DILocation(line: 3952, column: 30, scope: !10432)
!10438 = !DILocation(line: 3952, column: 3, scope: !10432)
!10439 = distinct !DISubprogram(name: "gimple_omp_for_clauses", scope: !1618, file: !1618, line: 3410, type: !6581, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10440 = !DILocalVariable(name: "gs", arg: 1, scope: !10439, file: !1618, line: 3410, type: !6573)
!10441 = !DILocation(line: 3410, column: 38, scope: !10439)
!10442 = !DILocation(line: 3413, column: 10, scope: !10439)
!10443 = !DILocation(line: 3413, column: 14, scope: !10439)
!10444 = !DILocation(line: 3413, column: 29, scope: !10439)
!10445 = !DILocation(line: 3413, column: 3, scope: !10439)
!10446 = distinct !DISubprogram(name: "gimple_omp_for_collapse", scope: !1618, file: !1618, line: 3440, type: !10447, scopeLine: 3441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10447 = !DISubroutineType(types: !10448)
!10448 = !{!3061, !2917}
!10449 = !DILocalVariable(name: "gs", arg: 1, scope: !10446, file: !1618, line: 3440, type: !2917)
!10450 = !DILocation(line: 3440, column: 33, scope: !10446)
!10451 = !DILocation(line: 3443, column: 10, scope: !10446)
!10452 = !DILocation(line: 3443, column: 14, scope: !10446)
!10453 = !DILocation(line: 3443, column: 29, scope: !10446)
!10454 = !DILocation(line: 3443, column: 3, scope: !10446)
!10455 = distinct !DISubprogram(name: "gimple_omp_for_set_index", scope: !1618, file: !1618, line: 3472, type: !10456, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10456 = !DISubroutineType(types: !10457)
!10457 = !{null, !2917, !3061, !2586}
!10458 = !DILocalVariable(name: "gs", arg: 1, scope: !10455, file: !1618, line: 3472, type: !2917)
!10459 = !DILocation(line: 3472, column: 34, scope: !10455)
!10460 = !DILocalVariable(name: "i", arg: 2, scope: !10455, file: !1618, line: 3472, type: !3061)
!10461 = !DILocation(line: 3472, column: 45, scope: !10455)
!10462 = !DILocalVariable(name: "index", arg: 3, scope: !10455, file: !1618, line: 3472, type: !2586)
!10463 = !DILocation(line: 3472, column: 53, scope: !10455)
!10464 = !DILocation(line: 3475, column: 3, scope: !10455)
!10465 = !DILocation(line: 3476, column: 38, scope: !10455)
!10466 = !DILocation(line: 3476, column: 3, scope: !10455)
!10467 = !DILocation(line: 3476, column: 7, scope: !10455)
!10468 = !DILocation(line: 3476, column: 22, scope: !10455)
!10469 = !DILocation(line: 3476, column: 27, scope: !10455)
!10470 = !DILocation(line: 3476, column: 30, scope: !10455)
!10471 = !DILocation(line: 3476, column: 36, scope: !10455)
!10472 = !DILocation(line: 3477, column: 1, scope: !10455)
!10473 = distinct !DISubprogram(name: "gimple_omp_for_index", scope: !1618, file: !1618, line: 3450, type: !10474, scopeLine: 3451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10474 = !DISubroutineType(types: !10475)
!10475 = !{!2586, !6573, !3061}
!10476 = !DILocalVariable(name: "gs", arg: 1, scope: !10473, file: !1618, line: 3450, type: !6573)
!10477 = !DILocation(line: 3450, column: 36, scope: !10473)
!10478 = !DILocalVariable(name: "i", arg: 2, scope: !10473, file: !1618, line: 3450, type: !3061)
!10479 = !DILocation(line: 3450, column: 47, scope: !10473)
!10480 = !DILocation(line: 3453, column: 3, scope: !10473)
!10481 = !DILocation(line: 3454, column: 10, scope: !10473)
!10482 = !DILocation(line: 3454, column: 14, scope: !10473)
!10483 = !DILocation(line: 3454, column: 29, scope: !10473)
!10484 = !DILocation(line: 3454, column: 34, scope: !10473)
!10485 = !DILocation(line: 3454, column: 37, scope: !10473)
!10486 = !DILocation(line: 3454, column: 3, scope: !10473)
!10487 = distinct !DISubprogram(name: "gimple_omp_for_set_initial", scope: !1618, file: !1618, line: 3505, type: !10456, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10488 = !DILocalVariable(name: "gs", arg: 1, scope: !10487, file: !1618, line: 3505, type: !2917)
!10489 = !DILocation(line: 3505, column: 36, scope: !10487)
!10490 = !DILocalVariable(name: "i", arg: 2, scope: !10487, file: !1618, line: 3505, type: !3061)
!10491 = !DILocation(line: 3505, column: 47, scope: !10487)
!10492 = !DILocalVariable(name: "initial", arg: 3, scope: !10487, file: !1618, line: 3505, type: !2586)
!10493 = !DILocation(line: 3505, column: 55, scope: !10487)
!10494 = !DILocation(line: 3508, column: 3, scope: !10487)
!10495 = !DILocation(line: 3509, column: 40, scope: !10487)
!10496 = !DILocation(line: 3509, column: 3, scope: !10487)
!10497 = !DILocation(line: 3509, column: 7, scope: !10487)
!10498 = !DILocation(line: 3509, column: 22, scope: !10487)
!10499 = !DILocation(line: 3509, column: 27, scope: !10487)
!10500 = !DILocation(line: 3509, column: 30, scope: !10487)
!10501 = !DILocation(line: 3509, column: 38, scope: !10487)
!10502 = !DILocation(line: 3510, column: 1, scope: !10487)
!10503 = distinct !DISubprogram(name: "gimple_omp_for_initial", scope: !1618, file: !1618, line: 3483, type: !10474, scopeLine: 3484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10504 = !DILocalVariable(name: "gs", arg: 1, scope: !10503, file: !1618, line: 3483, type: !6573)
!10505 = !DILocation(line: 3483, column: 38, scope: !10503)
!10506 = !DILocalVariable(name: "i", arg: 2, scope: !10503, file: !1618, line: 3483, type: !3061)
!10507 = !DILocation(line: 3483, column: 49, scope: !10503)
!10508 = !DILocation(line: 3486, column: 3, scope: !10503)
!10509 = !DILocation(line: 3487, column: 10, scope: !10503)
!10510 = !DILocation(line: 3487, column: 14, scope: !10503)
!10511 = !DILocation(line: 3487, column: 29, scope: !10503)
!10512 = !DILocation(line: 3487, column: 34, scope: !10503)
!10513 = !DILocation(line: 3487, column: 37, scope: !10503)
!10514 = !DILocation(line: 3487, column: 3, scope: !10503)
!10515 = distinct !DISubprogram(name: "gimple_omp_for_set_final", scope: !1618, file: !1618, line: 3538, type: !10456, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10516 = !DILocalVariable(name: "gs", arg: 1, scope: !10515, file: !1618, line: 3538, type: !2917)
!10517 = !DILocation(line: 3538, column: 34, scope: !10515)
!10518 = !DILocalVariable(name: "i", arg: 2, scope: !10515, file: !1618, line: 3538, type: !3061)
!10519 = !DILocation(line: 3538, column: 45, scope: !10515)
!10520 = !DILocalVariable(name: "final", arg: 3, scope: !10515, file: !1618, line: 3538, type: !2586)
!10521 = !DILocation(line: 3538, column: 53, scope: !10515)
!10522 = !DILocation(line: 3541, column: 3, scope: !10515)
!10523 = !DILocation(line: 3542, column: 38, scope: !10515)
!10524 = !DILocation(line: 3542, column: 3, scope: !10515)
!10525 = !DILocation(line: 3542, column: 7, scope: !10515)
!10526 = !DILocation(line: 3542, column: 22, scope: !10515)
!10527 = !DILocation(line: 3542, column: 27, scope: !10515)
!10528 = !DILocation(line: 3542, column: 30, scope: !10515)
!10529 = !DILocation(line: 3542, column: 36, scope: !10515)
!10530 = !DILocation(line: 3543, column: 1, scope: !10515)
!10531 = distinct !DISubprogram(name: "gimple_omp_for_final", scope: !1618, file: !1618, line: 3516, type: !10474, scopeLine: 3517, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10532 = !DILocalVariable(name: "gs", arg: 1, scope: !10531, file: !1618, line: 3516, type: !6573)
!10533 = !DILocation(line: 3516, column: 36, scope: !10531)
!10534 = !DILocalVariable(name: "i", arg: 2, scope: !10531, file: !1618, line: 3516, type: !3061)
!10535 = !DILocation(line: 3516, column: 47, scope: !10531)
!10536 = !DILocation(line: 3519, column: 3, scope: !10531)
!10537 = !DILocation(line: 3520, column: 10, scope: !10531)
!10538 = !DILocation(line: 3520, column: 14, scope: !10531)
!10539 = !DILocation(line: 3520, column: 29, scope: !10531)
!10540 = !DILocation(line: 3520, column: 34, scope: !10531)
!10541 = !DILocation(line: 3520, column: 37, scope: !10531)
!10542 = !DILocation(line: 3520, column: 3, scope: !10531)
!10543 = distinct !DISubprogram(name: "gimple_omp_for_set_incr", scope: !1618, file: !1618, line: 3571, type: !10456, scopeLine: 3572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10544 = !DILocalVariable(name: "gs", arg: 1, scope: !10543, file: !1618, line: 3571, type: !2917)
!10545 = !DILocation(line: 3571, column: 33, scope: !10543)
!10546 = !DILocalVariable(name: "i", arg: 2, scope: !10543, file: !1618, line: 3571, type: !3061)
!10547 = !DILocation(line: 3571, column: 44, scope: !10543)
!10548 = !DILocalVariable(name: "incr", arg: 3, scope: !10543, file: !1618, line: 3571, type: !2586)
!10549 = !DILocation(line: 3571, column: 52, scope: !10543)
!10550 = !DILocation(line: 3574, column: 3, scope: !10543)
!10551 = !DILocation(line: 3575, column: 37, scope: !10543)
!10552 = !DILocation(line: 3575, column: 3, scope: !10543)
!10553 = !DILocation(line: 3575, column: 7, scope: !10543)
!10554 = !DILocation(line: 3575, column: 22, scope: !10543)
!10555 = !DILocation(line: 3575, column: 27, scope: !10543)
!10556 = !DILocation(line: 3575, column: 30, scope: !10543)
!10557 = !DILocation(line: 3575, column: 35, scope: !10543)
!10558 = !DILocation(line: 3576, column: 1, scope: !10543)
!10559 = distinct !DISubprogram(name: "gimple_omp_for_incr", scope: !1618, file: !1618, line: 3549, type: !10474, scopeLine: 3550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10560 = !DILocalVariable(name: "gs", arg: 1, scope: !10559, file: !1618, line: 3549, type: !6573)
!10561 = !DILocation(line: 3549, column: 35, scope: !10559)
!10562 = !DILocalVariable(name: "i", arg: 2, scope: !10559, file: !1618, line: 3549, type: !3061)
!10563 = !DILocation(line: 3549, column: 46, scope: !10559)
!10564 = !DILocation(line: 3552, column: 3, scope: !10559)
!10565 = !DILocation(line: 3553, column: 10, scope: !10559)
!10566 = !DILocation(line: 3553, column: 14, scope: !10559)
!10567 = !DILocation(line: 3553, column: 29, scope: !10559)
!10568 = !DILocation(line: 3553, column: 34, scope: !10559)
!10569 = !DILocation(line: 3553, column: 37, scope: !10559)
!10570 = !DILocation(line: 3553, column: 3, scope: !10559)
!10571 = distinct !DISubprogram(name: "gimple_omp_for_set_cond", scope: !1618, file: !1618, line: 4073, type: !10572, scopeLine: 4074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10572 = !DISubroutineType(types: !10573)
!10573 = !{null, !2917, !3061, !134}
!10574 = !DILocalVariable(name: "gs", arg: 1, scope: !10571, file: !1618, line: 4073, type: !2917)
!10575 = !DILocation(line: 4073, column: 33, scope: !10571)
!10576 = !DILocalVariable(name: "i", arg: 2, scope: !10571, file: !1618, line: 4073, type: !3061)
!10577 = !DILocation(line: 4073, column: 44, scope: !10571)
!10578 = !DILocalVariable(name: "cond", arg: 3, scope: !10571, file: !1618, line: 4073, type: !134)
!10579 = !DILocation(line: 4073, column: 62, scope: !10571)
!10580 = !DILocation(line: 4076, column: 3, scope: !10571)
!10581 = !DILocation(line: 4077, column: 3, scope: !10571)
!10582 = !DILocation(line: 4078, column: 37, scope: !10571)
!10583 = !DILocation(line: 4078, column: 3, scope: !10571)
!10584 = !DILocation(line: 4078, column: 7, scope: !10571)
!10585 = !DILocation(line: 4078, column: 22, scope: !10571)
!10586 = !DILocation(line: 4078, column: 27, scope: !10571)
!10587 = !DILocation(line: 4078, column: 30, scope: !10571)
!10588 = !DILocation(line: 4078, column: 35, scope: !10571)
!10589 = !DILocation(line: 4079, column: 1, scope: !10571)
!10590 = distinct !DISubprogram(name: "gimple_omp_for_cond", scope: !1618, file: !1618, line: 4085, type: !10591, scopeLine: 4086, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10591 = !DISubroutineType(types: !10592)
!10592 = !{!134, !6573, !3061}
!10593 = !DILocalVariable(name: "gs", arg: 1, scope: !10590, file: !1618, line: 4085, type: !6573)
!10594 = !DILocation(line: 4085, column: 35, scope: !10590)
!10595 = !DILocalVariable(name: "i", arg: 2, scope: !10590, file: !1618, line: 4085, type: !3061)
!10596 = !DILocation(line: 4085, column: 46, scope: !10590)
!10597 = !DILocation(line: 4088, column: 3, scope: !10590)
!10598 = !DILocation(line: 4089, column: 10, scope: !10590)
!10599 = !DILocation(line: 4089, column: 14, scope: !10590)
!10600 = !DILocation(line: 4089, column: 29, scope: !10590)
!10601 = !DILocation(line: 4089, column: 34, scope: !10590)
!10602 = !DILocation(line: 4089, column: 37, scope: !10590)
!10603 = !DILocation(line: 4089, column: 3, scope: !10590)
!10604 = distinct !DISubprogram(name: "gimple_omp_sections_clauses", scope: !1618, file: !1618, line: 4009, type: !6581, scopeLine: 4010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10605 = !DILocalVariable(name: "gs", arg: 1, scope: !10604, file: !1618, line: 4009, type: !6573)
!10606 = !DILocation(line: 4009, column: 43, scope: !10604)
!10607 = !DILocation(line: 4012, column: 10, scope: !10604)
!10608 = !DILocation(line: 4012, column: 14, scope: !10604)
!10609 = !DILocation(line: 4012, column: 34, scope: !10604)
!10610 = !DILocation(line: 4012, column: 3, scope: !10604)
!10611 = distinct !DISubprogram(name: "gimple_omp_single_clauses", scope: !1618, file: !1618, line: 3979, type: !6581, scopeLine: 3980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10612 = !DILocalVariable(name: "gs", arg: 1, scope: !10611, file: !1618, line: 3979, type: !6573)
!10613 = !DILocation(line: 3979, column: 41, scope: !10611)
!10614 = !DILocation(line: 3982, column: 10, scope: !10611)
!10615 = !DILocation(line: 3982, column: 14, scope: !10611)
!10616 = !DILocation(line: 3982, column: 32, scope: !10611)
!10617 = !DILocation(line: 3982, column: 3, scope: !10611)
!10618 = distinct !DISubprogram(name: "gimple_omp_critical_name", scope: !1618, file: !1618, line: 3380, type: !6581, scopeLine: 3381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10619 = !DILocalVariable(name: "gs", arg: 1, scope: !10618, file: !1618, line: 3380, type: !6573)
!10620 = !DILocation(line: 3380, column: 40, scope: !10618)
!10621 = !DILocation(line: 3383, column: 10, scope: !10618)
!10622 = !DILocation(line: 3383, column: 14, scope: !10618)
!10623 = !DILocation(line: 3383, column: 34, scope: !10618)
!10624 = !DILocation(line: 3383, column: 3, scope: !10618)
!10625 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !1618, file: !1618, line: 3257, type: !9964, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10626 = !DILocalVariable(name: "s", arg: 1, scope: !10625, file: !1618, line: 3257, type: !6573)
!10627 = !DILocation(line: 3257, column: 35, scope: !10625)
!10628 = !DILocation(line: 3259, column: 24, scope: !10629)
!10629 = distinct !DILexicalBlock(scope: !10625, file: !1618, line: 3259, column: 7)
!10630 = !DILocation(line: 3259, column: 7, scope: !10629)
!10631 = !DILocation(line: 3259, column: 7, scope: !10625)
!10632 = !DILocation(line: 3260, column: 12, scope: !10629)
!10633 = !DILocation(line: 3260, column: 15, scope: !10629)
!10634 = !DILocation(line: 3260, column: 22, scope: !10629)
!10635 = !DILocation(line: 3260, column: 30, scope: !10629)
!10636 = !DILocation(line: 3260, column: 5, scope: !10629)
!10637 = !DILocation(line: 3262, column: 3, scope: !10625)
!10638 = !DILocation(line: 3263, column: 1, scope: !10625)
!10639 = distinct !DISubprogram(name: "gimple_debug_bind_get_var", scope: !1618, file: !1618, line: 3268, type: !10640, scopeLine: 3269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10640 = !DISubroutineType(types: !10641)
!10641 = !{!2586, !2917}
!10642 = !DILocalVariable(name: "dbg", arg: 1, scope: !10639, file: !1618, line: 3268, type: !2917)
!10643 = !DILocation(line: 3268, column: 35, scope: !10639)
!10644 = !DILocation(line: 3274, column: 21, scope: !10639)
!10645 = !DILocation(line: 3274, column: 10, scope: !10639)
!10646 = !DILocation(line: 3274, column: 3, scope: !10639)
!10647 = distinct !DISubprogram(name: "gimple_debug_bind_get_value", scope: !1618, file: !1618, line: 3281, type: !10640, scopeLine: 3282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10648 = !DILocalVariable(name: "dbg", arg: 1, scope: !10647, file: !1618, line: 3281, type: !2917)
!10649 = !DILocation(line: 3281, column: 37, scope: !10647)
!10650 = !DILocation(line: 3287, column: 21, scope: !10647)
!10651 = !DILocation(line: 3287, column: 10, scope: !10647)
!10652 = !DILocation(line: 3287, column: 3, scope: !10647)
!10653 = distinct !DISubprogram(name: "remap_eh_region_tree_nr", scope: !3, file: !3, line: 1165, type: !4330, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10654 = !DILocalVariable(name: "old_t_nr", arg: 1, scope: !10653, file: !3, line: 1165, type: !2586)
!10655 = !DILocation(line: 1165, column: 31, scope: !10653)
!10656 = !DILocalVariable(name: "id", arg: 2, scope: !10653, file: !3, line: 1165, type: !3983)
!10657 = !DILocation(line: 1165, column: 57, scope: !10653)
!10658 = !DILocalVariable(name: "old_nr", scope: !10653, file: !3, line: 1167, type: !2683)
!10659 = !DILocation(line: 1167, column: 7, scope: !10653)
!10660 = !DILocalVariable(name: "new_nr", scope: !10653, file: !3, line: 1167, type: !2683)
!10661 = !DILocation(line: 1167, column: 15, scope: !10653)
!10662 = !DILocation(line: 1169, column: 26, scope: !10653)
!10663 = !DILocation(line: 1169, column: 12, scope: !10653)
!10664 = !DILocation(line: 1169, column: 10, scope: !10653)
!10665 = !DILocation(line: 1170, column: 32, scope: !10653)
!10666 = !DILocation(line: 1170, column: 40, scope: !10653)
!10667 = !DILocation(line: 1170, column: 12, scope: !10653)
!10668 = !DILocation(line: 1170, column: 10, scope: !10653)
!10669 = !DILocation(line: 1172, column: 31, scope: !10653)
!10670 = !DILocation(line: 1172, column: 10, scope: !10653)
!10671 = !DILocation(line: 1172, column: 3, scope: !10653)
!10672 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !1618, file: !1618, line: 2046, type: !10673, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10673 = !DISubroutineType(types: !10674)
!10674 = !{null, !2917, !7, !2586}
!10675 = !DILocalVariable(name: "gs", arg: 1, scope: !10672, file: !1618, line: 2046, type: !2917)
!10676 = !DILocation(line: 2046, column: 29, scope: !10672)
!10677 = !DILocalVariable(name: "index", arg: 2, scope: !10672, file: !1618, line: 2046, type: !7)
!10678 = !DILocation(line: 2046, column: 42, scope: !10672)
!10679 = !DILocalVariable(name: "arg", arg: 3, scope: !10672, file: !1618, line: 2046, type: !2586)
!10680 = !DILocation(line: 2046, column: 54, scope: !10672)
!10681 = !DILocation(line: 2049, column: 18, scope: !10672)
!10682 = !DILocation(line: 2049, column: 22, scope: !10672)
!10683 = !DILocation(line: 2049, column: 28, scope: !10672)
!10684 = !DILocation(line: 2049, column: 33, scope: !10672)
!10685 = !DILocation(line: 2049, column: 3, scope: !10672)
!10686 = !DILocation(line: 2050, column: 1, scope: !10672)
!10687 = distinct !DISubprogram(name: "gimple_resx_region", scope: !1618, file: !1618, line: 3121, type: !10688, scopeLine: 3122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10688 = !DISubroutineType(types: !10689)
!10689 = !{!2683, !6573}
!10690 = !DILocalVariable(name: "gs", arg: 1, scope: !10687, file: !1618, line: 3121, type: !6573)
!10691 = !DILocation(line: 3121, column: 34, scope: !10687)
!10692 = !DILocation(line: 3124, column: 10, scope: !10687)
!10693 = !DILocation(line: 3124, column: 14, scope: !10687)
!10694 = !DILocation(line: 3124, column: 29, scope: !10687)
!10695 = !DILocation(line: 3124, column: 3, scope: !10687)
!10696 = distinct !DISubprogram(name: "remap_eh_region_nr", scope: !3, file: !3, line: 1150, type: !10697, scopeLine: 1151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10697 = !DISubroutineType(types: !10698)
!10698 = !{!2683, !2683, !3983}
!10699 = !DILocalVariable(name: "old_nr", arg: 1, scope: !10696, file: !3, line: 1150, type: !2683)
!10700 = !DILocation(line: 1150, column: 25, scope: !10696)
!10701 = !DILocalVariable(name: "id", arg: 2, scope: !10696, file: !3, line: 1150, type: !3983)
!10702 = !DILocation(line: 1150, column: 49, scope: !10696)
!10703 = !DILocalVariable(name: "old_r", scope: !10696, file: !3, line: 1152, type: !3312)
!10704 = !DILocation(line: 1152, column: 13, scope: !10696)
!10705 = !DILocalVariable(name: "new_r", scope: !10696, file: !3, line: 1152, type: !3312)
!10706 = !DILocation(line: 1152, column: 20, scope: !10696)
!10707 = !DILocalVariable(name: "slot", scope: !10696, file: !3, line: 1153, type: !3412)
!10708 = !DILocation(line: 1153, column: 10, scope: !10696)
!10709 = !DILocation(line: 1155, column: 41, scope: !10696)
!10710 = !DILocation(line: 1155, column: 45, scope: !10696)
!10711 = !DILocation(line: 1155, column: 55, scope: !10696)
!10712 = !DILocation(line: 1155, column: 11, scope: !10696)
!10713 = !DILocation(line: 1155, column: 9, scope: !10696)
!10714 = !DILocation(line: 1156, column: 32, scope: !10696)
!10715 = !DILocation(line: 1156, column: 36, scope: !10696)
!10716 = !DILocation(line: 1156, column: 44, scope: !10696)
!10717 = !DILocation(line: 1156, column: 10, scope: !10696)
!10718 = !DILocation(line: 1156, column: 8, scope: !10696)
!10719 = !DILocation(line: 1157, column: 24, scope: !10696)
!10720 = !DILocation(line: 1157, column: 23, scope: !10696)
!10721 = !DILocation(line: 1157, column: 11, scope: !10696)
!10722 = !DILocation(line: 1157, column: 9, scope: !10696)
!10723 = !DILocation(line: 1159, column: 10, scope: !10696)
!10724 = !DILocation(line: 1159, column: 17, scope: !10696)
!10725 = !DILocation(line: 1159, column: 3, scope: !10696)
!10726 = distinct !DISubprogram(name: "gimple_resx_set_region", scope: !1618, file: !1618, line: 3130, type: !10727, scopeLine: 3131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10727 = !DISubroutineType(types: !10728)
!10728 = !{null, !2917, !2683}
!10729 = !DILocalVariable(name: "gs", arg: 1, scope: !10726, file: !1618, line: 3130, type: !2917)
!10730 = !DILocation(line: 3130, column: 32, scope: !10726)
!10731 = !DILocalVariable(name: "region", arg: 2, scope: !10726, file: !1618, line: 3130, type: !2683)
!10732 = !DILocation(line: 3130, column: 40, scope: !10726)
!10733 = !DILocation(line: 3133, column: 31, scope: !10726)
!10734 = !DILocation(line: 3133, column: 3, scope: !10726)
!10735 = !DILocation(line: 3133, column: 7, scope: !10726)
!10736 = !DILocation(line: 3133, column: 22, scope: !10726)
!10737 = !DILocation(line: 3133, column: 29, scope: !10726)
!10738 = !DILocation(line: 3134, column: 1, scope: !10726)
!10739 = distinct !DISubprogram(name: "gimple_eh_dispatch_region", scope: !1618, file: !1618, line: 3139, type: !10688, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10740 = !DILocalVariable(name: "gs", arg: 1, scope: !10739, file: !1618, line: 3139, type: !6573)
!10741 = !DILocation(line: 3139, column: 41, scope: !10739)
!10742 = !DILocation(line: 3142, column: 10, scope: !10739)
!10743 = !DILocation(line: 3142, column: 14, scope: !10739)
!10744 = !DILocation(line: 3142, column: 29, scope: !10739)
!10745 = !DILocation(line: 3142, column: 3, scope: !10739)
!10746 = distinct !DISubprogram(name: "gimple_eh_dispatch_set_region", scope: !1618, file: !1618, line: 3148, type: !10727, scopeLine: 3149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10747 = !DILocalVariable(name: "gs", arg: 1, scope: !10746, file: !1618, line: 3148, type: !2917)
!10748 = !DILocation(line: 3148, column: 39, scope: !10746)
!10749 = !DILocalVariable(name: "region", arg: 2, scope: !10746, file: !1618, line: 3148, type: !2683)
!10750 = !DILocation(line: 3148, column: 47, scope: !10746)
!10751 = !DILocation(line: 3151, column: 31, scope: !10746)
!10752 = !DILocation(line: 3151, column: 3, scope: !10746)
!10753 = !DILocation(line: 3151, column: 7, scope: !10746)
!10754 = !DILocation(line: 3151, column: 22, scope: !10746)
!10755 = !DILocation(line: 3151, column: 29, scope: !10746)
!10756 = !DILocation(line: 3152, column: 1, scope: !10746)
!10757 = distinct !DISubprogram(name: "gimple_block", scope: !1618, file: !1618, line: 1121, type: !6581, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10758 = !DILocalVariable(name: "g", arg: 1, scope: !10757, file: !1618, line: 1121, type: !6573)
!10759 = !DILocation(line: 1121, column: 28, scope: !10757)
!10760 = !DILocation(line: 1123, column: 10, scope: !10757)
!10761 = !DILocation(line: 1123, column: 13, scope: !10757)
!10762 = !DILocation(line: 1123, column: 20, scope: !10757)
!10763 = !DILocation(line: 1123, column: 3, scope: !10757)
!10764 = distinct !DISubprogram(name: "gimple_set_block", scope: !1618, file: !1618, line: 1130, type: !10765, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10765 = !DISubroutineType(types: !10766)
!10766 = !{null, !2917, !2586}
!10767 = !DILocalVariable(name: "g", arg: 1, scope: !10764, file: !1618, line: 1130, type: !2917)
!10768 = !DILocation(line: 1130, column: 26, scope: !10764)
!10769 = !DILocalVariable(name: "block", arg: 2, scope: !10764, file: !1618, line: 1130, type: !2586)
!10770 = !DILocation(line: 1130, column: 34, scope: !10764)
!10771 = !DILocation(line: 1132, column: 21, scope: !10764)
!10772 = !DILocation(line: 1132, column: 3, scope: !10764)
!10773 = !DILocation(line: 1132, column: 6, scope: !10764)
!10774 = !DILocation(line: 1132, column: 13, scope: !10764)
!10775 = !DILocation(line: 1132, column: 19, scope: !10764)
!10776 = !DILocation(line: 1133, column: 1, scope: !10764)
!10777 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !1618, file: !1618, line: 1647, type: !10778, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10778 = !DISubroutineType(types: !10779)
!10779 = !{!2585, !6573, !7}
!10780 = !DILocalVariable(name: "gs", arg: 1, scope: !10777, file: !1618, line: 1647, type: !6573)
!10781 = !DILocation(line: 1647, column: 29, scope: !10777)
!10782 = !DILocalVariable(name: "i", arg: 2, scope: !10777, file: !1618, line: 1647, type: !7)
!10783 = !DILocation(line: 1647, column: 42, scope: !10777)
!10784 = !DILocation(line: 1649, column: 23, scope: !10785)
!10785 = distinct !DILexicalBlock(scope: !10777, file: !1618, line: 1649, column: 7)
!10786 = !DILocation(line: 1649, column: 7, scope: !10785)
!10787 = !DILocation(line: 1649, column: 7, scope: !10777)
!10788 = !DILocation(line: 1654, column: 26, scope: !10789)
!10789 = distinct !DILexicalBlock(scope: !10785, file: !1618, line: 1650, column: 5)
!10790 = !DILocation(line: 1654, column: 14, scope: !10789)
!10791 = !DILocation(line: 1654, column: 52, scope: !10789)
!10792 = !DILocation(line: 1654, column: 50, scope: !10789)
!10793 = !DILocation(line: 1654, column: 7, scope: !10789)
!10794 = !DILocation(line: 1657, column: 5, scope: !10785)
!10795 = !DILocation(line: 1658, column: 1, scope: !10777)
!10796 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !1618, file: !1618, line: 1283, type: !9964, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10797 = !DILocalVariable(name: "g", arg: 1, scope: !10796, file: !1618, line: 1283, type: !6573)
!10798 = !DILocation(line: 1283, column: 34, scope: !10796)
!10799 = !DILocation(line: 1285, column: 23, scope: !10796)
!10800 = !DILocation(line: 1285, column: 10, scope: !10796)
!10801 = !DILocation(line: 1285, column: 26, scope: !10796)
!10802 = !DILocation(line: 1285, column: 43, scope: !10796)
!10803 = !DILocation(line: 1285, column: 59, scope: !10796)
!10804 = !DILocation(line: 1285, column: 46, scope: !10796)
!10805 = !DILocation(line: 1285, column: 62, scope: !10796)
!10806 = !DILocation(line: 0, scope: !10796)
!10807 = !DILocation(line: 1285, column: 3, scope: !10796)
!10808 = distinct !DISubprogram(name: "gimple_set_vdef", scope: !1618, file: !1618, line: 1414, type: !10765, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10809 = !DILocalVariable(name: "g", arg: 1, scope: !10808, file: !1618, line: 1414, type: !2917)
!10810 = !DILocation(line: 1414, column: 25, scope: !10808)
!10811 = !DILocalVariable(name: "vdef", arg: 2, scope: !10808, file: !1618, line: 1414, type: !2586)
!10812 = !DILocation(line: 1414, column: 33, scope: !10808)
!10813 = !DILocation(line: 1416, column: 3, scope: !10808)
!10814 = !DILocation(line: 1417, column: 23, scope: !10808)
!10815 = !DILocation(line: 1417, column: 3, scope: !10808)
!10816 = !DILocation(line: 1417, column: 6, scope: !10808)
!10817 = !DILocation(line: 1417, column: 16, scope: !10808)
!10818 = !DILocation(line: 1417, column: 21, scope: !10808)
!10819 = !DILocation(line: 1418, column: 1, scope: !10808)
!10820 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !1618, file: !1618, line: 1405, type: !10765, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10821 = !DILocalVariable(name: "g", arg: 1, scope: !10820, file: !1618, line: 1405, type: !2917)
!10822 = !DILocation(line: 1405, column: 25, scope: !10820)
!10823 = !DILocalVariable(name: "vuse", arg: 2, scope: !10820, file: !1618, line: 1405, type: !2586)
!10824 = !DILocation(line: 1405, column: 33, scope: !10820)
!10825 = !DILocation(line: 1407, column: 3, scope: !10820)
!10826 = !DILocation(line: 1408, column: 23, scope: !10820)
!10827 = !DILocation(line: 1408, column: 3, scope: !10820)
!10828 = !DILocation(line: 1408, column: 6, scope: !10820)
!10829 = !DILocation(line: 1408, column: 16, scope: !10820)
!10830 = !DILocation(line: 1408, column: 21, scope: !10820)
!10831 = !DILocation(line: 1409, column: 1, scope: !10820)
!10832 = distinct !DISubprogram(name: "gimple_bind_block", scope: !1618, file: !1618, line: 2559, type: !6581, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10833 = !DILocalVariable(name: "gs", arg: 1, scope: !10832, file: !1618, line: 2559, type: !6573)
!10834 = !DILocation(line: 2559, column: 33, scope: !10832)
!10835 = !DILocation(line: 2562, column: 10, scope: !10832)
!10836 = !DILocation(line: 2562, column: 14, scope: !10832)
!10837 = !DILocation(line: 2562, column: 26, scope: !10832)
!10838 = !DILocation(line: 2562, column: 3, scope: !10832)
!10839 = distinct !DISubprogram(name: "gimple_bind_vars", scope: !1618, file: !1618, line: 2485, type: !6581, scopeLine: 2486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10840 = !DILocalVariable(name: "gs", arg: 1, scope: !10839, file: !1618, line: 2485, type: !6573)
!10841 = !DILocation(line: 2485, column: 32, scope: !10839)
!10842 = !DILocation(line: 2488, column: 10, scope: !10839)
!10843 = !DILocation(line: 2488, column: 14, scope: !10839)
!10844 = !DILocation(line: 2488, column: 26, scope: !10839)
!10845 = !DILocation(line: 2488, column: 3, scope: !10839)
!10846 = distinct !DISubprogram(name: "is_gimple_debug", scope: !1618, file: !1618, line: 3249, type: !9964, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10847 = !DILocalVariable(name: "gs", arg: 1, scope: !10846, file: !1618, line: 3249, type: !6573)
!10848 = !DILocation(line: 3249, column: 31, scope: !10846)
!10849 = !DILocation(line: 3251, column: 23, scope: !10846)
!10850 = !DILocation(line: 3251, column: 10, scope: !10846)
!10851 = !DILocation(line: 3251, column: 27, scope: !10846)
!10852 = !DILocation(line: 3251, column: 3, scope: !10846)
!10853 = distinct !DISubprogram(name: "gimple_set_op", scope: !1618, file: !1618, line: 1663, type: !10673, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10854 = !DILocalVariable(name: "gs", arg: 1, scope: !10853, file: !1618, line: 1663, type: !2917)
!10855 = !DILocation(line: 1663, column: 23, scope: !10853)
!10856 = !DILocalVariable(name: "i", arg: 2, scope: !10853, file: !1618, line: 1663, type: !7)
!10857 = !DILocation(line: 1663, column: 36, scope: !10853)
!10858 = !DILocalVariable(name: "op", arg: 3, scope: !10853, file: !1618, line: 1663, type: !2586)
!10859 = !DILocation(line: 1663, column: 44, scope: !10853)
!10860 = !DILocation(line: 1665, column: 3, scope: !10853)
!10861 = !DILocation(line: 1671, column: 24, scope: !10853)
!10862 = !DILocation(line: 1671, column: 15, scope: !10853)
!10863 = !DILocation(line: 1671, column: 3, scope: !10853)
!10864 = !DILocation(line: 1671, column: 19, scope: !10853)
!10865 = !DILocation(line: 1671, column: 22, scope: !10853)
!10866 = !DILocation(line: 1672, column: 1, scope: !10853)
!10867 = distinct !DISubprogram(name: "gimple_has_ops", scope: !1618, file: !1618, line: 1274, type: !9964, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10868 = !DILocalVariable(name: "g", arg: 1, scope: !10867, file: !1618, line: 1274, type: !6573)
!10869 = !DILocation(line: 1274, column: 30, scope: !10867)
!10870 = !DILocation(line: 1276, column: 23, scope: !10867)
!10871 = !DILocation(line: 1276, column: 10, scope: !10867)
!10872 = !DILocation(line: 1276, column: 26, scope: !10867)
!10873 = !DILocation(line: 1276, column: 41, scope: !10867)
!10874 = !DILocation(line: 1276, column: 57, scope: !10867)
!10875 = !DILocation(line: 1276, column: 44, scope: !10867)
!10876 = !DILocation(line: 1276, column: 60, scope: !10867)
!10877 = !DILocation(line: 0, scope: !10867)
!10878 = !DILocation(line: 1276, column: 3, scope: !10867)
!10879 = distinct !DISubprogram(name: "gimple_num_ops", scope: !1618, file: !1618, line: 1596, type: !6689, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10880 = !DILocalVariable(name: "gs", arg: 1, scope: !10879, file: !1618, line: 1596, type: !6573)
!10881 = !DILocation(line: 1596, column: 30, scope: !10879)
!10882 = !DILocation(line: 1598, column: 10, scope: !10879)
!10883 = !DILocation(line: 1598, column: 14, scope: !10879)
!10884 = !DILocation(line: 1598, column: 21, scope: !10879)
!10885 = !DILocation(line: 1598, column: 3, scope: !10879)
!10886 = distinct !DISubprogram(name: "gimple_ops", scope: !1618, file: !1618, line: 1614, type: !10887, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10887 = !DISubroutineType(types: !10888)
!10888 = !{!2585, !2917}
!10889 = !DILocalVariable(name: "gs", arg: 1, scope: !10886, file: !1618, line: 1614, type: !2917)
!10890 = !DILocation(line: 1614, column: 20, scope: !10886)
!10891 = !DILocalVariable(name: "off", scope: !10886, file: !1618, line: 1616, type: !3061)
!10892 = !DILocation(line: 1616, column: 10, scope: !10886)
!10893 = !DILocation(line: 1621, column: 56, scope: !10886)
!10894 = !DILocation(line: 1621, column: 28, scope: !10886)
!10895 = !DILocation(line: 1621, column: 9, scope: !10886)
!10896 = !DILocation(line: 1621, column: 7, scope: !10886)
!10897 = !DILocation(line: 1622, column: 3, scope: !10886)
!10898 = !DILocation(line: 1624, column: 29, scope: !10886)
!10899 = !DILocation(line: 1624, column: 20, scope: !10886)
!10900 = !DILocation(line: 1624, column: 34, scope: !10886)
!10901 = !DILocation(line: 1624, column: 32, scope: !10886)
!10902 = !DILocation(line: 1624, column: 10, scope: !10886)
!10903 = !DILocation(line: 1624, column: 3, scope: !10886)
!10904 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !1618, file: !1618, line: 1073, type: !10905, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10905 = !DISubroutineType(types: !10906)
!10906 = !{!1731, !2917}
!10907 = !DILocalVariable(name: "gs", arg: 1, scope: !10904, file: !1618, line: 1073, type: !2917)
!10908 = !DILocation(line: 1073, column: 36, scope: !10904)
!10909 = !DILocation(line: 1075, column: 37, scope: !10904)
!10910 = !DILocation(line: 1075, column: 24, scope: !10904)
!10911 = !DILocation(line: 1075, column: 10, scope: !10904)
!10912 = !DILocation(line: 1075, column: 3, scope: !10904)
!10913 = distinct !DISubprogram(name: "gss_for_code", scope: !1618, file: !1618, line: 1061, type: !10914, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10914 = !DISubroutineType(types: !10915)
!10915 = !{!1731, !1617}
!10916 = !DILocalVariable(name: "code", arg: 1, scope: !10913, file: !1618, line: 1061, type: !1617)
!10917 = !DILocation(line: 1061, column: 32, scope: !10913)
!10918 = !DILocation(line: 1066, column: 24, scope: !10913)
!10919 = !DILocation(line: 1066, column: 10, scope: !10913)
!10920 = !DILocation(line: 1066, column: 3, scope: !10913)
!10921 = distinct !DISubprogram(name: "inline_forbidden_p_stmt", scope: !3, file: !3, line: 2787, type: !7682, scopeLine: 2789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!10922 = !DILocalVariable(name: "gsi", arg: 1, scope: !10921, file: !3, line: 2787, type: !5698)
!10923 = !DILocation(line: 2787, column: 48, scope: !10921)
!10924 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !10921, file: !3, line: 2787, type: !7684)
!10925 = !DILocation(line: 2787, column: 59, scope: !10921)
!10926 = !DILocalVariable(name: "wip", arg: 3, scope: !10921, file: !3, line: 2788, type: !4257)
!10927 = !DILocation(line: 2788, column: 28, scope: !10921)
!10928 = !DILocalVariable(name: "fn", scope: !10921, file: !3, line: 2790, type: !2586)
!10929 = !DILocation(line: 2790, column: 8, scope: !10921)
!10930 = !DILocation(line: 2790, column: 20, scope: !10921)
!10931 = !DILocation(line: 2790, column: 25, scope: !10921)
!10932 = !DILocation(line: 2790, column: 13, scope: !10921)
!10933 = !DILocalVariable(name: "t", scope: !10921, file: !3, line: 2791, type: !2586)
!10934 = !DILocation(line: 2791, column: 8, scope: !10921)
!10935 = !DILocalVariable(name: "stmt", scope: !10921, file: !3, line: 2792, type: !2917)
!10936 = !DILocation(line: 2792, column: 10, scope: !10921)
!10937 = !DILocation(line: 2792, column: 28, scope: !10921)
!10938 = !DILocation(line: 2792, column: 17, scope: !10921)
!10939 = !DILocation(line: 2794, column: 24, scope: !10921)
!10940 = !DILocation(line: 2794, column: 11, scope: !10921)
!10941 = !DILocation(line: 2794, column: 3, scope: !10921)
!10942 = !DILocation(line: 2802, column: 33, scope: !10943)
!10943 = distinct !DILexicalBlock(scope: !10944, file: !3, line: 2802, column: 11)
!10944 = distinct !DILexicalBlock(scope: !10921, file: !3, line: 2795, column: 5)
!10945 = !DILocation(line: 2802, column: 11, scope: !10943)
!10946 = !DILocation(line: 2803, column: 4, scope: !10943)
!10947 = !DILocation(line: 2803, column: 43, scope: !10943)
!10948 = !DILocation(line: 2803, column: 8, scope: !10943)
!10949 = !DILocation(line: 2802, column: 11, scope: !10944)
!10950 = !DILocation(line: 2806, column: 6, scope: !10951)
!10951 = distinct !DILexicalBlock(scope: !10943, file: !3, line: 2804, column: 2)
!10952 = !DILocation(line: 2808, column: 5, scope: !10951)
!10953 = !DILocation(line: 2808, column: 19, scope: !10951)
!10954 = !DILocation(line: 2809, column: 11, scope: !10951)
!10955 = !DILocation(line: 2809, column: 4, scope: !10951)
!10956 = !DILocation(line: 2812, column: 31, scope: !10944)
!10957 = !DILocation(line: 2812, column: 11, scope: !10944)
!10958 = !DILocation(line: 2812, column: 9, scope: !10944)
!10959 = !DILocation(line: 2813, column: 11, scope: !10960)
!10960 = distinct !DILexicalBlock(scope: !10944, file: !3, line: 2813, column: 11)
!10961 = !DILocation(line: 2813, column: 13, scope: !10960)
!10962 = !DILocation(line: 2813, column: 11, scope: !10944)
!10963 = !DILocation(line: 2814, column: 2, scope: !10960)
!10964 = !DILocation(line: 2817, column: 26, scope: !10965)
!10965 = distinct !DILexicalBlock(scope: !10944, file: !3, line: 2817, column: 11)
!10966 = !DILocation(line: 2817, column: 11, scope: !10965)
!10967 = !DILocation(line: 2817, column: 11, scope: !10944)
!10968 = !DILocation(line: 2820, column: 6, scope: !10969)
!10969 = distinct !DILexicalBlock(scope: !10965, file: !3, line: 2818, column: 2)
!10970 = !DILocation(line: 2821, column: 5, scope: !10969)
!10971 = !DILocation(line: 2821, column: 19, scope: !10969)
!10972 = !DILocation(line: 2822, column: 11, scope: !10969)
!10973 = !DILocation(line: 2822, column: 4, scope: !10969)
!10974 = !DILocation(line: 2825, column: 11, scope: !10975)
!10975 = distinct !DILexicalBlock(scope: !10944, file: !3, line: 2825, column: 11)
!10976 = !DILocation(line: 2825, column: 35, scope: !10975)
!10977 = !DILocation(line: 2825, column: 11, scope: !10944)
!10978 = !DILocation(line: 2826, column: 10, scope: !10975)
!10979 = !DILocation(line: 2826, column: 2, scope: !10975)
!10980 = !DILocation(line: 2834, column: 8, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10975, file: !3, line: 2827, column: 4)
!10982 = !DILocation(line: 2836, column: 7, scope: !10981)
!10983 = !DILocation(line: 2836, column: 21, scope: !10981)
!10984 = !DILocation(line: 2837, column: 13, scope: !10981)
!10985 = !DILocation(line: 2837, column: 6, scope: !10981)
!10986 = !DILocation(line: 2846, column: 8, scope: !10981)
!10987 = !DILocation(line: 2848, column: 7, scope: !10981)
!10988 = !DILocation(line: 2848, column: 21, scope: !10981)
!10989 = !DILocation(line: 2849, column: 13, scope: !10981)
!10990 = !DILocation(line: 2849, column: 6, scope: !10981)
!10991 = !DILocation(line: 2854, column: 8, scope: !10981)
!10992 = !DILocation(line: 2856, column: 7, scope: !10981)
!10993 = !DILocation(line: 2856, column: 21, scope: !10981)
!10994 = !DILocation(line: 2857, column: 13, scope: !10981)
!10995 = !DILocation(line: 2857, column: 6, scope: !10981)
!10996 = !DILocation(line: 2866, column: 8, scope: !10981)
!10997 = !DILocation(line: 2868, column: 7, scope: !10981)
!10998 = !DILocation(line: 2868, column: 21, scope: !10981)
!10999 = !DILocation(line: 2869, column: 13, scope: !10981)
!11000 = !DILocation(line: 2869, column: 6, scope: !10981)
!11001 = !DILocation(line: 2872, column: 6, scope: !10981)
!11002 = !DILocation(line: 2873, column: 4, scope: !10981)
!11003 = !DILocation(line: 2874, column: 7, scope: !10944)
!11004 = !DILocation(line: 2877, column: 29, scope: !10944)
!11005 = !DILocation(line: 2877, column: 11, scope: !10944)
!11006 = !DILocation(line: 2877, column: 9, scope: !10944)
!11007 = !DILocation(line: 2883, column: 11, scope: !11008)
!11008 = distinct !DILexicalBlock(scope: !10944, file: !3, line: 2883, column: 11)
!11009 = !DILocation(line: 2883, column: 25, scope: !11008)
!11010 = !DILocation(line: 2883, column: 11, scope: !10944)
!11011 = !DILocation(line: 2886, column: 6, scope: !11012)
!11012 = distinct !DILexicalBlock(scope: !11008, file: !3, line: 2884, column: 2)
!11013 = !DILocation(line: 2888, column: 5, scope: !11012)
!11014 = !DILocation(line: 2888, column: 19, scope: !11012)
!11015 = !DILocation(line: 2889, column: 11, scope: !11012)
!11016 = !DILocation(line: 2889, column: 4, scope: !11012)
!11017 = !DILocation(line: 2891, column: 7, scope: !10944)
!11018 = !DILocation(line: 2894, column: 7, scope: !10944)
!11019 = !DILocation(line: 2897, column: 4, scope: !10921)
!11020 = !DILocation(line: 2897, column: 18, scope: !10921)
!11021 = !DILocation(line: 2898, column: 3, scope: !10921)
!11022 = !DILocation(line: 2899, column: 1, scope: !10921)
!11023 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !1618, file: !1618, line: 2465, type: !6581, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11024 = !DILocalVariable(name: "gs", arg: 1, scope: !11023, file: !1618, line: 2465, type: !6573)
!11025 = !DILocation(line: 2465, column: 32, scope: !11023)
!11026 = !DILocation(line: 2468, column: 21, scope: !11023)
!11027 = !DILocation(line: 2468, column: 10, scope: !11023)
!11028 = !DILocation(line: 2468, column: 3, scope: !11023)
!11029 = distinct !DISubprogram(name: "gimple_expr_code", scope: !1618, file: !1618, line: 1438, type: !6622, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11030 = !DILocalVariable(name: "stmt", arg: 1, scope: !11029, file: !1618, line: 1438, type: !6573)
!11031 = !DILocation(line: 1438, column: 32, scope: !11029)
!11032 = !DILocalVariable(name: "code", scope: !11029, file: !1618, line: 1440, type: !1617)
!11033 = !DILocation(line: 1440, column: 20, scope: !11029)
!11034 = !DILocation(line: 1440, column: 40, scope: !11029)
!11035 = !DILocation(line: 1440, column: 27, scope: !11029)
!11036 = !DILocation(line: 1441, column: 7, scope: !11037)
!11037 = distinct !DILexicalBlock(scope: !11029, file: !1618, line: 1441, column: 7)
!11038 = !DILocation(line: 1441, column: 12, scope: !11037)
!11039 = !DILocation(line: 1441, column: 29, scope: !11037)
!11040 = !DILocation(line: 1441, column: 32, scope: !11037)
!11041 = !DILocation(line: 1441, column: 37, scope: !11037)
!11042 = !DILocation(line: 1441, column: 7, scope: !11029)
!11043 = !DILocation(line: 1442, column: 29, scope: !11037)
!11044 = !DILocation(line: 1442, column: 35, scope: !11037)
!11045 = !DILocation(line: 1442, column: 42, scope: !11037)
!11046 = !DILocation(line: 1442, column: 5, scope: !11037)
!11047 = !DILocation(line: 1443, column: 12, scope: !11048)
!11048 = distinct !DILexicalBlock(scope: !11037, file: !1618, line: 1443, column: 12)
!11049 = !DILocation(line: 1443, column: 17, scope: !11048)
!11050 = !DILocation(line: 1443, column: 12, scope: !11037)
!11051 = !DILocation(line: 1444, column: 5, scope: !11048)
!11052 = !DILocation(line: 1446, column: 5, scope: !11048)
!11053 = !DILocation(line: 1448, column: 5, scope: !11029)
!11054 = !DILocation(line: 1450, column: 1, scope: !11029)
!11055 = distinct !DISubprogram(name: "is_gimple_call", scope: !1618, file: !1618, line: 1870, type: !9964, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11056 = !DILocalVariable(name: "gs", arg: 1, scope: !11055, file: !1618, line: 1870, type: !6573)
!11057 = !DILocation(line: 1870, column: 30, scope: !11055)
!11058 = !DILocation(line: 1872, column: 23, scope: !11055)
!11059 = !DILocation(line: 1872, column: 10, scope: !11055)
!11060 = !DILocation(line: 1872, column: 27, scope: !11055)
!11061 = !DILocation(line: 1872, column: 3, scope: !11055)
!11062 = distinct !DISubprogram(name: "expand_call_inline", scope: !3, file: !3, line: 3470, type: !11063, scopeLine: 3471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11063 = !DISubroutineType(types: !11064)
!11064 = !{!2706, !3473, !2917, !3983}
!11065 = !DILocalVariable(name: "bb", arg: 1, scope: !11062, file: !3, line: 3470, type: !3473)
!11066 = !DILocation(line: 3470, column: 33, scope: !11062)
!11067 = !DILocalVariable(name: "stmt", arg: 2, scope: !11062, file: !3, line: 3470, type: !2917)
!11068 = !DILocation(line: 3470, column: 44, scope: !11062)
!11069 = !DILocalVariable(name: "id", arg: 3, scope: !11062, file: !3, line: 3470, type: !3983)
!11070 = !DILocation(line: 3470, column: 66, scope: !11062)
!11071 = !DILocalVariable(name: "use_retvar", scope: !11062, file: !3, line: 3472, type: !2586)
!11072 = !DILocation(line: 3472, column: 8, scope: !11062)
!11073 = !DILocalVariable(name: "fn", scope: !11062, file: !3, line: 3473, type: !2586)
!11074 = !DILocation(line: 3473, column: 8, scope: !11062)
!11075 = !DILocalVariable(name: "st", scope: !11062, file: !3, line: 3474, type: !3534)
!11076 = !DILocation(line: 3474, column: 25, scope: !11062)
!11077 = !DILocalVariable(name: "dst", scope: !11062, file: !3, line: 3474, type: !3534)
!11078 = !DILocation(line: 3474, column: 30, scope: !11062)
!11079 = !DILocalVariable(name: "return_slot", scope: !11062, file: !3, line: 3475, type: !2586)
!11080 = !DILocation(line: 3475, column: 8, scope: !11062)
!11081 = !DILocalVariable(name: "modify_dest", scope: !11062, file: !3, line: 3476, type: !2586)
!11082 = !DILocation(line: 3476, column: 8, scope: !11062)
!11083 = !DILocalVariable(name: "saved_location", scope: !11062, file: !3, line: 3477, type: !2714)
!11084 = !DILocation(line: 3477, column: 14, scope: !11062)
!11085 = !DILocalVariable(name: "cg_edge", scope: !11062, file: !3, line: 3478, type: !3995)
!11086 = !DILocation(line: 3478, column: 23, scope: !11062)
!11087 = !DILocalVariable(name: "reason", scope: !11062, file: !3, line: 3479, type: !4008)
!11088 = !DILocation(line: 3479, column: 26, scope: !11062)
!11089 = !DILocalVariable(name: "return_block", scope: !11062, file: !3, line: 3480, type: !3473)
!11090 = !DILocation(line: 3480, column: 15, scope: !11062)
!11091 = !DILocalVariable(name: "e", scope: !11062, file: !3, line: 3481, type: !2897)
!11092 = !DILocation(line: 3481, column: 8, scope: !11062)
!11093 = !DILocalVariable(name: "gsi", scope: !11062, file: !3, line: 3482, type: !4261)
!11094 = !DILocation(line: 3482, column: 24, scope: !11062)
!11095 = !DILocalVariable(name: "stmt_gsi", scope: !11062, file: !3, line: 3482, type: !4261)
!11096 = !DILocation(line: 3482, column: 29, scope: !11062)
!11097 = !DILocalVariable(name: "successfully_inlined", scope: !11062, file: !3, line: 3483, type: !2706)
!11098 = !DILocation(line: 3483, column: 8, scope: !11062)
!11099 = !DILocalVariable(name: "purge_dead_abnormal_edges", scope: !11062, file: !3, line: 3484, type: !2706)
!11100 = !DILocation(line: 3484, column: 8, scope: !11062)
!11101 = !DILocalVariable(name: "t_step", scope: !11062, file: !3, line: 3485, type: !2586)
!11102 = !DILocation(line: 3485, column: 8, scope: !11062)
!11103 = !DILocalVariable(name: "var", scope: !11062, file: !3, line: 3486, type: !2586)
!11104 = !DILocation(line: 3486, column: 8, scope: !11062)
!11105 = !DILocation(line: 3490, column: 20, scope: !11062)
!11106 = !DILocation(line: 3490, column: 18, scope: !11062)
!11107 = !DILocation(line: 3491, column: 28, scope: !11108)
!11108 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3491, column: 7)
!11109 = !DILocation(line: 3491, column: 7, scope: !11108)
!11110 = !DILocation(line: 3491, column: 7, scope: !11062)
!11111 = !DILocation(line: 3492, column: 39, scope: !11108)
!11112 = !DILocation(line: 3492, column: 22, scope: !11108)
!11113 = !DILocation(line: 3492, column: 20, scope: !11108)
!11114 = !DILocation(line: 3492, column: 5, scope: !11108)
!11115 = !DILocation(line: 3495, column: 20, scope: !11116)
!11116 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3495, column: 7)
!11117 = !DILocation(line: 3495, column: 7, scope: !11116)
!11118 = !DILocation(line: 3495, column: 26, scope: !11116)
!11119 = !DILocation(line: 3495, column: 7, scope: !11062)
!11120 = !DILocation(line: 3496, column: 5, scope: !11116)
!11121 = !DILocation(line: 3500, column: 28, scope: !11062)
!11122 = !DILocation(line: 3500, column: 8, scope: !11062)
!11123 = !DILocation(line: 3500, column: 6, scope: !11062)
!11124 = !DILocation(line: 3501, column: 8, scope: !11125)
!11125 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3501, column: 7)
!11126 = !DILocation(line: 3501, column: 7, scope: !11062)
!11127 = !DILocation(line: 3503, column: 40, scope: !11128)
!11128 = distinct !DILexicalBlock(scope: !11125, file: !3, line: 3502, column: 5)
!11129 = !DILocation(line: 3503, column: 44, scope: !11128)
!11130 = !DILocation(line: 3503, column: 54, scope: !11128)
!11131 = !DILocation(line: 3503, column: 12, scope: !11128)
!11132 = !DILocation(line: 3503, column: 10, scope: !11128)
!11133 = !DILocation(line: 3504, column: 12, scope: !11134)
!11134 = distinct !DILexicalBlock(scope: !11128, file: !3, line: 3504, column: 11)
!11135 = !DILocation(line: 3504, column: 11, scope: !11128)
!11136 = !DILocation(line: 3505, column: 2, scope: !11134)
!11137 = !DILocation(line: 3506, column: 5, scope: !11128)
!11138 = !DILocation(line: 3509, column: 21, scope: !11062)
!11139 = !DILocation(line: 3509, column: 8, scope: !11062)
!11140 = !DILocation(line: 3509, column: 26, scope: !11062)
!11141 = !DILocation(line: 3509, column: 6, scope: !11062)
!11142 = !DILocation(line: 3518, column: 8, scope: !11143)
!11143 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3518, column: 7)
!11144 = !DILocation(line: 3519, column: 7, scope: !11143)
!11145 = !DILocation(line: 3519, column: 10, scope: !11143)
!11146 = !DILocation(line: 3520, column: 7, scope: !11143)
!11147 = !DILocation(line: 3520, column: 29, scope: !11143)
!11148 = !DILocation(line: 3520, column: 10, scope: !11143)
!11149 = !DILocation(line: 3518, column: 7, scope: !11062)
!11150 = !DILocation(line: 3521, column: 10, scope: !11143)
!11151 = !DILocation(line: 3521, column: 8, scope: !11143)
!11152 = !DILocation(line: 3521, column: 5, scope: !11143)
!11153 = !DILocation(line: 3525, column: 8, scope: !11154)
!11154 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3525, column: 7)
!11155 = !DILocation(line: 3525, column: 12, scope: !11154)
!11156 = !DILocation(line: 3525, column: 22, scope: !11154)
!11157 = !DILocation(line: 3525, column: 7, scope: !11062)
!11158 = !DILocation(line: 3526, column: 5, scope: !11154)
!11159 = !DILocation(line: 3528, column: 26, scope: !11062)
!11160 = !DILocation(line: 3528, column: 30, scope: !11062)
!11161 = !DILocation(line: 3528, column: 40, scope: !11062)
!11162 = !DILocation(line: 3528, column: 13, scope: !11062)
!11163 = !DILocation(line: 3528, column: 11, scope: !11062)
!11164 = !DILocation(line: 3531, column: 7, scope: !11165)
!11165 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3531, column: 7)
!11166 = !DILocation(line: 3532, column: 7, scope: !11165)
!11167 = !DILocation(line: 3532, column: 10, scope: !11165)
!11168 = !DILocation(line: 3533, column: 7, scope: !11165)
!11169 = !DILocation(line: 3533, column: 11, scope: !11165)
!11170 = !DILocation(line: 3534, column: 7, scope: !11165)
!11171 = !DILocation(line: 3534, column: 4, scope: !11165)
!11172 = !DILocation(line: 3531, column: 7, scope: !11062)
!11173 = !DILocation(line: 3535, column: 5, scope: !11165)
!11174 = !DILocation(line: 3539, column: 25, scope: !11175)
!11175 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3539, column: 7)
!11176 = !DILocation(line: 3539, column: 8, scope: !11175)
!11177 = !DILocation(line: 3539, column: 7, scope: !11062)
!11178 = !DILocation(line: 3544, column: 11, scope: !11179)
!11179 = distinct !DILexicalBlock(scope: !11180, file: !3, line: 3544, column: 11)
!11180 = distinct !DILexicalBlock(scope: !11175, file: !3, line: 3540, column: 5)
!11181 = !DILocation(line: 3544, column: 20, scope: !11179)
!11182 = !DILocation(line: 3544, column: 11, scope: !11180)
!11183 = !DILocation(line: 3545, column: 2, scope: !11179)
!11184 = !DILocation(line: 3547, column: 46, scope: !11185)
!11185 = distinct !DILexicalBlock(scope: !11180, file: !3, line: 3547, column: 11)
!11186 = !DILocation(line: 3547, column: 11, scope: !11185)
!11187 = !DILocation(line: 3549, column: 4, scope: !11185)
!11188 = !DILocation(line: 3549, column: 7, scope: !11185)
!11189 = !DILocation(line: 3547, column: 11, scope: !11180)
!11190 = !DILocation(line: 3551, column: 50, scope: !11191)
!11191 = distinct !DILexicalBlock(scope: !11185, file: !3, line: 3550, column: 2)
!11192 = !DILocation(line: 3552, column: 33, scope: !11191)
!11193 = !DILocation(line: 3552, column: 4, scope: !11191)
!11194 = !DILocation(line: 3551, column: 4, scope: !11191)
!11195 = !DILocation(line: 3553, column: 4, scope: !11191)
!11196 = !DILocation(line: 3554, column: 2, scope: !11191)
!11197 = !DILocation(line: 3555, column: 16, scope: !11198)
!11198 = distinct !DILexicalBlock(scope: !11185, file: !3, line: 3555, column: 16)
!11199 = !DILocation(line: 3555, column: 28, scope: !11198)
!11200 = !DILocation(line: 3555, column: 31, scope: !11198)
!11201 = !DILocation(line: 3556, column: 9, scope: !11198)
!11202 = !DILocation(line: 3556, column: 13, scope: !11198)
!11203 = !DILocation(line: 3557, column: 9, scope: !11198)
!11204 = !DILocation(line: 3557, column: 12, scope: !11198)
!11205 = !DILocation(line: 3557, column: 19, scope: !11198)
!11206 = !DILocation(line: 3558, column: 9, scope: !11198)
!11207 = !DILocation(line: 3558, column: 43, scope: !11198)
!11208 = !DILocation(line: 3558, column: 13, scope: !11198)
!11209 = !DILocation(line: 3560, column: 9, scope: !11198)
!11210 = !DILocation(line: 3560, column: 12, scope: !11198)
!11211 = !DILocation(line: 3555, column: 16, scope: !11185)
!11212 = !DILocation(line: 3563, column: 6, scope: !11213)
!11213 = distinct !DILexicalBlock(scope: !11198, file: !3, line: 3561, column: 2)
!11214 = !DILocation(line: 3563, column: 39, scope: !11213)
!11215 = !DILocation(line: 3563, column: 10, scope: !11213)
!11216 = !DILocation(line: 3562, column: 4, scope: !11213)
!11217 = !DILocation(line: 3564, column: 4, scope: !11213)
!11218 = !DILocation(line: 3565, column: 2, scope: !11213)
!11219 = !DILocation(line: 3566, column: 7, scope: !11180)
!11220 = !DILocation(line: 3568, column: 8, scope: !11062)
!11221 = !DILocation(line: 3568, column: 17, scope: !11062)
!11222 = !DILocation(line: 3568, column: 25, scope: !11062)
!11223 = !DILocation(line: 3568, column: 6, scope: !11062)
!11224 = !DILocation(line: 3576, column: 37, scope: !11062)
!11225 = !DILocation(line: 3576, column: 18, scope: !11062)
!11226 = !DILocation(line: 3576, column: 3, scope: !11062)
!11227 = !DILocation(line: 3576, column: 7, scope: !11062)
!11228 = !DILocation(line: 3576, column: 16, scope: !11062)
!11229 = !DILocation(line: 3579, column: 7, scope: !11230)
!11230 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3579, column: 7)
!11231 = !DILocation(line: 3579, column: 7, scope: !11062)
!11232 = !DILocation(line: 3581, column: 9, scope: !11230)
!11233 = !DILocation(line: 3580, column: 5, scope: !11230)
!11234 = !DILocation(line: 3581, column: 7, scope: !11230)
!11235 = !DILocation(line: 3584, column: 20, scope: !11062)
!11236 = !DILocation(line: 3584, column: 24, scope: !11062)
!11237 = !DILocation(line: 3584, column: 7, scope: !11062)
!11238 = !DILocation(line: 3584, column: 5, scope: !11062)
!11239 = !DILocation(line: 3585, column: 8, scope: !11062)
!11240 = !DILocation(line: 3585, column: 11, scope: !11062)
!11241 = !DILocation(line: 3585, column: 6, scope: !11062)
!11242 = !DILocation(line: 3586, column: 18, scope: !11062)
!11243 = !DILocation(line: 3586, column: 21, scope: !11062)
!11244 = !DILocation(line: 3586, column: 16, scope: !11062)
!11245 = !DILocation(line: 3587, column: 16, scope: !11062)
!11246 = !DILocation(line: 3587, column: 3, scope: !11062)
!11247 = !DILocation(line: 3593, column: 27, scope: !11062)
!11248 = !DILocation(line: 3593, column: 14, scope: !11062)
!11249 = !DILocation(line: 3594, column: 3, scope: !11062)
!11250 = !DILocation(line: 3599, column: 23, scope: !11062)
!11251 = !DILocation(line: 3599, column: 9, scope: !11062)
!11252 = !DILocation(line: 3600, column: 7, scope: !11253)
!11253 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3600, column: 7)
!11254 = !DILocation(line: 3600, column: 7, scope: !11062)
!11255 = !DILocation(line: 3602, column: 31, scope: !11256)
!11256 = distinct !DILexicalBlock(scope: !11253, file: !3, line: 3601, column: 5)
!11257 = !DILocation(line: 3602, column: 7, scope: !11256)
!11258 = !DILocation(line: 3603, column: 33, scope: !11256)
!11259 = !DILocation(line: 3604, column: 5, scope: !11256)
!11260 = !DILocation(line: 3607, column: 32, scope: !11261)
!11261 = distinct !DILexicalBlock(scope: !11253, file: !3, line: 3606, column: 5)
!11262 = !DILocation(line: 3607, column: 7, scope: !11261)
!11263 = !DILocation(line: 3608, column: 33, scope: !11261)
!11264 = !DILocation(line: 3611, column: 28, scope: !11062)
!11265 = !DILocation(line: 3611, column: 14, scope: !11062)
!11266 = !DILocation(line: 3617, column: 15, scope: !11062)
!11267 = !DILocation(line: 3617, column: 3, scope: !11062)
!11268 = !DILocation(line: 3617, column: 7, scope: !11062)
!11269 = !DILocation(line: 3617, column: 13, scope: !11062)
!11270 = !DILocation(line: 3618, column: 39, scope: !11062)
!11271 = !DILocation(line: 3618, column: 3, scope: !11062)
!11272 = !DILocation(line: 3618, column: 37, scope: !11062)
!11273 = !DILocation(line: 3619, column: 39, scope: !11062)
!11274 = !DILocation(line: 3619, column: 3, scope: !11062)
!11275 = !DILocation(line: 3619, column: 37, scope: !11062)
!11276 = !DILocation(line: 3620, column: 40, scope: !11062)
!11277 = !DILocation(line: 3620, column: 26, scope: !11062)
!11278 = !DILocation(line: 3620, column: 47, scope: !11062)
!11279 = !DILocation(line: 3620, column: 51, scope: !11062)
!11280 = !DILocation(line: 3620, column: 3, scope: !11062)
!11281 = !DILocation(line: 3624, column: 8, scope: !11062)
!11282 = !DILocation(line: 3624, column: 12, scope: !11062)
!11283 = !DILocation(line: 3624, column: 6, scope: !11062)
!11284 = !DILocation(line: 3625, column: 18, scope: !11062)
!11285 = !DILocation(line: 3625, column: 3, scope: !11062)
!11286 = !DILocation(line: 3625, column: 7, scope: !11062)
!11287 = !DILocation(line: 3625, column: 16, scope: !11062)
!11288 = !DILocation(line: 3626, column: 9, scope: !11062)
!11289 = !DILocation(line: 3626, column: 13, scope: !11062)
!11290 = !DILocation(line: 3626, column: 7, scope: !11062)
!11291 = !DILocation(line: 3627, column: 3, scope: !11062)
!11292 = !DILocation(line: 3627, column: 7, scope: !11062)
!11293 = !DILocation(line: 3627, column: 17, scope: !11062)
!11294 = !DILocation(line: 3630, column: 16, scope: !11062)
!11295 = !DILocation(line: 3630, column: 3, scope: !11062)
!11296 = !DILocation(line: 3630, column: 7, scope: !11062)
!11297 = !DILocation(line: 3630, column: 14, scope: !11062)
!11298 = !DILocation(line: 3631, column: 18, scope: !11062)
!11299 = !DILocation(line: 3631, column: 27, scope: !11062)
!11300 = !DILocation(line: 3631, column: 3, scope: !11062)
!11301 = !DILocation(line: 3631, column: 7, scope: !11062)
!11302 = !DILocation(line: 3631, column: 16, scope: !11062)
!11303 = !DILocation(line: 3632, column: 18, scope: !11062)
!11304 = !DILocation(line: 3632, column: 3, scope: !11062)
!11305 = !DILocation(line: 3632, column: 7, scope: !11062)
!11306 = !DILocation(line: 3632, column: 16, scope: !11062)
!11307 = !DILocation(line: 3633, column: 21, scope: !11062)
!11308 = !DILocation(line: 3633, column: 3, scope: !11062)
!11309 = !DILocation(line: 3633, column: 7, scope: !11062)
!11310 = !DILocation(line: 3633, column: 19, scope: !11062)
!11311 = !DILocation(line: 3635, column: 3, scope: !11062)
!11312 = !DILocation(line: 3637, column: 18, scope: !11062)
!11313 = !DILocation(line: 3637, column: 3, scope: !11062)
!11314 = !DILocation(line: 3637, column: 7, scope: !11062)
!11315 = !DILocation(line: 3637, column: 16, scope: !11062)
!11316 = !DILocation(line: 3638, column: 33, scope: !11317)
!11317 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3638, column: 7)
!11318 = !DILocation(line: 3638, column: 7, scope: !11317)
!11319 = !DILocation(line: 3638, column: 7, scope: !11062)
!11320 = !DILocalVariable(name: "si", scope: !11321, file: !3, line: 3640, type: !4261)
!11321 = distinct !DILexicalBlock(scope: !11317, file: !3, line: 3639, column: 5)
!11322 = !DILocation(line: 3640, column: 28, scope: !11321)
!11323 = !DILocation(line: 3640, column: 46, scope: !11321)
!11324 = !DILocation(line: 3640, column: 33, scope: !11321)
!11325 = !DILocation(line: 3641, column: 30, scope: !11321)
!11326 = !DILocation(line: 3641, column: 7, scope: !11321)
!11327 = !DILocation(line: 3644, column: 5, scope: !11321)
!11328 = !DILocation(line: 3645, column: 34, scope: !11062)
!11329 = !DILocation(line: 3645, column: 38, scope: !11062)
!11330 = !DILocation(line: 3645, column: 44, scope: !11062)
!11331 = !DILocation(line: 3645, column: 48, scope: !11062)
!11332 = !DILocation(line: 3645, column: 3, scope: !11062)
!11333 = !DILocation(line: 3647, column: 7, scope: !11334)
!11334 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3647, column: 7)
!11335 = !DILocation(line: 3647, column: 7, scope: !11062)
!11336 = !DILocation(line: 3648, column: 28, scope: !11334)
!11337 = !DILocation(line: 3648, column: 32, scope: !11334)
!11338 = !DILocation(line: 3648, column: 53, scope: !11334)
!11339 = !DILocation(line: 3648, column: 72, scope: !11334)
!11340 = !DILocation(line: 3648, column: 39, scope: !11334)
!11341 = !DILocation(line: 3648, column: 5, scope: !11334)
!11342 = !DILocation(line: 3652, column: 3, scope: !11062)
!11343 = !DILocation(line: 3653, column: 3, scope: !11062)
!11344 = !DILocation(line: 3656, column: 15, scope: !11062)
!11345 = !DILocation(line: 3657, column: 24, scope: !11346)
!11346 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3657, column: 7)
!11347 = !DILocation(line: 3657, column: 7, scope: !11346)
!11348 = !DILocation(line: 3657, column: 7, scope: !11062)
!11349 = !DILocation(line: 3659, column: 38, scope: !11350)
!11350 = distinct !DILexicalBlock(scope: !11346, file: !3, line: 3658, column: 5)
!11351 = !DILocation(line: 3659, column: 21, scope: !11350)
!11352 = !DILocation(line: 3659, column: 19, scope: !11350)
!11353 = !DILocation(line: 3667, column: 11, scope: !11354)
!11354 = distinct !DILexicalBlock(scope: !11350, file: !3, line: 3667, column: 11)
!11355 = !DILocation(line: 3667, column: 11, scope: !11350)
!11356 = !DILocation(line: 3668, column: 2, scope: !11354)
!11357 = !DILocation(line: 3668, column: 32, scope: !11354)
!11358 = !DILocation(line: 3670, column: 42, scope: !11359)
!11359 = distinct !DILexicalBlock(scope: !11350, file: !3, line: 3670, column: 11)
!11360 = !DILocation(line: 3670, column: 11, scope: !11359)
!11361 = !DILocation(line: 3670, column: 11, scope: !11350)
!11362 = !DILocation(line: 3672, column: 18, scope: !11363)
!11363 = distinct !DILexicalBlock(scope: !11359, file: !3, line: 3671, column: 2)
!11364 = !DILocation(line: 3672, column: 16, scope: !11363)
!11365 = !DILocation(line: 3673, column: 16, scope: !11363)
!11366 = !DILocation(line: 3674, column: 2, scope: !11363)
!11367 = !DILocation(line: 3675, column: 5, scope: !11350)
!11368 = !DILocation(line: 3677, column: 17, scope: !11346)
!11369 = !DILocation(line: 3684, column: 7, scope: !11370)
!11370 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3684, column: 7)
!11371 = !DILocation(line: 3684, column: 7, scope: !11062)
!11372 = !DILocation(line: 3686, column: 19, scope: !11373)
!11373 = distinct !DILexicalBlock(scope: !11370, file: !3, line: 3685, column: 5)
!11374 = !DILocation(line: 3687, column: 19, scope: !11373)
!11375 = !DILocation(line: 3688, column: 5, scope: !11373)
!11376 = !DILocation(line: 3691, column: 41, scope: !11062)
!11377 = !DILocation(line: 3691, column: 45, scope: !11062)
!11378 = !DILocation(line: 3691, column: 58, scope: !11062)
!11379 = !DILocation(line: 3691, column: 16, scope: !11062)
!11380 = !DILocation(line: 3691, column: 14, scope: !11062)
!11381 = !DILocation(line: 3694, column: 12, scope: !11062)
!11382 = !DILocation(line: 3694, column: 16, scope: !11062)
!11383 = !DILocation(line: 3694, column: 26, scope: !11062)
!11384 = !DILocation(line: 3694, column: 10, scope: !11062)
!11385 = !DILocation(line: 3695, column: 3, scope: !11062)
!11386 = !DILocation(line: 3695, column: 10, scope: !11387)
!11387 = distinct !DILexicalBlock(scope: !11388, file: !3, line: 3695, column: 3)
!11388 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3695, column: 3)
!11389 = !DILocation(line: 3695, column: 3, scope: !11388)
!11390 = !DILocation(line: 3697, column: 13, scope: !11391)
!11391 = distinct !DILexicalBlock(scope: !11387, file: !3, line: 3696, column: 5)
!11392 = !DILocation(line: 3697, column: 11, scope: !11391)
!11393 = !DILocation(line: 3698, column: 11, scope: !11394)
!11394 = distinct !DILexicalBlock(scope: !11391, file: !3, line: 3698, column: 11)
!11395 = !DILocation(line: 3698, column: 29, scope: !11394)
!11396 = !DILocation(line: 3698, column: 33, scope: !11394)
!11397 = !DILocation(line: 3698, column: 11, scope: !11391)
!11398 = !DILocation(line: 3700, column: 17, scope: !11399)
!11399 = distinct !DILexicalBlock(scope: !11400, file: !3, line: 3700, column: 8)
!11400 = distinct !DILexicalBlock(scope: !11394, file: !3, line: 3699, column: 2)
!11401 = !DILocation(line: 3700, column: 8, scope: !11399)
!11402 = !DILocation(line: 3700, column: 22, scope: !11399)
!11403 = !DILocation(line: 3700, column: 45, scope: !11399)
!11404 = !DILocation(line: 3700, column: 25, scope: !11399)
!11405 = !DILocation(line: 3700, column: 8, scope: !11400)
!11406 = !DILocation(line: 3701, column: 26, scope: !11399)
!11407 = !DILocation(line: 3701, column: 6, scope: !11399)
!11408 = !DILocation(line: 3701, column: 12, scope: !11399)
!11409 = !DILocation(line: 3701, column: 24, scope: !11399)
!11410 = !DILocation(line: 3703, column: 2, scope: !11400)
!11411 = !DILocation(line: 3704, column: 34, scope: !11412)
!11412 = distinct !DILexicalBlock(scope: !11394, file: !3, line: 3704, column: 16)
!11413 = !DILocation(line: 3704, column: 39, scope: !11412)
!11414 = !DILocation(line: 3704, column: 17, scope: !11412)
!11415 = !DILocation(line: 3704, column: 16, scope: !11394)
!11416 = !DILocation(line: 3705, column: 22, scope: !11412)
!11417 = !DILocation(line: 3705, column: 2, scope: !11412)
!11418 = !DILocation(line: 3705, column: 8, scope: !11412)
!11419 = !DILocation(line: 3705, column: 20, scope: !11412)
!11420 = !DILocation(line: 3707, column: 5, scope: !11391)
!11421 = !DILocation(line: 3695, column: 27, scope: !11387)
!11422 = !DILocation(line: 3695, column: 25, scope: !11387)
!11423 = !DILocation(line: 3695, column: 3, scope: !11387)
!11424 = distinct !{!11424, !11389, !11425}
!11425 = !DILocation(line: 3707, column: 5, scope: !11388)
!11426 = !DILocation(line: 3709, column: 7, scope: !11427)
!11427 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3709, column: 7)
!11428 = !DILocation(line: 3709, column: 17, scope: !11427)
!11429 = !DILocation(line: 3709, column: 21, scope: !11427)
!11430 = !DILocation(line: 3709, column: 32, scope: !11427)
!11431 = !DILocation(line: 3709, column: 7, scope: !11062)
!11432 = !DILocation(line: 3711, column: 16, scope: !11433)
!11433 = distinct !DILexicalBlock(scope: !11427, file: !3, line: 3710, column: 5)
!11434 = !DILocation(line: 3711, column: 7, scope: !11433)
!11435 = !DILocation(line: 3712, column: 27, scope: !11433)
!11436 = !DILocation(line: 3712, column: 38, scope: !11433)
!11437 = !DILocation(line: 3712, column: 42, scope: !11433)
!11438 = !DILocation(line: 3712, column: 7, scope: !11433)
!11439 = !DILocation(line: 3713, column: 16, scope: !11433)
!11440 = !DILocation(line: 3713, column: 7, scope: !11433)
!11441 = !DILocation(line: 3714, column: 27, scope: !11433)
!11442 = !DILocation(line: 3714, column: 38, scope: !11433)
!11443 = !DILocation(line: 3714, column: 42, scope: !11433)
!11444 = !DILocation(line: 3714, column: 7, scope: !11433)
!11445 = !DILocation(line: 3715, column: 16, scope: !11433)
!11446 = !DILocation(line: 3715, column: 51, scope: !11433)
!11447 = !DILocation(line: 3715, column: 60, scope: !11433)
!11448 = !DILocation(line: 3715, column: 7, scope: !11433)
!11449 = !DILocation(line: 3716, column: 5, scope: !11433)
!11450 = !DILocation(line: 3723, column: 14, scope: !11062)
!11451 = !DILocation(line: 3723, column: 18, scope: !11062)
!11452 = !DILocation(line: 3723, column: 22, scope: !11062)
!11453 = !DILocation(line: 3724, column: 9, scope: !11062)
!11454 = !DILocation(line: 3724, column: 18, scope: !11062)
!11455 = !DILocation(line: 3724, column: 28, scope: !11062)
!11456 = !DILocation(line: 3724, column: 47, scope: !11062)
!11457 = !DILocation(line: 3725, column: 7, scope: !11062)
!11458 = !DILocation(line: 3725, column: 11, scope: !11062)
!11459 = !DILocation(line: 3723, column: 3, scope: !11062)
!11460 = !DILocation(line: 3728, column: 7, scope: !11461)
!11461 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3728, column: 7)
!11462 = !DILocation(line: 3728, column: 13, scope: !11461)
!11463 = !DILocation(line: 3728, column: 7, scope: !11062)
!11464 = !DILocation(line: 3730, column: 27, scope: !11465)
!11465 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 3729, column: 5)
!11466 = !DILocation(line: 3730, column: 33, scope: !11465)
!11467 = !DILocation(line: 3730, column: 44, scope: !11465)
!11468 = !DILocation(line: 3730, column: 7, scope: !11465)
!11469 = !DILocation(line: 3731, column: 27, scope: !11465)
!11470 = !DILocation(line: 3731, column: 33, scope: !11465)
!11471 = !DILocation(line: 3731, column: 44, scope: !11465)
!11472 = !DILocation(line: 3731, column: 7, scope: !11465)
!11473 = !DILocation(line: 3732, column: 5, scope: !11465)
!11474 = !DILocation(line: 3735, column: 7, scope: !11475)
!11475 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3735, column: 7)
!11476 = !DILocation(line: 3735, column: 11, scope: !11475)
!11477 = !DILocation(line: 3735, column: 7, scope: !11062)
!11478 = !DILocation(line: 3737, column: 28, scope: !11479)
!11479 = distinct !DILexicalBlock(scope: !11475, file: !3, line: 3736, column: 5)
!11480 = !DILocation(line: 3737, column: 32, scope: !11479)
!11481 = !DILocation(line: 3737, column: 7, scope: !11479)
!11482 = !DILocation(line: 3738, column: 23, scope: !11479)
!11483 = !DILocation(line: 3738, column: 7, scope: !11479)
!11484 = !DILocation(line: 3738, column: 11, scope: !11479)
!11485 = !DILocation(line: 3738, column: 21, scope: !11479)
!11486 = !DILocation(line: 3739, column: 5, scope: !11479)
!11487 = !DILocation(line: 3740, column: 24, scope: !11062)
!11488 = !DILocation(line: 3740, column: 28, scope: !11062)
!11489 = !DILocation(line: 3740, column: 3, scope: !11062)
!11490 = !DILocation(line: 3741, column: 18, scope: !11062)
!11491 = !DILocation(line: 3741, column: 3, scope: !11062)
!11492 = !DILocation(line: 3741, column: 7, scope: !11062)
!11493 = !DILocation(line: 3741, column: 16, scope: !11062)
!11494 = !DILocation(line: 3744, column: 21, scope: !11062)
!11495 = !DILocation(line: 3744, column: 3, scope: !11062)
!11496 = !DILocation(line: 3750, column: 7, scope: !11497)
!11497 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3750, column: 7)
!11498 = !DILocation(line: 3750, column: 18, scope: !11497)
!11499 = !DILocation(line: 3750, column: 38, scope: !11497)
!11500 = !DILocation(line: 3750, column: 21, scope: !11497)
!11501 = !DILocation(line: 3750, column: 7, scope: !11062)
!11502 = !DILocalVariable(name: "old_stmt", scope: !11503, file: !3, line: 3752, type: !2917)
!11503 = distinct !DILexicalBlock(scope: !11497, file: !3, line: 3751, column: 5)
!11504 = !DILocation(line: 3752, column: 14, scope: !11503)
!11505 = !DILocation(line: 3752, column: 25, scope: !11503)
!11506 = !DILocation(line: 3753, column: 14, scope: !11503)
!11507 = !DILocation(line: 3753, column: 12, scope: !11503)
!11508 = !DILocation(line: 3754, column: 31, scope: !11503)
!11509 = !DILocation(line: 3754, column: 7, scope: !11503)
!11510 = !DILocation(line: 3755, column: 28, scope: !11511)
!11511 = distinct !DILexicalBlock(scope: !11503, file: !3, line: 3755, column: 11)
!11512 = !DILocation(line: 3755, column: 11, scope: !11511)
!11513 = !DILocation(line: 3755, column: 11, scope: !11503)
!11514 = !DILocation(line: 3756, column: 29, scope: !11511)
!11515 = !DILocation(line: 3756, column: 2, scope: !11511)
!11516 = !DILocation(line: 3757, column: 39, scope: !11503)
!11517 = !DILocation(line: 3757, column: 49, scope: !11503)
!11518 = !DILocation(line: 3757, column: 7, scope: !11503)
!11519 = !DILocation(line: 3758, column: 5, scope: !11503)
!11520 = !DILocation(line: 3763, column: 28, scope: !11521)
!11521 = distinct !DILexicalBlock(scope: !11522, file: !3, line: 3763, column: 11)
!11522 = distinct !DILexicalBlock(scope: !11497, file: !3, line: 3760, column: 5)
!11523 = !DILocation(line: 3763, column: 11, scope: !11521)
!11524 = !DILocation(line: 3764, column: 4, scope: !11521)
!11525 = !DILocation(line: 3764, column: 7, scope: !11521)
!11526 = !DILocation(line: 3764, column: 42, scope: !11521)
!11527 = !DILocation(line: 3763, column: 11, scope: !11522)
!11528 = !DILocalVariable(name: "name", scope: !11529, file: !3, line: 3766, type: !2586)
!11529 = distinct !DILexicalBlock(scope: !11521, file: !3, line: 3765, column: 2)
!11530 = !DILocation(line: 3766, column: 9, scope: !11529)
!11531 = !DILocation(line: 3766, column: 33, scope: !11529)
!11532 = !DILocation(line: 3766, column: 16, scope: !11529)
!11533 = !DILocalVariable(name: "var", scope: !11529, file: !3, line: 3767, type: !2586)
!11534 = !DILocation(line: 3767, column: 9, scope: !11529)
!11535 = !DILocation(line: 3767, column: 15, scope: !11529)
!11536 = !DILocalVariable(name: "def", scope: !11529, file: !3, line: 3768, type: !2586)
!11537 = !DILocation(line: 3768, column: 9, scope: !11529)
!11538 = !DILocation(line: 3768, column: 35, scope: !11529)
!11539 = !DILocation(line: 3768, column: 41, scope: !11529)
!11540 = !DILocation(line: 3768, column: 15, scope: !11529)
!11541 = !DILocation(line: 3770, column: 8, scope: !11542)
!11542 = distinct !DILexicalBlock(scope: !11529, file: !3, line: 3770, column: 8)
!11543 = !DILocation(line: 3770, column: 8, scope: !11529)
!11544 = !DILocation(line: 3774, column: 15, scope: !11545)
!11545 = distinct !DILexicalBlock(scope: !11542, file: !3, line: 3771, column: 6)
!11546 = !DILocation(line: 3774, column: 13, scope: !11545)
!11547 = !DILocation(line: 3775, column: 32, scope: !11545)
!11548 = !DILocation(line: 3775, column: 8, scope: !11545)
!11549 = !DILocation(line: 3776, column: 6, scope: !11545)
!11550 = !DILocation(line: 3780, column: 8, scope: !11551)
!11551 = distinct !DILexicalBlock(scope: !11542, file: !3, line: 3778, column: 6)
!11552 = !DILocation(line: 3781, column: 25, scope: !11551)
!11553 = !DILocation(line: 3781, column: 30, scope: !11551)
!11554 = !DILocation(line: 3781, column: 8, scope: !11551)
!11555 = !DILocation(line: 3782, column: 35, scope: !11551)
!11556 = !DILocation(line: 3782, column: 8, scope: !11551)
!11557 = !DILocation(line: 3782, column: 33, scope: !11551)
!11558 = !DILocation(line: 3784, column: 2, scope: !11529)
!11559 = !DILocation(line: 3786, column: 9, scope: !11521)
!11560 = !DILocation(line: 3789, column: 7, scope: !11561)
!11561 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3789, column: 7)
!11562 = !DILocation(line: 3789, column: 7, scope: !11062)
!11563 = !DILocation(line: 3790, column: 44, scope: !11561)
!11564 = !DILocation(line: 3790, column: 5, scope: !11561)
!11565 = !DILocation(line: 3795, column: 25, scope: !11566)
!11566 = distinct !DILexicalBlock(scope: !11062, file: !3, line: 3795, column: 7)
!11567 = !DILocation(line: 3795, column: 7, scope: !11566)
!11568 = !DILocation(line: 3795, column: 7, scope: !11062)
!11569 = !DILocation(line: 3797, column: 7, scope: !11570)
!11570 = distinct !DILexicalBlock(scope: !11566, file: !3, line: 3796, column: 5)
!11571 = !DILocation(line: 3799, column: 7, scope: !11570)
!11572 = !DILocation(line: 3799, column: 45, scope: !11570)
!11573 = !DILocation(line: 3800, column: 5, scope: !11570)
!11574 = !DILocation(line: 3806, column: 5, scope: !11062)
!11575 = !DILocation(line: 3806, column: 18, scope: !11062)
!11576 = !DILocation(line: 3806, column: 46, scope: !11062)
!11577 = !DILocation(line: 3806, column: 55, scope: !11062)
!11578 = !DILocation(line: 3806, column: 63, scope: !11062)
!11579 = !DILocation(line: 3806, column: 3, scope: !11062)
!11580 = !DILocation(line: 3809, column: 23, scope: !11062)
!11581 = !DILocation(line: 3809, column: 32, scope: !11062)
!11582 = !DILocation(line: 3809, column: 3, scope: !11062)
!11583 = !DILocation(line: 3811, column: 3, scope: !11062)
!11584 = !DILocation(line: 3811, column: 7, scope: !11062)
!11585 = !DILocation(line: 3811, column: 13, scope: !11062)
!11586 = !DILocation(line: 3812, column: 24, scope: !11062)
!11587 = !DILocation(line: 3812, column: 3, scope: !11062)
!11588 = !DILabel(scope: !11062, name: "egress", file: !3, line: 3814)
!11589 = !DILocation(line: 3814, column: 2, scope: !11062)
!11590 = !DILocation(line: 3815, column: 20, scope: !11062)
!11591 = !DILocation(line: 3815, column: 18, scope: !11062)
!11592 = !DILocation(line: 3816, column: 10, scope: !11062)
!11593 = !DILocation(line: 3816, column: 3, scope: !11062)
!11594 = distinct !DISubprogram(name: "gimple_has_location", scope: !1618, file: !1618, line: 1165, type: !9964, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11595 = !DILocalVariable(name: "g", arg: 1, scope: !11594, file: !1618, line: 1165, type: !6573)
!11596 = !DILocation(line: 1165, column: 35, scope: !11594)
!11597 = !DILocation(line: 1167, column: 27, scope: !11594)
!11598 = !DILocation(line: 1167, column: 10, scope: !11594)
!11599 = !DILocation(line: 1167, column: 30, scope: !11594)
!11600 = !DILocation(line: 1167, column: 3, scope: !11594)
!11601 = distinct !DISubprogram(name: "gimple_location", scope: !1618, file: !1618, line: 1139, type: !11602, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11602 = !DISubroutineType(types: !11603)
!11603 = !{!2714, !6573}
!11604 = !DILocalVariable(name: "g", arg: 1, scope: !11601, file: !1618, line: 1139, type: !6573)
!11605 = !DILocation(line: 1139, column: 31, scope: !11601)
!11606 = !DILocation(line: 1141, column: 10, scope: !11601)
!11607 = !DILocation(line: 1141, column: 13, scope: !11601)
!11608 = !DILocation(line: 1141, column: 20, scope: !11601)
!11609 = !DILocation(line: 1141, column: 3, scope: !11601)
!11610 = distinct !DISubprogram(name: "get_indirect_callee_fndecl", scope: !3, file: !3, line: 3456, type: !11611, scopeLine: 3457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11611 = !DISubroutineType(types: !11612)
!11612 = !{!2586, !3990, !2917}
!11613 = !DILocalVariable(name: "node", arg: 1, scope: !11610, file: !3, line: 3456, type: !3990)
!11614 = !DILocation(line: 3456, column: 49, scope: !11610)
!11615 = !DILocalVariable(name: "stmt", arg: 2, scope: !11610, file: !3, line: 3456, type: !2917)
!11616 = !DILocation(line: 3456, column: 62, scope: !11610)
!11617 = !DILocalVariable(name: "cs", scope: !11610, file: !3, line: 3458, type: !3995)
!11618 = !DILocation(line: 3458, column: 23, scope: !11610)
!11619 = !DILocation(line: 3460, column: 21, scope: !11610)
!11620 = !DILocation(line: 3460, column: 27, scope: !11610)
!11621 = !DILocation(line: 3460, column: 8, scope: !11610)
!11622 = !DILocation(line: 3460, column: 6, scope: !11610)
!11623 = !DILocation(line: 3461, column: 7, scope: !11624)
!11624 = distinct !DILexicalBlock(scope: !11610, file: !3, line: 3461, column: 7)
!11625 = !DILocation(line: 3461, column: 7, scope: !11610)
!11626 = !DILocation(line: 3462, column: 12, scope: !11624)
!11627 = !DILocation(line: 3462, column: 16, scope: !11624)
!11628 = !DILocation(line: 3462, column: 24, scope: !11624)
!11629 = !DILocation(line: 3462, column: 5, scope: !11624)
!11630 = !DILocation(line: 3464, column: 3, scope: !11610)
!11631 = !DILocation(line: 3465, column: 1, scope: !11610)
!11632 = distinct !DISubprogram(name: "prepend_lexical_block", scope: !3, file: !3, line: 3446, type: !8998, scopeLine: 3447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11633 = !DILocalVariable(name: "current_block", arg: 1, scope: !11632, file: !3, line: 3446, type: !2586)
!11634 = !DILocation(line: 3446, column: 29, scope: !11632)
!11635 = !DILocalVariable(name: "new_block", arg: 2, scope: !11632, file: !3, line: 3446, type: !2586)
!11636 = !DILocation(line: 3446, column: 49, scope: !11632)
!11637 = !DILocation(line: 3448, column: 29, scope: !11632)
!11638 = !DILocation(line: 3448, column: 3, scope: !11632)
!11639 = !DILocation(line: 3448, column: 27, scope: !11632)
!11640 = !DILocation(line: 3449, column: 37, scope: !11632)
!11641 = !DILocation(line: 3449, column: 3, scope: !11632)
!11642 = !DILocation(line: 3449, column: 35, scope: !11632)
!11643 = !DILocation(line: 3450, column: 36, scope: !11632)
!11644 = !DILocation(line: 3450, column: 3, scope: !11632)
!11645 = !DILocation(line: 3450, column: 34, scope: !11632)
!11646 = !DILocation(line: 3451, column: 1, scope: !11632)
!11647 = distinct !DISubprogram(name: "initialize_inlined_parameters", scope: !3, file: !3, line: 2490, type: !11648, scopeLine: 2492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11648 = !DISubroutineType(types: !11649)
!11649 = !{null, !3983, !2917, !2586, !3473}
!11650 = !DILocalVariable(name: "id", arg: 1, scope: !11647, file: !3, line: 2490, type: !3983)
!11651 = !DILocation(line: 2490, column: 48, scope: !11647)
!11652 = !DILocalVariable(name: "stmt", arg: 2, scope: !11647, file: !3, line: 2490, type: !2917)
!11653 = !DILocation(line: 2490, column: 59, scope: !11647)
!11654 = !DILocalVariable(name: "fn", arg: 3, scope: !11647, file: !3, line: 2491, type: !2586)
!11655 = !DILocation(line: 2491, column: 16, scope: !11647)
!11656 = !DILocalVariable(name: "bb", arg: 4, scope: !11647, file: !3, line: 2491, type: !3473)
!11657 = !DILocation(line: 2491, column: 32, scope: !11647)
!11658 = !DILocalVariable(name: "parms", scope: !11647, file: !3, line: 2493, type: !2586)
!11659 = !DILocation(line: 2493, column: 8, scope: !11647)
!11660 = !DILocalVariable(name: "i", scope: !11647, file: !3, line: 2494, type: !3061)
!11661 = !DILocation(line: 2494, column: 10, scope: !11647)
!11662 = !DILocalVariable(name: "p", scope: !11647, file: !3, line: 2495, type: !2586)
!11663 = !DILocation(line: 2495, column: 8, scope: !11647)
!11664 = !DILocalVariable(name: "vars", scope: !11647, file: !3, line: 2496, type: !2586)
!11665 = !DILocation(line: 2496, column: 8, scope: !11647)
!11666 = !DILocalVariable(name: "static_chain", scope: !11647, file: !3, line: 2497, type: !2586)
!11667 = !DILocation(line: 2497, column: 8, scope: !11647)
!11668 = !DILocation(line: 2497, column: 42, scope: !11647)
!11669 = !DILocation(line: 2497, column: 23, scope: !11647)
!11670 = !DILocation(line: 2500, column: 11, scope: !11647)
!11671 = !DILocation(line: 2500, column: 9, scope: !11647)
!11672 = !DILocation(line: 2504, column: 12, scope: !11673)
!11673 = distinct !DILexicalBlock(scope: !11647, file: !3, line: 2504, column: 3)
!11674 = !DILocation(line: 2504, column: 10, scope: !11673)
!11675 = !DILocation(line: 2504, column: 21, scope: !11673)
!11676 = !DILocation(line: 2504, column: 8, scope: !11673)
!11677 = !DILocation(line: 2504, column: 26, scope: !11678)
!11678 = distinct !DILexicalBlock(scope: !11673, file: !3, line: 2504, column: 3)
!11679 = !DILocation(line: 2504, column: 3, scope: !11673)
!11680 = !DILocalVariable(name: "val", scope: !11681, file: !3, line: 2506, type: !2586)
!11681 = distinct !DILexicalBlock(scope: !11678, file: !3, line: 2505, column: 5)
!11682 = !DILocation(line: 2506, column: 12, scope: !11681)
!11683 = !DILocation(line: 2507, column: 13, scope: !11681)
!11684 = !DILocation(line: 2507, column: 39, scope: !11681)
!11685 = !DILocation(line: 2507, column: 17, scope: !11681)
!11686 = !DILocation(line: 2507, column: 15, scope: !11681)
!11687 = !DILocation(line: 2507, column: 64, scope: !11681)
!11688 = !DILocation(line: 2507, column: 70, scope: !11681)
!11689 = !DILocation(line: 2507, column: 47, scope: !11681)
!11690 = !DILocation(line: 2507, column: 11, scope: !11681)
!11691 = !DILocation(line: 2508, column: 28, scope: !11681)
!11692 = !DILocation(line: 2508, column: 32, scope: !11681)
!11693 = !DILocation(line: 2508, column: 35, scope: !11681)
!11694 = !DILocation(line: 2508, column: 40, scope: !11681)
!11695 = !DILocation(line: 2508, column: 44, scope: !11681)
!11696 = !DILocation(line: 2508, column: 7, scope: !11681)
!11697 = !DILocation(line: 2509, column: 5, scope: !11681)
!11698 = !DILocation(line: 2504, column: 33, scope: !11678)
!11699 = !DILocation(line: 2504, column: 31, scope: !11678)
!11700 = !DILocation(line: 2504, column: 50, scope: !11678)
!11701 = !DILocation(line: 2504, column: 3, scope: !11678)
!11702 = distinct !{!11702, !11679, !11703}
!11703 = !DILocation(line: 2509, column: 5, scope: !11673)
!11704 = !DILocation(line: 2512, column: 7, scope: !11647)
!11705 = !DILocation(line: 2512, column: 34, scope: !11647)
!11706 = !DILocation(line: 2512, column: 5, scope: !11647)
!11707 = !DILocation(line: 2513, column: 3, scope: !11647)
!11708 = !DILocation(line: 2514, column: 7, scope: !11709)
!11709 = distinct !DILexicalBlock(scope: !11647, file: !3, line: 2514, column: 7)
!11710 = !DILocation(line: 2514, column: 7, scope: !11647)
!11711 = !DILocation(line: 2517, column: 7, scope: !11712)
!11712 = distinct !DILexicalBlock(scope: !11709, file: !3, line: 2515, column: 5)
!11713 = !DILocation(line: 2519, column: 28, scope: !11712)
!11714 = !DILocation(line: 2519, column: 32, scope: !11712)
!11715 = !DILocation(line: 2519, column: 35, scope: !11712)
!11716 = !DILocation(line: 2519, column: 49, scope: !11712)
!11717 = !DILocation(line: 2519, column: 53, scope: !11712)
!11718 = !DILocation(line: 2519, column: 7, scope: !11712)
!11719 = !DILocation(line: 2520, column: 5, scope: !11712)
!11720 = !DILocation(line: 2522, column: 24, scope: !11647)
!11721 = !DILocation(line: 2522, column: 28, scope: !11647)
!11722 = !DILocation(line: 2522, column: 35, scope: !11647)
!11723 = !DILocation(line: 2522, column: 3, scope: !11647)
!11724 = !DILocation(line: 2523, column: 1, scope: !11647)
!11725 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !1618, file: !1618, line: 1878, type: !6581, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11726 = !DILocalVariable(name: "gs", arg: 1, scope: !11725, file: !1618, line: 1878, type: !6573)
!11727 = !DILocation(line: 1878, column: 31, scope: !11725)
!11728 = !DILocation(line: 1881, column: 21, scope: !11725)
!11729 = !DILocation(line: 1881, column: 10, scope: !11725)
!11730 = !DILocation(line: 1881, column: 3, scope: !11725)
!11731 = distinct !DISubprogram(name: "gimple_call_return_slot_opt_p", scope: !1618, file: !1618, line: 2119, type: !10286, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11732 = !DILocalVariable(name: "s", arg: 1, scope: !11731, file: !1618, line: 2119, type: !2917)
!11733 = !DILocation(line: 2119, column: 39, scope: !11731)
!11734 = !DILocation(line: 2122, column: 11, scope: !11731)
!11735 = !DILocation(line: 2122, column: 14, scope: !11731)
!11736 = !DILocation(line: 2122, column: 21, scope: !11731)
!11737 = !DILocation(line: 2122, column: 29, scope: !11731)
!11738 = !DILocation(line: 2122, column: 56, scope: !11731)
!11739 = !DILocation(line: 2122, column: 10, scope: !11731)
!11740 = !DILocation(line: 2122, column: 3, scope: !11731)
!11741 = distinct !DISubprogram(name: "declare_return_variable", scope: !3, file: !3, line: 2539, type: !7876, scopeLine: 2540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11742 = !DILocalVariable(name: "id", arg: 1, scope: !11741, file: !3, line: 2539, type: !3983)
!11743 = !DILocation(line: 2539, column: 42, scope: !11741)
!11744 = !DILocalVariable(name: "return_slot", arg: 2, scope: !11741, file: !3, line: 2539, type: !2586)
!11745 = !DILocation(line: 2539, column: 51, scope: !11741)
!11746 = !DILocalVariable(name: "modify_dest", arg: 3, scope: !11741, file: !3, line: 2539, type: !2586)
!11747 = !DILocation(line: 2539, column: 69, scope: !11741)
!11748 = !DILocalVariable(name: "callee", scope: !11741, file: !3, line: 2541, type: !2586)
!11749 = !DILocation(line: 2541, column: 8, scope: !11741)
!11750 = !DILocation(line: 2541, column: 17, scope: !11741)
!11751 = !DILocation(line: 2541, column: 21, scope: !11741)
!11752 = !DILocalVariable(name: "caller", scope: !11741, file: !3, line: 2542, type: !2586)
!11753 = !DILocation(line: 2542, column: 8, scope: !11741)
!11754 = !DILocation(line: 2542, column: 17, scope: !11741)
!11755 = !DILocation(line: 2542, column: 21, scope: !11741)
!11756 = !DILocalVariable(name: "result", scope: !11741, file: !3, line: 2543, type: !2586)
!11757 = !DILocation(line: 2543, column: 8, scope: !11741)
!11758 = !DILocation(line: 2543, column: 17, scope: !11741)
!11759 = !DILocalVariable(name: "callee_type", scope: !11741, file: !3, line: 2544, type: !2586)
!11760 = !DILocation(line: 2544, column: 8, scope: !11741)
!11761 = !DILocation(line: 2544, column: 22, scope: !11741)
!11762 = !DILocalVariable(name: "caller_type", scope: !11741, file: !3, line: 2545, type: !2586)
!11763 = !DILocation(line: 2545, column: 8, scope: !11741)
!11764 = !DILocalVariable(name: "var", scope: !11741, file: !3, line: 2546, type: !2586)
!11765 = !DILocation(line: 2546, column: 8, scope: !11741)
!11766 = !DILocalVariable(name: "use", scope: !11741, file: !3, line: 2546, type: !2586)
!11767 = !DILocation(line: 2546, column: 13, scope: !11741)
!11768 = !DILocation(line: 2550, column: 7, scope: !11769)
!11769 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2550, column: 7)
!11770 = !DILocation(line: 2550, column: 7, scope: !11741)
!11771 = !DILocation(line: 2551, column: 19, scope: !11769)
!11772 = !DILocation(line: 2551, column: 17, scope: !11769)
!11773 = !DILocation(line: 2551, column: 5, scope: !11769)
!11774 = !DILocation(line: 2553, column: 19, scope: !11769)
!11775 = !DILocation(line: 2553, column: 17, scope: !11769)
!11776 = !DILocation(line: 2557, column: 8, scope: !11777)
!11777 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2557, column: 7)
!11778 = !DILocation(line: 2557, column: 15, scope: !11777)
!11779 = !DILocation(line: 2557, column: 18, scope: !11777)
!11780 = !DILocation(line: 2557, column: 7, scope: !11741)
!11781 = !DILocation(line: 2558, column: 5, scope: !11777)
!11782 = !DILocation(line: 2562, column: 7, scope: !11783)
!11783 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2562, column: 7)
!11784 = !DILocation(line: 2562, column: 7, scope: !11741)
!11785 = !DILocation(line: 2566, column: 7, scope: !11786)
!11786 = distinct !DILexicalBlock(scope: !11783, file: !3, line: 2563, column: 5)
!11787 = !DILocation(line: 2567, column: 11, scope: !11788)
!11788 = distinct !DILexicalBlock(scope: !11786, file: !3, line: 2567, column: 11)
!11789 = !DILocation(line: 2567, column: 11, scope: !11786)
!11790 = !DILocalVariable(name: "return_slot_addr", scope: !11791, file: !3, line: 2569, type: !2586)
!11791 = distinct !DILexicalBlock(scope: !11788, file: !3, line: 2568, column: 2)
!11792 = !DILocation(line: 2569, column: 9, scope: !11791)
!11793 = !DILocation(line: 2569, column: 28, scope: !11791)
!11794 = !DILocation(line: 2570, column: 4, scope: !11791)
!11795 = !DILocation(line: 2578, column: 4, scope: !11791)
!11796 = !DILocation(line: 2579, column: 25, scope: !11797)
!11797 = distinct !DILexicalBlock(scope: !11791, file: !3, line: 2579, column: 8)
!11798 = !DILocation(line: 2579, column: 8, scope: !11797)
!11799 = !DILocation(line: 2579, column: 8, scope: !11791)
!11800 = !DILocalVariable(name: "bitsize", scope: !11801, file: !3, line: 2581, type: !2642)
!11801 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 2580, column: 6)
!11802 = !DILocation(line: 2581, column: 22, scope: !11801)
!11803 = !DILocalVariable(name: "bitpos", scope: !11801, file: !3, line: 2582, type: !2642)
!11804 = !DILocation(line: 2582, column: 22, scope: !11801)
!11805 = !DILocalVariable(name: "offset", scope: !11801, file: !3, line: 2583, type: !2586)
!11806 = !DILocation(line: 2583, column: 13, scope: !11801)
!11807 = !DILocalVariable(name: "mode", scope: !11801, file: !3, line: 2584, type: !5)
!11808 = !DILocation(line: 2584, column: 26, scope: !11801)
!11809 = !DILocalVariable(name: "unsignedp", scope: !11801, file: !3, line: 2585, type: !2683)
!11810 = !DILocation(line: 2585, column: 12, scope: !11801)
!11811 = !DILocalVariable(name: "volatilep", scope: !11801, file: !3, line: 2586, type: !2683)
!11812 = !DILocation(line: 2586, column: 12, scope: !11801)
!11813 = !DILocalVariable(name: "base", scope: !11801, file: !3, line: 2587, type: !2586)
!11814 = !DILocation(line: 2587, column: 13, scope: !11801)
!11815 = !DILocation(line: 2588, column: 36, scope: !11801)
!11816 = !DILocation(line: 2588, column: 15, scope: !11801)
!11817 = !DILocation(line: 2588, column: 13, scope: !11801)
!11818 = !DILocation(line: 2592, column: 12, scope: !11819)
!11819 = distinct !DILexicalBlock(scope: !11801, file: !3, line: 2592, column: 12)
!11820 = !DILocation(line: 2592, column: 29, scope: !11819)
!11821 = !DILocation(line: 2592, column: 12, scope: !11801)
!11822 = !DILocation(line: 2593, column: 10, scope: !11819)
!11823 = !DILocation(line: 2593, column: 8, scope: !11819)
!11824 = !DILocation(line: 2593, column: 3, scope: !11819)
!11825 = !DILocation(line: 2594, column: 12, scope: !11826)
!11826 = distinct !DILexicalBlock(scope: !11801, file: !3, line: 2594, column: 12)
!11827 = !DILocation(line: 2594, column: 29, scope: !11826)
!11828 = !DILocation(line: 2594, column: 12, scope: !11801)
!11829 = !DILocation(line: 2595, column: 10, scope: !11826)
!11830 = !DILocation(line: 2595, column: 8, scope: !11826)
!11831 = !DILocation(line: 2595, column: 3, scope: !11826)
!11832 = !DILocation(line: 2596, column: 31, scope: !11801)
!11833 = !DILocation(line: 2596, column: 8, scope: !11801)
!11834 = !DILocation(line: 2597, column: 6, scope: !11801)
!11835 = !DILocation(line: 2598, column: 10, scope: !11791)
!11836 = !DILocation(line: 2598, column: 8, scope: !11791)
!11837 = !DILocation(line: 2599, column: 2, scope: !11791)
!11838 = !DILocation(line: 2602, column: 10, scope: !11839)
!11839 = distinct !DILexicalBlock(scope: !11788, file: !3, line: 2601, column: 2)
!11840 = !DILocation(line: 2602, column: 8, scope: !11839)
!11841 = !DILocation(line: 2603, column: 4, scope: !11839)
!11842 = !DILocation(line: 2604, column: 30, scope: !11839)
!11843 = !DILocation(line: 2604, column: 4, scope: !11839)
!11844 = !DILocation(line: 2604, column: 27, scope: !11839)
!11845 = !DILocation(line: 2606, column: 12, scope: !11846)
!11846 = distinct !DILexicalBlock(scope: !11786, file: !3, line: 2606, column: 11)
!11847 = !DILocation(line: 2606, column: 43, scope: !11846)
!11848 = !DILocation(line: 2607, column: 12, scope: !11846)
!11849 = !DILocation(line: 2607, column: 15, scope: !11846)
!11850 = !DILocation(line: 2607, column: 46, scope: !11846)
!11851 = !DILocation(line: 2608, column: 4, scope: !11846)
!11852 = !DILocation(line: 2608, column: 8, scope: !11846)
!11853 = !DILocation(line: 2609, column: 4, scope: !11846)
!11854 = !DILocation(line: 2609, column: 7, scope: !11846)
!11855 = !DILocation(line: 2606, column: 11, scope: !11786)
!11856 = !DILocation(line: 2610, column: 2, scope: !11846)
!11857 = !DILocation(line: 2610, column: 26, scope: !11846)
!11858 = !DILocation(line: 2611, column: 11, scope: !11786)
!11859 = !DILocation(line: 2612, column: 7, scope: !11786)
!11860 = !DILocation(line: 2616, column: 3, scope: !11741)
!11861 = !DILocation(line: 2619, column: 7, scope: !11862)
!11862 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2619, column: 7)
!11863 = !DILocation(line: 2620, column: 7, scope: !11862)
!11864 = !DILocation(line: 2620, column: 10, scope: !11862)
!11865 = !DILocation(line: 2620, column: 34, scope: !11862)
!11866 = !DILocation(line: 2619, column: 7, scope: !11741)
!11867 = !DILocalVariable(name: "use_it", scope: !11868, file: !3, line: 2622, type: !2706)
!11868 = distinct !DILexicalBlock(scope: !11862, file: !3, line: 2621, column: 5)
!11869 = !DILocation(line: 2622, column: 12, scope: !11868)
!11870 = !DILocation(line: 2625, column: 39, scope: !11871)
!11871 = distinct !DILexicalBlock(scope: !11868, file: !3, line: 2625, column: 11)
!11872 = !DILocation(line: 2625, column: 52, scope: !11871)
!11873 = !DILocation(line: 2625, column: 12, scope: !11871)
!11874 = !DILocation(line: 2625, column: 11, scope: !11868)
!11875 = !DILocation(line: 2626, column: 9, scope: !11871)
!11876 = !DILocation(line: 2626, column: 2, scope: !11871)
!11877 = !DILocation(line: 2631, column: 16, scope: !11878)
!11878 = distinct !DILexicalBlock(scope: !11871, file: !3, line: 2631, column: 16)
!11879 = !DILocation(line: 2631, column: 57, scope: !11878)
!11880 = !DILocation(line: 2631, column: 16, scope: !11871)
!11881 = !DILocation(line: 2632, column: 9, scope: !11878)
!11882 = !DILocation(line: 2632, column: 2, scope: !11878)
!11883 = !DILocation(line: 2637, column: 16, scope: !11884)
!11884 = distinct !DILexicalBlock(scope: !11878, file: !3, line: 2637, column: 16)
!11885 = !DILocation(line: 2637, column: 16, scope: !11878)
!11886 = !DILocation(line: 2638, column: 9, scope: !11884)
!11887 = !DILocation(line: 2638, column: 2, scope: !11884)
!11888 = !DILocalVariable(name: "base_m", scope: !11889, file: !3, line: 2641, type: !2586)
!11889 = distinct !DILexicalBlock(scope: !11884, file: !3, line: 2640, column: 2)
!11890 = !DILocation(line: 2641, column: 9, scope: !11889)
!11891 = !DILocation(line: 2641, column: 36, scope: !11889)
!11892 = !DILocation(line: 2641, column: 18, scope: !11889)
!11893 = !DILocation(line: 2645, column: 9, scope: !11894)
!11894 = distinct !DILexicalBlock(scope: !11889, file: !3, line: 2645, column: 8)
!11895 = !DILocation(line: 2645, column: 8, scope: !11889)
!11896 = !DILocation(line: 2646, column: 13, scope: !11894)
!11897 = !DILocation(line: 2646, column: 6, scope: !11894)
!11898 = !DILocation(line: 2647, column: 28, scope: !11899)
!11899 = distinct !DILexicalBlock(scope: !11894, file: !3, line: 2647, column: 13)
!11900 = !DILocation(line: 2647, column: 13, scope: !11899)
!11901 = !DILocation(line: 2647, column: 13, scope: !11894)
!11902 = !DILocation(line: 2648, column: 13, scope: !11899)
!11903 = !DILocation(line: 2648, column: 6, scope: !11899)
!11904 = !DILocation(line: 2649, column: 14, scope: !11905)
!11905 = distinct !DILexicalBlock(scope: !11899, file: !3, line: 2649, column: 13)
!11906 = !DILocation(line: 2649, column: 45, scope: !11905)
!11907 = !DILocation(line: 2650, column: 7, scope: !11905)
!11908 = !DILocation(line: 2650, column: 10, scope: !11905)
!11909 = !DILocation(line: 2650, column: 41, scope: !11905)
!11910 = !DILocation(line: 2651, column: 6, scope: !11905)
!11911 = !DILocation(line: 2651, column: 10, scope: !11905)
!11912 = !DILocation(line: 2652, column: 6, scope: !11905)
!11913 = !DILocation(line: 2652, column: 9, scope: !11905)
!11914 = !DILocation(line: 2649, column: 13, scope: !11899)
!11915 = !DILocation(line: 2653, column: 13, scope: !11905)
!11916 = !DILocation(line: 2653, column: 6, scope: !11905)
!11917 = !DILocation(line: 2654, column: 14, scope: !11918)
!11918 = distinct !DILexicalBlock(scope: !11905, file: !3, line: 2654, column: 13)
!11919 = !DILocation(line: 2654, column: 13, scope: !11905)
!11920 = !DILocation(line: 2655, column: 13, scope: !11918)
!11921 = !DILocation(line: 2655, column: 6, scope: !11918)
!11922 = !DILocation(line: 2658, column: 11, scope: !11923)
!11923 = distinct !DILexicalBlock(scope: !11868, file: !3, line: 2658, column: 11)
!11924 = !DILocation(line: 2658, column: 11, scope: !11868)
!11925 = !DILocation(line: 2660, column: 10, scope: !11926)
!11926 = distinct !DILexicalBlock(scope: !11923, file: !3, line: 2659, column: 2)
!11927 = !DILocation(line: 2660, column: 8, scope: !11926)
!11928 = !DILocation(line: 2661, column: 8, scope: !11926)
!11929 = !DILocation(line: 2662, column: 4, scope: !11926)
!11930 = !DILocation(line: 2664, column: 5, scope: !11868)
!11931 = !DILocation(line: 2666, column: 3, scope: !11741)
!11932 = !DILocation(line: 2668, column: 34, scope: !11741)
!11933 = !DILocation(line: 2668, column: 42, scope: !11741)
!11934 = !DILocation(line: 2668, column: 9, scope: !11741)
!11935 = !DILocation(line: 2668, column: 7, scope: !11741)
!11936 = !DILocation(line: 2669, column: 24, scope: !11937)
!11937 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2669, column: 7)
!11938 = !DILocation(line: 2669, column: 7, scope: !11937)
!11939 = !DILocation(line: 2669, column: 7, scope: !11741)
!11940 = !DILocation(line: 2671, column: 20, scope: !11941)
!11941 = distinct !DILexicalBlock(scope: !11937, file: !3, line: 2670, column: 5)
!11942 = !DILocation(line: 2671, column: 7, scope: !11941)
!11943 = !DILocation(line: 2672, column: 27, scope: !11941)
!11944 = !DILocation(line: 2672, column: 7, scope: !11941)
!11945 = !DILocation(line: 2673, column: 5, scope: !11941)
!11946 = !DILocation(line: 2675, column: 3, scope: !11741)
!11947 = !DILocation(line: 2675, column: 34, scope: !11741)
!11948 = !DILocation(line: 2677, column: 7, scope: !11741)
!11949 = !DILocation(line: 2676, column: 3, scope: !11741)
!11950 = !DILocation(line: 2676, column: 34, scope: !11741)
!11951 = !DILocation(line: 2677, column: 5, scope: !11741)
!11952 = !DILocation(line: 2682, column: 3, scope: !11741)
!11953 = !DILocation(line: 2682, column: 25, scope: !11741)
!11954 = !DILocation(line: 2684, column: 24, scope: !11741)
!11955 = !DILocation(line: 2684, column: 28, scope: !11741)
!11956 = !DILocation(line: 2684, column: 35, scope: !11741)
!11957 = !DILocation(line: 2684, column: 3, scope: !11741)
!11958 = !DILocation(line: 2688, column: 9, scope: !11741)
!11959 = !DILocation(line: 2688, column: 7, scope: !11741)
!11960 = !DILocation(line: 2689, column: 35, scope: !11961)
!11961 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2689, column: 7)
!11962 = !DILocation(line: 2689, column: 48, scope: !11961)
!11963 = !DILocation(line: 2689, column: 8, scope: !11961)
!11964 = !DILocation(line: 2689, column: 7, scope: !11741)
!11965 = !DILocation(line: 2690, column: 11, scope: !11961)
!11966 = !DILocation(line: 2690, column: 9, scope: !11961)
!11967 = !DILocation(line: 2690, column: 5, scope: !11961)
!11968 = !DILocation(line: 2692, column: 3, scope: !11741)
!11969 = !DILocation(line: 2694, column: 7, scope: !11970)
!11970 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2694, column: 7)
!11971 = !DILocation(line: 2694, column: 7, scope: !11741)
!11972 = !DILocation(line: 2696, column: 7, scope: !11973)
!11973 = distinct !DILexicalBlock(scope: !11970, file: !3, line: 2695, column: 5)
!11974 = !DILocation(line: 2696, column: 30, scope: !11973)
!11975 = !DILocation(line: 2697, column: 13, scope: !11973)
!11976 = !DILocation(line: 2697, column: 11, scope: !11973)
!11977 = !DILocation(line: 2698, column: 5, scope: !11973)
!11978 = !DILabel(scope: !11741, name: "done", file: !3, line: 2700)
!11979 = !DILocation(line: 2700, column: 2, scope: !11741)
!11980 = !DILocation(line: 2704, column: 20, scope: !11741)
!11981 = !DILocation(line: 2704, column: 24, scope: !11741)
!11982 = !DILocation(line: 2704, column: 32, scope: !11741)
!11983 = !DILocation(line: 2704, column: 3, scope: !11741)
!11984 = !DILocation(line: 2707, column: 16, scope: !11741)
!11985 = !DILocation(line: 2707, column: 3, scope: !11741)
!11986 = !DILocation(line: 2707, column: 7, scope: !11741)
!11987 = !DILocation(line: 2707, column: 14, scope: !11741)
!11988 = !DILocation(line: 2709, column: 10, scope: !11741)
!11989 = !DILocation(line: 2709, column: 3, scope: !11741)
!11990 = !DILocation(line: 2710, column: 1, scope: !11741)
!11991 = distinct !DISubprogram(name: "is_gimple_assign", scope: !1618, file: !1618, line: 1677, type: !9964, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11992 = !DILocalVariable(name: "gs", arg: 1, scope: !11991, file: !1618, line: 1677, type: !6573)
!11993 = !DILocation(line: 1677, column: 32, scope: !11991)
!11994 = !DILocation(line: 1679, column: 23, scope: !11991)
!11995 = !DILocation(line: 1679, column: 10, scope: !11991)
!11996 = !DILocation(line: 1679, column: 27, scope: !11991)
!11997 = !DILocation(line: 1679, column: 3, scope: !11991)
!11998 = distinct !DISubprogram(name: "gimple_call_chain", scope: !1618, file: !1618, line: 1983, type: !6581, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!11999 = !DILocalVariable(name: "gs", arg: 1, scope: !11998, file: !1618, line: 1983, type: !6573)
!12000 = !DILocation(line: 1983, column: 33, scope: !11998)
!12001 = !DILocation(line: 1986, column: 21, scope: !11998)
!12002 = !DILocation(line: 1986, column: 10, scope: !11998)
!12003 = !DILocation(line: 1986, column: 3, scope: !11998)
!12004 = distinct !DISubprogram(name: "is_global_var", scope: !4916, file: !4916, line: 575, type: !8611, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12005 = !DILocalVariable(name: "t", arg: 1, scope: !12004, file: !4916, line: 575, type: !8613)
!12006 = !DILocation(line: 575, column: 27, scope: !12004)
!12007 = !DILocation(line: 577, column: 11, scope: !12004)
!12008 = !DILocation(line: 577, column: 27, scope: !12004)
!12009 = !DILocation(line: 577, column: 30, scope: !12004)
!12010 = !DILocation(line: 577, column: 10, scope: !12004)
!12011 = !DILocation(line: 577, column: 3, scope: !12004)
!12012 = distinct !DISubprogram(name: "copy_result_decl_to_var", scope: !3, file: !3, line: 4527, type: !4330, scopeLine: 4528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12013 = !DILocalVariable(name: "decl", arg: 1, scope: !12012, file: !3, line: 4527, type: !2586)
!12014 = !DILocation(line: 4527, column: 31, scope: !12012)
!12015 = !DILocalVariable(name: "id", arg: 2, scope: !12012, file: !3, line: 4527, type: !3983)
!12016 = !DILocation(line: 4527, column: 53, scope: !12012)
!12017 = !DILocalVariable(name: "copy", scope: !12012, file: !3, line: 4529, type: !2586)
!12018 = !DILocation(line: 4529, column: 8, scope: !12012)
!12019 = !DILocalVariable(name: "type", scope: !12012, file: !3, line: 4529, type: !2586)
!12020 = !DILocation(line: 4529, column: 14, scope: !12012)
!12021 = !DILocation(line: 4531, column: 3, scope: !12012)
!12022 = !DILocation(line: 4534, column: 10, scope: !12012)
!12023 = !DILocation(line: 4534, column: 8, scope: !12012)
!12024 = !DILocation(line: 4535, column: 7, scope: !12025)
!12025 = distinct !DILexicalBlock(scope: !12012, file: !3, line: 4535, column: 7)
!12026 = !DILocation(line: 4535, column: 7, scope: !12012)
!12027 = !DILocation(line: 4536, column: 12, scope: !12025)
!12028 = !DILocation(line: 4536, column: 10, scope: !12025)
!12029 = !DILocation(line: 4536, column: 5, scope: !12025)
!12030 = !DILocation(line: 4538, column: 10, scope: !12012)
!12031 = !DILocation(line: 4538, column: 8, scope: !12012)
!12032 = !DILocation(line: 4540, column: 26, scope: !12012)
!12033 = !DILocation(line: 4540, column: 3, scope: !12012)
!12034 = !DILocation(line: 4540, column: 24, scope: !12012)
!12035 = !DILocation(line: 4541, column: 31, scope: !12012)
!12036 = !DILocation(line: 4541, column: 3, scope: !12012)
!12037 = !DILocation(line: 4541, column: 29, scope: !12012)
!12038 = !DILocation(line: 4542, column: 8, scope: !12039)
!12039 = distinct !DILexicalBlock(scope: !12012, file: !3, line: 4542, column: 7)
!12040 = !DILocation(line: 4542, column: 7, scope: !12012)
!12041 = !DILocation(line: 4544, column: 33, scope: !12042)
!12042 = distinct !DILexicalBlock(scope: !12039, file: !3, line: 4543, column: 5)
!12043 = !DILocation(line: 4544, column: 7, scope: !12042)
!12044 = !DILocation(line: 4544, column: 31, scope: !12042)
!12045 = !DILocation(line: 4545, column: 34, scope: !12042)
!12046 = !DILocation(line: 4545, column: 7, scope: !12042)
!12047 = !DILocation(line: 4545, column: 32, scope: !12042)
!12048 = !DILocation(line: 4546, column: 5, scope: !12042)
!12049 = !DILocation(line: 4548, column: 36, scope: !12012)
!12050 = !DILocation(line: 4548, column: 40, scope: !12012)
!12051 = !DILocation(line: 4548, column: 46, scope: !12012)
!12052 = !DILocation(line: 4548, column: 10, scope: !12012)
!12053 = !DILocation(line: 4548, column: 3, scope: !12012)
!12054 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !337, file: !337, line: 281, type: !12055, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12055 = !DISubroutineType(types: !12056)
!12056 = !{!3473, !12057, !7}
!12057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12058, size: 64)
!12058 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3481)
!12059 = !DILocalVariable(name: "vec_", arg: 1, scope: !12054, file: !337, line: 281, type: !12057)
!12060 = !DILocation(line: 281, column: 1, scope: !12054)
!12061 = !DILocalVariable(name: "ix_", arg: 2, scope: !12054, file: !337, line: 281, type: !7)
!12062 = !DILocation(line: 0, scope: !12054)
!12063 = distinct !DISubprogram(name: "gsi_prev", scope: !1618, file: !1618, line: 4493, type: !5696, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12064 = !DILocalVariable(name: "i", arg: 1, scope: !12063, file: !1618, line: 4493, type: !5698)
!12065 = !DILocation(line: 4493, column: 33, scope: !12063)
!12066 = !DILocation(line: 4495, column: 12, scope: !12063)
!12067 = !DILocation(line: 4495, column: 15, scope: !12063)
!12068 = !DILocation(line: 4495, column: 20, scope: !12063)
!12069 = !DILocation(line: 4495, column: 3, scope: !12063)
!12070 = !DILocation(line: 4495, column: 6, scope: !12063)
!12071 = !DILocation(line: 4495, column: 10, scope: !12063)
!12072 = !DILocation(line: 4496, column: 1, scope: !12063)
!12073 = distinct !DISubprogram(name: "update_stmt", scope: !1618, file: !1618, line: 1456, type: !12074, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12074 = !DISubroutineType(types: !12075)
!12075 = !{null, !2917}
!12076 = !DILocalVariable(name: "s", arg: 1, scope: !12073, file: !1618, line: 1456, type: !2917)
!12077 = !DILocation(line: 1456, column: 21, scope: !12073)
!12078 = !DILocation(line: 1458, column: 23, scope: !12079)
!12079 = distinct !DILexicalBlock(scope: !12073, file: !1618, line: 1458, column: 7)
!12080 = !DILocation(line: 1458, column: 7, scope: !12079)
!12081 = !DILocation(line: 1458, column: 7, scope: !12073)
!12082 = !DILocation(line: 1460, column: 28, scope: !12083)
!12083 = distinct !DILexicalBlock(scope: !12079, file: !1618, line: 1459, column: 5)
!12084 = !DILocation(line: 1460, column: 7, scope: !12083)
!12085 = !DILocation(line: 1461, column: 29, scope: !12083)
!12086 = !DILocation(line: 1461, column: 7, scope: !12083)
!12087 = !DILocation(line: 1462, column: 5, scope: !12083)
!12088 = !DILocation(line: 1463, column: 1, scope: !12073)
!12089 = distinct !DISubprogram(name: "unsave_expr_1", scope: !3, file: !3, line: 4162, type: !4240, scopeLine: 4163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12090 = !DILocalVariable(name: "expr", arg: 1, scope: !12089, file: !3, line: 4162, type: !2586)
!12091 = !DILocation(line: 4162, column: 21, scope: !12089)
!12092 = !DILocation(line: 4164, column: 11, scope: !12089)
!12093 = !DILocation(line: 4164, column: 3, scope: !12089)
!12094 = !DILocation(line: 4171, column: 11, scope: !12095)
!12095 = distinct !DILexicalBlock(scope: !12096, file: !3, line: 4171, column: 11)
!12096 = distinct !DILexicalBlock(scope: !12089, file: !3, line: 4165, column: 5)
!12097 = !DILocation(line: 4171, column: 11, scope: !12096)
!12098 = !DILocation(line: 4172, column: 2, scope: !12095)
!12099 = !DILocation(line: 4174, column: 32, scope: !12096)
!12100 = !DILocation(line: 4174, column: 7, scope: !12096)
!12101 = !DILocation(line: 4174, column: 30, scope: !12096)
!12102 = !DILocation(line: 4175, column: 7, scope: !12096)
!12103 = !DILocation(line: 4175, column: 30, scope: !12096)
!12104 = !DILocation(line: 4176, column: 7, scope: !12096)
!12105 = !DILocation(line: 4179, column: 7, scope: !12096)
!12106 = !DILocation(line: 4181, column: 1, scope: !12089)
!12107 = distinct !DISubprogram(name: "gimple_label_label", scope: !1618, file: !1618, line: 2444, type: !6581, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12108 = !DILocalVariable(name: "gs", arg: 1, scope: !12107, file: !1618, line: 2444, type: !6573)
!12109 = !DILocation(line: 2444, column: 34, scope: !12107)
!12110 = !DILocation(line: 2447, column: 21, scope: !12107)
!12111 = !DILocation(line: 2447, column: 10, scope: !12107)
!12112 = !DILocation(line: 2447, column: 3, scope: !12107)
!12113 = distinct !DISubprogram(name: "gimple_bind_set_block", scope: !1618, file: !1618, line: 2570, type: !10765, scopeLine: 2571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12114 = !DILocalVariable(name: "gs", arg: 1, scope: !12113, file: !1618, line: 2570, type: !2917)
!12115 = !DILocation(line: 2570, column: 31, scope: !12113)
!12116 = !DILocalVariable(name: "block", arg: 2, scope: !12113, file: !1618, line: 2570, type: !2586)
!12117 = !DILocation(line: 2570, column: 40, scope: !12113)
!12118 = !DILocation(line: 2573, column: 3, scope: !12113)
!12119 = !DILocation(line: 2574, column: 27, scope: !12113)
!12120 = !DILocation(line: 2574, column: 3, scope: !12113)
!12121 = !DILocation(line: 2574, column: 7, scope: !12113)
!12122 = !DILocation(line: 2574, column: 19, scope: !12113)
!12123 = !DILocation(line: 2574, column: 25, scope: !12113)
!12124 = !DILocation(line: 2575, column: 1, scope: !12113)
!12125 = distinct !DISubprogram(name: "gimple_bind_set_vars", scope: !1618, file: !1618, line: 2496, type: !10765, scopeLine: 2497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12126 = !DILocalVariable(name: "gs", arg: 1, scope: !12125, file: !1618, line: 2496, type: !2917)
!12127 = !DILocation(line: 2496, column: 30, scope: !12125)
!12128 = !DILocalVariable(name: "vars", arg: 2, scope: !12125, file: !1618, line: 2496, type: !2586)
!12129 = !DILocation(line: 2496, column: 39, scope: !12125)
!12130 = !DILocation(line: 2499, column: 26, scope: !12125)
!12131 = !DILocation(line: 2499, column: 3, scope: !12125)
!12132 = !DILocation(line: 2499, column: 7, scope: !12125)
!12133 = !DILocation(line: 2499, column: 19, scope: !12125)
!12134 = !DILocation(line: 2499, column: 24, scope: !12125)
!12135 = !DILocation(line: 2500, column: 1, scope: !12125)
!12136 = distinct !DISubprogram(name: "copy_decl_to_var", scope: !3, file: !3, line: 4504, type: !4330, scopeLine: 4505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12137 = !DILocalVariable(name: "decl", arg: 1, scope: !12136, file: !3, line: 4504, type: !2586)
!12138 = !DILocation(line: 4504, column: 24, scope: !12136)
!12139 = !DILocalVariable(name: "id", arg: 2, scope: !12136, file: !3, line: 4504, type: !3983)
!12140 = !DILocation(line: 4504, column: 46, scope: !12136)
!12141 = !DILocalVariable(name: "copy", scope: !12136, file: !3, line: 4506, type: !2586)
!12142 = !DILocation(line: 4506, column: 8, scope: !12136)
!12143 = !DILocalVariable(name: "type", scope: !12136, file: !3, line: 4506, type: !2586)
!12144 = !DILocation(line: 4506, column: 14, scope: !12136)
!12145 = !DILocation(line: 4508, column: 3, scope: !12136)
!12146 = !DILocation(line: 4511, column: 10, scope: !12136)
!12147 = !DILocation(line: 4511, column: 8, scope: !12136)
!12148 = !DILocation(line: 4513, column: 10, scope: !12136)
!12149 = !DILocation(line: 4513, column: 8, scope: !12136)
!12150 = !DILocation(line: 4515, column: 29, scope: !12136)
!12151 = !DILocation(line: 4515, column: 3, scope: !12136)
!12152 = !DILocation(line: 4515, column: 27, scope: !12136)
!12153 = !DILocation(line: 4516, column: 26, scope: !12136)
!12154 = !DILocation(line: 4516, column: 3, scope: !12136)
!12155 = !DILocation(line: 4516, column: 24, scope: !12136)
!12156 = !DILocation(line: 4517, column: 31, scope: !12136)
!12157 = !DILocation(line: 4517, column: 3, scope: !12136)
!12158 = !DILocation(line: 4517, column: 29, scope: !12136)
!12159 = !DILocation(line: 4518, column: 30, scope: !12136)
!12160 = !DILocation(line: 4518, column: 3, scope: !12136)
!12161 = !DILocation(line: 4518, column: 28, scope: !12136)
!12162 = !DILocation(line: 4520, column: 36, scope: !12136)
!12163 = !DILocation(line: 4520, column: 40, scope: !12136)
!12164 = !DILocation(line: 4520, column: 46, scope: !12136)
!12165 = !DILocation(line: 4520, column: 10, scope: !12136)
!12166 = !DILocation(line: 4520, column: 3, scope: !12136)
!12167 = distinct !DISubprogram(name: "has_label_address_in_static_1", scope: !3, file: !3, line: 2716, type: !4489, scopeLine: 2717, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12168 = !DILocalVariable(name: "nodep", arg: 1, scope: !12167, file: !3, line: 2716, type: !2585)
!12169 = !DILocation(line: 2716, column: 38, scope: !12167)
!12170 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !12167, file: !3, line: 2716, type: !4491)
!12171 = !DILocation(line: 2716, column: 50, scope: !12167)
!12172 = !DILocalVariable(name: "fnp", arg: 3, scope: !12167, file: !3, line: 2716, type: !2870)
!12173 = !DILocation(line: 2716, column: 71, scope: !12167)
!12174 = !DILocalVariable(name: "node", scope: !12167, file: !3, line: 2718, type: !2586)
!12175 = !DILocation(line: 2718, column: 8, scope: !12167)
!12176 = !DILocation(line: 2718, column: 16, scope: !12167)
!12177 = !DILocation(line: 2718, column: 15, scope: !12167)
!12178 = !DILocalVariable(name: "fn", scope: !12167, file: !3, line: 2719, type: !2586)
!12179 = !DILocation(line: 2719, column: 8, scope: !12167)
!12180 = !DILocation(line: 2719, column: 20, scope: !12167)
!12181 = !DILocation(line: 2719, column: 13, scope: !12167)
!12182 = !DILocation(line: 2721, column: 7, scope: !12183)
!12183 = distinct !DILexicalBlock(scope: !12167, file: !3, line: 2721, column: 7)
!12184 = !DILocation(line: 2721, column: 24, scope: !12183)
!12185 = !DILocation(line: 2721, column: 38, scope: !12183)
!12186 = !DILocation(line: 2721, column: 41, scope: !12183)
!12187 = !DILocation(line: 2721, column: 64, scope: !12183)
!12188 = !DILocation(line: 2721, column: 61, scope: !12183)
!12189 = !DILocation(line: 2721, column: 7, scope: !12167)
!12190 = !DILocation(line: 2722, column: 12, scope: !12183)
!12191 = !DILocation(line: 2722, column: 5, scope: !12183)
!12192 = !DILocation(line: 2724, column: 7, scope: !12193)
!12193 = distinct !DILexicalBlock(scope: !12167, file: !3, line: 2724, column: 7)
!12194 = !DILocation(line: 2724, column: 7, scope: !12167)
!12195 = !DILocation(line: 2725, column: 6, scope: !12193)
!12196 = !DILocation(line: 2725, column: 20, scope: !12193)
!12197 = !DILocation(line: 2725, column: 5, scope: !12193)
!12198 = !DILocation(line: 2727, column: 3, scope: !12167)
!12199 = !DILocation(line: 2728, column: 1, scope: !12167)
!12200 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_reserve", scope: !3305, file: !3305, line: 177, type: !12201, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12201 = !DISubroutineType(types: !12202)
!12202 = !{!2683, !8385, !2683}
!12203 = !DILocalVariable(name: "vec_", arg: 1, scope: !12200, file: !3305, line: 177, type: !8385)
!12204 = !DILocation(line: 177, column: 1, scope: !12200)
!12205 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12200, file: !3305, line: 177, type: !2683)
!12206 = !DILocalVariable(name: "extend", scope: !12200, file: !3305, line: 177, type: !2683)
!12207 = !DILocation(line: 177, column: 1, scope: !12208)
!12208 = distinct !DILexicalBlock(scope: !12200, file: !3305, line: 177, column: 1)
!12209 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_quick_push", scope: !3305, file: !3305, line: 176, type: !12210, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12210 = !DISubroutineType(types: !12211)
!12211 = !{!8384, !8365, !4045}
!12212 = !DILocalVariable(name: "vec_", arg: 1, scope: !12209, file: !3305, line: 176, type: !8365)
!12213 = !DILocation(line: 176, column: 1, scope: !12209)
!12214 = !DILocalVariable(name: "obj_", arg: 2, scope: !12209, file: !3305, line: 176, type: !4045)
!12215 = !DILocalVariable(name: "slot_", scope: !12209, file: !3305, line: 176, type: !8384)
!12216 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_space", scope: !3305, file: !3305, line: 176, type: !12217, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12217 = !DISubroutineType(types: !12218)
!12218 = !{!2683, !8365, !2683}
!12219 = !DILocalVariable(name: "vec_", arg: 1, scope: !12216, file: !3305, line: 176, type: !8365)
!12220 = !DILocation(line: 176, column: 1, scope: !12216)
!12221 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12216, file: !3305, line: 176, type: !2683)
!12222 = distinct !DISubprogram(name: "self_inlining_addr_expr", scope: !3, file: !3, line: 2235, type: !7848, scopeLine: 2236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12223 = !DILocalVariable(name: "value", arg: 1, scope: !12222, file: !3, line: 2235, type: !2586)
!12224 = !DILocation(line: 2235, column: 31, scope: !12222)
!12225 = !DILocalVariable(name: "fn", arg: 2, scope: !12222, file: !3, line: 2235, type: !2586)
!12226 = !DILocation(line: 2235, column: 43, scope: !12222)
!12227 = !DILocalVariable(name: "var", scope: !12222, file: !3, line: 2237, type: !2586)
!12228 = !DILocation(line: 2237, column: 8, scope: !12222)
!12229 = !DILocation(line: 2239, column: 7, scope: !12230)
!12230 = distinct !DILexicalBlock(scope: !12222, file: !3, line: 2239, column: 7)
!12231 = !DILocation(line: 2239, column: 25, scope: !12230)
!12232 = !DILocation(line: 2239, column: 7, scope: !12222)
!12233 = !DILocation(line: 2240, column: 5, scope: !12230)
!12234 = !DILocation(line: 2242, column: 27, scope: !12222)
!12235 = !DILocation(line: 2242, column: 9, scope: !12222)
!12236 = !DILocation(line: 2242, column: 7, scope: !12222)
!12237 = !DILocation(line: 2244, column: 10, scope: !12222)
!12238 = !DILocation(line: 2244, column: 14, scope: !12222)
!12239 = !DILocation(line: 2244, column: 35, scope: !12222)
!12240 = !DILocation(line: 2244, column: 40, scope: !12222)
!12241 = !DILocation(line: 2244, column: 17, scope: !12222)
!12242 = !DILocation(line: 0, scope: !12222)
!12243 = !DILocation(line: 2244, column: 3, scope: !12222)
!12244 = !DILocation(line: 2245, column: 1, scope: !12222)
!12245 = distinct !DISubprogram(name: "insert_debug_decl_map", scope: !3, file: !3, line: 154, type: !4301, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12246 = !DILocalVariable(name: "id", arg: 1, scope: !12245, file: !3, line: 154, type: !3983)
!12247 = !DILocation(line: 154, column: 40, scope: !12245)
!12248 = !DILocalVariable(name: "key", arg: 2, scope: !12245, file: !3, line: 154, type: !2586)
!12249 = !DILocation(line: 154, column: 49, scope: !12245)
!12250 = !DILocalVariable(name: "value", arg: 3, scope: !12245, file: !3, line: 154, type: !2586)
!12251 = !DILocation(line: 154, column: 59, scope: !12245)
!12252 = !DILocation(line: 156, column: 25, scope: !12253)
!12253 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 156, column: 7)
!12254 = !DILocation(line: 156, column: 29, scope: !12253)
!12255 = !DILocation(line: 156, column: 8, scope: !12253)
!12256 = !DILocation(line: 156, column: 7, scope: !12245)
!12257 = !DILocation(line: 157, column: 5, scope: !12253)
!12258 = !DILocation(line: 159, column: 8, scope: !12259)
!12259 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 159, column: 7)
!12260 = !DILocation(line: 159, column: 7, scope: !12245)
!12261 = !DILocation(line: 160, column: 5, scope: !12259)
!12262 = !DILocation(line: 162, column: 31, scope: !12263)
!12263 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 162, column: 7)
!12264 = !DILocation(line: 162, column: 8, scope: !12263)
!12265 = !DILocation(line: 162, column: 7, scope: !12245)
!12266 = !DILocation(line: 163, column: 5, scope: !12263)
!12267 = !DILocation(line: 165, column: 3, scope: !12245)
!12268 = !DILocation(line: 166, column: 3, scope: !12245)
!12269 = !DILocation(line: 168, column: 8, scope: !12270)
!12270 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 168, column: 7)
!12271 = !DILocation(line: 168, column: 12, scope: !12270)
!12272 = !DILocation(line: 168, column: 7, scope: !12245)
!12273 = !DILocation(line: 169, column: 21, scope: !12270)
!12274 = !DILocation(line: 169, column: 5, scope: !12270)
!12275 = !DILocation(line: 169, column: 9, scope: !12270)
!12276 = !DILocation(line: 169, column: 19, scope: !12270)
!12277 = !DILocation(line: 171, column: 46, scope: !12245)
!12278 = !DILocation(line: 171, column: 24, scope: !12245)
!12279 = !DILocation(line: 171, column: 28, scope: !12245)
!12280 = !DILocation(line: 171, column: 39, scope: !12245)
!12281 = !DILocation(line: 171, column: 4, scope: !12245)
!12282 = !DILocation(line: 171, column: 44, scope: !12245)
!12283 = !DILocation(line: 172, column: 1, scope: !12245)
!12284 = distinct !DISubprogram(name: "insert_init_debug_bind", scope: !3, file: !3, line: 2252, type: !12285, scopeLine: 2255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12285 = !DISubroutineType(types: !12286)
!12286 = !{!2917, !3983, !3473, !2586, !2586, !2917}
!12287 = !DILocalVariable(name: "id", arg: 1, scope: !12284, file: !3, line: 2252, type: !3983)
!12288 = !DILocation(line: 2252, column: 41, scope: !12284)
!12289 = !DILocalVariable(name: "bb", arg: 2, scope: !12284, file: !3, line: 2253, type: !3473)
!12290 = !DILocation(line: 2253, column: 16, scope: !12284)
!12291 = !DILocalVariable(name: "var", arg: 3, scope: !12284, file: !3, line: 2253, type: !2586)
!12292 = !DILocation(line: 2253, column: 25, scope: !12284)
!12293 = !DILocalVariable(name: "value", arg: 4, scope: !12284, file: !3, line: 2253, type: !2586)
!12294 = !DILocation(line: 2253, column: 35, scope: !12284)
!12295 = !DILocalVariable(name: "base_stmt", arg: 5, scope: !12284, file: !3, line: 2254, type: !2917)
!12296 = !DILocation(line: 2254, column: 11, scope: !12284)
!12297 = !DILocalVariable(name: "note", scope: !12284, file: !3, line: 2256, type: !2917)
!12298 = !DILocation(line: 2256, column: 10, scope: !12284)
!12299 = !DILocalVariable(name: "gsi", scope: !12284, file: !3, line: 2257, type: !4261)
!12300 = !DILocation(line: 2257, column: 24, scope: !12284)
!12301 = !DILocalVariable(name: "tracked_var", scope: !12284, file: !3, line: 2258, type: !2586)
!12302 = !DILocation(line: 2258, column: 8, scope: !12284)
!12303 = !DILocation(line: 2260, column: 25, scope: !12304)
!12304 = distinct !DILexicalBlock(scope: !12284, file: !3, line: 2260, column: 7)
!12305 = !DILocation(line: 2260, column: 29, scope: !12304)
!12306 = !DILocation(line: 2260, column: 8, scope: !12304)
!12307 = !DILocation(line: 2260, column: 7, scope: !12284)
!12308 = !DILocation(line: 2261, column: 5, scope: !12304)
!12309 = !DILocation(line: 2263, column: 8, scope: !12310)
!12310 = distinct !DILexicalBlock(scope: !12284, file: !3, line: 2263, column: 7)
!12311 = !DILocation(line: 2263, column: 7, scope: !12284)
!12312 = !DILocation(line: 2264, column: 5, scope: !12310)
!12313 = !DILocation(line: 2266, column: 40, scope: !12284)
!12314 = !DILocation(line: 2266, column: 17, scope: !12284)
!12315 = !DILocation(line: 2266, column: 15, scope: !12284)
!12316 = !DILocation(line: 2267, column: 8, scope: !12317)
!12317 = distinct !DILexicalBlock(scope: !12284, file: !3, line: 2267, column: 7)
!12318 = !DILocation(line: 2267, column: 7, scope: !12284)
!12319 = !DILocation(line: 2268, column: 5, scope: !12317)
!12320 = !DILocation(line: 2270, column: 7, scope: !12321)
!12321 = distinct !DILexicalBlock(scope: !12284, file: !3, line: 2270, column: 7)
!12322 = !DILocation(line: 2270, column: 7, scope: !12284)
!12323 = !DILocation(line: 2272, column: 26, scope: !12324)
!12324 = distinct !DILexicalBlock(scope: !12321, file: !3, line: 2271, column: 5)
!12325 = !DILocation(line: 2272, column: 13, scope: !12324)
!12326 = !DILocation(line: 2273, column: 12, scope: !12327)
!12327 = distinct !DILexicalBlock(scope: !12324, file: !3, line: 2273, column: 11)
!12328 = !DILocation(line: 2273, column: 22, scope: !12327)
!12329 = !DILocation(line: 2273, column: 26, scope: !12327)
!12330 = !DILocation(line: 2273, column: 11, scope: !12324)
!12331 = !DILocation(line: 2274, column: 14, scope: !12327)
!12332 = !DILocation(line: 2274, column: 12, scope: !12327)
!12333 = !DILocation(line: 2274, column: 2, scope: !12327)
!12334 = !DILocation(line: 2275, column: 5, scope: !12324)
!12335 = !DILocation(line: 2277, column: 10, scope: !12284)
!12336 = !DILocation(line: 2277, column: 8, scope: !12284)
!12337 = !DILocation(line: 2279, column: 7, scope: !12338)
!12338 = distinct !DILexicalBlock(scope: !12284, file: !3, line: 2279, column: 7)
!12339 = !DILocation(line: 2279, column: 7, scope: !12284)
!12340 = !DILocation(line: 2281, column: 12, scope: !12341)
!12341 = distinct !DILexicalBlock(scope: !12342, file: !3, line: 2281, column: 11)
!12342 = distinct !DILexicalBlock(scope: !12338, file: !3, line: 2280, column: 5)
!12343 = !DILocation(line: 2281, column: 11, scope: !12342)
!12344 = !DILocation(line: 2282, column: 26, scope: !12341)
!12345 = !DILocation(line: 2282, column: 2, scope: !12341)
!12346 = !DILocation(line: 2284, column: 27, scope: !12341)
!12347 = !DILocation(line: 2284, column: 2, scope: !12341)
!12348 = !DILocation(line: 2285, column: 5, scope: !12342)
!12349 = !DILocation(line: 2287, column: 10, scope: !12284)
!12350 = !DILocation(line: 2287, column: 3, scope: !12284)
!12351 = !DILocation(line: 2288, column: 1, scope: !12284)
!12352 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !1618, file: !1618, line: 34, type: !12353, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12353 = !DISubroutineType(types: !12354)
!12354 = !{!2683, !8866, !2683}
!12355 = !DILocalVariable(name: "vec_", arg: 1, scope: !12352, file: !1618, line: 34, type: !8866)
!12356 = !DILocation(line: 34, column: 1, scope: !12352)
!12357 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12352, file: !1618, line: 34, type: !2683)
!12358 = !DILocalVariable(name: "extend", scope: !12352, file: !1618, line: 34, type: !2683)
!12359 = !DILocation(line: 34, column: 1, scope: !12360)
!12360 = distinct !DILexicalBlock(scope: !12352, file: !1618, line: 34, column: 1)
!12361 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !1618, file: !1618, line: 33, type: !12362, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12362 = !DISubroutineType(types: !12363)
!12363 = !{!4109, !9221, !2917}
!12364 = !DILocalVariable(name: "vec_", arg: 1, scope: !12361, file: !1618, line: 33, type: !9221)
!12365 = !DILocation(line: 33, column: 1, scope: !12361)
!12366 = !DILocalVariable(name: "obj_", arg: 2, scope: !12361, file: !1618, line: 33, type: !2917)
!12367 = !DILocalVariable(name: "slot_", scope: !12361, file: !1618, line: 33, type: !4109)
!12368 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !1618, file: !1618, line: 33, type: !12369, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12369 = !DISubroutineType(types: !12370)
!12370 = !{!2683, !9221, !2683}
!12371 = !DILocalVariable(name: "vec_", arg: 1, scope: !12368, file: !1618, line: 33, type: !9221)
!12372 = !DILocation(line: 33, column: 1, scope: !12368)
!12373 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12368, file: !1618, line: 33, type: !2683)
!12374 = distinct !DISubprogram(name: "remapped_type", scope: !3, file: !3, line: 473, type: !4330, scopeLine: 474, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12375 = !DILocalVariable(name: "type", arg: 1, scope: !12374, file: !3, line: 473, type: !2586)
!12376 = !DILocation(line: 473, column: 21, scope: !12374)
!12377 = !DILocalVariable(name: "id", arg: 2, scope: !12374, file: !3, line: 473, type: !3983)
!12378 = !DILocation(line: 473, column: 43, scope: !12374)
!12379 = !DILocalVariable(name: "node", scope: !12374, file: !3, line: 475, type: !2585)
!12380 = !DILocation(line: 475, column: 9, scope: !12374)
!12381 = !DILocation(line: 477, column: 7, scope: !12382)
!12382 = distinct !DILexicalBlock(scope: !12374, file: !3, line: 477, column: 7)
!12383 = !DILocation(line: 477, column: 12, scope: !12382)
!12384 = !DILocation(line: 477, column: 7, scope: !12374)
!12385 = !DILocation(line: 478, column: 12, scope: !12382)
!12386 = !DILocation(line: 478, column: 5, scope: !12382)
!12387 = !DILocation(line: 481, column: 41, scope: !12374)
!12388 = !DILocation(line: 481, column: 45, scope: !12374)
!12389 = !DILocation(line: 481, column: 55, scope: !12374)
!12390 = !DILocation(line: 481, column: 19, scope: !12374)
!12391 = !DILocation(line: 481, column: 10, scope: !12374)
!12392 = !DILocation(line: 481, column: 8, scope: !12374)
!12393 = !DILocation(line: 482, column: 7, scope: !12394)
!12394 = distinct !DILexicalBlock(scope: !12374, file: !3, line: 482, column: 7)
!12395 = !DILocation(line: 482, column: 7, scope: !12374)
!12396 = !DILocation(line: 483, column: 13, scope: !12394)
!12397 = !DILocation(line: 483, column: 12, scope: !12394)
!12398 = !DILocation(line: 483, column: 5, scope: !12394)
!12399 = !DILocation(line: 485, column: 5, scope: !12394)
!12400 = !DILocation(line: 486, column: 1, scope: !12374)
!12401 = distinct !DISubprogram(name: "copy_cfg_body", scope: !3, file: !3, line: 2040, type: !9087, scopeLine: 2042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12402 = !DILocalVariable(name: "id", arg: 1, scope: !12401, file: !3, line: 2040, type: !3983)
!12403 = !DILocation(line: 2040, column: 33, scope: !12401)
!12404 = !DILocalVariable(name: "count", arg: 2, scope: !12401, file: !3, line: 2040, type: !3127)
!12405 = !DILocation(line: 2040, column: 47, scope: !12401)
!12406 = !DILocalVariable(name: "frequency_scale", arg: 3, scope: !12401, file: !3, line: 2040, type: !2683)
!12407 = !DILocation(line: 2040, column: 58, scope: !12401)
!12408 = !DILocalVariable(name: "entry_block_map", arg: 4, scope: !12401, file: !3, line: 2041, type: !3473)
!12409 = !DILocation(line: 2041, column: 21, scope: !12401)
!12410 = !DILocalVariable(name: "exit_block_map", arg: 5, scope: !12401, file: !3, line: 2041, type: !3473)
!12411 = !DILocation(line: 2041, column: 50, scope: !12401)
!12412 = !DILocalVariable(name: "callee_fndecl", scope: !12401, file: !3, line: 2043, type: !2586)
!12413 = !DILocation(line: 2043, column: 8, scope: !12401)
!12414 = !DILocation(line: 2043, column: 24, scope: !12401)
!12415 = !DILocation(line: 2043, column: 28, scope: !12401)
!12416 = !DILocalVariable(name: "src_cfun", scope: !12401, file: !3, line: 2045, type: !3303)
!12417 = !DILocation(line: 2045, column: 20, scope: !12401)
!12418 = !DILocation(line: 2045, column: 31, scope: !12401)
!12419 = !DILocalVariable(name: "cfun_to_copy", scope: !12401, file: !3, line: 2046, type: !3303)
!12420 = !DILocation(line: 2046, column: 20, scope: !12401)
!12421 = !DILocalVariable(name: "bb", scope: !12401, file: !3, line: 2047, type: !3473)
!12422 = !DILocation(line: 2047, column: 15, scope: !12401)
!12423 = !DILocalVariable(name: "new_fndecl", scope: !12401, file: !3, line: 2048, type: !2586)
!12424 = !DILocation(line: 2048, column: 8, scope: !12401)
!12425 = !DILocalVariable(name: "count_scale", scope: !12401, file: !3, line: 2049, type: !3127)
!12426 = !DILocation(line: 2049, column: 13, scope: !12401)
!12427 = !DILocalVariable(name: "last", scope: !12401, file: !3, line: 2050, type: !2683)
!12428 = !DILocation(line: 2050, column: 7, scope: !12401)
!12429 = !DILocation(line: 2052, column: 7, scope: !12430)
!12430 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2052, column: 7)
!12431 = !DILocation(line: 2052, column: 48, scope: !12430)
!12432 = !DILocation(line: 2052, column: 7, scope: !12401)
!12433 = !DILocation(line: 2053, column: 39, scope: !12430)
!12434 = !DILocation(line: 2053, column: 37, scope: !12430)
!12435 = !DILocation(line: 2054, column: 8, scope: !12430)
!12436 = !DILocation(line: 2054, column: 49, scope: !12430)
!12437 = !DILocation(line: 2054, column: 6, scope: !12430)
!12438 = !DILocation(line: 2053, column: 17, scope: !12430)
!12439 = !DILocation(line: 2053, column: 5, scope: !12430)
!12440 = !DILocation(line: 2056, column: 17, scope: !12430)
!12441 = !DILocation(line: 2059, column: 3, scope: !12401)
!12442 = !DILocation(line: 2062, column: 3, scope: !12401)
!12443 = !DILocation(line: 2065, column: 33, scope: !12401)
!12444 = !DILocation(line: 2065, column: 18, scope: !12401)
!12445 = !DILocation(line: 2065, column: 22, scope: !12401)
!12446 = !DILocation(line: 2065, column: 31, scope: !12401)
!12447 = !DILocation(line: 2065, column: 16, scope: !12401)
!12448 = !DILocation(line: 2067, column: 54, scope: !12401)
!12449 = !DILocation(line: 2067, column: 3, scope: !12401)
!12450 = !DILocation(line: 2067, column: 48, scope: !12401)
!12451 = !DILocation(line: 2067, column: 52, scope: !12401)
!12452 = !DILocation(line: 2068, column: 53, scope: !12401)
!12453 = !DILocation(line: 2068, column: 3, scope: !12401)
!12454 = !DILocation(line: 2068, column: 47, scope: !12401)
!12455 = !DILocation(line: 2068, column: 51, scope: !12401)
!12456 = !DILocation(line: 2069, column: 26, scope: !12401)
!12457 = !DILocation(line: 2069, column: 3, scope: !12401)
!12458 = !DILocation(line: 2069, column: 20, scope: !12401)
!12459 = !DILocation(line: 2069, column: 24, scope: !12401)
!12460 = !DILocation(line: 2070, column: 25, scope: !12401)
!12461 = !DILocation(line: 2070, column: 3, scope: !12401)
!12462 = !DILocation(line: 2070, column: 19, scope: !12401)
!12463 = !DILocation(line: 2070, column: 23, scope: !12401)
!12464 = !DILocation(line: 2073, column: 7, scope: !12465)
!12465 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2073, column: 7)
!12466 = !DILocation(line: 2073, column: 13, scope: !12465)
!12467 = !DILocation(line: 2073, column: 7, scope: !12401)
!12468 = !DILocation(line: 2074, column: 40, scope: !12465)
!12469 = !DILocation(line: 2074, column: 60, scope: !12465)
!12470 = !DILocation(line: 2074, column: 64, scope: !12465)
!12471 = !DILocation(line: 2075, column: 26, scope: !12465)
!12472 = !DILocation(line: 2074, column: 18, scope: !12465)
!12473 = !DILocation(line: 2074, column: 5, scope: !12465)
!12474 = !DILocation(line: 2074, column: 9, scope: !12465)
!12475 = !DILocation(line: 2074, column: 16, scope: !12465)
!12476 = !DILocation(line: 2078, column: 3, scope: !12477)
!12477 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2078, column: 3)
!12478 = !DILocation(line: 2078, column: 3, scope: !12479)
!12479 = distinct !DILexicalBlock(scope: !12477, file: !3, line: 2078, column: 3)
!12480 = !DILocalVariable(name: "new_bb", scope: !12481, file: !3, line: 2080, type: !3473)
!12481 = distinct !DILexicalBlock(scope: !12479, file: !3, line: 2079, column: 5)
!12482 = !DILocation(line: 2080, column: 19, scope: !12481)
!12483 = !DILocation(line: 2080, column: 37, scope: !12481)
!12484 = !DILocation(line: 2080, column: 41, scope: !12481)
!12485 = !DILocation(line: 2080, column: 45, scope: !12481)
!12486 = !DILocation(line: 2080, column: 62, scope: !12481)
!12487 = !DILocation(line: 2080, column: 28, scope: !12481)
!12488 = !DILocation(line: 2081, column: 17, scope: !12481)
!12489 = !DILocation(line: 2081, column: 7, scope: !12481)
!12490 = !DILocation(line: 2081, column: 11, scope: !12481)
!12491 = !DILocation(line: 2081, column: 15, scope: !12481)
!12492 = !DILocation(line: 2082, column: 21, scope: !12481)
!12493 = !DILocation(line: 2082, column: 7, scope: !12481)
!12494 = !DILocation(line: 2082, column: 15, scope: !12481)
!12495 = !DILocation(line: 2082, column: 19, scope: !12481)
!12496 = !DILocation(line: 2083, column: 5, scope: !12481)
!12497 = distinct !{!12497, !12476, !12498}
!12498 = !DILocation(line: 2083, column: 5, scope: !12477)
!12499 = !DILocation(line: 2085, column: 10, scope: !12401)
!12500 = !DILocation(line: 2085, column: 8, scope: !12401)
!12501 = !DILocation(line: 2088, column: 3, scope: !12502)
!12502 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2088, column: 3)
!12503 = !DILocation(line: 2088, column: 3, scope: !12504)
!12504 = distinct !DILexicalBlock(scope: !12502, file: !3, line: 2088, column: 3)
!12505 = !DILocation(line: 2089, column: 24, scope: !12504)
!12506 = !DILocation(line: 2089, column: 28, scope: !12504)
!12507 = !DILocation(line: 2089, column: 41, scope: !12504)
!12508 = !DILocation(line: 2089, column: 5, scope: !12504)
!12509 = distinct !{!12509, !12501, !12510}
!12510 = !DILocation(line: 2089, column: 55, scope: !12502)
!12511 = !DILocation(line: 2091, column: 24, scope: !12512)
!12512 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2091, column: 7)
!12513 = !DILocation(line: 2091, column: 7, scope: !12512)
!12514 = !DILocation(line: 2091, column: 7, scope: !12401)
!12515 = !DILocation(line: 2092, column: 5, scope: !12516)
!12516 = distinct !DILexicalBlock(scope: !12512, file: !3, line: 2092, column: 5)
!12517 = !DILocation(line: 2092, column: 5, scope: !12518)
!12518 = distinct !DILexicalBlock(scope: !12516, file: !3, line: 2092, column: 5)
!12519 = !DILocation(line: 2093, column: 25, scope: !12518)
!12520 = !DILocation(line: 2093, column: 29, scope: !12518)
!12521 = !DILocation(line: 2093, column: 7, scope: !12518)
!12522 = distinct !{!12522, !12515, !12523}
!12523 = !DILocation(line: 2093, column: 31, scope: !12516)
!12524 = !DILocation(line: 2095, column: 3, scope: !12525)
!12525 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2095, column: 3)
!12526 = !DILocation(line: 2095, column: 3, scope: !12527)
!12527 = distinct !DILexicalBlock(scope: !12525, file: !3, line: 2095, column: 3)
!12528 = !DILocation(line: 2097, column: 21, scope: !12529)
!12529 = distinct !DILexicalBlock(scope: !12527, file: !3, line: 2096, column: 5)
!12530 = !DILocation(line: 2097, column: 25, scope: !12529)
!12531 = !DILocation(line: 2097, column: 8, scope: !12529)
!12532 = !DILocation(line: 2097, column: 31, scope: !12529)
!12533 = !DILocation(line: 2097, column: 35, scope: !12529)
!12534 = !DILocation(line: 2098, column: 7, scope: !12529)
!12535 = !DILocation(line: 2098, column: 11, scope: !12529)
!12536 = !DILocation(line: 2098, column: 15, scope: !12529)
!12537 = !DILocation(line: 2099, column: 5, scope: !12529)
!12538 = distinct !{!12538, !12524, !12539}
!12539 = !DILocation(line: 2099, column: 5, scope: !12525)
!12540 = !DILocation(line: 2103, column: 3, scope: !12401)
!12541 = !DILocation(line: 2103, column: 10, scope: !12542)
!12542 = distinct !DILexicalBlock(scope: !12543, file: !3, line: 2103, column: 3)
!12543 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2103, column: 3)
!12544 = !DILocation(line: 2103, column: 17, scope: !12542)
!12545 = !DILocation(line: 2103, column: 15, scope: !12542)
!12546 = !DILocation(line: 2103, column: 3, scope: !12543)
!12547 = !DILocation(line: 2104, column: 5, scope: !12542)
!12548 = !DILocation(line: 2104, column: 25, scope: !12542)
!12549 = !DILocation(line: 2104, column: 29, scope: !12542)
!12550 = !DILocation(line: 2103, column: 39, scope: !12542)
!12551 = !DILocation(line: 2103, column: 3, scope: !12542)
!12552 = distinct !{!12552, !12546, !12553}
!12553 = !DILocation(line: 2104, column: 31, scope: !12543)
!12554 = !DILocation(line: 2105, column: 3, scope: !12401)
!12555 = !DILocation(line: 2105, column: 20, scope: !12401)
!12556 = !DILocation(line: 2105, column: 24, scope: !12401)
!12557 = !DILocation(line: 2106, column: 3, scope: !12401)
!12558 = !DILocation(line: 2106, column: 19, scope: !12401)
!12559 = !DILocation(line: 2106, column: 23, scope: !12401)
!12560 = !DILocation(line: 2108, column: 7, scope: !12561)
!12561 = distinct !DILexicalBlock(scope: !12401, file: !3, line: 2108, column: 7)
!12562 = !DILocation(line: 2108, column: 11, scope: !12561)
!12563 = !DILocation(line: 2108, column: 7, scope: !12401)
!12564 = !DILocation(line: 2110, column: 28, scope: !12565)
!12565 = distinct !DILexicalBlock(scope: !12561, file: !3, line: 2109, column: 5)
!12566 = !DILocation(line: 2110, column: 32, scope: !12565)
!12567 = !DILocation(line: 2110, column: 7, scope: !12565)
!12568 = !DILocation(line: 2111, column: 7, scope: !12565)
!12569 = !DILocation(line: 2111, column: 11, scope: !12565)
!12570 = !DILocation(line: 2111, column: 18, scope: !12565)
!12571 = !DILocation(line: 2112, column: 5, scope: !12565)
!12572 = !DILocation(line: 2114, column: 10, scope: !12401)
!12573 = !DILocation(line: 2114, column: 3, scope: !12401)
!12574 = distinct !DISubprogram(name: "copy_debug_stmts", scope: !3, file: !3, line: 2185, type: !9226, scopeLine: 2186, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12575 = !DILocalVariable(name: "id", arg: 1, scope: !12574, file: !3, line: 2185, type: !3983)
!12576 = !DILocation(line: 2185, column: 35, scope: !12574)
!12577 = !DILocalVariable(name: "i", scope: !12574, file: !3, line: 2187, type: !3061)
!12578 = !DILocation(line: 2187, column: 10, scope: !12574)
!12579 = !DILocalVariable(name: "stmt", scope: !12574, file: !3, line: 2188, type: !2917)
!12580 = !DILocation(line: 2188, column: 10, scope: !12574)
!12581 = !DILocation(line: 2190, column: 8, scope: !12582)
!12582 = distinct !DILexicalBlock(scope: !12574, file: !3, line: 2190, column: 7)
!12583 = !DILocation(line: 2190, column: 12, scope: !12582)
!12584 = !DILocation(line: 2190, column: 7, scope: !12574)
!12585 = !DILocation(line: 2191, column: 5, scope: !12582)
!12586 = !DILocation(line: 2193, column: 10, scope: !12587)
!12587 = distinct !DILexicalBlock(scope: !12574, file: !3, line: 2193, column: 3)
!12588 = !DILocation(line: 2193, column: 8, scope: !12587)
!12589 = !DILocation(line: 2193, column: 15, scope: !12590)
!12590 = distinct !DILexicalBlock(scope: !12587, file: !3, line: 2193, column: 3)
!12591 = !DILocation(line: 2193, column: 3, scope: !12587)
!12592 = !DILocation(line: 2194, column: 22, scope: !12590)
!12593 = !DILocation(line: 2194, column: 28, scope: !12590)
!12594 = !DILocation(line: 2194, column: 5, scope: !12590)
!12595 = !DILocation(line: 2193, column: 64, scope: !12590)
!12596 = !DILocation(line: 2193, column: 3, scope: !12590)
!12597 = distinct !{!12597, !12591, !12598}
!12598 = !DILocation(line: 2194, column: 30, scope: !12587)
!12599 = !DILocation(line: 2196, column: 3, scope: !12574)
!12600 = !DILocation(line: 2197, column: 1, scope: !12574)
!12601 = distinct !DISubprogram(name: "remap_decl_1", scope: !3, file: !3, line: 1962, type: !12602, scopeLine: 1963, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12602 = !DISubroutineType(types: !12603)
!12603 = !{!2586, !2586, !2870}
!12604 = !DILocalVariable(name: "decl", arg: 1, scope: !12601, file: !3, line: 1962, type: !2586)
!12605 = !DILocation(line: 1962, column: 20, scope: !12601)
!12606 = !DILocalVariable(name: "data", arg: 2, scope: !12601, file: !3, line: 1962, type: !2870)
!12607 = !DILocation(line: 1962, column: 32, scope: !12601)
!12608 = !DILocation(line: 1964, column: 22, scope: !12601)
!12609 = !DILocation(line: 1964, column: 47, scope: !12601)
!12610 = !DILocation(line: 1964, column: 28, scope: !12601)
!12611 = !DILocation(line: 1964, column: 10, scope: !12601)
!12612 = !DILocation(line: 1964, column: 3, scope: !12601)
!12613 = distinct !DISubprogram(name: "copy_bb", scope: !3, file: !3, line: 1459, type: !12614, scopeLine: 1461, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!12614 = !DISubroutineType(types: !12615)
!12615 = !{!3473, !3983, !3473, !2683, !3127}
!12616 = !DILocalVariable(name: "id", arg: 1, scope: !12613, file: !3, line: 1459, type: !3983)
!12617 = !DILocation(line: 1459, column: 26, scope: !12613)
!12618 = !DILocalVariable(name: "bb", arg: 2, scope: !12613, file: !3, line: 1459, type: !3473)
!12619 = !DILocation(line: 1459, column: 42, scope: !12613)
!12620 = !DILocalVariable(name: "frequency_scale", arg: 3, scope: !12613, file: !3, line: 1459, type: !2683)
!12621 = !DILocation(line: 1459, column: 50, scope: !12613)
!12622 = !DILocalVariable(name: "count_scale", arg: 4, scope: !12613, file: !3, line: 1460, type: !3127)
!12623 = !DILocation(line: 1460, column: 20, scope: !12613)
!12624 = !DILocalVariable(name: "gsi", scope: !12613, file: !3, line: 1462, type: !4261)
!12625 = !DILocation(line: 1462, column: 24, scope: !12613)
!12626 = !DILocalVariable(name: "copy_gsi", scope: !12613, file: !3, line: 1462, type: !4261)
!12627 = !DILocation(line: 1462, column: 29, scope: !12613)
!12628 = !DILocalVariable(name: "seq_gsi", scope: !12613, file: !3, line: 1462, type: !4261)
!12629 = !DILocation(line: 1462, column: 39, scope: !12613)
!12630 = !DILocalVariable(name: "copy_basic_block", scope: !12613, file: !3, line: 1463, type: !3473)
!12631 = !DILocation(line: 1463, column: 15, scope: !12613)
!12632 = !DILocalVariable(name: "decl", scope: !12613, file: !3, line: 1464, type: !2586)
!12633 = !DILocation(line: 1464, column: 8, scope: !12613)
!12634 = !DILocalVariable(name: "freq", scope: !12613, file: !3, line: 1465, type: !3127)
!12635 = !DILocation(line: 1465, column: 13, scope: !12613)
!12636 = !DILocation(line: 1470, column: 56, scope: !12613)
!12637 = !DILocation(line: 1470, column: 60, scope: !12613)
!12638 = !DILocation(line: 1470, column: 69, scope: !12613)
!12639 = !DILocation(line: 1470, column: 42, scope: !12613)
!12640 = !DILocation(line: 1469, column: 22, scope: !12613)
!12641 = !DILocation(line: 1469, column: 20, scope: !12613)
!12642 = !DILocation(line: 1471, column: 29, scope: !12613)
!12643 = !DILocation(line: 1471, column: 33, scope: !12613)
!12644 = !DILocation(line: 1471, column: 41, scope: !12613)
!12645 = !DILocation(line: 1471, column: 39, scope: !12613)
!12646 = !DILocation(line: 1471, column: 53, scope: !12613)
!12647 = !DILocation(line: 1471, column: 3, scope: !12613)
!12648 = !DILocation(line: 1471, column: 21, scope: !12613)
!12649 = !DILocation(line: 1471, column: 27, scope: !12613)
!12650 = !DILocation(line: 1475, column: 22, scope: !12613)
!12651 = !DILocation(line: 1475, column: 26, scope: !12613)
!12652 = !DILocation(line: 1475, column: 11, scope: !12613)
!12653 = !DILocation(line: 1475, column: 38, scope: !12613)
!12654 = !DILocation(line: 1475, column: 36, scope: !12613)
!12655 = !DILocation(line: 1475, column: 54, scope: !12613)
!12656 = !DILocation(line: 1475, column: 8, scope: !12613)
!12657 = !DILocation(line: 1478, column: 7, scope: !12658)
!12658 = distinct !DILexicalBlock(scope: !12613, file: !3, line: 1478, column: 7)
!12659 = !DILocation(line: 1478, column: 12, scope: !12658)
!12660 = !DILocation(line: 1478, column: 7, scope: !12613)
!12661 = !DILocation(line: 1479, column: 10, scope: !12658)
!12662 = !DILocation(line: 1479, column: 5, scope: !12658)
!12663 = !DILocation(line: 1480, column: 33, scope: !12613)
!12664 = !DILocation(line: 1480, column: 3, scope: !12613)
!12665 = !DILocation(line: 1480, column: 21, scope: !12613)
!12666 = !DILocation(line: 1480, column: 31, scope: !12613)
!12667 = !DILocation(line: 1482, column: 28, scope: !12613)
!12668 = !DILocation(line: 1482, column: 14, scope: !12613)
!12669 = !DILocation(line: 1484, column: 28, scope: !12670)
!12670 = distinct !DILexicalBlock(scope: !12613, file: !3, line: 1484, column: 3)
!12671 = !DILocation(line: 1484, column: 14, scope: !12670)
!12672 = !DILocation(line: 1484, column: 8, scope: !12670)
!12673 = !DILocation(line: 1484, column: 34, scope: !12674)
!12674 = distinct !DILexicalBlock(scope: !12670, file: !3, line: 1484, column: 3)
!12675 = !DILocation(line: 1484, column: 33, scope: !12674)
!12676 = !DILocation(line: 1484, column: 3, scope: !12670)
!12677 = !DILocalVariable(name: "stmt", scope: !12678, file: !3, line: 1486, type: !2917)
!12678 = distinct !DILexicalBlock(scope: !12674, file: !3, line: 1485, column: 5)
!12679 = !DILocation(line: 1486, column: 14, scope: !12678)
!12680 = !DILocation(line: 1486, column: 21, scope: !12678)
!12681 = !DILocalVariable(name: "orig_stmt", scope: !12678, file: !3, line: 1487, type: !2917)
!12682 = !DILocation(line: 1487, column: 14, scope: !12678)
!12683 = !DILocation(line: 1487, column: 26, scope: !12678)
!12684 = !DILocation(line: 1489, column: 7, scope: !12678)
!12685 = !DILocation(line: 1489, column: 11, scope: !12678)
!12686 = !DILocation(line: 1489, column: 22, scope: !12678)
!12687 = !DILocation(line: 1490, column: 33, scope: !12678)
!12688 = !DILocation(line: 1490, column: 39, scope: !12678)
!12689 = !DILocation(line: 1490, column: 14, scope: !12678)
!12690 = !DILocation(line: 1490, column: 12, scope: !12678)
!12691 = !DILocation(line: 1491, column: 25, scope: !12692)
!12692 = distinct !DILexicalBlock(scope: !12678, file: !3, line: 1491, column: 11)
!12693 = !DILocation(line: 1491, column: 11, scope: !12692)
!12694 = !DILocation(line: 1491, column: 11, scope: !12678)
!12695 = !DILocation(line: 1492, column: 2, scope: !12692)
!12696 = !DILocation(line: 1494, column: 41, scope: !12678)
!12697 = !DILocation(line: 1494, column: 47, scope: !12678)
!12698 = !DILocation(line: 1494, column: 53, scope: !12678)
!12699 = !DILocation(line: 1494, column: 57, scope: !12678)
!12700 = !DILocation(line: 1494, column: 67, scope: !12678)
!12701 = !DILocation(line: 1494, column: 7, scope: !12678)
!12702 = !DILocation(line: 1495, column: 17, scope: !12678)
!12703 = !DILocation(line: 1499, column: 29, scope: !12704)
!12704 = distinct !DILexicalBlock(scope: !12678, file: !3, line: 1499, column: 11)
!12705 = !DILocation(line: 1499, column: 11, scope: !12704)
!12706 = !DILocation(line: 1500, column: 4, scope: !12704)
!12707 = !DILocation(line: 1500, column: 31, scope: !12704)
!12708 = !DILocation(line: 1500, column: 7, scope: !12704)
!12709 = !DILocation(line: 1500, column: 37, scope: !12704)
!12710 = !DILocation(line: 1501, column: 4, scope: !12704)
!12711 = !DILocation(line: 1501, column: 43, scope: !12704)
!12712 = !DILocation(line: 1501, column: 23, scope: !12704)
!12713 = !DILocation(line: 1501, column: 8, scope: !12704)
!12714 = !DILocation(line: 1499, column: 11, scope: !12678)
!12715 = !DILocalVariable(name: "new_rhs", scope: !12716, file: !3, line: 1503, type: !2586)
!12716 = distinct !DILexicalBlock(scope: !12704, file: !3, line: 1502, column: 2)
!12717 = !DILocation(line: 1503, column: 9, scope: !12716)
!12718 = !DILocation(line: 1505, column: 32, scope: !12716)
!12719 = !DILocation(line: 1505, column: 12, scope: !12716)
!12720 = !DILocation(line: 1504, column: 14, scope: !12716)
!12721 = !DILocation(line: 1504, column: 12, scope: !12716)
!12722 = !DILocation(line: 1507, column: 28, scope: !12716)
!12723 = !DILocation(line: 1507, column: 34, scope: !12716)
!12724 = !DILocation(line: 1507, column: 4, scope: !12716)
!12725 = !DILocation(line: 1508, column: 4, scope: !12716)
!12726 = !DILocation(line: 1508, column: 8, scope: !12716)
!12727 = !DILocation(line: 1508, column: 19, scope: !12716)
!12728 = !DILocation(line: 1509, column: 2, scope: !12716)
!12729 = !DILocation(line: 1511, column: 35, scope: !12678)
!12730 = !DILocation(line: 1511, column: 7, scope: !12678)
!12731 = !DILocation(line: 1513, column: 11, scope: !12732)
!12732 = distinct !DILexicalBlock(scope: !12678, file: !3, line: 1513, column: 11)
!12733 = !DILocation(line: 1513, column: 15, scope: !12732)
!12734 = !DILocation(line: 1513, column: 11, scope: !12678)
!12735 = !DILocation(line: 1514, column: 30, scope: !12732)
!12736 = !DILocation(line: 1514, column: 2, scope: !12732)
!12737 = !DILocation(line: 1518, column: 11, scope: !12738)
!12738 = distinct !DILexicalBlock(scope: !12678, file: !3, line: 1518, column: 11)
!12739 = !DILocation(line: 1518, column: 11, scope: !12678)
!12740 = !DILocation(line: 1519, column: 27, scope: !12738)
!12741 = !DILocation(line: 1519, column: 13, scope: !12738)
!12742 = !DILocation(line: 1519, column: 2, scope: !12738)
!12743 = !DILocation(line: 1521, column: 2, scope: !12738)
!12744 = !DILocation(line: 1526, column: 7, scope: !12678)
!12745 = !DILocalVariable(name: "fn", scope: !12746, file: !3, line: 1528, type: !2586)
!12746 = distinct !DILexicalBlock(scope: !12678, file: !3, line: 1527, column: 2)
!12747 = !DILocation(line: 1528, column: 9, scope: !12746)
!12748 = !DILocation(line: 1530, column: 11, scope: !12746)
!12749 = !DILocation(line: 1530, column: 9, scope: !12746)
!12750 = !DILocation(line: 1531, column: 24, scope: !12751)
!12751 = distinct !DILexicalBlock(scope: !12746, file: !3, line: 1531, column: 8)
!12752 = !DILocation(line: 1531, column: 8, scope: !12751)
!12753 = !DILocation(line: 1532, column: 8, scope: !12751)
!12754 = !DILocation(line: 1532, column: 38, scope: !12751)
!12755 = !DILocation(line: 1532, column: 11, scope: !12751)
!12756 = !DILocation(line: 1533, column: 8, scope: !12751)
!12757 = !DILocation(line: 1533, column: 11, scope: !12751)
!12758 = !DILocation(line: 1533, column: 15, scope: !12751)
!12759 = !DILocation(line: 1531, column: 8, scope: !12746)
!12760 = !DILocalVariable(name: "p", scope: !12761, file: !3, line: 1537, type: !2586)
!12761 = distinct !DILexicalBlock(scope: !12751, file: !3, line: 1534, column: 6)
!12762 = !DILocation(line: 1537, column: 13, scope: !12761)
!12763 = !DILocalVariable(name: "new_call", scope: !12761, file: !3, line: 1538, type: !2917)
!12764 = !DILocation(line: 1538, column: 15, scope: !12761)
!12765 = !DILocalVariable(name: "argarray", scope: !12761, file: !3, line: 1539, type: !4274)
!12766 = !DILocation(line: 1539, column: 25, scope: !12761)
!12767 = !DILocalVariable(name: "nargs", scope: !12761, file: !3, line: 1540, type: !3061)
!12768 = !DILocation(line: 1540, column: 15, scope: !12761)
!12769 = !DILocation(line: 1540, column: 45, scope: !12761)
!12770 = !DILocation(line: 1540, column: 49, scope: !12761)
!12771 = !DILocation(line: 1540, column: 23, scope: !12761)
!12772 = !DILocalVariable(name: "n", scope: !12761, file: !3, line: 1541, type: !3061)
!12773 = !DILocation(line: 1541, column: 15, scope: !12761)
!12774 = !DILocation(line: 1543, column: 17, scope: !12775)
!12775 = distinct !DILexicalBlock(scope: !12761, file: !3, line: 1543, column: 8)
!12776 = !DILocation(line: 1543, column: 15, scope: !12775)
!12777 = !DILocation(line: 1543, column: 13, scope: !12775)
!12778 = !DILocation(line: 1543, column: 46, scope: !12779)
!12779 = distinct !DILexicalBlock(scope: !12775, file: !3, line: 1543, column: 8)
!12780 = !DILocation(line: 1543, column: 8, scope: !12775)
!12781 = !DILocation(line: 1544, column: 8, scope: !12779)
!12782 = !DILocation(line: 1544, column: 3, scope: !12779)
!12783 = !DILocation(line: 1543, column: 53, scope: !12779)
!12784 = !DILocation(line: 1543, column: 51, scope: !12779)
!12785 = !DILocation(line: 1543, column: 8, scope: !12779)
!12786 = distinct !{!12786, !12780, !12787}
!12787 = !DILocation(line: 1544, column: 8, scope: !12775)
!12788 = !DILocation(line: 1547, column: 12, scope: !12761)
!12789 = !DILocation(line: 1547, column: 42, scope: !12761)
!12790 = !DILocation(line: 1547, column: 20, scope: !12761)
!12791 = !DILocation(line: 1547, column: 18, scope: !12761)
!12792 = !DILocation(line: 1547, column: 10, scope: !12761)
!12793 = !DILocation(line: 1548, column: 19, scope: !12761)
!12794 = !DILocation(line: 1548, column: 17, scope: !12761)
!12795 = !DILocation(line: 1549, column: 8, scope: !12761)
!12796 = !DILocation(line: 1552, column: 16, scope: !12761)
!12797 = !DILocation(line: 1552, column: 8, scope: !12761)
!12798 = !DILocation(line: 1553, column: 30, scope: !12761)
!12799 = !DILocation(line: 1553, column: 9, scope: !12761)
!12800 = !DILocation(line: 1554, column: 31, scope: !12761)
!12801 = !DILocation(line: 1554, column: 9, scope: !12761)
!12802 = !DILocation(line: 1554, column: 37, scope: !12761)
!12803 = !DILocation(line: 1557, column: 16, scope: !12761)
!12804 = !DILocation(line: 1557, column: 68, scope: !12761)
!12805 = !DILocation(line: 1557, column: 46, scope: !12761)
!12806 = !DILocation(line: 1557, column: 44, scope: !12761)
!12807 = !DILocation(line: 1557, column: 8, scope: !12761)
!12808 = !DILocation(line: 1558, column: 30, scope: !12761)
!12809 = !DILocation(line: 1558, column: 34, scope: !12761)
!12810 = !DILocation(line: 1558, column: 9, scope: !12761)
!12811 = !DILocation(line: 1559, column: 29, scope: !12761)
!12812 = !DILocation(line: 1559, column: 33, scope: !12761)
!12813 = !DILocation(line: 1559, column: 7, scope: !12761)
!12814 = !DILocation(line: 1559, column: 48, scope: !12761)
!12815 = !DILocation(line: 1559, column: 46, scope: !12761)
!12816 = !DILocation(line: 1559, column: 4, scope: !12761)
!12817 = !DILocation(line: 1560, column: 9, scope: !12761)
!12818 = !DILocation(line: 1560, column: 15, scope: !12761)
!12819 = !DILocation(line: 1562, column: 58, scope: !12761)
!12820 = !DILocation(line: 1562, column: 42, scope: !12761)
!12821 = !DILocation(line: 1563, column: 7, scope: !12761)
!12822 = !DILocation(line: 1562, column: 19, scope: !12761)
!12823 = !DILocation(line: 1562, column: 17, scope: !12761)
!12824 = !DILocation(line: 1565, column: 8, scope: !12761)
!12825 = !DILocation(line: 1569, column: 32, scope: !12761)
!12826 = !DILocation(line: 1569, column: 42, scope: !12761)
!12827 = !DILocation(line: 1569, column: 8, scope: !12761)
!12828 = !DILocation(line: 1570, column: 37, scope: !12761)
!12829 = !DILocation(line: 1570, column: 8, scope: !12761)
!12830 = !DILocation(line: 1571, column: 29, scope: !12761)
!12831 = !DILocation(line: 1571, column: 56, scope: !12761)
!12832 = !DILocation(line: 1571, column: 39, scope: !12761)
!12833 = !DILocation(line: 1571, column: 8, scope: !12761)
!12834 = !DILocation(line: 1572, column: 26, scope: !12761)
!12835 = !DILocation(line: 1572, column: 50, scope: !12761)
!12836 = !DILocation(line: 1572, column: 36, scope: !12761)
!12837 = !DILocation(line: 1572, column: 8, scope: !12761)
!12838 = !DILocation(line: 1573, column: 29, scope: !12761)
!12839 = !DILocation(line: 1573, column: 56, scope: !12761)
!12840 = !DILocation(line: 1573, column: 39, scope: !12761)
!12841 = !DILocation(line: 1573, column: 8, scope: !12761)
!12842 = !DILocation(line: 1575, column: 32, scope: !12761)
!12843 = !DILocation(line: 1575, column: 8, scope: !12761)
!12844 = !DILocation(line: 1576, column: 23, scope: !12761)
!12845 = !DILocation(line: 1576, column: 8, scope: !12761)
!12846 = !DILocation(line: 1577, column: 15, scope: !12761)
!12847 = !DILocation(line: 1577, column: 13, scope: !12761)
!12848 = !DILocation(line: 1578, column: 6, scope: !12761)
!12849 = !DILocation(line: 1579, column: 29, scope: !12850)
!12850 = distinct !DILexicalBlock(scope: !12751, file: !3, line: 1579, column: 13)
!12851 = !DILocation(line: 1579, column: 13, scope: !12850)
!12852 = !DILocation(line: 1580, column: 6, scope: !12850)
!12853 = !DILocation(line: 1580, column: 9, scope: !12850)
!12854 = !DILocation(line: 1580, column: 13, scope: !12850)
!12855 = !DILocation(line: 1581, column: 6, scope: !12850)
!12856 = !DILocation(line: 1581, column: 37, scope: !12850)
!12857 = !DILocation(line: 1581, column: 17, scope: !12850)
!12858 = !DILocation(line: 1581, column: 15, scope: !12850)
!12859 = !DILocation(line: 1582, column: 6, scope: !12850)
!12860 = !DILocation(line: 1582, column: 9, scope: !12850)
!12861 = !DILocation(line: 1582, column: 36, scope: !12850)
!12862 = !DILocation(line: 1583, column: 6, scope: !12850)
!12863 = !DILocation(line: 1583, column: 9, scope: !12850)
!12864 = !DILocation(line: 1583, column: 35, scope: !12850)
!12865 = !DILocation(line: 1579, column: 13, scope: !12751)
!12866 = !DILocalVariable(name: "nargs", scope: !12867, file: !3, line: 1587, type: !3061)
!12867 = distinct !DILexicalBlock(scope: !12850, file: !3, line: 1584, column: 6)
!12868 = !DILocation(line: 1587, column: 15, scope: !12867)
!12869 = !DILocation(line: 1587, column: 45, scope: !12867)
!12870 = !DILocation(line: 1587, column: 49, scope: !12867)
!12871 = !DILocation(line: 1587, column: 23, scope: !12867)
!12872 = !DILocalVariable(name: "count", scope: !12867, file: !3, line: 1588, type: !2586)
!12873 = !DILocation(line: 1588, column: 13, scope: !12867)
!12874 = !DILocalVariable(name: "p", scope: !12867, file: !3, line: 1588, type: !2586)
!12875 = !DILocation(line: 1588, column: 20, scope: !12867)
!12876 = !DILocalVariable(name: "new_stmt", scope: !12867, file: !3, line: 1589, type: !2917)
!12877 = !DILocation(line: 1589, column: 15, scope: !12867)
!12878 = !DILocation(line: 1591, column: 17, scope: !12879)
!12879 = distinct !DILexicalBlock(scope: !12867, file: !3, line: 1591, column: 8)
!12880 = !DILocation(line: 1591, column: 15, scope: !12879)
!12881 = !DILocation(line: 1591, column: 13, scope: !12879)
!12882 = !DILocation(line: 1591, column: 46, scope: !12883)
!12883 = distinct !DILexicalBlock(scope: !12879, file: !3, line: 1591, column: 8)
!12884 = !DILocation(line: 1591, column: 8, scope: !12879)
!12885 = !DILocation(line: 1592, column: 8, scope: !12883)
!12886 = !DILocation(line: 1592, column: 3, scope: !12883)
!12887 = !DILocation(line: 1591, column: 53, scope: !12883)
!12888 = !DILocation(line: 1591, column: 51, scope: !12883)
!12889 = !DILocation(line: 1591, column: 8, scope: !12883)
!12890 = distinct !{!12890, !12884, !12891}
!12891 = !DILocation(line: 1592, column: 8, scope: !12879)
!12892 = !DILocation(line: 1594, column: 31, scope: !12867)
!12893 = !DILocation(line: 1594, column: 50, scope: !12867)
!12894 = !DILocation(line: 1594, column: 16, scope: !12867)
!12895 = !DILocation(line: 1594, column: 14, scope: !12867)
!12896 = !DILocation(line: 1595, column: 19, scope: !12867)
!12897 = !DILocation(line: 1595, column: 17, scope: !12867)
!12898 = !DILocation(line: 1596, column: 32, scope: !12867)
!12899 = !DILocation(line: 1596, column: 8, scope: !12867)
!12900 = !DILocation(line: 1597, column: 15, scope: !12867)
!12901 = !DILocation(line: 1597, column: 13, scope: !12867)
!12902 = !DILocation(line: 1598, column: 6, scope: !12867)
!12903 = !DILocation(line: 1611, column: 8, scope: !12904)
!12904 = distinct !DILexicalBlock(scope: !12746, file: !3, line: 1611, column: 8)
!12905 = !DILocation(line: 1611, column: 12, scope: !12904)
!12906 = !DILocation(line: 1611, column: 8, scope: !12746)
!12907 = !DILocation(line: 1612, column: 26, scope: !12904)
!12908 = !DILocation(line: 1612, column: 30, scope: !12904)
!12909 = !DILocation(line: 1612, column: 50, scope: !12904)
!12910 = !DILocation(line: 1612, column: 6, scope: !12904)
!12911 = !DILocation(line: 1616, column: 24, scope: !12912)
!12912 = distinct !DILexicalBlock(scope: !12746, file: !3, line: 1616, column: 8)
!12913 = !DILocation(line: 1616, column: 8, scope: !12912)
!12914 = !DILocation(line: 1616, column: 8, scope: !12746)
!12915 = !DILocalVariable(name: "edge", scope: !12916, file: !3, line: 1618, type: !3995)
!12916 = distinct !DILexicalBlock(scope: !12912, file: !3, line: 1617, column: 6)
!12917 = !DILocation(line: 1618, column: 28, scope: !12916)
!12918 = !DILocalVariable(name: "flags", scope: !12916, file: !3, line: 1619, type: !2683)
!12919 = !DILocation(line: 1619, column: 12, scope: !12916)
!12920 = !DILocation(line: 1621, column: 16, scope: !12916)
!12921 = !DILocation(line: 1621, column: 20, scope: !12916)
!12922 = !DILocation(line: 1621, column: 8, scope: !12916)
!12923 = !DILocation(line: 1624, column: 25, scope: !12924)
!12924 = distinct !DILexicalBlock(scope: !12916, file: !3, line: 1622, column: 3)
!12925 = !DILocation(line: 1624, column: 29, scope: !12924)
!12926 = !DILocation(line: 1624, column: 39, scope: !12924)
!12927 = !DILocation(line: 1624, column: 12, scope: !12924)
!12928 = !DILocation(line: 1624, column: 10, scope: !12924)
!12929 = !DILocation(line: 1625, column: 9, scope: !12930)
!12930 = distinct !DILexicalBlock(scope: !12924, file: !3, line: 1625, column: 9)
!12931 = !DILocation(line: 1625, column: 9, scope: !12924)
!12932 = !DILocalVariable(name: "edge_freq", scope: !12933, file: !3, line: 1627, type: !2683)
!12933 = distinct !DILexicalBlock(scope: !12930, file: !3, line: 1626, column: 7)
!12934 = !DILocation(line: 1627, column: 13, scope: !12933)
!12935 = !DILocation(line: 1627, column: 25, scope: !12933)
!12936 = !DILocation(line: 1627, column: 31, scope: !12933)
!12937 = !DILocation(line: 1628, column: 35, scope: !12933)
!12938 = !DILocation(line: 1628, column: 41, scope: !12933)
!12939 = !DILocation(line: 1628, column: 45, scope: !12933)
!12940 = !DILocation(line: 1628, column: 55, scope: !12933)
!12941 = !DILocation(line: 1629, column: 26, scope: !12933)
!12942 = !DILocation(line: 1629, column: 14, scope: !12933)
!12943 = !DILocation(line: 1631, column: 14, scope: !12933)
!12944 = !DILocation(line: 1631, column: 20, scope: !12933)
!12945 = !DILocation(line: 1628, column: 16, scope: !12933)
!12946 = !DILocation(line: 1628, column: 14, scope: !12933)
!12947 = !DILocation(line: 1636, column: 45, scope: !12933)
!12948 = !DILocation(line: 1636, column: 49, scope: !12933)
!12949 = !DILocation(line: 1636, column: 59, scope: !12933)
!12950 = !DILocation(line: 1637, column: 10, scope: !12933)
!12951 = !DILocation(line: 1636, column: 13, scope: !12933)
!12952 = !DILocation(line: 1635, column: 9, scope: !12933)
!12953 = !DILocation(line: 1635, column: 15, scope: !12933)
!12954 = !DILocation(line: 1636, column: 11, scope: !12933)
!12955 = !DILocation(line: 1638, column: 13, scope: !12956)
!12956 = distinct !DILexicalBlock(scope: !12933, file: !3, line: 1638, column: 13)
!12957 = !DILocation(line: 1639, column: 12, scope: !12956)
!12958 = !DILocation(line: 1639, column: 15, scope: !12956)
!12959 = !DILocation(line: 1639, column: 50, scope: !12956)
!12960 = !DILocation(line: 1640, column: 6, scope: !12956)
!12961 = !DILocation(line: 1640, column: 10, scope: !12956)
!12962 = !DILocation(line: 1640, column: 22, scope: !12956)
!12963 = !DILocation(line: 1640, column: 28, scope: !12956)
!12964 = !DILocation(line: 1640, column: 38, scope: !12956)
!12965 = !DILocation(line: 1640, column: 20, scope: !12956)
!12966 = !DILocation(line: 1641, column: 10, scope: !12956)
!12967 = !DILocation(line: 1641, column: 13, scope: !12956)
!12968 = !DILocation(line: 1641, column: 25, scope: !12956)
!12969 = !DILocation(line: 1641, column: 31, scope: !12956)
!12970 = !DILocation(line: 1641, column: 41, scope: !12956)
!12971 = !DILocation(line: 1641, column: 23, scope: !12956)
!12972 = !DILocation(line: 1638, column: 13, scope: !12933)
!12973 = !DILocation(line: 1643, column: 15, scope: !12974)
!12974 = distinct !DILexicalBlock(scope: !12956, file: !3, line: 1642, column: 4)
!12975 = !DILocation(line: 1645, column: 10, scope: !12974)
!12976 = !DILocation(line: 1646, column: 8, scope: !12974)
!12977 = !DILocation(line: 1646, column: 14, scope: !12974)
!12978 = !DILocation(line: 1643, column: 6, scope: !12974)
!12979 = !DILocation(line: 1647, column: 15, scope: !12974)
!12980 = !DILocation(line: 1649, column: 8, scope: !12974)
!12981 = !DILocation(line: 1649, column: 12, scope: !12974)
!12982 = !DILocation(line: 1650, column: 8, scope: !12974)
!12983 = !DILocation(line: 1650, column: 12, scope: !12974)
!12984 = !DILocation(line: 1651, column: 8, scope: !12974)
!12985 = !DILocation(line: 1651, column: 26, scope: !12974)
!12986 = !DILocation(line: 1647, column: 6, scope: !12974)
!12987 = !DILocation(line: 1652, column: 4, scope: !12974)
!12988 = !DILocation(line: 1653, column: 58, scope: !12933)
!12989 = !DILocation(line: 1653, column: 16, scope: !12933)
!12990 = !DILocation(line: 1653, column: 14, scope: !12933)
!12991 = !DILocation(line: 1654, column: 7, scope: !12933)
!12992 = !DILocation(line: 1655, column: 5, scope: !12924)
!12993 = !DILocation(line: 1658, column: 44, scope: !12924)
!12994 = !DILocation(line: 1658, column: 48, scope: !12924)
!12995 = !DILocation(line: 1659, column: 9, scope: !12924)
!12996 = !DILocation(line: 1659, column: 20, scope: !12924)
!12997 = !DILocation(line: 1658, column: 5, scope: !12924)
!12998 = !DILocation(line: 1660, column: 25, scope: !12924)
!12999 = !DILocation(line: 1660, column: 29, scope: !12924)
!13000 = !DILocation(line: 1660, column: 39, scope: !12924)
!13001 = !DILocation(line: 1660, column: 12, scope: !12924)
!13002 = !DILocation(line: 1660, column: 10, scope: !12924)
!13003 = !DILocation(line: 1661, column: 5, scope: !12924)
!13004 = !DILocation(line: 1664, column: 25, scope: !12924)
!13005 = !DILocation(line: 1664, column: 29, scope: !12924)
!13006 = !DILocation(line: 1664, column: 39, scope: !12924)
!13007 = !DILocation(line: 1664, column: 12, scope: !12924)
!13008 = !DILocation(line: 1664, column: 10, scope: !12924)
!13009 = !DILocation(line: 1665, column: 9, scope: !13010)
!13010 = distinct !DILexicalBlock(scope: !12924, file: !3, line: 1665, column: 9)
!13011 = !DILocation(line: 1665, column: 9, scope: !12924)
!13012 = !DILocation(line: 1666, column: 29, scope: !13010)
!13013 = !DILocation(line: 1666, column: 35, scope: !13010)
!13014 = !DILocation(line: 1666, column: 7, scope: !13010)
!13015 = !DILocation(line: 1667, column: 5, scope: !12924)
!13016 = !DILocation(line: 1670, column: 5, scope: !12924)
!13017 = !DILocation(line: 1671, column: 3, scope: !12924)
!13018 = !DILocation(line: 1675, column: 14, scope: !13019)
!13019 = distinct !DILexicalBlock(scope: !12916, file: !3, line: 1675, column: 12)
!13020 = !DILocation(line: 1676, column: 6, scope: !13019)
!13021 = !DILocation(line: 1676, column: 10, scope: !13019)
!13022 = !DILocation(line: 1676, column: 16, scope: !13019)
!13023 = !DILocation(line: 1677, column: 10, scope: !13019)
!13024 = !DILocation(line: 1677, column: 13, scope: !13019)
!13025 = !DILocation(line: 1677, column: 17, scope: !13019)
!13026 = !DILocation(line: 1677, column: 44, scope: !13019)
!13027 = !DILocation(line: 1678, column: 5, scope: !13019)
!13028 = !DILocation(line: 1678, column: 24, scope: !13019)
!13029 = !DILocation(line: 1678, column: 8, scope: !13019)
!13030 = !DILocation(line: 1679, column: 5, scope: !13019)
!13031 = !DILocation(line: 1679, column: 34, scope: !13019)
!13032 = !DILocation(line: 1679, column: 14, scope: !13019)
!13033 = !DILocation(line: 1679, column: 12, scope: !13019)
!13034 = !DILocation(line: 1679, column: 41, scope: !13019)
!13035 = !DILocation(line: 1675, column: 12, scope: !12916)
!13036 = !DILocalVariable(name: "dest", scope: !13037, file: !3, line: 1681, type: !3990)
!13037 = distinct !DILexicalBlock(scope: !13019, file: !3, line: 1680, column: 3)
!13038 = !DILocation(line: 1681, column: 25, scope: !13037)
!13039 = !DILocation(line: 1681, column: 45, scope: !13037)
!13040 = !DILocation(line: 1681, column: 32, scope: !13037)
!13041 = !DILocation(line: 1689, column: 5, scope: !13037)
!13042 = !DILocation(line: 1691, column: 9, scope: !13043)
!13043 = distinct !DILexicalBlock(scope: !13037, file: !3, line: 1691, column: 9)
!13044 = !DILocation(line: 1691, column: 13, scope: !13043)
!13045 = !DILocation(line: 1691, column: 40, scope: !13043)
!13046 = !DILocation(line: 1691, column: 9, scope: !13037)
!13047 = !DILocation(line: 1693, column: 10, scope: !13043)
!13048 = !DILocation(line: 1693, column: 14, scope: !13043)
!13049 = !DILocation(line: 1693, column: 24, scope: !13043)
!13050 = !DILocation(line: 1693, column: 30, scope: !13043)
!13051 = !DILocation(line: 1693, column: 41, scope: !13043)
!13052 = !DILocation(line: 1693, column: 47, scope: !13043)
!13053 = !DILocation(line: 1693, column: 51, scope: !13043)
!13054 = !DILocation(line: 1694, column: 42, scope: !13043)
!13055 = !DILocation(line: 1694, column: 46, scope: !13043)
!13056 = !DILocation(line: 1694, column: 56, scope: !13043)
!13057 = !DILocation(line: 1695, column: 21, scope: !13043)
!13058 = !DILocation(line: 1694, column: 10, scope: !13043)
!13059 = !DILocation(line: 1696, column: 10, scope: !13043)
!13060 = !DILocation(line: 1696, column: 14, scope: !13043)
!13061 = !DILocation(line: 1692, column: 7, scope: !13043)
!13062 = !DILocation(line: 1698, column: 27, scope: !13043)
!13063 = !DILocation(line: 1698, column: 31, scope: !13043)
!13064 = !DILocation(line: 1698, column: 41, scope: !13043)
!13065 = !DILocation(line: 1698, column: 47, scope: !13043)
!13066 = !DILocation(line: 1699, column: 6, scope: !13043)
!13067 = !DILocation(line: 1699, column: 10, scope: !13043)
!13068 = !DILocation(line: 1701, column: 9, scope: !13043)
!13069 = !DILocation(line: 1701, column: 13, scope: !13043)
!13070 = !DILocation(line: 1701, column: 23, scope: !13043)
!13071 = !DILocation(line: 1701, column: 29, scope: !13043)
!13072 = !DILocation(line: 1700, column: 6, scope: !13043)
!13073 = !DILocation(line: 1702, column: 6, scope: !13043)
!13074 = !DILocation(line: 1702, column: 10, scope: !13043)
!13075 = !DILocation(line: 1698, column: 7, scope: !13043)
!13076 = !DILocation(line: 1702, column: 23, scope: !13043)
!13077 = !DILocation(line: 1703, column: 9, scope: !13043)
!13078 = !DILocation(line: 1704, column: 9, scope: !13079)
!13079 = distinct !DILexicalBlock(scope: !13037, file: !3, line: 1704, column: 9)
!13080 = !DILocation(line: 1704, column: 9, scope: !13037)
!13081 = !DILocation(line: 1706, column: 18, scope: !13082)
!13082 = distinct !DILexicalBlock(scope: !13079, file: !3, line: 1705, column: 7)
!13083 = !DILocation(line: 1707, column: 29, scope: !13082)
!13084 = !DILocation(line: 1707, column: 11, scope: !13082)
!13085 = !DILocation(line: 1706, column: 9, scope: !13082)
!13086 = !DILocation(line: 1708, column: 7, scope: !13082)
!13087 = !DILocation(line: 1709, column: 3, scope: !13037)
!13088 = !DILocation(line: 1711, column: 35, scope: !12916)
!13089 = !DILocation(line: 1711, column: 16, scope: !12916)
!13090 = !DILocation(line: 1711, column: 14, scope: !12916)
!13091 = !DILocation(line: 1712, column: 12, scope: !13092)
!13092 = distinct !DILexicalBlock(scope: !12916, file: !3, line: 1712, column: 12)
!13093 = !DILocation(line: 1712, column: 18, scope: !13092)
!13094 = !DILocation(line: 1712, column: 12, scope: !12916)
!13095 = !DILocation(line: 1713, column: 3, scope: !13092)
!13096 = !DILocation(line: 1713, column: 9, scope: !13092)
!13097 = !DILocation(line: 1713, column: 22, scope: !13092)
!13098 = !DILocation(line: 1714, column: 12, scope: !13099)
!13099 = distinct !DILexicalBlock(scope: !12916, file: !3, line: 1714, column: 12)
!13100 = !DILocation(line: 1714, column: 18, scope: !13099)
!13101 = !DILocation(line: 1714, column: 12, scope: !12916)
!13102 = !DILocation(line: 1715, column: 3, scope: !13099)
!13103 = !DILocation(line: 1715, column: 9, scope: !13099)
!13104 = !DILocation(line: 1715, column: 22, scope: !13099)
!13105 = !DILocation(line: 1716, column: 6, scope: !12916)
!13106 = !DILocation(line: 1718, column: 32, scope: !12746)
!13107 = !DILocation(line: 1718, column: 38, scope: !12746)
!13108 = !DILocation(line: 1718, column: 44, scope: !12746)
!13109 = !DILocation(line: 1718, column: 48, scope: !12746)
!13110 = !DILocation(line: 1718, column: 58, scope: !12746)
!13111 = !DILocation(line: 1719, column: 11, scope: !12746)
!13112 = !DILocation(line: 1719, column: 15, scope: !12746)
!13113 = !DILocation(line: 1719, column: 23, scope: !12746)
!13114 = !DILocation(line: 1719, column: 27, scope: !12746)
!13115 = !DILocation(line: 1718, column: 4, scope: !12746)
!13116 = !DILocation(line: 1721, column: 25, scope: !13117)
!13117 = distinct !DILexicalBlock(scope: !12746, file: !3, line: 1721, column: 8)
!13118 = !DILocation(line: 1721, column: 8, scope: !13117)
!13119 = !DILocation(line: 1721, column: 31, scope: !13117)
!13120 = !DILocation(line: 1721, column: 52, scope: !13117)
!13121 = !DILocation(line: 1721, column: 35, scope: !13117)
!13122 = !DILocation(line: 1721, column: 8, scope: !12746)
!13123 = !DILocalVariable(name: "i", scope: !13124, file: !3, line: 1723, type: !13125)
!13124 = distinct !DILexicalBlock(scope: !13117, file: !3, line: 1722, column: 6)
!13125 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !2578, line: 140, baseType: !13126)
!13126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !2578, line: 131, size: 320, elements: !13127)
!13127 = !{!13128, !13129, !13130, !13132, !13134, !13135, !13136}
!13128 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !13126, file: !2578, line: 133, baseType: !2706, size: 8)
!13129 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !13126, file: !2578, line: 134, baseType: !2577, size: 32, offset: 32)
!13130 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !13126, file: !2578, line: 135, baseType: !13131, size: 64, offset: 64)
!13131 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !2578, line: 42, baseType: !2946)
!13132 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !13126, file: !2578, line: 136, baseType: !13133, size: 64, offset: 128)
!13133 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !2578, line: 50, baseType: !2952)
!13134 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !13126, file: !2578, line: 137, baseType: !2683, size: 32, offset: 192)
!13135 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !13126, file: !2578, line: 138, baseType: !2683, size: 32, offset: 224)
!13136 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !13126, file: !2578, line: 139, baseType: !2917, size: 64, offset: 256)
!13137 = !DILocation(line: 1723, column: 20, scope: !13124)
!13138 = !DILocalVariable(name: "def", scope: !13124, file: !3, line: 1724, type: !2586)
!13139 = !DILocation(line: 1724, column: 13, scope: !13124)
!13140 = !DILocation(line: 1726, column: 34, scope: !13124)
!13141 = !DILocation(line: 1726, column: 8, scope: !13124)
!13142 = !DILocation(line: 1727, column: 8, scope: !13143)
!13143 = distinct !DILexicalBlock(scope: !13124, file: !3, line: 1727, column: 8)
!13144 = !DILocation(line: 1727, column: 8, scope: !13145)
!13145 = distinct !DILexicalBlock(scope: !13143, file: !3, line: 1727, column: 8)
!13146 = !DILocation(line: 1728, column: 7, scope: !13147)
!13147 = distinct !DILexicalBlock(scope: !13145, file: !3, line: 1728, column: 7)
!13148 = !DILocation(line: 1728, column: 23, scope: !13147)
!13149 = !DILocation(line: 1728, column: 7, scope: !13145)
!13150 = !DILocation(line: 1729, column: 31, scope: !13147)
!13151 = !DILocation(line: 1729, column: 5, scope: !13147)
!13152 = !DILocation(line: 1729, column: 29, scope: !13147)
!13153 = !DILocation(line: 1728, column: 26, scope: !13147)
!13154 = distinct !{!13154, !13142, !13155}
!13155 = !DILocation(line: 1729, column: 31, scope: !13143)
!13156 = !DILocation(line: 1730, column: 6, scope: !13124)
!13157 = !DILocation(line: 1732, column: 4, scope: !12746)
!13158 = !DILocation(line: 1733, column: 2, scope: !12746)
!13159 = !DILocation(line: 1734, column: 15, scope: !12678)
!13160 = !DILocation(line: 1734, column: 14, scope: !12678)
!13161 = distinct !{!13161, !12744, !13162}
!13162 = !DILocation(line: 1734, column: 35, scope: !12678)
!13163 = !DILocation(line: 1736, column: 31, scope: !12678)
!13164 = !DILocation(line: 1736, column: 18, scope: !12678)
!13165 = !DILocation(line: 1737, column: 5, scope: !12678)
!13166 = !DILocation(line: 1484, column: 51, scope: !12674)
!13167 = !DILocation(line: 1484, column: 3, scope: !12674)
!13168 = distinct !{!13168, !12676, !13169}
!13169 = !DILocation(line: 1737, column: 5, scope: !12670)
!13170 = !DILocation(line: 1739, column: 10, scope: !12613)
!13171 = !DILocation(line: 1739, column: 3, scope: !12613)
!13172 = distinct !DISubprogram(name: "copy_edges_for_bb", scope: !3, file: !3, line: 1815, type: !13173, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13173 = !DISubroutineType(types: !13174)
!13174 = !{null, !3473, !3127, !3473}
!13175 = !DILocalVariable(name: "bb", arg: 1, scope: !13172, file: !3, line: 1815, type: !3473)
!13176 = !DILocation(line: 1815, column: 32, scope: !13172)
!13177 = !DILocalVariable(name: "count_scale", arg: 2, scope: !13172, file: !3, line: 1815, type: !3127)
!13178 = !DILocation(line: 1815, column: 46, scope: !13172)
!13179 = !DILocalVariable(name: "ret_bb", arg: 3, scope: !13172, file: !3, line: 1815, type: !3473)
!13180 = !DILocation(line: 1815, column: 71, scope: !13172)
!13181 = !DILocalVariable(name: "new_bb", scope: !13172, file: !3, line: 1817, type: !3473)
!13182 = !DILocation(line: 1817, column: 15, scope: !13172)
!13183 = !DILocation(line: 1817, column: 38, scope: !13172)
!13184 = !DILocation(line: 1817, column: 42, scope: !13172)
!13185 = !DILocation(line: 1817, column: 24, scope: !13172)
!13186 = !DILocalVariable(name: "ei", scope: !13172, file: !3, line: 1818, type: !13187)
!13187 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !337, line: 682, baseType: !13188)
!13188 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !337, line: 679, size: 128, elements: !13189)
!13189 = !{!13190, !13191}
!13190 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !13188, file: !337, line: 680, baseType: !7, size: 32)
!13191 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !13188, file: !337, line: 681, baseType: !13192, size: 64, offset: 64)
!13192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2885, size: 64)
!13193 = !DILocation(line: 1818, column: 17, scope: !13172)
!13194 = !DILocalVariable(name: "old_edge", scope: !13172, file: !3, line: 1819, type: !2897)
!13195 = !DILocation(line: 1819, column: 8, scope: !13172)
!13196 = !DILocalVariable(name: "si", scope: !13172, file: !3, line: 1820, type: !4261)
!13197 = !DILocation(line: 1820, column: 24, scope: !13172)
!13198 = !DILocalVariable(name: "flags", scope: !13172, file: !3, line: 1821, type: !2683)
!13199 = !DILocation(line: 1821, column: 7, scope: !13172)
!13200 = !DILocation(line: 1825, column: 3, scope: !13201)
!13201 = distinct !DILexicalBlock(scope: !13172, file: !3, line: 1825, column: 3)
!13202 = !DILocation(line: 1825, column: 3, scope: !13203)
!13203 = distinct !DILexicalBlock(scope: !13201, file: !3, line: 1825, column: 3)
!13204 = !DILocation(line: 1826, column: 11, scope: !13205)
!13205 = distinct !DILexicalBlock(scope: !13203, file: !3, line: 1826, column: 9)
!13206 = !DILocation(line: 1826, column: 21, scope: !13205)
!13207 = !DILocation(line: 1826, column: 27, scope: !13205)
!13208 = !DILocation(line: 1826, column: 9, scope: !13203)
!13209 = !DILocalVariable(name: "new_edge", scope: !13210, file: !3, line: 1828, type: !2897)
!13210 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 1827, column: 7)
!13211 = !DILocation(line: 1828, column: 7, scope: !13210)
!13212 = !DILocation(line: 1830, column: 10, scope: !13210)
!13213 = !DILocation(line: 1830, column: 20, scope: !13210)
!13214 = !DILocation(line: 1830, column: 8, scope: !13210)
!13215 = !DILocation(line: 1833, column: 6, scope: !13216)
!13216 = distinct !DILexicalBlock(scope: !13210, file: !3, line: 1833, column: 6)
!13217 = !DILocation(line: 1833, column: 16, scope: !13216)
!13218 = !DILocation(line: 1833, column: 22, scope: !13216)
!13219 = !DILocation(line: 1833, column: 28, scope: !13216)
!13220 = !DILocation(line: 1833, column: 42, scope: !13216)
!13221 = !DILocation(line: 1833, column: 46, scope: !13216)
!13222 = !DILocation(line: 1833, column: 56, scope: !13216)
!13223 = !DILocation(line: 1834, column: 6, scope: !13216)
!13224 = !DILocation(line: 1834, column: 9, scope: !13216)
!13225 = !DILocation(line: 1834, column: 19, scope: !13216)
!13226 = !DILocation(line: 1834, column: 25, scope: !13216)
!13227 = !DILocation(line: 1834, column: 32, scope: !13216)
!13228 = !DILocation(line: 1834, column: 29, scope: !13216)
!13229 = !DILocation(line: 1833, column: 6, scope: !13210)
!13230 = !DILocation(line: 1835, column: 10, scope: !13216)
!13231 = !DILocation(line: 1835, column: 4, scope: !13216)
!13232 = !DILocation(line: 1836, column: 24, scope: !13210)
!13233 = !DILocation(line: 1836, column: 46, scope: !13210)
!13234 = !DILocation(line: 1836, column: 56, scope: !13210)
!13235 = !DILocation(line: 1836, column: 62, scope: !13210)
!13236 = !DILocation(line: 1836, column: 32, scope: !13210)
!13237 = !DILocation(line: 1836, column: 67, scope: !13210)
!13238 = !DILocation(line: 1836, column: 13, scope: !13210)
!13239 = !DILocation(line: 1836, column: 11, scope: !13210)
!13240 = !DILocation(line: 1837, column: 20, scope: !13210)
!13241 = !DILocation(line: 1837, column: 30, scope: !13210)
!13242 = !DILocation(line: 1837, column: 38, scope: !13210)
!13243 = !DILocation(line: 1837, column: 36, scope: !13210)
!13244 = !DILocation(line: 1837, column: 50, scope: !13210)
!13245 = !DILocation(line: 1837, column: 2, scope: !13210)
!13246 = !DILocation(line: 1837, column: 12, scope: !13210)
!13247 = !DILocation(line: 1837, column: 18, scope: !13210)
!13248 = !DILocation(line: 1838, column: 26, scope: !13210)
!13249 = !DILocation(line: 1838, column: 36, scope: !13210)
!13250 = !DILocation(line: 1838, column: 2, scope: !13210)
!13251 = !DILocation(line: 1838, column: 12, scope: !13210)
!13252 = !DILocation(line: 1838, column: 24, scope: !13210)
!13253 = !DILocation(line: 1839, column: 7, scope: !13210)
!13254 = !DILocation(line: 1826, column: 36, scope: !13205)
!13255 = distinct !{!13255, !13200, !13256}
!13256 = !DILocation(line: 1839, column: 7, scope: !13201)
!13257 = !DILocation(line: 1841, column: 7, scope: !13258)
!13258 = distinct !DILexicalBlock(scope: !13172, file: !3, line: 1841, column: 7)
!13259 = !DILocation(line: 1841, column: 11, scope: !13258)
!13260 = !DILocation(line: 1841, column: 17, scope: !13258)
!13261 = !DILocation(line: 1841, column: 32, scope: !13258)
!13262 = !DILocation(line: 1841, column: 35, scope: !13258)
!13263 = !DILocation(line: 1841, column: 39, scope: !13258)
!13264 = !DILocation(line: 1841, column: 45, scope: !13258)
!13265 = !DILocation(line: 1841, column: 7, scope: !13172)
!13266 = !DILocation(line: 1842, column: 5, scope: !13258)
!13267 = !DILocation(line: 1844, column: 27, scope: !13268)
!13268 = distinct !DILexicalBlock(scope: !13172, file: !3, line: 1844, column: 3)
!13269 = !DILocation(line: 1844, column: 13, scope: !13268)
!13270 = !DILocation(line: 1844, column: 8, scope: !13268)
!13271 = !DILocation(line: 1844, column: 37, scope: !13272)
!13272 = distinct !DILexicalBlock(scope: !13268, file: !3, line: 1844, column: 3)
!13273 = !DILocation(line: 1844, column: 36, scope: !13272)
!13274 = !DILocation(line: 1844, column: 3, scope: !13268)
!13275 = !DILocalVariable(name: "copy_stmt", scope: !13276, file: !3, line: 1846, type: !2917)
!13276 = distinct !DILexicalBlock(scope: !13272, file: !3, line: 1845, column: 5)
!13277 = !DILocation(line: 1846, column: 14, scope: !13276)
!13278 = !DILocalVariable(name: "can_throw", scope: !13276, file: !3, line: 1847, type: !2706)
!13279 = !DILocation(line: 1847, column: 12, scope: !13276)
!13280 = !DILocalVariable(name: "nonlocal_goto", scope: !13276, file: !3, line: 1847, type: !2706)
!13281 = !DILocation(line: 1847, column: 23, scope: !13276)
!13282 = !DILocation(line: 1849, column: 19, scope: !13276)
!13283 = !DILocation(line: 1849, column: 17, scope: !13276)
!13284 = !DILocation(line: 1850, column: 29, scope: !13285)
!13285 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 1850, column: 11)
!13286 = !DILocation(line: 1850, column: 12, scope: !13285)
!13287 = !DILocation(line: 1850, column: 11, scope: !13276)
!13288 = !DILocation(line: 1852, column: 17, scope: !13289)
!13289 = distinct !DILexicalBlock(scope: !13285, file: !3, line: 1851, column: 2)
!13290 = !DILocation(line: 1852, column: 4, scope: !13289)
!13291 = !DILocation(line: 1853, column: 25, scope: !13292)
!13292 = distinct !DILexicalBlock(scope: !13289, file: !3, line: 1853, column: 8)
!13293 = !DILocation(line: 1853, column: 8, scope: !13292)
!13294 = !DILocation(line: 1853, column: 8, scope: !13289)
!13295 = !DILocation(line: 1854, column: 33, scope: !13292)
!13296 = !DILocation(line: 1854, column: 6, scope: !13292)
!13297 = !DILocation(line: 1855, column: 2, scope: !13289)
!13298 = !DILocation(line: 1858, column: 7, scope: !13276)
!13299 = !DILocation(line: 1871, column: 44, scope: !13276)
!13300 = !DILocation(line: 1871, column: 19, scope: !13276)
!13301 = !DILocation(line: 1871, column: 17, scope: !13276)
!13302 = !DILocation(line: 1872, column: 52, scope: !13276)
!13303 = !DILocation(line: 1872, column: 23, scope: !13276)
!13304 = !DILocation(line: 1872, column: 21, scope: !13276)
!13305 = !DILocation(line: 1874, column: 11, scope: !13306)
!13306 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 1874, column: 11)
!13307 = !DILocation(line: 1874, column: 21, scope: !13306)
!13308 = !DILocation(line: 1874, column: 24, scope: !13306)
!13309 = !DILocation(line: 1874, column: 11, scope: !13276)
!13310 = !DILocation(line: 1876, column: 9, scope: !13311)
!13311 = distinct !DILexicalBlock(scope: !13312, file: !3, line: 1876, column: 8)
!13312 = distinct !DILexicalBlock(scope: !13306, file: !3, line: 1875, column: 2)
!13313 = !DILocation(line: 1876, column: 8, scope: !13312)
!13314 = !DILocalVariable(name: "e", scope: !13315, file: !3, line: 1880, type: !2897)
!13315 = distinct !DILexicalBlock(scope: !13311, file: !3, line: 1879, column: 6)
!13316 = !DILocation(line: 1880, column: 13, scope: !13315)
!13317 = !DILocation(line: 1880, column: 30, scope: !13315)
!13318 = !DILocation(line: 1880, column: 38, scope: !13315)
!13319 = !DILocation(line: 1880, column: 17, scope: !13315)
!13320 = !DILocation(line: 1882, column: 17, scope: !13315)
!13321 = !DILocation(line: 1882, column: 20, scope: !13315)
!13322 = !DILocation(line: 1882, column: 15, scope: !13315)
!13323 = !DILocation(line: 1883, column: 22, scope: !13315)
!13324 = !DILocation(line: 1883, column: 25, scope: !13315)
!13325 = !DILocation(line: 1883, column: 30, scope: !13315)
!13326 = !DILocation(line: 1883, column: 8, scope: !13315)
!13327 = !DILocation(line: 1883, column: 16, scope: !13315)
!13328 = !DILocation(line: 1883, column: 20, scope: !13315)
!13329 = !DILocation(line: 1884, column: 27, scope: !13315)
!13330 = !DILocation(line: 1884, column: 13, scope: !13315)
!13331 = !DILocation(line: 1885, column: 6, scope: !13315)
!13332 = !DILocation(line: 1886, column: 2, scope: !13312)
!13333 = !DILocation(line: 1888, column: 24, scope: !13334)
!13334 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 1888, column: 11)
!13335 = !DILocation(line: 1888, column: 11, scope: !13334)
!13336 = !DILocation(line: 1888, column: 35, scope: !13334)
!13337 = !DILocation(line: 1888, column: 11, scope: !13276)
!13338 = !DILocation(line: 1889, column: 26, scope: !13334)
!13339 = !DILocation(line: 1889, column: 2, scope: !13334)
!13340 = !DILocation(line: 1890, column: 16, scope: !13341)
!13341 = distinct !DILexicalBlock(scope: !13334, file: !3, line: 1890, column: 16)
!13342 = !DILocation(line: 1890, column: 16, scope: !13334)
!13343 = !DILocation(line: 1891, column: 17, scope: !13341)
!13344 = !DILocation(line: 1891, column: 2, scope: !13341)
!13345 = !DILocation(line: 1893, column: 11, scope: !13346)
!13346 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 1893, column: 11)
!13347 = !DILocation(line: 1893, column: 11, scope: !13276)
!13348 = !DILocation(line: 1894, column: 39, scope: !13346)
!13349 = !DILocation(line: 1894, column: 28, scope: !13346)
!13350 = !DILocation(line: 1894, column: 2, scope: !13346)
!13351 = !DILocation(line: 1896, column: 12, scope: !13352)
!13352 = distinct !DILexicalBlock(scope: !13276, file: !3, line: 1896, column: 11)
!13353 = !DILocation(line: 1896, column: 22, scope: !13352)
!13354 = !DILocation(line: 1896, column: 25, scope: !13352)
!13355 = !DILocation(line: 1897, column: 4, scope: !13352)
!13356 = !DILocation(line: 1897, column: 24, scope: !13352)
!13357 = !DILocation(line: 1897, column: 7, scope: !13352)
!13358 = !DILocation(line: 1896, column: 11, scope: !13276)
!13359 = !DILocation(line: 1898, column: 47, scope: !13352)
!13360 = !DILocation(line: 1898, column: 36, scope: !13352)
!13361 = !DILocation(line: 1898, column: 59, scope: !13352)
!13362 = !DILocation(line: 1899, column: 8, scope: !13352)
!13363 = !DILocation(line: 1899, column: 19, scope: !13352)
!13364 = !DILocation(line: 1898, column: 2, scope: !13352)
!13365 = !DILocation(line: 1844, column: 3, scope: !13272)
!13366 = distinct !{!13366, !13274, !13367}
!13367 = !DILocation(line: 1900, column: 5, scope: !13268)
!13368 = !DILocation(line: 1901, column: 1, scope: !13172)
!13369 = distinct !DISubprogram(name: "copy_phis_for_bb", scope: !3, file: !3, line: 1909, type: !13370, scopeLine: 1910, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13370 = !DISubroutineType(types: !13371)
!13371 = !{null, !3473, !3983}
!13372 = !DILocalVariable(name: "bb", arg: 1, scope: !13369, file: !3, line: 1909, type: !3473)
!13373 = !DILocation(line: 1909, column: 31, scope: !13369)
!13374 = !DILocalVariable(name: "id", arg: 2, scope: !13369, file: !3, line: 1909, type: !3983)
!13375 = !DILocation(line: 1909, column: 51, scope: !13369)
!13376 = !DILocalVariable(name: "new_bb", scope: !13369, file: !3, line: 1911, type: !13377)
!13377 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3473)
!13378 = !DILocation(line: 1911, column: 21, scope: !13369)
!13379 = !DILocation(line: 1911, column: 44, scope: !13369)
!13380 = !DILocation(line: 1911, column: 48, scope: !13369)
!13381 = !DILocation(line: 1911, column: 30, scope: !13369)
!13382 = !DILocalVariable(name: "ei", scope: !13369, file: !3, line: 1912, type: !13187)
!13383 = !DILocation(line: 1912, column: 17, scope: !13369)
!13384 = !DILocalVariable(name: "phi", scope: !13369, file: !3, line: 1913, type: !2917)
!13385 = !DILocation(line: 1913, column: 10, scope: !13369)
!13386 = !DILocalVariable(name: "si", scope: !13369, file: !3, line: 1914, type: !4261)
!13387 = !DILocation(line: 1914, column: 24, scope: !13369)
!13388 = !DILocation(line: 1916, column: 35, scope: !13389)
!13389 = distinct !DILexicalBlock(scope: !13369, file: !3, line: 1916, column: 3)
!13390 = !DILocation(line: 1916, column: 24, scope: !13389)
!13391 = !DILocation(line: 1916, column: 13, scope: !13389)
!13392 = !DILocation(line: 1916, column: 8, scope: !13389)
!13393 = !DILocation(line: 1916, column: 42, scope: !13394)
!13394 = distinct !DILexicalBlock(scope: !13389, file: !3, line: 1916, column: 3)
!13395 = !DILocation(line: 1916, column: 41, scope: !13394)
!13396 = !DILocation(line: 1916, column: 3, scope: !13389)
!13397 = !DILocalVariable(name: "res", scope: !13398, file: !3, line: 1918, type: !2586)
!13398 = distinct !DILexicalBlock(scope: !13394, file: !3, line: 1917, column: 5)
!13399 = !DILocation(line: 1918, column: 12, scope: !13398)
!13400 = !DILocalVariable(name: "new_res", scope: !13398, file: !3, line: 1918, type: !2586)
!13401 = !DILocation(line: 1918, column: 17, scope: !13398)
!13402 = !DILocalVariable(name: "new_phi", scope: !13398, file: !3, line: 1919, type: !2917)
!13403 = !DILocation(line: 1919, column: 14, scope: !13398)
!13404 = !DILocalVariable(name: "new_edge", scope: !13398, file: !3, line: 1920, type: !2897)
!13405 = !DILocation(line: 1920, column: 12, scope: !13398)
!13406 = !DILocation(line: 1922, column: 13, scope: !13398)
!13407 = !DILocation(line: 1922, column: 11, scope: !13398)
!13408 = !DILocation(line: 1923, column: 13, scope: !13398)
!13409 = !DILocation(line: 1923, column: 11, scope: !13398)
!13410 = !DILocation(line: 1924, column: 17, scope: !13398)
!13411 = !DILocation(line: 1924, column: 15, scope: !13398)
!13412 = !DILocation(line: 1925, column: 26, scope: !13413)
!13413 = distinct !DILexicalBlock(scope: !13398, file: !3, line: 1925, column: 11)
!13414 = !DILocation(line: 1925, column: 11, scope: !13413)
!13415 = !DILocation(line: 1925, column: 11, scope: !13398)
!13416 = !DILocation(line: 1927, column: 4, scope: !13417)
!13417 = distinct !DILexicalBlock(scope: !13413, file: !3, line: 1926, column: 2)
!13418 = !DILocation(line: 1929, column: 35, scope: !13417)
!13419 = !DILocation(line: 1929, column: 44, scope: !13417)
!13420 = !DILocation(line: 1929, column: 18, scope: !13417)
!13421 = !DILocation(line: 1929, column: 16, scope: !13417)
!13422 = !DILocation(line: 1928, column: 4, scope: !13417)
!13423 = !DILocation(line: 1929, column: 6, scope: !13417)
!13424 = !DILocation(line: 1930, column: 4, scope: !13425)
!13425 = distinct !DILexicalBlock(scope: !13417, file: !3, line: 1930, column: 4)
!13426 = !DILocation(line: 1930, column: 4, scope: !13427)
!13427 = distinct !DILexicalBlock(scope: !13425, file: !3, line: 1930, column: 4)
!13428 = !DILocalVariable(name: "old_edge", scope: !13429, file: !3, line: 1932, type: !13430)
!13429 = distinct !DILexicalBlock(scope: !13427, file: !3, line: 1931, column: 6)
!13430 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2897)
!13431 = !DILocation(line: 1932, column: 19, scope: !13429)
!13432 = !DILocation(line: 1933, column: 30, scope: !13429)
!13433 = !DILocation(line: 1933, column: 40, scope: !13429)
!13434 = !DILocation(line: 1933, column: 45, scope: !13429)
!13435 = !DILocation(line: 1933, column: 16, scope: !13429)
!13436 = !DILocation(line: 1933, column: 50, scope: !13429)
!13437 = !DILocation(line: 1933, column: 5, scope: !13429)
!13438 = !DILocalVariable(name: "arg", scope: !13429, file: !3, line: 1934, type: !2586)
!13439 = !DILocation(line: 1934, column: 13, scope: !13429)
!13440 = !DILocation(line: 1934, column: 19, scope: !13429)
!13441 = !DILocalVariable(name: "new_arg", scope: !13429, file: !3, line: 1935, type: !2586)
!13442 = !DILocation(line: 1935, column: 13, scope: !13429)
!13443 = !DILocation(line: 1935, column: 23, scope: !13429)
!13444 = !DILocalVariable(name: "block", scope: !13429, file: !3, line: 1936, type: !2586)
!13445 = !DILocation(line: 1936, column: 13, scope: !13429)
!13446 = !DILocation(line: 1936, column: 21, scope: !13429)
!13447 = !DILocation(line: 1936, column: 25, scope: !13429)
!13448 = !DILocation(line: 1937, column: 8, scope: !13429)
!13449 = !DILocation(line: 1937, column: 12, scope: !13429)
!13450 = !DILocation(line: 1937, column: 18, scope: !13429)
!13451 = !DILocation(line: 1938, column: 8, scope: !13429)
!13452 = !DILocation(line: 1939, column: 20, scope: !13429)
!13453 = !DILocation(line: 1939, column: 8, scope: !13429)
!13454 = !DILocation(line: 1939, column: 12, scope: !13429)
!13455 = !DILocation(line: 1939, column: 18, scope: !13429)
!13456 = !DILocation(line: 1940, column: 8, scope: !13429)
!13457 = !DILocation(line: 1943, column: 12, scope: !13458)
!13458 = distinct !DILexicalBlock(scope: !13429, file: !3, line: 1943, column: 12)
!13459 = !DILocation(line: 1943, column: 32, scope: !13458)
!13460 = !DILocation(line: 1944, column: 5, scope: !13458)
!13461 = !DILocation(line: 1944, column: 8, scope: !13458)
!13462 = !DILocation(line: 1944, column: 28, scope: !13458)
!13463 = !DILocation(line: 1945, column: 5, scope: !13458)
!13464 = !DILocation(line: 1945, column: 24, scope: !13458)
!13465 = !DILocation(line: 1945, column: 9, scope: !13458)
!13466 = !DILocation(line: 1943, column: 12, scope: !13429)
!13467 = !DILocalVariable(name: "stmts", scope: !13468, file: !3, line: 1947, type: !2907)
!13468 = distinct !DILexicalBlock(scope: !13458, file: !3, line: 1946, column: 3)
!13469 = !DILocation(line: 1947, column: 16, scope: !13468)
!13470 = !DILocation(line: 1948, column: 37, scope: !13468)
!13471 = !DILocation(line: 1948, column: 15, scope: !13468)
!13472 = !DILocation(line: 1948, column: 13, scope: !13468)
!13473 = !DILocation(line: 1949, column: 39, scope: !13468)
!13474 = !DILocation(line: 1949, column: 49, scope: !13468)
!13475 = !DILocation(line: 1949, column: 5, scope: !13468)
!13476 = !DILocation(line: 1950, column: 3, scope: !13468)
!13477 = !DILocation(line: 1951, column: 21, scope: !13429)
!13478 = !DILocation(line: 1951, column: 30, scope: !13429)
!13479 = !DILocation(line: 1951, column: 39, scope: !13429)
!13480 = !DILocation(line: 1952, column: 42, scope: !13429)
!13481 = !DILocation(line: 1952, column: 47, scope: !13429)
!13482 = !DILocation(line: 1952, column: 7, scope: !13429)
!13483 = !DILocation(line: 1951, column: 8, scope: !13429)
!13484 = !DILocation(line: 1953, column: 6, scope: !13429)
!13485 = distinct !{!13485, !13424, !13486}
!13486 = !DILocation(line: 1953, column: 6, scope: !13425)
!13487 = !DILocation(line: 1954, column: 2, scope: !13417)
!13488 = !DILocation(line: 1955, column: 5, scope: !13398)
!13489 = !DILocation(line: 1916, column: 58, scope: !13394)
!13490 = !DILocation(line: 1916, column: 3, scope: !13394)
!13491 = distinct !{!13491, !13396, !13492}
!13492 = !DILocation(line: 1955, column: 5, scope: !13389)
!13493 = !DILocation(line: 1956, column: 1, scope: !13369)
!13494 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !1618, file: !1618, line: 1747, type: !10765, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13495 = !DILocalVariable(name: "gs", arg: 1, scope: !13494, file: !1618, line: 1747, type: !2917)
!13496 = !DILocation(line: 1747, column: 32, scope: !13494)
!13497 = !DILocalVariable(name: "rhs", arg: 2, scope: !13494, file: !1618, line: 1747, type: !2586)
!13498 = !DILocation(line: 1747, column: 41, scope: !13494)
!13499 = !DILocation(line: 1751, column: 18, scope: !13494)
!13500 = !DILocation(line: 1751, column: 25, scope: !13494)
!13501 = !DILocation(line: 1751, column: 3, scope: !13494)
!13502 = !DILocation(line: 1752, column: 1, scope: !13494)
!13503 = distinct !DISubprogram(name: "gimple_call_va_arg_pack_p", scope: !1618, file: !1618, line: 2168, type: !10286, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13504 = !DILocalVariable(name: "s", arg: 1, scope: !13503, file: !1618, line: 2168, type: !2917)
!13505 = !DILocation(line: 2168, column: 35, scope: !13503)
!13506 = !DILocation(line: 2171, column: 11, scope: !13503)
!13507 = !DILocation(line: 2171, column: 14, scope: !13503)
!13508 = !DILocation(line: 2171, column: 21, scope: !13503)
!13509 = !DILocation(line: 2171, column: 29, scope: !13503)
!13510 = !DILocation(line: 2171, column: 52, scope: !13503)
!13511 = !DILocation(line: 2171, column: 10, scope: !13503)
!13512 = !DILocation(line: 2171, column: 3, scope: !13503)
!13513 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !13514, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13514 = !DISubroutineType(types: !13515)
!13515 = !{!4274, !2683}
!13516 = !DILocalVariable(name: "alloc_", arg: 1, scope: !13513, file: !135, line: 184, type: !2683)
!13517 = !DILocation(line: 184, column: 1, scope: !13513)
!13518 = distinct !DISubprogram(name: "VEC_tree_heap_safe_grow", scope: !135, file: !135, line: 184, type: !13519, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13519 = !DISubroutineType(types: !13520)
!13520 = !{null, !13521, !2683}
!13521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4274, size: 64)
!13522 = !DILocalVariable(name: "vec_", arg: 1, scope: !13518, file: !135, line: 184, type: !13521)
!13523 = !DILocation(line: 184, column: 1, scope: !13518)
!13524 = !DILocalVariable(name: "size_", arg: 2, scope: !13518, file: !135, line: 184, type: !2683)
!13525 = !DILocation(line: 0, scope: !13518)
!13526 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !135, file: !135, line: 182, type: !13527, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13527 = !DISubroutineType(types: !13528)
!13528 = !{!2585, !10228}
!13529 = !DILocalVariable(name: "vec_", arg: 1, scope: !13526, file: !135, line: 182, type: !10228)
!13530 = !DILocation(line: 182, column: 1, scope: !13526)
!13531 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !1618, file: !1618, line: 2036, type: !10778, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13532 = !DILocalVariable(name: "gs", arg: 1, scope: !13531, file: !1618, line: 2036, type: !6573)
!13533 = !DILocation(line: 2036, column: 35, scope: !13531)
!13534 = !DILocalVariable(name: "index", arg: 2, scope: !13531, file: !1618, line: 2036, type: !7)
!13535 = !DILocation(line: 2036, column: 48, scope: !13531)
!13536 = !DILocation(line: 2039, column: 25, scope: !13531)
!13537 = !DILocation(line: 2039, column: 29, scope: !13531)
!13538 = !DILocation(line: 2039, column: 35, scope: !13531)
!13539 = !DILocation(line: 2039, column: 10, scope: !13531)
!13540 = !DILocation(line: 2039, column: 3, scope: !13531)
!13541 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !13542, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13542 = !DISubroutineType(types: !13543)
!13543 = !{null, !13521}
!13544 = !DILocalVariable(name: "vec_", arg: 1, scope: !13541, file: !135, line: 184, type: !13521)
!13545 = !DILocation(line: 184, column: 1, scope: !13541)
!13546 = !DILocation(line: 184, column: 1, scope: !13547)
!13547 = distinct !DILexicalBlock(scope: !13541, file: !135, line: 184, column: 1)
!13548 = distinct !DISubprogram(name: "gimple_call_copy_flags", scope: !1618, file: !1618, line: 2198, type: !13549, scopeLine: 2199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13549 = !DISubroutineType(types: !13550)
!13550 = !{null, !2917, !2917}
!13551 = !DILocalVariable(name: "dest_call", arg: 1, scope: !13548, file: !1618, line: 2198, type: !2917)
!13552 = !DILocation(line: 2198, column: 32, scope: !13548)
!13553 = !DILocalVariable(name: "orig_call", arg: 2, scope: !13548, file: !1618, line: 2198, type: !2917)
!13554 = !DILocation(line: 2198, column: 50, scope: !13548)
!13555 = !DILocation(line: 2202, column: 31, scope: !13548)
!13556 = !DILocation(line: 2202, column: 42, scope: !13548)
!13557 = !DILocation(line: 2202, column: 49, scope: !13548)
!13558 = !DILocation(line: 2202, column: 3, scope: !13548)
!13559 = !DILocation(line: 2202, column: 14, scope: !13548)
!13560 = !DILocation(line: 2202, column: 21, scope: !13548)
!13561 = !DILocation(line: 2202, column: 29, scope: !13548)
!13562 = !DILocation(line: 2203, column: 1, scope: !13548)
!13563 = distinct !DISubprogram(name: "gimple_call_set_va_arg_pack", scope: !1618, file: !1618, line: 2154, type: !9912, scopeLine: 2155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13564 = !DILocalVariable(name: "s", arg: 1, scope: !13563, file: !1618, line: 2154, type: !2917)
!13565 = !DILocation(line: 2154, column: 37, scope: !13563)
!13566 = !DILocalVariable(name: "pass_arg_pack_p", arg: 2, scope: !13563, file: !1618, line: 2154, type: !2706)
!13567 = !DILocation(line: 2154, column: 45, scope: !13563)
!13568 = !DILocation(line: 2157, column: 7, scope: !13569)
!13569 = distinct !DILexicalBlock(scope: !13563, file: !1618, line: 2157, column: 7)
!13570 = !DILocation(line: 2157, column: 7, scope: !13563)
!13571 = !DILocation(line: 2158, column: 5, scope: !13569)
!13572 = !DILocation(line: 2158, column: 8, scope: !13569)
!13573 = !DILocation(line: 2158, column: 15, scope: !13569)
!13574 = !DILocation(line: 2158, column: 23, scope: !13569)
!13575 = !DILocation(line: 2160, column: 5, scope: !13569)
!13576 = !DILocation(line: 2160, column: 8, scope: !13569)
!13577 = !DILocation(line: 2160, column: 15, scope: !13569)
!13578 = !DILocation(line: 2160, column: 23, scope: !13569)
!13579 = !DILocation(line: 2161, column: 1, scope: !13563)
!13580 = distinct !DISubprogram(name: "gimple_set_location", scope: !1618, file: !1618, line: 1156, type: !13581, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13581 = !DISubroutineType(types: !13582)
!13582 = !{null, !2917, !2714}
!13583 = !DILocalVariable(name: "g", arg: 1, scope: !13580, file: !1618, line: 1156, type: !2917)
!13584 = !DILocation(line: 1156, column: 29, scope: !13580)
!13585 = !DILocalVariable(name: "location", arg: 2, scope: !13580, file: !1618, line: 1156, type: !2714)
!13586 = !DILocation(line: 1156, column: 43, scope: !13580)
!13587 = !DILocation(line: 1158, column: 24, scope: !13580)
!13588 = !DILocation(line: 1158, column: 3, scope: !13580)
!13589 = !DILocation(line: 1158, column: 6, scope: !13580)
!13590 = !DILocation(line: 1158, column: 13, scope: !13580)
!13591 = !DILocation(line: 1158, column: 22, scope: !13580)
!13592 = !DILocation(line: 1159, column: 1, scope: !13580)
!13593 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !1618, file: !1618, line: 1898, type: !10765, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13594 = !DILocalVariable(name: "gs", arg: 1, scope: !13593, file: !1618, line: 1898, type: !2917)
!13595 = !DILocation(line: 1898, column: 29, scope: !13593)
!13596 = !DILocalVariable(name: "lhs", arg: 2, scope: !13593, file: !1618, line: 1898, type: !2586)
!13597 = !DILocation(line: 1898, column: 38, scope: !13593)
!13598 = !DILocation(line: 1901, column: 18, scope: !13593)
!13599 = !DILocation(line: 1901, column: 25, scope: !13593)
!13600 = !DILocation(line: 1901, column: 3, scope: !13593)
!13601 = !DILocation(line: 1902, column: 7, scope: !13602)
!13602 = distinct !DILexicalBlock(scope: !13593, file: !1618, line: 1902, column: 7)
!13603 = !DILocation(line: 1902, column: 11, scope: !13602)
!13604 = !DILocation(line: 1902, column: 14, scope: !13602)
!13605 = !DILocation(line: 1902, column: 30, scope: !13602)
!13606 = !DILocation(line: 1902, column: 7, scope: !13593)
!13607 = !DILocation(line: 1903, column: 31, scope: !13602)
!13608 = !DILocation(line: 1903, column: 5, scope: !13602)
!13609 = !DILocation(line: 1903, column: 29, scope: !13602)
!13610 = !DILocation(line: 1904, column: 1, scope: !13593)
!13611 = distinct !DISubprogram(name: "gimple_uid", scope: !1618, file: !1618, line: 1265, type: !6689, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13612 = !DILocalVariable(name: "g", arg: 1, scope: !13611, file: !1618, line: 1265, type: !6573)
!13613 = !DILocation(line: 1265, column: 26, scope: !13611)
!13614 = !DILocation(line: 1267, column: 10, scope: !13611)
!13615 = !DILocation(line: 1267, column: 13, scope: !13611)
!13616 = !DILocation(line: 1267, column: 20, scope: !13611)
!13617 = !DILocation(line: 1267, column: 3, scope: !13611)
!13618 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !4916, file: !4916, line: 792, type: !13619, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13619 = !DISubroutineType(types: !13620)
!13620 = !{!2586, !13621, !2917, !2683}
!13621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13125, size: 64)
!13622 = !DILocalVariable(name: "ptr", arg: 1, scope: !13618, file: !4916, line: 792, type: !13621)
!13623 = !DILocation(line: 792, column: 33, scope: !13618)
!13624 = !DILocalVariable(name: "stmt", arg: 2, scope: !13618, file: !4916, line: 792, type: !2917)
!13625 = !DILocation(line: 792, column: 45, scope: !13618)
!13626 = !DILocalVariable(name: "flags", arg: 3, scope: !13618, file: !4916, line: 792, type: !2683)
!13627 = !DILocation(line: 792, column: 55, scope: !13618)
!13628 = !DILocation(line: 794, column: 17, scope: !13618)
!13629 = !DILocation(line: 794, column: 22, scope: !13618)
!13630 = !DILocation(line: 794, column: 28, scope: !13618)
!13631 = !DILocation(line: 794, column: 3, scope: !13618)
!13632 = !DILocation(line: 795, column: 3, scope: !13618)
!13633 = !DILocation(line: 795, column: 8, scope: !13618)
!13634 = !DILocation(line: 795, column: 18, scope: !13618)
!13635 = !DILocation(line: 796, column: 29, scope: !13618)
!13636 = !DILocation(line: 796, column: 10, scope: !13618)
!13637 = !DILocation(line: 796, column: 3, scope: !13618)
!13638 = distinct !DISubprogram(name: "op_iter_done", scope: !4916, file: !4916, line: 652, type: !13639, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13639 = !DISubroutineType(types: !13640)
!13640 = !{!2706, !13641}
!13641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13642, size: 64)
!13642 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13125)
!13643 = !DILocalVariable(name: "ptr", arg: 1, scope: !13638, file: !4916, line: 652, type: !13641)
!13644 = !DILocation(line: 652, column: 34, scope: !13638)
!13645 = !DILocation(line: 654, column: 10, scope: !13638)
!13646 = !DILocation(line: 654, column: 15, scope: !13638)
!13647 = !DILocation(line: 654, column: 3, scope: !13638)
!13648 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !4916, file: !4916, line: 699, type: !13649, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13649 = !DISubroutineType(types: !13650)
!13650 = !{!2586, !13621}
!13651 = !DILocalVariable(name: "ptr", arg: 1, scope: !13648, file: !4916, line: 699, type: !13621)
!13652 = !DILocation(line: 699, column: 33, scope: !13648)
!13653 = !DILocalVariable(name: "val", scope: !13648, file: !4916, line: 701, type: !2586)
!13654 = !DILocation(line: 701, column: 8, scope: !13648)
!13655 = !DILocation(line: 705, column: 7, scope: !13656)
!13656 = distinct !DILexicalBlock(scope: !13648, file: !4916, line: 705, column: 7)
!13657 = !DILocation(line: 705, column: 12, scope: !13656)
!13658 = !DILocation(line: 705, column: 7, scope: !13648)
!13659 = !DILocation(line: 707, column: 13, scope: !13660)
!13660 = distinct !DILexicalBlock(scope: !13656, file: !4916, line: 706, column: 5)
!13661 = !DILocation(line: 707, column: 11, scope: !13660)
!13662 = !DILocation(line: 708, column: 19, scope: !13660)
!13663 = !DILocation(line: 708, column: 24, scope: !13660)
!13664 = !DILocation(line: 708, column: 30, scope: !13660)
!13665 = !DILocation(line: 708, column: 7, scope: !13660)
!13666 = !DILocation(line: 708, column: 12, scope: !13660)
!13667 = !DILocation(line: 708, column: 17, scope: !13660)
!13668 = !DILocation(line: 709, column: 14, scope: !13660)
!13669 = !DILocation(line: 709, column: 7, scope: !13660)
!13670 = !DILocation(line: 711, column: 7, scope: !13671)
!13671 = distinct !DILexicalBlock(scope: !13648, file: !4916, line: 711, column: 7)
!13672 = !DILocation(line: 711, column: 12, scope: !13671)
!13673 = !DILocation(line: 711, column: 7, scope: !13648)
!13674 = !DILocation(line: 713, column: 13, scope: !13675)
!13675 = distinct !DILexicalBlock(scope: !13671, file: !4916, line: 712, column: 5)
!13676 = !DILocation(line: 713, column: 11, scope: !13675)
!13677 = !DILocation(line: 714, column: 19, scope: !13675)
!13678 = !DILocation(line: 714, column: 24, scope: !13675)
!13679 = !DILocation(line: 714, column: 30, scope: !13675)
!13680 = !DILocation(line: 714, column: 7, scope: !13675)
!13681 = !DILocation(line: 714, column: 12, scope: !13675)
!13682 = !DILocation(line: 714, column: 17, scope: !13675)
!13683 = !DILocation(line: 715, column: 14, scope: !13675)
!13684 = !DILocation(line: 715, column: 7, scope: !13675)
!13685 = !DILocation(line: 718, column: 3, scope: !13648)
!13686 = !DILocation(line: 718, column: 8, scope: !13648)
!13687 = !DILocation(line: 718, column: 13, scope: !13648)
!13688 = !DILocation(line: 719, column: 3, scope: !13648)
!13689 = !DILocation(line: 721, column: 1, scope: !13648)
!13690 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !13691, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13691 = !DISubroutineType(types: !13692)
!13692 = !{!7, !13693}
!13693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13694, size: 64)
!13694 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3443)
!13695 = !DILocalVariable(name: "vec_", arg: 1, scope: !13690, file: !135, line: 182, type: !13693)
!13696 = !DILocation(line: 182, column: 1, scope: !13690)
!13697 = distinct !DISubprogram(name: "VEC_tree_heap_reserve_exact", scope: !135, file: !135, line: 184, type: !13698, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13698 = !DISubroutineType(types: !13699)
!13699 = !{!2683, !13521, !2683}
!13700 = !DILocalVariable(name: "vec_", arg: 1, scope: !13697, file: !135, line: 184, type: !13521)
!13701 = !DILocation(line: 184, column: 1, scope: !13697)
!13702 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13697, file: !135, line: 184, type: !2683)
!13703 = !DILocalVariable(name: "extend", scope: !13697, file: !135, line: 184, type: !2683)
!13704 = !DILocation(line: 184, column: 1, scope: !13705)
!13705 = distinct !DILexicalBlock(scope: !13697, file: !135, line: 184, column: 1)
!13706 = distinct !DISubprogram(name: "op_iter_init", scope: !4916, file: !4916, line: 742, type: !13707, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13707 = !DISubroutineType(types: !13708)
!13708 = !{null, !13621, !2917, !2683}
!13709 = !DILocalVariable(name: "ptr", arg: 1, scope: !13706, file: !4916, line: 742, type: !13621)
!13710 = !DILocation(line: 742, column: 28, scope: !13706)
!13711 = !DILocalVariable(name: "stmt", arg: 2, scope: !13706, file: !4916, line: 742, type: !2917)
!13712 = !DILocation(line: 742, column: 40, scope: !13706)
!13713 = !DILocalVariable(name: "flags", arg: 3, scope: !13706, file: !4916, line: 742, type: !2683)
!13714 = !DILocation(line: 742, column: 50, scope: !13706)
!13715 = !DILocation(line: 746, column: 3, scope: !13706)
!13716 = !DILocation(line: 748, column: 16, scope: !13706)
!13717 = !DILocation(line: 748, column: 22, scope: !13706)
!13718 = !DILocation(line: 748, column: 15, scope: !13706)
!13719 = !DILocation(line: 748, column: 68, scope: !13706)
!13720 = !DILocation(line: 748, column: 52, scope: !13706)
!13721 = !DILocation(line: 748, column: 3, scope: !13706)
!13722 = !DILocation(line: 748, column: 8, scope: !13706)
!13723 = !DILocation(line: 748, column: 13, scope: !13706)
!13724 = !DILocation(line: 749, column: 9, scope: !13725)
!13725 = distinct !DILexicalBlock(scope: !13706, file: !4916, line: 749, column: 7)
!13726 = !DILocation(line: 749, column: 15, scope: !13725)
!13727 = !DILocation(line: 750, column: 7, scope: !13725)
!13728 = !DILocation(line: 750, column: 10, scope: !13725)
!13729 = !DILocation(line: 750, column: 15, scope: !13725)
!13730 = !DILocation(line: 751, column: 7, scope: !13725)
!13731 = !DILocation(line: 751, column: 23, scope: !13725)
!13732 = !DILocation(line: 751, column: 10, scope: !13725)
!13733 = !DILocation(line: 751, column: 29, scope: !13725)
!13734 = !DILocation(line: 749, column: 7, scope: !13706)
!13735 = !DILocation(line: 752, column: 17, scope: !13725)
!13736 = !DILocation(line: 752, column: 22, scope: !13725)
!13737 = !DILocation(line: 752, column: 28, scope: !13725)
!13738 = !DILocation(line: 752, column: 5, scope: !13725)
!13739 = !DILocation(line: 752, column: 10, scope: !13725)
!13740 = !DILocation(line: 752, column: 15, scope: !13725)
!13741 = !DILocation(line: 753, column: 16, scope: !13706)
!13742 = !DILocation(line: 753, column: 22, scope: !13706)
!13743 = !DILocation(line: 753, column: 15, scope: !13706)
!13744 = !DILocation(line: 753, column: 68, scope: !13706)
!13745 = !DILocation(line: 753, column: 52, scope: !13706)
!13746 = !DILocation(line: 753, column: 3, scope: !13706)
!13747 = !DILocation(line: 753, column: 8, scope: !13706)
!13748 = !DILocation(line: 753, column: 13, scope: !13706)
!13749 = !DILocation(line: 754, column: 9, scope: !13750)
!13750 = distinct !DILexicalBlock(scope: !13706, file: !4916, line: 754, column: 7)
!13751 = !DILocation(line: 754, column: 15, scope: !13750)
!13752 = !DILocation(line: 755, column: 7, scope: !13750)
!13753 = !DILocation(line: 755, column: 10, scope: !13750)
!13754 = !DILocation(line: 755, column: 15, scope: !13750)
!13755 = !DILocation(line: 756, column: 7, scope: !13750)
!13756 = !DILocation(line: 756, column: 23, scope: !13750)
!13757 = !DILocation(line: 756, column: 10, scope: !13750)
!13758 = !DILocation(line: 756, column: 29, scope: !13750)
!13759 = !DILocation(line: 754, column: 7, scope: !13706)
!13760 = !DILocation(line: 757, column: 17, scope: !13750)
!13761 = !DILocation(line: 757, column: 22, scope: !13750)
!13762 = !DILocation(line: 757, column: 28, scope: !13750)
!13763 = !DILocation(line: 757, column: 5, scope: !13750)
!13764 = !DILocation(line: 757, column: 10, scope: !13750)
!13765 = !DILocation(line: 757, column: 15, scope: !13750)
!13766 = !DILocation(line: 758, column: 3, scope: !13706)
!13767 = !DILocation(line: 758, column: 8, scope: !13706)
!13768 = !DILocation(line: 758, column: 13, scope: !13706)
!13769 = !DILocation(line: 760, column: 3, scope: !13706)
!13770 = !DILocation(line: 760, column: 8, scope: !13706)
!13771 = !DILocation(line: 760, column: 14, scope: !13706)
!13772 = !DILocation(line: 761, column: 3, scope: !13706)
!13773 = !DILocation(line: 761, column: 8, scope: !13706)
!13774 = !DILocation(line: 761, column: 16, scope: !13706)
!13775 = !DILocation(line: 762, column: 3, scope: !13706)
!13776 = !DILocation(line: 762, column: 8, scope: !13706)
!13777 = !DILocation(line: 762, column: 17, scope: !13706)
!13778 = !DILocation(line: 763, column: 1, scope: !13706)
!13779 = distinct !DISubprogram(name: "gimple_def_ops", scope: !1618, file: !1618, line: 1292, type: !13780, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13780 = !DISubroutineType(types: !13781)
!13781 = !{!2946, !6573}
!13782 = !DILocalVariable(name: "g", arg: 1, scope: !13779, file: !1618, line: 1292, type: !6573)
!13783 = !DILocation(line: 1292, column: 30, scope: !13779)
!13784 = !DILocation(line: 1294, column: 24, scope: !13785)
!13785 = distinct !DILexicalBlock(scope: !13779, file: !1618, line: 1294, column: 7)
!13786 = !DILocation(line: 1294, column: 8, scope: !13785)
!13787 = !DILocation(line: 1294, column: 7, scope: !13779)
!13788 = !DILocation(line: 1295, column: 5, scope: !13785)
!13789 = !DILocation(line: 1296, column: 10, scope: !13779)
!13790 = !DILocation(line: 1296, column: 13, scope: !13779)
!13791 = !DILocation(line: 1296, column: 19, scope: !13779)
!13792 = !DILocation(line: 1296, column: 26, scope: !13779)
!13793 = !DILocation(line: 1296, column: 3, scope: !13779)
!13794 = !DILocation(line: 1297, column: 1, scope: !13779)
!13795 = distinct !DISubprogram(name: "gimple_vdef", scope: !1618, file: !1618, line: 1375, type: !6581, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13796 = !DILocalVariable(name: "g", arg: 1, scope: !13795, file: !1618, line: 1375, type: !6573)
!13797 = !DILocation(line: 1375, column: 27, scope: !13795)
!13798 = !DILocation(line: 1377, column: 28, scope: !13799)
!13799 = distinct !DILexicalBlock(scope: !13795, file: !1618, line: 1377, column: 7)
!13800 = !DILocation(line: 1377, column: 8, scope: !13799)
!13801 = !DILocation(line: 1377, column: 7, scope: !13795)
!13802 = !DILocation(line: 1378, column: 5, scope: !13799)
!13803 = !DILocation(line: 1379, column: 10, scope: !13795)
!13804 = !DILocation(line: 1379, column: 13, scope: !13795)
!13805 = !DILocation(line: 1379, column: 23, scope: !13795)
!13806 = !DILocation(line: 1379, column: 3, scope: !13795)
!13807 = !DILocation(line: 1380, column: 1, scope: !13795)
!13808 = distinct !DISubprogram(name: "gimple_use_ops", scope: !1618, file: !1618, line: 1313, type: !13809, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13809 = !DISubroutineType(types: !13810)
!13810 = !{!2952, !6573}
!13811 = !DILocalVariable(name: "g", arg: 1, scope: !13808, file: !1618, line: 1313, type: !6573)
!13812 = !DILocation(line: 1313, column: 30, scope: !13808)
!13813 = !DILocation(line: 1315, column: 24, scope: !13814)
!13814 = distinct !DILexicalBlock(scope: !13808, file: !1618, line: 1315, column: 7)
!13815 = !DILocation(line: 1315, column: 8, scope: !13814)
!13816 = !DILocation(line: 1315, column: 7, scope: !13808)
!13817 = !DILocation(line: 1316, column: 5, scope: !13814)
!13818 = !DILocation(line: 1317, column: 10, scope: !13808)
!13819 = !DILocation(line: 1317, column: 13, scope: !13808)
!13820 = !DILocation(line: 1317, column: 19, scope: !13808)
!13821 = !DILocation(line: 1317, column: 26, scope: !13808)
!13822 = !DILocation(line: 1317, column: 3, scope: !13808)
!13823 = !DILocation(line: 1318, column: 1, scope: !13808)
!13824 = distinct !DISubprogram(name: "gimple_vuse", scope: !1618, file: !1618, line: 1365, type: !6581, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13825 = !DILocalVariable(name: "g", arg: 1, scope: !13824, file: !1618, line: 1365, type: !6573)
!13826 = !DILocation(line: 1365, column: 27, scope: !13824)
!13827 = !DILocation(line: 1367, column: 28, scope: !13828)
!13828 = distinct !DILexicalBlock(scope: !13824, file: !1618, line: 1367, column: 7)
!13829 = !DILocation(line: 1367, column: 8, scope: !13828)
!13830 = !DILocation(line: 1367, column: 7, scope: !13824)
!13831 = !DILocation(line: 1368, column: 5, scope: !13828)
!13832 = !DILocation(line: 1369, column: 10, scope: !13824)
!13833 = !DILocation(line: 1369, column: 13, scope: !13824)
!13834 = !DILocation(line: 1369, column: 23, scope: !13824)
!13835 = !DILocation(line: 1369, column: 3, scope: !13824)
!13836 = !DILocation(line: 1370, column: 1, scope: !13824)
!13837 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !4916, file: !4916, line: 427, type: !13838, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13838 = !DISubroutineType(types: !13839)
!13839 = !{!2586, !13840}
!13840 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !2578, line: 30, baseType: !13841)
!13841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13842, size: 64)
!13842 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !2957)
!13843 = !DILocalVariable(name: "use", arg: 1, scope: !13837, file: !4916, line: 427, type: !13840)
!13844 = !DILocation(line: 427, column: 33, scope: !13837)
!13845 = !DILocation(line: 429, column: 12, scope: !13837)
!13846 = !DILocation(line: 429, column: 17, scope: !13837)
!13847 = !DILocation(line: 429, column: 10, scope: !13837)
!13848 = !DILocation(line: 429, column: 3, scope: !13837)
!13849 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !4916, file: !4916, line: 434, type: !13850, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13850 = !DISubroutineType(types: !13851)
!13851 = !{!2586, !13852}
!13852 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !2578, line: 27, baseType: !2585)
!13853 = !DILocalVariable(name: "def", arg: 1, scope: !13849, file: !4916, line: 434, type: !13852)
!13854 = !DILocation(line: 434, column: 33, scope: !13849)
!13855 = !DILocation(line: 436, column: 11, scope: !13849)
!13856 = !DILocation(line: 436, column: 10, scope: !13849)
!13857 = !DILocation(line: 436, column: 3, scope: !13849)
!13858 = distinct !DISubprogram(name: "ei_start_1", scope: !337, file: !337, line: 696, type: !13859, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13859 = !DISubroutineType(types: !13860)
!13860 = !{!13187, !13192}
!13861 = !DILocalVariable(name: "ev", arg: 1, scope: !13858, file: !337, line: 696, type: !13192)
!13862 = !DILocation(line: 696, column: 28, scope: !13858)
!13863 = !DILocalVariable(name: "i", scope: !13858, file: !337, line: 698, type: !13187)
!13864 = !DILocation(line: 698, column: 17, scope: !13858)
!13865 = !DILocation(line: 700, column: 5, scope: !13858)
!13866 = !DILocation(line: 700, column: 11, scope: !13858)
!13867 = !DILocation(line: 701, column: 17, scope: !13858)
!13868 = !DILocation(line: 701, column: 5, scope: !13858)
!13869 = !DILocation(line: 701, column: 15, scope: !13858)
!13870 = !DILocation(line: 703, column: 3, scope: !13858)
!13871 = distinct !DISubprogram(name: "ei_cond", scope: !337, file: !337, line: 771, type: !13872, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13872 = !DISubroutineType(types: !13873)
!13873 = !{!2706, !13187, !13874}
!13874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2897, size: 64)
!13875 = !DILocalVariable(name: "ei", arg: 1, scope: !13871, file: !337, line: 771, type: !13187)
!13876 = !DILocation(line: 771, column: 24, scope: !13871)
!13877 = !DILocalVariable(name: "p", arg: 2, scope: !13871, file: !337, line: 771, type: !13874)
!13878 = !DILocation(line: 771, column: 34, scope: !13871)
!13879 = !DILocation(line: 773, column: 8, scope: !13880)
!13880 = distinct !DILexicalBlock(scope: !13871, file: !337, line: 773, column: 7)
!13881 = !DILocation(line: 773, column: 7, scope: !13871)
!13882 = !DILocation(line: 775, column: 12, scope: !13883)
!13883 = distinct !DILexicalBlock(scope: !13880, file: !337, line: 774, column: 5)
!13884 = !DILocation(line: 775, column: 8, scope: !13883)
!13885 = !DILocation(line: 775, column: 10, scope: !13883)
!13886 = !DILocation(line: 776, column: 7, scope: !13883)
!13887 = !DILocation(line: 780, column: 8, scope: !13888)
!13888 = distinct !DILexicalBlock(scope: !13880, file: !337, line: 779, column: 5)
!13889 = !DILocation(line: 780, column: 10, scope: !13888)
!13890 = !DILocation(line: 781, column: 7, scope: !13888)
!13891 = !DILocation(line: 783, column: 1, scope: !13871)
!13892 = distinct !DISubprogram(name: "ei_next", scope: !337, file: !337, line: 736, type: !13893, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13893 = !DISubroutineType(types: !13894)
!13894 = !{null, !13895}
!13895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13187, size: 64)
!13896 = !DILocalVariable(name: "i", arg: 1, scope: !13892, file: !337, line: 736, type: !13895)
!13897 = !DILocation(line: 736, column: 25, scope: !13892)
!13898 = !DILocation(line: 738, column: 3, scope: !13892)
!13899 = !DILocation(line: 739, column: 3, scope: !13892)
!13900 = !DILocation(line: 739, column: 6, scope: !13892)
!13901 = !DILocation(line: 739, column: 11, scope: !13892)
!13902 = !DILocation(line: 740, column: 1, scope: !13892)
!13903 = distinct !DISubprogram(name: "update_ssa_across_abnormal_edges", scope: !3, file: !3, line: 1761, type: !13904, scopeLine: 1763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13904 = !DISubroutineType(types: !13905)
!13905 = !{null, !3473, !3473, !2706, !2706}
!13906 = !DILocalVariable(name: "bb", arg: 1, scope: !13903, file: !3, line: 1761, type: !3473)
!13907 = !DILocation(line: 1761, column: 47, scope: !13903)
!13908 = !DILocalVariable(name: "ret_bb", arg: 2, scope: !13903, file: !3, line: 1761, type: !3473)
!13909 = !DILocation(line: 1761, column: 63, scope: !13903)
!13910 = !DILocalVariable(name: "can_throw", arg: 3, scope: !13903, file: !3, line: 1762, type: !2706)
!13911 = !DILocation(line: 1762, column: 12, scope: !13903)
!13912 = !DILocalVariable(name: "nonlocal_goto", arg: 4, scope: !13903, file: !3, line: 1762, type: !2706)
!13913 = !DILocation(line: 1762, column: 28, scope: !13903)
!13914 = !DILocalVariable(name: "e", scope: !13903, file: !3, line: 1764, type: !2897)
!13915 = !DILocation(line: 1764, column: 8, scope: !13903)
!13916 = !DILocalVariable(name: "ei", scope: !13903, file: !3, line: 1765, type: !13187)
!13917 = !DILocation(line: 1765, column: 17, scope: !13903)
!13918 = !DILocation(line: 1767, column: 3, scope: !13919)
!13919 = distinct !DILexicalBlock(scope: !13903, file: !3, line: 1767, column: 3)
!13920 = !DILocation(line: 1767, column: 3, scope: !13921)
!13921 = distinct !DILexicalBlock(scope: !13919, file: !3, line: 1767, column: 3)
!13922 = !DILocation(line: 1768, column: 10, scope: !13923)
!13923 = distinct !DILexicalBlock(scope: !13921, file: !3, line: 1768, column: 9)
!13924 = !DILocation(line: 1768, column: 13, scope: !13923)
!13925 = !DILocation(line: 1768, column: 19, scope: !13923)
!13926 = !DILocation(line: 1769, column: 2, scope: !13923)
!13927 = !DILocation(line: 1769, column: 19, scope: !13923)
!13928 = !DILocation(line: 1769, column: 22, scope: !13923)
!13929 = !DILocation(line: 1769, column: 28, scope: !13923)
!13930 = !DILocation(line: 1769, column: 6, scope: !13923)
!13931 = !DILocation(line: 1769, column: 34, scope: !13923)
!13932 = !DILocation(line: 1769, column: 40, scope: !13923)
!13933 = !DILocation(line: 1768, column: 9, scope: !13921)
!13934 = !DILocalVariable(name: "phi", scope: !13935, file: !3, line: 1771, type: !2917)
!13935 = distinct !DILexicalBlock(scope: !13923, file: !3, line: 1770, column: 7)
!13936 = !DILocation(line: 1771, column: 9, scope: !13935)
!13937 = !DILocalVariable(name: "si", scope: !13935, file: !3, line: 1772, type: !4261)
!13938 = !DILocation(line: 1772, column: 23, scope: !13935)
!13939 = !DILocation(line: 1774, column: 7, scope: !13940)
!13940 = distinct !DILexicalBlock(scope: !13935, file: !3, line: 1774, column: 6)
!13941 = !DILocation(line: 1774, column: 6, scope: !13935)
!13942 = !DILocation(line: 1775, column: 4, scope: !13940)
!13943 = !DILocation(line: 1777, column: 7, scope: !13944)
!13944 = distinct !DILexicalBlock(scope: !13935, file: !3, line: 1777, column: 6)
!13945 = !DILocation(line: 1777, column: 6, scope: !13935)
!13946 = !DILocation(line: 1778, column: 4, scope: !13944)
!13947 = !DILocation(line: 1780, column: 28, scope: !13948)
!13948 = distinct !DILexicalBlock(scope: !13935, file: !3, line: 1780, column: 2)
!13949 = !DILocation(line: 1780, column: 31, scope: !13948)
!13950 = !DILocation(line: 1780, column: 12, scope: !13948)
!13951 = !DILocation(line: 1780, column: 7, scope: !13948)
!13952 = !DILocation(line: 1780, column: 39, scope: !13953)
!13953 = distinct !DILexicalBlock(scope: !13948, file: !3, line: 1780, column: 2)
!13954 = !DILocation(line: 1780, column: 38, scope: !13953)
!13955 = !DILocation(line: 1780, column: 2, scope: !13948)
!13956 = !DILocalVariable(name: "re", scope: !13957, file: !3, line: 1782, type: !2897)
!13957 = distinct !DILexicalBlock(scope: !13953, file: !3, line: 1781, column: 4)
!13958 = !DILocation(line: 1782, column: 11, scope: !13957)
!13959 = !DILocation(line: 1784, column: 12, scope: !13957)
!13960 = !DILocation(line: 1784, column: 10, scope: !13957)
!13961 = !DILocation(line: 1787, column: 6, scope: !13957)
!13962 = !DILocation(line: 1789, column: 6, scope: !13957)
!13963 = !DILocation(line: 1792, column: 26, scope: !13964)
!13964 = distinct !DILexicalBlock(scope: !13957, file: !3, line: 1792, column: 10)
!13965 = !DILocation(line: 1792, column: 11, scope: !13964)
!13966 = !DILocation(line: 1792, column: 10, scope: !13957)
!13967 = !DILocation(line: 1794, column: 26, scope: !13968)
!13968 = distinct !DILexicalBlock(scope: !13964, file: !3, line: 1793, column: 8)
!13969 = !DILocation(line: 1794, column: 3, scope: !13968)
!13970 = !DILocation(line: 1795, column: 3, scope: !13968)
!13971 = !DILocation(line: 1798, column: 22, scope: !13957)
!13972 = !DILocation(line: 1798, column: 30, scope: !13957)
!13973 = !DILocation(line: 1798, column: 33, scope: !13957)
!13974 = !DILocation(line: 1798, column: 11, scope: !13957)
!13975 = !DILocation(line: 1798, column: 9, scope: !13957)
!13976 = !DILocation(line: 1799, column: 6, scope: !13957)
!13977 = !DILocation(line: 1800, column: 6, scope: !13957)
!13978 = !DILocation(line: 1803, column: 6, scope: !13957)
!13979 = !DILocation(line: 1805, column: 4, scope: !13957)
!13980 = !DILocation(line: 1780, column: 55, scope: !13953)
!13981 = !DILocation(line: 1780, column: 2, scope: !13953)
!13982 = distinct !{!13982, !13955, !13983}
!13983 = !DILocation(line: 1805, column: 4, scope: !13948)
!13984 = !DILocation(line: 1806, column: 7, scope: !13935)
!13985 = !DILocation(line: 1769, column: 43, scope: !13923)
!13986 = distinct !{!13986, !13918, !13987}
!13987 = !DILocation(line: 1806, column: 7, scope: !13919)
!13988 = !DILocation(line: 1807, column: 1, scope: !13903)
!13989 = distinct !DISubprogram(name: "ei_end_p", scope: !337, file: !337, line: 721, type: !13990, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!13990 = !DISubroutineType(types: !13991)
!13991 = !{!2706, !13187}
!13992 = !DILocalVariable(name: "i", arg: 1, scope: !13989, file: !337, line: 721, type: !13187)
!13993 = !DILocation(line: 721, column: 25, scope: !13989)
!13994 = !DILocation(line: 723, column: 13, scope: !13989)
!13995 = !DILocation(line: 723, column: 22, scope: !13989)
!13996 = !DILocation(line: 723, column: 19, scope: !13989)
!13997 = !DILocation(line: 723, column: 10, scope: !13989)
!13998 = !DILocation(line: 723, column: 3, scope: !13989)
!13999 = distinct !DISubprogram(name: "ei_edge", scope: !337, file: !337, line: 752, type: !14000, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14000 = !DISubroutineType(types: !14001)
!14001 = !{!2897, !13187}
!14002 = !DILocalVariable(name: "i", arg: 1, scope: !13999, file: !337, line: 752, type: !13187)
!14003 = !DILocation(line: 752, column: 24, scope: !13999)
!14004 = !DILocation(line: 754, column: 10, scope: !13999)
!14005 = !DILocation(line: 754, column: 3, scope: !13999)
!14006 = distinct !DISubprogram(name: "ei_container", scope: !337, file: !337, line: 685, type: !14007, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14007 = !DISubroutineType(types: !14008)
!14008 = !{!2885, !13187}
!14009 = !DILocalVariable(name: "i", arg: 1, scope: !14006, file: !337, line: 685, type: !13187)
!14010 = !DILocation(line: 685, column: 29, scope: !14006)
!14011 = !DILocation(line: 687, column: 3, scope: !14006)
!14012 = !DILocation(line: 688, column: 13, scope: !14006)
!14013 = !DILocation(line: 688, column: 10, scope: !14006)
!14014 = !DILocation(line: 688, column: 3, scope: !14006)
!14015 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !1618, file: !1618, line: 3080, type: !10887, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14016 = !DILocalVariable(name: "gs", arg: 1, scope: !14015, file: !1618, line: 3080, type: !2917)
!14017 = !DILocation(line: 3080, column: 31, scope: !14015)
!14018 = !DILocation(line: 3083, column: 11, scope: !14015)
!14019 = !DILocation(line: 3083, column: 15, scope: !14015)
!14020 = !DILocation(line: 3083, column: 26, scope: !14015)
!14021 = !DILocation(line: 3083, column: 3, scope: !14015)
!14022 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !4916, file: !4916, line: 233, type: !14023, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14023 = !DISubroutineType(types: !14024)
!14024 = !{null, !13840, !2586}
!14025 = !DILocalVariable(name: "use", arg: 1, scope: !14022, file: !4916, line: 233, type: !13840)
!14026 = !DILocation(line: 233, column: 37, scope: !14022)
!14027 = !DILocalVariable(name: "val", arg: 2, scope: !14022, file: !4916, line: 233, type: !2586)
!14028 = !DILocation(line: 233, column: 47, scope: !14022)
!14029 = !DILocation(line: 235, column: 19, scope: !14022)
!14030 = !DILocation(line: 235, column: 3, scope: !14022)
!14031 = !DILocation(line: 236, column: 17, scope: !14022)
!14032 = !DILocation(line: 236, column: 5, scope: !14022)
!14033 = !DILocation(line: 236, column: 10, scope: !14022)
!14034 = !DILocation(line: 236, column: 15, scope: !14022)
!14035 = !DILocation(line: 237, column: 17, scope: !14022)
!14036 = !DILocation(line: 237, column: 22, scope: !14022)
!14037 = !DILocation(line: 237, column: 3, scope: !14022)
!14038 = !DILocation(line: 238, column: 1, scope: !14022)
!14039 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !4916, file: !4916, line: 442, type: !14040, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14040 = !DISubroutineType(types: !14041)
!14041 = !{!13840, !2917, !2683}
!14042 = !DILocalVariable(name: "gs", arg: 1, scope: !14039, file: !4916, line: 442, type: !2917)
!14043 = !DILocation(line: 442, column: 36, scope: !14039)
!14044 = !DILocalVariable(name: "i", arg: 2, scope: !14039, file: !4916, line: 442, type: !2683)
!14045 = !DILocation(line: 442, column: 44, scope: !14039)
!14046 = !DILocation(line: 444, column: 27, scope: !14039)
!14047 = !DILocation(line: 444, column: 31, scope: !14039)
!14048 = !DILocation(line: 444, column: 11, scope: !14039)
!14049 = !DILocation(line: 444, column: 35, scope: !14039)
!14050 = !DILocation(line: 444, column: 3, scope: !14039)
!14051 = distinct !DISubprogram(name: "delink_imm_use", scope: !4916, file: !4916, line: 188, type: !14052, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14052 = !DISubroutineType(types: !14053)
!14053 = !{null, !13841}
!14054 = !DILocalVariable(name: "linknode", arg: 1, scope: !14051, file: !4916, line: 188, type: !13841)
!14055 = !DILocation(line: 188, column: 36, scope: !14051)
!14056 = !DILocation(line: 191, column: 7, scope: !14057)
!14057 = distinct !DILexicalBlock(scope: !14051, file: !4916, line: 191, column: 7)
!14058 = !DILocation(line: 191, column: 17, scope: !14057)
!14059 = !DILocation(line: 191, column: 22, scope: !14057)
!14060 = !DILocation(line: 191, column: 7, scope: !14051)
!14061 = !DILocation(line: 192, column: 5, scope: !14057)
!14062 = !DILocation(line: 194, column: 26, scope: !14051)
!14063 = !DILocation(line: 194, column: 36, scope: !14051)
!14064 = !DILocation(line: 194, column: 3, scope: !14051)
!14065 = !DILocation(line: 194, column: 13, scope: !14051)
!14066 = !DILocation(line: 194, column: 19, scope: !14051)
!14067 = !DILocation(line: 194, column: 24, scope: !14051)
!14068 = !DILocation(line: 195, column: 26, scope: !14051)
!14069 = !DILocation(line: 195, column: 36, scope: !14051)
!14070 = !DILocation(line: 195, column: 3, scope: !14051)
!14071 = !DILocation(line: 195, column: 13, scope: !14051)
!14072 = !DILocation(line: 195, column: 19, scope: !14051)
!14073 = !DILocation(line: 195, column: 24, scope: !14051)
!14074 = !DILocation(line: 196, column: 3, scope: !14051)
!14075 = !DILocation(line: 196, column: 13, scope: !14051)
!14076 = !DILocation(line: 196, column: 18, scope: !14051)
!14077 = !DILocation(line: 197, column: 3, scope: !14051)
!14078 = !DILocation(line: 197, column: 13, scope: !14051)
!14079 = !DILocation(line: 197, column: 18, scope: !14051)
!14080 = !DILocation(line: 198, column: 1, scope: !14051)
!14081 = distinct !DISubprogram(name: "link_imm_use", scope: !4916, file: !4916, line: 214, type: !14082, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14082 = !DISubroutineType(types: !14083)
!14083 = !{null, !13841, !2586}
!14084 = !DILocalVariable(name: "linknode", arg: 1, scope: !14081, file: !4916, line: 214, type: !13841)
!14085 = !DILocation(line: 214, column: 34, scope: !14081)
!14086 = !DILocalVariable(name: "def", arg: 2, scope: !14081, file: !4916, line: 214, type: !2586)
!14087 = !DILocation(line: 214, column: 49, scope: !14081)
!14088 = !DILocalVariable(name: "root", scope: !14081, file: !4916, line: 216, type: !13841)
!14089 = !DILocation(line: 216, column: 22, scope: !14081)
!14090 = !DILocation(line: 218, column: 8, scope: !14091)
!14091 = distinct !DILexicalBlock(scope: !14081, file: !4916, line: 218, column: 7)
!14092 = !DILocation(line: 218, column: 12, scope: !14091)
!14093 = !DILocation(line: 218, column: 15, scope: !14091)
!14094 = !DILocation(line: 218, column: 31, scope: !14091)
!14095 = !DILocation(line: 218, column: 7, scope: !14081)
!14096 = !DILocation(line: 219, column: 5, scope: !14091)
!14097 = !DILocation(line: 219, column: 15, scope: !14091)
!14098 = !DILocation(line: 219, column: 20, scope: !14091)
!14099 = !DILocation(line: 222, column: 16, scope: !14100)
!14100 = distinct !DILexicalBlock(scope: !14091, file: !4916, line: 221, column: 5)
!14101 = !DILocation(line: 222, column: 12, scope: !14100)
!14102 = !DILocation(line: 227, column: 29, scope: !14100)
!14103 = !DILocation(line: 227, column: 39, scope: !14100)
!14104 = !DILocation(line: 227, column: 7, scope: !14100)
!14105 = !DILocation(line: 229, column: 1, scope: !14081)
!14106 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !4916, file: !4916, line: 202, type: !14107, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14107 = !DISubroutineType(types: !14108)
!14108 = !{null, !13841, !13841}
!14109 = !DILocalVariable(name: "linknode", arg: 1, scope: !14106, file: !4916, line: 202, type: !13841)
!14110 = !DILocation(line: 202, column: 42, scope: !14106)
!14111 = !DILocalVariable(name: "list", arg: 2, scope: !14106, file: !4916, line: 202, type: !13841)
!14112 = !DILocation(line: 202, column: 71, scope: !14106)
!14113 = !DILocation(line: 206, column: 20, scope: !14106)
!14114 = !DILocation(line: 206, column: 3, scope: !14106)
!14115 = !DILocation(line: 206, column: 13, scope: !14106)
!14116 = !DILocation(line: 206, column: 18, scope: !14106)
!14117 = !DILocation(line: 207, column: 20, scope: !14106)
!14118 = !DILocation(line: 207, column: 26, scope: !14106)
!14119 = !DILocation(line: 207, column: 3, scope: !14106)
!14120 = !DILocation(line: 207, column: 13, scope: !14106)
!14121 = !DILocation(line: 207, column: 18, scope: !14106)
!14122 = !DILocation(line: 208, column: 22, scope: !14106)
!14123 = !DILocation(line: 208, column: 3, scope: !14106)
!14124 = !DILocation(line: 208, column: 9, scope: !14106)
!14125 = !DILocation(line: 208, column: 15, scope: !14106)
!14126 = !DILocation(line: 208, column: 20, scope: !14106)
!14127 = !DILocation(line: 209, column: 16, scope: !14106)
!14128 = !DILocation(line: 209, column: 3, scope: !14106)
!14129 = !DILocation(line: 209, column: 9, scope: !14106)
!14130 = !DILocation(line: 209, column: 14, scope: !14106)
!14131 = !DILocation(line: 210, column: 1, scope: !14106)
!14132 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !1618, file: !1618, line: 3100, type: !14133, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14133 = !DISubroutineType(types: !14134)
!14134 = !{!14135, !2917, !7}
!14135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3019, size: 64)
!14136 = !DILocalVariable(name: "gs", arg: 1, scope: !14132, file: !1618, line: 3100, type: !2917)
!14137 = !DILocation(line: 3100, column: 24, scope: !14132)
!14138 = !DILocalVariable(name: "index", arg: 2, scope: !14132, file: !1618, line: 3100, type: !7)
!14139 = !DILocation(line: 3100, column: 37, scope: !14132)
!14140 = !DILocation(line: 3103, column: 3, scope: !14132)
!14141 = !DILocation(line: 3104, column: 12, scope: !14132)
!14142 = !DILocation(line: 3104, column: 16, scope: !14132)
!14143 = !DILocation(line: 3104, column: 27, scope: !14132)
!14144 = !DILocation(line: 3104, column: 32, scope: !14132)
!14145 = !DILocation(line: 3104, column: 3, scope: !14132)
!14146 = distinct !DISubprogram(name: "phi_nodes", scope: !4916, file: !4916, line: 508, type: !10008, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14147 = !DILocalVariable(name: "bb", arg: 1, scope: !14146, file: !4916, line: 508, type: !9120)
!14148 = !DILocation(line: 508, column: 30, scope: !14146)
!14149 = !DILocation(line: 510, column: 3, scope: !14146)
!14150 = !DILocation(line: 511, column: 8, scope: !14151)
!14151 = distinct !DILexicalBlock(scope: !14146, file: !4916, line: 511, column: 7)
!14152 = !DILocation(line: 511, column: 12, scope: !14151)
!14153 = !DILocation(line: 511, column: 15, scope: !14151)
!14154 = !DILocation(line: 511, column: 7, scope: !14146)
!14155 = !DILocation(line: 512, column: 5, scope: !14151)
!14156 = !DILocation(line: 513, column: 10, scope: !14146)
!14157 = !DILocation(line: 513, column: 14, scope: !14146)
!14158 = !DILocation(line: 513, column: 17, scope: !14146)
!14159 = !DILocation(line: 513, column: 25, scope: !14146)
!14160 = !DILocation(line: 513, column: 3, scope: !14146)
!14161 = !DILocation(line: 514, column: 1, scope: !14146)
!14162 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !4916, file: !4916, line: 483, type: !14163, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14163 = !DISubroutineType(types: !14164)
!14164 = !{!2716, !2917, !2897}
!14165 = !DILocalVariable(name: "gs", arg: 1, scope: !14162, file: !4916, line: 483, type: !2917)
!14166 = !DILocation(line: 483, column: 43, scope: !14162)
!14167 = !DILocalVariable(name: "e", arg: 2, scope: !14162, file: !4916, line: 483, type: !2897)
!14168 = !DILocation(line: 483, column: 52, scope: !14162)
!14169 = !DILocation(line: 485, column: 26, scope: !14162)
!14170 = !DILocation(line: 485, column: 30, scope: !14162)
!14171 = !DILocation(line: 485, column: 33, scope: !14162)
!14172 = !DILocation(line: 485, column: 10, scope: !14162)
!14173 = !DILocation(line: 485, column: 44, scope: !14162)
!14174 = !DILocation(line: 485, column: 3, scope: !14162)
!14175 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !1618, file: !1618, line: 33, type: !14176, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14176 = !DISubroutineType(types: !14177)
!14177 = !{!2683, !9131, !7, !4109}
!14178 = !DILocalVariable(name: "vec_", arg: 1, scope: !14175, file: !1618, line: 33, type: !9131)
!14179 = !DILocation(line: 33, column: 1, scope: !14175)
!14180 = !DILocalVariable(name: "ix_", arg: 2, scope: !14175, file: !1618, line: 33, type: !7)
!14181 = !DILocalVariable(name: "ptr", arg: 3, scope: !14175, file: !1618, line: 33, type: !4109)
!14182 = !DILocation(line: 33, column: 1, scope: !14183)
!14183 = distinct !DILexicalBlock(scope: !14175, file: !1618, line: 33, column: 1)
!14184 = !DILocation(line: 33, column: 1, scope: !14185)
!14185 = distinct !DILexicalBlock(scope: !14183, file: !1618, line: 33, column: 1)
!14186 = !DILocation(line: 33, column: 1, scope: !14187)
!14187 = distinct !DILexicalBlock(scope: !14183, file: !1618, line: 33, column: 1)
!14188 = distinct !DISubprogram(name: "copy_debug_stmt", scope: !3, file: !3, line: 2124, type: !14189, scopeLine: 2125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14189 = !DISubroutineType(types: !14190)
!14190 = !{null, !2917, !3983}
!14191 = !DILocalVariable(name: "stmt", arg: 1, scope: !14188, file: !3, line: 2124, type: !2917)
!14192 = !DILocation(line: 2124, column: 25, scope: !14188)
!14193 = !DILocalVariable(name: "id", arg: 2, scope: !14188, file: !3, line: 2124, type: !3983)
!14194 = !DILocation(line: 2124, column: 47, scope: !14188)
!14195 = !DILocalVariable(name: "t", scope: !14188, file: !3, line: 2126, type: !2586)
!14196 = !DILocation(line: 2126, column: 8, scope: !14188)
!14197 = !DILocalVariable(name: "n", scope: !14188, file: !3, line: 2126, type: !2585)
!14198 = !DILocation(line: 2126, column: 12, scope: !14188)
!14199 = !DILocalVariable(name: "wi", scope: !14188, file: !3, line: 2127, type: !4258)
!14200 = !DILocation(line: 2127, column: 25, scope: !14188)
!14201 = !DILocation(line: 2129, column: 7, scope: !14188)
!14202 = !DILocation(line: 2129, column: 11, scope: !14188)
!14203 = !DILocation(line: 2129, column: 5, scope: !14188)
!14204 = !DILocation(line: 2130, column: 21, scope: !14205)
!14205 = distinct !DILexicalBlock(scope: !14188, file: !3, line: 2130, column: 7)
!14206 = !DILocation(line: 2130, column: 7, scope: !14205)
!14207 = !DILocation(line: 2130, column: 7, scope: !14188)
!14208 = !DILocalVariable(name: "n", scope: !14209, file: !3, line: 2132, type: !2585)
!14209 = distinct !DILexicalBlock(scope: !14205, file: !3, line: 2131, column: 5)
!14210 = !DILocation(line: 2132, column: 13, scope: !14209)
!14211 = !DILocation(line: 2133, column: 42, scope: !14209)
!14212 = !DILocation(line: 2133, column: 46, scope: !14209)
!14213 = !DILocation(line: 2133, column: 70, scope: !14209)
!14214 = !DILocation(line: 2133, column: 56, scope: !14209)
!14215 = !DILocation(line: 2133, column: 20, scope: !14209)
!14216 = !DILocation(line: 2133, column: 11, scope: !14209)
!14217 = !DILocation(line: 2133, column: 9, scope: !14209)
!14218 = !DILocation(line: 2134, column: 11, scope: !14219)
!14219 = distinct !DILexicalBlock(scope: !14209, file: !3, line: 2134, column: 11)
!14220 = !DILocation(line: 2134, column: 11, scope: !14209)
!14221 = !DILocation(line: 2135, column: 7, scope: !14219)
!14222 = !DILocation(line: 2135, column: 6, scope: !14219)
!14223 = !DILocation(line: 2135, column: 4, scope: !14219)
!14224 = !DILocation(line: 2135, column: 2, scope: !14219)
!14225 = !DILocation(line: 2136, column: 5, scope: !14209)
!14226 = !DILocation(line: 2137, column: 21, scope: !14188)
!14227 = !DILocation(line: 2137, column: 27, scope: !14188)
!14228 = !DILocation(line: 2137, column: 3, scope: !14188)
!14229 = !DILocation(line: 2140, column: 3, scope: !14188)
!14230 = !DILocation(line: 2141, column: 13, scope: !14188)
!14231 = !DILocation(line: 2141, column: 6, scope: !14188)
!14232 = !DILocation(line: 2141, column: 11, scope: !14188)
!14233 = !DILocation(line: 2143, column: 25, scope: !14188)
!14234 = !DILocation(line: 2145, column: 34, scope: !14188)
!14235 = !DILocation(line: 2145, column: 7, scope: !14188)
!14236 = !DILocation(line: 2145, column: 5, scope: !14188)
!14237 = !DILocation(line: 2147, column: 7, scope: !14238)
!14238 = distinct !DILexicalBlock(scope: !14188, file: !3, line: 2147, column: 7)
!14239 = !DILocation(line: 2147, column: 21, scope: !14238)
!14240 = !DILocation(line: 2147, column: 34, scope: !14238)
!14241 = !DILocation(line: 2147, column: 37, scope: !14238)
!14242 = !DILocation(line: 2147, column: 41, scope: !14238)
!14243 = !DILocation(line: 2148, column: 7, scope: !14238)
!14244 = !DILocation(line: 2148, column: 46, scope: !14238)
!14245 = !DILocation(line: 2148, column: 50, scope: !14238)
!14246 = !DILocation(line: 2148, column: 61, scope: !14238)
!14247 = !DILocation(line: 2148, column: 24, scope: !14238)
!14248 = !DILocation(line: 2148, column: 15, scope: !14238)
!14249 = !DILocation(line: 2148, column: 13, scope: !14238)
!14250 = !DILocation(line: 2147, column: 7, scope: !14188)
!14251 = !DILocation(line: 2150, column: 7, scope: !14252)
!14252 = distinct !DILexicalBlock(scope: !14238, file: !3, line: 2149, column: 5)
!14253 = !DILocation(line: 2151, column: 12, scope: !14252)
!14254 = !DILocation(line: 2151, column: 11, scope: !14252)
!14255 = !DILocation(line: 2151, column: 9, scope: !14252)
!14256 = !DILocation(line: 2152, column: 5, scope: !14252)
!14257 = !DILocation(line: 2153, column: 12, scope: !14258)
!14258 = distinct !DILexicalBlock(scope: !14238, file: !3, line: 2153, column: 12)
!14259 = !DILocation(line: 2153, column: 26, scope: !14258)
!14260 = !DILocation(line: 2154, column: 5, scope: !14258)
!14261 = !DILocation(line: 2154, column: 9, scope: !14258)
!14262 = !DILocation(line: 2155, column: 5, scope: !14258)
!14263 = !DILocation(line: 2155, column: 25, scope: !14258)
!14264 = !DILocation(line: 2155, column: 8, scope: !14258)
!14265 = !DILocation(line: 2156, column: 5, scope: !14258)
!14266 = !DILocation(line: 2156, column: 31, scope: !14258)
!14267 = !DILocation(line: 2156, column: 35, scope: !14258)
!14268 = !DILocation(line: 2156, column: 45, scope: !14258)
!14269 = !DILocation(line: 2156, column: 9, scope: !14258)
!14270 = !DILocation(line: 2157, column: 5, scope: !14258)
!14271 = !DILocation(line: 2157, column: 18, scope: !14258)
!14272 = !DILocation(line: 2157, column: 9, scope: !14258)
!14273 = !DILocation(line: 2153, column: 12, scope: !14238)
!14274 = !DILocation(line: 2160, column: 5, scope: !14258)
!14275 = !DILocation(line: 2162, column: 30, scope: !14188)
!14276 = !DILocation(line: 2162, column: 36, scope: !14188)
!14277 = !DILocation(line: 2162, column: 3, scope: !14188)
!14278 = !DILocation(line: 2164, column: 38, scope: !14279)
!14279 = distinct !DILexicalBlock(scope: !14188, file: !3, line: 2164, column: 7)
!14280 = !DILocation(line: 2164, column: 7, scope: !14279)
!14281 = !DILocation(line: 2164, column: 7, scope: !14188)
!14282 = !DILocation(line: 2165, column: 5, scope: !14279)
!14283 = !DILocation(line: 2169, column: 7, scope: !14284)
!14284 = distinct !DILexicalBlock(scope: !14188, file: !3, line: 2169, column: 7)
!14285 = !DILocation(line: 2169, column: 29, scope: !14284)
!14286 = !DILocation(line: 2169, column: 7, scope: !14188)
!14287 = !DILocation(line: 2170, column: 36, scope: !14284)
!14288 = !DILocation(line: 2170, column: 5, scope: !14284)
!14289 = !DILocation(line: 2172, column: 25, scope: !14188)
!14290 = !DILocation(line: 2174, column: 16, scope: !14188)
!14291 = !DILocation(line: 2174, column: 3, scope: !14188)
!14292 = !DILocation(line: 2175, column: 24, scope: !14293)
!14293 = distinct !DILexicalBlock(scope: !14188, file: !3, line: 2175, column: 7)
!14294 = !DILocation(line: 2175, column: 7, scope: !14293)
!14295 = !DILocation(line: 2175, column: 7, scope: !14188)
!14296 = !DILocation(line: 2176, column: 32, scope: !14293)
!14297 = !DILocation(line: 2176, column: 5, scope: !14293)
!14298 = !DILocation(line: 2177, column: 1, scope: !14188)
!14299 = distinct !DISubprogram(name: "gimple_debug_bind_set_var", scope: !1618, file: !1618, line: 3306, type: !10765, scopeLine: 3307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14300 = !DILocalVariable(name: "dbg", arg: 1, scope: !14299, file: !1618, line: 3306, type: !2917)
!14301 = !DILocation(line: 3306, column: 35, scope: !14299)
!14302 = !DILocalVariable(name: "var", arg: 2, scope: !14299, file: !1618, line: 3306, type: !2586)
!14303 = !DILocation(line: 3306, column: 45, scope: !14299)
!14304 = !DILocation(line: 3312, column: 18, scope: !14299)
!14305 = !DILocation(line: 3312, column: 26, scope: !14299)
!14306 = !DILocation(line: 3312, column: 3, scope: !14299)
!14307 = !DILocation(line: 3313, column: 1, scope: !14299)
!14308 = distinct !DISubprogram(name: "gimple_debug_bind_has_value_p", scope: !1618, file: !1618, line: 3349, type: !10286, scopeLine: 3350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14309 = !DILocalVariable(name: "dbg", arg: 1, scope: !14308, file: !1618, line: 3349, type: !2917)
!14310 = !DILocation(line: 3349, column: 39, scope: !14308)
!14311 = !DILocation(line: 3355, column: 21, scope: !14308)
!14312 = !DILocation(line: 3355, column: 10, scope: !14308)
!14313 = !DILocation(line: 3355, column: 29, scope: !14308)
!14314 = !DILocation(line: 3355, column: 3, scope: !14308)
!14315 = distinct !DISubprogram(name: "gimple_debug_bind_get_value_ptr", scope: !1618, file: !1618, line: 3294, type: !10887, scopeLine: 3295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14316 = !DILocalVariable(name: "dbg", arg: 1, scope: !14315, file: !1618, line: 3294, type: !2917)
!14317 = !DILocation(line: 3294, column: 41, scope: !14315)
!14318 = !DILocation(line: 3300, column: 25, scope: !14315)
!14319 = !DILocation(line: 3300, column: 10, scope: !14315)
!14320 = !DILocation(line: 3300, column: 3, scope: !14315)
!14321 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !1618, file: !1618, line: 3336, type: !12074, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14322 = !DILocalVariable(name: "dbg", arg: 1, scope: !14321, file: !1618, line: 3336, type: !2917)
!14323 = !DILocation(line: 3336, column: 39, scope: !14321)
!14324 = !DILocation(line: 3342, column: 18, scope: !14321)
!14325 = !DILocation(line: 3342, column: 3, scope: !14321)
!14326 = !DILocation(line: 3343, column: 1, scope: !14321)
!14327 = distinct !DISubprogram(name: "single_succ_p", scope: !337, file: !337, line: 626, type: !14328, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14328 = !DISubroutineType(types: !14329)
!14329 = !{!2706, !9120}
!14330 = !DILocalVariable(name: "bb", arg: 1, scope: !14327, file: !337, line: 626, type: !9120)
!14331 = !DILocation(line: 626, column: 34, scope: !14327)
!14332 = !DILocation(line: 628, column: 10, scope: !14327)
!14333 = !DILocation(line: 628, column: 33, scope: !14327)
!14334 = !DILocation(line: 628, column: 3, scope: !14327)
!14335 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !1618, file: !1618, line: 1844, type: !14336, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14336 = !DISubroutineType(types: !14337)
!14337 = !{!1656, !6573}
!14338 = !DILocalVariable(name: "gs", arg: 1, scope: !14335, file: !1618, line: 1844, type: !6573)
!14339 = !DILocation(line: 1844, column: 39, scope: !14335)
!14340 = !DILocation(line: 1846, column: 56, scope: !14335)
!14341 = !DILocation(line: 1846, column: 32, scope: !14335)
!14342 = !DILocation(line: 1846, column: 10, scope: !14335)
!14343 = !DILocation(line: 1846, column: 3, scope: !14335)
!14344 = distinct !DISubprogram(name: "gimple_expr_type", scope: !1618, file: !1618, line: 4366, type: !6581, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14345 = !DILocalVariable(name: "stmt", arg: 1, scope: !14344, file: !1618, line: 4366, type: !6573)
!14346 = !DILocation(line: 4366, column: 32, scope: !14344)
!14347 = !DILocalVariable(name: "code", scope: !14344, file: !1618, line: 4368, type: !1617)
!14348 = !DILocation(line: 4368, column: 20, scope: !14344)
!14349 = !DILocation(line: 4368, column: 40, scope: !14344)
!14350 = !DILocation(line: 4368, column: 27, scope: !14344)
!14351 = !DILocation(line: 4370, column: 7, scope: !14352)
!14352 = distinct !DILexicalBlock(scope: !14344, file: !1618, line: 4370, column: 7)
!14353 = !DILocation(line: 4370, column: 12, scope: !14352)
!14354 = !DILocation(line: 4370, column: 29, scope: !14352)
!14355 = !DILocation(line: 4370, column: 32, scope: !14352)
!14356 = !DILocation(line: 4370, column: 37, scope: !14352)
!14357 = !DILocation(line: 4370, column: 7, scope: !14344)
!14358 = !DILocalVariable(name: "type", scope: !14359, file: !1618, line: 4372, type: !2586)
!14359 = distinct !DILexicalBlock(scope: !14352, file: !1618, line: 4371, column: 5)
!14360 = !DILocation(line: 4372, column: 12, scope: !14359)
!14361 = !DILocation(line: 4377, column: 11, scope: !14362)
!14362 = distinct !DILexicalBlock(scope: !14359, file: !1618, line: 4377, column: 11)
!14363 = !DILocation(line: 4377, column: 16, scope: !14362)
!14364 = !DILocation(line: 4377, column: 11, scope: !14359)
!14365 = !DILocation(line: 4378, column: 34, scope: !14362)
!14366 = !DILocation(line: 4378, column: 9, scope: !14362)
!14367 = !DILocation(line: 4378, column: 7, scope: !14362)
!14368 = !DILocation(line: 4378, column: 2, scope: !14362)
!14369 = !DILocation(line: 4380, column: 34, scope: !14362)
!14370 = !DILocation(line: 4380, column: 10, scope: !14362)
!14371 = !DILocation(line: 4380, column: 2, scope: !14362)
!14372 = !DILocation(line: 4383, column: 13, scope: !14373)
!14373 = distinct !DILexicalBlock(scope: !14362, file: !1618, line: 4381, column: 4)
!14374 = !DILocation(line: 4383, column: 11, scope: !14373)
!14375 = !DILocation(line: 4384, column: 6, scope: !14373)
!14376 = !DILocation(line: 4388, column: 13, scope: !14373)
!14377 = !DILocation(line: 4388, column: 11, scope: !14373)
!14378 = !DILocation(line: 4389, column: 6, scope: !14373)
!14379 = !DILocation(line: 4391, column: 14, scope: !14359)
!14380 = !DILocation(line: 4391, column: 7, scope: !14359)
!14381 = !DILocation(line: 4393, column: 12, scope: !14382)
!14382 = distinct !DILexicalBlock(scope: !14352, file: !1618, line: 4393, column: 12)
!14383 = !DILocation(line: 4393, column: 17, scope: !14382)
!14384 = !DILocation(line: 4393, column: 12, scope: !14352)
!14385 = !DILocation(line: 4394, column: 12, scope: !14382)
!14386 = !DILocation(line: 4394, column: 5, scope: !14382)
!14387 = !DILocation(line: 4396, column: 12, scope: !14382)
!14388 = !DILocation(line: 4396, column: 5, scope: !14382)
!14389 = !DILocation(line: 4397, column: 1, scope: !14344)
!14390 = distinct !DISubprogram(name: "gimple_assign_set_rhs_code", scope: !1618, file: !1618, line: 1832, type: !14391, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14391 = !DISubroutineType(types: !14392)
!14392 = !{null, !2917, !134}
!14393 = !DILocalVariable(name: "s", arg: 1, scope: !14390, file: !1618, line: 1832, type: !2917)
!14394 = !DILocation(line: 1832, column: 36, scope: !14390)
!14395 = !DILocalVariable(name: "code", arg: 2, scope: !14390, file: !1618, line: 1832, type: !134)
!14396 = !DILocation(line: 1832, column: 54, scope: !14390)
!14397 = !DILocation(line: 1835, column: 23, scope: !14390)
!14398 = !DILocation(line: 1835, column: 3, scope: !14390)
!14399 = !DILocation(line: 1835, column: 6, scope: !14390)
!14400 = !DILocation(line: 1835, column: 13, scope: !14390)
!14401 = !DILocation(line: 1835, column: 21, scope: !14390)
!14402 = !DILocation(line: 1836, column: 1, scope: !14390)
!14403 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !1618, file: !1618, line: 1966, type: !6581, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14404 = !DILocalVariable(name: "gs", arg: 1, scope: !14403, file: !1618, line: 1966, type: !6573)
!14405 = !DILocation(line: 1966, column: 39, scope: !14403)
!14406 = !DILocalVariable(name: "fn", scope: !14403, file: !1618, line: 1968, type: !2586)
!14407 = !DILocation(line: 1968, column: 8, scope: !14403)
!14408 = !DILocation(line: 1968, column: 29, scope: !14403)
!14409 = !DILocation(line: 1968, column: 13, scope: !14403)
!14410 = !DILocalVariable(name: "type", scope: !14403, file: !1618, line: 1969, type: !2586)
!14411 = !DILocation(line: 1969, column: 8, scope: !14403)
!14412 = !DILocation(line: 1969, column: 15, scope: !14403)
!14413 = !DILocation(line: 1972, column: 10, scope: !14403)
!14414 = !DILocation(line: 1972, column: 8, scope: !14403)
!14415 = !DILocation(line: 1976, column: 10, scope: !14403)
!14416 = !DILocation(line: 1976, column: 3, scope: !14403)
!14417 = distinct !DISubprogram(name: "init_call_expr_arg_iterator", scope: !135, file: !135, line: 5375, type: !14418, scopeLine: 5376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4303)
!14418 = !DISubroutineType(types: !14419)
!14419 = !{null, !2586, !9752}
!14420 = !DILocalVariable(name: "exp", arg: 1, scope: !14417, file: !135, line: 5375, type: !2586)
!14421 = !DILocation(line: 5375, column: 35, scope: !14417)
!14422 = !DILocalVariable(name: "iter", arg: 2, scope: !14417, file: !135, line: 5375, type: !9752)
!14423 = !DILocation(line: 5375, column: 64, scope: !14417)
!14424 = !DILocation(line: 5377, column: 13, scope: !14417)
!14425 = !DILocation(line: 5377, column: 3, scope: !14417)
!14426 = !DILocation(line: 5377, column: 9, scope: !14417)
!14427 = !DILocation(line: 5377, column: 11, scope: !14417)
!14428 = !DILocation(line: 5378, column: 13, scope: !14417)
!14429 = !DILocation(line: 5378, column: 3, scope: !14417)
!14430 = !DILocation(line: 5378, column: 9, scope: !14417)
!14431 = !DILocation(line: 5378, column: 11, scope: !14417)
!14432 = !DILocation(line: 5379, column: 3, scope: !14417)
!14433 = !DILocation(line: 5379, column: 9, scope: !14417)
!14434 = !DILocation(line: 5379, column: 11, scope: !14417)
!14435 = !DILocation(line: 5380, column: 1, scope: !14417)
